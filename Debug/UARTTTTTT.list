
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c98  0801fef8  0801fef8  0002fef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023b90  08023b90  00040a50  2**0
                  CONTENTS
  4 .ARM          00000008  08023b90  08023b90  00033b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023b98  08023b98  00040a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08023b98  08023b98  00033b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023ba0  08023ba0  00033ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  08023ba4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac74  20000a50  080245f4  00040a50  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b6c4  080245f4  0004b6c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a16b  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009099  00000000  00000000  0008abeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002440  00000000  00000000  00093c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022c0  00000000  00000000  000960c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038b77  00000000  00000000  00098388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038f3d  00000000  00000000  000d0eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f375  00000000  00000000  00109e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002291b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af58  00000000  00000000  00229204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a50 	.word	0x20000a50
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801fedc 	.word	0x0801fedc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a54 	.word	0x20000a54
 800020c:	0801fedc 	.word	0x0801fedc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b96e 	b.w	8000ef0 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468c      	mov	ip, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8083 	bne.w	8000d42 <__udivmoddi4+0x116>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d947      	bls.n	8000cd2 <__udivmoddi4+0xa6>
 8000c42:	fab2 f282 	clz	r2, r2
 8000c46:	b142      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	f1c2 0020 	rsb	r0, r2, #32
 8000c4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	ea40 0c01 	orr.w	ip, r0, r1
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbbc f6f8 	udiv	r6, ip, r8
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fb08 c116 	mls	r1, r8, r6, ip
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f10e 	mul.w	r1, r6, lr
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 8119 	bcs.w	8000eb4 <__udivmoddi4+0x288>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8116 	bls.w	8000eb4 <__udivmoddi4+0x288>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	443b      	add	r3, r7
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8105 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f240 8102 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	443c      	add	r4, r7
 8000cb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b902      	cbnz	r2, 8000cd6 <__udivmoddi4+0xaa>
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d150      	bne.n	8000d80 <__udivmoddi4+0x154>
 8000cde:	1bcb      	subs	r3, r1, r7
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	2601      	movs	r6, #1
 8000cea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cee:	0c21      	lsrs	r1, r4, #16
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0xe2>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	f200 80e9 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1ac9      	subs	r1, r1, r3
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x10c>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x10a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80d9 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e7bf      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x12e>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80b1 	beq.w	8000eae <__udivmoddi4+0x282>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x1cc>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0x140>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80b8 	bhi.w	8000edc <__udivmoddi4+0x2b0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	468c      	mov	ip, r1
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a8      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7e:	e7a5      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f603 	lsr.w	r6, r0, r3
 8000d88:	4097      	lsls	r7, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	4330      	orrs	r0, r6
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f108 	mul.w	r1, r6, r8
 8000dac:	4299      	cmp	r1, r3
 8000dae:	fa04 f402 	lsl.w	r4, r4, r2
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x19c>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dba:	f080 808d 	bcs.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 808a 	bls.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b281      	uxth	r1, r0
 8000dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd8:	fb00 f308 	mul.w	r3, r0, r8
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x1c4>
 8000de0:	1879      	adds	r1, r7, r1
 8000de2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de6:	d273      	bcs.n	8000ed0 <__udivmoddi4+0x2a4>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d971      	bls.n	8000ed0 <__udivmoddi4+0x2a4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4439      	add	r1, r7
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df6:	e778      	b.n	8000cea <__udivmoddi4+0xbe>
 8000df8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000e00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e04:	431c      	orrs	r4, r3
 8000e06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e16:	431f      	orrs	r7, r3
 8000e18:	0c3b      	lsrs	r3, r7, #16
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fa1f f884 	uxth.w	r8, r4
 8000e22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	fa02 f206 	lsl.w	r2, r2, r6
 8000e34:	fa00 f306 	lsl.w	r3, r0, r6
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x220>
 8000e3a:	1861      	adds	r1, r4, r1
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d248      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e42:	458a      	cmp	sl, r1
 8000e44:	d946      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4421      	add	r1, r4
 8000e4c:	eba1 010a 	sub.w	r1, r1, sl
 8000e50:	b2bf      	uxth	r7, r7
 8000e52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45b8      	cmp	r8, r7
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x24a>
 8000e66:	19e7      	adds	r7, r4, r7
 8000e68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e6c:	d22e      	bcs.n	8000ecc <__udivmoddi4+0x2a0>
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d92c      	bls.n	8000ecc <__udivmoddi4+0x2a0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4427      	add	r7, r4
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba7 0708 	sub.w	r7, r7, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454f      	cmp	r7, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	4649      	mov	r1, r9
 8000e88:	d31a      	bcc.n	8000ec0 <__udivmoddi4+0x294>
 8000e8a:	d017      	beq.n	8000ebc <__udivmoddi4+0x290>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x27a>
 8000e8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e92:	eb67 0701 	sbc.w	r7, r7, r1
 8000e96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e9a:	40f2      	lsrs	r2, r6
 8000e9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ea0:	40f7      	lsrs	r7, r6
 8000ea2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e70b      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fd      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ebc:	4543      	cmp	r3, r8
 8000ebe:	d2e5      	bcs.n	8000e8c <__udivmoddi4+0x260>
 8000ec0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7df      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e7d2      	b.n	8000e76 <__udivmoddi4+0x24a>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	e78d      	b.n	8000df0 <__udivmoddi4+0x1c4>
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e7b9      	b.n	8000e4c <__udivmoddi4+0x220>
 8000ed8:	4666      	mov	r6, ip
 8000eda:	e775      	b.n	8000dc8 <__udivmoddi4+0x19c>
 8000edc:	4630      	mov	r0, r6
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x14a>
 8000ee0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee4:	4439      	add	r1, r7
 8000ee6:	e713      	b.n	8000d10 <__udivmoddi4+0xe4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	e724      	b.n	8000d38 <__udivmoddi4+0x10c>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <vApplicationGetIdleTaskMemory+0x30>)
 8000f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000a6c 	.word	0x20000a6c
 8000f24:	20000ac0 	.word	0x20000ac0

08000f28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d013      	beq.n	8000f68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f50:	e000      	b.n	8000f54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f9      	beq.n	8000f52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	int i=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e009      	b.n	8000fa0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffc7 	bl	8000f28 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf1      	blt.n	8000f8c <_write+0x16>
	return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b0b8      	sub	sp, #224	; 0xe0
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	memset(gps.day,0,sizeof(gps));
 8000fba:	221b      	movs	r2, #27
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4888      	ldr	r0, [pc, #544]	; (80011e0 <main+0x22c>)
 8000fc0:	f017 fa2e 	bl	8018420 <memset>
	// ZDA-38;RMC-68
	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8000fc4:	4b87      	ldr	r3, [pc, #540]	; (80011e4 <main+0x230>)
 8000fc6:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8000fd0:	4a85      	ldr	r2, [pc, #532]	; (80011e8 <main+0x234>)
 8000fd2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd8:	c303      	stmia	r3!, {r0, r1}
 8000fda:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8000fdc:	4b83      	ldr	r3, [pc, #524]	; (80011ec <main+0x238>)
 8000fde:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 8000fe8:	4a81      	ldr	r2, [pc, #516]	; (80011f0 <main+0x23c>)
 8000fea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fee:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff0:	c303      	stmia	r3!, {r0, r1}
 8000ff2:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8000ff4:	4b7f      	ldr	r3, [pc, #508]	; (80011f4 <main+0x240>)
 8000ff6:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 8001000:	4a7d      	ldr	r2, [pc, #500]	; (80011f8 <main+0x244>)
 8001002:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001006:	ca07      	ldmia	r2, {r0, r1, r2}
 8001008:	c303      	stmia	r3!, {r0, r1}
 800100a:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 800100c:	4b7b      	ldr	r3, [pc, #492]	; (80011fc <main+0x248>)
 800100e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8001012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 8001018:	4a79      	ldr	r2, [pc, #484]	; (8001200 <main+0x24c>)
 800101a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800101e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001020:	c303      	stmia	r3!, {r0, r1}
 8001022:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 8001024:	4b77      	ldr	r3, [pc, #476]	; (8001204 <main+0x250>)
 8001026:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 8001030:	4a75      	ldr	r2, [pc, #468]	; (8001208 <main+0x254>)
 8001032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001036:	ca07      	ldmia	r2, {r0, r1, r2}
 8001038:	c303      	stmia	r3!, {r0, r1}
 800103a:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 800103c:	4b73      	ldr	r3, [pc, #460]	; (800120c <main+0x258>)
 800103e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 8001048:	4a71      	ldr	r2, [pc, #452]	; (8001210 <main+0x25c>)
 800104a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800104e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001050:	c303      	stmia	r3!, {r0, r1}
 8001052:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 8001054:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <main+0x260>)
 8001056:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800105a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8001060:	4a6d      	ldr	r2, [pc, #436]	; (8001218 <main+0x264>)
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	c303      	stmia	r3!, {r0, r1}
 800106a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fdef 	bl	8002c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f8da 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fa40 	bl	80014f8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001078:	f000 f9fc 	bl	8001474 <MX_USART6_UART_Init>
  MX_UART7_Init();
 800107c:	f000 f9ca 	bl	8001414 <MX_UART7_Init>
  MX_RTC_Init();
 8001080:	f000 f96c 	bl	800135c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 8001084:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	2210      	movs	r2, #16
 800108e:	4863      	ldr	r0, [pc, #396]	; (800121c <main+0x268>)
 8001090:	f005 f8b8 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001094:	2064      	movs	r0, #100	; 0x64
 8001096:	f001 fe07 	bl	8002ca8 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 800109a:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	220a      	movs	r2, #10
 80010a4:	485d      	ldr	r0, [pc, #372]	; (800121c <main+0x268>)
 80010a6:	f005 f8ad 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 80010aa:	2064      	movs	r0, #100	; 0x64
 80010ac:	f001 fdfc 	bl	8002ca8 <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 80010b0:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80010b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b8:	2210      	movs	r2, #16
 80010ba:	4858      	ldr	r0, [pc, #352]	; (800121c <main+0x268>)
 80010bc:	f005 f8a2 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f001 fdf1 	bl	8002ca8 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 80010c6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	220a      	movs	r2, #10
 80010d0:	4852      	ldr	r0, [pc, #328]	; (800121c <main+0x268>)
 80010d2:	f005 f897 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f001 fde6 	bl	8002ca8 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 80010dc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80010e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e4:	2210      	movs	r2, #16
 80010e6:	484d      	ldr	r0, [pc, #308]	; (800121c <main+0x268>)
 80010e8:	f005 f88c 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 80010ec:	2064      	movs	r0, #100	; 0x64
 80010ee:	f001 fddb 	bl	8002ca8 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 80010f2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	220a      	movs	r2, #10
 80010fc:	4847      	ldr	r0, [pc, #284]	; (800121c <main+0x268>)
 80010fe:	f005 f881 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f001 fdd0 	bl	8002ca8 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 8001108:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800110c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001110:	2210      	movs	r2, #16
 8001112:	4842      	ldr	r0, [pc, #264]	; (800121c <main+0x268>)
 8001114:	f005 f876 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001118:	2064      	movs	r0, #100	; 0x64
 800111a:	f001 fdc5 	bl	8002ca8 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 800111e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	220a      	movs	r2, #10
 8001128:	483c      	ldr	r0, [pc, #240]	; (800121c <main+0x268>)
 800112a:	f005 f86b 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f001 fdba 	bl	8002ca8 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 8001134:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113c:	2210      	movs	r2, #16
 800113e:	4837      	ldr	r0, [pc, #220]	; (800121c <main+0x268>)
 8001140:	f005 f860 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001144:	2064      	movs	r0, #100	; 0x64
 8001146:	f001 fdaf 	bl	8002ca8 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 800114a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	220a      	movs	r2, #10
 8001154:	4831      	ldr	r0, [pc, #196]	; (800121c <main+0x268>)
 8001156:	f005 f855 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 800115a:	2064      	movs	r0, #100	; 0x64
 800115c:	f001 fda4 	bl	8002ca8 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 8001160:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	2210      	movs	r2, #16
 800116a:	482c      	ldr	r0, [pc, #176]	; (800121c <main+0x268>)
 800116c:	f005 f84a 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f001 fd99 	bl	8002ca8 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 8001176:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	220a      	movs	r2, #10
 8001180:	4826      	ldr	r0, [pc, #152]	; (800121c <main+0x268>)
 8001182:	f005 f83f 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001186:	2064      	movs	r0, #100	; 0x64
 8001188:	f001 fd8e 	bl	8002ca8 <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 800118c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	2210      	movs	r2, #16
 8001196:	4821      	ldr	r0, [pc, #132]	; (800121c <main+0x268>)
 8001198:	f005 f834 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 800119c:	2064      	movs	r0, #100	; 0x64
 800119e:	f001 fd83 	bl	8002ca8 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 80011a2:	f107 011c 	add.w	r1, r7, #28
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	220a      	movs	r2, #10
 80011ac:	481b      	ldr	r0, [pc, #108]	; (800121c <main+0x268>)
 80011ae:	f005 f829 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(100);
 80011b2:	2064      	movs	r0, #100	; 0x64
 80011b4:	f001 fd78 	bl	8002ca8 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <main+0x26c>)
 80011ba:	463c      	mov	r4, r7
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011ca:	463b      	mov	r3, r7
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 f878 	bl	80082c4 <osThreadCreate>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <main+0x270>)
 80011d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011da:	f007 f85c 	bl	8008296 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011de:	e7fe      	b.n	80011de <main+0x22a>
 80011e0:	20004c40 	.word	0x20004c40
 80011e4:	0801ff04 	.word	0x0801ff04
 80011e8:	0801ff14 	.word	0x0801ff14
 80011ec:	0801ff20 	.word	0x0801ff20
 80011f0:	0801ff30 	.word	0x0801ff30
 80011f4:	0801ff3c 	.word	0x0801ff3c
 80011f8:	0801ff4c 	.word	0x0801ff4c
 80011fc:	0801ff58 	.word	0x0801ff58
 8001200:	0801ff68 	.word	0x0801ff68
 8001204:	0801ff74 	.word	0x0801ff74
 8001208:	0801ff84 	.word	0x0801ff84
 800120c:	0801ff90 	.word	0x0801ff90
 8001210:	0801ffa0 	.word	0x0801ffa0
 8001214:	0801ffac 	.word	0x0801ffac
 8001218:	0801ffbc 	.word	0x0801ffbc
 800121c:	20004c60 	.word	0x20004c60
 8001220:	0801ffc8 	.word	0x0801ffc8
 8001224:	20004c5c 	.word	0x20004c5c

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0b4      	sub	sp, #208	; 0xd0
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f017 f8f2 	bl	8018420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	2284      	movs	r2, #132	; 0x84
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f017 f8e3 	bl	8018420 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800125a:	f003 f873 	bl	8004344 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <SystemClock_Config+0x12c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a3c      	ldr	r2, [pc, #240]	; (8001354 <SystemClock_Config+0x12c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <SystemClock_Config+0x12c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001276:	4b38      	ldr	r3, [pc, #224]	; (8001358 <SystemClock_Config+0x130>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a37      	ldr	r2, [pc, #220]	; (8001358 <SystemClock_Config+0x130>)
 800127c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <SystemClock_Config+0x130>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800128e:	2309      	movs	r3, #9
 8001290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001298:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012b0:	2319      	movs	r3, #25
 80012b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80012b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012c4:	2309      	movs	r3, #9
 80012c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 f898 	bl	8004404 <HAL_RCC_OscConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012da:	f001 fa6b 	bl	80027b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012de:	f003 f841 	bl	8004364 <HAL_PWREx_EnableOverDrive>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012e8:	f001 fa64 	bl	80027b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001302:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800130e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001312:	2106      	movs	r1, #6
 8001314:	4618      	mov	r0, r3
 8001316:	f003 fb19 	bl	800494c <HAL_RCC_ClockConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001320:	f001 fa48 	bl	80027b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8001324:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001328:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001330:	2300      	movs	r3, #0
 8001332:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fd0d 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001348:	f001 fa34 	bl	80027b4 <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	37d0      	adds	r7, #208	; 0xd0
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <MX_RTC_Init+0xb0>)
 800137a:	4a25      	ldr	r2, [pc, #148]	; (8001410 <MX_RTC_Init+0xb4>)
 800137c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <MX_RTC_Init+0xb0>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_RTC_Init+0xb0>)
 8001386:	227f      	movs	r2, #127	; 0x7f
 8001388:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_RTC_Init+0xb0>)
 800138c:	22ff      	movs	r2, #255	; 0xff
 800138e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_RTC_Init+0xb0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_RTC_Init+0xb0>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_RTC_Init+0xb0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <MX_RTC_Init+0xb0>)
 80013a4:	f004 f8ca 	bl	800553c <HAL_RTC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80013ae:	f001 fa01 	bl	80027b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80013b2:	2317      	movs	r3, #23
 80013b4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 59;
 80013b6:	233b      	movs	r3, #59	; 0x3b
 80013b8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	4619      	mov	r1, r3
 80013ce:	480f      	ldr	r0, [pc, #60]	; (800140c <MX_RTC_Init+0xb0>)
 80013d0:	f004 f946 	bl	8005660 <HAL_RTC_SetTime>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80013da:	f001 f9eb 	bl	80027b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80013de:	2307      	movs	r3, #7
 80013e0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_DECEMBER;
 80013e2:	2312      	movs	r3, #18
 80013e4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 31;
 80013e6:	231f      	movs	r3, #31
 80013e8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_RTC_Init+0xb0>)
 80013f6:	f004 fa4f 	bl	8005898 <HAL_RTC_SetDate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001400:	f001 f9d8 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20004cec 	.word	0x20004cec
 8001410:	40002800 	.word	0x40002800

08001414 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_UART7_Init+0x58>)
 800141a:	4a15      	ldr	r2, [pc, #84]	; (8001470 <MX_UART7_Init+0x5c>)
 800141c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_UART7_Init+0x58>)
 8001420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001424:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_UART7_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_UART7_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_UART7_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_UART7_Init+0x58>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_UART7_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_UART7_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_UART7_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_UART7_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_UART7_Init+0x58>)
 8001458:	f004 fe86 	bl	8006168 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001462:	f001 f9a7 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20004c60 	.word	0x20004c60
 8001470:	40007800 	.word	0x40007800

08001474 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_RXNE);
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_USART6_UART_Init+0x78>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_USART6_UART_Init+0x78>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0220 	orr.w	r2, r2, #32
 8001486:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_IDLE);
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_USART6_UART_Init+0x78>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_USART6_UART_Init+0x78>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0210 	orr.w	r2, r2, #16
 8001496:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 800149a:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <MX_USART6_UART_Init+0x80>)
 800149c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <MX_USART6_UART_Init+0x7c>)
 80014d8:	f004 fe46 	bl	8006168 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART6_UART_Init+0x72>
  {
    Error_Handler();
 80014e2:	f001 f967 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20004c60 	.word	0x20004c60
 80014f0:	20004d10 	.word	0x20004d10
 80014f4:	40011400 	.word	0x40011400

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	4bae      	ldr	r3, [pc, #696]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4aad      	ldr	r2, [pc, #692]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4bab      	ldr	r3, [pc, #684]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001526:	4ba8      	ldr	r3, [pc, #672]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4aa7      	ldr	r2, [pc, #668]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4ba5      	ldr	r3, [pc, #660]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4ba2      	ldr	r3, [pc, #648]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4aa1      	ldr	r2, [pc, #644]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b9f      	ldr	r3, [pc, #636]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	623b      	str	r3, [r7, #32]
 8001554:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	4b9c      	ldr	r3, [pc, #624]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a9b      	ldr	r2, [pc, #620]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a95      	ldr	r2, [pc, #596]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b93      	ldr	r3, [pc, #588]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a8f      	ldr	r2, [pc, #572]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b8d      	ldr	r3, [pc, #564]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800159e:	4b8a      	ldr	r3, [pc, #552]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a89      	ldr	r2, [pc, #548]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b87      	ldr	r3, [pc, #540]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015b6:	4b84      	ldr	r3, [pc, #528]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a83      	ldr	r2, [pc, #524]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015ce:	4b7e      	ldr	r3, [pc, #504]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a7d      	ldr	r2, [pc, #500]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b7b      	ldr	r3, [pc, #492]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e6:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015ec:	f043 0320 	orr.w	r3, r3, #32
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	4b72      	ldr	r3, [pc, #456]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a71      	ldr	r2, [pc, #452]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b6f      	ldr	r3, [pc, #444]	; (80017c8 <MX_GPIO_Init+0x2d0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2120      	movs	r1, #32
 800161a:	486c      	ldr	r0, [pc, #432]	; (80017cc <MX_GPIO_Init+0x2d4>)
 800161c:	f002 fe78 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	210c      	movs	r1, #12
 8001624:	486a      	ldr	r0, [pc, #424]	; (80017d0 <MX_GPIO_Init+0x2d8>)
 8001626:	f002 fe73 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2108      	movs	r1, #8
 800162e:	4869      	ldr	r0, [pc, #420]	; (80017d4 <MX_GPIO_Init+0x2dc>)
 8001630:	f002 fe6e 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163a:	4865      	ldr	r0, [pc, #404]	; (80017d0 <MX_GPIO_Init+0x2d8>)
 800163c:	f002 fe68 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001646:	4864      	ldr	r0, [pc, #400]	; (80017d8 <MX_GPIO_Init+0x2e0>)
 8001648:	f002 fe62 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	21c8      	movs	r1, #200	; 0xc8
 8001650:	4862      	ldr	r0, [pc, #392]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001652:	f002 fe5d 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001656:	2310      	movs	r3, #16
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001666:	230e      	movs	r3, #14
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800166e:	4619      	mov	r1, r3
 8001670:	485b      	ldr	r0, [pc, #364]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 8001672:	f002 fca1 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001676:	2308      	movs	r3, #8
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001686:	4619      	mov	r1, r3
 8001688:	4855      	ldr	r0, [pc, #340]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 800168a:	f002 fc95 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800168e:	2304      	movs	r3, #4
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800169e:	2309      	movs	r3, #9
 80016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a6:	4619      	mov	r1, r3
 80016a8:	484d      	ldr	r0, [pc, #308]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 80016aa:	f002 fc85 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80016ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c0:	230c      	movs	r3, #12
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c8:	4619      	mov	r1, r3
 80016ca:	4845      	ldr	r0, [pc, #276]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 80016cc:	f002 fc74 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80016d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d6:	2312      	movs	r3, #18
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016da:	2301      	movs	r3, #1
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e2:	2304      	movs	r3, #4
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ea:	4619      	mov	r1, r3
 80016ec:	483d      	ldr	r0, [pc, #244]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 80016ee:	f002 fc63 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80016f2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001704:	230a      	movs	r3, #10
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170c:	4619      	mov	r1, r3
 800170e:	4835      	ldr	r0, [pc, #212]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 8001710:	f002 fc52 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001714:	2310      	movs	r3, #16
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001724:	2302      	movs	r3, #2
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172c:	4619      	mov	r1, r3
 800172e:	482d      	ldr	r0, [pc, #180]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 8001730:	f002 fc42 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001744:	2308      	movs	r3, #8
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	4619      	mov	r1, r3
 800174e:	481f      	ldr	r0, [pc, #124]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001750:	f002 fc32 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001754:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001766:	230c      	movs	r3, #12
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <MX_GPIO_Init+0x2f0>)
 8001772:	f002 fc21 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001788:	2301      	movs	r3, #1
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001790:	4619      	mov	r1, r3
 8001792:	4816      	ldr	r0, [pc, #88]	; (80017ec <MX_GPIO_Init+0x2f4>)
 8001794:	f002 fc10 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001798:	2360      	movs	r3, #96	; 0x60
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017a8:	230d      	movs	r3, #13
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 80017b4:	f002 fc00 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
 80017c4:	e014      	b.n	80017f0 <MX_GPIO_Init+0x2f8>
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40022000 	.word	0x40022000
 80017d4:	40022800 	.word	0x40022800
 80017d8:	40021c00 	.word	0x40021c00
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f4:	2307      	movs	r3, #7
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fc:	4619      	mov	r1, r3
 80017fe:	48bc      	ldr	r0, [pc, #752]	; (8001af0 <MX_GPIO_Init+0x5f8>)
 8001800:	f002 fbda 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001814:	230a      	movs	r3, #10
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	4619      	mov	r1, r3
 800181e:	48b4      	ldr	r0, [pc, #720]	; (8001af0 <MX_GPIO_Init+0x5f8>)
 8001820:	f002 fbca 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001824:	f248 1333 	movw	r3, #33075	; 0x8133
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001836:	230c      	movs	r3, #12
 8001838:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183e:	4619      	mov	r1, r3
 8001840:	48ac      	ldr	r0, [pc, #688]	; (8001af4 <MX_GPIO_Init+0x5fc>)
 8001842:	f002 fbb9 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001846:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001858:	230e      	movs	r3, #14
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800185c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001860:	4619      	mov	r1, r3
 8001862:	48a5      	ldr	r0, [pc, #660]	; (8001af8 <MX_GPIO_Init+0x600>)
 8001864:	f002 fba8 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	2300      	movs	r3, #0
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187a:	4619      	mov	r1, r3
 800187c:	489e      	ldr	r0, [pc, #632]	; (8001af8 <MX_GPIO_Init+0x600>)
 800187e:	f002 fb9b 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001882:	2340      	movs	r3, #64	; 0x40
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001886:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001894:	4619      	mov	r1, r3
 8001896:	4899      	ldr	r0, [pc, #612]	; (8001afc <MX_GPIO_Init+0x604>)
 8001898:	f002 fb8e 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800189c:	f24c 7303 	movw	r3, #50947	; 0xc703
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ae:	230c      	movs	r3, #12
 80018b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	4619      	mov	r1, r3
 80018b8:	4890      	ldr	r0, [pc, #576]	; (8001afc <MX_GPIO_Init+0x604>)
 80018ba:	f002 fb7d 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80018be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018d0:	230a      	movs	r3, #10
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d8:	4619      	mov	r1, r3
 80018da:	4889      	ldr	r0, [pc, #548]	; (8001b00 <MX_GPIO_Init+0x608>)
 80018dc:	f002 fb6c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80018e0:	23f0      	movs	r3, #240	; 0xf0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80018f0:	230a      	movs	r3, #10
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f8:	4619      	mov	r1, r3
 80018fa:	4882      	ldr	r0, [pc, #520]	; (8001b04 <MX_GPIO_Init+0x60c>)
 80018fc:	f002 fb5c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001900:	23f7      	movs	r3, #247	; 0xf7
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001910:	230e      	movs	r3, #14
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	487b      	ldr	r0, [pc, #492]	; (8001b08 <MX_GPIO_Init+0x610>)
 800191c:	f002 fb4c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001932:	2309      	movs	r3, #9
 8001934:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193a:	4619      	mov	r1, r3
 800193c:	486d      	ldr	r0, [pc, #436]	; (8001af4 <MX_GPIO_Init+0x5fc>)
 800193e:	f002 fb3b 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001954:	230a      	movs	r3, #10
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195c:	4619      	mov	r1, r3
 800195e:	4865      	ldr	r0, [pc, #404]	; (8001af4 <MX_GPIO_Init+0x5fc>)
 8001960:	f002 fb2a 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001964:	2320      	movs	r3, #32
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	4860      	ldr	r0, [pc, #384]	; (8001afc <MX_GPIO_Init+0x604>)
 800197c:	f002 fb1c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001980:	2308      	movs	r3, #8
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001990:	230d      	movs	r3, #13
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	4858      	ldr	r0, [pc, #352]	; (8001afc <MX_GPIO_Init+0x604>)
 800199c:	f002 fb0c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80019a0:	f241 030c 	movw	r3, #4108	; 0x100c
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4852      	ldr	r0, [pc, #328]	; (8001b04 <MX_GPIO_Init+0x60c>)
 80019ba:	f002 fafd 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	484e      	ldr	r0, [pc, #312]	; (8001b0c <MX_GPIO_Init+0x614>)
 80019d4:	f002 faf0 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80019d8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ea:	230c      	movs	r3, #12
 80019ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f2:	4619      	mov	r1, r3
 80019f4:	4846      	ldr	r0, [pc, #280]	; (8001b10 <MX_GPIO_Init+0x618>)
 80019f6:	f002 fadf 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80019fa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a0c:	230e      	movs	r3, #14
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	483b      	ldr	r0, [pc, #236]	; (8001b04 <MX_GPIO_Init+0x60c>)
 8001a18:	f002 face 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	4835      	ldr	r0, [pc, #212]	; (8001b08 <MX_GPIO_Init+0x610>)
 8001a34:	f002 fac0 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a4a:	230d      	movs	r3, #13
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a52:	4619      	mov	r1, r3
 8001a54:	4827      	ldr	r0, [pc, #156]	; (8001af4 <MX_GPIO_Init+0x5fc>)
 8001a56:	f002 faaf 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4823      	ldr	r0, [pc, #140]	; (8001afc <MX_GPIO_Init+0x604>)
 8001a6e:	f002 faa3 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001a72:	2304      	movs	r3, #4
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a82:	230c      	movs	r3, #12
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481b      	ldr	r0, [pc, #108]	; (8001afc <MX_GPIO_Init+0x604>)
 8001a8e:	f002 fa93 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a92:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	481b      	ldr	r0, [pc, #108]	; (8001b14 <MX_GPIO_Init+0x61c>)
 8001aa8:	f002 fa86 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001aac:	2302      	movs	r3, #2
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001abc:	2305      	movs	r3, #5
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480f      	ldr	r0, [pc, #60]	; (8001b04 <MX_GPIO_Init+0x60c>)
 8001ac8:	f002 fa76 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <MX_GPIO_Init+0x61c>)
 8001ae6:	f002 fa67 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001aea:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001aee:	e013      	b.n	8001b18 <MX_GPIO_Init+0x620>
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40021800 	.word	0x40021800
 8001af8:	40022400 	.word	0x40022400
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40022800 	.word	0x40022800
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021c00 	.word	0x40021c00
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b26:	230d      	movs	r3, #13
 8001b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4896      	ldr	r0, [pc, #600]	; (8001d8c <MX_GPIO_Init+0x894>)
 8001b32:	f002 fa41 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001b36:	2301      	movs	r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b46:	2302      	movs	r3, #2
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	488f      	ldr	r0, [pc, #572]	; (8001d90 <MX_GPIO_Init+0x898>)
 8001b52:	f002 fa31 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b70:	4619      	mov	r1, r3
 8001b72:	4888      	ldr	r0, [pc, #544]	; (8001d94 <MX_GPIO_Init+0x89c>)
 8001b74:	f002 fa20 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	487f      	ldr	r0, [pc, #508]	; (8001d94 <MX_GPIO_Init+0x89c>)
 8001b96:	f002 fa0f 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ba0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4877      	ldr	r0, [pc, #476]	; (8001d90 <MX_GPIO_Init+0x898>)
 8001bb2:	f002 fa01 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001bb6:	2310      	movs	r3, #16
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	486e      	ldr	r0, [pc, #440]	; (8001d8c <MX_GPIO_Init+0x894>)
 8001bd2:	f002 f9f1 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001bd6:	2328      	movs	r3, #40	; 0x28
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001be6:	230c      	movs	r3, #12
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4866      	ldr	r0, [pc, #408]	; (8001d8c <MX_GPIO_Init+0x894>)
 8001bf2:	f002 f9e1 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001bf6:	23c8      	movs	r3, #200	; 0xc8
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4862      	ldr	r0, [pc, #392]	; (8001d98 <MX_GPIO_Init+0x8a0>)
 8001c0e:	f002 f9d3 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001c12:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c24:	4619      	mov	r1, r3
 8001c26:	485d      	ldr	r0, [pc, #372]	; (8001d9c <MX_GPIO_Init+0x8a4>)
 8001c28:	f002 f9c6 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c44:	4619      	mov	r1, r3
 8001c46:	4856      	ldr	r0, [pc, #344]	; (8001da0 <MX_GPIO_Init+0x8a8>)
 8001c48:	f002 f9b6 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c5c:	230a      	movs	r3, #10
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c64:	4619      	mov	r1, r3
 8001c66:	484e      	ldr	r0, [pc, #312]	; (8001da0 <MX_GPIO_Init+0x8a8>)
 8001c68:	f002 f9a6 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c7c:	2309      	movs	r3, #9
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c84:	4619      	mov	r1, r3
 8001c86:	4847      	ldr	r0, [pc, #284]	; (8001da4 <MX_GPIO_Init+0x8ac>)
 8001c88:	f002 f996 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	483f      	ldr	r0, [pc, #252]	; (8001da8 <MX_GPIO_Init+0x8b0>)
 8001caa:	f002 f985 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4835      	ldr	r0, [pc, #212]	; (8001d98 <MX_GPIO_Init+0x8a0>)
 8001cc2:	f002 f979 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	482e      	ldr	r0, [pc, #184]	; (8001d94 <MX_GPIO_Init+0x89c>)
 8001cda:	f002 f96d 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001cde:	2350      	movs	r3, #80	; 0x50
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cee:	230d      	movs	r3, #13
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4826      	ldr	r0, [pc, #152]	; (8001d94 <MX_GPIO_Init+0x89c>)
 8001cfa:	f002 f95d 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001cfe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d04:	2312      	movs	r3, #18
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d10:	2304      	movs	r3, #4
 8001d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	481c      	ldr	r0, [pc, #112]	; (8001d8c <MX_GPIO_Init+0x894>)
 8001d1c:	f002 f94c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d20:	2328      	movs	r3, #40	; 0x28
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d30:	230a      	movs	r3, #10
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4816      	ldr	r0, [pc, #88]	; (8001d94 <MX_GPIO_Init+0x89c>)
 8001d3c:	f002 f93c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001d40:	2340      	movs	r3, #64	; 0x40
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d50:	2309      	movs	r3, #9
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480c      	ldr	r0, [pc, #48]	; (8001d8c <MX_GPIO_Init+0x894>)
 8001d5c:	f002 f92c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001d60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d72:	2305      	movs	r3, #5
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <MX_GPIO_Init+0x8ac>)
 8001d7e:	f002 f91b 	bl	8003fb8 <HAL_GPIO_Init>

}
 8001d82:	bf00      	nop
 8001d84:	3740      	adds	r7, #64	; 0x40
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40021800 	.word	0x40021800
 8001d9c:	40021400 	.word	0x40021400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020c00 	.word	0x40020c00

08001dac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
 8001dc4:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
	if(huart == &huart7) {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a5c      	ldr	r2, [pc, #368]	; (8001f40 <HAL_UART_RxCpltCallback+0x194>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f040 82a9 	bne.w	8002326 <HAL_UART_RxCpltCallback+0x57a>
		//$ message start
		if(buff[0]=='$'){
 8001dd4:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_UART_RxCpltCallback+0x198>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b24      	cmp	r3, #36	; 0x24
 8001dda:	d106      	bne.n	8001dea <HAL_UART_RxCpltCallback+0x3e>
			count=0;
 8001ddc:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_UART_RxCpltCallback+0x19c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001de2:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <HAL_UART_RxCpltCallback+0x1a0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <HAL_UART_RxCpltCallback+0x5e>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001dea:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <HAL_UART_RxCpltCallback+0x19c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10b      	bne.n	8001e0a <HAL_UART_RxCpltCallback+0x5e>
 8001df2:	4b54      	ldr	r3, [pc, #336]	; (8001f44 <HAL_UART_RxCpltCallback+0x198>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b47      	cmp	r3, #71	; 0x47
 8001df8:	d007      	beq.n	8001e0a <HAL_UART_RxCpltCallback+0x5e>
			count=0;
 8001dfa:	4b53      	ldr	r3, [pc, #332]	; (8001f48 <HAL_UART_RxCpltCallback+0x19c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_UART_RxCpltCallback+0x1a4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_UART_RxCpltCallback+0x1a4>)
 8001e08:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001e0a:	4b4e      	ldr	r3, [pc, #312]	; (8001f44 <HAL_UART_RxCpltCallback+0x198>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4a4e      	ldr	r2, [pc, #312]	; (8001f48 <HAL_UART_RxCpltCallback+0x19c>)
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fb51 	bl	80024bc <calc_crc>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d13e      	bne.n	8001ea2 <HAL_UART_RxCpltCallback+0xf6>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 8001e24:	f000 fba6 	bl	8002574 <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 8001e28:	484a      	ldr	r0, [pc, #296]	; (8001f54 <HAL_UART_RxCpltCallback+0x1a8>)
 8001e2a:	f016 fa9b 	bl	8018364 <atoi>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	3b01      	subs	r3, #1
 8001e32:	4a49      	ldr	r2, [pc, #292]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e34:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 8001e36:	4849      	ldr	r0, [pc, #292]	; (8001f5c <HAL_UART_RxCpltCallback+0x1b0>)
 8001e38:	f016 fa94 	bl	8018364 <atoi>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4a46      	ldr	r2, [pc, #280]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e40:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b30      	cmp	r3, #48	; 0x30
 8001e48:	d108      	bne.n	8001e5c <HAL_UART_RxCpltCallback+0xb0>
 8001e4a:	4b45      	ldr	r3, [pc, #276]	; (8001f60 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	2b30      	cmp	r3, #48	; 0x30
 8001e50:	d104      	bne.n	8001e5c <HAL_UART_RxCpltCallback+0xb0>
				century=century+100;//atoi(gps.year)
 8001e52:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <HAL_UART_RxCpltCallback+0x1b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3364      	adds	r3, #100	; 0x64
 8001e58:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <HAL_UART_RxCpltCallback+0x1b8>)
 8001e5a:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 8001e5c:	4840      	ldr	r0, [pc, #256]	; (8001f60 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e5e:	f016 fa81 	bl	8018364 <atoi>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_UART_RxCpltCallback+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e6c:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 8001e6e:	483e      	ldr	r0, [pc, #248]	; (8001f68 <HAL_UART_RxCpltCallback+0x1bc>)
 8001e70:	f016 fa78 	bl	8018364 <atoi>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a38      	ldr	r2, [pc, #224]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e78:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 8001e7a:	483c      	ldr	r0, [pc, #240]	; (8001f6c <HAL_UART_RxCpltCallback+0x1c0>)
 8001e7c:	f016 fa72 	bl	8018364 <atoi>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a35      	ldr	r2, [pc, #212]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e84:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8001e86:	483a      	ldr	r0, [pc, #232]	; (8001f70 <HAL_UART_RxCpltCallback+0x1c4>)
 8001e88:	f016 fa6c 	bl	8018364 <atoi>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e90:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 8001e92:	4831      	ldr	r0, [pc, #196]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001e94:	f016 fba4 	bl	80185e0 <mktime>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4935      	ldr	r1, [pc, #212]	; (8001f74 <HAL_UART_RxCpltCallback+0x1c8>)
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		}
		if(res==1&&gps_unix!=rtc_read()){
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d13f      	bne.n	8001f28 <HAL_UART_RxCpltCallback+0x17c>
 8001ea8:	f000 fb64 	bl	8002574 <rtc_read>
 8001eac:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_UART_RxCpltCallback+0x1c8>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	4299      	cmp	r1, r3
 8001eb4:	bf08      	it	eq
 8001eb6:	4290      	cmpeq	r0, r2
 8001eb8:	d036      	beq.n	8001f28 <HAL_UART_RxCpltCallback+0x17c>

			sTime.Hours = Time_calc.tm_hour;
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = Time_calc.tm_min;
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = Time_calc.tm_sec;
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	73bb      	strb	r3, [r7, #14]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	4826      	ldr	r0, [pc, #152]	; (8001f78 <HAL_UART_RxCpltCallback+0x1cc>)
 8001ee0:	f003 fbbe 	bl	8005660 <HAL_RTC_SetTime>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_UART_RxCpltCallback+0x142>
			{
				Error_Handler();
 8001eea:	f000 fc63 	bl	80027b4 <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	727b      	strb	r3, [r7, #9]
			sDate.Date = Time_calc.tm_mday;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	72bb      	strb	r3, [r7, #10]
			sDate.Year = Time_calc.tm_year-century;
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_UART_RxCpltCallback+0x1ac>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_UART_RxCpltCallback+0x1b8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	72fb      	strb	r3, [r7, #11]

			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4817      	ldr	r0, [pc, #92]	; (8001f78 <HAL_UART_RxCpltCallback+0x1cc>)
 8001f1a:	f003 fcbd 	bl	8005898 <HAL_RTC_SetDate>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_UART_RxCpltCallback+0x17c>
			{
				Error_Handler();
 8001f24:	f000 fc46 	bl	80027b4 <Error_Handler>

		}
		//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_UART_RxCpltCallback+0x19c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d127      	bne.n	8001f80 <HAL_UART_RxCpltCallback+0x1d4>
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_UART_RxCpltCallback+0x198>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b5a      	cmp	r3, #90	; 0x5a
 8001f36:	d123      	bne.n	8001f80 <HAL_UART_RxCpltCallback+0x1d4>
			Tipe_Mes=1;
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_UART_RxCpltCallback+0x1d0>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e02a      	b.n	8001f96 <HAL_UART_RxCpltCallback+0x1ea>
 8001f40:	20004c60 	.word	0x20004c60
 8001f44:	20000cfc 	.word	0x20000cfc
 8001f48:	20000ce4 	.word	0x20000ce4
 8001f4c:	20000cd0 	.word	0x20000cd0
 8001f50:	20000cc0 	.word	0x20000cc0
 8001f54:	20004c43 	.word	0x20004c43
 8001f58:	20004d98 	.word	0x20004d98
 8001f5c:	20004c40 	.word	0x20004c40
 8001f60:	20000d00 	.word	0x20000d00
 8001f64:	20000008 	.word	0x20000008
 8001f68:	20004c4b 	.word	0x20004c4b
 8001f6c:	20004c4e 	.word	0x20004c4e
 8001f70:	20004c51 	.word	0x20004c51
 8001f74:	20000cc8 	.word	0x20000cc8
 8001f78:	20004cec 	.word	0x20004cec
 8001f7c:	20000cc4 	.word	0x20000cc4
		}
		else if(count==3&&buff[0]=='R'){
 8001f80:	4b91      	ldr	r3, [pc, #580]	; (80021c8 <HAL_UART_RxCpltCallback+0x41c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d106      	bne.n	8001f96 <HAL_UART_RxCpltCallback+0x1ea>
 8001f88:	4b90      	ldr	r3, [pc, #576]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b52      	cmp	r3, #82	; 0x52
 8001f8e:	d102      	bne.n	8001f96 <HAL_UART_RxCpltCallback+0x1ea>
			Tipe_Mes=2;
 8001f90:	4b8f      	ldr	r3, [pc, #572]	; (80021d0 <HAL_UART_RxCpltCallback+0x424>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 8001f96:	4b8e      	ldr	r3, [pc, #568]	; (80021d0 <HAL_UART_RxCpltCallback+0x424>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	f040 80d4 	bne.w	8002148 <HAL_UART_RxCpltCallback+0x39c>

			if(count==6&&buff[0]!=','){
 8001fa0:	4b89      	ldr	r3, [pc, #548]	; (80021c8 <HAL_UART_RxCpltCallback+0x41c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_UART_RxCpltCallback+0x214>
 8001fa8:	4b88      	ldr	r3, [pc, #544]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b2c      	cmp	r3, #44	; 0x2c
 8001fae:	d007      	beq.n	8001fc0 <HAL_UART_RxCpltCallback+0x214>
				count=0;
 8001fb0:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <HAL_UART_RxCpltCallback+0x41c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8001fb6:	4b87      	ldr	r3, [pc, #540]	; (80021d4 <HAL_UART_RxCpltCallback+0x428>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a85      	ldr	r2, [pc, #532]	; (80021d4 <HAL_UART_RxCpltCallback+0x428>)
 8001fbe:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8001fc0:	4b82      	ldr	r3, [pc, #520]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b2c      	cmp	r3, #44	; 0x2c
 8001fc6:	d107      	bne.n	8001fd8 <HAL_UART_RxCpltCallback+0x22c>
				zpt++;
 8001fc8:	4b83      	ldr	r3, [pc, #524]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a82      	ldr	r2, [pc, #520]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 8001fd0:	6013      	str	r3, [r2, #0]
				ind=0;
 8001fd2:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 8001fd8:	4b7f      	ldr	r3, [pc, #508]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10e      	bne.n	8001ffe <HAL_UART_RxCpltCallback+0x252>
 8001fe0:	4b7a      	ldr	r3, [pc, #488]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b2c      	cmp	r3, #44	; 0x2c
 8001fe6:	d00a      	beq.n	8001ffe <HAL_UART_RxCpltCallback+0x252>
				time_buff[ind]=buff[0];
 8001fe8:	4b7c      	ldr	r3, [pc, #496]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a77      	ldr	r2, [pc, #476]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8001fee:	7811      	ldrb	r1, [r2, #0]
 8001ff0:	4a7b      	ldr	r2, [pc, #492]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8001ff2:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001ff4:	4b79      	ldr	r3, [pc, #484]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	4a78      	ldr	r2, [pc, #480]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8001ffc:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d127      	bne.n	8002056 <HAL_UART_RxCpltCallback+0x2aa>
 8002006:	4b71      	ldr	r3, [pc, #452]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b2c      	cmp	r3, #44	; 0x2c
 800200c:	d123      	bne.n	8002056 <HAL_UART_RxCpltCallback+0x2aa>
				gps.hours[0]=time_buff[0];
 800200e:	4b74      	ldr	r3, [pc, #464]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4b74      	ldr	r3, [pc, #464]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 8002014:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002018:	785a      	ldrb	r2, [r3, #1]
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 800201c:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 800201e:	4b70      	ldr	r3, [pc, #448]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002020:	789a      	ldrb	r2, [r3, #2]
 8002022:	4b70      	ldr	r3, [pc, #448]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 8002024:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 8002026:	4b6e      	ldr	r3, [pc, #440]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002028:	78da      	ldrb	r2, [r3, #3]
 800202a:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 800202c:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 800202e:	4b6c      	ldr	r3, [pc, #432]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002030:	791a      	ldrb	r2, [r3, #4]
 8002032:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 8002034:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 8002036:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002038:	795a      	ldrb	r2, [r3, #5]
 800203a:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 800203c:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 800203e:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002040:	799a      	ldrb	r2, [r3, #6]
 8002042:	4b68      	ldr	r3, [pc, #416]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 8002044:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 8002046:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002048:	79da      	ldrb	r2, [r3, #7]
 800204a:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 800204c:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 800204e:	4b64      	ldr	r3, [pc, #400]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002050:	7a1a      	ldrb	r2, [r3, #8]
 8002052:	4b64      	ldr	r3, [pc, #400]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 8002054:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 8002056:	4b60      	ldr	r3, [pc, #384]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d10e      	bne.n	800207c <HAL_UART_RxCpltCallback+0x2d0>
 800205e:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b2c      	cmp	r3, #44	; 0x2c
 8002064:	d00a      	beq.n	800207c <HAL_UART_RxCpltCallback+0x2d0>

				time_buff[ind]=buff[0];
 8002066:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 800206c:	7811      	ldrb	r1, [r2, #0]
 800206e:	4a5c      	ldr	r2, [pc, #368]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002070:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002072:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 800207a:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 800207c:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d10b      	bne.n	800209c <HAL_UART_RxCpltCallback+0x2f0>
 8002084:	4b51      	ldr	r3, [pc, #324]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b2c      	cmp	r3, #44	; 0x2c
 800208a:	d107      	bne.n	800209c <HAL_UART_RxCpltCallback+0x2f0>
				gps.day[0]=time_buff[0];
 800208c:	4b54      	ldr	r3, [pc, #336]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	4b54      	ldr	r3, [pc, #336]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 8002092:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8002094:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002096:	785a      	ldrb	r2, [r3, #1]
 8002098:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 800209a:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 800209c:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d10e      	bne.n	80020c2 <HAL_UART_RxCpltCallback+0x316>
 80020a4:	4b49      	ldr	r3, [pc, #292]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b2c      	cmp	r3, #44	; 0x2c
 80020aa:	d00a      	beq.n	80020c2 <HAL_UART_RxCpltCallback+0x316>

				time_buff[ind]=buff[0];
 80020ac:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 80020b2:	7811      	ldrb	r1, [r2, #0]
 80020b4:	4a4a      	ldr	r2, [pc, #296]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 80020b6:	54d1      	strb	r1, [r2, r3]
				ind++;
 80020b8:	4b48      	ldr	r3, [pc, #288]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	4a47      	ldr	r2, [pc, #284]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 80020c0:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 80020c2:	4b45      	ldr	r3, [pc, #276]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d10b      	bne.n	80020e2 <HAL_UART_RxCpltCallback+0x336>
 80020ca:	4b40      	ldr	r3, [pc, #256]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b2c      	cmp	r3, #44	; 0x2c
 80020d0:	d107      	bne.n	80020e2 <HAL_UART_RxCpltCallback+0x336>
				gps.month[0]=time_buff[0];
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 80020d8:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[1];
 80020da:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 80020dc:	785a      	ldrb	r2, [r3, #1]
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 80020e0:	711a      	strb	r2, [r3, #4]
			}
			if(zpt==4&&buff[0]!=','){
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d10e      	bne.n	8002108 <HAL_UART_RxCpltCallback+0x35c>
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b2c      	cmp	r3, #44	; 0x2c
 80020f0:	d00a      	beq.n	8002108 <HAL_UART_RxCpltCallback+0x35c>

				time_buff[ind]=buff[0];
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a35      	ldr	r2, [pc, #212]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 80020f8:	7811      	ldrb	r1, [r2, #0]
 80020fa:	4a39      	ldr	r2, [pc, #228]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 80020fc:	54d1      	strb	r1, [r2, r3]
				ind++;
 80020fe:	4b37      	ldr	r3, [pc, #220]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a35      	ldr	r2, [pc, #212]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8002106:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 8002108:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d11b      	bne.n	8002148 <HAL_UART_RxCpltCallback+0x39c>
 8002110:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b2c      	cmp	r3, #44	; 0x2c
 8002116:	d117      	bne.n	8002148 <HAL_UART_RxCpltCallback+0x39c>
				gps.year[0]=time_buff[0];
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 800211e:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[1];
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002122:	785a      	ldrb	r2, [r3, #1]
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 8002126:	71da      	strb	r2, [r3, #7]
				gps.year[2]=time_buff[2];
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 800212a:	789a      	ldrb	r2, [r3, #2]
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 800212e:	721a      	strb	r2, [r3, #8]
				gps.year[3]=time_buff[3];
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002132:	78da      	ldrb	r2, [r3, #3]
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_UART_RxCpltCallback+0x438>)
 8002136:	725a      	strb	r2, [r3, #9]
				year_str[0]=time_buff[2];
 8002138:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 800213a:	789a      	ldrb	r2, [r3, #2]
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_UART_RxCpltCallback+0x43c>)
 800213e:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[3];
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 8002142:	78da      	ldrb	r2, [r3, #3]
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_UART_RxCpltCallback+0x43c>)
 8002146:	705a      	strb	r2, [r3, #1]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_UART_RxCpltCallback+0x424>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b02      	cmp	r3, #2
 800214e:	f040 80c9 	bne.w	80022e4 <HAL_UART_RxCpltCallback+0x538>

			if(count==6&&buff[0]!=','){
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_UART_RxCpltCallback+0x41c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b06      	cmp	r3, #6
 8002158:	d10b      	bne.n	8002172 <HAL_UART_RxCpltCallback+0x3c6>
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b2c      	cmp	r3, #44	; 0x2c
 8002160:	d007      	beq.n	8002172 <HAL_UART_RxCpltCallback+0x3c6>
				count=0;
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_UART_RxCpltCallback+0x41c>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8002168:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <HAL_UART_RxCpltCallback+0x428>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <HAL_UART_RxCpltCallback+0x428>)
 8002170:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b2c      	cmp	r3, #44	; 0x2c
 8002178:	d107      	bne.n	800218a <HAL_UART_RxCpltCallback+0x3de>
				zpt++;
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 8002182:	6013      	str	r3, [r2, #0]
				ind=0;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d10e      	bne.n	80021b0 <HAL_UART_RxCpltCallback+0x404>
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b2c      	cmp	r3, #44	; 0x2c
 8002198:	d00a      	beq.n	80021b0 <HAL_UART_RxCpltCallback+0x404>

				time_buff[ind]=buff[0];
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 80021a0:	7811      	ldrb	r1, [r2, #0]
 80021a2:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 80021a4:	54d1      	strb	r1, [r2, r3]
				ind++;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_UART_RxCpltCallback+0x430>)
 80021ae:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_UART_RxCpltCallback+0x42c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d13b      	bne.n	8002230 <HAL_UART_RxCpltCallback+0x484>
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <HAL_UART_RxCpltCallback+0x420>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b2c      	cmp	r3, #44	; 0x2c
 80021be:	d137      	bne.n	8002230 <HAL_UART_RxCpltCallback+0x484>
				gps.hours[0]=time_buff[0];
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_UART_RxCpltCallback+0x434>)
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	e012      	b.n	80021ec <HAL_UART_RxCpltCallback+0x440>
 80021c6:	bf00      	nop
 80021c8:	20000ce4 	.word	0x20000ce4
 80021cc:	20000cfc 	.word	0x20000cfc
 80021d0:	20000cc4 	.word	0x20000cc4
 80021d4:	20000cc0 	.word	0x20000cc0
 80021d8:	20000cd0 	.word	0x20000cd0
 80021dc:	20000cdc 	.word	0x20000cdc
 80021e0:	20000cec 	.word	0x20000cec
 80021e4:	20004c40 	.word	0x20004c40
 80021e8:	20000d00 	.word	0x20000d00
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80021ee:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80021f2:	785a      	ldrb	r2, [r3, #1]
 80021f4:	4b4e      	ldr	r3, [pc, #312]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80021f6:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 80021f8:	4b4e      	ldr	r3, [pc, #312]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80021fa:	789a      	ldrb	r2, [r3, #2]
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80021fe:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 8002200:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 8002202:	78da      	ldrb	r2, [r3, #3]
 8002204:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 8002206:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 8002208:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 800220a:	791a      	ldrb	r2, [r3, #4]
 800220c:	4b48      	ldr	r3, [pc, #288]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 800220e:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 8002210:	4b48      	ldr	r3, [pc, #288]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 8002212:	795a      	ldrb	r2, [r3, #5]
 8002214:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 8002216:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 8002218:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 800221a:	799a      	ldrb	r2, [r3, #6]
 800221c:	4b44      	ldr	r3, [pc, #272]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 800221e:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 8002222:	79da      	ldrb	r2, [r3, #7]
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 8002226:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 8002228:	4b42      	ldr	r3, [pc, #264]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 800222a:	7a1a      	ldrb	r2, [r3, #8]
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 800222e:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 8002230:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_UART_RxCpltCallback+0x58c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d10e      	bne.n	8002256 <HAL_UART_RxCpltCallback+0x4aa>
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_UART_RxCpltCallback+0x590>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b2c      	cmp	r3, #44	; 0x2c
 800223e:	d00a      	beq.n	8002256 <HAL_UART_RxCpltCallback+0x4aa>

				time_buff[ind]=buff[0];
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_UART_RxCpltCallback+0x594>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a3d      	ldr	r2, [pc, #244]	; (800233c <HAL_UART_RxCpltCallback+0x590>)
 8002246:	7811      	ldrb	r1, [r2, #0]
 8002248:	4a3a      	ldr	r2, [pc, #232]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 800224a:	54d1      	strb	r1, [r2, r3]
				ind++;
 800224c:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <HAL_UART_RxCpltCallback+0x594>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	4a3b      	ldr	r2, [pc, #236]	; (8002340 <HAL_UART_RxCpltCallback+0x594>)
 8002254:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_UART_RxCpltCallback+0x58c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d107      	bne.n	800226e <HAL_UART_RxCpltCallback+0x4c2>
 800225e:	4b37      	ldr	r3, [pc, #220]	; (800233c <HAL_UART_RxCpltCallback+0x590>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b2c      	cmp	r3, #44	; 0x2c
 8002264:	d103      	bne.n	800226e <HAL_UART_RxCpltCallback+0x4c2>
				gps.sinc[1]=time_buff[0];
 8002266:	4b33      	ldr	r3, [pc, #204]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 800226c:	769a      	strb	r2, [r3, #26]
			}

			if(zpt==9&&buff[0]!=','){
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_UART_RxCpltCallback+0x58c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b09      	cmp	r3, #9
 8002274:	d10e      	bne.n	8002294 <HAL_UART_RxCpltCallback+0x4e8>
 8002276:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_UART_RxCpltCallback+0x590>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b2c      	cmp	r3, #44	; 0x2c
 800227c:	d00a      	beq.n	8002294 <HAL_UART_RxCpltCallback+0x4e8>

				time_buff[ind]=buff[0];
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_UART_RxCpltCallback+0x594>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2e      	ldr	r2, [pc, #184]	; (800233c <HAL_UART_RxCpltCallback+0x590>)
 8002284:	7811      	ldrb	r1, [r2, #0]
 8002286:	4a2b      	ldr	r2, [pc, #172]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 8002288:	54d1      	strb	r1, [r2, r3]
				ind++;
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_UART_RxCpltCallback+0x594>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_UART_RxCpltCallback+0x594>)
 8002292:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_UART_RxCpltCallback+0x58c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b0a      	cmp	r3, #10
 800229a:	d123      	bne.n	80022e4 <HAL_UART_RxCpltCallback+0x538>
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_UART_RxCpltCallback+0x590>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b2c      	cmp	r3, #44	; 0x2c
 80022a2:	d11f      	bne.n	80022e4 <HAL_UART_RxCpltCallback+0x538>
				gps.day[0]=time_buff[0];
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80022aa:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80022ae:	785a      	ldrb	r2, [r3, #1]
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80022b2:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80022b6:	789a      	ldrb	r2, [r3, #2]
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80022ba:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[3];
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80022be:	78da      	ldrb	r2, [r3, #3]
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80022c2:	711a      	strb	r2, [r3, #4]
				gps.year[0]=time_buff[4];
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80022c6:	791a      	ldrb	r2, [r3, #4]
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80022ca:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[5];
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80022ce:	795a      	ldrb	r2, [r3, #5]
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 80022d2:	71da      	strb	r2, [r3, #7]
				year_str[0]=time_buff[4];
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80022d6:	791a      	ldrb	r2, [r3, #4]
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_UART_RxCpltCallback+0x598>)
 80022da:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[5];
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_UART_RxCpltCallback+0x588>)
 80022de:	795a      	ldrb	r2, [r3, #5]
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_UART_RxCpltCallback+0x598>)
 80022e2:	705a      	strb	r2, [r3, #1]
			}
		}
		//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_UART_RxCpltCallback+0x59c>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_UART_RxCpltCallback+0x5a0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_UART_RxCpltCallback+0x55c>

			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 80022f2:	2201      	movs	r2, #1
 80022f4:	4911      	ldr	r1, [pc, #68]	; (800233c <HAL_UART_RxCpltCallback+0x590>)
 80022f6:	4816      	ldr	r0, [pc, #88]	; (8002350 <HAL_UART_RxCpltCallback+0x5a4>)
 80022f8:	f004 f818 	bl	800632c <HAL_UART_Transmit_IT>

			dataReceived=0;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_UART_RxCpltCallback+0x59c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_UART_RxCpltCallback+0x5a0>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 8002308:	2201      	movs	r2, #1
 800230a:	490c      	ldr	r1, [pc, #48]	; (800233c <HAL_UART_RxCpltCallback+0x590>)
 800230c:	4811      	ldr	r0, [pc, #68]	; (8002354 <HAL_UART_RxCpltCallback+0x5a8>)
 800230e:	f004 f87b 	bl	8006408 <HAL_UART_Receive_IT>
		gps.errors[1]=ERRORS;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_RxCpltCallback+0x5ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_UART_RxCpltCallback+0x584>)
 800231a:	761a      	strb	r2, [r3, #24]
		count++;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_UART_RxCpltCallback+0x5b0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	4a0e      	ldr	r2, [pc, #56]	; (800235c <HAL_UART_RxCpltCallback+0x5b0>)
 8002324:	6013      	str	r3, [r2, #0]
	}
}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20004c40 	.word	0x20004c40
 8002334:	20000cec 	.word	0x20000cec
 8002338:	20000cd0 	.word	0x20000cd0
 800233c:	20000cfc 	.word	0x20000cfc
 8002340:	20000cdc 	.word	0x20000cdc
 8002344:	20000d00 	.word	0x20000d00
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004
 8002350:	20004d10 	.word	0x20004d10
 8002354:	20004c60 	.word	0x20004c60
 8002358:	20000cc0 	.word	0x20000cc0
 800235c:	20000ce4 	.word	0x20000ce4

08002360 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

	if(huart == &huart6) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <HAL_UART_TxCpltCallback+0x3c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d111      	bne.n	8002394 <HAL_UART_TxCpltCallback+0x34>

		dataTransmitted=1;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_UART_TxCpltCallback+0x40>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_UART_TxCpltCallback+0x44>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_UART_TxCpltCallback+0x34>
			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 800237e:	2201      	movs	r2, #1
 8002380:	4909      	ldr	r1, [pc, #36]	; (80023a8 <HAL_UART_TxCpltCallback+0x48>)
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <HAL_UART_TxCpltCallback+0x3c>)
 8002384:	f003 ffd2 	bl	800632c <HAL_UART_Transmit_IT>
			dataReceived=0;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_UART_TxCpltCallback+0x44>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <HAL_UART_TxCpltCallback+0x40>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20004d10 	.word	0x20004d10
 80023a0:	20000004 	.word	0x20000004
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000cfc 	.word	0x20000cfc
 80023ac:	00000000 	.word	0x00000000

080023b0 <Hex_to_dec>:

char Hex_to_dec(char hex[2]){
 80023b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
    dec = 0;
 80023be:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <Hex_to_dec+0x108>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fd ff23 	bl	8000210 <strlen>
 80023ca:	4603      	mov	r3, r0
 80023cc:	3b01      	subs	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e060      	b.n	8002494 <Hex_to_dec+0xe4>
        switch (hex[i]) {
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	3b41      	subs	r3, #65	; 0x41
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d821      	bhi.n	8002424 <Hex_to_dec+0x74>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <Hex_to_dec+0x38>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	08002401 	.word	0x08002401
 80023ec:	08002407 	.word	0x08002407
 80023f0:	0800240d 	.word	0x0800240d
 80023f4:	08002413 	.word	0x08002413
 80023f8:	08002419 	.word	0x08002419
 80023fc:	0800241f 	.word	0x0800241f
        case 'A':
            dig = 10;
 8002400:	230a      	movs	r3, #10
 8002402:	613b      	str	r3, [r7, #16]
            break;
 8002404:	e014      	b.n	8002430 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 8002406:	230b      	movs	r3, #11
 8002408:	613b      	str	r3, [r7, #16]
            break;
 800240a:	e011      	b.n	8002430 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 800240c:	230c      	movs	r3, #12
 800240e:	613b      	str	r3, [r7, #16]
            break;
 8002410:	e00e      	b.n	8002430 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 8002412:	230d      	movs	r3, #13
 8002414:	613b      	str	r3, [r7, #16]
            break;
 8002416:	e00b      	b.n	8002430 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 8002418:	230e      	movs	r3, #14
 800241a:	613b      	str	r3, [r7, #16]
            break;
 800241c:	e008      	b.n	8002430 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 800241e:	230f      	movs	r3, #15
 8002420:	613b      	str	r3, [r7, #16]
            break;
 8002422:	e005      	b.n	8002430 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	3b30      	subs	r3, #48	; 0x30
 800242e:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8002430:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <Hex_to_dec+0x108>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f89f 	bl	8000578 <__aeabi_i2d>
 800243a:	4604      	mov	r4, r0
 800243c:	460d      	mov	r5, r1
 800243e:	6938      	ldr	r0, [r7, #16]
 8002440:	f7fe f89a 	bl	8000578 <__aeabi_i2d>
 8002444:	4680      	mov	r8, r0
 8002446:	4689      	mov	r9, r1
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7fe f895 	bl	8000578 <__aeabi_i2d>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	ec43 2b11 	vmov	d1, r2, r3
 8002456:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80024b0 <Hex_to_dec+0x100>
 800245a:	f01c fd89 	bl	801ef70 <pow>
 800245e:	ec53 2b10 	vmov	r2, r3, d0
 8002462:	4640      	mov	r0, r8
 8002464:	4649      	mov	r1, r9
 8002466:	f7fe f8f1 	bl	800064c <__aeabi_dmul>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f7fd ff35 	bl	80002e0 <__adddf3>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fb95 	bl	8000bac <__aeabi_d2iz>
 8002482:	4603      	mov	r3, r0
 8002484:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <Hex_to_dec+0x108>)
 8002486:	6013      	str	r3, [r2, #0]
        cont++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3b01      	subs	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	da9b      	bge.n	80023d2 <Hex_to_dec+0x22>
    }
    return dec;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <Hex_to_dec+0x108>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024aa:	bf00      	nop
 80024ac:	f3af 8000 	nop.w
 80024b0:	00000000 	.word	0x00000000
 80024b4:	40300000 	.word	0x40300000
 80024b8:	20004ce4 	.word	0x20004ce4

080024bc <calc_crc>:


char calc_crc(char c,int cnt){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	2b2a      	cmp	r3, #42	; 0x2a
 80024cc:	d108      	bne.n	80024e0 <calc_crc+0x24>
		start_crc=0;
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <calc_crc+0xa0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <calc_crc+0xa4>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
		z=0;
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <calc_crc+0xa8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <calc_crc+0xa0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <calc_crc+0x38>
		crc^=c;
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <calc_crc+0xac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4053      	eors	r3, r2
 80024f0:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <calc_crc+0xac>)
 80024f2:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <calc_crc+0xa4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d110      	bne.n	800251e <calc_crc+0x62>
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002500:	d00d      	beq.n	800251e <calc_crc+0x62>
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <calc_crc+0xa8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	dc09      	bgt.n	800251e <calc_crc+0x62>
		crc_buff[z]=c;
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <calc_crc+0xa8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4917      	ldr	r1, [pc, #92]	; (800256c <calc_crc+0xb0>)
 8002510:	79fa      	ldrb	r2, [r7, #7]
 8002512:	54ca      	strb	r2, [r1, r3]
		z++;
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <calc_crc+0xa8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <calc_crc+0xa8>)
 800251c:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b0a      	cmp	r3, #10
 8002522:	d10a      	bne.n	800253a <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 8002524:	4811      	ldr	r0, [pc, #68]	; (800256c <calc_crc+0xb0>)
 8002526:	f7ff ff43 	bl	80023b0 <Hex_to_dec>
		if(crc==dec){
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <calc_crc+0xac>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <calc_crc+0xb4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d101      	bne.n	800253a <calc_crc+0x7e>
			//Test++;
			return 1;
 8002536:	2301      	movs	r3, #1
 8002538:	e00c      	b.n	8002554 <calc_crc+0x98>
		}
	}
	if(cnt==0){
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d108      	bne.n	8002552 <calc_crc+0x96>
		start_crc=1;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <calc_crc+0xa0>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <calc_crc+0xa4>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
		crc=0;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <calc_crc+0xac>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000cd4 	.word	0x20000cd4
 8002560:	20000ce8 	.word	0x20000ce8
 8002564:	20000cd8 	.word	0x20000cd8
 8002568:	20000ce0 	.word	0x20000ce0
 800256c:	20000cf8 	.word	0x20000cf8
 8002570:	20004ce4 	.word	0x20004ce4

08002574 <rtc_read>:

time_t rtc_read(void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b092      	sub	sp, #72	; 0x48
 8002578:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <rtc_read+0x70>)
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <rtc_read+0x74>)
 800257e:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002584:	2200      	movs	r2, #0
 8002586:	4619      	mov	r1, r3
 8002588:	4816      	ldr	r0, [pc, #88]	; (80025e4 <rtc_read+0x70>)
 800258a:	f003 f927 	bl	80057dc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 800258e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002592:	2200      	movs	r2, #0
 8002594:	4619      	mov	r1, r3
 8002596:	4813      	ldr	r0, [pc, #76]	; (80025e4 <rtc_read+0x70>)
 8002598:	f003 fa26 	bl	80059e8 <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 800259c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80025a0:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 80025a2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80025a6:	613b      	str	r3, [r7, #16]
	timeinfo.tm_mday = dateStruct.Date;
 80025a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80025ac:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_year = dateStruct.Year + 100;
 80025ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025b2:	3364      	adds	r3, #100	; 0x64
 80025b4:	617b      	str	r3, [r7, #20]
	timeinfo.tm_hour = timeStruct.Hours;
 80025b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025ba:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_min = timeStruct.Minutes;
 80025bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025c0:	607b      	str	r3, [r7, #4]
	timeinfo.tm_sec = timeStruct.Seconds;
 80025c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025c6:	603b      	str	r3, [r7, #0]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo);
 80025c8:	463b      	mov	r3, r7
 80025ca:	4618      	mov	r0, r3
 80025cc:	f016 f808 	bl	80185e0 <mktime>
 80025d0:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	return t;
 80025d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	3748      	adds	r7, #72	; 0x48
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20004cec 	.word	0x20004cec
 80025e8:	40002800 	.word	0x40002800

080025ec <tcpecho_init>:

void tcpecho_init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 80025f2:	2301      	movs	r3, #1
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fa:	2200      	movs	r2, #0
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <tcpecho_init+0x20>)
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <tcpecho_init+0x24>)
 8002600:	f015 fe6c 	bl	80182dc <sys_thread_new>
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	08002641 	.word	0x08002641
 8002610:	0801ffe4 	.word	0x0801ffe4

08002614 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800261c:	f005 f9a2 	bl	8007964 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	/* Initialize tcp echo server */
	tcpecho_init();
 8002620:	f7ff ffe4 	bl	80025ec <tcpecho_init>

	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8002624:	2201      	movs	r2, #1
 8002626:	4904      	ldr	r1, [pc, #16]	; (8002638 <StartDefaultTask+0x24>)
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <StartDefaultTask+0x28>)
 800262a:	f003 feed 	bl	8006408 <HAL_UART_Receive_IT>

		//HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
		//HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
		HAL_Delay(1000);
 800262e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002632:	f000 fb39 	bl	8002ca8 <HAL_Delay>
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8002636:	e7f5      	b.n	8002624 <StartDefaultTask+0x10>
 8002638:	20000cfc 	.word	0x20000cfc
 800263c:	20004c60 	.word	0x20004c60

08002640 <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void * argument)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b091      	sub	sp, #68	; 0x44
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	struct tm tm_;
	uint32_t tm_ms_;


	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_UDP);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	2020      	movs	r0, #32
 800264e:	f008 fdfb 	bl	800b248 <netconn_new_with_proto_and_callback>
 8002652:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (conn!=NULL)
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 808b 	beq.w	8002772 <tcpecho_thread+0x132>
	{
		/* Bind connection to well known port number 7. */
		err = netconn_bind(conn, NULL, 123);
 800265c:	227b      	movs	r2, #123	; 0x7b
 800265e:	2100      	movs	r1, #0
 8002660:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002662:	f008 feab 	bl	800b3bc <netconn_bind>
 8002666:	4603      	mov	r3, r0
 8002668:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (err == ERR_OK)
 800266c:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002670:	2b00      	cmp	r3, #0
 8002672:	d17b      	bne.n	800276c <tcpecho_thread+0x12c>
		{
			while (1)
			{
				while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002674:	e067      	b.n	8002746 <tcpecho_thread+0x106>
				{
					do
					{
						netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 8002676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002678:	f107 0232 	add.w	r2, r7, #50	; 0x32
 800267c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002680:	4618      	mov	r0, r3
 8002682:	f00a fba1 	bl	800cdc8 <netbuf_data>

						if(buf_data_len < 48 || buf_data_len > 2048)
 8002686:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002688:	2b2f      	cmp	r3, #47	; 0x2f
 800268a:	d903      	bls.n	8002694 <tcpecho_thread+0x54>
 800268c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800268e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002692:	d904      	bls.n	800269e <tcpecho_thread+0x5e>
						{
							netbuf_delete(buf);
 8002694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002696:	4618      	mov	r0, r3
 8002698:	f00a fb76 	bl	800cd88 <netbuf_delete>
							continue;
 800269c:	e048      	b.n	8002730 <tcpecho_thread+0xf0>
						}
						ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	2224      	movs	r2, #36	; 0x24
 80026a2:	701a      	strb	r2, [r3, #0]
						ntp_packet_ptr->stratum = ntpd_status.stratum;
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	4a35      	ldr	r2, [pc, #212]	; (800277c <tcpecho_thread+0x13c>)
 80026a8:	7a12      	ldrb	r2, [r2, #8]
 80026aa:	705a      	strb	r2, [r3, #1]
						ntp_packet_ptr->poll = 5; // 32s
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	2205      	movs	r2, #5
 80026b0:	709a      	strb	r2, [r3, #2]
						ntp_packet_ptr->precision = -10; // ~1ms
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	22f6      	movs	r2, #246	; 0xf6
 80026b6:	70da      	strb	r2, [r3, #3]

						ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	2200      	movs	r2, #0
 80026bc:	605a      	str	r2, [r3, #4]
						ntp_packet_ptr->rootDispersion_s = 0;
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	2200      	movs	r2, #0
 80026c2:	811a      	strh	r2, [r3, #8]
						ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 80026c4:	2041      	movs	r0, #65	; 0x41
 80026c6:	f00a fdc6 	bl	800d256 <lwip_htonl>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	b292      	uxth	r2, r2
 80026d0:	815a      	strh	r2, [r3, #10]
						ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <tcpecho_thread+0x140>)
 80026d6:	60da      	str	r2, [r3, #12]
						/* Move client's transmit timestamp into origin fields */
						ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 80026d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80026de:	619a      	str	r2, [r3, #24]
						ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 80026e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026e6:	61da      	str	r2, [r3, #28]

						ntp_packet_ptr->refTm_s = time_ref_s;
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	4a26      	ldr	r2, [pc, #152]	; (8002784 <tcpecho_thread+0x144>)
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	611a      	str	r2, [r3, #16]
						ntp_packet_ptr->refTm_f = time_ref_f;
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	4a25      	ldr	r2, [pc, #148]	; (8002788 <tcpecho_thread+0x148>)
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	615a      	str	r2, [r3, #20]

						//rtcGetTime(&RTCD1, &ntpd_datetime);
						//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

						ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 80026f8:	f7ff ff3c 	bl	8002574 <rtc_read>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <tcpecho_thread+0x14c>)
 8002702:	4413      	add	r3, r2
 8002704:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002706:	4618      	mov	r0, r3
 8002708:	f00a fda5 	bl	800d256 <lwip_htonl>
 800270c:	4603      	mov	r3, r0
 800270e:	6223      	str	r3, [r4, #32]
						ntp_packet_ptr->rxTm_f = 0;//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

						/* Copy into transmit timestamp fields */
						ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 8002716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	6a12      	ldr	r2, [r2, #32]
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
						ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 800271e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c

						netconn_send(conn, buf);
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	4619      	mov	r1, r3
 800272a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800272c:	f009 f874 	bl	800b818 <netconn_send>
					}
					while (netbuf_next(buf) >= 0);
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fb92 	bl	800ce5c <netbuf_next>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	da9b      	bge.n	8002676 <tcpecho_thread+0x36>

					netbuf_delete(buf);
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	4618      	mov	r0, r3
 8002742:	f00a fb21 	bl	800cd88 <netbuf_delete>
				while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800274a:	4619      	mov	r1, r3
 800274c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800274e:	f008 ffe9 	bl	800b724 <netconn_recv>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002758:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 800275c:	2b00      	cmp	r3, #0
 800275e:	d08a      	beq.n	8002676 <tcpecho_thread+0x36>
				}
				/* Close connection and discard connection identifier. */
				//netconn_close(newconn);
				//netconn_delete(newconn);
				ntpd_status.requests_count++;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <tcpecho_thread+0x13c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	3301      	adds	r3, #1
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <tcpecho_thread+0x13c>)
 8002768:	6053      	str	r3, [r2, #4]
				while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 800276a:	e7ec      	b.n	8002746 <tcpecho_thread+0x106>
			}
		}
		else
		{
			netconn_delete(conn);
 800276c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800276e:	f008 fe09 	bl	800b384 <netconn_delete>
		}
	}
}
 8002772:	bf00      	nop
 8002774:	3744      	adds	r7, #68	; 0x44
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	2000000c 	.word	0x2000000c
 8002780:	00535047 	.word	0x00535047
 8002784:	20004d94 	.word	0x20004d94
 8002788:	20004d0c 	.word	0x20004d0c
 800278c:	83aa7e80 	.word	0x83aa7e80

08002790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027a2:	f000 fa61 	bl	8002c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40001000 	.word	0x40001000

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i
}
 80027ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027bc:	e7fe      	b.n	80027bc <Error_Handler+0x8>
	...

080027c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_MspInit+0x4c>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_MspInit+0x4c>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_MspInit+0x4c>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_MspInit+0x4c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_MspInit+0x4c>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_MspInit+0x4c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	210f      	movs	r1, #15
 80027fa:	f06f 0001 	mvn.w	r0, #1
 80027fe:	f000 fb2f 	bl	8002e60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800

08002810 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_RTC_MspInit+0x2c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d105      	bne.n	800282e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RTC_MspInit+0x30>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a06      	ldr	r2, [pc, #24]	; (8002840 <HAL_RTC_MspInit+0x30>)
 8002828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40002800 	.word	0x40002800
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_UART_MspInit+0xf8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d130      	bne.n	80028c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002866:	4b36      	ldr	r3, [pc, #216]	; (8002940 <HAL_UART_MspInit+0xfc>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a35      	ldr	r2, [pc, #212]	; (8002940 <HAL_UART_MspInit+0xfc>)
 800286c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b33      	ldr	r3, [pc, #204]	; (8002940 <HAL_UART_MspInit+0xfc>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HAL_UART_MspInit+0xfc>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_UART_MspInit+0xfc>)
 8002884:	f043 0320 	orr.w	r3, r3, #32
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_UART_MspInit+0xfc>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002896:	23c0      	movs	r3, #192	; 0xc0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80028a6:	2308      	movs	r3, #8
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	4824      	ldr	r0, [pc, #144]	; (8002944 <HAL_UART_MspInit+0x100>)
 80028b2:	f001 fb81 	bl	8003fb8 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2105      	movs	r1, #5
 80028ba:	2052      	movs	r0, #82	; 0x52
 80028bc:	f000 fad0 	bl	8002e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80028c0:	2052      	movs	r0, #82	; 0x52
 80028c2:	f000 fae9 	bl	8002e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028c6:	e034      	b.n	8002932 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <HAL_UART_MspInit+0x104>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d12f      	bne.n	8002932 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_UART_MspInit+0xfc>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_UART_MspInit+0xfc>)
 80028d8:	f043 0320 	orr.w	r3, r3, #32
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_UART_MspInit+0xfc>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_UART_MspInit+0xfc>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a14      	ldr	r2, [pc, #80]	; (8002940 <HAL_UART_MspInit+0xfc>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_UART_MspInit+0xfc>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002902:	23c0      	movs	r3, #192	; 0xc0
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002912:	2308      	movs	r3, #8
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	4619      	mov	r1, r3
 800291c:	480b      	ldr	r0, [pc, #44]	; (800294c <HAL_UART_MspInit+0x108>)
 800291e:	f001 fb4b 	bl	8003fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2105      	movs	r1, #5
 8002926:	2047      	movs	r0, #71	; 0x47
 8002928:	f000 fa9a 	bl	8002e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800292c:	2047      	movs	r0, #71	; 0x47
 800292e:	f000 fab3 	bl	8002e98 <HAL_NVIC_EnableIRQ>
}
 8002932:	bf00      	nop
 8002934:	3730      	adds	r7, #48	; 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40007800 	.word	0x40007800
 8002940:	40023800 	.word	0x40023800
 8002944:	40021400 	.word	0x40021400
 8002948:	40011400 	.word	0x40011400
 800294c:	40020800 	.word	0x40020800

08002950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08c      	sub	sp, #48	; 0x30
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002960:	2200      	movs	r2, #0
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	2036      	movs	r0, #54	; 0x36
 8002966:	f000 fa7b 	bl	8002e60 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800296a:	2036      	movs	r0, #54	; 0x36
 800296c:	f000 fa94 	bl	8002e98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <HAL_InitTick+0xa0>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <HAL_InitTick+0xa0>)
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	6413      	str	r3, [r2, #64]	; 0x40
 800297c:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_InitTick+0xa0>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002988:	f107 0210 	add.w	r2, r7, #16
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f002 f9b0 	bl	8004cf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002998:	f002 f986 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 800299c:	4603      	mov	r3, r0
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <HAL_InitTick+0xa4>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9b      	lsrs	r3, r3, #18
 80029ac:	3b01      	subs	r3, #1
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_InitTick+0xa8>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <HAL_InitTick+0xac>)
 80029b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_InitTick+0xa8>)
 80029b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_InitTick+0xa8>)
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_InitTick+0xa8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_InitTick+0xa8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029d0:	4809      	ldr	r0, [pc, #36]	; (80029f8 <HAL_InitTick+0xa8>)
 80029d2:	f003 f8e9 	bl	8005ba8 <HAL_TIM_Base_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <HAL_InitTick+0xa8>)
 80029de:	f003 f945 	bl	8005c6c <HAL_TIM_Base_Start_IT>
 80029e2:	4603      	mov	r3, r0
 80029e4:	e000      	b.n	80029e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	20004dbc 	.word	0x20004dbc
 80029fc:	40001000 	.word	0x40001000

08002a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <NMI_Handler+0x4>

08002a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a0a:	e7fe      	b.n	8002a0a <HardFault_Handler+0x4>

08002a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <MemManage_Handler+0x4>

08002a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <BusFault_Handler+0x4>

08002a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <UsageFault_Handler+0x4>

08002a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <TIM6_DAC_IRQHandler+0x10>)
 8002a32:	f003 f993 	bl	8005d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20004dbc 	.word	0x20004dbc

08002a40 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <ETH_IRQHandler+0x10>)
 8002a46:	f000 fea9 	bl	800379c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20006724 	.word	0x20006724

08002a54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <USART6_IRQHandler+0x10>)
 8002a5a:	f003 fd23 	bl	80064a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20004d10 	.word	0x20004d10

08002a68 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <UART7_IRQHandler+0x10>)
 8002a6e:	f003 fd19 	bl	80064a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20004c60 	.word	0x20004c60

08002a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
	return 1;
 8002a80:	2301      	movs	r3, #1
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_kill>:

int _kill(int pid, int sig)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <_kill+0x20>)
 8002a98:	2216      	movs	r2, #22
 8002a9a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	2000b6b0 	.word	0x2000b6b0

08002ab0 <_exit>:

void _exit (int status)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ffe5 	bl	8002a8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ac2:	e7fe      	b.n	8002ac2 <_exit+0x12>

08002ac4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e00a      	b.n	8002aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ad6:	f3af 8000 	nop.w
 8002ada:	4601      	mov	r1, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	60ba      	str	r2, [r7, #8]
 8002ae2:	b2ca      	uxtb	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf0      	blt.n	8002ad6 <_read+0x12>
	}

return len;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_close>:
	}
	return len;
}

int _close(int file)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	return -1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b26:	605a      	str	r2, [r3, #4]
	return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_isatty>:

int _isatty(int file)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d205      	bcs.n	8002ba4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <_sbrk+0x6c>)
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	e009      	b.n	8002bb8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <_sbrk+0x64>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <_sbrk+0x64>)
 8002bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	20050000 	.word	0x20050000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	20000d08 	.word	0x20000d08
 8002bd0:	2000b6c8 	.word	0x2000b6c8
 8002bd4:	2000b6b0 	.word	0x2000b6b0

08002bd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <SystemInit+0x20>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <SystemInit+0x20>)
 8002be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c00:	480d      	ldr	r0, [pc, #52]	; (8002c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c02:	490e      	ldr	r1, [pc, #56]	; (8002c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c18:	4c0b      	ldr	r4, [pc, #44]	; (8002c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c26:	f7ff ffd7 	bl	8002bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2a:	f015 fb9f 	bl	801836c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2e:	f7fe f9c1 	bl	8000fb4 <main>
  bx  lr    
 8002c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	20000a50 	.word	0x20000a50
  ldr r2, =_sidata
 8002c40:	08023ba4 	.word	0x08023ba4
  ldr r2, =_sbss
 8002c44:	20000a50 	.word	0x20000a50
  ldr r4, =_ebss
 8002c48:	2000b6c4 	.word	0x2000b6c4

08002c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <ADC_IRQHandler>

08002c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c52:	2003      	movs	r0, #3
 8002c54:	f000 f8f9 	bl	8002e4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7ff fe79 	bl	8002950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c5e:	f7ff fdaf 	bl	80027c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_IncTick+0x20>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_IncTick+0x24>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_IncTick+0x24>)
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000024 	.word	0x20000024
 8002c8c:	20004e08 	.word	0x20004e08

08002c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return uwTick;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_GetTick+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20004e08 	.word	0x20004e08

08002ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7ff ffee 	bl	8002c90 <HAL_GetTick>
 8002cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d005      	beq.n	8002cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_Delay+0x44>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cce:	bf00      	nop
 8002cd0:	f7ff ffde 	bl	8002c90 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d8f7      	bhi.n	8002cd0 <HAL_Delay+0x28>
  {
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000024 	.word	0x20000024

08002cf0 <__NVIC_SetPriorityGrouping>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <__NVIC_SetPriorityGrouping+0x40>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1e:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <__NVIC_SetPriorityGrouping+0x40>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	60d3      	str	r3, [r2, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00
 8002d34:	05fa0000 	.word	0x05fa0000

08002d38 <__NVIC_GetPriorityGrouping>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <__NVIC_GetPriorityGrouping+0x18>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f003 0307 	and.w	r3, r3, #7
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_EnableIRQ>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db0b      	blt.n	8002d7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4907      	ldr	r1, [pc, #28]	; (8002d8c <__NVIC_EnableIRQ+0x38>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <__NVIC_SetPriority>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	db0a      	blt.n	8002dba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	490c      	ldr	r1, [pc, #48]	; (8002ddc <__NVIC_SetPriority+0x4c>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	440b      	add	r3, r1
 8002db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002db8:	e00a      	b.n	8002dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4908      	ldr	r1, [pc, #32]	; (8002de0 <__NVIC_SetPriority+0x50>)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3b04      	subs	r3, #4
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	440b      	add	r3, r1
 8002dce:	761a      	strb	r2, [r3, #24]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000e100 	.word	0xe000e100
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <NVIC_EncodePriority>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f1c3 0307 	rsb	r3, r3, #7
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf28      	it	cs
 8002e02:	2304      	movcs	r3, #4
 8002e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d902      	bls.n	8002e14 <NVIC_EncodePriority+0x30>
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3b03      	subs	r3, #3
 8002e12:	e000      	b.n	8002e16 <NVIC_EncodePriority+0x32>
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	401a      	ands	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	4313      	orrs	r3, r2
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ff4c 	bl	8002cf0 <__NVIC_SetPriorityGrouping>
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e72:	f7ff ff61 	bl	8002d38 <__NVIC_GetPriorityGrouping>
 8002e76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	6978      	ldr	r0, [r7, #20]
 8002e7e:	f7ff ffb1 	bl	8002de4 <NVIC_EncodePriority>
 8002e82:	4602      	mov	r2, r0
 8002e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff80 	bl	8002d90 <__NVIC_SetPriority>
}
 8002e90:	bf00      	nop
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff54 	bl	8002d54 <__NVIC_EnableIRQ>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ec2:	f7ff fee5 	bl	8002c90 <HAL_GetTick>
 8002ec6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d008      	beq.n	8002ee6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e052      	b.n	8002f8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0216 	bic.w	r2, r2, #22
 8002ef4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <HAL_DMA_Abort+0x62>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0208 	bic.w	r2, r2, #8
 8002f24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0201 	bic.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f36:	e013      	b.n	8002f60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f38:	f7ff feaa 	bl	8002c90 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d90c      	bls.n	8002f60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e015      	b.n	8002f8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e4      	bne.n	8002f38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	223f      	movs	r2, #63	; 0x3f
 8002f74:	409a      	lsls	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e00c      	b.n	8002fcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002fe8:	4ba9      	ldr	r3, [pc, #676]	; (8003290 <HAL_ETH_Init+0x2b8>)
 8002fea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e181      	b.n	8003302 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f004 fdd4 	bl	8007bc0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003018:	4b9e      	ldr	r3, [pc, #632]	; (8003294 <HAL_ETH_Init+0x2bc>)
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	4a9d      	ldr	r2, [pc, #628]	; (8003294 <HAL_ETH_Init+0x2bc>)
 800301e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003022:	6453      	str	r3, [r2, #68]	; 0x44
 8003024:	4b9b      	ldr	r3, [pc, #620]	; (8003294 <HAL_ETH_Init+0x2bc>)
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003030:	4b99      	ldr	r3, [pc, #612]	; (8003298 <HAL_ETH_Init+0x2c0>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a98      	ldr	r2, [pc, #608]	; (8003298 <HAL_ETH_Init+0x2c0>)
 8003036:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800303a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800303c:	4b96      	ldr	r3, [pc, #600]	; (8003298 <HAL_ETH_Init+0x2c0>)
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4994      	ldr	r1, [pc, #592]	; (8003298 <HAL_ETH_Init+0x2c0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003060:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003062:	f7ff fe15 	bl	8002c90 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003068:	e011      	b.n	800308e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800306a:	f7ff fe11 	bl	8002c90 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003078:	d909      	bls.n	800308e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e139      	b.n	8003302 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e4      	bne.n	800306a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f023 031c 	bic.w	r3, r3, #28
 80030ae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80030b0:	f001 fdee 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 80030b4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4a78      	ldr	r2, [pc, #480]	; (800329c <HAL_ETH_Init+0x2c4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d908      	bls.n	80030d0 <HAL_ETH_Init+0xf8>
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4a77      	ldr	r2, [pc, #476]	; (80032a0 <HAL_ETH_Init+0x2c8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d804      	bhi.n	80030d0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e027      	b.n	8003120 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4a73      	ldr	r2, [pc, #460]	; (80032a0 <HAL_ETH_Init+0x2c8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d908      	bls.n	80030ea <HAL_ETH_Init+0x112>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	4a6d      	ldr	r2, [pc, #436]	; (8003290 <HAL_ETH_Init+0x2b8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d204      	bcs.n	80030ea <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f043 030c 	orr.w	r3, r3, #12
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e01a      	b.n	8003120 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4a68      	ldr	r2, [pc, #416]	; (8003290 <HAL_ETH_Init+0x2b8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d303      	bcc.n	80030fa <HAL_ETH_Init+0x122>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4a6b      	ldr	r2, [pc, #428]	; (80032a4 <HAL_ETH_Init+0x2cc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d911      	bls.n	800311e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <HAL_ETH_Init+0x2cc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d908      	bls.n	8003114 <HAL_ETH_Init+0x13c>
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4a68      	ldr	r2, [pc, #416]	; (80032a8 <HAL_ETH_Init+0x2d0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d804      	bhi.n	8003114 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e005      	b.n	8003120 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f043 0310 	orr.w	r3, r3, #16
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	e000      	b.n	8003120 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800311e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003128:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800312c:	2100      	movs	r1, #0
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fc17 	bl	8003962 <HAL_ETH_WritePHYRegister>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800313e:	6939      	ldr	r1, [r7, #16]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fca3 	bl	8003a8c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0d7      	b.n	8003302 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003152:	20ff      	movs	r0, #255	; 0xff
 8003154:	f7ff fda8 	bl	8002ca8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a5 	beq.w	80032ac <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003162:	f7ff fd95 	bl	8002c90 <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	461a      	mov	r2, r3
 800316e:	2101      	movs	r1, #1
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fb8e 	bl	8003892 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003176:	f7ff fd8b 	bl	8002c90 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d90f      	bls.n	80031a8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fc7c 	bl	8003a8c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e0ac      	b.n	8003302 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0da      	beq.n	8003168 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80031b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031b6:	2100      	movs	r1, #0
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fbd2 	bl	8003962 <HAL_ETH_WritePHYRegister>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031c8:	6939      	ldr	r1, [r7, #16]
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fc5e 	bl	8003a8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80031d8:	2301      	movs	r3, #1
 80031da:	e092      	b.n	8003302 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80031dc:	f7ff fd58 	bl	8002c90 <HAL_GetTick>
 80031e0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	461a      	mov	r2, r3
 80031e8:	2101      	movs	r1, #1
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fb51 	bl	8003892 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80031f0:	f7ff fd4e 	bl	8002c90 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d90f      	bls.n	8003222 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003206:	6939      	ldr	r1, [r7, #16]
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fc3f 	bl	8003a8c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e06f      	b.n	8003302 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0da      	beq.n	80031e2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	461a      	mov	r2, r3
 8003232:	2110      	movs	r1, #16
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fb2c 	bl	8003892 <HAL_ETH_ReadPHYRegister>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003244:	6939      	ldr	r1, [r7, #16]
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fc20 	bl	8003a8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003254:	2301      	movs	r3, #1
 8003256:	e054      	b.n	8003302 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	e002      	b.n	8003272 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	e035      	b.n	80032f0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	e030      	b.n	80032f0 <HAL_ETH_Init+0x318>
 800328e:	bf00      	nop
 8003290:	03938700 	.word	0x03938700
 8003294:	40023800 	.word	0x40023800
 8003298:	40013800 	.word	0x40013800
 800329c:	01312cff 	.word	0x01312cff
 80032a0:	02160ebf 	.word	0x02160ebf
 80032a4:	05f5e0ff 	.word	0x05f5e0ff
 80032a8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	08db      	lsrs	r3, r3, #3
 80032b2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80032bc:	4313      	orrs	r3, r2
 80032be:	b29b      	uxth	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	2100      	movs	r1, #0
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fb4c 	bl	8003962 <HAL_ETH_WritePHYRegister>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80032d4:	6939      	ldr	r1, [r7, #16]
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fbd8 	bl	8003a8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e00c      	b.n	8003302 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80032e8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80032ec:	f7ff fcdc 	bl	8002ca8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80032f0:	6939      	ldr	r1, [r7, #16]
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fbca 	bl	8003a8c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop

0800330c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_ETH_DMATxDescListInit+0x20>
 8003328:	2302      	movs	r3, #2
 800332a:	e052      	b.n	80033d2 <HAL_ETH_DMATxDescListInit+0xc6>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e030      	b.n	80033aa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	4413      	add	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003358:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	461a      	mov	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3b01      	subs	r3, #1
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	d208      	bcs.n	800339e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3301      	adds	r3, #1
 8003390:	015b      	lsls	r3, r3, #5
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	4413      	add	r3, r2
 8003396:	461a      	mov	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	e002      	b.n	80033a4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3301      	adds	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d3ca      	bcc.n	8003348 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f241 0310 	movw	r3, #4112	; 0x1010
 80033bc:	440b      	add	r3, r1
 80033be:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80033de:	b480      	push	{r7}
 80033e0:	b087      	sub	sp, #28
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_ETH_DMARxDescListInit+0x20>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e056      	b.n	80034ac <HAL_ETH_DMARxDescListInit+0xce>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e034      	b.n	8003484 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	4413      	add	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800342a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003432:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	461a      	mov	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	429a      	cmp	r2, r3
 8003464:	d208      	bcs.n	8003478 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3301      	adds	r3, #1
 800346a:	015b      	lsls	r3, r3, #5
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4413      	add	r3, r2
 8003470:	461a      	mov	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	e002      	b.n	800347e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3301      	adds	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d3c6      	bcc.n	800341a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	f241 030c 	movw	r3, #4108	; 0x100c
 8003496:	440b      	add	r3, r1
 8003498:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_ETH_TransmitFrame+0x24>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0cd      	b.n	8003678 <HAL_ETH_TransmitFrame+0x1c0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003502:	2301      	movs	r3, #1
 8003504:	e0b8      	b.n	8003678 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	da09      	bge.n	8003524 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2212      	movs	r2, #18
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0a9      	b.n	8003678 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800352a:	4293      	cmp	r3, r2
 800352c:	d915      	bls.n	800355a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_ETH_TransmitFrame+0x1cc>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0a9b      	lsrs	r3, r3, #10
 8003538:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	4b51      	ldr	r3, [pc, #324]	; (8003684 <HAL_ETH_TransmitFrame+0x1cc>)
 800353e:	fba3 1302 	umull	r1, r3, r3, r2
 8003542:	0a9b      	lsrs	r3, r3, #10
 8003544:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3301      	adds	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e001      	b.n	800355e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d11c      	bne.n	800359e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003572:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800357e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800358e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	461a      	mov	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
 800359c:	e04b      	b.n	8003636 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	e044      	b.n	800362e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035b2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035c8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035d2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d116      	bne.n	800360c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80035ec:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <HAL_ETH_TransmitFrame+0x1d0>)
 80035f2:	fb02 f203 	mul.w	r2, r2, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	4413      	add	r3, r2
 80035fa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80035fe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800360a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800361a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	461a      	mov	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	3301      	adds	r3, #1
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	429a      	cmp	r2, r3
 8003634:	d3b6      	bcc.n	80035a4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f241 0314 	movw	r3, #4116	; 0x1014
 800363e:	4413      	add	r3, r2
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f241 0314 	movw	r3, #4116	; 0x1014
 8003652:	4413      	add	r3, r2
 8003654:	2204      	movs	r2, #4
 8003656:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f241 0304 	movw	r3, #4100	; 0x1004
 8003660:	4413      	add	r3, r2
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	ac02b00b 	.word	0xac02b00b
 8003688:	fffffa0c 	.word	0xfffffa0c

0800368c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e074      	b.n	8003790 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80036b6:	e05a      	b.n	800376e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036cc:	d10d      	bne.n	80036ea <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	461a      	mov	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
 80036e8:	e041      	b.n	800376e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	461a      	mov	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	629a      	str	r2, [r3, #40]	; 0x28
 800370e:	e02e      	b.n	800376e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	2b01      	cmp	r3, #1
 8003728:	d103      	bne.n	8003732 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800373e:	1f1a      	subs	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	461a      	mov	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e010      	b.n	8003790 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	db02      	blt.n	800377e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d99c      	bls.n	80036b8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	f241 0314 	movw	r3, #4116	; 0x1014
 80037ac:	4413      	add	r3, r2
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d112      	bne.n	80037de <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f004 faa3 	bl	8007d04 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f241 0314 	movw	r3, #4116	; 0x1014
 80037c6:	4413      	add	r3, r2
 80037c8:	2240      	movs	r2, #64	; 0x40
 80037ca:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037dc:	e01b      	b.n	8003816 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f241 0314 	movw	r3, #4116	; 0x1014
 80037e6:	4413      	add	r3, r2
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d111      	bne.n	8003816 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f839 	bl	800386a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8003800:	4413      	add	r3, r2
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f241 0314 	movw	r3, #4116	; 0x1014
 800381e:	4413      	add	r3, r2
 8003820:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003824:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f241 0314 	movw	r3, #4116	; 0x1014
 800382e:	4413      	add	r3, r2
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383a:	d112      	bne.n	8003862 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f81e 	bl	800387e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	f241 0314 	movw	r3, #4116	; 0x1014
 800384a:	4413      	add	r3, r2
 800384c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003850:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	460b      	mov	r3, r1
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b82      	cmp	r3, #130	; 0x82
 80038b2:	d101      	bne.n	80038b8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
 80038b6:	e050      	b.n	800395a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2282      	movs	r2, #130	; 0x82
 80038bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 031c 	and.w	r3, r3, #28
 80038ce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8a1b      	ldrh	r3, [r3, #16]
 80038d4:	02db      	lsls	r3, r3, #11
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80038de:	897b      	ldrh	r3, [r7, #10]
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0302 	bic.w	r3, r3, #2
 80038f2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003904:	f7ff f9c4 	bl	8002c90 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800390a:	e015      	b.n	8003938 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800390c:	f7ff f9c0 	bl	8002c90 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391a:	d309      	bcc.n	8003930 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e014      	b.n	800395a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e4      	bne.n	800390c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	b29b      	uxth	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	460b      	mov	r3, r1
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b42      	cmp	r3, #66	; 0x42
 8003982:	d101      	bne.n	8003988 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
 8003986:	e04e      	b.n	8003a26 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2242      	movs	r2, #66	; 0x42
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 031c 	and.w	r3, r3, #28
 800399e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8a1b      	ldrh	r3, [r3, #16]
 80039a4:	02db      	lsls	r3, r3, #11
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80039de:	f7ff f957 	bl	8002c90 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80039e4:	e015      	b.n	8003a12 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80039e6:	f7ff f953 	bl	8002c90 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d309      	bcc.n	8003a0a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e00d      	b.n	8003a26 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e4      	bne.n	80039e6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_ETH_Start+0x16>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e01f      	b.n	8003a84 <HAL_ETH_Start+0x56>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa1b 	bl	8003e90 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa35 	bl	8003eca <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fa7f 	bl	8003f64 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa4c 	bl	8003f04 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fa61 	bl	8003f34 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b0b0      	sub	sp, #192	; 0xc0
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003aba:	2300      	movs	r3, #0
 8003abc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad8:	e001      	b.n	8003ade <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003af8:	2340      	movs	r3, #64	; 0x40
 8003afa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003b60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b64:	4bab      	ldr	r3, [pc, #684]	; (8003e14 <ETH_MACDMAConfig+0x388>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003b70:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003b74:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003b78:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003b7e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003b82:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003b86:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003b8c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003b90:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003b94:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003b98:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003b9c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003ba0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003ba2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bb4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7ff f871 	bl	8002ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bce:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bd4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003bd8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003bde:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003be4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003bea:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003bf0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003bf4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003bfc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bfe:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f7ff f84c 	bl	8002ca8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c18:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c22:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c2c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003c38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c3c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c40:	4013      	ands	r3, r2
 8003c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c4a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003c4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003c50:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003c56:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003c5c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003c62:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003c68:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003c6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c7c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f7ff f80d 	bl	8002ca8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c96:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003c98:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003c9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f7fe fff8 	bl	8002ca8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cc0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cca:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003cd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cd4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cf4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	f241 0318 	movw	r3, #4120	; 0x1018
 8003d16:	4413      	add	r3, r2
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003d1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d22:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <ETH_MACDMAConfig+0x38c>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d2a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003d2c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d2e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003d30:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003d32:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003d34:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003d36:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003d38:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003d3a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003d3c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003d3e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003d40:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003d42:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003d46:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003d4a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003d5e:	4413      	add	r3, r2
 8003d60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d64:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003d6e:	4413      	add	r3, r2
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d76:	2001      	movs	r0, #1
 8003d78:	f7fe ff96 	bl	8002ca8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	f241 0318 	movw	r3, #4120	; 0x1018
 8003d84:	4413      	add	r3, r2
 8003d86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d8a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003d90:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003d94:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003d98:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003d9c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003da2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003da6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	f7fe ff6f 	bl	8002ca8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dd6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10d      	bne.n	8003dfc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	f241 031c 	movw	r3, #4124	; 0x101c
 8003de8:	4413      	add	r3, r2
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6811      	ldr	r1, [r2, #0]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <ETH_MACDMAConfig+0x390>)
 8003df2:	431a      	orrs	r2, r3
 8003df4:	f241 031c 	movw	r3, #4124	; 0x101c
 8003df8:	440b      	add	r3, r1
 8003dfa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	461a      	mov	r2, r3
 8003e02:	2100      	movs	r1, #0
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f80b 	bl	8003e20 <ETH_MACAddressConfig>
}
 8003e0a:	bf00      	nop
 8003e0c:	37c0      	adds	r7, #192	; 0xc0
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	ff20810f 	.word	0xff20810f
 8003e18:	f8de3f23 	.word	0xf8de3f23
 8003e1c:	00010040 	.word	0x00010040

08003e20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3305      	adds	r3, #5
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	3204      	adds	r2, #4
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <ETH_MACAddressConfig+0x68>)
 8003e42:	4413      	add	r3, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	061a      	lsls	r2, r3, #24
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3302      	adds	r3, #2
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	4313      	orrs	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <ETH_MACAddressConfig+0x6c>)
 8003e72:	4413      	add	r3, r2
 8003e74:	461a      	mov	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6013      	str	r3, [r2, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40028040 	.word	0x40028040
 8003e8c:	40028044 	.word	0x40028044

08003e90 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f7fe fef7 	bl	8002ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	601a      	str	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0204 	orr.w	r2, r2, #4
 8003ee4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7fe feda 	bl	8002ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	601a      	str	r2, [r3, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f14:	4413      	add	r3, r2
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6811      	ldr	r1, [r2, #0]
 8003f1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f20:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f24:	440b      	add	r3, r1
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f44:	4413      	add	r3, r2
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6811      	ldr	r1, [r2, #0]
 8003f4c:	f043 0202 	orr.w	r2, r3, #2
 8003f50:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f54:	440b      	add	r3, r1
 8003f56:	601a      	str	r2, [r3, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f78:	4413      	add	r3, r2
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6811      	ldr	r1, [r2, #0]
 8003f80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f84:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f88:	440b      	add	r3, r1
 8003f8a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f94:	4413      	add	r3, r2
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f7fe fe84 	bl	8002ca8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	f241 0318 	movw	r3, #4120	; 0x1018
 8003faa:	440b      	add	r3, r1
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e175      	b.n	80042c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fd8:	2201      	movs	r2, #1
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f040 8164 	bne.w	80042be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d005      	beq.n	800400e <HAL_GPIO_Init+0x56>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d130      	bne.n	8004070 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004044:	2201      	movs	r2, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 0201 	and.w	r2, r3, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2b03      	cmp	r3, #3
 800407a:	d017      	beq.n	80040ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d123      	bne.n	8004100 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	08da      	lsrs	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3208      	adds	r2, #8
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	220f      	movs	r2, #15
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	08da      	lsrs	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3208      	adds	r2, #8
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80be 	beq.w	80042be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	4b66      	ldr	r3, [pc, #408]	; (80042dc <HAL_GPIO_Init+0x324>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	4a65      	ldr	r2, [pc, #404]	; (80042dc <HAL_GPIO_Init+0x324>)
 8004148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800414c:	6453      	str	r3, [r2, #68]	; 0x44
 800414e:	4b63      	ldr	r3, [pc, #396]	; (80042dc <HAL_GPIO_Init+0x324>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800415a:	4a61      	ldr	r2, [pc, #388]	; (80042e0 <HAL_GPIO_Init+0x328>)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	3302      	adds	r3, #2
 8004162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	220f      	movs	r2, #15
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4013      	ands	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_GPIO_Init+0x32c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d037      	beq.n	80041f6 <HAL_GPIO_Init+0x23e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a57      	ldr	r2, [pc, #348]	; (80042e8 <HAL_GPIO_Init+0x330>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d031      	beq.n	80041f2 <HAL_GPIO_Init+0x23a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a56      	ldr	r2, [pc, #344]	; (80042ec <HAL_GPIO_Init+0x334>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02b      	beq.n	80041ee <HAL_GPIO_Init+0x236>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a55      	ldr	r2, [pc, #340]	; (80042f0 <HAL_GPIO_Init+0x338>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d025      	beq.n	80041ea <HAL_GPIO_Init+0x232>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a54      	ldr	r2, [pc, #336]	; (80042f4 <HAL_GPIO_Init+0x33c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01f      	beq.n	80041e6 <HAL_GPIO_Init+0x22e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a53      	ldr	r2, [pc, #332]	; (80042f8 <HAL_GPIO_Init+0x340>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d019      	beq.n	80041e2 <HAL_GPIO_Init+0x22a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a52      	ldr	r2, [pc, #328]	; (80042fc <HAL_GPIO_Init+0x344>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_GPIO_Init+0x226>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a51      	ldr	r2, [pc, #324]	; (8004300 <HAL_GPIO_Init+0x348>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00d      	beq.n	80041da <HAL_GPIO_Init+0x222>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a50      	ldr	r2, [pc, #320]	; (8004304 <HAL_GPIO_Init+0x34c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <HAL_GPIO_Init+0x21e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4f      	ldr	r2, [pc, #316]	; (8004308 <HAL_GPIO_Init+0x350>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_GPIO_Init+0x21a>
 80041ce:	2309      	movs	r3, #9
 80041d0:	e012      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041d2:	230a      	movs	r3, #10
 80041d4:	e010      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041d6:	2308      	movs	r3, #8
 80041d8:	e00e      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041da:	2307      	movs	r3, #7
 80041dc:	e00c      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041de:	2306      	movs	r3, #6
 80041e0:	e00a      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041e2:	2305      	movs	r3, #5
 80041e4:	e008      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041e6:	2304      	movs	r3, #4
 80041e8:	e006      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041ea:	2303      	movs	r3, #3
 80041ec:	e004      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_GPIO_Init+0x240>
 80041f6:	2300      	movs	r3, #0
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	f002 0203 	and.w	r2, r2, #3
 80041fe:	0092      	lsls	r2, r2, #2
 8004200:	4093      	lsls	r3, r2
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004208:	4935      	ldr	r1, [pc, #212]	; (80042e0 <HAL_GPIO_Init+0x328>)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	3302      	adds	r3, #2
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004216:	4b3d      	ldr	r3, [pc, #244]	; (800430c <HAL_GPIO_Init+0x354>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800423a:	4a34      	ldr	r2, [pc, #208]	; (800430c <HAL_GPIO_Init+0x354>)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004240:	4b32      	ldr	r3, [pc, #200]	; (800430c <HAL_GPIO_Init+0x354>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <HAL_GPIO_Init+0x354>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800426a:	4b28      	ldr	r3, [pc, #160]	; (800430c <HAL_GPIO_Init+0x354>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800428e:	4a1f      	ldr	r2, [pc, #124]	; (800430c <HAL_GPIO_Init+0x354>)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004294:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_GPIO_Init+0x354>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <HAL_GPIO_Init+0x354>)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	f67f ae86 	bls.w	8003fd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3724      	adds	r7, #36	; 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40013800 	.word	0x40013800
 80042e4:	40020000 	.word	0x40020000
 80042e8:	40020400 	.word	0x40020400
 80042ec:	40020800 	.word	0x40020800
 80042f0:	40020c00 	.word	0x40020c00
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40021400 	.word	0x40021400
 80042fc:	40021800 	.word	0x40021800
 8004300:	40021c00 	.word	0x40021c00
 8004304:	40022000 	.word	0x40022000
 8004308:	40022400 	.word	0x40022400
 800430c:	40013c00 	.word	0x40013c00

08004310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
 800431c:	4613      	mov	r3, r2
 800431e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004320:	787b      	ldrb	r3, [r7, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800432c:	e003      	b.n	8004336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	041a      	lsls	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	619a      	str	r2, [r3, #24]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000

08004364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a22      	ldr	r2, [pc, #136]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004392:	f7fe fc7d 	bl	8002c90 <HAL_GetTick>
 8004396:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004398:	e009      	b.n	80043ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800439a:	f7fe fc79 	bl	8002c90 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a8:	d901      	bls.n	80043ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e022      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ba:	d1ee      	bne.n	800439a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043c8:	f7fe fc62 	bl	8002c90 <HAL_GetTick>
 80043cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ce:	e009      	b.n	80043e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043d0:	f7fe fc5e 	bl	8002c90 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043de:	d901      	bls.n	80043e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e007      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f0:	d1ee      	bne.n	80043d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	40007000 	.word	0x40007000

08004404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e291      	b.n	800493e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	4b96      	ldr	r3, [pc, #600]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004434:	4b93      	ldr	r3, [pc, #588]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x62>
 8004440:	4b90      	ldr	r3, [pc, #576]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b8d      	ldr	r3, [pc, #564]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x130>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e26b      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x7a>
 8004470:	4b84      	ldr	r3, [pc, #528]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a83      	ldr	r2, [pc, #524]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x9c>
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b7c      	ldr	r3, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7b      	ldr	r2, [pc, #492]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xc0>
 80044aa:	4b76      	ldr	r3, [pc, #472]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a75      	ldr	r2, [pc, #468]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a72      	ldr	r2, [pc, #456]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 80044c4:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6e      	ldr	r2, [pc, #440]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b6c      	ldr	r3, [pc, #432]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6b      	ldr	r2, [pc, #428]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe fbd4 	bl	8002c90 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fe fbd0 	bl	8002c90 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e21f      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe8>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fe fbc0 	bl	8002c90 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fe fbbc 	bl	8002c90 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e20b      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x110>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d069      	beq.n	8004616 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004542:	4b50      	ldr	r3, [pc, #320]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x190>
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b47      	ldr	r3, [pc, #284]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x17a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1df      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b41      	ldr	r3, [pc, #260]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	493d      	ldr	r1, [pc, #244]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e040      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d023      	beq.n	80045e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b39      	ldr	r3, [pc, #228]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a38      	ldr	r2, [pc, #224]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fe fb72 	bl	8002c90 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fe fb6e 	bl	8002c90 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1bd      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	4b30      	ldr	r3, [pc, #192]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4929      	ldr	r1, [pc, #164]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
 80045e2:	e018      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a26      	ldr	r2, [pc, #152]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fb4e 	bl	8002c90 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fe fb4a 	bl	8002c90 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e199      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d038      	beq.n	8004694 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004636:	f7fe fb2b 	bl	8002c90 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463e:	f7fe fb27 	bl	8002c90 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e176      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x23a>
 800465c:	e01a      	b.n	8004694 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466a:	f7fe fb11 	bl	8002c90 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	e00a      	b.n	8004688 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004672:	f7fe fb0d 	bl	8002c90 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d903      	bls.n	8004688 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e15c      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
 8004684:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b91      	ldr	r3, [pc, #580]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ee      	bne.n	8004672 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80a4 	beq.w	80047ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a2:	4b8b      	ldr	r3, [pc, #556]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	4b88      	ldr	r3, [pc, #544]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a87      	ldr	r2, [pc, #540]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ba:	4b85      	ldr	r3, [pc, #532]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ca:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d118      	bne.n	8004708 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046d6:	4b7f      	ldr	r3, [pc, #508]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7e      	ldr	r2, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e2:	f7fe fad5 	bl	8002c90 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fe fad1 	bl	8002c90 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	; 0x64
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e120      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fc:	4b75      	ldr	r3, [pc, #468]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x31a>
 8004710:	4b6f      	ldr	r3, [pc, #444]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a6e      	ldr	r2, [pc, #440]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	e02d      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x33c>
 8004726:	4b6a      	ldr	r3, [pc, #424]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a69      	ldr	r2, [pc, #420]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
 8004732:	4b67      	ldr	r3, [pc, #412]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a66      	ldr	r2, [pc, #408]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	e01c      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d10c      	bne.n	8004762 <HAL_RCC_OscConfig+0x35e>
 8004748:	4b61      	ldr	r3, [pc, #388]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a60      	ldr	r2, [pc, #384]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	4b5e      	ldr	r3, [pc, #376]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a5d      	ldr	r2, [pc, #372]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
 8004760:	e00b      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 8004762:	4b5b      	ldr	r3, [pc, #364]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a5a      	ldr	r2, [pc, #360]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
 800476e:	4b58      	ldr	r3, [pc, #352]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a57      	ldr	r2, [pc, #348]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d015      	beq.n	80047ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fe fa85 	bl	8002c90 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fe fa81 	bl	8002c90 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0ce      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	4b4b      	ldr	r3, [pc, #300]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ee      	beq.n	800478a <HAL_RCC_OscConfig+0x386>
 80047ac:	e014      	b.n	80047d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fe fa6f 	bl	8002c90 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe fa6b 	bl	8002c90 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0b8      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047cc:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ee      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4b3c      	ldr	r3, [pc, #240]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80a4 	beq.w	800493c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f4:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d06b      	beq.n	80048d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d149      	bne.n	800489c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a30      	ldr	r2, [pc, #192]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fe fa3c 	bl	8002c90 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fe fa38 	bl	8002c90 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e087      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	4313      	orrs	r3, r2
 8004860:	4a1b      	ldr	r2, [pc, #108]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004866:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800486e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fe fa0c 	bl	8002c90 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487c:	f7fe fa08 	bl	8002c90 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e057      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488e:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x478>
 800489a:	e04f      	b.n	800493c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489c:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80048a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fe f9f2 	bl	8002c90 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fe f9ee 	bl	8002c90 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e03d      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4ac>
 80048ce:	e035      	b.n	800493c <HAL_RCC_OscConfig+0x538>
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_RCC_OscConfig+0x544>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d028      	beq.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d121      	bne.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d11a      	bne.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800490e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004910:	4293      	cmp	r3, r2
 8004912:	d111      	bne.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	3b01      	subs	r3, #1
 8004922:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800

0800494c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0d0      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d910      	bls.n	8004994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 020f 	bic.w	r2, r3, #15
 800497a:	4965      	ldr	r1, [pc, #404]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b8      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b59      	ldr	r3, [pc, #356]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a52      	ldr	r2, [pc, #328]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	494d      	ldr	r1, [pc, #308]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d040      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d115      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e073      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06b      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4936      	ldr	r1, [pc, #216]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fe f926 	bl	8002c90 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fe f922 	bl	8002c90 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e053      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d210      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 020f 	bic.w	r2, r3, #15
 8004a86:	4922      	ldr	r1, [pc, #136]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4916      	ldr	r1, [pc, #88]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ade:	f000 f821 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	490a      	ldr	r1, [pc, #40]	; (8004b18 <HAL_RCC_ClockConfig+0x1cc>)
 8004af0:	5ccb      	ldrb	r3, [r1, r3]
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <HAL_RCC_ClockConfig+0x1d0>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1d4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd ff26 	bl	8002950 <HAL_InitTick>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023c00 	.word	0x40023c00
 8004b14:	40023800 	.word	0x40023800
 8004b18:	08023544 	.word	0x08023544
 8004b1c:	2000001c 	.word	0x2000001c
 8004b20:	20000020 	.word	0x20000020

08004b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b24:	b5b0      	push	{r4, r5, r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	6079      	str	r1, [r7, #4]
 8004b2e:	2100      	movs	r1, #0
 8004b30:	60f9      	str	r1, [r7, #12]
 8004b32:	2100      	movs	r1, #0
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b36:	2100      	movs	r1, #0
 8004b38:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b3a:	4952      	ldr	r1, [pc, #328]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b3c:	6889      	ldr	r1, [r1, #8]
 8004b3e:	f001 010c 	and.w	r1, r1, #12
 8004b42:	2908      	cmp	r1, #8
 8004b44:	d00d      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x3e>
 8004b46:	2908      	cmp	r1, #8
 8004b48:	f200 8094 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x150>
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x32>
 8004b50:	2904      	cmp	r1, #4
 8004b52:	d003      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x38>
 8004b54:	e08e      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b56:	4b4c      	ldr	r3, [pc, #304]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x164>)
 8004b58:	60bb      	str	r3, [r7, #8]
      break;
 8004b5a:	e08e      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b5c:	4b4b      	ldr	r3, [pc, #300]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x168>)
 8004b5e:	60bb      	str	r3, [r7, #8]
      break;
 8004b60:	e08b      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b62:	4948      	ldr	r1, [pc, #288]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b64:	6849      	ldr	r1, [r1, #4]
 8004b66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004b6a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b6c:	4945      	ldr	r1, [pc, #276]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b6e:	6849      	ldr	r1, [r1, #4]
 8004b70:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d024      	beq.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b78:	4942      	ldr	r1, [pc, #264]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b7a:	6849      	ldr	r1, [r1, #4]
 8004b7c:	0989      	lsrs	r1, r1, #6
 8004b7e:	4608      	mov	r0, r1
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004b88:	f04f 0500 	mov.w	r5, #0
 8004b8c:	ea00 0204 	and.w	r2, r0, r4
 8004b90:	ea01 0305 	and.w	r3, r1, r5
 8004b94:	493d      	ldr	r1, [pc, #244]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x168>)
 8004b96:	fb01 f003 	mul.w	r0, r1, r3
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	fb01 f102 	mul.w	r1, r1, r2
 8004ba0:	1844      	adds	r4, r0, r1
 8004ba2:	493a      	ldr	r1, [pc, #232]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x168>)
 8004ba4:	fba2 0101 	umull	r0, r1, r2, r1
 8004ba8:	1863      	adds	r3, r4, r1
 8004baa:	4619      	mov	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f7fc f822 	bl	8000bfc <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e04a      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b30      	ldr	r3, [pc, #192]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	ea02 0400 	and.w	r4, r2, r0
 8004bda:	ea03 0501 	and.w	r5, r3, r1
 8004bde:	4620      	mov	r0, r4
 8004be0:	4629      	mov	r1, r5
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	014b      	lsls	r3, r1, #5
 8004bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bf0:	0142      	lsls	r2, r0, #5
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	1b00      	subs	r0, r0, r4
 8004bf8:	eb61 0105 	sbc.w	r1, r1, r5
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	018b      	lsls	r3, r1, #6
 8004c06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c0a:	0182      	lsls	r2, r0, #6
 8004c0c:	1a12      	subs	r2, r2, r0
 8004c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	00d9      	lsls	r1, r3, #3
 8004c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c20:	00d0      	lsls	r0, r2, #3
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	1912      	adds	r2, r2, r4
 8004c28:	eb45 0303 	adc.w	r3, r5, r3
 8004c2c:	f04f 0000 	mov.w	r0, #0
 8004c30:	f04f 0100 	mov.w	r1, #0
 8004c34:	0299      	lsls	r1, r3, #10
 8004c36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c3a:	0290      	lsls	r0, r2, #10
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	f7fb ffd6 	bl	8000bfc <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4613      	mov	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	3301      	adds	r3, #1
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	60bb      	str	r3, [r7, #8]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x164>)
 8004c76:	60bb      	str	r3, [r7, #8]
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bdb0      	pop	{r4, r5, r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	00f42400 	.word	0x00f42400
 8004c8c:	017d7840 	.word	0x017d7840

08004c90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c94:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	2000001c 	.word	0x2000001c

08004ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cac:	f7ff fff0 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	0a9b      	lsrs	r3, r3, #10
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	4903      	ldr	r1, [pc, #12]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	08023554 	.word	0x08023554

08004cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd4:	f7ff ffdc 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	0b5b      	lsrs	r3, r3, #13
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	4903      	ldr	r1, [pc, #12]	; (8004cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	08023554 	.word	0x08023554

08004cf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	220f      	movs	r2, #15
 8004d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <HAL_RCC_GetClockConfig+0x5c>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0203 	and.w	r2, r3, #3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_RCC_GetClockConfig+0x5c>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_RCC_GetClockConfig+0x5c>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	08db      	lsrs	r3, r3, #3
 8004d32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <HAL_RCC_GetClockConfig+0x60>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	601a      	str	r2, [r3, #0]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40023c00 	.word	0x40023c00

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d012      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d84:	4b69      	ldr	r3, [pc, #420]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	4a68      	ldr	r2, [pc, #416]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d8e:	6093      	str	r3, [r2, #8]
 8004d90:	4b66      	ldr	r3, [pc, #408]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	4964      	ldr	r1, [pc, #400]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004da6:	2301      	movs	r3, #1
 8004da8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d017      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db6:	4b5d      	ldr	r3, [pc, #372]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	4959      	ldr	r1, [pc, #356]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd4:	d101      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004df2:	4b4e      	ldr	r3, [pc, #312]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	494a      	ldr	r1, [pc, #296]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e10:	d101      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 808b 	beq.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e40:	4b3a      	ldr	r3, [pc, #232]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	4a39      	ldr	r2, [pc, #228]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4c:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e58:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a34      	ldr	r2, [pc, #208]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e64:	f7fd ff14 	bl	8002c90 <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fd ff10 	bl	8002c90 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e357      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e7e:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e8a:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d035      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d02e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea8:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb2:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ebe:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a1a      	ldr	r2, [pc, #104]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ed0:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d114      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fd fed8 	bl	8002c90 <HAL_GetTick>
 8004ee0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fd fed4 	bl	8002c90 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e319      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ee      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f12:	d111      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f22:	400b      	ands	r3, r1
 8004f24:	4901      	ldr	r1, [pc, #4]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40007000 	.word	0x40007000
 8004f34:	0ffffcff 	.word	0x0ffffcff
 8004f38:	4bb1      	ldr	r3, [pc, #708]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4ab0      	ldr	r2, [pc, #704]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f42:	6093      	str	r3, [r2, #8]
 8004f44:	4bae      	ldr	r3, [pc, #696]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f50:	49ab      	ldr	r1, [pc, #684]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d010      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f62:	4ba7      	ldr	r3, [pc, #668]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f68:	4aa5      	ldr	r2, [pc, #660]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f72:	4ba3      	ldr	r3, [pc, #652]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	49a0      	ldr	r1, [pc, #640]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f90:	4b9b      	ldr	r3, [pc, #620]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9e:	4998      	ldr	r1, [pc, #608]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fb2:	4b93      	ldr	r3, [pc, #588]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc0:	498f      	ldr	r1, [pc, #572]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd4:	4b8a      	ldr	r3, [pc, #552]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe2:	4987      	ldr	r1, [pc, #540]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ff6:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	497e      	ldr	r1, [pc, #504]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005018:	4b79      	ldr	r3, [pc, #484]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f023 0203 	bic.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	4976      	ldr	r1, [pc, #472]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800503a:	4b71      	ldr	r3, [pc, #452]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f023 020c 	bic.w	r2, r3, #12
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005048:	496d      	ldr	r1, [pc, #436]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800505c:	4b68      	ldr	r3, [pc, #416]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	4965      	ldr	r1, [pc, #404]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800507e:	4b60      	ldr	r3, [pc, #384]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508c:	495c      	ldr	r1, [pc, #368]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050a0:	4b57      	ldr	r3, [pc, #348]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	4954      	ldr	r1, [pc, #336]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050c2:	4b4f      	ldr	r3, [pc, #316]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d0:	494b      	ldr	r1, [pc, #300]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050e4:	4b46      	ldr	r3, [pc, #280]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	4943      	ldr	r1, [pc, #268]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005106:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	493a      	ldr	r1, [pc, #232]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005128:	4b35      	ldr	r3, [pc, #212]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005136:	4932      	ldr	r1, [pc, #200]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800514a:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005150:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005158:	4929      	ldr	r1, [pc, #164]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005168:	d101      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800516a:	2301      	movs	r3, #1
 800516c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800517a:	2301      	movs	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800518a:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005198:	4919      	ldr	r1, [pc, #100]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051ac:	4b14      	ldr	r3, [pc, #80]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051bc:	4910      	ldr	r1, [pc, #64]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d006      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80d9 	beq.w	800538a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051d8:	4b09      	ldr	r3, [pc, #36]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a08      	ldr	r2, [pc, #32]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e4:	f7fd fd54 	bl	8002c90 <HAL_GetTick>
 80051e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ea:	e00b      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051ec:	f7fd fd50 	bl	8002c90 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d904      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e197      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005204:	4b6c      	ldr	r3, [pc, #432]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1ed      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d021      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11d      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005224:	4b64      	ldr	r3, [pc, #400]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005232:	4b61      	ldr	r3, [pc, #388]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005238:	0e1b      	lsrs	r3, r3, #24
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	019a      	lsls	r2, r3, #6
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	431a      	orrs	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	071b      	lsls	r3, r3, #28
 8005258:	4957      	ldr	r1, [pc, #348]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800527e:	2b00      	cmp	r3, #0
 8005280:	d02e      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800528a:	d129      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800528c:	4b4a      	ldr	r3, [pc, #296]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800529c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a0:	0f1b      	lsrs	r3, r3, #28
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	019a      	lsls	r2, r3, #6
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	431a      	orrs	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	071b      	lsls	r3, r3, #28
 80052c0:	493d      	ldr	r1, [pc, #244]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052c8:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ce:	f023 021f 	bic.w	r2, r3, #31
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	3b01      	subs	r3, #1
 80052d8:	4937      	ldr	r1, [pc, #220]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01d      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f2:	0e1b      	lsrs	r3, r3, #24
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052fa:	4b2f      	ldr	r3, [pc, #188]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005300:	0f1b      	lsrs	r3, r3, #28
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	019a      	lsls	r2, r3, #6
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	431a      	orrs	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	431a      	orrs	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	071b      	lsls	r3, r3, #28
 8005320:	4925      	ldr	r1, [pc, #148]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d011      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	019a      	lsls	r2, r3, #6
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	061b      	lsls	r3, r3, #24
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	071b      	lsls	r3, r3, #28
 8005350:	4919      	ldr	r1, [pc, #100]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005358:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005364:	f7fd fc94 	bl	8002c90 <HAL_GetTick>
 8005368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800536a:	e008      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800536c:	f7fd fc90 	bl	8002c90 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	; 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e0d7      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b01      	cmp	r3, #1
 800538e:	f040 80cd 	bne.w	800552c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539e:	f7fd fc77 	bl	8002c90 <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053a4:	e00a      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053a6:	f7fd fc73 	bl	8002c90 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b64      	cmp	r3, #100	; 0x64
 80053b2:	d903      	bls.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e0ba      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80053b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053bc:	4b5e      	ldr	r3, [pc, #376]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c8:	d0ed      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02e      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d12a      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053f2:	4b51      	ldr	r3, [pc, #324]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005400:	4b4d      	ldr	r3, [pc, #308]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	0f1b      	lsrs	r3, r3, #28
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	019a      	lsls	r2, r3, #6
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	061b      	lsls	r3, r3, #24
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	071b      	lsls	r3, r3, #28
 8005426:	4944      	ldr	r1, [pc, #272]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800542e:	4b42      	ldr	r3, [pc, #264]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005434:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	493d      	ldr	r1, [pc, #244]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d022      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800545c:	d11d      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800545e:	4b36      	ldr	r3, [pc, #216]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	0e1b      	lsrs	r3, r3, #24
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800546c:	4b32      	ldr	r3, [pc, #200]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	0f1b      	lsrs	r3, r3, #28
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	019a      	lsls	r2, r3, #6
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	431a      	orrs	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	431a      	orrs	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	071b      	lsls	r3, r3, #28
 8005492:	4929      	ldr	r1, [pc, #164]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d028      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	0e1b      	lsrs	r3, r3, #24
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054b4:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	019a      	lsls	r2, r3, #6
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	071b      	lsls	r3, r3, #28
 80054da:	4917      	ldr	r1, [pc, #92]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	4911      	ldr	r1, [pc, #68]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a0e      	ldr	r2, [pc, #56]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005504:	f7fd fbc4 	bl	8002c90 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800550c:	f7fd fbc0 	bl	8002c90 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e007      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552a:	d1ef      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800

0800553c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e081      	b.n	8005652 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	7f5b      	ldrb	r3, [r3, #29]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fd f956 	bl	8002810 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	22ca      	movs	r2, #202	; 0xca
 8005570:	625a      	str	r2, [r3, #36]	; 0x24
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2253      	movs	r2, #83	; 0x53
 8005578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 faac 	bl	8005ad8 <RTC_EnterInitMode>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	22ff      	movs	r2, #255	; 0xff
 800558c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2204      	movs	r2, #4
 8005592:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e05c      	b.n	8005652 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6899      	ldr	r1, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b2e      	ldr	r3, [pc, #184]	; (800565c <HAL_RTC_Init+0x120>)
 80055a4:	400b      	ands	r3, r1
 80055a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6899      	ldr	r1, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68d2      	ldr	r2, [r2, #12]
 80055ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6919      	ldr	r1, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	041a      	lsls	r2, r3, #16
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055f2:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10e      	bne.n	8005620 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa40 	bl	8005a88 <HAL_RTC_WaitForSynchro>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2204      	movs	r2, #4
 800561a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e018      	b.n	8005652 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0208 	bic.w	r2, r2, #8
 800562e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	22ff      	movs	r2, #255	; 0xff
 8005648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005650:	2300      	movs	r3, #0
  }
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	ff8fffbf 	.word	0xff8fffbf

08005660 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	7f1b      	ldrb	r3, [r3, #28]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_RTC_SetTime+0x1c>
 8005678:	2302      	movs	r3, #2
 800567a:	e0a8      	b.n	80057ce <HAL_RTC_SetTime+0x16e>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2202      	movs	r2, #2
 8005686:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d126      	bne.n	80056dc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fa42 	bl	8005b30 <RTC_ByteToBcd2>
 80056ac:	4603      	mov	r3, r0
 80056ae:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fa3b 	bl	8005b30 <RTC_ByteToBcd2>
 80056ba:	4603      	mov	r3, r0
 80056bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056be:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	789b      	ldrb	r3, [r3, #2]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fa33 	bl	8005b30 <RTC_ByteToBcd2>
 80056ca:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80056cc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	7b1b      	ldrb	r3, [r3, #12]
 80056d4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e018      	b.n	800570e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	785b      	ldrb	r3, [r3, #1]
 80056fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80056fc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005702:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	7b1b      	ldrb	r3, [r3, #12]
 8005708:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	22ca      	movs	r2, #202	; 0xca
 8005714:	625a      	str	r2, [r3, #36]	; 0x24
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2253      	movs	r2, #83	; 0x53
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f9da 	bl	8005ad8 <RTC_EnterInitMode>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	22ff      	movs	r2, #255	; 0xff
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2204      	movs	r2, #4
 8005736:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e045      	b.n	80057ce <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <HAL_RTC_SetTime+0x178>)
 800574a:	400b      	ands	r3, r1
 800574c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800575c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005784:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d111      	bne.n	80057b8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f977 	bl	8005a88 <HAL_RTC_WaitForSynchro>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2204      	movs	r2, #4
 80057ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e00a      	b.n	80057ce <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	22ff      	movs	r2, #255	; 0xff
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80057cc:	2300      	movs	r3, #0
  }
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	007f7f7f 	.word	0x007f7f7f

080057dc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_RTC_GetTime+0xb8>)
 800580c:	4013      	ands	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	0c1b      	lsrs	r3, r3, #16
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800581a:	b2da      	uxtb	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800582a:	b2da      	uxtb	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	0c1b      	lsrs	r3, r3, #16
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11a      	bne.n	800588a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 f987 	bl	8005b6c <RTC_Bcd2ToByte>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f97e 	bl	8005b6c <RTC_Bcd2ToByte>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	789b      	ldrb	r3, [r3, #2]
 800587c:	4618      	mov	r0, r3
 800587e:	f000 f975 	bl	8005b6c <RTC_Bcd2ToByte>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	007f7f7f 	.word	0x007f7f7f

08005898 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	7f1b      	ldrb	r3, [r3, #28]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_RTC_SetDate+0x1c>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e092      	b.n	80059da <HAL_RTC_SetDate+0x142>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2202      	movs	r2, #2
 80058be:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10e      	bne.n	80058e4 <HAL_RTC_SetDate+0x4c>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	785b      	ldrb	r3, [r3, #1]
 80058d6:	f023 0310 	bic.w	r3, r3, #16
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	330a      	adds	r3, #10
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d11c      	bne.n	8005924 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	78db      	ldrb	r3, [r3, #3]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f91e 	bl	8005b30 <RTC_ByteToBcd2>
 80058f4:	4603      	mov	r3, r0
 80058f6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 f917 	bl	8005b30 <RTC_ByteToBcd2>
 8005902:	4603      	mov	r3, r0
 8005904:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005906:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	789b      	ldrb	r3, [r3, #2]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f90f 	bl	8005b30 <RTC_ByteToBcd2>
 8005912:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005914:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e00e      	b.n	8005942 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	78db      	ldrb	r3, [r3, #3]
 8005928:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005930:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005936:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	22ca      	movs	r2, #202	; 0xca
 8005948:	625a      	str	r2, [r3, #36]	; 0x24
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2253      	movs	r2, #83	; 0x53
 8005950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f8c0 	bl	8005ad8 <RTC_EnterInitMode>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	22ff      	movs	r2, #255	; 0xff
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2204      	movs	r2, #4
 800596a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e031      	b.n	80059da <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <HAL_RTC_SetDate+0x14c>)
 800597e:	400b      	ands	r3, r1
 8005980:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005990:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d111      	bne.n	80059c4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f871 	bl	8005a88 <HAL_RTC_WaitForSynchro>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2204      	movs	r2, #4
 80059b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e00a      	b.n	80059da <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	22ff      	movs	r2, #255	; 0xff
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80059d8:	2300      	movs	r3, #0
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd90      	pop	{r4, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	00ffff3f 	.word	0x00ffff3f

080059e8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <HAL_RTC_GetDate+0x9c>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	0b5b      	lsrs	r3, r3, #13
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11a      	bne.n	8005a78 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	78db      	ldrb	r3, [r3, #3]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f890 	bl	8005b6c <RTC_Bcd2ToByte>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 f887 	bl	8005b6c <RTC_Bcd2ToByte>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	461a      	mov	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	789b      	ldrb	r3, [r3, #2]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f87e 	bl	8005b6c <RTC_Bcd2ToByte>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461a      	mov	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	00ffff3f 	.word	0x00ffff3f

08005a88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005aa2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa4:	f7fd f8f4 	bl	8002c90 <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005aaa:	e009      	b.n	8005ac0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005aac:	f7fd f8f0 	bl	8002c90 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aba:	d901      	bls.n	8005ac0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e007      	b.n	8005ad0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0ee      	beq.n	8005aac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d119      	bne.n	8005b26 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f04f 32ff 	mov.w	r2, #4294967295
 8005afa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005afc:	f7fd f8c8 	bl	8002c90 <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b02:	e009      	b.n	8005b18 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b04:	f7fd f8c4 	bl	8002c90 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b12:	d901      	bls.n	8005b18 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e007      	b.n	8005b28 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0ee      	beq.n	8005b04 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005b3e:	e005      	b.n	8005b4c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	3b0a      	subs	r3, #10
 8005b4a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d8f6      	bhi.n	8005b40 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b2db      	uxtb	r3, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	b2db      	uxtb	r3, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e049      	b.n	8005c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f841 	bl	8005c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f000 fa00 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d001      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e054      	b.n	8005d2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	; (8005d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d022      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cae:	d01d      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a22      	ldr	r2, [pc, #136]	; (8005d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d018      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00e      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1e      	ldr	r2, [pc, #120]	; (8005d4c <HAL_TIM_Base_Start_IT+0xe0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <HAL_TIM_Base_Start_IT+0xe4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1b      	ldr	r2, [pc, #108]	; (8005d54 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d115      	bne.n	8005d18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	4b19      	ldr	r3, [pc, #100]	; (8005d58 <HAL_TIM_Base_Start_IT+0xec>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b06      	cmp	r3, #6
 8005cfc:	d015      	beq.n	8005d2a <HAL_TIM_Base_Start_IT+0xbe>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d011      	beq.n	8005d2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0201 	orr.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d16:	e008      	b.n	8005d2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e000      	b.n	8005d2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40010000 	.word	0x40010000
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40010400 	.word	0x40010400
 8005d50:	40014000 	.word	0x40014000
 8005d54:	40001800 	.word	0x40001800
 8005d58:	00010007 	.word	0x00010007

08005d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d122      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d11b      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0202 	mvn.w	r2, #2
 8005d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f905 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005da4:	e005      	b.n	8005db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8f7 	bl	8005f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f908 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d122      	bne.n	8005e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d11b      	bne.n	8005e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0204 	mvn.w	r2, #4
 8005ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8db 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005df8:	e005      	b.n	8005e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f8cd 	bl	8005f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f8de 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d122      	bne.n	8005e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d11b      	bne.n	8005e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0208 	mvn.w	r2, #8
 8005e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2204      	movs	r2, #4
 8005e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8b1 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005e4c:	e005      	b.n	8005e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8a3 	bl	8005f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f8b4 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b10      	cmp	r3, #16
 8005e6c:	d122      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b10      	cmp	r3, #16
 8005e7a:	d11b      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0210 	mvn.w	r2, #16
 8005e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2208      	movs	r2, #8
 8005e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f887 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005ea0:	e005      	b.n	8005eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f879 	bl	8005f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f88a 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d10e      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d107      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0201 	mvn.w	r2, #1
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fc fc58 	bl	8002790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b80      	cmp	r3, #128	; 0x80
 8005eec:	d10e      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef8:	2b80      	cmp	r3, #128	; 0x80
 8005efa:	d107      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f91a 	bl	8006140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1a:	d10e      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f26:	2b80      	cmp	r3, #128	; 0x80
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f90d 	bl	8006154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d10e      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d107      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f838 	bl	8005fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d10e      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d107      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f06f 0220 	mvn.w	r2, #32
 8005f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f8cd 	bl	800612c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a40      	ldr	r2, [pc, #256]	; (8006100 <TIM_Base_SetConfig+0x114>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600a:	d00f      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3d      	ldr	r2, [pc, #244]	; (8006104 <TIM_Base_SetConfig+0x118>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3c      	ldr	r2, [pc, #240]	; (8006108 <TIM_Base_SetConfig+0x11c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <TIM_Base_SetConfig+0x120>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3a      	ldr	r2, [pc, #232]	; (8006110 <TIM_Base_SetConfig+0x124>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2f      	ldr	r2, [pc, #188]	; (8006100 <TIM_Base_SetConfig+0x114>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d02b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604c:	d027      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2c      	ldr	r2, [pc, #176]	; (8006104 <TIM_Base_SetConfig+0x118>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d023      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2b      	ldr	r2, [pc, #172]	; (8006108 <TIM_Base_SetConfig+0x11c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01f      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2a      	ldr	r2, [pc, #168]	; (800610c <TIM_Base_SetConfig+0x120>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a29      	ldr	r2, [pc, #164]	; (8006110 <TIM_Base_SetConfig+0x124>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d017      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a28      	ldr	r2, [pc, #160]	; (8006114 <TIM_Base_SetConfig+0x128>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a27      	ldr	r2, [pc, #156]	; (8006118 <TIM_Base_SetConfig+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00f      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a26      	ldr	r2, [pc, #152]	; (800611c <TIM_Base_SetConfig+0x130>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a25      	ldr	r2, [pc, #148]	; (8006120 <TIM_Base_SetConfig+0x134>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d007      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a24      	ldr	r2, [pc, #144]	; (8006124 <TIM_Base_SetConfig+0x138>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <TIM_Base_SetConfig+0x13c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d108      	bne.n	80060b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <TIM_Base_SetConfig+0x114>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_Base_SetConfig+0xf8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0c      	ldr	r2, [pc, #48]	; (8006110 <TIM_Base_SetConfig+0x124>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d103      	bne.n	80060ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	615a      	str	r2, [r3, #20]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40010000 	.word	0x40010000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40010400 	.word	0x40010400
 8006114:	40014000 	.word	0x40014000
 8006118:	40014400 	.word	0x40014400
 800611c:	40014800 	.word	0x40014800
 8006120:	40001800 	.word	0x40001800
 8006124:	40001c00 	.word	0x40001c00
 8006128:	40002000 	.word	0x40002000

0800612c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e040      	b.n	80061fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fc fb5a 	bl	8002844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2224      	movs	r2, #36	; 0x24
 8006194:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fc5c 	bl	8006a64 <UART_SetConfig>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e022      	b.n	80061fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 feb2 	bl	8006f28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 ff39 	bl	800706c <UART_CheckIdleState>
 80061fa:	4603      	mov	r3, r0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006218:	2b20      	cmp	r3, #32
 800621a:	f040 8081 	bne.w	8006320 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_UART_Transmit+0x26>
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e079      	b.n	8006322 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_UART_Transmit+0x38>
 8006238:	2302      	movs	r3, #2
 800623a:	e072      	b.n	8006322 <HAL_UART_Transmit+0x11e>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2221      	movs	r2, #33	; 0x21
 8006250:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006252:	f7fc fd1d 	bl	8002c90 <HAL_GetTick>
 8006256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006270:	d108      	bne.n	8006284 <HAL_UART_Transmit+0x80>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e003      	b.n	800628c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006294:	e02c      	b.n	80062f0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 ff16 	bl	80070d2 <UART_WaitOnFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e038      	b.n	8006322 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10b      	bne.n	80062ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	3302      	adds	r3, #2
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	e007      	b.n	80062de <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	781a      	ldrb	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1cc      	bne.n	8006296 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	2140      	movs	r1, #64	; 0x40
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fee3 	bl	80070d2 <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e005      	b.n	8006322 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e000      	b.n	8006322 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3720      	adds	r7, #32
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800632c:	b480      	push	{r7}
 800632e:	b08b      	sub	sp, #44	; 0x2c
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633e:	2b20      	cmp	r3, #32
 8006340:	d156      	bne.n	80063f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_UART_Transmit_IT+0x22>
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e04f      	b.n	80063f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_UART_Transmit_IT+0x34>
 800635c:	2302      	movs	r3, #2
 800635e:	e048      	b.n	80063f2 <HAL_UART_Transmit_IT+0xc6>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	88fa      	ldrh	r2, [r7, #6]
 8006372:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	88fa      	ldrh	r2, [r7, #6]
 800637a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2221      	movs	r2, #33	; 0x21
 8006390:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639a:	d107      	bne.n	80063ac <HAL_UART_Transmit_IT+0x80>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d103      	bne.n	80063ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <HAL_UART_Transmit_IT+0xd4>)
 80063a8:	669a      	str	r2, [r3, #104]	; 0x68
 80063aa:	e002      	b.n	80063b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4a15      	ldr	r2, [pc, #84]	; (8006404 <HAL_UART_Transmit_IT+0xd8>)
 80063b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	613b      	str	r3, [r7, #16]
   return(result);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	69f9      	ldr	r1, [r7, #28]
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	e000      	b.n	80063f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80063f0:	2302      	movs	r3, #2
  }
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	372c      	adds	r7, #44	; 0x2c
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	08007599 	.word	0x08007599
 8006404:	080074e3 	.word	0x080074e3

08006408 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641a:	2b20      	cmp	r3, #32
 800641c:	d13d      	bne.n	800649a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_UART_Receive_IT+0x22>
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e036      	b.n	800649c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UART_Receive_IT+0x34>
 8006438:	2302      	movs	r3, #2
 800643a:	e02f      	b.n	800649c <HAL_UART_Receive_IT+0x94>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d018      	beq.n	800648a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	613b      	str	r3, [r7, #16]
   return(result);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	61bb      	str	r3, [r7, #24]
   return(result);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e6      	bne.n	8006458 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	461a      	mov	r2, r3
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fee3 	bl	800725c <UART_Start_Receive_IT>
 8006496:	4603      	mov	r3, r0
 8006498:	e000      	b.n	800649c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b0ba      	sub	sp, #232	; 0xe8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80064d2:	4013      	ands	r3, r2
 80064d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d115      	bne.n	800650c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00f      	beq.n	800650c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 828f 	beq.w	8006a20 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
      }
      return;
 800650a:	e289      	b.n	8006a20 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800650c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8117 	beq.w	8006744 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006522:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006526:	4b85      	ldr	r3, [pc, #532]	; (800673c <HAL_UART_IRQHandler+0x298>)
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 810a 	beq.w	8006744 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d011      	beq.n	8006560 <HAL_UART_IRQHandler+0xbc>
 800653c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2201      	movs	r2, #1
 800654e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006556:	f043 0201 	orr.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d011      	beq.n	8006590 <HAL_UART_IRQHandler+0xec>
 800656c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2202      	movs	r2, #2
 800657e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006586:	f043 0204 	orr.w	r2, r3, #4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d011      	beq.n	80065c0 <HAL_UART_IRQHandler+0x11c>
 800659c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2204      	movs	r2, #4
 80065ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b6:	f043 0202 	orr.w	r2, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2208      	movs	r2, #8
 80065ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f2:	f043 0208 	orr.w	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <HAL_UART_IRQHandler+0x18a>
 8006608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00c      	beq.n	800662e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800661c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 81f5 	beq.w	8006a24 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d005      	beq.n	8006686 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006682:	2b00      	cmp	r3, #0
 8006684:	d04f      	beq.n	8006726 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 feb2 	bl	80073f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d141      	bne.n	800671e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1d9      	bne.n	800669a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d013      	beq.n	8006716 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <HAL_UART_IRQHandler+0x29c>)
 80066f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fc fc4a 	bl	8002f94 <HAL_DMA_Abort_IT>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d017      	beq.n	8006736 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006710:	4610      	mov	r0, r2
 8006712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	e00f      	b.n	8006736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f98e 	bl	8006a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	e00b      	b.n	8006736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f98a 	bl	8006a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	e007      	b.n	8006736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f986 	bl	8006a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006734:	e176      	b.n	8006a24 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006736:	bf00      	nop
    return;
 8006738:	e174      	b.n	8006a24 <HAL_UART_IRQHandler+0x580>
 800673a:	bf00      	nop
 800673c:	04000120 	.word	0x04000120
 8006740:	080074b7 	.word	0x080074b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006748:	2b01      	cmp	r3, #1
 800674a:	f040 8144 	bne.w	80069d6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 813d 	beq.w	80069d6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800675c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8136 	beq.w	80069d6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2210      	movs	r2, #16
 8006770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	f040 80b2 	bne.w	80068e6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800678e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8148 	beq.w	8006a28 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800679e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067a2:	429a      	cmp	r2, r3
 80067a4:	f080 8140 	bcs.w	8006a28 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067bc:	f000 8085 	beq.w	80068ca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1da      	bne.n	80067c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800681a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800682e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006832:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006836:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e1      	bne.n	800680a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3308      	adds	r3, #8
 8006866:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800686a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800686c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e3      	bne.n	8006846 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689a:	f023 0310 	bic.w	r3, r3, #16
 800689e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e4      	bne.n	800688a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fc faf5 	bl	8002eb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	b29b      	uxth	r3, r3
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f8b4 	bl	8006a4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068e4:	e0a0      	b.n	8006a28 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8092 	beq.w	8006a2c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 808d 	beq.w	8006a2c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006934:	647b      	str	r3, [r7, #68]	; 0x44
 8006936:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800693a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e4      	bne.n	8006912 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	623b      	str	r3, [r7, #32]
   return(result);
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800696c:	633a      	str	r2, [r7, #48]	; 0x30
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e3      	bne.n	8006948 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0310 	bic.w	r3, r3, #16
 80069a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	617b      	str	r3, [r7, #20]
   return(result);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e4      	bne.n	8006992 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f83c 	bl	8006a4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069d4:	e02a      	b.n	8006a2c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00e      	beq.n	8006a00 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01c      	beq.n	8006a30 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
    }
    return;
 80069fe:	e017      	b.n	8006a30 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d012      	beq.n	8006a32 <HAL_UART_IRQHandler+0x58e>
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00c      	beq.n	8006a32 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fe1d 	bl	8007658 <UART_EndTransmit_IT>
    return;
 8006a1e:	e008      	b.n	8006a32 <HAL_UART_IRQHandler+0x58e>
      return;
 8006a20:	bf00      	nop
 8006a22:	e006      	b.n	8006a32 <HAL_UART_IRQHandler+0x58e>
    return;
 8006a24:	bf00      	nop
 8006a26:	e004      	b.n	8006a32 <HAL_UART_IRQHandler+0x58e>
      return;
 8006a28:	bf00      	nop
 8006a2a:	e002      	b.n	8006a32 <HAL_UART_IRQHandler+0x58e>
      return;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <HAL_UART_IRQHandler+0x58e>
    return;
 8006a30:	bf00      	nop
  }

}
 8006a32:	37e8      	adds	r7, #232	; 0xe8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4ba7      	ldr	r3, [pc, #668]	; (8006d2c <UART_SetConfig+0x2c8>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	6979      	ldr	r1, [r7, #20]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a95      	ldr	r2, [pc, #596]	; (8006d30 <UART_SetConfig+0x2cc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d120      	bne.n	8006b22 <UART_SetConfig+0xbe>
 8006ae0:	4b94      	ldr	r3, [pc, #592]	; (8006d34 <UART_SetConfig+0x2d0>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d816      	bhi.n	8006b1c <UART_SetConfig+0xb8>
 8006aee:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <UART_SetConfig+0x90>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b0b 	.word	0x08006b0b
 8006b00:	08006b17 	.word	0x08006b17
 8006b04:	2301      	movs	r3, #1
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e14f      	b.n	8006daa <UART_SetConfig+0x346>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e14c      	b.n	8006daa <UART_SetConfig+0x346>
 8006b10:	2304      	movs	r3, #4
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e149      	b.n	8006daa <UART_SetConfig+0x346>
 8006b16:	2308      	movs	r3, #8
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e146      	b.n	8006daa <UART_SetConfig+0x346>
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e143      	b.n	8006daa <UART_SetConfig+0x346>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a84      	ldr	r2, [pc, #528]	; (8006d38 <UART_SetConfig+0x2d4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d132      	bne.n	8006b92 <UART_SetConfig+0x12e>
 8006b2c:	4b81      	ldr	r3, [pc, #516]	; (8006d34 <UART_SetConfig+0x2d0>)
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b32:	f003 030c 	and.w	r3, r3, #12
 8006b36:	2b0c      	cmp	r3, #12
 8006b38:	d828      	bhi.n	8006b8c <UART_SetConfig+0x128>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0xdc>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b75 	.word	0x08006b75
 8006b44:	08006b8d 	.word	0x08006b8d
 8006b48:	08006b8d 	.word	0x08006b8d
 8006b4c:	08006b8d 	.word	0x08006b8d
 8006b50:	08006b81 	.word	0x08006b81
 8006b54:	08006b8d 	.word	0x08006b8d
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006b8d 	.word	0x08006b8d
 8006b60:	08006b7b 	.word	0x08006b7b
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006b8d 	.word	0x08006b8d
 8006b6c:	08006b8d 	.word	0x08006b8d
 8006b70:	08006b87 	.word	0x08006b87
 8006b74:	2300      	movs	r3, #0
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e117      	b.n	8006daa <UART_SetConfig+0x346>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e114      	b.n	8006daa <UART_SetConfig+0x346>
 8006b80:	2304      	movs	r3, #4
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e111      	b.n	8006daa <UART_SetConfig+0x346>
 8006b86:	2308      	movs	r3, #8
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e10e      	b.n	8006daa <UART_SetConfig+0x346>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e10b      	b.n	8006daa <UART_SetConfig+0x346>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a69      	ldr	r2, [pc, #420]	; (8006d3c <UART_SetConfig+0x2d8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d120      	bne.n	8006bde <UART_SetConfig+0x17a>
 8006b9c:	4b65      	ldr	r3, [pc, #404]	; (8006d34 <UART_SetConfig+0x2d0>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ba6:	2b30      	cmp	r3, #48	; 0x30
 8006ba8:	d013      	beq.n	8006bd2 <UART_SetConfig+0x16e>
 8006baa:	2b30      	cmp	r3, #48	; 0x30
 8006bac:	d814      	bhi.n	8006bd8 <UART_SetConfig+0x174>
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d009      	beq.n	8006bc6 <UART_SetConfig+0x162>
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d810      	bhi.n	8006bd8 <UART_SetConfig+0x174>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <UART_SetConfig+0x15c>
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d006      	beq.n	8006bcc <UART_SetConfig+0x168>
 8006bbe:	e00b      	b.n	8006bd8 <UART_SetConfig+0x174>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e0f1      	b.n	8006daa <UART_SetConfig+0x346>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e0ee      	b.n	8006daa <UART_SetConfig+0x346>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e0eb      	b.n	8006daa <UART_SetConfig+0x346>
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e0e8      	b.n	8006daa <UART_SetConfig+0x346>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e0e5      	b.n	8006daa <UART_SetConfig+0x346>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a57      	ldr	r2, [pc, #348]	; (8006d40 <UART_SetConfig+0x2dc>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d120      	bne.n	8006c2a <UART_SetConfig+0x1c6>
 8006be8:	4b52      	ldr	r3, [pc, #328]	; (8006d34 <UART_SetConfig+0x2d0>)
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8006bf4:	d013      	beq.n	8006c1e <UART_SetConfig+0x1ba>
 8006bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8006bf8:	d814      	bhi.n	8006c24 <UART_SetConfig+0x1c0>
 8006bfa:	2b80      	cmp	r3, #128	; 0x80
 8006bfc:	d009      	beq.n	8006c12 <UART_SetConfig+0x1ae>
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d810      	bhi.n	8006c24 <UART_SetConfig+0x1c0>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <UART_SetConfig+0x1a8>
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d006      	beq.n	8006c18 <UART_SetConfig+0x1b4>
 8006c0a:	e00b      	b.n	8006c24 <UART_SetConfig+0x1c0>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e0cb      	b.n	8006daa <UART_SetConfig+0x346>
 8006c12:	2302      	movs	r3, #2
 8006c14:	77fb      	strb	r3, [r7, #31]
 8006c16:	e0c8      	b.n	8006daa <UART_SetConfig+0x346>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e0c5      	b.n	8006daa <UART_SetConfig+0x346>
 8006c1e:	2308      	movs	r3, #8
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e0c2      	b.n	8006daa <UART_SetConfig+0x346>
 8006c24:	2310      	movs	r3, #16
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e0bf      	b.n	8006daa <UART_SetConfig+0x346>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a45      	ldr	r2, [pc, #276]	; (8006d44 <UART_SetConfig+0x2e0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d125      	bne.n	8006c80 <UART_SetConfig+0x21c>
 8006c34:	4b3f      	ldr	r3, [pc, #252]	; (8006d34 <UART_SetConfig+0x2d0>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c42:	d017      	beq.n	8006c74 <UART_SetConfig+0x210>
 8006c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c48:	d817      	bhi.n	8006c7a <UART_SetConfig+0x216>
 8006c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4e:	d00b      	beq.n	8006c68 <UART_SetConfig+0x204>
 8006c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c54:	d811      	bhi.n	8006c7a <UART_SetConfig+0x216>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <UART_SetConfig+0x1fe>
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5e:	d006      	beq.n	8006c6e <UART_SetConfig+0x20a>
 8006c60:	e00b      	b.n	8006c7a <UART_SetConfig+0x216>
 8006c62:	2300      	movs	r3, #0
 8006c64:	77fb      	strb	r3, [r7, #31]
 8006c66:	e0a0      	b.n	8006daa <UART_SetConfig+0x346>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e09d      	b.n	8006daa <UART_SetConfig+0x346>
 8006c6e:	2304      	movs	r3, #4
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e09a      	b.n	8006daa <UART_SetConfig+0x346>
 8006c74:	2308      	movs	r3, #8
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e097      	b.n	8006daa <UART_SetConfig+0x346>
 8006c7a:	2310      	movs	r3, #16
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e094      	b.n	8006daa <UART_SetConfig+0x346>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a30      	ldr	r2, [pc, #192]	; (8006d48 <UART_SetConfig+0x2e4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d125      	bne.n	8006cd6 <UART_SetConfig+0x272>
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <UART_SetConfig+0x2d0>)
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c98:	d017      	beq.n	8006cca <UART_SetConfig+0x266>
 8006c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9e:	d817      	bhi.n	8006cd0 <UART_SetConfig+0x26c>
 8006ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca4:	d00b      	beq.n	8006cbe <UART_SetConfig+0x25a>
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d811      	bhi.n	8006cd0 <UART_SetConfig+0x26c>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <UART_SetConfig+0x254>
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d006      	beq.n	8006cc4 <UART_SetConfig+0x260>
 8006cb6:	e00b      	b.n	8006cd0 <UART_SetConfig+0x26c>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e075      	b.n	8006daa <UART_SetConfig+0x346>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e072      	b.n	8006daa <UART_SetConfig+0x346>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e06f      	b.n	8006daa <UART_SetConfig+0x346>
 8006cca:	2308      	movs	r3, #8
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e06c      	b.n	8006daa <UART_SetConfig+0x346>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e069      	b.n	8006daa <UART_SetConfig+0x346>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <UART_SetConfig+0x2e8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d137      	bne.n	8006d50 <UART_SetConfig+0x2ec>
 8006ce0:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <UART_SetConfig+0x2d0>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006cea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cee:	d017      	beq.n	8006d20 <UART_SetConfig+0x2bc>
 8006cf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cf4:	d817      	bhi.n	8006d26 <UART_SetConfig+0x2c2>
 8006cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfa:	d00b      	beq.n	8006d14 <UART_SetConfig+0x2b0>
 8006cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d00:	d811      	bhi.n	8006d26 <UART_SetConfig+0x2c2>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <UART_SetConfig+0x2aa>
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0a:	d006      	beq.n	8006d1a <UART_SetConfig+0x2b6>
 8006d0c:	e00b      	b.n	8006d26 <UART_SetConfig+0x2c2>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e04a      	b.n	8006daa <UART_SetConfig+0x346>
 8006d14:	2302      	movs	r3, #2
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e047      	b.n	8006daa <UART_SetConfig+0x346>
 8006d1a:	2304      	movs	r3, #4
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e044      	b.n	8006daa <UART_SetConfig+0x346>
 8006d20:	2308      	movs	r3, #8
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e041      	b.n	8006daa <UART_SetConfig+0x346>
 8006d26:	2310      	movs	r3, #16
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e03e      	b.n	8006daa <UART_SetConfig+0x346>
 8006d2c:	efff69f3 	.word	0xefff69f3
 8006d30:	40011000 	.word	0x40011000
 8006d34:	40023800 	.word	0x40023800
 8006d38:	40004400 	.word	0x40004400
 8006d3c:	40004800 	.word	0x40004800
 8006d40:	40004c00 	.word	0x40004c00
 8006d44:	40005000 	.word	0x40005000
 8006d48:	40011400 	.word	0x40011400
 8006d4c:	40007800 	.word	0x40007800
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a71      	ldr	r2, [pc, #452]	; (8006f1c <UART_SetConfig+0x4b8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d125      	bne.n	8006da6 <UART_SetConfig+0x342>
 8006d5a:	4b71      	ldr	r3, [pc, #452]	; (8006f20 <UART_SetConfig+0x4bc>)
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d68:	d017      	beq.n	8006d9a <UART_SetConfig+0x336>
 8006d6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d6e:	d817      	bhi.n	8006da0 <UART_SetConfig+0x33c>
 8006d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d74:	d00b      	beq.n	8006d8e <UART_SetConfig+0x32a>
 8006d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7a:	d811      	bhi.n	8006da0 <UART_SetConfig+0x33c>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <UART_SetConfig+0x324>
 8006d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d84:	d006      	beq.n	8006d94 <UART_SetConfig+0x330>
 8006d86:	e00b      	b.n	8006da0 <UART_SetConfig+0x33c>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e00d      	b.n	8006daa <UART_SetConfig+0x346>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e00a      	b.n	8006daa <UART_SetConfig+0x346>
 8006d94:	2304      	movs	r3, #4
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e007      	b.n	8006daa <UART_SetConfig+0x346>
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e004      	b.n	8006daa <UART_SetConfig+0x346>
 8006da0:	2310      	movs	r3, #16
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e001      	b.n	8006daa <UART_SetConfig+0x346>
 8006da6:	2310      	movs	r3, #16
 8006da8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db2:	d15a      	bne.n	8006e6a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006db4:	7ffb      	ldrb	r3, [r7, #31]
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d827      	bhi.n	8006e0a <UART_SetConfig+0x3a6>
 8006dba:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0x35c>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006df5 	.word	0x08006df5
 8006dcc:	08006e0b 	.word	0x08006e0b
 8006dd0:	08006dfb 	.word	0x08006dfb
 8006dd4:	08006e0b 	.word	0x08006e0b
 8006dd8:	08006e0b 	.word	0x08006e0b
 8006ddc:	08006e0b 	.word	0x08006e0b
 8006de0:	08006e03 	.word	0x08006e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de4:	f7fd ff60 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8006de8:	61b8      	str	r0, [r7, #24]
        break;
 8006dea:	e013      	b.n	8006e14 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dec:	f7fd ff70 	bl	8004cd0 <HAL_RCC_GetPCLK2Freq>
 8006df0:	61b8      	str	r0, [r7, #24]
        break;
 8006df2:	e00f      	b.n	8006e14 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006df4:	4b4b      	ldr	r3, [pc, #300]	; (8006f24 <UART_SetConfig+0x4c0>)
 8006df6:	61bb      	str	r3, [r7, #24]
        break;
 8006df8:	e00c      	b.n	8006e14 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dfa:	f7fd fe93 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8006dfe:	61b8      	str	r0, [r7, #24]
        break;
 8006e00:	e008      	b.n	8006e14 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e06:	61bb      	str	r3, [r7, #24]
        break;
 8006e08:	e004      	b.n	8006e14 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	77bb      	strb	r3, [r7, #30]
        break;
 8006e12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d074      	beq.n	8006f04 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	005a      	lsls	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d916      	bls.n	8006e64 <UART_SetConfig+0x400>
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3c:	d212      	bcs.n	8006e64 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f023 030f 	bic.w	r3, r3, #15
 8006e46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	89fb      	ldrh	r3, [r7, #14]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	89fa      	ldrh	r2, [r7, #14]
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	e04f      	b.n	8006f04 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	77bb      	strb	r3, [r7, #30]
 8006e68:	e04c      	b.n	8006f04 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e6a:	7ffb      	ldrb	r3, [r7, #31]
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d828      	bhi.n	8006ec2 <UART_SetConfig+0x45e>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x414>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006e9d 	.word	0x08006e9d
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006ead 	.word	0x08006ead
 8006e84:	08006ec3 	.word	0x08006ec3
 8006e88:	08006eb3 	.word	0x08006eb3
 8006e8c:	08006ec3 	.word	0x08006ec3
 8006e90:	08006ec3 	.word	0x08006ec3
 8006e94:	08006ec3 	.word	0x08006ec3
 8006e98:	08006ebb 	.word	0x08006ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e9c:	f7fd ff04 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8006ea0:	61b8      	str	r0, [r7, #24]
        break;
 8006ea2:	e013      	b.n	8006ecc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	f7fd ff14 	bl	8004cd0 <HAL_RCC_GetPCLK2Freq>
 8006ea8:	61b8      	str	r0, [r7, #24]
        break;
 8006eaa:	e00f      	b.n	8006ecc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eac:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <UART_SetConfig+0x4c0>)
 8006eae:	61bb      	str	r3, [r7, #24]
        break;
 8006eb0:	e00c      	b.n	8006ecc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb2:	f7fd fe37 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8006eb6:	61b8      	str	r0, [r7, #24]
        break;
 8006eb8:	e008      	b.n	8006ecc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ebe:	61bb      	str	r3, [r7, #24]
        break;
 8006ec0:	e004      	b.n	8006ecc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8006eca:	bf00      	nop
    }

    if (pclk != 0U)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d018      	beq.n	8006f04 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	085a      	lsrs	r2, r3, #1
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	441a      	add	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b0f      	cmp	r3, #15
 8006eea:	d909      	bls.n	8006f00 <UART_SetConfig+0x49c>
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef2:	d205      	bcs.n	8006f00 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60da      	str	r2, [r3, #12]
 8006efe:	e001      	b.n	8006f04 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f10:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40007c00 	.word	0x40007c00
 8006f20:	40023800 	.word	0x40023800
 8006f24:	00f42400 	.word	0x00f42400

08006f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01a      	beq.n	800703e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007026:	d10a      	bne.n	800703e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af02      	add	r7, sp, #8
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800707c:	f7fb fe08 	bl	8002c90 <HAL_GetTick>
 8007080:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b08      	cmp	r3, #8
 800708e:	d10e      	bne.n	80070ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f817 	bl	80070d2 <UART_WaitOnFlagUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e00d      	b.n	80070ca <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b09c      	sub	sp, #112	; 0x70
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	4613      	mov	r3, r2
 80070e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e2:	e0a5      	b.n	8007230 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	f000 80a1 	beq.w	8007230 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fb fdcf 	bl	8002c90 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <UART_WaitOnFlagUntilTimeout+0x32>
 80070fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007100:	2b00      	cmp	r3, #0
 8007102:	d13e      	bne.n	8007182 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007114:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007118:	667b      	str	r3, [r7, #100]	; 0x64
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007124:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007128:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e6      	bne.n	8007104 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	663b      	str	r3, [r7, #96]	; 0x60
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3308      	adds	r3, #8
 8007154:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007156:	64ba      	str	r2, [r7, #72]	; 0x48
 8007158:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800715c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e5      	bne.n	8007136 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e067      	b.n	8007252 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d04f      	beq.n	8007230 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719e:	d147      	bne.n	8007230 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	613b      	str	r3, [r7, #16]
   return(result);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071fc:	623a      	str	r2, [r7, #32]
 80071fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	69f9      	ldr	r1, [r7, #28]
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	61bb      	str	r3, [r7, #24]
   return(result);
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e5      	bne.n	80071dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e010      	b.n	8007252 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69da      	ldr	r2, [r3, #28]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4013      	ands	r3, r2
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	bf0c      	ite	eq
 8007240:	2301      	moveq	r3, #1
 8007242:	2300      	movne	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	429a      	cmp	r2, r3
 800724c:	f43f af4a 	beq.w	80070e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3770      	adds	r7, #112	; 0x70
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800725c:	b480      	push	{r7}
 800725e:	b097      	sub	sp, #92	; 0x5c
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728e:	d10e      	bne.n	80072ae <UART_Start_Receive_IT+0x52>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <UART_Start_Receive_IT+0x48>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800729e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072a2:	e02d      	b.n	8007300 <UART_Start_Receive_IT+0xa4>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	22ff      	movs	r2, #255	; 0xff
 80072a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ac:	e028      	b.n	8007300 <UART_Start_Receive_IT+0xa4>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10d      	bne.n	80072d2 <UART_Start_Receive_IT+0x76>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d104      	bne.n	80072c8 <UART_Start_Receive_IT+0x6c>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	22ff      	movs	r2, #255	; 0xff
 80072c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072c6:	e01b      	b.n	8007300 <UART_Start_Receive_IT+0xa4>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	227f      	movs	r2, #127	; 0x7f
 80072cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072d0:	e016      	b.n	8007300 <UART_Start_Receive_IT+0xa4>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072da:	d10d      	bne.n	80072f8 <UART_Start_Receive_IT+0x9c>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <UART_Start_Receive_IT+0x92>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	227f      	movs	r2, #127	; 0x7f
 80072e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ec:	e008      	b.n	8007300 <UART_Start_Receive_IT+0xa4>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	223f      	movs	r2, #63	; 0x3f
 80072f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072f6:	e003      	b.n	8007300 <UART_Start_Receive_IT+0xa4>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2222      	movs	r2, #34	; 0x22
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	657b      	str	r3, [r7, #84]	; 0x54
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3308      	adds	r3, #8
 800732c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800732e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007330:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800733c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d107      	bne.n	800735c <UART_Start_Receive_IT+0x100>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a24      	ldr	r2, [pc, #144]	; (80073e8 <UART_Start_Receive_IT+0x18c>)
 8007358:	665a      	str	r2, [r3, #100]	; 0x64
 800735a:	e002      	b.n	8007362 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a23      	ldr	r2, [pc, #140]	; (80073ec <UART_Start_Receive_IT+0x190>)
 8007360:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d019      	beq.n	80073a6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
 8007392:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e6      	bne.n	8007372 <UART_Start_Receive_IT+0x116>
 80073a4:	e018      	b.n	80073d8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	613b      	str	r3, [r7, #16]
   return(result);
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f043 0320 	orr.w	r3, r3, #32
 80073ba:	653b      	str	r3, [r7, #80]	; 0x50
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c4:	623b      	str	r3, [r7, #32]
 80073c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	69f9      	ldr	r1, [r7, #28]
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e6      	bne.n	80073a6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	375c      	adds	r7, #92	; 0x5c
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	08007809 	.word	0x08007809
 80073ec:	080076ad 	.word	0x080076ad

080073f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b095      	sub	sp, #84	; 0x54
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800740c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007416:	643b      	str	r3, [r7, #64]	; 0x40
 8007418:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800741c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e6      	bne.n	80073f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3308      	adds	r3, #8
 8007430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	61fb      	str	r3, [r7, #28]
   return(result);
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	64bb      	str	r3, [r7, #72]	; 0x48
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800744a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e5      	bne.n	800742a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007462:	2b01      	cmp	r3, #1
 8007464:	d118      	bne.n	8007498 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	60bb      	str	r3, [r7, #8]
   return(result);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f023 0310 	bic.w	r3, r3, #16
 800747a:	647b      	str	r3, [r7, #68]	; 0x44
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6979      	ldr	r1, [r7, #20]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	613b      	str	r3, [r7, #16]
   return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074aa:	bf00      	nop
 80074ac:	3754      	adds	r7, #84	; 0x54
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff faaf 	bl	8006a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b08f      	sub	sp, #60	; 0x3c
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ee:	2b21      	cmp	r3, #33	; 0x21
 80074f0:	d14c      	bne.n	800758c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d132      	bne.n	8007564 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	61fb      	str	r3, [r7, #28]
   return(result);
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800751e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	60bb      	str	r3, [r7, #8]
   return(result);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007544:	633b      	str	r3, [r7, #48]	; 0x30
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6979      	ldr	r1, [r7, #20]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	613b      	str	r3, [r7, #16]
   return(result);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e6      	bne.n	8007530 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007562:	e013      	b.n	800758c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800758c:	bf00      	nop
 800758e:	373c      	adds	r7, #60	; 0x3c
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b091      	sub	sp, #68	; 0x44
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075a4:	2b21      	cmp	r3, #33	; 0x21
 80075a6:	d151      	bne.n	800764c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d132      	bne.n	800761a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	623b      	str	r3, [r7, #32]
   return(result);
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	633b      	str	r3, [r7, #48]	; 0x30
 80075d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e6      	bne.n	80075b4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	69b9      	ldr	r1, [r7, #24]
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	617b      	str	r3, [r7, #20]
   return(result);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e6      	bne.n	80075e6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007618:	e018      	b.n	800764c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800762e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007634:	1c9a      	adds	r2, r3, #2
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800764c:	bf00      	nop
 800764e:	3744      	adds	r7, #68	; 0x44
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	60bb      	str	r3, [r7, #8]
   return(result);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6979      	ldr	r1, [r7, #20]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	613b      	str	r3, [r7, #16]
   return(result);
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fa fe5e 	bl	8002360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076a4:	bf00      	nop
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b096      	sub	sp, #88	; 0x58
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c2:	2b22      	cmp	r3, #34	; 0x22
 80076c4:	f040 8094 	bne.w	80077f0 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80076d6:	b2d9      	uxtb	r1, r3
 80076d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	400a      	ands	r2, r1
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3b01      	subs	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d177      	bne.n	8007800 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007724:	653b      	str	r3, [r7, #80]	; 0x50
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772e:	647b      	str	r3, [r7, #68]	; 0x44
 8007730:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800773c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	623b      	str	r3, [r7, #32]
   return(result);
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	f023 0301 	bic.w	r3, r3, #1
 8007758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007762:	633a      	str	r2, [r7, #48]	; 0x30
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007786:	2b01      	cmp	r3, #1
 8007788:	d12e      	bne.n	80077e8 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	60fb      	str	r3, [r7, #12]
   return(result);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f023 0310 	bic.w	r3, r3, #16
 80077a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	69b9      	ldr	r1, [r7, #24]
 80077b4:	69fa      	ldr	r2, [r7, #28]
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	617b      	str	r3, [r7, #20]
   return(result);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e6      	bne.n	8007790 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f003 0310 	and.w	r3, r3, #16
 80077cc:	2b10      	cmp	r3, #16
 80077ce:	d103      	bne.n	80077d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2210      	movs	r2, #16
 80077d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff f933 	bl	8006a4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077e6:	e00b      	b.n	8007800 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fa fadf 	bl	8001dac <HAL_UART_RxCpltCallback>
}
 80077ee:	e007      	b.n	8007800 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699a      	ldr	r2, [r3, #24]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0208 	orr.w	r2, r2, #8
 80077fe:	619a      	str	r2, [r3, #24]
}
 8007800:	bf00      	nop
 8007802:	3758      	adds	r7, #88	; 0x58
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b096      	sub	sp, #88	; 0x58
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007816:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781e:	2b22      	cmp	r3, #34	; 0x22
 8007820:	f040 8094 	bne.w	800794c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007832:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007834:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007838:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800783c:	4013      	ands	r3, r2
 800783e:	b29a      	uxth	r2, r3
 8007840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007842:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007848:	1c9a      	adds	r2, r3, #2
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d177      	bne.n	800795c <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788a:	643b      	str	r3, [r7, #64]	; 0x40
 800788c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e6      	bne.n	800786c <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3308      	adds	r3, #8
 80078bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d12e      	bne.n	8007944 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f023 0310 	bic.w	r3, r3, #16
 8007900:	647b      	str	r3, [r7, #68]	; 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6979      	ldr	r1, [r7, #20]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	613b      	str	r3, [r7, #16]
   return(result);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e6      	bne.n	80078ec <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b10      	cmp	r3, #16
 800792a:	d103      	bne.n	8007934 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2210      	movs	r2, #16
 8007932:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff f885 	bl	8006a4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007942:	e00b      	b.n	800795c <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7fa fa31 	bl	8001dac <HAL_UART_RxCpltCallback>
}
 800794a:	e007      	b.n	800795c <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0208 	orr.w	r2, r2, #8
 800795a:	619a      	str	r2, [r3, #24]
}
 800795c:	bf00      	nop
 800795e:	3758      	adds	r7, #88	; 0x58
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800796a:	4b8c      	ldr	r3, [pc, #560]	; (8007b9c <MX_LWIP_Init+0x238>)
 800796c:	22c0      	movs	r2, #192	; 0xc0
 800796e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007970:	4b8a      	ldr	r3, [pc, #552]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007972:	22a8      	movs	r2, #168	; 0xa8
 8007974:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007976:	4b89      	ldr	r3, [pc, #548]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007978:	2200      	movs	r2, #0
 800797a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 55;
 800797c:	4b87      	ldr	r3, [pc, #540]	; (8007b9c <MX_LWIP_Init+0x238>)
 800797e:	2237      	movs	r2, #55	; 0x37
 8007980:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007982:	4b87      	ldr	r3, [pc, #540]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007988:	4b85      	ldr	r3, [pc, #532]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 800798a:	22ff      	movs	r2, #255	; 0xff
 800798c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800798e:	4b84      	ldr	r3, [pc, #528]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007990:	22ff      	movs	r2, #255	; 0xff
 8007992:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007994:	4b82      	ldr	r3, [pc, #520]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007996:	2200      	movs	r2, #0
 8007998:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800799a:	4b82      	ldr	r3, [pc, #520]	; (8007ba4 <MX_LWIP_Init+0x240>)
 800799c:	22c0      	movs	r2, #192	; 0xc0
 800799e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80079a0:	4b80      	ldr	r3, [pc, #512]	; (8007ba4 <MX_LWIP_Init+0x240>)
 80079a2:	22a8      	movs	r2, #168	; 0xa8
 80079a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80079a6:	4b7f      	ldr	r3, [pc, #508]	; (8007ba4 <MX_LWIP_Init+0x240>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80079ac:	4b7d      	ldr	r3, [pc, #500]	; (8007ba4 <MX_LWIP_Init+0x240>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80079b2:	2100      	movs	r1, #0
 80079b4:	2000      	movs	r0, #0
 80079b6:	f005 fbef 	bl	800d198 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80079ba:	4b78      	ldr	r3, [pc, #480]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	061a      	lsls	r2, r3, #24
 80079c0:	4b76      	ldr	r3, [pc, #472]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079c2:	785b      	ldrb	r3, [r3, #1]
 80079c4:	041b      	lsls	r3, r3, #16
 80079c6:	431a      	orrs	r2, r3
 80079c8:	4b74      	ldr	r3, [pc, #464]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079ca:	789b      	ldrb	r3, [r3, #2]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	4313      	orrs	r3, r2
 80079d0:	4a72      	ldr	r2, [pc, #456]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079d2:	78d2      	ldrb	r2, [r2, #3]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	061a      	lsls	r2, r3, #24
 80079d8:	4b70      	ldr	r3, [pc, #448]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	0619      	lsls	r1, r3, #24
 80079de:	4b6f      	ldr	r3, [pc, #444]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	4319      	orrs	r1, r3
 80079e6:	4b6d      	ldr	r3, [pc, #436]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079e8:	789b      	ldrb	r3, [r3, #2]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	430b      	orrs	r3, r1
 80079ee:	496b      	ldr	r1, [pc, #428]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079f0:	78c9      	ldrb	r1, [r1, #3]
 80079f2:	430b      	orrs	r3, r1
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079fa:	431a      	orrs	r2, r3
 80079fc:	4b67      	ldr	r3, [pc, #412]	; (8007b9c <MX_LWIP_Init+0x238>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	0619      	lsls	r1, r3, #24
 8007a02:	4b66      	ldr	r3, [pc, #408]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	4319      	orrs	r1, r3
 8007a0a:	4b64      	ldr	r3, [pc, #400]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007a0c:	789b      	ldrb	r3, [r3, #2]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	430b      	orrs	r3, r1
 8007a12:	4962      	ldr	r1, [pc, #392]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007a14:	78c9      	ldrb	r1, [r1, #3]
 8007a16:	430b      	orrs	r3, r1
 8007a18:	0a1b      	lsrs	r3, r3, #8
 8007a1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	4b5e      	ldr	r3, [pc, #376]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	0619      	lsls	r1, r3, #24
 8007a26:	4b5d      	ldr	r3, [pc, #372]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	4319      	orrs	r1, r3
 8007a2e:	4b5b      	ldr	r3, [pc, #364]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007a30:	789b      	ldrb	r3, [r3, #2]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	430b      	orrs	r3, r1
 8007a36:	4959      	ldr	r1, [pc, #356]	; (8007b9c <MX_LWIP_Init+0x238>)
 8007a38:	78c9      	ldrb	r1, [r1, #3]
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	0e1b      	lsrs	r3, r3, #24
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	4a59      	ldr	r2, [pc, #356]	; (8007ba8 <MX_LWIP_Init+0x244>)
 8007a42:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007a44:	4b56      	ldr	r3, [pc, #344]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	061a      	lsls	r2, r3, #24
 8007a4a:	4b55      	ldr	r3, [pc, #340]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a4c:	785b      	ldrb	r3, [r3, #1]
 8007a4e:	041b      	lsls	r3, r3, #16
 8007a50:	431a      	orrs	r2, r3
 8007a52:	4b53      	ldr	r3, [pc, #332]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a54:	789b      	ldrb	r3, [r3, #2]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	4a51      	ldr	r2, [pc, #324]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a5c:	78d2      	ldrb	r2, [r2, #3]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	061a      	lsls	r2, r3, #24
 8007a62:	4b4f      	ldr	r3, [pc, #316]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	0619      	lsls	r1, r3, #24
 8007a68:	4b4d      	ldr	r3, [pc, #308]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	4319      	orrs	r1, r3
 8007a70:	4b4b      	ldr	r3, [pc, #300]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a72:	789b      	ldrb	r3, [r3, #2]
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	430b      	orrs	r3, r1
 8007a78:	4949      	ldr	r1, [pc, #292]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a7a:	78c9      	ldrb	r1, [r1, #3]
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a84:	431a      	orrs	r2, r3
 8007a86:	4b46      	ldr	r3, [pc, #280]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	0619      	lsls	r1, r3, #24
 8007a8c:	4b44      	ldr	r3, [pc, #272]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	4319      	orrs	r1, r3
 8007a94:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a96:	789b      	ldrb	r3, [r3, #2]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	4940      	ldr	r1, [pc, #256]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007a9e:	78c9      	ldrb	r1, [r1, #3]
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	4b3d      	ldr	r3, [pc, #244]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	0619      	lsls	r1, r3, #24
 8007ab0:	4b3b      	ldr	r3, [pc, #236]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	4319      	orrs	r1, r3
 8007ab8:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007aba:	789b      	ldrb	r3, [r3, #2]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	430b      	orrs	r3, r1
 8007ac0:	4937      	ldr	r1, [pc, #220]	; (8007ba0 <MX_LWIP_Init+0x23c>)
 8007ac2:	78c9      	ldrb	r1, [r1, #3]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	0e1b      	lsrs	r3, r3, #24
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	4a38      	ldr	r2, [pc, #224]	; (8007bac <MX_LWIP_Init+0x248>)
 8007acc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007ace:	4b35      	ldr	r3, [pc, #212]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	061a      	lsls	r2, r3, #24
 8007ad4:	4b33      	ldr	r3, [pc, #204]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	041b      	lsls	r3, r3, #16
 8007ada:	431a      	orrs	r2, r3
 8007adc:	4b31      	ldr	r3, [pc, #196]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007ade:	789b      	ldrb	r3, [r3, #2]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	4a2f      	ldr	r2, [pc, #188]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007ae6:	78d2      	ldrb	r2, [r2, #3]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	061a      	lsls	r2, r3, #24
 8007aec:	4b2d      	ldr	r3, [pc, #180]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	0619      	lsls	r1, r3, #24
 8007af2:	4b2c      	ldr	r3, [pc, #176]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	041b      	lsls	r3, r3, #16
 8007af8:	4319      	orrs	r1, r3
 8007afa:	4b2a      	ldr	r3, [pc, #168]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007afc:	789b      	ldrb	r3, [r3, #2]
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	430b      	orrs	r3, r1
 8007b02:	4928      	ldr	r1, [pc, #160]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b04:	78c9      	ldrb	r1, [r1, #3]
 8007b06:	430b      	orrs	r3, r1
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	4b24      	ldr	r3, [pc, #144]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	0619      	lsls	r1, r3, #24
 8007b16:	4b23      	ldr	r3, [pc, #140]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b18:	785b      	ldrb	r3, [r3, #1]
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	4319      	orrs	r1, r3
 8007b1e:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b20:	789b      	ldrb	r3, [r3, #2]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	430b      	orrs	r3, r1
 8007b26:	491f      	ldr	r1, [pc, #124]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b28:	78c9      	ldrb	r1, [r1, #3]
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b32:	431a      	orrs	r2, r3
 8007b34:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	0619      	lsls	r1, r3, #24
 8007b3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	041b      	lsls	r3, r3, #16
 8007b40:	4319      	orrs	r1, r3
 8007b42:	4b18      	ldr	r3, [pc, #96]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b44:	789b      	ldrb	r3, [r3, #2]
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	4916      	ldr	r1, [pc, #88]	; (8007ba4 <MX_LWIP_Init+0x240>)
 8007b4c:	78c9      	ldrb	r1, [r1, #3]
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	0e1b      	lsrs	r3, r3, #24
 8007b52:	4313      	orrs	r3, r2
 8007b54:	4a16      	ldr	r2, [pc, #88]	; (8007bb0 <MX_LWIP_Init+0x24c>)
 8007b56:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007b58:	4b16      	ldr	r3, [pc, #88]	; (8007bb4 <MX_LWIP_Init+0x250>)
 8007b5a:	9302      	str	r3, [sp, #8]
 8007b5c:	4b16      	ldr	r3, [pc, #88]	; (8007bb8 <MX_LWIP_Init+0x254>)
 8007b5e:	9301      	str	r3, [sp, #4]
 8007b60:	2300      	movs	r3, #0
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <MX_LWIP_Init+0x24c>)
 8007b66:	4a11      	ldr	r2, [pc, #68]	; (8007bac <MX_LWIP_Init+0x248>)
 8007b68:	490f      	ldr	r1, [pc, #60]	; (8007ba8 <MX_LWIP_Init+0x244>)
 8007b6a:	4814      	ldr	r0, [pc, #80]	; (8007bbc <MX_LWIP_Init+0x258>)
 8007b6c:	f006 f898 	bl	800dca0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007b70:	4812      	ldr	r0, [pc, #72]	; (8007bbc <MX_LWIP_Init+0x258>)
 8007b72:	f006 fa45 	bl	800e000 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007b76:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <MX_LWIP_Init+0x258>)
 8007b78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007b7c:	089b      	lsrs	r3, r3, #2
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007b88:	480c      	ldr	r0, [pc, #48]	; (8007bbc <MX_LWIP_Init+0x258>)
 8007b8a:	f006 fa49 	bl	800e020 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007b8e:	e002      	b.n	8007b96 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8007b90:	480a      	ldr	r0, [pc, #40]	; (8007bbc <MX_LWIP_Init+0x258>)
 8007b92:	f006 fab1 	bl	800e0f8 <netif_set_down>
}
 8007b96:	bf00      	nop
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20004e48 	.word	0x20004e48
 8007ba0:	20004e44 	.word	0x20004e44
 8007ba4:	20004e0c 	.word	0x20004e0c
 8007ba8:	20004e40 	.word	0x20004e40
 8007bac:	20004e4c 	.word	0x20004e4c
 8007bb0:	20004e50 	.word	0x20004e50
 8007bb4:	0800d0a9 	.word	0x0800d0a9
 8007bb8:	080081d9 	.word	0x080081d9
 8007bbc:	20004e10 	.word	0x20004e10

08007bc0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08e      	sub	sp, #56	; 0x38
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	605a      	str	r2, [r3, #4]
 8007bd2:	609a      	str	r2, [r3, #8]
 8007bd4:	60da      	str	r2, [r3, #12]
 8007bd6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a44      	ldr	r2, [pc, #272]	; (8007cf0 <HAL_ETH_MspInit+0x130>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	f040 8081 	bne.w	8007ce6 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007be4:	4b43      	ldr	r3, [pc, #268]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be8:	4a42      	ldr	r2, [pc, #264]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007bee:	6313      	str	r3, [r2, #48]	; 0x30
 8007bf0:	4b40      	ldr	r3, [pc, #256]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf8:	623b      	str	r3, [r7, #32]
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	4b3d      	ldr	r3, [pc, #244]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	4a3c      	ldr	r2, [pc, #240]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c06:	6313      	str	r3, [r2, #48]	; 0x30
 8007c08:	4b3a      	ldr	r3, [pc, #232]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c10:	61fb      	str	r3, [r7, #28]
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4b37      	ldr	r3, [pc, #220]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	4a36      	ldr	r2, [pc, #216]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8007c20:	4b34      	ldr	r3, [pc, #208]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007c2c:	4b31      	ldr	r3, [pc, #196]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	4a30      	ldr	r2, [pc, #192]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c36:	6313      	str	r3, [r2, #48]	; 0x30
 8007c38:	4b2e      	ldr	r3, [pc, #184]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c44:	4b2b      	ldr	r3, [pc, #172]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c48:	4a2a      	ldr	r2, [pc, #168]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c4a:	f043 0304 	orr.w	r3, r3, #4
 8007c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8007c50:	4b28      	ldr	r3, [pc, #160]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c5c:	4b25      	ldr	r3, [pc, #148]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	4a24      	ldr	r2, [pc, #144]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	6313      	str	r3, [r2, #48]	; 0x30
 8007c68:	4b22      	ldr	r3, [pc, #136]	; (8007cf4 <HAL_ETH_MspInit+0x134>)
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8007c74:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c82:	2303      	movs	r3, #3
 8007c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c86:	230b      	movs	r3, #11
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4819      	ldr	r0, [pc, #100]	; (8007cf8 <HAL_ETH_MspInit+0x138>)
 8007c92:	f7fc f991 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007c96:	2332      	movs	r3, #50	; 0x32
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ca6:	230b      	movs	r3, #11
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4812      	ldr	r0, [pc, #72]	; (8007cfc <HAL_ETH_MspInit+0x13c>)
 8007cb2:	f7fc f981 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007cb6:	2386      	movs	r3, #134	; 0x86
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007cc6:	230b      	movs	r3, #11
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cce:	4619      	mov	r1, r3
 8007cd0:	480b      	ldr	r0, [pc, #44]	; (8007d00 <HAL_ETH_MspInit+0x140>)
 8007cd2:	f7fc f971 	bl	8003fb8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2105      	movs	r1, #5
 8007cda:	203d      	movs	r0, #61	; 0x3d
 8007cdc:	f7fb f8c0 	bl	8002e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007ce0:	203d      	movs	r0, #61	; 0x3d
 8007ce2:	f7fb f8d9 	bl	8002e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3738      	adds	r7, #56	; 0x38
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	40028000 	.word	0x40028000
 8007cf4:	40023800 	.word	0x40023800
 8007cf8:	40021800 	.word	0x40021800
 8007cfc:	40020800 	.word	0x40020800
 8007d00:	40020000 	.word	0x40020000

08007d04 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007d0c:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <HAL_ETH_RxCpltCallback+0x1c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fc3f 	bl	8008594 <osSemaphoreRelease>
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000d0c 	.word	0x20000d0c

08007d24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007d24:	b5b0      	push	{r4, r5, r7, lr}
 8007d26:	b090      	sub	sp, #64	; 0x40
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007d30:	4b60      	ldr	r3, [pc, #384]	; (8007eb4 <low_level_init+0x190>)
 8007d32:	4a61      	ldr	r2, [pc, #388]	; (8007eb8 <low_level_init+0x194>)
 8007d34:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007d36:	4b5f      	ldr	r3, [pc, #380]	; (8007eb4 <low_level_init+0x190>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007d3c:	4b5d      	ldr	r3, [pc, #372]	; (8007eb4 <low_level_init+0x190>)
 8007d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d42:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007d44:	4b5b      	ldr	r3, [pc, #364]	; (8007eb4 <low_level_init+0x190>)
 8007d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d4a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007d4c:	4b59      	ldr	r3, [pc, #356]	; (8007eb4 <low_level_init+0x190>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007d58:	2380      	movs	r3, #128	; 0x80
 8007d5a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8007d5e:	23e1      	movs	r3, #225	; 0xe1
 8007d60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8007d76:	4a4f      	ldr	r2, [pc, #316]	; (8007eb4 <low_level_init+0x190>)
 8007d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d7c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8007d7e:	4b4d      	ldr	r3, [pc, #308]	; (8007eb4 <low_level_init+0x190>)
 8007d80:	2201      	movs	r2, #1
 8007d82:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007d84:	4b4b      	ldr	r3, [pc, #300]	; (8007eb4 <low_level_init+0x190>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007d8a:	4b4a      	ldr	r3, [pc, #296]	; (8007eb4 <low_level_init+0x190>)
 8007d8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007d90:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007d92:	4848      	ldr	r0, [pc, #288]	; (8007eb4 <low_level_init+0x190>)
 8007d94:	f7fb f920 	bl	8002fd8 <HAL_ETH_Init>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8007d9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d108      	bne.n	8007db8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007dac:	f043 0304 	orr.w	r3, r3, #4
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007db8:	2304      	movs	r3, #4
 8007dba:	4a40      	ldr	r2, [pc, #256]	; (8007ebc <low_level_init+0x198>)
 8007dbc:	4940      	ldr	r1, [pc, #256]	; (8007ec0 <low_level_init+0x19c>)
 8007dbe:	483d      	ldr	r0, [pc, #244]	; (8007eb4 <low_level_init+0x190>)
 8007dc0:	f7fb faa4 	bl	800330c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	4a3f      	ldr	r2, [pc, #252]	; (8007ec4 <low_level_init+0x1a0>)
 8007dc8:	493f      	ldr	r1, [pc, #252]	; (8007ec8 <low_level_init+0x1a4>)
 8007dca:	483a      	ldr	r0, [pc, #232]	; (8007eb4 <low_level_init+0x190>)
 8007dcc:	f7fb fb07 	bl	80033de <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2206      	movs	r2, #6
 8007dd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007dd8:	4b36      	ldr	r3, [pc, #216]	; (8007eb4 <low_level_init+0x190>)
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	781a      	ldrb	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007de4:	4b33      	ldr	r3, [pc, #204]	; (8007eb4 <low_level_init+0x190>)
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	785a      	ldrb	r2, [r3, #1]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007df0:	4b30      	ldr	r3, [pc, #192]	; (8007eb4 <low_level_init+0x190>)
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	789a      	ldrb	r2, [r3, #2]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007dfc:	4b2d      	ldr	r3, [pc, #180]	; (8007eb4 <low_level_init+0x190>)
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	78da      	ldrb	r2, [r3, #3]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007e08:	4b2a      	ldr	r3, [pc, #168]	; (8007eb4 <low_level_init+0x190>)
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	791a      	ldrb	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007e14:	4b27      	ldr	r3, [pc, #156]	; (8007eb4 <low_level_init+0x190>)
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	795a      	ldrb	r2, [r3, #5]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007e26:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007e2e:	f043 030a 	orr.w	r3, r3, #10
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e3e:	2300      	movs	r3, #0
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e46:	2101      	movs	r1, #1
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fb23 	bl	8008494 <osSemaphoreCreate>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <low_level_init+0x1a8>)
 8007e52:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007e54:	4b1e      	ldr	r3, [pc, #120]	; (8007ed0 <low_level_init+0x1ac>)
 8007e56:	f107 040c 	add.w	r4, r7, #12
 8007e5a:	461d      	mov	r5, r3
 8007e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fa28 	bl	80082c4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007e74:	480f      	ldr	r0, [pc, #60]	; (8007eb4 <low_level_init+0x190>)
 8007e76:	f7fb fdda 	bl	8003a2e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e7e:	461a      	mov	r2, r3
 8007e80:	211d      	movs	r1, #29
 8007e82:	480c      	ldr	r0, [pc, #48]	; (8007eb4 <low_level_init+0x190>)
 8007e84:	f7fb fd05 	bl	8003892 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	f043 030b 	orr.w	r3, r3, #11
 8007e8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	461a      	mov	r2, r3
 8007e94:	211d      	movs	r1, #29
 8007e96:	4807      	ldr	r0, [pc, #28]	; (8007eb4 <low_level_init+0x190>)
 8007e98:	f7fb fd63 	bl	8003962 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	211d      	movs	r1, #29
 8007ea4:	4803      	ldr	r0, [pc, #12]	; (8007eb4 <low_level_init+0x190>)
 8007ea6:	f7fb fcf4 	bl	8003892 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007eaa:	bf00      	nop
 8007eac:	3740      	adds	r7, #64	; 0x40
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20006724 	.word	0x20006724
 8007eb8:	40028000 	.word	0x40028000
 8007ebc:	2000676c 	.word	0x2000676c
 8007ec0:	20004e54 	.word	0x20004e54
 8007ec4:	20004ed4 	.word	0x20004ed4
 8007ec8:	200066a4 	.word	0x200066a4
 8007ecc:	20000d0c 	.word	0x20000d0c
 8007ed0:	0801fffc 	.word	0x0801fffc

08007ed4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	; 0x28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007ede:	4b4b      	ldr	r3, [pc, #300]	; (800800c <low_level_output+0x138>)
 8007ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007ef6:	4b45      	ldr	r3, [pc, #276]	; (800800c <low_level_output+0x138>)
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	623b      	str	r3, [r7, #32]
 8007f04:	e05a      	b.n	8007fbc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da03      	bge.n	8007f16 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007f0e:	23f8      	movs	r3, #248	; 0xf8
 8007f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007f14:	e05c      	b.n	8007fd0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	895b      	ldrh	r3, [r3, #10]
 8007f1a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007f20:	e02f      	b.n	8007f82 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	18d0      	adds	r0, r2, r3
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	18d1      	adds	r1, r2, r3
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007f36:	1a9b      	subs	r3, r3, r2
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f010 fa49 	bl	80183d0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da03      	bge.n	8007f54 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007f4c:	23f8      	movs	r3, #248	; 0xf8
 8007f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007f52:	e03d      	b.n	8007fd0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007f64:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007f70:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007f7c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d8c8      	bhi.n	8007f22 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	18d0      	adds	r0, r2, r3
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f010 fa15 	bl	80183d0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	623b      	str	r3, [r7, #32]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1a1      	bne.n	8007f06 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007fc2:	6979      	ldr	r1, [r7, #20]
 8007fc4:	4811      	ldr	r0, [pc, #68]	; (800800c <low_level_output+0x138>)
 8007fc6:	f7fb fa77 	bl	80034b8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007fd0:	4b0e      	ldr	r3, [pc, #56]	; (800800c <low_level_output+0x138>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	f241 0314 	movw	r3, #4116	; 0x1014
 8007fd8:	4413      	add	r3, r2
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00d      	beq.n	8008000 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007fe4:	4b09      	ldr	r3, [pc, #36]	; (800800c <low_level_output+0x138>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	f241 0314 	movw	r3, #4116	; 0x1014
 8007fec:	4413      	add	r3, r2
 8007fee:	2220      	movs	r2, #32
 8007ff0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <low_level_output+0x138>)
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	f241 0304 	movw	r3, #4100	; 0x1004
 8007ffa:	4413      	add	r3, r2
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008000:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008004:	4618      	mov	r0, r3
 8008006:	3728      	adds	r7, #40	; 0x28
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20006724 	.word	0x20006724

08008010 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08c      	sub	sp, #48	; 0x30
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008018:	2300      	movs	r3, #0
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800801c:	2300      	movs	r3, #0
 800801e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8008034:	484f      	ldr	r0, [pc, #316]	; (8008174 <low_level_input+0x164>)
 8008036:	f7fb fb29 	bl	800368c <HAL_ETH_GetReceivedFrame_IT>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <low_level_input+0x34>

    return NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	e092      	b.n	800816a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008044:	4b4b      	ldr	r3, [pc, #300]	; (8008174 <low_level_input+0x164>)
 8008046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008048:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800804a:	4b4a      	ldr	r3, [pc, #296]	; (8008174 <low_level_input+0x164>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008050:	89fb      	ldrh	r3, [r7, #14]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008056:	89fb      	ldrh	r3, [r7, #14]
 8008058:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800805c:	4619      	mov	r1, r3
 800805e:	2000      	movs	r0, #0
 8008060:	f006 f934 	bl	800e2cc <pbuf_alloc>
 8008064:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d04b      	beq.n	8008104 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800806c:	4b41      	ldr	r3, [pc, #260]	; (8008174 <low_level_input+0x164>)
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
 800807a:	e040      	b.n	80080fe <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	895b      	ldrh	r3, [r3, #10]
 8008080:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008086:	e021      	b.n	80080cc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	18d0      	adds	r0, r2, r3
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	18d1      	adds	r1, r2, r3
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800809c:	1a9b      	subs	r3, r3, r2
 800809e:	461a      	mov	r2, r3
 80080a0:	f010 f996 	bl	80183d0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	4413      	add	r3, r2
 80080b6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80080ba:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80080c6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d8d6      	bhi.n	8008088 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	18d0      	adds	r0, r2, r3
 80080e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	4413      	add	r3, r2
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	4619      	mov	r1, r3
 80080ec:	f010 f970 	bl	80183d0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	4413      	add	r3, r2
 80080f6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1bb      	bne.n	800807c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008104:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <low_level_input+0x164>)
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800810a:	2300      	movs	r3, #0
 800810c:	613b      	str	r3, [r7, #16]
 800810e:	e00b      	b.n	8008128 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	3301      	adds	r3, #1
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	4b12      	ldr	r3, [pc, #72]	; (8008174 <low_level_input+0x164>)
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	429a      	cmp	r2, r3
 8008130:	d3ee      	bcc.n	8008110 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008132:	4b10      	ldr	r3, [pc, #64]	; (8008174 <low_level_input+0x164>)
 8008134:	2200      	movs	r2, #0
 8008136:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008138:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <low_level_input+0x164>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	f241 0314 	movw	r3, #4116	; 0x1014
 8008140:	4413      	add	r3, r2
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00d      	beq.n	8008168 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <low_level_input+0x164>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	f241 0314 	movw	r3, #4116	; 0x1014
 8008154:	4413      	add	r3, r2
 8008156:	2280      	movs	r2, #128	; 0x80
 8008158:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800815a:	4b06      	ldr	r3, [pc, #24]	; (8008174 <low_level_input+0x164>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	f241 0308 	movw	r3, #4104	; 0x1008
 8008162:	4413      	add	r3, r2
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800816a:	4618      	mov	r0, r3
 800816c:	3730      	adds	r7, #48	; 0x30
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20006724 	.word	0x20006724

08008178 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008184:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <ethernetif_input+0x58>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f04f 31ff 	mov.w	r1, #4294967295
 800818c:	4618      	mov	r0, r3
 800818e:	f000 f9b3 	bl	80084f8 <osSemaphoreWait>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1f5      	bne.n	8008184 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8008198:	480e      	ldr	r0, [pc, #56]	; (80081d4 <ethernetif_input+0x5c>)
 800819a:	f010 f883 	bl	80182a4 <sys_mutex_lock>
        p = low_level_input( netif );
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff ff36 	bl	8008010 <low_level_input>
 80081a4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	68f9      	ldr	r1, [r7, #12]
 80081b2:	68b8      	ldr	r0, [r7, #8]
 80081b4:	4798      	blx	r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80081bc:	68b8      	ldr	r0, [r7, #8]
 80081be:	f006 fb69 	bl	800e894 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80081c2:	4804      	ldr	r0, [pc, #16]	; (80081d4 <ethernetif_input+0x5c>)
 80081c4:	f010 f87d 	bl	80182c2 <sys_mutex_unlock>
      } while(p!=NULL);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e4      	bne.n	8008198 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80081ce:	e7d9      	b.n	8008184 <ethernetif_input+0xc>
 80081d0:	20000d0c 	.word	0x20000d0c
 80081d4:	20007f7c 	.word	0x20007f7c

080081d8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <ethernetif_init+0x1c>
 80081e6:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <ethernetif_init+0x48>)
 80081e8:	f240 222b 	movw	r2, #555	; 0x22b
 80081ec:	490d      	ldr	r1, [pc, #52]	; (8008224 <ethernetif_init+0x4c>)
 80081ee:	480e      	ldr	r0, [pc, #56]	; (8008228 <ethernetif_init+0x50>)
 80081f0:	f010 fb9c 	bl	801892c <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2273      	movs	r2, #115	; 0x73
 80081f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2274      	movs	r2, #116	; 0x74
 8008200:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <ethernetif_init+0x54>)
 8008208:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a08      	ldr	r2, [pc, #32]	; (8008230 <ethernetif_init+0x58>)
 800820e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fd87 	bl	8007d24 <low_level_init>

  return ERR_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	08020018 	.word	0x08020018
 8008224:	08020034 	.word	0x08020034
 8008228:	08020044 	.word	0x08020044
 800822c:	080162b9 	.word	0x080162b9
 8008230:	08007ed5 	.word	0x08007ed5

08008234 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008238:	f7fa fd2a 	bl	8002c90 <HAL_GetTick>
 800823c:	4603      	mov	r3, r0
}
 800823e:	4618      	mov	r0, r3
 8008240:	bd80      	pop	{r7, pc}

08008242 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	4603      	mov	r3, r0
 800824a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008254:	2b84      	cmp	r3, #132	; 0x84
 8008256:	d005      	beq.n	8008264 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008258:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	3303      	adds	r3, #3
 8008262:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008264:	68fb      	ldr	r3, [r7, #12]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008278:	f3ef 8305 	mrs	r3, IPSR
 800827c:	607b      	str	r3, [r7, #4]
  return(result);
 800827e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008280:	2b00      	cmp	r3, #0
 8008282:	bf14      	ite	ne
 8008284:	2301      	movne	r3, #1
 8008286:	2300      	moveq	r3, #0
 8008288:	b2db      	uxtb	r3, r3
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800829a:	f001 fd29 	bl	8009cf0 <vTaskStartScheduler>
  
  return osOK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80082a8:	f7ff ffe3 	bl	8008272 <inHandlerMode>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80082b2:	f001 fe3d 	bl	8009f30 <xTaskGetTickCountFromISR>
 80082b6:	4603      	mov	r3, r0
 80082b8:	e002      	b.n	80082c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80082ba:	f001 fe29 	bl	8009f10 <xTaskGetTickCount>
 80082be:	4603      	mov	r3, r0
  }
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80082c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c6:	b089      	sub	sp, #36	; 0x24
 80082c8:	af04      	add	r7, sp, #16
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d020      	beq.n	8008318 <osThreadCreate+0x54>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01c      	beq.n	8008318 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685c      	ldr	r4, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681d      	ldr	r5, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691e      	ldr	r6, [r3, #16]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff ffa6 	bl	8008242 <makeFreeRtosPriority>
 80082f6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008300:	9202      	str	r2, [sp, #8]
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	9100      	str	r1, [sp, #0]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	4632      	mov	r2, r6
 800830a:	4629      	mov	r1, r5
 800830c:	4620      	mov	r0, r4
 800830e:	f001 fb53 	bl	80099b8 <xTaskCreateStatic>
 8008312:	4603      	mov	r3, r0
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	e01c      	b.n	8008352 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685c      	ldr	r4, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008324:	b29e      	uxth	r6, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff ff88 	bl	8008242 <makeFreeRtosPriority>
 8008332:	4602      	mov	r2, r0
 8008334:	f107 030c 	add.w	r3, r7, #12
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	9200      	str	r2, [sp, #0]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	4632      	mov	r2, r6
 8008340:	4629      	mov	r1, r5
 8008342:	4620      	mov	r0, r4
 8008344:	f001 fb9b 	bl	8009a7e <xTaskCreate>
 8008348:	4603      	mov	r3, r0
 800834a:	2b01      	cmp	r3, #1
 800834c:	d001      	beq.n	8008352 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	e000      	b.n	8008354 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008352:	68fb      	ldr	r3, [r7, #12]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800835c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d007      	beq.n	800837c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4619      	mov	r1, r3
 8008372:	2001      	movs	r0, #1
 8008374:	f000 fc91 	bl	8008c9a <xQueueCreateMutexStatic>
 8008378:	4603      	mov	r3, r0
 800837a:	e003      	b.n	8008384 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800837c:	2001      	movs	r0, #1
 800837e:	f000 fc74 	bl	8008c6a <xQueueCreateMutex>
 8008382:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008396:	2300      	movs	r3, #0
 8008398:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <osMutexWait+0x18>
    return osErrorParameter;
 80083a0:	2380      	movs	r3, #128	; 0x80
 80083a2:	e03a      	b.n	800841a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ae:	d103      	bne.n	80083b8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80083b0:	f04f 33ff 	mov.w	r3, #4294967295
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e009      	b.n	80083cc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d006      	beq.n	80083cc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <osMutexWait+0x40>
      ticks = 1;
 80083c8:	2301      	movs	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80083cc:	f7ff ff51 	bl	8008272 <inHandlerMode>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d017      	beq.n	8008406 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	461a      	mov	r2, r3
 80083dc:	2100      	movs	r1, #0
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 f8ac 	bl	800953c <xQueueReceiveFromISR>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d001      	beq.n	80083ee <osMutexWait+0x62>
      return osErrorOS;
 80083ea:	23ff      	movs	r3, #255	; 0xff
 80083ec:	e015      	b.n	800841a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d011      	beq.n	8008418 <osMutexWait+0x8c>
 80083f4:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <osMutexWait+0x98>)
 80083f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	e008      	b.n	8008418 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 ff83 	bl	8009314 <xQueueSemaphoreTake>
 800840e:	4603      	mov	r3, r0
 8008410:	2b01      	cmp	r3, #1
 8008412:	d001      	beq.n	8008418 <osMutexWait+0x8c>
    return osErrorOS;
 8008414:	23ff      	movs	r3, #255	; 0xff
 8008416:	e000      	b.n	800841a <osMutexWait+0x8e>
  }
  
  return osOK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	e000ed04 	.word	0xe000ed04

08008428 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008434:	2300      	movs	r3, #0
 8008436:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008438:	f7ff ff1b 	bl	8008272 <inHandlerMode>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d016      	beq.n	8008470 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008442:	f107 0308 	add.w	r3, r7, #8
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fde7 	bl	800901c <xQueueGiveFromISR>
 800844e:	4603      	mov	r3, r0
 8008450:	2b01      	cmp	r3, #1
 8008452:	d001      	beq.n	8008458 <osMutexRelease+0x30>
      return osErrorOS;
 8008454:	23ff      	movs	r3, #255	; 0xff
 8008456:	e017      	b.n	8008488 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d013      	beq.n	8008486 <osMutexRelease+0x5e>
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <osMutexRelease+0x68>)
 8008460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	e00a      	b.n	8008486 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008470:	2300      	movs	r3, #0
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fc2a 	bl	8008cd0 <xQueueGenericSend>
 800847c:	4603      	mov	r3, r0
 800847e:	2b01      	cmp	r3, #1
 8008480:	d001      	beq.n	8008486 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008482:	23ff      	movs	r3, #255	; 0xff
 8008484:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008486:	68fb      	ldr	r3, [r7, #12]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af02      	add	r7, sp, #8
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00f      	beq.n	80084c6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d10a      	bne.n	80084c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	2203      	movs	r2, #3
 80084b2:	9200      	str	r2, [sp, #0]
 80084b4:	2200      	movs	r2, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	2001      	movs	r0, #1
 80084ba:	f000 fad9 	bl	8008a70 <xQueueGenericCreateStatic>
 80084be:	4603      	mov	r3, r0
 80084c0:	e016      	b.n	80084f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e014      	b.n	80084f0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d110      	bne.n	80084ee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80084cc:	2203      	movs	r2, #3
 80084ce:	2100      	movs	r1, #0
 80084d0:	2001      	movs	r0, #1
 80084d2:	f000 fb4f 	bl	8008b74 <xQueueGenericCreate>
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <osSemaphoreCreate+0x56>
 80084de:	2300      	movs	r3, #0
 80084e0:	2200      	movs	r2, #0
 80084e2:	2100      	movs	r1, #0
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fbf3 	bl	8008cd0 <xQueueGenericSend>
      return sema;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	e000      	b.n	80084f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80084ee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008502:	2300      	movs	r3, #0
 8008504:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800850c:	2380      	movs	r3, #128	; 0x80
 800850e:	e03a      	b.n	8008586 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d103      	bne.n	8008524 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800851c:	f04f 33ff 	mov.w	r3, #4294967295
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e009      	b.n	8008538 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d006      	beq.n	8008538 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <osSemaphoreWait+0x40>
      ticks = 1;
 8008534:	2301      	movs	r3, #1
 8008536:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008538:	f7ff fe9b 	bl	8008272 <inHandlerMode>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d017      	beq.n	8008572 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008542:	f107 0308 	add.w	r3, r7, #8
 8008546:	461a      	mov	r2, r3
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fff6 	bl	800953c <xQueueReceiveFromISR>
 8008550:	4603      	mov	r3, r0
 8008552:	2b01      	cmp	r3, #1
 8008554:	d001      	beq.n	800855a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008556:	23ff      	movs	r3, #255	; 0xff
 8008558:	e015      	b.n	8008586 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d011      	beq.n	8008584 <osSemaphoreWait+0x8c>
 8008560:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <osSemaphoreWait+0x98>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	e008      	b.n	8008584 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008572:	68f9      	ldr	r1, [r7, #12]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fecd 	bl	8009314 <xQueueSemaphoreTake>
 800857a:	4603      	mov	r3, r0
 800857c:	2b01      	cmp	r3, #1
 800857e:	d001      	beq.n	8008584 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008580:	23ff      	movs	r3, #255	; 0xff
 8008582:	e000      	b.n	8008586 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	e000ed04 	.word	0xe000ed04

08008594 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80085a4:	f7ff fe65 	bl	8008272 <inHandlerMode>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d016      	beq.n	80085dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80085ae:	f107 0308 	add.w	r3, r7, #8
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fd31 	bl	800901c <xQueueGiveFromISR>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d001      	beq.n	80085c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80085c0:	23ff      	movs	r3, #255	; 0xff
 80085c2:	e017      	b.n	80085f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d013      	beq.n	80085f2 <osSemaphoreRelease+0x5e>
 80085ca:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <osSemaphoreRelease+0x68>)
 80085cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	e00a      	b.n	80085f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fb74 	bl	8008cd0 <xQueueGenericSend>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d001      	beq.n	80085f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80085ee:	23ff      	movs	r3, #255	; 0xff
 80085f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80085f2:	68fb      	ldr	r3, [r7, #12]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008608:	f7ff fe33 	bl	8008272 <inHandlerMode>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008612:	2382      	movs	r3, #130	; 0x82
 8008614:	e003      	b.n	800861e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 f856 	bl	80096c8 <vQueueDelete>

  return osOK; 
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008626:	b590      	push	{r4, r7, lr}
 8008628:	b085      	sub	sp, #20
 800862a:	af02      	add	r7, sp, #8
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d011      	beq.n	800865c <osMessageCreate+0x36>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00d      	beq.n	800865c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6859      	ldr	r1, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	2400      	movs	r4, #0
 8008652:	9400      	str	r4, [sp, #0]
 8008654:	f000 fa0c 	bl	8008a70 <xQueueGenericCreateStatic>
 8008658:	4603      	mov	r3, r0
 800865a:	e008      	b.n	800866e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	4619      	mov	r1, r3
 8008668:	f000 fa84 	bl	8008b74 <xQueueGenericCreate>
 800866c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	bd90      	pop	{r4, r7, pc}
	...

08008678 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <osMessagePut+0x1e>
    ticks = 1;
 8008692:	2301      	movs	r3, #1
 8008694:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008696:	f7ff fdec 	bl	8008272 <inHandlerMode>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d018      	beq.n	80086d2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80086a0:	f107 0210 	add.w	r2, r7, #16
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	2300      	movs	r3, #0
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 fc16 	bl	8008edc <xQueueGenericSendFromISR>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d001      	beq.n	80086ba <osMessagePut+0x42>
      return osErrorOS;
 80086b6:	23ff      	movs	r3, #255	; 0xff
 80086b8:	e018      	b.n	80086ec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d014      	beq.n	80086ea <osMessagePut+0x72>
 80086c0:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <osMessagePut+0x7c>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	e00b      	b.n	80086ea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80086d2:	f107 0108 	add.w	r1, r7, #8
 80086d6:	2300      	movs	r3, #0
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 faf8 	bl	8008cd0 <xQueueGenericSend>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d001      	beq.n	80086ea <osMessagePut+0x72>
      return osErrorOS;
 80086e6:	23ff      	movs	r3, #255	; 0xff
 80086e8:	e000      	b.n	80086ec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80086f8:	b590      	push	{r4, r7, lr}
 80086fa:	b08b      	sub	sp, #44	; 0x2c
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008712:	2380      	movs	r3, #128	; 0x80
 8008714:	617b      	str	r3, [r7, #20]
    return event;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	461c      	mov	r4, r3
 800871a:	f107 0314 	add.w	r3, r7, #20
 800871e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008726:	e054      	b.n	80087d2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008728:	2300      	movs	r3, #0
 800872a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d103      	bne.n	8008740 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008738:	f04f 33ff 	mov.w	r3, #4294967295
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
 800873e:	e009      	b.n	8008754 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d006      	beq.n	8008754 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <osMessageGet+0x5c>
      ticks = 1;
 8008750:	2301      	movs	r3, #1
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008754:	f7ff fd8d 	bl	8008272 <inHandlerMode>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d01c      	beq.n	8008798 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800875e:	f107 0220 	add.w	r2, r7, #32
 8008762:	f107 0314 	add.w	r3, r7, #20
 8008766:	3304      	adds	r3, #4
 8008768:	4619      	mov	r1, r3
 800876a:	68b8      	ldr	r0, [r7, #8]
 800876c:	f000 fee6 	bl	800953c <xQueueReceiveFromISR>
 8008770:	4603      	mov	r3, r0
 8008772:	2b01      	cmp	r3, #1
 8008774:	d102      	bne.n	800877c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008776:	2310      	movs	r3, #16
 8008778:	617b      	str	r3, [r7, #20]
 800877a:	e001      	b.n	8008780 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01d      	beq.n	80087c2 <osMessageGet+0xca>
 8008786:	4b15      	ldr	r3, [pc, #84]	; (80087dc <osMessageGet+0xe4>)
 8008788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	e014      	b.n	80087c2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008798:	f107 0314 	add.w	r3, r7, #20
 800879c:	3304      	adds	r3, #4
 800879e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a0:	4619      	mov	r1, r3
 80087a2:	68b8      	ldr	r0, [r7, #8]
 80087a4:	f000 fcd0 	bl	8009148 <xQueueReceive>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d102      	bne.n	80087b4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80087ae:	2310      	movs	r3, #16
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	e006      	b.n	80087c2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <osMessageGet+0xc6>
 80087ba:	2300      	movs	r3, #0
 80087bc:	e000      	b.n	80087c0 <osMessageGet+0xc8>
 80087be:	2340      	movs	r3, #64	; 0x40
 80087c0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	461c      	mov	r4, r3
 80087c6:	f107 0314 	add.w	r3, r7, #20
 80087ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	372c      	adds	r7, #44	; 0x2c
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd90      	pop	{r4, r7, pc}
 80087da:	bf00      	nop
 80087dc:	e000ed04 	.word	0xe000ed04

080087e0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80087e8:	f7ff fd43 	bl	8008272 <inHandlerMode>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 ff48 	bl	8009688 <uxQueueMessagesWaitingFromISR>
 80087f8:	4603      	mov	r3, r0
 80087fa:	e003      	b.n	8008804 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 ff23 	bl	8009648 <uxQueueMessagesWaiting>
 8008802:	4603      	mov	r3, r0
  }
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008814:	f7ff fd2d 	bl	8008272 <inHandlerMode>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <osMessageDelete+0x16>
    return osErrorISR;
 800881e:	2382      	movs	r3, #130	; 0x82
 8008820:	e003      	b.n	800882a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 ff50 	bl	80096c8 <vQueueDelete>

  return osOK; 
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f103 0208 	add.w	r2, r3, #8
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f04f 32ff 	mov.w	r2, #4294967295
 800884a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f103 0208 	add.w	r2, r3, #8
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f103 0208 	add.w	r2, r3, #8
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ea:	d103      	bne.n	80088f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	e00c      	b.n	800890e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3308      	adds	r3, #8
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	e002      	b.n	8008902 <vListInsert+0x2e>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	429a      	cmp	r2, r3
 800890c:	d2f6      	bcs.n	80088fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	601a      	str	r2, [r3, #0]
}
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6892      	ldr	r2, [r2, #8]
 800895c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6852      	ldr	r2, [r2, #4]
 8008966:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	429a      	cmp	r2, r3
 8008970:	d103      	bne.n	800897a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
	...

0800899c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10c      	bne.n	80089ca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	b672      	cpsid	i
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	b662      	cpsie	i
 80089c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80089ca:	f002 f90f 	bl	800abec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	68f9      	ldr	r1, [r7, #12]
 80089d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	441a      	add	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fa:	3b01      	subs	r3, #1
 80089fc:	68f9      	ldr	r1, [r7, #12]
 80089fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a00:	fb01 f303 	mul.w	r3, r1, r3
 8008a04:	441a      	add	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	22ff      	movs	r2, #255	; 0xff
 8008a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	22ff      	movs	r2, #255	; 0xff
 8008a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d114      	bne.n	8008a4a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01a      	beq.n	8008a5e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3310      	adds	r3, #16
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f001 fbcf 	bl	800a1d0 <xTaskRemoveFromEventList>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d012      	beq.n	8008a5e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a38:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <xQueueGenericReset+0xd0>)
 8008a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	e009      	b.n	8008a5e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3310      	adds	r3, #16
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff feef 	bl	8008832 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3324      	adds	r3, #36	; 0x24
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff feea 	bl	8008832 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a5e:	f002 f8f9 	bl	800ac54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a62:	2301      	movs	r3, #1
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	e000ed04 	.word	0xe000ed04

08008a70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08e      	sub	sp, #56	; 0x38
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10c      	bne.n	8008a9e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	b672      	cpsid	i
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	b662      	cpsie	i
 8008a98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10c      	bne.n	8008abe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	b672      	cpsid	i
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	b662      	cpsie	i
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <xQueueGenericCreateStatic+0x5a>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <xQueueGenericCreateStatic+0x5e>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <xQueueGenericCreateStatic+0x60>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10c      	bne.n	8008aee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	b672      	cpsid	i
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	b662      	cpsie	i
 8008ae8:	623b      	str	r3, [r7, #32]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <xQueueGenericCreateStatic+0x8a>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <xQueueGenericCreateStatic+0x8e>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <xQueueGenericCreateStatic+0x90>
 8008afe:	2300      	movs	r3, #0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10c      	bne.n	8008b1e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	b672      	cpsid	i
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	b662      	cpsie	i
 8008b18:	61fb      	str	r3, [r7, #28]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b1e:	2348      	movs	r3, #72	; 0x48
 8008b20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2b48      	cmp	r3, #72	; 0x48
 8008b26:	d00c      	beq.n	8008b42 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	b672      	cpsid	i
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	b662      	cpsie	i
 8008b3c:	61bb      	str	r3, [r7, #24]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00d      	beq.n	8008b6a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f847 	bl	8008bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3730      	adds	r7, #48	; 0x30
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	; 0x28
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10c      	bne.n	8008ba2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8c:	b672      	cpsid	i
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	b662      	cpsie	i
 8008b9c:	613b      	str	r3, [r7, #16]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61fb      	str	r3, [r7, #28]
 8008bac:	e004      	b.n	8008bb8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	fb02 f303 	mul.w	r3, r2, r3
 8008bb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	3348      	adds	r3, #72	; 0x48
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f002 f941 	bl	800ae44 <pvPortMalloc>
 8008bc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d011      	beq.n	8008bee <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	3348      	adds	r3, #72	; 0x48
 8008bd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bdc:	79fa      	ldrb	r2, [r7, #7]
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	4613      	mov	r3, r2
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f805 	bl	8008bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bee:	69bb      	ldr	r3, [r7, #24]
	}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3720      	adds	r7, #32
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d103      	bne.n	8008c14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c26:	2101      	movs	r1, #1
 8008c28:	69b8      	ldr	r0, [r7, #24]
 8008c2a:	f7ff feb7 	bl	800899c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00e      	beq.n	8008c62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008c56:	2300      	movs	r3, #0
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f837 	bl	8008cd0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b086      	sub	sp, #24
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	4603      	mov	r3, r0
 8008c72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c74:	2301      	movs	r3, #1
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	6939      	ldr	r1, [r7, #16]
 8008c82:	6978      	ldr	r0, [r7, #20]
 8008c84:	f7ff ff76 	bl	8008b74 <xQueueGenericCreate>
 8008c88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff ffd3 	bl	8008c36 <prvInitialiseMutex>

		return xNewQueue;
 8008c90:	68fb      	ldr	r3, [r7, #12]
	}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b088      	sub	sp, #32
 8008c9e:	af02      	add	r7, sp, #8
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	6039      	str	r1, [r7, #0]
 8008ca4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	617b      	str	r3, [r7, #20]
 8008caa:	2300      	movs	r3, #0
 8008cac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	6939      	ldr	r1, [r7, #16]
 8008cb8:	6978      	ldr	r0, [r7, #20]
 8008cba:	f7ff fed9 	bl	8008a70 <xQueueGenericCreateStatic>
 8008cbe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f7ff ffb8 	bl	8008c36 <prvInitialiseMutex>

		return xNewQueue;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
	}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08e      	sub	sp, #56	; 0x38
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10c      	bne.n	8008d06 <xQueueGenericSend+0x36>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	b672      	cpsid	i
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	b662      	cpsie	i
 8008d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d103      	bne.n	8008d14 <xQueueGenericSend+0x44>
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <xQueueGenericSend+0x48>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e000      	b.n	8008d1a <xQueueGenericSend+0x4a>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10c      	bne.n	8008d38 <xQueueGenericSend+0x68>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	b672      	cpsid	i
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	b662      	cpsie	i
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d34:	bf00      	nop
 8008d36:	e7fe      	b.n	8008d36 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d103      	bne.n	8008d46 <xQueueGenericSend+0x76>
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d101      	bne.n	8008d4a <xQueueGenericSend+0x7a>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e000      	b.n	8008d4c <xQueueGenericSend+0x7c>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10c      	bne.n	8008d6a <xQueueGenericSend+0x9a>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	b672      	cpsid	i
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	b662      	cpsie	i
 8008d64:	623b      	str	r3, [r7, #32]
}
 8008d66:	bf00      	nop
 8008d68:	e7fe      	b.n	8008d68 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d6a:	f001 fbf5 	bl	800a558 <xTaskGetSchedulerState>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d102      	bne.n	8008d7a <xQueueGenericSend+0xaa>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <xQueueGenericSend+0xae>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e000      	b.n	8008d80 <xQueueGenericSend+0xb0>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10c      	bne.n	8008d9e <xQueueGenericSend+0xce>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	b672      	cpsid	i
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	b662      	cpsie	i
 8008d98:	61fb      	str	r3, [r7, #28]
}
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d9e:	f001 ff25 	bl	800abec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d302      	bcc.n	8008db4 <xQueueGenericSend+0xe4>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d129      	bne.n	8008e08 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dba:	f000 fcc2 	bl	8009742 <prvCopyDataToQueue>
 8008dbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d010      	beq.n	8008dea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	3324      	adds	r3, #36	; 0x24
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 f9ff 	bl	800a1d0 <xTaskRemoveFromEventList>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d013      	beq.n	8008e00 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008dd8:	4b3f      	ldr	r3, [pc, #252]	; (8008ed8 <xQueueGenericSend+0x208>)
 8008dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	e00a      	b.n	8008e00 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008df0:	4b39      	ldr	r3, [pc, #228]	; (8008ed8 <xQueueGenericSend+0x208>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e00:	f001 ff28 	bl	800ac54 <vPortExitCritical>
				return pdPASS;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e063      	b.n	8008ed0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d103      	bne.n	8008e16 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e0e:	f001 ff21 	bl	800ac54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e05c      	b.n	8008ed0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d106      	bne.n	8008e2a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 fa39 	bl	800a298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e26:	2301      	movs	r3, #1
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e2a:	f001 ff13 	bl	800ac54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e2e:	f000 ffc3 	bl	8009db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e32:	f001 fedb 	bl	800abec <vPortEnterCritical>
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e42:	d103      	bne.n	8008e4c <xQueueGenericSend+0x17c>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e52:	b25b      	sxtb	r3, r3
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e58:	d103      	bne.n	8008e62 <xQueueGenericSend+0x192>
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e62:	f001 fef7 	bl	800ac54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e66:	1d3a      	adds	r2, r7, #4
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fa28 	bl	800a2c4 <xTaskCheckForTimeOut>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d124      	bne.n	8008ec4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e7c:	f000 fd59 	bl	8009932 <prvIsQueueFull>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d018      	beq.n	8008eb8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	3310      	adds	r3, #16
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f001 f978 	bl	800a184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e96:	f000 fce4 	bl	8009862 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e9a:	f000 ff9b 	bl	8009dd4 <xTaskResumeAll>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f47f af7c 	bne.w	8008d9e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <xQueueGenericSend+0x208>)
 8008ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	e772      	b.n	8008d9e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eba:	f000 fcd2 	bl	8009862 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ebe:	f000 ff89 	bl	8009dd4 <xTaskResumeAll>
 8008ec2:	e76c      	b.n	8008d9e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ec6:	f000 fccc 	bl	8009862 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eca:	f000 ff83 	bl	8009dd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ece:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3738      	adds	r7, #56	; 0x38
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08e      	sub	sp, #56	; 0x38
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10c      	bne.n	8008f0e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	b672      	cpsid	i
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	b662      	cpsie	i
 8008f08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d103      	bne.n	8008f1c <xQueueGenericSendFromISR+0x40>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <xQueueGenericSendFromISR+0x44>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <xQueueGenericSendFromISR+0x46>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10c      	bne.n	8008f40 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	b672      	cpsid	i
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	b662      	cpsie	i
 8008f3a:	623b      	str	r3, [r7, #32]
}
 8008f3c:	bf00      	nop
 8008f3e:	e7fe      	b.n	8008f3e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d103      	bne.n	8008f4e <xQueueGenericSendFromISR+0x72>
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d101      	bne.n	8008f52 <xQueueGenericSendFromISR+0x76>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <xQueueGenericSendFromISR+0x78>
 8008f52:	2300      	movs	r3, #0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10c      	bne.n	8008f72 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	b672      	cpsid	i
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	b662      	cpsie	i
 8008f6c:	61fb      	str	r3, [r7, #28]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f72:	f001 ff23 	bl	800adbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f76:	f3ef 8211 	mrs	r2, BASEPRI
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	b672      	cpsid	i
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	b662      	cpsie	i
 8008f8e:	61ba      	str	r2, [r7, #24]
 8008f90:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f92:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d302      	bcc.n	8008fa8 <xQueueGenericSendFromISR+0xcc>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d12c      	bne.n	8009002 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	68b9      	ldr	r1, [r7, #8]
 8008fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fb8:	f000 fbc3 	bl	8009742 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fbc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc4:	d112      	bne.n	8008fec <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d016      	beq.n	8008ffc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	3324      	adds	r3, #36	; 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 f8fc 	bl	800a1d0 <xTaskRemoveFromEventList>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00e      	beq.n	8008ffc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00b      	beq.n	8008ffc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	e007      	b.n	8008ffc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	b25a      	sxtb	r2, r3
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009000:	e001      	b.n	8009006 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009002:	2300      	movs	r3, #0
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009010:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009014:	4618      	mov	r0, r3
 8009016:	3738      	adds	r7, #56	; 0x38
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08e      	sub	sp, #56	; 0x38
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10c      	bne.n	800904a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	b672      	cpsid	i
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	b662      	cpsie	i
 8009044:	623b      	str	r3, [r7, #32]
}
 8009046:	bf00      	nop
 8009048:	e7fe      	b.n	8009048 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00c      	beq.n	800906c <xQueueGiveFromISR+0x50>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	b672      	cpsid	i
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	b662      	cpsie	i
 8009066:	61fb      	str	r3, [r7, #28]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <xQueueGiveFromISR+0x60>
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d101      	bne.n	8009080 <xQueueGiveFromISR+0x64>
 800907c:	2301      	movs	r3, #1
 800907e:	e000      	b.n	8009082 <xQueueGiveFromISR+0x66>
 8009080:	2300      	movs	r3, #0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10c      	bne.n	80090a0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	b672      	cpsid	i
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	b662      	cpsie	i
 800909a:	61bb      	str	r3, [r7, #24]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090a0:	f001 fe8c 	bl	800adbc <vPortValidateInterruptPriority>
	__asm volatile
 80090a4:	f3ef 8211 	mrs	r2, BASEPRI
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	b672      	cpsid	i
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	b662      	cpsie	i
 80090bc:	617a      	str	r2, [r7, #20]
 80090be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80090c0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d22b      	bcs.n	800912c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ee:	d112      	bne.n	8009116 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d016      	beq.n	8009126 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	3324      	adds	r3, #36	; 0x24
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 f867 	bl	800a1d0 <xTaskRemoveFromEventList>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00e      	beq.n	8009126 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e007      	b.n	8009126 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800911a:	3301      	adds	r3, #1
 800911c:	b2db      	uxtb	r3, r3
 800911e:	b25a      	sxtb	r2, r3
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009126:	2301      	movs	r3, #1
 8009128:	637b      	str	r3, [r7, #52]	; 0x34
 800912a:	e001      	b.n	8009130 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800912c:	2300      	movs	r3, #0
 800912e:	637b      	str	r3, [r7, #52]	; 0x34
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f383 8811 	msr	BASEPRI, r3
}
 800913a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800913c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800913e:	4618      	mov	r0, r3
 8009140:	3738      	adds	r7, #56	; 0x38
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08c      	sub	sp, #48	; 0x30
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009154:	2300      	movs	r3, #0
 8009156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10c      	bne.n	800917c <xQueueReceive+0x34>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	b672      	cpsid	i
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	b662      	cpsie	i
 8009176:	623b      	str	r3, [r7, #32]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d103      	bne.n	800918a <xQueueReceive+0x42>
 8009182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <xQueueReceive+0x46>
 800918a:	2301      	movs	r3, #1
 800918c:	e000      	b.n	8009190 <xQueueReceive+0x48>
 800918e:	2300      	movs	r3, #0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10c      	bne.n	80091ae <xQueueReceive+0x66>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	b672      	cpsid	i
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	b662      	cpsie	i
 80091a8:	61fb      	str	r3, [r7, #28]
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091ae:	f001 f9d3 	bl	800a558 <xTaskGetSchedulerState>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d102      	bne.n	80091be <xQueueReceive+0x76>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <xQueueReceive+0x7a>
 80091be:	2301      	movs	r3, #1
 80091c0:	e000      	b.n	80091c4 <xQueueReceive+0x7c>
 80091c2:	2300      	movs	r3, #0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10c      	bne.n	80091e2 <xQueueReceive+0x9a>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091cc:	b672      	cpsid	i
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	b662      	cpsie	i
 80091dc:	61bb      	str	r3, [r7, #24]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091e2:	f001 fd03 	bl	800abec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d01f      	beq.n	8009232 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091f6:	f000 fb0e 	bl	8009816 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	1e5a      	subs	r2, r3, #1
 80091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00f      	beq.n	800922a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	3310      	adds	r3, #16
 800920e:	4618      	mov	r0, r3
 8009210:	f000 ffde 	bl	800a1d0 <xTaskRemoveFromEventList>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800921a:	4b3d      	ldr	r3, [pc, #244]	; (8009310 <xQueueReceive+0x1c8>)
 800921c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800922a:	f001 fd13 	bl	800ac54 <vPortExitCritical>
				return pdPASS;
 800922e:	2301      	movs	r3, #1
 8009230:	e069      	b.n	8009306 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009238:	f001 fd0c 	bl	800ac54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800923c:	2300      	movs	r3, #0
 800923e:	e062      	b.n	8009306 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d106      	bne.n	8009254 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009246:	f107 0310 	add.w	r3, r7, #16
 800924a:	4618      	mov	r0, r3
 800924c:	f001 f824 	bl	800a298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009254:	f001 fcfe 	bl	800ac54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009258:	f000 fdae 	bl	8009db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800925c:	f001 fcc6 	bl	800abec <vPortEnterCritical>
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009266:	b25b      	sxtb	r3, r3
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926c:	d103      	bne.n	8009276 <xQueueReceive+0x12e>
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800927c:	b25b      	sxtb	r3, r3
 800927e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009282:	d103      	bne.n	800928c <xQueueReceive+0x144>
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800928c:	f001 fce2 	bl	800ac54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009290:	1d3a      	adds	r2, r7, #4
 8009292:	f107 0310 	add.w	r3, r7, #16
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f001 f813 	bl	800a2c4 <xTaskCheckForTimeOut>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d123      	bne.n	80092ec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a6:	f000 fb2e 	bl	8009906 <prvIsQueueEmpty>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d017      	beq.n	80092e0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	3324      	adds	r3, #36	; 0x24
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 ff63 	bl	800a184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092c0:	f000 facf 	bl	8009862 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092c4:	f000 fd86 	bl	8009dd4 <xTaskResumeAll>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d189      	bne.n	80091e2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80092ce:	4b10      	ldr	r3, [pc, #64]	; (8009310 <xQueueReceive+0x1c8>)
 80092d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	e780      	b.n	80091e2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80092e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e2:	f000 fabe 	bl	8009862 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092e6:	f000 fd75 	bl	8009dd4 <xTaskResumeAll>
 80092ea:	e77a      	b.n	80091e2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80092ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ee:	f000 fab8 	bl	8009862 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092f2:	f000 fd6f 	bl	8009dd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092f8:	f000 fb05 	bl	8009906 <prvIsQueueEmpty>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f43f af6f 	beq.w	80091e2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009306:	4618      	mov	r0, r3
 8009308:	3730      	adds	r7, #48	; 0x30
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08e      	sub	sp, #56	; 0x38
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800931e:	2300      	movs	r3, #0
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009326:	2300      	movs	r3, #0
 8009328:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10c      	bne.n	800934a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	b672      	cpsid	i
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	b662      	cpsie	i
 8009344:	623b      	str	r3, [r7, #32]
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00c      	beq.n	800936c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	b672      	cpsid	i
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	b662      	cpsie	i
 8009366:	61fb      	str	r3, [r7, #28]
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800936c:	f001 f8f4 	bl	800a558 <xTaskGetSchedulerState>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d102      	bne.n	800937c <xQueueSemaphoreTake+0x68>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d101      	bne.n	8009380 <xQueueSemaphoreTake+0x6c>
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <xQueueSemaphoreTake+0x6e>
 8009380:	2300      	movs	r3, #0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10c      	bne.n	80093a0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	b672      	cpsid	i
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	b662      	cpsie	i
 800939a:	61bb      	str	r3, [r7, #24]
}
 800939c:	bf00      	nop
 800939e:	e7fe      	b.n	800939e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093a0:	f001 fc24 	bl	800abec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d024      	beq.n	80093fa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	1e5a      	subs	r2, r3, #1
 80093b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80093c0:	f001 fa90 	bl	800a8e4 <pvTaskIncrementMutexHeldCount>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00f      	beq.n	80093f2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	3310      	adds	r3, #16
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fefa 	bl	800a1d0 <xTaskRemoveFromEventList>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d007      	beq.n	80093f2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093e2:	4b55      	ldr	r3, [pc, #340]	; (8009538 <xQueueSemaphoreTake+0x224>)
 80093e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093f2:	f001 fc2f 	bl	800ac54 <vPortExitCritical>
				return pdPASS;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e099      	b.n	800952e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d113      	bne.n	8009428 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00c      	beq.n	8009420 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	b672      	cpsid	i
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	b662      	cpsie	i
 800941a:	617b      	str	r3, [r7, #20]
}
 800941c:	bf00      	nop
 800941e:	e7fe      	b.n	800941e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009420:	f001 fc18 	bl	800ac54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009424:	2300      	movs	r3, #0
 8009426:	e082      	b.n	800952e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800942e:	f107 030c 	add.w	r3, r7, #12
 8009432:	4618      	mov	r0, r3
 8009434:	f000 ff30 	bl	800a298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800943c:	f001 fc0a 	bl	800ac54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009440:	f000 fcba 	bl	8009db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009444:	f001 fbd2 	bl	800abec <vPortEnterCritical>
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800944e:	b25b      	sxtb	r3, r3
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009454:	d103      	bne.n	800945e <xQueueSemaphoreTake+0x14a>
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009464:	b25b      	sxtb	r3, r3
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	d103      	bne.n	8009474 <xQueueSemaphoreTake+0x160>
 800946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009474:	f001 fbee 	bl	800ac54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009478:	463a      	mov	r2, r7
 800947a:	f107 030c 	add.w	r3, r7, #12
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f000 ff1f 	bl	800a2c4 <xTaskCheckForTimeOut>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d132      	bne.n	80094f2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800948c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800948e:	f000 fa3a 	bl	8009906 <prvIsQueueEmpty>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d026      	beq.n	80094e6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d109      	bne.n	80094b4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80094a0:	f001 fba4 	bl	800abec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 f873 	bl	800a594 <xTaskPriorityInherit>
 80094ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80094b0:	f001 fbd0 	bl	800ac54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	3324      	adds	r3, #36	; 0x24
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fe61 	bl	800a184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094c4:	f000 f9cd 	bl	8009862 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094c8:	f000 fc84 	bl	8009dd4 <xTaskResumeAll>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f47f af66 	bne.w	80093a0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80094d4:	4b18      	ldr	r3, [pc, #96]	; (8009538 <xQueueSemaphoreTake+0x224>)
 80094d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	e75c      	b.n	80093a0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80094e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094e8:	f000 f9bb 	bl	8009862 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094ec:	f000 fc72 	bl	8009dd4 <xTaskResumeAll>
 80094f0:	e756      	b.n	80093a0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80094f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f4:	f000 f9b5 	bl	8009862 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094f8:	f000 fc6c 	bl	8009dd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094fe:	f000 fa02 	bl	8009906 <prvIsQueueEmpty>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	f43f af4b 	beq.w	80093a0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00d      	beq.n	800952c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009510:	f001 fb6c 	bl	800abec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009516:	f000 f8fc 	bl	8009712 <prvGetDisinheritPriorityAfterTimeout>
 800951a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009522:	4618      	mov	r0, r3
 8009524:	f001 f940 	bl	800a7a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009528:	f001 fb94 	bl	800ac54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800952c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800952e:	4618      	mov	r0, r3
 8009530:	3738      	adds	r7, #56	; 0x38
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08e      	sub	sp, #56	; 0x38
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10c      	bne.n	800956c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	b672      	cpsid	i
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	b662      	cpsie	i
 8009566:	623b      	str	r3, [r7, #32]
}
 8009568:	bf00      	nop
 800956a:	e7fe      	b.n	800956a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d103      	bne.n	800957a <xQueueReceiveFromISR+0x3e>
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <xQueueReceiveFromISR+0x42>
 800957a:	2301      	movs	r3, #1
 800957c:	e000      	b.n	8009580 <xQueueReceiveFromISR+0x44>
 800957e:	2300      	movs	r3, #0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10c      	bne.n	800959e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	b672      	cpsid	i
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	b662      	cpsie	i
 8009598:	61fb      	str	r3, [r7, #28]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800959e:	f001 fc0d 	bl	800adbc <vPortValidateInterruptPriority>
	__asm volatile
 80095a2:	f3ef 8211 	mrs	r2, BASEPRI
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	b672      	cpsid	i
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	b662      	cpsie	i
 80095ba:	61ba      	str	r2, [r7, #24]
 80095bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80095be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d02f      	beq.n	800962e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095dc:	f000 f91b 	bl	8009816 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	1e5a      	subs	r2, r3, #1
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80095e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f0:	d112      	bne.n	8009618 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d016      	beq.n	8009628 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	3310      	adds	r3, #16
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fde6 	bl	800a1d0 <xTaskRemoveFromEventList>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00e      	beq.n	8009628 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00b      	beq.n	8009628 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e007      	b.n	8009628 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800961c:	3301      	adds	r3, #1
 800961e:	b2db      	uxtb	r3, r3
 8009620:	b25a      	sxtb	r2, r3
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009628:	2301      	movs	r3, #1
 800962a:	637b      	str	r3, [r7, #52]	; 0x34
 800962c:	e001      	b.n	8009632 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800962e:	2300      	movs	r3, #0
 8009630:	637b      	str	r3, [r7, #52]	; 0x34
 8009632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009634:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f383 8811 	msr	BASEPRI, r3
}
 800963c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800963e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009640:	4618      	mov	r0, r3
 8009642:	3738      	adds	r7, #56	; 0x38
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10c      	bne.n	8009670 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	b672      	cpsid	i
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	b662      	cpsie	i
 800966a:	60bb      	str	r3, [r7, #8]
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8009670:	f001 fabc 	bl	800abec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800967a:	f001 faeb 	bl	800ac54 <vPortExitCritical>

	return uxReturn;
 800967e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10c      	bne.n	80096b4 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	b672      	cpsid	i
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	b662      	cpsie	i
 80096ae:	60fb      	str	r3, [r7, #12]
}
 80096b0:	bf00      	nop
 80096b2:	e7fe      	b.n	80096b2 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80096ba:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80096bc:	4618      	mov	r0, r3
 80096be:	371c      	adds	r7, #28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10c      	bne.n	80096f4 <vQueueDelete+0x2c>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	b672      	cpsid	i
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	b662      	cpsie	i
 80096ee:	60bb      	str	r3, [r7, #8]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 f935 	bl	8009964 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009700:	2b00      	cmp	r3, #0
 8009702:	d102      	bne.n	800970a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f001 fc67 	bl	800afd8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009712:	b480      	push	{r7}
 8009714:	b085      	sub	sp, #20
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b00      	cmp	r3, #0
 8009720:	d006      	beq.n	8009730 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f1c3 0307 	rsb	r3, r3, #7
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	e001      	b.n	8009734 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009734:	68fb      	ldr	r3, [r7, #12]
	}
 8009736:	4618      	mov	r0, r3
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b086      	sub	sp, #24
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10d      	bne.n	800977c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d14d      	bne.n	8009804 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	4618      	mov	r0, r3
 800976e:	f000 ff91 	bl	800a694 <xTaskPriorityDisinherit>
 8009772:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
 800977a:	e043      	b.n	8009804 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d119      	bne.n	80097b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6858      	ldr	r0, [r3, #4]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	461a      	mov	r2, r3
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	f00e fe1f 	bl	80183d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	441a      	add	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d32b      	bcc.n	8009804 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	605a      	str	r2, [r3, #4]
 80097b4:	e026      	b.n	8009804 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	68d8      	ldr	r0, [r3, #12]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	461a      	mov	r2, r3
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	f00e fe05 	bl	80183d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ce:	425b      	negs	r3, r3
 80097d0:	441a      	add	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d207      	bcs.n	80097f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	689a      	ldr	r2, [r3, #8]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	425b      	negs	r3, r3
 80097ec:	441a      	add	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d105      	bne.n	8009804 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3b01      	subs	r3, #1
 8009802:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	1c5a      	adds	r2, r3, #1
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800980c:	697b      	ldr	r3, [r7, #20]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009824:	2b00      	cmp	r3, #0
 8009826:	d018      	beq.n	800985a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009830:	441a      	add	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	429a      	cmp	r2, r3
 8009840:	d303      	bcc.n	800984a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68d9      	ldr	r1, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009852:	461a      	mov	r2, r3
 8009854:	6838      	ldr	r0, [r7, #0]
 8009856:	f00e fdbb 	bl	80183d0 <memcpy>
	}
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800986a:	f001 f9bf 	bl	800abec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009874:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009876:	e011      	b.n	800989c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2b00      	cmp	r3, #0
 800987e:	d012      	beq.n	80098a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3324      	adds	r3, #36	; 0x24
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fca3 	bl	800a1d0 <xTaskRemoveFromEventList>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009890:	f000 fd7e 	bl	800a390 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	3b01      	subs	r3, #1
 8009898:	b2db      	uxtb	r3, r3
 800989a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800989c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	dce9      	bgt.n	8009878 <prvUnlockQueue+0x16>
 80098a4:	e000      	b.n	80098a8 <prvUnlockQueue+0x46>
					break;
 80098a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	22ff      	movs	r2, #255	; 0xff
 80098ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098b0:	f001 f9d0 	bl	800ac54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098b4:	f001 f99a 	bl	800abec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098c0:	e011      	b.n	80098e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d012      	beq.n	80098f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3310      	adds	r3, #16
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fc7e 	bl	800a1d0 <xTaskRemoveFromEventList>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098da:	f000 fd59 	bl	800a390 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dce9      	bgt.n	80098c2 <prvUnlockQueue+0x60>
 80098ee:	e000      	b.n	80098f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	22ff      	movs	r2, #255	; 0xff
 80098f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098fa:	f001 f9ab 	bl	800ac54 <vPortExitCritical>
}
 80098fe:	bf00      	nop
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800990e:	f001 f96d 	bl	800abec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800991a:	2301      	movs	r3, #1
 800991c:	60fb      	str	r3, [r7, #12]
 800991e:	e001      	b.n	8009924 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009920:	2300      	movs	r3, #0
 8009922:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009924:	f001 f996 	bl	800ac54 <vPortExitCritical>

	return xReturn;
 8009928:	68fb      	ldr	r3, [r7, #12]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800993a:	f001 f957 	bl	800abec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009946:	429a      	cmp	r2, r3
 8009948:	d102      	bne.n	8009950 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	e001      	b.n	8009954 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009954:	f001 f97e 	bl	800ac54 <vPortExitCritical>

	return xReturn;
 8009958:	68fb      	ldr	r3, [r7, #12]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	e016      	b.n	80099a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009972:	4a10      	ldr	r2, [pc, #64]	; (80099b4 <vQueueUnregisterQueue+0x50>)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	4413      	add	r3, r2
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	429a      	cmp	r2, r3
 8009980:	d10b      	bne.n	800999a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009982:	4a0c      	ldr	r2, [pc, #48]	; (80099b4 <vQueueUnregisterQueue+0x50>)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2100      	movs	r1, #0
 8009988:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800998c:	4a09      	ldr	r2, [pc, #36]	; (80099b4 <vQueueUnregisterQueue+0x50>)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	4413      	add	r3, r2
 8009994:	2200      	movs	r2, #0
 8009996:	605a      	str	r2, [r3, #4]
				break;
 8009998:	e006      	b.n	80099a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b07      	cmp	r3, #7
 80099a4:	d9e5      	bls.n	8009972 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80099a6:	bf00      	nop
 80099a8:	bf00      	nop
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	20007f3c 	.word	0x20007f3c

080099b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08e      	sub	sp, #56	; 0x38
 80099bc:	af04      	add	r7, sp, #16
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10c      	bne.n	80099e6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	b672      	cpsid	i
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	b662      	cpsie	i
 80099e0:	623b      	str	r3, [r7, #32]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10c      	bne.n	8009a06 <xTaskCreateStatic+0x4e>
	__asm volatile
 80099ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f0:	b672      	cpsid	i
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	b662      	cpsie	i
 8009a00:	61fb      	str	r3, [r7, #28]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a06:	2354      	movs	r3, #84	; 0x54
 8009a08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2b54      	cmp	r3, #84	; 0x54
 8009a0e:	d00c      	beq.n	8009a2a <xTaskCreateStatic+0x72>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	b672      	cpsid	i
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	b662      	cpsie	i
 8009a24:	61bb      	str	r3, [r7, #24]
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d01e      	beq.n	8009a70 <xTaskCreateStatic+0xb8>
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01b      	beq.n	8009a70 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	2202      	movs	r2, #2
 8009a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9303      	str	r3, [sp, #12]
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	9302      	str	r3, [sp, #8]
 8009a52:	f107 0314 	add.w	r3, r7, #20
 8009a56:	9301      	str	r3, [sp, #4]
 8009a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f850 	bl	8009b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a6a:	f000 f8d7 	bl	8009c1c <prvAddNewTaskToReadyList>
 8009a6e:	e001      	b.n	8009a74 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009a70:	2300      	movs	r3, #0
 8009a72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a74:	697b      	ldr	r3, [r7, #20]
	}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3728      	adds	r7, #40	; 0x28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b08c      	sub	sp, #48	; 0x30
 8009a82:	af04      	add	r7, sp, #16
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	603b      	str	r3, [r7, #0]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 f9d6 	bl	800ae44 <pvPortMalloc>
 8009a98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00e      	beq.n	8009abe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009aa0:	2054      	movs	r0, #84	; 0x54
 8009aa2:	f001 f9cf 	bl	800ae44 <pvPortMalloc>
 8009aa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8009ab4:	e005      	b.n	8009ac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ab6:	6978      	ldr	r0, [r7, #20]
 8009ab8:	f001 fa8e 	bl	800afd8 <vPortFree>
 8009abc:	e001      	b.n	8009ac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d017      	beq.n	8009af8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ad0:	88fa      	ldrh	r2, [r7, #6]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9303      	str	r3, [sp, #12]
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	9302      	str	r3, [sp, #8]
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 f80e 	bl	8009b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aec:	69f8      	ldr	r0, [r7, #28]
 8009aee:	f000 f895 	bl	8009c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009af2:	2301      	movs	r3, #1
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	e002      	b.n	8009afe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009af8:	f04f 33ff 	mov.w	r3, #4294967295
 8009afc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009afe:	69bb      	ldr	r3, [r7, #24]
	}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3720      	adds	r7, #32
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009b20:	440b      	add	r3, r1
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f023 0307 	bic.w	r3, r3, #7
 8009b2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00c      	beq.n	8009b54 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	b672      	cpsid	i
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	b662      	cpsie	i
 8009b4e:	617b      	str	r3, [r7, #20]
}
 8009b50:	bf00      	nop
 8009b52:	e7fe      	b.n	8009b52 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01f      	beq.n	8009b9a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	61fb      	str	r3, [r7, #28]
 8009b5e:	e012      	b.n	8009b86 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	4413      	add	r3, r2
 8009b66:	7819      	ldrb	r1, [r3, #0]
 8009b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	3334      	adds	r3, #52	; 0x34
 8009b70:	460a      	mov	r2, r1
 8009b72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	4413      	add	r3, r2
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d006      	beq.n	8009b8e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	3301      	adds	r3, #1
 8009b84:	61fb      	str	r3, [r7, #28]
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	2b0f      	cmp	r3, #15
 8009b8a:	d9e9      	bls.n	8009b60 <prvInitialiseNewTask+0x58>
 8009b8c:	e000      	b.n	8009b90 <prvInitialiseNewTask+0x88>
			{
				break;
 8009b8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b98:	e003      	b.n	8009ba2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	2b06      	cmp	r3, #6
 8009ba6:	d901      	bls.n	8009bac <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ba8:	2306      	movs	r3, #6
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bba:	2200      	movs	r2, #0
 8009bbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe fe55 	bl	8008872 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	3318      	adds	r3, #24
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fe50 	bl	8008872 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	f1c3 0207 	rsb	r2, r3, #7
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	2200      	movs	r2, #0
 8009bec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	68f9      	ldr	r1, [r7, #12]
 8009bfa:	69b8      	ldr	r0, [r7, #24]
 8009bfc:	f000 feec 	bl	800a9d8 <pxPortInitialiseStack>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c12:	bf00      	nop
 8009c14:	3720      	adds	r7, #32
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
	...

08009c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c24:	f000 ffe2 	bl	800abec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c28:	4b2a      	ldr	r3, [pc, #168]	; (8009cd4 <prvAddNewTaskToReadyList+0xb8>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	4a29      	ldr	r2, [pc, #164]	; (8009cd4 <prvAddNewTaskToReadyList+0xb8>)
 8009c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c32:	4b29      	ldr	r3, [pc, #164]	; (8009cd8 <prvAddNewTaskToReadyList+0xbc>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d109      	bne.n	8009c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c3a:	4a27      	ldr	r2, [pc, #156]	; (8009cd8 <prvAddNewTaskToReadyList+0xbc>)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c40:	4b24      	ldr	r3, [pc, #144]	; (8009cd4 <prvAddNewTaskToReadyList+0xb8>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d110      	bne.n	8009c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c48:	f000 fbc6 	bl	800a3d8 <prvInitialiseTaskLists>
 8009c4c:	e00d      	b.n	8009c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c4e:	4b23      	ldr	r3, [pc, #140]	; (8009cdc <prvAddNewTaskToReadyList+0xc0>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d109      	bne.n	8009c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c56:	4b20      	ldr	r3, [pc, #128]	; (8009cd8 <prvAddNewTaskToReadyList+0xbc>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d802      	bhi.n	8009c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c64:	4a1c      	ldr	r2, [pc, #112]	; (8009cd8 <prvAddNewTaskToReadyList+0xbc>)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c6a:	4b1d      	ldr	r3, [pc, #116]	; (8009ce0 <prvAddNewTaskToReadyList+0xc4>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	4a1b      	ldr	r2, [pc, #108]	; (8009ce0 <prvAddNewTaskToReadyList+0xc4>)
 8009c72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	2201      	movs	r2, #1
 8009c7a:	409a      	lsls	r2, r3
 8009c7c:	4b19      	ldr	r3, [pc, #100]	; (8009ce4 <prvAddNewTaskToReadyList+0xc8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	4a18      	ldr	r2, [pc, #96]	; (8009ce4 <prvAddNewTaskToReadyList+0xc8>)
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4413      	add	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4a15      	ldr	r2, [pc, #84]	; (8009ce8 <prvAddNewTaskToReadyList+0xcc>)
 8009c94:	441a      	add	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f7fe fdf5 	bl	800888c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ca2:	f000 ffd7 	bl	800ac54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	; (8009cdc <prvAddNewTaskToReadyList+0xc0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00e      	beq.n	8009ccc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cae:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <prvAddNewTaskToReadyList+0xbc>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d207      	bcs.n	8009ccc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009cbc:	4b0b      	ldr	r3, [pc, #44]	; (8009cec <prvAddNewTaskToReadyList+0xd0>)
 8009cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20000e10 	.word	0x20000e10
 8009cd8:	20000d10 	.word	0x20000d10
 8009cdc:	20000e1c 	.word	0x20000e1c
 8009ce0:	20000e2c 	.word	0x20000e2c
 8009ce4:	20000e18 	.word	0x20000e18
 8009ce8:	20000d14 	.word	0x20000d14
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08a      	sub	sp, #40	; 0x28
 8009cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009cfe:	463a      	mov	r2, r7
 8009d00:	1d39      	adds	r1, r7, #4
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7f7 f8f4 	bl	8000ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	9202      	str	r2, [sp, #8]
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	2300      	movs	r3, #0
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	460a      	mov	r2, r1
 8009d1e:	4920      	ldr	r1, [pc, #128]	; (8009da0 <vTaskStartScheduler+0xb0>)
 8009d20:	4820      	ldr	r0, [pc, #128]	; (8009da4 <vTaskStartScheduler+0xb4>)
 8009d22:	f7ff fe49 	bl	80099b8 <xTaskCreateStatic>
 8009d26:	4603      	mov	r3, r0
 8009d28:	4a1f      	ldr	r2, [pc, #124]	; (8009da8 <vTaskStartScheduler+0xb8>)
 8009d2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d2c:	4b1e      	ldr	r3, [pc, #120]	; (8009da8 <vTaskStartScheduler+0xb8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d34:	2301      	movs	r3, #1
 8009d36:	617b      	str	r3, [r7, #20]
 8009d38:	e001      	b.n	8009d3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d118      	bne.n	8009d76 <vTaskStartScheduler+0x86>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	b672      	cpsid	i
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	b662      	cpsie	i
 8009d58:	613b      	str	r3, [r7, #16]
}
 8009d5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d5c:	4b13      	ldr	r3, [pc, #76]	; (8009dac <vTaskStartScheduler+0xbc>)
 8009d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d64:	4b12      	ldr	r3, [pc, #72]	; (8009db0 <vTaskStartScheduler+0xc0>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d6a:	4b12      	ldr	r3, [pc, #72]	; (8009db4 <vTaskStartScheduler+0xc4>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d70:	f000 febe 	bl	800aaf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d74:	e010      	b.n	8009d98 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7c:	d10c      	bne.n	8009d98 <vTaskStartScheduler+0xa8>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	b672      	cpsid	i
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	b662      	cpsie	i
 8009d92:	60fb      	str	r3, [r7, #12]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <vTaskStartScheduler+0xa6>
}
 8009d98:	bf00      	nop
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	0802006c 	.word	0x0802006c
 8009da4:	0800a3a9 	.word	0x0800a3a9
 8009da8:	20000e34 	.word	0x20000e34
 8009dac:	20000e30 	.word	0x20000e30
 8009db0:	20000e1c 	.word	0x20000e1c
 8009db4:	20000e14 	.word	0x20000e14

08009db8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009db8:	b480      	push	{r7}
 8009dba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009dbc:	4b04      	ldr	r3, [pc, #16]	; (8009dd0 <vTaskSuspendAll+0x18>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	4a03      	ldr	r2, [pc, #12]	; (8009dd0 <vTaskSuspendAll+0x18>)
 8009dc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009dc6:	bf00      	nop
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	20000e38 	.word	0x20000e38

08009dd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009de2:	4b42      	ldr	r3, [pc, #264]	; (8009eec <xTaskResumeAll+0x118>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10c      	bne.n	8009e04 <xTaskResumeAll+0x30>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	b672      	cpsid	i
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	b662      	cpsie	i
 8009dfe:	603b      	str	r3, [r7, #0]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e04:	f000 fef2 	bl	800abec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e08:	4b38      	ldr	r3, [pc, #224]	; (8009eec <xTaskResumeAll+0x118>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	4a37      	ldr	r2, [pc, #220]	; (8009eec <xTaskResumeAll+0x118>)
 8009e10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e12:	4b36      	ldr	r3, [pc, #216]	; (8009eec <xTaskResumeAll+0x118>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d161      	bne.n	8009ede <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e1a:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <xTaskResumeAll+0x11c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d05d      	beq.n	8009ede <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e22:	e02e      	b.n	8009e82 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e24:	4b33      	ldr	r3, [pc, #204]	; (8009ef4 <xTaskResumeAll+0x120>)
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3318      	adds	r3, #24
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fe fd88 	bl	8008946 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fd83 	bl	8008946 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	2201      	movs	r2, #1
 8009e46:	409a      	lsls	r2, r3
 8009e48:	4b2b      	ldr	r3, [pc, #172]	; (8009ef8 <xTaskResumeAll+0x124>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	4a2a      	ldr	r2, [pc, #168]	; (8009ef8 <xTaskResumeAll+0x124>)
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4a27      	ldr	r2, [pc, #156]	; (8009efc <xTaskResumeAll+0x128>)
 8009e60:	441a      	add	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f7fe fd0f 	bl	800888c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	4b23      	ldr	r3, [pc, #140]	; (8009f00 <xTaskResumeAll+0x12c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d302      	bcc.n	8009e82 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009e7c:	4b21      	ldr	r3, [pc, #132]	; (8009f04 <xTaskResumeAll+0x130>)
 8009e7e:	2201      	movs	r2, #1
 8009e80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e82:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <xTaskResumeAll+0x120>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1cc      	bne.n	8009e24 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e90:	f000 fb42 	bl	800a518 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009e94:	4b1c      	ldr	r3, [pc, #112]	; (8009f08 <xTaskResumeAll+0x134>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d010      	beq.n	8009ec2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ea0:	f000 f858 	bl	8009f54 <xTaskIncrementTick>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009eaa:	4b16      	ldr	r3, [pc, #88]	; (8009f04 <xTaskResumeAll+0x130>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1f1      	bne.n	8009ea0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009ebc:	4b12      	ldr	r3, [pc, #72]	; (8009f08 <xTaskResumeAll+0x134>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ec2:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <xTaskResumeAll+0x130>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d009      	beq.n	8009ede <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ece:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <xTaskResumeAll+0x138>)
 8009ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ede:	f000 feb9 	bl	800ac54 <vPortExitCritical>

	return xAlreadyYielded;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000e38 	.word	0x20000e38
 8009ef0:	20000e10 	.word	0x20000e10
 8009ef4:	20000dd0 	.word	0x20000dd0
 8009ef8:	20000e18 	.word	0x20000e18
 8009efc:	20000d14 	.word	0x20000d14
 8009f00:	20000d10 	.word	0x20000d10
 8009f04:	20000e24 	.word	0x20000e24
 8009f08:	20000e20 	.word	0x20000e20
 8009f0c:	e000ed04 	.word	0xe000ed04

08009f10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f16:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <xTaskGetTickCount+0x1c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f1c:	687b      	ldr	r3, [r7, #4]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000e14 	.word	0x20000e14

08009f30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f36:	f000 ff41 	bl	800adbc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009f3e:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <xTaskGetTickCountFromISR+0x20>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f44:	683b      	ldr	r3, [r7, #0]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000e14 	.word	0x20000e14

08009f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f5e:	4b4f      	ldr	r3, [pc, #316]	; (800a09c <xTaskIncrementTick+0x148>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f040 808a 	bne.w	800a07c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f68:	4b4d      	ldr	r3, [pc, #308]	; (800a0a0 <xTaskIncrementTick+0x14c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f70:	4a4b      	ldr	r2, [pc, #300]	; (800a0a0 <xTaskIncrementTick+0x14c>)
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d122      	bne.n	8009fc2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f7c:	4b49      	ldr	r3, [pc, #292]	; (800a0a4 <xTaskIncrementTick+0x150>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00c      	beq.n	8009fa0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	b672      	cpsid	i
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	b662      	cpsie	i
 8009f9a:	603b      	str	r3, [r7, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	e7fe      	b.n	8009f9e <xTaskIncrementTick+0x4a>
 8009fa0:	4b40      	ldr	r3, [pc, #256]	; (800a0a4 <xTaskIncrementTick+0x150>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	4b40      	ldr	r3, [pc, #256]	; (800a0a8 <xTaskIncrementTick+0x154>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a3e      	ldr	r2, [pc, #248]	; (800a0a4 <xTaskIncrementTick+0x150>)
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	4a3e      	ldr	r2, [pc, #248]	; (800a0a8 <xTaskIncrementTick+0x154>)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	4b3d      	ldr	r3, [pc, #244]	; (800a0ac <xTaskIncrementTick+0x158>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	4a3c      	ldr	r2, [pc, #240]	; (800a0ac <xTaskIncrementTick+0x158>)
 8009fbc:	6013      	str	r3, [r2, #0]
 8009fbe:	f000 faab 	bl	800a518 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fc2:	4b3b      	ldr	r3, [pc, #236]	; (800a0b0 <xTaskIncrementTick+0x15c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d348      	bcc.n	800a05e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fcc:	4b35      	ldr	r3, [pc, #212]	; (800a0a4 <xTaskIncrementTick+0x150>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d104      	bne.n	8009fe0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fd6:	4b36      	ldr	r3, [pc, #216]	; (800a0b0 <xTaskIncrementTick+0x15c>)
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fdc:	601a      	str	r2, [r3, #0]
					break;
 8009fde:	e03e      	b.n	800a05e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fe0:	4b30      	ldr	r3, [pc, #192]	; (800a0a4 <xTaskIncrementTick+0x150>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d203      	bcs.n	800a000 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ff8:	4a2d      	ldr	r2, [pc, #180]	; (800a0b0 <xTaskIncrementTick+0x15c>)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ffe:	e02e      	b.n	800a05e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	3304      	adds	r3, #4
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe fc9e 	bl	8008946 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	3318      	adds	r3, #24
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fc95 	bl	8008946 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a020:	2201      	movs	r2, #1
 800a022:	409a      	lsls	r2, r3
 800a024:	4b23      	ldr	r3, [pc, #140]	; (800a0b4 <xTaskIncrementTick+0x160>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4313      	orrs	r3, r2
 800a02a:	4a22      	ldr	r2, [pc, #136]	; (800a0b4 <xTaskIncrementTick+0x160>)
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4a1f      	ldr	r2, [pc, #124]	; (800a0b8 <xTaskIncrementTick+0x164>)
 800a03c:	441a      	add	r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	3304      	adds	r3, #4
 800a042:	4619      	mov	r1, r3
 800a044:	4610      	mov	r0, r2
 800a046:	f7fe fc21 	bl	800888c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04e:	4b1b      	ldr	r3, [pc, #108]	; (800a0bc <xTaskIncrementTick+0x168>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	429a      	cmp	r2, r3
 800a056:	d3b9      	bcc.n	8009fcc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a058:	2301      	movs	r3, #1
 800a05a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a05c:	e7b6      	b.n	8009fcc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a05e:	4b17      	ldr	r3, [pc, #92]	; (800a0bc <xTaskIncrementTick+0x168>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a064:	4914      	ldr	r1, [pc, #80]	; (800a0b8 <xTaskIncrementTick+0x164>)
 800a066:	4613      	mov	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	440b      	add	r3, r1
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d907      	bls.n	800a086 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e004      	b.n	800a086 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <xTaskIncrementTick+0x16c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3301      	adds	r3, #1
 800a082:	4a0f      	ldr	r2, [pc, #60]	; (800a0c0 <xTaskIncrementTick+0x16c>)
 800a084:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a086:	4b0f      	ldr	r3, [pc, #60]	; (800a0c4 <xTaskIncrementTick+0x170>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800a08e:	2301      	movs	r3, #1
 800a090:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a092:	697b      	ldr	r3, [r7, #20]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20000e38 	.word	0x20000e38
 800a0a0:	20000e14 	.word	0x20000e14
 800a0a4:	20000dc8 	.word	0x20000dc8
 800a0a8:	20000dcc 	.word	0x20000dcc
 800a0ac:	20000e28 	.word	0x20000e28
 800a0b0:	20000e30 	.word	0x20000e30
 800a0b4:	20000e18 	.word	0x20000e18
 800a0b8:	20000d14 	.word	0x20000d14
 800a0bc:	20000d10 	.word	0x20000d10
 800a0c0:	20000e20 	.word	0x20000e20
 800a0c4:	20000e24 	.word	0x20000e24

0800a0c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0ce:	4b28      	ldr	r3, [pc, #160]	; (800a170 <vTaskSwitchContext+0xa8>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0d6:	4b27      	ldr	r3, [pc, #156]	; (800a174 <vTaskSwitchContext+0xac>)
 800a0d8:	2201      	movs	r2, #1
 800a0da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0dc:	e041      	b.n	800a162 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a0de:	4b25      	ldr	r3, [pc, #148]	; (800a174 <vTaskSwitchContext+0xac>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e4:	4b24      	ldr	r3, [pc, #144]	; (800a178 <vTaskSwitchContext+0xb0>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	fab3 f383 	clz	r3, r3
 800a0f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	f1c3 031f 	rsb	r3, r3, #31
 800a0f8:	617b      	str	r3, [r7, #20]
 800a0fa:	4920      	ldr	r1, [pc, #128]	; (800a17c <vTaskSwitchContext+0xb4>)
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10c      	bne.n	800a128 <vTaskSwitchContext+0x60>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	b672      	cpsid	i
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	b662      	cpsie	i
 800a122:	607b      	str	r3, [r7, #4]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vTaskSwitchContext+0x5e>
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4613      	mov	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4a12      	ldr	r2, [pc, #72]	; (800a17c <vTaskSwitchContext+0xb4>)
 800a134:	4413      	add	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	605a      	str	r2, [r3, #4]
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	3308      	adds	r3, #8
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d104      	bne.n	800a158 <vTaskSwitchContext+0x90>
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	605a      	str	r2, [r3, #4]
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	4a08      	ldr	r2, [pc, #32]	; (800a180 <vTaskSwitchContext+0xb8>)
 800a160:	6013      	str	r3, [r2, #0]
}
 800a162:	bf00      	nop
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20000e38 	.word	0x20000e38
 800a174:	20000e24 	.word	0x20000e24
 800a178:	20000e18 	.word	0x20000e18
 800a17c:	20000d14 	.word	0x20000d14
 800a180:	20000d10 	.word	0x20000d10

0800a184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10c      	bne.n	800a1ae <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	b672      	cpsid	i
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	b662      	cpsie	i
 800a1a8:	60fb      	str	r3, [r7, #12]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1ae:	4b07      	ldr	r3, [pc, #28]	; (800a1cc <vTaskPlaceOnEventList+0x48>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3318      	adds	r3, #24
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7fe fb8c 	bl	80088d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1bc:	2101      	movs	r1, #1
 800a1be:	6838      	ldr	r0, [r7, #0]
 800a1c0:	f000 fba4 	bl	800a90c <prvAddCurrentTaskToDelayedList>
}
 800a1c4:	bf00      	nop
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000d10 	.word	0x20000d10

0800a1d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10c      	bne.n	800a200 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	b672      	cpsid	i
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	b662      	cpsie	i
 800a1fa:	60fb      	str	r3, [r7, #12]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	3318      	adds	r3, #24
 800a204:	4618      	mov	r0, r3
 800a206:	f7fe fb9e 	bl	8008946 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a20a:	4b1d      	ldr	r3, [pc, #116]	; (800a280 <xTaskRemoveFromEventList+0xb0>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d11c      	bne.n	800a24c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	3304      	adds	r3, #4
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fb95 	bl	8008946 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	2201      	movs	r2, #1
 800a222:	409a      	lsls	r2, r3
 800a224:	4b17      	ldr	r3, [pc, #92]	; (800a284 <xTaskRemoveFromEventList+0xb4>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4313      	orrs	r3, r2
 800a22a:	4a16      	ldr	r2, [pc, #88]	; (800a284 <xTaskRemoveFromEventList+0xb4>)
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4a13      	ldr	r2, [pc, #76]	; (800a288 <xTaskRemoveFromEventList+0xb8>)
 800a23c:	441a      	add	r2, r3
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	3304      	adds	r3, #4
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f7fe fb21 	bl	800888c <vListInsertEnd>
 800a24a:	e005      	b.n	800a258 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	3318      	adds	r3, #24
 800a250:	4619      	mov	r1, r3
 800a252:	480e      	ldr	r0, [pc, #56]	; (800a28c <xTaskRemoveFromEventList+0xbc>)
 800a254:	f7fe fb1a 	bl	800888c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25c:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <xTaskRemoveFromEventList+0xc0>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a262:	429a      	cmp	r2, r3
 800a264:	d905      	bls.n	800a272 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a266:	2301      	movs	r3, #1
 800a268:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a26a:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <xTaskRemoveFromEventList+0xc4>)
 800a26c:	2201      	movs	r2, #1
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	e001      	b.n	800a276 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a272:	2300      	movs	r3, #0
 800a274:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a276:	697b      	ldr	r3, [r7, #20]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	20000e38 	.word	0x20000e38
 800a284:	20000e18 	.word	0x20000e18
 800a288:	20000d14 	.word	0x20000d14
 800a28c:	20000dd0 	.word	0x20000dd0
 800a290:	20000d10 	.word	0x20000d10
 800a294:	20000e24 	.word	0x20000e24

0800a298 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a2a0:	4b06      	ldr	r3, [pc, #24]	; (800a2bc <vTaskInternalSetTimeOutState+0x24>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <vTaskInternalSetTimeOutState+0x28>)
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	605a      	str	r2, [r3, #4]
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	20000e28 	.word	0x20000e28
 800a2c0:	20000e14 	.word	0x20000e14

0800a2c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b088      	sub	sp, #32
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10c      	bne.n	800a2ee <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	b672      	cpsid	i
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	b662      	cpsie	i
 800a2e8:	613b      	str	r3, [r7, #16]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10c      	bne.n	800a30e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	60fb      	str	r3, [r7, #12]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a30e:	f000 fc6d 	bl	800abec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a312:	4b1d      	ldr	r3, [pc, #116]	; (800a388 <xTaskCheckForTimeOut+0xc4>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32a:	d102      	bne.n	800a332 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a32c:	2300      	movs	r3, #0
 800a32e:	61fb      	str	r3, [r7, #28]
 800a330:	e023      	b.n	800a37a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	4b15      	ldr	r3, [pc, #84]	; (800a38c <xTaskCheckForTimeOut+0xc8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d007      	beq.n	800a34e <xTaskCheckForTimeOut+0x8a>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	429a      	cmp	r2, r3
 800a346:	d302      	bcc.n	800a34e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a348:	2301      	movs	r3, #1
 800a34a:	61fb      	str	r3, [r7, #28]
 800a34c:	e015      	b.n	800a37a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	429a      	cmp	r2, r3
 800a356:	d20b      	bcs.n	800a370 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff ff97 	bl	800a298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a36a:	2300      	movs	r3, #0
 800a36c:	61fb      	str	r3, [r7, #28]
 800a36e:	e004      	b.n	800a37a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a376:	2301      	movs	r3, #1
 800a378:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a37a:	f000 fc6b 	bl	800ac54 <vPortExitCritical>

	return xReturn;
 800a37e:	69fb      	ldr	r3, [r7, #28]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3720      	adds	r7, #32
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20000e14 	.word	0x20000e14
 800a38c:	20000e28 	.word	0x20000e28

0800a390 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a390:	b480      	push	{r7}
 800a392:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a394:	4b03      	ldr	r3, [pc, #12]	; (800a3a4 <vTaskMissedYield+0x14>)
 800a396:	2201      	movs	r2, #1
 800a398:	601a      	str	r2, [r3, #0]
}
 800a39a:	bf00      	nop
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	20000e24 	.word	0x20000e24

0800a3a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a3b0:	f000 f852 	bl	800a458 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3b4:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <prvIdleTask+0x28>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d9f9      	bls.n	800a3b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <prvIdleTask+0x2c>)
 800a3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a3cc:	e7f0      	b.n	800a3b0 <prvIdleTask+0x8>
 800a3ce:	bf00      	nop
 800a3d0:	20000d14 	.word	0x20000d14
 800a3d4:	e000ed04 	.word	0xe000ed04

0800a3d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3de:	2300      	movs	r3, #0
 800a3e0:	607b      	str	r3, [r7, #4]
 800a3e2:	e00c      	b.n	800a3fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4a12      	ldr	r2, [pc, #72]	; (800a438 <prvInitialiseTaskLists+0x60>)
 800a3f0:	4413      	add	r3, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fa1d 	bl	8008832 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	607b      	str	r3, [r7, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b06      	cmp	r3, #6
 800a402:	d9ef      	bls.n	800a3e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a404:	480d      	ldr	r0, [pc, #52]	; (800a43c <prvInitialiseTaskLists+0x64>)
 800a406:	f7fe fa14 	bl	8008832 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a40a:	480d      	ldr	r0, [pc, #52]	; (800a440 <prvInitialiseTaskLists+0x68>)
 800a40c:	f7fe fa11 	bl	8008832 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a410:	480c      	ldr	r0, [pc, #48]	; (800a444 <prvInitialiseTaskLists+0x6c>)
 800a412:	f7fe fa0e 	bl	8008832 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a416:	480c      	ldr	r0, [pc, #48]	; (800a448 <prvInitialiseTaskLists+0x70>)
 800a418:	f7fe fa0b 	bl	8008832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a41c:	480b      	ldr	r0, [pc, #44]	; (800a44c <prvInitialiseTaskLists+0x74>)
 800a41e:	f7fe fa08 	bl	8008832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <prvInitialiseTaskLists+0x78>)
 800a424:	4a05      	ldr	r2, [pc, #20]	; (800a43c <prvInitialiseTaskLists+0x64>)
 800a426:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <prvInitialiseTaskLists+0x7c>)
 800a42a:	4a05      	ldr	r2, [pc, #20]	; (800a440 <prvInitialiseTaskLists+0x68>)
 800a42c:	601a      	str	r2, [r3, #0]
}
 800a42e:	bf00      	nop
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000d14 	.word	0x20000d14
 800a43c:	20000da0 	.word	0x20000da0
 800a440:	20000db4 	.word	0x20000db4
 800a444:	20000dd0 	.word	0x20000dd0
 800a448:	20000de4 	.word	0x20000de4
 800a44c:	20000dfc 	.word	0x20000dfc
 800a450:	20000dc8 	.word	0x20000dc8
 800a454:	20000dcc 	.word	0x20000dcc

0800a458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a45e:	e019      	b.n	800a494 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a460:	f000 fbc4 	bl	800abec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a464:	4b10      	ldr	r3, [pc, #64]	; (800a4a8 <prvCheckTasksWaitingTermination+0x50>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3304      	adds	r3, #4
 800a470:	4618      	mov	r0, r3
 800a472:	f7fe fa68 	bl	8008946 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <prvCheckTasksWaitingTermination+0x54>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	4a0b      	ldr	r2, [pc, #44]	; (800a4ac <prvCheckTasksWaitingTermination+0x54>)
 800a47e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a480:	4b0b      	ldr	r3, [pc, #44]	; (800a4b0 <prvCheckTasksWaitingTermination+0x58>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3b01      	subs	r3, #1
 800a486:	4a0a      	ldr	r2, [pc, #40]	; (800a4b0 <prvCheckTasksWaitingTermination+0x58>)
 800a488:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a48a:	f000 fbe3 	bl	800ac54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f810 	bl	800a4b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a494:	4b06      	ldr	r3, [pc, #24]	; (800a4b0 <prvCheckTasksWaitingTermination+0x58>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e1      	bne.n	800a460 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20000de4 	.word	0x20000de4
 800a4ac:	20000e10 	.word	0x20000e10
 800a4b0:	20000df8 	.word	0x20000df8

0800a4b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d108      	bne.n	800a4d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 fd84 	bl	800afd8 <vPortFree>
				vPortFree( pxTCB );
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fd81 	bl	800afd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a4d6:	e01a      	b.n	800a50e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d103      	bne.n	800a4ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fd78 	bl	800afd8 <vPortFree>
	}
 800a4e8:	e011      	b.n	800a50e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d00c      	beq.n	800a50e <prvDeleteTCB+0x5a>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	b672      	cpsid	i
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	b662      	cpsie	i
 800a508:	60fb      	str	r3, [r7, #12]
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <prvDeleteTCB+0x58>
	}
 800a50e:	bf00      	nop
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a51e:	4b0c      	ldr	r3, [pc, #48]	; (800a550 <prvResetNextTaskUnblockTime+0x38>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d104      	bne.n	800a532 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a528:	4b0a      	ldr	r3, [pc, #40]	; (800a554 <prvResetNextTaskUnblockTime+0x3c>)
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a530:	e008      	b.n	800a544 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a532:	4b07      	ldr	r3, [pc, #28]	; (800a550 <prvResetNextTaskUnblockTime+0x38>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4a04      	ldr	r2, [pc, #16]	; (800a554 <prvResetNextTaskUnblockTime+0x3c>)
 800a542:	6013      	str	r3, [r2, #0]
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	20000dc8 	.word	0x20000dc8
 800a554:	20000e30 	.word	0x20000e30

0800a558 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a55e:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <xTaskGetSchedulerState+0x34>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d102      	bne.n	800a56c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a566:	2301      	movs	r3, #1
 800a568:	607b      	str	r3, [r7, #4]
 800a56a:	e008      	b.n	800a57e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a56c:	4b08      	ldr	r3, [pc, #32]	; (800a590 <xTaskGetSchedulerState+0x38>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d102      	bne.n	800a57a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a574:	2302      	movs	r3, #2
 800a576:	607b      	str	r3, [r7, #4]
 800a578:	e001      	b.n	800a57e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a57a:	2300      	movs	r3, #0
 800a57c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a57e:	687b      	ldr	r3, [r7, #4]
	}
 800a580:	4618      	mov	r0, r3
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20000e1c 	.word	0x20000e1c
 800a590:	20000e38 	.word	0x20000e38

0800a594 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d069      	beq.n	800a67e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ae:	4b36      	ldr	r3, [pc, #216]	; (800a688 <xTaskPriorityInherit+0xf4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d259      	bcs.n	800a66c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	db06      	blt.n	800a5ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c0:	4b31      	ldr	r3, [pc, #196]	; (800a688 <xTaskPriorityInherit+0xf4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	f1c3 0207 	rsb	r2, r3, #7
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6959      	ldr	r1, [r3, #20]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4a2b      	ldr	r2, [pc, #172]	; (800a68c <xTaskPriorityInherit+0xf8>)
 800a5e0:	4413      	add	r3, r2
 800a5e2:	4299      	cmp	r1, r3
 800a5e4:	d13a      	bne.n	800a65c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe f9ab 	bl	8008946 <uxListRemove>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d115      	bne.n	800a622 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5fa:	4924      	ldr	r1, [pc, #144]	; (800a68c <xTaskPriorityInherit+0xf8>)
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	440b      	add	r3, r1
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <xTaskPriorityInherit+0x8e>
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	2201      	movs	r2, #1
 800a612:	fa02 f303 	lsl.w	r3, r2, r3
 800a616:	43da      	mvns	r2, r3
 800a618:	4b1d      	ldr	r3, [pc, #116]	; (800a690 <xTaskPriorityInherit+0xfc>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4013      	ands	r3, r2
 800a61e:	4a1c      	ldr	r2, [pc, #112]	; (800a690 <xTaskPriorityInherit+0xfc>)
 800a620:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a622:	4b19      	ldr	r3, [pc, #100]	; (800a688 <xTaskPriorityInherit+0xf4>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a630:	2201      	movs	r2, #1
 800a632:	409a      	lsls	r2, r3
 800a634:	4b16      	ldr	r3, [pc, #88]	; (800a690 <xTaskPriorityInherit+0xfc>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4313      	orrs	r3, r2
 800a63a:	4a15      	ldr	r2, [pc, #84]	; (800a690 <xTaskPriorityInherit+0xfc>)
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a642:	4613      	mov	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4413      	add	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4a10      	ldr	r2, [pc, #64]	; (800a68c <xTaskPriorityInherit+0xf8>)
 800a64c:	441a      	add	r2, r3
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	3304      	adds	r3, #4
 800a652:	4619      	mov	r1, r3
 800a654:	4610      	mov	r0, r2
 800a656:	f7fe f919 	bl	800888c <vListInsertEnd>
 800a65a:	e004      	b.n	800a666 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <xTaskPriorityInherit+0xf4>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a666:	2301      	movs	r3, #1
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	e008      	b.n	800a67e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a670:	4b05      	ldr	r3, [pc, #20]	; (800a688 <xTaskPriorityInherit+0xf4>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	429a      	cmp	r2, r3
 800a678:	d201      	bcs.n	800a67e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a67a:	2301      	movs	r3, #1
 800a67c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a67e:	68fb      	ldr	r3, [r7, #12]
	}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000d10 	.word	0x20000d10
 800a68c:	20000d14 	.word	0x20000d14
 800a690:	20000e18 	.word	0x20000e18

0800a694 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d072      	beq.n	800a790 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6aa:	4b3c      	ldr	r3, [pc, #240]	; (800a79c <xTaskPriorityDisinherit+0x108>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d00c      	beq.n	800a6ce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	b672      	cpsid	i
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	b662      	cpsie	i
 800a6c8:	60fb      	str	r3, [r7, #12]
}
 800a6ca:	bf00      	nop
 800a6cc:	e7fe      	b.n	800a6cc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10c      	bne.n	800a6f0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	b672      	cpsid	i
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	b662      	cpsie	i
 800a6ea:	60bb      	str	r3, [r7, #8]
}
 800a6ec:	bf00      	nop
 800a6ee:	e7fe      	b.n	800a6ee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6f4:	1e5a      	subs	r2, r3, #1
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a702:	429a      	cmp	r2, r3
 800a704:	d044      	beq.n	800a790 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d140      	bne.n	800a790 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	3304      	adds	r3, #4
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe f917 	bl	8008946 <uxListRemove>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d115      	bne.n	800a74a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a722:	491f      	ldr	r1, [pc, #124]	; (800a7a0 <xTaskPriorityDisinherit+0x10c>)
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <xTaskPriorityDisinherit+0xb6>
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a738:	2201      	movs	r2, #1
 800a73a:	fa02 f303 	lsl.w	r3, r2, r3
 800a73e:	43da      	mvns	r2, r3
 800a740:	4b18      	ldr	r3, [pc, #96]	; (800a7a4 <xTaskPriorityDisinherit+0x110>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4013      	ands	r3, r2
 800a746:	4a17      	ldr	r2, [pc, #92]	; (800a7a4 <xTaskPriorityDisinherit+0x110>)
 800a748:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a756:	f1c3 0207 	rsb	r2, r3, #7
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a762:	2201      	movs	r2, #1
 800a764:	409a      	lsls	r2, r3
 800a766:	4b0f      	ldr	r3, [pc, #60]	; (800a7a4 <xTaskPriorityDisinherit+0x110>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	4a0d      	ldr	r2, [pc, #52]	; (800a7a4 <xTaskPriorityDisinherit+0x110>)
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4a08      	ldr	r2, [pc, #32]	; (800a7a0 <xTaskPriorityDisinherit+0x10c>)
 800a77e:	441a      	add	r2, r3
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	3304      	adds	r3, #4
 800a784:	4619      	mov	r1, r3
 800a786:	4610      	mov	r0, r2
 800a788:	f7fe f880 	bl	800888c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a78c:	2301      	movs	r3, #1
 800a78e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a790:	697b      	ldr	r3, [r7, #20]
	}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000d10 	.word	0x20000d10
 800a7a0:	20000d14 	.word	0x20000d14
 800a7a4:	20000e18 	.word	0x20000e18

0800a7a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 8087 	beq.w	800a8d0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10c      	bne.n	800a7e4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	b672      	cpsid	i
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	b662      	cpsie	i
 800a7de:	60fb      	str	r3, [r7, #12]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d902      	bls.n	800a7f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	61fb      	str	r3, [r7, #28]
 800a7f2:	e002      	b.n	800a7fa <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fe:	69fa      	ldr	r2, [r7, #28]
 800a800:	429a      	cmp	r2, r3
 800a802:	d065      	beq.n	800a8d0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d160      	bne.n	800a8d0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a80e:	4b32      	ldr	r3, [pc, #200]	; (800a8d8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	429a      	cmp	r2, r3
 800a816:	d10c      	bne.n	800a832 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	b672      	cpsid	i
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	b662      	cpsie	i
 800a82c:	60bb      	str	r3, [r7, #8]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a836:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	db04      	blt.n	800a850 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	f1c3 0207 	rsb	r2, r3, #7
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	6959      	ldr	r1, [r3, #20]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4613      	mov	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4a1f      	ldr	r2, [pc, #124]	; (800a8dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a860:	4413      	add	r3, r2
 800a862:	4299      	cmp	r1, r3
 800a864:	d134      	bne.n	800a8d0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	3304      	adds	r3, #4
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe f86b 	bl	8008946 <uxListRemove>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d115      	bne.n	800a8a2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87a:	4918      	ldr	r1, [pc, #96]	; (800a8dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	440b      	add	r3, r1
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10a      	bne.n	800a8a2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a890:	2201      	movs	r2, #1
 800a892:	fa02 f303 	lsl.w	r3, r2, r3
 800a896:	43da      	mvns	r2, r3
 800a898:	4b11      	ldr	r3, [pc, #68]	; (800a8e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4013      	ands	r3, r2
 800a89e:	4a10      	ldr	r2, [pc, #64]	; (800a8e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a8a0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	409a      	lsls	r2, r3
 800a8aa:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	4a0b      	ldr	r2, [pc, #44]	; (800a8e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4a06      	ldr	r2, [pc, #24]	; (800a8dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a8c2:	441a      	add	r2, r3
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	f7fd ffde 	bl	800888c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8d0:	bf00      	nop
 800a8d2:	3720      	adds	r7, #32
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	20000d10 	.word	0x20000d10
 800a8dc:	20000d14 	.word	0x20000d14
 800a8e0:	20000e18 	.word	0x20000e18

0800a8e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a8e8:	4b07      	ldr	r3, [pc, #28]	; (800a908 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d004      	beq.n	800a8fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a8f0:	4b05      	ldr	r3, [pc, #20]	; (800a908 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8f6:	3201      	adds	r2, #1
 800a8f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a8fa:	4b03      	ldr	r3, [pc, #12]	; (800a908 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
	}
 800a8fe:	4618      	mov	r0, r3
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	20000d10 	.word	0x20000d10

0800a90c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a916:	4b29      	ldr	r3, [pc, #164]	; (800a9bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a91c:	4b28      	ldr	r3, [pc, #160]	; (800a9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3304      	adds	r3, #4
 800a922:	4618      	mov	r0, r3
 800a924:	f7fe f80f 	bl	8008946 <uxListRemove>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10b      	bne.n	800a946 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a92e:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	2201      	movs	r2, #1
 800a936:	fa02 f303 	lsl.w	r3, r2, r3
 800a93a:	43da      	mvns	r2, r3
 800a93c:	4b21      	ldr	r3, [pc, #132]	; (800a9c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4013      	ands	r3, r2
 800a942:	4a20      	ldr	r2, [pc, #128]	; (800a9c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a944:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d10a      	bne.n	800a964 <prvAddCurrentTaskToDelayedList+0x58>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d007      	beq.n	800a964 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a954:	4b1a      	ldr	r3, [pc, #104]	; (800a9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3304      	adds	r3, #4
 800a95a:	4619      	mov	r1, r3
 800a95c:	481a      	ldr	r0, [pc, #104]	; (800a9c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a95e:	f7fd ff95 	bl	800888c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a962:	e026      	b.n	800a9b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4413      	add	r3, r2
 800a96a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a96c:	4b14      	ldr	r3, [pc, #80]	; (800a9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d209      	bcs.n	800a990 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a97c:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3304      	adds	r3, #4
 800a986:	4619      	mov	r1, r3
 800a988:	4610      	mov	r0, r2
 800a98a:	f7fd ffa3 	bl	80088d4 <vListInsert>
}
 800a98e:	e010      	b.n	800a9b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a990:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3304      	adds	r3, #4
 800a99a:	4619      	mov	r1, r3
 800a99c:	4610      	mov	r0, r2
 800a99e:	f7fd ff99 	bl	80088d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	; (800a9d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d202      	bcs.n	800a9b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a9ac:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	6013      	str	r3, [r2, #0]
}
 800a9b2:	bf00      	nop
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000e14 	.word	0x20000e14
 800a9c0:	20000d10 	.word	0x20000d10
 800a9c4:	20000e18 	.word	0x20000e18
 800a9c8:	20000dfc 	.word	0x20000dfc
 800a9cc:	20000dcc 	.word	0x20000dcc
 800a9d0:	20000dc8 	.word	0x20000dc8
 800a9d4:	20000e30 	.word	0x20000e30

0800a9d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3b04      	subs	r3, #4
 800a9e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f023 0201 	bic.w	r2, r3, #1
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3b04      	subs	r3, #4
 800aa06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa08:	4a0c      	ldr	r2, [pc, #48]	; (800aa3c <pxPortInitialiseStack+0x64>)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3b14      	subs	r3, #20
 800aa12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3b04      	subs	r3, #4
 800aa1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f06f 0202 	mvn.w	r2, #2
 800aa26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	3b20      	subs	r3, #32
 800aa2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	0800aa41 	.word	0x0800aa41

0800aa40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa4a:	4b14      	ldr	r3, [pc, #80]	; (800aa9c <prvTaskExitError+0x5c>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa52:	d00c      	beq.n	800aa6e <prvTaskExitError+0x2e>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	b672      	cpsid	i
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	b662      	cpsie	i
 800aa68:	60fb      	str	r3, [r7, #12]
}
 800aa6a:	bf00      	nop
 800aa6c:	e7fe      	b.n	800aa6c <prvTaskExitError+0x2c>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	b672      	cpsid	i
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	b662      	cpsie	i
 800aa82:	60bb      	str	r3, [r7, #8]
}
 800aa84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa86:	bf00      	nop
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0fc      	beq.n	800aa88 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa8e:	bf00      	nop
 800aa90:	bf00      	nop
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	20000028 	.word	0x20000028

0800aaa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aaa0:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <pxCurrentTCBConst2>)
 800aaa2:	6819      	ldr	r1, [r3, #0]
 800aaa4:	6808      	ldr	r0, [r1, #0]
 800aaa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaaa:	f380 8809 	msr	PSP, r0
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f04f 0000 	mov.w	r0, #0
 800aab6:	f380 8811 	msr	BASEPRI, r0
 800aaba:	4770      	bx	lr
 800aabc:	f3af 8000 	nop.w

0800aac0 <pxCurrentTCBConst2>:
 800aac0:	20000d10 	.word	0x20000d10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop

0800aac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aac8:	4808      	ldr	r0, [pc, #32]	; (800aaec <prvPortStartFirstTask+0x24>)
 800aaca:	6800      	ldr	r0, [r0, #0]
 800aacc:	6800      	ldr	r0, [r0, #0]
 800aace:	f380 8808 	msr	MSP, r0
 800aad2:	f04f 0000 	mov.w	r0, #0
 800aad6:	f380 8814 	msr	CONTROL, r0
 800aada:	b662      	cpsie	i
 800aadc:	b661      	cpsie	f
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	df00      	svc	0
 800aae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaea:	bf00      	nop
 800aaec:	e000ed08 	.word	0xe000ed08

0800aaf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aaf6:	4b37      	ldr	r3, [pc, #220]	; (800abd4 <xPortStartScheduler+0xe4>)
 800aaf8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	22ff      	movs	r2, #255	; 0xff
 800ab06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	4b2f      	ldr	r3, [pc, #188]	; (800abd8 <xPortStartScheduler+0xe8>)
 800ab1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab1e:	4b2f      	ldr	r3, [pc, #188]	; (800abdc <xPortStartScheduler+0xec>)
 800ab20:	2207      	movs	r2, #7
 800ab22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab24:	e009      	b.n	800ab3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ab26:	4b2d      	ldr	r3, [pc, #180]	; (800abdc <xPortStartScheduler+0xec>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	4a2b      	ldr	r2, [pc, #172]	; (800abdc <xPortStartScheduler+0xec>)
 800ab2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab3a:	78fb      	ldrb	r3, [r7, #3]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab42:	2b80      	cmp	r3, #128	; 0x80
 800ab44:	d0ef      	beq.n	800ab26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab46:	4b25      	ldr	r3, [pc, #148]	; (800abdc <xPortStartScheduler+0xec>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f1c3 0307 	rsb	r3, r3, #7
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	d00c      	beq.n	800ab6c <xPortStartScheduler+0x7c>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab56:	b672      	cpsid	i
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	b662      	cpsie	i
 800ab66:	60bb      	str	r3, [r7, #8]
}
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab6c:	4b1b      	ldr	r3, [pc, #108]	; (800abdc <xPortStartScheduler+0xec>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	021b      	lsls	r3, r3, #8
 800ab72:	4a1a      	ldr	r2, [pc, #104]	; (800abdc <xPortStartScheduler+0xec>)
 800ab74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab76:	4b19      	ldr	r3, [pc, #100]	; (800abdc <xPortStartScheduler+0xec>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab7e:	4a17      	ldr	r2, [pc, #92]	; (800abdc <xPortStartScheduler+0xec>)
 800ab80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab8a:	4b15      	ldr	r3, [pc, #84]	; (800abe0 <xPortStartScheduler+0xf0>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a14      	ldr	r2, [pc, #80]	; (800abe0 <xPortStartScheduler+0xf0>)
 800ab90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab96:	4b12      	ldr	r3, [pc, #72]	; (800abe0 <xPortStartScheduler+0xf0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a11      	ldr	r2, [pc, #68]	; (800abe0 <xPortStartScheduler+0xf0>)
 800ab9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aba0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aba2:	f000 f8dd 	bl	800ad60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aba6:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <xPortStartScheduler+0xf4>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800abac:	f000 f8fc 	bl	800ada8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800abb0:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <xPortStartScheduler+0xf8>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a0c      	ldr	r2, [pc, #48]	; (800abe8 <xPortStartScheduler+0xf8>)
 800abb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800abba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800abbc:	f7ff ff84 	bl	800aac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abc0:	f7ff fa82 	bl	800a0c8 <vTaskSwitchContext>
	prvTaskExitError();
 800abc4:	f7ff ff3c 	bl	800aa40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	e000e400 	.word	0xe000e400
 800abd8:	20000e3c 	.word	0x20000e3c
 800abdc:	20000e40 	.word	0x20000e40
 800abe0:	e000ed20 	.word	0xe000ed20
 800abe4:	20000028 	.word	0x20000028
 800abe8:	e000ef34 	.word	0xe000ef34

0800abec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	b672      	cpsid	i
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	b662      	cpsie	i
 800ac06:	607b      	str	r3, [r7, #4]
}
 800ac08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac0a:	4b10      	ldr	r3, [pc, #64]	; (800ac4c <vPortEnterCritical+0x60>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	4a0e      	ldr	r2, [pc, #56]	; (800ac4c <vPortEnterCritical+0x60>)
 800ac12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac14:	4b0d      	ldr	r3, [pc, #52]	; (800ac4c <vPortEnterCritical+0x60>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d111      	bne.n	800ac40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac1c:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <vPortEnterCritical+0x64>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00c      	beq.n	800ac40 <vPortEnterCritical+0x54>
	__asm volatile
 800ac26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2a:	b672      	cpsid	i
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	b662      	cpsie	i
 800ac3a:	603b      	str	r3, [r7, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <vPortEnterCritical+0x52>
	}
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	20000028 	.word	0x20000028
 800ac50:	e000ed04 	.word	0xe000ed04

0800ac54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac5a:	4b13      	ldr	r3, [pc, #76]	; (800aca8 <vPortExitCritical+0x54>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10c      	bne.n	800ac7c <vPortExitCritical+0x28>
	__asm volatile
 800ac62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac66:	b672      	cpsid	i
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	b662      	cpsie	i
 800ac76:	607b      	str	r3, [r7, #4]
}
 800ac78:	bf00      	nop
 800ac7a:	e7fe      	b.n	800ac7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ac7c:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <vPortExitCritical+0x54>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	4a09      	ldr	r2, [pc, #36]	; (800aca8 <vPortExitCritical+0x54>)
 800ac84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac86:	4b08      	ldr	r3, [pc, #32]	; (800aca8 <vPortExitCritical+0x54>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d105      	bne.n	800ac9a <vPortExitCritical+0x46>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	f383 8811 	msr	BASEPRI, r3
}
 800ac98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac9a:	bf00      	nop
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	20000028 	.word	0x20000028
 800acac:	00000000 	.word	0x00000000

0800acb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800acb0:	f3ef 8009 	mrs	r0, PSP
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	4b15      	ldr	r3, [pc, #84]	; (800ad10 <pxCurrentTCBConst>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	f01e 0f10 	tst.w	lr, #16
 800acc0:	bf08      	it	eq
 800acc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acca:	6010      	str	r0, [r2, #0]
 800accc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800acd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800acd4:	b672      	cpsid	i
 800acd6:	f380 8811 	msr	BASEPRI, r0
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	b662      	cpsie	i
 800ace4:	f7ff f9f0 	bl	800a0c8 <vTaskSwitchContext>
 800ace8:	f04f 0000 	mov.w	r0, #0
 800acec:	f380 8811 	msr	BASEPRI, r0
 800acf0:	bc09      	pop	{r0, r3}
 800acf2:	6819      	ldr	r1, [r3, #0]
 800acf4:	6808      	ldr	r0, [r1, #0]
 800acf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfa:	f01e 0f10 	tst.w	lr, #16
 800acfe:	bf08      	it	eq
 800ad00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad04:	f380 8809 	msr	PSP, r0
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop

0800ad10 <pxCurrentTCBConst>:
 800ad10:	20000d10 	.word	0x20000d10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop

0800ad18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad22:	b672      	cpsid	i
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	b662      	cpsie	i
 800ad32:	607b      	str	r3, [r7, #4]
}
 800ad34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad36:	f7ff f90d 	bl	8009f54 <xTaskIncrementTick>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad40:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <SysTick_Handler+0x44>)
 800ad42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	f383 8811 	msr	BASEPRI, r3
}
 800ad52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	e000ed04 	.word	0xe000ed04

0800ad60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad64:	4b0b      	ldr	r3, [pc, #44]	; (800ad94 <vPortSetupTimerInterrupt+0x34>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <vPortSetupTimerInterrupt+0x38>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <vPortSetupTimerInterrupt+0x3c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a0a      	ldr	r2, [pc, #40]	; (800ada0 <vPortSetupTimerInterrupt+0x40>)
 800ad76:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7a:	099b      	lsrs	r3, r3, #6
 800ad7c:	4a09      	ldr	r2, [pc, #36]	; (800ada4 <vPortSetupTimerInterrupt+0x44>)
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad82:	4b04      	ldr	r3, [pc, #16]	; (800ad94 <vPortSetupTimerInterrupt+0x34>)
 800ad84:	2207      	movs	r2, #7
 800ad86:	601a      	str	r2, [r3, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	e000e010 	.word	0xe000e010
 800ad98:	e000e018 	.word	0xe000e018
 800ad9c:	2000001c 	.word	0x2000001c
 800ada0:	10624dd3 	.word	0x10624dd3
 800ada4:	e000e014 	.word	0xe000e014

0800ada8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ada8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800adb8 <vPortEnableVFP+0x10>
 800adac:	6801      	ldr	r1, [r0, #0]
 800adae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800adb2:	6001      	str	r1, [r0, #0]
 800adb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800adb6:	bf00      	nop
 800adb8:	e000ed88 	.word	0xe000ed88

0800adbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800adc2:	f3ef 8305 	mrs	r3, IPSR
 800adc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b0f      	cmp	r3, #15
 800adcc:	d916      	bls.n	800adfc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800adce:	4a19      	ldr	r2, [pc, #100]	; (800ae34 <vPortValidateInterruptPriority+0x78>)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4413      	add	r3, r2
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800add8:	4b17      	ldr	r3, [pc, #92]	; (800ae38 <vPortValidateInterruptPriority+0x7c>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	7afa      	ldrb	r2, [r7, #11]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d20c      	bcs.n	800adfc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	b672      	cpsid	i
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	b662      	cpsie	i
 800adf6:	607b      	str	r3, [r7, #4]
}
 800adf8:	bf00      	nop
 800adfa:	e7fe      	b.n	800adfa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adfc:	4b0f      	ldr	r3, [pc, #60]	; (800ae3c <vPortValidateInterruptPriority+0x80>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae04:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <vPortValidateInterruptPriority+0x84>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d90c      	bls.n	800ae26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	b672      	cpsid	i
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	b662      	cpsie	i
 800ae20:	603b      	str	r3, [r7, #0]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <vPortValidateInterruptPriority+0x68>
	}
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	e000e3f0 	.word	0xe000e3f0
 800ae38:	20000e3c 	.word	0x20000e3c
 800ae3c:	e000ed0c 	.word	0xe000ed0c
 800ae40:	20000e40 	.word	0x20000e40

0800ae44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b08a      	sub	sp, #40	; 0x28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae50:	f7fe ffb2 	bl	8009db8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae54:	4b5b      	ldr	r3, [pc, #364]	; (800afc4 <pvPortMalloc+0x180>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae5c:	f000 f91a 	bl	800b094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae60:	4b59      	ldr	r3, [pc, #356]	; (800afc8 <pvPortMalloc+0x184>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4013      	ands	r3, r2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f040 8092 	bne.w	800af92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d01f      	beq.n	800aeb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ae74:	2208      	movs	r2, #8
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4413      	add	r3, r2
 800ae7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d016      	beq.n	800aeb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f023 0307 	bic.w	r3, r3, #7
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00c      	beq.n	800aeb4 <pvPortMalloc+0x70>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	b672      	cpsid	i
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	b662      	cpsie	i
 800aeae:	617b      	str	r3, [r7, #20]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d06b      	beq.n	800af92 <pvPortMalloc+0x14e>
 800aeba:	4b44      	ldr	r3, [pc, #272]	; (800afcc <pvPortMalloc+0x188>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d866      	bhi.n	800af92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aec4:	4b42      	ldr	r3, [pc, #264]	; (800afd0 <pvPortMalloc+0x18c>)
 800aec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aec8:	4b41      	ldr	r3, [pc, #260]	; (800afd0 <pvPortMalloc+0x18c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aece:	e004      	b.n	800aeda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d903      	bls.n	800aeec <pvPortMalloc+0xa8>
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1f1      	bne.n	800aed0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aeec:	4b35      	ldr	r3, [pc, #212]	; (800afc4 <pvPortMalloc+0x180>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d04d      	beq.n	800af92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2208      	movs	r2, #8
 800aefc:	4413      	add	r3, r2
 800aefe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	6a3b      	ldr	r3, [r7, #32]
 800af06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	2308      	movs	r3, #8
 800af12:	005b      	lsls	r3, r3, #1
 800af14:	429a      	cmp	r2, r3
 800af16:	d921      	bls.n	800af5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4413      	add	r3, r2
 800af1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	f003 0307 	and.w	r3, r3, #7
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00c      	beq.n	800af44 <pvPortMalloc+0x100>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	b672      	cpsid	i
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	b662      	cpsie	i
 800af3e:	613b      	str	r3, [r7, #16]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	1ad2      	subs	r2, r2, r3
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af56:	69b8      	ldr	r0, [r7, #24]
 800af58:	f000 f8fe 	bl	800b158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af5c:	4b1b      	ldr	r3, [pc, #108]	; (800afcc <pvPortMalloc+0x188>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	4a19      	ldr	r2, [pc, #100]	; (800afcc <pvPortMalloc+0x188>)
 800af68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af6a:	4b18      	ldr	r3, [pc, #96]	; (800afcc <pvPortMalloc+0x188>)
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	4b19      	ldr	r3, [pc, #100]	; (800afd4 <pvPortMalloc+0x190>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d203      	bcs.n	800af7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af76:	4b15      	ldr	r3, [pc, #84]	; (800afcc <pvPortMalloc+0x188>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a16      	ldr	r2, [pc, #88]	; (800afd4 <pvPortMalloc+0x190>)
 800af7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af80:	685a      	ldr	r2, [r3, #4]
 800af82:	4b11      	ldr	r3, [pc, #68]	; (800afc8 <pvPortMalloc+0x184>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	431a      	orrs	r2, r3
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	2200      	movs	r2, #0
 800af90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af92:	f7fe ff1f 	bl	8009dd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	f003 0307 	and.w	r3, r3, #7
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00c      	beq.n	800afba <pvPortMalloc+0x176>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	b672      	cpsid	i
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	b662      	cpsie	i
 800afb4:	60fb      	str	r3, [r7, #12]
}
 800afb6:	bf00      	nop
 800afb8:	e7fe      	b.n	800afb8 <pvPortMalloc+0x174>
	return pvReturn;
 800afba:	69fb      	ldr	r3, [r7, #28]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3728      	adds	r7, #40	; 0x28
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20004a4c 	.word	0x20004a4c
 800afc8:	20004a58 	.word	0x20004a58
 800afcc:	20004a50 	.word	0x20004a50
 800afd0:	20004a44 	.word	0x20004a44
 800afd4:	20004a54 	.word	0x20004a54

0800afd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d04c      	beq.n	800b084 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afea:	2308      	movs	r3, #8
 800afec:	425b      	negs	r3, r3
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4413      	add	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	4b23      	ldr	r3, [pc, #140]	; (800b08c <vPortFree+0xb4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4013      	ands	r3, r2
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10c      	bne.n	800b020 <vPortFree+0x48>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00a:	b672      	cpsid	i
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	b662      	cpsie	i
 800b01a:	60fb      	str	r3, [r7, #12]
}
 800b01c:	bf00      	nop
 800b01e:	e7fe      	b.n	800b01e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00c      	beq.n	800b042 <vPortFree+0x6a>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	b672      	cpsid	i
 800b02e:	f383 8811 	msr	BASEPRI, r3
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	b662      	cpsie	i
 800b03c:	60bb      	str	r3, [r7, #8]
}
 800b03e:	bf00      	nop
 800b040:	e7fe      	b.n	800b040 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	4b11      	ldr	r3, [pc, #68]	; (800b08c <vPortFree+0xb4>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4013      	ands	r3, r2
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d019      	beq.n	800b084 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d115      	bne.n	800b084 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <vPortFree+0xb4>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	43db      	mvns	r3, r3
 800b062:	401a      	ands	r2, r3
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b068:	f7fe fea6 	bl	8009db8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <vPortFree+0xb8>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4413      	add	r3, r2
 800b076:	4a06      	ldr	r2, [pc, #24]	; (800b090 <vPortFree+0xb8>)
 800b078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b07a:	6938      	ldr	r0, [r7, #16]
 800b07c:	f000 f86c 	bl	800b158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b080:	f7fe fea8 	bl	8009dd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b084:	bf00      	nop
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	20004a58 	.word	0x20004a58
 800b090:	20004a50 	.word	0x20004a50

0800b094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b0a0:	4b27      	ldr	r3, [pc, #156]	; (800b140 <prvHeapInit+0xac>)
 800b0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f003 0307 	and.w	r3, r3, #7
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00c      	beq.n	800b0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3307      	adds	r3, #7
 800b0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f023 0307 	bic.w	r3, r3, #7
 800b0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	4a1f      	ldr	r2, [pc, #124]	; (800b140 <prvHeapInit+0xac>)
 800b0c4:	4413      	add	r3, r2
 800b0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0cc:	4a1d      	ldr	r2, [pc, #116]	; (800b144 <prvHeapInit+0xb0>)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0d2:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <prvHeapInit+0xb0>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	4413      	add	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	1a9b      	subs	r3, r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f023 0307 	bic.w	r3, r3, #7
 800b0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4a15      	ldr	r2, [pc, #84]	; (800b148 <prvHeapInit+0xb4>)
 800b0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0f6:	4b14      	ldr	r3, [pc, #80]	; (800b148 <prvHeapInit+0xb4>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0fe:	4b12      	ldr	r3, [pc, #72]	; (800b148 <prvHeapInit+0xb4>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	1ad2      	subs	r2, r2, r3
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b114:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <prvHeapInit+0xb4>)
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	4a0a      	ldr	r2, [pc, #40]	; (800b14c <prvHeapInit+0xb8>)
 800b122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	4a09      	ldr	r2, [pc, #36]	; (800b150 <prvHeapInit+0xbc>)
 800b12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b12c:	4b09      	ldr	r3, [pc, #36]	; (800b154 <prvHeapInit+0xc0>)
 800b12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b132:	601a      	str	r2, [r3, #0]
}
 800b134:	bf00      	nop
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	20000e44 	.word	0x20000e44
 800b144:	20004a44 	.word	0x20004a44
 800b148:	20004a4c 	.word	0x20004a4c
 800b14c:	20004a54 	.word	0x20004a54
 800b150:	20004a50 	.word	0x20004a50
 800b154:	20004a58 	.word	0x20004a58

0800b158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b160:	4b28      	ldr	r3, [pc, #160]	; (800b204 <prvInsertBlockIntoFreeList+0xac>)
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	e002      	b.n	800b16c <prvInsertBlockIntoFreeList+0x14>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	429a      	cmp	r2, r3
 800b174:	d8f7      	bhi.n	800b166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	4413      	add	r3, r2
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	429a      	cmp	r2, r3
 800b186:	d108      	bne.n	800b19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	441a      	add	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	441a      	add	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d118      	bne.n	800b1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4b15      	ldr	r3, [pc, #84]	; (800b208 <prvInsertBlockIntoFreeList+0xb0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d00d      	beq.n	800b1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	441a      	add	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	e008      	b.n	800b1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1d6:	4b0c      	ldr	r3, [pc, #48]	; (800b208 <prvInsertBlockIntoFreeList+0xb0>)
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	e003      	b.n	800b1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d002      	beq.n	800b1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	20004a44 	.word	0x20004a44
 800b208:	20004a4c 	.word	0x20004a4c

0800b20c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	330c      	adds	r3, #12
 800b21c:	461a      	mov	r2, r3
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f001 ffa3 	bl	800d16c <tcpip_send_msg_wait_sem>
 800b226:	4603      	mov	r3, r0
 800b228:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b22a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d103      	bne.n	800b23a <netconn_apimsg+0x2e>
    return apimsg->err;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b238:	e001      	b.n	800b23e <netconn_apimsg+0x32>
  }
  return err;
 800b23a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b08c      	sub	sp, #48	; 0x30
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	603a      	str	r2, [r7, #0]
 800b252:	71fb      	strb	r3, [r7, #7]
 800b254:	460b      	mov	r3, r1
 800b256:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800b258:	79fb      	ldrb	r3, [r7, #7]
 800b25a:	6839      	ldr	r1, [r7, #0]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 feff 	bl	800c060 <netconn_alloc>
 800b262:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d054      	beq.n	800b314 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b26a:	79bb      	ldrb	r3, [r7, #6]
 800b26c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800b26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b270:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b272:	f107 0308 	add.w	r3, r7, #8
 800b276:	4619      	mov	r1, r3
 800b278:	4829      	ldr	r0, [pc, #164]	; (800b320 <netconn_new_with_proto_and_callback+0xd8>)
 800b27a:	f7ff ffc7 	bl	800b20c <netconn_apimsg>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800b284:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d043      	beq.n	800b314 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <netconn_new_with_proto_and_callback+0x58>
 800b294:	4b23      	ldr	r3, [pc, #140]	; (800b324 <netconn_new_with_proto_and_callback+0xdc>)
 800b296:	22a3      	movs	r2, #163	; 0xa3
 800b298:	4923      	ldr	r1, [pc, #140]	; (800b328 <netconn_new_with_proto_and_callback+0xe0>)
 800b29a:	4824      	ldr	r0, [pc, #144]	; (800b32c <netconn_new_with_proto_and_callback+0xe4>)
 800b29c:	f00d fb46 	bl	801892c <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a2:	3310      	adds	r3, #16
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f00c ff24 	bl	80180f2 <sys_mbox_valid>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d105      	bne.n	800b2bc <netconn_new_with_proto_and_callback+0x74>
 800b2b0:	4b1c      	ldr	r3, [pc, #112]	; (800b324 <netconn_new_with_proto_and_callback+0xdc>)
 800b2b2:	22a4      	movs	r2, #164	; 0xa4
 800b2b4:	491e      	ldr	r1, [pc, #120]	; (800b330 <netconn_new_with_proto_and_callback+0xe8>)
 800b2b6:	481d      	ldr	r0, [pc, #116]	; (800b32c <netconn_new_with_proto_and_callback+0xe4>)
 800b2b8:	f00d fb38 	bl	801892c <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	3314      	adds	r3, #20
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f00c ff16 	bl	80180f2 <sys_mbox_valid>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <netconn_new_with_proto_and_callback+0x90>
 800b2cc:	4b15      	ldr	r3, [pc, #84]	; (800b324 <netconn_new_with_proto_and_callback+0xdc>)
 800b2ce:	22a6      	movs	r2, #166	; 0xa6
 800b2d0:	4918      	ldr	r1, [pc, #96]	; (800b334 <netconn_new_with_proto_and_callback+0xec>)
 800b2d2:	4816      	ldr	r0, [pc, #88]	; (800b32c <netconn_new_with_proto_and_callback+0xe4>)
 800b2d4:	f00d fb2a 	bl	801892c <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2da:	330c      	adds	r3, #12
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f00c ff99 	bl	8018214 <sys_sem_valid>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d105      	bne.n	800b2f4 <netconn_new_with_proto_and_callback+0xac>
 800b2e8:	4b0e      	ldr	r3, [pc, #56]	; (800b324 <netconn_new_with_proto_and_callback+0xdc>)
 800b2ea:	22a9      	movs	r2, #169	; 0xa9
 800b2ec:	4912      	ldr	r1, [pc, #72]	; (800b338 <netconn_new_with_proto_and_callback+0xf0>)
 800b2ee:	480f      	ldr	r0, [pc, #60]	; (800b32c <netconn_new_with_proto_and_callback+0xe4>)
 800b2f0:	f00d fb1c 	bl	801892c <printf>
      sys_sem_free(&conn->op_completed);
 800b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f6:	330c      	adds	r3, #12
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f00c ff7e 	bl	80181fa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b300:	3310      	adds	r3, #16
 800b302:	4618      	mov	r0, r3
 800b304:	f00c fe6e 	bl	8017fe4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b30a:	2007      	movs	r0, #7
 800b30c:	f002 fc96 	bl	800dc3c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b310:	2300      	movs	r3, #0
 800b312:	e000      	b.n	800b316 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b316:	4618      	mov	r0, r3
 800b318:	3730      	adds	r7, #48	; 0x30
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	0800c035 	.word	0x0800c035
 800b324:	08020074 	.word	0x08020074
 800b328:	080200a8 	.word	0x080200a8
 800b32c:	080200cc 	.word	0x080200cc
 800b330:	080200f4 	.word	0x080200f4
 800b334:	0802010c 	.word	0x0802010c
 800b338:	08020130 	.word	0x08020130

0800b33c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08c      	sub	sp, #48	; 0x30
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	e014      	b.n	800b378 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b352:	2329      	movs	r3, #41	; 0x29
 800b354:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b356:	f107 030c 	add.w	r3, r7, #12
 800b35a:	4619      	mov	r1, r3
 800b35c:	4808      	ldr	r0, [pc, #32]	; (800b380 <netconn_prepare_delete+0x44>)
 800b35e:	f7ff ff55 	bl	800b20c <netconn_apimsg>
 800b362:	4603      	mov	r3, r0
 800b364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800b368:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <netconn_prepare_delete+0x3a>
    return err;
 800b370:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b374:	e000      	b.n	800b378 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3730      	adds	r7, #48	; 0x30
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	0800c599 	.word	0x0800c599

0800b384 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <netconn_delete+0x12>
    return ERR_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	e00d      	b.n	800b3b2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff ffd0 	bl	800b33c <netconn_prepare_delete>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800b3a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d102      	bne.n	800b3ae <netconn_delete+0x2a>
    netconn_free(conn);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fec7 	bl	800c13c <netconn_free>
  }
  return err;
 800b3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08e      	sub	sp, #56	; 0x38
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d109      	bne.n	800b3e4 <netconn_bind+0x28>
 800b3d0:	4b11      	ldr	r3, [pc, #68]	; (800b418 <netconn_bind+0x5c>)
 800b3d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800b3d6:	4911      	ldr	r1, [pc, #68]	; (800b41c <netconn_bind+0x60>)
 800b3d8:	4811      	ldr	r0, [pc, #68]	; (800b420 <netconn_bind+0x64>)
 800b3da:	f00d faa7 	bl	801892c <printf>
 800b3de:	f06f 030f 	mvn.w	r3, #15
 800b3e2:	e015      	b.n	800b410 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800b3ea:	4b0e      	ldr	r3, [pc, #56]	; (800b424 <netconn_bind+0x68>)
 800b3ec:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b3f6:	88fb      	ldrh	r3, [r7, #6]
 800b3f8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800b3fa:	f107 0314 	add.w	r3, r7, #20
 800b3fe:	4619      	mov	r1, r3
 800b400:	4809      	ldr	r0, [pc, #36]	; (800b428 <netconn_bind+0x6c>)
 800b402:	f7ff ff03 	bl	800b20c <netconn_apimsg>
 800b406:	4603      	mov	r3, r0
 800b408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800b40c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b410:	4618      	mov	r0, r3
 800b412:	3738      	adds	r7, #56	; 0x38
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	08020074 	.word	0x08020074
 800b41c:	080201ac 	.word	0x080201ac
 800b420:	080200cc 	.word	0x080200cc
 800b424:	08023670 	.word	0x08023670
 800b428:	0800c761 	.word	0x0800c761

0800b42c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b43a:	2300      	movs	r3, #0
 800b43c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d109      	bne.n	800b458 <netconn_recv_data+0x2c>
 800b444:	4b58      	ldr	r3, [pc, #352]	; (800b5a8 <netconn_recv_data+0x17c>)
 800b446:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b44a:	4958      	ldr	r1, [pc, #352]	; (800b5ac <netconn_recv_data+0x180>)
 800b44c:	4858      	ldr	r0, [pc, #352]	; (800b5b0 <netconn_recv_data+0x184>)
 800b44e:	f00d fa6d 	bl	801892c <printf>
 800b452:	f06f 030f 	mvn.w	r3, #15
 800b456:	e0a2      	b.n	800b59e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2200      	movs	r2, #0
 800b45c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d109      	bne.n	800b478 <netconn_recv_data+0x4c>
 800b464:	4b50      	ldr	r3, [pc, #320]	; (800b5a8 <netconn_recv_data+0x17c>)
 800b466:	f240 224a 	movw	r2, #586	; 0x24a
 800b46a:	4952      	ldr	r1, [pc, #328]	; (800b5b4 <netconn_recv_data+0x188>)
 800b46c:	4850      	ldr	r0, [pc, #320]	; (800b5b0 <netconn_recv_data+0x184>)
 800b46e:	f00d fa5d 	bl	801892c <printf>
 800b472:	f06f 030f 	mvn.w	r3, #15
 800b476:	e092      	b.n	800b59e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3310      	adds	r3, #16
 800b47c:	4618      	mov	r0, r3
 800b47e:	f00c fe38 	bl	80180f2 <sys_mbox_valid>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10e      	bne.n	800b4a6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f000 fa23 	bl	800b8d4 <netconn_err>
 800b48e:	4603      	mov	r3, r0
 800b490:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b492:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b49a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b49e:	e07e      	b.n	800b59e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b4a0:	f06f 030a 	mvn.w	r3, #10
 800b4a4:	e07b      	b.n	800b59e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	7f1b      	ldrb	r3, [r3, #28]
 800b4aa:	f003 0302 	and.w	r3, r3, #2
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10f      	bne.n	800b4d2 <netconn_recv_data+0xa6>
 800b4b2:	79fb      	ldrb	r3, [r7, #7]
 800b4b4:	f003 0304 	and.w	r3, r3, #4
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	7f1b      	ldrb	r3, [r3, #28]
 800b4c0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d104      	bne.n	800b4d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d023      	beq.n	800b51a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3310      	adds	r3, #16
 800b4d6:	f107 0218 	add.w	r2, r7, #24
 800b4da:	4611      	mov	r1, r2
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f00c fdec 	bl	80180ba <sys_arch_mbox_tryfetch>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e8:	d11f      	bne.n	800b52a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f000 f9f2 	bl	800b8d4 <netconn_err>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b4f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b4fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b500:	e04d      	b.n	800b59e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	7f1b      	ldrb	r3, [r3, #28]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b50e:	f06f 030a 	mvn.w	r3, #10
 800b512:	e044      	b.n	800b59e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b514:	f06f 0306 	mvn.w	r3, #6
 800b518:	e041      	b.n	800b59e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3310      	adds	r3, #16
 800b51e:	f107 0118 	add.w	r1, r7, #24
 800b522:	2200      	movs	r2, #0
 800b524:	4618      	mov	r0, r3
 800b526:	f00c fd89 	bl	801803c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b532:	2b10      	cmp	r3, #16
 800b534:	d117      	bne.n	800b566 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	f107 0217 	add.w	r2, r7, #23
 800b53c:	4611      	mov	r1, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 fa1a 	bl	800b978 <lwip_netconn_is_err_msg>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d009      	beq.n	800b55e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b54a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b54e:	f113 0f0f 	cmn.w	r3, #15
 800b552:	d101      	bne.n	800b558 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	e022      	b.n	800b59e <netconn_recv_data+0x172>
      }
      return err;
 800b558:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b55c:	e01f      	b.n	800b59e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	891b      	ldrh	r3, [r3, #8]
 800b562:	83fb      	strh	r3, [r7, #30]
 800b564:	e00d      	b.n	800b582 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <netconn_recv_data+0x14e>
 800b56c:	4b0e      	ldr	r3, [pc, #56]	; (800b5a8 <netconn_recv_data+0x17c>)
 800b56e:	f240 2291 	movw	r2, #657	; 0x291
 800b572:	4911      	ldr	r1, [pc, #68]	; (800b5b8 <netconn_recv_data+0x18c>)
 800b574:	480e      	ldr	r0, [pc, #56]	; (800b5b0 <netconn_recv_data+0x184>)
 800b576:	f00d f9d9 	bl	801892c <printf>
    len = netbuf_len((struct netbuf *)buf);
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	891b      	ldrh	r3, [r3, #8]
 800b580:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d005      	beq.n	800b596 <netconn_recv_data+0x16a>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	8bfa      	ldrh	r2, [r7, #30]
 800b590:	2101      	movs	r1, #1
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b596:	69ba      	ldr	r2, [r7, #24]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3720      	adds	r7, #32
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	08020074 	.word	0x08020074
 800b5ac:	0802028c 	.word	0x0802028c
 800b5b0:	080200cc 	.word	0x080200cc
 800b5b4:	080202ac 	.word	0x080202ac
 800b5b8:	080202c8 	.word	0x080202c8

0800b5bc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d005      	beq.n	800b5da <netconn_tcp_recvd_msg+0x1e>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5d6:	2b10      	cmp	r3, #16
 800b5d8:	d009      	beq.n	800b5ee <netconn_tcp_recvd_msg+0x32>
 800b5da:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <netconn_tcp_recvd_msg+0x50>)
 800b5dc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b5e0:	490b      	ldr	r1, [pc, #44]	; (800b610 <netconn_tcp_recvd_msg+0x54>)
 800b5e2:	480c      	ldr	r0, [pc, #48]	; (800b614 <netconn_tcp_recvd_msg+0x58>)
 800b5e4:	f00d f9a2 	bl	801892c <printf>
 800b5e8:	f06f 030f 	mvn.w	r3, #15
 800b5ec:	e00a      	b.n	800b604 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	4806      	ldr	r0, [pc, #24]	; (800b618 <netconn_tcp_recvd_msg+0x5c>)
 800b5fe:	f7ff fe05 	bl	800b20c <netconn_apimsg>
 800b602:	4603      	mov	r3, r0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	08020074 	.word	0x08020074
 800b610:	080202d4 	.word	0x080202d4
 800b614:	080200cc 	.word	0x080200cc
 800b618:	0800c86f 	.word	0x0800c86f

0800b61c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b090      	sub	sp, #64	; 0x40
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	4613      	mov	r3, r2
 800b628:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3310      	adds	r3, #16
 800b62e:	4618      	mov	r0, r3
 800b630:	f00c fd5f 	bl	80180f2 <sys_mbox_valid>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d102      	bne.n	800b640 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b63a:	f06f 030a 	mvn.w	r3, #10
 800b63e:	e06d      	b.n	800b71c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	7f1b      	ldrb	r3, [r3, #28]
 800b644:	b25b      	sxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	da07      	bge.n	800b65a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	7f1b      	ldrb	r3, [r3, #28]
 800b64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b652:	b2da      	uxtb	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b658:	e039      	b.n	800b6ce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b65a:	79fb      	ldrb	r3, [r7, #7]
 800b65c:	461a      	mov	r2, r3
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7ff fee3 	bl	800b42c <netconn_recv_data>
 800b666:	4603      	mov	r3, r0
 800b668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b66c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b674:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b678:	e050      	b.n	800b71c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b680:	79fb      	ldrb	r3, [r7, #7]
 800b682:	f003 0308 	and.w	r3, r3, #8
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10e      	bne.n	800b6a8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <netconn_recv_data_tcp+0x7a>
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	891b      	ldrh	r3, [r3, #8]
 800b694:	e000      	b.n	800b698 <netconn_recv_data_tcp+0x7c>
 800b696:	2301      	movs	r3, #1
 800b698:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b69a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b69c:	f107 0214 	add.w	r2, r7, #20
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f7ff ff8a 	bl	800b5bc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d134      	bne.n	800b718 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	f003 0310 	and.w	r3, r3, #16
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d009      	beq.n	800b6cc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	7f1b      	ldrb	r3, [r3, #28]
 800b6bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b6c6:	f06f 0306 	mvn.w	r3, #6
 800b6ca:	e027      	b.n	800b71c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b6cc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d005      	beq.n	800b6e2 <netconn_recv_data_tcp+0xc6>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2101      	movs	r1, #1
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10f      	bne.n	800b70a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f000 f8f2 	bl	800b8d4 <netconn_err>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b6f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <netconn_recv_data_tcp+0xe8>
          return err;
 800b6fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b702:	e00b      	b.n	800b71c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b704:	f06f 030d 	mvn.w	r3, #13
 800b708:	e008      	b.n	800b71c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b70a:	2101      	movs	r1, #1
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 f8b1 	bl	800b874 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b712:	f06f 030e 	mvn.w	r3, #14
 800b716:	e001      	b.n	800b71c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b718:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3740      	adds	r7, #64	; 0x40
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b72e:	2300      	movs	r3, #0
 800b730:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d109      	bne.n	800b74c <netconn_recv+0x28>
 800b738:	4b32      	ldr	r3, [pc, #200]	; (800b804 <netconn_recv+0xe0>)
 800b73a:	f240 3263 	movw	r2, #867	; 0x363
 800b73e:	4932      	ldr	r1, [pc, #200]	; (800b808 <netconn_recv+0xe4>)
 800b740:	4832      	ldr	r0, [pc, #200]	; (800b80c <netconn_recv+0xe8>)
 800b742:	f00d f8f3 	bl	801892c <printf>
 800b746:	f06f 030f 	mvn.w	r3, #15
 800b74a:	e056      	b.n	800b7fa <netconn_recv+0xd6>
  *new_buf = NULL;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2200      	movs	r2, #0
 800b750:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d109      	bne.n	800b76c <netconn_recv+0x48>
 800b758:	4b2a      	ldr	r3, [pc, #168]	; (800b804 <netconn_recv+0xe0>)
 800b75a:	f240 3265 	movw	r2, #869	; 0x365
 800b75e:	492c      	ldr	r1, [pc, #176]	; (800b810 <netconn_recv+0xec>)
 800b760:	482a      	ldr	r0, [pc, #168]	; (800b80c <netconn_recv+0xe8>)
 800b762:	f00d f8e3 	bl	801892c <printf>
 800b766:	f06f 030f 	mvn.w	r3, #15
 800b76a:	e046      	b.n	800b7fa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b774:	2b10      	cmp	r3, #16
 800b776:	d13a      	bne.n	800b7ee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b778:	2300      	movs	r3, #0
 800b77a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b77c:	2006      	movs	r0, #6
 800b77e:	f002 fa0b 	bl	800db98 <memp_malloc>
 800b782:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d102      	bne.n	800b790 <netconn_recv+0x6c>
      return ERR_MEM;
 800b78a:	f04f 33ff 	mov.w	r3, #4294967295
 800b78e:	e034      	b.n	800b7fa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b790:	f107 030c 	add.w	r3, r7, #12
 800b794:	2200      	movs	r2, #0
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff ff3f 	bl	800b61c <netconn_recv_data_tcp>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b7a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d006      	beq.n	800b7b8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800b7aa:	6979      	ldr	r1, [r7, #20]
 800b7ac:	2006      	movs	r0, #6
 800b7ae:	f002 fa45 	bl	800dc3c <memp_free>
      return err;
 800b7b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7b6:	e020      	b.n	800b7fa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <netconn_recv+0xa8>
 800b7be:	4b11      	ldr	r3, [pc, #68]	; (800b804 <netconn_recv+0xe0>)
 800b7c0:	f240 3279 	movw	r2, #889	; 0x379
 800b7c4:	4913      	ldr	r1, [pc, #76]	; (800b814 <netconn_recv+0xf0>)
 800b7c6:	4811      	ldr	r0, [pc, #68]	; (800b80c <netconn_recv+0xe8>)
 800b7c8:	f00d f8b0 	bl	801892c <printf>

    buf->p = p;
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e005      	b.n	800b7fa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fe1a 	bl	800b42c <netconn_recv_data>
 800b7f8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	08020074 	.word	0x08020074
 800b808:	0802028c 	.word	0x0802028c
 800b80c:	080200cc 	.word	0x080200cc
 800b810:	080202ac 	.word	0x080202ac
 800b814:	08020324 	.word	0x08020324

0800b818 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b08c      	sub	sp, #48	; 0x30
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d109      	bne.n	800b83c <netconn_send+0x24>
 800b828:	4b0e      	ldr	r3, [pc, #56]	; (800b864 <netconn_send+0x4c>)
 800b82a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800b82e:	490e      	ldr	r1, [pc, #56]	; (800b868 <netconn_send+0x50>)
 800b830:	480e      	ldr	r0, [pc, #56]	; (800b86c <netconn_send+0x54>)
 800b832:	f00d f87b 	bl	801892c <printf>
 800b836:	f06f 030f 	mvn.w	r3, #15
 800b83a:	e00e      	b.n	800b85a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800b844:	f107 030c 	add.w	r3, r7, #12
 800b848:	4619      	mov	r1, r3
 800b84a:	4809      	ldr	r0, [pc, #36]	; (800b870 <netconn_send+0x58>)
 800b84c:	f7ff fcde 	bl	800b20c <netconn_apimsg>
 800b850:	4603      	mov	r3, r0
 800b852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b856:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3730      	adds	r7, #48	; 0x30
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	08020074 	.word	0x08020074
 800b868:	08020330 	.word	0x08020330
 800b86c:	080200cc 	.word	0x080200cc
 800b870:	0800c7d5 	.word	0x0800c7d5

0800b874 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08c      	sub	sp, #48	; 0x30
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d109      	bne.n	800b89a <netconn_close_shutdown+0x26>
 800b886:	4b0f      	ldr	r3, [pc, #60]	; (800b8c4 <netconn_close_shutdown+0x50>)
 800b888:	f240 4247 	movw	r2, #1095	; 0x447
 800b88c:	490e      	ldr	r1, [pc, #56]	; (800b8c8 <netconn_close_shutdown+0x54>)
 800b88e:	480f      	ldr	r0, [pc, #60]	; (800b8cc <netconn_close_shutdown+0x58>)
 800b890:	f00d f84c 	bl	801892c <printf>
 800b894:	f06f 030f 	mvn.w	r3, #15
 800b898:	e010      	b.n	800b8bc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b89e:	78fb      	ldrb	r3, [r7, #3]
 800b8a0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b8a2:	2329      	movs	r3, #41	; 0x29
 800b8a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b8a6:	f107 030c 	add.w	r3, r7, #12
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4808      	ldr	r0, [pc, #32]	; (800b8d0 <netconn_close_shutdown+0x5c>)
 800b8ae:	f7ff fcad 	bl	800b20c <netconn_apimsg>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b8b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3730      	adds	r7, #48	; 0x30
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	08020074 	.word	0x08020074
 800b8c8:	080203b0 	.word	0x080203b0
 800b8cc:	080200cc 	.word	0x080200cc
 800b8d0:	0800cc71 	.word	0x0800cc71

0800b8d4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <netconn_err+0x12>
    return ERR_OK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e00d      	b.n	800b902 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b8e6:	f00c fd1f 	bl	8018328 <sys_arch_protect>
 800b8ea:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	7a1b      	ldrb	r3, [r3, #8]
 800b8f0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f00c fd23 	bl	8018344 <sys_arch_unprotect>
  return err;
 800b8fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b91a:	f113 0f0d 	cmn.w	r3, #13
 800b91e:	d009      	beq.n	800b934 <lwip_netconn_err_to_msg+0x28>
 800b920:	f113 0f0d 	cmn.w	r3, #13
 800b924:	dc0c      	bgt.n	800b940 <lwip_netconn_err_to_msg+0x34>
 800b926:	f113 0f0f 	cmn.w	r3, #15
 800b92a:	d007      	beq.n	800b93c <lwip_netconn_err_to_msg+0x30>
 800b92c:	f113 0f0e 	cmn.w	r3, #14
 800b930:	d002      	beq.n	800b938 <lwip_netconn_err_to_msg+0x2c>
 800b932:	e005      	b.n	800b940 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b934:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <lwip_netconn_err_to_msg+0x54>)
 800b936:	e00e      	b.n	800b956 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b938:	4b0a      	ldr	r3, [pc, #40]	; (800b964 <lwip_netconn_err_to_msg+0x58>)
 800b93a:	e00c      	b.n	800b956 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b93c:	4b0a      	ldr	r3, [pc, #40]	; (800b968 <lwip_netconn_err_to_msg+0x5c>)
 800b93e:	e00a      	b.n	800b956 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <lwip_netconn_err_to_msg+0x48>
 800b948:	4b08      	ldr	r3, [pc, #32]	; (800b96c <lwip_netconn_err_to_msg+0x60>)
 800b94a:	227d      	movs	r2, #125	; 0x7d
 800b94c:	4908      	ldr	r1, [pc, #32]	; (800b970 <lwip_netconn_err_to_msg+0x64>)
 800b94e:	4809      	ldr	r0, [pc, #36]	; (800b974 <lwip_netconn_err_to_msg+0x68>)
 800b950:	f00c ffec 	bl	801892c <printf>
      return NULL;
 800b954:	2300      	movs	r3, #0
  }
}
 800b956:	4618      	mov	r0, r3
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	0802355c 	.word	0x0802355c
 800b964:	0802355d 	.word	0x0802355d
 800b968:	0802355e 	.word	0x0802355e
 800b96c:	080203cc 	.word	0x080203cc
 800b970:	08020400 	.word	0x08020400
 800b974:	08020410 	.word	0x08020410

0800b978 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d105      	bne.n	800b994 <lwip_netconn_is_err_msg+0x1c>
 800b988:	4b12      	ldr	r3, [pc, #72]	; (800b9d4 <lwip_netconn_is_err_msg+0x5c>)
 800b98a:	2285      	movs	r2, #133	; 0x85
 800b98c:	4912      	ldr	r1, [pc, #72]	; (800b9d8 <lwip_netconn_is_err_msg+0x60>)
 800b98e:	4813      	ldr	r0, [pc, #76]	; (800b9dc <lwip_netconn_is_err_msg+0x64>)
 800b990:	f00c ffcc 	bl	801892c <printf>

  if (msg == &netconn_aborted) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a12      	ldr	r2, [pc, #72]	; (800b9e0 <lwip_netconn_is_err_msg+0x68>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d104      	bne.n	800b9a6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	22f3      	movs	r2, #243	; 0xf3
 800b9a0:	701a      	strb	r2, [r3, #0]
    return 1;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e012      	b.n	800b9cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a0e      	ldr	r2, [pc, #56]	; (800b9e4 <lwip_netconn_is_err_msg+0x6c>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d104      	bne.n	800b9b8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	22f2      	movs	r2, #242	; 0xf2
 800b9b2:	701a      	strb	r2, [r3, #0]
    return 1;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e009      	b.n	800b9cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a0b      	ldr	r2, [pc, #44]	; (800b9e8 <lwip_netconn_is_err_msg+0x70>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d104      	bne.n	800b9ca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	22f1      	movs	r2, #241	; 0xf1
 800b9c4:	701a      	strb	r2, [r3, #0]
    return 1;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e000      	b.n	800b9cc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	080203cc 	.word	0x080203cc
 800b9d8:	08020438 	.word	0x08020438
 800b9dc:	08020410 	.word	0x08020410
 800b9e0:	0802355c 	.word	0x0802355c
 800b9e4:	0802355d 	.word	0x0802355d
 800b9e8:	0802355e 	.word	0x0802355e

0800b9ec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <recv_udp+0x20>
 800ba00:	4b34      	ldr	r3, [pc, #208]	; (800bad4 <recv_udp+0xe8>)
 800ba02:	22e5      	movs	r2, #229	; 0xe5
 800ba04:	4934      	ldr	r1, [pc, #208]	; (800bad8 <recv_udp+0xec>)
 800ba06:	4835      	ldr	r0, [pc, #212]	; (800badc <recv_udp+0xf0>)
 800ba08:	f00c ff90 	bl	801892c <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d105      	bne.n	800ba1e <recv_udp+0x32>
 800ba12:	4b30      	ldr	r3, [pc, #192]	; (800bad4 <recv_udp+0xe8>)
 800ba14:	22e6      	movs	r2, #230	; 0xe6
 800ba16:	4932      	ldr	r1, [pc, #200]	; (800bae0 <recv_udp+0xf4>)
 800ba18:	4830      	ldr	r0, [pc, #192]	; (800badc <recv_udp+0xf0>)
 800ba1a:	f00c ff87 	bl	801892c <printf>
  conn = (struct netconn *)arg;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d103      	bne.n	800ba30 <recv_udp+0x44>
    pbuf_free(p);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f002 ff33 	bl	800e894 <pbuf_free>
    return;
 800ba2e:	e04d      	b.n	800bacc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d005      	beq.n	800ba46 <recv_udp+0x5a>
 800ba3a:	4b26      	ldr	r3, [pc, #152]	; (800bad4 <recv_udp+0xe8>)
 800ba3c:	22ee      	movs	r2, #238	; 0xee
 800ba3e:	4929      	ldr	r1, [pc, #164]	; (800bae4 <recv_udp+0xf8>)
 800ba40:	4826      	ldr	r0, [pc, #152]	; (800badc <recv_udp+0xf0>)
 800ba42:	f00c ff73 	bl	801892c <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	3310      	adds	r3, #16
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f00c fb51 	bl	80180f2 <sys_mbox_valid>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d103      	bne.n	800ba5e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f002 ff1c 	bl	800e894 <pbuf_free>
    return;
 800ba5c:	e036      	b.n	800bacc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ba5e:	2006      	movs	r0, #6
 800ba60:	f002 f89a 	bl	800db98 <memp_malloc>
 800ba64:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d103      	bne.n	800ba74 <recv_udp+0x88>
    pbuf_free(p);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f002 ff11 	bl	800e894 <pbuf_free>
    return;
 800ba72:	e02b      	b.n	800bacc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <recv_udp+0xa0>
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	e000      	b.n	800ba8e <recv_udp+0xa2>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	69ba      	ldr	r2, [r7, #24]
 800ba90:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ba96:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	891b      	ldrh	r3, [r3, #8]
 800ba9c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	3310      	adds	r3, #16
 800baa2:	69b9      	ldr	r1, [r7, #24]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f00c faaf 	bl	8018008 <sys_mbox_trypost>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800bab0:	69b8      	ldr	r0, [r7, #24]
 800bab2:	f001 f969 	bl	800cd88 <netbuf_delete>
    return;
 800bab6:	e009      	b.n	800bacc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <recv_udp+0xe0>
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac4:	8afa      	ldrh	r2, [r7, #22]
 800bac6:	2100      	movs	r1, #0
 800bac8:	69f8      	ldr	r0, [r7, #28]
 800baca:	4798      	blx	r3
  }
}
 800bacc:	3720      	adds	r7, #32
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	080203cc 	.word	0x080203cc
 800bad8:	08020444 	.word	0x08020444
 800badc:	08020410 	.word	0x08020410
 800bae0:	08020468 	.word	0x08020468
 800bae4:	08020488 	.word	0x08020488

0800bae8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d106      	bne.n	800bb0a <recv_tcp+0x22>
 800bafc:	4b36      	ldr	r3, [pc, #216]	; (800bbd8 <recv_tcp+0xf0>)
 800bafe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bb02:	4936      	ldr	r1, [pc, #216]	; (800bbdc <recv_tcp+0xf4>)
 800bb04:	4836      	ldr	r0, [pc, #216]	; (800bbe0 <recv_tcp+0xf8>)
 800bb06:	f00c ff11 	bl	801892c <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d106      	bne.n	800bb1e <recv_tcp+0x36>
 800bb10:	4b31      	ldr	r3, [pc, #196]	; (800bbd8 <recv_tcp+0xf0>)
 800bb12:	f240 122d 	movw	r2, #301	; 0x12d
 800bb16:	4933      	ldr	r1, [pc, #204]	; (800bbe4 <recv_tcp+0xfc>)
 800bb18:	4831      	ldr	r0, [pc, #196]	; (800bbe0 <recv_tcp+0xf8>)
 800bb1a:	f00c ff07 	bl	801892c <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800bb1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d006      	beq.n	800bb34 <recv_tcp+0x4c>
 800bb26:	4b2c      	ldr	r3, [pc, #176]	; (800bbd8 <recv_tcp+0xf0>)
 800bb28:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800bb2c:	492e      	ldr	r1, [pc, #184]	; (800bbe8 <recv_tcp+0x100>)
 800bb2e:	482c      	ldr	r0, [pc, #176]	; (800bbe0 <recv_tcp+0xf8>)
 800bb30:	f00c fefc 	bl	801892c <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d102      	bne.n	800bb44 <recv_tcp+0x5c>
    return ERR_VAL;
 800bb3e:	f06f 0305 	mvn.w	r3, #5
 800bb42:	e045      	b.n	800bbd0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d006      	beq.n	800bb5c <recv_tcp+0x74>
 800bb4e:	4b22      	ldr	r3, [pc, #136]	; (800bbd8 <recv_tcp+0xf0>)
 800bb50:	f240 1235 	movw	r2, #309	; 0x135
 800bb54:	4925      	ldr	r1, [pc, #148]	; (800bbec <recv_tcp+0x104>)
 800bb56:	4822      	ldr	r0, [pc, #136]	; (800bbe0 <recv_tcp+0xf8>)
 800bb58:	f00c fee8 	bl	801892c <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	3310      	adds	r3, #16
 800bb60:	4618      	mov	r0, r3
 800bb62:	f00c fac6 	bl	80180f2 <sys_mbox_valid>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10d      	bne.n	800bb88 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d008      	beq.n	800bb84 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	4619      	mov	r1, r3
 800bb78:	68b8      	ldr	r0, [r7, #8]
 800bb7a:	f003 fd89 	bl	800f690 <tcp_recved>
      pbuf_free(p);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f002 fe88 	bl	800e894 <pbuf_free>
    }
    return ERR_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	e023      	b.n	800bbd0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d005      	beq.n	800bb9a <recv_tcp+0xb2>
    msg = p;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	891b      	ldrh	r3, [r3, #8]
 800bb96:	83fb      	strh	r3, [r7, #30]
 800bb98:	e003      	b.n	800bba2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800bb9a:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <recv_tcp+0x108>)
 800bb9c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	3310      	adds	r3, #16
 800bba6:	69b9      	ldr	r1, [r7, #24]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f00c fa2d 	bl	8018008 <sys_mbox_trypost>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800bbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb8:	e00a      	b.n	800bbd0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d005      	beq.n	800bbce <recv_tcp+0xe6>
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	8bfa      	ldrh	r2, [r7, #30]
 800bbc8:	2100      	movs	r1, #0
 800bbca:	6978      	ldr	r0, [r7, #20]
 800bbcc:	4798      	blx	r3
  }

  return ERR_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3720      	adds	r7, #32
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	080203cc 	.word	0x080203cc
 800bbdc:	080204a8 	.word	0x080204a8
 800bbe0:	08020410 	.word	0x08020410
 800bbe4:	080204cc 	.word	0x080204cc
 800bbe8:	080204ec 	.word	0x080204ec
 800bbec:	08020504 	.word	0x08020504
 800bbf0:	0802355e 	.word	0x0802355e

0800bbf4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d106      	bne.n	800bc16 <poll_tcp+0x22>
 800bc08:	4b29      	ldr	r3, [pc, #164]	; (800bcb0 <poll_tcp+0xbc>)
 800bc0a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bc0e:	4929      	ldr	r1, [pc, #164]	; (800bcb4 <poll_tcp+0xc0>)
 800bc10:	4829      	ldr	r0, [pc, #164]	; (800bcb8 <poll_tcp+0xc4>)
 800bc12:	f00c fe8b 	bl	801892c <printf>

  if (conn->state == NETCONN_WRITE) {
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	785b      	ldrb	r3, [r3, #1]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d104      	bne.n	800bc28 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bc1e:	2101      	movs	r1, #1
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f000 fe59 	bl	800c8d8 <lwip_netconn_do_writemore>
 800bc26:	e016      	b.n	800bc56 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	785b      	ldrb	r3, [r3, #1]
 800bc2c:	2b04      	cmp	r3, #4
 800bc2e:	d112      	bne.n	800bc56 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00a      	beq.n	800bc4e <poll_tcp+0x5a>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6a1b      	ldr	r3, [r3, #32]
 800bc3c:	7a5b      	ldrb	r3, [r3, #9]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d005      	beq.n	800bc4e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	7a5a      	ldrb	r2, [r3, #9]
 800bc48:	3a01      	subs	r2, #1
 800bc4a:	b2d2      	uxtb	r2, r2
 800bc4c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bc4e:	2101      	movs	r1, #1
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f000 fb3b 	bl	800c2cc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	7f1b      	ldrb	r3, [r3, #28]
 800bc5a:	f003 0310 	and.w	r3, r3, #16
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d021      	beq.n	800bca6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d01d      	beq.n	800bca6 <poll_tcp+0xb2>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bc72:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bc76:	d316      	bcc.n	800bca6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bc80:	2b04      	cmp	r3, #4
 800bc82:	d810      	bhi.n	800bca6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	7f1b      	ldrb	r3, [r3, #28]
 800bc88:	f023 0310 	bic.w	r3, r3, #16
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <poll_tcp+0xb2>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2102      	movs	r1, #2
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	080203cc 	.word	0x080203cc
 800bcb4:	08020524 	.word	0x08020524
 800bcb8:	08020410 	.word	0x08020410

0800bcbc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d106      	bne.n	800bce2 <sent_tcp+0x26>
 800bcd4:	4b20      	ldr	r3, [pc, #128]	; (800bd58 <sent_tcp+0x9c>)
 800bcd6:	f240 1293 	movw	r2, #403	; 0x193
 800bcda:	4920      	ldr	r1, [pc, #128]	; (800bd5c <sent_tcp+0xa0>)
 800bcdc:	4820      	ldr	r0, [pc, #128]	; (800bd60 <sent_tcp+0xa4>)
 800bcde:	f00c fe25 	bl	801892c <printf>

  if (conn) {
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d032      	beq.n	800bd4e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	785b      	ldrb	r3, [r3, #1]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d104      	bne.n	800bcfa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	6978      	ldr	r0, [r7, #20]
 800bcf4:	f000 fdf0 	bl	800c8d8 <lwip_netconn_do_writemore>
 800bcf8:	e007      	b.n	800bd0a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	785b      	ldrb	r3, [r3, #1]
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d103      	bne.n	800bd0a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bd02:	2101      	movs	r1, #1
 800bd04:	6978      	ldr	r0, [r7, #20]
 800bd06:	f000 fae1 	bl	800c2cc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d01d      	beq.n	800bd4e <sent_tcp+0x92>
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bd1a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bd1e:	d316      	bcc.n	800bd4e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bd28:	2b04      	cmp	r3, #4
 800bd2a:	d810      	bhi.n	800bd4e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	7f1b      	ldrb	r3, [r3, #28]
 800bd30:	f023 0310 	bic.w	r3, r3, #16
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <sent_tcp+0x92>
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd46:	88fa      	ldrh	r2, [r7, #6]
 800bd48:	2102      	movs	r1, #2
 800bd4a:	6978      	ldr	r0, [r7, #20]
 800bd4c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	080203cc 	.word	0x080203cc
 800bd5c:	08020524 	.word	0x08020524
 800bd60:	08020410 	.word	0x08020410

0800bd64 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d106      	bne.n	800bd88 <err_tcp+0x24>
 800bd7a:	4b5f      	ldr	r3, [pc, #380]	; (800bef8 <err_tcp+0x194>)
 800bd7c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800bd80:	495e      	ldr	r1, [pc, #376]	; (800befc <err_tcp+0x198>)
 800bd82:	485f      	ldr	r0, [pc, #380]	; (800bf00 <err_tcp+0x19c>)
 800bd84:	f00c fdd2 	bl	801892c <printf>

  SYS_ARCH_PROTECT(lev);
 800bd88:	f00c face 	bl	8018328 <sys_arch_protect>
 800bd8c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	2200      	movs	r2, #0
 800bd92:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	78fa      	ldrb	r2, [r7, #3]
 800bd98:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	7f1b      	ldrb	r3, [r3, #28]
 800bd9e:	f043 0301 	orr.w	r3, r3, #1
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	785b      	ldrb	r3, [r3, #1]
 800bdac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800bdb4:	69b8      	ldr	r0, [r7, #24]
 800bdb6:	f00c fac5 	bl	8018344 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d005      	beq.n	800bdce <err_tcp+0x6a>
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2104      	movs	r1, #4
 800bdca:	69f8      	ldr	r0, [r7, #28]
 800bdcc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d005      	beq.n	800bde2 <err_tcp+0x7e>
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdda:	2200      	movs	r2, #0
 800bddc:	2100      	movs	r1, #0
 800bdde:	69f8      	ldr	r0, [r7, #28]
 800bde0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d005      	beq.n	800bdf6 <err_tcp+0x92>
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2102      	movs	r1, #2
 800bdf2:	69f8      	ldr	r0, [r7, #28]
 800bdf4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800bdf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff fd86 	bl	800b90c <lwip_netconn_err_to_msg>
 800be00:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	3310      	adds	r3, #16
 800be06:	4618      	mov	r0, r3
 800be08:	f00c f973 	bl	80180f2 <sys_mbox_valid>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d005      	beq.n	800be1e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	3310      	adds	r3, #16
 800be16:	6939      	ldr	r1, [r7, #16]
 800be18:	4618      	mov	r0, r3
 800be1a:	f00c f8f5 	bl	8018008 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	3314      	adds	r3, #20
 800be22:	4618      	mov	r0, r3
 800be24:	f00c f965 	bl	80180f2 <sys_mbox_valid>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d005      	beq.n	800be3a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	3314      	adds	r3, #20
 800be32:	6939      	ldr	r1, [r7, #16]
 800be34:	4618      	mov	r0, r3
 800be36:	f00c f8e7 	bl	8018008 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d005      	beq.n	800be4c <err_tcp+0xe8>
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	2b04      	cmp	r3, #4
 800be44:	d002      	beq.n	800be4c <err_tcp+0xe8>
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d143      	bne.n	800bed4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	7f1b      	ldrb	r3, [r3, #28]
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b00      	cmp	r3, #0
 800be56:	bf14      	ite	ne
 800be58:	2301      	movne	r3, #1
 800be5a:	2300      	moveq	r3, #0
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	7f1b      	ldrb	r3, [r3, #28]
 800be64:	f023 0304 	bic.w	r3, r3, #4
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d13b      	bne.n	800beec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	6a1b      	ldr	r3, [r3, #32]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d106      	bne.n	800be8a <err_tcp+0x126>
 800be7c:	4b1e      	ldr	r3, [pc, #120]	; (800bef8 <err_tcp+0x194>)
 800be7e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800be82:	4920      	ldr	r1, [pc, #128]	; (800bf04 <err_tcp+0x1a0>)
 800be84:	481e      	ldr	r0, [pc, #120]	; (800bf00 <err_tcp+0x19c>)
 800be86:	f00c fd51 	bl	801892c <printf>
      if (old_state == NETCONN_CLOSE) {
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d104      	bne.n	800be9a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	6a1b      	ldr	r3, [r3, #32]
 800be94:	2200      	movs	r2, #0
 800be96:	711a      	strb	r2, [r3, #4]
 800be98:	e003      	b.n	800bea2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	78fa      	ldrb	r2, [r7, #3]
 800bea0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	330c      	adds	r3, #12
 800beaa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800beac:	68b8      	ldr	r0, [r7, #8]
 800beae:	f00c f9b1 	bl	8018214 <sys_sem_valid>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d106      	bne.n	800bec6 <err_tcp+0x162>
 800beb8:	4b0f      	ldr	r3, [pc, #60]	; (800bef8 <err_tcp+0x194>)
 800beba:	f240 12ef 	movw	r2, #495	; 0x1ef
 800bebe:	4912      	ldr	r1, [pc, #72]	; (800bf08 <err_tcp+0x1a4>)
 800bec0:	480f      	ldr	r0, [pc, #60]	; (800bf00 <err_tcp+0x19c>)
 800bec2:	f00c fd33 	bl	801892c <printf>
      conn->current_msg = NULL;
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	2200      	movs	r2, #0
 800beca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800becc:	68b8      	ldr	r0, [r7, #8]
 800bece:	f00c f987 	bl	80181e0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800bed2:	e00b      	b.n	800beec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	6a1b      	ldr	r3, [r3, #32]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d008      	beq.n	800beee <err_tcp+0x18a>
 800bedc:	4b06      	ldr	r3, [pc, #24]	; (800bef8 <err_tcp+0x194>)
 800bede:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bee2:	490a      	ldr	r1, [pc, #40]	; (800bf0c <err_tcp+0x1a8>)
 800bee4:	4806      	ldr	r0, [pc, #24]	; (800bf00 <err_tcp+0x19c>)
 800bee6:	f00c fd21 	bl	801892c <printf>
  }
}
 800beea:	e000      	b.n	800beee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800beec:	bf00      	nop
}
 800beee:	bf00      	nop
 800bef0:	3720      	adds	r7, #32
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	080203cc 	.word	0x080203cc
 800befc:	08020524 	.word	0x08020524
 800bf00:	08020410 	.word	0x08020410
 800bf04:	08020534 	.word	0x08020534
 800bf08:	08020550 	.word	0x08020550
 800bf0c:	0802056c 	.word	0x0802056c

0800bf10 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f004 fa7b 	bl	801041c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800bf26:	490a      	ldr	r1, [pc, #40]	; (800bf50 <setup_tcp+0x40>)
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f004 fa89 	bl	8010440 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800bf2e:	4909      	ldr	r1, [pc, #36]	; (800bf54 <setup_tcp+0x44>)
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f004 faa7 	bl	8010484 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800bf36:	2202      	movs	r2, #2
 800bf38:	4907      	ldr	r1, [pc, #28]	; (800bf58 <setup_tcp+0x48>)
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f004 fafe 	bl	801053c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800bf40:	4906      	ldr	r1, [pc, #24]	; (800bf5c <setup_tcp+0x4c>)
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f004 fac0 	bl	80104c8 <tcp_err>
}
 800bf48:	bf00      	nop
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	0800bae9 	.word	0x0800bae9
 800bf54:	0800bcbd 	.word	0x0800bcbd
 800bf58:	0800bbf5 	.word	0x0800bbf5
 800bf5c:	0800bd65 	.word	0x0800bd65

0800bf60 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800bf60:	b590      	push	{r4, r7, lr}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d006      	beq.n	800bf84 <pcb_new+0x24>
 800bf76:	4b2b      	ldr	r3, [pc, #172]	; (800c024 <pcb_new+0xc4>)
 800bf78:	f240 2265 	movw	r2, #613	; 0x265
 800bf7c:	492a      	ldr	r1, [pc, #168]	; (800c028 <pcb_new+0xc8>)
 800bf7e:	482b      	ldr	r0, [pc, #172]	; (800c02c <pcb_new+0xcc>)
 800bf80:	f00c fcd4 	bl	801892c <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf8e:	2b10      	cmp	r3, #16
 800bf90:	d022      	beq.n	800bfd8 <pcb_new+0x78>
 800bf92:	2b20      	cmp	r3, #32
 800bf94:	d133      	bne.n	800bffe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681c      	ldr	r4, [r3, #0]
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f009 fd02 	bl	80159a6 <udp_new_ip_type>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d02a      	beq.n	800c006 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b22      	cmp	r3, #34	; 0x22
 800bfb8:	d104      	bne.n	800bfc4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6858      	ldr	r0, [r3, #4]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	4917      	ldr	r1, [pc, #92]	; (800c030 <pcb_new+0xd0>)
 800bfd2:	f009 fc6f 	bl	80158b4 <udp_recv>
      }
      break;
 800bfd6:	e016      	b.n	800c006 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681c      	ldr	r4, [r3, #0]
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f004 fa0e 	bl	8010400 <tcp_new_ip_type>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00b      	beq.n	800c00a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff ff8a 	bl	800bf10 <setup_tcp>
      }
      break;
 800bffc:	e005      	b.n	800c00a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	22fa      	movs	r2, #250	; 0xfa
 800c002:	711a      	strb	r2, [r3, #4]
      return;
 800c004:	e00a      	b.n	800c01c <pcb_new+0xbc>
      break;
 800c006:	bf00      	nop
 800c008:	e000      	b.n	800c00c <pcb_new+0xac>
      break;
 800c00a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d102      	bne.n	800c01c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	22ff      	movs	r2, #255	; 0xff
 800c01a:	711a      	strb	r2, [r3, #4]
  }
}
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd90      	pop	{r4, r7, pc}
 800c022:	bf00      	nop
 800c024:	080203cc 	.word	0x080203cc
 800c028:	080205b0 	.word	0x080205b0
 800c02c:	08020410 	.word	0x08020410
 800c030:	0800b9ed 	.word	0x0800b9ed

0800c034 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d102      	bne.n	800c056 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f7ff ff85 	bl	800bf60 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800c056:	bf00      	nop
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	6039      	str	r1, [r7, #0]
 800c06a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c070:	2007      	movs	r0, #7
 800c072:	f001 fd91 	bl	800db98 <memp_malloc>
 800c076:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <netconn_alloc+0x22>
    return NULL;
 800c07e:	2300      	movs	r3, #0
 800c080:	e052      	b.n	800c128 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2200      	movs	r2, #0
 800c086:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	79fa      	ldrb	r2, [r7, #7]
 800c08c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800c094:	79fb      	ldrb	r3, [r7, #7]
 800c096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c09a:	2b10      	cmp	r3, #16
 800c09c:	d004      	beq.n	800c0a8 <netconn_alloc+0x48>
 800c09e:	2b20      	cmp	r3, #32
 800c0a0:	d105      	bne.n	800c0ae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800c0a2:	2306      	movs	r3, #6
 800c0a4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c0a6:	e00a      	b.n	800c0be <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800c0a8:	2306      	movs	r3, #6
 800c0aa:	617b      	str	r3, [r7, #20]
      break;
 800c0ac:	e007      	b.n	800c0be <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800c0ae:	4b20      	ldr	r3, [pc, #128]	; (800c130 <netconn_alloc+0xd0>)
 800c0b0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800c0b4:	491f      	ldr	r1, [pc, #124]	; (800c134 <netconn_alloc+0xd4>)
 800c0b6:	4820      	ldr	r0, [pc, #128]	; (800c138 <netconn_alloc+0xd8>)
 800c0b8:	f00c fc38 	bl	801892c <printf>
      goto free_and_return;
 800c0bc:	e02f      	b.n	800c11e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3310      	adds	r3, #16
 800c0c2:	6979      	ldr	r1, [r7, #20]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f00b ff6b 	bl	8017fa0 <sys_mbox_new>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d125      	bne.n	800c11c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	330c      	adds	r3, #12
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f00c f829 	bl	801812e <sys_sem_new>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d005      	beq.n	800c0ee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	3310      	adds	r3, #16
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f00b ff7c 	bl	8017fe4 <sys_mbox_free>
    goto free_and_return;
 800c0ec:	e017      	b.n	800c11e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3314      	adds	r3, #20
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f00c f80e 	bl	8018114 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f04f 32ff 	mov.w	r2, #4294967295
 800c104:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	7cfa      	ldrb	r2, [r7, #19]
 800c116:	771a      	strb	r2, [r3, #28]
  return conn;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	e005      	b.n	800c128 <netconn_alloc+0xc8>
    goto free_and_return;
 800c11c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800c11e:	68f9      	ldr	r1, [r7, #12]
 800c120:	2007      	movs	r0, #7
 800c122:	f001 fd8b 	bl	800dc3c <memp_free>
  return NULL;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	080203cc 	.word	0x080203cc
 800c134:	080205d0 	.word	0x080205d0
 800c138:	08020410 	.word	0x08020410

0800c13c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d006      	beq.n	800c15a <netconn_free+0x1e>
 800c14c:	4b1b      	ldr	r3, [pc, #108]	; (800c1bc <netconn_free+0x80>)
 800c14e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c152:	491b      	ldr	r1, [pc, #108]	; (800c1c0 <netconn_free+0x84>)
 800c154:	481b      	ldr	r0, [pc, #108]	; (800c1c4 <netconn_free+0x88>)
 800c156:	f00c fbe9 	bl	801892c <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	3310      	adds	r3, #16
 800c15e:	4618      	mov	r0, r3
 800c160:	f00b ffc7 	bl	80180f2 <sys_mbox_valid>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d006      	beq.n	800c178 <netconn_free+0x3c>
 800c16a:	4b14      	ldr	r3, [pc, #80]	; (800c1bc <netconn_free+0x80>)
 800c16c:	f240 3223 	movw	r2, #803	; 0x323
 800c170:	4915      	ldr	r1, [pc, #84]	; (800c1c8 <netconn_free+0x8c>)
 800c172:	4814      	ldr	r0, [pc, #80]	; (800c1c4 <netconn_free+0x88>)
 800c174:	f00c fbda 	bl	801892c <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3314      	adds	r3, #20
 800c17c:	4618      	mov	r0, r3
 800c17e:	f00b ffb8 	bl	80180f2 <sys_mbox_valid>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d006      	beq.n	800c196 <netconn_free+0x5a>
 800c188:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <netconn_free+0x80>)
 800c18a:	f240 3226 	movw	r2, #806	; 0x326
 800c18e:	490f      	ldr	r1, [pc, #60]	; (800c1cc <netconn_free+0x90>)
 800c190:	480c      	ldr	r0, [pc, #48]	; (800c1c4 <netconn_free+0x88>)
 800c192:	f00c fbcb 	bl	801892c <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	330c      	adds	r3, #12
 800c19a:	4618      	mov	r0, r3
 800c19c:	f00c f82d 	bl	80181fa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	330c      	adds	r3, #12
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f00c f846 	bl	8018236 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	2007      	movs	r0, #7
 800c1ae:	f001 fd45 	bl	800dc3c <memp_free>
}
 800c1b2:	bf00      	nop
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	080203cc 	.word	0x080203cc
 800c1c0:	080205f8 	.word	0x080205f8
 800c1c4:	08020410 	.word	0x08020410
 800c1c8:	08020628 	.word	0x08020628
 800c1cc:	08020664 	.word	0x08020664

0800c1d0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3310      	adds	r3, #16
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f00b ff88 	bl	80180f2 <sys_mbox_valid>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d02f      	beq.n	800c248 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c1e8:	e018      	b.n	800c21c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1f2:	2b10      	cmp	r3, #16
 800c1f4:	d10e      	bne.n	800c214 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	f107 020f 	add.w	r2, r7, #15
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff fbba 	bl	800b978 <lwip_netconn_is_err_msg>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d108      	bne.n	800c21c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f002 fb41 	bl	800e894 <pbuf_free>
 800c212:	e003      	b.n	800c21c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	4618      	mov	r0, r3
 800c218:	f000 fdb6 	bl	800cd88 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3310      	adds	r3, #16
 800c220:	f107 0210 	add.w	r2, r7, #16
 800c224:	4611      	mov	r1, r2
 800c226:	4618      	mov	r0, r3
 800c228:	f00b ff47 	bl	80180ba <sys_arch_mbox_tryfetch>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c232:	d1da      	bne.n	800c1ea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3310      	adds	r3, #16
 800c238:	4618      	mov	r0, r3
 800c23a:	f00b fed3 	bl	8017fe4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3310      	adds	r3, #16
 800c242:	4618      	mov	r0, r3
 800c244:	f00b ff66 	bl	8018114 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3314      	adds	r3, #20
 800c24c:	4618      	mov	r0, r3
 800c24e:	f00b ff50 	bl	80180f2 <sys_mbox_valid>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d034      	beq.n	800c2c2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c258:	e01d      	b.n	800c296 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	f107 020e 	add.w	r2, r7, #14
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff fb88 	bl	800b978 <lwip_netconn_is_err_msg>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d113      	bne.n	800c296 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c272:	6978      	ldr	r0, [r7, #20]
 800c274:	f7ff ffac 	bl	800c1d0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d007      	beq.n	800c290 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	f003 f905 	bl	800f494 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2200      	movs	r2, #0
 800c28e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c290:	6978      	ldr	r0, [r7, #20]
 800c292:	f7ff ff53 	bl	800c13c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3314      	adds	r3, #20
 800c29a:	f107 0210 	add.w	r2, r7, #16
 800c29e:	4611      	mov	r1, r2
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f00b ff0a 	bl	80180ba <sys_arch_mbox_tryfetch>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d1d5      	bne.n	800c25a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	3314      	adds	r3, #20
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f00b fe96 	bl	8017fe4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	3314      	adds	r3, #20
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f00b ff29 	bl	8018114 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c2c2:	bf00      	nop
 800c2c4:	3718      	adds	r7, #24
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d106      	bne.n	800c2f0 <lwip_netconn_do_close_internal+0x24>
 800c2e2:	4ba1      	ldr	r3, [pc, #644]	; (800c568 <lwip_netconn_do_close_internal+0x29c>)
 800c2e4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c2e8:	49a0      	ldr	r1, [pc, #640]	; (800c56c <lwip_netconn_do_close_internal+0x2a0>)
 800c2ea:	48a1      	ldr	r0, [pc, #644]	; (800c570 <lwip_netconn_do_close_internal+0x2a4>)
 800c2ec:	f00c fb1e 	bl	801892c <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2f8:	2b10      	cmp	r3, #16
 800c2fa:	d006      	beq.n	800c30a <lwip_netconn_do_close_internal+0x3e>
 800c2fc:	4b9a      	ldr	r3, [pc, #616]	; (800c568 <lwip_netconn_do_close_internal+0x29c>)
 800c2fe:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c302:	499c      	ldr	r1, [pc, #624]	; (800c574 <lwip_netconn_do_close_internal+0x2a8>)
 800c304:	489a      	ldr	r0, [pc, #616]	; (800c570 <lwip_netconn_do_close_internal+0x2a4>)
 800c306:	f00c fb11 	bl	801892c <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	785b      	ldrb	r3, [r3, #1]
 800c30e:	2b04      	cmp	r3, #4
 800c310:	d006      	beq.n	800c320 <lwip_netconn_do_close_internal+0x54>
 800c312:	4b95      	ldr	r3, [pc, #596]	; (800c568 <lwip_netconn_do_close_internal+0x29c>)
 800c314:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c318:	4997      	ldr	r1, [pc, #604]	; (800c578 <lwip_netconn_do_close_internal+0x2ac>)
 800c31a:	4895      	ldr	r0, [pc, #596]	; (800c570 <lwip_netconn_do_close_internal+0x2a4>)
 800c31c:	f00c fb06 	bl	801892c <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d106      	bne.n	800c336 <lwip_netconn_do_close_internal+0x6a>
 800c328:	4b8f      	ldr	r3, [pc, #572]	; (800c568 <lwip_netconn_do_close_internal+0x29c>)
 800c32a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c32e:	4993      	ldr	r1, [pc, #588]	; (800c57c <lwip_netconn_do_close_internal+0x2b0>)
 800c330:	488f      	ldr	r0, [pc, #572]	; (800c570 <lwip_netconn_do_close_internal+0x2a4>)
 800c332:	f00c fafb 	bl	801892c <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d106      	bne.n	800c34c <lwip_netconn_do_close_internal+0x80>
 800c33e:	4b8a      	ldr	r3, [pc, #552]	; (800c568 <lwip_netconn_do_close_internal+0x29c>)
 800c340:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c344:	498e      	ldr	r1, [pc, #568]	; (800c580 <lwip_netconn_do_close_internal+0x2b4>)
 800c346:	488a      	ldr	r0, [pc, #552]	; (800c570 <lwip_netconn_do_close_internal+0x2a4>)
 800c348:	f00c faf0 	bl	801892c <printf>

  tpcb = conn->pcb.tcp;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	7a1b      	ldrb	r3, [r3, #8]
 800c358:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	f003 0302 	and.w	r3, r3, #2
 800c368:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d102      	bne.n	800c376 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c370:	2301      	movs	r3, #1
 800c372:	75bb      	strb	r3, [r7, #22]
 800c374:	e01f      	b.n	800c3b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c376:	7bbb      	ldrb	r3, [r7, #14]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00e      	beq.n	800c39a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c380:	2b05      	cmp	r3, #5
 800c382:	d007      	beq.n	800c394 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c388:	2b06      	cmp	r3, #6
 800c38a:	d003      	beq.n	800c394 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c390:	2b08      	cmp	r3, #8
 800c392:	d102      	bne.n	800c39a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c394:	2301      	movs	r3, #1
 800c396:	75bb      	strb	r3, [r7, #22]
 800c398:	e00d      	b.n	800c3b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c39a:	7b7b      	ldrb	r3, [r7, #13]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d008      	beq.n	800c3b2 <lwip_netconn_do_close_internal+0xe6>
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	8b5b      	ldrh	r3, [r3, #26]
 800c3a4:	f003 0310 	and.w	r3, r3, #16
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	75bb      	strb	r3, [r7, #22]
 800c3b0:	e001      	b.n	800c3b6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c3b6:	7dbb      	ldrb	r3, [r7, #22]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c3bc:	2100      	movs	r1, #0
 800c3be:	6938      	ldr	r0, [r7, #16]
 800c3c0:	f004 f82c 	bl	801041c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	7d1b      	ldrb	r3, [r3, #20]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d104      	bne.n	800c3d6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	6938      	ldr	r0, [r7, #16]
 800c3d0:	f004 f89c 	bl	801050c <tcp_accept>
 800c3d4:	e01d      	b.n	800c412 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d007      	beq.n	800c3ec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c3dc:	2100      	movs	r1, #0
 800c3de:	6938      	ldr	r0, [r7, #16]
 800c3e0:	f004 f82e 	bl	8010440 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	6938      	ldr	r0, [r7, #16]
 800c3e8:	f004 f890 	bl	801050c <tcp_accept>
    }
    if (shut_tx) {
 800c3ec:	7b7b      	ldrb	r3, [r7, #13]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	6938      	ldr	r0, [r7, #16]
 800c3f6:	f004 f845 	bl	8010484 <tcp_sent>
    }
    if (shut_close) {
 800c3fa:	7dbb      	ldrb	r3, [r7, #22]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d008      	beq.n	800c412 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c400:	2200      	movs	r2, #0
 800c402:	2100      	movs	r1, #0
 800c404:	6938      	ldr	r0, [r7, #16]
 800c406:	f004 f899 	bl	801053c <tcp_poll>
      tcp_err(tpcb, NULL);
 800c40a:	2100      	movs	r1, #0
 800c40c:	6938      	ldr	r0, [r7, #16]
 800c40e:	f004 f85b 	bl	80104c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c412:	7dbb      	ldrb	r3, [r7, #22]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d005      	beq.n	800c424 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c418:	6938      	ldr	r0, [r7, #16]
 800c41a:	f002 fef5 	bl	800f208 <tcp_close>
 800c41e:	4603      	mov	r3, r0
 800c420:	75fb      	strb	r3, [r7, #23]
 800c422:	e007      	b.n	800c434 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	7b7a      	ldrb	r2, [r7, #13]
 800c428:	4619      	mov	r1, r3
 800c42a:	6938      	ldr	r0, [r7, #16]
 800c42c:	f002 ff18 	bl	800f260 <tcp_shutdown>
 800c430:	4603      	mov	r3, r0
 800c432:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d102      	bne.n	800c442 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c43c:	2301      	movs	r3, #1
 800c43e:	757b      	strb	r3, [r7, #21]
 800c440:	e016      	b.n	800c470 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c442:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44a:	d10f      	bne.n	800c46c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a1b      	ldr	r3, [r3, #32]
 800c450:	7a5b      	ldrb	r3, [r3, #9]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10c      	bne.n	800c470 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c456:	2301      	movs	r3, #1
 800c458:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c45a:	7dbb      	ldrb	r3, [r7, #22]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d007      	beq.n	800c470 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c460:	6938      	ldr	r0, [r7, #16]
 800c462:	f003 f817 	bl	800f494 <tcp_abort>
          err = ERR_OK;
 800c466:	2300      	movs	r3, #0
 800c468:	75fb      	strb	r3, [r7, #23]
 800c46a:	e001      	b.n	800c470 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c46c:	2301      	movs	r3, #1
 800c46e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c470:	7d7b      	ldrb	r3, [r7, #21]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d044      	beq.n	800c500 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	330c      	adds	r3, #12
 800c47e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a1b      	ldr	r3, [r3, #32]
 800c484:	7dfa      	ldrb	r2, [r7, #23]
 800c486:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d129      	bne.n	800c4f0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c49c:	7dbb      	ldrb	r3, [r7, #22]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00c      	beq.n	800c4bc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d005      	beq.n	800c4bc <lwip_netconn_do_close_internal+0x1f0>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	2104      	movs	r1, #4
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	4798      	blx	r3
      }
      if (shut_rx) {
 800c4bc:	7bbb      	ldrb	r3, [r7, #14]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d009      	beq.n	800c4d6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d005      	beq.n	800c4d6 <lwip_netconn_do_close_internal+0x20a>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	4798      	blx	r3
      }
      if (shut_tx) {
 800c4d6:	7b7b      	ldrb	r3, [r7, #13]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d009      	beq.n	800c4f0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d005      	beq.n	800c4f0 <lwip_netconn_do_close_internal+0x224>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	2102      	movs	r1, #2
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d002      	beq.n	800c4fc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c4f6:	68b8      	ldr	r0, [r7, #8]
 800c4f8:	f00b fe72 	bl	80181e0 <sys_sem_signal>
    }
    return ERR_OK;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e02e      	b.n	800c55e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800c500:	7d7b      	ldrb	r3, [r7, #21]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d11e      	bne.n	800c544 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	7d1b      	ldrb	r3, [r3, #20]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d106      	bne.n	800c51c <lwip_netconn_do_close_internal+0x250>
 800c50e:	4b16      	ldr	r3, [pc, #88]	; (800c568 <lwip_netconn_do_close_internal+0x29c>)
 800c510:	f240 4241 	movw	r2, #1089	; 0x441
 800c514:	491b      	ldr	r1, [pc, #108]	; (800c584 <lwip_netconn_do_close_internal+0x2b8>)
 800c516:	4816      	ldr	r0, [pc, #88]	; (800c570 <lwip_netconn_do_close_internal+0x2a4>)
 800c518:	f00c fa08 	bl	801892c <printf>
    if (shut_tx) {
 800c51c:	7b7b      	ldrb	r3, [r7, #13]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800c522:	4919      	ldr	r1, [pc, #100]	; (800c588 <lwip_netconn_do_close_internal+0x2bc>)
 800c524:	6938      	ldr	r0, [r7, #16]
 800c526:	f003 ffad 	bl	8010484 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c52a:	2201      	movs	r2, #1
 800c52c:	4917      	ldr	r1, [pc, #92]	; (800c58c <lwip_netconn_do_close_internal+0x2c0>)
 800c52e:	6938      	ldr	r0, [r7, #16]
 800c530:	f004 f804 	bl	801053c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c534:	4916      	ldr	r1, [pc, #88]	; (800c590 <lwip_netconn_do_close_internal+0x2c4>)
 800c536:	6938      	ldr	r0, [r7, #16]
 800c538:	f003 ffc6 	bl	80104c8 <tcp_err>
    tcp_arg(tpcb, conn);
 800c53c:	6879      	ldr	r1, [r7, #4]
 800c53e:	6938      	ldr	r0, [r7, #16]
 800c540:	f003 ff6c 	bl	801041c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d106      	bne.n	800c55a <lwip_netconn_do_close_internal+0x28e>
 800c54c:	4b06      	ldr	r3, [pc, #24]	; (800c568 <lwip_netconn_do_close_internal+0x29c>)
 800c54e:	f240 424d 	movw	r2, #1101	; 0x44d
 800c552:	4910      	ldr	r1, [pc, #64]	; (800c594 <lwip_netconn_do_close_internal+0x2c8>)
 800c554:	4806      	ldr	r0, [pc, #24]	; (800c570 <lwip_netconn_do_close_internal+0x2a4>)
 800c556:	f00c f9e9 	bl	801892c <printf>
  return err;
 800c55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	080203cc 	.word	0x080203cc
 800c56c:	080206a0 	.word	0x080206a0
 800c570:	08020410 	.word	0x08020410
 800c574:	080206b0 	.word	0x080206b0
 800c578:	080206d0 	.word	0x080206d0
 800c57c:	080206f4 	.word	0x080206f4
 800c580:	08020534 	.word	0x08020534
 800c584:	08020708 	.word	0x08020708
 800c588:	0800bcbd 	.word	0x0800bcbd
 800c58c:	0800bbf5 	.word	0x0800bbf5
 800c590:	0800bd65 	.word	0x0800bd65
 800c594:	0802072c 	.word	0x0802072c

0800c598 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	785b      	ldrb	r3, [r3, #1]
 800c5aa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c5ac:	7afb      	ldrb	r3, [r7, #11]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00d      	beq.n	800c5ce <lwip_netconn_do_delconn+0x36>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5bc:	2b10      	cmp	r3, #16
 800c5be:	d006      	beq.n	800c5ce <lwip_netconn_do_delconn+0x36>
 800c5c0:	4b60      	ldr	r3, [pc, #384]	; (800c744 <lwip_netconn_do_delconn+0x1ac>)
 800c5c2:	f240 425e 	movw	r2, #1118	; 0x45e
 800c5c6:	4960      	ldr	r1, [pc, #384]	; (800c748 <lwip_netconn_do_delconn+0x1b0>)
 800c5c8:	4860      	ldr	r0, [pc, #384]	; (800c74c <lwip_netconn_do_delconn+0x1b4>)
 800c5ca:	f00c f9af 	bl	801892c <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c5ce:	7afb      	ldrb	r3, [r7, #11]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <lwip_netconn_do_delconn+0x48>
 800c5d4:	7afb      	ldrb	r3, [r7, #11]
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d002      	beq.n	800c5e0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c5da:	7afb      	ldrb	r3, [r7, #11]
 800c5dc:	2b03      	cmp	r3, #3
 800c5de:	d109      	bne.n	800c5f4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c5e0:	7afb      	ldrb	r3, [r7, #11]
 800c5e2:	2b03      	cmp	r3, #3
 800c5e4:	d10a      	bne.n	800c5fc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	7f1b      	ldrb	r3, [r3, #28]
 800c5ec:	f003 0304 	and.w	r3, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d103      	bne.n	800c5fc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	22fb      	movs	r2, #251	; 0xfb
 800c5f8:	711a      	strb	r2, [r3, #4]
 800c5fa:	e097      	b.n	800c72c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c5fc:	7afb      	ldrb	r3, [r7, #11]
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d10d      	bne.n	800c61e <lwip_netconn_do_delconn+0x86>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	7f1b      	ldrb	r3, [r3, #28]
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d106      	bne.n	800c61e <lwip_netconn_do_delconn+0x86>
 800c610:	4b4c      	ldr	r3, [pc, #304]	; (800c744 <lwip_netconn_do_delconn+0x1ac>)
 800c612:	f240 427a 	movw	r2, #1146	; 0x47a
 800c616:	494e      	ldr	r1, [pc, #312]	; (800c750 <lwip_netconn_do_delconn+0x1b8>)
 800c618:	484c      	ldr	r0, [pc, #304]	; (800c74c <lwip_netconn_do_delconn+0x1b4>)
 800c61a:	f00c f987 	bl	801892c <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fdd1 	bl	800c1d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d05f      	beq.n	800c6f8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c642:	2b10      	cmp	r3, #16
 800c644:	d00d      	beq.n	800c662 <lwip_netconn_do_delconn+0xca>
 800c646:	2b20      	cmp	r3, #32
 800c648:	d151      	bne.n	800c6ee <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f009 f94a 	bl	80158f4 <udp_remove>
          break;
 800c660:	e046      	b.n	800c6f0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d006      	beq.n	800c67a <lwip_netconn_do_delconn+0xe2>
 800c66c:	4b35      	ldr	r3, [pc, #212]	; (800c744 <lwip_netconn_do_delconn+0x1ac>)
 800c66e:	f240 4294 	movw	r2, #1172	; 0x494
 800c672:	4938      	ldr	r1, [pc, #224]	; (800c754 <lwip_netconn_do_delconn+0x1bc>)
 800c674:	4835      	ldr	r0, [pc, #212]	; (800c74c <lwip_netconn_do_delconn+0x1b4>)
 800c676:	f00c f959 	bl	801892c <printf>
          msg->conn->state = NETCONN_CLOSE;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2204      	movs	r2, #4
 800c680:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2203      	movs	r2, #3
 800c686:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2100      	movs	r1, #0
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff fe18 	bl	800c2cc <lwip_netconn_do_close_internal>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d04b      	beq.n	800c73a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	785b      	ldrb	r3, [r3, #1]
 800c6a8:	2b04      	cmp	r3, #4
 800c6aa:	d006      	beq.n	800c6ba <lwip_netconn_do_delconn+0x122>
 800c6ac:	4b25      	ldr	r3, [pc, #148]	; (800c744 <lwip_netconn_do_delconn+0x1ac>)
 800c6ae:	f240 429a 	movw	r2, #1178	; 0x49a
 800c6b2:	4929      	ldr	r1, [pc, #164]	; (800c758 <lwip_netconn_do_delconn+0x1c0>)
 800c6b4:	4825      	ldr	r0, [pc, #148]	; (800c74c <lwip_netconn_do_delconn+0x1b4>)
 800c6b6:	f00c f939 	bl	801892c <printf>
            UNLOCK_TCPIP_CORE();
 800c6ba:	4828      	ldr	r0, [pc, #160]	; (800c75c <lwip_netconn_do_delconn+0x1c4>)
 800c6bc:	f00b fe01 	bl	80182c2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	330c      	adds	r3, #12
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f00b fd58 	bl	801817e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c6ce:	4823      	ldr	r0, [pc, #140]	; (800c75c <lwip_netconn_do_delconn+0x1c4>)
 800c6d0:	f00b fde8 	bl	80182a4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	785b      	ldrb	r3, [r3, #1]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d02d      	beq.n	800c73a <lwip_netconn_do_delconn+0x1a2>
 800c6de:	4b19      	ldr	r3, [pc, #100]	; (800c744 <lwip_netconn_do_delconn+0x1ac>)
 800c6e0:	f240 429e 	movw	r2, #1182	; 0x49e
 800c6e4:	491c      	ldr	r1, [pc, #112]	; (800c758 <lwip_netconn_do_delconn+0x1c0>)
 800c6e6:	4819      	ldr	r0, [pc, #100]	; (800c74c <lwip_netconn_do_delconn+0x1b4>)
 800c6e8:	f00c f920 	bl	801892c <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c6ec:	e025      	b.n	800c73a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c6ee:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d007      	beq.n	800c712 <lwip_netconn_do_delconn+0x17a>
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	6810      	ldr	r0, [r2, #0]
 800c70c:	2200      	movs	r2, #0
 800c70e:	2100      	movs	r1, #0
 800c710:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d007      	beq.n	800c72c <lwip_netconn_do_delconn+0x194>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	6810      	ldr	r0, [r2, #0]
 800c726:	2200      	movs	r2, #0
 800c728:	2102      	movs	r1, #2
 800c72a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	330c      	adds	r3, #12
 800c732:	4618      	mov	r0, r3
 800c734:	f00b fd6e 	bl	8018214 <sys_sem_valid>
 800c738:	e000      	b.n	800c73c <lwip_netconn_do_delconn+0x1a4>
          return;
 800c73a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	080203cc 	.word	0x080203cc
 800c748:	0802073c 	.word	0x0802073c
 800c74c:	08020410 	.word	0x08020410
 800c750:	08020750 	.word	0x08020750
 800c754:	08020770 	.word	0x08020770
 800c758:	0802078c 	.word	0x0802078c
 800c75c:	20007f7c 	.word	0x20007f7c

0800c760 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d025      	beq.n	800c7c2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c780:	2b10      	cmp	r3, #16
 800c782:	d00e      	beq.n	800c7a2 <lwip_netconn_do_bind+0x42>
 800c784:	2b20      	cmp	r3, #32
 800c786:	d119      	bne.n	800c7bc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	6858      	ldr	r0, [r3, #4]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	6899      	ldr	r1, [r3, #8]
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	899b      	ldrh	r3, [r3, #12]
 800c796:	461a      	mov	r2, r3
 800c798:	f009 f804 	bl	80157a4 <udp_bind>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]
        break;
 800c7a0:	e011      	b.n	800c7c6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6858      	ldr	r0, [r3, #4]
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	6899      	ldr	r1, [r3, #8]
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	899b      	ldrh	r3, [r3, #12]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	f002 fe7b 	bl	800f4ac <tcp_bind>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73fb      	strb	r3, [r7, #15]
        break;
 800c7ba:	e004      	b.n	800c7c6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c7bc:	23fa      	movs	r3, #250	; 0xfa
 800c7be:	73fb      	strb	r3, [r7, #15]
        break;
 800c7c0:	e001      	b.n	800c7c6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800c7c2:	23fa      	movs	r3, #250	; 0xfa
 800c7c4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	7bfa      	ldrb	r2, [r7, #15]
 800c7ca:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c7cc:	bf00      	nop
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7ff f875 	bl	800b8d4 <netconn_err>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d134      	bne.n	800c860 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d02d      	beq.n	800c85c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c80a:	2b20      	cmp	r3, #32
 800c80c:	d123      	bne.n	800c856 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d10c      	bne.n	800c832 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4619      	mov	r1, r3
 800c826:	4610      	mov	r0, r2
 800c828:	f008 fdd2 	bl	80153d0 <udp_send>
 800c82c:	4603      	mov	r3, r0
 800c82e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800c830:	e016      	b.n	800c860 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6858      	ldr	r0, [r3, #4]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	6819      	ldr	r1, [r3, #0]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f103 0208 	add.w	r2, r3, #8
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	899b      	ldrh	r3, [r3, #12]
 800c84c:	f008 fdf4 	bl	8015438 <udp_sendto>
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]
          break;
 800c854:	e004      	b.n	800c860 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800c856:	23f5      	movs	r3, #245	; 0xf5
 800c858:	73fb      	strb	r3, [r7, #15]
          break;
 800c85a:	e001      	b.n	800c860 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800c85c:	23f5      	movs	r3, #245	; 0xf5
 800c85e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	7bfa      	ldrb	r2, [r7, #15]
 800c864:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c866:	bf00      	nop
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b086      	sub	sp, #24
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	2200      	movs	r2, #0
 800c87e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d022      	beq.n	800c8d0 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c894:	2b10      	cmp	r3, #16
 800c896:	d11b      	bne.n	800c8d0 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8a4:	d202      	bcs.n	800c8ac <lwip_netconn_do_recv+0x3e>
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	e001      	b.n	800c8b0 <lwip_netconn_do_recv+0x42>
 800c8ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8b0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	89fa      	ldrh	r2, [r7, #14]
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f002 fee7 	bl	800f690 <tcp_recved>
        remaining -= recved;
 800c8c2:	89fb      	ldrh	r3, [r7, #14]
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e6      	bne.n	800c89e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c8d0:	bf00      	nop
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b088      	sub	sp, #32
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <lwip_netconn_do_writemore+0x24>
 800c8ee:	4b96      	ldr	r3, [pc, #600]	; (800cb48 <lwip_netconn_do_writemore+0x270>)
 800c8f0:	f240 6273 	movw	r2, #1651	; 0x673
 800c8f4:	4995      	ldr	r1, [pc, #596]	; (800cb4c <lwip_netconn_do_writemore+0x274>)
 800c8f6:	4896      	ldr	r0, [pc, #600]	; (800cb50 <lwip_netconn_do_writemore+0x278>)
 800c8f8:	f00c f818 	bl	801892c <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	785b      	ldrb	r3, [r3, #1]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d006      	beq.n	800c912 <lwip_netconn_do_writemore+0x3a>
 800c904:	4b90      	ldr	r3, [pc, #576]	; (800cb48 <lwip_netconn_do_writemore+0x270>)
 800c906:	f240 6274 	movw	r2, #1652	; 0x674
 800c90a:	4992      	ldr	r1, [pc, #584]	; (800cb54 <lwip_netconn_do_writemore+0x27c>)
 800c90c:	4890      	ldr	r0, [pc, #576]	; (800cb50 <lwip_netconn_do_writemore+0x278>)
 800c90e:	f00c f80d 	bl	801892c <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d106      	bne.n	800c928 <lwip_netconn_do_writemore+0x50>
 800c91a:	4b8b      	ldr	r3, [pc, #556]	; (800cb48 <lwip_netconn_do_writemore+0x270>)
 800c91c:	f240 6275 	movw	r2, #1653	; 0x675
 800c920:	498d      	ldr	r1, [pc, #564]	; (800cb58 <lwip_netconn_do_writemore+0x280>)
 800c922:	488b      	ldr	r0, [pc, #556]	; (800cb50 <lwip_netconn_do_writemore+0x278>)
 800c924:	f00c f802 	bl	801892c <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d106      	bne.n	800c93e <lwip_netconn_do_writemore+0x66>
 800c930:	4b85      	ldr	r3, [pc, #532]	; (800cb48 <lwip_netconn_do_writemore+0x270>)
 800c932:	f240 6276 	movw	r2, #1654	; 0x676
 800c936:	4989      	ldr	r1, [pc, #548]	; (800cb5c <lwip_netconn_do_writemore+0x284>)
 800c938:	4885      	ldr	r0, [pc, #532]	; (800cb50 <lwip_netconn_do_writemore+0x278>)
 800c93a:	f00b fff7 	bl	801892c <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	699a      	ldr	r2, [r3, #24]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6a1b      	ldr	r3, [r3, #32]
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d306      	bcc.n	800c95c <lwip_netconn_do_writemore+0x84>
 800c94e:	4b7e      	ldr	r3, [pc, #504]	; (800cb48 <lwip_netconn_do_writemore+0x270>)
 800c950:	f240 6277 	movw	r2, #1655	; 0x677
 800c954:	4982      	ldr	r1, [pc, #520]	; (800cb60 <lwip_netconn_do_writemore+0x288>)
 800c956:	487e      	ldr	r0, [pc, #504]	; (800cb50 <lwip_netconn_do_writemore+0x278>)
 800c958:	f00b ffe8 	bl	801892c <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	899b      	ldrh	r3, [r3, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d106      	bne.n	800c974 <lwip_netconn_do_writemore+0x9c>
 800c966:	4b78      	ldr	r3, [pc, #480]	; (800cb48 <lwip_netconn_do_writemore+0x270>)
 800c968:	f240 6279 	movw	r2, #1657	; 0x679
 800c96c:	497d      	ldr	r1, [pc, #500]	; (800cb64 <lwip_netconn_do_writemore+0x28c>)
 800c96e:	4878      	ldr	r0, [pc, #480]	; (800cb50 <lwip_netconn_do_writemore+0x278>)
 800c970:	f00b ffdc 	bl	801892c <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6a1b      	ldr	r3, [r3, #32]
 800c978:	7f1b      	ldrb	r3, [r3, #28]
 800c97a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	7f1b      	ldrb	r3, [r3, #28]
 800c980:	f003 0302 	and.w	r3, r3, #2
 800c984:	2b00      	cmp	r3, #0
 800c986:	d104      	bne.n	800c992 <lwip_netconn_do_writemore+0xba>
 800c988:	7ebb      	ldrb	r3, [r7, #26]
 800c98a:	f003 0304 	and.w	r3, r3, #4
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d001      	beq.n	800c996 <lwip_netconn_do_writemore+0xbe>
 800c992:	2301      	movs	r3, #1
 800c994:	e000      	b.n	800c998 <lwip_netconn_do_writemore+0xc0>
 800c996:	2300      	movs	r3, #0
 800c998:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a1b      	ldr	r3, [r3, #32]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a1b      	ldr	r3, [r3, #32]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a1b      	ldr	r3, [r3, #32]
 800c9b8:	691b      	ldr	r3, [r3, #16]
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9c4:	d307      	bcc.n	800c9d6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c9c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9ca:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c9cc:	7ebb      	ldrb	r3, [r7, #26]
 800c9ce:	f043 0302 	orr.w	r3, r3, #2
 800c9d2:	76bb      	strb	r3, [r7, #26]
 800c9d4:	e001      	b.n	800c9da <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c9e2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c9e4:	89fa      	ldrh	r2, [r7, #14]
 800c9e6:	8bbb      	ldrh	r3, [r7, #28]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d216      	bcs.n	800ca1a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c9ec:	89fb      	ldrh	r3, [r7, #14]
 800c9ee:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c9f0:	7e3b      	ldrb	r3, [r7, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00d      	beq.n	800ca12 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c9f6:	8bbb      	ldrh	r3, [r7, #28]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10e      	bne.n	800ca1a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a1b      	ldr	r3, [r3, #32]
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <lwip_netconn_do_writemore+0x134>
 800ca06:	f06f 0306 	mvn.w	r3, #6
 800ca0a:	e000      	b.n	800ca0e <lwip_netconn_do_writemore+0x136>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ca10:	e07d      	b.n	800cb0e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ca12:	7ebb      	ldrb	r3, [r7, #26]
 800ca14:	f043 0302 	orr.w	r3, r3, #2
 800ca18:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	691a      	ldr	r2, [r3, #16]
 800ca20:	8bbb      	ldrh	r3, [r7, #28]
 800ca22:	441a      	add	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a1b      	ldr	r3, [r3, #32]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d906      	bls.n	800ca3e <lwip_netconn_do_writemore+0x166>
 800ca30:	4b45      	ldr	r3, [pc, #276]	; (800cb48 <lwip_netconn_do_writemore+0x270>)
 800ca32:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ca36:	494c      	ldr	r1, [pc, #304]	; (800cb68 <lwip_netconn_do_writemore+0x290>)
 800ca38:	4845      	ldr	r0, [pc, #276]	; (800cb50 <lwip_netconn_do_writemore+0x278>)
 800ca3a:	f00b ff77 	bl	801892c <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ca3e:	8bbb      	ldrh	r3, [r7, #28]
 800ca40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d103      	bne.n	800ca50 <lwip_netconn_do_writemore+0x178>
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca4e:	d209      	bcs.n	800ca64 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ca54:	8bba      	ldrh	r2, [r7, #28]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d10b      	bne.n	800ca72 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a1b      	ldr	r3, [r3, #32]
 800ca5e:	899b      	ldrh	r3, [r3, #12]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d906      	bls.n	800ca72 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ca64:	2301      	movs	r3, #1
 800ca66:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ca68:	7ebb      	ldrb	r3, [r7, #26]
 800ca6a:	f043 0302 	orr.w	r3, r3, #2
 800ca6e:	76bb      	strb	r3, [r7, #26]
 800ca70:	e001      	b.n	800ca76 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6858      	ldr	r0, [r3, #4]
 800ca7a:	7ebb      	ldrb	r3, [r7, #26]
 800ca7c:	8bba      	ldrh	r2, [r7, #28]
 800ca7e:	6979      	ldr	r1, [r7, #20]
 800ca80:	f006 fc0a 	bl	8013298 <tcp_write>
 800ca84:	4603      	mov	r3, r0
 800ca86:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ca88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d12c      	bne.n	800caea <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	6999      	ldr	r1, [r3, #24]
 800ca96:	8bba      	ldrh	r2, [r7, #28]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	440a      	add	r2, r1
 800ca9e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a1b      	ldr	r3, [r3, #32]
 800caa4:	6919      	ldr	r1, [r3, #16]
 800caa6:	8bba      	ldrh	r2, [r7, #28]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a1b      	ldr	r3, [r3, #32]
 800caac:	440a      	add	r2, r1
 800caae:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a1b      	ldr	r3, [r3, #32]
 800cab4:	691a      	ldr	r2, [r3, #16]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d113      	bne.n	800caea <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a1b      	ldr	r3, [r3, #32]
 800cac6:	899a      	ldrh	r2, [r3, #12]
 800cac8:	3a01      	subs	r2, #1
 800caca:	b292      	uxth	r2, r2
 800cacc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	899b      	ldrh	r3, [r3, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d008      	beq.n	800caea <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	689a      	ldr	r2, [r3, #8]
 800cade:	3208      	adds	r2, #8
 800cae0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	2200      	movs	r2, #0
 800cae8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800caea:	7e7b      	ldrb	r3, [r7, #25]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <lwip_netconn_do_writemore+0x222>
 800caf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f43f af50 	beq.w	800c99a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800cafa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d004      	beq.n	800cb0c <lwip_netconn_do_writemore+0x234>
 800cb02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0a:	d146      	bne.n	800cb9a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800cb0c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800cb0e:	7e3b      	ldrb	r3, [r7, #24]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d02b      	beq.n	800cb6c <lwip_netconn_do_writemore+0x294>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6a1b      	ldr	r3, [r3, #32]
 800cb18:	699a      	ldr	r2, [r3, #24]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d223      	bcs.n	800cb6c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d005      	beq.n	800cb38 <lwip_netconn_do_writemore+0x260>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb30:	2200      	movs	r2, #0
 800cb32:	2103      	movs	r1, #3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7f1b      	ldrb	r3, [r3, #28]
 800cb3c:	f043 0310 	orr.w	r3, r3, #16
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	771a      	strb	r2, [r3, #28]
 800cb46:	e028      	b.n	800cb9a <lwip_netconn_do_writemore+0x2c2>
 800cb48:	080203cc 	.word	0x080203cc
 800cb4c:	08020524 	.word	0x08020524
 800cb50:	08020410 	.word	0x08020410
 800cb54:	0802082c 	.word	0x0802082c
 800cb58:	08020534 	.word	0x08020534
 800cb5c:	0802084c 	.word	0x0802084c
 800cb60:	08020864 	.word	0x08020864
 800cb64:	080208a4 	.word	0x080208a4
 800cb68:	080208cc 	.word	0x080208cc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cb74:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cb78:	d305      	bcc.n	800cb86 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cb82:	2b04      	cmp	r3, #4
 800cb84:	d909      	bls.n	800cb9a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d005      	beq.n	800cb9a <lwip_netconn_do_writemore+0x2c2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb92:	2200      	movs	r2, #0
 800cb94:	2103      	movs	r1, #3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800cb9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d11d      	bne.n	800cbde <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	699a      	ldr	r2, [r3, #24]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a1b      	ldr	r3, [r3, #32]
 800cbac:	695b      	ldr	r3, [r3, #20]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d002      	beq.n	800cbb8 <lwip_netconn_do_writemore+0x2e0>
 800cbb2:	7e3b      	ldrb	r3, [r7, #24]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f007 f953 	bl	8013e6c <tcp_output>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800cbca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cbce:	f113 0f04 	cmn.w	r3, #4
 800cbd2:	d12c      	bne.n	800cc2e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cbd4:	7b3b      	ldrb	r3, [r7, #12]
 800cbd6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	76fb      	strb	r3, [r7, #27]
 800cbdc:	e027      	b.n	800cc2e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800cbde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe6:	d120      	bne.n	800cc2a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f007 f93d 	bl	8013e6c <tcp_output>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800cbf6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cbfa:	f113 0f04 	cmn.w	r3, #4
 800cbfe:	d104      	bne.n	800cc0a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cc00:	7b7b      	ldrb	r3, [r7, #13]
 800cc02:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cc04:	2301      	movs	r3, #1
 800cc06:	76fb      	strb	r3, [r7, #27]
 800cc08:	e011      	b.n	800cc2e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800cc0a:	7e3b      	ldrb	r3, [r7, #24]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00e      	beq.n	800cc2e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6a1b      	ldr	r3, [r3, #32]
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d102      	bne.n	800cc20 <lwip_netconn_do_writemore+0x348>
 800cc1a:	f06f 0306 	mvn.w	r3, #6
 800cc1e:	e000      	b.n	800cc22 <lwip_netconn_do_writemore+0x34a>
 800cc20:	2300      	movs	r3, #0
 800cc22:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cc24:	2301      	movs	r3, #1
 800cc26:	76fb      	strb	r3, [r7, #27]
 800cc28:	e001      	b.n	800cc2e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800cc2e:	7efb      	ldrb	r3, [r7, #27]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d015      	beq.n	800cc60 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a1b      	ldr	r3, [r3, #32]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	330c      	adds	r3, #12
 800cc3c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	7ffa      	ldrb	r2, [r7, #31]
 800cc44:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cc52:	78fb      	ldrb	r3, [r7, #3]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d006      	beq.n	800cc66 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800cc58:	68b8      	ldr	r0, [r7, #8]
 800cc5a:	f00b fac1 	bl	80181e0 <sys_sem_signal>
 800cc5e:	e002      	b.n	800cc66 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295
 800cc64:	e000      	b.n	800cc68 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3720      	adds	r7, #32
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	785b      	ldrb	r3, [r3, #1]
 800cc82:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d069      	beq.n	800cd62 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800cc98:	2b10      	cmp	r3, #16
 800cc9a:	d162      	bne.n	800cd62 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d002      	beq.n	800ccaa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cca4:	7afb      	ldrb	r3, [r7, #11]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d05b      	beq.n	800cd62 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d103      	bne.n	800ccb8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	22f5      	movs	r2, #245	; 0xf5
 800ccb4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ccb6:	e059      	b.n	800cd6c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ccb8:	7afb      	ldrb	r3, [r7, #11]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d103      	bne.n	800ccc6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	22fb      	movs	r2, #251	; 0xfb
 800ccc2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ccc4:	e052      	b.n	800cd6c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	7a1b      	ldrb	r3, [r3, #8]
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d004      	beq.n	800ccdc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff fa7a 	bl	800c1d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d006      	beq.n	800ccf4 <lwip_netconn_do_close+0x84>
 800cce6:	4b23      	ldr	r3, [pc, #140]	; (800cd74 <lwip_netconn_do_close+0x104>)
 800cce8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ccec:	4922      	ldr	r1, [pc, #136]	; (800cd78 <lwip_netconn_do_close+0x108>)
 800ccee:	4823      	ldr	r0, [pc, #140]	; (800cd7c <lwip_netconn_do_close+0x10c>)
 800ccf0:	f00b fe1c 	bl	801892c <printf>
      msg->conn->state = NETCONN_CLOSE;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2204      	movs	r2, #4
 800ccfa:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2100      	movs	r1, #0
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fade 	bl	800c2cc <lwip_netconn_do_close_internal>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d029      	beq.n	800cd6a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	785b      	ldrb	r3, [r3, #1]
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	d006      	beq.n	800cd2e <lwip_netconn_do_close+0xbe>
 800cd20:	4b14      	ldr	r3, [pc, #80]	; (800cd74 <lwip_netconn_do_close+0x104>)
 800cd22:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800cd26:	4916      	ldr	r1, [pc, #88]	; (800cd80 <lwip_netconn_do_close+0x110>)
 800cd28:	4814      	ldr	r0, [pc, #80]	; (800cd7c <lwip_netconn_do_close+0x10c>)
 800cd2a:	f00b fdff 	bl	801892c <printf>
        UNLOCK_TCPIP_CORE();
 800cd2e:	4815      	ldr	r0, [pc, #84]	; (800cd84 <lwip_netconn_do_close+0x114>)
 800cd30:	f00b fac7 	bl	80182c2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	330c      	adds	r3, #12
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f00b fa1e 	bl	801817e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800cd42:	4810      	ldr	r0, [pc, #64]	; (800cd84 <lwip_netconn_do_close+0x114>)
 800cd44:	f00b faae 	bl	80182a4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	785b      	ldrb	r3, [r3, #1]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00b      	beq.n	800cd6a <lwip_netconn_do_close+0xfa>
 800cd52:	4b08      	ldr	r3, [pc, #32]	; (800cd74 <lwip_netconn_do_close+0x104>)
 800cd54:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800cd58:	4909      	ldr	r1, [pc, #36]	; (800cd80 <lwip_netconn_do_close+0x110>)
 800cd5a:	4808      	ldr	r0, [pc, #32]	; (800cd7c <lwip_netconn_do_close+0x10c>)
 800cd5c:	f00b fde6 	bl	801892c <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800cd60:	e003      	b.n	800cd6a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	22f5      	movs	r2, #245	; 0xf5
 800cd66:	711a      	strb	r2, [r3, #4]
 800cd68:	e000      	b.n	800cd6c <lwip_netconn_do_close+0xfc>
      return;
 800cd6a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	080203cc 	.word	0x080203cc
 800cd78:	08020770 	.word	0x08020770
 800cd7c:	08020410 	.word	0x08020410
 800cd80:	0802078c 	.word	0x0802078c
 800cd84:	20007f7c 	.word	0x20007f7c

0800cd88 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d013      	beq.n	800cdbe <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00b      	beq.n	800cdb6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f001 fd76 	bl	800e894 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	605a      	str	r2, [r3, #4]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	2006      	movs	r0, #6
 800cdba:	f000 ff3f 	bl	800dc3c <memp_free>
  }
}
 800cdbe:	bf00      	nop
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
	...

0800cdc8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d108      	bne.n	800cdec <netbuf_data+0x24>
 800cdda:	4b1b      	ldr	r3, [pc, #108]	; (800ce48 <netbuf_data+0x80>)
 800cddc:	22c6      	movs	r2, #198	; 0xc6
 800cdde:	491b      	ldr	r1, [pc, #108]	; (800ce4c <netbuf_data+0x84>)
 800cde0:	481b      	ldr	r0, [pc, #108]	; (800ce50 <netbuf_data+0x88>)
 800cde2:	f00b fda3 	bl	801892c <printf>
 800cde6:	f06f 030f 	mvn.w	r3, #15
 800cdea:	e029      	b.n	800ce40 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d108      	bne.n	800ce04 <netbuf_data+0x3c>
 800cdf2:	4b15      	ldr	r3, [pc, #84]	; (800ce48 <netbuf_data+0x80>)
 800cdf4:	22c7      	movs	r2, #199	; 0xc7
 800cdf6:	4917      	ldr	r1, [pc, #92]	; (800ce54 <netbuf_data+0x8c>)
 800cdf8:	4815      	ldr	r0, [pc, #84]	; (800ce50 <netbuf_data+0x88>)
 800cdfa:	f00b fd97 	bl	801892c <printf>
 800cdfe:	f06f 030f 	mvn.w	r3, #15
 800ce02:	e01d      	b.n	800ce40 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d108      	bne.n	800ce1c <netbuf_data+0x54>
 800ce0a:	4b0f      	ldr	r3, [pc, #60]	; (800ce48 <netbuf_data+0x80>)
 800ce0c:	22c8      	movs	r2, #200	; 0xc8
 800ce0e:	4912      	ldr	r1, [pc, #72]	; (800ce58 <netbuf_data+0x90>)
 800ce10:	480f      	ldr	r0, [pc, #60]	; (800ce50 <netbuf_data+0x88>)
 800ce12:	f00b fd8b 	bl	801892c <printf>
 800ce16:	f06f 030f 	mvn.w	r3, #15
 800ce1a:	e011      	b.n	800ce40 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d102      	bne.n	800ce2a <netbuf_data+0x62>
    return ERR_BUF;
 800ce24:	f06f 0301 	mvn.w	r3, #1
 800ce28:	e00a      	b.n	800ce40 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	895a      	ldrh	r2, [r3, #10]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	08020924 	.word	0x08020924
 800ce4c:	08020a2c 	.word	0x08020a2c
 800ce50:	08020974 	.word	0x08020974
 800ce54:	08020a48 	.word	0x08020a48
 800ce58:	08020a68 	.word	0x08020a68

0800ce5c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d108      	bne.n	800ce7c <netbuf_next+0x20>
 800ce6a:	4b11      	ldr	r3, [pc, #68]	; (800ceb0 <netbuf_next+0x54>)
 800ce6c:	22e0      	movs	r2, #224	; 0xe0
 800ce6e:	4911      	ldr	r1, [pc, #68]	; (800ceb4 <netbuf_next+0x58>)
 800ce70:	4811      	ldr	r0, [pc, #68]	; (800ceb8 <netbuf_next+0x5c>)
 800ce72:	f00b fd5b 	bl	801892c <printf>
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7a:	e014      	b.n	800cea6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d102      	bne.n	800ce8c <netbuf_next+0x30>
    return -1;
 800ce86:	f04f 33ff 	mov.w	r3, #4294967295
 800ce8a:	e00c      	b.n	800cea6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <netbuf_next+0x48>
    return 1;
 800cea0:	2301      	movs	r3, #1
 800cea2:	e000      	b.n	800cea6 <netbuf_next+0x4a>
  }
  return 0;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	08020924 	.word	0x08020924
 800ceb4:	08020a84 	.word	0x08020a84
 800ceb8:	08020974 	.word	0x08020974

0800cebc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cec6:	f008 f889 	bl	8014fdc <sys_timeouts_sleeptime>
 800ceca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced2:	d10b      	bne.n	800ceec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ced4:	4813      	ldr	r0, [pc, #76]	; (800cf24 <tcpip_timeouts_mbox_fetch+0x68>)
 800ced6:	f00b f9f4 	bl	80182c2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ceda:	2200      	movs	r2, #0
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f00b f8ac 	bl	801803c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cee4:	480f      	ldr	r0, [pc, #60]	; (800cf24 <tcpip_timeouts_mbox_fetch+0x68>)
 800cee6:	f00b f9dd 	bl	80182a4 <sys_mutex_lock>
    return;
 800ceea:	e018      	b.n	800cf1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d102      	bne.n	800cef8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cef2:	f008 f839 	bl	8014f68 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cef6:	e7e6      	b.n	800cec6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cef8:	480a      	ldr	r0, [pc, #40]	; (800cf24 <tcpip_timeouts_mbox_fetch+0x68>)
 800cefa:	f00b f9e2 	bl	80182c2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f00b f89a 	bl	801803c <sys_arch_mbox_fetch>
 800cf08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cf0a:	4806      	ldr	r0, [pc, #24]	; (800cf24 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf0c:	f00b f9ca 	bl	80182a4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf16:	d102      	bne.n	800cf1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cf18:	f008 f826 	bl	8014f68 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cf1c:	e7d3      	b.n	800cec6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20007f7c 	.word	0x20007f7c

0800cf28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cf30:	4810      	ldr	r0, [pc, #64]	; (800cf74 <tcpip_thread+0x4c>)
 800cf32:	f00b f9b7 	bl	80182a4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cf36:	4b10      	ldr	r3, [pc, #64]	; (800cf78 <tcpip_thread+0x50>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d005      	beq.n	800cf4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cf3e:	4b0e      	ldr	r3, [pc, #56]	; (800cf78 <tcpip_thread+0x50>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a0e      	ldr	r2, [pc, #56]	; (800cf7c <tcpip_thread+0x54>)
 800cf44:	6812      	ldr	r2, [r2, #0]
 800cf46:	4610      	mov	r0, r2
 800cf48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf4a:	f107 030c 	add.w	r3, r7, #12
 800cf4e:	4619      	mov	r1, r3
 800cf50:	480b      	ldr	r0, [pc, #44]	; (800cf80 <tcpip_thread+0x58>)
 800cf52:	f7ff ffb3 	bl	800cebc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cf5c:	4b09      	ldr	r3, [pc, #36]	; (800cf84 <tcpip_thread+0x5c>)
 800cf5e:	2291      	movs	r2, #145	; 0x91
 800cf60:	4909      	ldr	r1, [pc, #36]	; (800cf88 <tcpip_thread+0x60>)
 800cf62:	480a      	ldr	r0, [pc, #40]	; (800cf8c <tcpip_thread+0x64>)
 800cf64:	f00b fce2 	bl	801892c <printf>
      continue;
 800cf68:	e003      	b.n	800cf72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 f80f 	bl	800cf90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf72:	e7ea      	b.n	800cf4a <tcpip_thread+0x22>
 800cf74:	20007f7c 	.word	0x20007f7c
 800cf78:	20004a5c 	.word	0x20004a5c
 800cf7c:	20004a60 	.word	0x20004a60
 800cf80:	20004a64 	.word	0x20004a64
 800cf84:	08020abc 	.word	0x08020abc
 800cf88:	08020aec 	.word	0x08020aec
 800cf8c:	08020b0c 	.word	0x08020b0c

0800cf90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d026      	beq.n	800cfee <tcpip_thread_handle_msg+0x5e>
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	dc2b      	bgt.n	800cffc <tcpip_thread_handle_msg+0x6c>
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <tcpip_thread_handle_msg+0x1e>
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d015      	beq.n	800cfd8 <tcpip_thread_handle_msg+0x48>
 800cfac:	e026      	b.n	800cffc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	6850      	ldr	r0, [r2, #4]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	6892      	ldr	r2, [r2, #8]
 800cfba:	4611      	mov	r1, r2
 800cfbc:	4798      	blx	r3
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d004      	beq.n	800cfce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f001 fc63 	bl	800e894 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cfce:	6879      	ldr	r1, [r7, #4]
 800cfd0:	2009      	movs	r0, #9
 800cfd2:	f000 fe33 	bl	800dc3c <memp_free>
      break;
 800cfd6:	e018      	b.n	800d00a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	6892      	ldr	r2, [r2, #8]
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	2008      	movs	r0, #8
 800cfe8:	f000 fe28 	bl	800dc3c <memp_free>
      break;
 800cfec:	e00d      	b.n	800d00a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	6892      	ldr	r2, [r2, #8]
 800cff6:	4610      	mov	r0, r2
 800cff8:	4798      	blx	r3
      break;
 800cffa:	e006      	b.n	800d00a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cffc:	4b05      	ldr	r3, [pc, #20]	; (800d014 <tcpip_thread_handle_msg+0x84>)
 800cffe:	22cf      	movs	r2, #207	; 0xcf
 800d000:	4905      	ldr	r1, [pc, #20]	; (800d018 <tcpip_thread_handle_msg+0x88>)
 800d002:	4806      	ldr	r0, [pc, #24]	; (800d01c <tcpip_thread_handle_msg+0x8c>)
 800d004:	f00b fc92 	bl	801892c <printf>
      break;
 800d008:	bf00      	nop
  }
}
 800d00a:	bf00      	nop
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	08020abc 	.word	0x08020abc
 800d018:	08020aec 	.word	0x08020aec
 800d01c:	08020b0c 	.word	0x08020b0c

0800d020 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d02c:	481a      	ldr	r0, [pc, #104]	; (800d098 <tcpip_inpkt+0x78>)
 800d02e:	f00b f860 	bl	80180f2 <sys_mbox_valid>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d105      	bne.n	800d044 <tcpip_inpkt+0x24>
 800d038:	4b18      	ldr	r3, [pc, #96]	; (800d09c <tcpip_inpkt+0x7c>)
 800d03a:	22fc      	movs	r2, #252	; 0xfc
 800d03c:	4918      	ldr	r1, [pc, #96]	; (800d0a0 <tcpip_inpkt+0x80>)
 800d03e:	4819      	ldr	r0, [pc, #100]	; (800d0a4 <tcpip_inpkt+0x84>)
 800d040:	f00b fc74 	bl	801892c <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d044:	2009      	movs	r0, #9
 800d046:	f000 fda7 	bl	800db98 <memp_malloc>
 800d04a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d102      	bne.n	800d058 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d052:	f04f 33ff 	mov.w	r3, #4294967295
 800d056:	e01a      	b.n	800d08e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	2200      	movs	r2, #0
 800d05c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d070:	6979      	ldr	r1, [r7, #20]
 800d072:	4809      	ldr	r0, [pc, #36]	; (800d098 <tcpip_inpkt+0x78>)
 800d074:	f00a ffc8 	bl	8018008 <sys_mbox_trypost>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d006      	beq.n	800d08c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d07e:	6979      	ldr	r1, [r7, #20]
 800d080:	2009      	movs	r0, #9
 800d082:	f000 fddb 	bl	800dc3c <memp_free>
    return ERR_MEM;
 800d086:	f04f 33ff 	mov.w	r3, #4294967295
 800d08a:	e000      	b.n	800d08e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d08c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	20004a64 	.word	0x20004a64
 800d09c:	08020abc 	.word	0x08020abc
 800d0a0:	08020b34 	.word	0x08020b34
 800d0a4:	08020b0c 	.word	0x08020b0c

0800d0a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d0b8:	f003 0318 	and.w	r3, r3, #24
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d006      	beq.n	800d0ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d0c0:	4a08      	ldr	r2, [pc, #32]	; (800d0e4 <tcpip_input+0x3c>)
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7ff ffab 	bl	800d020 <tcpip_inpkt>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	e005      	b.n	800d0da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d0ce:	4a06      	ldr	r2, [pc, #24]	; (800d0e8 <tcpip_input+0x40>)
 800d0d0:	6839      	ldr	r1, [r7, #0]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7ff ffa4 	bl	800d020 <tcpip_inpkt>
 800d0d8:	4603      	mov	r3, r0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	08017df5 	.word	0x08017df5
 800d0e8:	08016d09 	.word	0x08016d09

0800d0ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d0f6:	4819      	ldr	r0, [pc, #100]	; (800d15c <tcpip_try_callback+0x70>)
 800d0f8:	f00a fffb 	bl	80180f2 <sys_mbox_valid>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d106      	bne.n	800d110 <tcpip_try_callback+0x24>
 800d102:	4b17      	ldr	r3, [pc, #92]	; (800d160 <tcpip_try_callback+0x74>)
 800d104:	f240 125d 	movw	r2, #349	; 0x15d
 800d108:	4916      	ldr	r1, [pc, #88]	; (800d164 <tcpip_try_callback+0x78>)
 800d10a:	4817      	ldr	r0, [pc, #92]	; (800d168 <tcpip_try_callback+0x7c>)
 800d10c:	f00b fc0e 	bl	801892c <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d110:	2008      	movs	r0, #8
 800d112:	f000 fd41 	bl	800db98 <memp_malloc>
 800d116:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d102      	bne.n	800d124 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d11e:	f04f 33ff 	mov.w	r3, #4294967295
 800d122:	e017      	b.n	800d154 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2201      	movs	r2, #1
 800d128:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d136:	68f9      	ldr	r1, [r7, #12]
 800d138:	4808      	ldr	r0, [pc, #32]	; (800d15c <tcpip_try_callback+0x70>)
 800d13a:	f00a ff65 	bl	8018008 <sys_mbox_trypost>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d006      	beq.n	800d152 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d144:	68f9      	ldr	r1, [r7, #12]
 800d146:	2008      	movs	r0, #8
 800d148:	f000 fd78 	bl	800dc3c <memp_free>
    return ERR_MEM;
 800d14c:	f04f 33ff 	mov.w	r3, #4294967295
 800d150:	e000      	b.n	800d154 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	20004a64 	.word	0x20004a64
 800d160:	08020abc 	.word	0x08020abc
 800d164:	08020b34 	.word	0x08020b34
 800d168:	08020b0c 	.word	0x08020b0c

0800d16c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d178:	4806      	ldr	r0, [pc, #24]	; (800d194 <tcpip_send_msg_wait_sem+0x28>)
 800d17a:	f00b f893 	bl	80182a4 <sys_mutex_lock>
  fn(apimsg);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	68b8      	ldr	r0, [r7, #8]
 800d182:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d184:	4803      	ldr	r0, [pc, #12]	; (800d194 <tcpip_send_msg_wait_sem+0x28>)
 800d186:	f00b f89c 	bl	80182c2 <sys_mutex_unlock>
  return ERR_OK;
 800d18a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	20007f7c 	.word	0x20007f7c

0800d198 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d1a2:	f000 f871 	bl	800d288 <lwip_init>

  tcpip_init_done = initfunc;
 800d1a6:	4a17      	ldr	r2, [pc, #92]	; (800d204 <tcpip_init+0x6c>)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d1ac:	4a16      	ldr	r2, [pc, #88]	; (800d208 <tcpip_init+0x70>)
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d1b2:	2106      	movs	r1, #6
 800d1b4:	4815      	ldr	r0, [pc, #84]	; (800d20c <tcpip_init+0x74>)
 800d1b6:	f00a fef3 	bl	8017fa0 <sys_mbox_new>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d006      	beq.n	800d1ce <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d1c0:	4b13      	ldr	r3, [pc, #76]	; (800d210 <tcpip_init+0x78>)
 800d1c2:	f240 2261 	movw	r2, #609	; 0x261
 800d1c6:	4913      	ldr	r1, [pc, #76]	; (800d214 <tcpip_init+0x7c>)
 800d1c8:	4813      	ldr	r0, [pc, #76]	; (800d218 <tcpip_init+0x80>)
 800d1ca:	f00b fbaf 	bl	801892c <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d1ce:	4813      	ldr	r0, [pc, #76]	; (800d21c <tcpip_init+0x84>)
 800d1d0:	f00b f84c 	bl	801826c <sys_mutex_new>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d006      	beq.n	800d1e8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d1da:	4b0d      	ldr	r3, [pc, #52]	; (800d210 <tcpip_init+0x78>)
 800d1dc:	f240 2265 	movw	r2, #613	; 0x265
 800d1e0:	490f      	ldr	r1, [pc, #60]	; (800d220 <tcpip_init+0x88>)
 800d1e2:	480d      	ldr	r0, [pc, #52]	; (800d218 <tcpip_init+0x80>)
 800d1e4:	f00b fba2 	bl	801892c <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	490c      	ldr	r1, [pc, #48]	; (800d224 <tcpip_init+0x8c>)
 800d1f4:	480c      	ldr	r0, [pc, #48]	; (800d228 <tcpip_init+0x90>)
 800d1f6:	f00b f871 	bl	80182dc <sys_thread_new>
}
 800d1fa:	bf00      	nop
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20004a5c 	.word	0x20004a5c
 800d208:	20004a60 	.word	0x20004a60
 800d20c:	20004a64 	.word	0x20004a64
 800d210:	08020abc 	.word	0x08020abc
 800d214:	08020b44 	.word	0x08020b44
 800d218:	08020b0c 	.word	0x08020b0c
 800d21c:	20007f7c 	.word	0x20007f7c
 800d220:	08020b68 	.word	0x08020b68
 800d224:	0800cf29 	.word	0x0800cf29
 800d228:	08020b8c 	.word	0x08020b8c

0800d22c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	4603      	mov	r3, r0
 800d234:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d236:	88fb      	ldrh	r3, [r7, #6]
 800d238:	021b      	lsls	r3, r3, #8
 800d23a:	b21a      	sxth	r2, r3
 800d23c:	88fb      	ldrh	r3, [r7, #6]
 800d23e:	0a1b      	lsrs	r3, r3, #8
 800d240:	b29b      	uxth	r3, r3
 800d242:	b21b      	sxth	r3, r3
 800d244:	4313      	orrs	r3, r2
 800d246:	b21b      	sxth	r3, r3
 800d248:	b29b      	uxth	r3, r3
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	370c      	adds	r7, #12
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d256:	b480      	push	{r7}
 800d258:	b083      	sub	sp, #12
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	061a      	lsls	r2, r3, #24
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	021b      	lsls	r3, r3, #8
 800d266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d26a:	431a      	orrs	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	0a1b      	lsrs	r3, r3, #8
 800d270:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d274:	431a      	orrs	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	0e1b      	lsrs	r3, r3, #24
 800d27a:	4313      	orrs	r3, r2
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d292:	f00a ffdd 	bl	8018250 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d296:	f000 f8d5 	bl	800d444 <mem_init>
  memp_init();
 800d29a:	f000 fc31 	bl	800db00 <memp_init>
  pbuf_init();
  netif_init();
 800d29e:	f000 fcf7 	bl	800dc90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d2a2:	f007 fed3 	bl	801504c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d2a6:	f001 fd9f 	bl	800ede8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d2aa:	f007 fe15 	bl	8014ed8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d2ae:	bf00      	nop
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
	...

0800d2b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	4603      	mov	r3, r0
 800d2c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d2c2:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <ptr_to_mem+0x20>)
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	88fb      	ldrh	r3, [r7, #6]
 800d2c8:	4413      	add	r3, r2
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	370c      	adds	r7, #12
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	20004a68 	.word	0x20004a68

0800d2dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d2e4:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <mem_to_ptr+0x20>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	b29b      	uxth	r3, r3
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	20004a68 	.word	0x20004a68

0800d300 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d300:	b590      	push	{r4, r7, lr}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d308:	4b45      	ldr	r3, [pc, #276]	; (800d420 <plug_holes+0x120>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d206      	bcs.n	800d320 <plug_holes+0x20>
 800d312:	4b44      	ldr	r3, [pc, #272]	; (800d424 <plug_holes+0x124>)
 800d314:	f240 12df 	movw	r2, #479	; 0x1df
 800d318:	4943      	ldr	r1, [pc, #268]	; (800d428 <plug_holes+0x128>)
 800d31a:	4844      	ldr	r0, [pc, #272]	; (800d42c <plug_holes+0x12c>)
 800d31c:	f00b fb06 	bl	801892c <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d320:	4b43      	ldr	r3, [pc, #268]	; (800d430 <plug_holes+0x130>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	429a      	cmp	r2, r3
 800d328:	d306      	bcc.n	800d338 <plug_holes+0x38>
 800d32a:	4b3e      	ldr	r3, [pc, #248]	; (800d424 <plug_holes+0x124>)
 800d32c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d330:	4940      	ldr	r1, [pc, #256]	; (800d434 <plug_holes+0x134>)
 800d332:	483e      	ldr	r0, [pc, #248]	; (800d42c <plug_holes+0x12c>)
 800d334:	f00b fafa 	bl	801892c <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	791b      	ldrb	r3, [r3, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d006      	beq.n	800d34e <plug_holes+0x4e>
 800d340:	4b38      	ldr	r3, [pc, #224]	; (800d424 <plug_holes+0x124>)
 800d342:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d346:	493c      	ldr	r1, [pc, #240]	; (800d438 <plug_holes+0x138>)
 800d348:	4838      	ldr	r0, [pc, #224]	; (800d42c <plug_holes+0x12c>)
 800d34a:	f00b faef 	bl	801892c <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d356:	d906      	bls.n	800d366 <plug_holes+0x66>
 800d358:	4b32      	ldr	r3, [pc, #200]	; (800d424 <plug_holes+0x124>)
 800d35a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d35e:	4937      	ldr	r1, [pc, #220]	; (800d43c <plug_holes+0x13c>)
 800d360:	4832      	ldr	r0, [pc, #200]	; (800d42c <plug_holes+0x12c>)
 800d362:	f00b fae3 	bl	801892c <printf>

  nmem = ptr_to_mem(mem->next);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7ff ffa4 	bl	800d2b8 <ptr_to_mem>
 800d370:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	429a      	cmp	r2, r3
 800d378:	d024      	beq.n	800d3c4 <plug_holes+0xc4>
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	791b      	ldrb	r3, [r3, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d120      	bne.n	800d3c4 <plug_holes+0xc4>
 800d382:	4b2b      	ldr	r3, [pc, #172]	; (800d430 <plug_holes+0x130>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d01b      	beq.n	800d3c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d38c:	4b2c      	ldr	r3, [pc, #176]	; (800d440 <plug_holes+0x140>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	429a      	cmp	r2, r3
 800d394:	d102      	bne.n	800d39c <plug_holes+0x9c>
      lfree = mem;
 800d396:	4a2a      	ldr	r2, [pc, #168]	; (800d440 <plug_holes+0x140>)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	881a      	ldrh	r2, [r3, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3ac:	d00a      	beq.n	800d3c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff ff80 	bl	800d2b8 <ptr_to_mem>
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7ff ff8e 	bl	800d2dc <mem_to_ptr>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	885b      	ldrh	r3, [r3, #2]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff ff75 	bl	800d2b8 <ptr_to_mem>
 800d3ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d01f      	beq.n	800d418 <plug_holes+0x118>
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	791b      	ldrb	r3, [r3, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d11b      	bne.n	800d418 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d3e0:	4b17      	ldr	r3, [pc, #92]	; (800d440 <plug_holes+0x140>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d102      	bne.n	800d3f0 <plug_holes+0xf0>
      lfree = pmem;
 800d3ea:	4a15      	ldr	r2, [pc, #84]	; (800d440 <plug_holes+0x140>)
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	881a      	ldrh	r2, [r3, #0]
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d400:	d00a      	beq.n	800d418 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	4618      	mov	r0, r3
 800d408:	f7ff ff56 	bl	800d2b8 <ptr_to_mem>
 800d40c:	4604      	mov	r4, r0
 800d40e:	68b8      	ldr	r0, [r7, #8]
 800d410:	f7ff ff64 	bl	800d2dc <mem_to_ptr>
 800d414:	4603      	mov	r3, r0
 800d416:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d418:	bf00      	nop
 800d41a:	3714      	adds	r7, #20
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd90      	pop	{r4, r7, pc}
 800d420:	20004a68 	.word	0x20004a68
 800d424:	08020b9c 	.word	0x08020b9c
 800d428:	08020bcc 	.word	0x08020bcc
 800d42c:	08020be4 	.word	0x08020be4
 800d430:	20004a6c 	.word	0x20004a6c
 800d434:	08020c0c 	.word	0x08020c0c
 800d438:	08020c28 	.word	0x08020c28
 800d43c:	08020c44 	.word	0x08020c44
 800d440:	20004a74 	.word	0x20004a74

0800d444 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d44a:	4b1f      	ldr	r3, [pc, #124]	; (800d4c8 <mem_init+0x84>)
 800d44c:	3303      	adds	r3, #3
 800d44e:	f023 0303 	bic.w	r3, r3, #3
 800d452:	461a      	mov	r2, r3
 800d454:	4b1d      	ldr	r3, [pc, #116]	; (800d4cc <mem_init+0x88>)
 800d456:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d458:	4b1c      	ldr	r3, [pc, #112]	; (800d4cc <mem_init+0x88>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d464:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d472:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d476:	f7ff ff1f 	bl	800d2b8 <ptr_to_mem>
 800d47a:	4603      	mov	r3, r0
 800d47c:	4a14      	ldr	r2, [pc, #80]	; (800d4d0 <mem_init+0x8c>)
 800d47e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d480:	4b13      	ldr	r3, [pc, #76]	; (800d4d0 <mem_init+0x8c>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2201      	movs	r2, #1
 800d486:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d488:	4b11      	ldr	r3, [pc, #68]	; (800d4d0 <mem_init+0x8c>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d490:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d492:	4b0f      	ldr	r3, [pc, #60]	; (800d4d0 <mem_init+0x8c>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d49a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d49c:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <mem_init+0x88>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a0c      	ldr	r2, [pc, #48]	; (800d4d4 <mem_init+0x90>)
 800d4a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d4a4:	480c      	ldr	r0, [pc, #48]	; (800d4d8 <mem_init+0x94>)
 800d4a6:	f00a fee1 	bl	801826c <sys_mutex_new>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d006      	beq.n	800d4be <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <mem_init+0x98>)
 800d4b2:	f240 221f 	movw	r2, #543	; 0x21f
 800d4b6:	490a      	ldr	r1, [pc, #40]	; (800d4e0 <mem_init+0x9c>)
 800d4b8:	480a      	ldr	r0, [pc, #40]	; (800d4e4 <mem_init+0xa0>)
 800d4ba:	f00b fa37 	bl	801892c <printf>
  }
}
 800d4be:	bf00      	nop
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	20007f98 	.word	0x20007f98
 800d4cc:	20004a68 	.word	0x20004a68
 800d4d0:	20004a6c 	.word	0x20004a6c
 800d4d4:	20004a74 	.word	0x20004a74
 800d4d8:	20004a70 	.word	0x20004a70
 800d4dc:	08020b9c 	.word	0x08020b9c
 800d4e0:	08020c70 	.word	0x08020c70
 800d4e4:	08020be4 	.word	0x08020be4

0800d4e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff fef3 	bl	800d2dc <mem_to_ptr>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7ff feda 	bl	800d2b8 <ptr_to_mem>
 800d504:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	885b      	ldrh	r3, [r3, #2]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff fed4 	bl	800d2b8 <ptr_to_mem>
 800d510:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	881b      	ldrh	r3, [r3, #0]
 800d516:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d51a:	d818      	bhi.n	800d54e <mem_link_valid+0x66>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	885b      	ldrh	r3, [r3, #2]
 800d520:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d524:	d813      	bhi.n	800d54e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d52a:	8afa      	ldrh	r2, [r7, #22]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d004      	beq.n	800d53a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	8afa      	ldrh	r2, [r7, #22]
 800d536:	429a      	cmp	r2, r3
 800d538:	d109      	bne.n	800d54e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d53a:	4b08      	ldr	r3, [pc, #32]	; (800d55c <mem_link_valid+0x74>)
 800d53c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	429a      	cmp	r2, r3
 800d542:	d006      	beq.n	800d552 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	885b      	ldrh	r3, [r3, #2]
 800d548:	8afa      	ldrh	r2, [r7, #22]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d001      	beq.n	800d552 <mem_link_valid+0x6a>
    return 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	e000      	b.n	800d554 <mem_link_valid+0x6c>
  }
  return 1;
 800d552:	2301      	movs	r3, #1
}
 800d554:	4618      	mov	r0, r3
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20004a6c 	.word	0x20004a6c

0800d560 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d070      	beq.n	800d650 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f003 0303 	and.w	r3, r3, #3
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00d      	beq.n	800d594 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d578:	4b37      	ldr	r3, [pc, #220]	; (800d658 <mem_free+0xf8>)
 800d57a:	f240 2273 	movw	r2, #627	; 0x273
 800d57e:	4937      	ldr	r1, [pc, #220]	; (800d65c <mem_free+0xfc>)
 800d580:	4837      	ldr	r0, [pc, #220]	; (800d660 <mem_free+0x100>)
 800d582:	f00b f9d3 	bl	801892c <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d586:	f00a fecf 	bl	8018328 <sys_arch_protect>
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f00a fed9 	bl	8018344 <sys_arch_unprotect>
    return;
 800d592:	e05e      	b.n	800d652 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3b08      	subs	r3, #8
 800d598:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d59a:	4b32      	ldr	r3, [pc, #200]	; (800d664 <mem_free+0x104>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	69fa      	ldr	r2, [r7, #28]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d306      	bcc.n	800d5b2 <mem_free+0x52>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f103 020c 	add.w	r2, r3, #12
 800d5aa:	4b2f      	ldr	r3, [pc, #188]	; (800d668 <mem_free+0x108>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d90d      	bls.n	800d5ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d5b2:	4b29      	ldr	r3, [pc, #164]	; (800d658 <mem_free+0xf8>)
 800d5b4:	f240 227f 	movw	r2, #639	; 0x27f
 800d5b8:	492c      	ldr	r1, [pc, #176]	; (800d66c <mem_free+0x10c>)
 800d5ba:	4829      	ldr	r0, [pc, #164]	; (800d660 <mem_free+0x100>)
 800d5bc:	f00b f9b6 	bl	801892c <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5c0:	f00a feb2 	bl	8018328 <sys_arch_protect>
 800d5c4:	6138      	str	r0, [r7, #16]
 800d5c6:	6938      	ldr	r0, [r7, #16]
 800d5c8:	f00a febc 	bl	8018344 <sys_arch_unprotect>
    return;
 800d5cc:	e041      	b.n	800d652 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d5ce:	4828      	ldr	r0, [pc, #160]	; (800d670 <mem_free+0x110>)
 800d5d0:	f00a fe68 	bl	80182a4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	791b      	ldrb	r3, [r3, #4]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d110      	bne.n	800d5fe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d5dc:	4b1e      	ldr	r3, [pc, #120]	; (800d658 <mem_free+0xf8>)
 800d5de:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d5e2:	4924      	ldr	r1, [pc, #144]	; (800d674 <mem_free+0x114>)
 800d5e4:	481e      	ldr	r0, [pc, #120]	; (800d660 <mem_free+0x100>)
 800d5e6:	f00b f9a1 	bl	801892c <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800d5ea:	4821      	ldr	r0, [pc, #132]	; (800d670 <mem_free+0x110>)
 800d5ec:	f00a fe69 	bl	80182c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5f0:	f00a fe9a 	bl	8018328 <sys_arch_protect>
 800d5f4:	6178      	str	r0, [r7, #20]
 800d5f6:	6978      	ldr	r0, [r7, #20]
 800d5f8:	f00a fea4 	bl	8018344 <sys_arch_unprotect>
    return;
 800d5fc:	e029      	b.n	800d652 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d5fe:	69f8      	ldr	r0, [r7, #28]
 800d600:	f7ff ff72 	bl	800d4e8 <mem_link_valid>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d110      	bne.n	800d62c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d60a:	4b13      	ldr	r3, [pc, #76]	; (800d658 <mem_free+0xf8>)
 800d60c:	f240 2295 	movw	r2, #661	; 0x295
 800d610:	4919      	ldr	r1, [pc, #100]	; (800d678 <mem_free+0x118>)
 800d612:	4813      	ldr	r0, [pc, #76]	; (800d660 <mem_free+0x100>)
 800d614:	f00b f98a 	bl	801892c <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800d618:	4815      	ldr	r0, [pc, #84]	; (800d670 <mem_free+0x110>)
 800d61a:	f00a fe52 	bl	80182c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d61e:	f00a fe83 	bl	8018328 <sys_arch_protect>
 800d622:	61b8      	str	r0, [r7, #24]
 800d624:	69b8      	ldr	r0, [r7, #24]
 800d626:	f00a fe8d 	bl	8018344 <sys_arch_unprotect>
    return;
 800d62a:	e012      	b.n	800d652 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	2200      	movs	r2, #0
 800d630:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d632:	4b12      	ldr	r3, [pc, #72]	; (800d67c <mem_free+0x11c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	69fa      	ldr	r2, [r7, #28]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d202      	bcs.n	800d642 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d63c:	4a0f      	ldr	r2, [pc, #60]	; (800d67c <mem_free+0x11c>)
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d642:	69f8      	ldr	r0, [r7, #28]
 800d644:	f7ff fe5c 	bl	800d300 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d648:	4809      	ldr	r0, [pc, #36]	; (800d670 <mem_free+0x110>)
 800d64a:	f00a fe3a 	bl	80182c2 <sys_mutex_unlock>
 800d64e:	e000      	b.n	800d652 <mem_free+0xf2>
    return;
 800d650:	bf00      	nop
}
 800d652:	3720      	adds	r7, #32
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	08020b9c 	.word	0x08020b9c
 800d65c:	08020c8c 	.word	0x08020c8c
 800d660:	08020be4 	.word	0x08020be4
 800d664:	20004a68 	.word	0x20004a68
 800d668:	20004a6c 	.word	0x20004a6c
 800d66c:	08020cb0 	.word	0x08020cb0
 800d670:	20004a70 	.word	0x20004a70
 800d674:	08020ccc 	.word	0x08020ccc
 800d678:	08020cf4 	.word	0x08020cf4
 800d67c:	20004a74 	.word	0x20004a74

0800d680 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b088      	sub	sp, #32
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	460b      	mov	r3, r1
 800d68a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d68c:	887b      	ldrh	r3, [r7, #2]
 800d68e:	3303      	adds	r3, #3
 800d690:	b29b      	uxth	r3, r3
 800d692:	f023 0303 	bic.w	r3, r3, #3
 800d696:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d698:	8bfb      	ldrh	r3, [r7, #30]
 800d69a:	2b0b      	cmp	r3, #11
 800d69c:	d801      	bhi.n	800d6a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d69e:	230c      	movs	r3, #12
 800d6a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d6a2:	8bfb      	ldrh	r3, [r7, #30]
 800d6a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6a8:	d803      	bhi.n	800d6b2 <mem_trim+0x32>
 800d6aa:	8bfa      	ldrh	r2, [r7, #30]
 800d6ac:	887b      	ldrh	r3, [r7, #2]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d201      	bcs.n	800d6b6 <mem_trim+0x36>
    return NULL;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	e0d8      	b.n	800d868 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d6b6:	4b6e      	ldr	r3, [pc, #440]	; (800d870 <mem_trim+0x1f0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d304      	bcc.n	800d6ca <mem_trim+0x4a>
 800d6c0:	4b6c      	ldr	r3, [pc, #432]	; (800d874 <mem_trim+0x1f4>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d306      	bcc.n	800d6d8 <mem_trim+0x58>
 800d6ca:	4b6b      	ldr	r3, [pc, #428]	; (800d878 <mem_trim+0x1f8>)
 800d6cc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d6d0:	496a      	ldr	r1, [pc, #424]	; (800d87c <mem_trim+0x1fc>)
 800d6d2:	486b      	ldr	r0, [pc, #428]	; (800d880 <mem_trim+0x200>)
 800d6d4:	f00b f92a 	bl	801892c <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d6d8:	4b65      	ldr	r3, [pc, #404]	; (800d870 <mem_trim+0x1f0>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d304      	bcc.n	800d6ec <mem_trim+0x6c>
 800d6e2:	4b64      	ldr	r3, [pc, #400]	; (800d874 <mem_trim+0x1f4>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d307      	bcc.n	800d6fc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d6ec:	f00a fe1c 	bl	8018328 <sys_arch_protect>
 800d6f0:	60b8      	str	r0, [r7, #8]
 800d6f2:	68b8      	ldr	r0, [r7, #8]
 800d6f4:	f00a fe26 	bl	8018344 <sys_arch_unprotect>
    return rmem;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	e0b5      	b.n	800d868 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3b08      	subs	r3, #8
 800d700:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d702:	69b8      	ldr	r0, [r7, #24]
 800d704:	f7ff fdea 	bl	800d2dc <mem_to_ptr>
 800d708:	4603      	mov	r3, r0
 800d70a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	881a      	ldrh	r2, [r3, #0]
 800d710:	8afb      	ldrh	r3, [r7, #22]
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	b29b      	uxth	r3, r3
 800d716:	3b08      	subs	r3, #8
 800d718:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d71a:	8bfa      	ldrh	r2, [r7, #30]
 800d71c:	8abb      	ldrh	r3, [r7, #20]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d906      	bls.n	800d730 <mem_trim+0xb0>
 800d722:	4b55      	ldr	r3, [pc, #340]	; (800d878 <mem_trim+0x1f8>)
 800d724:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d728:	4956      	ldr	r1, [pc, #344]	; (800d884 <mem_trim+0x204>)
 800d72a:	4855      	ldr	r0, [pc, #340]	; (800d880 <mem_trim+0x200>)
 800d72c:	f00b f8fe 	bl	801892c <printf>
  if (newsize > size) {
 800d730:	8bfa      	ldrh	r2, [r7, #30]
 800d732:	8abb      	ldrh	r3, [r7, #20]
 800d734:	429a      	cmp	r2, r3
 800d736:	d901      	bls.n	800d73c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d738:	2300      	movs	r3, #0
 800d73a:	e095      	b.n	800d868 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d73c:	8bfa      	ldrh	r2, [r7, #30]
 800d73e:	8abb      	ldrh	r3, [r7, #20]
 800d740:	429a      	cmp	r2, r3
 800d742:	d101      	bne.n	800d748 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	e08f      	b.n	800d868 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d748:	484f      	ldr	r0, [pc, #316]	; (800d888 <mem_trim+0x208>)
 800d74a:	f00a fdab 	bl	80182a4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	4618      	mov	r0, r3
 800d754:	f7ff fdb0 	bl	800d2b8 <ptr_to_mem>
 800d758:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	791b      	ldrb	r3, [r3, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d13f      	bne.n	800d7e2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d76a:	d106      	bne.n	800d77a <mem_trim+0xfa>
 800d76c:	4b42      	ldr	r3, [pc, #264]	; (800d878 <mem_trim+0x1f8>)
 800d76e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d772:	4946      	ldr	r1, [pc, #280]	; (800d88c <mem_trim+0x20c>)
 800d774:	4842      	ldr	r0, [pc, #264]	; (800d880 <mem_trim+0x200>)
 800d776:	f00b f8d9 	bl	801892c <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d780:	8afa      	ldrh	r2, [r7, #22]
 800d782:	8bfb      	ldrh	r3, [r7, #30]
 800d784:	4413      	add	r3, r2
 800d786:	b29b      	uxth	r3, r3
 800d788:	3308      	adds	r3, #8
 800d78a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d78c:	4b40      	ldr	r3, [pc, #256]	; (800d890 <mem_trim+0x210>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	429a      	cmp	r2, r3
 800d794:	d106      	bne.n	800d7a4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d796:	89fb      	ldrh	r3, [r7, #14]
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff fd8d 	bl	800d2b8 <ptr_to_mem>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	4a3b      	ldr	r2, [pc, #236]	; (800d890 <mem_trim+0x210>)
 800d7a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d7a4:	89fb      	ldrh	r3, [r7, #14]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7ff fd86 	bl	800d2b8 <ptr_to_mem>
 800d7ac:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	89ba      	ldrh	r2, [r7, #12]
 800d7b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	8afa      	ldrh	r2, [r7, #22]
 800d7be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	89fa      	ldrh	r2, [r7, #14]
 800d7c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7ce:	d047      	beq.n	800d860 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	881b      	ldrh	r3, [r3, #0]
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7ff fd6f 	bl	800d2b8 <ptr_to_mem>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	89fb      	ldrh	r3, [r7, #14]
 800d7de:	8053      	strh	r3, [r2, #2]
 800d7e0:	e03e      	b.n	800d860 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d7e2:	8bfb      	ldrh	r3, [r7, #30]
 800d7e4:	f103 0214 	add.w	r2, r3, #20
 800d7e8:	8abb      	ldrh	r3, [r7, #20]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d838      	bhi.n	800d860 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d7ee:	8afa      	ldrh	r2, [r7, #22]
 800d7f0:	8bfb      	ldrh	r3, [r7, #30]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d802:	d106      	bne.n	800d812 <mem_trim+0x192>
 800d804:	4b1c      	ldr	r3, [pc, #112]	; (800d878 <mem_trim+0x1f8>)
 800d806:	f240 3216 	movw	r2, #790	; 0x316
 800d80a:	4920      	ldr	r1, [pc, #128]	; (800d88c <mem_trim+0x20c>)
 800d80c:	481c      	ldr	r0, [pc, #112]	; (800d880 <mem_trim+0x200>)
 800d80e:	f00b f88d 	bl	801892c <printf>
    mem2 = ptr_to_mem(ptr2);
 800d812:	89fb      	ldrh	r3, [r7, #14]
 800d814:	4618      	mov	r0, r3
 800d816:	f7ff fd4f 	bl	800d2b8 <ptr_to_mem>
 800d81a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d81c:	4b1c      	ldr	r3, [pc, #112]	; (800d890 <mem_trim+0x210>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	429a      	cmp	r2, r3
 800d824:	d202      	bcs.n	800d82c <mem_trim+0x1ac>
      lfree = mem2;
 800d826:	4a1a      	ldr	r2, [pc, #104]	; (800d890 <mem_trim+0x210>)
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	2200      	movs	r2, #0
 800d830:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	881a      	ldrh	r2, [r3, #0]
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	8afa      	ldrh	r2, [r7, #22]
 800d83e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	89fa      	ldrh	r2, [r7, #14]
 800d844:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	881b      	ldrh	r3, [r3, #0]
 800d84a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d84e:	d007      	beq.n	800d860 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	881b      	ldrh	r3, [r3, #0]
 800d854:	4618      	mov	r0, r3
 800d856:	f7ff fd2f 	bl	800d2b8 <ptr_to_mem>
 800d85a:	4602      	mov	r2, r0
 800d85c:	89fb      	ldrh	r3, [r7, #14]
 800d85e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d860:	4809      	ldr	r0, [pc, #36]	; (800d888 <mem_trim+0x208>)
 800d862:	f00a fd2e 	bl	80182c2 <sys_mutex_unlock>
  return rmem;
 800d866:	687b      	ldr	r3, [r7, #4]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3720      	adds	r7, #32
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20004a68 	.word	0x20004a68
 800d874:	20004a6c 	.word	0x20004a6c
 800d878:	08020b9c 	.word	0x08020b9c
 800d87c:	08020d28 	.word	0x08020d28
 800d880:	08020be4 	.word	0x08020be4
 800d884:	08020d40 	.word	0x08020d40
 800d888:	20004a70 	.word	0x20004a70
 800d88c:	08020d60 	.word	0x08020d60
 800d890:	20004a74 	.word	0x20004a74

0800d894 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af00      	add	r7, sp, #0
 800d89a:	4603      	mov	r3, r0
 800d89c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d89e:	88fb      	ldrh	r3, [r7, #6]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <mem_malloc+0x14>
    return NULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	e0e2      	b.n	800da6e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d8a8:	88fb      	ldrh	r3, [r7, #6]
 800d8aa:	3303      	adds	r3, #3
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	f023 0303 	bic.w	r3, r3, #3
 800d8b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d8b4:	8bbb      	ldrh	r3, [r7, #28]
 800d8b6:	2b0b      	cmp	r3, #11
 800d8b8:	d801      	bhi.n	800d8be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d8ba:	230c      	movs	r3, #12
 800d8bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d8be:	8bbb      	ldrh	r3, [r7, #28]
 800d8c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d8c4:	d803      	bhi.n	800d8ce <mem_malloc+0x3a>
 800d8c6:	8bba      	ldrh	r2, [r7, #28]
 800d8c8:	88fb      	ldrh	r3, [r7, #6]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d201      	bcs.n	800d8d2 <mem_malloc+0x3e>
    return NULL;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	e0cd      	b.n	800da6e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d8d2:	4869      	ldr	r0, [pc, #420]	; (800da78 <mem_malloc+0x1e4>)
 800d8d4:	f00a fce6 	bl	80182a4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d8d8:	4b68      	ldr	r3, [pc, #416]	; (800da7c <mem_malloc+0x1e8>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff fcfd 	bl	800d2dc <mem_to_ptr>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	83fb      	strh	r3, [r7, #30]
 800d8e6:	e0b7      	b.n	800da58 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d8e8:	8bfb      	ldrh	r3, [r7, #30]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fce4 	bl	800d2b8 <ptr_to_mem>
 800d8f0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	791b      	ldrb	r3, [r3, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f040 80a7 	bne.w	800da4a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	461a      	mov	r2, r3
 800d902:	8bfb      	ldrh	r3, [r7, #30]
 800d904:	1ad3      	subs	r3, r2, r3
 800d906:	f1a3 0208 	sub.w	r2, r3, #8
 800d90a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d90c:	429a      	cmp	r2, r3
 800d90e:	f0c0 809c 	bcc.w	800da4a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	8bfb      	ldrh	r3, [r7, #30]
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	f1a3 0208 	sub.w	r2, r3, #8
 800d920:	8bbb      	ldrh	r3, [r7, #28]
 800d922:	3314      	adds	r3, #20
 800d924:	429a      	cmp	r2, r3
 800d926:	d333      	bcc.n	800d990 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d928:	8bfa      	ldrh	r2, [r7, #30]
 800d92a:	8bbb      	ldrh	r3, [r7, #28]
 800d92c:	4413      	add	r3, r2
 800d92e:	b29b      	uxth	r3, r3
 800d930:	3308      	adds	r3, #8
 800d932:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d934:	8a7b      	ldrh	r3, [r7, #18]
 800d936:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d93a:	d106      	bne.n	800d94a <mem_malloc+0xb6>
 800d93c:	4b50      	ldr	r3, [pc, #320]	; (800da80 <mem_malloc+0x1ec>)
 800d93e:	f240 3287 	movw	r2, #903	; 0x387
 800d942:	4950      	ldr	r1, [pc, #320]	; (800da84 <mem_malloc+0x1f0>)
 800d944:	4850      	ldr	r0, [pc, #320]	; (800da88 <mem_malloc+0x1f4>)
 800d946:	f00a fff1 	bl	801892c <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d94a:	8a7b      	ldrh	r3, [r7, #18]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff fcb3 	bl	800d2b8 <ptr_to_mem>
 800d952:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	881a      	ldrh	r2, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	8bfa      	ldrh	r2, [r7, #30]
 800d966:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	8a7a      	ldrh	r2, [r7, #18]
 800d96c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2201      	movs	r2, #1
 800d972:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d97c:	d00b      	beq.n	800d996 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	881b      	ldrh	r3, [r3, #0]
 800d982:	4618      	mov	r0, r3
 800d984:	f7ff fc98 	bl	800d2b8 <ptr_to_mem>
 800d988:	4602      	mov	r2, r0
 800d98a:	8a7b      	ldrh	r3, [r7, #18]
 800d98c:	8053      	strh	r3, [r2, #2]
 800d98e:	e002      	b.n	800d996 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2201      	movs	r2, #1
 800d994:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d996:	4b39      	ldr	r3, [pc, #228]	; (800da7c <mem_malloc+0x1e8>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d127      	bne.n	800d9f0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d9a0:	4b36      	ldr	r3, [pc, #216]	; (800da7c <mem_malloc+0x1e8>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d9a6:	e005      	b.n	800d9b4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	881b      	ldrh	r3, [r3, #0]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fc83 	bl	800d2b8 <ptr_to_mem>
 800d9b2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	791b      	ldrb	r3, [r3, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d004      	beq.n	800d9c6 <mem_malloc+0x132>
 800d9bc:	4b33      	ldr	r3, [pc, #204]	; (800da8c <mem_malloc+0x1f8>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	69ba      	ldr	r2, [r7, #24]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d1f0      	bne.n	800d9a8 <mem_malloc+0x114>
          }
          lfree = cur;
 800d9c6:	4a2d      	ldr	r2, [pc, #180]	; (800da7c <mem_malloc+0x1e8>)
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d9cc:	4b2b      	ldr	r3, [pc, #172]	; (800da7c <mem_malloc+0x1e8>)
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	4b2e      	ldr	r3, [pc, #184]	; (800da8c <mem_malloc+0x1f8>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d00b      	beq.n	800d9f0 <mem_malloc+0x15c>
 800d9d8:	4b28      	ldr	r3, [pc, #160]	; (800da7c <mem_malloc+0x1e8>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	791b      	ldrb	r3, [r3, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d006      	beq.n	800d9f0 <mem_malloc+0x15c>
 800d9e2:	4b27      	ldr	r3, [pc, #156]	; (800da80 <mem_malloc+0x1ec>)
 800d9e4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d9e8:	4929      	ldr	r1, [pc, #164]	; (800da90 <mem_malloc+0x1fc>)
 800d9ea:	4827      	ldr	r0, [pc, #156]	; (800da88 <mem_malloc+0x1f4>)
 800d9ec:	f00a ff9e 	bl	801892c <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d9f0:	4821      	ldr	r0, [pc, #132]	; (800da78 <mem_malloc+0x1e4>)
 800d9f2:	f00a fc66 	bl	80182c2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d9f6:	8bba      	ldrh	r2, [r7, #28]
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	3308      	adds	r3, #8
 800d9fe:	4a23      	ldr	r2, [pc, #140]	; (800da8c <mem_malloc+0x1f8>)
 800da00:	6812      	ldr	r2, [r2, #0]
 800da02:	4293      	cmp	r3, r2
 800da04:	d906      	bls.n	800da14 <mem_malloc+0x180>
 800da06:	4b1e      	ldr	r3, [pc, #120]	; (800da80 <mem_malloc+0x1ec>)
 800da08:	f240 32b9 	movw	r2, #953	; 0x3b9
 800da0c:	4921      	ldr	r1, [pc, #132]	; (800da94 <mem_malloc+0x200>)
 800da0e:	481e      	ldr	r0, [pc, #120]	; (800da88 <mem_malloc+0x1f4>)
 800da10:	f00a ff8c 	bl	801892c <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	f003 0303 	and.w	r3, r3, #3
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d006      	beq.n	800da2c <mem_malloc+0x198>
 800da1e:	4b18      	ldr	r3, [pc, #96]	; (800da80 <mem_malloc+0x1ec>)
 800da20:	f240 32bb 	movw	r2, #955	; 0x3bb
 800da24:	491c      	ldr	r1, [pc, #112]	; (800da98 <mem_malloc+0x204>)
 800da26:	4818      	ldr	r0, [pc, #96]	; (800da88 <mem_malloc+0x1f4>)
 800da28:	f00a ff80 	bl	801892c <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	f003 0303 	and.w	r3, r3, #3
 800da32:	2b00      	cmp	r3, #0
 800da34:	d006      	beq.n	800da44 <mem_malloc+0x1b0>
 800da36:	4b12      	ldr	r3, [pc, #72]	; (800da80 <mem_malloc+0x1ec>)
 800da38:	f240 32bd 	movw	r2, #957	; 0x3bd
 800da3c:	4917      	ldr	r1, [pc, #92]	; (800da9c <mem_malloc+0x208>)
 800da3e:	4812      	ldr	r0, [pc, #72]	; (800da88 <mem_malloc+0x1f4>)
 800da40:	f00a ff74 	bl	801892c <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	3308      	adds	r3, #8
 800da48:	e011      	b.n	800da6e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800da4a:	8bfb      	ldrh	r3, [r7, #30]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff fc33 	bl	800d2b8 <ptr_to_mem>
 800da52:	4603      	mov	r3, r0
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800da58:	8bfa      	ldrh	r2, [r7, #30]
 800da5a:	8bbb      	ldrh	r3, [r7, #28]
 800da5c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800da60:	429a      	cmp	r2, r3
 800da62:	f4ff af41 	bcc.w	800d8e8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800da66:	4804      	ldr	r0, [pc, #16]	; (800da78 <mem_malloc+0x1e4>)
 800da68:	f00a fc2b 	bl	80182c2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3720      	adds	r7, #32
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	20004a70 	.word	0x20004a70
 800da7c:	20004a74 	.word	0x20004a74
 800da80:	08020b9c 	.word	0x08020b9c
 800da84:	08020d60 	.word	0x08020d60
 800da88:	08020be4 	.word	0x08020be4
 800da8c:	20004a6c 	.word	0x20004a6c
 800da90:	08020d74 	.word	0x08020d74
 800da94:	08020d90 	.word	0x08020d90
 800da98:	08020dc0 	.word	0x08020dc0
 800da9c:	08020df0 	.word	0x08020df0

0800daa0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	2200      	movs	r2, #0
 800daae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	3303      	adds	r3, #3
 800dab6:	f023 0303 	bic.w	r3, r3, #3
 800daba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800dabc:	2300      	movs	r3, #0
 800dabe:	60fb      	str	r3, [r7, #12]
 800dac0:	e011      	b.n	800dae6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	881b      	ldrh	r3, [r3, #0]
 800dad8:	461a      	mov	r2, r3
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	4413      	add	r3, r2
 800dade:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3301      	adds	r3, #1
 800dae4:	60fb      	str	r3, [r7, #12]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	885b      	ldrh	r3, [r3, #2]
 800daea:	461a      	mov	r2, r3
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	4293      	cmp	r3, r2
 800daf0:	dbe7      	blt.n	800dac2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800daf2:	bf00      	nop
 800daf4:	bf00      	nop
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db06:	2300      	movs	r3, #0
 800db08:	80fb      	strh	r3, [r7, #6]
 800db0a:	e009      	b.n	800db20 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800db0c:	88fb      	ldrh	r3, [r7, #6]
 800db0e:	4a08      	ldr	r2, [pc, #32]	; (800db30 <memp_init+0x30>)
 800db10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff ffc3 	bl	800daa0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db1a:	88fb      	ldrh	r3, [r7, #6]
 800db1c:	3301      	adds	r3, #1
 800db1e:	80fb      	strh	r3, [r7, #6]
 800db20:	88fb      	ldrh	r3, [r7, #6]
 800db22:	2b0c      	cmp	r3, #12
 800db24:	d9f2      	bls.n	800db0c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800db26:	bf00      	nop
 800db28:	bf00      	nop
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	080235fc 	.word	0x080235fc

0800db34 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800db3c:	f00a fbf4 	bl	8018328 <sys_arch_protect>
 800db40:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d015      	beq.n	800db7c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	6812      	ldr	r2, [r2, #0]
 800db58:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	f003 0303 	and.w	r3, r3, #3
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <do_memp_malloc_pool+0x3e>
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <do_memp_malloc_pool+0x58>)
 800db66:	f44f 728c 	mov.w	r2, #280	; 0x118
 800db6a:	4909      	ldr	r1, [pc, #36]	; (800db90 <do_memp_malloc_pool+0x5c>)
 800db6c:	4809      	ldr	r0, [pc, #36]	; (800db94 <do_memp_malloc_pool+0x60>)
 800db6e:	f00a fedd 	bl	801892c <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f00a fbe6 	bl	8018344 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	e003      	b.n	800db84 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f00a fbe1 	bl	8018344 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	08020e14 	.word	0x08020e14
 800db90:	08020e44 	.word	0x08020e44
 800db94:	08020e68 	.word	0x08020e68

0800db98 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	4603      	mov	r3, r0
 800dba0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dba2:	79fb      	ldrb	r3, [r7, #7]
 800dba4:	2b0c      	cmp	r3, #12
 800dba6:	d908      	bls.n	800dbba <memp_malloc+0x22>
 800dba8:	4b0a      	ldr	r3, [pc, #40]	; (800dbd4 <memp_malloc+0x3c>)
 800dbaa:	f240 1257 	movw	r2, #343	; 0x157
 800dbae:	490a      	ldr	r1, [pc, #40]	; (800dbd8 <memp_malloc+0x40>)
 800dbb0:	480a      	ldr	r0, [pc, #40]	; (800dbdc <memp_malloc+0x44>)
 800dbb2:	f00a febb 	bl	801892c <printf>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	e008      	b.n	800dbcc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	4a08      	ldr	r2, [pc, #32]	; (800dbe0 <memp_malloc+0x48>)
 800dbbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff ffb6 	bl	800db34 <do_memp_malloc_pool>
 800dbc8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dbca:	68fb      	ldr	r3, [r7, #12]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3710      	adds	r7, #16
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	08020e14 	.word	0x08020e14
 800dbd8:	08020ea4 	.word	0x08020ea4
 800dbdc:	08020e68 	.word	0x08020e68
 800dbe0:	080235fc 	.word	0x080235fc

0800dbe4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	f003 0303 	and.w	r3, r3, #3
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d006      	beq.n	800dc06 <do_memp_free_pool+0x22>
 800dbf8:	4b0d      	ldr	r3, [pc, #52]	; (800dc30 <do_memp_free_pool+0x4c>)
 800dbfa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dbfe:	490d      	ldr	r1, [pc, #52]	; (800dc34 <do_memp_free_pool+0x50>)
 800dc00:	480d      	ldr	r0, [pc, #52]	; (800dc38 <do_memp_free_pool+0x54>)
 800dc02:	f00a fe93 	bl	801892c <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dc0a:	f00a fb8d 	bl	8018328 <sys_arch_protect>
 800dc0e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dc22:	68b8      	ldr	r0, [r7, #8]
 800dc24:	f00a fb8e 	bl	8018344 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dc28:	bf00      	nop
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	08020e14 	.word	0x08020e14
 800dc34:	08020ec4 	.word	0x08020ec4
 800dc38:	08020e68 	.word	0x08020e68

0800dc3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	4603      	mov	r3, r0
 800dc44:	6039      	str	r1, [r7, #0]
 800dc46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dc48:	79fb      	ldrb	r3, [r7, #7]
 800dc4a:	2b0c      	cmp	r3, #12
 800dc4c:	d907      	bls.n	800dc5e <memp_free+0x22>
 800dc4e:	4b0c      	ldr	r3, [pc, #48]	; (800dc80 <memp_free+0x44>)
 800dc50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dc54:	490b      	ldr	r1, [pc, #44]	; (800dc84 <memp_free+0x48>)
 800dc56:	480c      	ldr	r0, [pc, #48]	; (800dc88 <memp_free+0x4c>)
 800dc58:	f00a fe68 	bl	801892c <printf>
 800dc5c:	e00c      	b.n	800dc78 <memp_free+0x3c>

  if (mem == NULL) {
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d008      	beq.n	800dc76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dc64:	79fb      	ldrb	r3, [r7, #7]
 800dc66:	4a09      	ldr	r2, [pc, #36]	; (800dc8c <memp_free+0x50>)
 800dc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff ffb8 	bl	800dbe4 <do_memp_free_pool>
 800dc74:	e000      	b.n	800dc78 <memp_free+0x3c>
    return;
 800dc76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	08020e14 	.word	0x08020e14
 800dc84:	08020ee4 	.word	0x08020ee4
 800dc88:	08020e68 	.word	0x08020e68
 800dc8c:	080235fc 	.word	0x080235fc

0800dc90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dc90:	b480      	push	{r7}
 800dc92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dc94:	bf00      	nop
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
	...

0800dca0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d108      	bne.n	800dcc6 <netif_add+0x26>
 800dcb4:	4b56      	ldr	r3, [pc, #344]	; (800de10 <netif_add+0x170>)
 800dcb6:	f240 1227 	movw	r2, #295	; 0x127
 800dcba:	4956      	ldr	r1, [pc, #344]	; (800de14 <netif_add+0x174>)
 800dcbc:	4856      	ldr	r0, [pc, #344]	; (800de18 <netif_add+0x178>)
 800dcbe:	f00a fe35 	bl	801892c <printf>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e09f      	b.n	800de06 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d108      	bne.n	800dcde <netif_add+0x3e>
 800dccc:	4b50      	ldr	r3, [pc, #320]	; (800de10 <netif_add+0x170>)
 800dcce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dcd2:	4952      	ldr	r1, [pc, #328]	; (800de1c <netif_add+0x17c>)
 800dcd4:	4850      	ldr	r0, [pc, #320]	; (800de18 <netif_add+0x178>)
 800dcd6:	f00a fe29 	bl	801892c <printf>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	e093      	b.n	800de06 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d101      	bne.n	800dce8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dce4:	4b4e      	ldr	r3, [pc, #312]	; (800de20 <netif_add+0x180>)
 800dce6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d101      	bne.n	800dcf2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dcee:	4b4c      	ldr	r3, [pc, #304]	; (800de20 <netif_add+0x180>)
 800dcf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d101      	bne.n	800dcfc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dcf8:	4b49      	ldr	r3, [pc, #292]	; (800de20 <netif_add+0x180>)
 800dcfa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	4a44      	ldr	r2, [pc, #272]	; (800de24 <netif_add+0x184>)
 800dd12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	6a3a      	ldr	r2, [r7, #32]
 800dd26:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800dd28:	4b3f      	ldr	r3, [pc, #252]	; (800de28 <netif_add+0x188>)
 800dd2a:	781a      	ldrb	r2, [r3, #0]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd36:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	68b9      	ldr	r1, [r7, #8]
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f000 f914 	bl	800df6c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	4798      	blx	r3
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d001      	beq.n	800dd54 <netif_add+0xb4>
    return NULL;
 800dd50:	2300      	movs	r3, #0
 800dd52:	e058      	b.n	800de06 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dd5a:	2bff      	cmp	r3, #255	; 0xff
 800dd5c:	d103      	bne.n	800dd66 <netif_add+0xc6>
        netif->num = 0;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd6a:	4b30      	ldr	r3, [pc, #192]	; (800de2c <netif_add+0x18c>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	617b      	str	r3, [r7, #20]
 800dd70:	e02b      	b.n	800ddca <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d106      	bne.n	800dd88 <netif_add+0xe8>
 800dd7a:	4b25      	ldr	r3, [pc, #148]	; (800de10 <netif_add+0x170>)
 800dd7c:	f240 128b 	movw	r2, #395	; 0x18b
 800dd80:	492b      	ldr	r1, [pc, #172]	; (800de30 <netif_add+0x190>)
 800dd82:	4825      	ldr	r0, [pc, #148]	; (800de18 <netif_add+0x178>)
 800dd84:	f00a fdd2 	bl	801892c <printf>
        num_netifs++;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2bff      	cmp	r3, #255	; 0xff
 800dd92:	dd06      	ble.n	800dda2 <netif_add+0x102>
 800dd94:	4b1e      	ldr	r3, [pc, #120]	; (800de10 <netif_add+0x170>)
 800dd96:	f240 128d 	movw	r2, #397	; 0x18d
 800dd9a:	4926      	ldr	r1, [pc, #152]	; (800de34 <netif_add+0x194>)
 800dd9c:	481e      	ldr	r0, [pc, #120]	; (800de18 <netif_add+0x178>)
 800dd9e:	f00a fdc5 	bl	801892c <printf>
        if (netif2->num == netif->num) {
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d108      	bne.n	800ddc4 <netif_add+0x124>
          netif->num++;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ddb8:	3301      	adds	r3, #1
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800ddc2:	e005      	b.n	800ddd0 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	617b      	str	r3, [r7, #20]
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1d0      	bne.n	800dd72 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d1be      	bne.n	800dd54 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dddc:	2bfe      	cmp	r3, #254	; 0xfe
 800ddde:	d103      	bne.n	800dde8 <netif_add+0x148>
    netif_num = 0;
 800dde0:	4b11      	ldr	r3, [pc, #68]	; (800de28 <netif_add+0x188>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	701a      	strb	r2, [r3, #0]
 800dde6:	e006      	b.n	800ddf6 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ddee:	3301      	adds	r3, #1
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	4b0d      	ldr	r3, [pc, #52]	; (800de28 <netif_add+0x188>)
 800ddf4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ddf6:	4b0d      	ldr	r3, [pc, #52]	; (800de2c <netif_add+0x18c>)
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ddfe:	4a0b      	ldr	r2, [pc, #44]	; (800de2c <netif_add+0x18c>)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800de04:	68fb      	ldr	r3, [r7, #12]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3718      	adds	r7, #24
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	08020f00 	.word	0x08020f00
 800de14:	08020f94 	.word	0x08020f94
 800de18:	08020f50 	.word	0x08020f50
 800de1c:	08020fb0 	.word	0x08020fb0
 800de20:	08023670 	.word	0x08023670
 800de24:	0800e15d 	.word	0x0800e15d
 800de28:	20004aac 	.word	0x20004aac
 800de2c:	2000b684 	.word	0x2000b684
 800de30:	08020fd4 	.word	0x08020fd4
 800de34:	08020fe8 	.word	0x08020fe8

0800de38 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800de42:	6839      	ldr	r1, [r7, #0]
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f002 fd1f 	bl	8010888 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f007 fdb7 	bl	80159c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800de52:	bf00      	nop
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
	...

0800de5c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d106      	bne.n	800de7c <netif_do_set_ipaddr+0x20>
 800de6e:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <netif_do_set_ipaddr+0x88>)
 800de70:	f240 12cb 	movw	r2, #459	; 0x1cb
 800de74:	491c      	ldr	r1, [pc, #112]	; (800dee8 <netif_do_set_ipaddr+0x8c>)
 800de76:	481d      	ldr	r0, [pc, #116]	; (800deec <netif_do_set_ipaddr+0x90>)
 800de78:	f00a fd58 	bl	801892c <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d106      	bne.n	800de90 <netif_do_set_ipaddr+0x34>
 800de82:	4b18      	ldr	r3, [pc, #96]	; (800dee4 <netif_do_set_ipaddr+0x88>)
 800de84:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800de88:	4917      	ldr	r1, [pc, #92]	; (800dee8 <netif_do_set_ipaddr+0x8c>)
 800de8a:	4818      	ldr	r0, [pc, #96]	; (800deec <netif_do_set_ipaddr+0x90>)
 800de8c:	f00a fd4e 	bl	801892c <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	3304      	adds	r3, #4
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d01c      	beq.n	800ded8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3304      	adds	r3, #4
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800deae:	f107 0314 	add.w	r3, r7, #20
 800deb2:	4619      	mov	r1, r3
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f7ff ffbf 	bl	800de38 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <netif_do_set_ipaddr+0x6a>
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	e000      	b.n	800dec8 <netif_do_set_ipaddr+0x6c>
 800dec6:	2300      	movs	r3, #0
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800decc:	2101      	movs	r1, #1
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f000 f8d2 	bl	800e078 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ded4:	2301      	movs	r3, #1
 800ded6:	e000      	b.n	800deda <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3718      	adds	r7, #24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	08020f00 	.word	0x08020f00
 800dee8:	08021018 	.word	0x08021018
 800deec:	08020f50 	.word	0x08020f50

0800def0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3308      	adds	r3, #8
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	429a      	cmp	r2, r3
 800df08:	d00a      	beq.n	800df20 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <netif_do_set_netmask+0x26>
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	e000      	b.n	800df18 <netif_do_set_netmask+0x28>
 800df16:	2300      	movs	r3, #0
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800df1c:	2301      	movs	r3, #1
 800df1e:	e000      	b.n	800df22 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800df2e:	b480      	push	{r7}
 800df30:	b085      	sub	sp, #20
 800df32:	af00      	add	r7, sp, #0
 800df34:	60f8      	str	r0, [r7, #12]
 800df36:	60b9      	str	r1, [r7, #8]
 800df38:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	330c      	adds	r3, #12
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	429a      	cmp	r2, r3
 800df46:	d00a      	beq.n	800df5e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d002      	beq.n	800df54 <netif_do_set_gw+0x26>
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	e000      	b.n	800df56 <netif_do_set_gw+0x28>
 800df54:	2300      	movs	r3, #0
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800df5a:	2301      	movs	r3, #1
 800df5c:	e000      	b.n	800df60 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	3714      	adds	r7, #20
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b088      	sub	sp, #32
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
 800df78:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800df88:	4b1c      	ldr	r3, [pc, #112]	; (800dffc <netif_set_addr+0x90>)
 800df8a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d101      	bne.n	800df96 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800df92:	4b1a      	ldr	r3, [pc, #104]	; (800dffc <netif_set_addr+0x90>)
 800df94:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d101      	bne.n	800dfa0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800df9c:	4b17      	ldr	r3, [pc, #92]	; (800dffc <netif_set_addr+0x90>)
 800df9e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d003      	beq.n	800dfae <netif_set_addr+0x42>
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d101      	bne.n	800dfb2 <netif_set_addr+0x46>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e000      	b.n	800dfb4 <netif_set_addr+0x48>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d006      	beq.n	800dfca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dfbc:	f107 0310 	add.w	r3, r7, #16
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	68b9      	ldr	r1, [r7, #8]
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f7ff ff49 	bl	800de5c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dfca:	69fa      	ldr	r2, [r7, #28]
 800dfcc:	6879      	ldr	r1, [r7, #4]
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f7ff ff8e 	bl	800def0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dfd4:	69ba      	ldr	r2, [r7, #24]
 800dfd6:	6839      	ldr	r1, [r7, #0]
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f7ff ffa8 	bl	800df2e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d106      	bne.n	800dff2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dfe4:	f107 0310 	add.w	r3, r7, #16
 800dfe8:	461a      	mov	r2, r3
 800dfea:	68b9      	ldr	r1, [r7, #8]
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f7ff ff35 	bl	800de5c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dff2:	bf00      	nop
 800dff4:	3720      	adds	r7, #32
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	08023670 	.word	0x08023670

0800e000 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e008:	4a04      	ldr	r2, [pc, #16]	; (800e01c <netif_set_default+0x1c>)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e00e:	bf00      	nop
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	2000b688 	.word	0x2000b688

0800e020 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d107      	bne.n	800e03e <netif_set_up+0x1e>
 800e02e:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <netif_set_up+0x4c>)
 800e030:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e034:	490e      	ldr	r1, [pc, #56]	; (800e070 <netif_set_up+0x50>)
 800e036:	480f      	ldr	r0, [pc, #60]	; (800e074 <netif_set_up+0x54>)
 800e038:	f00a fc78 	bl	801892c <printf>
 800e03c:	e013      	b.n	800e066 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d10c      	bne.n	800e066 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e052:	f043 0301 	orr.w	r3, r3, #1
 800e056:	b2da      	uxtb	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e05e:	2103      	movs	r1, #3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 f809 	bl	800e078 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	08020f00 	.word	0x08020f00
 800e070:	08021088 	.word	0x08021088
 800e074:	08020f50 	.word	0x08020f50

0800e078 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	460b      	mov	r3, r1
 800e082:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d106      	bne.n	800e098 <netif_issue_reports+0x20>
 800e08a:	4b18      	ldr	r3, [pc, #96]	; (800e0ec <netif_issue_reports+0x74>)
 800e08c:	f240 326d 	movw	r2, #877	; 0x36d
 800e090:	4917      	ldr	r1, [pc, #92]	; (800e0f0 <netif_issue_reports+0x78>)
 800e092:	4818      	ldr	r0, [pc, #96]	; (800e0f4 <netif_issue_reports+0x7c>)
 800e094:	f00a fc4a 	bl	801892c <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e09e:	f003 0304 	and.w	r3, r3, #4
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d01e      	beq.n	800e0e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e0ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d017      	beq.n	800e0e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e0b4:	78fb      	ldrb	r3, [r7, #3]
 800e0b6:	f003 0301 	and.w	r3, r3, #1
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d013      	beq.n	800e0e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3304      	adds	r3, #4
 800e0c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00e      	beq.n	800e0e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e0ce:	f003 0308 	and.w	r3, r3, #8
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d007      	beq.n	800e0e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	3304      	adds	r3, #4
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f008 fbd9 	bl	8016894 <etharp_request>
 800e0e2:	e000      	b.n	800e0e6 <netif_issue_reports+0x6e>
    return;
 800e0e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	08020f00 	.word	0x08020f00
 800e0f0:	080210a4 	.word	0x080210a4
 800e0f4:	08020f50 	.word	0x08020f50

0800e0f8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d107      	bne.n	800e116 <netif_set_down+0x1e>
 800e106:	4b12      	ldr	r3, [pc, #72]	; (800e150 <netif_set_down+0x58>)
 800e108:	f240 329b 	movw	r2, #923	; 0x39b
 800e10c:	4911      	ldr	r1, [pc, #68]	; (800e154 <netif_set_down+0x5c>)
 800e10e:	4812      	ldr	r0, [pc, #72]	; (800e158 <netif_set_down+0x60>)
 800e110:	f00a fc0c 	bl	801892c <printf>
 800e114:	e019      	b.n	800e14a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	2b00      	cmp	r3, #0
 800e122:	d012      	beq.n	800e14a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e12a:	f023 0301 	bic.w	r3, r3, #1
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e13c:	f003 0308 	and.w	r3, r3, #8
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f007 ff63 	bl	8016010 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	08020f00 	.word	0x08020f00
 800e154:	080210c8 	.word	0x080210c8
 800e158:	08020f50 	.word	0x08020f50

0800e15c <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e168:	f06f 030b 	mvn.w	r3, #11
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3714      	adds	r7, #20
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	4603      	mov	r3, r0
 800e180:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e182:	79fb      	ldrb	r3, [r7, #7]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d013      	beq.n	800e1b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e188:	4b0d      	ldr	r3, [pc, #52]	; (800e1c0 <netif_get_by_index+0x48>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	60fb      	str	r3, [r7, #12]
 800e18e:	e00c      	b.n	800e1aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e196:	3301      	adds	r3, #1
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	79fa      	ldrb	r2, [r7, #7]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d101      	bne.n	800e1a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	e006      	b.n	800e1b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1ef      	bne.n	800e190 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	2000b684 	.word	0x2000b684

0800e1c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e1ca:	f00a f8ad 	bl	8018328 <sys_arch_protect>
 800e1ce:	6038      	str	r0, [r7, #0]
 800e1d0:	4b0d      	ldr	r3, [pc, #52]	; (800e208 <pbuf_free_ooseq+0x44>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	701a      	strb	r2, [r3, #0]
 800e1d6:	6838      	ldr	r0, [r7, #0]
 800e1d8:	f00a f8b4 	bl	8018344 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e1dc:	4b0b      	ldr	r3, [pc, #44]	; (800e20c <pbuf_free_ooseq+0x48>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	607b      	str	r3, [r7, #4]
 800e1e2:	e00a      	b.n	800e1fa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d003      	beq.n	800e1f4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f002 fb89 	bl	8010904 <tcp_free_ooseq>
      return;
 800e1f2:	e005      	b.n	800e200 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	607b      	str	r3, [r7, #4]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1f1      	bne.n	800e1e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	2000b68c 	.word	0x2000b68c
 800e20c:	2000b694 	.word	0x2000b694

0800e210 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e218:	f7ff ffd4 	bl	800e1c4 <pbuf_free_ooseq>
}
 800e21c:	bf00      	nop
 800e21e:	3708      	adds	r7, #8
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e22a:	f00a f87d 	bl	8018328 <sys_arch_protect>
 800e22e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e230:	4b0f      	ldr	r3, [pc, #60]	; (800e270 <pbuf_pool_is_empty+0x4c>)
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e236:	4b0e      	ldr	r3, [pc, #56]	; (800e270 <pbuf_pool_is_empty+0x4c>)
 800e238:	2201      	movs	r2, #1
 800e23a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f00a f881 	bl	8018344 <sys_arch_unprotect>

  if (!queued) {
 800e242:	78fb      	ldrb	r3, [r7, #3]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d10f      	bne.n	800e268 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e248:	2100      	movs	r1, #0
 800e24a:	480a      	ldr	r0, [pc, #40]	; (800e274 <pbuf_pool_is_empty+0x50>)
 800e24c:	f7fe ff4e 	bl	800d0ec <tcpip_try_callback>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d008      	beq.n	800e268 <pbuf_pool_is_empty+0x44>
 800e256:	f00a f867 	bl	8018328 <sys_arch_protect>
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	4b04      	ldr	r3, [pc, #16]	; (800e270 <pbuf_pool_is_empty+0x4c>)
 800e25e:	2200      	movs	r2, #0
 800e260:	701a      	strb	r2, [r3, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f00a f86e 	bl	8018344 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e268:	bf00      	nop
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	2000b68c 	.word	0x2000b68c
 800e274:	0800e211 	.word	0x0800e211

0800e278 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	4611      	mov	r1, r2
 800e284:	461a      	mov	r2, r3
 800e286:	460b      	mov	r3, r1
 800e288:	80fb      	strh	r3, [r7, #6]
 800e28a:	4613      	mov	r3, r2
 800e28c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	88fa      	ldrh	r2, [r7, #6]
 800e29e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	88ba      	ldrh	r2, [r7, #4]
 800e2a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e2a6:	8b3b      	ldrh	r3, [r7, #24]
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	7f3a      	ldrb	r2, [r7, #28]
 800e2b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	73da      	strb	r2, [r3, #15]
}
 800e2c0:	bf00      	nop
 800e2c2:	3714      	adds	r7, #20
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b08c      	sub	sp, #48	; 0x30
 800e2d0:	af02      	add	r7, sp, #8
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	71fb      	strb	r3, [r7, #7]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	80bb      	strh	r3, [r7, #4]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e2e2:	887b      	ldrh	r3, [r7, #2]
 800e2e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e2e8:	d07f      	beq.n	800e3ea <pbuf_alloc+0x11e>
 800e2ea:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e2ee:	f300 80c8 	bgt.w	800e482 <pbuf_alloc+0x1b6>
 800e2f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e2f6:	d010      	beq.n	800e31a <pbuf_alloc+0x4e>
 800e2f8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e2fc:	f300 80c1 	bgt.w	800e482 <pbuf_alloc+0x1b6>
 800e300:	2b01      	cmp	r3, #1
 800e302:	d002      	beq.n	800e30a <pbuf_alloc+0x3e>
 800e304:	2b41      	cmp	r3, #65	; 0x41
 800e306:	f040 80bc 	bne.w	800e482 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e30a:	887a      	ldrh	r2, [r7, #2]
 800e30c:	88bb      	ldrh	r3, [r7, #4]
 800e30e:	4619      	mov	r1, r3
 800e310:	2000      	movs	r0, #0
 800e312:	f000 f8d1 	bl	800e4b8 <pbuf_alloc_reference>
 800e316:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e318:	e0bd      	b.n	800e496 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e31a:	2300      	movs	r3, #0
 800e31c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e31e:	2300      	movs	r3, #0
 800e320:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e322:	88bb      	ldrh	r3, [r7, #4]
 800e324:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e326:	200c      	movs	r0, #12
 800e328:	f7ff fc36 	bl	800db98 <memp_malloc>
 800e32c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d109      	bne.n	800e348 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e334:	f7ff ff76 	bl	800e224 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d002      	beq.n	800e344 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e33e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e340:	f000 faa8 	bl	800e894 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e344:	2300      	movs	r3, #0
 800e346:	e0a7      	b.n	800e498 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e34a:	3303      	adds	r3, #3
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	f023 0303 	bic.w	r3, r3, #3
 800e352:	b29b      	uxth	r3, r3
 800e354:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e358:	b29b      	uxth	r3, r3
 800e35a:	8b7a      	ldrh	r2, [r7, #26]
 800e35c:	4293      	cmp	r3, r2
 800e35e:	bf28      	it	cs
 800e360:	4613      	movcs	r3, r2
 800e362:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e366:	3310      	adds	r3, #16
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	4413      	add	r3, r2
 800e36c:	3303      	adds	r3, #3
 800e36e:	f023 0303 	bic.w	r3, r3, #3
 800e372:	4618      	mov	r0, r3
 800e374:	89f9      	ldrh	r1, [r7, #14]
 800e376:	8b7a      	ldrh	r2, [r7, #26]
 800e378:	2300      	movs	r3, #0
 800e37a:	9301      	str	r3, [sp, #4]
 800e37c:	887b      	ldrh	r3, [r7, #2]
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	460b      	mov	r3, r1
 800e382:	4601      	mov	r1, r0
 800e384:	6938      	ldr	r0, [r7, #16]
 800e386:	f7ff ff77 	bl	800e278 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	f003 0303 	and.w	r3, r3, #3
 800e392:	2b00      	cmp	r3, #0
 800e394:	d006      	beq.n	800e3a4 <pbuf_alloc+0xd8>
 800e396:	4b42      	ldr	r3, [pc, #264]	; (800e4a0 <pbuf_alloc+0x1d4>)
 800e398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e39c:	4941      	ldr	r1, [pc, #260]	; (800e4a4 <pbuf_alloc+0x1d8>)
 800e39e:	4842      	ldr	r0, [pc, #264]	; (800e4a8 <pbuf_alloc+0x1dc>)
 800e3a0:	f00a fac4 	bl	801892c <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e3a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3a6:	3303      	adds	r3, #3
 800e3a8:	f023 0303 	bic.w	r3, r3, #3
 800e3ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e3b0:	d106      	bne.n	800e3c0 <pbuf_alloc+0xf4>
 800e3b2:	4b3b      	ldr	r3, [pc, #236]	; (800e4a0 <pbuf_alloc+0x1d4>)
 800e3b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e3b8:	493c      	ldr	r1, [pc, #240]	; (800e4ac <pbuf_alloc+0x1e0>)
 800e3ba:	483b      	ldr	r0, [pc, #236]	; (800e4a8 <pbuf_alloc+0x1dc>)
 800e3bc:	f00a fab6 	bl	801892c <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ca:	e002      	b.n	800e3d2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e3d6:	8b7a      	ldrh	r2, [r7, #26]
 800e3d8:	89fb      	ldrh	r3, [r7, #14]
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e3e2:	8b7b      	ldrh	r3, [r7, #26]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d19e      	bne.n	800e326 <pbuf_alloc+0x5a>
      break;
 800e3e8:	e055      	b.n	800e496 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e3ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3ec:	3303      	adds	r3, #3
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	f023 0303 	bic.w	r3, r3, #3
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	88bb      	ldrh	r3, [r7, #4]
 800e3f8:	3303      	adds	r3, #3
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	f023 0303 	bic.w	r3, r3, #3
 800e400:	b29b      	uxth	r3, r3
 800e402:	4413      	add	r3, r2
 800e404:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e406:	8b3b      	ldrh	r3, [r7, #24]
 800e408:	3310      	adds	r3, #16
 800e40a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e40c:	8b3a      	ldrh	r2, [r7, #24]
 800e40e:	88bb      	ldrh	r3, [r7, #4]
 800e410:	3303      	adds	r3, #3
 800e412:	f023 0303 	bic.w	r3, r3, #3
 800e416:	429a      	cmp	r2, r3
 800e418:	d306      	bcc.n	800e428 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e41a:	8afa      	ldrh	r2, [r7, #22]
 800e41c:	88bb      	ldrh	r3, [r7, #4]
 800e41e:	3303      	adds	r3, #3
 800e420:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e424:	429a      	cmp	r2, r3
 800e426:	d201      	bcs.n	800e42c <pbuf_alloc+0x160>
        return NULL;
 800e428:	2300      	movs	r3, #0
 800e42a:	e035      	b.n	800e498 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e42c:	8afb      	ldrh	r3, [r7, #22]
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fa30 	bl	800d894 <mem_malloc>
 800e434:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d101      	bne.n	800e440 <pbuf_alloc+0x174>
        return NULL;
 800e43c:	2300      	movs	r3, #0
 800e43e:	e02b      	b.n	800e498 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e440:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e442:	3310      	adds	r3, #16
 800e444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e446:	4413      	add	r3, r2
 800e448:	3303      	adds	r3, #3
 800e44a:	f023 0303 	bic.w	r3, r3, #3
 800e44e:	4618      	mov	r0, r3
 800e450:	88b9      	ldrh	r1, [r7, #4]
 800e452:	88ba      	ldrh	r2, [r7, #4]
 800e454:	2300      	movs	r3, #0
 800e456:	9301      	str	r3, [sp, #4]
 800e458:	887b      	ldrh	r3, [r7, #2]
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	460b      	mov	r3, r1
 800e45e:	4601      	mov	r1, r0
 800e460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e462:	f7ff ff09 	bl	800e278 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	f003 0303 	and.w	r3, r3, #3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d010      	beq.n	800e494 <pbuf_alloc+0x1c8>
 800e472:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <pbuf_alloc+0x1d4>)
 800e474:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e478:	490d      	ldr	r1, [pc, #52]	; (800e4b0 <pbuf_alloc+0x1e4>)
 800e47a:	480b      	ldr	r0, [pc, #44]	; (800e4a8 <pbuf_alloc+0x1dc>)
 800e47c:	f00a fa56 	bl	801892c <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e480:	e008      	b.n	800e494 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e482:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <pbuf_alloc+0x1d4>)
 800e484:	f240 1227 	movw	r2, #295	; 0x127
 800e488:	490a      	ldr	r1, [pc, #40]	; (800e4b4 <pbuf_alloc+0x1e8>)
 800e48a:	4807      	ldr	r0, [pc, #28]	; (800e4a8 <pbuf_alloc+0x1dc>)
 800e48c:	f00a fa4e 	bl	801892c <printf>
      return NULL;
 800e490:	2300      	movs	r3, #0
 800e492:	e001      	b.n	800e498 <pbuf_alloc+0x1cc>
      break;
 800e494:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3728      	adds	r7, #40	; 0x28
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	08021130 	.word	0x08021130
 800e4a4:	08021160 	.word	0x08021160
 800e4a8:	08021190 	.word	0x08021190
 800e4ac:	080211b8 	.word	0x080211b8
 800e4b0:	080211ec 	.word	0x080211ec
 800e4b4:	08021218 	.word	0x08021218

0800e4b8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b086      	sub	sp, #24
 800e4bc:	af02      	add	r7, sp, #8
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	807b      	strh	r3, [r7, #2]
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e4c8:	883b      	ldrh	r3, [r7, #0]
 800e4ca:	2b41      	cmp	r3, #65	; 0x41
 800e4cc:	d009      	beq.n	800e4e2 <pbuf_alloc_reference+0x2a>
 800e4ce:	883b      	ldrh	r3, [r7, #0]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d006      	beq.n	800e4e2 <pbuf_alloc_reference+0x2a>
 800e4d4:	4b0f      	ldr	r3, [pc, #60]	; (800e514 <pbuf_alloc_reference+0x5c>)
 800e4d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e4da:	490f      	ldr	r1, [pc, #60]	; (800e518 <pbuf_alloc_reference+0x60>)
 800e4dc:	480f      	ldr	r0, [pc, #60]	; (800e51c <pbuf_alloc_reference+0x64>)
 800e4de:	f00a fa25 	bl	801892c <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e4e2:	200b      	movs	r0, #11
 800e4e4:	f7ff fb58 	bl	800db98 <memp_malloc>
 800e4e8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d101      	bne.n	800e4f4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	e00b      	b.n	800e50c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e4f4:	8879      	ldrh	r1, [r7, #2]
 800e4f6:	887a      	ldrh	r2, [r7, #2]
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	9301      	str	r3, [sp, #4]
 800e4fc:	883b      	ldrh	r3, [r7, #0]
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	460b      	mov	r3, r1
 800e502:	6879      	ldr	r1, [r7, #4]
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f7ff feb7 	bl	800e278 <pbuf_init_alloced_pbuf>
  return p;
 800e50a:	68fb      	ldr	r3, [r7, #12]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3710      	adds	r7, #16
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	08021130 	.word	0x08021130
 800e518:	08021234 	.word	0x08021234
 800e51c:	08021190 	.word	0x08021190

0800e520 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b088      	sub	sp, #32
 800e524:	af02      	add	r7, sp, #8
 800e526:	607b      	str	r3, [r7, #4]
 800e528:	4603      	mov	r3, r0
 800e52a:	73fb      	strb	r3, [r7, #15]
 800e52c:	460b      	mov	r3, r1
 800e52e:	81bb      	strh	r3, [r7, #12]
 800e530:	4613      	mov	r3, r2
 800e532:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e534:	7bfb      	ldrb	r3, [r7, #15]
 800e536:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e538:	8a7b      	ldrh	r3, [r7, #18]
 800e53a:	3303      	adds	r3, #3
 800e53c:	f023 0203 	bic.w	r2, r3, #3
 800e540:	89bb      	ldrh	r3, [r7, #12]
 800e542:	441a      	add	r2, r3
 800e544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e546:	429a      	cmp	r2, r3
 800e548:	d901      	bls.n	800e54e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e54a:	2300      	movs	r3, #0
 800e54c:	e018      	b.n	800e580 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d007      	beq.n	800e564 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e554:	8a7b      	ldrh	r3, [r7, #18]
 800e556:	3303      	adds	r3, #3
 800e558:	f023 0303 	bic.w	r3, r3, #3
 800e55c:	6a3a      	ldr	r2, [r7, #32]
 800e55e:	4413      	add	r3, r2
 800e560:	617b      	str	r3, [r7, #20]
 800e562:	e001      	b.n	800e568 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e564:	2300      	movs	r3, #0
 800e566:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	89b9      	ldrh	r1, [r7, #12]
 800e56c:	89ba      	ldrh	r2, [r7, #12]
 800e56e:	2302      	movs	r3, #2
 800e570:	9301      	str	r3, [sp, #4]
 800e572:	897b      	ldrh	r3, [r7, #10]
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	460b      	mov	r3, r1
 800e578:	6979      	ldr	r1, [r7, #20]
 800e57a:	f7ff fe7d 	bl	800e278 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e57e:	687b      	ldr	r3, [r7, #4]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3718      	adds	r7, #24
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	460b      	mov	r3, r1
 800e592:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d106      	bne.n	800e5a8 <pbuf_realloc+0x20>
 800e59a:	4b3a      	ldr	r3, [pc, #232]	; (800e684 <pbuf_realloc+0xfc>)
 800e59c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e5a0:	4939      	ldr	r1, [pc, #228]	; (800e688 <pbuf_realloc+0x100>)
 800e5a2:	483a      	ldr	r0, [pc, #232]	; (800e68c <pbuf_realloc+0x104>)
 800e5a4:	f00a f9c2 	bl	801892c <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	891b      	ldrh	r3, [r3, #8]
 800e5ac:	887a      	ldrh	r2, [r7, #2]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d263      	bcs.n	800e67a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	891a      	ldrh	r2, [r3, #8]
 800e5b6:	887b      	ldrh	r3, [r7, #2]
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e5bc:	887b      	ldrh	r3, [r7, #2]
 800e5be:	817b      	strh	r3, [r7, #10]
  q = p;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e5c4:	e018      	b.n	800e5f8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	895b      	ldrh	r3, [r3, #10]
 800e5ca:	897a      	ldrh	r2, [r7, #10]
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	891a      	ldrh	r2, [r3, #8]
 800e5d4:	893b      	ldrh	r3, [r7, #8]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d106      	bne.n	800e5f8 <pbuf_realloc+0x70>
 800e5ea:	4b26      	ldr	r3, [pc, #152]	; (800e684 <pbuf_realloc+0xfc>)
 800e5ec:	f240 12af 	movw	r2, #431	; 0x1af
 800e5f0:	4927      	ldr	r1, [pc, #156]	; (800e690 <pbuf_realloc+0x108>)
 800e5f2:	4826      	ldr	r0, [pc, #152]	; (800e68c <pbuf_realloc+0x104>)
 800e5f4:	f00a f99a 	bl	801892c <printf>
  while (rem_len > q->len) {
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	895b      	ldrh	r3, [r3, #10]
 800e5fc:	897a      	ldrh	r2, [r7, #10]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d8e1      	bhi.n	800e5c6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	7b1b      	ldrb	r3, [r3, #12]
 800e606:	f003 030f 	and.w	r3, r3, #15
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d121      	bne.n	800e652 <pbuf_realloc+0xca>
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	895b      	ldrh	r3, [r3, #10]
 800e612:	897a      	ldrh	r2, [r7, #10]
 800e614:	429a      	cmp	r2, r3
 800e616:	d01c      	beq.n	800e652 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	7b5b      	ldrb	r3, [r3, #13]
 800e61c:	f003 0302 	and.w	r3, r3, #2
 800e620:	2b00      	cmp	r3, #0
 800e622:	d116      	bne.n	800e652 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	685a      	ldr	r2, [r3, #4]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	897b      	ldrh	r3, [r7, #10]
 800e630:	4413      	add	r3, r2
 800e632:	b29b      	uxth	r3, r3
 800e634:	4619      	mov	r1, r3
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7ff f822 	bl	800d680 <mem_trim>
 800e63c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <pbuf_realloc+0xca>
 800e644:	4b0f      	ldr	r3, [pc, #60]	; (800e684 <pbuf_realloc+0xfc>)
 800e646:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e64a:	4912      	ldr	r1, [pc, #72]	; (800e694 <pbuf_realloc+0x10c>)
 800e64c:	480f      	ldr	r0, [pc, #60]	; (800e68c <pbuf_realloc+0x104>)
 800e64e:	f00a f96d 	bl	801892c <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	897a      	ldrh	r2, [r7, #10]
 800e656:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	895a      	ldrh	r2, [r3, #10]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d004      	beq.n	800e672 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 f911 	bl	800e894 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	601a      	str	r2, [r3, #0]
 800e678:	e000      	b.n	800e67c <pbuf_realloc+0xf4>
    return;
 800e67a:	bf00      	nop

}
 800e67c:	3710      	adds	r7, #16
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	08021130 	.word	0x08021130
 800e688:	08021248 	.word	0x08021248
 800e68c:	08021190 	.word	0x08021190
 800e690:	08021260 	.word	0x08021260
 800e694:	08021278 	.word	0x08021278

0800e698 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d106      	bne.n	800e6ba <pbuf_add_header_impl+0x22>
 800e6ac:	4b2b      	ldr	r3, [pc, #172]	; (800e75c <pbuf_add_header_impl+0xc4>)
 800e6ae:	f240 12df 	movw	r2, #479	; 0x1df
 800e6b2:	492b      	ldr	r1, [pc, #172]	; (800e760 <pbuf_add_header_impl+0xc8>)
 800e6b4:	482b      	ldr	r0, [pc, #172]	; (800e764 <pbuf_add_header_impl+0xcc>)
 800e6b6:	f00a f939 	bl	801892c <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d003      	beq.n	800e6c8 <pbuf_add_header_impl+0x30>
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6c6:	d301      	bcc.n	800e6cc <pbuf_add_header_impl+0x34>
    return 1;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e043      	b.n	800e754 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <pbuf_add_header_impl+0x3e>
    return 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	e03e      	b.n	800e754 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	891a      	ldrh	r2, [r3, #8]
 800e6de:	8a7b      	ldrh	r3, [r7, #18]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	8a7a      	ldrh	r2, [r7, #18]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d901      	bls.n	800e6ee <pbuf_add_header_impl+0x56>
    return 1;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e032      	b.n	800e754 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	7b1b      	ldrb	r3, [r3, #12]
 800e6f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e6f4:	8a3b      	ldrh	r3, [r7, #16]
 800e6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00c      	beq.n	800e718 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	685a      	ldr	r2, [r3, #4]
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	425b      	negs	r3, r3
 800e706:	4413      	add	r3, r2
 800e708:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	3310      	adds	r3, #16
 800e70e:	697a      	ldr	r2, [r7, #20]
 800e710:	429a      	cmp	r2, r3
 800e712:	d20d      	bcs.n	800e730 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e714:	2301      	movs	r3, #1
 800e716:	e01d      	b.n	800e754 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e718:	79fb      	ldrb	r3, [r7, #7]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d006      	beq.n	800e72c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	685a      	ldr	r2, [r3, #4]
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	425b      	negs	r3, r3
 800e726:	4413      	add	r3, r2
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	e001      	b.n	800e730 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e72c:	2301      	movs	r3, #1
 800e72e:	e011      	b.n	800e754 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	697a      	ldr	r2, [r7, #20]
 800e734:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	895a      	ldrh	r2, [r3, #10]
 800e73a:	8a7b      	ldrh	r3, [r7, #18]
 800e73c:	4413      	add	r3, r2
 800e73e:	b29a      	uxth	r2, r3
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	891a      	ldrh	r2, [r3, #8]
 800e748:	8a7b      	ldrh	r3, [r7, #18]
 800e74a:	4413      	add	r3, r2
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	811a      	strh	r2, [r3, #8]


  return 0;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	08021130 	.word	0x08021130
 800e760:	08021294 	.word	0x08021294
 800e764:	08021190 	.word	0x08021190

0800e768 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e772:	2200      	movs	r2, #0
 800e774:	6839      	ldr	r1, [r7, #0]
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7ff ff8e 	bl	800e698 <pbuf_add_header_impl>
 800e77c:	4603      	mov	r3, r0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3708      	adds	r7, #8
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
	...

0800e788 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d106      	bne.n	800e7a6 <pbuf_remove_header+0x1e>
 800e798:	4b20      	ldr	r3, [pc, #128]	; (800e81c <pbuf_remove_header+0x94>)
 800e79a:	f240 224b 	movw	r2, #587	; 0x24b
 800e79e:	4920      	ldr	r1, [pc, #128]	; (800e820 <pbuf_remove_header+0x98>)
 800e7a0:	4820      	ldr	r0, [pc, #128]	; (800e824 <pbuf_remove_header+0x9c>)
 800e7a2:	f00a f8c3 	bl	801892c <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <pbuf_remove_header+0x2c>
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7b2:	d301      	bcc.n	800e7b8 <pbuf_remove_header+0x30>
    return 1;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e02c      	b.n	800e812 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d101      	bne.n	800e7c2 <pbuf_remove_header+0x3a>
    return 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	e027      	b.n	800e812 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	895b      	ldrh	r3, [r3, #10]
 800e7ca:	89fa      	ldrh	r2, [r7, #14]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d908      	bls.n	800e7e2 <pbuf_remove_header+0x5a>
 800e7d0:	4b12      	ldr	r3, [pc, #72]	; (800e81c <pbuf_remove_header+0x94>)
 800e7d2:	f240 2255 	movw	r2, #597	; 0x255
 800e7d6:	4914      	ldr	r1, [pc, #80]	; (800e828 <pbuf_remove_header+0xa0>)
 800e7d8:	4812      	ldr	r0, [pc, #72]	; (800e824 <pbuf_remove_header+0x9c>)
 800e7da:	f00a f8a7 	bl	801892c <printf>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e017      	b.n	800e812 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	441a      	add	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	895a      	ldrh	r2, [r3, #10]
 800e7f8:	89fb      	ldrh	r3, [r7, #14]
 800e7fa:	1ad3      	subs	r3, r2, r3
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	891a      	ldrh	r2, [r3, #8]
 800e806:	89fb      	ldrh	r3, [r7, #14]
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	08021130 	.word	0x08021130
 800e820:	08021294 	.word	0x08021294
 800e824:	08021190 	.word	0x08021190
 800e828:	080212a0 	.word	0x080212a0

0800e82c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	460b      	mov	r3, r1
 800e836:	807b      	strh	r3, [r7, #2]
 800e838:	4613      	mov	r3, r2
 800e83a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e83c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e840:	2b00      	cmp	r3, #0
 800e842:	da08      	bge.n	800e856 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e844:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e848:	425b      	negs	r3, r3
 800e84a:	4619      	mov	r1, r3
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7ff ff9b 	bl	800e788 <pbuf_remove_header>
 800e852:	4603      	mov	r3, r0
 800e854:	e007      	b.n	800e866 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e856:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e85a:	787a      	ldrb	r2, [r7, #1]
 800e85c:	4619      	mov	r1, r3
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7ff ff1a 	bl	800e698 <pbuf_add_header_impl>
 800e864:	4603      	mov	r3, r0
  }
}
 800e866:	4618      	mov	r0, r3
 800e868:	3708      	adds	r7, #8
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b082      	sub	sp, #8
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
 800e876:	460b      	mov	r3, r1
 800e878:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e87a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e87e:	2201      	movs	r2, #1
 800e880:	4619      	mov	r1, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7ff ffd2 	bl	800e82c <pbuf_header_impl>
 800e888:	4603      	mov	r3, r0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
	...

0800e894 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10b      	bne.n	800e8ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d106      	bne.n	800e8b6 <pbuf_free+0x22>
 800e8a8:	4b3b      	ldr	r3, [pc, #236]	; (800e998 <pbuf_free+0x104>)
 800e8aa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e8ae:	493b      	ldr	r1, [pc, #236]	; (800e99c <pbuf_free+0x108>)
 800e8b0:	483b      	ldr	r0, [pc, #236]	; (800e9a0 <pbuf_free+0x10c>)
 800e8b2:	f00a f83b 	bl	801892c <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	e069      	b.n	800e98e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e8be:	e062      	b.n	800e986 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e8c0:	f009 fd32 	bl	8018328 <sys_arch_protect>
 800e8c4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	7b9b      	ldrb	r3, [r3, #14]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <pbuf_free+0x48>
 800e8ce:	4b32      	ldr	r3, [pc, #200]	; (800e998 <pbuf_free+0x104>)
 800e8d0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e8d4:	4933      	ldr	r1, [pc, #204]	; (800e9a4 <pbuf_free+0x110>)
 800e8d6:	4832      	ldr	r0, [pc, #200]	; (800e9a0 <pbuf_free+0x10c>)
 800e8d8:	f00a f828 	bl	801892c <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	7b9b      	ldrb	r3, [r3, #14]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	739a      	strb	r2, [r3, #14]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	7b9b      	ldrb	r3, [r3, #14]
 800e8ec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e8ee:	69b8      	ldr	r0, [r7, #24]
 800e8f0:	f009 fd28 	bl	8018344 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d143      	bne.n	800e982 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	7b1b      	ldrb	r3, [r3, #12]
 800e904:	f003 030f 	and.w	r3, r3, #15
 800e908:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	7b5b      	ldrb	r3, [r3, #13]
 800e90e:	f003 0302 	and.w	r3, r3, #2
 800e912:	2b00      	cmp	r3, #0
 800e914:	d011      	beq.n	800e93a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	691b      	ldr	r3, [r3, #16]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d106      	bne.n	800e930 <pbuf_free+0x9c>
 800e922:	4b1d      	ldr	r3, [pc, #116]	; (800e998 <pbuf_free+0x104>)
 800e924:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e928:	491f      	ldr	r1, [pc, #124]	; (800e9a8 <pbuf_free+0x114>)
 800e92a:	481d      	ldr	r0, [pc, #116]	; (800e9a0 <pbuf_free+0x10c>)
 800e92c:	f009 fffe 	bl	801892c <printf>
        pc->custom_free_function(p);
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	4798      	blx	r3
 800e938:	e01d      	b.n	800e976 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e93a:	7bfb      	ldrb	r3, [r7, #15]
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d104      	bne.n	800e94a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	200c      	movs	r0, #12
 800e944:	f7ff f97a 	bl	800dc3c <memp_free>
 800e948:	e015      	b.n	800e976 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e94a:	7bfb      	ldrb	r3, [r7, #15]
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d104      	bne.n	800e95a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e950:	6879      	ldr	r1, [r7, #4]
 800e952:	200b      	movs	r0, #11
 800e954:	f7ff f972 	bl	800dc3c <memp_free>
 800e958:	e00d      	b.n	800e976 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e95a:	7bfb      	ldrb	r3, [r7, #15]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d103      	bne.n	800e968 <pbuf_free+0xd4>
          mem_free(p);
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7fe fdfd 	bl	800d560 <mem_free>
 800e966:	e006      	b.n	800e976 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e968:	4b0b      	ldr	r3, [pc, #44]	; (800e998 <pbuf_free+0x104>)
 800e96a:	f240 320f 	movw	r2, #783	; 0x30f
 800e96e:	490f      	ldr	r1, [pc, #60]	; (800e9ac <pbuf_free+0x118>)
 800e970:	480b      	ldr	r0, [pc, #44]	; (800e9a0 <pbuf_free+0x10c>)
 800e972:	f009 ffdb 	bl	801892c <printf>
        }
      }
      count++;
 800e976:	7ffb      	ldrb	r3, [r7, #31]
 800e978:	3301      	adds	r3, #1
 800e97a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	607b      	str	r3, [r7, #4]
 800e980:	e001      	b.n	800e986 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e982:	2300      	movs	r3, #0
 800e984:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d199      	bne.n	800e8c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e98c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3720      	adds	r7, #32
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	08021130 	.word	0x08021130
 800e99c:	08021294 	.word	0x08021294
 800e9a0:	08021190 	.word	0x08021190
 800e9a4:	080212c0 	.word	0x080212c0
 800e9a8:	080212d8 	.word	0x080212d8
 800e9ac:	080212fc 	.word	0x080212fc

0800e9b0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e9bc:	e005      	b.n	800e9ca <pbuf_clen+0x1a>
    ++len;
 800e9be:	89fb      	ldrh	r3, [r7, #14]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1f6      	bne.n	800e9be <pbuf_clen+0xe>
  }
  return len;
 800e9d0:	89fb      	ldrh	r3, [r7, #14]
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3714      	adds	r7, #20
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d016      	beq.n	800ea1c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e9ee:	f009 fc9b 	bl	8018328 <sys_arch_protect>
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	7b9b      	ldrb	r3, [r3, #14]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	739a      	strb	r2, [r3, #14]
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f009 fc9f 	bl	8018344 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	7b9b      	ldrb	r3, [r3, #14]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <pbuf_ref+0x3c>
 800ea0e:	4b05      	ldr	r3, [pc, #20]	; (800ea24 <pbuf_ref+0x44>)
 800ea10:	f240 3242 	movw	r2, #834	; 0x342
 800ea14:	4904      	ldr	r1, [pc, #16]	; (800ea28 <pbuf_ref+0x48>)
 800ea16:	4805      	ldr	r0, [pc, #20]	; (800ea2c <pbuf_ref+0x4c>)
 800ea18:	f009 ff88 	bl	801892c <printf>
  }
}
 800ea1c:	bf00      	nop
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	08021130 	.word	0x08021130
 800ea28:	08021310 	.word	0x08021310
 800ea2c:	08021190 	.word	0x08021190

0800ea30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d002      	beq.n	800ea46 <pbuf_cat+0x16>
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d107      	bne.n	800ea56 <pbuf_cat+0x26>
 800ea46:	4b20      	ldr	r3, [pc, #128]	; (800eac8 <pbuf_cat+0x98>)
 800ea48:	f240 3259 	movw	r2, #857	; 0x359
 800ea4c:	491f      	ldr	r1, [pc, #124]	; (800eacc <pbuf_cat+0x9c>)
 800ea4e:	4820      	ldr	r0, [pc, #128]	; (800ead0 <pbuf_cat+0xa0>)
 800ea50:	f009 ff6c 	bl	801892c <printf>
 800ea54:	e034      	b.n	800eac0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	60fb      	str	r3, [r7, #12]
 800ea5a:	e00a      	b.n	800ea72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	891a      	ldrh	r2, [r3, #8]
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	891b      	ldrh	r3, [r3, #8]
 800ea64:	4413      	add	r3, r2
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	60fb      	str	r3, [r7, #12]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1f0      	bne.n	800ea5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	891a      	ldrh	r2, [r3, #8]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	895b      	ldrh	r3, [r3, #10]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d006      	beq.n	800ea94 <pbuf_cat+0x64>
 800ea86:	4b10      	ldr	r3, [pc, #64]	; (800eac8 <pbuf_cat+0x98>)
 800ea88:	f240 3262 	movw	r2, #866	; 0x362
 800ea8c:	4911      	ldr	r1, [pc, #68]	; (800ead4 <pbuf_cat+0xa4>)
 800ea8e:	4810      	ldr	r0, [pc, #64]	; (800ead0 <pbuf_cat+0xa0>)
 800ea90:	f009 ff4c 	bl	801892c <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d006      	beq.n	800eaaa <pbuf_cat+0x7a>
 800ea9c:	4b0a      	ldr	r3, [pc, #40]	; (800eac8 <pbuf_cat+0x98>)
 800ea9e:	f240 3263 	movw	r2, #867	; 0x363
 800eaa2:	490d      	ldr	r1, [pc, #52]	; (800ead8 <pbuf_cat+0xa8>)
 800eaa4:	480a      	ldr	r0, [pc, #40]	; (800ead0 <pbuf_cat+0xa0>)
 800eaa6:	f009 ff41 	bl	801892c <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	891a      	ldrh	r2, [r3, #8]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	891b      	ldrh	r3, [r3, #8]
 800eab2:	4413      	add	r3, r2
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	683a      	ldr	r2, [r7, #0]
 800eabe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	08021130 	.word	0x08021130
 800eacc:	08021324 	.word	0x08021324
 800ead0:	08021190 	.word	0x08021190
 800ead4:	0802135c 	.word	0x0802135c
 800ead8:	0802138c 	.word	0x0802138c

0800eadc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800eae6:	6839      	ldr	r1, [r7, #0]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff ffa1 	bl	800ea30 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800eaee:	6838      	ldr	r0, [r7, #0]
 800eaf0:	f7ff ff76 	bl	800e9e0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800eaf4:	bf00      	nop
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b086      	sub	sp, #24
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800eb06:	2300      	movs	r3, #0
 800eb08:	617b      	str	r3, [r7, #20]
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d008      	beq.n	800eb26 <pbuf_copy+0x2a>
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d005      	beq.n	800eb26 <pbuf_copy+0x2a>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	891a      	ldrh	r2, [r3, #8]
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	891b      	ldrh	r3, [r3, #8]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d209      	bcs.n	800eb3a <pbuf_copy+0x3e>
 800eb26:	4b57      	ldr	r3, [pc, #348]	; (800ec84 <pbuf_copy+0x188>)
 800eb28:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eb2c:	4956      	ldr	r1, [pc, #344]	; (800ec88 <pbuf_copy+0x18c>)
 800eb2e:	4857      	ldr	r0, [pc, #348]	; (800ec8c <pbuf_copy+0x190>)
 800eb30:	f009 fefc 	bl	801892c <printf>
 800eb34:	f06f 030f 	mvn.w	r3, #15
 800eb38:	e09f      	b.n	800ec7a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	895b      	ldrh	r3, [r3, #10]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	1ad2      	subs	r2, r2, r3
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	895b      	ldrh	r3, [r3, #10]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	1acb      	subs	r3, r1, r3
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d306      	bcc.n	800eb60 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	895b      	ldrh	r3, [r3, #10]
 800eb56:	461a      	mov	r2, r3
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	60fb      	str	r3, [r7, #12]
 800eb5e:	e005      	b.n	800eb6c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	895b      	ldrh	r3, [r3, #10]
 800eb64:	461a      	mov	r2, r3
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685a      	ldr	r2, [r3, #4]
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	18d0      	adds	r0, r2, r3
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	685a      	ldr	r2, [r3, #4]
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	f009 fc26 	bl	80183d0 <memcpy>
    offset_to += len;
 800eb84:	697a      	ldr	r2, [r7, #20]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	4413      	add	r3, r2
 800eb8a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eb8c:	693a      	ldr	r2, [r7, #16]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	4413      	add	r3, r2
 800eb92:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	895b      	ldrh	r3, [r3, #10]
 800eb98:	461a      	mov	r2, r3
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d906      	bls.n	800ebae <pbuf_copy+0xb2>
 800eba0:	4b38      	ldr	r3, [pc, #224]	; (800ec84 <pbuf_copy+0x188>)
 800eba2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eba6:	493a      	ldr	r1, [pc, #232]	; (800ec90 <pbuf_copy+0x194>)
 800eba8:	4838      	ldr	r0, [pc, #224]	; (800ec8c <pbuf_copy+0x190>)
 800ebaa:	f009 febf 	bl	801892c <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	895b      	ldrh	r3, [r3, #10]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d906      	bls.n	800ebc8 <pbuf_copy+0xcc>
 800ebba:	4b32      	ldr	r3, [pc, #200]	; (800ec84 <pbuf_copy+0x188>)
 800ebbc:	f240 32da 	movw	r2, #986	; 0x3da
 800ebc0:	4934      	ldr	r1, [pc, #208]	; (800ec94 <pbuf_copy+0x198>)
 800ebc2:	4832      	ldr	r0, [pc, #200]	; (800ec8c <pbuf_copy+0x190>)
 800ebc4:	f009 feb2 	bl	801892c <printf>
    if (offset_from >= p_from->len) {
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	895b      	ldrh	r3, [r3, #10]
 800ebcc:	461a      	mov	r2, r3
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d304      	bcc.n	800ebde <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	895b      	ldrh	r3, [r3, #10]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d114      	bne.n	800ec14 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d10c      	bne.n	800ec14 <pbuf_copy+0x118>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d009      	beq.n	800ec14 <pbuf_copy+0x118>
 800ec00:	4b20      	ldr	r3, [pc, #128]	; (800ec84 <pbuf_copy+0x188>)
 800ec02:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ec06:	4924      	ldr	r1, [pc, #144]	; (800ec98 <pbuf_copy+0x19c>)
 800ec08:	4820      	ldr	r0, [pc, #128]	; (800ec8c <pbuf_copy+0x190>)
 800ec0a:	f009 fe8f 	bl	801892c <printf>
 800ec0e:	f06f 030f 	mvn.w	r3, #15
 800ec12:	e032      	b.n	800ec7a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d013      	beq.n	800ec42 <pbuf_copy+0x146>
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	895a      	ldrh	r2, [r3, #10]
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	891b      	ldrh	r3, [r3, #8]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d10d      	bne.n	800ec42 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d009      	beq.n	800ec42 <pbuf_copy+0x146>
 800ec2e:	4b15      	ldr	r3, [pc, #84]	; (800ec84 <pbuf_copy+0x188>)
 800ec30:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ec34:	4919      	ldr	r1, [pc, #100]	; (800ec9c <pbuf_copy+0x1a0>)
 800ec36:	4815      	ldr	r0, [pc, #84]	; (800ec8c <pbuf_copy+0x190>)
 800ec38:	f009 fe78 	bl	801892c <printf>
 800ec3c:	f06f 0305 	mvn.w	r3, #5
 800ec40:	e01b      	b.n	800ec7a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d013      	beq.n	800ec70 <pbuf_copy+0x174>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	895a      	ldrh	r2, [r3, #10]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	891b      	ldrh	r3, [r3, #8]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d10d      	bne.n	800ec70 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d009      	beq.n	800ec70 <pbuf_copy+0x174>
 800ec5c:	4b09      	ldr	r3, [pc, #36]	; (800ec84 <pbuf_copy+0x188>)
 800ec5e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ec62:	490e      	ldr	r1, [pc, #56]	; (800ec9c <pbuf_copy+0x1a0>)
 800ec64:	4809      	ldr	r0, [pc, #36]	; (800ec8c <pbuf_copy+0x190>)
 800ec66:	f009 fe61 	bl	801892c <printf>
 800ec6a:	f06f 0305 	mvn.w	r3, #5
 800ec6e:	e004      	b.n	800ec7a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	f47f af61 	bne.w	800eb3a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3718      	adds	r7, #24
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	08021130 	.word	0x08021130
 800ec88:	080213d8 	.word	0x080213d8
 800ec8c:	08021190 	.word	0x08021190
 800ec90:	08021408 	.word	0x08021408
 800ec94:	08021420 	.word	0x08021420
 800ec98:	0802143c 	.word	0x0802143c
 800ec9c:	0802144c 	.word	0x0802144c

0800eca0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b088      	sub	sp, #32
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	4611      	mov	r1, r2
 800ecac:	461a      	mov	r2, r3
 800ecae:	460b      	mov	r3, r1
 800ecb0:	80fb      	strh	r3, [r7, #6]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d108      	bne.n	800ecd6 <pbuf_copy_partial+0x36>
 800ecc4:	4b2b      	ldr	r3, [pc, #172]	; (800ed74 <pbuf_copy_partial+0xd4>)
 800ecc6:	f240 420a 	movw	r2, #1034	; 0x40a
 800ecca:	492b      	ldr	r1, [pc, #172]	; (800ed78 <pbuf_copy_partial+0xd8>)
 800eccc:	482b      	ldr	r0, [pc, #172]	; (800ed7c <pbuf_copy_partial+0xdc>)
 800ecce:	f009 fe2d 	bl	801892c <printf>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	e04a      	b.n	800ed6c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d108      	bne.n	800ecee <pbuf_copy_partial+0x4e>
 800ecdc:	4b25      	ldr	r3, [pc, #148]	; (800ed74 <pbuf_copy_partial+0xd4>)
 800ecde:	f240 420b 	movw	r2, #1035	; 0x40b
 800ece2:	4927      	ldr	r1, [pc, #156]	; (800ed80 <pbuf_copy_partial+0xe0>)
 800ece4:	4825      	ldr	r0, [pc, #148]	; (800ed7c <pbuf_copy_partial+0xdc>)
 800ece6:	f009 fe21 	bl	801892c <printf>
 800ecea:	2300      	movs	r3, #0
 800ecec:	e03e      	b.n	800ed6c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	61fb      	str	r3, [r7, #28]
 800ecf2:	e034      	b.n	800ed5e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ecf4:	88bb      	ldrh	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00a      	beq.n	800ed10 <pbuf_copy_partial+0x70>
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	895b      	ldrh	r3, [r3, #10]
 800ecfe:	88ba      	ldrh	r2, [r7, #4]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d305      	bcc.n	800ed10 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	895b      	ldrh	r3, [r3, #10]
 800ed08:	88ba      	ldrh	r2, [r7, #4]
 800ed0a:	1ad3      	subs	r3, r2, r3
 800ed0c:	80bb      	strh	r3, [r7, #4]
 800ed0e:	e023      	b.n	800ed58 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	895a      	ldrh	r2, [r3, #10]
 800ed14:	88bb      	ldrh	r3, [r7, #4]
 800ed16:	1ad3      	subs	r3, r2, r3
 800ed18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ed1a:	8b3a      	ldrh	r2, [r7, #24]
 800ed1c:	88fb      	ldrh	r3, [r7, #6]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d901      	bls.n	800ed26 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ed22:	88fb      	ldrh	r3, [r7, #6]
 800ed24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ed26:	8b7b      	ldrh	r3, [r7, #26]
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	18d0      	adds	r0, r2, r3
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	685a      	ldr	r2, [r3, #4]
 800ed30:	88bb      	ldrh	r3, [r7, #4]
 800ed32:	4413      	add	r3, r2
 800ed34:	8b3a      	ldrh	r2, [r7, #24]
 800ed36:	4619      	mov	r1, r3
 800ed38:	f009 fb4a 	bl	80183d0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ed3c:	8afa      	ldrh	r2, [r7, #22]
 800ed3e:	8b3b      	ldrh	r3, [r7, #24]
 800ed40:	4413      	add	r3, r2
 800ed42:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ed44:	8b7a      	ldrh	r2, [r7, #26]
 800ed46:	8b3b      	ldrh	r3, [r7, #24]
 800ed48:	4413      	add	r3, r2
 800ed4a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ed4c:	88fa      	ldrh	r2, [r7, #6]
 800ed4e:	8b3b      	ldrh	r3, [r7, #24]
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ed54:	2300      	movs	r3, #0
 800ed56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	61fb      	str	r3, [r7, #28]
 800ed5e:	88fb      	ldrh	r3, [r7, #6]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d002      	beq.n	800ed6a <pbuf_copy_partial+0xca>
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1c4      	bne.n	800ecf4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ed6a:	8afb      	ldrh	r3, [r7, #22]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3720      	adds	r7, #32
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	08021130 	.word	0x08021130
 800ed78:	08021478 	.word	0x08021478
 800ed7c:	08021190 	.word	0x08021190
 800ed80:	08021498 	.word	0x08021498

0800ed84 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	603a      	str	r2, [r7, #0]
 800ed8e:	71fb      	strb	r3, [r7, #7]
 800ed90:	460b      	mov	r3, r1
 800ed92:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	8919      	ldrh	r1, [r3, #8]
 800ed98:	88ba      	ldrh	r2, [r7, #4]
 800ed9a:	79fb      	ldrb	r3, [r7, #7]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7ff fa95 	bl	800e2cc <pbuf_alloc>
 800eda2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d101      	bne.n	800edae <pbuf_clone+0x2a>
    return NULL;
 800edaa:	2300      	movs	r3, #0
 800edac:	e011      	b.n	800edd2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f7ff fea3 	bl	800eafc <pbuf_copy>
 800edb6:	4603      	mov	r3, r0
 800edb8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800edba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d006      	beq.n	800edd0 <pbuf_clone+0x4c>
 800edc2:	4b06      	ldr	r3, [pc, #24]	; (800eddc <pbuf_clone+0x58>)
 800edc4:	f240 5224 	movw	r2, #1316	; 0x524
 800edc8:	4905      	ldr	r1, [pc, #20]	; (800ede0 <pbuf_clone+0x5c>)
 800edca:	4806      	ldr	r0, [pc, #24]	; (800ede4 <pbuf_clone+0x60>)
 800edcc:	f009 fdae 	bl	801892c <printf>
  return q;
 800edd0:	68fb      	ldr	r3, [r7, #12]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	08021130 	.word	0x08021130
 800ede0:	080215a4 	.word	0x080215a4
 800ede4:	08021190 	.word	0x08021190

0800ede8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800edec:	f009 fdb0 	bl	8018950 <rand>
 800edf0:	4603      	mov	r3, r0
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	4b01      	ldr	r3, [pc, #4]	; (800ee08 <tcp_init+0x20>)
 800ee02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ee04:	bf00      	nop
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	2000002c 	.word	0x2000002c

0800ee0c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	7d1b      	ldrb	r3, [r3, #20]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d105      	bne.n	800ee28 <tcp_free+0x1c>
 800ee1c:	4b06      	ldr	r3, [pc, #24]	; (800ee38 <tcp_free+0x2c>)
 800ee1e:	22d4      	movs	r2, #212	; 0xd4
 800ee20:	4906      	ldr	r1, [pc, #24]	; (800ee3c <tcp_free+0x30>)
 800ee22:	4807      	ldr	r0, [pc, #28]	; (800ee40 <tcp_free+0x34>)
 800ee24:	f009 fd82 	bl	801892c <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ee28:	6879      	ldr	r1, [r7, #4]
 800ee2a:	2001      	movs	r0, #1
 800ee2c:	f7fe ff06 	bl	800dc3c <memp_free>
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	08021630 	.word	0x08021630
 800ee3c:	08021660 	.word	0x08021660
 800ee40:	08021674 	.word	0x08021674

0800ee44 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	7d1b      	ldrb	r3, [r3, #20]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d105      	bne.n	800ee60 <tcp_free_listen+0x1c>
 800ee54:	4b06      	ldr	r3, [pc, #24]	; (800ee70 <tcp_free_listen+0x2c>)
 800ee56:	22df      	movs	r2, #223	; 0xdf
 800ee58:	4906      	ldr	r1, [pc, #24]	; (800ee74 <tcp_free_listen+0x30>)
 800ee5a:	4807      	ldr	r0, [pc, #28]	; (800ee78 <tcp_free_listen+0x34>)
 800ee5c:	f009 fd66 	bl	801892c <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ee60:	6879      	ldr	r1, [r7, #4]
 800ee62:	2002      	movs	r0, #2
 800ee64:	f7fe feea 	bl	800dc3c <memp_free>
}
 800ee68:	bf00      	nop
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	08021630 	.word	0x08021630
 800ee74:	0802169c 	.word	0x0802169c
 800ee78:	08021674 	.word	0x08021674

0800ee7c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ee80:	f000 ffdc 	bl	800fe3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ee84:	4b07      	ldr	r3, [pc, #28]	; (800eea4 <tcp_tmr+0x28>)
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	4b05      	ldr	r3, [pc, #20]	; (800eea4 <tcp_tmr+0x28>)
 800ee8e:	701a      	strb	r2, [r3, #0]
 800ee90:	4b04      	ldr	r3, [pc, #16]	; (800eea4 <tcp_tmr+0x28>)
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	f003 0301 	and.w	r3, r3, #1
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d001      	beq.n	800eea0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ee9c:	f000 fc8e 	bl	800f7bc <tcp_slowtmr>
  }
}
 800eea0:	bf00      	nop
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	20004aad 	.word	0x20004aad

0800eea8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d105      	bne.n	800eec4 <tcp_remove_listener+0x1c>
 800eeb8:	4b0d      	ldr	r3, [pc, #52]	; (800eef0 <tcp_remove_listener+0x48>)
 800eeba:	22ff      	movs	r2, #255	; 0xff
 800eebc:	490d      	ldr	r1, [pc, #52]	; (800eef4 <tcp_remove_listener+0x4c>)
 800eebe:	480e      	ldr	r0, [pc, #56]	; (800eef8 <tcp_remove_listener+0x50>)
 800eec0:	f009 fd34 	bl	801892c <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	60fb      	str	r3, [r7, #12]
 800eec8:	e00a      	b.n	800eee0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eece:	683a      	ldr	r2, [r7, #0]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d102      	bne.n	800eeda <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2200      	movs	r2, #0
 800eed8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1f1      	bne.n	800eeca <tcp_remove_listener+0x22>
    }
  }
}
 800eee6:	bf00      	nop
 800eee8:	bf00      	nop
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	08021630 	.word	0x08021630
 800eef4:	080216b8 	.word	0x080216b8
 800eef8:	08021674 	.word	0x08021674

0800eefc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d106      	bne.n	800ef18 <tcp_listen_closed+0x1c>
 800ef0a:	4b14      	ldr	r3, [pc, #80]	; (800ef5c <tcp_listen_closed+0x60>)
 800ef0c:	f240 1211 	movw	r2, #273	; 0x111
 800ef10:	4913      	ldr	r1, [pc, #76]	; (800ef60 <tcp_listen_closed+0x64>)
 800ef12:	4814      	ldr	r0, [pc, #80]	; (800ef64 <tcp_listen_closed+0x68>)
 800ef14:	f009 fd0a 	bl	801892c <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	7d1b      	ldrb	r3, [r3, #20]
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d006      	beq.n	800ef2e <tcp_listen_closed+0x32>
 800ef20:	4b0e      	ldr	r3, [pc, #56]	; (800ef5c <tcp_listen_closed+0x60>)
 800ef22:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ef26:	4910      	ldr	r1, [pc, #64]	; (800ef68 <tcp_listen_closed+0x6c>)
 800ef28:	480e      	ldr	r0, [pc, #56]	; (800ef64 <tcp_listen_closed+0x68>)
 800ef2a:	f009 fcff 	bl	801892c <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ef2e:	2301      	movs	r3, #1
 800ef30:	60fb      	str	r3, [r7, #12]
 800ef32:	e00b      	b.n	800ef4c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ef34:	4a0d      	ldr	r2, [pc, #52]	; (800ef6c <tcp_listen_closed+0x70>)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	6879      	ldr	r1, [r7, #4]
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7ff ffb1 	bl	800eea8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	60fb      	str	r3, [r7, #12]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2b03      	cmp	r3, #3
 800ef50:	d9f0      	bls.n	800ef34 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ef52:	bf00      	nop
 800ef54:	bf00      	nop
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	08021630 	.word	0x08021630
 800ef60:	080216e0 	.word	0x080216e0
 800ef64:	08021674 	.word	0x08021674
 800ef68:	080216ec 	.word	0x080216ec
 800ef6c:	08023648 	.word	0x08023648

0800ef70 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ef70:	b5b0      	push	{r4, r5, r7, lr}
 800ef72:	b088      	sub	sp, #32
 800ef74:	af04      	add	r7, sp, #16
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d106      	bne.n	800ef90 <tcp_close_shutdown+0x20>
 800ef82:	4b63      	ldr	r3, [pc, #396]	; (800f110 <tcp_close_shutdown+0x1a0>)
 800ef84:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ef88:	4962      	ldr	r1, [pc, #392]	; (800f114 <tcp_close_shutdown+0x1a4>)
 800ef8a:	4863      	ldr	r0, [pc, #396]	; (800f118 <tcp_close_shutdown+0x1a8>)
 800ef8c:	f009 fcce 	bl	801892c <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ef90:	78fb      	ldrb	r3, [r7, #3]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d066      	beq.n	800f064 <tcp_close_shutdown+0xf4>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	7d1b      	ldrb	r3, [r3, #20]
 800ef9a:	2b04      	cmp	r3, #4
 800ef9c:	d003      	beq.n	800efa6 <tcp_close_shutdown+0x36>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	7d1b      	ldrb	r3, [r3, #20]
 800efa2:	2b07      	cmp	r3, #7
 800efa4:	d15e      	bne.n	800f064 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d104      	bne.n	800efb8 <tcp_close_shutdown+0x48>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800efb6:	d055      	beq.n	800f064 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	8b5b      	ldrh	r3, [r3, #26]
 800efbc:	f003 0310 	and.w	r3, r3, #16
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d106      	bne.n	800efd2 <tcp_close_shutdown+0x62>
 800efc4:	4b52      	ldr	r3, [pc, #328]	; (800f110 <tcp_close_shutdown+0x1a0>)
 800efc6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800efca:	4954      	ldr	r1, [pc, #336]	; (800f11c <tcp_close_shutdown+0x1ac>)
 800efcc:	4852      	ldr	r0, [pc, #328]	; (800f118 <tcp_close_shutdown+0x1a8>)
 800efce:	f009 fcad 	bl	801892c <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800efda:	687d      	ldr	r5, [r7, #4]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3304      	adds	r3, #4
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	8ad2      	ldrh	r2, [r2, #22]
 800efe4:	6879      	ldr	r1, [r7, #4]
 800efe6:	8b09      	ldrh	r1, [r1, #24]
 800efe8:	9102      	str	r1, [sp, #8]
 800efea:	9201      	str	r2, [sp, #4]
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	462b      	mov	r3, r5
 800eff0:	4622      	mov	r2, r4
 800eff2:	4601      	mov	r1, r0
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f005 fced 	bl	80149d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f001 face 	bl	801059c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f000:	4b47      	ldr	r3, [pc, #284]	; (800f120 <tcp_close_shutdown+0x1b0>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	429a      	cmp	r2, r3
 800f008:	d105      	bne.n	800f016 <tcp_close_shutdown+0xa6>
 800f00a:	4b45      	ldr	r3, [pc, #276]	; (800f120 <tcp_close_shutdown+0x1b0>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	4a43      	ldr	r2, [pc, #268]	; (800f120 <tcp_close_shutdown+0x1b0>)
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	e013      	b.n	800f03e <tcp_close_shutdown+0xce>
 800f016:	4b42      	ldr	r3, [pc, #264]	; (800f120 <tcp_close_shutdown+0x1b0>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	60fb      	str	r3, [r7, #12]
 800f01c:	e00c      	b.n	800f038 <tcp_close_shutdown+0xc8>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	429a      	cmp	r2, r3
 800f026:	d104      	bne.n	800f032 <tcp_close_shutdown+0xc2>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	68da      	ldr	r2, [r3, #12]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	60da      	str	r2, [r3, #12]
 800f030:	e005      	b.n	800f03e <tcp_close_shutdown+0xce>
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	60fb      	str	r3, [r7, #12]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1ef      	bne.n	800f01e <tcp_close_shutdown+0xae>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	60da      	str	r2, [r3, #12]
 800f044:	4b37      	ldr	r3, [pc, #220]	; (800f124 <tcp_close_shutdown+0x1b4>)
 800f046:	2201      	movs	r2, #1
 800f048:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f04a:	4b37      	ldr	r3, [pc, #220]	; (800f128 <tcp_close_shutdown+0x1b8>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	429a      	cmp	r2, r3
 800f052:	d102      	bne.n	800f05a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f054:	f003 ff62 	bl	8012f1c <tcp_trigger_input_pcb_close>
 800f058:	e002      	b.n	800f060 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f7ff fed6 	bl	800ee0c <tcp_free>
      }
      return ERR_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	e050      	b.n	800f106 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	7d1b      	ldrb	r3, [r3, #20]
 800f068:	2b02      	cmp	r3, #2
 800f06a:	d03b      	beq.n	800f0e4 <tcp_close_shutdown+0x174>
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	dc44      	bgt.n	800f0fa <tcp_close_shutdown+0x18a>
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <tcp_close_shutdown+0x10a>
 800f074:	2b01      	cmp	r3, #1
 800f076:	d02a      	beq.n	800f0ce <tcp_close_shutdown+0x15e>
 800f078:	e03f      	b.n	800f0fa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	8adb      	ldrh	r3, [r3, #22]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d021      	beq.n	800f0c6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f082:	4b2a      	ldr	r3, [pc, #168]	; (800f12c <tcp_close_shutdown+0x1bc>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d105      	bne.n	800f098 <tcp_close_shutdown+0x128>
 800f08c:	4b27      	ldr	r3, [pc, #156]	; (800f12c <tcp_close_shutdown+0x1bc>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	4a26      	ldr	r2, [pc, #152]	; (800f12c <tcp_close_shutdown+0x1bc>)
 800f094:	6013      	str	r3, [r2, #0]
 800f096:	e013      	b.n	800f0c0 <tcp_close_shutdown+0x150>
 800f098:	4b24      	ldr	r3, [pc, #144]	; (800f12c <tcp_close_shutdown+0x1bc>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	60bb      	str	r3, [r7, #8]
 800f09e:	e00c      	b.n	800f0ba <tcp_close_shutdown+0x14a>
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d104      	bne.n	800f0b4 <tcp_close_shutdown+0x144>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	68da      	ldr	r2, [r3, #12]
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	60da      	str	r2, [r3, #12]
 800f0b2:	e005      	b.n	800f0c0 <tcp_close_shutdown+0x150>
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	60bb      	str	r3, [r7, #8]
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1ef      	bne.n	800f0a0 <tcp_close_shutdown+0x130>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7ff fea0 	bl	800ee0c <tcp_free>
      break;
 800f0cc:	e01a      	b.n	800f104 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f7ff ff14 	bl	800eefc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f0d4:	6879      	ldr	r1, [r7, #4]
 800f0d6:	4816      	ldr	r0, [pc, #88]	; (800f130 <tcp_close_shutdown+0x1c0>)
 800f0d8:	f001 fab0 	bl	801063c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7ff feb1 	bl	800ee44 <tcp_free_listen>
      break;
 800f0e2:	e00f      	b.n	800f104 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f0e4:	6879      	ldr	r1, [r7, #4]
 800f0e6:	480e      	ldr	r0, [pc, #56]	; (800f120 <tcp_close_shutdown+0x1b0>)
 800f0e8:	f001 faa8 	bl	801063c <tcp_pcb_remove>
 800f0ec:	4b0d      	ldr	r3, [pc, #52]	; (800f124 <tcp_close_shutdown+0x1b4>)
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7ff fe8a 	bl	800ee0c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f0f8:	e004      	b.n	800f104 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 f81a 	bl	800f134 <tcp_close_shutdown_fin>
 800f100:	4603      	mov	r3, r0
 800f102:	e000      	b.n	800f106 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bdb0      	pop	{r4, r5, r7, pc}
 800f10e:	bf00      	nop
 800f110:	08021630 	.word	0x08021630
 800f114:	08021704 	.word	0x08021704
 800f118:	08021674 	.word	0x08021674
 800f11c:	08021724 	.word	0x08021724
 800f120:	2000b694 	.word	0x2000b694
 800f124:	2000b690 	.word	0x2000b690
 800f128:	2000b6a8 	.word	0x2000b6a8
 800f12c:	2000b6a0 	.word	0x2000b6a0
 800f130:	2000b69c 	.word	0x2000b69c

0800f134 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d106      	bne.n	800f150 <tcp_close_shutdown_fin+0x1c>
 800f142:	4b2e      	ldr	r3, [pc, #184]	; (800f1fc <tcp_close_shutdown_fin+0xc8>)
 800f144:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f148:	492d      	ldr	r1, [pc, #180]	; (800f200 <tcp_close_shutdown_fin+0xcc>)
 800f14a:	482e      	ldr	r0, [pc, #184]	; (800f204 <tcp_close_shutdown_fin+0xd0>)
 800f14c:	f009 fbee 	bl	801892c <printf>

  switch (pcb->state) {
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	7d1b      	ldrb	r3, [r3, #20]
 800f154:	2b07      	cmp	r3, #7
 800f156:	d020      	beq.n	800f19a <tcp_close_shutdown_fin+0x66>
 800f158:	2b07      	cmp	r3, #7
 800f15a:	dc2b      	bgt.n	800f1b4 <tcp_close_shutdown_fin+0x80>
 800f15c:	2b03      	cmp	r3, #3
 800f15e:	d002      	beq.n	800f166 <tcp_close_shutdown_fin+0x32>
 800f160:	2b04      	cmp	r3, #4
 800f162:	d00d      	beq.n	800f180 <tcp_close_shutdown_fin+0x4c>
 800f164:	e026      	b.n	800f1b4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f004 fd42 	bl	8013bf0 <tcp_send_fin>
 800f16c:	4603      	mov	r3, r0
 800f16e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d11f      	bne.n	800f1b8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2205      	movs	r2, #5
 800f17c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f17e:	e01b      	b.n	800f1b8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f004 fd35 	bl	8013bf0 <tcp_send_fin>
 800f186:	4603      	mov	r3, r0
 800f188:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d114      	bne.n	800f1bc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2205      	movs	r2, #5
 800f196:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f198:	e010      	b.n	800f1bc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f004 fd28 	bl	8013bf0 <tcp_send_fin>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f1a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d109      	bne.n	800f1c0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2209      	movs	r2, #9
 800f1b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f1b2:	e005      	b.n	800f1c0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	e01c      	b.n	800f1f2 <tcp_close_shutdown_fin+0xbe>
      break;
 800f1b8:	bf00      	nop
 800f1ba:	e002      	b.n	800f1c2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f1bc:	bf00      	nop
 800f1be:	e000      	b.n	800f1c2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f1c0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f1c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d103      	bne.n	800f1d2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f004 fe4e 	bl	8013e6c <tcp_output>
 800f1d0:	e00d      	b.n	800f1ee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1da:	d108      	bne.n	800f1ee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	8b5b      	ldrh	r3, [r3, #26]
 800f1e0:	f043 0308 	orr.w	r3, r3, #8
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	e001      	b.n	800f1f2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	08021630 	.word	0x08021630
 800f200:	080216e0 	.word	0x080216e0
 800f204:	08021674 	.word	0x08021674

0800f208 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d109      	bne.n	800f22a <tcp_close+0x22>
 800f216:	4b0f      	ldr	r3, [pc, #60]	; (800f254 <tcp_close+0x4c>)
 800f218:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f21c:	490e      	ldr	r1, [pc, #56]	; (800f258 <tcp_close+0x50>)
 800f21e:	480f      	ldr	r0, [pc, #60]	; (800f25c <tcp_close+0x54>)
 800f220:	f009 fb84 	bl	801892c <printf>
 800f224:	f06f 030f 	mvn.w	r3, #15
 800f228:	e00f      	b.n	800f24a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	7d1b      	ldrb	r3, [r3, #20]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d006      	beq.n	800f240 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	8b5b      	ldrh	r3, [r3, #26]
 800f236:	f043 0310 	orr.w	r3, r3, #16
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f240:	2101      	movs	r1, #1
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7ff fe94 	bl	800ef70 <tcp_close_shutdown>
 800f248:	4603      	mov	r3, r0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	08021630 	.word	0x08021630
 800f258:	08021740 	.word	0x08021740
 800f25c:	08021674 	.word	0x08021674

0800f260 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d109      	bne.n	800f286 <tcp_shutdown+0x26>
 800f272:	4b26      	ldr	r3, [pc, #152]	; (800f30c <tcp_shutdown+0xac>)
 800f274:	f240 2207 	movw	r2, #519	; 0x207
 800f278:	4925      	ldr	r1, [pc, #148]	; (800f310 <tcp_shutdown+0xb0>)
 800f27a:	4826      	ldr	r0, [pc, #152]	; (800f314 <tcp_shutdown+0xb4>)
 800f27c:	f009 fb56 	bl	801892c <printf>
 800f280:	f06f 030f 	mvn.w	r3, #15
 800f284:	e03d      	b.n	800f302 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	7d1b      	ldrb	r3, [r3, #20]
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d102      	bne.n	800f294 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f28e:	f06f 030a 	mvn.w	r3, #10
 800f292:	e036      	b.n	800f302 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d01b      	beq.n	800f2d2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	8b5b      	ldrh	r3, [r3, #26]
 800f29e:	f043 0310 	orr.w	r3, r3, #16
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d005      	beq.n	800f2ba <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f2ae:	2101      	movs	r1, #1
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7ff fe5d 	bl	800ef70 <tcp_close_shutdown>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	e023      	b.n	800f302 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d007      	beq.n	800f2d2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff fae4 	bl	800e894 <pbuf_free>
      pcb->refused_data = NULL;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d013      	beq.n	800f300 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	7d1b      	ldrb	r3, [r3, #20]
 800f2dc:	2b04      	cmp	r3, #4
 800f2de:	dc02      	bgt.n	800f2e6 <tcp_shutdown+0x86>
 800f2e0:	2b03      	cmp	r3, #3
 800f2e2:	da02      	bge.n	800f2ea <tcp_shutdown+0x8a>
 800f2e4:	e009      	b.n	800f2fa <tcp_shutdown+0x9a>
 800f2e6:	2b07      	cmp	r3, #7
 800f2e8:	d107      	bne.n	800f2fa <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f7ff fe3d 	bl	800ef70 <tcp_close_shutdown>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	e003      	b.n	800f302 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f2fa:	f06f 030a 	mvn.w	r3, #10
 800f2fe:	e000      	b.n	800f302 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f300:	2300      	movs	r3, #0
}
 800f302:	4618      	mov	r0, r3
 800f304:	3710      	adds	r7, #16
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	08021630 	.word	0x08021630
 800f310:	08021758 	.word	0x08021758
 800f314:	08021674 	.word	0x08021674

0800f318 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b08e      	sub	sp, #56	; 0x38
 800f31c:	af04      	add	r7, sp, #16
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d107      	bne.n	800f338 <tcp_abandon+0x20>
 800f328:	4b52      	ldr	r3, [pc, #328]	; (800f474 <tcp_abandon+0x15c>)
 800f32a:	f240 223d 	movw	r2, #573	; 0x23d
 800f32e:	4952      	ldr	r1, [pc, #328]	; (800f478 <tcp_abandon+0x160>)
 800f330:	4852      	ldr	r0, [pc, #328]	; (800f47c <tcp_abandon+0x164>)
 800f332:	f009 fafb 	bl	801892c <printf>
 800f336:	e099      	b.n	800f46c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	7d1b      	ldrb	r3, [r3, #20]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d106      	bne.n	800f34e <tcp_abandon+0x36>
 800f340:	4b4c      	ldr	r3, [pc, #304]	; (800f474 <tcp_abandon+0x15c>)
 800f342:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f346:	494e      	ldr	r1, [pc, #312]	; (800f480 <tcp_abandon+0x168>)
 800f348:	484c      	ldr	r0, [pc, #304]	; (800f47c <tcp_abandon+0x164>)
 800f34a:	f009 faef 	bl	801892c <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	7d1b      	ldrb	r3, [r3, #20]
 800f352:	2b0a      	cmp	r3, #10
 800f354:	d107      	bne.n	800f366 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f356:	6879      	ldr	r1, [r7, #4]
 800f358:	484a      	ldr	r0, [pc, #296]	; (800f484 <tcp_abandon+0x16c>)
 800f35a:	f001 f96f 	bl	801063c <tcp_pcb_remove>
    tcp_free(pcb);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f7ff fd54 	bl	800ee0c <tcp_free>
 800f364:	e082      	b.n	800f46c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f372:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f378:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f380:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	691b      	ldr	r3, [r3, #16]
 800f386:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	7d1b      	ldrb	r3, [r3, #20]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d126      	bne.n	800f3de <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	8adb      	ldrh	r3, [r3, #22]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d02e      	beq.n	800f3f6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f398:	4b3b      	ldr	r3, [pc, #236]	; (800f488 <tcp_abandon+0x170>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d105      	bne.n	800f3ae <tcp_abandon+0x96>
 800f3a2:	4b39      	ldr	r3, [pc, #228]	; (800f488 <tcp_abandon+0x170>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	4a37      	ldr	r2, [pc, #220]	; (800f488 <tcp_abandon+0x170>)
 800f3aa:	6013      	str	r3, [r2, #0]
 800f3ac:	e013      	b.n	800f3d6 <tcp_abandon+0xbe>
 800f3ae:	4b36      	ldr	r3, [pc, #216]	; (800f488 <tcp_abandon+0x170>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	61fb      	str	r3, [r7, #28]
 800f3b4:	e00c      	b.n	800f3d0 <tcp_abandon+0xb8>
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d104      	bne.n	800f3ca <tcp_abandon+0xb2>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	68da      	ldr	r2, [r3, #12]
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	60da      	str	r2, [r3, #12]
 800f3c8:	e005      	b.n	800f3d6 <tcp_abandon+0xbe>
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	61fb      	str	r3, [r7, #28]
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1ef      	bne.n	800f3b6 <tcp_abandon+0x9e>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	60da      	str	r2, [r3, #12]
 800f3dc:	e00b      	b.n	800f3f6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8adb      	ldrh	r3, [r3, #22]
 800f3e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	4828      	ldr	r0, [pc, #160]	; (800f48c <tcp_abandon+0x174>)
 800f3ec:	f001 f926 	bl	801063c <tcp_pcb_remove>
 800f3f0:	4b27      	ldr	r3, [pc, #156]	; (800f490 <tcp_abandon+0x178>)
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d004      	beq.n	800f408 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f402:	4618      	mov	r0, r3
 800f404:	f000 fdfa 	bl	800fffc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d004      	beq.n	800f41a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f414:	4618      	mov	r0, r3
 800f416:	f000 fdf1 	bl	800fffc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d004      	beq.n	800f42c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f426:	4618      	mov	r0, r3
 800f428:	f000 fde8 	bl	800fffc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00e      	beq.n	800f450 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f432:	6879      	ldr	r1, [r7, #4]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	3304      	adds	r3, #4
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	8b12      	ldrh	r2, [r2, #24]
 800f43c:	9202      	str	r2, [sp, #8]
 800f43e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f440:	9201      	str	r2, [sp, #4]
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	460b      	mov	r3, r1
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	69b9      	ldr	r1, [r7, #24]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f005 fac2 	bl	80149d4 <tcp_rst>
    }
    last_state = pcb->state;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	7d1b      	ldrb	r3, [r3, #20]
 800f454:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7ff fcd8 	bl	800ee0c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d004      	beq.n	800f46c <tcp_abandon+0x154>
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	f06f 010c 	mvn.w	r1, #12
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	4798      	blx	r3
  }
}
 800f46c:	3728      	adds	r7, #40	; 0x28
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	08021630 	.word	0x08021630
 800f478:	08021774 	.word	0x08021774
 800f47c:	08021674 	.word	0x08021674
 800f480:	08021790 	.word	0x08021790
 800f484:	2000b6a4 	.word	0x2000b6a4
 800f488:	2000b6a0 	.word	0x2000b6a0
 800f48c:	2000b694 	.word	0x2000b694
 800f490:	2000b690 	.word	0x2000b690

0800f494 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f49c:	2101      	movs	r1, #1
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7ff ff3a 	bl	800f318 <tcp_abandon>
}
 800f4a4:	bf00      	nop
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b088      	sub	sp, #32
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	60f8      	str	r0, [r7, #12]
 800f4b4:	60b9      	str	r1, [r7, #8]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f4ba:	2304      	movs	r3, #4
 800f4bc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d101      	bne.n	800f4c8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f4c4:	4b3e      	ldr	r3, [pc, #248]	; (800f5c0 <tcp_bind+0x114>)
 800f4c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d109      	bne.n	800f4e2 <tcp_bind+0x36>
 800f4ce:	4b3d      	ldr	r3, [pc, #244]	; (800f5c4 <tcp_bind+0x118>)
 800f4d0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f4d4:	493c      	ldr	r1, [pc, #240]	; (800f5c8 <tcp_bind+0x11c>)
 800f4d6:	483d      	ldr	r0, [pc, #244]	; (800f5cc <tcp_bind+0x120>)
 800f4d8:	f009 fa28 	bl	801892c <printf>
 800f4dc:	f06f 030f 	mvn.w	r3, #15
 800f4e0:	e06a      	b.n	800f5b8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	7d1b      	ldrb	r3, [r3, #20]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d009      	beq.n	800f4fe <tcp_bind+0x52>
 800f4ea:	4b36      	ldr	r3, [pc, #216]	; (800f5c4 <tcp_bind+0x118>)
 800f4ec:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f4f0:	4937      	ldr	r1, [pc, #220]	; (800f5d0 <tcp_bind+0x124>)
 800f4f2:	4836      	ldr	r0, [pc, #216]	; (800f5cc <tcp_bind+0x120>)
 800f4f4:	f009 fa1a 	bl	801892c <printf>
 800f4f8:	f06f 0305 	mvn.w	r3, #5
 800f4fc:	e05c      	b.n	800f5b8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f4fe:	88fb      	ldrh	r3, [r7, #6]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d109      	bne.n	800f518 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f504:	f000 f914 	bl	800f730 <tcp_new_port>
 800f508:	4603      	mov	r3, r0
 800f50a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f50c:	88fb      	ldrh	r3, [r7, #6]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d135      	bne.n	800f57e <tcp_bind+0xd2>
      return ERR_BUF;
 800f512:	f06f 0301 	mvn.w	r3, #1
 800f516:	e04f      	b.n	800f5b8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f518:	2300      	movs	r3, #0
 800f51a:	61fb      	str	r3, [r7, #28]
 800f51c:	e02b      	b.n	800f576 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f51e:	4a2d      	ldr	r2, [pc, #180]	; (800f5d4 <tcp_bind+0x128>)
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	61bb      	str	r3, [r7, #24]
 800f52a:	e01e      	b.n	800f56a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	8adb      	ldrh	r3, [r3, #22]
 800f530:	88fa      	ldrh	r2, [r7, #6]
 800f532:	429a      	cmp	r2, r3
 800f534:	d116      	bne.n	800f564 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f536:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d010      	beq.n	800f55e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00c      	beq.n	800f55e <tcp_bind+0xb2>
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d009      	beq.n	800f55e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d005      	beq.n	800f55e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f552:	69bb      	ldr	r3, [r7, #24]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d102      	bne.n	800f564 <tcp_bind+0xb8>
              return ERR_USE;
 800f55e:	f06f 0307 	mvn.w	r3, #7
 800f562:	e029      	b.n	800f5b8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	61bb      	str	r3, [r7, #24]
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1dd      	bne.n	800f52c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	3301      	adds	r3, #1
 800f574:	61fb      	str	r3, [r7, #28]
 800f576:	69fa      	ldr	r2, [r7, #28]
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	dbcf      	blt.n	800f51e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00c      	beq.n	800f59e <tcp_bind+0xf2>
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d008      	beq.n	800f59e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d002      	beq.n	800f598 <tcp_bind+0xec>
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	e000      	b.n	800f59a <tcp_bind+0xee>
 800f598:	2300      	movs	r3, #0
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	88fa      	ldrh	r2, [r7, #6]
 800f5a2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f5a4:	4b0c      	ldr	r3, [pc, #48]	; (800f5d8 <tcp_bind+0x12c>)
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	60da      	str	r2, [r3, #12]
 800f5ac:	4a0a      	ldr	r2, [pc, #40]	; (800f5d8 <tcp_bind+0x12c>)
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6013      	str	r3, [r2, #0]
 800f5b2:	f005 fbd1 	bl	8014d58 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3720      	adds	r7, #32
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	08023670 	.word	0x08023670
 800f5c4:	08021630 	.word	0x08021630
 800f5c8:	080217c4 	.word	0x080217c4
 800f5cc:	08021674 	.word	0x08021674
 800f5d0:	080217dc 	.word	0x080217dc
 800f5d4:	08023648 	.word	0x08023648
 800f5d8:	2000b6a0 	.word	0x2000b6a0

0800f5dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d106      	bne.n	800f5f8 <tcp_update_rcv_ann_wnd+0x1c>
 800f5ea:	4b25      	ldr	r3, [pc, #148]	; (800f680 <tcp_update_rcv_ann_wnd+0xa4>)
 800f5ec:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f5f0:	4924      	ldr	r1, [pc, #144]	; (800f684 <tcp_update_rcv_ann_wnd+0xa8>)
 800f5f2:	4825      	ldr	r0, [pc, #148]	; (800f688 <tcp_update_rcv_ann_wnd+0xac>)
 800f5f4:	f009 f99a 	bl	801892c <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f600:	4413      	add	r3, r2
 800f602:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f60c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f610:	bf28      	it	cs
 800f612:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f616:	b292      	uxth	r2, r2
 800f618:	4413      	add	r3, r2
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	db08      	blt.n	800f634 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62e:	68fa      	ldr	r2, [r7, #12]
 800f630:	1ad3      	subs	r3, r2, r3
 800f632:	e020      	b.n	800f676 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f63c:	1ad3      	subs	r3, r2, r3
 800f63e:	2b00      	cmp	r3, #0
 800f640:	dd03      	ble.n	800f64a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2200      	movs	r2, #0
 800f646:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f648:	e014      	b.n	800f674 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f652:	1ad3      	subs	r3, r2, r3
 800f654:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f65c:	d306      	bcc.n	800f66c <tcp_update_rcv_ann_wnd+0x90>
 800f65e:	4b08      	ldr	r3, [pc, #32]	; (800f680 <tcp_update_rcv_ann_wnd+0xa4>)
 800f660:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f664:	4909      	ldr	r1, [pc, #36]	; (800f68c <tcp_update_rcv_ann_wnd+0xb0>)
 800f666:	4808      	ldr	r0, [pc, #32]	; (800f688 <tcp_update_rcv_ann_wnd+0xac>)
 800f668:	f009 f960 	bl	801892c <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	b29a      	uxth	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f674:	2300      	movs	r3, #0
  }
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	08021630 	.word	0x08021630
 800f684:	0802188c 	.word	0x0802188c
 800f688:	08021674 	.word	0x08021674
 800f68c:	080218b0 	.word	0x080218b0

0800f690 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	460b      	mov	r3, r1
 800f69a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d107      	bne.n	800f6b2 <tcp_recved+0x22>
 800f6a2:	4b1f      	ldr	r3, [pc, #124]	; (800f720 <tcp_recved+0x90>)
 800f6a4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f6a8:	491e      	ldr	r1, [pc, #120]	; (800f724 <tcp_recved+0x94>)
 800f6aa:	481f      	ldr	r0, [pc, #124]	; (800f728 <tcp_recved+0x98>)
 800f6ac:	f009 f93e 	bl	801892c <printf>
 800f6b0:	e032      	b.n	800f718 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	7d1b      	ldrb	r3, [r3, #20]
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d106      	bne.n	800f6c8 <tcp_recved+0x38>
 800f6ba:	4b19      	ldr	r3, [pc, #100]	; (800f720 <tcp_recved+0x90>)
 800f6bc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f6c0:	491a      	ldr	r1, [pc, #104]	; (800f72c <tcp_recved+0x9c>)
 800f6c2:	4819      	ldr	r0, [pc, #100]	; (800f728 <tcp_recved+0x98>)
 800f6c4:	f009 f932 	bl	801892c <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6cc:	887b      	ldrh	r3, [r7, #2]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f6d2:	89fb      	ldrh	r3, [r7, #14]
 800f6d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f6d8:	d804      	bhi.n	800f6e4 <tcp_recved+0x54>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6de:	89fa      	ldrh	r2, [r7, #14]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d204      	bcs.n	800f6ee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f6ea:	851a      	strh	r2, [r3, #40]	; 0x28
 800f6ec:	e002      	b.n	800f6f4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	89fa      	ldrh	r2, [r7, #14]
 800f6f2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f7ff ff71 	bl	800f5dc <tcp_update_rcv_ann_wnd>
 800f6fa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f702:	d309      	bcc.n	800f718 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	8b5b      	ldrh	r3, [r3, #26]
 800f708:	f043 0302 	orr.w	r3, r3, #2
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f004 fbaa 	bl	8013e6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	08021630 	.word	0x08021630
 800f724:	080218cc 	.word	0x080218cc
 800f728:	08021674 	.word	0x08021674
 800f72c:	080218e4 	.word	0x080218e4

0800f730 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f736:	2300      	movs	r3, #0
 800f738:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f73a:	4b1e      	ldr	r3, [pc, #120]	; (800f7b4 <tcp_new_port+0x84>)
 800f73c:	881b      	ldrh	r3, [r3, #0]
 800f73e:	3301      	adds	r3, #1
 800f740:	b29a      	uxth	r2, r3
 800f742:	4b1c      	ldr	r3, [pc, #112]	; (800f7b4 <tcp_new_port+0x84>)
 800f744:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f746:	4b1b      	ldr	r3, [pc, #108]	; (800f7b4 <tcp_new_port+0x84>)
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f74e:	4293      	cmp	r3, r2
 800f750:	d103      	bne.n	800f75a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f752:	4b18      	ldr	r3, [pc, #96]	; (800f7b4 <tcp_new_port+0x84>)
 800f754:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f758:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f75a:	2300      	movs	r3, #0
 800f75c:	71fb      	strb	r3, [r7, #7]
 800f75e:	e01e      	b.n	800f79e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	4a15      	ldr	r2, [pc, #84]	; (800f7b8 <tcp_new_port+0x88>)
 800f764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	603b      	str	r3, [r7, #0]
 800f76c:	e011      	b.n	800f792 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	8ada      	ldrh	r2, [r3, #22]
 800f772:	4b10      	ldr	r3, [pc, #64]	; (800f7b4 <tcp_new_port+0x84>)
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	429a      	cmp	r2, r3
 800f778:	d108      	bne.n	800f78c <tcp_new_port+0x5c>
        n++;
 800f77a:	88bb      	ldrh	r3, [r7, #4]
 800f77c:	3301      	adds	r3, #1
 800f77e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f780:	88bb      	ldrh	r3, [r7, #4]
 800f782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f786:	d3d8      	bcc.n	800f73a <tcp_new_port+0xa>
          return 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	e00d      	b.n	800f7a8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	603b      	str	r3, [r7, #0]
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1ea      	bne.n	800f76e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f798:	79fb      	ldrb	r3, [r7, #7]
 800f79a:	3301      	adds	r3, #1
 800f79c:	71fb      	strb	r3, [r7, #7]
 800f79e:	79fb      	ldrb	r3, [r7, #7]
 800f7a0:	2b03      	cmp	r3, #3
 800f7a2:	d9dd      	bls.n	800f760 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f7a4:	4b03      	ldr	r3, [pc, #12]	; (800f7b4 <tcp_new_port+0x84>)
 800f7a6:	881b      	ldrh	r3, [r3, #0]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr
 800f7b4:	2000002c 	.word	0x2000002c
 800f7b8:	08023648 	.word	0x08023648

0800f7bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f7bc:	b5b0      	push	{r4, r5, r7, lr}
 800f7be:	b090      	sub	sp, #64	; 0x40
 800f7c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f7c8:	4b94      	ldr	r3, [pc, #592]	; (800fa1c <tcp_slowtmr+0x260>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	4a93      	ldr	r2, [pc, #588]	; (800fa1c <tcp_slowtmr+0x260>)
 800f7d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f7d2:	4b93      	ldr	r3, [pc, #588]	; (800fa20 <tcp_slowtmr+0x264>)
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	b2da      	uxtb	r2, r3
 800f7da:	4b91      	ldr	r3, [pc, #580]	; (800fa20 <tcp_slowtmr+0x264>)
 800f7dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f7e2:	4b90      	ldr	r3, [pc, #576]	; (800fa24 <tcp_slowtmr+0x268>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f7e8:	e29d      	b.n	800fd26 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ec:	7d1b      	ldrb	r3, [r3, #20]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <tcp_slowtmr+0x44>
 800f7f2:	4b8d      	ldr	r3, [pc, #564]	; (800fa28 <tcp_slowtmr+0x26c>)
 800f7f4:	f240 42be 	movw	r2, #1214	; 0x4be
 800f7f8:	498c      	ldr	r1, [pc, #560]	; (800fa2c <tcp_slowtmr+0x270>)
 800f7fa:	488d      	ldr	r0, [pc, #564]	; (800fa30 <tcp_slowtmr+0x274>)
 800f7fc:	f009 f896 	bl	801892c <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f802:	7d1b      	ldrb	r3, [r3, #20]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d106      	bne.n	800f816 <tcp_slowtmr+0x5a>
 800f808:	4b87      	ldr	r3, [pc, #540]	; (800fa28 <tcp_slowtmr+0x26c>)
 800f80a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f80e:	4989      	ldr	r1, [pc, #548]	; (800fa34 <tcp_slowtmr+0x278>)
 800f810:	4887      	ldr	r0, [pc, #540]	; (800fa30 <tcp_slowtmr+0x274>)
 800f812:	f009 f88b 	bl	801892c <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f818:	7d1b      	ldrb	r3, [r3, #20]
 800f81a:	2b0a      	cmp	r3, #10
 800f81c:	d106      	bne.n	800f82c <tcp_slowtmr+0x70>
 800f81e:	4b82      	ldr	r3, [pc, #520]	; (800fa28 <tcp_slowtmr+0x26c>)
 800f820:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f824:	4984      	ldr	r1, [pc, #528]	; (800fa38 <tcp_slowtmr+0x27c>)
 800f826:	4882      	ldr	r0, [pc, #520]	; (800fa30 <tcp_slowtmr+0x274>)
 800f828:	f009 f880 	bl	801892c <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82e:	7f9a      	ldrb	r2, [r3, #30]
 800f830:	4b7b      	ldr	r3, [pc, #492]	; (800fa20 <tcp_slowtmr+0x264>)
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	429a      	cmp	r2, r3
 800f836:	d105      	bne.n	800f844 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f842:	e270      	b.n	800fd26 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f844:	4b76      	ldr	r3, [pc, #472]	; (800fa20 <tcp_slowtmr+0x264>)
 800f846:	781a      	ldrb	r2, [r3, #0]
 800f848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f84c:	2300      	movs	r3, #0
 800f84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f852:	2300      	movs	r3, #0
 800f854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85a:	7d1b      	ldrb	r3, [r3, #20]
 800f85c:	2b02      	cmp	r3, #2
 800f85e:	d10a      	bne.n	800f876 <tcp_slowtmr+0xba>
 800f860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f866:	2b05      	cmp	r3, #5
 800f868:	d905      	bls.n	800f876 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f86a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f86e:	3301      	adds	r3, #1
 800f870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f874:	e11e      	b.n	800fab4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f87c:	2b0b      	cmp	r3, #11
 800f87e:	d905      	bls.n	800f88c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f884:	3301      	adds	r3, #1
 800f886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f88a:	e113      	b.n	800fab4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f892:	2b00      	cmp	r3, #0
 800f894:	d075      	beq.n	800f982 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d006      	beq.n	800f8ac <tcp_slowtmr+0xf0>
 800f89e:	4b62      	ldr	r3, [pc, #392]	; (800fa28 <tcp_slowtmr+0x26c>)
 800f8a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f8a4:	4965      	ldr	r1, [pc, #404]	; (800fa3c <tcp_slowtmr+0x280>)
 800f8a6:	4862      	ldr	r0, [pc, #392]	; (800fa30 <tcp_slowtmr+0x274>)
 800f8a8:	f009 f840 	bl	801892c <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d106      	bne.n	800f8c2 <tcp_slowtmr+0x106>
 800f8b4:	4b5c      	ldr	r3, [pc, #368]	; (800fa28 <tcp_slowtmr+0x26c>)
 800f8b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f8ba:	4961      	ldr	r1, [pc, #388]	; (800fa40 <tcp_slowtmr+0x284>)
 800f8bc:	485c      	ldr	r0, [pc, #368]	; (800fa30 <tcp_slowtmr+0x274>)
 800f8be:	f009 f835 	bl	801892c <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f8c8:	2b0b      	cmp	r3, #11
 800f8ca:	d905      	bls.n	800f8d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8d6:	e0ed      	b.n	800fab4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	4a58      	ldr	r2, [pc, #352]	; (800fa44 <tcp_slowtmr+0x288>)
 800f8e2:	5cd3      	ldrb	r3, [r2, r3]
 800f8e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f8ec:	7c7a      	ldrb	r2, [r7, #17]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d907      	bls.n	800f902 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f904:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f908:	7c7a      	ldrb	r2, [r7, #17]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	f200 80d2 	bhi.w	800fab4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f910:	2301      	movs	r3, #1
 800f912:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d108      	bne.n	800f930 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f91e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f920:	f005 f94c 	bl	8014bbc <tcp_zero_window_probe>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d014      	beq.n	800f954 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f92a:	2300      	movs	r3, #0
 800f92c:	623b      	str	r3, [r7, #32]
 800f92e:	e011      	b.n	800f954 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f932:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f936:	4619      	mov	r1, r3
 800f938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f93a:	f004 f811 	bl	8013960 <tcp_split_unsent_seg>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	d107      	bne.n	800f954 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f946:	f004 fa91 	bl	8013e6c <tcp_output>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d101      	bne.n	800f954 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f954:	6a3b      	ldr	r3, [r7, #32]
 800f956:	2b00      	cmp	r3, #0
 800f958:	f000 80ac 	beq.w	800fab4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	2200      	movs	r2, #0
 800f960:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f96a:	2b06      	cmp	r3, #6
 800f96c:	f200 80a2 	bhi.w	800fab4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f972:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f976:	3301      	adds	r3, #1
 800f978:	b2da      	uxtb	r2, r3
 800f97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f980:	e098      	b.n	800fab4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f988:	2b00      	cmp	r3, #0
 800f98a:	db0f      	blt.n	800f9ac <tcp_slowtmr+0x1f0>
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f992:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f996:	4293      	cmp	r3, r2
 800f998:	d008      	beq.n	800f9ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	b21a      	sxth	r2, r3
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	db7b      	blt.n	800fab4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9be:	f004 fd47 	bl	8014450 <tcp_rexmit_rto_prepare>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d007      	beq.n	800f9d8 <tcp_slowtmr+0x21c>
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d171      	bne.n	800fab4 <tcp_slowtmr+0x2f8>
 800f9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d06d      	beq.n	800fab4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	7d1b      	ldrb	r3, [r3, #20]
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d03a      	beq.n	800fa56 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9e6:	2b0c      	cmp	r3, #12
 800f9e8:	bf28      	it	cs
 800f9ea:	230c      	movcs	r3, #12
 800f9ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f9f4:	10db      	asrs	r3, r3, #3
 800f9f6:	b21b      	sxth	r3, r3
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa00:	4413      	add	r3, r2
 800fa02:	7efa      	ldrb	r2, [r7, #27]
 800fa04:	4910      	ldr	r1, [pc, #64]	; (800fa48 <tcp_slowtmr+0x28c>)
 800fa06:	5c8a      	ldrb	r2, [r1, r2]
 800fa08:	4093      	lsls	r3, r2
 800fa0a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fa12:	4293      	cmp	r3, r2
 800fa14:	dc1a      	bgt.n	800fa4c <tcp_slowtmr+0x290>
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	b21a      	sxth	r2, r3
 800fa1a:	e019      	b.n	800fa50 <tcp_slowtmr+0x294>
 800fa1c:	2000b698 	.word	0x2000b698
 800fa20:	20004aae 	.word	0x20004aae
 800fa24:	2000b694 	.word	0x2000b694
 800fa28:	08021630 	.word	0x08021630
 800fa2c:	08021974 	.word	0x08021974
 800fa30:	08021674 	.word	0x08021674
 800fa34:	080219a0 	.word	0x080219a0
 800fa38:	080219cc 	.word	0x080219cc
 800fa3c:	080219fc 	.word	0x080219fc
 800fa40:	08021a30 	.word	0x08021a30
 800fa44:	08023640 	.word	0x08023640
 800fa48:	08023630 	.word	0x08023630
 800fa4c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa58:	2200      	movs	r2, #0
 800fa5a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	bf28      	it	cs
 800fa6c:	4613      	movcs	r3, r2
 800fa6e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fa70:	8a7b      	ldrh	r3, [r7, #18]
 800fa72:	085b      	lsrs	r3, r3, #1
 800fa74:	b29a      	uxth	r2, r3
 800fa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa86:	005b      	lsls	r3, r3, #1
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d206      	bcs.n	800fa9c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa92:	005b      	lsls	r3, r3, #1
 800fa94:	b29a      	uxth	r2, r3
 800fa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800faa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	2200      	movs	r2, #0
 800faaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800faae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fab0:	f004 fd3e 	bl	8014530 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab6:	7d1b      	ldrb	r3, [r3, #20]
 800fab8:	2b06      	cmp	r3, #6
 800faba:	d111      	bne.n	800fae0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	8b5b      	ldrh	r3, [r3, #26]
 800fac0:	f003 0310 	and.w	r3, r3, #16
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d00b      	beq.n	800fae0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fac8:	4b9c      	ldr	r3, [pc, #624]	; (800fd3c <tcp_slowtmr+0x580>)
 800faca:	681a      	ldr	r2, [r3, #0]
 800facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800face:	6a1b      	ldr	r3, [r3, #32]
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	2b28      	cmp	r3, #40	; 0x28
 800fad4:	d904      	bls.n	800fae0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fada:	3301      	adds	r3, #1
 800fadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae2:	7a5b      	ldrb	r3, [r3, #9]
 800fae4:	f003 0308 	and.w	r3, r3, #8
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d04a      	beq.n	800fb82 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800faec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800faf0:	2b04      	cmp	r3, #4
 800faf2:	d003      	beq.n	800fafc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800faf8:	2b07      	cmp	r3, #7
 800fafa:	d142      	bne.n	800fb82 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fafc:	4b8f      	ldr	r3, [pc, #572]	; (800fd3c <tcp_slowtmr+0x580>)
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb02:	6a1b      	ldr	r3, [r3, #32]
 800fb04:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fb0c:	4b8c      	ldr	r3, [pc, #560]	; (800fd40 <tcp_slowtmr+0x584>)
 800fb0e:	440b      	add	r3, r1
 800fb10:	498c      	ldr	r1, [pc, #560]	; (800fd44 <tcp_slowtmr+0x588>)
 800fb12:	fba1 1303 	umull	r1, r3, r1, r3
 800fb16:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d90a      	bls.n	800fb32 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb20:	3301      	adds	r3, #1
 800fb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fb26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fb30:	e027      	b.n	800fb82 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb32:	4b82      	ldr	r3, [pc, #520]	; (800fd3c <tcp_slowtmr+0x580>)
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb38:	6a1b      	ldr	r3, [r3, #32]
 800fb3a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fb48:	4618      	mov	r0, r3
 800fb4a:	4b7f      	ldr	r3, [pc, #508]	; (800fd48 <tcp_slowtmr+0x58c>)
 800fb4c:	fb03 f300 	mul.w	r3, r3, r0
 800fb50:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fb52:	497c      	ldr	r1, [pc, #496]	; (800fd44 <tcp_slowtmr+0x588>)
 800fb54:	fba1 1303 	umull	r1, r3, r1, r3
 800fb58:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d911      	bls.n	800fb82 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fb5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb60:	f004 ffec 	bl	8014b3c <tcp_keepalive>
 800fb64:	4603      	mov	r3, r0
 800fb66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fb6a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d107      	bne.n	800fb82 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fb78:	3301      	adds	r3, #1
 800fb7a:	b2da      	uxtb	r2, r3
 800fb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d011      	beq.n	800fbae <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fb8a:	4b6c      	ldr	r3, [pc, #432]	; (800fd3c <tcp_slowtmr+0x580>)
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	1ad2      	subs	r2, r2, r3
 800fb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	005b      	lsls	r3, r3, #1
 800fba0:	440b      	add	r3, r1
 800fba2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d302      	bcc.n	800fbae <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbaa:	f000 feab 	bl	8010904 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	7d1b      	ldrb	r3, [r3, #20]
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	d10b      	bne.n	800fbce <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbb6:	4b61      	ldr	r3, [pc, #388]	; (800fd3c <tcp_slowtmr+0x580>)
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbc:	6a1b      	ldr	r3, [r3, #32]
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	2b28      	cmp	r3, #40	; 0x28
 800fbc2:	d904      	bls.n	800fbce <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbc8:	3301      	adds	r3, #1
 800fbca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd0:	7d1b      	ldrb	r3, [r3, #20]
 800fbd2:	2b09      	cmp	r3, #9
 800fbd4:	d10b      	bne.n	800fbee <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbd6:	4b59      	ldr	r3, [pc, #356]	; (800fd3c <tcp_slowtmr+0x580>)
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbdc:	6a1b      	ldr	r3, [r3, #32]
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	2bf0      	cmp	r3, #240	; 0xf0
 800fbe2:	d904      	bls.n	800fbee <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbe8:	3301      	adds	r3, #1
 800fbea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fbee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d060      	beq.n	800fcb8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbfc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fbfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc00:	f000 fccc 	bl	801059c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d010      	beq.n	800fc2c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fc0a:	4b50      	ldr	r3, [pc, #320]	; (800fd4c <tcp_slowtmr+0x590>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d106      	bne.n	800fc22 <tcp_slowtmr+0x466>
 800fc14:	4b4e      	ldr	r3, [pc, #312]	; (800fd50 <tcp_slowtmr+0x594>)
 800fc16:	f240 526d 	movw	r2, #1389	; 0x56d
 800fc1a:	494e      	ldr	r1, [pc, #312]	; (800fd54 <tcp_slowtmr+0x598>)
 800fc1c:	484e      	ldr	r0, [pc, #312]	; (800fd58 <tcp_slowtmr+0x59c>)
 800fc1e:	f008 fe85 	bl	801892c <printf>
        prev->next = pcb->next;
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	68da      	ldr	r2, [r3, #12]
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	60da      	str	r2, [r3, #12]
 800fc2a:	e00f      	b.n	800fc4c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fc2c:	4b47      	ldr	r3, [pc, #284]	; (800fd4c <tcp_slowtmr+0x590>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d006      	beq.n	800fc44 <tcp_slowtmr+0x488>
 800fc36:	4b46      	ldr	r3, [pc, #280]	; (800fd50 <tcp_slowtmr+0x594>)
 800fc38:	f240 5271 	movw	r2, #1393	; 0x571
 800fc3c:	4947      	ldr	r1, [pc, #284]	; (800fd5c <tcp_slowtmr+0x5a0>)
 800fc3e:	4846      	ldr	r0, [pc, #280]	; (800fd58 <tcp_slowtmr+0x59c>)
 800fc40:	f008 fe74 	bl	801892c <printf>
        tcp_active_pcbs = pcb->next;
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	4a40      	ldr	r2, [pc, #256]	; (800fd4c <tcp_slowtmr+0x590>)
 800fc4a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fc4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d013      	beq.n	800fc7c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc56:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fc5c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc60:	3304      	adds	r3, #4
 800fc62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc64:	8ad2      	ldrh	r2, [r2, #22]
 800fc66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc68:	8b09      	ldrh	r1, [r1, #24]
 800fc6a:	9102      	str	r1, [sp, #8]
 800fc6c:	9201      	str	r2, [sp, #4]
 800fc6e:	9300      	str	r3, [sp, #0]
 800fc70:	462b      	mov	r3, r5
 800fc72:	4622      	mov	r2, r4
 800fc74:	4601      	mov	r1, r0
 800fc76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc78:	f004 feac 	bl	80149d4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7e:	691b      	ldr	r3, [r3, #16]
 800fc80:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc84:	7d1b      	ldrb	r3, [r3, #20]
 800fc86:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc92:	6838      	ldr	r0, [r7, #0]
 800fc94:	f7ff f8ba 	bl	800ee0c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fc98:	4b31      	ldr	r3, [pc, #196]	; (800fd60 <tcp_slowtmr+0x5a4>)
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d004      	beq.n	800fcae <tcp_slowtmr+0x4f2>
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f06f 010c 	mvn.w	r1, #12
 800fcaa:	68b8      	ldr	r0, [r7, #8]
 800fcac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fcae:	4b2c      	ldr	r3, [pc, #176]	; (800fd60 <tcp_slowtmr+0x5a4>)
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d037      	beq.n	800fd26 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fcb6:	e592      	b.n	800f7de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc4:	7f1b      	ldrb	r3, [r3, #28]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fccc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd0:	7f1a      	ldrb	r2, [r3, #28]
 800fcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd4:	7f5b      	ldrb	r3, [r3, #29]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d325      	bcc.n	800fd26 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcdc:	2200      	movs	r2, #0
 800fcde:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fce0:	4b1f      	ldr	r3, [pc, #124]	; (800fd60 <tcp_slowtmr+0x5a4>)
 800fce2:	2200      	movs	r2, #0
 800fce4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d00b      	beq.n	800fd08 <tcp_slowtmr+0x54c>
 800fcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcf8:	6912      	ldr	r2, [r2, #16]
 800fcfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcfc:	4610      	mov	r0, r2
 800fcfe:	4798      	blx	r3
 800fd00:	4603      	mov	r3, r0
 800fd02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fd06:	e002      	b.n	800fd0e <tcp_slowtmr+0x552>
 800fd08:	2300      	movs	r3, #0
 800fd0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fd0e:	4b14      	ldr	r3, [pc, #80]	; (800fd60 <tcp_slowtmr+0x5a4>)
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d000      	beq.n	800fd18 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fd16:	e562      	b.n	800f7de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fd18:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d102      	bne.n	800fd26 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fd20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd22:	f004 f8a3 	bl	8013e6c <tcp_output>
  while (pcb != NULL) {
 800fd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f47f ad5e 	bne.w	800f7ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fd32:	4b0c      	ldr	r3, [pc, #48]	; (800fd64 <tcp_slowtmr+0x5a8>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fd38:	e069      	b.n	800fe0e <tcp_slowtmr+0x652>
 800fd3a:	bf00      	nop
 800fd3c:	2000b698 	.word	0x2000b698
 800fd40:	000a4cb8 	.word	0x000a4cb8
 800fd44:	10624dd3 	.word	0x10624dd3
 800fd48:	000124f8 	.word	0x000124f8
 800fd4c:	2000b694 	.word	0x2000b694
 800fd50:	08021630 	.word	0x08021630
 800fd54:	08021a68 	.word	0x08021a68
 800fd58:	08021674 	.word	0x08021674
 800fd5c:	08021a94 	.word	0x08021a94
 800fd60:	2000b690 	.word	0x2000b690
 800fd64:	2000b6a4 	.word	0x2000b6a4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	7d1b      	ldrb	r3, [r3, #20]
 800fd6c:	2b0a      	cmp	r3, #10
 800fd6e:	d006      	beq.n	800fd7e <tcp_slowtmr+0x5c2>
 800fd70:	4b2b      	ldr	r3, [pc, #172]	; (800fe20 <tcp_slowtmr+0x664>)
 800fd72:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fd76:	492b      	ldr	r1, [pc, #172]	; (800fe24 <tcp_slowtmr+0x668>)
 800fd78:	482b      	ldr	r0, [pc, #172]	; (800fe28 <tcp_slowtmr+0x66c>)
 800fd7a:	f008 fdd7 	bl	801892c <printf>
    pcb_remove = 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd84:	4b29      	ldr	r3, [pc, #164]	; (800fe2c <tcp_slowtmr+0x670>)
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8a:	6a1b      	ldr	r3, [r3, #32]
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	2bf0      	cmp	r3, #240	; 0xf0
 800fd90:	d904      	bls.n	800fd9c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fd92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd96:	3301      	adds	r3, #1
 800fd98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fd9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d02f      	beq.n	800fe04 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fda6:	f000 fbf9 	bl	801059c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d010      	beq.n	800fdd2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fdb0:	4b1f      	ldr	r3, [pc, #124]	; (800fe30 <tcp_slowtmr+0x674>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d106      	bne.n	800fdc8 <tcp_slowtmr+0x60c>
 800fdba:	4b19      	ldr	r3, [pc, #100]	; (800fe20 <tcp_slowtmr+0x664>)
 800fdbc:	f240 52af 	movw	r2, #1455	; 0x5af
 800fdc0:	491c      	ldr	r1, [pc, #112]	; (800fe34 <tcp_slowtmr+0x678>)
 800fdc2:	4819      	ldr	r0, [pc, #100]	; (800fe28 <tcp_slowtmr+0x66c>)
 800fdc4:	f008 fdb2 	bl	801892c <printf>
        prev->next = pcb->next;
 800fdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdca:	68da      	ldr	r2, [r3, #12]
 800fdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdce:	60da      	str	r2, [r3, #12]
 800fdd0:	e00f      	b.n	800fdf2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fdd2:	4b17      	ldr	r3, [pc, #92]	; (800fe30 <tcp_slowtmr+0x674>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d006      	beq.n	800fdea <tcp_slowtmr+0x62e>
 800fddc:	4b10      	ldr	r3, [pc, #64]	; (800fe20 <tcp_slowtmr+0x664>)
 800fdde:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fde2:	4915      	ldr	r1, [pc, #84]	; (800fe38 <tcp_slowtmr+0x67c>)
 800fde4:	4810      	ldr	r0, [pc, #64]	; (800fe28 <tcp_slowtmr+0x66c>)
 800fde6:	f008 fda1 	bl	801892c <printf>
        tcp_tw_pcbs = pcb->next;
 800fdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	4a10      	ldr	r2, [pc, #64]	; (800fe30 <tcp_slowtmr+0x674>)
 800fdf0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fdfc:	69f8      	ldr	r0, [r7, #28]
 800fdfe:	f7ff f805 	bl	800ee0c <tcp_free>
 800fe02:	e004      	b.n	800fe0e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fe04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fe0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1a9      	bne.n	800fd68 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop
 800fe18:	3730      	adds	r7, #48	; 0x30
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bdb0      	pop	{r4, r5, r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	08021630 	.word	0x08021630
 800fe24:	08021ac0 	.word	0x08021ac0
 800fe28:	08021674 	.word	0x08021674
 800fe2c:	2000b698 	.word	0x2000b698
 800fe30:	2000b6a4 	.word	0x2000b6a4
 800fe34:	08021af0 	.word	0x08021af0
 800fe38:	08021b18 	.word	0x08021b18

0800fe3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fe42:	4b2d      	ldr	r3, [pc, #180]	; (800fef8 <tcp_fasttmr+0xbc>)
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	3301      	adds	r3, #1
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	4b2b      	ldr	r3, [pc, #172]	; (800fef8 <tcp_fasttmr+0xbc>)
 800fe4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fe4e:	4b2b      	ldr	r3, [pc, #172]	; (800fefc <tcp_fasttmr+0xc0>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fe54:	e048      	b.n	800fee8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	7f9a      	ldrb	r2, [r3, #30]
 800fe5a:	4b27      	ldr	r3, [pc, #156]	; (800fef8 <tcp_fasttmr+0xbc>)
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d03f      	beq.n	800fee2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fe62:	4b25      	ldr	r3, [pc, #148]	; (800fef8 <tcp_fasttmr+0xbc>)
 800fe64:	781a      	ldrb	r2, [r3, #0]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	8b5b      	ldrh	r3, [r3, #26]
 800fe6e:	f003 0301 	and.w	r3, r3, #1
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d010      	beq.n	800fe98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	8b5b      	ldrh	r3, [r3, #26]
 800fe7a:	f043 0302 	orr.w	r3, r3, #2
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f003 fff1 	bl	8013e6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	8b5b      	ldrh	r3, [r3, #26]
 800fe8e:	f023 0303 	bic.w	r3, r3, #3
 800fe92:	b29a      	uxth	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	8b5b      	ldrh	r3, [r3, #26]
 800fe9c:	f003 0308 	and.w	r3, r3, #8
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d009      	beq.n	800feb8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	8b5b      	ldrh	r3, [r3, #26]
 800fea8:	f023 0308 	bic.w	r3, r3, #8
 800feac:	b29a      	uxth	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f7ff f93e 	bl	800f134 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d00a      	beq.n	800fedc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fec6:	4b0e      	ldr	r3, [pc, #56]	; (800ff00 <tcp_fasttmr+0xc4>)
 800fec8:	2200      	movs	r2, #0
 800feca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 f819 	bl	800ff04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fed2:	4b0b      	ldr	r3, [pc, #44]	; (800ff00 <tcp_fasttmr+0xc4>)
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d000      	beq.n	800fedc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800feda:	e7b8      	b.n	800fe4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	607b      	str	r3, [r7, #4]
 800fee0:	e002      	b.n	800fee8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d1b3      	bne.n	800fe56 <tcp_fasttmr+0x1a>
    }
  }
}
 800feee:	bf00      	nop
 800fef0:	bf00      	nop
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	20004aae 	.word	0x20004aae
 800fefc:	2000b694 	.word	0x2000b694
 800ff00:	2000b690 	.word	0x2000b690

0800ff04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ff04:	b590      	push	{r4, r7, lr}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d109      	bne.n	800ff26 <tcp_process_refused_data+0x22>
 800ff12:	4b37      	ldr	r3, [pc, #220]	; (800fff0 <tcp_process_refused_data+0xec>)
 800ff14:	f240 6209 	movw	r2, #1545	; 0x609
 800ff18:	4936      	ldr	r1, [pc, #216]	; (800fff4 <tcp_process_refused_data+0xf0>)
 800ff1a:	4837      	ldr	r0, [pc, #220]	; (800fff8 <tcp_process_refused_data+0xf4>)
 800ff1c:	f008 fd06 	bl	801892c <printf>
 800ff20:	f06f 030f 	mvn.w	r3, #15
 800ff24:	e060      	b.n	800ffe8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff2a:	7b5b      	ldrb	r3, [r3, #13]
 800ff2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d00b      	beq.n	800ff5c <tcp_process_refused_data+0x58>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6918      	ldr	r0, [r3, #16]
 800ff4e:	2300      	movs	r3, #0
 800ff50:	68ba      	ldr	r2, [r7, #8]
 800ff52:	6879      	ldr	r1, [r7, #4]
 800ff54:	47a0      	blx	r4
 800ff56:	4603      	mov	r3, r0
 800ff58:	73fb      	strb	r3, [r7, #15]
 800ff5a:	e007      	b.n	800ff6c <tcp_process_refused_data+0x68>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	68ba      	ldr	r2, [r7, #8]
 800ff60:	6879      	ldr	r1, [r7, #4]
 800ff62:	2000      	movs	r0, #0
 800ff64:	f000 f8a4 	bl	80100b0 <tcp_recv_null>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ff6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d12a      	bne.n	800ffca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ff74:	7bbb      	ldrb	r3, [r7, #14]
 800ff76:	f003 0320 	and.w	r3, r3, #32
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d033      	beq.n	800ffe6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ff86:	d005      	beq.n	800ff94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00b      	beq.n	800ffb6 <tcp_process_refused_data+0xb2>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6918      	ldr	r0, [r3, #16]
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	2200      	movs	r2, #0
 800ffac:	6879      	ldr	r1, [r7, #4]
 800ffae:	47a0      	blx	r4
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73fb      	strb	r3, [r7, #15]
 800ffb4:	e001      	b.n	800ffba <tcp_process_refused_data+0xb6>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ffba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffbe:	f113 0f0d 	cmn.w	r3, #13
 800ffc2:	d110      	bne.n	800ffe6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ffc4:	f06f 030c 	mvn.w	r3, #12
 800ffc8:	e00e      	b.n	800ffe8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ffca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffce:	f113 0f0d 	cmn.w	r3, #13
 800ffd2:	d102      	bne.n	800ffda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ffd4:	f06f 030c 	mvn.w	r3, #12
 800ffd8:	e006      	b.n	800ffe8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	68ba      	ldr	r2, [r7, #8]
 800ffde:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ffe0:	f06f 0304 	mvn.w	r3, #4
 800ffe4:	e000      	b.n	800ffe8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ffe6:	2300      	movs	r3, #0
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3714      	adds	r7, #20
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd90      	pop	{r4, r7, pc}
 800fff0:	08021630 	.word	0x08021630
 800fff4:	08021b40 	.word	0x08021b40
 800fff8:	08021674 	.word	0x08021674

0800fffc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010004:	e007      	b.n	8010016 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 f80a 	bl	8010026 <tcp_seg_free>
    seg = next;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1f4      	bne.n	8010006 <tcp_segs_free+0xa>
  }
}
 801001c:	bf00      	nop
 801001e:	bf00      	nop
 8010020:	3710      	adds	r7, #16
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}

08010026 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010026:	b580      	push	{r7, lr}
 8010028:	b082      	sub	sp, #8
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00c      	beq.n	801004e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d004      	beq.n	8010046 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	f7fe fc27 	bl	800e894 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010046:	6879      	ldr	r1, [r7, #4]
 8010048:	2003      	movs	r0, #3
 801004a:	f7fd fdf7 	bl	800dc3c <memp_free>
  }
}
 801004e:	bf00      	nop
 8010050:	3708      	adds	r7, #8
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d106      	bne.n	8010074 <tcp_seg_copy+0x1c>
 8010066:	4b0f      	ldr	r3, [pc, #60]	; (80100a4 <tcp_seg_copy+0x4c>)
 8010068:	f240 6282 	movw	r2, #1666	; 0x682
 801006c:	490e      	ldr	r1, [pc, #56]	; (80100a8 <tcp_seg_copy+0x50>)
 801006e:	480f      	ldr	r0, [pc, #60]	; (80100ac <tcp_seg_copy+0x54>)
 8010070:	f008 fc5c 	bl	801892c <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010074:	2003      	movs	r0, #3
 8010076:	f7fd fd8f 	bl	800db98 <memp_malloc>
 801007a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d101      	bne.n	8010086 <tcp_seg_copy+0x2e>
    return NULL;
 8010082:	2300      	movs	r3, #0
 8010084:	e00a      	b.n	801009c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010086:	2210      	movs	r2, #16
 8010088:	6879      	ldr	r1, [r7, #4]
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	f008 f9a0 	bl	80183d0 <memcpy>
  pbuf_ref(cseg->p);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	4618      	mov	r0, r3
 8010096:	f7fe fca3 	bl	800e9e0 <pbuf_ref>
  return cseg;
 801009a:	68fb      	ldr	r3, [r7, #12]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	08021630 	.word	0x08021630
 80100a8:	08021b84 	.word	0x08021b84
 80100ac:	08021674 	.word	0x08021674

080100b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	607a      	str	r2, [r7, #4]
 80100bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d109      	bne.n	80100d8 <tcp_recv_null+0x28>
 80100c4:	4b12      	ldr	r3, [pc, #72]	; (8010110 <tcp_recv_null+0x60>)
 80100c6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80100ca:	4912      	ldr	r1, [pc, #72]	; (8010114 <tcp_recv_null+0x64>)
 80100cc:	4812      	ldr	r0, [pc, #72]	; (8010118 <tcp_recv_null+0x68>)
 80100ce:	f008 fc2d 	bl	801892c <printf>
 80100d2:	f06f 030f 	mvn.w	r3, #15
 80100d6:	e016      	b.n	8010106 <tcp_recv_null+0x56>

  if (p != NULL) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d009      	beq.n	80100f2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	891b      	ldrh	r3, [r3, #8]
 80100e2:	4619      	mov	r1, r3
 80100e4:	68b8      	ldr	r0, [r7, #8]
 80100e6:	f7ff fad3 	bl	800f690 <tcp_recved>
    pbuf_free(p);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7fe fbd2 	bl	800e894 <pbuf_free>
 80100f0:	e008      	b.n	8010104 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80100f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d104      	bne.n	8010104 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80100fa:	68b8      	ldr	r0, [r7, #8]
 80100fc:	f7ff f884 	bl	800f208 <tcp_close>
 8010100:	4603      	mov	r3, r0
 8010102:	e000      	b.n	8010106 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	08021630 	.word	0x08021630
 8010114:	08021ba0 	.word	0x08021ba0
 8010118:	08021674 	.word	0x08021674

0801011c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801012a:	2b00      	cmp	r3, #0
 801012c:	db01      	blt.n	8010132 <tcp_kill_prio+0x16>
 801012e:	79fb      	ldrb	r3, [r7, #7]
 8010130:	e000      	b.n	8010134 <tcp_kill_prio+0x18>
 8010132:	237f      	movs	r3, #127	; 0x7f
 8010134:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010136:	7afb      	ldrb	r3, [r7, #11]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d034      	beq.n	80101a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801013c:	7afb      	ldrb	r3, [r7, #11]
 801013e:	3b01      	subs	r3, #1
 8010140:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010142:	2300      	movs	r3, #0
 8010144:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010146:	2300      	movs	r3, #0
 8010148:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801014a:	4b19      	ldr	r3, [pc, #100]	; (80101b0 <tcp_kill_prio+0x94>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	617b      	str	r3, [r7, #20]
 8010150:	e01f      	b.n	8010192 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	7d5b      	ldrb	r3, [r3, #21]
 8010156:	7afa      	ldrb	r2, [r7, #11]
 8010158:	429a      	cmp	r2, r3
 801015a:	d80c      	bhi.n	8010176 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010160:	7afa      	ldrb	r2, [r7, #11]
 8010162:	429a      	cmp	r2, r3
 8010164:	d112      	bne.n	801018c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010166:	4b13      	ldr	r3, [pc, #76]	; (80101b4 <tcp_kill_prio+0x98>)
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	6a1b      	ldr	r3, [r3, #32]
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	429a      	cmp	r2, r3
 8010174:	d80a      	bhi.n	801018c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010176:	4b0f      	ldr	r3, [pc, #60]	; (80101b4 <tcp_kill_prio+0x98>)
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	1ad3      	subs	r3, r2, r3
 8010180:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	7d5b      	ldrb	r3, [r3, #21]
 801018a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	617b      	str	r3, [r7, #20]
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d1dc      	bne.n	8010152 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d004      	beq.n	80101a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801019e:	6938      	ldr	r0, [r7, #16]
 80101a0:	f7ff f978 	bl	800f494 <tcp_abort>
 80101a4:	e000      	b.n	80101a8 <tcp_kill_prio+0x8c>
    return;
 80101a6:	bf00      	nop
  }
}
 80101a8:	3718      	adds	r7, #24
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	2000b694 	.word	0x2000b694
 80101b4:	2000b698 	.word	0x2000b698

080101b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b086      	sub	sp, #24
 80101bc:	af00      	add	r7, sp, #0
 80101be:	4603      	mov	r3, r0
 80101c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80101c2:	79fb      	ldrb	r3, [r7, #7]
 80101c4:	2b08      	cmp	r3, #8
 80101c6:	d009      	beq.n	80101dc <tcp_kill_state+0x24>
 80101c8:	79fb      	ldrb	r3, [r7, #7]
 80101ca:	2b09      	cmp	r3, #9
 80101cc:	d006      	beq.n	80101dc <tcp_kill_state+0x24>
 80101ce:	4b1a      	ldr	r3, [pc, #104]	; (8010238 <tcp_kill_state+0x80>)
 80101d0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80101d4:	4919      	ldr	r1, [pc, #100]	; (801023c <tcp_kill_state+0x84>)
 80101d6:	481a      	ldr	r0, [pc, #104]	; (8010240 <tcp_kill_state+0x88>)
 80101d8:	f008 fba8 	bl	801892c <printf>

  inactivity = 0;
 80101dc:	2300      	movs	r3, #0
 80101de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80101e0:	2300      	movs	r3, #0
 80101e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101e4:	4b17      	ldr	r3, [pc, #92]	; (8010244 <tcp_kill_state+0x8c>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	617b      	str	r3, [r7, #20]
 80101ea:	e017      	b.n	801021c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	7d1b      	ldrb	r3, [r3, #20]
 80101f0:	79fa      	ldrb	r2, [r7, #7]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d10f      	bne.n	8010216 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80101f6:	4b14      	ldr	r3, [pc, #80]	; (8010248 <tcp_kill_state+0x90>)
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	6a1b      	ldr	r3, [r3, #32]
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	68fa      	ldr	r2, [r7, #12]
 8010202:	429a      	cmp	r2, r3
 8010204:	d807      	bhi.n	8010216 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010206:	4b10      	ldr	r3, [pc, #64]	; (8010248 <tcp_kill_state+0x90>)
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	6a1b      	ldr	r3, [r3, #32]
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	617b      	str	r3, [r7, #20]
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1e4      	bne.n	80101ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d003      	beq.n	8010230 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010228:	2100      	movs	r1, #0
 801022a:	6938      	ldr	r0, [r7, #16]
 801022c:	f7ff f874 	bl	800f318 <tcp_abandon>
  }
}
 8010230:	bf00      	nop
 8010232:	3718      	adds	r7, #24
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	08021630 	.word	0x08021630
 801023c:	08021bbc 	.word	0x08021bbc
 8010240:	08021674 	.word	0x08021674
 8010244:	2000b694 	.word	0x2000b694
 8010248:	2000b698 	.word	0x2000b698

0801024c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010252:	2300      	movs	r3, #0
 8010254:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010256:	2300      	movs	r3, #0
 8010258:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801025a:	4b12      	ldr	r3, [pc, #72]	; (80102a4 <tcp_kill_timewait+0x58>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	60fb      	str	r3, [r7, #12]
 8010260:	e012      	b.n	8010288 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010262:	4b11      	ldr	r3, [pc, #68]	; (80102a8 <tcp_kill_timewait+0x5c>)
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6a1b      	ldr	r3, [r3, #32]
 801026a:	1ad3      	subs	r3, r2, r3
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	429a      	cmp	r2, r3
 8010270:	d807      	bhi.n	8010282 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010272:	4b0d      	ldr	r3, [pc, #52]	; (80102a8 <tcp_kill_timewait+0x5c>)
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6a1b      	ldr	r3, [r3, #32]
 801027a:	1ad3      	subs	r3, r2, r3
 801027c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	60fb      	str	r3, [r7, #12]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1e9      	bne.n	8010262 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d002      	beq.n	801029a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010294:	68b8      	ldr	r0, [r7, #8]
 8010296:	f7ff f8fd 	bl	800f494 <tcp_abort>
  }
}
 801029a:	bf00      	nop
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	2000b6a4 	.word	0x2000b6a4
 80102a8:	2000b698 	.word	0x2000b698

080102ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80102b2:	4b10      	ldr	r3, [pc, #64]	; (80102f4 <tcp_handle_closepend+0x48>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80102b8:	e014      	b.n	80102e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	8b5b      	ldrh	r3, [r3, #26]
 80102c4:	f003 0308 	and.w	r3, r3, #8
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d009      	beq.n	80102e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	8b5b      	ldrh	r3, [r3, #26]
 80102d0:	f023 0308 	bic.w	r3, r3, #8
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7fe ff2a 	bl	800f134 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1e7      	bne.n	80102ba <tcp_handle_closepend+0xe>
  }
}
 80102ea:	bf00      	nop
 80102ec:	bf00      	nop
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	2000b694 	.word	0x2000b694

080102f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	4603      	mov	r3, r0
 8010300:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010302:	2001      	movs	r0, #1
 8010304:	f7fd fc48 	bl	800db98 <memp_malloc>
 8010308:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d126      	bne.n	801035e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010310:	f7ff ffcc 	bl	80102ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010314:	f7ff ff9a 	bl	801024c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010318:	2001      	movs	r0, #1
 801031a:	f7fd fc3d 	bl	800db98 <memp_malloc>
 801031e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d11b      	bne.n	801035e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010326:	2009      	movs	r0, #9
 8010328:	f7ff ff46 	bl	80101b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801032c:	2001      	movs	r0, #1
 801032e:	f7fd fc33 	bl	800db98 <memp_malloc>
 8010332:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d111      	bne.n	801035e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801033a:	2008      	movs	r0, #8
 801033c:	f7ff ff3c 	bl	80101b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010340:	2001      	movs	r0, #1
 8010342:	f7fd fc29 	bl	800db98 <memp_malloc>
 8010346:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d107      	bne.n	801035e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801034e:	79fb      	ldrb	r3, [r7, #7]
 8010350:	4618      	mov	r0, r3
 8010352:	f7ff fee3 	bl	801011c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010356:	2001      	movs	r0, #1
 8010358:	f7fd fc1e 	bl	800db98 <memp_malloc>
 801035c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d03f      	beq.n	80103e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010364:	229c      	movs	r2, #156	; 0x9c
 8010366:	2100      	movs	r1, #0
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	f008 f859 	bl	8018420 <memset>
    pcb->prio = prio;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	79fa      	ldrb	r2, [r7, #7]
 8010372:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801037a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010384:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	22ff      	movs	r2, #255	; 0xff
 8010392:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f44f 7206 	mov.w	r2, #536	; 0x218
 801039a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2206      	movs	r2, #6
 80103a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2206      	movs	r2, #6
 80103a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2201      	movs	r2, #1
 80103b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80103ba:	4b0d      	ldr	r3, [pc, #52]	; (80103f0 <tcp_alloc+0xf8>)
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80103c2:	4b0c      	ldr	r3, [pc, #48]	; (80103f4 <tcp_alloc+0xfc>)
 80103c4:	781a      	ldrb	r2, [r3, #0]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80103d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	4a08      	ldr	r2, [pc, #32]	; (80103f8 <tcp_alloc+0x100>)
 80103d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	4a07      	ldr	r2, [pc, #28]	; (80103fc <tcp_alloc+0x104>)
 80103e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80103e4:	68fb      	ldr	r3, [r7, #12]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	2000b698 	.word	0x2000b698
 80103f4:	20004aae 	.word	0x20004aae
 80103f8:	080100b1 	.word	0x080100b1
 80103fc:	006ddd00 	.word	0x006ddd00

08010400 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	4603      	mov	r3, r0
 8010408:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801040a:	2040      	movs	r0, #64	; 0x40
 801040c:	f7ff ff74 	bl	80102f8 <tcp_alloc>
 8010410:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010412:	68fb      	ldr	r3, [r7, #12]
}
 8010414:	4618      	mov	r0, r3
 8010416:	3710      	adds	r7, #16
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d002      	beq.n	8010432 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	611a      	str	r2, [r3, #16]
  }
}
 8010432:	bf00      	nop
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr
	...

08010440 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00e      	beq.n	801046e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7d1b      	ldrb	r3, [r3, #20]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d106      	bne.n	8010466 <tcp_recv+0x26>
 8010458:	4b07      	ldr	r3, [pc, #28]	; (8010478 <tcp_recv+0x38>)
 801045a:	f240 72df 	movw	r2, #2015	; 0x7df
 801045e:	4907      	ldr	r1, [pc, #28]	; (801047c <tcp_recv+0x3c>)
 8010460:	4807      	ldr	r0, [pc, #28]	; (8010480 <tcp_recv+0x40>)
 8010462:	f008 fa63 	bl	801892c <printf>
    pcb->recv = recv;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	683a      	ldr	r2, [r7, #0]
 801046a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801046e:	bf00      	nop
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	08021630 	.word	0x08021630
 801047c:	08021bcc 	.word	0x08021bcc
 8010480:	08021674 	.word	0x08021674

08010484 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d00e      	beq.n	80104b2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	7d1b      	ldrb	r3, [r3, #20]
 8010498:	2b01      	cmp	r3, #1
 801049a:	d106      	bne.n	80104aa <tcp_sent+0x26>
 801049c:	4b07      	ldr	r3, [pc, #28]	; (80104bc <tcp_sent+0x38>)
 801049e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80104a2:	4907      	ldr	r1, [pc, #28]	; (80104c0 <tcp_sent+0x3c>)
 80104a4:	4807      	ldr	r0, [pc, #28]	; (80104c4 <tcp_sent+0x40>)
 80104a6:	f008 fa41 	bl	801892c <printf>
    pcb->sent = sent;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80104b2:	bf00      	nop
 80104b4:	3708      	adds	r7, #8
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	08021630 	.word	0x08021630
 80104c0:	08021bf4 	.word	0x08021bf4
 80104c4:	08021674 	.word	0x08021674

080104c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00e      	beq.n	80104f6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	7d1b      	ldrb	r3, [r3, #20]
 80104dc:	2b01      	cmp	r3, #1
 80104de:	d106      	bne.n	80104ee <tcp_err+0x26>
 80104e0:	4b07      	ldr	r3, [pc, #28]	; (8010500 <tcp_err+0x38>)
 80104e2:	f640 020d 	movw	r2, #2061	; 0x80d
 80104e6:	4907      	ldr	r1, [pc, #28]	; (8010504 <tcp_err+0x3c>)
 80104e8:	4807      	ldr	r0, [pc, #28]	; (8010508 <tcp_err+0x40>)
 80104ea:	f008 fa1f 	bl	801892c <printf>
    pcb->errf = err;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	683a      	ldr	r2, [r7, #0]
 80104f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80104f6:	bf00      	nop
 80104f8:	3708      	adds	r7, #8
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	08021630 	.word	0x08021630
 8010504:	08021c1c 	.word	0x08021c1c
 8010508:	08021674 	.word	0x08021674

0801050c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801050c:	b480      	push	{r7}
 801050e:	b085      	sub	sp, #20
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d008      	beq.n	801052e <tcp_accept+0x22>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	7d1b      	ldrb	r3, [r3, #20]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d104      	bne.n	801052e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	619a      	str	r2, [r3, #24]
  }
}
 801052e:	bf00      	nop
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr
	...

0801053c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	4613      	mov	r3, r2
 8010548:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d107      	bne.n	8010560 <tcp_poll+0x24>
 8010550:	4b0e      	ldr	r3, [pc, #56]	; (801058c <tcp_poll+0x50>)
 8010552:	f640 023d 	movw	r2, #2109	; 0x83d
 8010556:	490e      	ldr	r1, [pc, #56]	; (8010590 <tcp_poll+0x54>)
 8010558:	480e      	ldr	r0, [pc, #56]	; (8010594 <tcp_poll+0x58>)
 801055a:	f008 f9e7 	bl	801892c <printf>
 801055e:	e011      	b.n	8010584 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	7d1b      	ldrb	r3, [r3, #20]
 8010564:	2b01      	cmp	r3, #1
 8010566:	d106      	bne.n	8010576 <tcp_poll+0x3a>
 8010568:	4b08      	ldr	r3, [pc, #32]	; (801058c <tcp_poll+0x50>)
 801056a:	f640 023e 	movw	r2, #2110	; 0x83e
 801056e:	490a      	ldr	r1, [pc, #40]	; (8010598 <tcp_poll+0x5c>)
 8010570:	4808      	ldr	r0, [pc, #32]	; (8010594 <tcp_poll+0x58>)
 8010572:	f008 f9db 	bl	801892c <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	68ba      	ldr	r2, [r7, #8]
 801057a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	79fa      	ldrb	r2, [r7, #7]
 8010582:	775a      	strb	r2, [r3, #29]
}
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	08021630 	.word	0x08021630
 8010590:	08021c44 	.word	0x08021c44
 8010594:	08021674 	.word	0x08021674
 8010598:	08021c5c 	.word	0x08021c5c

0801059c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d107      	bne.n	80105ba <tcp_pcb_purge+0x1e>
 80105aa:	4b21      	ldr	r3, [pc, #132]	; (8010630 <tcp_pcb_purge+0x94>)
 80105ac:	f640 0251 	movw	r2, #2129	; 0x851
 80105b0:	4920      	ldr	r1, [pc, #128]	; (8010634 <tcp_pcb_purge+0x98>)
 80105b2:	4821      	ldr	r0, [pc, #132]	; (8010638 <tcp_pcb_purge+0x9c>)
 80105b4:	f008 f9ba 	bl	801892c <printf>
 80105b8:	e037      	b.n	801062a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	7d1b      	ldrb	r3, [r3, #20]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d033      	beq.n	801062a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80105c6:	2b0a      	cmp	r3, #10
 80105c8:	d02f      	beq.n	801062a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d02b      	beq.n	801062a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d007      	beq.n	80105ea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fe f958 	bl	800e894 <pbuf_free>
      pcb->refused_data = NULL;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2200      	movs	r2, #0
 80105e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d002      	beq.n	80105f8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f000 f986 	bl	8010904 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105fe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010604:	4618      	mov	r0, r3
 8010606:	f7ff fcf9 	bl	800fffc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801060e:	4618      	mov	r0, r3
 8010610:	f7ff fcf4 	bl	800fffc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	66da      	str	r2, [r3, #108]	; 0x6c
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2200      	movs	r2, #0
 8010626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	08021630 	.word	0x08021630
 8010634:	08021c7c 	.word	0x08021c7c
 8010638:	08021674 	.word	0x08021674

0801063c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d106      	bne.n	801065a <tcp_pcb_remove+0x1e>
 801064c:	4b3e      	ldr	r3, [pc, #248]	; (8010748 <tcp_pcb_remove+0x10c>)
 801064e:	f640 0283 	movw	r2, #2179	; 0x883
 8010652:	493e      	ldr	r1, [pc, #248]	; (801074c <tcp_pcb_remove+0x110>)
 8010654:	483e      	ldr	r0, [pc, #248]	; (8010750 <tcp_pcb_remove+0x114>)
 8010656:	f008 f969 	bl	801892c <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d106      	bne.n	801066e <tcp_pcb_remove+0x32>
 8010660:	4b39      	ldr	r3, [pc, #228]	; (8010748 <tcp_pcb_remove+0x10c>)
 8010662:	f640 0284 	movw	r2, #2180	; 0x884
 8010666:	493b      	ldr	r1, [pc, #236]	; (8010754 <tcp_pcb_remove+0x118>)
 8010668:	4839      	ldr	r0, [pc, #228]	; (8010750 <tcp_pcb_remove+0x114>)
 801066a:	f008 f95f 	bl	801892c <printf>

  TCP_RMV(pcblist, pcb);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	429a      	cmp	r2, r3
 8010676:	d105      	bne.n	8010684 <tcp_pcb_remove+0x48>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68da      	ldr	r2, [r3, #12]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	601a      	str	r2, [r3, #0]
 8010682:	e013      	b.n	80106ac <tcp_pcb_remove+0x70>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	60fb      	str	r3, [r7, #12]
 801068a:	e00c      	b.n	80106a6 <tcp_pcb_remove+0x6a>
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	429a      	cmp	r2, r3
 8010694:	d104      	bne.n	80106a0 <tcp_pcb_remove+0x64>
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	68da      	ldr	r2, [r3, #12]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	60da      	str	r2, [r3, #12]
 801069e:	e005      	b.n	80106ac <tcp_pcb_remove+0x70>
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	60fb      	str	r3, [r7, #12]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1ef      	bne.n	801068c <tcp_pcb_remove+0x50>
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	2200      	movs	r2, #0
 80106b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80106b2:	6838      	ldr	r0, [r7, #0]
 80106b4:	f7ff ff72 	bl	801059c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	7d1b      	ldrb	r3, [r3, #20]
 80106bc:	2b0a      	cmp	r3, #10
 80106be:	d013      	beq.n	80106e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d00f      	beq.n	80106e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	8b5b      	ldrh	r3, [r3, #26]
 80106cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d009      	beq.n	80106e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	8b5b      	ldrh	r3, [r3, #26]
 80106d8:	f043 0302 	orr.w	r3, r3, #2
 80106dc:	b29a      	uxth	r2, r3
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80106e2:	6838      	ldr	r0, [r7, #0]
 80106e4:	f003 fbc2 	bl	8013e6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	7d1b      	ldrb	r3, [r3, #20]
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d020      	beq.n	8010732 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d006      	beq.n	8010706 <tcp_pcb_remove+0xca>
 80106f8:	4b13      	ldr	r3, [pc, #76]	; (8010748 <tcp_pcb_remove+0x10c>)
 80106fa:	f640 0293 	movw	r2, #2195	; 0x893
 80106fe:	4916      	ldr	r1, [pc, #88]	; (8010758 <tcp_pcb_remove+0x11c>)
 8010700:	4813      	ldr	r0, [pc, #76]	; (8010750 <tcp_pcb_remove+0x114>)
 8010702:	f008 f913 	bl	801892c <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801070a:	2b00      	cmp	r3, #0
 801070c:	d006      	beq.n	801071c <tcp_pcb_remove+0xe0>
 801070e:	4b0e      	ldr	r3, [pc, #56]	; (8010748 <tcp_pcb_remove+0x10c>)
 8010710:	f640 0294 	movw	r2, #2196	; 0x894
 8010714:	4911      	ldr	r1, [pc, #68]	; (801075c <tcp_pcb_remove+0x120>)
 8010716:	480e      	ldr	r0, [pc, #56]	; (8010750 <tcp_pcb_remove+0x114>)
 8010718:	f008 f908 	bl	801892c <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010720:	2b00      	cmp	r3, #0
 8010722:	d006      	beq.n	8010732 <tcp_pcb_remove+0xf6>
 8010724:	4b08      	ldr	r3, [pc, #32]	; (8010748 <tcp_pcb_remove+0x10c>)
 8010726:	f640 0296 	movw	r2, #2198	; 0x896
 801072a:	490d      	ldr	r1, [pc, #52]	; (8010760 <tcp_pcb_remove+0x124>)
 801072c:	4808      	ldr	r0, [pc, #32]	; (8010750 <tcp_pcb_remove+0x114>)
 801072e:	f008 f8fd 	bl	801892c <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	2200      	movs	r2, #0
 8010736:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	2200      	movs	r2, #0
 801073c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801073e:	bf00      	nop
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	08021630 	.word	0x08021630
 801074c:	08021c98 	.word	0x08021c98
 8010750:	08021674 	.word	0x08021674
 8010754:	08021cb4 	.word	0x08021cb4
 8010758:	08021cd4 	.word	0x08021cd4
 801075c:	08021cec 	.word	0x08021cec
 8010760:	08021d08 	.word	0x08021d08

08010764 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d106      	bne.n	8010780 <tcp_next_iss+0x1c>
 8010772:	4b0a      	ldr	r3, [pc, #40]	; (801079c <tcp_next_iss+0x38>)
 8010774:	f640 02af 	movw	r2, #2223	; 0x8af
 8010778:	4909      	ldr	r1, [pc, #36]	; (80107a0 <tcp_next_iss+0x3c>)
 801077a:	480a      	ldr	r0, [pc, #40]	; (80107a4 <tcp_next_iss+0x40>)
 801077c:	f008 f8d6 	bl	801892c <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010780:	4b09      	ldr	r3, [pc, #36]	; (80107a8 <tcp_next_iss+0x44>)
 8010782:	681a      	ldr	r2, [r3, #0]
 8010784:	4b09      	ldr	r3, [pc, #36]	; (80107ac <tcp_next_iss+0x48>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4413      	add	r3, r2
 801078a:	4a07      	ldr	r2, [pc, #28]	; (80107a8 <tcp_next_iss+0x44>)
 801078c:	6013      	str	r3, [r2, #0]
  return iss;
 801078e:	4b06      	ldr	r3, [pc, #24]	; (80107a8 <tcp_next_iss+0x44>)
 8010790:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010792:	4618      	mov	r0, r3
 8010794:	3708      	adds	r7, #8
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	08021630 	.word	0x08021630
 80107a0:	08021d20 	.word	0x08021d20
 80107a4:	08021674 	.word	0x08021674
 80107a8:	20000030 	.word	0x20000030
 80107ac:	2000b698 	.word	0x2000b698

080107b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b086      	sub	sp, #24
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	4603      	mov	r3, r0
 80107b8:	60b9      	str	r1, [r7, #8]
 80107ba:	607a      	str	r2, [r7, #4]
 80107bc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d106      	bne.n	80107d2 <tcp_eff_send_mss_netif+0x22>
 80107c4:	4b14      	ldr	r3, [pc, #80]	; (8010818 <tcp_eff_send_mss_netif+0x68>)
 80107c6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80107ca:	4914      	ldr	r1, [pc, #80]	; (801081c <tcp_eff_send_mss_netif+0x6c>)
 80107cc:	4814      	ldr	r0, [pc, #80]	; (8010820 <tcp_eff_send_mss_netif+0x70>)
 80107ce:	f008 f8ad 	bl	801892c <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80107d8:	89fb      	ldrh	r3, [r7, #14]
 80107da:	e019      	b.n	8010810 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	8c1b      	ldrh	r3, [r3, #32]
 80107e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80107e2:	8afb      	ldrh	r3, [r7, #22]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d012      	beq.n	801080e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80107e8:	2328      	movs	r3, #40	; 0x28
 80107ea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80107ec:	8afa      	ldrh	r2, [r7, #22]
 80107ee:	8abb      	ldrh	r3, [r7, #20]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d904      	bls.n	80107fe <tcp_eff_send_mss_netif+0x4e>
 80107f4:	8afa      	ldrh	r2, [r7, #22]
 80107f6:	8abb      	ldrh	r3, [r7, #20]
 80107f8:	1ad3      	subs	r3, r2, r3
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	e000      	b.n	8010800 <tcp_eff_send_mss_netif+0x50>
 80107fe:	2300      	movs	r3, #0
 8010800:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010802:	8a7a      	ldrh	r2, [r7, #18]
 8010804:	89fb      	ldrh	r3, [r7, #14]
 8010806:	4293      	cmp	r3, r2
 8010808:	bf28      	it	cs
 801080a:	4613      	movcs	r3, r2
 801080c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801080e:	89fb      	ldrh	r3, [r7, #14]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3718      	adds	r7, #24
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	08021630 	.word	0x08021630
 801081c:	08021d3c 	.word	0x08021d3c
 8010820:	08021674 	.word	0x08021674

08010824 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d119      	bne.n	801086c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010838:	4b10      	ldr	r3, [pc, #64]	; (801087c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801083a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801083e:	4910      	ldr	r1, [pc, #64]	; (8010880 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010840:	4810      	ldr	r0, [pc, #64]	; (8010884 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010842:	f008 f873 	bl	801892c <printf>

  while (pcb != NULL) {
 8010846:	e011      	b.n	801086c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	429a      	cmp	r2, r3
 8010852:	d108      	bne.n	8010866 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801085a:	68f8      	ldr	r0, [r7, #12]
 801085c:	f7fe fe1a 	bl	800f494 <tcp_abort>
      pcb = next;
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	60fb      	str	r3, [r7, #12]
 8010864:	e002      	b.n	801086c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1ea      	bne.n	8010848 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010872:	bf00      	nop
 8010874:	bf00      	nop
 8010876:	3710      	adds	r7, #16
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	08021630 	.word	0x08021630
 8010880:	08021d64 	.word	0x08021d64
 8010884:	08021674 	.word	0x08021674

08010888 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d02a      	beq.n	80108ee <tcp_netif_ip_addr_changed+0x66>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d026      	beq.n	80108ee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80108a0:	4b15      	ldr	r3, [pc, #84]	; (80108f8 <tcp_netif_ip_addr_changed+0x70>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4619      	mov	r1, r3
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7ff ffbc 	bl	8010824 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80108ac:	4b13      	ldr	r3, [pc, #76]	; (80108fc <tcp_netif_ip_addr_changed+0x74>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4619      	mov	r1, r3
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f7ff ffb6 	bl	8010824 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d017      	beq.n	80108ee <tcp_netif_ip_addr_changed+0x66>
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d013      	beq.n	80108ee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80108c6:	4b0e      	ldr	r3, [pc, #56]	; (8010900 <tcp_netif_ip_addr_changed+0x78>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	60fb      	str	r3, [r7, #12]
 80108cc:	e00c      	b.n	80108e8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d103      	bne.n	80108e2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	60fb      	str	r3, [r7, #12]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d1ef      	bne.n	80108ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80108ee:	bf00      	nop
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	2000b694 	.word	0x2000b694
 80108fc:	2000b6a0 	.word	0x2000b6a0
 8010900:	2000b69c 	.word	0x2000b69c

08010904 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010910:	2b00      	cmp	r3, #0
 8010912:	d007      	beq.n	8010924 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010918:	4618      	mov	r0, r3
 801091a:	f7ff fb6f 	bl	800fffc <tcp_segs_free>
    pcb->ooseq = NULL;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010924:	bf00      	nop
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801092c:	b590      	push	{r4, r7, lr}
 801092e:	b08d      	sub	sp, #52	; 0x34
 8010930:	af04      	add	r7, sp, #16
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d105      	bne.n	8010948 <tcp_input+0x1c>
 801093c:	4b9b      	ldr	r3, [pc, #620]	; (8010bac <tcp_input+0x280>)
 801093e:	2283      	movs	r2, #131	; 0x83
 8010940:	499b      	ldr	r1, [pc, #620]	; (8010bb0 <tcp_input+0x284>)
 8010942:	489c      	ldr	r0, [pc, #624]	; (8010bb4 <tcp_input+0x288>)
 8010944:	f007 fff2 	bl	801892c <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	4a9a      	ldr	r2, [pc, #616]	; (8010bb8 <tcp_input+0x28c>)
 801094e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	895b      	ldrh	r3, [r3, #10]
 8010954:	2b13      	cmp	r3, #19
 8010956:	f240 83c4 	bls.w	80110e2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801095a:	4b98      	ldr	r3, [pc, #608]	; (8010bbc <tcp_input+0x290>)
 801095c:	695b      	ldr	r3, [r3, #20]
 801095e:	4a97      	ldr	r2, [pc, #604]	; (8010bbc <tcp_input+0x290>)
 8010960:	6812      	ldr	r2, [r2, #0]
 8010962:	4611      	mov	r1, r2
 8010964:	4618      	mov	r0, r3
 8010966:	f006 fbcb 	bl	8017100 <ip4_addr_isbroadcast_u32>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	f040 83ba 	bne.w	80110e6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010972:	4b92      	ldr	r3, [pc, #584]	; (8010bbc <tcp_input+0x290>)
 8010974:	695b      	ldr	r3, [r3, #20]
 8010976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801097a:	2be0      	cmp	r3, #224	; 0xe0
 801097c:	f000 83b3 	beq.w	80110e6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010980:	4b8d      	ldr	r3, [pc, #564]	; (8010bb8 <tcp_input+0x28c>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	899b      	ldrh	r3, [r3, #12]
 8010986:	b29b      	uxth	r3, r3
 8010988:	4618      	mov	r0, r3
 801098a:	f7fc fc4f 	bl	800d22c <lwip_htons>
 801098e:	4603      	mov	r3, r0
 8010990:	0b1b      	lsrs	r3, r3, #12
 8010992:	b29b      	uxth	r3, r3
 8010994:	b2db      	uxtb	r3, r3
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801099a:	7cbb      	ldrb	r3, [r7, #18]
 801099c:	2b13      	cmp	r3, #19
 801099e:	f240 83a4 	bls.w	80110ea <tcp_input+0x7be>
 80109a2:	7cbb      	ldrb	r3, [r7, #18]
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	891b      	ldrh	r3, [r3, #8]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	f200 839d 	bhi.w	80110ea <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80109b0:	7cbb      	ldrb	r3, [r7, #18]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	3b14      	subs	r3, #20
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	4b81      	ldr	r3, [pc, #516]	; (8010bc0 <tcp_input+0x294>)
 80109ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80109bc:	4b81      	ldr	r3, [pc, #516]	; (8010bc4 <tcp_input+0x298>)
 80109be:	2200      	movs	r2, #0
 80109c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	895a      	ldrh	r2, [r3, #10]
 80109c6:	7cbb      	ldrb	r3, [r7, #18]
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d309      	bcc.n	80109e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80109ce:	4b7c      	ldr	r3, [pc, #496]	; (8010bc0 <tcp_input+0x294>)
 80109d0:	881a      	ldrh	r2, [r3, #0]
 80109d2:	4b7d      	ldr	r3, [pc, #500]	; (8010bc8 <tcp_input+0x29c>)
 80109d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80109d6:	7cbb      	ldrb	r3, [r7, #18]
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7fd fed4 	bl	800e788 <pbuf_remove_header>
 80109e0:	e04e      	b.n	8010a80 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d105      	bne.n	80109f6 <tcp_input+0xca>
 80109ea:	4b70      	ldr	r3, [pc, #448]	; (8010bac <tcp_input+0x280>)
 80109ec:	22c2      	movs	r2, #194	; 0xc2
 80109ee:	4977      	ldr	r1, [pc, #476]	; (8010bcc <tcp_input+0x2a0>)
 80109f0:	4870      	ldr	r0, [pc, #448]	; (8010bb4 <tcp_input+0x288>)
 80109f2:	f007 ff9b 	bl	801892c <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80109f6:	2114      	movs	r1, #20
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7fd fec5 	bl	800e788 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	895a      	ldrh	r2, [r3, #10]
 8010a02:	4b71      	ldr	r3, [pc, #452]	; (8010bc8 <tcp_input+0x29c>)
 8010a04:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010a06:	4b6e      	ldr	r3, [pc, #440]	; (8010bc0 <tcp_input+0x294>)
 8010a08:	881a      	ldrh	r2, [r3, #0]
 8010a0a:	4b6f      	ldr	r3, [pc, #444]	; (8010bc8 <tcp_input+0x29c>)
 8010a0c:	881b      	ldrh	r3, [r3, #0]
 8010a0e:	1ad3      	subs	r3, r2, r3
 8010a10:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010a12:	4b6d      	ldr	r3, [pc, #436]	; (8010bc8 <tcp_input+0x29c>)
 8010a14:	881b      	ldrh	r3, [r3, #0]
 8010a16:	4619      	mov	r1, r3
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f7fd feb5 	bl	800e788 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	895b      	ldrh	r3, [r3, #10]
 8010a24:	8a3a      	ldrh	r2, [r7, #16]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	f200 8361 	bhi.w	80110ee <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	4a64      	ldr	r2, [pc, #400]	; (8010bc4 <tcp_input+0x298>)
 8010a34:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	8a3a      	ldrh	r2, [r7, #16]
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fd fea2 	bl	800e788 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	891a      	ldrh	r2, [r3, #8]
 8010a48:	8a3b      	ldrh	r3, [r7, #16]
 8010a4a:	1ad3      	subs	r3, r2, r3
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	895b      	ldrh	r3, [r3, #10]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d005      	beq.n	8010a66 <tcp_input+0x13a>
 8010a5a:	4b54      	ldr	r3, [pc, #336]	; (8010bac <tcp_input+0x280>)
 8010a5c:	22df      	movs	r2, #223	; 0xdf
 8010a5e:	495c      	ldr	r1, [pc, #368]	; (8010bd0 <tcp_input+0x2a4>)
 8010a60:	4854      	ldr	r0, [pc, #336]	; (8010bb4 <tcp_input+0x288>)
 8010a62:	f007 ff63 	bl	801892c <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	891a      	ldrh	r2, [r3, #8]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	891b      	ldrh	r3, [r3, #8]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d005      	beq.n	8010a80 <tcp_input+0x154>
 8010a74:	4b4d      	ldr	r3, [pc, #308]	; (8010bac <tcp_input+0x280>)
 8010a76:	22e0      	movs	r2, #224	; 0xe0
 8010a78:	4956      	ldr	r1, [pc, #344]	; (8010bd4 <tcp_input+0x2a8>)
 8010a7a:	484e      	ldr	r0, [pc, #312]	; (8010bb4 <tcp_input+0x288>)
 8010a7c:	f007 ff56 	bl	801892c <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010a80:	4b4d      	ldr	r3, [pc, #308]	; (8010bb8 <tcp_input+0x28c>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	4a4b      	ldr	r2, [pc, #300]	; (8010bb8 <tcp_input+0x28c>)
 8010a8a:	6814      	ldr	r4, [r2, #0]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fc fbcd 	bl	800d22c <lwip_htons>
 8010a92:	4603      	mov	r3, r0
 8010a94:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010a96:	4b48      	ldr	r3, [pc, #288]	; (8010bb8 <tcp_input+0x28c>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	885b      	ldrh	r3, [r3, #2]
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	4a46      	ldr	r2, [pc, #280]	; (8010bb8 <tcp_input+0x28c>)
 8010aa0:	6814      	ldr	r4, [r2, #0]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fc fbc2 	bl	800d22c <lwip_htons>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010aac:	4b42      	ldr	r3, [pc, #264]	; (8010bb8 <tcp_input+0x28c>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	4a41      	ldr	r2, [pc, #260]	; (8010bb8 <tcp_input+0x28c>)
 8010ab4:	6814      	ldr	r4, [r2, #0]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fc fbcd 	bl	800d256 <lwip_htonl>
 8010abc:	4603      	mov	r3, r0
 8010abe:	6063      	str	r3, [r4, #4]
 8010ac0:	6863      	ldr	r3, [r4, #4]
 8010ac2:	4a45      	ldr	r2, [pc, #276]	; (8010bd8 <tcp_input+0x2ac>)
 8010ac4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010ac6:	4b3c      	ldr	r3, [pc, #240]	; (8010bb8 <tcp_input+0x28c>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	4a3a      	ldr	r2, [pc, #232]	; (8010bb8 <tcp_input+0x28c>)
 8010ace:	6814      	ldr	r4, [r2, #0]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fc fbc0 	bl	800d256 <lwip_htonl>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	60a3      	str	r3, [r4, #8]
 8010ada:	68a3      	ldr	r3, [r4, #8]
 8010adc:	4a3f      	ldr	r2, [pc, #252]	; (8010bdc <tcp_input+0x2b0>)
 8010ade:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010ae0:	4b35      	ldr	r3, [pc, #212]	; (8010bb8 <tcp_input+0x28c>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	89db      	ldrh	r3, [r3, #14]
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	4a33      	ldr	r2, [pc, #204]	; (8010bb8 <tcp_input+0x28c>)
 8010aea:	6814      	ldr	r4, [r2, #0]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fc fb9d 	bl	800d22c <lwip_htons>
 8010af2:	4603      	mov	r3, r0
 8010af4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010af6:	4b30      	ldr	r3, [pc, #192]	; (8010bb8 <tcp_input+0x28c>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	899b      	ldrh	r3, [r3, #12]
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fc fb94 	bl	800d22c <lwip_htons>
 8010b04:	4603      	mov	r3, r0
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b0c:	b2da      	uxtb	r2, r3
 8010b0e:	4b34      	ldr	r3, [pc, #208]	; (8010be0 <tcp_input+0x2b4>)
 8010b10:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	891a      	ldrh	r2, [r3, #8]
 8010b16:	4b33      	ldr	r3, [pc, #204]	; (8010be4 <tcp_input+0x2b8>)
 8010b18:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010b1a:	4b31      	ldr	r3, [pc, #196]	; (8010be0 <tcp_input+0x2b4>)
 8010b1c:	781b      	ldrb	r3, [r3, #0]
 8010b1e:	f003 0303 	and.w	r3, r3, #3
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d00c      	beq.n	8010b40 <tcp_input+0x214>
    tcplen++;
 8010b26:	4b2f      	ldr	r3, [pc, #188]	; (8010be4 <tcp_input+0x2b8>)
 8010b28:	881b      	ldrh	r3, [r3, #0]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	4b2d      	ldr	r3, [pc, #180]	; (8010be4 <tcp_input+0x2b8>)
 8010b30:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	891a      	ldrh	r2, [r3, #8]
 8010b36:	4b2b      	ldr	r3, [pc, #172]	; (8010be4 <tcp_input+0x2b8>)
 8010b38:	881b      	ldrh	r3, [r3, #0]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	f200 82d9 	bhi.w	80110f2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010b40:	2300      	movs	r3, #0
 8010b42:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b44:	4b28      	ldr	r3, [pc, #160]	; (8010be8 <tcp_input+0x2bc>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	61fb      	str	r3, [r7, #28]
 8010b4a:	e09d      	b.n	8010c88 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	7d1b      	ldrb	r3, [r3, #20]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d105      	bne.n	8010b60 <tcp_input+0x234>
 8010b54:	4b15      	ldr	r3, [pc, #84]	; (8010bac <tcp_input+0x280>)
 8010b56:	22fb      	movs	r2, #251	; 0xfb
 8010b58:	4924      	ldr	r1, [pc, #144]	; (8010bec <tcp_input+0x2c0>)
 8010b5a:	4816      	ldr	r0, [pc, #88]	; (8010bb4 <tcp_input+0x288>)
 8010b5c:	f007 fee6 	bl	801892c <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	7d1b      	ldrb	r3, [r3, #20]
 8010b64:	2b0a      	cmp	r3, #10
 8010b66:	d105      	bne.n	8010b74 <tcp_input+0x248>
 8010b68:	4b10      	ldr	r3, [pc, #64]	; (8010bac <tcp_input+0x280>)
 8010b6a:	22fc      	movs	r2, #252	; 0xfc
 8010b6c:	4920      	ldr	r1, [pc, #128]	; (8010bf0 <tcp_input+0x2c4>)
 8010b6e:	4811      	ldr	r0, [pc, #68]	; (8010bb4 <tcp_input+0x288>)
 8010b70:	f007 fedc 	bl	801892c <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	7d1b      	ldrb	r3, [r3, #20]
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	d105      	bne.n	8010b88 <tcp_input+0x25c>
 8010b7c:	4b0b      	ldr	r3, [pc, #44]	; (8010bac <tcp_input+0x280>)
 8010b7e:	22fd      	movs	r2, #253	; 0xfd
 8010b80:	491c      	ldr	r1, [pc, #112]	; (8010bf4 <tcp_input+0x2c8>)
 8010b82:	480c      	ldr	r0, [pc, #48]	; (8010bb4 <tcp_input+0x288>)
 8010b84:	f007 fed2 	bl	801892c <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b88:	69fb      	ldr	r3, [r7, #28]
 8010b8a:	7a1b      	ldrb	r3, [r3, #8]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d033      	beq.n	8010bf8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	7a1a      	ldrb	r2, [r3, #8]
 8010b94:	4b09      	ldr	r3, [pc, #36]	; (8010bbc <tcp_input+0x290>)
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d029      	beq.n	8010bf8 <tcp_input+0x2cc>
      prev = pcb;
 8010ba4:	69fb      	ldr	r3, [r7, #28]
 8010ba6:	61bb      	str	r3, [r7, #24]
      continue;
 8010ba8:	e06b      	b.n	8010c82 <tcp_input+0x356>
 8010baa:	bf00      	nop
 8010bac:	08021d98 	.word	0x08021d98
 8010bb0:	08021dcc 	.word	0x08021dcc
 8010bb4:	08021de4 	.word	0x08021de4
 8010bb8:	20004ac0 	.word	0x20004ac0
 8010bbc:	20007f80 	.word	0x20007f80
 8010bc0:	20004ac4 	.word	0x20004ac4
 8010bc4:	20004ac8 	.word	0x20004ac8
 8010bc8:	20004ac6 	.word	0x20004ac6
 8010bcc:	08021e0c 	.word	0x08021e0c
 8010bd0:	08021e1c 	.word	0x08021e1c
 8010bd4:	08021e28 	.word	0x08021e28
 8010bd8:	20004ad0 	.word	0x20004ad0
 8010bdc:	20004ad4 	.word	0x20004ad4
 8010be0:	20004adc 	.word	0x20004adc
 8010be4:	20004ada 	.word	0x20004ada
 8010be8:	2000b694 	.word	0x2000b694
 8010bec:	08021e48 	.word	0x08021e48
 8010bf0:	08021e70 	.word	0x08021e70
 8010bf4:	08021e9c 	.word	0x08021e9c
    }

    if (pcb->remote_port == tcphdr->src &&
 8010bf8:	69fb      	ldr	r3, [r7, #28]
 8010bfa:	8b1a      	ldrh	r2, [r3, #24]
 8010bfc:	4b94      	ldr	r3, [pc, #592]	; (8010e50 <tcp_input+0x524>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	881b      	ldrh	r3, [r3, #0]
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d13a      	bne.n	8010c7e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	8ada      	ldrh	r2, [r3, #22]
 8010c0c:	4b90      	ldr	r3, [pc, #576]	; (8010e50 <tcp_input+0x524>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	885b      	ldrh	r3, [r3, #2]
 8010c12:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d132      	bne.n	8010c7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	685a      	ldr	r2, [r3, #4]
 8010c1c:	4b8d      	ldr	r3, [pc, #564]	; (8010e54 <tcp_input+0x528>)
 8010c1e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d12c      	bne.n	8010c7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	4b8a      	ldr	r3, [pc, #552]	; (8010e54 <tcp_input+0x528>)
 8010c2a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d126      	bne.n	8010c7e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	69fa      	ldr	r2, [r7, #28]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d106      	bne.n	8010c48 <tcp_input+0x31c>
 8010c3a:	4b87      	ldr	r3, [pc, #540]	; (8010e58 <tcp_input+0x52c>)
 8010c3c:	f240 120d 	movw	r2, #269	; 0x10d
 8010c40:	4986      	ldr	r1, [pc, #536]	; (8010e5c <tcp_input+0x530>)
 8010c42:	4887      	ldr	r0, [pc, #540]	; (8010e60 <tcp_input+0x534>)
 8010c44:	f007 fe72 	bl	801892c <printf>
      if (prev != NULL) {
 8010c48:	69bb      	ldr	r3, [r7, #24]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00a      	beq.n	8010c64 <tcp_input+0x338>
        prev->next = pcb->next;
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	68da      	ldr	r2, [r3, #12]
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010c56:	4b83      	ldr	r3, [pc, #524]	; (8010e64 <tcp_input+0x538>)
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010c5e:	4a81      	ldr	r2, [pc, #516]	; (8010e64 <tcp_input+0x538>)
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010c64:	69fb      	ldr	r3, [r7, #28]
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	69fa      	ldr	r2, [r7, #28]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d111      	bne.n	8010c92 <tcp_input+0x366>
 8010c6e:	4b7a      	ldr	r3, [pc, #488]	; (8010e58 <tcp_input+0x52c>)
 8010c70:	f240 1215 	movw	r2, #277	; 0x115
 8010c74:	497c      	ldr	r1, [pc, #496]	; (8010e68 <tcp_input+0x53c>)
 8010c76:	487a      	ldr	r0, [pc, #488]	; (8010e60 <tcp_input+0x534>)
 8010c78:	f007 fe58 	bl	801892c <printf>
      break;
 8010c7c:	e009      	b.n	8010c92 <tcp_input+0x366>
    }
    prev = pcb;
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	61fb      	str	r3, [r7, #28]
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	f47f af5e 	bne.w	8010b4c <tcp_input+0x220>
 8010c90:	e000      	b.n	8010c94 <tcp_input+0x368>
      break;
 8010c92:	bf00      	nop
  }

  if (pcb == NULL) {
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f040 8095 	bne.w	8010dc6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c9c:	4b73      	ldr	r3, [pc, #460]	; (8010e6c <tcp_input+0x540>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	61fb      	str	r3, [r7, #28]
 8010ca2:	e03f      	b.n	8010d24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	7d1b      	ldrb	r3, [r3, #20]
 8010ca8:	2b0a      	cmp	r3, #10
 8010caa:	d006      	beq.n	8010cba <tcp_input+0x38e>
 8010cac:	4b6a      	ldr	r3, [pc, #424]	; (8010e58 <tcp_input+0x52c>)
 8010cae:	f240 121f 	movw	r2, #287	; 0x11f
 8010cb2:	496f      	ldr	r1, [pc, #444]	; (8010e70 <tcp_input+0x544>)
 8010cb4:	486a      	ldr	r0, [pc, #424]	; (8010e60 <tcp_input+0x534>)
 8010cb6:	f007 fe39 	bl	801892c <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	7a1b      	ldrb	r3, [r3, #8]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d009      	beq.n	8010cd6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	7a1a      	ldrb	r2, [r3, #8]
 8010cc6:	4b63      	ldr	r3, [pc, #396]	; (8010e54 <tcp_input+0x528>)
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cce:	3301      	adds	r3, #1
 8010cd0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d122      	bne.n	8010d1c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010cd6:	69fb      	ldr	r3, [r7, #28]
 8010cd8:	8b1a      	ldrh	r2, [r3, #24]
 8010cda:	4b5d      	ldr	r3, [pc, #372]	; (8010e50 <tcp_input+0x524>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d11b      	bne.n	8010d1e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	8ada      	ldrh	r2, [r3, #22]
 8010cea:	4b59      	ldr	r3, [pc, #356]	; (8010e50 <tcp_input+0x524>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	885b      	ldrh	r3, [r3, #2]
 8010cf0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d113      	bne.n	8010d1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	685a      	ldr	r2, [r3, #4]
 8010cfa:	4b56      	ldr	r3, [pc, #344]	; (8010e54 <tcp_input+0x528>)
 8010cfc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d10d      	bne.n	8010d1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010d02:	69fb      	ldr	r3, [r7, #28]
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	4b53      	ldr	r3, [pc, #332]	; (8010e54 <tcp_input+0x528>)
 8010d08:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d107      	bne.n	8010d1e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010d0e:	69f8      	ldr	r0, [r7, #28]
 8010d10:	f000 fb54 	bl	80113bc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f7fd fdbd 	bl	800e894 <pbuf_free>
        return;
 8010d1a:	e1f0      	b.n	80110fe <tcp_input+0x7d2>
        continue;
 8010d1c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	61fb      	str	r3, [r7, #28]
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1bc      	bne.n	8010ca4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010d2e:	4b51      	ldr	r3, [pc, #324]	; (8010e74 <tcp_input+0x548>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	617b      	str	r3, [r7, #20]
 8010d34:	e02a      	b.n	8010d8c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	7a1b      	ldrb	r3, [r3, #8]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00c      	beq.n	8010d58 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	7a1a      	ldrb	r2, [r3, #8]
 8010d42:	4b44      	ldr	r3, [pc, #272]	; (8010e54 <tcp_input+0x528>)
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d002      	beq.n	8010d58 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	61bb      	str	r3, [r7, #24]
        continue;
 8010d56:	e016      	b.n	8010d86 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	8ada      	ldrh	r2, [r3, #22]
 8010d5c:	4b3c      	ldr	r3, [pc, #240]	; (8010e50 <tcp_input+0x524>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	885b      	ldrh	r3, [r3, #2]
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d10c      	bne.n	8010d82 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	4b39      	ldr	r3, [pc, #228]	; (8010e54 <tcp_input+0x528>)
 8010d6e:	695b      	ldr	r3, [r3, #20]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d00f      	beq.n	8010d94 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00d      	beq.n	8010d96 <tcp_input+0x46a>
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d009      	beq.n	8010d96 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	617b      	str	r3, [r7, #20]
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d1d1      	bne.n	8010d36 <tcp_input+0x40a>
 8010d92:	e000      	b.n	8010d96 <tcp_input+0x46a>
            break;
 8010d94:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d014      	beq.n	8010dc6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010d9c:	69bb      	ldr	r3, [r7, #24]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d00a      	beq.n	8010db8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	68da      	ldr	r2, [r3, #12]
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010daa:	4b32      	ldr	r3, [pc, #200]	; (8010e74 <tcp_input+0x548>)
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010db2:	4a30      	ldr	r2, [pc, #192]	; (8010e74 <tcp_input+0x548>)
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010db8:	6978      	ldr	r0, [r7, #20]
 8010dba:	f000 fa01 	bl	80111c0 <tcp_listen_input>
      }
      pbuf_free(p);
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f7fd fd68 	bl	800e894 <pbuf_free>
      return;
 8010dc4:	e19b      	b.n	80110fe <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	f000 8160 	beq.w	801108e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010dce:	4b2a      	ldr	r3, [pc, #168]	; (8010e78 <tcp_input+0x54c>)
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	891a      	ldrh	r2, [r3, #8]
 8010dd8:	4b27      	ldr	r3, [pc, #156]	; (8010e78 <tcp_input+0x54c>)
 8010dda:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010ddc:	4a26      	ldr	r2, [pc, #152]	; (8010e78 <tcp_input+0x54c>)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010de2:	4b1b      	ldr	r3, [pc, #108]	; (8010e50 <tcp_input+0x524>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a24      	ldr	r2, [pc, #144]	; (8010e78 <tcp_input+0x54c>)
 8010de8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010dea:	4b24      	ldr	r3, [pc, #144]	; (8010e7c <tcp_input+0x550>)
 8010dec:	2200      	movs	r2, #0
 8010dee:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010df0:	4b23      	ldr	r3, [pc, #140]	; (8010e80 <tcp_input+0x554>)
 8010df2:	2200      	movs	r2, #0
 8010df4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010df6:	4b23      	ldr	r3, [pc, #140]	; (8010e84 <tcp_input+0x558>)
 8010df8:	2200      	movs	r2, #0
 8010dfa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010dfc:	4b22      	ldr	r3, [pc, #136]	; (8010e88 <tcp_input+0x55c>)
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	f003 0308 	and.w	r3, r3, #8
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d006      	beq.n	8010e16 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	7b5b      	ldrb	r3, [r3, #13]
 8010e0c:	f043 0301 	orr.w	r3, r3, #1
 8010e10:	b2da      	uxtb	r2, r3
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d038      	beq.n	8010e90 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010e1e:	69f8      	ldr	r0, [r7, #28]
 8010e20:	f7ff f870 	bl	800ff04 <tcp_process_refused_data>
 8010e24:	4603      	mov	r3, r0
 8010e26:	f113 0f0d 	cmn.w	r3, #13
 8010e2a:	d007      	beq.n	8010e3c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d02d      	beq.n	8010e90 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010e34:	4b15      	ldr	r3, [pc, #84]	; (8010e8c <tcp_input+0x560>)
 8010e36:	881b      	ldrh	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d029      	beq.n	8010e90 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f040 8104 	bne.w	801104e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010e46:	69f8      	ldr	r0, [r7, #28]
 8010e48:	f003 fe16 	bl	8014a78 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010e4c:	e0ff      	b.n	801104e <tcp_input+0x722>
 8010e4e:	bf00      	nop
 8010e50:	20004ac0 	.word	0x20004ac0
 8010e54:	20007f80 	.word	0x20007f80
 8010e58:	08021d98 	.word	0x08021d98
 8010e5c:	08021ec4 	.word	0x08021ec4
 8010e60:	08021de4 	.word	0x08021de4
 8010e64:	2000b694 	.word	0x2000b694
 8010e68:	08021ef0 	.word	0x08021ef0
 8010e6c:	2000b6a4 	.word	0x2000b6a4
 8010e70:	08021f1c 	.word	0x08021f1c
 8010e74:	2000b69c 	.word	0x2000b69c
 8010e78:	20004ab0 	.word	0x20004ab0
 8010e7c:	20004ae0 	.word	0x20004ae0
 8010e80:	20004add 	.word	0x20004add
 8010e84:	20004ad8 	.word	0x20004ad8
 8010e88:	20004adc 	.word	0x20004adc
 8010e8c:	20004ada 	.word	0x20004ada
      }
    }
    tcp_input_pcb = pcb;
 8010e90:	4a9c      	ldr	r2, [pc, #624]	; (8011104 <tcp_input+0x7d8>)
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010e96:	69f8      	ldr	r0, [r7, #28]
 8010e98:	f000 fb0a 	bl	80114b0 <tcp_process>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010ea0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ea4:	f113 0f0d 	cmn.w	r3, #13
 8010ea8:	f000 80d3 	beq.w	8011052 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010eac:	4b96      	ldr	r3, [pc, #600]	; (8011108 <tcp_input+0x7dc>)
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	f003 0308 	and.w	r3, r3, #8
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d015      	beq.n	8010ee4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d008      	beq.n	8010ed4 <tcp_input+0x5a8>
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ec8:	69fa      	ldr	r2, [r7, #28]
 8010eca:	6912      	ldr	r2, [r2, #16]
 8010ecc:	f06f 010d 	mvn.w	r1, #13
 8010ed0:	4610      	mov	r0, r2
 8010ed2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010ed4:	69f9      	ldr	r1, [r7, #28]
 8010ed6:	488d      	ldr	r0, [pc, #564]	; (801110c <tcp_input+0x7e0>)
 8010ed8:	f7ff fbb0 	bl	801063c <tcp_pcb_remove>
        tcp_free(pcb);
 8010edc:	69f8      	ldr	r0, [r7, #28]
 8010ede:	f7fd ff95 	bl	800ee0c <tcp_free>
 8010ee2:	e0c1      	b.n	8011068 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010ee8:	4b89      	ldr	r3, [pc, #548]	; (8011110 <tcp_input+0x7e4>)
 8010eea:	881b      	ldrh	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d01d      	beq.n	8010f2c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010ef0:	4b87      	ldr	r3, [pc, #540]	; (8011110 <tcp_input+0x7e4>)
 8010ef2:	881b      	ldrh	r3, [r3, #0]
 8010ef4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00a      	beq.n	8010f16 <tcp_input+0x5ea>
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f06:	69fa      	ldr	r2, [r7, #28]
 8010f08:	6910      	ldr	r0, [r2, #16]
 8010f0a:	89fa      	ldrh	r2, [r7, #14]
 8010f0c:	69f9      	ldr	r1, [r7, #28]
 8010f0e:	4798      	blx	r3
 8010f10:	4603      	mov	r3, r0
 8010f12:	74fb      	strb	r3, [r7, #19]
 8010f14:	e001      	b.n	8010f1a <tcp_input+0x5ee>
 8010f16:	2300      	movs	r3, #0
 8010f18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010f1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f1e:	f113 0f0d 	cmn.w	r3, #13
 8010f22:	f000 8098 	beq.w	8011056 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010f26:	4b7a      	ldr	r3, [pc, #488]	; (8011110 <tcp_input+0x7e4>)
 8010f28:	2200      	movs	r2, #0
 8010f2a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010f2c:	69f8      	ldr	r0, [r7, #28]
 8010f2e:	f000 f907 	bl	8011140 <tcp_input_delayed_close>
 8010f32:	4603      	mov	r3, r0
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f040 8090 	bne.w	801105a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010f3a:	4b76      	ldr	r3, [pc, #472]	; (8011114 <tcp_input+0x7e8>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d041      	beq.n	8010fc6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d006      	beq.n	8010f58 <tcp_input+0x62c>
 8010f4a:	4b73      	ldr	r3, [pc, #460]	; (8011118 <tcp_input+0x7ec>)
 8010f4c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010f50:	4972      	ldr	r1, [pc, #456]	; (801111c <tcp_input+0x7f0>)
 8010f52:	4873      	ldr	r0, [pc, #460]	; (8011120 <tcp_input+0x7f4>)
 8010f54:	f007 fcea 	bl	801892c <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	8b5b      	ldrh	r3, [r3, #26]
 8010f5c:	f003 0310 	and.w	r3, r3, #16
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d008      	beq.n	8010f76 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010f64:	4b6b      	ldr	r3, [pc, #428]	; (8011114 <tcp_input+0x7e8>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fd fc93 	bl	800e894 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010f6e:	69f8      	ldr	r0, [r7, #28]
 8010f70:	f7fe fa90 	bl	800f494 <tcp_abort>
            goto aborted;
 8010f74:	e078      	b.n	8011068 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00c      	beq.n	8010f9a <tcp_input+0x66e>
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	6918      	ldr	r0, [r3, #16]
 8010f8a:	4b62      	ldr	r3, [pc, #392]	; (8011114 <tcp_input+0x7e8>)
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	2300      	movs	r3, #0
 8010f90:	69f9      	ldr	r1, [r7, #28]
 8010f92:	47a0      	blx	r4
 8010f94:	4603      	mov	r3, r0
 8010f96:	74fb      	strb	r3, [r7, #19]
 8010f98:	e008      	b.n	8010fac <tcp_input+0x680>
 8010f9a:	4b5e      	ldr	r3, [pc, #376]	; (8011114 <tcp_input+0x7e8>)
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	69f9      	ldr	r1, [r7, #28]
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	f7ff f884 	bl	80100b0 <tcp_recv_null>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010fac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fb0:	f113 0f0d 	cmn.w	r3, #13
 8010fb4:	d053      	beq.n	801105e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010fb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d003      	beq.n	8010fc6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010fbe:	4b55      	ldr	r3, [pc, #340]	; (8011114 <tcp_input+0x7e8>)
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	69fb      	ldr	r3, [r7, #28]
 8010fc4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010fc6:	4b50      	ldr	r3, [pc, #320]	; (8011108 <tcp_input+0x7dc>)
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	f003 0320 	and.w	r3, r3, #32
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d030      	beq.n	8011034 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d009      	beq.n	8010fee <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fde:	7b5a      	ldrb	r2, [r3, #13]
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fe4:	f042 0220 	orr.w	r2, r2, #32
 8010fe8:	b2d2      	uxtb	r2, r2
 8010fea:	735a      	strb	r2, [r3, #13]
 8010fec:	e022      	b.n	8011034 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ff2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010ff6:	d005      	beq.n	8011004 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	69fb      	ldr	r3, [r7, #28]
 8011002:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011004:	69fb      	ldr	r3, [r7, #28]
 8011006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801100a:	2b00      	cmp	r3, #0
 801100c:	d00b      	beq.n	8011026 <tcp_input+0x6fa>
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011014:	69fb      	ldr	r3, [r7, #28]
 8011016:	6918      	ldr	r0, [r3, #16]
 8011018:	2300      	movs	r3, #0
 801101a:	2200      	movs	r2, #0
 801101c:	69f9      	ldr	r1, [r7, #28]
 801101e:	47a0      	blx	r4
 8011020:	4603      	mov	r3, r0
 8011022:	74fb      	strb	r3, [r7, #19]
 8011024:	e001      	b.n	801102a <tcp_input+0x6fe>
 8011026:	2300      	movs	r3, #0
 8011028:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801102a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801102e:	f113 0f0d 	cmn.w	r3, #13
 8011032:	d016      	beq.n	8011062 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011034:	4b33      	ldr	r3, [pc, #204]	; (8011104 <tcp_input+0x7d8>)
 8011036:	2200      	movs	r2, #0
 8011038:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801103a:	69f8      	ldr	r0, [r7, #28]
 801103c:	f000 f880 	bl	8011140 <tcp_input_delayed_close>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d10f      	bne.n	8011066 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011046:	69f8      	ldr	r0, [r7, #28]
 8011048:	f002 ff10 	bl	8013e6c <tcp_output>
 801104c:	e00c      	b.n	8011068 <tcp_input+0x73c>
        goto aborted;
 801104e:	bf00      	nop
 8011050:	e00a      	b.n	8011068 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011052:	bf00      	nop
 8011054:	e008      	b.n	8011068 <tcp_input+0x73c>
              goto aborted;
 8011056:	bf00      	nop
 8011058:	e006      	b.n	8011068 <tcp_input+0x73c>
          goto aborted;
 801105a:	bf00      	nop
 801105c:	e004      	b.n	8011068 <tcp_input+0x73c>
            goto aborted;
 801105e:	bf00      	nop
 8011060:	e002      	b.n	8011068 <tcp_input+0x73c>
              goto aborted;
 8011062:	bf00      	nop
 8011064:	e000      	b.n	8011068 <tcp_input+0x73c>
          goto aborted;
 8011066:	bf00      	nop
    tcp_input_pcb = NULL;
 8011068:	4b26      	ldr	r3, [pc, #152]	; (8011104 <tcp_input+0x7d8>)
 801106a:	2200      	movs	r2, #0
 801106c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801106e:	4b29      	ldr	r3, [pc, #164]	; (8011114 <tcp_input+0x7e8>)
 8011070:	2200      	movs	r2, #0
 8011072:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011074:	4b2b      	ldr	r3, [pc, #172]	; (8011124 <tcp_input+0x7f8>)
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d03f      	beq.n	80110fc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801107c:	4b29      	ldr	r3, [pc, #164]	; (8011124 <tcp_input+0x7f8>)
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	4618      	mov	r0, r3
 8011082:	f7fd fc07 	bl	800e894 <pbuf_free>
      inseg.p = NULL;
 8011086:	4b27      	ldr	r3, [pc, #156]	; (8011124 <tcp_input+0x7f8>)
 8011088:	2200      	movs	r2, #0
 801108a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801108c:	e036      	b.n	80110fc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801108e:	4b26      	ldr	r3, [pc, #152]	; (8011128 <tcp_input+0x7fc>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	899b      	ldrh	r3, [r3, #12]
 8011094:	b29b      	uxth	r3, r3
 8011096:	4618      	mov	r0, r3
 8011098:	f7fc f8c8 	bl	800d22c <lwip_htons>
 801109c:	4603      	mov	r3, r0
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	f003 0304 	and.w	r3, r3, #4
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d118      	bne.n	80110da <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110a8:	4b20      	ldr	r3, [pc, #128]	; (801112c <tcp_input+0x800>)
 80110aa:	6819      	ldr	r1, [r3, #0]
 80110ac:	4b20      	ldr	r3, [pc, #128]	; (8011130 <tcp_input+0x804>)
 80110ae:	881b      	ldrh	r3, [r3, #0]
 80110b0:	461a      	mov	r2, r3
 80110b2:	4b20      	ldr	r3, [pc, #128]	; (8011134 <tcp_input+0x808>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110b8:	4b1b      	ldr	r3, [pc, #108]	; (8011128 <tcp_input+0x7fc>)
 80110ba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110bc:	885b      	ldrh	r3, [r3, #2]
 80110be:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110c0:	4a19      	ldr	r2, [pc, #100]	; (8011128 <tcp_input+0x7fc>)
 80110c2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110c4:	8812      	ldrh	r2, [r2, #0]
 80110c6:	b292      	uxth	r2, r2
 80110c8:	9202      	str	r2, [sp, #8]
 80110ca:	9301      	str	r3, [sp, #4]
 80110cc:	4b1a      	ldr	r3, [pc, #104]	; (8011138 <tcp_input+0x80c>)
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	4b1a      	ldr	r3, [pc, #104]	; (801113c <tcp_input+0x810>)
 80110d2:	4602      	mov	r2, r0
 80110d4:	2000      	movs	r0, #0
 80110d6:	f003 fc7d 	bl	80149d4 <tcp_rst>
    pbuf_free(p);
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f7fd fbda 	bl	800e894 <pbuf_free>
  return;
 80110e0:	e00c      	b.n	80110fc <tcp_input+0x7d0>
    goto dropped;
 80110e2:	bf00      	nop
 80110e4:	e006      	b.n	80110f4 <tcp_input+0x7c8>
    goto dropped;
 80110e6:	bf00      	nop
 80110e8:	e004      	b.n	80110f4 <tcp_input+0x7c8>
    goto dropped;
 80110ea:	bf00      	nop
 80110ec:	e002      	b.n	80110f4 <tcp_input+0x7c8>
      goto dropped;
 80110ee:	bf00      	nop
 80110f0:	e000      	b.n	80110f4 <tcp_input+0x7c8>
      goto dropped;
 80110f2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7fd fbcd 	bl	800e894 <pbuf_free>
 80110fa:	e000      	b.n	80110fe <tcp_input+0x7d2>
  return;
 80110fc:	bf00      	nop
}
 80110fe:	3724      	adds	r7, #36	; 0x24
 8011100:	46bd      	mov	sp, r7
 8011102:	bd90      	pop	{r4, r7, pc}
 8011104:	2000b6a8 	.word	0x2000b6a8
 8011108:	20004add 	.word	0x20004add
 801110c:	2000b694 	.word	0x2000b694
 8011110:	20004ad8 	.word	0x20004ad8
 8011114:	20004ae0 	.word	0x20004ae0
 8011118:	08021d98 	.word	0x08021d98
 801111c:	08021f4c 	.word	0x08021f4c
 8011120:	08021de4 	.word	0x08021de4
 8011124:	20004ab0 	.word	0x20004ab0
 8011128:	20004ac0 	.word	0x20004ac0
 801112c:	20004ad4 	.word	0x20004ad4
 8011130:	20004ada 	.word	0x20004ada
 8011134:	20004ad0 	.word	0x20004ad0
 8011138:	20007f90 	.word	0x20007f90
 801113c:	20007f94 	.word	0x20007f94

08011140 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d106      	bne.n	801115c <tcp_input_delayed_close+0x1c>
 801114e:	4b17      	ldr	r3, [pc, #92]	; (80111ac <tcp_input_delayed_close+0x6c>)
 8011150:	f240 225a 	movw	r2, #602	; 0x25a
 8011154:	4916      	ldr	r1, [pc, #88]	; (80111b0 <tcp_input_delayed_close+0x70>)
 8011156:	4817      	ldr	r0, [pc, #92]	; (80111b4 <tcp_input_delayed_close+0x74>)
 8011158:	f007 fbe8 	bl	801892c <printf>

  if (recv_flags & TF_CLOSED) {
 801115c:	4b16      	ldr	r3, [pc, #88]	; (80111b8 <tcp_input_delayed_close+0x78>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f003 0310 	and.w	r3, r3, #16
 8011164:	2b00      	cmp	r3, #0
 8011166:	d01c      	beq.n	80111a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	8b5b      	ldrh	r3, [r3, #26]
 801116c:	f003 0310 	and.w	r3, r3, #16
 8011170:	2b00      	cmp	r3, #0
 8011172:	d10d      	bne.n	8011190 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801117a:	2b00      	cmp	r3, #0
 801117c:	d008      	beq.n	8011190 <tcp_input_delayed_close+0x50>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	6912      	ldr	r2, [r2, #16]
 8011188:	f06f 010e 	mvn.w	r1, #14
 801118c:	4610      	mov	r0, r2
 801118e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011190:	6879      	ldr	r1, [r7, #4]
 8011192:	480a      	ldr	r0, [pc, #40]	; (80111bc <tcp_input_delayed_close+0x7c>)
 8011194:	f7ff fa52 	bl	801063c <tcp_pcb_remove>
    tcp_free(pcb);
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f7fd fe37 	bl	800ee0c <tcp_free>
    return 1;
 801119e:	2301      	movs	r3, #1
 80111a0:	e000      	b.n	80111a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80111a2:	2300      	movs	r3, #0
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	08021d98 	.word	0x08021d98
 80111b0:	08021f68 	.word	0x08021f68
 80111b4:	08021de4 	.word	0x08021de4
 80111b8:	20004add 	.word	0x20004add
 80111bc:	2000b694 	.word	0x2000b694

080111c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80111c0:	b590      	push	{r4, r7, lr}
 80111c2:	b08b      	sub	sp, #44	; 0x2c
 80111c4:	af04      	add	r7, sp, #16
 80111c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80111c8:	4b6f      	ldr	r3, [pc, #444]	; (8011388 <tcp_listen_input+0x1c8>)
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	f003 0304 	and.w	r3, r3, #4
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f040 80d2 	bne.w	801137a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d106      	bne.n	80111ea <tcp_listen_input+0x2a>
 80111dc:	4b6b      	ldr	r3, [pc, #428]	; (801138c <tcp_listen_input+0x1cc>)
 80111de:	f240 2281 	movw	r2, #641	; 0x281
 80111e2:	496b      	ldr	r1, [pc, #428]	; (8011390 <tcp_listen_input+0x1d0>)
 80111e4:	486b      	ldr	r0, [pc, #428]	; (8011394 <tcp_listen_input+0x1d4>)
 80111e6:	f007 fba1 	bl	801892c <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80111ea:	4b67      	ldr	r3, [pc, #412]	; (8011388 <tcp_listen_input+0x1c8>)
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	f003 0310 	and.w	r3, r3, #16
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d019      	beq.n	801122a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111f6:	4b68      	ldr	r3, [pc, #416]	; (8011398 <tcp_listen_input+0x1d8>)
 80111f8:	6819      	ldr	r1, [r3, #0]
 80111fa:	4b68      	ldr	r3, [pc, #416]	; (801139c <tcp_listen_input+0x1dc>)
 80111fc:	881b      	ldrh	r3, [r3, #0]
 80111fe:	461a      	mov	r2, r3
 8011200:	4b67      	ldr	r3, [pc, #412]	; (80113a0 <tcp_listen_input+0x1e0>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011206:	4b67      	ldr	r3, [pc, #412]	; (80113a4 <tcp_listen_input+0x1e4>)
 8011208:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801120a:	885b      	ldrh	r3, [r3, #2]
 801120c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801120e:	4a65      	ldr	r2, [pc, #404]	; (80113a4 <tcp_listen_input+0x1e4>)
 8011210:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011212:	8812      	ldrh	r2, [r2, #0]
 8011214:	b292      	uxth	r2, r2
 8011216:	9202      	str	r2, [sp, #8]
 8011218:	9301      	str	r3, [sp, #4]
 801121a:	4b63      	ldr	r3, [pc, #396]	; (80113a8 <tcp_listen_input+0x1e8>)
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	4b63      	ldr	r3, [pc, #396]	; (80113ac <tcp_listen_input+0x1ec>)
 8011220:	4602      	mov	r2, r0
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f003 fbd6 	bl	80149d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011228:	e0a9      	b.n	801137e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801122a:	4b57      	ldr	r3, [pc, #348]	; (8011388 <tcp_listen_input+0x1c8>)
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	f003 0302 	and.w	r3, r3, #2
 8011232:	2b00      	cmp	r3, #0
 8011234:	f000 80a3 	beq.w	801137e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	7d5b      	ldrb	r3, [r3, #21]
 801123c:	4618      	mov	r0, r3
 801123e:	f7ff f85b 	bl	80102f8 <tcp_alloc>
 8011242:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d111      	bne.n	801126e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	699b      	ldr	r3, [r3, #24]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00a      	beq.n	8011268 <tcp_listen_input+0xa8>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	699b      	ldr	r3, [r3, #24]
 8011256:	687a      	ldr	r2, [r7, #4]
 8011258:	6910      	ldr	r0, [r2, #16]
 801125a:	f04f 32ff 	mov.w	r2, #4294967295
 801125e:	2100      	movs	r1, #0
 8011260:	4798      	blx	r3
 8011262:	4603      	mov	r3, r0
 8011264:	73bb      	strb	r3, [r7, #14]
      return;
 8011266:	e08b      	b.n	8011380 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011268:	23f0      	movs	r3, #240	; 0xf0
 801126a:	73bb      	strb	r3, [r7, #14]
      return;
 801126c:	e088      	b.n	8011380 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801126e:	4b50      	ldr	r3, [pc, #320]	; (80113b0 <tcp_listen_input+0x1f0>)
 8011270:	695a      	ldr	r2, [r3, #20]
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011276:	4b4e      	ldr	r3, [pc, #312]	; (80113b0 <tcp_listen_input+0x1f0>)
 8011278:	691a      	ldr	r2, [r3, #16]
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	8ada      	ldrh	r2, [r3, #22]
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011286:	4b47      	ldr	r3, [pc, #284]	; (80113a4 <tcp_listen_input+0x1e4>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	881b      	ldrh	r3, [r3, #0]
 801128c:	b29a      	uxth	r2, r3
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	2203      	movs	r2, #3
 8011296:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011298:	4b41      	ldr	r3, [pc, #260]	; (80113a0 <tcp_listen_input+0x1e0>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	1c5a      	adds	r2, r3, #1
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80112aa:	6978      	ldr	r0, [r7, #20]
 80112ac:	f7ff fa5a 	bl	8010764 <tcp_next_iss>
 80112b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	693a      	ldr	r2, [r7, #16]
 80112b6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	693a      	ldr	r2, [r7, #16]
 80112bc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	693a      	ldr	r2, [r7, #16]
 80112c2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	693a      	ldr	r2, [r7, #16]
 80112c8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80112ca:	4b35      	ldr	r3, [pc, #212]	; (80113a0 <tcp_listen_input+0x1e0>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	1e5a      	subs	r2, r3, #1
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	691a      	ldr	r2, [r3, #16]
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	7a5b      	ldrb	r3, [r3, #9]
 80112e6:	f003 030c 	and.w	r3, r3, #12
 80112ea:	b2da      	uxtb	r2, r3
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	7a1a      	ldrb	r2, [r3, #8]
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80112f8:	4b2e      	ldr	r3, [pc, #184]	; (80113b4 <tcp_listen_input+0x1f4>)
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	60da      	str	r2, [r3, #12]
 8011300:	4a2c      	ldr	r2, [pc, #176]	; (80113b4 <tcp_listen_input+0x1f4>)
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	6013      	str	r3, [r2, #0]
 8011306:	f003 fd27 	bl	8014d58 <tcp_timer_needed>
 801130a:	4b2b      	ldr	r3, [pc, #172]	; (80113b8 <tcp_listen_input+0x1f8>)
 801130c:	2201      	movs	r2, #1
 801130e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011310:	6978      	ldr	r0, [r7, #20]
 8011312:	f001 fd8d 	bl	8012e30 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011316:	4b23      	ldr	r3, [pc, #140]	; (80113a4 <tcp_listen_input+0x1e4>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	89db      	ldrh	r3, [r3, #14]
 801131c:	b29a      	uxth	r2, r3
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	3304      	adds	r3, #4
 8011338:	4618      	mov	r0, r3
 801133a:	f005 fc4b 	bl	8016bd4 <ip4_route>
 801133e:	4601      	mov	r1, r0
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	3304      	adds	r3, #4
 8011344:	461a      	mov	r2, r3
 8011346:	4620      	mov	r0, r4
 8011348:	f7ff fa32 	bl	80107b0 <tcp_eff_send_mss_netif>
 801134c:	4603      	mov	r3, r0
 801134e:	461a      	mov	r2, r3
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011354:	2112      	movs	r1, #18
 8011356:	6978      	ldr	r0, [r7, #20]
 8011358:	f002 fc9a 	bl	8013c90 <tcp_enqueue_flags>
 801135c:	4603      	mov	r3, r0
 801135e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d004      	beq.n	8011372 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011368:	2100      	movs	r1, #0
 801136a:	6978      	ldr	r0, [r7, #20]
 801136c:	f7fd ffd4 	bl	800f318 <tcp_abandon>
      return;
 8011370:	e006      	b.n	8011380 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011372:	6978      	ldr	r0, [r7, #20]
 8011374:	f002 fd7a 	bl	8013e6c <tcp_output>
  return;
 8011378:	e001      	b.n	801137e <tcp_listen_input+0x1be>
    return;
 801137a:	bf00      	nop
 801137c:	e000      	b.n	8011380 <tcp_listen_input+0x1c0>
  return;
 801137e:	bf00      	nop
}
 8011380:	371c      	adds	r7, #28
 8011382:	46bd      	mov	sp, r7
 8011384:	bd90      	pop	{r4, r7, pc}
 8011386:	bf00      	nop
 8011388:	20004adc 	.word	0x20004adc
 801138c:	08021d98 	.word	0x08021d98
 8011390:	08021f90 	.word	0x08021f90
 8011394:	08021de4 	.word	0x08021de4
 8011398:	20004ad4 	.word	0x20004ad4
 801139c:	20004ada 	.word	0x20004ada
 80113a0:	20004ad0 	.word	0x20004ad0
 80113a4:	20004ac0 	.word	0x20004ac0
 80113a8:	20007f90 	.word	0x20007f90
 80113ac:	20007f94 	.word	0x20007f94
 80113b0:	20007f80 	.word	0x20007f80
 80113b4:	2000b694 	.word	0x2000b694
 80113b8:	2000b690 	.word	0x2000b690

080113bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b086      	sub	sp, #24
 80113c0:	af04      	add	r7, sp, #16
 80113c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80113c4:	4b2f      	ldr	r3, [pc, #188]	; (8011484 <tcp_timewait_input+0xc8>)
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	f003 0304 	and.w	r3, r3, #4
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d153      	bne.n	8011478 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d106      	bne.n	80113e4 <tcp_timewait_input+0x28>
 80113d6:	4b2c      	ldr	r3, [pc, #176]	; (8011488 <tcp_timewait_input+0xcc>)
 80113d8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80113dc:	492b      	ldr	r1, [pc, #172]	; (801148c <tcp_timewait_input+0xd0>)
 80113de:	482c      	ldr	r0, [pc, #176]	; (8011490 <tcp_timewait_input+0xd4>)
 80113e0:	f007 faa4 	bl	801892c <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80113e4:	4b27      	ldr	r3, [pc, #156]	; (8011484 <tcp_timewait_input+0xc8>)
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f003 0302 	and.w	r3, r3, #2
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d02a      	beq.n	8011446 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80113f0:	4b28      	ldr	r3, [pc, #160]	; (8011494 <tcp_timewait_input+0xd8>)
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f8:	1ad3      	subs	r3, r2, r3
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	db2d      	blt.n	801145a <tcp_timewait_input+0x9e>
 80113fe:	4b25      	ldr	r3, [pc, #148]	; (8011494 <tcp_timewait_input+0xd8>)
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011406:	6879      	ldr	r1, [r7, #4]
 8011408:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801140a:	440b      	add	r3, r1
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	dc23      	bgt.n	801145a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011412:	4b21      	ldr	r3, [pc, #132]	; (8011498 <tcp_timewait_input+0xdc>)
 8011414:	6819      	ldr	r1, [r3, #0]
 8011416:	4b21      	ldr	r3, [pc, #132]	; (801149c <tcp_timewait_input+0xe0>)
 8011418:	881b      	ldrh	r3, [r3, #0]
 801141a:	461a      	mov	r2, r3
 801141c:	4b1d      	ldr	r3, [pc, #116]	; (8011494 <tcp_timewait_input+0xd8>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011422:	4b1f      	ldr	r3, [pc, #124]	; (80114a0 <tcp_timewait_input+0xe4>)
 8011424:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011426:	885b      	ldrh	r3, [r3, #2]
 8011428:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801142a:	4a1d      	ldr	r2, [pc, #116]	; (80114a0 <tcp_timewait_input+0xe4>)
 801142c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801142e:	8812      	ldrh	r2, [r2, #0]
 8011430:	b292      	uxth	r2, r2
 8011432:	9202      	str	r2, [sp, #8]
 8011434:	9301      	str	r3, [sp, #4]
 8011436:	4b1b      	ldr	r3, [pc, #108]	; (80114a4 <tcp_timewait_input+0xe8>)
 8011438:	9300      	str	r3, [sp, #0]
 801143a:	4b1b      	ldr	r3, [pc, #108]	; (80114a8 <tcp_timewait_input+0xec>)
 801143c:	4602      	mov	r2, r0
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f003 fac8 	bl	80149d4 <tcp_rst>
      return;
 8011444:	e01b      	b.n	801147e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011446:	4b0f      	ldr	r3, [pc, #60]	; (8011484 <tcp_timewait_input+0xc8>)
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	f003 0301 	and.w	r3, r3, #1
 801144e:	2b00      	cmp	r3, #0
 8011450:	d003      	beq.n	801145a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011452:	4b16      	ldr	r3, [pc, #88]	; (80114ac <tcp_timewait_input+0xf0>)
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801145a:	4b10      	ldr	r3, [pc, #64]	; (801149c <tcp_timewait_input+0xe0>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d00c      	beq.n	801147c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	8b5b      	ldrh	r3, [r3, #26]
 8011466:	f043 0302 	orr.w	r3, r3, #2
 801146a:	b29a      	uxth	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f002 fcfb 	bl	8013e6c <tcp_output>
  }
  return;
 8011476:	e001      	b.n	801147c <tcp_timewait_input+0xc0>
    return;
 8011478:	bf00      	nop
 801147a:	e000      	b.n	801147e <tcp_timewait_input+0xc2>
  return;
 801147c:	bf00      	nop
}
 801147e:	3708      	adds	r7, #8
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	20004adc 	.word	0x20004adc
 8011488:	08021d98 	.word	0x08021d98
 801148c:	08021fb0 	.word	0x08021fb0
 8011490:	08021de4 	.word	0x08021de4
 8011494:	20004ad0 	.word	0x20004ad0
 8011498:	20004ad4 	.word	0x20004ad4
 801149c:	20004ada 	.word	0x20004ada
 80114a0:	20004ac0 	.word	0x20004ac0
 80114a4:	20007f90 	.word	0x20007f90
 80114a8:	20007f94 	.word	0x20007f94
 80114ac:	2000b698 	.word	0x2000b698

080114b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80114b0:	b590      	push	{r4, r7, lr}
 80114b2:	b08d      	sub	sp, #52	; 0x34
 80114b4:	af04      	add	r7, sp, #16
 80114b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80114b8:	2300      	movs	r3, #0
 80114ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80114bc:	2300      	movs	r3, #0
 80114be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d106      	bne.n	80114d4 <tcp_process+0x24>
 80114c6:	4ba5      	ldr	r3, [pc, #660]	; (801175c <tcp_process+0x2ac>)
 80114c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80114cc:	49a4      	ldr	r1, [pc, #656]	; (8011760 <tcp_process+0x2b0>)
 80114ce:	48a5      	ldr	r0, [pc, #660]	; (8011764 <tcp_process+0x2b4>)
 80114d0:	f007 fa2c 	bl	801892c <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80114d4:	4ba4      	ldr	r3, [pc, #656]	; (8011768 <tcp_process+0x2b8>)
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	f003 0304 	and.w	r3, r3, #4
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d04e      	beq.n	801157e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	7d1b      	ldrb	r3, [r3, #20]
 80114e4:	2b02      	cmp	r3, #2
 80114e6:	d108      	bne.n	80114fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114ec:	4b9f      	ldr	r3, [pc, #636]	; (801176c <tcp_process+0x2bc>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d123      	bne.n	801153c <tcp_process+0x8c>
        acceptable = 1;
 80114f4:	2301      	movs	r3, #1
 80114f6:	76fb      	strb	r3, [r7, #27]
 80114f8:	e020      	b.n	801153c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114fe:	4b9c      	ldr	r3, [pc, #624]	; (8011770 <tcp_process+0x2c0>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	429a      	cmp	r2, r3
 8011504:	d102      	bne.n	801150c <tcp_process+0x5c>
        acceptable = 1;
 8011506:	2301      	movs	r3, #1
 8011508:	76fb      	strb	r3, [r7, #27]
 801150a:	e017      	b.n	801153c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801150c:	4b98      	ldr	r3, [pc, #608]	; (8011770 <tcp_process+0x2c0>)
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011514:	1ad3      	subs	r3, r2, r3
 8011516:	2b00      	cmp	r3, #0
 8011518:	db10      	blt.n	801153c <tcp_process+0x8c>
 801151a:	4b95      	ldr	r3, [pc, #596]	; (8011770 <tcp_process+0x2c0>)
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011522:	6879      	ldr	r1, [r7, #4]
 8011524:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011526:	440b      	add	r3, r1
 8011528:	1ad3      	subs	r3, r2, r3
 801152a:	2b00      	cmp	r3, #0
 801152c:	dc06      	bgt.n	801153c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	8b5b      	ldrh	r3, [r3, #26]
 8011532:	f043 0302 	orr.w	r3, r3, #2
 8011536:	b29a      	uxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801153c:	7efb      	ldrb	r3, [r7, #27]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d01b      	beq.n	801157a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	7d1b      	ldrb	r3, [r3, #20]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d106      	bne.n	8011558 <tcp_process+0xa8>
 801154a:	4b84      	ldr	r3, [pc, #528]	; (801175c <tcp_process+0x2ac>)
 801154c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011550:	4988      	ldr	r1, [pc, #544]	; (8011774 <tcp_process+0x2c4>)
 8011552:	4884      	ldr	r0, [pc, #528]	; (8011764 <tcp_process+0x2b4>)
 8011554:	f007 f9ea 	bl	801892c <printf>
      recv_flags |= TF_RESET;
 8011558:	4b87      	ldr	r3, [pc, #540]	; (8011778 <tcp_process+0x2c8>)
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	f043 0308 	orr.w	r3, r3, #8
 8011560:	b2da      	uxtb	r2, r3
 8011562:	4b85      	ldr	r3, [pc, #532]	; (8011778 <tcp_process+0x2c8>)
 8011564:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	8b5b      	ldrh	r3, [r3, #26]
 801156a:	f023 0301 	bic.w	r3, r3, #1
 801156e:	b29a      	uxth	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011574:	f06f 030d 	mvn.w	r3, #13
 8011578:	e37a      	b.n	8011c70 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801157a:	2300      	movs	r3, #0
 801157c:	e378      	b.n	8011c70 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801157e:	4b7a      	ldr	r3, [pc, #488]	; (8011768 <tcp_process+0x2b8>)
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	f003 0302 	and.w	r3, r3, #2
 8011586:	2b00      	cmp	r3, #0
 8011588:	d010      	beq.n	80115ac <tcp_process+0xfc>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	7d1b      	ldrb	r3, [r3, #20]
 801158e:	2b02      	cmp	r3, #2
 8011590:	d00c      	beq.n	80115ac <tcp_process+0xfc>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	7d1b      	ldrb	r3, [r3, #20]
 8011596:	2b03      	cmp	r3, #3
 8011598:	d008      	beq.n	80115ac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	8b5b      	ldrh	r3, [r3, #26]
 801159e:	f043 0302 	orr.w	r3, r3, #2
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80115a8:	2300      	movs	r3, #0
 80115aa:	e361      	b.n	8011c70 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	8b5b      	ldrh	r3, [r3, #26]
 80115b0:	f003 0310 	and.w	r3, r3, #16
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d103      	bne.n	80115c0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80115b8:	4b70      	ldr	r3, [pc, #448]	; (801177c <tcp_process+0x2cc>)
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2200      	movs	r2, #0
 80115c4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2200      	movs	r2, #0
 80115cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f001 fc2d 	bl	8012e30 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	7d1b      	ldrb	r3, [r3, #20]
 80115da:	3b02      	subs	r3, #2
 80115dc:	2b07      	cmp	r3, #7
 80115de:	f200 8337 	bhi.w	8011c50 <tcp_process+0x7a0>
 80115e2:	a201      	add	r2, pc, #4	; (adr r2, 80115e8 <tcp_process+0x138>)
 80115e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e8:	08011609 	.word	0x08011609
 80115ec:	08011839 	.word	0x08011839
 80115f0:	080119b1 	.word	0x080119b1
 80115f4:	080119db 	.word	0x080119db
 80115f8:	08011aff 	.word	0x08011aff
 80115fc:	080119b1 	.word	0x080119b1
 8011600:	08011b8b 	.word	0x08011b8b
 8011604:	08011c1b 	.word	0x08011c1b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011608:	4b57      	ldr	r3, [pc, #348]	; (8011768 <tcp_process+0x2b8>)
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	f003 0310 	and.w	r3, r3, #16
 8011610:	2b00      	cmp	r3, #0
 8011612:	f000 80e4 	beq.w	80117de <tcp_process+0x32e>
 8011616:	4b54      	ldr	r3, [pc, #336]	; (8011768 <tcp_process+0x2b8>)
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	f003 0302 	and.w	r3, r3, #2
 801161e:	2b00      	cmp	r3, #0
 8011620:	f000 80dd 	beq.w	80117de <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	4b50      	ldr	r3, [pc, #320]	; (801176c <tcp_process+0x2bc>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	429a      	cmp	r2, r3
 8011630:	f040 80d5 	bne.w	80117de <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011634:	4b4e      	ldr	r3, [pc, #312]	; (8011770 <tcp_process+0x2c0>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	1c5a      	adds	r2, r3, #1
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011646:	4b49      	ldr	r3, [pc, #292]	; (801176c <tcp_process+0x2bc>)
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801164e:	4b4c      	ldr	r3, [pc, #304]	; (8011780 <tcp_process+0x2d0>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	89db      	ldrh	r3, [r3, #14]
 8011654:	b29a      	uxth	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011668:	4b41      	ldr	r3, [pc, #260]	; (8011770 <tcp_process+0x2c0>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	1e5a      	subs	r2, r3, #1
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2204      	movs	r2, #4
 8011676:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	3304      	adds	r3, #4
 8011680:	4618      	mov	r0, r3
 8011682:	f005 faa7 	bl	8016bd4 <ip4_route>
 8011686:	4601      	mov	r1, r0
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	3304      	adds	r3, #4
 801168c:	461a      	mov	r2, r3
 801168e:	4620      	mov	r0, r4
 8011690:	f7ff f88e 	bl	80107b0 <tcp_eff_send_mss_netif>
 8011694:	4603      	mov	r3, r0
 8011696:	461a      	mov	r2, r3
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116a0:	009a      	lsls	r2, r3, #2
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116a6:	005b      	lsls	r3, r3, #1
 80116a8:	f241 111c 	movw	r1, #4380	; 0x111c
 80116ac:	428b      	cmp	r3, r1
 80116ae:	bf38      	it	cc
 80116b0:	460b      	movcc	r3, r1
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d204      	bcs.n	80116c0 <tcp_process+0x210>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	b29b      	uxth	r3, r3
 80116be:	e00d      	b.n	80116dc <tcp_process+0x22c>
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	f241 121c 	movw	r2, #4380	; 0x111c
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d904      	bls.n	80116d8 <tcp_process+0x228>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116d2:	005b      	lsls	r3, r3, #1
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	e001      	b.n	80116dc <tcp_process+0x22c>
 80116d8:	f241 131c 	movw	r3, #4380	; 0x111c
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d106      	bne.n	80116fa <tcp_process+0x24a>
 80116ec:	4b1b      	ldr	r3, [pc, #108]	; (801175c <tcp_process+0x2ac>)
 80116ee:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80116f2:	4924      	ldr	r1, [pc, #144]	; (8011784 <tcp_process+0x2d4>)
 80116f4:	481b      	ldr	r0, [pc, #108]	; (8011764 <tcp_process+0x2b4>)
 80116f6:	f007 f919 	bl	801892c <printf>
        --pcb->snd_queuelen;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011700:	3b01      	subs	r3, #1
 8011702:	b29a      	uxth	r2, r3
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801170e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d111      	bne.n	801173a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801171a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d106      	bne.n	8011730 <tcp_process+0x280>
 8011722:	4b0e      	ldr	r3, [pc, #56]	; (801175c <tcp_process+0x2ac>)
 8011724:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011728:	4917      	ldr	r1, [pc, #92]	; (8011788 <tcp_process+0x2d8>)
 801172a:	480e      	ldr	r0, [pc, #56]	; (8011764 <tcp_process+0x2b4>)
 801172c:	f007 f8fe 	bl	801892c <printf>
          pcb->unsent = rseg->next;
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	66da      	str	r2, [r3, #108]	; 0x6c
 8011738:	e003      	b.n	8011742 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011742:	69f8      	ldr	r0, [r7, #28]
 8011744:	f7fe fc6f 	bl	8010026 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801174c:	2b00      	cmp	r3, #0
 801174e:	d11d      	bne.n	801178c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011756:	861a      	strh	r2, [r3, #48]	; 0x30
 8011758:	e01f      	b.n	801179a <tcp_process+0x2ea>
 801175a:	bf00      	nop
 801175c:	08021d98 	.word	0x08021d98
 8011760:	08021fd0 	.word	0x08021fd0
 8011764:	08021de4 	.word	0x08021de4
 8011768:	20004adc 	.word	0x20004adc
 801176c:	20004ad4 	.word	0x20004ad4
 8011770:	20004ad0 	.word	0x20004ad0
 8011774:	08021fec 	.word	0x08021fec
 8011778:	20004add 	.word	0x20004add
 801177c:	2000b698 	.word	0x2000b698
 8011780:	20004ac0 	.word	0x20004ac0
 8011784:	0802200c 	.word	0x0802200c
 8011788:	08022024 	.word	0x08022024
        } else {
          pcb->rtime = 0;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2200      	movs	r2, #0
 8011790:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2200      	movs	r2, #0
 8011796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d00a      	beq.n	80117ba <tcp_process+0x30a>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	6910      	ldr	r0, [r2, #16]
 80117ae:	2200      	movs	r2, #0
 80117b0:	6879      	ldr	r1, [r7, #4]
 80117b2:	4798      	blx	r3
 80117b4:	4603      	mov	r3, r0
 80117b6:	76bb      	strb	r3, [r7, #26]
 80117b8:	e001      	b.n	80117be <tcp_process+0x30e>
 80117ba:	2300      	movs	r3, #0
 80117bc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80117be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117c2:	f113 0f0d 	cmn.w	r3, #13
 80117c6:	d102      	bne.n	80117ce <tcp_process+0x31e>
          return ERR_ABRT;
 80117c8:	f06f 030c 	mvn.w	r3, #12
 80117cc:	e250      	b.n	8011c70 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	8b5b      	ldrh	r3, [r3, #26]
 80117d2:	f043 0302 	orr.w	r3, r3, #2
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80117dc:	e23a      	b.n	8011c54 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80117de:	4b9d      	ldr	r3, [pc, #628]	; (8011a54 <tcp_process+0x5a4>)
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	f003 0310 	and.w	r3, r3, #16
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 8234 	beq.w	8011c54 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117ec:	4b9a      	ldr	r3, [pc, #616]	; (8011a58 <tcp_process+0x5a8>)
 80117ee:	6819      	ldr	r1, [r3, #0]
 80117f0:	4b9a      	ldr	r3, [pc, #616]	; (8011a5c <tcp_process+0x5ac>)
 80117f2:	881b      	ldrh	r3, [r3, #0]
 80117f4:	461a      	mov	r2, r3
 80117f6:	4b9a      	ldr	r3, [pc, #616]	; (8011a60 <tcp_process+0x5b0>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117fc:	4b99      	ldr	r3, [pc, #612]	; (8011a64 <tcp_process+0x5b4>)
 80117fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011800:	885b      	ldrh	r3, [r3, #2]
 8011802:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011804:	4a97      	ldr	r2, [pc, #604]	; (8011a64 <tcp_process+0x5b4>)
 8011806:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011808:	8812      	ldrh	r2, [r2, #0]
 801180a:	b292      	uxth	r2, r2
 801180c:	9202      	str	r2, [sp, #8]
 801180e:	9301      	str	r3, [sp, #4]
 8011810:	4b95      	ldr	r3, [pc, #596]	; (8011a68 <tcp_process+0x5b8>)
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	4b95      	ldr	r3, [pc, #596]	; (8011a6c <tcp_process+0x5bc>)
 8011816:	4602      	mov	r2, r0
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f003 f8db 	bl	80149d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011824:	2b05      	cmp	r3, #5
 8011826:	f200 8215 	bhi.w	8011c54 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2200      	movs	r2, #0
 801182e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f002 fea5 	bl	8014580 <tcp_rexmit_rto>
      break;
 8011836:	e20d      	b.n	8011c54 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011838:	4b86      	ldr	r3, [pc, #536]	; (8011a54 <tcp_process+0x5a4>)
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	f003 0310 	and.w	r3, r3, #16
 8011840:	2b00      	cmp	r3, #0
 8011842:	f000 80a1 	beq.w	8011988 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011846:	4b84      	ldr	r3, [pc, #528]	; (8011a58 <tcp_process+0x5a8>)
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	3b01      	subs	r3, #1
 8011852:	2b00      	cmp	r3, #0
 8011854:	db7e      	blt.n	8011954 <tcp_process+0x4a4>
 8011856:	4b80      	ldr	r3, [pc, #512]	; (8011a58 <tcp_process+0x5a8>)
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	2b00      	cmp	r3, #0
 8011862:	dc77      	bgt.n	8011954 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2204      	movs	r2, #4
 8011868:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801186e:	2b00      	cmp	r3, #0
 8011870:	d102      	bne.n	8011878 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011872:	23fa      	movs	r3, #250	; 0xfa
 8011874:	76bb      	strb	r3, [r7, #26]
 8011876:	e01d      	b.n	80118b4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801187c:	699b      	ldr	r3, [r3, #24]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d106      	bne.n	8011890 <tcp_process+0x3e0>
 8011882:	4b7b      	ldr	r3, [pc, #492]	; (8011a70 <tcp_process+0x5c0>)
 8011884:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011888:	497a      	ldr	r1, [pc, #488]	; (8011a74 <tcp_process+0x5c4>)
 801188a:	487b      	ldr	r0, [pc, #492]	; (8011a78 <tcp_process+0x5c8>)
 801188c:	f007 f84e 	bl	801892c <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011894:	699b      	ldr	r3, [r3, #24]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d00a      	beq.n	80118b0 <tcp_process+0x400>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801189e:	699b      	ldr	r3, [r3, #24]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	6910      	ldr	r0, [r2, #16]
 80118a4:	2200      	movs	r2, #0
 80118a6:	6879      	ldr	r1, [r7, #4]
 80118a8:	4798      	blx	r3
 80118aa:	4603      	mov	r3, r0
 80118ac:	76bb      	strb	r3, [r7, #26]
 80118ae:	e001      	b.n	80118b4 <tcp_process+0x404>
 80118b0:	23f0      	movs	r3, #240	; 0xf0
 80118b2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80118b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d00a      	beq.n	80118d2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80118bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80118c0:	f113 0f0d 	cmn.w	r3, #13
 80118c4:	d002      	beq.n	80118cc <tcp_process+0x41c>
              tcp_abort(pcb);
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f7fd fde4 	bl	800f494 <tcp_abort>
            }
            return ERR_ABRT;
 80118cc:	f06f 030c 	mvn.w	r3, #12
 80118d0:	e1ce      	b.n	8011c70 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f000 fae0 	bl	8011e98 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80118d8:	4b68      	ldr	r3, [pc, #416]	; (8011a7c <tcp_process+0x5cc>)
 80118da:	881b      	ldrh	r3, [r3, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d005      	beq.n	80118ec <tcp_process+0x43c>
            recv_acked--;
 80118e0:	4b66      	ldr	r3, [pc, #408]	; (8011a7c <tcp_process+0x5cc>)
 80118e2:	881b      	ldrh	r3, [r3, #0]
 80118e4:	3b01      	subs	r3, #1
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	4b64      	ldr	r3, [pc, #400]	; (8011a7c <tcp_process+0x5cc>)
 80118ea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118f0:	009a      	lsls	r2, r3, #2
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118f6:	005b      	lsls	r3, r3, #1
 80118f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80118fc:	428b      	cmp	r3, r1
 80118fe:	bf38      	it	cc
 8011900:	460b      	movcc	r3, r1
 8011902:	429a      	cmp	r2, r3
 8011904:	d204      	bcs.n	8011910 <tcp_process+0x460>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801190a:	009b      	lsls	r3, r3, #2
 801190c:	b29b      	uxth	r3, r3
 801190e:	e00d      	b.n	801192c <tcp_process+0x47c>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	f241 121c 	movw	r2, #4380	; 0x111c
 801191a:	4293      	cmp	r3, r2
 801191c:	d904      	bls.n	8011928 <tcp_process+0x478>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011922:	005b      	lsls	r3, r3, #1
 8011924:	b29b      	uxth	r3, r3
 8011926:	e001      	b.n	801192c <tcp_process+0x47c>
 8011928:	f241 131c 	movw	r3, #4380	; 0x111c
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011932:	4b53      	ldr	r3, [pc, #332]	; (8011a80 <tcp_process+0x5d0>)
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	f003 0320 	and.w	r3, r3, #32
 801193a:	2b00      	cmp	r3, #0
 801193c:	d037      	beq.n	80119ae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8b5b      	ldrh	r3, [r3, #26]
 8011942:	f043 0302 	orr.w	r3, r3, #2
 8011946:	b29a      	uxth	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2207      	movs	r2, #7
 8011950:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011952:	e02c      	b.n	80119ae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011954:	4b40      	ldr	r3, [pc, #256]	; (8011a58 <tcp_process+0x5a8>)
 8011956:	6819      	ldr	r1, [r3, #0]
 8011958:	4b40      	ldr	r3, [pc, #256]	; (8011a5c <tcp_process+0x5ac>)
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	461a      	mov	r2, r3
 801195e:	4b40      	ldr	r3, [pc, #256]	; (8011a60 <tcp_process+0x5b0>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011964:	4b3f      	ldr	r3, [pc, #252]	; (8011a64 <tcp_process+0x5b4>)
 8011966:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011968:	885b      	ldrh	r3, [r3, #2]
 801196a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801196c:	4a3d      	ldr	r2, [pc, #244]	; (8011a64 <tcp_process+0x5b4>)
 801196e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011970:	8812      	ldrh	r2, [r2, #0]
 8011972:	b292      	uxth	r2, r2
 8011974:	9202      	str	r2, [sp, #8]
 8011976:	9301      	str	r3, [sp, #4]
 8011978:	4b3b      	ldr	r3, [pc, #236]	; (8011a68 <tcp_process+0x5b8>)
 801197a:	9300      	str	r3, [sp, #0]
 801197c:	4b3b      	ldr	r3, [pc, #236]	; (8011a6c <tcp_process+0x5bc>)
 801197e:	4602      	mov	r2, r0
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f003 f827 	bl	80149d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011986:	e167      	b.n	8011c58 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011988:	4b32      	ldr	r3, [pc, #200]	; (8011a54 <tcp_process+0x5a4>)
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	f003 0302 	and.w	r3, r3, #2
 8011990:	2b00      	cmp	r3, #0
 8011992:	f000 8161 	beq.w	8011c58 <tcp_process+0x7a8>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801199a:	1e5a      	subs	r2, r3, #1
 801199c:	4b30      	ldr	r3, [pc, #192]	; (8011a60 <tcp_process+0x5b0>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	f040 8159 	bne.w	8011c58 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f002 fe0c 	bl	80145c4 <tcp_rexmit>
      break;
 80119ac:	e154      	b.n	8011c58 <tcp_process+0x7a8>
 80119ae:	e153      	b.n	8011c58 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f000 fa71 	bl	8011e98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80119b6:	4b32      	ldr	r3, [pc, #200]	; (8011a80 <tcp_process+0x5d0>)
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	f003 0320 	and.w	r3, r3, #32
 80119be:	2b00      	cmp	r3, #0
 80119c0:	f000 814c 	beq.w	8011c5c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	8b5b      	ldrh	r3, [r3, #26]
 80119c8:	f043 0302 	orr.w	r3, r3, #2
 80119cc:	b29a      	uxth	r2, r3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2207      	movs	r2, #7
 80119d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80119d8:	e140      	b.n	8011c5c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 fa5c 	bl	8011e98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80119e0:	4b27      	ldr	r3, [pc, #156]	; (8011a80 <tcp_process+0x5d0>)
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	f003 0320 	and.w	r3, r3, #32
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d071      	beq.n	8011ad0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119ec:	4b19      	ldr	r3, [pc, #100]	; (8011a54 <tcp_process+0x5a4>)
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	f003 0310 	and.w	r3, r3, #16
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d060      	beq.n	8011aba <tcp_process+0x60a>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119fc:	4b16      	ldr	r3, [pc, #88]	; (8011a58 <tcp_process+0x5a8>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d15a      	bne.n	8011aba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d156      	bne.n	8011aba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	8b5b      	ldrh	r3, [r3, #26]
 8011a10:	f043 0302 	orr.w	r3, r3, #2
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f7fe fdbe 	bl	801059c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011a20:	4b18      	ldr	r3, [pc, #96]	; (8011a84 <tcp_process+0x5d4>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d105      	bne.n	8011a36 <tcp_process+0x586>
 8011a2a:	4b16      	ldr	r3, [pc, #88]	; (8011a84 <tcp_process+0x5d4>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	4a14      	ldr	r2, [pc, #80]	; (8011a84 <tcp_process+0x5d4>)
 8011a32:	6013      	str	r3, [r2, #0]
 8011a34:	e02e      	b.n	8011a94 <tcp_process+0x5e4>
 8011a36:	4b13      	ldr	r3, [pc, #76]	; (8011a84 <tcp_process+0x5d4>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	617b      	str	r3, [r7, #20]
 8011a3c:	e027      	b.n	8011a8e <tcp_process+0x5de>
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d11f      	bne.n	8011a88 <tcp_process+0x5d8>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	68da      	ldr	r2, [r3, #12]
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	60da      	str	r2, [r3, #12]
 8011a50:	e020      	b.n	8011a94 <tcp_process+0x5e4>
 8011a52:	bf00      	nop
 8011a54:	20004adc 	.word	0x20004adc
 8011a58:	20004ad4 	.word	0x20004ad4
 8011a5c:	20004ada 	.word	0x20004ada
 8011a60:	20004ad0 	.word	0x20004ad0
 8011a64:	20004ac0 	.word	0x20004ac0
 8011a68:	20007f90 	.word	0x20007f90
 8011a6c:	20007f94 	.word	0x20007f94
 8011a70:	08021d98 	.word	0x08021d98
 8011a74:	08022038 	.word	0x08022038
 8011a78:	08021de4 	.word	0x08021de4
 8011a7c:	20004ad8 	.word	0x20004ad8
 8011a80:	20004add 	.word	0x20004add
 8011a84:	2000b694 	.word	0x2000b694
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	617b      	str	r3, [r7, #20]
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d1d4      	bne.n	8011a3e <tcp_process+0x58e>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	60da      	str	r2, [r3, #12]
 8011a9a:	4b77      	ldr	r3, [pc, #476]	; (8011c78 <tcp_process+0x7c8>)
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	220a      	movs	r2, #10
 8011aa4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011aa6:	4b75      	ldr	r3, [pc, #468]	; (8011c7c <tcp_process+0x7cc>)
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	60da      	str	r2, [r3, #12]
 8011aae:	4a73      	ldr	r2, [pc, #460]	; (8011c7c <tcp_process+0x7cc>)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6013      	str	r3, [r2, #0]
 8011ab4:	f003 f950 	bl	8014d58 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011ab8:	e0d2      	b.n	8011c60 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	8b5b      	ldrh	r3, [r3, #26]
 8011abe:	f043 0302 	orr.w	r3, r3, #2
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2208      	movs	r2, #8
 8011acc:	751a      	strb	r2, [r3, #20]
      break;
 8011ace:	e0c7      	b.n	8011c60 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ad0:	4b6b      	ldr	r3, [pc, #428]	; (8011c80 <tcp_process+0x7d0>)
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	f003 0310 	and.w	r3, r3, #16
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	f000 80c1 	beq.w	8011c60 <tcp_process+0x7b0>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ae2:	4b68      	ldr	r3, [pc, #416]	; (8011c84 <tcp_process+0x7d4>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	f040 80ba 	bne.w	8011c60 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f040 80b5 	bne.w	8011c60 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2206      	movs	r2, #6
 8011afa:	751a      	strb	r2, [r3, #20]
      break;
 8011afc:	e0b0      	b.n	8011c60 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 f9ca 	bl	8011e98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011b04:	4b60      	ldr	r3, [pc, #384]	; (8011c88 <tcp_process+0x7d8>)
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	f003 0320 	and.w	r3, r3, #32
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f000 80a9 	beq.w	8011c64 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	8b5b      	ldrh	r3, [r3, #26]
 8011b16:	f043 0302 	orr.w	r3, r3, #2
 8011b1a:	b29a      	uxth	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7fe fd3b 	bl	801059c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011b26:	4b59      	ldr	r3, [pc, #356]	; (8011c8c <tcp_process+0x7dc>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	687a      	ldr	r2, [r7, #4]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d105      	bne.n	8011b3c <tcp_process+0x68c>
 8011b30:	4b56      	ldr	r3, [pc, #344]	; (8011c8c <tcp_process+0x7dc>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	4a55      	ldr	r2, [pc, #340]	; (8011c8c <tcp_process+0x7dc>)
 8011b38:	6013      	str	r3, [r2, #0]
 8011b3a:	e013      	b.n	8011b64 <tcp_process+0x6b4>
 8011b3c:	4b53      	ldr	r3, [pc, #332]	; (8011c8c <tcp_process+0x7dc>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	613b      	str	r3, [r7, #16]
 8011b42:	e00c      	b.n	8011b5e <tcp_process+0x6ae>
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d104      	bne.n	8011b58 <tcp_process+0x6a8>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	68da      	ldr	r2, [r3, #12]
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	60da      	str	r2, [r3, #12]
 8011b56:	e005      	b.n	8011b64 <tcp_process+0x6b4>
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	613b      	str	r3, [r7, #16]
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1ef      	bne.n	8011b44 <tcp_process+0x694>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2200      	movs	r2, #0
 8011b68:	60da      	str	r2, [r3, #12]
 8011b6a:	4b43      	ldr	r3, [pc, #268]	; (8011c78 <tcp_process+0x7c8>)
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	220a      	movs	r2, #10
 8011b74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b76:	4b41      	ldr	r3, [pc, #260]	; (8011c7c <tcp_process+0x7cc>)
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	60da      	str	r2, [r3, #12]
 8011b7e:	4a3f      	ldr	r2, [pc, #252]	; (8011c7c <tcp_process+0x7cc>)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6013      	str	r3, [r2, #0]
 8011b84:	f003 f8e8 	bl	8014d58 <tcp_timer_needed>
      }
      break;
 8011b88:	e06c      	b.n	8011c64 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f000 f984 	bl	8011e98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b90:	4b3b      	ldr	r3, [pc, #236]	; (8011c80 <tcp_process+0x7d0>)
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	f003 0310 	and.w	r3, r3, #16
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d065      	beq.n	8011c68 <tcp_process+0x7b8>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ba0:	4b38      	ldr	r3, [pc, #224]	; (8011c84 <tcp_process+0x7d4>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d15f      	bne.n	8011c68 <tcp_process+0x7b8>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d15b      	bne.n	8011c68 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7fe fcf3 	bl	801059c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011bb6:	4b35      	ldr	r3, [pc, #212]	; (8011c8c <tcp_process+0x7dc>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d105      	bne.n	8011bcc <tcp_process+0x71c>
 8011bc0:	4b32      	ldr	r3, [pc, #200]	; (8011c8c <tcp_process+0x7dc>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	68db      	ldr	r3, [r3, #12]
 8011bc6:	4a31      	ldr	r2, [pc, #196]	; (8011c8c <tcp_process+0x7dc>)
 8011bc8:	6013      	str	r3, [r2, #0]
 8011bca:	e013      	b.n	8011bf4 <tcp_process+0x744>
 8011bcc:	4b2f      	ldr	r3, [pc, #188]	; (8011c8c <tcp_process+0x7dc>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	60fb      	str	r3, [r7, #12]
 8011bd2:	e00c      	b.n	8011bee <tcp_process+0x73e>
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d104      	bne.n	8011be8 <tcp_process+0x738>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	68da      	ldr	r2, [r3, #12]
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	60da      	str	r2, [r3, #12]
 8011be6:	e005      	b.n	8011bf4 <tcp_process+0x744>
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	60fb      	str	r3, [r7, #12]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d1ef      	bne.n	8011bd4 <tcp_process+0x724>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	60da      	str	r2, [r3, #12]
 8011bfa:	4b1f      	ldr	r3, [pc, #124]	; (8011c78 <tcp_process+0x7c8>)
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	220a      	movs	r2, #10
 8011c04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011c06:	4b1d      	ldr	r3, [pc, #116]	; (8011c7c <tcp_process+0x7cc>)
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	60da      	str	r2, [r3, #12]
 8011c0e:	4a1b      	ldr	r2, [pc, #108]	; (8011c7c <tcp_process+0x7cc>)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6013      	str	r3, [r2, #0]
 8011c14:	f003 f8a0 	bl	8014d58 <tcp_timer_needed>
      }
      break;
 8011c18:	e026      	b.n	8011c68 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f000 f93c 	bl	8011e98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011c20:	4b17      	ldr	r3, [pc, #92]	; (8011c80 <tcp_process+0x7d0>)
 8011c22:	781b      	ldrb	r3, [r3, #0]
 8011c24:	f003 0310 	and.w	r3, r3, #16
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d01f      	beq.n	8011c6c <tcp_process+0x7bc>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c30:	4b14      	ldr	r3, [pc, #80]	; (8011c84 <tcp_process+0x7d4>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d119      	bne.n	8011c6c <tcp_process+0x7bc>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d115      	bne.n	8011c6c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011c40:	4b11      	ldr	r3, [pc, #68]	; (8011c88 <tcp_process+0x7d8>)
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	f043 0310 	orr.w	r3, r3, #16
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	4b0f      	ldr	r3, [pc, #60]	; (8011c88 <tcp_process+0x7d8>)
 8011c4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011c4e:	e00d      	b.n	8011c6c <tcp_process+0x7bc>
    default:
      break;
 8011c50:	bf00      	nop
 8011c52:	e00c      	b.n	8011c6e <tcp_process+0x7be>
      break;
 8011c54:	bf00      	nop
 8011c56:	e00a      	b.n	8011c6e <tcp_process+0x7be>
      break;
 8011c58:	bf00      	nop
 8011c5a:	e008      	b.n	8011c6e <tcp_process+0x7be>
      break;
 8011c5c:	bf00      	nop
 8011c5e:	e006      	b.n	8011c6e <tcp_process+0x7be>
      break;
 8011c60:	bf00      	nop
 8011c62:	e004      	b.n	8011c6e <tcp_process+0x7be>
      break;
 8011c64:	bf00      	nop
 8011c66:	e002      	b.n	8011c6e <tcp_process+0x7be>
      break;
 8011c68:	bf00      	nop
 8011c6a:	e000      	b.n	8011c6e <tcp_process+0x7be>
      break;
 8011c6c:	bf00      	nop
  }
  return ERR_OK;
 8011c6e:	2300      	movs	r3, #0
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3724      	adds	r7, #36	; 0x24
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd90      	pop	{r4, r7, pc}
 8011c78:	2000b690 	.word	0x2000b690
 8011c7c:	2000b6a4 	.word	0x2000b6a4
 8011c80:	20004adc 	.word	0x20004adc
 8011c84:	20004ad4 	.word	0x20004ad4
 8011c88:	20004add 	.word	0x20004add
 8011c8c:	2000b694 	.word	0x2000b694

08011c90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011c90:	b590      	push	{r4, r7, lr}
 8011c92:	b085      	sub	sp, #20
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d106      	bne.n	8011cae <tcp_oos_insert_segment+0x1e>
 8011ca0:	4b3b      	ldr	r3, [pc, #236]	; (8011d90 <tcp_oos_insert_segment+0x100>)
 8011ca2:	f240 421f 	movw	r2, #1055	; 0x41f
 8011ca6:	493b      	ldr	r1, [pc, #236]	; (8011d94 <tcp_oos_insert_segment+0x104>)
 8011ca8:	483b      	ldr	r0, [pc, #236]	; (8011d98 <tcp_oos_insert_segment+0x108>)
 8011caa:	f006 fe3f 	bl	801892c <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	899b      	ldrh	r3, [r3, #12]
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fb fab8 	bl	800d22c <lwip_htons>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	f003 0301 	and.w	r3, r3, #1
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d028      	beq.n	8011d1a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011cc8:	6838      	ldr	r0, [r7, #0]
 8011cca:	f7fe f997 	bl	800fffc <tcp_segs_free>
    next = NULL;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	603b      	str	r3, [r7, #0]
 8011cd2:	e056      	b.n	8011d82 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	899b      	ldrh	r3, [r3, #12]
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7fb faa5 	bl	800d22c <lwip_htons>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	b2db      	uxtb	r3, r3
 8011ce6:	f003 0301 	and.w	r3, r3, #1
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d00d      	beq.n	8011d0a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	899b      	ldrh	r3, [r3, #12]
 8011cf4:	b29c      	uxth	r4, r3
 8011cf6:	2001      	movs	r0, #1
 8011cf8:	f7fb fa98 	bl	800d22c <lwip_htons>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	461a      	mov	r2, r3
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	4322      	orrs	r2, r4
 8011d06:	b292      	uxth	r2, r2
 8011d08:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f7fe f986 	bl	8010026 <tcp_seg_free>
    while (next &&
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00e      	beq.n	8011d3e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	891b      	ldrh	r3, [r3, #8]
 8011d24:	461a      	mov	r2, r3
 8011d26:	4b1d      	ldr	r3, [pc, #116]	; (8011d9c <tcp_oos_insert_segment+0x10c>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	441a      	add	r2, r3
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	6839      	ldr	r1, [r7, #0]
 8011d34:	8909      	ldrh	r1, [r1, #8]
 8011d36:	440b      	add	r3, r1
 8011d38:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	daca      	bge.n	8011cd4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d01e      	beq.n	8011d82 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	891b      	ldrh	r3, [r3, #8]
 8011d48:	461a      	mov	r2, r3
 8011d4a:	4b14      	ldr	r3, [pc, #80]	; (8011d9c <tcp_oos_insert_segment+0x10c>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	441a      	add	r2, r3
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	dd12      	ble.n	8011d82 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	b29a      	uxth	r2, r3
 8011d64:	4b0d      	ldr	r3, [pc, #52]	; (8011d9c <tcp_oos_insert_segment+0x10c>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	1ad3      	subs	r3, r2, r3
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	891b      	ldrh	r3, [r3, #8]
 8011d7a:	4619      	mov	r1, r3
 8011d7c:	4610      	mov	r0, r2
 8011d7e:	f7fc fc03 	bl	800e588 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	683a      	ldr	r2, [r7, #0]
 8011d86:	601a      	str	r2, [r3, #0]
}
 8011d88:	bf00      	nop
 8011d8a:	3714      	adds	r7, #20
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd90      	pop	{r4, r7, pc}
 8011d90:	08021d98 	.word	0x08021d98
 8011d94:	08022058 	.word	0x08022058
 8011d98:	08021de4 	.word	0x08021de4
 8011d9c:	20004ad0 	.word	0x20004ad0

08011da0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011da0:	b5b0      	push	{r4, r5, r7, lr}
 8011da2:	b086      	sub	sp, #24
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
 8011dac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011dae:	e03e      	b.n	8011e2e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fc fdf6 	bl	800e9b0 <pbuf_clen>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dce:	8a7a      	ldrh	r2, [r7, #18]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d906      	bls.n	8011de2 <tcp_free_acked_segments+0x42>
 8011dd4:	4b2a      	ldr	r3, [pc, #168]	; (8011e80 <tcp_free_acked_segments+0xe0>)
 8011dd6:	f240 4257 	movw	r2, #1111	; 0x457
 8011dda:	492a      	ldr	r1, [pc, #168]	; (8011e84 <tcp_free_acked_segments+0xe4>)
 8011ddc:	482a      	ldr	r0, [pc, #168]	; (8011e88 <tcp_free_acked_segments+0xe8>)
 8011dde:	f006 fda5 	bl	801892c <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011de8:	8a7b      	ldrh	r3, [r7, #18]
 8011dea:	1ad3      	subs	r3, r2, r3
 8011dec:	b29a      	uxth	r2, r3
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	891a      	ldrh	r2, [r3, #8]
 8011df8:	4b24      	ldr	r3, [pc, #144]	; (8011e8c <tcp_free_acked_segments+0xec>)
 8011dfa:	881b      	ldrh	r3, [r3, #0]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	b29a      	uxth	r2, r3
 8011e00:	4b22      	ldr	r3, [pc, #136]	; (8011e8c <tcp_free_acked_segments+0xec>)
 8011e02:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011e04:	6978      	ldr	r0, [r7, #20]
 8011e06:	f7fe f90e 	bl	8010026 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00c      	beq.n	8011e2e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d109      	bne.n	8011e2e <tcp_free_acked_segments+0x8e>
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d106      	bne.n	8011e2e <tcp_free_acked_segments+0x8e>
 8011e20:	4b17      	ldr	r3, [pc, #92]	; (8011e80 <tcp_free_acked_segments+0xe0>)
 8011e22:	f240 4261 	movw	r2, #1121	; 0x461
 8011e26:	491a      	ldr	r1, [pc, #104]	; (8011e90 <tcp_free_acked_segments+0xf0>)
 8011e28:	4817      	ldr	r0, [pc, #92]	; (8011e88 <tcp_free_acked_segments+0xe8>)
 8011e2a:	f006 fd7f 	bl	801892c <printf>
  while (seg_list != NULL &&
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d020      	beq.n	8011e76 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fb fa0b 	bl	800d256 <lwip_htonl>
 8011e40:	4604      	mov	r4, r0
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	891b      	ldrh	r3, [r3, #8]
 8011e46:	461d      	mov	r5, r3
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	899b      	ldrh	r3, [r3, #12]
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7fb f9eb 	bl	800d22c <lwip_htons>
 8011e56:	4603      	mov	r3, r0
 8011e58:	b2db      	uxtb	r3, r3
 8011e5a:	f003 0303 	and.w	r3, r3, #3
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d001      	beq.n	8011e66 <tcp_free_acked_segments+0xc6>
 8011e62:	2301      	movs	r3, #1
 8011e64:	e000      	b.n	8011e68 <tcp_free_acked_segments+0xc8>
 8011e66:	2300      	movs	r3, #0
 8011e68:	442b      	add	r3, r5
 8011e6a:	18e2      	adds	r2, r4, r3
 8011e6c:	4b09      	ldr	r3, [pc, #36]	; (8011e94 <tcp_free_acked_segments+0xf4>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	dd9c      	ble.n	8011db0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011e76:	68bb      	ldr	r3, [r7, #8]
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3718      	adds	r7, #24
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8011e80:	08021d98 	.word	0x08021d98
 8011e84:	08022080 	.word	0x08022080
 8011e88:	08021de4 	.word	0x08021de4
 8011e8c:	20004ad8 	.word	0x20004ad8
 8011e90:	080220a8 	.word	0x080220a8
 8011e94:	20004ad4 	.word	0x20004ad4

08011e98 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011e98:	b5b0      	push	{r4, r5, r7, lr}
 8011e9a:	b094      	sub	sp, #80	; 0x50
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d106      	bne.n	8011eb8 <tcp_receive+0x20>
 8011eaa:	4ba6      	ldr	r3, [pc, #664]	; (8012144 <tcp_receive+0x2ac>)
 8011eac:	f240 427b 	movw	r2, #1147	; 0x47b
 8011eb0:	49a5      	ldr	r1, [pc, #660]	; (8012148 <tcp_receive+0x2b0>)
 8011eb2:	48a6      	ldr	r0, [pc, #664]	; (801214c <tcp_receive+0x2b4>)
 8011eb4:	f006 fd3a 	bl	801892c <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	7d1b      	ldrb	r3, [r3, #20]
 8011ebc:	2b03      	cmp	r3, #3
 8011ebe:	d806      	bhi.n	8011ece <tcp_receive+0x36>
 8011ec0:	4ba0      	ldr	r3, [pc, #640]	; (8012144 <tcp_receive+0x2ac>)
 8011ec2:	f240 427c 	movw	r2, #1148	; 0x47c
 8011ec6:	49a2      	ldr	r1, [pc, #648]	; (8012150 <tcp_receive+0x2b8>)
 8011ec8:	48a0      	ldr	r0, [pc, #640]	; (801214c <tcp_receive+0x2b4>)
 8011eca:	f006 fd2f 	bl	801892c <printf>

  if (flags & TCP_ACK) {
 8011ece:	4ba1      	ldr	r3, [pc, #644]	; (8012154 <tcp_receive+0x2bc>)
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	f003 0310 	and.w	r3, r3, #16
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	f000 8263 	beq.w	80123a2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ee8:	4413      	add	r3, r2
 8011eea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ef0:	4b99      	ldr	r3, [pc, #612]	; (8012158 <tcp_receive+0x2c0>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	1ad3      	subs	r3, r2, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	db1b      	blt.n	8011f32 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011efe:	4b96      	ldr	r3, [pc, #600]	; (8012158 <tcp_receive+0x2c0>)
 8011f00:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d106      	bne.n	8011f14 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011f0a:	4b94      	ldr	r3, [pc, #592]	; (801215c <tcp_receive+0x2c4>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	1ad3      	subs	r3, r2, r3
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	db0e      	blt.n	8011f32 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011f18:	4b90      	ldr	r3, [pc, #576]	; (801215c <tcp_receive+0x2c4>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d125      	bne.n	8011f6c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011f20:	4b8f      	ldr	r3, [pc, #572]	; (8012160 <tcp_receive+0x2c8>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	89db      	ldrh	r3, [r3, #14]
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d91c      	bls.n	8011f6c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011f32:	4b8b      	ldr	r3, [pc, #556]	; (8012160 <tcp_receive+0x2c8>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	89db      	ldrh	r3, [r3, #14]
 8011f38:	b29a      	uxth	r2, r3
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d205      	bcs.n	8011f5c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011f5c:	4b7e      	ldr	r3, [pc, #504]	; (8012158 <tcp_receive+0x2c0>)
 8011f5e:	681a      	ldr	r2, [r3, #0]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011f64:	4b7d      	ldr	r3, [pc, #500]	; (801215c <tcp_receive+0x2c4>)
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011f6c:	4b7b      	ldr	r3, [pc, #492]	; (801215c <tcp_receive+0x2c4>)
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f74:	1ad3      	subs	r3, r2, r3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	dc58      	bgt.n	801202c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011f7a:	4b7a      	ldr	r3, [pc, #488]	; (8012164 <tcp_receive+0x2cc>)
 8011f7c:	881b      	ldrh	r3, [r3, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d14b      	bne.n	801201a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011f8c:	4413      	add	r3, r2
 8011f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d142      	bne.n	801201a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	db3d      	blt.n	801201a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011fa2:	4b6e      	ldr	r3, [pc, #440]	; (801215c <tcp_receive+0x2c4>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d137      	bne.n	801201a <tcp_receive+0x182>
              found_dupack = 1;
 8011faa:	2301      	movs	r3, #1
 8011fac:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fb4:	2bff      	cmp	r3, #255	; 0xff
 8011fb6:	d007      	beq.n	8011fc8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	b2da      	uxtb	r2, r3
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fce:	2b03      	cmp	r3, #3
 8011fd0:	d91b      	bls.n	801200a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fdc:	4413      	add	r3, r2
 8011fde:	b29a      	uxth	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d30a      	bcc.n	8012000 <tcp_receive+0x168>
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ff4:	4413      	add	r3, r2
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011ffe:	e004      	b.n	801200a <tcp_receive+0x172>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012006:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012010:	2b02      	cmp	r3, #2
 8012012:	d902      	bls.n	801201a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f002 fb41 	bl	801469c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801201a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801201c:	2b00      	cmp	r3, #0
 801201e:	f040 8160 	bne.w	80122e2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2200      	movs	r2, #0
 8012026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801202a:	e15a      	b.n	80122e2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801202c:	4b4b      	ldr	r3, [pc, #300]	; (801215c <tcp_receive+0x2c4>)
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	3b01      	subs	r3, #1
 8012038:	2b00      	cmp	r3, #0
 801203a:	f2c0 814d 	blt.w	80122d8 <tcp_receive+0x440>
 801203e:	4b47      	ldr	r3, [pc, #284]	; (801215c <tcp_receive+0x2c4>)
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012046:	1ad3      	subs	r3, r2, r3
 8012048:	2b00      	cmp	r3, #0
 801204a:	f300 8145 	bgt.w	80122d8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	8b5b      	ldrh	r3, [r3, #26]
 8012052:	f003 0304 	and.w	r3, r3, #4
 8012056:	2b00      	cmp	r3, #0
 8012058:	d010      	beq.n	801207c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	8b5b      	ldrh	r3, [r3, #26]
 801205e:	f023 0304 	bic.w	r3, r3, #4
 8012062:	b29a      	uxth	r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2200      	movs	r2, #0
 8012078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2200      	movs	r2, #0
 8012080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801208a:	10db      	asrs	r3, r3, #3
 801208c:	b21b      	sxth	r3, r3
 801208e:	b29a      	uxth	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012096:	b29b      	uxth	r3, r3
 8012098:	4413      	add	r3, r2
 801209a:	b29b      	uxth	r3, r3
 801209c:	b21a      	sxth	r2, r3
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80120a4:	4b2d      	ldr	r3, [pc, #180]	; (801215c <tcp_receive+0x2c4>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2200      	movs	r2, #0
 80120b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80120bc:	4b27      	ldr	r3, [pc, #156]	; (801215c <tcp_receive+0x2c4>)
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	7d1b      	ldrb	r3, [r3, #20]
 80120c8:	2b03      	cmp	r3, #3
 80120ca:	f240 8096 	bls.w	80121fa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80120da:	429a      	cmp	r2, r3
 80120dc:	d244      	bcs.n	8012168 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	8b5b      	ldrh	r3, [r3, #26]
 80120e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d001      	beq.n	80120ee <tcp_receive+0x256>
 80120ea:	2301      	movs	r3, #1
 80120ec:	e000      	b.n	80120f0 <tcp_receive+0x258>
 80120ee:	2302      	movs	r3, #2
 80120f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80120f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120fe:	fb12 f303 	smulbb	r3, r2, r3
 8012102:	b29b      	uxth	r3, r3
 8012104:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012106:	4293      	cmp	r3, r2
 8012108:	bf28      	it	cs
 801210a:	4613      	movcs	r3, r2
 801210c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012114:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012116:	4413      	add	r3, r2
 8012118:	b29a      	uxth	r2, r3
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012120:	429a      	cmp	r2, r3
 8012122:	d309      	bcc.n	8012138 <tcp_receive+0x2a0>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801212a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801212c:	4413      	add	r3, r2
 801212e:	b29a      	uxth	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012136:	e060      	b.n	80121fa <tcp_receive+0x362>
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801213e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012142:	e05a      	b.n	80121fa <tcp_receive+0x362>
 8012144:	08021d98 	.word	0x08021d98
 8012148:	080220c8 	.word	0x080220c8
 801214c:	08021de4 	.word	0x08021de4
 8012150:	080220e4 	.word	0x080220e4
 8012154:	20004adc 	.word	0x20004adc
 8012158:	20004ad0 	.word	0x20004ad0
 801215c:	20004ad4 	.word	0x20004ad4
 8012160:	20004ac0 	.word	0x20004ac0
 8012164:	20004ada 	.word	0x20004ada
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801216e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012170:	4413      	add	r3, r2
 8012172:	b29a      	uxth	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801217a:	429a      	cmp	r2, r3
 801217c:	d309      	bcc.n	8012192 <tcp_receive+0x2fa>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012184:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012186:	4413      	add	r3, r2
 8012188:	b29a      	uxth	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012190:	e004      	b.n	801219c <tcp_receive+0x304>
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d326      	bcc.n	80121fa <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80121b8:	1ad3      	subs	r3, r2, r3
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121cc:	4413      	add	r3, r2
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d30a      	bcc.n	80121f0 <tcp_receive+0x358>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121e4:	4413      	add	r3, r2
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80121ee:	e004      	b.n	80121fa <tcp_receive+0x362>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012202:	4a98      	ldr	r2, [pc, #608]	; (8012464 <tcp_receive+0x5cc>)
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7ff fdcb 	bl	8011da0 <tcp_free_acked_segments>
 801220a:	4602      	mov	r2, r0
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012218:	4a93      	ldr	r2, [pc, #588]	; (8012468 <tcp_receive+0x5d0>)
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7ff fdc0 	bl	8011da0 <tcp_free_acked_segments>
 8012220:	4602      	mov	r2, r0
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801222a:	2b00      	cmp	r3, #0
 801222c:	d104      	bne.n	8012238 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012234:	861a      	strh	r2, [r3, #48]	; 0x30
 8012236:	e002      	b.n	801223e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2200      	movs	r2, #0
 801223c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2200      	movs	r2, #0
 8012242:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012248:	2b00      	cmp	r3, #0
 801224a:	d103      	bne.n	8012254 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2200      	movs	r2, #0
 8012250:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801225a:	4b84      	ldr	r3, [pc, #528]	; (801246c <tcp_receive+0x5d4>)
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	4413      	add	r3, r2
 8012260:	b29a      	uxth	r2, r3
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	8b5b      	ldrh	r3, [r3, #26]
 801226c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012270:	2b00      	cmp	r3, #0
 8012272:	d035      	beq.n	80122e0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012278:	2b00      	cmp	r3, #0
 801227a:	d118      	bne.n	80122ae <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012280:	2b00      	cmp	r3, #0
 8012282:	d00c      	beq.n	801229e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801228c:	68db      	ldr	r3, [r3, #12]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	4618      	mov	r0, r3
 8012292:	f7fa ffe0 	bl	800d256 <lwip_htonl>
 8012296:	4603      	mov	r3, r0
 8012298:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801229a:	2b00      	cmp	r3, #0
 801229c:	dc20      	bgt.n	80122e0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	8b5b      	ldrh	r3, [r3, #26]
 80122a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80122ac:	e018      	b.n	80122e0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7fa ffcb 	bl	800d256 <lwip_htonl>
 80122c0:	4603      	mov	r3, r0
 80122c2:	1ae3      	subs	r3, r4, r3
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	dc0b      	bgt.n	80122e0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	8b5b      	ldrh	r3, [r3, #26]
 80122cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80122d6:	e003      	b.n	80122e0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f002 fbcd 	bl	8014a78 <tcp_send_empty_ack>
 80122de:	e000      	b.n	80122e2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80122e0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d05b      	beq.n	80123a2 <tcp_receive+0x50a>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122ee:	4b60      	ldr	r3, [pc, #384]	; (8012470 <tcp_receive+0x5d8>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	da54      	bge.n	80123a2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80122f8:	4b5e      	ldr	r3, [pc, #376]	; (8012474 <tcp_receive+0x5dc>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	b29a      	uxth	r2, r3
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012302:	b29b      	uxth	r3, r3
 8012304:	1ad3      	subs	r3, r2, r3
 8012306:	b29b      	uxth	r3, r3
 8012308:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801230c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012316:	10db      	asrs	r3, r3, #3
 8012318:	b21b      	sxth	r3, r3
 801231a:	b29b      	uxth	r3, r3
 801231c:	1ad3      	subs	r3, r2, r3
 801231e:	b29b      	uxth	r3, r3
 8012320:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801232a:	b29a      	uxth	r2, r3
 801232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012330:	4413      	add	r3, r2
 8012332:	b29b      	uxth	r3, r3
 8012334:	b21a      	sxth	r2, r3
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801233a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801233e:	2b00      	cmp	r3, #0
 8012340:	da05      	bge.n	801234e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012342:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012346:	425b      	negs	r3, r3
 8012348:	b29b      	uxth	r3, r3
 801234a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801234e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012358:	109b      	asrs	r3, r3, #2
 801235a:	b21b      	sxth	r3, r3
 801235c:	b29b      	uxth	r3, r3
 801235e:	1ad3      	subs	r3, r2, r3
 8012360:	b29b      	uxth	r3, r3
 8012362:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801236c:	b29a      	uxth	r2, r3
 801236e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012372:	4413      	add	r3, r2
 8012374:	b29b      	uxth	r3, r3
 8012376:	b21a      	sxth	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012382:	10db      	asrs	r3, r3, #3
 8012384:	b21b      	sxth	r3, r3
 8012386:	b29a      	uxth	r2, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801238e:	b29b      	uxth	r3, r3
 8012390:	4413      	add	r3, r2
 8012392:	b29b      	uxth	r3, r3
 8012394:	b21a      	sxth	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80123a2:	4b35      	ldr	r3, [pc, #212]	; (8012478 <tcp_receive+0x5e0>)
 80123a4:	881b      	ldrh	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 84e1 	beq.w	8012d6e <tcp_receive+0xed6>
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	7d1b      	ldrb	r3, [r3, #20]
 80123b0:	2b06      	cmp	r3, #6
 80123b2:	f200 84dc 	bhi.w	8012d6e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123ba:	4b30      	ldr	r3, [pc, #192]	; (801247c <tcp_receive+0x5e4>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	3b01      	subs	r3, #1
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	f2c0 808e 	blt.w	80124e4 <tcp_receive+0x64c>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123cc:	4b2a      	ldr	r3, [pc, #168]	; (8012478 <tcp_receive+0x5e0>)
 80123ce:	881b      	ldrh	r3, [r3, #0]
 80123d0:	4619      	mov	r1, r3
 80123d2:	4b2a      	ldr	r3, [pc, #168]	; (801247c <tcp_receive+0x5e4>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	440b      	add	r3, r1
 80123d8:	1ad3      	subs	r3, r2, r3
 80123da:	3301      	adds	r3, #1
 80123dc:	2b00      	cmp	r3, #0
 80123de:	f300 8081 	bgt.w	80124e4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80123e2:	4b27      	ldr	r3, [pc, #156]	; (8012480 <tcp_receive+0x5e8>)
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123ec:	4b23      	ldr	r3, [pc, #140]	; (801247c <tcp_receive+0x5e4>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80123f4:	4b22      	ldr	r3, [pc, #136]	; (8012480 <tcp_receive+0x5e8>)
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d106      	bne.n	801240a <tcp_receive+0x572>
 80123fc:	4b21      	ldr	r3, [pc, #132]	; (8012484 <tcp_receive+0x5ec>)
 80123fe:	f240 5294 	movw	r2, #1428	; 0x594
 8012402:	4921      	ldr	r1, [pc, #132]	; (8012488 <tcp_receive+0x5f0>)
 8012404:	4821      	ldr	r0, [pc, #132]	; (801248c <tcp_receive+0x5f4>)
 8012406:	f006 fa91 	bl	801892c <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012410:	4293      	cmp	r3, r2
 8012412:	d906      	bls.n	8012422 <tcp_receive+0x58a>
 8012414:	4b1b      	ldr	r3, [pc, #108]	; (8012484 <tcp_receive+0x5ec>)
 8012416:	f240 5295 	movw	r2, #1429	; 0x595
 801241a:	491d      	ldr	r1, [pc, #116]	; (8012490 <tcp_receive+0x5f8>)
 801241c:	481b      	ldr	r0, [pc, #108]	; (801248c <tcp_receive+0x5f4>)
 801241e:	f006 fa85 	bl	801892c <printf>
      off = (u16_t)off32;
 8012422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012424:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012428:	4b15      	ldr	r3, [pc, #84]	; (8012480 <tcp_receive+0x5e8>)
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	891b      	ldrh	r3, [r3, #8]
 801242e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012432:	429a      	cmp	r2, r3
 8012434:	d906      	bls.n	8012444 <tcp_receive+0x5ac>
 8012436:	4b13      	ldr	r3, [pc, #76]	; (8012484 <tcp_receive+0x5ec>)
 8012438:	f240 5297 	movw	r2, #1431	; 0x597
 801243c:	4915      	ldr	r1, [pc, #84]	; (8012494 <tcp_receive+0x5fc>)
 801243e:	4813      	ldr	r0, [pc, #76]	; (801248c <tcp_receive+0x5f4>)
 8012440:	f006 fa74 	bl	801892c <printf>
      inseg.len -= off;
 8012444:	4b0e      	ldr	r3, [pc, #56]	; (8012480 <tcp_receive+0x5e8>)
 8012446:	891a      	ldrh	r2, [r3, #8]
 8012448:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801244c:	1ad3      	subs	r3, r2, r3
 801244e:	b29a      	uxth	r2, r3
 8012450:	4b0b      	ldr	r3, [pc, #44]	; (8012480 <tcp_receive+0x5e8>)
 8012452:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012454:	4b0a      	ldr	r3, [pc, #40]	; (8012480 <tcp_receive+0x5e8>)
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	891a      	ldrh	r2, [r3, #8]
 801245a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801245e:	1ad3      	subs	r3, r2, r3
 8012460:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012462:	e029      	b.n	80124b8 <tcp_receive+0x620>
 8012464:	08022100 	.word	0x08022100
 8012468:	08022108 	.word	0x08022108
 801246c:	20004ad8 	.word	0x20004ad8
 8012470:	20004ad4 	.word	0x20004ad4
 8012474:	2000b698 	.word	0x2000b698
 8012478:	20004ada 	.word	0x20004ada
 801247c:	20004ad0 	.word	0x20004ad0
 8012480:	20004ab0 	.word	0x20004ab0
 8012484:	08021d98 	.word	0x08021d98
 8012488:	08022110 	.word	0x08022110
 801248c:	08021de4 	.word	0x08021de4
 8012490:	08022120 	.word	0x08022120
 8012494:	08022130 	.word	0x08022130
        off -= p->len;
 8012498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801249a:	895b      	ldrh	r3, [r3, #10]
 801249c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80124a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80124aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80124ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124ae:	2200      	movs	r2, #0
 80124b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80124b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80124b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124ba:	895b      	ldrh	r3, [r3, #10]
 80124bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d8e9      	bhi.n	8012498 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80124c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124c8:	4619      	mov	r1, r3
 80124ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80124cc:	f7fc f95c 	bl	800e788 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d4:	4a91      	ldr	r2, [pc, #580]	; (801271c <tcp_receive+0x884>)
 80124d6:	6013      	str	r3, [r2, #0]
 80124d8:	4b91      	ldr	r3, [pc, #580]	; (8012720 <tcp_receive+0x888>)
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	4a8f      	ldr	r2, [pc, #572]	; (801271c <tcp_receive+0x884>)
 80124de:	6812      	ldr	r2, [r2, #0]
 80124e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80124e2:	e00d      	b.n	8012500 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80124e4:	4b8d      	ldr	r3, [pc, #564]	; (801271c <tcp_receive+0x884>)
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ec:	1ad3      	subs	r3, r2, r3
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	da06      	bge.n	8012500 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	8b5b      	ldrh	r3, [r3, #26]
 80124f6:	f043 0302 	orr.w	r3, r3, #2
 80124fa:	b29a      	uxth	r2, r3
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012500:	4b86      	ldr	r3, [pc, #536]	; (801271c <tcp_receive+0x884>)
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012508:	1ad3      	subs	r3, r2, r3
 801250a:	2b00      	cmp	r3, #0
 801250c:	f2c0 842a 	blt.w	8012d64 <tcp_receive+0xecc>
 8012510:	4b82      	ldr	r3, [pc, #520]	; (801271c <tcp_receive+0x884>)
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012518:	6879      	ldr	r1, [r7, #4]
 801251a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801251c:	440b      	add	r3, r1
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	3301      	adds	r3, #1
 8012522:	2b00      	cmp	r3, #0
 8012524:	f300 841e 	bgt.w	8012d64 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801252c:	4b7b      	ldr	r3, [pc, #492]	; (801271c <tcp_receive+0x884>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	429a      	cmp	r2, r3
 8012532:	f040 829a 	bne.w	8012a6a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012536:	4b7a      	ldr	r3, [pc, #488]	; (8012720 <tcp_receive+0x888>)
 8012538:	891c      	ldrh	r4, [r3, #8]
 801253a:	4b79      	ldr	r3, [pc, #484]	; (8012720 <tcp_receive+0x888>)
 801253c:	68db      	ldr	r3, [r3, #12]
 801253e:	899b      	ldrh	r3, [r3, #12]
 8012540:	b29b      	uxth	r3, r3
 8012542:	4618      	mov	r0, r3
 8012544:	f7fa fe72 	bl	800d22c <lwip_htons>
 8012548:	4603      	mov	r3, r0
 801254a:	b2db      	uxtb	r3, r3
 801254c:	f003 0303 	and.w	r3, r3, #3
 8012550:	2b00      	cmp	r3, #0
 8012552:	d001      	beq.n	8012558 <tcp_receive+0x6c0>
 8012554:	2301      	movs	r3, #1
 8012556:	e000      	b.n	801255a <tcp_receive+0x6c2>
 8012558:	2300      	movs	r3, #0
 801255a:	4423      	add	r3, r4
 801255c:	b29a      	uxth	r2, r3
 801255e:	4b71      	ldr	r3, [pc, #452]	; (8012724 <tcp_receive+0x88c>)
 8012560:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012566:	4b6f      	ldr	r3, [pc, #444]	; (8012724 <tcp_receive+0x88c>)
 8012568:	881b      	ldrh	r3, [r3, #0]
 801256a:	429a      	cmp	r2, r3
 801256c:	d275      	bcs.n	801265a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801256e:	4b6c      	ldr	r3, [pc, #432]	; (8012720 <tcp_receive+0x888>)
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	899b      	ldrh	r3, [r3, #12]
 8012574:	b29b      	uxth	r3, r3
 8012576:	4618      	mov	r0, r3
 8012578:	f7fa fe58 	bl	800d22c <lwip_htons>
 801257c:	4603      	mov	r3, r0
 801257e:	b2db      	uxtb	r3, r3
 8012580:	f003 0301 	and.w	r3, r3, #1
 8012584:	2b00      	cmp	r3, #0
 8012586:	d01f      	beq.n	80125c8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012588:	4b65      	ldr	r3, [pc, #404]	; (8012720 <tcp_receive+0x888>)
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	899b      	ldrh	r3, [r3, #12]
 801258e:	b29b      	uxth	r3, r3
 8012590:	b21b      	sxth	r3, r3
 8012592:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012596:	b21c      	sxth	r4, r3
 8012598:	4b61      	ldr	r3, [pc, #388]	; (8012720 <tcp_receive+0x888>)
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	899b      	ldrh	r3, [r3, #12]
 801259e:	b29b      	uxth	r3, r3
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fa fe43 	bl	800d22c <lwip_htons>
 80125a6:	4603      	mov	r3, r0
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fa fe3a 	bl	800d22c <lwip_htons>
 80125b8:	4603      	mov	r3, r0
 80125ba:	b21b      	sxth	r3, r3
 80125bc:	4323      	orrs	r3, r4
 80125be:	b21a      	sxth	r2, r3
 80125c0:	4b57      	ldr	r3, [pc, #348]	; (8012720 <tcp_receive+0x888>)
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	b292      	uxth	r2, r2
 80125c6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80125cc:	4b54      	ldr	r3, [pc, #336]	; (8012720 <tcp_receive+0x888>)
 80125ce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80125d0:	4b53      	ldr	r3, [pc, #332]	; (8012720 <tcp_receive+0x888>)
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	899b      	ldrh	r3, [r3, #12]
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	4618      	mov	r0, r3
 80125da:	f7fa fe27 	bl	800d22c <lwip_htons>
 80125de:	4603      	mov	r3, r0
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	f003 0302 	and.w	r3, r3, #2
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d005      	beq.n	80125f6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80125ea:	4b4d      	ldr	r3, [pc, #308]	; (8012720 <tcp_receive+0x888>)
 80125ec:	891b      	ldrh	r3, [r3, #8]
 80125ee:	3b01      	subs	r3, #1
 80125f0:	b29a      	uxth	r2, r3
 80125f2:	4b4b      	ldr	r3, [pc, #300]	; (8012720 <tcp_receive+0x888>)
 80125f4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80125f6:	4b4a      	ldr	r3, [pc, #296]	; (8012720 <tcp_receive+0x888>)
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	4a49      	ldr	r2, [pc, #292]	; (8012720 <tcp_receive+0x888>)
 80125fc:	8912      	ldrh	r2, [r2, #8]
 80125fe:	4611      	mov	r1, r2
 8012600:	4618      	mov	r0, r3
 8012602:	f7fb ffc1 	bl	800e588 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012606:	4b46      	ldr	r3, [pc, #280]	; (8012720 <tcp_receive+0x888>)
 8012608:	891c      	ldrh	r4, [r3, #8]
 801260a:	4b45      	ldr	r3, [pc, #276]	; (8012720 <tcp_receive+0x888>)
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	899b      	ldrh	r3, [r3, #12]
 8012610:	b29b      	uxth	r3, r3
 8012612:	4618      	mov	r0, r3
 8012614:	f7fa fe0a 	bl	800d22c <lwip_htons>
 8012618:	4603      	mov	r3, r0
 801261a:	b2db      	uxtb	r3, r3
 801261c:	f003 0303 	and.w	r3, r3, #3
 8012620:	2b00      	cmp	r3, #0
 8012622:	d001      	beq.n	8012628 <tcp_receive+0x790>
 8012624:	2301      	movs	r3, #1
 8012626:	e000      	b.n	801262a <tcp_receive+0x792>
 8012628:	2300      	movs	r3, #0
 801262a:	4423      	add	r3, r4
 801262c:	b29a      	uxth	r2, r3
 801262e:	4b3d      	ldr	r3, [pc, #244]	; (8012724 <tcp_receive+0x88c>)
 8012630:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012632:	4b3c      	ldr	r3, [pc, #240]	; (8012724 <tcp_receive+0x88c>)
 8012634:	881b      	ldrh	r3, [r3, #0]
 8012636:	461a      	mov	r2, r3
 8012638:	4b38      	ldr	r3, [pc, #224]	; (801271c <tcp_receive+0x884>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	441a      	add	r2, r3
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012642:	6879      	ldr	r1, [r7, #4]
 8012644:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012646:	440b      	add	r3, r1
 8012648:	429a      	cmp	r2, r3
 801264a:	d006      	beq.n	801265a <tcp_receive+0x7c2>
 801264c:	4b36      	ldr	r3, [pc, #216]	; (8012728 <tcp_receive+0x890>)
 801264e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012652:	4936      	ldr	r1, [pc, #216]	; (801272c <tcp_receive+0x894>)
 8012654:	4836      	ldr	r0, [pc, #216]	; (8012730 <tcp_receive+0x898>)
 8012656:	f006 f969 	bl	801892c <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801265e:	2b00      	cmp	r3, #0
 8012660:	f000 80e7 	beq.w	8012832 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012664:	4b2e      	ldr	r3, [pc, #184]	; (8012720 <tcp_receive+0x888>)
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	899b      	ldrh	r3, [r3, #12]
 801266a:	b29b      	uxth	r3, r3
 801266c:	4618      	mov	r0, r3
 801266e:	f7fa fddd 	bl	800d22c <lwip_htons>
 8012672:	4603      	mov	r3, r0
 8012674:	b2db      	uxtb	r3, r3
 8012676:	f003 0301 	and.w	r3, r3, #1
 801267a:	2b00      	cmp	r3, #0
 801267c:	d010      	beq.n	80126a0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801267e:	e00a      	b.n	8012696 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012684:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012690:	68f8      	ldr	r0, [r7, #12]
 8012692:	f7fd fcc8 	bl	8010026 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801269a:	2b00      	cmp	r3, #0
 801269c:	d1f0      	bne.n	8012680 <tcp_receive+0x7e8>
 801269e:	e0c8      	b.n	8012832 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80126a6:	e052      	b.n	801274e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80126a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	899b      	ldrh	r3, [r3, #12]
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fa fdbb 	bl	800d22c <lwip_htons>
 80126b6:	4603      	mov	r3, r0
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	f003 0301 	and.w	r3, r3, #1
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d03d      	beq.n	801273e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80126c2:	4b17      	ldr	r3, [pc, #92]	; (8012720 <tcp_receive+0x888>)
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	899b      	ldrh	r3, [r3, #12]
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fa fdae 	bl	800d22c <lwip_htons>
 80126d0:	4603      	mov	r3, r0
 80126d2:	b2db      	uxtb	r3, r3
 80126d4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d130      	bne.n	801273e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80126dc:	4b10      	ldr	r3, [pc, #64]	; (8012720 <tcp_receive+0x888>)
 80126de:	68db      	ldr	r3, [r3, #12]
 80126e0:	899b      	ldrh	r3, [r3, #12]
 80126e2:	b29c      	uxth	r4, r3
 80126e4:	2001      	movs	r0, #1
 80126e6:	f7fa fda1 	bl	800d22c <lwip_htons>
 80126ea:	4603      	mov	r3, r0
 80126ec:	461a      	mov	r2, r3
 80126ee:	4b0c      	ldr	r3, [pc, #48]	; (8012720 <tcp_receive+0x888>)
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	4322      	orrs	r2, r4
 80126f4:	b292      	uxth	r2, r2
 80126f6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80126f8:	4b09      	ldr	r3, [pc, #36]	; (8012720 <tcp_receive+0x888>)
 80126fa:	891c      	ldrh	r4, [r3, #8]
 80126fc:	4b08      	ldr	r3, [pc, #32]	; (8012720 <tcp_receive+0x888>)
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	899b      	ldrh	r3, [r3, #12]
 8012702:	b29b      	uxth	r3, r3
 8012704:	4618      	mov	r0, r3
 8012706:	f7fa fd91 	bl	800d22c <lwip_htons>
 801270a:	4603      	mov	r3, r0
 801270c:	b2db      	uxtb	r3, r3
 801270e:	f003 0303 	and.w	r3, r3, #3
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00e      	beq.n	8012734 <tcp_receive+0x89c>
 8012716:	2301      	movs	r3, #1
 8012718:	e00d      	b.n	8012736 <tcp_receive+0x89e>
 801271a:	bf00      	nop
 801271c:	20004ad0 	.word	0x20004ad0
 8012720:	20004ab0 	.word	0x20004ab0
 8012724:	20004ada 	.word	0x20004ada
 8012728:	08021d98 	.word	0x08021d98
 801272c:	08022140 	.word	0x08022140
 8012730:	08021de4 	.word	0x08021de4
 8012734:	2300      	movs	r3, #0
 8012736:	4423      	add	r3, r4
 8012738:	b29a      	uxth	r2, r3
 801273a:	4b98      	ldr	r3, [pc, #608]	; (801299c <tcp_receive+0xb04>)
 801273c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801273e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012740:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012748:	6938      	ldr	r0, [r7, #16]
 801274a:	f7fd fc6c 	bl	8010026 <tcp_seg_free>
            while (next &&
 801274e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00e      	beq.n	8012772 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012754:	4b91      	ldr	r3, [pc, #580]	; (801299c <tcp_receive+0xb04>)
 8012756:	881b      	ldrh	r3, [r3, #0]
 8012758:	461a      	mov	r2, r3
 801275a:	4b91      	ldr	r3, [pc, #580]	; (80129a0 <tcp_receive+0xb08>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	441a      	add	r2, r3
 8012760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012762:	68db      	ldr	r3, [r3, #12]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012768:	8909      	ldrh	r1, [r1, #8]
 801276a:	440b      	add	r3, r1
 801276c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801276e:	2b00      	cmp	r3, #0
 8012770:	da9a      	bge.n	80126a8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012774:	2b00      	cmp	r3, #0
 8012776:	d059      	beq.n	801282c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012778:	4b88      	ldr	r3, [pc, #544]	; (801299c <tcp_receive+0xb04>)
 801277a:	881b      	ldrh	r3, [r3, #0]
 801277c:	461a      	mov	r2, r3
 801277e:	4b88      	ldr	r3, [pc, #544]	; (80129a0 <tcp_receive+0xb08>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	441a      	add	r2, r3
 8012784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	685b      	ldr	r3, [r3, #4]
 801278a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801278c:	2b00      	cmp	r3, #0
 801278e:	dd4d      	ble.n	801282c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012792:	68db      	ldr	r3, [r3, #12]
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	b29a      	uxth	r2, r3
 8012798:	4b81      	ldr	r3, [pc, #516]	; (80129a0 <tcp_receive+0xb08>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	b29b      	uxth	r3, r3
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	4b80      	ldr	r3, [pc, #512]	; (80129a4 <tcp_receive+0xb0c>)
 80127a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80127a6:	4b7f      	ldr	r3, [pc, #508]	; (80129a4 <tcp_receive+0xb0c>)
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	899b      	ldrh	r3, [r3, #12]
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fa fd3c 	bl	800d22c <lwip_htons>
 80127b4:	4603      	mov	r3, r0
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	f003 0302 	and.w	r3, r3, #2
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d005      	beq.n	80127cc <tcp_receive+0x934>
                inseg.len -= 1;
 80127c0:	4b78      	ldr	r3, [pc, #480]	; (80129a4 <tcp_receive+0xb0c>)
 80127c2:	891b      	ldrh	r3, [r3, #8]
 80127c4:	3b01      	subs	r3, #1
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	4b76      	ldr	r3, [pc, #472]	; (80129a4 <tcp_receive+0xb0c>)
 80127ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80127cc:	4b75      	ldr	r3, [pc, #468]	; (80129a4 <tcp_receive+0xb0c>)
 80127ce:	685b      	ldr	r3, [r3, #4]
 80127d0:	4a74      	ldr	r2, [pc, #464]	; (80129a4 <tcp_receive+0xb0c>)
 80127d2:	8912      	ldrh	r2, [r2, #8]
 80127d4:	4611      	mov	r1, r2
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fb fed6 	bl	800e588 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80127dc:	4b71      	ldr	r3, [pc, #452]	; (80129a4 <tcp_receive+0xb0c>)
 80127de:	891c      	ldrh	r4, [r3, #8]
 80127e0:	4b70      	ldr	r3, [pc, #448]	; (80129a4 <tcp_receive+0xb0c>)
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	899b      	ldrh	r3, [r3, #12]
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7fa fd1f 	bl	800d22c <lwip_htons>
 80127ee:	4603      	mov	r3, r0
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	f003 0303 	and.w	r3, r3, #3
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d001      	beq.n	80127fe <tcp_receive+0x966>
 80127fa:	2301      	movs	r3, #1
 80127fc:	e000      	b.n	8012800 <tcp_receive+0x968>
 80127fe:	2300      	movs	r3, #0
 8012800:	4423      	add	r3, r4
 8012802:	b29a      	uxth	r2, r3
 8012804:	4b65      	ldr	r3, [pc, #404]	; (801299c <tcp_receive+0xb04>)
 8012806:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012808:	4b64      	ldr	r3, [pc, #400]	; (801299c <tcp_receive+0xb04>)
 801280a:	881b      	ldrh	r3, [r3, #0]
 801280c:	461a      	mov	r2, r3
 801280e:	4b64      	ldr	r3, [pc, #400]	; (80129a0 <tcp_receive+0xb08>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	441a      	add	r2, r3
 8012814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	429a      	cmp	r2, r3
 801281c:	d006      	beq.n	801282c <tcp_receive+0x994>
 801281e:	4b62      	ldr	r3, [pc, #392]	; (80129a8 <tcp_receive+0xb10>)
 8012820:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012824:	4961      	ldr	r1, [pc, #388]	; (80129ac <tcp_receive+0xb14>)
 8012826:	4862      	ldr	r0, [pc, #392]	; (80129b0 <tcp_receive+0xb18>)
 8012828:	f006 f880 	bl	801892c <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012830:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012832:	4b5a      	ldr	r3, [pc, #360]	; (801299c <tcp_receive+0xb04>)
 8012834:	881b      	ldrh	r3, [r3, #0]
 8012836:	461a      	mov	r2, r3
 8012838:	4b59      	ldr	r3, [pc, #356]	; (80129a0 <tcp_receive+0xb08>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	441a      	add	r2, r3
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012846:	4b55      	ldr	r3, [pc, #340]	; (801299c <tcp_receive+0xb04>)
 8012848:	881b      	ldrh	r3, [r3, #0]
 801284a:	429a      	cmp	r2, r3
 801284c:	d206      	bcs.n	801285c <tcp_receive+0x9c4>
 801284e:	4b56      	ldr	r3, [pc, #344]	; (80129a8 <tcp_receive+0xb10>)
 8012850:	f240 6207 	movw	r2, #1543	; 0x607
 8012854:	4957      	ldr	r1, [pc, #348]	; (80129b4 <tcp_receive+0xb1c>)
 8012856:	4856      	ldr	r0, [pc, #344]	; (80129b0 <tcp_receive+0xb18>)
 8012858:	f006 f868 	bl	801892c <printf>
        pcb->rcv_wnd -= tcplen;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012860:	4b4e      	ldr	r3, [pc, #312]	; (801299c <tcp_receive+0xb04>)
 8012862:	881b      	ldrh	r3, [r3, #0]
 8012864:	1ad3      	subs	r3, r2, r3
 8012866:	b29a      	uxth	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f7fc feb5 	bl	800f5dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012872:	4b4c      	ldr	r3, [pc, #304]	; (80129a4 <tcp_receive+0xb0c>)
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	891b      	ldrh	r3, [r3, #8]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d006      	beq.n	801288a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801287c:	4b49      	ldr	r3, [pc, #292]	; (80129a4 <tcp_receive+0xb0c>)
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	4a4d      	ldr	r2, [pc, #308]	; (80129b8 <tcp_receive+0xb20>)
 8012882:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012884:	4b47      	ldr	r3, [pc, #284]	; (80129a4 <tcp_receive+0xb0c>)
 8012886:	2200      	movs	r2, #0
 8012888:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801288a:	4b46      	ldr	r3, [pc, #280]	; (80129a4 <tcp_receive+0xb0c>)
 801288c:	68db      	ldr	r3, [r3, #12]
 801288e:	899b      	ldrh	r3, [r3, #12]
 8012890:	b29b      	uxth	r3, r3
 8012892:	4618      	mov	r0, r3
 8012894:	f7fa fcca 	bl	800d22c <lwip_htons>
 8012898:	4603      	mov	r3, r0
 801289a:	b2db      	uxtb	r3, r3
 801289c:	f003 0301 	and.w	r3, r3, #1
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 80b8 	beq.w	8012a16 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80128a6:	4b45      	ldr	r3, [pc, #276]	; (80129bc <tcp_receive+0xb24>)
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	f043 0320 	orr.w	r3, r3, #32
 80128ae:	b2da      	uxtb	r2, r3
 80128b0:	4b42      	ldr	r3, [pc, #264]	; (80129bc <tcp_receive+0xb24>)
 80128b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80128b4:	e0af      	b.n	8012a16 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	4a36      	ldr	r2, [pc, #216]	; (80129a0 <tcp_receive+0xb08>)
 80128c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	891b      	ldrh	r3, [r3, #8]
 80128cc:	461c      	mov	r4, r3
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	68db      	ldr	r3, [r3, #12]
 80128d2:	899b      	ldrh	r3, [r3, #12]
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fa fca8 	bl	800d22c <lwip_htons>
 80128dc:	4603      	mov	r3, r0
 80128de:	b2db      	uxtb	r3, r3
 80128e0:	f003 0303 	and.w	r3, r3, #3
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d001      	beq.n	80128ec <tcp_receive+0xa54>
 80128e8:	2301      	movs	r3, #1
 80128ea:	e000      	b.n	80128ee <tcp_receive+0xa56>
 80128ec:	2300      	movs	r3, #0
 80128ee:	191a      	adds	r2, r3, r4
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f4:	441a      	add	r2, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128fe:	461c      	mov	r4, r3
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	891b      	ldrh	r3, [r3, #8]
 8012904:	461d      	mov	r5, r3
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	68db      	ldr	r3, [r3, #12]
 801290a:	899b      	ldrh	r3, [r3, #12]
 801290c:	b29b      	uxth	r3, r3
 801290e:	4618      	mov	r0, r3
 8012910:	f7fa fc8c 	bl	800d22c <lwip_htons>
 8012914:	4603      	mov	r3, r0
 8012916:	b2db      	uxtb	r3, r3
 8012918:	f003 0303 	and.w	r3, r3, #3
 801291c:	2b00      	cmp	r3, #0
 801291e:	d001      	beq.n	8012924 <tcp_receive+0xa8c>
 8012920:	2301      	movs	r3, #1
 8012922:	e000      	b.n	8012926 <tcp_receive+0xa8e>
 8012924:	2300      	movs	r3, #0
 8012926:	442b      	add	r3, r5
 8012928:	429c      	cmp	r4, r3
 801292a:	d206      	bcs.n	801293a <tcp_receive+0xaa2>
 801292c:	4b1e      	ldr	r3, [pc, #120]	; (80129a8 <tcp_receive+0xb10>)
 801292e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012932:	4923      	ldr	r1, [pc, #140]	; (80129c0 <tcp_receive+0xb28>)
 8012934:	481e      	ldr	r0, [pc, #120]	; (80129b0 <tcp_receive+0xb18>)
 8012936:	f005 fff9 	bl	801892c <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	891b      	ldrh	r3, [r3, #8]
 801293e:	461c      	mov	r4, r3
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	899b      	ldrh	r3, [r3, #12]
 8012946:	b29b      	uxth	r3, r3
 8012948:	4618      	mov	r0, r3
 801294a:	f7fa fc6f 	bl	800d22c <lwip_htons>
 801294e:	4603      	mov	r3, r0
 8012950:	b2db      	uxtb	r3, r3
 8012952:	f003 0303 	and.w	r3, r3, #3
 8012956:	2b00      	cmp	r3, #0
 8012958:	d001      	beq.n	801295e <tcp_receive+0xac6>
 801295a:	2301      	movs	r3, #1
 801295c:	e000      	b.n	8012960 <tcp_receive+0xac8>
 801295e:	2300      	movs	r3, #0
 8012960:	1919      	adds	r1, r3, r4
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012966:	b28b      	uxth	r3, r1
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	b29a      	uxth	r2, r3
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f7fc fe33 	bl	800f5dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	891b      	ldrh	r3, [r3, #8]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d028      	beq.n	80129d2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012980:	4b0d      	ldr	r3, [pc, #52]	; (80129b8 <tcp_receive+0xb20>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d01d      	beq.n	80129c4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012988:	4b0b      	ldr	r3, [pc, #44]	; (80129b8 <tcp_receive+0xb20>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	4619      	mov	r1, r3
 8012992:	4610      	mov	r0, r2
 8012994:	f7fc f84c 	bl	800ea30 <pbuf_cat>
 8012998:	e018      	b.n	80129cc <tcp_receive+0xb34>
 801299a:	bf00      	nop
 801299c:	20004ada 	.word	0x20004ada
 80129a0:	20004ad0 	.word	0x20004ad0
 80129a4:	20004ab0 	.word	0x20004ab0
 80129a8:	08021d98 	.word	0x08021d98
 80129ac:	08022178 	.word	0x08022178
 80129b0:	08021de4 	.word	0x08021de4
 80129b4:	080221b4 	.word	0x080221b4
 80129b8:	20004ae0 	.word	0x20004ae0
 80129bc:	20004add 	.word	0x20004add
 80129c0:	080221d4 	.word	0x080221d4
            } else {
              recv_data = cseg->p;
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	4a70      	ldr	r2, [pc, #448]	; (8012b8c <tcp_receive+0xcf4>)
 80129ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	2200      	movs	r2, #0
 80129d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	899b      	ldrh	r3, [r3, #12]
 80129d8:	b29b      	uxth	r3, r3
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fa fc26 	bl	800d22c <lwip_htons>
 80129e0:	4603      	mov	r3, r0
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	f003 0301 	and.w	r3, r3, #1
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00d      	beq.n	8012a08 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80129ec:	4b68      	ldr	r3, [pc, #416]	; (8012b90 <tcp_receive+0xcf8>)
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	f043 0320 	orr.w	r3, r3, #32
 80129f4:	b2da      	uxtb	r2, r3
 80129f6:	4b66      	ldr	r3, [pc, #408]	; (8012b90 <tcp_receive+0xcf8>)
 80129f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	7d1b      	ldrb	r3, [r3, #20]
 80129fe:	2b04      	cmp	r3, #4
 8012a00:	d102      	bne.n	8012a08 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2207      	movs	r2, #7
 8012a06:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012a10:	68b8      	ldr	r0, [r7, #8]
 8012a12:	f7fd fb08 	bl	8010026 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d008      	beq.n	8012a30 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a22:	68db      	ldr	r3, [r3, #12]
 8012a24:	685a      	ldr	r2, [r3, #4]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	f43f af43 	beq.w	80128b6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	8b5b      	ldrh	r3, [r3, #26]
 8012a34:	f003 0301 	and.w	r3, r3, #1
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d00e      	beq.n	8012a5a <tcp_receive+0xbc2>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	8b5b      	ldrh	r3, [r3, #26]
 8012a40:	f023 0301 	bic.w	r3, r3, #1
 8012a44:	b29a      	uxth	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	835a      	strh	r2, [r3, #26]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	8b5b      	ldrh	r3, [r3, #26]
 8012a4e:	f043 0302 	orr.w	r3, r3, #2
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012a58:	e188      	b.n	8012d6c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	8b5b      	ldrh	r3, [r3, #26]
 8012a5e:	f043 0301 	orr.w	r3, r3, #1
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012a68:	e180      	b.n	8012d6c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d106      	bne.n	8012a80 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012a72:	4848      	ldr	r0, [pc, #288]	; (8012b94 <tcp_receive+0xcfc>)
 8012a74:	f7fd faf0 	bl	8010058 <tcp_seg_copy>
 8012a78:	4602      	mov	r2, r0
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	675a      	str	r2, [r3, #116]	; 0x74
 8012a7e:	e16d      	b.n	8012d5c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012a80:	2300      	movs	r3, #0
 8012a82:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a8a:	e157      	b.n	8012d3c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	685a      	ldr	r2, [r3, #4]
 8012a92:	4b41      	ldr	r3, [pc, #260]	; (8012b98 <tcp_receive+0xd00>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d11d      	bne.n	8012ad6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012a9a:	4b3e      	ldr	r3, [pc, #248]	; (8012b94 <tcp_receive+0xcfc>)
 8012a9c:	891a      	ldrh	r2, [r3, #8]
 8012a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa0:	891b      	ldrh	r3, [r3, #8]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	f240 814f 	bls.w	8012d46 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012aa8:	483a      	ldr	r0, [pc, #232]	; (8012b94 <tcp_receive+0xcfc>)
 8012aaa:	f7fd fad5 	bl	8010058 <tcp_seg_copy>
 8012aae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	f000 8149 	beq.w	8012d4a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d003      	beq.n	8012ac6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ac0:	697a      	ldr	r2, [r7, #20]
 8012ac2:	601a      	str	r2, [r3, #0]
 8012ac4:	e002      	b.n	8012acc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	697a      	ldr	r2, [r7, #20]
 8012aca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ace:	6978      	ldr	r0, [r7, #20]
 8012ad0:	f7ff f8de 	bl	8011c90 <tcp_oos_insert_segment>
                }
                break;
 8012ad4:	e139      	b.n	8012d4a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d117      	bne.n	8012b0c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012adc:	4b2e      	ldr	r3, [pc, #184]	; (8012b98 <tcp_receive+0xd00>)
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	1ad3      	subs	r3, r2, r3
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	da57      	bge.n	8012b9c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012aec:	4829      	ldr	r0, [pc, #164]	; (8012b94 <tcp_receive+0xcfc>)
 8012aee:	f7fd fab3 	bl	8010058 <tcp_seg_copy>
 8012af2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012af4:	69bb      	ldr	r3, [r7, #24]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f000 8129 	beq.w	8012d4e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	69ba      	ldr	r2, [r7, #24]
 8012b00:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012b02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b04:	69b8      	ldr	r0, [r7, #24]
 8012b06:	f7ff f8c3 	bl	8011c90 <tcp_oos_insert_segment>
                  }
                  break;
 8012b0a:	e120      	b.n	8012d4e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012b0c:	4b22      	ldr	r3, [pc, #136]	; (8012b98 <tcp_receive+0xd00>)
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	1ad3      	subs	r3, r2, r3
 8012b18:	3b01      	subs	r3, #1
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	db3e      	blt.n	8012b9c <tcp_receive+0xd04>
 8012b1e:	4b1e      	ldr	r3, [pc, #120]	; (8012b98 <tcp_receive+0xd00>)
 8012b20:	681a      	ldr	r2, [r3, #0]
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	1ad3      	subs	r3, r2, r3
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	dc35      	bgt.n	8012b9c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012b30:	4818      	ldr	r0, [pc, #96]	; (8012b94 <tcp_receive+0xcfc>)
 8012b32:	f7fd fa91 	bl	8010058 <tcp_seg_copy>
 8012b36:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	f000 8109 	beq.w	8012d52 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b48:	8912      	ldrh	r2, [r2, #8]
 8012b4a:	441a      	add	r2, r3
 8012b4c:	4b12      	ldr	r3, [pc, #72]	; (8012b98 <tcp_receive+0xd00>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	1ad3      	subs	r3, r2, r3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	dd12      	ble.n	8012b7c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012b56:	4b10      	ldr	r3, [pc, #64]	; (8012b98 <tcp_receive+0xd00>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	1ad3      	subs	r3, r2, r3
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b6a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b6e:	685a      	ldr	r2, [r3, #4]
 8012b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b72:	891b      	ldrh	r3, [r3, #8]
 8012b74:	4619      	mov	r1, r3
 8012b76:	4610      	mov	r0, r2
 8012b78:	f7fb fd06 	bl	800e588 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b7e:	69fa      	ldr	r2, [r7, #28]
 8012b80:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012b82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b84:	69f8      	ldr	r0, [r7, #28]
 8012b86:	f7ff f883 	bl	8011c90 <tcp_oos_insert_segment>
                  }
                  break;
 8012b8a:	e0e2      	b.n	8012d52 <tcp_receive+0xeba>
 8012b8c:	20004ae0 	.word	0x20004ae0
 8012b90:	20004add 	.word	0x20004add
 8012b94:	20004ab0 	.word	0x20004ab0
 8012b98:	20004ad0 	.word	0x20004ad0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f040 80c6 	bne.w	8012d36 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012baa:	4b80      	ldr	r3, [pc, #512]	; (8012dac <tcp_receive+0xf14>)
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb0:	68db      	ldr	r3, [r3, #12]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	f340 80bd 	ble.w	8012d36 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbe:	68db      	ldr	r3, [r3, #12]
 8012bc0:	899b      	ldrh	r3, [r3, #12]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fa fb31 	bl	800d22c <lwip_htons>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	f003 0301 	and.w	r3, r3, #1
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	f040 80bf 	bne.w	8012d56 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012bd8:	4875      	ldr	r0, [pc, #468]	; (8012db0 <tcp_receive+0xf18>)
 8012bda:	f7fd fa3d 	bl	8010058 <tcp_seg_copy>
 8012bde:	4602      	mov	r2, r0
 8012be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	f000 80b6 	beq.w	8012d5a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bf6:	8912      	ldrh	r2, [r2, #8]
 8012bf8:	441a      	add	r2, r3
 8012bfa:	4b6c      	ldr	r3, [pc, #432]	; (8012dac <tcp_receive+0xf14>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	1ad3      	subs	r3, r2, r3
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	dd12      	ble.n	8012c2a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012c04:	4b69      	ldr	r3, [pc, #420]	; (8012dac <tcp_receive+0xf14>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0c:	68db      	ldr	r3, [r3, #12]
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	b29b      	uxth	r3, r3
 8012c12:	1ad3      	subs	r3, r2, r3
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1c:	685a      	ldr	r2, [r3, #4]
 8012c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c20:	891b      	ldrh	r3, [r3, #8]
 8012c22:	4619      	mov	r1, r3
 8012c24:	4610      	mov	r0, r2
 8012c26:	f7fb fcaf 	bl	800e588 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012c2a:	4b62      	ldr	r3, [pc, #392]	; (8012db4 <tcp_receive+0xf1c>)
 8012c2c:	881b      	ldrh	r3, [r3, #0]
 8012c2e:	461a      	mov	r2, r3
 8012c30:	4b5e      	ldr	r3, [pc, #376]	; (8012dac <tcp_receive+0xf14>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	441a      	add	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c3a:	6879      	ldr	r1, [r7, #4]
 8012c3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c3e:	440b      	add	r3, r1
 8012c40:	1ad3      	subs	r3, r2, r3
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	f340 8089 	ble.w	8012d5a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	899b      	ldrh	r3, [r3, #12]
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7fa faea 	bl	800d22c <lwip_htons>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	f003 0301 	and.w	r3, r3, #1
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d022      	beq.n	8012caa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	899b      	ldrh	r3, [r3, #12]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	b21b      	sxth	r3, r3
 8012c70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c74:	b21c      	sxth	r4, r3
 8012c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	899b      	ldrh	r3, [r3, #12]
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7fa fad3 	bl	800d22c <lwip_htons>
 8012c86:	4603      	mov	r3, r0
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fa faca 	bl	800d22c <lwip_htons>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	b21b      	sxth	r3, r3
 8012c9c:	4323      	orrs	r3, r4
 8012c9e:	b21a      	sxth	r2, r3
 8012ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	68db      	ldr	r3, [r3, #12]
 8012ca6:	b292      	uxth	r2, r2
 8012ca8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cae:	b29a      	uxth	r2, r3
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cb4:	4413      	add	r3, r2
 8012cb6:	b299      	uxth	r1, r3
 8012cb8:	4b3c      	ldr	r3, [pc, #240]	; (8012dac <tcp_receive+0xf14>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	1a8a      	subs	r2, r1, r2
 8012cc4:	b292      	uxth	r2, r2
 8012cc6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	685a      	ldr	r2, [r3, #4]
 8012cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	891b      	ldrh	r3, [r3, #8]
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	4610      	mov	r0, r2
 8012cd8:	f7fb fc56 	bl	800e588 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	891c      	ldrh	r4, [r3, #8]
 8012ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	68db      	ldr	r3, [r3, #12]
 8012ce8:	899b      	ldrh	r3, [r3, #12]
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7fa fa9d 	bl	800d22c <lwip_htons>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	f003 0303 	and.w	r3, r3, #3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d001      	beq.n	8012d02 <tcp_receive+0xe6a>
 8012cfe:	2301      	movs	r3, #1
 8012d00:	e000      	b.n	8012d04 <tcp_receive+0xe6c>
 8012d02:	2300      	movs	r3, #0
 8012d04:	4423      	add	r3, r4
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	4b2a      	ldr	r3, [pc, #168]	; (8012db4 <tcp_receive+0xf1c>)
 8012d0a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012d0c:	4b29      	ldr	r3, [pc, #164]	; (8012db4 <tcp_receive+0xf1c>)
 8012d0e:	881b      	ldrh	r3, [r3, #0]
 8012d10:	461a      	mov	r2, r3
 8012d12:	4b26      	ldr	r3, [pc, #152]	; (8012dac <tcp_receive+0xf14>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	441a      	add	r2, r3
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d1c:	6879      	ldr	r1, [r7, #4]
 8012d1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d20:	440b      	add	r3, r1
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d019      	beq.n	8012d5a <tcp_receive+0xec2>
 8012d26:	4b24      	ldr	r3, [pc, #144]	; (8012db8 <tcp_receive+0xf20>)
 8012d28:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012d2c:	4923      	ldr	r1, [pc, #140]	; (8012dbc <tcp_receive+0xf24>)
 8012d2e:	4824      	ldr	r0, [pc, #144]	; (8012dc0 <tcp_receive+0xf28>)
 8012d30:	f005 fdfc 	bl	801892c <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012d34:	e011      	b.n	8012d5a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	f47f aea4 	bne.w	8012a8c <tcp_receive+0xbf4>
 8012d44:	e00a      	b.n	8012d5c <tcp_receive+0xec4>
                break;
 8012d46:	bf00      	nop
 8012d48:	e008      	b.n	8012d5c <tcp_receive+0xec4>
                break;
 8012d4a:	bf00      	nop
 8012d4c:	e006      	b.n	8012d5c <tcp_receive+0xec4>
                  break;
 8012d4e:	bf00      	nop
 8012d50:	e004      	b.n	8012d5c <tcp_receive+0xec4>
                  break;
 8012d52:	bf00      	nop
 8012d54:	e002      	b.n	8012d5c <tcp_receive+0xec4>
                  break;
 8012d56:	bf00      	nop
 8012d58:	e000      	b.n	8012d5c <tcp_receive+0xec4>
                break;
 8012d5a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	f001 fe8b 	bl	8014a78 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012d62:	e003      	b.n	8012d6c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f001 fe87 	bl	8014a78 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012d6a:	e01a      	b.n	8012da2 <tcp_receive+0xf0a>
 8012d6c:	e019      	b.n	8012da2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012d6e:	4b0f      	ldr	r3, [pc, #60]	; (8012dac <tcp_receive+0xf14>)
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d76:	1ad3      	subs	r3, r2, r3
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	db0a      	blt.n	8012d92 <tcp_receive+0xefa>
 8012d7c:	4b0b      	ldr	r3, [pc, #44]	; (8012dac <tcp_receive+0xf14>)
 8012d7e:	681a      	ldr	r2, [r3, #0]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d84:	6879      	ldr	r1, [r7, #4]
 8012d86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d88:	440b      	add	r3, r1
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	dd07      	ble.n	8012da2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	8b5b      	ldrh	r3, [r3, #26]
 8012d96:	f043 0302 	orr.w	r3, r3, #2
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012da0:	e7ff      	b.n	8012da2 <tcp_receive+0xf0a>
 8012da2:	bf00      	nop
 8012da4:	3750      	adds	r7, #80	; 0x50
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bdb0      	pop	{r4, r5, r7, pc}
 8012daa:	bf00      	nop
 8012dac:	20004ad0 	.word	0x20004ad0
 8012db0:	20004ab0 	.word	0x20004ab0
 8012db4:	20004ada 	.word	0x20004ada
 8012db8:	08021d98 	.word	0x08021d98
 8012dbc:	08022140 	.word	0x08022140
 8012dc0:	08021de4 	.word	0x08021de4

08012dc4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b083      	sub	sp, #12
 8012dc8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012dca:	4b15      	ldr	r3, [pc, #84]	; (8012e20 <tcp_get_next_optbyte+0x5c>)
 8012dcc:	881b      	ldrh	r3, [r3, #0]
 8012dce:	1c5a      	adds	r2, r3, #1
 8012dd0:	b291      	uxth	r1, r2
 8012dd2:	4a13      	ldr	r2, [pc, #76]	; (8012e20 <tcp_get_next_optbyte+0x5c>)
 8012dd4:	8011      	strh	r1, [r2, #0]
 8012dd6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012dd8:	4b12      	ldr	r3, [pc, #72]	; (8012e24 <tcp_get_next_optbyte+0x60>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d004      	beq.n	8012dea <tcp_get_next_optbyte+0x26>
 8012de0:	4b11      	ldr	r3, [pc, #68]	; (8012e28 <tcp_get_next_optbyte+0x64>)
 8012de2:	881b      	ldrh	r3, [r3, #0]
 8012de4:	88fa      	ldrh	r2, [r7, #6]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d208      	bcs.n	8012dfc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012dea:	4b10      	ldr	r3, [pc, #64]	; (8012e2c <tcp_get_next_optbyte+0x68>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	3314      	adds	r3, #20
 8012df0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012df2:	88fb      	ldrh	r3, [r7, #6]
 8012df4:	683a      	ldr	r2, [r7, #0]
 8012df6:	4413      	add	r3, r2
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	e00b      	b.n	8012e14 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012dfc:	88fb      	ldrh	r3, [r7, #6]
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	4b09      	ldr	r3, [pc, #36]	; (8012e28 <tcp_get_next_optbyte+0x64>)
 8012e02:	881b      	ldrh	r3, [r3, #0]
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	1ad3      	subs	r3, r2, r3
 8012e08:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012e0a:	4b06      	ldr	r3, [pc, #24]	; (8012e24 <tcp_get_next_optbyte+0x60>)
 8012e0c:	681a      	ldr	r2, [r3, #0]
 8012e0e:	797b      	ldrb	r3, [r7, #5]
 8012e10:	4413      	add	r3, r2
 8012e12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr
 8012e20:	20004acc 	.word	0x20004acc
 8012e24:	20004ac8 	.word	0x20004ac8
 8012e28:	20004ac6 	.word	0x20004ac6
 8012e2c:	20004ac0 	.word	0x20004ac0

08012e30 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b084      	sub	sp, #16
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d106      	bne.n	8012e4c <tcp_parseopt+0x1c>
 8012e3e:	4b32      	ldr	r3, [pc, #200]	; (8012f08 <tcp_parseopt+0xd8>)
 8012e40:	f240 727d 	movw	r2, #1917	; 0x77d
 8012e44:	4931      	ldr	r1, [pc, #196]	; (8012f0c <tcp_parseopt+0xdc>)
 8012e46:	4832      	ldr	r0, [pc, #200]	; (8012f10 <tcp_parseopt+0xe0>)
 8012e48:	f005 fd70 	bl	801892c <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012e4c:	4b31      	ldr	r3, [pc, #196]	; (8012f14 <tcp_parseopt+0xe4>)
 8012e4e:	881b      	ldrh	r3, [r3, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d055      	beq.n	8012f00 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e54:	4b30      	ldr	r3, [pc, #192]	; (8012f18 <tcp_parseopt+0xe8>)
 8012e56:	2200      	movs	r2, #0
 8012e58:	801a      	strh	r2, [r3, #0]
 8012e5a:	e045      	b.n	8012ee8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012e5c:	f7ff ffb2 	bl	8012dc4 <tcp_get_next_optbyte>
 8012e60:	4603      	mov	r3, r0
 8012e62:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012e64:	7bfb      	ldrb	r3, [r7, #15]
 8012e66:	2b02      	cmp	r3, #2
 8012e68:	d006      	beq.n	8012e78 <tcp_parseopt+0x48>
 8012e6a:	2b02      	cmp	r3, #2
 8012e6c:	dc2b      	bgt.n	8012ec6 <tcp_parseopt+0x96>
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d041      	beq.n	8012ef6 <tcp_parseopt+0xc6>
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d127      	bne.n	8012ec6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012e76:	e037      	b.n	8012ee8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012e78:	f7ff ffa4 	bl	8012dc4 <tcp_get_next_optbyte>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	2b04      	cmp	r3, #4
 8012e80:	d13b      	bne.n	8012efa <tcp_parseopt+0xca>
 8012e82:	4b25      	ldr	r3, [pc, #148]	; (8012f18 <tcp_parseopt+0xe8>)
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	3301      	adds	r3, #1
 8012e88:	4a22      	ldr	r2, [pc, #136]	; (8012f14 <tcp_parseopt+0xe4>)
 8012e8a:	8812      	ldrh	r2, [r2, #0]
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	da34      	bge.n	8012efa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012e90:	f7ff ff98 	bl	8012dc4 <tcp_get_next_optbyte>
 8012e94:	4603      	mov	r3, r0
 8012e96:	b29b      	uxth	r3, r3
 8012e98:	021b      	lsls	r3, r3, #8
 8012e9a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012e9c:	f7ff ff92 	bl	8012dc4 <tcp_get_next_optbyte>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	89bb      	ldrh	r3, [r7, #12]
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012eaa:	89bb      	ldrh	r3, [r7, #12]
 8012eac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012eb0:	d804      	bhi.n	8012ebc <tcp_parseopt+0x8c>
 8012eb2:	89bb      	ldrh	r3, [r7, #12]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d001      	beq.n	8012ebc <tcp_parseopt+0x8c>
 8012eb8:	89ba      	ldrh	r2, [r7, #12]
 8012eba:	e001      	b.n	8012ec0 <tcp_parseopt+0x90>
 8012ebc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012ec4:	e010      	b.n	8012ee8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012ec6:	f7ff ff7d 	bl	8012dc4 <tcp_get_next_optbyte>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012ece:	7afb      	ldrb	r3, [r7, #11]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d914      	bls.n	8012efe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012ed4:	7afb      	ldrb	r3, [r7, #11]
 8012ed6:	b29a      	uxth	r2, r3
 8012ed8:	4b0f      	ldr	r3, [pc, #60]	; (8012f18 <tcp_parseopt+0xe8>)
 8012eda:	881b      	ldrh	r3, [r3, #0]
 8012edc:	4413      	add	r3, r2
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	3b02      	subs	r3, #2
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	4b0c      	ldr	r3, [pc, #48]	; (8012f18 <tcp_parseopt+0xe8>)
 8012ee6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012ee8:	4b0b      	ldr	r3, [pc, #44]	; (8012f18 <tcp_parseopt+0xe8>)
 8012eea:	881a      	ldrh	r2, [r3, #0]
 8012eec:	4b09      	ldr	r3, [pc, #36]	; (8012f14 <tcp_parseopt+0xe4>)
 8012eee:	881b      	ldrh	r3, [r3, #0]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d3b3      	bcc.n	8012e5c <tcp_parseopt+0x2c>
 8012ef4:	e004      	b.n	8012f00 <tcp_parseopt+0xd0>
          return;
 8012ef6:	bf00      	nop
 8012ef8:	e002      	b.n	8012f00 <tcp_parseopt+0xd0>
            return;
 8012efa:	bf00      	nop
 8012efc:	e000      	b.n	8012f00 <tcp_parseopt+0xd0>
            return;
 8012efe:	bf00      	nop
      }
    }
  }
}
 8012f00:	3710      	adds	r7, #16
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	08021d98 	.word	0x08021d98
 8012f0c:	080221fc 	.word	0x080221fc
 8012f10:	08021de4 	.word	0x08021de4
 8012f14:	20004ac4 	.word	0x20004ac4
 8012f18:	20004acc 	.word	0x20004acc

08012f1c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012f20:	4b05      	ldr	r3, [pc, #20]	; (8012f38 <tcp_trigger_input_pcb_close+0x1c>)
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	f043 0310 	orr.w	r3, r3, #16
 8012f28:	b2da      	uxtb	r2, r3
 8012f2a:	4b03      	ldr	r3, [pc, #12]	; (8012f38 <tcp_trigger_input_pcb_close+0x1c>)
 8012f2c:	701a      	strb	r2, [r3, #0]
}
 8012f2e:	bf00      	nop
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr
 8012f38:	20004add 	.word	0x20004add

08012f3c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	60b9      	str	r1, [r7, #8]
 8012f46:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d00a      	beq.n	8012f64 <tcp_route+0x28>
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	7a1b      	ldrb	r3, [r3, #8]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d006      	beq.n	8012f64 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	7a1b      	ldrb	r3, [r3, #8]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7fb f90c 	bl	800e178 <netif_get_by_index>
 8012f60:	4603      	mov	r3, r0
 8012f62:	e003      	b.n	8012f6c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f003 fe35 	bl	8016bd4 <ip4_route>
 8012f6a:	4603      	mov	r3, r0
  }
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3710      	adds	r7, #16
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}

08012f74 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012f74:	b590      	push	{r4, r7, lr}
 8012f76:	b087      	sub	sp, #28
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	603b      	str	r3, [r7, #0]
 8012f80:	4613      	mov	r3, r2
 8012f82:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d105      	bne.n	8012f96 <tcp_create_segment+0x22>
 8012f8a:	4b44      	ldr	r3, [pc, #272]	; (801309c <tcp_create_segment+0x128>)
 8012f8c:	22a3      	movs	r2, #163	; 0xa3
 8012f8e:	4944      	ldr	r1, [pc, #272]	; (80130a0 <tcp_create_segment+0x12c>)
 8012f90:	4844      	ldr	r0, [pc, #272]	; (80130a4 <tcp_create_segment+0x130>)
 8012f92:	f005 fccb 	bl	801892c <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d105      	bne.n	8012fa8 <tcp_create_segment+0x34>
 8012f9c:	4b3f      	ldr	r3, [pc, #252]	; (801309c <tcp_create_segment+0x128>)
 8012f9e:	22a4      	movs	r2, #164	; 0xa4
 8012fa0:	4941      	ldr	r1, [pc, #260]	; (80130a8 <tcp_create_segment+0x134>)
 8012fa2:	4840      	ldr	r0, [pc, #256]	; (80130a4 <tcp_create_segment+0x130>)
 8012fa4:	f005 fcc2 	bl	801892c <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012fa8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	f003 0304 	and.w	r3, r3, #4
 8012fb4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012fb6:	2003      	movs	r0, #3
 8012fb8:	f7fa fdee 	bl	800db98 <memp_malloc>
 8012fbc:	6138      	str	r0, [r7, #16]
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d104      	bne.n	8012fce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012fc4:	68b8      	ldr	r0, [r7, #8]
 8012fc6:	f7fb fc65 	bl	800e894 <pbuf_free>
    return NULL;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	e061      	b.n	8013092 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012fd4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	68ba      	ldr	r2, [r7, #8]
 8012fe0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	891a      	ldrh	r2, [r3, #8]
 8012fe6:	7dfb      	ldrb	r3, [r7, #23]
 8012fe8:	b29b      	uxth	r3, r3
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d205      	bcs.n	8012ffa <tcp_create_segment+0x86>
 8012fee:	4b2b      	ldr	r3, [pc, #172]	; (801309c <tcp_create_segment+0x128>)
 8012ff0:	22b0      	movs	r2, #176	; 0xb0
 8012ff2:	492e      	ldr	r1, [pc, #184]	; (80130ac <tcp_create_segment+0x138>)
 8012ff4:	482b      	ldr	r0, [pc, #172]	; (80130a4 <tcp_create_segment+0x130>)
 8012ff6:	f005 fc99 	bl	801892c <printf>
  seg->len = p->tot_len - optlen;
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	891a      	ldrh	r2, [r3, #8]
 8012ffe:	7dfb      	ldrb	r3, [r7, #23]
 8013000:	b29b      	uxth	r3, r3
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	b29a      	uxth	r2, r3
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801300a:	2114      	movs	r1, #20
 801300c:	68b8      	ldr	r0, [r7, #8]
 801300e:	f7fb fbab 	bl	800e768 <pbuf_add_header>
 8013012:	4603      	mov	r3, r0
 8013014:	2b00      	cmp	r3, #0
 8013016:	d004      	beq.n	8013022 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013018:	6938      	ldr	r0, [r7, #16]
 801301a:	f7fd f804 	bl	8010026 <tcp_seg_free>
    return NULL;
 801301e:	2300      	movs	r3, #0
 8013020:	e037      	b.n	8013092 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	685a      	ldr	r2, [r3, #4]
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	8ada      	ldrh	r2, [r3, #22]
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	68dc      	ldr	r4, [r3, #12]
 8013034:	4610      	mov	r0, r2
 8013036:	f7fa f8f9 	bl	800d22c <lwip_htons>
 801303a:	4603      	mov	r3, r0
 801303c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	8b1a      	ldrh	r2, [r3, #24]
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	68dc      	ldr	r4, [r3, #12]
 8013046:	4610      	mov	r0, r2
 8013048:	f7fa f8f0 	bl	800d22c <lwip_htons>
 801304c:	4603      	mov	r3, r0
 801304e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	68dc      	ldr	r4, [r3, #12]
 8013054:	6838      	ldr	r0, [r7, #0]
 8013056:	f7fa f8fe 	bl	800d256 <lwip_htonl>
 801305a:	4603      	mov	r3, r0
 801305c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801305e:	7dfb      	ldrb	r3, [r7, #23]
 8013060:	089b      	lsrs	r3, r3, #2
 8013062:	b2db      	uxtb	r3, r3
 8013064:	b29b      	uxth	r3, r3
 8013066:	3305      	adds	r3, #5
 8013068:	b29b      	uxth	r3, r3
 801306a:	031b      	lsls	r3, r3, #12
 801306c:	b29a      	uxth	r2, r3
 801306e:	79fb      	ldrb	r3, [r7, #7]
 8013070:	b29b      	uxth	r3, r3
 8013072:	4313      	orrs	r3, r2
 8013074:	b29a      	uxth	r2, r3
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	68dc      	ldr	r4, [r3, #12]
 801307a:	4610      	mov	r0, r2
 801307c:	f7fa f8d6 	bl	800d22c <lwip_htons>
 8013080:	4603      	mov	r3, r0
 8013082:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	2200      	movs	r2, #0
 801308a:	749a      	strb	r2, [r3, #18]
 801308c:	2200      	movs	r2, #0
 801308e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013090:	693b      	ldr	r3, [r7, #16]
}
 8013092:	4618      	mov	r0, r3
 8013094:	371c      	adds	r7, #28
 8013096:	46bd      	mov	sp, r7
 8013098:	bd90      	pop	{r4, r7, pc}
 801309a:	bf00      	nop
 801309c:	08022218 	.word	0x08022218
 80130a0:	0802224c 	.word	0x0802224c
 80130a4:	0802226c 	.word	0x0802226c
 80130a8:	08022294 	.word	0x08022294
 80130ac:	080222b8 	.word	0x080222b8

080130b0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b086      	sub	sp, #24
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	607b      	str	r3, [r7, #4]
 80130b8:	4603      	mov	r3, r0
 80130ba:	73fb      	strb	r3, [r7, #15]
 80130bc:	460b      	mov	r3, r1
 80130be:	81bb      	strh	r3, [r7, #12]
 80130c0:	4613      	mov	r3, r2
 80130c2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80130c4:	89bb      	ldrh	r3, [r7, #12]
 80130c6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d105      	bne.n	80130da <tcp_pbuf_prealloc+0x2a>
 80130ce:	4b30      	ldr	r3, [pc, #192]	; (8013190 <tcp_pbuf_prealloc+0xe0>)
 80130d0:	22e8      	movs	r2, #232	; 0xe8
 80130d2:	4930      	ldr	r1, [pc, #192]	; (8013194 <tcp_pbuf_prealloc+0xe4>)
 80130d4:	4830      	ldr	r0, [pc, #192]	; (8013198 <tcp_pbuf_prealloc+0xe8>)
 80130d6:	f005 fc29 	bl	801892c <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80130da:	6a3b      	ldr	r3, [r7, #32]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d105      	bne.n	80130ec <tcp_pbuf_prealloc+0x3c>
 80130e0:	4b2b      	ldr	r3, [pc, #172]	; (8013190 <tcp_pbuf_prealloc+0xe0>)
 80130e2:	22e9      	movs	r2, #233	; 0xe9
 80130e4:	492d      	ldr	r1, [pc, #180]	; (801319c <tcp_pbuf_prealloc+0xec>)
 80130e6:	482c      	ldr	r0, [pc, #176]	; (8013198 <tcp_pbuf_prealloc+0xe8>)
 80130e8:	f005 fc20 	bl	801892c <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80130ec:	89ba      	ldrh	r2, [r7, #12]
 80130ee:	897b      	ldrh	r3, [r7, #10]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d221      	bcs.n	8013138 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80130f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80130f8:	f003 0302 	and.w	r3, r3, #2
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d111      	bne.n	8013124 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013100:	6a3b      	ldr	r3, [r7, #32]
 8013102:	8b5b      	ldrh	r3, [r3, #26]
 8013104:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013108:	2b00      	cmp	r3, #0
 801310a:	d115      	bne.n	8013138 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801310c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013110:	2b00      	cmp	r3, #0
 8013112:	d007      	beq.n	8013124 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013114:	6a3b      	ldr	r3, [r7, #32]
 8013116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013118:	2b00      	cmp	r3, #0
 801311a:	d103      	bne.n	8013124 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801311c:	6a3b      	ldr	r3, [r7, #32]
 801311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013120:	2b00      	cmp	r3, #0
 8013122:	d009      	beq.n	8013138 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013124:	89bb      	ldrh	r3, [r7, #12]
 8013126:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801312a:	f023 0203 	bic.w	r2, r3, #3
 801312e:	897b      	ldrh	r3, [r7, #10]
 8013130:	4293      	cmp	r3, r2
 8013132:	bf28      	it	cs
 8013134:	4613      	movcs	r3, r2
 8013136:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013138:	8af9      	ldrh	r1, [r7, #22]
 801313a:	7bfb      	ldrb	r3, [r7, #15]
 801313c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013140:	4618      	mov	r0, r3
 8013142:	f7fb f8c3 	bl	800e2cc <pbuf_alloc>
 8013146:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d101      	bne.n	8013152 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801314e:	2300      	movs	r3, #0
 8013150:	e019      	b.n	8013186 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d006      	beq.n	8013168 <tcp_pbuf_prealloc+0xb8>
 801315a:	4b0d      	ldr	r3, [pc, #52]	; (8013190 <tcp_pbuf_prealloc+0xe0>)
 801315c:	f240 120b 	movw	r2, #267	; 0x10b
 8013160:	490f      	ldr	r1, [pc, #60]	; (80131a0 <tcp_pbuf_prealloc+0xf0>)
 8013162:	480d      	ldr	r0, [pc, #52]	; (8013198 <tcp_pbuf_prealloc+0xe8>)
 8013164:	f005 fbe2 	bl	801892c <printf>
  *oversize = p->len - length;
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	895a      	ldrh	r2, [r3, #10]
 801316c:	89bb      	ldrh	r3, [r7, #12]
 801316e:	1ad3      	subs	r3, r2, r3
 8013170:	b29a      	uxth	r2, r3
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	89ba      	ldrh	r2, [r7, #12]
 801317a:	811a      	strh	r2, [r3, #8]
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	891a      	ldrh	r2, [r3, #8]
 8013180:	693b      	ldr	r3, [r7, #16]
 8013182:	815a      	strh	r2, [r3, #10]
  return p;
 8013184:	693b      	ldr	r3, [r7, #16]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3718      	adds	r7, #24
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}
 801318e:	bf00      	nop
 8013190:	08022218 	.word	0x08022218
 8013194:	080222d0 	.word	0x080222d0
 8013198:	0802226c 	.word	0x0802226c
 801319c:	080222f4 	.word	0x080222f4
 80131a0:	08022314 	.word	0x08022314

080131a4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	460b      	mov	r3, r1
 80131ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d106      	bne.n	80131c4 <tcp_write_checks+0x20>
 80131b6:	4b33      	ldr	r3, [pc, #204]	; (8013284 <tcp_write_checks+0xe0>)
 80131b8:	f240 1233 	movw	r2, #307	; 0x133
 80131bc:	4932      	ldr	r1, [pc, #200]	; (8013288 <tcp_write_checks+0xe4>)
 80131be:	4833      	ldr	r0, [pc, #204]	; (801328c <tcp_write_checks+0xe8>)
 80131c0:	f005 fbb4 	bl	801892c <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	7d1b      	ldrb	r3, [r3, #20]
 80131c8:	2b04      	cmp	r3, #4
 80131ca:	d00e      	beq.n	80131ea <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80131d0:	2b07      	cmp	r3, #7
 80131d2:	d00a      	beq.n	80131ea <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80131d8:	2b02      	cmp	r3, #2
 80131da:	d006      	beq.n	80131ea <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80131e0:	2b03      	cmp	r3, #3
 80131e2:	d002      	beq.n	80131ea <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80131e4:	f06f 030a 	mvn.w	r3, #10
 80131e8:	e048      	b.n	801327c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80131ea:	887b      	ldrh	r3, [r7, #2]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d101      	bne.n	80131f4 <tcp_write_checks+0x50>
    return ERR_OK;
 80131f0:	2300      	movs	r3, #0
 80131f2:	e043      	b.n	801327c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80131fa:	887a      	ldrh	r2, [r7, #2]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d909      	bls.n	8013214 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	8b5b      	ldrh	r3, [r3, #26]
 8013204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013208:	b29a      	uxth	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801320e:	f04f 33ff 	mov.w	r3, #4294967295
 8013212:	e033      	b.n	801327c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801321a:	2b08      	cmp	r3, #8
 801321c:	d909      	bls.n	8013232 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	8b5b      	ldrh	r3, [r3, #26]
 8013222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013226:	b29a      	uxth	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801322c:	f04f 33ff 	mov.w	r3, #4294967295
 8013230:	e024      	b.n	801327c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00f      	beq.n	801325c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013240:	2b00      	cmp	r3, #0
 8013242:	d11a      	bne.n	801327a <tcp_write_checks+0xd6>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013248:	2b00      	cmp	r3, #0
 801324a:	d116      	bne.n	801327a <tcp_write_checks+0xd6>
 801324c:	4b0d      	ldr	r3, [pc, #52]	; (8013284 <tcp_write_checks+0xe0>)
 801324e:	f240 1255 	movw	r2, #341	; 0x155
 8013252:	490f      	ldr	r1, [pc, #60]	; (8013290 <tcp_write_checks+0xec>)
 8013254:	480d      	ldr	r0, [pc, #52]	; (801328c <tcp_write_checks+0xe8>)
 8013256:	f005 fb69 	bl	801892c <printf>
 801325a:	e00e      	b.n	801327a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013260:	2b00      	cmp	r3, #0
 8013262:	d103      	bne.n	801326c <tcp_write_checks+0xc8>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013268:	2b00      	cmp	r3, #0
 801326a:	d006      	beq.n	801327a <tcp_write_checks+0xd6>
 801326c:	4b05      	ldr	r3, [pc, #20]	; (8013284 <tcp_write_checks+0xe0>)
 801326e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013272:	4908      	ldr	r1, [pc, #32]	; (8013294 <tcp_write_checks+0xf0>)
 8013274:	4805      	ldr	r0, [pc, #20]	; (801328c <tcp_write_checks+0xe8>)
 8013276:	f005 fb59 	bl	801892c <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}
 8013284:	08022218 	.word	0x08022218
 8013288:	08022328 	.word	0x08022328
 801328c:	0802226c 	.word	0x0802226c
 8013290:	08022348 	.word	0x08022348
 8013294:	08022384 	.word	0x08022384

08013298 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013298:	b590      	push	{r4, r7, lr}
 801329a:	b09b      	sub	sp, #108	; 0x6c
 801329c:	af04      	add	r7, sp, #16
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	4611      	mov	r1, r2
 80132a4:	461a      	mov	r2, r3
 80132a6:	460b      	mov	r3, r1
 80132a8:	80fb      	strh	r3, [r7, #6]
 80132aa:	4613      	mov	r3, r2
 80132ac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80132ae:	2300      	movs	r3, #0
 80132b0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80132b2:	2300      	movs	r3, #0
 80132b4:	653b      	str	r3, [r7, #80]	; 0x50
 80132b6:	2300      	movs	r3, #0
 80132b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80132ba:	2300      	movs	r3, #0
 80132bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80132be:	2300      	movs	r3, #0
 80132c0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80132c2:	2300      	movs	r3, #0
 80132c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80132c8:	2300      	movs	r3, #0
 80132ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80132ce:	2300      	movs	r3, #0
 80132d0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80132d2:	2300      	movs	r3, #0
 80132d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80132d6:	2300      	movs	r3, #0
 80132d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d109      	bne.n	80132f4 <tcp_write+0x5c>
 80132e0:	4ba4      	ldr	r3, [pc, #656]	; (8013574 <tcp_write+0x2dc>)
 80132e2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80132e6:	49a4      	ldr	r1, [pc, #656]	; (8013578 <tcp_write+0x2e0>)
 80132e8:	48a4      	ldr	r0, [pc, #656]	; (801357c <tcp_write+0x2e4>)
 80132ea:	f005 fb1f 	bl	801892c <printf>
 80132ee:	f06f 030f 	mvn.w	r3, #15
 80132f2:	e32a      	b.n	801394a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80132fa:	085b      	lsrs	r3, r3, #1
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013302:	4293      	cmp	r3, r2
 8013304:	bf28      	it	cs
 8013306:	4613      	movcs	r3, r2
 8013308:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801330a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801330c:	2b00      	cmp	r3, #0
 801330e:	d102      	bne.n	8013316 <tcp_write+0x7e>
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013314:	e000      	b.n	8013318 <tcp_write+0x80>
 8013316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013318:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d109      	bne.n	8013334 <tcp_write+0x9c>
 8013320:	4b94      	ldr	r3, [pc, #592]	; (8013574 <tcp_write+0x2dc>)
 8013322:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013326:	4996      	ldr	r1, [pc, #600]	; (8013580 <tcp_write+0x2e8>)
 8013328:	4894      	ldr	r0, [pc, #592]	; (801357c <tcp_write+0x2e4>)
 801332a:	f005 faff 	bl	801892c <printf>
 801332e:	f06f 030f 	mvn.w	r3, #15
 8013332:	e30a      	b.n	801394a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013334:	88fb      	ldrh	r3, [r7, #6]
 8013336:	4619      	mov	r1, r3
 8013338:	68f8      	ldr	r0, [r7, #12]
 801333a:	f7ff ff33 	bl	80131a4 <tcp_write_checks>
 801333e:	4603      	mov	r3, r0
 8013340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013344:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013348:	2b00      	cmp	r3, #0
 801334a:	d002      	beq.n	8013352 <tcp_write+0xba>
    return err;
 801334c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013350:	e2fb      	b.n	801394a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013358:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801335c:	2300      	movs	r3, #0
 801335e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013366:	2b00      	cmp	r3, #0
 8013368:	f000 80f6 	beq.w	8013558 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013370:	653b      	str	r3, [r7, #80]	; 0x50
 8013372:	e002      	b.n	801337a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801337a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d1f8      	bne.n	8013374 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013384:	7a9b      	ldrb	r3, [r3, #10]
 8013386:	009b      	lsls	r3, r3, #2
 8013388:	b29b      	uxth	r3, r3
 801338a:	f003 0304 	and.w	r3, r3, #4
 801338e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013390:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013394:	891b      	ldrh	r3, [r3, #8]
 8013396:	4619      	mov	r1, r3
 8013398:	8c3b      	ldrh	r3, [r7, #32]
 801339a:	440b      	add	r3, r1
 801339c:	429a      	cmp	r2, r3
 801339e:	da06      	bge.n	80133ae <tcp_write+0x116>
 80133a0:	4b74      	ldr	r3, [pc, #464]	; (8013574 <tcp_write+0x2dc>)
 80133a2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80133a6:	4977      	ldr	r1, [pc, #476]	; (8013584 <tcp_write+0x2ec>)
 80133a8:	4874      	ldr	r0, [pc, #464]	; (801357c <tcp_write+0x2e4>)
 80133aa:	f005 fabf 	bl	801892c <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80133ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133b0:	891a      	ldrh	r2, [r3, #8]
 80133b2:	8c3b      	ldrh	r3, [r7, #32]
 80133b4:	4413      	add	r3, r2
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80133ba:	1ad3      	subs	r3, r2, r3
 80133bc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80133c4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80133c6:	8a7b      	ldrh	r3, [r7, #18]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d026      	beq.n	801341a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80133cc:	8a7b      	ldrh	r3, [r7, #18]
 80133ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d206      	bcs.n	80133e2 <tcp_write+0x14a>
 80133d4:	4b67      	ldr	r3, [pc, #412]	; (8013574 <tcp_write+0x2dc>)
 80133d6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80133da:	496b      	ldr	r1, [pc, #428]	; (8013588 <tcp_write+0x2f0>)
 80133dc:	4867      	ldr	r0, [pc, #412]	; (801357c <tcp_write+0x2e4>)
 80133de:	f005 faa5 	bl	801892c <printf>
      seg = last_unsent;
 80133e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80133e6:	8a7b      	ldrh	r3, [r7, #18]
 80133e8:	88fa      	ldrh	r2, [r7, #6]
 80133ea:	4293      	cmp	r3, r2
 80133ec:	bf28      	it	cs
 80133ee:	4613      	movcs	r3, r2
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133f4:	4293      	cmp	r3, r2
 80133f6:	bf28      	it	cs
 80133f8:	4613      	movcs	r3, r2
 80133fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80133fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013400:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013402:	4413      	add	r3, r2
 8013404:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013408:	8a7a      	ldrh	r2, [r7, #18]
 801340a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801340c:	1ad3      	subs	r3, r2, r3
 801340e:	b29b      	uxth	r3, r3
 8013410:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013412:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013414:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013416:	1ad3      	subs	r3, r2, r3
 8013418:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801341a:	8a7b      	ldrh	r3, [r7, #18]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d00b      	beq.n	8013438 <tcp_write+0x1a0>
 8013420:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013424:	88fb      	ldrh	r3, [r7, #6]
 8013426:	429a      	cmp	r2, r3
 8013428:	d006      	beq.n	8013438 <tcp_write+0x1a0>
 801342a:	4b52      	ldr	r3, [pc, #328]	; (8013574 <tcp_write+0x2dc>)
 801342c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013430:	4956      	ldr	r1, [pc, #344]	; (801358c <tcp_write+0x2f4>)
 8013432:	4852      	ldr	r0, [pc, #328]	; (801357c <tcp_write+0x2e4>)
 8013434:	f005 fa7a 	bl	801892c <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013438:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801343c:	88fb      	ldrh	r3, [r7, #6]
 801343e:	429a      	cmp	r2, r3
 8013440:	f080 8167 	bcs.w	8013712 <tcp_write+0x47a>
 8013444:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013446:	2b00      	cmp	r3, #0
 8013448:	f000 8163 	beq.w	8013712 <tcp_write+0x47a>
 801344c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801344e:	891b      	ldrh	r3, [r3, #8]
 8013450:	2b00      	cmp	r3, #0
 8013452:	f000 815e 	beq.w	8013712 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013456:	88fa      	ldrh	r2, [r7, #6]
 8013458:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801345c:	1ad2      	subs	r2, r2, r3
 801345e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013460:	4293      	cmp	r3, r2
 8013462:	bfa8      	it	ge
 8013464:	4613      	movge	r3, r2
 8013466:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801346a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801346c:	797b      	ldrb	r3, [r7, #5]
 801346e:	f003 0301 	and.w	r3, r3, #1
 8013472:	2b00      	cmp	r3, #0
 8013474:	d027      	beq.n	80134c6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013476:	f107 0012 	add.w	r0, r7, #18
 801347a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801347c:	8bf9      	ldrh	r1, [r7, #30]
 801347e:	2301      	movs	r3, #1
 8013480:	9302      	str	r3, [sp, #8]
 8013482:	797b      	ldrb	r3, [r7, #5]
 8013484:	9301      	str	r3, [sp, #4]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	9300      	str	r3, [sp, #0]
 801348a:	4603      	mov	r3, r0
 801348c:	2000      	movs	r0, #0
 801348e:	f7ff fe0f 	bl	80130b0 <tcp_pbuf_prealloc>
 8013492:	6578      	str	r0, [r7, #84]	; 0x54
 8013494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013496:	2b00      	cmp	r3, #0
 8013498:	f000 8225 	beq.w	80138e6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801349c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801349e:	6858      	ldr	r0, [r3, #4]
 80134a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134a4:	68ba      	ldr	r2, [r7, #8]
 80134a6:	4413      	add	r3, r2
 80134a8:	8bfa      	ldrh	r2, [r7, #30]
 80134aa:	4619      	mov	r1, r3
 80134ac:	f004 ff90 	bl	80183d0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80134b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80134b2:	f7fb fa7d 	bl	800e9b0 <pbuf_clen>
 80134b6:	4603      	mov	r3, r0
 80134b8:	461a      	mov	r2, r3
 80134ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134be:	4413      	add	r3, r2
 80134c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80134c4:	e041      	b.n	801354a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80134c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	637b      	str	r3, [r7, #52]	; 0x34
 80134cc:	e002      	b.n	80134d4 <tcp_write+0x23c>
 80134ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	637b      	str	r3, [r7, #52]	; 0x34
 80134d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d1f8      	bne.n	80134ce <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80134dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134de:	7b1b      	ldrb	r3, [r3, #12]
 80134e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d115      	bne.n	8013514 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80134e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134ee:	8952      	ldrh	r2, [r2, #10]
 80134f0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80134f2:	68ba      	ldr	r2, [r7, #8]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d10d      	bne.n	8013514 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80134f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d006      	beq.n	801350e <tcp_write+0x276>
 8013500:	4b1c      	ldr	r3, [pc, #112]	; (8013574 <tcp_write+0x2dc>)
 8013502:	f240 2231 	movw	r2, #561	; 0x231
 8013506:	4922      	ldr	r1, [pc, #136]	; (8013590 <tcp_write+0x2f8>)
 8013508:	481c      	ldr	r0, [pc, #112]	; (801357c <tcp_write+0x2e4>)
 801350a:	f005 fa0f 	bl	801892c <printf>
          extendlen = seglen;
 801350e:	8bfb      	ldrh	r3, [r7, #30]
 8013510:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013512:	e01a      	b.n	801354a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013514:	8bfb      	ldrh	r3, [r7, #30]
 8013516:	2201      	movs	r2, #1
 8013518:	4619      	mov	r1, r3
 801351a:	2000      	movs	r0, #0
 801351c:	f7fa fed6 	bl	800e2cc <pbuf_alloc>
 8013520:	6578      	str	r0, [r7, #84]	; 0x54
 8013522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013524:	2b00      	cmp	r3, #0
 8013526:	f000 81e0 	beq.w	80138ea <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801352a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801352e:	68ba      	ldr	r2, [r7, #8]
 8013530:	441a      	add	r2, r3
 8013532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013534:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013536:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013538:	f7fb fa3a 	bl	800e9b0 <pbuf_clen>
 801353c:	4603      	mov	r3, r0
 801353e:	461a      	mov	r2, r3
 8013540:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013544:	4413      	add	r3, r2
 8013546:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801354a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801354e:	8bfb      	ldrh	r3, [r7, #30]
 8013550:	4413      	add	r3, r2
 8013552:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013556:	e0dc      	b.n	8013712 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801355e:	2b00      	cmp	r3, #0
 8013560:	f000 80d7 	beq.w	8013712 <tcp_write+0x47a>
 8013564:	4b03      	ldr	r3, [pc, #12]	; (8013574 <tcp_write+0x2dc>)
 8013566:	f240 224a 	movw	r2, #586	; 0x24a
 801356a:	490a      	ldr	r1, [pc, #40]	; (8013594 <tcp_write+0x2fc>)
 801356c:	4803      	ldr	r0, [pc, #12]	; (801357c <tcp_write+0x2e4>)
 801356e:	f005 f9dd 	bl	801892c <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013572:	e0ce      	b.n	8013712 <tcp_write+0x47a>
 8013574:	08022218 	.word	0x08022218
 8013578:	080223b8 	.word	0x080223b8
 801357c:	0802226c 	.word	0x0802226c
 8013580:	080223d0 	.word	0x080223d0
 8013584:	08022404 	.word	0x08022404
 8013588:	0802241c 	.word	0x0802241c
 801358c:	0802243c 	.word	0x0802243c
 8013590:	0802245c 	.word	0x0802245c
 8013594:	08022488 	.word	0x08022488
    struct pbuf *p;
    u16_t left = len - pos;
 8013598:	88fa      	ldrh	r2, [r7, #6]
 801359a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80135a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135aa:	1ad3      	subs	r3, r2, r3
 80135ac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80135ae:	8b7a      	ldrh	r2, [r7, #26]
 80135b0:	8bbb      	ldrh	r3, [r7, #28]
 80135b2:	4293      	cmp	r3, r2
 80135b4:	bf28      	it	cs
 80135b6:	4613      	movcs	r3, r2
 80135b8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80135ba:	797b      	ldrb	r3, [r7, #5]
 80135bc:	f003 0301 	and.w	r3, r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d036      	beq.n	8013632 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80135c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80135c8:	b29a      	uxth	r2, r3
 80135ca:	8b3b      	ldrh	r3, [r7, #24]
 80135cc:	4413      	add	r3, r2
 80135ce:	b299      	uxth	r1, r3
 80135d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	bf0c      	ite	eq
 80135d6:	2301      	moveq	r3, #1
 80135d8:	2300      	movne	r3, #0
 80135da:	b2db      	uxtb	r3, r3
 80135dc:	f107 0012 	add.w	r0, r7, #18
 80135e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135e2:	9302      	str	r3, [sp, #8]
 80135e4:	797b      	ldrb	r3, [r7, #5]
 80135e6:	9301      	str	r3, [sp, #4]
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	9300      	str	r3, [sp, #0]
 80135ec:	4603      	mov	r3, r0
 80135ee:	2036      	movs	r0, #54	; 0x36
 80135f0:	f7ff fd5e 	bl	80130b0 <tcp_pbuf_prealloc>
 80135f4:	6338      	str	r0, [r7, #48]	; 0x30
 80135f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	f000 8178 	beq.w	80138ee <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80135fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013600:	895b      	ldrh	r3, [r3, #10]
 8013602:	8b3a      	ldrh	r2, [r7, #24]
 8013604:	429a      	cmp	r2, r3
 8013606:	d906      	bls.n	8013616 <tcp_write+0x37e>
 8013608:	4b8c      	ldr	r3, [pc, #560]	; (801383c <tcp_write+0x5a4>)
 801360a:	f240 2266 	movw	r2, #614	; 0x266
 801360e:	498c      	ldr	r1, [pc, #560]	; (8013840 <tcp_write+0x5a8>)
 8013610:	488c      	ldr	r0, [pc, #560]	; (8013844 <tcp_write+0x5ac>)
 8013612:	f005 f98b 	bl	801892c <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013618:	685a      	ldr	r2, [r3, #4]
 801361a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801361e:	18d0      	adds	r0, r2, r3
 8013620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013624:	68ba      	ldr	r2, [r7, #8]
 8013626:	4413      	add	r3, r2
 8013628:	8b3a      	ldrh	r2, [r7, #24]
 801362a:	4619      	mov	r1, r3
 801362c:	f004 fed0 	bl	80183d0 <memcpy>
 8013630:	e02f      	b.n	8013692 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013632:	8a7b      	ldrh	r3, [r7, #18]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d006      	beq.n	8013646 <tcp_write+0x3ae>
 8013638:	4b80      	ldr	r3, [pc, #512]	; (801383c <tcp_write+0x5a4>)
 801363a:	f240 2271 	movw	r2, #625	; 0x271
 801363e:	4982      	ldr	r1, [pc, #520]	; (8013848 <tcp_write+0x5b0>)
 8013640:	4880      	ldr	r0, [pc, #512]	; (8013844 <tcp_write+0x5ac>)
 8013642:	f005 f973 	bl	801892c <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013646:	8b3b      	ldrh	r3, [r7, #24]
 8013648:	2201      	movs	r2, #1
 801364a:	4619      	mov	r1, r3
 801364c:	2036      	movs	r0, #54	; 0x36
 801364e:	f7fa fe3d 	bl	800e2cc <pbuf_alloc>
 8013652:	6178      	str	r0, [r7, #20]
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	2b00      	cmp	r3, #0
 8013658:	f000 814b 	beq.w	80138f2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801365c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	441a      	add	r2, r3
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013668:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801366c:	b29b      	uxth	r3, r3
 801366e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013672:	4619      	mov	r1, r3
 8013674:	2036      	movs	r0, #54	; 0x36
 8013676:	f7fa fe29 	bl	800e2cc <pbuf_alloc>
 801367a:	6338      	str	r0, [r7, #48]	; 0x30
 801367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367e:	2b00      	cmp	r3, #0
 8013680:	d103      	bne.n	801368a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013682:	6978      	ldr	r0, [r7, #20]
 8013684:	f7fb f906 	bl	800e894 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013688:	e136      	b.n	80138f8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801368a:	6979      	ldr	r1, [r7, #20]
 801368c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801368e:	f7fb f9cf 	bl	800ea30 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013694:	f7fb f98c 	bl	800e9b0 <pbuf_clen>
 8013698:	4603      	mov	r3, r0
 801369a:	461a      	mov	r2, r3
 801369c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136a0:	4413      	add	r3, r2
 80136a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80136a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136aa:	2b09      	cmp	r3, #9
 80136ac:	d903      	bls.n	80136b6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80136ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136b0:	f7fb f8f0 	bl	800e894 <pbuf_free>
      goto memerr;
 80136b4:	e120      	b.n	80138f8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80136ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136be:	441a      	add	r2, r3
 80136c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	4613      	mov	r3, r2
 80136c8:	2200      	movs	r2, #0
 80136ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f7ff fc51 	bl	8012f74 <tcp_create_segment>
 80136d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80136d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	f000 810d 	beq.w	80138f6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80136dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d102      	bne.n	80136e8 <tcp_write+0x450>
      queue = seg;
 80136e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136e4:	647b      	str	r3, [r7, #68]	; 0x44
 80136e6:	e00c      	b.n	8013702 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80136e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d106      	bne.n	80136fc <tcp_write+0x464>
 80136ee:	4b53      	ldr	r3, [pc, #332]	; (801383c <tcp_write+0x5a4>)
 80136f0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80136f4:	4955      	ldr	r1, [pc, #340]	; (801384c <tcp_write+0x5b4>)
 80136f6:	4853      	ldr	r0, [pc, #332]	; (8013844 <tcp_write+0x5ac>)
 80136f8:	f005 f918 	bl	801892c <printf>
      prev_seg->next = seg;
 80136fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013700:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013704:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013706:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801370a:	8b3b      	ldrh	r3, [r7, #24]
 801370c:	4413      	add	r3, r2
 801370e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013712:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013716:	88fb      	ldrh	r3, [r7, #6]
 8013718:	429a      	cmp	r2, r3
 801371a:	f4ff af3d 	bcc.w	8013598 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801371e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013720:	2b00      	cmp	r3, #0
 8013722:	d02c      	beq.n	801377e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013726:	685b      	ldr	r3, [r3, #4]
 8013728:	62fb      	str	r3, [r7, #44]	; 0x2c
 801372a:	e01e      	b.n	801376a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801372e:	891a      	ldrh	r2, [r3, #8]
 8013730:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013732:	4413      	add	r3, r2
 8013734:	b29a      	uxth	r2, r3
 8013736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013738:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d110      	bne.n	8013764 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013748:	8952      	ldrh	r2, [r2, #10]
 801374a:	4413      	add	r3, r2
 801374c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801374e:	68b9      	ldr	r1, [r7, #8]
 8013750:	4618      	mov	r0, r3
 8013752:	f004 fe3d 	bl	80183d0 <memcpy>
        p->len += oversize_used;
 8013756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013758:	895a      	ldrh	r2, [r3, #10]
 801375a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801375c:	4413      	add	r3, r2
 801375e:	b29a      	uxth	r2, r3
 8013760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013762:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	62fb      	str	r3, [r7, #44]	; 0x2c
 801376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376c:	2b00      	cmp	r3, #0
 801376e:	d1dd      	bne.n	801372c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013772:	891a      	ldrh	r2, [r3, #8]
 8013774:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013776:	4413      	add	r3, r2
 8013778:	b29a      	uxth	r2, r3
 801377a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801377c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801377e:	8a7a      	ldrh	r2, [r7, #18]
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013788:	2b00      	cmp	r3, #0
 801378a:	d018      	beq.n	80137be <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801378c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801378e:	2b00      	cmp	r3, #0
 8013790:	d106      	bne.n	80137a0 <tcp_write+0x508>
 8013792:	4b2a      	ldr	r3, [pc, #168]	; (801383c <tcp_write+0x5a4>)
 8013794:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013798:	492d      	ldr	r1, [pc, #180]	; (8013850 <tcp_write+0x5b8>)
 801379a:	482a      	ldr	r0, [pc, #168]	; (8013844 <tcp_write+0x5ac>)
 801379c:	f005 f8c6 	bl	801892c <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80137a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137a2:	685b      	ldr	r3, [r3, #4]
 80137a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fb f942 	bl	800ea30 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80137ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137ae:	891a      	ldrh	r2, [r3, #8]
 80137b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137b2:	891b      	ldrh	r3, [r3, #8]
 80137b4:	4413      	add	r3, r2
 80137b6:	b29a      	uxth	r2, r3
 80137b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137ba:	811a      	strh	r2, [r3, #8]
 80137bc:	e037      	b.n	801382e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80137be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d034      	beq.n	801382e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80137c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d003      	beq.n	80137d2 <tcp_write+0x53a>
 80137ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d106      	bne.n	80137e0 <tcp_write+0x548>
 80137d2:	4b1a      	ldr	r3, [pc, #104]	; (801383c <tcp_write+0x5a4>)
 80137d4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80137d8:	491e      	ldr	r1, [pc, #120]	; (8013854 <tcp_write+0x5bc>)
 80137da:	481a      	ldr	r0, [pc, #104]	; (8013844 <tcp_write+0x5ac>)
 80137dc:	f005 f8a6 	bl	801892c <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80137e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80137e6:	e009      	b.n	80137fc <tcp_write+0x564>
      p->tot_len += extendlen;
 80137e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ea:	891a      	ldrh	r2, [r3, #8]
 80137ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137ee:	4413      	add	r3, r2
 80137f0:	b29a      	uxth	r2, r3
 80137f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80137f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80137fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d1f1      	bne.n	80137e8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013806:	891a      	ldrh	r2, [r3, #8]
 8013808:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801380a:	4413      	add	r3, r2
 801380c:	b29a      	uxth	r2, r3
 801380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013810:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013814:	895a      	ldrh	r2, [r3, #10]
 8013816:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013818:	4413      	add	r3, r2
 801381a:	b29a      	uxth	r2, r3
 801381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013822:	891a      	ldrh	r2, [r3, #8]
 8013824:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013826:	4413      	add	r3, r2
 8013828:	b29a      	uxth	r2, r3
 801382a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801382c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801382e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013830:	2b00      	cmp	r3, #0
 8013832:	d111      	bne.n	8013858 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013838:	66da      	str	r2, [r3, #108]	; 0x6c
 801383a:	e010      	b.n	801385e <tcp_write+0x5c6>
 801383c:	08022218 	.word	0x08022218
 8013840:	080224b8 	.word	0x080224b8
 8013844:	0802226c 	.word	0x0802226c
 8013848:	080224f8 	.word	0x080224f8
 801384c:	08022508 	.word	0x08022508
 8013850:	0802251c 	.word	0x0802251c
 8013854:	08022554 	.word	0x08022554
  } else {
    last_unsent->next = queue;
 8013858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801385a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801385c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013862:	88fb      	ldrh	r3, [r7, #6]
 8013864:	441a      	add	r2, r3
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013870:	88fb      	ldrh	r3, [r7, #6]
 8013872:	1ad3      	subs	r3, r2, r3
 8013874:	b29a      	uxth	r2, r3
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013882:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00e      	beq.n	80138ae <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013894:	2b00      	cmp	r3, #0
 8013896:	d10a      	bne.n	80138ae <tcp_write+0x616>
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801389c:	2b00      	cmp	r3, #0
 801389e:	d106      	bne.n	80138ae <tcp_write+0x616>
 80138a0:	4b2c      	ldr	r3, [pc, #176]	; (8013954 <tcp_write+0x6bc>)
 80138a2:	f240 3212 	movw	r2, #786	; 0x312
 80138a6:	492c      	ldr	r1, [pc, #176]	; (8013958 <tcp_write+0x6c0>)
 80138a8:	482c      	ldr	r0, [pc, #176]	; (801395c <tcp_write+0x6c4>)
 80138aa:	f005 f83f 	bl	801892c <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80138ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d016      	beq.n	80138e2 <tcp_write+0x64a>
 80138b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138b6:	68db      	ldr	r3, [r3, #12]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d012      	beq.n	80138e2 <tcp_write+0x64a>
 80138bc:	797b      	ldrb	r3, [r7, #5]
 80138be:	f003 0302 	and.w	r3, r3, #2
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d10d      	bne.n	80138e2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80138c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138c8:	68db      	ldr	r3, [r3, #12]
 80138ca:	899b      	ldrh	r3, [r3, #12]
 80138cc:	b29c      	uxth	r4, r3
 80138ce:	2008      	movs	r0, #8
 80138d0:	f7f9 fcac 	bl	800d22c <lwip_htons>
 80138d4:	4603      	mov	r3, r0
 80138d6:	461a      	mov	r2, r3
 80138d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	4322      	orrs	r2, r4
 80138de:	b292      	uxth	r2, r2
 80138e0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80138e2:	2300      	movs	r3, #0
 80138e4:	e031      	b.n	801394a <tcp_write+0x6b2>
          goto memerr;
 80138e6:	bf00      	nop
 80138e8:	e006      	b.n	80138f8 <tcp_write+0x660>
            goto memerr;
 80138ea:	bf00      	nop
 80138ec:	e004      	b.n	80138f8 <tcp_write+0x660>
        goto memerr;
 80138ee:	bf00      	nop
 80138f0:	e002      	b.n	80138f8 <tcp_write+0x660>
        goto memerr;
 80138f2:	bf00      	nop
 80138f4:	e000      	b.n	80138f8 <tcp_write+0x660>
      goto memerr;
 80138f6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	8b5b      	ldrh	r3, [r3, #26]
 80138fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013900:	b29a      	uxth	r2, r3
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013908:	2b00      	cmp	r3, #0
 801390a:	d002      	beq.n	8013912 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801390c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801390e:	f7fa ffc1 	bl	800e894 <pbuf_free>
  }
  if (queue != NULL) {
 8013912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013914:	2b00      	cmp	r3, #0
 8013916:	d002      	beq.n	801391e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013918:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801391a:	f7fc fb6f 	bl	800fffc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013924:	2b00      	cmp	r3, #0
 8013926:	d00e      	beq.n	8013946 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801392c:	2b00      	cmp	r3, #0
 801392e:	d10a      	bne.n	8013946 <tcp_write+0x6ae>
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013934:	2b00      	cmp	r3, #0
 8013936:	d106      	bne.n	8013946 <tcp_write+0x6ae>
 8013938:	4b06      	ldr	r3, [pc, #24]	; (8013954 <tcp_write+0x6bc>)
 801393a:	f240 3227 	movw	r2, #807	; 0x327
 801393e:	4906      	ldr	r1, [pc, #24]	; (8013958 <tcp_write+0x6c0>)
 8013940:	4806      	ldr	r0, [pc, #24]	; (801395c <tcp_write+0x6c4>)
 8013942:	f004 fff3 	bl	801892c <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013946:	f04f 33ff 	mov.w	r3, #4294967295
}
 801394a:	4618      	mov	r0, r3
 801394c:	375c      	adds	r7, #92	; 0x5c
 801394e:	46bd      	mov	sp, r7
 8013950:	bd90      	pop	{r4, r7, pc}
 8013952:	bf00      	nop
 8013954:	08022218 	.word	0x08022218
 8013958:	0802258c 	.word	0x0802258c
 801395c:	0802226c 	.word	0x0802226c

08013960 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013960:	b590      	push	{r4, r7, lr}
 8013962:	b08b      	sub	sp, #44	; 0x2c
 8013964:	af02      	add	r7, sp, #8
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	460b      	mov	r3, r1
 801396a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801396c:	2300      	movs	r3, #0
 801396e:	61fb      	str	r3, [r7, #28]
 8013970:	2300      	movs	r3, #0
 8013972:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013974:	2300      	movs	r3, #0
 8013976:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d106      	bne.n	801398c <tcp_split_unsent_seg+0x2c>
 801397e:	4b95      	ldr	r3, [pc, #596]	; (8013bd4 <tcp_split_unsent_seg+0x274>)
 8013980:	f240 324b 	movw	r2, #843	; 0x34b
 8013984:	4994      	ldr	r1, [pc, #592]	; (8013bd8 <tcp_split_unsent_seg+0x278>)
 8013986:	4895      	ldr	r0, [pc, #596]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 8013988:	f004 ffd0 	bl	801892c <printf>

  useg = pcb->unsent;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013990:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d102      	bne.n	801399e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013998:	f04f 33ff 	mov.w	r3, #4294967295
 801399c:	e116      	b.n	8013bcc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801399e:	887b      	ldrh	r3, [r7, #2]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d109      	bne.n	80139b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80139a4:	4b8b      	ldr	r3, [pc, #556]	; (8013bd4 <tcp_split_unsent_seg+0x274>)
 80139a6:	f240 3253 	movw	r2, #851	; 0x353
 80139aa:	498d      	ldr	r1, [pc, #564]	; (8013be0 <tcp_split_unsent_seg+0x280>)
 80139ac:	488b      	ldr	r0, [pc, #556]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 80139ae:	f004 ffbd 	bl	801892c <printf>
    return ERR_VAL;
 80139b2:	f06f 0305 	mvn.w	r3, #5
 80139b6:	e109      	b.n	8013bcc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	891b      	ldrh	r3, [r3, #8]
 80139bc:	887a      	ldrh	r2, [r7, #2]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d301      	bcc.n	80139c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80139c2:	2300      	movs	r3, #0
 80139c4:	e102      	b.n	8013bcc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139ca:	887a      	ldrh	r2, [r7, #2]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d906      	bls.n	80139de <tcp_split_unsent_seg+0x7e>
 80139d0:	4b80      	ldr	r3, [pc, #512]	; (8013bd4 <tcp_split_unsent_seg+0x274>)
 80139d2:	f240 325b 	movw	r2, #859	; 0x35b
 80139d6:	4983      	ldr	r1, [pc, #524]	; (8013be4 <tcp_split_unsent_seg+0x284>)
 80139d8:	4880      	ldr	r0, [pc, #512]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 80139da:	f004 ffa7 	bl	801892c <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	891b      	ldrh	r3, [r3, #8]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d106      	bne.n	80139f4 <tcp_split_unsent_seg+0x94>
 80139e6:	4b7b      	ldr	r3, [pc, #492]	; (8013bd4 <tcp_split_unsent_seg+0x274>)
 80139e8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80139ec:	497e      	ldr	r1, [pc, #504]	; (8013be8 <tcp_split_unsent_seg+0x288>)
 80139ee:	487b      	ldr	r0, [pc, #492]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 80139f0:	f004 ff9c 	bl	801892c <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	7a9b      	ldrb	r3, [r3, #10]
 80139f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80139fa:	7bfb      	ldrb	r3, [r7, #15]
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	f003 0304 	and.w	r3, r3, #4
 8013a04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	891a      	ldrh	r2, [r3, #8]
 8013a0a:	887b      	ldrh	r3, [r7, #2]
 8013a0c:	1ad3      	subs	r3, r2, r3
 8013a0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013a10:	7bbb      	ldrb	r3, [r7, #14]
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	89bb      	ldrh	r3, [r7, #12]
 8013a16:	4413      	add	r3, r2
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a1e:	4619      	mov	r1, r3
 8013a20:	2036      	movs	r0, #54	; 0x36
 8013a22:	f7fa fc53 	bl	800e2cc <pbuf_alloc>
 8013a26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	f000 80b7 	beq.w	8013b9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	891a      	ldrh	r2, [r3, #8]
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	891b      	ldrh	r3, [r3, #8]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	887b      	ldrh	r3, [r7, #2]
 8013a40:	4413      	add	r3, r2
 8013a42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	6858      	ldr	r0, [r3, #4]
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	685a      	ldr	r2, [r3, #4]
 8013a4c:	7bbb      	ldrb	r3, [r7, #14]
 8013a4e:	18d1      	adds	r1, r2, r3
 8013a50:	897b      	ldrh	r3, [r7, #10]
 8013a52:	89ba      	ldrh	r2, [r7, #12]
 8013a54:	f7fb f924 	bl	800eca0 <pbuf_copy_partial>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	89bb      	ldrh	r3, [r7, #12]
 8013a5e:	4293      	cmp	r3, r2
 8013a60:	f040 809f 	bne.w	8013ba2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	899b      	ldrh	r3, [r3, #12]
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7f9 fbdd 	bl	800d22c <lwip_htons>
 8013a72:	4603      	mov	r3, r0
 8013a74:	b2db      	uxtb	r3, r3
 8013a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a7a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013a80:	7efb      	ldrb	r3, [r7, #27]
 8013a82:	f003 0308 	and.w	r3, r3, #8
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d007      	beq.n	8013a9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013a8a:	7efb      	ldrb	r3, [r7, #27]
 8013a8c:	f023 0308 	bic.w	r3, r3, #8
 8013a90:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013a92:	7ebb      	ldrb	r3, [r7, #26]
 8013a94:	f043 0308 	orr.w	r3, r3, #8
 8013a98:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013a9a:	7efb      	ldrb	r3, [r7, #27]
 8013a9c:	f003 0301 	and.w	r3, r3, #1
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d007      	beq.n	8013ab4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013aa4:	7efb      	ldrb	r3, [r7, #27]
 8013aa6:	f023 0301 	bic.w	r3, r3, #1
 8013aaa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013aac:	7ebb      	ldrb	r3, [r7, #26]
 8013aae:	f043 0301 	orr.w	r3, r3, #1
 8013ab2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7f9 fbcb 	bl	800d256 <lwip_htonl>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	887b      	ldrh	r3, [r7, #2]
 8013ac4:	18d1      	adds	r1, r2, r3
 8013ac6:	7eba      	ldrb	r2, [r7, #26]
 8013ac8:	7bfb      	ldrb	r3, [r7, #15]
 8013aca:	9300      	str	r3, [sp, #0]
 8013acc:	460b      	mov	r3, r1
 8013ace:	6939      	ldr	r1, [r7, #16]
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f7ff fa4f 	bl	8012f74 <tcp_create_segment>
 8013ad6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013ad8:	69fb      	ldr	r3, [r7, #28]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d063      	beq.n	8013ba6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fa ff64 	bl	800e9b0 <pbuf_clen>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	461a      	mov	r2, r3
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013af2:	1a9b      	subs	r3, r3, r2
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	6858      	ldr	r0, [r3, #4]
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	891a      	ldrh	r2, [r3, #8]
 8013b06:	89bb      	ldrh	r3, [r7, #12]
 8013b08:	1ad3      	subs	r3, r2, r3
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	f7fa fd3b 	bl	800e588 <pbuf_realloc>
  useg->len -= remainder;
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	891a      	ldrh	r2, [r3, #8]
 8013b16:	89bb      	ldrh	r3, [r7, #12]
 8013b18:	1ad3      	subs	r3, r2, r3
 8013b1a:	b29a      	uxth	r2, r3
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	899b      	ldrh	r3, [r3, #12]
 8013b26:	b29c      	uxth	r4, r3
 8013b28:	7efb      	ldrb	r3, [r7, #27]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7f9 fb7d 	bl	800d22c <lwip_htons>
 8013b32:	4603      	mov	r3, r0
 8013b34:	461a      	mov	r2, r3
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	4322      	orrs	r2, r4
 8013b3c:	b292      	uxth	r2, r2
 8013b3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fa ff33 	bl	800e9b0 <pbuf_clen>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b54:	4413      	add	r3, r2
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	685b      	ldr	r3, [r3, #4]
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7fa ff24 	bl	800e9b0 <pbuf_clen>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	461a      	mov	r2, r3
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b72:	4413      	add	r3, r2
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	681a      	ldr	r2, [r3, #0]
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	69fa      	ldr	r2, [r7, #28]
 8013b88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d103      	bne.n	8013b9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2200      	movs	r2, #0
 8013b96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	e016      	b.n	8013bcc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013b9e:	bf00      	nop
 8013ba0:	e002      	b.n	8013ba8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013ba2:	bf00      	nop
 8013ba4:	e000      	b.n	8013ba8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013ba6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d006      	beq.n	8013bbc <tcp_split_unsent_seg+0x25c>
 8013bae:	4b09      	ldr	r3, [pc, #36]	; (8013bd4 <tcp_split_unsent_seg+0x274>)
 8013bb0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013bb4:	490d      	ldr	r1, [pc, #52]	; (8013bec <tcp_split_unsent_seg+0x28c>)
 8013bb6:	4809      	ldr	r0, [pc, #36]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 8013bb8:	f004 feb8 	bl	801892c <printf>
  if (p != NULL) {
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d002      	beq.n	8013bc8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013bc2:	6938      	ldr	r0, [r7, #16]
 8013bc4:	f7fa fe66 	bl	800e894 <pbuf_free>
  }

  return ERR_MEM;
 8013bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3724      	adds	r7, #36	; 0x24
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd90      	pop	{r4, r7, pc}
 8013bd4:	08022218 	.word	0x08022218
 8013bd8:	080225ac 	.word	0x080225ac
 8013bdc:	0802226c 	.word	0x0802226c
 8013be0:	080225d0 	.word	0x080225d0
 8013be4:	080225f4 	.word	0x080225f4
 8013be8:	08022604 	.word	0x08022604
 8013bec:	08022614 	.word	0x08022614

08013bf0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013bf0:	b590      	push	{r4, r7, lr}
 8013bf2:	b085      	sub	sp, #20
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d106      	bne.n	8013c0c <tcp_send_fin+0x1c>
 8013bfe:	4b21      	ldr	r3, [pc, #132]	; (8013c84 <tcp_send_fin+0x94>)
 8013c00:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013c04:	4920      	ldr	r1, [pc, #128]	; (8013c88 <tcp_send_fin+0x98>)
 8013c06:	4821      	ldr	r0, [pc, #132]	; (8013c8c <tcp_send_fin+0x9c>)
 8013c08:	f004 fe90 	bl	801892c <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d02e      	beq.n	8013c72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c18:	60fb      	str	r3, [r7, #12]
 8013c1a:	e002      	b.n	8013c22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d1f8      	bne.n	8013c1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	68db      	ldr	r3, [r3, #12]
 8013c2e:	899b      	ldrh	r3, [r3, #12]
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7f9 fafa 	bl	800d22c <lwip_htons>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	b2db      	uxtb	r3, r3
 8013c3c:	f003 0307 	and.w	r3, r3, #7
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d116      	bne.n	8013c72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	899b      	ldrh	r3, [r3, #12]
 8013c4a:	b29c      	uxth	r4, r3
 8013c4c:	2001      	movs	r0, #1
 8013c4e:	f7f9 faed 	bl	800d22c <lwip_htons>
 8013c52:	4603      	mov	r3, r0
 8013c54:	461a      	mov	r2, r3
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	68db      	ldr	r3, [r3, #12]
 8013c5a:	4322      	orrs	r2, r4
 8013c5c:	b292      	uxth	r2, r2
 8013c5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	8b5b      	ldrh	r3, [r3, #26]
 8013c64:	f043 0320 	orr.w	r3, r3, #32
 8013c68:	b29a      	uxth	r2, r3
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	e004      	b.n	8013c7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013c72:	2101      	movs	r1, #1
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f000 f80b 	bl	8013c90 <tcp_enqueue_flags>
 8013c7a:	4603      	mov	r3, r0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3714      	adds	r7, #20
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd90      	pop	{r4, r7, pc}
 8013c84:	08022218 	.word	0x08022218
 8013c88:	08022620 	.word	0x08022620
 8013c8c:	0802226c 	.word	0x0802226c

08013c90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b08a      	sub	sp, #40	; 0x28
 8013c94:	af02      	add	r7, sp, #8
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	460b      	mov	r3, r1
 8013c9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013ca4:	78fb      	ldrb	r3, [r7, #3]
 8013ca6:	f003 0303 	and.w	r3, r3, #3
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d106      	bne.n	8013cbc <tcp_enqueue_flags+0x2c>
 8013cae:	4b67      	ldr	r3, [pc, #412]	; (8013e4c <tcp_enqueue_flags+0x1bc>)
 8013cb0:	f240 4211 	movw	r2, #1041	; 0x411
 8013cb4:	4966      	ldr	r1, [pc, #408]	; (8013e50 <tcp_enqueue_flags+0x1c0>)
 8013cb6:	4867      	ldr	r0, [pc, #412]	; (8013e54 <tcp_enqueue_flags+0x1c4>)
 8013cb8:	f004 fe38 	bl	801892c <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d106      	bne.n	8013cd0 <tcp_enqueue_flags+0x40>
 8013cc2:	4b62      	ldr	r3, [pc, #392]	; (8013e4c <tcp_enqueue_flags+0x1bc>)
 8013cc4:	f240 4213 	movw	r2, #1043	; 0x413
 8013cc8:	4963      	ldr	r1, [pc, #396]	; (8013e58 <tcp_enqueue_flags+0x1c8>)
 8013cca:	4862      	ldr	r0, [pc, #392]	; (8013e54 <tcp_enqueue_flags+0x1c4>)
 8013ccc:	f004 fe2e 	bl	801892c <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013cd0:	78fb      	ldrb	r3, [r7, #3]
 8013cd2:	f003 0302 	and.w	r3, r3, #2
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d001      	beq.n	8013cde <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013cda:	2301      	movs	r3, #1
 8013cdc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013cde:	7ffb      	ldrb	r3, [r7, #31]
 8013ce0:	009b      	lsls	r3, r3, #2
 8013ce2:	b2db      	uxtb	r3, r3
 8013ce4:	f003 0304 	and.w	r3, r3, #4
 8013ce8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013cea:	7dfb      	ldrb	r3, [r7, #23]
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	2036      	movs	r0, #54	; 0x36
 8013cf6:	f7fa fae9 	bl	800e2cc <pbuf_alloc>
 8013cfa:	6138      	str	r0, [r7, #16]
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d109      	bne.n	8013d16 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	8b5b      	ldrh	r3, [r3, #26]
 8013d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d0a:	b29a      	uxth	r2, r3
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013d10:	f04f 33ff 	mov.w	r3, #4294967295
 8013d14:	e095      	b.n	8013e42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	895a      	ldrh	r2, [r3, #10]
 8013d1a:	7dfb      	ldrb	r3, [r7, #23]
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d206      	bcs.n	8013d30 <tcp_enqueue_flags+0xa0>
 8013d22:	4b4a      	ldr	r3, [pc, #296]	; (8013e4c <tcp_enqueue_flags+0x1bc>)
 8013d24:	f240 4239 	movw	r2, #1081	; 0x439
 8013d28:	494c      	ldr	r1, [pc, #304]	; (8013e5c <tcp_enqueue_flags+0x1cc>)
 8013d2a:	484a      	ldr	r0, [pc, #296]	; (8013e54 <tcp_enqueue_flags+0x1c4>)
 8013d2c:	f004 fdfe 	bl	801892c <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013d34:	78fa      	ldrb	r2, [r7, #3]
 8013d36:	7ffb      	ldrb	r3, [r7, #31]
 8013d38:	9300      	str	r3, [sp, #0]
 8013d3a:	460b      	mov	r3, r1
 8013d3c:	6939      	ldr	r1, [r7, #16]
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f7ff f918 	bl	8012f74 <tcp_create_segment>
 8013d44:	60f8      	str	r0, [r7, #12]
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d109      	bne.n	8013d60 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	8b5b      	ldrh	r3, [r3, #26]
 8013d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d54:	b29a      	uxth	r2, r3
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8013d5e:	e070      	b.n	8013e42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	68db      	ldr	r3, [r3, #12]
 8013d64:	f003 0303 	and.w	r3, r3, #3
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d006      	beq.n	8013d7a <tcp_enqueue_flags+0xea>
 8013d6c:	4b37      	ldr	r3, [pc, #220]	; (8013e4c <tcp_enqueue_flags+0x1bc>)
 8013d6e:	f240 4242 	movw	r2, #1090	; 0x442
 8013d72:	493b      	ldr	r1, [pc, #236]	; (8013e60 <tcp_enqueue_flags+0x1d0>)
 8013d74:	4837      	ldr	r0, [pc, #220]	; (8013e54 <tcp_enqueue_flags+0x1c4>)
 8013d76:	f004 fdd9 	bl	801892c <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	891b      	ldrh	r3, [r3, #8]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d006      	beq.n	8013d90 <tcp_enqueue_flags+0x100>
 8013d82:	4b32      	ldr	r3, [pc, #200]	; (8013e4c <tcp_enqueue_flags+0x1bc>)
 8013d84:	f240 4243 	movw	r2, #1091	; 0x443
 8013d88:	4936      	ldr	r1, [pc, #216]	; (8013e64 <tcp_enqueue_flags+0x1d4>)
 8013d8a:	4832      	ldr	r0, [pc, #200]	; (8013e54 <tcp_enqueue_flags+0x1c4>)
 8013d8c:	f004 fdce 	bl	801892c <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d103      	bne.n	8013da0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	68fa      	ldr	r2, [r7, #12]
 8013d9c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013d9e:	e00d      	b.n	8013dbc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013da4:	61bb      	str	r3, [r7, #24]
 8013da6:	e002      	b.n	8013dae <tcp_enqueue_flags+0x11e>
 8013da8:	69bb      	ldr	r3, [r7, #24]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	61bb      	str	r3, [r7, #24]
 8013dae:	69bb      	ldr	r3, [r7, #24]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d1f8      	bne.n	8013da8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	68fa      	ldr	r2, [r7, #12]
 8013dba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013dc4:	78fb      	ldrb	r3, [r7, #3]
 8013dc6:	f003 0302 	and.w	r3, r3, #2
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d104      	bne.n	8013dd8 <tcp_enqueue_flags+0x148>
 8013dce:	78fb      	ldrb	r3, [r7, #3]
 8013dd0:	f003 0301 	and.w	r3, r3, #1
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d004      	beq.n	8013de2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ddc:	1c5a      	adds	r2, r3, #1
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013de2:	78fb      	ldrb	r3, [r7, #3]
 8013de4:	f003 0301 	and.w	r3, r3, #1
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d006      	beq.n	8013dfa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	8b5b      	ldrh	r3, [r3, #26]
 8013df0:	f043 0320 	orr.w	r3, r3, #32
 8013df4:	b29a      	uxth	r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fa fdd6 	bl	800e9b0 <pbuf_clen>
 8013e04:	4603      	mov	r3, r0
 8013e06:	461a      	mov	r2, r3
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e0e:	4413      	add	r3, r2
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d00e      	beq.n	8013e40 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d10a      	bne.n	8013e40 <tcp_enqueue_flags+0x1b0>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d106      	bne.n	8013e40 <tcp_enqueue_flags+0x1b0>
 8013e32:	4b06      	ldr	r3, [pc, #24]	; (8013e4c <tcp_enqueue_flags+0x1bc>)
 8013e34:	f240 4265 	movw	r2, #1125	; 0x465
 8013e38:	490b      	ldr	r1, [pc, #44]	; (8013e68 <tcp_enqueue_flags+0x1d8>)
 8013e3a:	4806      	ldr	r0, [pc, #24]	; (8013e54 <tcp_enqueue_flags+0x1c4>)
 8013e3c:	f004 fd76 	bl	801892c <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013e40:	2300      	movs	r3, #0
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3720      	adds	r7, #32
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	08022218 	.word	0x08022218
 8013e50:	0802263c 	.word	0x0802263c
 8013e54:	0802226c 	.word	0x0802226c
 8013e58:	08022694 	.word	0x08022694
 8013e5c:	080226b4 	.word	0x080226b4
 8013e60:	080226f0 	.word	0x080226f0
 8013e64:	08022708 	.word	0x08022708
 8013e68:	08022734 	.word	0x08022734

08013e6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013e6c:	b5b0      	push	{r4, r5, r7, lr}
 8013e6e:	b08a      	sub	sp, #40	; 0x28
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d106      	bne.n	8013e88 <tcp_output+0x1c>
 8013e7a:	4b9e      	ldr	r3, [pc, #632]	; (80140f4 <tcp_output+0x288>)
 8013e7c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013e80:	499d      	ldr	r1, [pc, #628]	; (80140f8 <tcp_output+0x28c>)
 8013e82:	489e      	ldr	r0, [pc, #632]	; (80140fc <tcp_output+0x290>)
 8013e84:	f004 fd52 	bl	801892c <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	7d1b      	ldrb	r3, [r3, #20]
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d106      	bne.n	8013e9e <tcp_output+0x32>
 8013e90:	4b98      	ldr	r3, [pc, #608]	; (80140f4 <tcp_output+0x288>)
 8013e92:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013e96:	499a      	ldr	r1, [pc, #616]	; (8014100 <tcp_output+0x294>)
 8013e98:	4898      	ldr	r0, [pc, #608]	; (80140fc <tcp_output+0x290>)
 8013e9a:	f004 fd47 	bl	801892c <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013e9e:	4b99      	ldr	r3, [pc, #612]	; (8014104 <tcp_output+0x298>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d101      	bne.n	8013eac <tcp_output+0x40>
    return ERR_OK;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	e1ce      	b.n	801424a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	bf28      	it	cs
 8013ebc:	4613      	movcs	r3, r2
 8013ebe:	b29b      	uxth	r3, r3
 8013ec0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d10b      	bne.n	8013ee6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	8b5b      	ldrh	r3, [r3, #26]
 8013ed2:	f003 0302 	and.w	r3, r3, #2
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	f000 81aa 	beq.w	8014230 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f000 fdcb 	bl	8014a78 <tcp_send_empty_ack>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	e1b1      	b.n	801424a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013ee6:	6879      	ldr	r1, [r7, #4]
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	3304      	adds	r3, #4
 8013eec:	461a      	mov	r2, r3
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7ff f824 	bl	8012f3c <tcp_route>
 8013ef4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d102      	bne.n	8013f02 <tcp_output+0x96>
    return ERR_RTE;
 8013efc:	f06f 0303 	mvn.w	r3, #3
 8013f00:	e1a3      	b.n	801424a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d003      	beq.n	8013f10 <tcp_output+0xa4>
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d111      	bne.n	8013f34 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d002      	beq.n	8013f1c <tcp_output+0xb0>
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	3304      	adds	r3, #4
 8013f1a:	e000      	b.n	8013f1e <tcp_output+0xb2>
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d102      	bne.n	8013f2c <tcp_output+0xc0>
      return ERR_RTE;
 8013f26:	f06f 0303 	mvn.w	r3, #3
 8013f2a:	e18e      	b.n	801424a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f36:	68db      	ldr	r3, [r3, #12]
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7f9 f98b 	bl	800d256 <lwip_htonl>
 8013f40:	4602      	mov	r2, r0
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f46:	1ad3      	subs	r3, r2, r3
 8013f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f4a:	8912      	ldrh	r2, [r2, #8]
 8013f4c:	4413      	add	r3, r2
 8013f4e:	69ba      	ldr	r2, [r7, #24]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d227      	bcs.n	8013fa4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	69bb      	ldr	r3, [r7, #24]
 8013f5e:	4293      	cmp	r3, r2
 8013f60:	d114      	bne.n	8013f8c <tcp_output+0x120>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d110      	bne.n	8013f8c <tcp_output+0x120>
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d10b      	bne.n	8013f8c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2200      	movs	r2, #0
 8013f78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2201      	movs	r2, #1
 8013f80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2200      	movs	r2, #0
 8013f88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	8b5b      	ldrh	r3, [r3, #26]
 8013f90:	f003 0302 	and.w	r3, r3, #2
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f000 814d 	beq.w	8014234 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f000 fd6c 	bl	8014a78 <tcp_send_empty_ack>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	e152      	b.n	801424a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fb0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013fb2:	6a3b      	ldr	r3, [r7, #32]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	f000 811c 	beq.w	80141f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013fba:	e002      	b.n	8013fc2 <tcp_output+0x156>
 8013fbc:	6a3b      	ldr	r3, [r7, #32]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	623b      	str	r3, [r7, #32]
 8013fc2:	6a3b      	ldr	r3, [r7, #32]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d1f8      	bne.n	8013fbc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013fca:	e112      	b.n	80141f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	899b      	ldrh	r3, [r3, #12]
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7f9 f929 	bl	800d22c <lwip_htons>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	f003 0304 	and.w	r3, r3, #4
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d006      	beq.n	8013ff4 <tcp_output+0x188>
 8013fe6:	4b43      	ldr	r3, [pc, #268]	; (80140f4 <tcp_output+0x288>)
 8013fe8:	f240 5236 	movw	r2, #1334	; 0x536
 8013fec:	4946      	ldr	r1, [pc, #280]	; (8014108 <tcp_output+0x29c>)
 8013fee:	4843      	ldr	r0, [pc, #268]	; (80140fc <tcp_output+0x290>)
 8013ff0:	f004 fc9c 	bl	801892c <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d01f      	beq.n	801403c <tcp_output+0x1d0>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	8b5b      	ldrh	r3, [r3, #26]
 8014000:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014004:	2b00      	cmp	r3, #0
 8014006:	d119      	bne.n	801403c <tcp_output+0x1d0>
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801400c:	2b00      	cmp	r3, #0
 801400e:	d00b      	beq.n	8014028 <tcp_output+0x1bc>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d110      	bne.n	801403c <tcp_output+0x1d0>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801401e:	891a      	ldrh	r2, [r3, #8]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014024:	429a      	cmp	r2, r3
 8014026:	d209      	bcs.n	801403c <tcp_output+0x1d0>
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801402e:	2b00      	cmp	r3, #0
 8014030:	d004      	beq.n	801403c <tcp_output+0x1d0>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014038:	2b08      	cmp	r3, #8
 801403a:	d901      	bls.n	8014040 <tcp_output+0x1d4>
 801403c:	2301      	movs	r3, #1
 801403e:	e000      	b.n	8014042 <tcp_output+0x1d6>
 8014040:	2300      	movs	r3, #0
 8014042:	2b00      	cmp	r3, #0
 8014044:	d106      	bne.n	8014054 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	8b5b      	ldrh	r3, [r3, #26]
 801404a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801404e:	2b00      	cmp	r3, #0
 8014050:	f000 80e4 	beq.w	801421c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	7d1b      	ldrb	r3, [r3, #20]
 8014058:	2b02      	cmp	r3, #2
 801405a:	d00d      	beq.n	8014078 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	899b      	ldrh	r3, [r3, #12]
 8014062:	b29c      	uxth	r4, r3
 8014064:	2010      	movs	r0, #16
 8014066:	f7f9 f8e1 	bl	800d22c <lwip_htons>
 801406a:	4603      	mov	r3, r0
 801406c:	461a      	mov	r2, r3
 801406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	4322      	orrs	r2, r4
 8014074:	b292      	uxth	r2, r2
 8014076:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014078:	697a      	ldr	r2, [r7, #20]
 801407a:	6879      	ldr	r1, [r7, #4]
 801407c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801407e:	f000 f909 	bl	8014294 <tcp_output_segment>
 8014082:	4603      	mov	r3, r0
 8014084:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d009      	beq.n	80140a2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	8b5b      	ldrh	r3, [r3, #26]
 8014092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014096:	b29a      	uxth	r2, r3
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	835a      	strh	r2, [r3, #26]
      return err;
 801409c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140a0:	e0d3      	b.n	801424a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80140a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a4:	681a      	ldr	r2, [r3, #0]
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	7d1b      	ldrb	r3, [r3, #20]
 80140ae:	2b02      	cmp	r3, #2
 80140b0:	d006      	beq.n	80140c0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	8b5b      	ldrh	r3, [r3, #26]
 80140b6:	f023 0303 	bic.w	r3, r3, #3
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80140c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	685b      	ldr	r3, [r3, #4]
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7f9 f8c5 	bl	800d256 <lwip_htonl>
 80140cc:	4604      	mov	r4, r0
 80140ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d0:	891b      	ldrh	r3, [r3, #8]
 80140d2:	461d      	mov	r5, r3
 80140d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d6:	68db      	ldr	r3, [r3, #12]
 80140d8:	899b      	ldrh	r3, [r3, #12]
 80140da:	b29b      	uxth	r3, r3
 80140dc:	4618      	mov	r0, r3
 80140de:	f7f9 f8a5 	bl	800d22c <lwip_htons>
 80140e2:	4603      	mov	r3, r0
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	f003 0303 	and.w	r3, r3, #3
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d00e      	beq.n	801410c <tcp_output+0x2a0>
 80140ee:	2301      	movs	r3, #1
 80140f0:	e00d      	b.n	801410e <tcp_output+0x2a2>
 80140f2:	bf00      	nop
 80140f4:	08022218 	.word	0x08022218
 80140f8:	0802275c 	.word	0x0802275c
 80140fc:	0802226c 	.word	0x0802226c
 8014100:	08022774 	.word	0x08022774
 8014104:	2000b6a8 	.word	0x2000b6a8
 8014108:	0802279c 	.word	0x0802279c
 801410c:	2300      	movs	r3, #0
 801410e:	442b      	add	r3, r5
 8014110:	4423      	add	r3, r4
 8014112:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	1ad3      	subs	r3, r2, r3
 801411c:	2b00      	cmp	r3, #0
 801411e:	da02      	bge.n	8014126 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	68ba      	ldr	r2, [r7, #8]
 8014124:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	891b      	ldrh	r3, [r3, #8]
 801412a:	461c      	mov	r4, r3
 801412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412e:	68db      	ldr	r3, [r3, #12]
 8014130:	899b      	ldrh	r3, [r3, #12]
 8014132:	b29b      	uxth	r3, r3
 8014134:	4618      	mov	r0, r3
 8014136:	f7f9 f879 	bl	800d22c <lwip_htons>
 801413a:	4603      	mov	r3, r0
 801413c:	b2db      	uxtb	r3, r3
 801413e:	f003 0303 	and.w	r3, r3, #3
 8014142:	2b00      	cmp	r3, #0
 8014144:	d001      	beq.n	801414a <tcp_output+0x2de>
 8014146:	2301      	movs	r3, #1
 8014148:	e000      	b.n	801414c <tcp_output+0x2e0>
 801414a:	2300      	movs	r3, #0
 801414c:	4423      	add	r3, r4
 801414e:	2b00      	cmp	r3, #0
 8014150:	d049      	beq.n	80141e6 <tcp_output+0x37a>
      seg->next = NULL;
 8014152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014154:	2200      	movs	r2, #0
 8014156:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801415c:	2b00      	cmp	r3, #0
 801415e:	d105      	bne.n	801416c <tcp_output+0x300>
        pcb->unacked = seg;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014164:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014168:	623b      	str	r3, [r7, #32]
 801416a:	e03f      	b.n	80141ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	685b      	ldr	r3, [r3, #4]
 8014172:	4618      	mov	r0, r3
 8014174:	f7f9 f86f 	bl	800d256 <lwip_htonl>
 8014178:	4604      	mov	r4, r0
 801417a:	6a3b      	ldr	r3, [r7, #32]
 801417c:	68db      	ldr	r3, [r3, #12]
 801417e:	685b      	ldr	r3, [r3, #4]
 8014180:	4618      	mov	r0, r3
 8014182:	f7f9 f868 	bl	800d256 <lwip_htonl>
 8014186:	4603      	mov	r3, r0
 8014188:	1ae3      	subs	r3, r4, r3
 801418a:	2b00      	cmp	r3, #0
 801418c:	da24      	bge.n	80141d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	3370      	adds	r3, #112	; 0x70
 8014192:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014194:	e002      	b.n	801419c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014196:	69fb      	ldr	r3, [r7, #28]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d011      	beq.n	80141c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	68db      	ldr	r3, [r3, #12]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7f9 f852 	bl	800d256 <lwip_htonl>
 80141b2:	4604      	mov	r4, r0
 80141b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b6:	68db      	ldr	r3, [r3, #12]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7f9 f84b 	bl	800d256 <lwip_htonl>
 80141c0:	4603      	mov	r3, r0
 80141c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	dbe6      	blt.n	8014196 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80141c8:	69fb      	ldr	r3, [r7, #28]
 80141ca:	681a      	ldr	r2, [r3, #0]
 80141cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80141d0:	69fb      	ldr	r3, [r7, #28]
 80141d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141d4:	601a      	str	r2, [r3, #0]
 80141d6:	e009      	b.n	80141ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80141d8:	6a3b      	ldr	r3, [r7, #32]
 80141da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80141de:	6a3b      	ldr	r3, [r7, #32]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	623b      	str	r3, [r7, #32]
 80141e4:	e002      	b.n	80141ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80141e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141e8:	f7fb ff1d 	bl	8010026 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80141f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d012      	beq.n	801421e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80141f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	4618      	mov	r0, r3
 8014200:	f7f9 f829 	bl	800d256 <lwip_htonl>
 8014204:	4602      	mov	r2, r0
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801420a:	1ad3      	subs	r3, r2, r3
 801420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801420e:	8912      	ldrh	r2, [r2, #8]
 8014210:	4413      	add	r3, r2
  while (seg != NULL &&
 8014212:	69ba      	ldr	r2, [r7, #24]
 8014214:	429a      	cmp	r2, r3
 8014216:	f4bf aed9 	bcs.w	8013fcc <tcp_output+0x160>
 801421a:	e000      	b.n	801421e <tcp_output+0x3b2>
      break;
 801421c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014222:	2b00      	cmp	r3, #0
 8014224:	d108      	bne.n	8014238 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2200      	movs	r2, #0
 801422a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801422e:	e004      	b.n	801423a <tcp_output+0x3ce>
    goto output_done;
 8014230:	bf00      	nop
 8014232:	e002      	b.n	801423a <tcp_output+0x3ce>
    goto output_done;
 8014234:	bf00      	nop
 8014236:	e000      	b.n	801423a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014238:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	8b5b      	ldrh	r3, [r3, #26]
 801423e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014242:	b29a      	uxth	r2, r3
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014248:	2300      	movs	r3, #0
}
 801424a:	4618      	mov	r0, r3
 801424c:	3728      	adds	r7, #40	; 0x28
 801424e:	46bd      	mov	sp, r7
 8014250:	bdb0      	pop	{r4, r5, r7, pc}
 8014252:	bf00      	nop

08014254 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b082      	sub	sp, #8
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d106      	bne.n	8014270 <tcp_output_segment_busy+0x1c>
 8014262:	4b09      	ldr	r3, [pc, #36]	; (8014288 <tcp_output_segment_busy+0x34>)
 8014264:	f240 529a 	movw	r2, #1434	; 0x59a
 8014268:	4908      	ldr	r1, [pc, #32]	; (801428c <tcp_output_segment_busy+0x38>)
 801426a:	4809      	ldr	r0, [pc, #36]	; (8014290 <tcp_output_segment_busy+0x3c>)
 801426c:	f004 fb5e 	bl	801892c <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	7b9b      	ldrb	r3, [r3, #14]
 8014276:	2b01      	cmp	r3, #1
 8014278:	d001      	beq.n	801427e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801427a:	2301      	movs	r3, #1
 801427c:	e000      	b.n	8014280 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801427e:	2300      	movs	r3, #0
}
 8014280:	4618      	mov	r0, r3
 8014282:	3708      	adds	r7, #8
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	08022218 	.word	0x08022218
 801428c:	080227b4 	.word	0x080227b4
 8014290:	0802226c 	.word	0x0802226c

08014294 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014294:	b5b0      	push	{r4, r5, r7, lr}
 8014296:	b08c      	sub	sp, #48	; 0x30
 8014298:	af04      	add	r7, sp, #16
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d106      	bne.n	80142b4 <tcp_output_segment+0x20>
 80142a6:	4b63      	ldr	r3, [pc, #396]	; (8014434 <tcp_output_segment+0x1a0>)
 80142a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80142ac:	4962      	ldr	r1, [pc, #392]	; (8014438 <tcp_output_segment+0x1a4>)
 80142ae:	4863      	ldr	r0, [pc, #396]	; (801443c <tcp_output_segment+0x1a8>)
 80142b0:	f004 fb3c 	bl	801892c <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d106      	bne.n	80142c8 <tcp_output_segment+0x34>
 80142ba:	4b5e      	ldr	r3, [pc, #376]	; (8014434 <tcp_output_segment+0x1a0>)
 80142bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80142c0:	495f      	ldr	r1, [pc, #380]	; (8014440 <tcp_output_segment+0x1ac>)
 80142c2:	485e      	ldr	r0, [pc, #376]	; (801443c <tcp_output_segment+0x1a8>)
 80142c4:	f004 fb32 	bl	801892c <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d106      	bne.n	80142dc <tcp_output_segment+0x48>
 80142ce:	4b59      	ldr	r3, [pc, #356]	; (8014434 <tcp_output_segment+0x1a0>)
 80142d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80142d4:	495b      	ldr	r1, [pc, #364]	; (8014444 <tcp_output_segment+0x1b0>)
 80142d6:	4859      	ldr	r0, [pc, #356]	; (801443c <tcp_output_segment+0x1a8>)
 80142d8:	f004 fb28 	bl	801892c <printf>

  if (tcp_output_segment_busy(seg)) {
 80142dc:	68f8      	ldr	r0, [r7, #12]
 80142de:	f7ff ffb9 	bl	8014254 <tcp_output_segment_busy>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d001      	beq.n	80142ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80142e8:	2300      	movs	r3, #0
 80142ea:	e09f      	b.n	801442c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	68dc      	ldr	r4, [r3, #12]
 80142f4:	4610      	mov	r0, r2
 80142f6:	f7f8 ffae 	bl	800d256 <lwip_htonl>
 80142fa:	4603      	mov	r3, r0
 80142fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	68dc      	ldr	r4, [r3, #12]
 8014306:	4610      	mov	r0, r2
 8014308:	f7f8 ff90 	bl	800d22c <lwip_htons>
 801430c:	4603      	mov	r3, r0
 801430e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014314:	68ba      	ldr	r2, [r7, #8]
 8014316:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014318:	441a      	add	r2, r3
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	68db      	ldr	r3, [r3, #12]
 8014322:	3314      	adds	r3, #20
 8014324:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	7a9b      	ldrb	r3, [r3, #10]
 801432a:	f003 0301 	and.w	r3, r3, #1
 801432e:	2b00      	cmp	r3, #0
 8014330:	d015      	beq.n	801435e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	3304      	adds	r3, #4
 8014336:	461a      	mov	r2, r3
 8014338:	6879      	ldr	r1, [r7, #4]
 801433a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801433e:	f7fc fa37 	bl	80107b0 <tcp_eff_send_mss_netif>
 8014342:	4603      	mov	r3, r0
 8014344:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014346:	8b7b      	ldrh	r3, [r7, #26]
 8014348:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801434c:	4618      	mov	r0, r3
 801434e:	f7f8 ff82 	bl	800d256 <lwip_htonl>
 8014352:	4602      	mov	r2, r0
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	3304      	adds	r3, #4
 801435c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014364:	2b00      	cmp	r3, #0
 8014366:	da02      	bge.n	801436e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	2200      	movs	r2, #0
 801436c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014372:	2b00      	cmp	r3, #0
 8014374:	d10c      	bne.n	8014390 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014376:	4b34      	ldr	r3, [pc, #208]	; (8014448 <tcp_output_segment+0x1b4>)
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	68db      	ldr	r3, [r3, #12]
 8014382:	685b      	ldr	r3, [r3, #4]
 8014384:	4618      	mov	r0, r3
 8014386:	f7f8 ff66 	bl	800d256 <lwip_htonl>
 801438a:	4602      	mov	r2, r0
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	68da      	ldr	r2, [r3, #12]
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	685b      	ldr	r3, [r3, #4]
 801439a:	1ad3      	subs	r3, r2, r3
 801439c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	8959      	ldrh	r1, [r3, #10]
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	8b3a      	ldrh	r2, [r7, #24]
 80143aa:	1a8a      	subs	r2, r1, r2
 80143ac:	b292      	uxth	r2, r2
 80143ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	8919      	ldrh	r1, [r3, #8]
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	8b3a      	ldrh	r2, [r7, #24]
 80143bc:	1a8a      	subs	r2, r1, r2
 80143be:	b292      	uxth	r2, r2
 80143c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	68d2      	ldr	r2, [r2, #12]
 80143ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	68db      	ldr	r3, [r3, #12]
 80143d0:	2200      	movs	r2, #0
 80143d2:	741a      	strb	r2, [r3, #16]
 80143d4:	2200      	movs	r2, #0
 80143d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	f103 0214 	add.w	r2, r3, #20
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	7a9b      	ldrb	r3, [r3, #10]
 80143e4:	009b      	lsls	r3, r3, #2
 80143e6:	f003 0304 	and.w	r3, r3, #4
 80143ea:	4413      	add	r3, r2
 80143ec:	69fa      	ldr	r2, [r7, #28]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d006      	beq.n	8014400 <tcp_output_segment+0x16c>
 80143f2:	4b10      	ldr	r3, [pc, #64]	; (8014434 <tcp_output_segment+0x1a0>)
 80143f4:	f240 621c 	movw	r2, #1564	; 0x61c
 80143f8:	4914      	ldr	r1, [pc, #80]	; (801444c <tcp_output_segment+0x1b8>)
 80143fa:	4810      	ldr	r0, [pc, #64]	; (801443c <tcp_output_segment+0x1a8>)
 80143fc:	f004 fa96 	bl	801892c <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	6858      	ldr	r0, [r3, #4]
 8014404:	68b9      	ldr	r1, [r7, #8]
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	1d1c      	adds	r4, r3, #4
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	7add      	ldrb	r5, [r3, #11]
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	7a9b      	ldrb	r3, [r3, #10]
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	9202      	str	r2, [sp, #8]
 8014416:	2206      	movs	r2, #6
 8014418:	9201      	str	r2, [sp, #4]
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	462b      	mov	r3, r5
 801441e:	4622      	mov	r2, r4
 8014420:	f002 fd96 	bl	8016f50 <ip4_output_if>
 8014424:	4603      	mov	r3, r0
 8014426:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3720      	adds	r7, #32
 8014430:	46bd      	mov	sp, r7
 8014432:	bdb0      	pop	{r4, r5, r7, pc}
 8014434:	08022218 	.word	0x08022218
 8014438:	080227dc 	.word	0x080227dc
 801443c:	0802226c 	.word	0x0802226c
 8014440:	080227fc 	.word	0x080227fc
 8014444:	0802281c 	.word	0x0802281c
 8014448:	2000b698 	.word	0x2000b698
 801444c:	08022840 	.word	0x08022840

08014450 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014450:	b5b0      	push	{r4, r5, r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d106      	bne.n	801446c <tcp_rexmit_rto_prepare+0x1c>
 801445e:	4b31      	ldr	r3, [pc, #196]	; (8014524 <tcp_rexmit_rto_prepare+0xd4>)
 8014460:	f240 6263 	movw	r2, #1635	; 0x663
 8014464:	4930      	ldr	r1, [pc, #192]	; (8014528 <tcp_rexmit_rto_prepare+0xd8>)
 8014466:	4831      	ldr	r0, [pc, #196]	; (801452c <tcp_rexmit_rto_prepare+0xdc>)
 8014468:	f004 fa60 	bl	801892c <printf>

  if (pcb->unacked == NULL) {
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014470:	2b00      	cmp	r3, #0
 8014472:	d102      	bne.n	801447a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014474:	f06f 0305 	mvn.w	r3, #5
 8014478:	e050      	b.n	801451c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801447e:	60fb      	str	r3, [r7, #12]
 8014480:	e00b      	b.n	801449a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014482:	68f8      	ldr	r0, [r7, #12]
 8014484:	f7ff fee6 	bl	8014254 <tcp_output_segment_busy>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d002      	beq.n	8014494 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801448e:	f06f 0305 	mvn.w	r3, #5
 8014492:	e043      	b.n	801451c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	60fb      	str	r3, [r7, #12]
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d1ef      	bne.n	8014482 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80144a2:	68f8      	ldr	r0, [r7, #12]
 80144a4:	f7ff fed6 	bl	8014254 <tcp_output_segment_busy>
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d002      	beq.n	80144b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80144ae:	f06f 0305 	mvn.w	r3, #5
 80144b2:	e033      	b.n	801451c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2200      	movs	r2, #0
 80144c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	8b5b      	ldrh	r3, [r3, #26]
 80144ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80144d2:	b29a      	uxth	r2, r3
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	685b      	ldr	r3, [r3, #4]
 80144de:	4618      	mov	r0, r3
 80144e0:	f7f8 feb9 	bl	800d256 <lwip_htonl>
 80144e4:	4604      	mov	r4, r0
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	891b      	ldrh	r3, [r3, #8]
 80144ea:	461d      	mov	r5, r3
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	68db      	ldr	r3, [r3, #12]
 80144f0:	899b      	ldrh	r3, [r3, #12]
 80144f2:	b29b      	uxth	r3, r3
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7f8 fe99 	bl	800d22c <lwip_htons>
 80144fa:	4603      	mov	r3, r0
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	f003 0303 	and.w	r3, r3, #3
 8014502:	2b00      	cmp	r3, #0
 8014504:	d001      	beq.n	801450a <tcp_rexmit_rto_prepare+0xba>
 8014506:	2301      	movs	r3, #1
 8014508:	e000      	b.n	801450c <tcp_rexmit_rto_prepare+0xbc>
 801450a:	2300      	movs	r3, #0
 801450c:	442b      	add	r3, r5
 801450e:	18e2      	adds	r2, r4, r3
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2200      	movs	r2, #0
 8014518:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801451a:	2300      	movs	r3, #0
}
 801451c:	4618      	mov	r0, r3
 801451e:	3710      	adds	r7, #16
 8014520:	46bd      	mov	sp, r7
 8014522:	bdb0      	pop	{r4, r5, r7, pc}
 8014524:	08022218 	.word	0x08022218
 8014528:	08022854 	.word	0x08022854
 801452c:	0802226c 	.word	0x0802226c

08014530 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d106      	bne.n	801454c <tcp_rexmit_rto_commit+0x1c>
 801453e:	4b0d      	ldr	r3, [pc, #52]	; (8014574 <tcp_rexmit_rto_commit+0x44>)
 8014540:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014544:	490c      	ldr	r1, [pc, #48]	; (8014578 <tcp_rexmit_rto_commit+0x48>)
 8014546:	480d      	ldr	r0, [pc, #52]	; (801457c <tcp_rexmit_rto_commit+0x4c>)
 8014548:	f004 f9f0 	bl	801892c <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014552:	2bff      	cmp	r3, #255	; 0xff
 8014554:	d007      	beq.n	8014566 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801455c:	3301      	adds	r3, #1
 801455e:	b2da      	uxtb	r2, r3
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f7ff fc80 	bl	8013e6c <tcp_output>
}
 801456c:	bf00      	nop
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}
 8014574:	08022218 	.word	0x08022218
 8014578:	08022878 	.word	0x08022878
 801457c:	0802226c 	.word	0x0802226c

08014580 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d106      	bne.n	801459c <tcp_rexmit_rto+0x1c>
 801458e:	4b0a      	ldr	r3, [pc, #40]	; (80145b8 <tcp_rexmit_rto+0x38>)
 8014590:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014594:	4909      	ldr	r1, [pc, #36]	; (80145bc <tcp_rexmit_rto+0x3c>)
 8014596:	480a      	ldr	r0, [pc, #40]	; (80145c0 <tcp_rexmit_rto+0x40>)
 8014598:	f004 f9c8 	bl	801892c <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f7ff ff57 	bl	8014450 <tcp_rexmit_rto_prepare>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d102      	bne.n	80145ae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f7ff ffc1 	bl	8014530 <tcp_rexmit_rto_commit>
  }
}
 80145ae:	bf00      	nop
 80145b0:	3708      	adds	r7, #8
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	08022218 	.word	0x08022218
 80145bc:	0802289c 	.word	0x0802289c
 80145c0:	0802226c 	.word	0x0802226c

080145c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80145c4:	b590      	push	{r4, r7, lr}
 80145c6:	b085      	sub	sp, #20
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d106      	bne.n	80145e0 <tcp_rexmit+0x1c>
 80145d2:	4b2f      	ldr	r3, [pc, #188]	; (8014690 <tcp_rexmit+0xcc>)
 80145d4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80145d8:	492e      	ldr	r1, [pc, #184]	; (8014694 <tcp_rexmit+0xd0>)
 80145da:	482f      	ldr	r0, [pc, #188]	; (8014698 <tcp_rexmit+0xd4>)
 80145dc:	f004 f9a6 	bl	801892c <printf>

  if (pcb->unacked == NULL) {
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d102      	bne.n	80145ee <tcp_rexmit+0x2a>
    return ERR_VAL;
 80145e8:	f06f 0305 	mvn.w	r3, #5
 80145ec:	e04c      	b.n	8014688 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145f2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80145f4:	68b8      	ldr	r0, [r7, #8]
 80145f6:	f7ff fe2d 	bl	8014254 <tcp_output_segment_busy>
 80145fa:	4603      	mov	r3, r0
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d002      	beq.n	8014606 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014600:	f06f 0305 	mvn.w	r3, #5
 8014604:	e040      	b.n	8014688 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014606:	68bb      	ldr	r3, [r7, #8]
 8014608:	681a      	ldr	r2, [r3, #0]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	336c      	adds	r3, #108	; 0x6c
 8014612:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014614:	e002      	b.n	801461c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d011      	beq.n	8014648 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	68db      	ldr	r3, [r3, #12]
 801462a:	685b      	ldr	r3, [r3, #4]
 801462c:	4618      	mov	r0, r3
 801462e:	f7f8 fe12 	bl	800d256 <lwip_htonl>
 8014632:	4604      	mov	r4, r0
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	685b      	ldr	r3, [r3, #4]
 801463a:	4618      	mov	r0, r3
 801463c:	f7f8 fe0b 	bl	800d256 <lwip_htonl>
 8014640:	4603      	mov	r3, r0
 8014642:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014644:	2b00      	cmp	r3, #0
 8014646:	dbe6      	blt.n	8014616 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	68ba      	ldr	r2, [r7, #8]
 8014654:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d103      	bne.n	8014666 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2200      	movs	r2, #0
 8014662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801466c:	2bff      	cmp	r3, #255	; 0xff
 801466e:	d007      	beq.n	8014680 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014676:	3301      	adds	r3, #1
 8014678:	b2da      	uxtb	r2, r3
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2200      	movs	r2, #0
 8014684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014686:	2300      	movs	r3, #0
}
 8014688:	4618      	mov	r0, r3
 801468a:	3714      	adds	r7, #20
 801468c:	46bd      	mov	sp, r7
 801468e:	bd90      	pop	{r4, r7, pc}
 8014690:	08022218 	.word	0x08022218
 8014694:	080228b8 	.word	0x080228b8
 8014698:	0802226c 	.word	0x0802226c

0801469c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d106      	bne.n	80146b8 <tcp_rexmit_fast+0x1c>
 80146aa:	4b2a      	ldr	r3, [pc, #168]	; (8014754 <tcp_rexmit_fast+0xb8>)
 80146ac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80146b0:	4929      	ldr	r1, [pc, #164]	; (8014758 <tcp_rexmit_fast+0xbc>)
 80146b2:	482a      	ldr	r0, [pc, #168]	; (801475c <tcp_rexmit_fast+0xc0>)
 80146b4:	f004 f93a 	bl	801892c <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d045      	beq.n	801474c <tcp_rexmit_fast+0xb0>
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	8b5b      	ldrh	r3, [r3, #26]
 80146c4:	f003 0304 	and.w	r3, r3, #4
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d13f      	bne.n	801474c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f7ff ff79 	bl	80145c4 <tcp_rexmit>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d139      	bne.n	801474c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80146e4:	4293      	cmp	r3, r2
 80146e6:	bf28      	it	cs
 80146e8:	4613      	movcs	r3, r2
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	da00      	bge.n	80146f2 <tcp_rexmit_fast+0x56>
 80146f0:	3301      	adds	r3, #1
 80146f2:	105b      	asrs	r3, r3, #1
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014702:	461a      	mov	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	429a      	cmp	r2, r3
 801470c:	d206      	bcs.n	801471c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	b29a      	uxth	r2, r3
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014726:	4619      	mov	r1, r3
 8014728:	0049      	lsls	r1, r1, #1
 801472a:	440b      	add	r3, r1
 801472c:	b29b      	uxth	r3, r3
 801472e:	4413      	add	r3, r2
 8014730:	b29a      	uxth	r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	8b5b      	ldrh	r3, [r3, #26]
 801473c:	f043 0304 	orr.w	r3, r3, #4
 8014740:	b29a      	uxth	r2, r3
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2200      	movs	r2, #0
 801474a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801474c:	bf00      	nop
 801474e:	3708      	adds	r7, #8
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}
 8014754:	08022218 	.word	0x08022218
 8014758:	080228d0 	.word	0x080228d0
 801475c:	0802226c 	.word	0x0802226c

08014760 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b086      	sub	sp, #24
 8014764:	af00      	add	r7, sp, #0
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	607b      	str	r3, [r7, #4]
 801476a:	460b      	mov	r3, r1
 801476c:	817b      	strh	r3, [r7, #10]
 801476e:	4613      	mov	r3, r2
 8014770:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014772:	897a      	ldrh	r2, [r7, #10]
 8014774:	893b      	ldrh	r3, [r7, #8]
 8014776:	4413      	add	r3, r2
 8014778:	b29b      	uxth	r3, r3
 801477a:	3314      	adds	r3, #20
 801477c:	b29b      	uxth	r3, r3
 801477e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014782:	4619      	mov	r1, r3
 8014784:	2022      	movs	r0, #34	; 0x22
 8014786:	f7f9 fda1 	bl	800e2cc <pbuf_alloc>
 801478a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d04d      	beq.n	801482e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014792:	897b      	ldrh	r3, [r7, #10]
 8014794:	3313      	adds	r3, #19
 8014796:	697a      	ldr	r2, [r7, #20]
 8014798:	8952      	ldrh	r2, [r2, #10]
 801479a:	4293      	cmp	r3, r2
 801479c:	db06      	blt.n	80147ac <tcp_output_alloc_header_common+0x4c>
 801479e:	4b26      	ldr	r3, [pc, #152]	; (8014838 <tcp_output_alloc_header_common+0xd8>)
 80147a0:	f240 7223 	movw	r2, #1827	; 0x723
 80147a4:	4925      	ldr	r1, [pc, #148]	; (801483c <tcp_output_alloc_header_common+0xdc>)
 80147a6:	4826      	ldr	r0, [pc, #152]	; (8014840 <tcp_output_alloc_header_common+0xe0>)
 80147a8:	f004 f8c0 	bl	801892c <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80147b2:	8c3b      	ldrh	r3, [r7, #32]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7f8 fd39 	bl	800d22c <lwip_htons>
 80147ba:	4603      	mov	r3, r0
 80147bc:	461a      	mov	r2, r3
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80147c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7f8 fd31 	bl	800d22c <lwip_htons>
 80147ca:	4603      	mov	r3, r0
 80147cc:	461a      	mov	r2, r3
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80147d8:	68f8      	ldr	r0, [r7, #12]
 80147da:	f7f8 fd3c 	bl	800d256 <lwip_htonl>
 80147de:	4602      	mov	r2, r0
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80147e4:	897b      	ldrh	r3, [r7, #10]
 80147e6:	089b      	lsrs	r3, r3, #2
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	3305      	adds	r3, #5
 80147ec:	b29b      	uxth	r3, r3
 80147ee:	031b      	lsls	r3, r3, #12
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	4313      	orrs	r3, r2
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7f8 fd15 	bl	800d22c <lwip_htons>
 8014802:	4603      	mov	r3, r0
 8014804:	461a      	mov	r2, r3
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801480a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801480c:	4618      	mov	r0, r3
 801480e:	f7f8 fd0d 	bl	800d22c <lwip_htons>
 8014812:	4603      	mov	r3, r0
 8014814:	461a      	mov	r2, r3
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	2200      	movs	r2, #0
 801481e:	741a      	strb	r2, [r3, #16]
 8014820:	2200      	movs	r2, #0
 8014822:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	2200      	movs	r2, #0
 8014828:	749a      	strb	r2, [r3, #18]
 801482a:	2200      	movs	r2, #0
 801482c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801482e:	697b      	ldr	r3, [r7, #20]
}
 8014830:	4618      	mov	r0, r3
 8014832:	3718      	adds	r7, #24
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}
 8014838:	08022218 	.word	0x08022218
 801483c:	080228f0 	.word	0x080228f0
 8014840:	0802226c 	.word	0x0802226c

08014844 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014844:	b5b0      	push	{r4, r5, r7, lr}
 8014846:	b08a      	sub	sp, #40	; 0x28
 8014848:	af04      	add	r7, sp, #16
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	607b      	str	r3, [r7, #4]
 801484e:	460b      	mov	r3, r1
 8014850:	817b      	strh	r3, [r7, #10]
 8014852:	4613      	mov	r3, r2
 8014854:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d106      	bne.n	801486a <tcp_output_alloc_header+0x26>
 801485c:	4b15      	ldr	r3, [pc, #84]	; (80148b4 <tcp_output_alloc_header+0x70>)
 801485e:	f240 7242 	movw	r2, #1858	; 0x742
 8014862:	4915      	ldr	r1, [pc, #84]	; (80148b8 <tcp_output_alloc_header+0x74>)
 8014864:	4815      	ldr	r0, [pc, #84]	; (80148bc <tcp_output_alloc_header+0x78>)
 8014866:	f004 f861 	bl	801892c <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	8adb      	ldrh	r3, [r3, #22]
 8014872:	68fa      	ldr	r2, [r7, #12]
 8014874:	8b12      	ldrh	r2, [r2, #24]
 8014876:	68f9      	ldr	r1, [r7, #12]
 8014878:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801487a:	893d      	ldrh	r5, [r7, #8]
 801487c:	897c      	ldrh	r4, [r7, #10]
 801487e:	9103      	str	r1, [sp, #12]
 8014880:	2110      	movs	r1, #16
 8014882:	9102      	str	r1, [sp, #8]
 8014884:	9201      	str	r2, [sp, #4]
 8014886:	9300      	str	r3, [sp, #0]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	462a      	mov	r2, r5
 801488c:	4621      	mov	r1, r4
 801488e:	f7ff ff67 	bl	8014760 <tcp_output_alloc_header_common>
 8014892:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d006      	beq.n	80148a8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801489e:	68fa      	ldr	r2, [r7, #12]
 80148a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80148a2:	441a      	add	r2, r3
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80148a8:	697b      	ldr	r3, [r7, #20]
}
 80148aa:	4618      	mov	r0, r3
 80148ac:	3718      	adds	r7, #24
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bdb0      	pop	{r4, r5, r7, pc}
 80148b2:	bf00      	nop
 80148b4:	08022218 	.word	0x08022218
 80148b8:	08022920 	.word	0x08022920
 80148bc:	0802226c 	.word	0x0802226c

080148c0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b088      	sub	sp, #32
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	60b9      	str	r1, [r7, #8]
 80148ca:	4611      	mov	r1, r2
 80148cc:	461a      	mov	r2, r3
 80148ce:	460b      	mov	r3, r1
 80148d0:	71fb      	strb	r3, [r7, #7]
 80148d2:	4613      	mov	r3, r2
 80148d4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80148d6:	2300      	movs	r3, #0
 80148d8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d106      	bne.n	80148ee <tcp_output_fill_options+0x2e>
 80148e0:	4b13      	ldr	r3, [pc, #76]	; (8014930 <tcp_output_fill_options+0x70>)
 80148e2:	f240 7256 	movw	r2, #1878	; 0x756
 80148e6:	4913      	ldr	r1, [pc, #76]	; (8014934 <tcp_output_fill_options+0x74>)
 80148e8:	4813      	ldr	r0, [pc, #76]	; (8014938 <tcp_output_fill_options+0x78>)
 80148ea:	f004 f81f 	bl	801892c <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80148f4:	69bb      	ldr	r3, [r7, #24]
 80148f6:	3314      	adds	r3, #20
 80148f8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80148fa:	69bb      	ldr	r3, [r7, #24]
 80148fc:	f103 0214 	add.w	r2, r3, #20
 8014900:	8bfb      	ldrh	r3, [r7, #30]
 8014902:	009b      	lsls	r3, r3, #2
 8014904:	4619      	mov	r1, r3
 8014906:	79fb      	ldrb	r3, [r7, #7]
 8014908:	009b      	lsls	r3, r3, #2
 801490a:	f003 0304 	and.w	r3, r3, #4
 801490e:	440b      	add	r3, r1
 8014910:	4413      	add	r3, r2
 8014912:	697a      	ldr	r2, [r7, #20]
 8014914:	429a      	cmp	r2, r3
 8014916:	d006      	beq.n	8014926 <tcp_output_fill_options+0x66>
 8014918:	4b05      	ldr	r3, [pc, #20]	; (8014930 <tcp_output_fill_options+0x70>)
 801491a:	f240 7275 	movw	r2, #1909	; 0x775
 801491e:	4907      	ldr	r1, [pc, #28]	; (801493c <tcp_output_fill_options+0x7c>)
 8014920:	4805      	ldr	r0, [pc, #20]	; (8014938 <tcp_output_fill_options+0x78>)
 8014922:	f004 f803 	bl	801892c <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014926:	bf00      	nop
 8014928:	3720      	adds	r7, #32
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	08022218 	.word	0x08022218
 8014934:	08022948 	.word	0x08022948
 8014938:	0802226c 	.word	0x0802226c
 801493c:	08022840 	.word	0x08022840

08014940 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b08a      	sub	sp, #40	; 0x28
 8014944:	af04      	add	r7, sp, #16
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
 801494c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d106      	bne.n	8014962 <tcp_output_control_segment+0x22>
 8014954:	4b1c      	ldr	r3, [pc, #112]	; (80149c8 <tcp_output_control_segment+0x88>)
 8014956:	f240 7287 	movw	r2, #1927	; 0x787
 801495a:	491c      	ldr	r1, [pc, #112]	; (80149cc <tcp_output_control_segment+0x8c>)
 801495c:	481c      	ldr	r0, [pc, #112]	; (80149d0 <tcp_output_control_segment+0x90>)
 801495e:	f003 ffe5 	bl	801892c <printf>

  netif = tcp_route(pcb, src, dst);
 8014962:	683a      	ldr	r2, [r7, #0]
 8014964:	6879      	ldr	r1, [r7, #4]
 8014966:	68f8      	ldr	r0, [r7, #12]
 8014968:	f7fe fae8 	bl	8012f3c <tcp_route>
 801496c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d102      	bne.n	801497a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014974:	23fc      	movs	r3, #252	; 0xfc
 8014976:	75fb      	strb	r3, [r7, #23]
 8014978:	e01c      	b.n	80149b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d006      	beq.n	801498e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	7adb      	ldrb	r3, [r3, #11]
 8014984:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	7a9b      	ldrb	r3, [r3, #10]
 801498a:	757b      	strb	r3, [r7, #21]
 801498c:	e003      	b.n	8014996 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801498e:	23ff      	movs	r3, #255	; 0xff
 8014990:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014992:	2300      	movs	r3, #0
 8014994:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014996:	7dba      	ldrb	r2, [r7, #22]
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	9302      	str	r3, [sp, #8]
 801499c:	2306      	movs	r3, #6
 801499e:	9301      	str	r3, [sp, #4]
 80149a0:	7d7b      	ldrb	r3, [r7, #21]
 80149a2:	9300      	str	r3, [sp, #0]
 80149a4:	4613      	mov	r3, r2
 80149a6:	683a      	ldr	r2, [r7, #0]
 80149a8:	6879      	ldr	r1, [r7, #4]
 80149aa:	68b8      	ldr	r0, [r7, #8]
 80149ac:	f002 fad0 	bl	8016f50 <ip4_output_if>
 80149b0:	4603      	mov	r3, r0
 80149b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80149b4:	68b8      	ldr	r0, [r7, #8]
 80149b6:	f7f9 ff6d 	bl	800e894 <pbuf_free>
  return err;
 80149ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3718      	adds	r7, #24
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	08022218 	.word	0x08022218
 80149cc:	08022970 	.word	0x08022970
 80149d0:	0802226c 	.word	0x0802226c

080149d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80149d4:	b590      	push	{r4, r7, lr}
 80149d6:	b08b      	sub	sp, #44	; 0x2c
 80149d8:	af04      	add	r7, sp, #16
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	607a      	str	r2, [r7, #4]
 80149e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d106      	bne.n	80149f6 <tcp_rst+0x22>
 80149e8:	4b1f      	ldr	r3, [pc, #124]	; (8014a68 <tcp_rst+0x94>)
 80149ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80149ee:	491f      	ldr	r1, [pc, #124]	; (8014a6c <tcp_rst+0x98>)
 80149f0:	481f      	ldr	r0, [pc, #124]	; (8014a70 <tcp_rst+0x9c>)
 80149f2:	f003 ff9b 	bl	801892c <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80149f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d106      	bne.n	8014a0a <tcp_rst+0x36>
 80149fc:	4b1a      	ldr	r3, [pc, #104]	; (8014a68 <tcp_rst+0x94>)
 80149fe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014a02:	491c      	ldr	r1, [pc, #112]	; (8014a74 <tcp_rst+0xa0>)
 8014a04:	481a      	ldr	r0, [pc, #104]	; (8014a70 <tcp_rst+0x9c>)
 8014a06:	f003 ff91 	bl	801892c <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014a0e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014a12:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014a14:	7dfb      	ldrb	r3, [r7, #23]
 8014a16:	b29c      	uxth	r4, r3
 8014a18:	68b8      	ldr	r0, [r7, #8]
 8014a1a:	f7f8 fc1c 	bl	800d256 <lwip_htonl>
 8014a1e:	4602      	mov	r2, r0
 8014a20:	8abb      	ldrh	r3, [r7, #20]
 8014a22:	9303      	str	r3, [sp, #12]
 8014a24:	2314      	movs	r3, #20
 8014a26:	9302      	str	r3, [sp, #8]
 8014a28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014a2a:	9301      	str	r3, [sp, #4]
 8014a2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014a2e:	9300      	str	r3, [sp, #0]
 8014a30:	4613      	mov	r3, r2
 8014a32:	2200      	movs	r2, #0
 8014a34:	4621      	mov	r1, r4
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7ff fe92 	bl	8014760 <tcp_output_alloc_header_common>
 8014a3c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014a3e:	693b      	ldr	r3, [r7, #16]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d00c      	beq.n	8014a5e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014a44:	7dfb      	ldrb	r3, [r7, #23]
 8014a46:	2200      	movs	r2, #0
 8014a48:	6939      	ldr	r1, [r7, #16]
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	f7ff ff38 	bl	80148c0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a52:	683a      	ldr	r2, [r7, #0]
 8014a54:	6939      	ldr	r1, [r7, #16]
 8014a56:	68f8      	ldr	r0, [r7, #12]
 8014a58:	f7ff ff72 	bl	8014940 <tcp_output_control_segment>
 8014a5c:	e000      	b.n	8014a60 <tcp_rst+0x8c>
    return;
 8014a5e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014a60:	371c      	adds	r7, #28
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd90      	pop	{r4, r7, pc}
 8014a66:	bf00      	nop
 8014a68:	08022218 	.word	0x08022218
 8014a6c:	0802299c 	.word	0x0802299c
 8014a70:	0802226c 	.word	0x0802226c
 8014a74:	080229b8 	.word	0x080229b8

08014a78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014a78:	b590      	push	{r4, r7, lr}
 8014a7a:	b087      	sub	sp, #28
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014a80:	2300      	movs	r3, #0
 8014a82:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014a84:	2300      	movs	r3, #0
 8014a86:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d106      	bne.n	8014a9c <tcp_send_empty_ack+0x24>
 8014a8e:	4b28      	ldr	r3, [pc, #160]	; (8014b30 <tcp_send_empty_ack+0xb8>)
 8014a90:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014a94:	4927      	ldr	r1, [pc, #156]	; (8014b34 <tcp_send_empty_ack+0xbc>)
 8014a96:	4828      	ldr	r0, [pc, #160]	; (8014b38 <tcp_send_empty_ack+0xc0>)
 8014a98:	f003 ff48 	bl	801892c <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a9c:	7dfb      	ldrb	r3, [r7, #23]
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	b2db      	uxtb	r3, r3
 8014aa2:	f003 0304 	and.w	r3, r3, #4
 8014aa6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014aa8:	7d7b      	ldrb	r3, [r7, #21]
 8014aaa:	b29c      	uxth	r4, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f8 fbd0 	bl	800d256 <lwip_htonl>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2200      	movs	r2, #0
 8014aba:	4621      	mov	r1, r4
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f7ff fec1 	bl	8014844 <tcp_output_alloc_header>
 8014ac2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d109      	bne.n	8014ade <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	8b5b      	ldrh	r3, [r3, #26]
 8014ace:	f043 0303 	orr.w	r3, r3, #3
 8014ad2:	b29a      	uxth	r2, r3
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014ad8:	f06f 0301 	mvn.w	r3, #1
 8014adc:	e023      	b.n	8014b26 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014ade:	7dbb      	ldrb	r3, [r7, #22]
 8014ae0:	7dfa      	ldrb	r2, [r7, #23]
 8014ae2:	6939      	ldr	r1, [r7, #16]
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f7ff feeb 	bl	80148c0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014aea:	687a      	ldr	r2, [r7, #4]
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	3304      	adds	r3, #4
 8014af0:	6939      	ldr	r1, [r7, #16]
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	f7ff ff24 	bl	8014940 <tcp_output_control_segment>
 8014af8:	4603      	mov	r3, r0
 8014afa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d007      	beq.n	8014b14 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	8b5b      	ldrh	r3, [r3, #26]
 8014b08:	f043 0303 	orr.w	r3, r3, #3
 8014b0c:	b29a      	uxth	r2, r3
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	835a      	strh	r2, [r3, #26]
 8014b12:	e006      	b.n	8014b22 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	8b5b      	ldrh	r3, [r3, #26]
 8014b18:	f023 0303 	bic.w	r3, r3, #3
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	371c      	adds	r7, #28
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd90      	pop	{r4, r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	08022218 	.word	0x08022218
 8014b34:	080229d4 	.word	0x080229d4
 8014b38:	0802226c 	.word	0x0802226c

08014b3c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014b3c:	b590      	push	{r4, r7, lr}
 8014b3e:	b087      	sub	sp, #28
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b44:	2300      	movs	r3, #0
 8014b46:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d106      	bne.n	8014b5c <tcp_keepalive+0x20>
 8014b4e:	4b18      	ldr	r3, [pc, #96]	; (8014bb0 <tcp_keepalive+0x74>)
 8014b50:	f640 0224 	movw	r2, #2084	; 0x824
 8014b54:	4917      	ldr	r1, [pc, #92]	; (8014bb4 <tcp_keepalive+0x78>)
 8014b56:	4818      	ldr	r0, [pc, #96]	; (8014bb8 <tcp_keepalive+0x7c>)
 8014b58:	f003 fee8 	bl	801892c <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014b5c:	7dfb      	ldrb	r3, [r7, #23]
 8014b5e:	b29c      	uxth	r4, r3
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b64:	3b01      	subs	r3, #1
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7f8 fb75 	bl	800d256 <lwip_htonl>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	2200      	movs	r2, #0
 8014b70:	4621      	mov	r1, r4
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f7ff fe66 	bl	8014844 <tcp_output_alloc_header>
 8014b78:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d102      	bne.n	8014b86 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014b80:	f04f 33ff 	mov.w	r3, #4294967295
 8014b84:	e010      	b.n	8014ba8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b86:	7dfb      	ldrb	r3, [r7, #23]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	6939      	ldr	r1, [r7, #16]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f7ff fe97 	bl	80148c0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	3304      	adds	r3, #4
 8014b98:	6939      	ldr	r1, [r7, #16]
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f7ff fed0 	bl	8014940 <tcp_output_control_segment>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	371c      	adds	r7, #28
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd90      	pop	{r4, r7, pc}
 8014bb0:	08022218 	.word	0x08022218
 8014bb4:	080229f4 	.word	0x080229f4
 8014bb8:	0802226c 	.word	0x0802226c

08014bbc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014bbc:	b590      	push	{r4, r7, lr}
 8014bbe:	b08b      	sub	sp, #44	; 0x2c
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d106      	bne.n	8014bde <tcp_zero_window_probe+0x22>
 8014bd0:	4b4c      	ldr	r3, [pc, #304]	; (8014d04 <tcp_zero_window_probe+0x148>)
 8014bd2:	f640 024f 	movw	r2, #2127	; 0x84f
 8014bd6:	494c      	ldr	r1, [pc, #304]	; (8014d08 <tcp_zero_window_probe+0x14c>)
 8014bd8:	484c      	ldr	r0, [pc, #304]	; (8014d0c <tcp_zero_window_probe+0x150>)
 8014bda:	f003 fea7 	bl	801892c <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014be2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014be4:	6a3b      	ldr	r3, [r7, #32]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d101      	bne.n	8014bee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014bea:	2300      	movs	r3, #0
 8014bec:	e086      	b.n	8014cfc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014bf4:	2bff      	cmp	r3, #255	; 0xff
 8014bf6:	d007      	beq.n	8014c08 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014bfe:	3301      	adds	r3, #1
 8014c00:	b2da      	uxtb	r2, r3
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014c08:	6a3b      	ldr	r3, [r7, #32]
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	899b      	ldrh	r3, [r3, #12]
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	4618      	mov	r0, r3
 8014c12:	f7f8 fb0b 	bl	800d22c <lwip_htons>
 8014c16:	4603      	mov	r3, r0
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	f003 0301 	and.w	r3, r3, #1
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d005      	beq.n	8014c2e <tcp_zero_window_probe+0x72>
 8014c22:	6a3b      	ldr	r3, [r7, #32]
 8014c24:	891b      	ldrh	r3, [r3, #8]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d101      	bne.n	8014c2e <tcp_zero_window_probe+0x72>
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	e000      	b.n	8014c30 <tcp_zero_window_probe+0x74>
 8014c2e:	2300      	movs	r3, #0
 8014c30:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014c32:	7ffb      	ldrb	r3, [r7, #31]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	bf0c      	ite	eq
 8014c38:	2301      	moveq	r3, #1
 8014c3a:	2300      	movne	r3, #0
 8014c3c:	b2db      	uxtb	r3, r3
 8014c3e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c44:	b299      	uxth	r1, r3
 8014c46:	6a3b      	ldr	r3, [r7, #32]
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	8bba      	ldrh	r2, [r7, #28]
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f7ff fdf8 	bl	8014844 <tcp_output_alloc_header>
 8014c54:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014c56:	69bb      	ldr	r3, [r7, #24]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d102      	bne.n	8014c62 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c60:	e04c      	b.n	8014cfc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014c68:	7ffb      	ldrb	r3, [r7, #31]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d011      	beq.n	8014c92 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	899b      	ldrh	r3, [r3, #12]
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	b21b      	sxth	r3, r3
 8014c76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014c7a:	b21c      	sxth	r4, r3
 8014c7c:	2011      	movs	r0, #17
 8014c7e:	f7f8 fad5 	bl	800d22c <lwip_htons>
 8014c82:	4603      	mov	r3, r0
 8014c84:	b21b      	sxth	r3, r3
 8014c86:	4323      	orrs	r3, r4
 8014c88:	b21b      	sxth	r3, r3
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	819a      	strh	r2, [r3, #12]
 8014c90:	e010      	b.n	8014cb4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014c92:	69bb      	ldr	r3, [r7, #24]
 8014c94:	685b      	ldr	r3, [r3, #4]
 8014c96:	3314      	adds	r3, #20
 8014c98:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014c9a:	6a3b      	ldr	r3, [r7, #32]
 8014c9c:	6858      	ldr	r0, [r3, #4]
 8014c9e:	6a3b      	ldr	r3, [r7, #32]
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	891a      	ldrh	r2, [r3, #8]
 8014ca4:	6a3b      	ldr	r3, [r7, #32]
 8014ca6:	891b      	ldrh	r3, [r3, #8]
 8014ca8:	1ad3      	subs	r3, r2, r3
 8014caa:	b29b      	uxth	r3, r3
 8014cac:	2201      	movs	r2, #1
 8014cae:	6939      	ldr	r1, [r7, #16]
 8014cb0:	f7f9 fff6 	bl	800eca0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014cb4:	6a3b      	ldr	r3, [r7, #32]
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7f8 facb 	bl	800d256 <lwip_htonl>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	1ad3      	subs	r3, r2, r3
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	da02      	bge.n	8014cd8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	68fa      	ldr	r2, [r7, #12]
 8014cd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cdc:	2200      	movs	r2, #0
 8014cde:	69b9      	ldr	r1, [r7, #24]
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f7ff fded 	bl	80148c0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ce6:	687a      	ldr	r2, [r7, #4]
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	3304      	adds	r3, #4
 8014cec:	69b9      	ldr	r1, [r7, #24]
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f7ff fe26 	bl	8014940 <tcp_output_control_segment>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014cf8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	372c      	adds	r7, #44	; 0x2c
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd90      	pop	{r4, r7, pc}
 8014d04:	08022218 	.word	0x08022218
 8014d08:	08022a10 	.word	0x08022a10
 8014d0c:	0802226c 	.word	0x0802226c

08014d10 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b082      	sub	sp, #8
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014d18:	f7fa f8b0 	bl	800ee7c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014d1c:	4b0a      	ldr	r3, [pc, #40]	; (8014d48 <tcpip_tcp_timer+0x38>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d103      	bne.n	8014d2c <tcpip_tcp_timer+0x1c>
 8014d24:	4b09      	ldr	r3, [pc, #36]	; (8014d4c <tcpip_tcp_timer+0x3c>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d005      	beq.n	8014d38 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	4908      	ldr	r1, [pc, #32]	; (8014d50 <tcpip_tcp_timer+0x40>)
 8014d30:	20fa      	movs	r0, #250	; 0xfa
 8014d32:	f000 f8f3 	bl	8014f1c <sys_timeout>
 8014d36:	e003      	b.n	8014d40 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014d38:	4b06      	ldr	r3, [pc, #24]	; (8014d54 <tcpip_tcp_timer+0x44>)
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	601a      	str	r2, [r3, #0]
  }
}
 8014d3e:	bf00      	nop
 8014d40:	bf00      	nop
 8014d42:	3708      	adds	r7, #8
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}
 8014d48:	2000b694 	.word	0x2000b694
 8014d4c:	2000b6a4 	.word	0x2000b6a4
 8014d50:	08014d11 	.word	0x08014d11
 8014d54:	20004aec 	.word	0x20004aec

08014d58 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014d5c:	4b0a      	ldr	r3, [pc, #40]	; (8014d88 <tcp_timer_needed+0x30>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d10f      	bne.n	8014d84 <tcp_timer_needed+0x2c>
 8014d64:	4b09      	ldr	r3, [pc, #36]	; (8014d8c <tcp_timer_needed+0x34>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d103      	bne.n	8014d74 <tcp_timer_needed+0x1c>
 8014d6c:	4b08      	ldr	r3, [pc, #32]	; (8014d90 <tcp_timer_needed+0x38>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d007      	beq.n	8014d84 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014d74:	4b04      	ldr	r3, [pc, #16]	; (8014d88 <tcp_timer_needed+0x30>)
 8014d76:	2201      	movs	r2, #1
 8014d78:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	4905      	ldr	r1, [pc, #20]	; (8014d94 <tcp_timer_needed+0x3c>)
 8014d7e:	20fa      	movs	r0, #250	; 0xfa
 8014d80:	f000 f8cc 	bl	8014f1c <sys_timeout>
  }
}
 8014d84:	bf00      	nop
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	20004aec 	.word	0x20004aec
 8014d8c:	2000b694 	.word	0x2000b694
 8014d90:	2000b6a4 	.word	0x2000b6a4
 8014d94:	08014d11 	.word	0x08014d11

08014d98 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b086      	sub	sp, #24
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	60b9      	str	r1, [r7, #8]
 8014da2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014da4:	200a      	movs	r0, #10
 8014da6:	f7f8 fef7 	bl	800db98 <memp_malloc>
 8014daa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d109      	bne.n	8014dc6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d151      	bne.n	8014e5c <sys_timeout_abs+0xc4>
 8014db8:	4b2a      	ldr	r3, [pc, #168]	; (8014e64 <sys_timeout_abs+0xcc>)
 8014dba:	22be      	movs	r2, #190	; 0xbe
 8014dbc:	492a      	ldr	r1, [pc, #168]	; (8014e68 <sys_timeout_abs+0xd0>)
 8014dbe:	482b      	ldr	r0, [pc, #172]	; (8014e6c <sys_timeout_abs+0xd4>)
 8014dc0:	f003 fdb4 	bl	801892c <printf>
    return;
 8014dc4:	e04a      	b.n	8014e5c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	68ba      	ldr	r2, [r7, #8]
 8014dd0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014dd8:	693b      	ldr	r3, [r7, #16]
 8014dda:	68fa      	ldr	r2, [r7, #12]
 8014ddc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014dde:	4b24      	ldr	r3, [pc, #144]	; (8014e70 <sys_timeout_abs+0xd8>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d103      	bne.n	8014dee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014de6:	4a22      	ldr	r2, [pc, #136]	; (8014e70 <sys_timeout_abs+0xd8>)
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	6013      	str	r3, [r2, #0]
    return;
 8014dec:	e037      	b.n	8014e5e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	685a      	ldr	r2, [r3, #4]
 8014df2:	4b1f      	ldr	r3, [pc, #124]	; (8014e70 <sys_timeout_abs+0xd8>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	1ad3      	subs	r3, r2, r3
 8014dfa:	0fdb      	lsrs	r3, r3, #31
 8014dfc:	f003 0301 	and.w	r3, r3, #1
 8014e00:	b2db      	uxtb	r3, r3
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d007      	beq.n	8014e16 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014e06:	4b1a      	ldr	r3, [pc, #104]	; (8014e70 <sys_timeout_abs+0xd8>)
 8014e08:	681a      	ldr	r2, [r3, #0]
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014e0e:	4a18      	ldr	r2, [pc, #96]	; (8014e70 <sys_timeout_abs+0xd8>)
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	6013      	str	r3, [r2, #0]
 8014e14:	e023      	b.n	8014e5e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014e16:	4b16      	ldr	r3, [pc, #88]	; (8014e70 <sys_timeout_abs+0xd8>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	617b      	str	r3, [r7, #20]
 8014e1c:	e01a      	b.n	8014e54 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d00b      	beq.n	8014e3e <sys_timeout_abs+0xa6>
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	685a      	ldr	r2, [r3, #4]
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	685b      	ldr	r3, [r3, #4]
 8014e30:	1ad3      	subs	r3, r2, r3
 8014e32:	0fdb      	lsrs	r3, r3, #31
 8014e34:	f003 0301 	and.w	r3, r3, #1
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d007      	beq.n	8014e4e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	681a      	ldr	r2, [r3, #0]
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	693a      	ldr	r2, [r7, #16]
 8014e4a:	601a      	str	r2, [r3, #0]
        break;
 8014e4c:	e007      	b.n	8014e5e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	617b      	str	r3, [r7, #20]
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d1e1      	bne.n	8014e1e <sys_timeout_abs+0x86>
 8014e5a:	e000      	b.n	8014e5e <sys_timeout_abs+0xc6>
    return;
 8014e5c:	bf00      	nop
      }
    }
  }
}
 8014e5e:	3718      	adds	r7, #24
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	08022a34 	.word	0x08022a34
 8014e68:	08022a68 	.word	0x08022a68
 8014e6c:	08022aa8 	.word	0x08022aa8
 8014e70:	20004ae4 	.word	0x20004ae4

08014e74 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	685b      	ldr	r3, [r3, #4]
 8014e84:	4798      	blx	r3

  now = sys_now();
 8014e86:	f7f3 f9d5 	bl	8008234 <sys_now>
 8014e8a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	681a      	ldr	r2, [r3, #0]
 8014e90:	4b0f      	ldr	r3, [pc, #60]	; (8014ed0 <lwip_cyclic_timer+0x5c>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	4413      	add	r3, r2
 8014e96:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014e98:	68fa      	ldr	r2, [r7, #12]
 8014e9a:	693b      	ldr	r3, [r7, #16]
 8014e9c:	1ad3      	subs	r3, r2, r3
 8014e9e:	0fdb      	lsrs	r3, r3, #31
 8014ea0:	f003 0301 	and.w	r3, r3, #1
 8014ea4:	b2db      	uxtb	r3, r3
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d009      	beq.n	8014ebe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	4413      	add	r3, r2
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	4907      	ldr	r1, [pc, #28]	; (8014ed4 <lwip_cyclic_timer+0x60>)
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7ff ff6e 	bl	8014d98 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014ebc:	e004      	b.n	8014ec8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	4904      	ldr	r1, [pc, #16]	; (8014ed4 <lwip_cyclic_timer+0x60>)
 8014ec2:	68f8      	ldr	r0, [r7, #12]
 8014ec4:	f7ff ff68 	bl	8014d98 <sys_timeout_abs>
}
 8014ec8:	bf00      	nop
 8014eca:	3718      	adds	r7, #24
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	20004ae8 	.word	0x20004ae8
 8014ed4:	08014e75 	.word	0x08014e75

08014ed8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ede:	2301      	movs	r3, #1
 8014ee0:	607b      	str	r3, [r7, #4]
 8014ee2:	e00e      	b.n	8014f02 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014ee4:	4a0b      	ldr	r2, [pc, #44]	; (8014f14 <sys_timeouts_init+0x3c>)
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	00db      	lsls	r3, r3, #3
 8014ef0:	4a08      	ldr	r2, [pc, #32]	; (8014f14 <sys_timeouts_init+0x3c>)
 8014ef2:	4413      	add	r3, r2
 8014ef4:	461a      	mov	r2, r3
 8014ef6:	4908      	ldr	r1, [pc, #32]	; (8014f18 <sys_timeouts_init+0x40>)
 8014ef8:	f000 f810 	bl	8014f1c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	3301      	adds	r3, #1
 8014f00:	607b      	str	r3, [r7, #4]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2b02      	cmp	r3, #2
 8014f06:	d9ed      	bls.n	8014ee4 <sys_timeouts_init+0xc>
  }
}
 8014f08:	bf00      	nop
 8014f0a:	bf00      	nop
 8014f0c:	3708      	adds	r7, #8
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	08023658 	.word	0x08023658
 8014f18:	08014e75 	.word	0x08014e75

08014f1c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b086      	sub	sp, #24
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	60f8      	str	r0, [r7, #12]
 8014f24:	60b9      	str	r1, [r7, #8]
 8014f26:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f2e:	d306      	bcc.n	8014f3e <sys_timeout+0x22>
 8014f30:	4b0a      	ldr	r3, [pc, #40]	; (8014f5c <sys_timeout+0x40>)
 8014f32:	f240 1229 	movw	r2, #297	; 0x129
 8014f36:	490a      	ldr	r1, [pc, #40]	; (8014f60 <sys_timeout+0x44>)
 8014f38:	480a      	ldr	r0, [pc, #40]	; (8014f64 <sys_timeout+0x48>)
 8014f3a:	f003 fcf7 	bl	801892c <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014f3e:	f7f3 f979 	bl	8008234 <sys_now>
 8014f42:	4602      	mov	r2, r0
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	4413      	add	r3, r2
 8014f48:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	68b9      	ldr	r1, [r7, #8]
 8014f4e:	6978      	ldr	r0, [r7, #20]
 8014f50:	f7ff ff22 	bl	8014d98 <sys_timeout_abs>
#endif
}
 8014f54:	bf00      	nop
 8014f56:	3718      	adds	r7, #24
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}
 8014f5c:	08022a34 	.word	0x08022a34
 8014f60:	08022ad0 	.word	0x08022ad0
 8014f64:	08022aa8 	.word	0x08022aa8

08014f68 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014f6e:	f7f3 f961 	bl	8008234 <sys_now>
 8014f72:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014f74:	4b17      	ldr	r3, [pc, #92]	; (8014fd4 <sys_check_timeouts+0x6c>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d022      	beq.n	8014fc6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	1ad3      	subs	r3, r2, r3
 8014f88:	0fdb      	lsrs	r3, r3, #31
 8014f8a:	f003 0301 	and.w	r3, r3, #1
 8014f8e:	b2db      	uxtb	r3, r3
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d11a      	bne.n	8014fca <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	4a0e      	ldr	r2, [pc, #56]	; (8014fd4 <sys_check_timeouts+0x6c>)
 8014f9a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	689b      	ldr	r3, [r3, #8]
 8014fa0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014fa2:	68bb      	ldr	r3, [r7, #8]
 8014fa4:	68db      	ldr	r3, [r3, #12]
 8014fa6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	4a0a      	ldr	r2, [pc, #40]	; (8014fd8 <sys_check_timeouts+0x70>)
 8014fae:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014fb0:	68b9      	ldr	r1, [r7, #8]
 8014fb2:	200a      	movs	r0, #10
 8014fb4:	f7f8 fe42 	bl	800dc3c <memp_free>
    if (handler != NULL) {
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d0da      	beq.n	8014f74 <sys_check_timeouts+0xc>
      handler(arg);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6838      	ldr	r0, [r7, #0]
 8014fc2:	4798      	blx	r3
  do {
 8014fc4:	e7d6      	b.n	8014f74 <sys_check_timeouts+0xc>
      return;
 8014fc6:	bf00      	nop
 8014fc8:	e000      	b.n	8014fcc <sys_check_timeouts+0x64>
      return;
 8014fca:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	20004ae4 	.word	0x20004ae4
 8014fd8:	20004ae8 	.word	0x20004ae8

08014fdc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014fe2:	4b16      	ldr	r3, [pc, #88]	; (801503c <sys_timeouts_sleeptime+0x60>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d102      	bne.n	8014ff0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014fea:	f04f 33ff 	mov.w	r3, #4294967295
 8014fee:	e020      	b.n	8015032 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014ff0:	f7f3 f920 	bl	8008234 <sys_now>
 8014ff4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014ff6:	4b11      	ldr	r3, [pc, #68]	; (801503c <sys_timeouts_sleeptime+0x60>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	685a      	ldr	r2, [r3, #4]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	1ad3      	subs	r3, r2, r3
 8015000:	0fdb      	lsrs	r3, r3, #31
 8015002:	f003 0301 	and.w	r3, r3, #1
 8015006:	b2db      	uxtb	r3, r3
 8015008:	2b00      	cmp	r3, #0
 801500a:	d001      	beq.n	8015010 <sys_timeouts_sleeptime+0x34>
    return 0;
 801500c:	2300      	movs	r3, #0
 801500e:	e010      	b.n	8015032 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015010:	4b0a      	ldr	r3, [pc, #40]	; (801503c <sys_timeouts_sleeptime+0x60>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	685a      	ldr	r2, [r3, #4]
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	1ad3      	subs	r3, r2, r3
 801501a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	da06      	bge.n	8015030 <sys_timeouts_sleeptime+0x54>
 8015022:	4b07      	ldr	r3, [pc, #28]	; (8015040 <sys_timeouts_sleeptime+0x64>)
 8015024:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015028:	4906      	ldr	r1, [pc, #24]	; (8015044 <sys_timeouts_sleeptime+0x68>)
 801502a:	4807      	ldr	r0, [pc, #28]	; (8015048 <sys_timeouts_sleeptime+0x6c>)
 801502c:	f003 fc7e 	bl	801892c <printf>
    return ret;
 8015030:	683b      	ldr	r3, [r7, #0]
  }
}
 8015032:	4618      	mov	r0, r3
 8015034:	3708      	adds	r7, #8
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	20004ae4 	.word	0x20004ae4
 8015040:	08022a34 	.word	0x08022a34
 8015044:	08022b08 	.word	0x08022b08
 8015048:	08022aa8 	.word	0x08022aa8

0801504c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015050:	f003 fc7e 	bl	8018950 <rand>
 8015054:	4603      	mov	r3, r0
 8015056:	b29b      	uxth	r3, r3
 8015058:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801505c:	b29b      	uxth	r3, r3
 801505e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015062:	b29a      	uxth	r2, r3
 8015064:	4b01      	ldr	r3, [pc, #4]	; (801506c <udp_init+0x20>)
 8015066:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015068:	bf00      	nop
 801506a:	bd80      	pop	{r7, pc}
 801506c:	20000034 	.word	0x20000034

08015070 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015070:	b480      	push	{r7}
 8015072:	b083      	sub	sp, #12
 8015074:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015076:	2300      	movs	r3, #0
 8015078:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801507a:	4b17      	ldr	r3, [pc, #92]	; (80150d8 <udp_new_port+0x68>)
 801507c:	881b      	ldrh	r3, [r3, #0]
 801507e:	1c5a      	adds	r2, r3, #1
 8015080:	b291      	uxth	r1, r2
 8015082:	4a15      	ldr	r2, [pc, #84]	; (80150d8 <udp_new_port+0x68>)
 8015084:	8011      	strh	r1, [r2, #0]
 8015086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801508a:	4293      	cmp	r3, r2
 801508c:	d103      	bne.n	8015096 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801508e:	4b12      	ldr	r3, [pc, #72]	; (80150d8 <udp_new_port+0x68>)
 8015090:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015094:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015096:	4b11      	ldr	r3, [pc, #68]	; (80150dc <udp_new_port+0x6c>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	603b      	str	r3, [r7, #0]
 801509c:	e011      	b.n	80150c2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	8a5a      	ldrh	r2, [r3, #18]
 80150a2:	4b0d      	ldr	r3, [pc, #52]	; (80150d8 <udp_new_port+0x68>)
 80150a4:	881b      	ldrh	r3, [r3, #0]
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d108      	bne.n	80150bc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80150aa:	88fb      	ldrh	r3, [r7, #6]
 80150ac:	3301      	adds	r3, #1
 80150ae:	80fb      	strh	r3, [r7, #6]
 80150b0:	88fb      	ldrh	r3, [r7, #6]
 80150b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80150b6:	d3e0      	bcc.n	801507a <udp_new_port+0xa>
        return 0;
 80150b8:	2300      	movs	r3, #0
 80150ba:	e007      	b.n	80150cc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	68db      	ldr	r3, [r3, #12]
 80150c0:	603b      	str	r3, [r7, #0]
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1ea      	bne.n	801509e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80150c8:	4b03      	ldr	r3, [pc, #12]	; (80150d8 <udp_new_port+0x68>)
 80150ca:	881b      	ldrh	r3, [r3, #0]
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	370c      	adds	r7, #12
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr
 80150d8:	20000034 	.word	0x20000034
 80150dc:	2000b6ac 	.word	0x2000b6ac

080150e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b084      	sub	sp, #16
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	60b9      	str	r1, [r7, #8]
 80150ea:	4613      	mov	r3, r2
 80150ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d105      	bne.n	8015100 <udp_input_local_match+0x20>
 80150f4:	4b27      	ldr	r3, [pc, #156]	; (8015194 <udp_input_local_match+0xb4>)
 80150f6:	2287      	movs	r2, #135	; 0x87
 80150f8:	4927      	ldr	r1, [pc, #156]	; (8015198 <udp_input_local_match+0xb8>)
 80150fa:	4828      	ldr	r0, [pc, #160]	; (801519c <udp_input_local_match+0xbc>)
 80150fc:	f003 fc16 	bl	801892c <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d105      	bne.n	8015112 <udp_input_local_match+0x32>
 8015106:	4b23      	ldr	r3, [pc, #140]	; (8015194 <udp_input_local_match+0xb4>)
 8015108:	2288      	movs	r2, #136	; 0x88
 801510a:	4925      	ldr	r1, [pc, #148]	; (80151a0 <udp_input_local_match+0xc0>)
 801510c:	4823      	ldr	r0, [pc, #140]	; (801519c <udp_input_local_match+0xbc>)
 801510e:	f003 fc0d 	bl	801892c <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	7a1b      	ldrb	r3, [r3, #8]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d00b      	beq.n	8015132 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	7a1a      	ldrb	r2, [r3, #8]
 801511e:	4b21      	ldr	r3, [pc, #132]	; (80151a4 <udp_input_local_match+0xc4>)
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015126:	3301      	adds	r3, #1
 8015128:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801512a:	429a      	cmp	r2, r3
 801512c:	d001      	beq.n	8015132 <udp_input_local_match+0x52>
    return 0;
 801512e:	2300      	movs	r3, #0
 8015130:	e02b      	b.n	801518a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015132:	79fb      	ldrb	r3, [r7, #7]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d018      	beq.n	801516a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d013      	beq.n	8015166 <udp_input_local_match+0x86>
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d00f      	beq.n	8015166 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015146:	4b17      	ldr	r3, [pc, #92]	; (80151a4 <udp_input_local_match+0xc4>)
 8015148:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801514e:	d00a      	beq.n	8015166 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	681a      	ldr	r2, [r3, #0]
 8015154:	4b13      	ldr	r3, [pc, #76]	; (80151a4 <udp_input_local_match+0xc4>)
 8015156:	695b      	ldr	r3, [r3, #20]
 8015158:	405a      	eors	r2, r3
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	3308      	adds	r3, #8
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015162:	2b00      	cmp	r3, #0
 8015164:	d110      	bne.n	8015188 <udp_input_local_match+0xa8>
          return 1;
 8015166:	2301      	movs	r3, #1
 8015168:	e00f      	b.n	801518a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d009      	beq.n	8015184 <udp_input_local_match+0xa4>
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d005      	beq.n	8015184 <udp_input_local_match+0xa4>
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	4b09      	ldr	r3, [pc, #36]	; (80151a4 <udp_input_local_match+0xc4>)
 801517e:	695b      	ldr	r3, [r3, #20]
 8015180:	429a      	cmp	r2, r3
 8015182:	d101      	bne.n	8015188 <udp_input_local_match+0xa8>
        return 1;
 8015184:	2301      	movs	r3, #1
 8015186:	e000      	b.n	801518a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015188:	2300      	movs	r3, #0
}
 801518a:	4618      	mov	r0, r3
 801518c:	3710      	adds	r7, #16
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}
 8015192:	bf00      	nop
 8015194:	08022b1c 	.word	0x08022b1c
 8015198:	08022b4c 	.word	0x08022b4c
 801519c:	08022b70 	.word	0x08022b70
 80151a0:	08022b98 	.word	0x08022b98
 80151a4:	20007f80 	.word	0x20007f80

080151a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80151a8:	b590      	push	{r4, r7, lr}
 80151aa:	b08d      	sub	sp, #52	; 0x34
 80151ac:	af02      	add	r7, sp, #8
 80151ae:	6078      	str	r0, [r7, #4]
 80151b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80151b2:	2300      	movs	r3, #0
 80151b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d105      	bne.n	80151c8 <udp_input+0x20>
 80151bc:	4b7c      	ldr	r3, [pc, #496]	; (80153b0 <udp_input+0x208>)
 80151be:	22cf      	movs	r2, #207	; 0xcf
 80151c0:	497c      	ldr	r1, [pc, #496]	; (80153b4 <udp_input+0x20c>)
 80151c2:	487d      	ldr	r0, [pc, #500]	; (80153b8 <udp_input+0x210>)
 80151c4:	f003 fbb2 	bl	801892c <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d105      	bne.n	80151da <udp_input+0x32>
 80151ce:	4b78      	ldr	r3, [pc, #480]	; (80153b0 <udp_input+0x208>)
 80151d0:	22d0      	movs	r2, #208	; 0xd0
 80151d2:	497a      	ldr	r1, [pc, #488]	; (80153bc <udp_input+0x214>)
 80151d4:	4878      	ldr	r0, [pc, #480]	; (80153b8 <udp_input+0x210>)
 80151d6:	f003 fba9 	bl	801892c <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	895b      	ldrh	r3, [r3, #10]
 80151de:	2b07      	cmp	r3, #7
 80151e0:	d803      	bhi.n	80151ea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f7f9 fb56 	bl	800e894 <pbuf_free>
    goto end;
 80151e8:	e0de      	b.n	80153a8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80151f0:	4b73      	ldr	r3, [pc, #460]	; (80153c0 <udp_input+0x218>)
 80151f2:	695b      	ldr	r3, [r3, #20]
 80151f4:	4a72      	ldr	r2, [pc, #456]	; (80153c0 <udp_input+0x218>)
 80151f6:	6812      	ldr	r2, [r2, #0]
 80151f8:	4611      	mov	r1, r2
 80151fa:	4618      	mov	r0, r3
 80151fc:	f001 ff80 	bl	8017100 <ip4_addr_isbroadcast_u32>
 8015200:	4603      	mov	r3, r0
 8015202:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	881b      	ldrh	r3, [r3, #0]
 8015208:	b29b      	uxth	r3, r3
 801520a:	4618      	mov	r0, r3
 801520c:	f7f8 f80e 	bl	800d22c <lwip_htons>
 8015210:	4603      	mov	r3, r0
 8015212:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	885b      	ldrh	r3, [r3, #2]
 8015218:	b29b      	uxth	r3, r3
 801521a:	4618      	mov	r0, r3
 801521c:	f7f8 f806 	bl	800d22c <lwip_htons>
 8015220:	4603      	mov	r3, r0
 8015222:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015224:	2300      	movs	r3, #0
 8015226:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015228:	2300      	movs	r3, #0
 801522a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801522c:	2300      	movs	r3, #0
 801522e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015230:	4b64      	ldr	r3, [pc, #400]	; (80153c4 <udp_input+0x21c>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	627b      	str	r3, [r7, #36]	; 0x24
 8015236:	e054      	b.n	80152e2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523a:	8a5b      	ldrh	r3, [r3, #18]
 801523c:	89fa      	ldrh	r2, [r7, #14]
 801523e:	429a      	cmp	r2, r3
 8015240:	d14a      	bne.n	80152d8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015242:	7cfb      	ldrb	r3, [r7, #19]
 8015244:	461a      	mov	r2, r3
 8015246:	6839      	ldr	r1, [r7, #0]
 8015248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801524a:	f7ff ff49 	bl	80150e0 <udp_input_local_match>
 801524e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015250:	2b00      	cmp	r3, #0
 8015252:	d041      	beq.n	80152d8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015256:	7c1b      	ldrb	r3, [r3, #16]
 8015258:	f003 0304 	and.w	r3, r3, #4
 801525c:	2b00      	cmp	r3, #0
 801525e:	d11d      	bne.n	801529c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015260:	69fb      	ldr	r3, [r7, #28]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d102      	bne.n	801526c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015268:	61fb      	str	r3, [r7, #28]
 801526a:	e017      	b.n	801529c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801526c:	7cfb      	ldrb	r3, [r7, #19]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d014      	beq.n	801529c <udp_input+0xf4>
 8015272:	4b53      	ldr	r3, [pc, #332]	; (80153c0 <udp_input+0x218>)
 8015274:	695b      	ldr	r3, [r3, #20]
 8015276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801527a:	d10f      	bne.n	801529c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801527c:	69fb      	ldr	r3, [r7, #28]
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	3304      	adds	r3, #4
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	429a      	cmp	r2, r3
 8015288:	d008      	beq.n	801529c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	3304      	adds	r3, #4
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	429a      	cmp	r2, r3
 8015296:	d101      	bne.n	801529c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529e:	8a9b      	ldrh	r3, [r3, #20]
 80152a0:	8a3a      	ldrh	r2, [r7, #16]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d118      	bne.n	80152d8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80152a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d005      	beq.n	80152ba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80152ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b0:	685a      	ldr	r2, [r3, #4]
 80152b2:	4b43      	ldr	r3, [pc, #268]	; (80153c0 <udp_input+0x218>)
 80152b4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d10e      	bne.n	80152d8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80152ba:	6a3b      	ldr	r3, [r7, #32]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d014      	beq.n	80152ea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80152c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c2:	68da      	ldr	r2, [r3, #12]
 80152c4:	6a3b      	ldr	r3, [r7, #32]
 80152c6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80152c8:	4b3e      	ldr	r3, [pc, #248]	; (80153c4 <udp_input+0x21c>)
 80152ca:	681a      	ldr	r2, [r3, #0]
 80152cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80152d0:	4a3c      	ldr	r2, [pc, #240]	; (80153c4 <udp_input+0x21c>)
 80152d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80152d6:	e008      	b.n	80152ea <udp_input+0x142>
      }
    }

    prev = pcb;
 80152d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152da:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80152dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152de:	68db      	ldr	r3, [r3, #12]
 80152e0:	627b      	str	r3, [r7, #36]	; 0x24
 80152e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d1a7      	bne.n	8015238 <udp_input+0x90>
 80152e8:	e000      	b.n	80152ec <udp_input+0x144>
        break;
 80152ea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80152ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d101      	bne.n	80152f6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80152f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d002      	beq.n	8015302 <udp_input+0x15a>
    for_us = 1;
 80152fc:	2301      	movs	r3, #1
 80152fe:	76fb      	strb	r3, [r7, #27]
 8015300:	e00a      	b.n	8015318 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	3304      	adds	r3, #4
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	4b2d      	ldr	r3, [pc, #180]	; (80153c0 <udp_input+0x218>)
 801530a:	695b      	ldr	r3, [r3, #20]
 801530c:	429a      	cmp	r2, r3
 801530e:	bf0c      	ite	eq
 8015310:	2301      	moveq	r3, #1
 8015312:	2300      	movne	r3, #0
 8015314:	b2db      	uxtb	r3, r3
 8015316:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015318:	7efb      	ldrb	r3, [r7, #27]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d041      	beq.n	80153a2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801531e:	2108      	movs	r1, #8
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f7f9 fa31 	bl	800e788 <pbuf_remove_header>
 8015326:	4603      	mov	r3, r0
 8015328:	2b00      	cmp	r3, #0
 801532a:	d00a      	beq.n	8015342 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801532c:	4b20      	ldr	r3, [pc, #128]	; (80153b0 <udp_input+0x208>)
 801532e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015332:	4925      	ldr	r1, [pc, #148]	; (80153c8 <udp_input+0x220>)
 8015334:	4820      	ldr	r0, [pc, #128]	; (80153b8 <udp_input+0x210>)
 8015336:	f003 faf9 	bl	801892c <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f7f9 faaa 	bl	800e894 <pbuf_free>
      goto end;
 8015340:	e032      	b.n	80153a8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015344:	2b00      	cmp	r3, #0
 8015346:	d012      	beq.n	801536e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534a:	699b      	ldr	r3, [r3, #24]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d00a      	beq.n	8015366 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015352:	699c      	ldr	r4, [r3, #24]
 8015354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015356:	69d8      	ldr	r0, [r3, #28]
 8015358:	8a3b      	ldrh	r3, [r7, #16]
 801535a:	9300      	str	r3, [sp, #0]
 801535c:	4b1b      	ldr	r3, [pc, #108]	; (80153cc <udp_input+0x224>)
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015362:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015364:	e021      	b.n	80153aa <udp_input+0x202>
        pbuf_free(p);
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f7f9 fa94 	bl	800e894 <pbuf_free>
        goto end;
 801536c:	e01c      	b.n	80153a8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801536e:	7cfb      	ldrb	r3, [r7, #19]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d112      	bne.n	801539a <udp_input+0x1f2>
 8015374:	4b12      	ldr	r3, [pc, #72]	; (80153c0 <udp_input+0x218>)
 8015376:	695b      	ldr	r3, [r3, #20]
 8015378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801537c:	2be0      	cmp	r3, #224	; 0xe0
 801537e:	d00c      	beq.n	801539a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015380:	4b0f      	ldr	r3, [pc, #60]	; (80153c0 <udp_input+0x218>)
 8015382:	899b      	ldrh	r3, [r3, #12]
 8015384:	3308      	adds	r3, #8
 8015386:	b29b      	uxth	r3, r3
 8015388:	b21b      	sxth	r3, r3
 801538a:	4619      	mov	r1, r3
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f7f9 fa6e 	bl	800e86e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015392:	2103      	movs	r1, #3
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f001 fb93 	bl	8016ac0 <icmp_dest_unreach>
      pbuf_free(p);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f7f9 fa7a 	bl	800e894 <pbuf_free>
  return;
 80153a0:	e003      	b.n	80153aa <udp_input+0x202>
    pbuf_free(p);
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	f7f9 fa76 	bl	800e894 <pbuf_free>
  return;
 80153a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80153aa:	372c      	adds	r7, #44	; 0x2c
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd90      	pop	{r4, r7, pc}
 80153b0:	08022b1c 	.word	0x08022b1c
 80153b4:	08022bc0 	.word	0x08022bc0
 80153b8:	08022b70 	.word	0x08022b70
 80153bc:	08022bd8 	.word	0x08022bd8
 80153c0:	20007f80 	.word	0x20007f80
 80153c4:	2000b6ac 	.word	0x2000b6ac
 80153c8:	08022bf4 	.word	0x08022bf4
 80153cc:	20007f90 	.word	0x20007f90

080153d0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b082      	sub	sp, #8
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d109      	bne.n	80153f4 <udp_send+0x24>
 80153e0:	4b11      	ldr	r3, [pc, #68]	; (8015428 <udp_send+0x58>)
 80153e2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80153e6:	4911      	ldr	r1, [pc, #68]	; (801542c <udp_send+0x5c>)
 80153e8:	4811      	ldr	r0, [pc, #68]	; (8015430 <udp_send+0x60>)
 80153ea:	f003 fa9f 	bl	801892c <printf>
 80153ee:	f06f 030f 	mvn.w	r3, #15
 80153f2:	e015      	b.n	8015420 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d109      	bne.n	801540e <udp_send+0x3e>
 80153fa:	4b0b      	ldr	r3, [pc, #44]	; (8015428 <udp_send+0x58>)
 80153fc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015400:	490c      	ldr	r1, [pc, #48]	; (8015434 <udp_send+0x64>)
 8015402:	480b      	ldr	r0, [pc, #44]	; (8015430 <udp_send+0x60>)
 8015404:	f003 fa92 	bl	801892c <printf>
 8015408:	f06f 030f 	mvn.w	r3, #15
 801540c:	e008      	b.n	8015420 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	1d1a      	adds	r2, r3, #4
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	8a9b      	ldrh	r3, [r3, #20]
 8015416:	6839      	ldr	r1, [r7, #0]
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f000 f80d 	bl	8015438 <udp_sendto>
 801541e:	4603      	mov	r3, r0
}
 8015420:	4618      	mov	r0, r3
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	08022b1c 	.word	0x08022b1c
 801542c:	08022c10 	.word	0x08022c10
 8015430:	08022b70 	.word	0x08022b70
 8015434:	08022c28 	.word	0x08022c28

08015438 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b088      	sub	sp, #32
 801543c:	af02      	add	r7, sp, #8
 801543e:	60f8      	str	r0, [r7, #12]
 8015440:	60b9      	str	r1, [r7, #8]
 8015442:	607a      	str	r2, [r7, #4]
 8015444:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d109      	bne.n	8015460 <udp_sendto+0x28>
 801544c:	4b23      	ldr	r3, [pc, #140]	; (80154dc <udp_sendto+0xa4>)
 801544e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015452:	4923      	ldr	r1, [pc, #140]	; (80154e0 <udp_sendto+0xa8>)
 8015454:	4823      	ldr	r0, [pc, #140]	; (80154e4 <udp_sendto+0xac>)
 8015456:	f003 fa69 	bl	801892c <printf>
 801545a:	f06f 030f 	mvn.w	r3, #15
 801545e:	e038      	b.n	80154d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d109      	bne.n	801547a <udp_sendto+0x42>
 8015466:	4b1d      	ldr	r3, [pc, #116]	; (80154dc <udp_sendto+0xa4>)
 8015468:	f240 2219 	movw	r2, #537	; 0x219
 801546c:	491e      	ldr	r1, [pc, #120]	; (80154e8 <udp_sendto+0xb0>)
 801546e:	481d      	ldr	r0, [pc, #116]	; (80154e4 <udp_sendto+0xac>)
 8015470:	f003 fa5c 	bl	801892c <printf>
 8015474:	f06f 030f 	mvn.w	r3, #15
 8015478:	e02b      	b.n	80154d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d109      	bne.n	8015494 <udp_sendto+0x5c>
 8015480:	4b16      	ldr	r3, [pc, #88]	; (80154dc <udp_sendto+0xa4>)
 8015482:	f240 221a 	movw	r2, #538	; 0x21a
 8015486:	4919      	ldr	r1, [pc, #100]	; (80154ec <udp_sendto+0xb4>)
 8015488:	4816      	ldr	r0, [pc, #88]	; (80154e4 <udp_sendto+0xac>)
 801548a:	f003 fa4f 	bl	801892c <printf>
 801548e:	f06f 030f 	mvn.w	r3, #15
 8015492:	e01e      	b.n	80154d2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	7a1b      	ldrb	r3, [r3, #8]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d006      	beq.n	80154aa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	7a1b      	ldrb	r3, [r3, #8]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7f8 fe69 	bl	800e178 <netif_get_by_index>
 80154a6:	6178      	str	r0, [r7, #20]
 80154a8:	e003      	b.n	80154b2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f001 fb92 	bl	8016bd4 <ip4_route>
 80154b0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d102      	bne.n	80154be <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80154b8:	f06f 0303 	mvn.w	r3, #3
 80154bc:	e009      	b.n	80154d2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80154be:	887a      	ldrh	r2, [r7, #2]
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	9300      	str	r3, [sp, #0]
 80154c4:	4613      	mov	r3, r2
 80154c6:	687a      	ldr	r2, [r7, #4]
 80154c8:	68b9      	ldr	r1, [r7, #8]
 80154ca:	68f8      	ldr	r0, [r7, #12]
 80154cc:	f000 f810 	bl	80154f0 <udp_sendto_if>
 80154d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3718      	adds	r7, #24
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	08022b1c 	.word	0x08022b1c
 80154e0:	08022c40 	.word	0x08022c40
 80154e4:	08022b70 	.word	0x08022b70
 80154e8:	08022c58 	.word	0x08022c58
 80154ec:	08022c74 	.word	0x08022c74

080154f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b088      	sub	sp, #32
 80154f4:	af02      	add	r7, sp, #8
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	60b9      	str	r1, [r7, #8]
 80154fa:	607a      	str	r2, [r7, #4]
 80154fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d109      	bne.n	8015518 <udp_sendto_if+0x28>
 8015504:	4b2e      	ldr	r3, [pc, #184]	; (80155c0 <udp_sendto_if+0xd0>)
 8015506:	f44f 7220 	mov.w	r2, #640	; 0x280
 801550a:	492e      	ldr	r1, [pc, #184]	; (80155c4 <udp_sendto_if+0xd4>)
 801550c:	482e      	ldr	r0, [pc, #184]	; (80155c8 <udp_sendto_if+0xd8>)
 801550e:	f003 fa0d 	bl	801892c <printf>
 8015512:	f06f 030f 	mvn.w	r3, #15
 8015516:	e04f      	b.n	80155b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d109      	bne.n	8015532 <udp_sendto_if+0x42>
 801551e:	4b28      	ldr	r3, [pc, #160]	; (80155c0 <udp_sendto_if+0xd0>)
 8015520:	f240 2281 	movw	r2, #641	; 0x281
 8015524:	4929      	ldr	r1, [pc, #164]	; (80155cc <udp_sendto_if+0xdc>)
 8015526:	4828      	ldr	r0, [pc, #160]	; (80155c8 <udp_sendto_if+0xd8>)
 8015528:	f003 fa00 	bl	801892c <printf>
 801552c:	f06f 030f 	mvn.w	r3, #15
 8015530:	e042      	b.n	80155b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d109      	bne.n	801554c <udp_sendto_if+0x5c>
 8015538:	4b21      	ldr	r3, [pc, #132]	; (80155c0 <udp_sendto_if+0xd0>)
 801553a:	f240 2282 	movw	r2, #642	; 0x282
 801553e:	4924      	ldr	r1, [pc, #144]	; (80155d0 <udp_sendto_if+0xe0>)
 8015540:	4821      	ldr	r0, [pc, #132]	; (80155c8 <udp_sendto_if+0xd8>)
 8015542:	f003 f9f3 	bl	801892c <printf>
 8015546:	f06f 030f 	mvn.w	r3, #15
 801554a:	e035      	b.n	80155b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801554c:	6a3b      	ldr	r3, [r7, #32]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d109      	bne.n	8015566 <udp_sendto_if+0x76>
 8015552:	4b1b      	ldr	r3, [pc, #108]	; (80155c0 <udp_sendto_if+0xd0>)
 8015554:	f240 2283 	movw	r2, #643	; 0x283
 8015558:	491e      	ldr	r1, [pc, #120]	; (80155d4 <udp_sendto_if+0xe4>)
 801555a:	481b      	ldr	r0, [pc, #108]	; (80155c8 <udp_sendto_if+0xd8>)
 801555c:	f003 f9e6 	bl	801892c <printf>
 8015560:	f06f 030f 	mvn.w	r3, #15
 8015564:	e028      	b.n	80155b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d009      	beq.n	8015580 <udp_sendto_if+0x90>
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d005      	beq.n	8015580 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801557c:	2be0      	cmp	r3, #224	; 0xe0
 801557e:	d103      	bne.n	8015588 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015580:	6a3b      	ldr	r3, [r7, #32]
 8015582:	3304      	adds	r3, #4
 8015584:	617b      	str	r3, [r7, #20]
 8015586:	e00b      	b.n	80155a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	6a3b      	ldr	r3, [r7, #32]
 801558e:	3304      	adds	r3, #4
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	429a      	cmp	r2, r3
 8015594:	d002      	beq.n	801559c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015596:	f06f 0303 	mvn.w	r3, #3
 801559a:	e00d      	b.n	80155b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80155a0:	887a      	ldrh	r2, [r7, #2]
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	9301      	str	r3, [sp, #4]
 80155a6:	6a3b      	ldr	r3, [r7, #32]
 80155a8:	9300      	str	r3, [sp, #0]
 80155aa:	4613      	mov	r3, r2
 80155ac:	687a      	ldr	r2, [r7, #4]
 80155ae:	68b9      	ldr	r1, [r7, #8]
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f000 f811 	bl	80155d8 <udp_sendto_if_src>
 80155b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3718      	adds	r7, #24
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	08022b1c 	.word	0x08022b1c
 80155c4:	08022c90 	.word	0x08022c90
 80155c8:	08022b70 	.word	0x08022b70
 80155cc:	08022cac 	.word	0x08022cac
 80155d0:	08022cc8 	.word	0x08022cc8
 80155d4:	08022ce8 	.word	0x08022ce8

080155d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b08c      	sub	sp, #48	; 0x30
 80155dc:	af04      	add	r7, sp, #16
 80155de:	60f8      	str	r0, [r7, #12]
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	607a      	str	r2, [r7, #4]
 80155e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d109      	bne.n	8015600 <udp_sendto_if_src+0x28>
 80155ec:	4b65      	ldr	r3, [pc, #404]	; (8015784 <udp_sendto_if_src+0x1ac>)
 80155ee:	f240 22d1 	movw	r2, #721	; 0x2d1
 80155f2:	4965      	ldr	r1, [pc, #404]	; (8015788 <udp_sendto_if_src+0x1b0>)
 80155f4:	4865      	ldr	r0, [pc, #404]	; (801578c <udp_sendto_if_src+0x1b4>)
 80155f6:	f003 f999 	bl	801892c <printf>
 80155fa:	f06f 030f 	mvn.w	r3, #15
 80155fe:	e0bc      	b.n	801577a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d109      	bne.n	801561a <udp_sendto_if_src+0x42>
 8015606:	4b5f      	ldr	r3, [pc, #380]	; (8015784 <udp_sendto_if_src+0x1ac>)
 8015608:	f240 22d2 	movw	r2, #722	; 0x2d2
 801560c:	4960      	ldr	r1, [pc, #384]	; (8015790 <udp_sendto_if_src+0x1b8>)
 801560e:	485f      	ldr	r0, [pc, #380]	; (801578c <udp_sendto_if_src+0x1b4>)
 8015610:	f003 f98c 	bl	801892c <printf>
 8015614:	f06f 030f 	mvn.w	r3, #15
 8015618:	e0af      	b.n	801577a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d109      	bne.n	8015634 <udp_sendto_if_src+0x5c>
 8015620:	4b58      	ldr	r3, [pc, #352]	; (8015784 <udp_sendto_if_src+0x1ac>)
 8015622:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015626:	495b      	ldr	r1, [pc, #364]	; (8015794 <udp_sendto_if_src+0x1bc>)
 8015628:	4858      	ldr	r0, [pc, #352]	; (801578c <udp_sendto_if_src+0x1b4>)
 801562a:	f003 f97f 	bl	801892c <printf>
 801562e:	f06f 030f 	mvn.w	r3, #15
 8015632:	e0a2      	b.n	801577a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015636:	2b00      	cmp	r3, #0
 8015638:	d109      	bne.n	801564e <udp_sendto_if_src+0x76>
 801563a:	4b52      	ldr	r3, [pc, #328]	; (8015784 <udp_sendto_if_src+0x1ac>)
 801563c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8015640:	4955      	ldr	r1, [pc, #340]	; (8015798 <udp_sendto_if_src+0x1c0>)
 8015642:	4852      	ldr	r0, [pc, #328]	; (801578c <udp_sendto_if_src+0x1b4>)
 8015644:	f003 f972 	bl	801892c <printf>
 8015648:	f06f 030f 	mvn.w	r3, #15
 801564c:	e095      	b.n	801577a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015650:	2b00      	cmp	r3, #0
 8015652:	d109      	bne.n	8015668 <udp_sendto_if_src+0x90>
 8015654:	4b4b      	ldr	r3, [pc, #300]	; (8015784 <udp_sendto_if_src+0x1ac>)
 8015656:	f240 22d5 	movw	r2, #725	; 0x2d5
 801565a:	4950      	ldr	r1, [pc, #320]	; (801579c <udp_sendto_if_src+0x1c4>)
 801565c:	484b      	ldr	r0, [pc, #300]	; (801578c <udp_sendto_if_src+0x1b4>)
 801565e:	f003 f965 	bl	801892c <printf>
 8015662:	f06f 030f 	mvn.w	r3, #15
 8015666:	e088      	b.n	801577a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	8a5b      	ldrh	r3, [r3, #18]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d10f      	bne.n	8015690 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015670:	68f9      	ldr	r1, [r7, #12]
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	8a5b      	ldrh	r3, [r3, #18]
 8015676:	461a      	mov	r2, r3
 8015678:	68f8      	ldr	r0, [r7, #12]
 801567a:	f000 f893 	bl	80157a4 <udp_bind>
 801567e:	4603      	mov	r3, r0
 8015680:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015682:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d002      	beq.n	8015690 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801568a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801568e:	e074      	b.n	801577a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	891b      	ldrh	r3, [r3, #8]
 8015694:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015698:	4293      	cmp	r3, r2
 801569a:	d902      	bls.n	80156a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801569c:	f04f 33ff 	mov.w	r3, #4294967295
 80156a0:	e06b      	b.n	801577a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80156a2:	2108      	movs	r1, #8
 80156a4:	68b8      	ldr	r0, [r7, #8]
 80156a6:	f7f9 f85f 	bl	800e768 <pbuf_add_header>
 80156aa:	4603      	mov	r3, r0
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d015      	beq.n	80156dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80156b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156b4:	2108      	movs	r1, #8
 80156b6:	2022      	movs	r0, #34	; 0x22
 80156b8:	f7f8 fe08 	bl	800e2cc <pbuf_alloc>
 80156bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d102      	bne.n	80156ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80156c4:	f04f 33ff 	mov.w	r3, #4294967295
 80156c8:	e057      	b.n	801577a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	891b      	ldrh	r3, [r3, #8]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d006      	beq.n	80156e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80156d2:	68b9      	ldr	r1, [r7, #8]
 80156d4:	69f8      	ldr	r0, [r7, #28]
 80156d6:	f7f9 fa01 	bl	800eadc <pbuf_chain>
 80156da:	e001      	b.n	80156e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	895b      	ldrh	r3, [r3, #10]
 80156e4:	2b07      	cmp	r3, #7
 80156e6:	d806      	bhi.n	80156f6 <udp_sendto_if_src+0x11e>
 80156e8:	4b26      	ldr	r3, [pc, #152]	; (8015784 <udp_sendto_if_src+0x1ac>)
 80156ea:	f240 320d 	movw	r2, #781	; 0x30d
 80156ee:	492c      	ldr	r1, [pc, #176]	; (80157a0 <udp_sendto_if_src+0x1c8>)
 80156f0:	4826      	ldr	r0, [pc, #152]	; (801578c <udp_sendto_if_src+0x1b4>)
 80156f2:	f003 f91b 	bl	801892c <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80156f6:	69fb      	ldr	r3, [r7, #28]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	8a5b      	ldrh	r3, [r3, #18]
 8015700:	4618      	mov	r0, r3
 8015702:	f7f7 fd93 	bl	800d22c <lwip_htons>
 8015706:	4603      	mov	r3, r0
 8015708:	461a      	mov	r2, r3
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801570e:	887b      	ldrh	r3, [r7, #2]
 8015710:	4618      	mov	r0, r3
 8015712:	f7f7 fd8b 	bl	800d22c <lwip_htons>
 8015716:	4603      	mov	r3, r0
 8015718:	461a      	mov	r2, r3
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	2200      	movs	r2, #0
 8015722:	719a      	strb	r2, [r3, #6]
 8015724:	2200      	movs	r2, #0
 8015726:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	891b      	ldrh	r3, [r3, #8]
 801572c:	4618      	mov	r0, r3
 801572e:	f7f7 fd7d 	bl	800d22c <lwip_htons>
 8015732:	4603      	mov	r3, r0
 8015734:	461a      	mov	r2, r3
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801573a:	2311      	movs	r3, #17
 801573c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	7adb      	ldrb	r3, [r3, #11]
 8015742:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	7a9b      	ldrb	r3, [r3, #10]
 8015748:	7cb9      	ldrb	r1, [r7, #18]
 801574a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801574c:	9202      	str	r2, [sp, #8]
 801574e:	7cfa      	ldrb	r2, [r7, #19]
 8015750:	9201      	str	r2, [sp, #4]
 8015752:	9300      	str	r3, [sp, #0]
 8015754:	460b      	mov	r3, r1
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801575a:	69f8      	ldr	r0, [r7, #28]
 801575c:	f001 fc22 	bl	8016fa4 <ip4_output_if_src>
 8015760:	4603      	mov	r3, r0
 8015762:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015764:	69fa      	ldr	r2, [r7, #28]
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	429a      	cmp	r2, r3
 801576a:	d004      	beq.n	8015776 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801576c:	69f8      	ldr	r0, [r7, #28]
 801576e:	f7f9 f891 	bl	800e894 <pbuf_free>
    q = NULL;
 8015772:	2300      	movs	r3, #0
 8015774:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015776:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801577a:	4618      	mov	r0, r3
 801577c:	3720      	adds	r7, #32
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	08022b1c 	.word	0x08022b1c
 8015788:	08022d08 	.word	0x08022d08
 801578c:	08022b70 	.word	0x08022b70
 8015790:	08022d28 	.word	0x08022d28
 8015794:	08022d48 	.word	0x08022d48
 8015798:	08022d6c 	.word	0x08022d6c
 801579c:	08022d90 	.word	0x08022d90
 80157a0:	08022db4 	.word	0x08022db4

080157a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b086      	sub	sp, #24
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	60f8      	str	r0, [r7, #12]
 80157ac:	60b9      	str	r1, [r7, #8]
 80157ae:	4613      	mov	r3, r2
 80157b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d101      	bne.n	80157bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80157b8:	4b39      	ldr	r3, [pc, #228]	; (80158a0 <udp_bind+0xfc>)
 80157ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d109      	bne.n	80157d6 <udp_bind+0x32>
 80157c2:	4b38      	ldr	r3, [pc, #224]	; (80158a4 <udp_bind+0x100>)
 80157c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80157c8:	4937      	ldr	r1, [pc, #220]	; (80158a8 <udp_bind+0x104>)
 80157ca:	4838      	ldr	r0, [pc, #224]	; (80158ac <udp_bind+0x108>)
 80157cc:	f003 f8ae 	bl	801892c <printf>
 80157d0:	f06f 030f 	mvn.w	r3, #15
 80157d4:	e060      	b.n	8015898 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80157d6:	2300      	movs	r3, #0
 80157d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157da:	4b35      	ldr	r3, [pc, #212]	; (80158b0 <udp_bind+0x10c>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	617b      	str	r3, [r7, #20]
 80157e0:	e009      	b.n	80157f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80157e2:	68fa      	ldr	r2, [r7, #12]
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d102      	bne.n	80157f0 <udp_bind+0x4c>
      rebind = 1;
 80157ea:	2301      	movs	r3, #1
 80157ec:	74fb      	strb	r3, [r7, #19]
      break;
 80157ee:	e005      	b.n	80157fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	68db      	ldr	r3, [r3, #12]
 80157f4:	617b      	str	r3, [r7, #20]
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d1f2      	bne.n	80157e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80157fc:	88fb      	ldrh	r3, [r7, #6]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d109      	bne.n	8015816 <udp_bind+0x72>
    port = udp_new_port();
 8015802:	f7ff fc35 	bl	8015070 <udp_new_port>
 8015806:	4603      	mov	r3, r0
 8015808:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801580a:	88fb      	ldrh	r3, [r7, #6]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d12c      	bne.n	801586a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015810:	f06f 0307 	mvn.w	r3, #7
 8015814:	e040      	b.n	8015898 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015816:	4b26      	ldr	r3, [pc, #152]	; (80158b0 <udp_bind+0x10c>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	617b      	str	r3, [r7, #20]
 801581c:	e022      	b.n	8015864 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801581e:	68fa      	ldr	r2, [r7, #12]
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	429a      	cmp	r2, r3
 8015824:	d01b      	beq.n	801585e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	8a5b      	ldrh	r3, [r3, #18]
 801582a:	88fa      	ldrh	r2, [r7, #6]
 801582c:	429a      	cmp	r2, r3
 801582e:	d116      	bne.n	801585e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	681a      	ldr	r2, [r3, #0]
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015838:	429a      	cmp	r2, r3
 801583a:	d00d      	beq.n	8015858 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d00a      	beq.n	8015858 <udp_bind+0xb4>
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d006      	beq.n	8015858 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801584a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801584c:	2b00      	cmp	r3, #0
 801584e:	d003      	beq.n	8015858 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d102      	bne.n	801585e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015858:	f06f 0307 	mvn.w	r3, #7
 801585c:	e01c      	b.n	8015898 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801585e:	697b      	ldr	r3, [r7, #20]
 8015860:	68db      	ldr	r3, [r3, #12]
 8015862:	617b      	str	r3, [r7, #20]
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d1d9      	bne.n	801581e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d002      	beq.n	8015876 <udp_bind+0xd2>
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	e000      	b.n	8015878 <udp_bind+0xd4>
 8015876:	2300      	movs	r3, #0
 8015878:	68fa      	ldr	r2, [r7, #12]
 801587a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	88fa      	ldrh	r2, [r7, #6]
 8015880:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015882:	7cfb      	ldrb	r3, [r7, #19]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d106      	bne.n	8015896 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015888:	4b09      	ldr	r3, [pc, #36]	; (80158b0 <udp_bind+0x10c>)
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015890:	4a07      	ldr	r2, [pc, #28]	; (80158b0 <udp_bind+0x10c>)
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015896:	2300      	movs	r3, #0
}
 8015898:	4618      	mov	r0, r3
 801589a:	3718      	adds	r7, #24
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	08023670 	.word	0x08023670
 80158a4:	08022b1c 	.word	0x08022b1c
 80158a8:	08022de4 	.word	0x08022de4
 80158ac:	08022b70 	.word	0x08022b70
 80158b0:	2000b6ac 	.word	0x2000b6ac

080158b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	60f8      	str	r0, [r7, #12]
 80158bc:	60b9      	str	r1, [r7, #8]
 80158be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d107      	bne.n	80158d6 <udp_recv+0x22>
 80158c6:	4b08      	ldr	r3, [pc, #32]	; (80158e8 <udp_recv+0x34>)
 80158c8:	f240 428a 	movw	r2, #1162	; 0x48a
 80158cc:	4907      	ldr	r1, [pc, #28]	; (80158ec <udp_recv+0x38>)
 80158ce:	4808      	ldr	r0, [pc, #32]	; (80158f0 <udp_recv+0x3c>)
 80158d0:	f003 f82c 	bl	801892c <printf>
 80158d4:	e005      	b.n	80158e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	68ba      	ldr	r2, [r7, #8]
 80158da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	61da      	str	r2, [r3, #28]
}
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	08022b1c 	.word	0x08022b1c
 80158ec:	08022e50 	.word	0x08022e50
 80158f0:	08022b70 	.word	0x08022b70

080158f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d107      	bne.n	8015912 <udp_remove+0x1e>
 8015902:	4b19      	ldr	r3, [pc, #100]	; (8015968 <udp_remove+0x74>)
 8015904:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015908:	4918      	ldr	r1, [pc, #96]	; (801596c <udp_remove+0x78>)
 801590a:	4819      	ldr	r0, [pc, #100]	; (8015970 <udp_remove+0x7c>)
 801590c:	f003 f80e 	bl	801892c <printf>
 8015910:	e026      	b.n	8015960 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015912:	4b18      	ldr	r3, [pc, #96]	; (8015974 <udp_remove+0x80>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	687a      	ldr	r2, [r7, #4]
 8015918:	429a      	cmp	r2, r3
 801591a:	d105      	bne.n	8015928 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801591c:	4b15      	ldr	r3, [pc, #84]	; (8015974 <udp_remove+0x80>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	68db      	ldr	r3, [r3, #12]
 8015922:	4a14      	ldr	r2, [pc, #80]	; (8015974 <udp_remove+0x80>)
 8015924:	6013      	str	r3, [r2, #0]
 8015926:	e017      	b.n	8015958 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015928:	4b12      	ldr	r3, [pc, #72]	; (8015974 <udp_remove+0x80>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	60fb      	str	r3, [r7, #12]
 801592e:	e010      	b.n	8015952 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d009      	beq.n	801594c <udp_remove+0x58>
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	68db      	ldr	r3, [r3, #12]
 801593c:	687a      	ldr	r2, [r7, #4]
 801593e:	429a      	cmp	r2, r3
 8015940:	d104      	bne.n	801594c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	68da      	ldr	r2, [r3, #12]
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	60da      	str	r2, [r3, #12]
        break;
 801594a:	e005      	b.n	8015958 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	60fb      	str	r3, [r7, #12]
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d1eb      	bne.n	8015930 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015958:	6879      	ldr	r1, [r7, #4]
 801595a:	2000      	movs	r0, #0
 801595c:	f7f8 f96e 	bl	800dc3c <memp_free>
}
 8015960:	3710      	adds	r7, #16
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
 8015966:	bf00      	nop
 8015968:	08022b1c 	.word	0x08022b1c
 801596c:	08022e68 	.word	0x08022e68
 8015970:	08022b70 	.word	0x08022b70
 8015974:	2000b6ac 	.word	0x2000b6ac

08015978 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b082      	sub	sp, #8
 801597c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801597e:	2000      	movs	r0, #0
 8015980:	f7f8 f90a 	bl	800db98 <memp_malloc>
 8015984:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d007      	beq.n	801599c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801598c:	2220      	movs	r2, #32
 801598e:	2100      	movs	r1, #0
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f002 fd45 	bl	8018420 <memset>
    pcb->ttl = UDP_TTL;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	22ff      	movs	r2, #255	; 0xff
 801599a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801599c:	687b      	ldr	r3, [r7, #4]
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}

080159a6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80159a6:	b580      	push	{r7, lr}
 80159a8:	b084      	sub	sp, #16
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	4603      	mov	r3, r0
 80159ae:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80159b0:	f7ff ffe2 	bl	8015978 <udp_new>
 80159b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80159b6:	68fb      	ldr	r3, [r7, #12]
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3710      	adds	r7, #16
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80159c0:	b480      	push	{r7}
 80159c2:	b085      	sub	sp, #20
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
 80159c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d01e      	beq.n	8015a0e <udp_netif_ip_addr_changed+0x4e>
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d01a      	beq.n	8015a0e <udp_netif_ip_addr_changed+0x4e>
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d017      	beq.n	8015a0e <udp_netif_ip_addr_changed+0x4e>
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d013      	beq.n	8015a0e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159e6:	4b0d      	ldr	r3, [pc, #52]	; (8015a1c <udp_netif_ip_addr_changed+0x5c>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	60fb      	str	r3, [r7, #12]
 80159ec:	e00c      	b.n	8015a08 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	681a      	ldr	r2, [r3, #0]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d103      	bne.n	8015a02 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	681a      	ldr	r2, [r3, #0]
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	68db      	ldr	r3, [r3, #12]
 8015a06:	60fb      	str	r3, [r7, #12]
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d1ef      	bne.n	80159ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015a0e:	bf00      	nop
 8015a10:	3714      	adds	r7, #20
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	2000b6ac 	.word	0x2000b6ac

08015a20 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015a28:	4915      	ldr	r1, [pc, #84]	; (8015a80 <etharp_free_entry+0x60>)
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	4613      	mov	r3, r2
 8015a2e:	005b      	lsls	r3, r3, #1
 8015a30:	4413      	add	r3, r2
 8015a32:	00db      	lsls	r3, r3, #3
 8015a34:	440b      	add	r3, r1
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d013      	beq.n	8015a64 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015a3c:	4910      	ldr	r1, [pc, #64]	; (8015a80 <etharp_free_entry+0x60>)
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	4613      	mov	r3, r2
 8015a42:	005b      	lsls	r3, r3, #1
 8015a44:	4413      	add	r3, r2
 8015a46:	00db      	lsls	r3, r3, #3
 8015a48:	440b      	add	r3, r1
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7f8 ff21 	bl	800e894 <pbuf_free>
    arp_table[i].q = NULL;
 8015a52:	490b      	ldr	r1, [pc, #44]	; (8015a80 <etharp_free_entry+0x60>)
 8015a54:	687a      	ldr	r2, [r7, #4]
 8015a56:	4613      	mov	r3, r2
 8015a58:	005b      	lsls	r3, r3, #1
 8015a5a:	4413      	add	r3, r2
 8015a5c:	00db      	lsls	r3, r3, #3
 8015a5e:	440b      	add	r3, r1
 8015a60:	2200      	movs	r2, #0
 8015a62:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015a64:	4906      	ldr	r1, [pc, #24]	; (8015a80 <etharp_free_entry+0x60>)
 8015a66:	687a      	ldr	r2, [r7, #4]
 8015a68:	4613      	mov	r3, r2
 8015a6a:	005b      	lsls	r3, r3, #1
 8015a6c:	4413      	add	r3, r2
 8015a6e:	00db      	lsls	r3, r3, #3
 8015a70:	440b      	add	r3, r1
 8015a72:	3314      	adds	r3, #20
 8015a74:	2200      	movs	r2, #0
 8015a76:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015a78:	bf00      	nop
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	20004af0 	.word	0x20004af0

08015a84 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	607b      	str	r3, [r7, #4]
 8015a8e:	e096      	b.n	8015bbe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015a90:	494f      	ldr	r1, [pc, #316]	; (8015bd0 <etharp_tmr+0x14c>)
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	4613      	mov	r3, r2
 8015a96:	005b      	lsls	r3, r3, #1
 8015a98:	4413      	add	r3, r2
 8015a9a:	00db      	lsls	r3, r3, #3
 8015a9c:	440b      	add	r3, r1
 8015a9e:	3314      	adds	r3, #20
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015aa4:	78fb      	ldrb	r3, [r7, #3]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	f000 8086 	beq.w	8015bb8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015aac:	4948      	ldr	r1, [pc, #288]	; (8015bd0 <etharp_tmr+0x14c>)
 8015aae:	687a      	ldr	r2, [r7, #4]
 8015ab0:	4613      	mov	r3, r2
 8015ab2:	005b      	lsls	r3, r3, #1
 8015ab4:	4413      	add	r3, r2
 8015ab6:	00db      	lsls	r3, r3, #3
 8015ab8:	440b      	add	r3, r1
 8015aba:	3312      	adds	r3, #18
 8015abc:	881b      	ldrh	r3, [r3, #0]
 8015abe:	3301      	adds	r3, #1
 8015ac0:	b298      	uxth	r0, r3
 8015ac2:	4943      	ldr	r1, [pc, #268]	; (8015bd0 <etharp_tmr+0x14c>)
 8015ac4:	687a      	ldr	r2, [r7, #4]
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	005b      	lsls	r3, r3, #1
 8015aca:	4413      	add	r3, r2
 8015acc:	00db      	lsls	r3, r3, #3
 8015ace:	440b      	add	r3, r1
 8015ad0:	3312      	adds	r3, #18
 8015ad2:	4602      	mov	r2, r0
 8015ad4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015ad6:	493e      	ldr	r1, [pc, #248]	; (8015bd0 <etharp_tmr+0x14c>)
 8015ad8:	687a      	ldr	r2, [r7, #4]
 8015ada:	4613      	mov	r3, r2
 8015adc:	005b      	lsls	r3, r3, #1
 8015ade:	4413      	add	r3, r2
 8015ae0:	00db      	lsls	r3, r3, #3
 8015ae2:	440b      	add	r3, r1
 8015ae4:	3312      	adds	r3, #18
 8015ae6:	881b      	ldrh	r3, [r3, #0]
 8015ae8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015aec:	d215      	bcs.n	8015b1a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015aee:	4938      	ldr	r1, [pc, #224]	; (8015bd0 <etharp_tmr+0x14c>)
 8015af0:	687a      	ldr	r2, [r7, #4]
 8015af2:	4613      	mov	r3, r2
 8015af4:	005b      	lsls	r3, r3, #1
 8015af6:	4413      	add	r3, r2
 8015af8:	00db      	lsls	r3, r3, #3
 8015afa:	440b      	add	r3, r1
 8015afc:	3314      	adds	r3, #20
 8015afe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015b00:	2b01      	cmp	r3, #1
 8015b02:	d10e      	bne.n	8015b22 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015b04:	4932      	ldr	r1, [pc, #200]	; (8015bd0 <etharp_tmr+0x14c>)
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	4613      	mov	r3, r2
 8015b0a:	005b      	lsls	r3, r3, #1
 8015b0c:	4413      	add	r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	440b      	add	r3, r1
 8015b12:	3312      	adds	r3, #18
 8015b14:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015b16:	2b04      	cmp	r3, #4
 8015b18:	d903      	bls.n	8015b22 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f7ff ff80 	bl	8015a20 <etharp_free_entry>
 8015b20:	e04a      	b.n	8015bb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015b22:	492b      	ldr	r1, [pc, #172]	; (8015bd0 <etharp_tmr+0x14c>)
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	4613      	mov	r3, r2
 8015b28:	005b      	lsls	r3, r3, #1
 8015b2a:	4413      	add	r3, r2
 8015b2c:	00db      	lsls	r3, r3, #3
 8015b2e:	440b      	add	r3, r1
 8015b30:	3314      	adds	r3, #20
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	2b03      	cmp	r3, #3
 8015b36:	d10a      	bne.n	8015b4e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015b38:	4925      	ldr	r1, [pc, #148]	; (8015bd0 <etharp_tmr+0x14c>)
 8015b3a:	687a      	ldr	r2, [r7, #4]
 8015b3c:	4613      	mov	r3, r2
 8015b3e:	005b      	lsls	r3, r3, #1
 8015b40:	4413      	add	r3, r2
 8015b42:	00db      	lsls	r3, r3, #3
 8015b44:	440b      	add	r3, r1
 8015b46:	3314      	adds	r3, #20
 8015b48:	2204      	movs	r2, #4
 8015b4a:	701a      	strb	r2, [r3, #0]
 8015b4c:	e034      	b.n	8015bb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015b4e:	4920      	ldr	r1, [pc, #128]	; (8015bd0 <etharp_tmr+0x14c>)
 8015b50:	687a      	ldr	r2, [r7, #4]
 8015b52:	4613      	mov	r3, r2
 8015b54:	005b      	lsls	r3, r3, #1
 8015b56:	4413      	add	r3, r2
 8015b58:	00db      	lsls	r3, r3, #3
 8015b5a:	440b      	add	r3, r1
 8015b5c:	3314      	adds	r3, #20
 8015b5e:	781b      	ldrb	r3, [r3, #0]
 8015b60:	2b04      	cmp	r3, #4
 8015b62:	d10a      	bne.n	8015b7a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015b64:	491a      	ldr	r1, [pc, #104]	; (8015bd0 <etharp_tmr+0x14c>)
 8015b66:	687a      	ldr	r2, [r7, #4]
 8015b68:	4613      	mov	r3, r2
 8015b6a:	005b      	lsls	r3, r3, #1
 8015b6c:	4413      	add	r3, r2
 8015b6e:	00db      	lsls	r3, r3, #3
 8015b70:	440b      	add	r3, r1
 8015b72:	3314      	adds	r3, #20
 8015b74:	2202      	movs	r2, #2
 8015b76:	701a      	strb	r2, [r3, #0]
 8015b78:	e01e      	b.n	8015bb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015b7a:	4915      	ldr	r1, [pc, #84]	; (8015bd0 <etharp_tmr+0x14c>)
 8015b7c:	687a      	ldr	r2, [r7, #4]
 8015b7e:	4613      	mov	r3, r2
 8015b80:	005b      	lsls	r3, r3, #1
 8015b82:	4413      	add	r3, r2
 8015b84:	00db      	lsls	r3, r3, #3
 8015b86:	440b      	add	r3, r1
 8015b88:	3314      	adds	r3, #20
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	2b01      	cmp	r3, #1
 8015b8e:	d113      	bne.n	8015bb8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015b90:	490f      	ldr	r1, [pc, #60]	; (8015bd0 <etharp_tmr+0x14c>)
 8015b92:	687a      	ldr	r2, [r7, #4]
 8015b94:	4613      	mov	r3, r2
 8015b96:	005b      	lsls	r3, r3, #1
 8015b98:	4413      	add	r3, r2
 8015b9a:	00db      	lsls	r3, r3, #3
 8015b9c:	440b      	add	r3, r1
 8015b9e:	3308      	adds	r3, #8
 8015ba0:	6818      	ldr	r0, [r3, #0]
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	4413      	add	r3, r2
 8015baa:	00db      	lsls	r3, r3, #3
 8015bac:	4a08      	ldr	r2, [pc, #32]	; (8015bd0 <etharp_tmr+0x14c>)
 8015bae:	4413      	add	r3, r2
 8015bb0:	3304      	adds	r3, #4
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	f000 fe6e 	bl	8016894 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	3301      	adds	r3, #1
 8015bbc:	607b      	str	r3, [r7, #4]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	2b09      	cmp	r3, #9
 8015bc2:	f77f af65 	ble.w	8015a90 <etharp_tmr+0xc>
      }
    }
  }
}
 8015bc6:	bf00      	nop
 8015bc8:	bf00      	nop
 8015bca:	3708      	adds	r7, #8
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}
 8015bd0:	20004af0 	.word	0x20004af0

08015bd4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b08a      	sub	sp, #40	; 0x28
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	60f8      	str	r0, [r7, #12]
 8015bdc:	460b      	mov	r3, r1
 8015bde:	607a      	str	r2, [r7, #4]
 8015be0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015be2:	230a      	movs	r3, #10
 8015be4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015be6:	230a      	movs	r3, #10
 8015be8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015bea:	230a      	movs	r3, #10
 8015bec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015bf2:	230a      	movs	r3, #10
 8015bf4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	83bb      	strh	r3, [r7, #28]
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	837b      	strh	r3, [r7, #26]
 8015bfe:	2300      	movs	r3, #0
 8015c00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c02:	2300      	movs	r3, #0
 8015c04:	843b      	strh	r3, [r7, #32]
 8015c06:	e0ae      	b.n	8015d66 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015c08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c0c:	49a6      	ldr	r1, [pc, #664]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015c0e:	4613      	mov	r3, r2
 8015c10:	005b      	lsls	r3, r3, #1
 8015c12:	4413      	add	r3, r2
 8015c14:	00db      	lsls	r3, r3, #3
 8015c16:	440b      	add	r3, r1
 8015c18:	3314      	adds	r3, #20
 8015c1a:	781b      	ldrb	r3, [r3, #0]
 8015c1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015c1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c22:	2b0a      	cmp	r3, #10
 8015c24:	d105      	bne.n	8015c32 <etharp_find_entry+0x5e>
 8015c26:	7dfb      	ldrb	r3, [r7, #23]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d102      	bne.n	8015c32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015c2c:	8c3b      	ldrh	r3, [r7, #32]
 8015c2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015c30:	e095      	b.n	8015d5e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015c32:	7dfb      	ldrb	r3, [r7, #23]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	f000 8092 	beq.w	8015d5e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015c3a:	7dfb      	ldrb	r3, [r7, #23]
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d009      	beq.n	8015c54 <etharp_find_entry+0x80>
 8015c40:	7dfb      	ldrb	r3, [r7, #23]
 8015c42:	2b01      	cmp	r3, #1
 8015c44:	d806      	bhi.n	8015c54 <etharp_find_entry+0x80>
 8015c46:	4b99      	ldr	r3, [pc, #612]	; (8015eac <etharp_find_entry+0x2d8>)
 8015c48:	f240 1223 	movw	r2, #291	; 0x123
 8015c4c:	4998      	ldr	r1, [pc, #608]	; (8015eb0 <etharp_find_entry+0x2dc>)
 8015c4e:	4899      	ldr	r0, [pc, #612]	; (8015eb4 <etharp_find_entry+0x2e0>)
 8015c50:	f002 fe6c 	bl	801892c <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d020      	beq.n	8015c9c <etharp_find_entry+0xc8>
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	6819      	ldr	r1, [r3, #0]
 8015c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c62:	4891      	ldr	r0, [pc, #580]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015c64:	4613      	mov	r3, r2
 8015c66:	005b      	lsls	r3, r3, #1
 8015c68:	4413      	add	r3, r2
 8015c6a:	00db      	lsls	r3, r3, #3
 8015c6c:	4403      	add	r3, r0
 8015c6e:	3304      	adds	r3, #4
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	4299      	cmp	r1, r3
 8015c74:	d112      	bne.n	8015c9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d00c      	beq.n	8015c96 <etharp_find_entry+0xc2>
 8015c7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c80:	4989      	ldr	r1, [pc, #548]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015c82:	4613      	mov	r3, r2
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	4413      	add	r3, r2
 8015c88:	00db      	lsls	r3, r3, #3
 8015c8a:	440b      	add	r3, r1
 8015c8c:	3308      	adds	r3, #8
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	429a      	cmp	r2, r3
 8015c94:	d102      	bne.n	8015c9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015c96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c9a:	e100      	b.n	8015e9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015c9c:	7dfb      	ldrb	r3, [r7, #23]
 8015c9e:	2b01      	cmp	r3, #1
 8015ca0:	d140      	bne.n	8015d24 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015ca2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ca6:	4980      	ldr	r1, [pc, #512]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015ca8:	4613      	mov	r3, r2
 8015caa:	005b      	lsls	r3, r3, #1
 8015cac:	4413      	add	r3, r2
 8015cae:	00db      	lsls	r3, r3, #3
 8015cb0:	440b      	add	r3, r1
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d01a      	beq.n	8015cee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015cb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cbc:	497a      	ldr	r1, [pc, #488]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015cbe:	4613      	mov	r3, r2
 8015cc0:	005b      	lsls	r3, r3, #1
 8015cc2:	4413      	add	r3, r2
 8015cc4:	00db      	lsls	r3, r3, #3
 8015cc6:	440b      	add	r3, r1
 8015cc8:	3312      	adds	r3, #18
 8015cca:	881b      	ldrh	r3, [r3, #0]
 8015ccc:	8bba      	ldrh	r2, [r7, #28]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d845      	bhi.n	8015d5e <etharp_find_entry+0x18a>
            old_queue = i;
 8015cd2:	8c3b      	ldrh	r3, [r7, #32]
 8015cd4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015cd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cda:	4973      	ldr	r1, [pc, #460]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015cdc:	4613      	mov	r3, r2
 8015cde:	005b      	lsls	r3, r3, #1
 8015ce0:	4413      	add	r3, r2
 8015ce2:	00db      	lsls	r3, r3, #3
 8015ce4:	440b      	add	r3, r1
 8015ce6:	3312      	adds	r3, #18
 8015ce8:	881b      	ldrh	r3, [r3, #0]
 8015cea:	83bb      	strh	r3, [r7, #28]
 8015cec:	e037      	b.n	8015d5e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015cee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cf2:	496d      	ldr	r1, [pc, #436]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	005b      	lsls	r3, r3, #1
 8015cf8:	4413      	add	r3, r2
 8015cfa:	00db      	lsls	r3, r3, #3
 8015cfc:	440b      	add	r3, r1
 8015cfe:	3312      	adds	r3, #18
 8015d00:	881b      	ldrh	r3, [r3, #0]
 8015d02:	8b7a      	ldrh	r2, [r7, #26]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d82a      	bhi.n	8015d5e <etharp_find_entry+0x18a>
            old_pending = i;
 8015d08:	8c3b      	ldrh	r3, [r7, #32]
 8015d0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015d0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d10:	4965      	ldr	r1, [pc, #404]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015d12:	4613      	mov	r3, r2
 8015d14:	005b      	lsls	r3, r3, #1
 8015d16:	4413      	add	r3, r2
 8015d18:	00db      	lsls	r3, r3, #3
 8015d1a:	440b      	add	r3, r1
 8015d1c:	3312      	adds	r3, #18
 8015d1e:	881b      	ldrh	r3, [r3, #0]
 8015d20:	837b      	strh	r3, [r7, #26]
 8015d22:	e01c      	b.n	8015d5e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015d24:	7dfb      	ldrb	r3, [r7, #23]
 8015d26:	2b01      	cmp	r3, #1
 8015d28:	d919      	bls.n	8015d5e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015d2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d2e:	495e      	ldr	r1, [pc, #376]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015d30:	4613      	mov	r3, r2
 8015d32:	005b      	lsls	r3, r3, #1
 8015d34:	4413      	add	r3, r2
 8015d36:	00db      	lsls	r3, r3, #3
 8015d38:	440b      	add	r3, r1
 8015d3a:	3312      	adds	r3, #18
 8015d3c:	881b      	ldrh	r3, [r3, #0]
 8015d3e:	8b3a      	ldrh	r2, [r7, #24]
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d80c      	bhi.n	8015d5e <etharp_find_entry+0x18a>
            old_stable = i;
 8015d44:	8c3b      	ldrh	r3, [r7, #32]
 8015d46:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015d48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d4c:	4956      	ldr	r1, [pc, #344]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015d4e:	4613      	mov	r3, r2
 8015d50:	005b      	lsls	r3, r3, #1
 8015d52:	4413      	add	r3, r2
 8015d54:	00db      	lsls	r3, r3, #3
 8015d56:	440b      	add	r3, r1
 8015d58:	3312      	adds	r3, #18
 8015d5a:	881b      	ldrh	r3, [r3, #0]
 8015d5c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d5e:	8c3b      	ldrh	r3, [r7, #32]
 8015d60:	3301      	adds	r3, #1
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	843b      	strh	r3, [r7, #32]
 8015d66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d6a:	2b09      	cmp	r3, #9
 8015d6c:	f77f af4c 	ble.w	8015c08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015d70:	7afb      	ldrb	r3, [r7, #11]
 8015d72:	f003 0302 	and.w	r3, r3, #2
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d108      	bne.n	8015d8c <etharp_find_entry+0x1b8>
 8015d7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d7e:	2b0a      	cmp	r3, #10
 8015d80:	d107      	bne.n	8015d92 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015d82:	7afb      	ldrb	r3, [r7, #11]
 8015d84:	f003 0301 	and.w	r3, r3, #1
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d102      	bne.n	8015d92 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d90:	e085      	b.n	8015e9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015d92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d96:	2b09      	cmp	r3, #9
 8015d98:	dc02      	bgt.n	8015da0 <etharp_find_entry+0x1cc>
    i = empty;
 8015d9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d9c:	843b      	strh	r3, [r7, #32]
 8015d9e:	e039      	b.n	8015e14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015da0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015da4:	2b09      	cmp	r3, #9
 8015da6:	dc14      	bgt.n	8015dd2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015da8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015daa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015dac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015db0:	493d      	ldr	r1, [pc, #244]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015db2:	4613      	mov	r3, r2
 8015db4:	005b      	lsls	r3, r3, #1
 8015db6:	4413      	add	r3, r2
 8015db8:	00db      	lsls	r3, r3, #3
 8015dba:	440b      	add	r3, r1
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d018      	beq.n	8015df4 <etharp_find_entry+0x220>
 8015dc2:	4b3a      	ldr	r3, [pc, #232]	; (8015eac <etharp_find_entry+0x2d8>)
 8015dc4:	f240 126d 	movw	r2, #365	; 0x16d
 8015dc8:	493b      	ldr	r1, [pc, #236]	; (8015eb8 <etharp_find_entry+0x2e4>)
 8015dca:	483a      	ldr	r0, [pc, #232]	; (8015eb4 <etharp_find_entry+0x2e0>)
 8015dcc:	f002 fdae 	bl	801892c <printf>
 8015dd0:	e010      	b.n	8015df4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015dd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015dd6:	2b09      	cmp	r3, #9
 8015dd8:	dc02      	bgt.n	8015de0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015dda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015ddc:	843b      	strh	r3, [r7, #32]
 8015dde:	e009      	b.n	8015df4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015de0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015de4:	2b09      	cmp	r3, #9
 8015de6:	dc02      	bgt.n	8015dee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015de8:	8bfb      	ldrh	r3, [r7, #30]
 8015dea:	843b      	strh	r3, [r7, #32]
 8015dec:	e002      	b.n	8015df4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015dee:	f04f 33ff 	mov.w	r3, #4294967295
 8015df2:	e054      	b.n	8015e9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015df4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015df8:	2b09      	cmp	r3, #9
 8015dfa:	dd06      	ble.n	8015e0a <etharp_find_entry+0x236>
 8015dfc:	4b2b      	ldr	r3, [pc, #172]	; (8015eac <etharp_find_entry+0x2d8>)
 8015dfe:	f240 127f 	movw	r2, #383	; 0x17f
 8015e02:	492e      	ldr	r1, [pc, #184]	; (8015ebc <etharp_find_entry+0x2e8>)
 8015e04:	482b      	ldr	r0, [pc, #172]	; (8015eb4 <etharp_find_entry+0x2e0>)
 8015e06:	f002 fd91 	bl	801892c <printf>
    etharp_free_entry(i);
 8015e0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7ff fe06 	bl	8015a20 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015e14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015e18:	2b09      	cmp	r3, #9
 8015e1a:	dd06      	ble.n	8015e2a <etharp_find_entry+0x256>
 8015e1c:	4b23      	ldr	r3, [pc, #140]	; (8015eac <etharp_find_entry+0x2d8>)
 8015e1e:	f240 1283 	movw	r2, #387	; 0x183
 8015e22:	4926      	ldr	r1, [pc, #152]	; (8015ebc <etharp_find_entry+0x2e8>)
 8015e24:	4823      	ldr	r0, [pc, #140]	; (8015eb4 <etharp_find_entry+0x2e0>)
 8015e26:	f002 fd81 	bl	801892c <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015e2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e2e:	491e      	ldr	r1, [pc, #120]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015e30:	4613      	mov	r3, r2
 8015e32:	005b      	lsls	r3, r3, #1
 8015e34:	4413      	add	r3, r2
 8015e36:	00db      	lsls	r3, r3, #3
 8015e38:	440b      	add	r3, r1
 8015e3a:	3314      	adds	r3, #20
 8015e3c:	781b      	ldrb	r3, [r3, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d006      	beq.n	8015e50 <etharp_find_entry+0x27c>
 8015e42:	4b1a      	ldr	r3, [pc, #104]	; (8015eac <etharp_find_entry+0x2d8>)
 8015e44:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015e48:	491d      	ldr	r1, [pc, #116]	; (8015ec0 <etharp_find_entry+0x2ec>)
 8015e4a:	481a      	ldr	r0, [pc, #104]	; (8015eb4 <etharp_find_entry+0x2e0>)
 8015e4c:	f002 fd6e 	bl	801892c <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d00b      	beq.n	8015e6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015e56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	6819      	ldr	r1, [r3, #0]
 8015e5e:	4812      	ldr	r0, [pc, #72]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015e60:	4613      	mov	r3, r2
 8015e62:	005b      	lsls	r3, r3, #1
 8015e64:	4413      	add	r3, r2
 8015e66:	00db      	lsls	r3, r3, #3
 8015e68:	4403      	add	r3, r0
 8015e6a:	3304      	adds	r3, #4
 8015e6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015e6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e72:	490d      	ldr	r1, [pc, #52]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015e74:	4613      	mov	r3, r2
 8015e76:	005b      	lsls	r3, r3, #1
 8015e78:	4413      	add	r3, r2
 8015e7a:	00db      	lsls	r3, r3, #3
 8015e7c:	440b      	add	r3, r1
 8015e7e:	3312      	adds	r3, #18
 8015e80:	2200      	movs	r2, #0
 8015e82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015e84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e88:	4907      	ldr	r1, [pc, #28]	; (8015ea8 <etharp_find_entry+0x2d4>)
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	005b      	lsls	r3, r3, #1
 8015e8e:	4413      	add	r3, r2
 8015e90:	00db      	lsls	r3, r3, #3
 8015e92:	440b      	add	r3, r1
 8015e94:	3308      	adds	r3, #8
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015e9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3728      	adds	r7, #40	; 0x28
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	20004af0 	.word	0x20004af0
 8015eac:	08022e80 	.word	0x08022e80
 8015eb0:	08022eb8 	.word	0x08022eb8
 8015eb4:	08022ef8 	.word	0x08022ef8
 8015eb8:	08022f20 	.word	0x08022f20
 8015ebc:	08022f38 	.word	0x08022f38
 8015ec0:	08022f4c 	.word	0x08022f4c

08015ec4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b088      	sub	sp, #32
 8015ec8:	af02      	add	r7, sp, #8
 8015eca:	60f8      	str	r0, [r7, #12]
 8015ecc:	60b9      	str	r1, [r7, #8]
 8015ece:	607a      	str	r2, [r7, #4]
 8015ed0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ed8:	2b06      	cmp	r3, #6
 8015eda:	d006      	beq.n	8015eea <etharp_update_arp_entry+0x26>
 8015edc:	4b48      	ldr	r3, [pc, #288]	; (8016000 <etharp_update_arp_entry+0x13c>)
 8015ede:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015ee2:	4948      	ldr	r1, [pc, #288]	; (8016004 <etharp_update_arp_entry+0x140>)
 8015ee4:	4848      	ldr	r0, [pc, #288]	; (8016008 <etharp_update_arp_entry+0x144>)
 8015ee6:	f002 fd21 	bl	801892c <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d012      	beq.n	8015f16 <etharp_update_arp_entry+0x52>
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d00e      	beq.n	8015f16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ef8:	68bb      	ldr	r3, [r7, #8]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	68f9      	ldr	r1, [r7, #12]
 8015efe:	4618      	mov	r0, r3
 8015f00:	f001 f8fe 	bl	8017100 <ip4_addr_isbroadcast_u32>
 8015f04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d105      	bne.n	8015f16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f12:	2be0      	cmp	r3, #224	; 0xe0
 8015f14:	d102      	bne.n	8015f1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015f16:	f06f 030f 	mvn.w	r3, #15
 8015f1a:	e06c      	b.n	8015ff6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015f1c:	78fb      	ldrb	r3, [r7, #3]
 8015f1e:	68fa      	ldr	r2, [r7, #12]
 8015f20:	4619      	mov	r1, r3
 8015f22:	68b8      	ldr	r0, [r7, #8]
 8015f24:	f7ff fe56 	bl	8015bd4 <etharp_find_entry>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015f2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	da02      	bge.n	8015f3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015f34:	8afb      	ldrh	r3, [r7, #22]
 8015f36:	b25b      	sxtb	r3, r3
 8015f38:	e05d      	b.n	8015ff6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015f3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f3e:	4933      	ldr	r1, [pc, #204]	; (801600c <etharp_update_arp_entry+0x148>)
 8015f40:	4613      	mov	r3, r2
 8015f42:	005b      	lsls	r3, r3, #1
 8015f44:	4413      	add	r3, r2
 8015f46:	00db      	lsls	r3, r3, #3
 8015f48:	440b      	add	r3, r1
 8015f4a:	3314      	adds	r3, #20
 8015f4c:	2202      	movs	r2, #2
 8015f4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015f50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f54:	492d      	ldr	r1, [pc, #180]	; (801600c <etharp_update_arp_entry+0x148>)
 8015f56:	4613      	mov	r3, r2
 8015f58:	005b      	lsls	r3, r3, #1
 8015f5a:	4413      	add	r3, r2
 8015f5c:	00db      	lsls	r3, r3, #3
 8015f5e:	440b      	add	r3, r1
 8015f60:	3308      	adds	r3, #8
 8015f62:	68fa      	ldr	r2, [r7, #12]
 8015f64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015f66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	005b      	lsls	r3, r3, #1
 8015f6e:	4413      	add	r3, r2
 8015f70:	00db      	lsls	r3, r3, #3
 8015f72:	3308      	adds	r3, #8
 8015f74:	4a25      	ldr	r2, [pc, #148]	; (801600c <etharp_update_arp_entry+0x148>)
 8015f76:	4413      	add	r3, r2
 8015f78:	3304      	adds	r3, #4
 8015f7a:	2206      	movs	r2, #6
 8015f7c:	6879      	ldr	r1, [r7, #4]
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f002 fa26 	bl	80183d0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015f84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f88:	4920      	ldr	r1, [pc, #128]	; (801600c <etharp_update_arp_entry+0x148>)
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	005b      	lsls	r3, r3, #1
 8015f8e:	4413      	add	r3, r2
 8015f90:	00db      	lsls	r3, r3, #3
 8015f92:	440b      	add	r3, r1
 8015f94:	3312      	adds	r3, #18
 8015f96:	2200      	movs	r2, #0
 8015f98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015f9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f9e:	491b      	ldr	r1, [pc, #108]	; (801600c <etharp_update_arp_entry+0x148>)
 8015fa0:	4613      	mov	r3, r2
 8015fa2:	005b      	lsls	r3, r3, #1
 8015fa4:	4413      	add	r3, r2
 8015fa6:	00db      	lsls	r3, r3, #3
 8015fa8:	440b      	add	r3, r1
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d021      	beq.n	8015ff4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015fb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015fb4:	4915      	ldr	r1, [pc, #84]	; (801600c <etharp_update_arp_entry+0x148>)
 8015fb6:	4613      	mov	r3, r2
 8015fb8:	005b      	lsls	r3, r3, #1
 8015fba:	4413      	add	r3, r2
 8015fbc:	00db      	lsls	r3, r3, #3
 8015fbe:	440b      	add	r3, r1
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015fc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015fc8:	4910      	ldr	r1, [pc, #64]	; (801600c <etharp_update_arp_entry+0x148>)
 8015fca:	4613      	mov	r3, r2
 8015fcc:	005b      	lsls	r3, r3, #1
 8015fce:	4413      	add	r3, r2
 8015fd0:	00db      	lsls	r3, r3, #3
 8015fd2:	440b      	add	r3, r1
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8015fde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fe2:	9300      	str	r3, [sp, #0]
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	6939      	ldr	r1, [r7, #16]
 8015fe8:	68f8      	ldr	r0, [r7, #12]
 8015fea:	f001 ff91 	bl	8017f10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015fee:	6938      	ldr	r0, [r7, #16]
 8015ff0:	f7f8 fc50 	bl	800e894 <pbuf_free>
  }
  return ERR_OK;
 8015ff4:	2300      	movs	r3, #0
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3718      	adds	r7, #24
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}
 8015ffe:	bf00      	nop
 8016000:	08022e80 	.word	0x08022e80
 8016004:	08022f78 	.word	0x08022f78
 8016008:	08022ef8 	.word	0x08022ef8
 801600c:	20004af0 	.word	0x20004af0

08016010 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b084      	sub	sp, #16
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016018:	2300      	movs	r3, #0
 801601a:	60fb      	str	r3, [r7, #12]
 801601c:	e01e      	b.n	801605c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801601e:	4913      	ldr	r1, [pc, #76]	; (801606c <etharp_cleanup_netif+0x5c>)
 8016020:	68fa      	ldr	r2, [r7, #12]
 8016022:	4613      	mov	r3, r2
 8016024:	005b      	lsls	r3, r3, #1
 8016026:	4413      	add	r3, r2
 8016028:	00db      	lsls	r3, r3, #3
 801602a:	440b      	add	r3, r1
 801602c:	3314      	adds	r3, #20
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016032:	7afb      	ldrb	r3, [r7, #11]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d00e      	beq.n	8016056 <etharp_cleanup_netif+0x46>
 8016038:	490c      	ldr	r1, [pc, #48]	; (801606c <etharp_cleanup_netif+0x5c>)
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	4613      	mov	r3, r2
 801603e:	005b      	lsls	r3, r3, #1
 8016040:	4413      	add	r3, r2
 8016042:	00db      	lsls	r3, r3, #3
 8016044:	440b      	add	r3, r1
 8016046:	3308      	adds	r3, #8
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	429a      	cmp	r2, r3
 801604e:	d102      	bne.n	8016056 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016050:	68f8      	ldr	r0, [r7, #12]
 8016052:	f7ff fce5 	bl	8015a20 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	3301      	adds	r3, #1
 801605a:	60fb      	str	r3, [r7, #12]
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2b09      	cmp	r3, #9
 8016060:	dddd      	ble.n	801601e <etharp_cleanup_netif+0xe>
    }
  }
}
 8016062:	bf00      	nop
 8016064:	bf00      	nop
 8016066:	3710      	adds	r7, #16
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}
 801606c:	20004af0 	.word	0x20004af0

08016070 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016070:	b5b0      	push	{r4, r5, r7, lr}
 8016072:	b08a      	sub	sp, #40	; 0x28
 8016074:	af04      	add	r7, sp, #16
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d107      	bne.n	8016090 <etharp_input+0x20>
 8016080:	4b3d      	ldr	r3, [pc, #244]	; (8016178 <etharp_input+0x108>)
 8016082:	f240 228a 	movw	r2, #650	; 0x28a
 8016086:	493d      	ldr	r1, [pc, #244]	; (801617c <etharp_input+0x10c>)
 8016088:	483d      	ldr	r0, [pc, #244]	; (8016180 <etharp_input+0x110>)
 801608a:	f002 fc4f 	bl	801892c <printf>
 801608e:	e06f      	b.n	8016170 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	881b      	ldrh	r3, [r3, #0]
 801609a:	b29b      	uxth	r3, r3
 801609c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160a0:	d10c      	bne.n	80160bc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80160a6:	2b06      	cmp	r3, #6
 80160a8:	d108      	bne.n	80160bc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80160aa:	693b      	ldr	r3, [r7, #16]
 80160ac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80160ae:	2b04      	cmp	r3, #4
 80160b0:	d104      	bne.n	80160bc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	885b      	ldrh	r3, [r3, #2]
 80160b6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80160b8:	2b08      	cmp	r3, #8
 80160ba:	d003      	beq.n	80160c4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f7f8 fbe9 	bl	800e894 <pbuf_free>
    return;
 80160c2:	e055      	b.n	8016170 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	330e      	adds	r3, #14
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	3318      	adds	r3, #24
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	3304      	adds	r3, #4
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d102      	bne.n	80160e4 <etharp_input+0x74>
    for_us = 0;
 80160de:	2300      	movs	r3, #0
 80160e0:	75fb      	strb	r3, [r7, #23]
 80160e2:	e009      	b.n	80160f8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80160e4:	68ba      	ldr	r2, [r7, #8]
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	3304      	adds	r3, #4
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	bf0c      	ite	eq
 80160f0:	2301      	moveq	r3, #1
 80160f2:	2300      	movne	r3, #0
 80160f4:	b2db      	uxtb	r3, r3
 80160f6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80160f8:	693b      	ldr	r3, [r7, #16]
 80160fa:	f103 0208 	add.w	r2, r3, #8
 80160fe:	7dfb      	ldrb	r3, [r7, #23]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d001      	beq.n	8016108 <etharp_input+0x98>
 8016104:	2301      	movs	r3, #1
 8016106:	e000      	b.n	801610a <etharp_input+0x9a>
 8016108:	2302      	movs	r3, #2
 801610a:	f107 010c 	add.w	r1, r7, #12
 801610e:	6838      	ldr	r0, [r7, #0]
 8016110:	f7ff fed8 	bl	8015ec4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	88db      	ldrh	r3, [r3, #6]
 8016118:	b29b      	uxth	r3, r3
 801611a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801611e:	d003      	beq.n	8016128 <etharp_input+0xb8>
 8016120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016124:	d01e      	beq.n	8016164 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016126:	e020      	b.n	801616a <etharp_input+0xfa>
      if (for_us) {
 8016128:	7dfb      	ldrb	r3, [r7, #23]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d01c      	beq.n	8016168 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8016134:	693b      	ldr	r3, [r7, #16]
 8016136:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016144:	693a      	ldr	r2, [r7, #16]
 8016146:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016148:	2102      	movs	r1, #2
 801614a:	9103      	str	r1, [sp, #12]
 801614c:	f107 010c 	add.w	r1, r7, #12
 8016150:	9102      	str	r1, [sp, #8]
 8016152:	9201      	str	r2, [sp, #4]
 8016154:	9300      	str	r3, [sp, #0]
 8016156:	462b      	mov	r3, r5
 8016158:	4622      	mov	r2, r4
 801615a:	4601      	mov	r1, r0
 801615c:	6838      	ldr	r0, [r7, #0]
 801615e:	f000 faeb 	bl	8016738 <etharp_raw>
      break;
 8016162:	e001      	b.n	8016168 <etharp_input+0xf8>
      break;
 8016164:	bf00      	nop
 8016166:	e000      	b.n	801616a <etharp_input+0xfa>
      break;
 8016168:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f7f8 fb92 	bl	800e894 <pbuf_free>
}
 8016170:	3718      	adds	r7, #24
 8016172:	46bd      	mov	sp, r7
 8016174:	bdb0      	pop	{r4, r5, r7, pc}
 8016176:	bf00      	nop
 8016178:	08022e80 	.word	0x08022e80
 801617c:	08022fd0 	.word	0x08022fd0
 8016180:	08022ef8 	.word	0x08022ef8

08016184 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b086      	sub	sp, #24
 8016188:	af02      	add	r7, sp, #8
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	60b9      	str	r1, [r7, #8]
 801618e:	4613      	mov	r3, r2
 8016190:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016192:	79fa      	ldrb	r2, [r7, #7]
 8016194:	4944      	ldr	r1, [pc, #272]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 8016196:	4613      	mov	r3, r2
 8016198:	005b      	lsls	r3, r3, #1
 801619a:	4413      	add	r3, r2
 801619c:	00db      	lsls	r3, r3, #3
 801619e:	440b      	add	r3, r1
 80161a0:	3314      	adds	r3, #20
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d806      	bhi.n	80161b6 <etharp_output_to_arp_index+0x32>
 80161a8:	4b40      	ldr	r3, [pc, #256]	; (80162ac <etharp_output_to_arp_index+0x128>)
 80161aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80161ae:	4940      	ldr	r1, [pc, #256]	; (80162b0 <etharp_output_to_arp_index+0x12c>)
 80161b0:	4840      	ldr	r0, [pc, #256]	; (80162b4 <etharp_output_to_arp_index+0x130>)
 80161b2:	f002 fbbb 	bl	801892c <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80161b6:	79fa      	ldrb	r2, [r7, #7]
 80161b8:	493b      	ldr	r1, [pc, #236]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 80161ba:	4613      	mov	r3, r2
 80161bc:	005b      	lsls	r3, r3, #1
 80161be:	4413      	add	r3, r2
 80161c0:	00db      	lsls	r3, r3, #3
 80161c2:	440b      	add	r3, r1
 80161c4:	3314      	adds	r3, #20
 80161c6:	781b      	ldrb	r3, [r3, #0]
 80161c8:	2b02      	cmp	r3, #2
 80161ca:	d153      	bne.n	8016274 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80161cc:	79fa      	ldrb	r2, [r7, #7]
 80161ce:	4936      	ldr	r1, [pc, #216]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 80161d0:	4613      	mov	r3, r2
 80161d2:	005b      	lsls	r3, r3, #1
 80161d4:	4413      	add	r3, r2
 80161d6:	00db      	lsls	r3, r3, #3
 80161d8:	440b      	add	r3, r1
 80161da:	3312      	adds	r3, #18
 80161dc:	881b      	ldrh	r3, [r3, #0]
 80161de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80161e2:	d919      	bls.n	8016218 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80161e4:	79fa      	ldrb	r2, [r7, #7]
 80161e6:	4613      	mov	r3, r2
 80161e8:	005b      	lsls	r3, r3, #1
 80161ea:	4413      	add	r3, r2
 80161ec:	00db      	lsls	r3, r3, #3
 80161ee:	4a2e      	ldr	r2, [pc, #184]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 80161f0:	4413      	add	r3, r2
 80161f2:	3304      	adds	r3, #4
 80161f4:	4619      	mov	r1, r3
 80161f6:	68f8      	ldr	r0, [r7, #12]
 80161f8:	f000 fb4c 	bl	8016894 <etharp_request>
 80161fc:	4603      	mov	r3, r0
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d138      	bne.n	8016274 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016202:	79fa      	ldrb	r2, [r7, #7]
 8016204:	4928      	ldr	r1, [pc, #160]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 8016206:	4613      	mov	r3, r2
 8016208:	005b      	lsls	r3, r3, #1
 801620a:	4413      	add	r3, r2
 801620c:	00db      	lsls	r3, r3, #3
 801620e:	440b      	add	r3, r1
 8016210:	3314      	adds	r3, #20
 8016212:	2203      	movs	r2, #3
 8016214:	701a      	strb	r2, [r3, #0]
 8016216:	e02d      	b.n	8016274 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016218:	79fa      	ldrb	r2, [r7, #7]
 801621a:	4923      	ldr	r1, [pc, #140]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 801621c:	4613      	mov	r3, r2
 801621e:	005b      	lsls	r3, r3, #1
 8016220:	4413      	add	r3, r2
 8016222:	00db      	lsls	r3, r3, #3
 8016224:	440b      	add	r3, r1
 8016226:	3312      	adds	r3, #18
 8016228:	881b      	ldrh	r3, [r3, #0]
 801622a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801622e:	d321      	bcc.n	8016274 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016230:	79fa      	ldrb	r2, [r7, #7]
 8016232:	4613      	mov	r3, r2
 8016234:	005b      	lsls	r3, r3, #1
 8016236:	4413      	add	r3, r2
 8016238:	00db      	lsls	r3, r3, #3
 801623a:	4a1b      	ldr	r2, [pc, #108]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 801623c:	4413      	add	r3, r2
 801623e:	1d19      	adds	r1, r3, #4
 8016240:	79fa      	ldrb	r2, [r7, #7]
 8016242:	4613      	mov	r3, r2
 8016244:	005b      	lsls	r3, r3, #1
 8016246:	4413      	add	r3, r2
 8016248:	00db      	lsls	r3, r3, #3
 801624a:	3308      	adds	r3, #8
 801624c:	4a16      	ldr	r2, [pc, #88]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 801624e:	4413      	add	r3, r2
 8016250:	3304      	adds	r3, #4
 8016252:	461a      	mov	r2, r3
 8016254:	68f8      	ldr	r0, [r7, #12]
 8016256:	f000 fafb 	bl	8016850 <etharp_request_dst>
 801625a:	4603      	mov	r3, r0
 801625c:	2b00      	cmp	r3, #0
 801625e:	d109      	bne.n	8016274 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016260:	79fa      	ldrb	r2, [r7, #7]
 8016262:	4911      	ldr	r1, [pc, #68]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 8016264:	4613      	mov	r3, r2
 8016266:	005b      	lsls	r3, r3, #1
 8016268:	4413      	add	r3, r2
 801626a:	00db      	lsls	r3, r3, #3
 801626c:	440b      	add	r3, r1
 801626e:	3314      	adds	r3, #20
 8016270:	2203      	movs	r2, #3
 8016272:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	f103 0122 	add.w	r1, r3, #34	; 0x22
 801627a:	79fa      	ldrb	r2, [r7, #7]
 801627c:	4613      	mov	r3, r2
 801627e:	005b      	lsls	r3, r3, #1
 8016280:	4413      	add	r3, r2
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	3308      	adds	r3, #8
 8016286:	4a08      	ldr	r2, [pc, #32]	; (80162a8 <etharp_output_to_arp_index+0x124>)
 8016288:	4413      	add	r3, r2
 801628a:	3304      	adds	r3, #4
 801628c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016290:	9200      	str	r2, [sp, #0]
 8016292:	460a      	mov	r2, r1
 8016294:	68b9      	ldr	r1, [r7, #8]
 8016296:	68f8      	ldr	r0, [r7, #12]
 8016298:	f001 fe3a 	bl	8017f10 <ethernet_output>
 801629c:	4603      	mov	r3, r0
}
 801629e:	4618      	mov	r0, r3
 80162a0:	3710      	adds	r7, #16
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}
 80162a6:	bf00      	nop
 80162a8:	20004af0 	.word	0x20004af0
 80162ac:	08022e80 	.word	0x08022e80
 80162b0:	08022ff0 	.word	0x08022ff0
 80162b4:	08022ef8 	.word	0x08022ef8

080162b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b08a      	sub	sp, #40	; 0x28
 80162bc:	af02      	add	r7, sp, #8
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	60b9      	str	r1, [r7, #8]
 80162c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d106      	bne.n	80162dc <etharp_output+0x24>
 80162ce:	4b73      	ldr	r3, [pc, #460]	; (801649c <etharp_output+0x1e4>)
 80162d0:	f240 321e 	movw	r2, #798	; 0x31e
 80162d4:	4972      	ldr	r1, [pc, #456]	; (80164a0 <etharp_output+0x1e8>)
 80162d6:	4873      	ldr	r0, [pc, #460]	; (80164a4 <etharp_output+0x1ec>)
 80162d8:	f002 fb28 	bl	801892c <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d106      	bne.n	80162f0 <etharp_output+0x38>
 80162e2:	4b6e      	ldr	r3, [pc, #440]	; (801649c <etharp_output+0x1e4>)
 80162e4:	f240 321f 	movw	r2, #799	; 0x31f
 80162e8:	496f      	ldr	r1, [pc, #444]	; (80164a8 <etharp_output+0x1f0>)
 80162ea:	486e      	ldr	r0, [pc, #440]	; (80164a4 <etharp_output+0x1ec>)
 80162ec:	f002 fb1e 	bl	801892c <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d106      	bne.n	8016304 <etharp_output+0x4c>
 80162f6:	4b69      	ldr	r3, [pc, #420]	; (801649c <etharp_output+0x1e4>)
 80162f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80162fc:	496b      	ldr	r1, [pc, #428]	; (80164ac <etharp_output+0x1f4>)
 80162fe:	4869      	ldr	r0, [pc, #420]	; (80164a4 <etharp_output+0x1ec>)
 8016300:	f002 fb14 	bl	801892c <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	68f9      	ldr	r1, [r7, #12]
 801630a:	4618      	mov	r0, r3
 801630c:	f000 fef8 	bl	8017100 <ip4_addr_isbroadcast_u32>
 8016310:	4603      	mov	r3, r0
 8016312:	2b00      	cmp	r3, #0
 8016314:	d002      	beq.n	801631c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016316:	4b66      	ldr	r3, [pc, #408]	; (80164b0 <etharp_output+0x1f8>)
 8016318:	61fb      	str	r3, [r7, #28]
 801631a:	e0af      	b.n	801647c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016324:	2be0      	cmp	r3, #224	; 0xe0
 8016326:	d118      	bne.n	801635a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016328:	2301      	movs	r3, #1
 801632a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801632c:	2300      	movs	r3, #0
 801632e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016330:	235e      	movs	r3, #94	; 0x5e
 8016332:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	3301      	adds	r3, #1
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801633e:	b2db      	uxtb	r3, r3
 8016340:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	3302      	adds	r3, #2
 8016346:	781b      	ldrb	r3, [r3, #0]
 8016348:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	3303      	adds	r3, #3
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016352:	f107 0310 	add.w	r3, r7, #16
 8016356:	61fb      	str	r3, [r7, #28]
 8016358:	e090      	b.n	801647c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681a      	ldr	r2, [r3, #0]
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	3304      	adds	r3, #4
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	405a      	eors	r2, r3
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	3308      	adds	r3, #8
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	4013      	ands	r3, r2
 801636e:	2b00      	cmp	r3, #0
 8016370:	d012      	beq.n	8016398 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016378:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801637c:	4293      	cmp	r3, r2
 801637e:	d00b      	beq.n	8016398 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	330c      	adds	r3, #12
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d003      	beq.n	8016392 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	330c      	adds	r3, #12
 801638e:	61bb      	str	r3, [r7, #24]
 8016390:	e002      	b.n	8016398 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016392:	f06f 0303 	mvn.w	r3, #3
 8016396:	e07d      	b.n	8016494 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016398:	4b46      	ldr	r3, [pc, #280]	; (80164b4 <etharp_output+0x1fc>)
 801639a:	781b      	ldrb	r3, [r3, #0]
 801639c:	4619      	mov	r1, r3
 801639e:	4a46      	ldr	r2, [pc, #280]	; (80164b8 <etharp_output+0x200>)
 80163a0:	460b      	mov	r3, r1
 80163a2:	005b      	lsls	r3, r3, #1
 80163a4:	440b      	add	r3, r1
 80163a6:	00db      	lsls	r3, r3, #3
 80163a8:	4413      	add	r3, r2
 80163aa:	3314      	adds	r3, #20
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	d925      	bls.n	80163fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80163b2:	4b40      	ldr	r3, [pc, #256]	; (80164b4 <etharp_output+0x1fc>)
 80163b4:	781b      	ldrb	r3, [r3, #0]
 80163b6:	4619      	mov	r1, r3
 80163b8:	4a3f      	ldr	r2, [pc, #252]	; (80164b8 <etharp_output+0x200>)
 80163ba:	460b      	mov	r3, r1
 80163bc:	005b      	lsls	r3, r3, #1
 80163be:	440b      	add	r3, r1
 80163c0:	00db      	lsls	r3, r3, #3
 80163c2:	4413      	add	r3, r2
 80163c4:	3308      	adds	r3, #8
 80163c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80163c8:	68fa      	ldr	r2, [r7, #12]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d117      	bne.n	80163fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80163ce:	69bb      	ldr	r3, [r7, #24]
 80163d0:	681a      	ldr	r2, [r3, #0]
 80163d2:	4b38      	ldr	r3, [pc, #224]	; (80164b4 <etharp_output+0x1fc>)
 80163d4:	781b      	ldrb	r3, [r3, #0]
 80163d6:	4618      	mov	r0, r3
 80163d8:	4937      	ldr	r1, [pc, #220]	; (80164b8 <etharp_output+0x200>)
 80163da:	4603      	mov	r3, r0
 80163dc:	005b      	lsls	r3, r3, #1
 80163de:	4403      	add	r3, r0
 80163e0:	00db      	lsls	r3, r3, #3
 80163e2:	440b      	add	r3, r1
 80163e4:	3304      	adds	r3, #4
 80163e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d108      	bne.n	80163fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80163ec:	4b31      	ldr	r3, [pc, #196]	; (80164b4 <etharp_output+0x1fc>)
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	461a      	mov	r2, r3
 80163f2:	68b9      	ldr	r1, [r7, #8]
 80163f4:	68f8      	ldr	r0, [r7, #12]
 80163f6:	f7ff fec5 	bl	8016184 <etharp_output_to_arp_index>
 80163fa:	4603      	mov	r3, r0
 80163fc:	e04a      	b.n	8016494 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80163fe:	2300      	movs	r3, #0
 8016400:	75fb      	strb	r3, [r7, #23]
 8016402:	e031      	b.n	8016468 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016404:	7dfa      	ldrb	r2, [r7, #23]
 8016406:	492c      	ldr	r1, [pc, #176]	; (80164b8 <etharp_output+0x200>)
 8016408:	4613      	mov	r3, r2
 801640a:	005b      	lsls	r3, r3, #1
 801640c:	4413      	add	r3, r2
 801640e:	00db      	lsls	r3, r3, #3
 8016410:	440b      	add	r3, r1
 8016412:	3314      	adds	r3, #20
 8016414:	781b      	ldrb	r3, [r3, #0]
 8016416:	2b01      	cmp	r3, #1
 8016418:	d923      	bls.n	8016462 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801641a:	7dfa      	ldrb	r2, [r7, #23]
 801641c:	4926      	ldr	r1, [pc, #152]	; (80164b8 <etharp_output+0x200>)
 801641e:	4613      	mov	r3, r2
 8016420:	005b      	lsls	r3, r3, #1
 8016422:	4413      	add	r3, r2
 8016424:	00db      	lsls	r3, r3, #3
 8016426:	440b      	add	r3, r1
 8016428:	3308      	adds	r3, #8
 801642a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801642c:	68fa      	ldr	r2, [r7, #12]
 801642e:	429a      	cmp	r2, r3
 8016430:	d117      	bne.n	8016462 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016432:	69bb      	ldr	r3, [r7, #24]
 8016434:	6819      	ldr	r1, [r3, #0]
 8016436:	7dfa      	ldrb	r2, [r7, #23]
 8016438:	481f      	ldr	r0, [pc, #124]	; (80164b8 <etharp_output+0x200>)
 801643a:	4613      	mov	r3, r2
 801643c:	005b      	lsls	r3, r3, #1
 801643e:	4413      	add	r3, r2
 8016440:	00db      	lsls	r3, r3, #3
 8016442:	4403      	add	r3, r0
 8016444:	3304      	adds	r3, #4
 8016446:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016448:	4299      	cmp	r1, r3
 801644a:	d10a      	bne.n	8016462 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801644c:	4a19      	ldr	r2, [pc, #100]	; (80164b4 <etharp_output+0x1fc>)
 801644e:	7dfb      	ldrb	r3, [r7, #23]
 8016450:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016452:	7dfb      	ldrb	r3, [r7, #23]
 8016454:	461a      	mov	r2, r3
 8016456:	68b9      	ldr	r1, [r7, #8]
 8016458:	68f8      	ldr	r0, [r7, #12]
 801645a:	f7ff fe93 	bl	8016184 <etharp_output_to_arp_index>
 801645e:	4603      	mov	r3, r0
 8016460:	e018      	b.n	8016494 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016462:	7dfb      	ldrb	r3, [r7, #23]
 8016464:	3301      	adds	r3, #1
 8016466:	75fb      	strb	r3, [r7, #23]
 8016468:	7dfb      	ldrb	r3, [r7, #23]
 801646a:	2b09      	cmp	r3, #9
 801646c:	d9ca      	bls.n	8016404 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801646e:	68ba      	ldr	r2, [r7, #8]
 8016470:	69b9      	ldr	r1, [r7, #24]
 8016472:	68f8      	ldr	r0, [r7, #12]
 8016474:	f000 f822 	bl	80164bc <etharp_query>
 8016478:	4603      	mov	r3, r0
 801647a:	e00b      	b.n	8016494 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8016482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016486:	9300      	str	r3, [sp, #0]
 8016488:	69fb      	ldr	r3, [r7, #28]
 801648a:	68b9      	ldr	r1, [r7, #8]
 801648c:	68f8      	ldr	r0, [r7, #12]
 801648e:	f001 fd3f 	bl	8017f10 <ethernet_output>
 8016492:	4603      	mov	r3, r0
}
 8016494:	4618      	mov	r0, r3
 8016496:	3720      	adds	r7, #32
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	08022e80 	.word	0x08022e80
 80164a0:	08022fd0 	.word	0x08022fd0
 80164a4:	08022ef8 	.word	0x08022ef8
 80164a8:	08023020 	.word	0x08023020
 80164ac:	08022fc0 	.word	0x08022fc0
 80164b0:	08023674 	.word	0x08023674
 80164b4:	20004be0 	.word	0x20004be0
 80164b8:	20004af0 	.word	0x20004af0

080164bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b08c      	sub	sp, #48	; 0x30
 80164c0:	af02      	add	r7, sp, #8
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	60b9      	str	r1, [r7, #8]
 80164c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	3322      	adds	r3, #34	; 0x22
 80164cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80164ce:	23ff      	movs	r3, #255	; 0xff
 80164d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80164d4:	2300      	movs	r3, #0
 80164d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	68f9      	ldr	r1, [r7, #12]
 80164de:	4618      	mov	r0, r3
 80164e0:	f000 fe0e 	bl	8017100 <ip4_addr_isbroadcast_u32>
 80164e4:	4603      	mov	r3, r0
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d10c      	bne.n	8016504 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80164ea:	68bb      	ldr	r3, [r7, #8]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80164f2:	2be0      	cmp	r3, #224	; 0xe0
 80164f4:	d006      	beq.n	8016504 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d003      	beq.n	8016504 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d102      	bne.n	801650a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016504:	f06f 030f 	mvn.w	r3, #15
 8016508:	e101      	b.n	801670e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801650a:	68fa      	ldr	r2, [r7, #12]
 801650c:	2101      	movs	r1, #1
 801650e:	68b8      	ldr	r0, [r7, #8]
 8016510:	f7ff fb60 	bl	8015bd4 <etharp_find_entry>
 8016514:	4603      	mov	r3, r0
 8016516:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016518:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801651c:	2b00      	cmp	r3, #0
 801651e:	da02      	bge.n	8016526 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016520:	8a7b      	ldrh	r3, [r7, #18]
 8016522:	b25b      	sxtb	r3, r3
 8016524:	e0f3      	b.n	801670e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016526:	8a7b      	ldrh	r3, [r7, #18]
 8016528:	2b7e      	cmp	r3, #126	; 0x7e
 801652a:	d906      	bls.n	801653a <etharp_query+0x7e>
 801652c:	4b7a      	ldr	r3, [pc, #488]	; (8016718 <etharp_query+0x25c>)
 801652e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016532:	497a      	ldr	r1, [pc, #488]	; (801671c <etharp_query+0x260>)
 8016534:	487a      	ldr	r0, [pc, #488]	; (8016720 <etharp_query+0x264>)
 8016536:	f002 f9f9 	bl	801892c <printf>
  i = (netif_addr_idx_t)i_err;
 801653a:	8a7b      	ldrh	r3, [r7, #18]
 801653c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801653e:	7c7a      	ldrb	r2, [r7, #17]
 8016540:	4978      	ldr	r1, [pc, #480]	; (8016724 <etharp_query+0x268>)
 8016542:	4613      	mov	r3, r2
 8016544:	005b      	lsls	r3, r3, #1
 8016546:	4413      	add	r3, r2
 8016548:	00db      	lsls	r3, r3, #3
 801654a:	440b      	add	r3, r1
 801654c:	3314      	adds	r3, #20
 801654e:	781b      	ldrb	r3, [r3, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d115      	bne.n	8016580 <etharp_query+0xc4>
    is_new_entry = 1;
 8016554:	2301      	movs	r3, #1
 8016556:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016558:	7c7a      	ldrb	r2, [r7, #17]
 801655a:	4972      	ldr	r1, [pc, #456]	; (8016724 <etharp_query+0x268>)
 801655c:	4613      	mov	r3, r2
 801655e:	005b      	lsls	r3, r3, #1
 8016560:	4413      	add	r3, r2
 8016562:	00db      	lsls	r3, r3, #3
 8016564:	440b      	add	r3, r1
 8016566:	3314      	adds	r3, #20
 8016568:	2201      	movs	r2, #1
 801656a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801656c:	7c7a      	ldrb	r2, [r7, #17]
 801656e:	496d      	ldr	r1, [pc, #436]	; (8016724 <etharp_query+0x268>)
 8016570:	4613      	mov	r3, r2
 8016572:	005b      	lsls	r3, r3, #1
 8016574:	4413      	add	r3, r2
 8016576:	00db      	lsls	r3, r3, #3
 8016578:	440b      	add	r3, r1
 801657a:	3308      	adds	r3, #8
 801657c:	68fa      	ldr	r2, [r7, #12]
 801657e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016580:	7c7a      	ldrb	r2, [r7, #17]
 8016582:	4968      	ldr	r1, [pc, #416]	; (8016724 <etharp_query+0x268>)
 8016584:	4613      	mov	r3, r2
 8016586:	005b      	lsls	r3, r3, #1
 8016588:	4413      	add	r3, r2
 801658a:	00db      	lsls	r3, r3, #3
 801658c:	440b      	add	r3, r1
 801658e:	3314      	adds	r3, #20
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	2b01      	cmp	r3, #1
 8016594:	d011      	beq.n	80165ba <etharp_query+0xfe>
 8016596:	7c7a      	ldrb	r2, [r7, #17]
 8016598:	4962      	ldr	r1, [pc, #392]	; (8016724 <etharp_query+0x268>)
 801659a:	4613      	mov	r3, r2
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	4413      	add	r3, r2
 80165a0:	00db      	lsls	r3, r3, #3
 80165a2:	440b      	add	r3, r1
 80165a4:	3314      	adds	r3, #20
 80165a6:	781b      	ldrb	r3, [r3, #0]
 80165a8:	2b01      	cmp	r3, #1
 80165aa:	d806      	bhi.n	80165ba <etharp_query+0xfe>
 80165ac:	4b5a      	ldr	r3, [pc, #360]	; (8016718 <etharp_query+0x25c>)
 80165ae:	f240 32cd 	movw	r2, #973	; 0x3cd
 80165b2:	495d      	ldr	r1, [pc, #372]	; (8016728 <etharp_query+0x26c>)
 80165b4:	485a      	ldr	r0, [pc, #360]	; (8016720 <etharp_query+0x264>)
 80165b6:	f002 f9b9 	bl	801892c <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80165ba:	6a3b      	ldr	r3, [r7, #32]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d102      	bne.n	80165c6 <etharp_query+0x10a>
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d10c      	bne.n	80165e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80165c6:	68b9      	ldr	r1, [r7, #8]
 80165c8:	68f8      	ldr	r0, [r7, #12]
 80165ca:	f000 f963 	bl	8016894 <etharp_request>
 80165ce:	4603      	mov	r3, r0
 80165d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d102      	bne.n	80165e0 <etharp_query+0x124>
      return result;
 80165da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80165de:	e096      	b.n	801670e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d106      	bne.n	80165f4 <etharp_query+0x138>
 80165e6:	4b4c      	ldr	r3, [pc, #304]	; (8016718 <etharp_query+0x25c>)
 80165e8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80165ec:	494f      	ldr	r1, [pc, #316]	; (801672c <etharp_query+0x270>)
 80165ee:	484c      	ldr	r0, [pc, #304]	; (8016720 <etharp_query+0x264>)
 80165f0:	f002 f99c 	bl	801892c <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80165f4:	7c7a      	ldrb	r2, [r7, #17]
 80165f6:	494b      	ldr	r1, [pc, #300]	; (8016724 <etharp_query+0x268>)
 80165f8:	4613      	mov	r3, r2
 80165fa:	005b      	lsls	r3, r3, #1
 80165fc:	4413      	add	r3, r2
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	440b      	add	r3, r1
 8016602:	3314      	adds	r3, #20
 8016604:	781b      	ldrb	r3, [r3, #0]
 8016606:	2b01      	cmp	r3, #1
 8016608:	d917      	bls.n	801663a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801660a:	4a49      	ldr	r2, [pc, #292]	; (8016730 <etharp_query+0x274>)
 801660c:	7c7b      	ldrb	r3, [r7, #17]
 801660e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016610:	7c7a      	ldrb	r2, [r7, #17]
 8016612:	4613      	mov	r3, r2
 8016614:	005b      	lsls	r3, r3, #1
 8016616:	4413      	add	r3, r2
 8016618:	00db      	lsls	r3, r3, #3
 801661a:	3308      	adds	r3, #8
 801661c:	4a41      	ldr	r2, [pc, #260]	; (8016724 <etharp_query+0x268>)
 801661e:	4413      	add	r3, r2
 8016620:	3304      	adds	r3, #4
 8016622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016626:	9200      	str	r2, [sp, #0]
 8016628:	697a      	ldr	r2, [r7, #20]
 801662a:	6879      	ldr	r1, [r7, #4]
 801662c:	68f8      	ldr	r0, [r7, #12]
 801662e:	f001 fc6f 	bl	8017f10 <ethernet_output>
 8016632:	4603      	mov	r3, r0
 8016634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016638:	e067      	b.n	801670a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801663a:	7c7a      	ldrb	r2, [r7, #17]
 801663c:	4939      	ldr	r1, [pc, #228]	; (8016724 <etharp_query+0x268>)
 801663e:	4613      	mov	r3, r2
 8016640:	005b      	lsls	r3, r3, #1
 8016642:	4413      	add	r3, r2
 8016644:	00db      	lsls	r3, r3, #3
 8016646:	440b      	add	r3, r1
 8016648:	3314      	adds	r3, #20
 801664a:	781b      	ldrb	r3, [r3, #0]
 801664c:	2b01      	cmp	r3, #1
 801664e:	d15c      	bne.n	801670a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016650:	2300      	movs	r3, #0
 8016652:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016658:	e01c      	b.n	8016694 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801665a:	69fb      	ldr	r3, [r7, #28]
 801665c:	895a      	ldrh	r2, [r3, #10]
 801665e:	69fb      	ldr	r3, [r7, #28]
 8016660:	891b      	ldrh	r3, [r3, #8]
 8016662:	429a      	cmp	r2, r3
 8016664:	d10a      	bne.n	801667c <etharp_query+0x1c0>
 8016666:	69fb      	ldr	r3, [r7, #28]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d006      	beq.n	801667c <etharp_query+0x1c0>
 801666e:	4b2a      	ldr	r3, [pc, #168]	; (8016718 <etharp_query+0x25c>)
 8016670:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016674:	492f      	ldr	r1, [pc, #188]	; (8016734 <etharp_query+0x278>)
 8016676:	482a      	ldr	r0, [pc, #168]	; (8016720 <etharp_query+0x264>)
 8016678:	f002 f958 	bl	801892c <printf>
      if (PBUF_NEEDS_COPY(p)) {
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	7b1b      	ldrb	r3, [r3, #12]
 8016680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016684:	2b00      	cmp	r3, #0
 8016686:	d002      	beq.n	801668e <etharp_query+0x1d2>
        copy_needed = 1;
 8016688:	2301      	movs	r3, #1
 801668a:	61bb      	str	r3, [r7, #24]
        break;
 801668c:	e005      	b.n	801669a <etharp_query+0x1de>
      }
      p = p->next;
 801668e:	69fb      	ldr	r3, [r7, #28]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016694:	69fb      	ldr	r3, [r7, #28]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d1df      	bne.n	801665a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801669a:	69bb      	ldr	r3, [r7, #24]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d007      	beq.n	80166b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80166a6:	200e      	movs	r0, #14
 80166a8:	f7f8 fb6c 	bl	800ed84 <pbuf_clone>
 80166ac:	61f8      	str	r0, [r7, #28]
 80166ae:	e004      	b.n	80166ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80166b4:	69f8      	ldr	r0, [r7, #28]
 80166b6:	f7f8 f993 	bl	800e9e0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80166ba:	69fb      	ldr	r3, [r7, #28]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d021      	beq.n	8016704 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80166c0:	7c7a      	ldrb	r2, [r7, #17]
 80166c2:	4918      	ldr	r1, [pc, #96]	; (8016724 <etharp_query+0x268>)
 80166c4:	4613      	mov	r3, r2
 80166c6:	005b      	lsls	r3, r3, #1
 80166c8:	4413      	add	r3, r2
 80166ca:	00db      	lsls	r3, r3, #3
 80166cc:	440b      	add	r3, r1
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d00a      	beq.n	80166ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80166d4:	7c7a      	ldrb	r2, [r7, #17]
 80166d6:	4913      	ldr	r1, [pc, #76]	; (8016724 <etharp_query+0x268>)
 80166d8:	4613      	mov	r3, r2
 80166da:	005b      	lsls	r3, r3, #1
 80166dc:	4413      	add	r3, r2
 80166de:	00db      	lsls	r3, r3, #3
 80166e0:	440b      	add	r3, r1
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7f8 f8d5 	bl	800e894 <pbuf_free>
      }
      arp_table[i].q = p;
 80166ea:	7c7a      	ldrb	r2, [r7, #17]
 80166ec:	490d      	ldr	r1, [pc, #52]	; (8016724 <etharp_query+0x268>)
 80166ee:	4613      	mov	r3, r2
 80166f0:	005b      	lsls	r3, r3, #1
 80166f2:	4413      	add	r3, r2
 80166f4:	00db      	lsls	r3, r3, #3
 80166f6:	440b      	add	r3, r1
 80166f8:	69fa      	ldr	r2, [r7, #28]
 80166fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80166fc:	2300      	movs	r3, #0
 80166fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016702:	e002      	b.n	801670a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016704:	23ff      	movs	r3, #255	; 0xff
 8016706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801670a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801670e:	4618      	mov	r0, r3
 8016710:	3728      	adds	r7, #40	; 0x28
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	08022e80 	.word	0x08022e80
 801671c:	0802302c 	.word	0x0802302c
 8016720:	08022ef8 	.word	0x08022ef8
 8016724:	20004af0 	.word	0x20004af0
 8016728:	0802303c 	.word	0x0802303c
 801672c:	08023020 	.word	0x08023020
 8016730:	20004be0 	.word	0x20004be0
 8016734:	08023064 	.word	0x08023064

08016738 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b08a      	sub	sp, #40	; 0x28
 801673c:	af02      	add	r7, sp, #8
 801673e:	60f8      	str	r0, [r7, #12]
 8016740:	60b9      	str	r1, [r7, #8]
 8016742:	607a      	str	r2, [r7, #4]
 8016744:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016746:	2300      	movs	r3, #0
 8016748:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d106      	bne.n	801675e <etharp_raw+0x26>
 8016750:	4b3a      	ldr	r3, [pc, #232]	; (801683c <etharp_raw+0x104>)
 8016752:	f240 4257 	movw	r2, #1111	; 0x457
 8016756:	493a      	ldr	r1, [pc, #232]	; (8016840 <etharp_raw+0x108>)
 8016758:	483a      	ldr	r0, [pc, #232]	; (8016844 <etharp_raw+0x10c>)
 801675a:	f002 f8e7 	bl	801892c <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801675e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016762:	211c      	movs	r1, #28
 8016764:	200e      	movs	r0, #14
 8016766:	f7f7 fdb1 	bl	800e2cc <pbuf_alloc>
 801676a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801676c:	69bb      	ldr	r3, [r7, #24]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d102      	bne.n	8016778 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016772:	f04f 33ff 	mov.w	r3, #4294967295
 8016776:	e05d      	b.n	8016834 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016778:	69bb      	ldr	r3, [r7, #24]
 801677a:	895b      	ldrh	r3, [r3, #10]
 801677c:	2b1b      	cmp	r3, #27
 801677e:	d806      	bhi.n	801678e <etharp_raw+0x56>
 8016780:	4b2e      	ldr	r3, [pc, #184]	; (801683c <etharp_raw+0x104>)
 8016782:	f240 4262 	movw	r2, #1122	; 0x462
 8016786:	4930      	ldr	r1, [pc, #192]	; (8016848 <etharp_raw+0x110>)
 8016788:	482e      	ldr	r0, [pc, #184]	; (8016844 <etharp_raw+0x10c>)
 801678a:	f002 f8cf 	bl	801892c <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801678e:	69bb      	ldr	r3, [r7, #24]
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016794:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016796:	4618      	mov	r0, r3
 8016798:	f7f6 fd48 	bl	800d22c <lwip_htons>
 801679c:	4603      	mov	r3, r0
 801679e:	461a      	mov	r2, r3
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80167aa:	2b06      	cmp	r3, #6
 80167ac:	d006      	beq.n	80167bc <etharp_raw+0x84>
 80167ae:	4b23      	ldr	r3, [pc, #140]	; (801683c <etharp_raw+0x104>)
 80167b0:	f240 4269 	movw	r2, #1129	; 0x469
 80167b4:	4925      	ldr	r1, [pc, #148]	; (801684c <etharp_raw+0x114>)
 80167b6:	4823      	ldr	r0, [pc, #140]	; (8016844 <etharp_raw+0x10c>)
 80167b8:	f002 f8b8 	bl	801892c <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	3308      	adds	r3, #8
 80167c0:	2206      	movs	r2, #6
 80167c2:	6839      	ldr	r1, [r7, #0]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f001 fe03 	bl	80183d0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80167ca:	697b      	ldr	r3, [r7, #20]
 80167cc:	3312      	adds	r3, #18
 80167ce:	2206      	movs	r2, #6
 80167d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167d2:	4618      	mov	r0, r3
 80167d4:	f001 fdfc 	bl	80183d0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80167d8:	697b      	ldr	r3, [r7, #20]
 80167da:	330e      	adds	r3, #14
 80167dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167de:	6812      	ldr	r2, [r2, #0]
 80167e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	3318      	adds	r3, #24
 80167e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167e8:	6812      	ldr	r2, [r2, #0]
 80167ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80167ec:	697b      	ldr	r3, [r7, #20]
 80167ee:	2200      	movs	r2, #0
 80167f0:	701a      	strb	r2, [r3, #0]
 80167f2:	2200      	movs	r2, #0
 80167f4:	f042 0201 	orr.w	r2, r2, #1
 80167f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	2200      	movs	r2, #0
 80167fe:	f042 0208 	orr.w	r2, r2, #8
 8016802:	709a      	strb	r2, [r3, #2]
 8016804:	2200      	movs	r2, #0
 8016806:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016808:	697b      	ldr	r3, [r7, #20]
 801680a:	2206      	movs	r2, #6
 801680c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	2204      	movs	r2, #4
 8016812:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016814:	f640 0306 	movw	r3, #2054	; 0x806
 8016818:	9300      	str	r3, [sp, #0]
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	68ba      	ldr	r2, [r7, #8]
 801681e:	69b9      	ldr	r1, [r7, #24]
 8016820:	68f8      	ldr	r0, [r7, #12]
 8016822:	f001 fb75 	bl	8017f10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016826:	69b8      	ldr	r0, [r7, #24]
 8016828:	f7f8 f834 	bl	800e894 <pbuf_free>
  p = NULL;
 801682c:	2300      	movs	r3, #0
 801682e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016830:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016834:	4618      	mov	r0, r3
 8016836:	3720      	adds	r7, #32
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}
 801683c:	08022e80 	.word	0x08022e80
 8016840:	08022fd0 	.word	0x08022fd0
 8016844:	08022ef8 	.word	0x08022ef8
 8016848:	08023080 	.word	0x08023080
 801684c:	080230b4 	.word	0x080230b4

08016850 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b088      	sub	sp, #32
 8016854:	af04      	add	r7, sp, #16
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801686c:	2201      	movs	r2, #1
 801686e:	9203      	str	r2, [sp, #12]
 8016870:	68ba      	ldr	r2, [r7, #8]
 8016872:	9202      	str	r2, [sp, #8]
 8016874:	4a06      	ldr	r2, [pc, #24]	; (8016890 <etharp_request_dst+0x40>)
 8016876:	9201      	str	r2, [sp, #4]
 8016878:	9300      	str	r3, [sp, #0]
 801687a:	4603      	mov	r3, r0
 801687c:	687a      	ldr	r2, [r7, #4]
 801687e:	68f8      	ldr	r0, [r7, #12]
 8016880:	f7ff ff5a 	bl	8016738 <etharp_raw>
 8016884:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016886:	4618      	mov	r0, r3
 8016888:	3710      	adds	r7, #16
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
 801688e:	bf00      	nop
 8016890:	0802367c 	.word	0x0802367c

08016894 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b082      	sub	sp, #8
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801689e:	4a05      	ldr	r2, [pc, #20]	; (80168b4 <etharp_request+0x20>)
 80168a0:	6839      	ldr	r1, [r7, #0]
 80168a2:	6878      	ldr	r0, [r7, #4]
 80168a4:	f7ff ffd4 	bl	8016850 <etharp_request_dst>
 80168a8:	4603      	mov	r3, r0
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3708      	adds	r7, #8
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}
 80168b2:	bf00      	nop
 80168b4:	08023674 	.word	0x08023674

080168b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b08e      	sub	sp, #56	; 0x38
 80168bc:	af04      	add	r7, sp, #16
 80168be:	6078      	str	r0, [r7, #4]
 80168c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80168c2:	4b79      	ldr	r3, [pc, #484]	; (8016aa8 <icmp_input+0x1f0>)
 80168c4:	689b      	ldr	r3, [r3, #8]
 80168c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80168c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ca:	781b      	ldrb	r3, [r3, #0]
 80168cc:	f003 030f 	and.w	r3, r3, #15
 80168d0:	b2db      	uxtb	r3, r3
 80168d2:	009b      	lsls	r3, r3, #2
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80168d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168da:	2b13      	cmp	r3, #19
 80168dc:	f240 80cd 	bls.w	8016a7a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	895b      	ldrh	r3, [r3, #10]
 80168e4:	2b03      	cmp	r3, #3
 80168e6:	f240 80ca 	bls.w	8016a7e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80168f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f000 80b7 	beq.w	8016a6c <icmp_input+0x1b4>
 80168fe:	2b08      	cmp	r3, #8
 8016900:	f040 80b7 	bne.w	8016a72 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016904:	4b69      	ldr	r3, [pc, #420]	; (8016aac <icmp_input+0x1f4>)
 8016906:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016908:	4b67      	ldr	r3, [pc, #412]	; (8016aa8 <icmp_input+0x1f0>)
 801690a:	695b      	ldr	r3, [r3, #20]
 801690c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016910:	2be0      	cmp	r3, #224	; 0xe0
 8016912:	f000 80bb 	beq.w	8016a8c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016916:	4b64      	ldr	r3, [pc, #400]	; (8016aa8 <icmp_input+0x1f0>)
 8016918:	695b      	ldr	r3, [r3, #20]
 801691a:	4a63      	ldr	r2, [pc, #396]	; (8016aa8 <icmp_input+0x1f0>)
 801691c:	6812      	ldr	r2, [r2, #0]
 801691e:	4611      	mov	r1, r2
 8016920:	4618      	mov	r0, r3
 8016922:	f000 fbed 	bl	8017100 <ip4_addr_isbroadcast_u32>
 8016926:	4603      	mov	r3, r0
 8016928:	2b00      	cmp	r3, #0
 801692a:	f040 80b1 	bne.w	8016a90 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	891b      	ldrh	r3, [r3, #8]
 8016932:	2b07      	cmp	r3, #7
 8016934:	f240 80a5 	bls.w	8016a82 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801693a:	330e      	adds	r3, #14
 801693c:	4619      	mov	r1, r3
 801693e:	6878      	ldr	r0, [r7, #4]
 8016940:	f7f7 ff12 	bl	800e768 <pbuf_add_header>
 8016944:	4603      	mov	r3, r0
 8016946:	2b00      	cmp	r3, #0
 8016948:	d04b      	beq.n	80169e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	891a      	ldrh	r2, [r3, #8]
 801694e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016950:	4413      	add	r3, r2
 8016952:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	891b      	ldrh	r3, [r3, #8]
 8016958:	8b7a      	ldrh	r2, [r7, #26]
 801695a:	429a      	cmp	r2, r3
 801695c:	f0c0 809a 	bcc.w	8016a94 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016960:	8b7b      	ldrh	r3, [r7, #26]
 8016962:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016966:	4619      	mov	r1, r3
 8016968:	200e      	movs	r0, #14
 801696a:	f7f7 fcaf 	bl	800e2cc <pbuf_alloc>
 801696e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	2b00      	cmp	r3, #0
 8016974:	f000 8090 	beq.w	8016a98 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	895b      	ldrh	r3, [r3, #10]
 801697c:	461a      	mov	r2, r3
 801697e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016980:	3308      	adds	r3, #8
 8016982:	429a      	cmp	r2, r3
 8016984:	d203      	bcs.n	801698e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016986:	6978      	ldr	r0, [r7, #20]
 8016988:	f7f7 ff84 	bl	800e894 <pbuf_free>
          goto icmperr;
 801698c:	e085      	b.n	8016a9a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	685b      	ldr	r3, [r3, #4]
 8016992:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016996:	4618      	mov	r0, r3
 8016998:	f001 fd1a 	bl	80183d0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801699c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801699e:	4619      	mov	r1, r3
 80169a0:	6978      	ldr	r0, [r7, #20]
 80169a2:	f7f7 fef1 	bl	800e788 <pbuf_remove_header>
 80169a6:	4603      	mov	r3, r0
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d009      	beq.n	80169c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80169ac:	4b40      	ldr	r3, [pc, #256]	; (8016ab0 <icmp_input+0x1f8>)
 80169ae:	22b6      	movs	r2, #182	; 0xb6
 80169b0:	4940      	ldr	r1, [pc, #256]	; (8016ab4 <icmp_input+0x1fc>)
 80169b2:	4841      	ldr	r0, [pc, #260]	; (8016ab8 <icmp_input+0x200>)
 80169b4:	f001 ffba 	bl	801892c <printf>
          pbuf_free(r);
 80169b8:	6978      	ldr	r0, [r7, #20]
 80169ba:	f7f7 ff6b 	bl	800e894 <pbuf_free>
          goto icmperr;
 80169be:	e06c      	b.n	8016a9a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80169c0:	6879      	ldr	r1, [r7, #4]
 80169c2:	6978      	ldr	r0, [r7, #20]
 80169c4:	f7f8 f89a 	bl	800eafc <pbuf_copy>
 80169c8:	4603      	mov	r3, r0
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d003      	beq.n	80169d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80169ce:	6978      	ldr	r0, [r7, #20]
 80169d0:	f7f7 ff60 	bl	800e894 <pbuf_free>
          goto icmperr;
 80169d4:	e061      	b.n	8016a9a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f7f7 ff5c 	bl	800e894 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	607b      	str	r3, [r7, #4]
 80169e0:	e00f      	b.n	8016a02 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80169e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169e4:	330e      	adds	r3, #14
 80169e6:	4619      	mov	r1, r3
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f7f7 fecd 	bl	800e788 <pbuf_remove_header>
 80169ee:	4603      	mov	r3, r0
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d006      	beq.n	8016a02 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80169f4:	4b2e      	ldr	r3, [pc, #184]	; (8016ab0 <icmp_input+0x1f8>)
 80169f6:	22c7      	movs	r2, #199	; 0xc7
 80169f8:	4930      	ldr	r1, [pc, #192]	; (8016abc <icmp_input+0x204>)
 80169fa:	482f      	ldr	r0, [pc, #188]	; (8016ab8 <icmp_input+0x200>)
 80169fc:	f001 ff96 	bl	801892c <printf>
          goto icmperr;
 8016a00:	e04b      	b.n	8016a9a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016a08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f7f7 feab 	bl	800e768 <pbuf_add_header>
 8016a12:	4603      	mov	r3, r0
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d12b      	bne.n	8016a70 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	685b      	ldr	r3, [r3, #4]
 8016a1c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016a1e:	69fb      	ldr	r3, [r7, #28]
 8016a20:	681a      	ldr	r2, [r3, #0]
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016a26:	4b20      	ldr	r3, [pc, #128]	; (8016aa8 <icmp_input+0x1f0>)
 8016a28:	691a      	ldr	r2, [r3, #16]
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016a2e:	693b      	ldr	r3, [r7, #16]
 8016a30:	2200      	movs	r2, #0
 8016a32:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016a34:	693b      	ldr	r3, [r7, #16]
 8016a36:	2200      	movs	r2, #0
 8016a38:	709a      	strb	r2, [r3, #2]
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	22ff      	movs	r2, #255	; 0xff
 8016a42:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	2200      	movs	r2, #0
 8016a48:	729a      	strb	r2, [r3, #10]
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016a4e:	683b      	ldr	r3, [r7, #0]
 8016a50:	9302      	str	r3, [sp, #8]
 8016a52:	2301      	movs	r3, #1
 8016a54:	9301      	str	r3, [sp, #4]
 8016a56:	2300      	movs	r3, #0
 8016a58:	9300      	str	r3, [sp, #0]
 8016a5a:	23ff      	movs	r3, #255	; 0xff
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	69f9      	ldr	r1, [r7, #28]
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f000 fa75 	bl	8016f50 <ip4_output_if>
 8016a66:	4603      	mov	r3, r0
 8016a68:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016a6a:	e001      	b.n	8016a70 <icmp_input+0x1b8>
      break;
 8016a6c:	bf00      	nop
 8016a6e:	e000      	b.n	8016a72 <icmp_input+0x1ba>
      break;
 8016a70:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f7f7 ff0e 	bl	800e894 <pbuf_free>
  return;
 8016a78:	e013      	b.n	8016aa2 <icmp_input+0x1ea>
    goto lenerr;
 8016a7a:	bf00      	nop
 8016a7c:	e002      	b.n	8016a84 <icmp_input+0x1cc>
    goto lenerr;
 8016a7e:	bf00      	nop
 8016a80:	e000      	b.n	8016a84 <icmp_input+0x1cc>
        goto lenerr;
 8016a82:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f7f7 ff05 	bl	800e894 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a8a:	e00a      	b.n	8016aa2 <icmp_input+0x1ea>
        goto icmperr;
 8016a8c:	bf00      	nop
 8016a8e:	e004      	b.n	8016a9a <icmp_input+0x1e2>
        goto icmperr;
 8016a90:	bf00      	nop
 8016a92:	e002      	b.n	8016a9a <icmp_input+0x1e2>
          goto icmperr;
 8016a94:	bf00      	nop
 8016a96:	e000      	b.n	8016a9a <icmp_input+0x1e2>
          goto icmperr;
 8016a98:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016a9a:	6878      	ldr	r0, [r7, #4]
 8016a9c:	f7f7 fefa 	bl	800e894 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016aa0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016aa2:	3728      	adds	r7, #40	; 0x28
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	20007f80 	.word	0x20007f80
 8016aac:	20007f94 	.word	0x20007f94
 8016ab0:	080230f8 	.word	0x080230f8
 8016ab4:	08023130 	.word	0x08023130
 8016ab8:	08023168 	.word	0x08023168
 8016abc:	08023190 	.word	0x08023190

08016ac0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
 8016ac8:	460b      	mov	r3, r1
 8016aca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016acc:	78fb      	ldrb	r3, [r7, #3]
 8016ace:	461a      	mov	r2, r3
 8016ad0:	2103      	movs	r1, #3
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f000 f814 	bl	8016b00 <icmp_send_response>
}
 8016ad8:	bf00      	nop
 8016ada:	3708      	adds	r7, #8
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b082      	sub	sp, #8
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	460b      	mov	r3, r1
 8016aea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016aec:	78fb      	ldrb	r3, [r7, #3]
 8016aee:	461a      	mov	r2, r3
 8016af0:	210b      	movs	r1, #11
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f000 f804 	bl	8016b00 <icmp_send_response>
}
 8016af8:	bf00      	nop
 8016afa:	3708      	adds	r7, #8
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}

08016b00 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b08c      	sub	sp, #48	; 0x30
 8016b04:	af04      	add	r7, sp, #16
 8016b06:	6078      	str	r0, [r7, #4]
 8016b08:	460b      	mov	r3, r1
 8016b0a:	70fb      	strb	r3, [r7, #3]
 8016b0c:	4613      	mov	r3, r2
 8016b0e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016b10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b14:	2124      	movs	r1, #36	; 0x24
 8016b16:	2022      	movs	r0, #34	; 0x22
 8016b18:	f7f7 fbd8 	bl	800e2cc <pbuf_alloc>
 8016b1c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016b1e:	69fb      	ldr	r3, [r7, #28]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d04c      	beq.n	8016bbe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	895b      	ldrh	r3, [r3, #10]
 8016b28:	2b23      	cmp	r3, #35	; 0x23
 8016b2a:	d806      	bhi.n	8016b3a <icmp_send_response+0x3a>
 8016b2c:	4b26      	ldr	r3, [pc, #152]	; (8016bc8 <icmp_send_response+0xc8>)
 8016b2e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016b32:	4926      	ldr	r1, [pc, #152]	; (8016bcc <icmp_send_response+0xcc>)
 8016b34:	4826      	ldr	r0, [pc, #152]	; (8016bd0 <icmp_send_response+0xd0>)
 8016b36:	f001 fef9 	bl	801892c <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	685b      	ldr	r3, [r3, #4]
 8016b3e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016b40:	69fb      	ldr	r3, [r7, #28]
 8016b42:	685b      	ldr	r3, [r3, #4]
 8016b44:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	78fa      	ldrb	r2, [r7, #3]
 8016b4a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	78ba      	ldrb	r2, [r7, #2]
 8016b50:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016b52:	697b      	ldr	r3, [r7, #20]
 8016b54:	2200      	movs	r2, #0
 8016b56:	711a      	strb	r2, [r3, #4]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	2200      	movs	r2, #0
 8016b60:	719a      	strb	r2, [r3, #6]
 8016b62:	2200      	movs	r2, #0
 8016b64:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	f103 0008 	add.w	r0, r3, #8
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	685b      	ldr	r3, [r3, #4]
 8016b72:	221c      	movs	r2, #28
 8016b74:	4619      	mov	r1, r3
 8016b76:	f001 fc2b 	bl	80183d0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016b7a:	69bb      	ldr	r3, [r7, #24]
 8016b7c:	68db      	ldr	r3, [r3, #12]
 8016b7e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016b80:	f107 030c 	add.w	r3, r7, #12
 8016b84:	4618      	mov	r0, r3
 8016b86:	f000 f825 	bl	8016bd4 <ip4_route>
 8016b8a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d011      	beq.n	8016bb6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016b92:	697b      	ldr	r3, [r7, #20]
 8016b94:	2200      	movs	r2, #0
 8016b96:	709a      	strb	r2, [r3, #2]
 8016b98:	2200      	movs	r2, #0
 8016b9a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016b9c:	f107 020c 	add.w	r2, r7, #12
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	9302      	str	r3, [sp, #8]
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	9301      	str	r3, [sp, #4]
 8016ba8:	2300      	movs	r3, #0
 8016baa:	9300      	str	r3, [sp, #0]
 8016bac:	23ff      	movs	r3, #255	; 0xff
 8016bae:	2100      	movs	r1, #0
 8016bb0:	69f8      	ldr	r0, [r7, #28]
 8016bb2:	f000 f9cd 	bl	8016f50 <ip4_output_if>
  }
  pbuf_free(q);
 8016bb6:	69f8      	ldr	r0, [r7, #28]
 8016bb8:	f7f7 fe6c 	bl	800e894 <pbuf_free>
 8016bbc:	e000      	b.n	8016bc0 <icmp_send_response+0xc0>
    return;
 8016bbe:	bf00      	nop
}
 8016bc0:	3720      	adds	r7, #32
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	080230f8 	.word	0x080230f8
 8016bcc:	080231c4 	.word	0x080231c4
 8016bd0:	08023168 	.word	0x08023168

08016bd4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016bd4:	b480      	push	{r7}
 8016bd6:	b085      	sub	sp, #20
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016bdc:	4b33      	ldr	r3, [pc, #204]	; (8016cac <ip4_route+0xd8>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	60fb      	str	r3, [r7, #12]
 8016be2:	e036      	b.n	8016c52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016bea:	f003 0301 	and.w	r3, r3, #1
 8016bee:	b2db      	uxtb	r3, r3
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d02b      	beq.n	8016c4c <ip4_route+0x78>
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016bfa:	089b      	lsrs	r3, r3, #2
 8016bfc:	f003 0301 	and.w	r3, r3, #1
 8016c00:	b2db      	uxtb	r3, r3
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d022      	beq.n	8016c4c <ip4_route+0x78>
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	3304      	adds	r3, #4
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d01d      	beq.n	8016c4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	3304      	adds	r3, #4
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	405a      	eors	r2, r3
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	3308      	adds	r3, #8
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	4013      	ands	r3, r2
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d101      	bne.n	8016c2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	e038      	b.n	8016c9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016c32:	f003 0302 	and.w	r3, r3, #2
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d108      	bne.n	8016c4c <ip4_route+0x78>
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681a      	ldr	r2, [r3, #0]
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	330c      	adds	r3, #12
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d101      	bne.n	8016c4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	e028      	b.n	8016c9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	60fb      	str	r3, [r7, #12]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d1c5      	bne.n	8016be4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c58:	4b15      	ldr	r3, [pc, #84]	; (8016cb0 <ip4_route+0xdc>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d01a      	beq.n	8016c96 <ip4_route+0xc2>
 8016c60:	4b13      	ldr	r3, [pc, #76]	; (8016cb0 <ip4_route+0xdc>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016c68:	f003 0301 	and.w	r3, r3, #1
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d012      	beq.n	8016c96 <ip4_route+0xc2>
 8016c70:	4b0f      	ldr	r3, [pc, #60]	; (8016cb0 <ip4_route+0xdc>)
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016c78:	f003 0304 	and.w	r3, r3, #4
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d00a      	beq.n	8016c96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c80:	4b0b      	ldr	r3, [pc, #44]	; (8016cb0 <ip4_route+0xdc>)
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	3304      	adds	r3, #4
 8016c86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d004      	beq.n	8016c96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	b2db      	uxtb	r3, r3
 8016c92:	2b7f      	cmp	r3, #127	; 0x7f
 8016c94:	d101      	bne.n	8016c9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016c96:	2300      	movs	r3, #0
 8016c98:	e001      	b.n	8016c9e <ip4_route+0xca>
  }

  return netif_default;
 8016c9a:	4b05      	ldr	r3, [pc, #20]	; (8016cb0 <ip4_route+0xdc>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	3714      	adds	r7, #20
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr
 8016caa:	bf00      	nop
 8016cac:	2000b684 	.word	0x2000b684
 8016cb0:	2000b688 	.word	0x2000b688

08016cb4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016cc2:	f003 0301 	and.w	r3, r3, #1
 8016cc6:	b2db      	uxtb	r3, r3
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d016      	beq.n	8016cfa <ip4_input_accept+0x46>
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	3304      	adds	r3, #4
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d011      	beq.n	8016cfa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cd6:	4b0b      	ldr	r3, [pc, #44]	; (8016d04 <ip4_input_accept+0x50>)
 8016cd8:	695a      	ldr	r2, [r3, #20]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	3304      	adds	r3, #4
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	d008      	beq.n	8016cf6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016ce4:	4b07      	ldr	r3, [pc, #28]	; (8016d04 <ip4_input_accept+0x50>)
 8016ce6:	695b      	ldr	r3, [r3, #20]
 8016ce8:	6879      	ldr	r1, [r7, #4]
 8016cea:	4618      	mov	r0, r3
 8016cec:	f000 fa08 	bl	8017100 <ip4_addr_isbroadcast_u32>
 8016cf0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d001      	beq.n	8016cfa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	e000      	b.n	8016cfc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016cfa:	2300      	movs	r3, #0
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	3708      	adds	r7, #8
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}
 8016d04:	20007f80 	.word	0x20007f80

08016d08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b086      	sub	sp, #24
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
 8016d10:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016d18:	697b      	ldr	r3, [r7, #20]
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	091b      	lsrs	r3, r3, #4
 8016d1e:	b2db      	uxtb	r3, r3
 8016d20:	2b04      	cmp	r3, #4
 8016d22:	d004      	beq.n	8016d2e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f7f7 fdb5 	bl	800e894 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	e107      	b.n	8016f3e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	781b      	ldrb	r3, [r3, #0]
 8016d32:	f003 030f 	and.w	r3, r3, #15
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	009b      	lsls	r3, r3, #2
 8016d3a:	b2db      	uxtb	r3, r3
 8016d3c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016d3e:	697b      	ldr	r3, [r7, #20]
 8016d40:	885b      	ldrh	r3, [r3, #2]
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	4618      	mov	r0, r3
 8016d46:	f7f6 fa71 	bl	800d22c <lwip_htons>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	891b      	ldrh	r3, [r3, #8]
 8016d52:	89ba      	ldrh	r2, [r7, #12]
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d204      	bcs.n	8016d62 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016d58:	89bb      	ldrh	r3, [r7, #12]
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f7f7 fc13 	bl	800e588 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	895b      	ldrh	r3, [r3, #10]
 8016d66:	89fa      	ldrh	r2, [r7, #14]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d807      	bhi.n	8016d7c <ip4_input+0x74>
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	891b      	ldrh	r3, [r3, #8]
 8016d70:	89ba      	ldrh	r2, [r7, #12]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d802      	bhi.n	8016d7c <ip4_input+0x74>
 8016d76:	89fb      	ldrh	r3, [r7, #14]
 8016d78:	2b13      	cmp	r3, #19
 8016d7a:	d804      	bhi.n	8016d86 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f7f7 fd89 	bl	800e894 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016d82:	2300      	movs	r3, #0
 8016d84:	e0db      	b.n	8016f3e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016d86:	697b      	ldr	r3, [r7, #20]
 8016d88:	691b      	ldr	r3, [r3, #16]
 8016d8a:	4a6f      	ldr	r2, [pc, #444]	; (8016f48 <ip4_input+0x240>)
 8016d8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	68db      	ldr	r3, [r3, #12]
 8016d92:	4a6d      	ldr	r2, [pc, #436]	; (8016f48 <ip4_input+0x240>)
 8016d94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d96:	4b6c      	ldr	r3, [pc, #432]	; (8016f48 <ip4_input+0x240>)
 8016d98:	695b      	ldr	r3, [r3, #20]
 8016d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d9e:	2be0      	cmp	r3, #224	; 0xe0
 8016da0:	d112      	bne.n	8016dc8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016da8:	f003 0301 	and.w	r3, r3, #1
 8016dac:	b2db      	uxtb	r3, r3
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d007      	beq.n	8016dc2 <ip4_input+0xba>
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	3304      	adds	r3, #4
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d002      	beq.n	8016dc2 <ip4_input+0xba>
      netif = inp;
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	613b      	str	r3, [r7, #16]
 8016dc0:	e02a      	b.n	8016e18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	613b      	str	r3, [r7, #16]
 8016dc6:	e027      	b.n	8016e18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016dc8:	6838      	ldr	r0, [r7, #0]
 8016dca:	f7ff ff73 	bl	8016cb4 <ip4_input_accept>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d002      	beq.n	8016dda <ip4_input+0xd2>
      netif = inp;
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	613b      	str	r3, [r7, #16]
 8016dd8:	e01e      	b.n	8016e18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016dde:	4b5a      	ldr	r3, [pc, #360]	; (8016f48 <ip4_input+0x240>)
 8016de0:	695b      	ldr	r3, [r3, #20]
 8016de2:	b2db      	uxtb	r3, r3
 8016de4:	2b7f      	cmp	r3, #127	; 0x7f
 8016de6:	d017      	beq.n	8016e18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016de8:	4b58      	ldr	r3, [pc, #352]	; (8016f4c <ip4_input+0x244>)
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	613b      	str	r3, [r7, #16]
 8016dee:	e00e      	b.n	8016e0e <ip4_input+0x106>
          if (netif == inp) {
 8016df0:	693a      	ldr	r2, [r7, #16]
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d006      	beq.n	8016e06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016df8:	6938      	ldr	r0, [r7, #16]
 8016dfa:	f7ff ff5b 	bl	8016cb4 <ip4_input_accept>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d108      	bne.n	8016e16 <ip4_input+0x10e>
 8016e04:	e000      	b.n	8016e08 <ip4_input+0x100>
            continue;
 8016e06:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016e08:	693b      	ldr	r3, [r7, #16]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	613b      	str	r3, [r7, #16]
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d1ed      	bne.n	8016df0 <ip4_input+0xe8>
 8016e14:	e000      	b.n	8016e18 <ip4_input+0x110>
            break;
 8016e16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e18:	4b4b      	ldr	r3, [pc, #300]	; (8016f48 <ip4_input+0x240>)
 8016e1a:	691b      	ldr	r3, [r3, #16]
 8016e1c:	6839      	ldr	r1, [r7, #0]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f000 f96e 	bl	8017100 <ip4_addr_isbroadcast_u32>
 8016e24:	4603      	mov	r3, r0
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d105      	bne.n	8016e36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016e2a:	4b47      	ldr	r3, [pc, #284]	; (8016f48 <ip4_input+0x240>)
 8016e2c:	691b      	ldr	r3, [r3, #16]
 8016e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e32:	2be0      	cmp	r3, #224	; 0xe0
 8016e34:	d104      	bne.n	8016e40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	f7f7 fd2c 	bl	800e894 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	e07e      	b.n	8016f3e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d104      	bne.n	8016e50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f7f7 fd24 	bl	800e894 <pbuf_free>
    return ERR_OK;
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	e076      	b.n	8016f3e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	88db      	ldrh	r3, [r3, #6]
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	461a      	mov	r2, r3
 8016e58:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016e5c:	4013      	ands	r3, r2
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d00b      	beq.n	8016e7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 fc92 	bl	801778c <ip4_reass>
 8016e68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d101      	bne.n	8016e74 <ip4_input+0x16c>
      return ERR_OK;
 8016e70:	2300      	movs	r3, #0
 8016e72:	e064      	b.n	8016f3e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016e7a:	4a33      	ldr	r2, [pc, #204]	; (8016f48 <ip4_input+0x240>)
 8016e7c:	693b      	ldr	r3, [r7, #16]
 8016e7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016e80:	4a31      	ldr	r2, [pc, #196]	; (8016f48 <ip4_input+0x240>)
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016e86:	4a30      	ldr	r2, [pc, #192]	; (8016f48 <ip4_input+0x240>)
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016e8c:	697b      	ldr	r3, [r7, #20]
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	f003 030f 	and.w	r3, r3, #15
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	009b      	lsls	r3, r3, #2
 8016e98:	b2db      	uxtb	r3, r3
 8016e9a:	b29a      	uxth	r2, r3
 8016e9c:	4b2a      	ldr	r3, [pc, #168]	; (8016f48 <ip4_input+0x240>)
 8016e9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016ea0:	89fb      	ldrh	r3, [r7, #14]
 8016ea2:	4619      	mov	r1, r3
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f7f7 fc6f 	bl	800e788 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	7a5b      	ldrb	r3, [r3, #9]
 8016eae:	2b11      	cmp	r3, #17
 8016eb0:	d006      	beq.n	8016ec0 <ip4_input+0x1b8>
 8016eb2:	2b11      	cmp	r3, #17
 8016eb4:	dc13      	bgt.n	8016ede <ip4_input+0x1d6>
 8016eb6:	2b01      	cmp	r3, #1
 8016eb8:	d00c      	beq.n	8016ed4 <ip4_input+0x1cc>
 8016eba:	2b06      	cmp	r3, #6
 8016ebc:	d005      	beq.n	8016eca <ip4_input+0x1c2>
 8016ebe:	e00e      	b.n	8016ede <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016ec0:	6839      	ldr	r1, [r7, #0]
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f7fe f970 	bl	80151a8 <udp_input>
        break;
 8016ec8:	e026      	b.n	8016f18 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016eca:	6839      	ldr	r1, [r7, #0]
 8016ecc:	6878      	ldr	r0, [r7, #4]
 8016ece:	f7f9 fd2d 	bl	801092c <tcp_input>
        break;
 8016ed2:	e021      	b.n	8016f18 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016ed4:	6839      	ldr	r1, [r7, #0]
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f7ff fcee 	bl	80168b8 <icmp_input>
        break;
 8016edc:	e01c      	b.n	8016f18 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016ede:	4b1a      	ldr	r3, [pc, #104]	; (8016f48 <ip4_input+0x240>)
 8016ee0:	695b      	ldr	r3, [r3, #20]
 8016ee2:	6939      	ldr	r1, [r7, #16]
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f000 f90b 	bl	8017100 <ip4_addr_isbroadcast_u32>
 8016eea:	4603      	mov	r3, r0
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d10f      	bne.n	8016f10 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ef0:	4b15      	ldr	r3, [pc, #84]	; (8016f48 <ip4_input+0x240>)
 8016ef2:	695b      	ldr	r3, [r3, #20]
 8016ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016ef8:	2be0      	cmp	r3, #224	; 0xe0
 8016efa:	d009      	beq.n	8016f10 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016efc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016f00:	4619      	mov	r1, r3
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f7f7 fcb3 	bl	800e86e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016f08:	2102      	movs	r1, #2
 8016f0a:	6878      	ldr	r0, [r7, #4]
 8016f0c:	f7ff fdd8 	bl	8016ac0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f7f7 fcbf 	bl	800e894 <pbuf_free>
        break;
 8016f16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016f18:	4b0b      	ldr	r3, [pc, #44]	; (8016f48 <ip4_input+0x240>)
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016f1e:	4b0a      	ldr	r3, [pc, #40]	; (8016f48 <ip4_input+0x240>)
 8016f20:	2200      	movs	r2, #0
 8016f22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016f24:	4b08      	ldr	r3, [pc, #32]	; (8016f48 <ip4_input+0x240>)
 8016f26:	2200      	movs	r2, #0
 8016f28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016f2a:	4b07      	ldr	r3, [pc, #28]	; (8016f48 <ip4_input+0x240>)
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016f30:	4b05      	ldr	r3, [pc, #20]	; (8016f48 <ip4_input+0x240>)
 8016f32:	2200      	movs	r2, #0
 8016f34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016f36:	4b04      	ldr	r3, [pc, #16]	; (8016f48 <ip4_input+0x240>)
 8016f38:	2200      	movs	r2, #0
 8016f3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016f3c:	2300      	movs	r3, #0
}
 8016f3e:	4618      	mov	r0, r3
 8016f40:	3718      	adds	r7, #24
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bd80      	pop	{r7, pc}
 8016f46:	bf00      	nop
 8016f48:	20007f80 	.word	0x20007f80
 8016f4c:	2000b684 	.word	0x2000b684

08016f50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b08a      	sub	sp, #40	; 0x28
 8016f54:	af04      	add	r7, sp, #16
 8016f56:	60f8      	str	r0, [r7, #12]
 8016f58:	60b9      	str	r1, [r7, #8]
 8016f5a:	607a      	str	r2, [r7, #4]
 8016f5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d009      	beq.n	8016f7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d003      	beq.n	8016f76 <ip4_output_if+0x26>
 8016f6e:	68bb      	ldr	r3, [r7, #8]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d102      	bne.n	8016f7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f78:	3304      	adds	r3, #4
 8016f7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016f7c:	78fa      	ldrb	r2, [r7, #3]
 8016f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f80:	9302      	str	r3, [sp, #8]
 8016f82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f86:	9301      	str	r3, [sp, #4]
 8016f88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016f8c:	9300      	str	r3, [sp, #0]
 8016f8e:	4613      	mov	r3, r2
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	6979      	ldr	r1, [r7, #20]
 8016f94:	68f8      	ldr	r0, [r7, #12]
 8016f96:	f000 f805 	bl	8016fa4 <ip4_output_if_src>
 8016f9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	3718      	adds	r7, #24
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b088      	sub	sp, #32
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	60b9      	str	r1, [r7, #8]
 8016fae:	607a      	str	r2, [r7, #4]
 8016fb0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	7b9b      	ldrb	r3, [r3, #14]
 8016fb6:	2b01      	cmp	r3, #1
 8016fb8:	d006      	beq.n	8016fc8 <ip4_output_if_src+0x24>
 8016fba:	4b4b      	ldr	r3, [pc, #300]	; (80170e8 <ip4_output_if_src+0x144>)
 8016fbc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016fc0:	494a      	ldr	r1, [pc, #296]	; (80170ec <ip4_output_if_src+0x148>)
 8016fc2:	484b      	ldr	r0, [pc, #300]	; (80170f0 <ip4_output_if_src+0x14c>)
 8016fc4:	f001 fcb2 	bl	801892c <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d060      	beq.n	8017090 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016fce:	2314      	movs	r3, #20
 8016fd0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016fd2:	2114      	movs	r1, #20
 8016fd4:	68f8      	ldr	r0, [r7, #12]
 8016fd6:	f7f7 fbc7 	bl	800e768 <pbuf_add_header>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d002      	beq.n	8016fe6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016fe0:	f06f 0301 	mvn.w	r3, #1
 8016fe4:	e07c      	b.n	80170e0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	685b      	ldr	r3, [r3, #4]
 8016fea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	895b      	ldrh	r3, [r3, #10]
 8016ff0:	2b13      	cmp	r3, #19
 8016ff2:	d806      	bhi.n	8017002 <ip4_output_if_src+0x5e>
 8016ff4:	4b3c      	ldr	r3, [pc, #240]	; (80170e8 <ip4_output_if_src+0x144>)
 8016ff6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016ffa:	493e      	ldr	r1, [pc, #248]	; (80170f4 <ip4_output_if_src+0x150>)
 8016ffc:	483c      	ldr	r0, [pc, #240]	; (80170f0 <ip4_output_if_src+0x14c>)
 8016ffe:	f001 fc95 	bl	801892c <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017002:	69fb      	ldr	r3, [r7, #28]
 8017004:	78fa      	ldrb	r2, [r7, #3]
 8017006:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017008:	69fb      	ldr	r3, [r7, #28]
 801700a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801700e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	681a      	ldr	r2, [r3, #0]
 8017014:	69fb      	ldr	r3, [r7, #28]
 8017016:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017018:	8b7b      	ldrh	r3, [r7, #26]
 801701a:	089b      	lsrs	r3, r3, #2
 801701c:	b29b      	uxth	r3, r3
 801701e:	b2db      	uxtb	r3, r3
 8017020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017024:	b2da      	uxtb	r2, r3
 8017026:	69fb      	ldr	r3, [r7, #28]
 8017028:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017030:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	891b      	ldrh	r3, [r3, #8]
 8017036:	4618      	mov	r0, r3
 8017038:	f7f6 f8f8 	bl	800d22c <lwip_htons>
 801703c:	4603      	mov	r3, r0
 801703e:	461a      	mov	r2, r3
 8017040:	69fb      	ldr	r3, [r7, #28]
 8017042:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	2200      	movs	r2, #0
 8017048:	719a      	strb	r2, [r3, #6]
 801704a:	2200      	movs	r2, #0
 801704c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801704e:	4b2a      	ldr	r3, [pc, #168]	; (80170f8 <ip4_output_if_src+0x154>)
 8017050:	881b      	ldrh	r3, [r3, #0]
 8017052:	4618      	mov	r0, r3
 8017054:	f7f6 f8ea 	bl	800d22c <lwip_htons>
 8017058:	4603      	mov	r3, r0
 801705a:	461a      	mov	r2, r3
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017060:	4b25      	ldr	r3, [pc, #148]	; (80170f8 <ip4_output_if_src+0x154>)
 8017062:	881b      	ldrh	r3, [r3, #0]
 8017064:	3301      	adds	r3, #1
 8017066:	b29a      	uxth	r2, r3
 8017068:	4b23      	ldr	r3, [pc, #140]	; (80170f8 <ip4_output_if_src+0x154>)
 801706a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d104      	bne.n	801707c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017072:	4b22      	ldr	r3, [pc, #136]	; (80170fc <ip4_output_if_src+0x158>)
 8017074:	681a      	ldr	r2, [r3, #0]
 8017076:	69fb      	ldr	r3, [r7, #28]
 8017078:	60da      	str	r2, [r3, #12]
 801707a:	e003      	b.n	8017084 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801707c:	68bb      	ldr	r3, [r7, #8]
 801707e:	681a      	ldr	r2, [r3, #0]
 8017080:	69fb      	ldr	r3, [r7, #28]
 8017082:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017084:	69fb      	ldr	r3, [r7, #28]
 8017086:	2200      	movs	r2, #0
 8017088:	729a      	strb	r2, [r3, #10]
 801708a:	2200      	movs	r2, #0
 801708c:	72da      	strb	r2, [r3, #11]
 801708e:	e00f      	b.n	80170b0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	895b      	ldrh	r3, [r3, #10]
 8017094:	2b13      	cmp	r3, #19
 8017096:	d802      	bhi.n	801709e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017098:	f06f 0301 	mvn.w	r3, #1
 801709c:	e020      	b.n	80170e0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	685b      	ldr	r3, [r3, #4]
 80170a2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80170a4:	69fb      	ldr	r3, [r7, #28]
 80170a6:	691b      	ldr	r3, [r3, #16]
 80170a8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80170aa:	f107 0314 	add.w	r3, r7, #20
 80170ae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80170b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b2:	8c1b      	ldrh	r3, [r3, #32]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d00c      	beq.n	80170d2 <ip4_output_if_src+0x12e>
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	891a      	ldrh	r2, [r3, #8]
 80170bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170be:	8c1b      	ldrh	r3, [r3, #32]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d906      	bls.n	80170d2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80170c4:	687a      	ldr	r2, [r7, #4]
 80170c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80170c8:	68f8      	ldr	r0, [r7, #12]
 80170ca:	f000 fd4d 	bl	8017b68 <ip4_frag>
 80170ce:	4603      	mov	r3, r0
 80170d0:	e006      	b.n	80170e0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80170d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170d4:	695b      	ldr	r3, [r3, #20]
 80170d6:	687a      	ldr	r2, [r7, #4]
 80170d8:	68f9      	ldr	r1, [r7, #12]
 80170da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170dc:	4798      	blx	r3
 80170de:	4603      	mov	r3, r0
}
 80170e0:	4618      	mov	r0, r3
 80170e2:	3720      	adds	r7, #32
 80170e4:	46bd      	mov	sp, r7
 80170e6:	bd80      	pop	{r7, pc}
 80170e8:	080231f0 	.word	0x080231f0
 80170ec:	08023224 	.word	0x08023224
 80170f0:	08023230 	.word	0x08023230
 80170f4:	08023258 	.word	0x08023258
 80170f8:	20004be2 	.word	0x20004be2
 80170fc:	08023670 	.word	0x08023670

08017100 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017100:	b480      	push	{r7}
 8017102:	b085      	sub	sp, #20
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
 8017108:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017114:	d002      	beq.n	801711c <ip4_addr_isbroadcast_u32+0x1c>
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d101      	bne.n	8017120 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801711c:	2301      	movs	r3, #1
 801711e:	e02a      	b.n	8017176 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8017126:	f003 0302 	and.w	r3, r3, #2
 801712a:	2b00      	cmp	r3, #0
 801712c:	d101      	bne.n	8017132 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801712e:	2300      	movs	r3, #0
 8017130:	e021      	b.n	8017176 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017132:	683b      	ldr	r3, [r7, #0]
 8017134:	3304      	adds	r3, #4
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	687a      	ldr	r2, [r7, #4]
 801713a:	429a      	cmp	r2, r3
 801713c:	d101      	bne.n	8017142 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801713e:	2300      	movs	r3, #0
 8017140:	e019      	b.n	8017176 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017142:	68fa      	ldr	r2, [r7, #12]
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	3304      	adds	r3, #4
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	405a      	eors	r2, r3
 801714c:	683b      	ldr	r3, [r7, #0]
 801714e:	3308      	adds	r3, #8
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	4013      	ands	r3, r2
 8017154:	2b00      	cmp	r3, #0
 8017156:	d10d      	bne.n	8017174 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017158:	683b      	ldr	r3, [r7, #0]
 801715a:	3308      	adds	r3, #8
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	43da      	mvns	r2, r3
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	3308      	adds	r3, #8
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801716c:	429a      	cmp	r2, r3
 801716e:	d101      	bne.n	8017174 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017170:	2301      	movs	r3, #1
 8017172:	e000      	b.n	8017176 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017174:	2300      	movs	r3, #0
  }
}
 8017176:	4618      	mov	r0, r3
 8017178:	3714      	adds	r7, #20
 801717a:	46bd      	mov	sp, r7
 801717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017180:	4770      	bx	lr
	...

08017184 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b084      	sub	sp, #16
 8017188:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801718a:	2300      	movs	r3, #0
 801718c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801718e:	4b12      	ldr	r3, [pc, #72]	; (80171d8 <ip_reass_tmr+0x54>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017194:	e018      	b.n	80171c8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	7fdb      	ldrb	r3, [r3, #31]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d00b      	beq.n	80171b6 <ip_reass_tmr+0x32>
      r->timer--;
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	7fdb      	ldrb	r3, [r3, #31]
 80171a2:	3b01      	subs	r3, #1
 80171a4:	b2da      	uxtb	r2, r3
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	60fb      	str	r3, [r7, #12]
 80171b4:	e008      	b.n	80171c8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80171c0:	68b9      	ldr	r1, [r7, #8]
 80171c2:	6878      	ldr	r0, [r7, #4]
 80171c4:	f000 f80a 	bl	80171dc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d1e3      	bne.n	8017196 <ip_reass_tmr+0x12>
    }
  }
}
 80171ce:	bf00      	nop
 80171d0:	bf00      	nop
 80171d2:	3710      	adds	r7, #16
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	20004be4 	.word	0x20004be4

080171dc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b088      	sub	sp, #32
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80171e6:	2300      	movs	r3, #0
 80171e8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80171ea:	683a      	ldr	r2, [r7, #0]
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d105      	bne.n	80171fe <ip_reass_free_complete_datagram+0x22>
 80171f2:	4b45      	ldr	r3, [pc, #276]	; (8017308 <ip_reass_free_complete_datagram+0x12c>)
 80171f4:	22ab      	movs	r2, #171	; 0xab
 80171f6:	4945      	ldr	r1, [pc, #276]	; (801730c <ip_reass_free_complete_datagram+0x130>)
 80171f8:	4845      	ldr	r0, [pc, #276]	; (8017310 <ip_reass_free_complete_datagram+0x134>)
 80171fa:	f001 fb97 	bl	801892c <printf>
  if (prev != NULL) {
 80171fe:	683b      	ldr	r3, [r7, #0]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d00a      	beq.n	801721a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	687a      	ldr	r2, [r7, #4]
 801720a:	429a      	cmp	r2, r3
 801720c:	d005      	beq.n	801721a <ip_reass_free_complete_datagram+0x3e>
 801720e:	4b3e      	ldr	r3, [pc, #248]	; (8017308 <ip_reass_free_complete_datagram+0x12c>)
 8017210:	22ad      	movs	r2, #173	; 0xad
 8017212:	4940      	ldr	r1, [pc, #256]	; (8017314 <ip_reass_free_complete_datagram+0x138>)
 8017214:	483e      	ldr	r0, [pc, #248]	; (8017310 <ip_reass_free_complete_datagram+0x134>)
 8017216:	f001 fb89 	bl	801892c <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	685b      	ldr	r3, [r3, #4]
 8017220:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	889b      	ldrh	r3, [r3, #4]
 8017226:	b29b      	uxth	r3, r3
 8017228:	2b00      	cmp	r3, #0
 801722a:	d12a      	bne.n	8017282 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	681a      	ldr	r2, [r3, #0]
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801723a:	69bb      	ldr	r3, [r7, #24]
 801723c:	6858      	ldr	r0, [r3, #4]
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	3308      	adds	r3, #8
 8017242:	2214      	movs	r2, #20
 8017244:	4619      	mov	r1, r3
 8017246:	f001 f8c3 	bl	80183d0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801724a:	2101      	movs	r1, #1
 801724c:	69b8      	ldr	r0, [r7, #24]
 801724e:	f7ff fc47 	bl	8016ae0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017252:	69b8      	ldr	r0, [r7, #24]
 8017254:	f7f7 fbac 	bl	800e9b0 <pbuf_clen>
 8017258:	4603      	mov	r3, r0
 801725a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801725c:	8bfa      	ldrh	r2, [r7, #30]
 801725e:	8a7b      	ldrh	r3, [r7, #18]
 8017260:	4413      	add	r3, r2
 8017262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017266:	db05      	blt.n	8017274 <ip_reass_free_complete_datagram+0x98>
 8017268:	4b27      	ldr	r3, [pc, #156]	; (8017308 <ip_reass_free_complete_datagram+0x12c>)
 801726a:	22bc      	movs	r2, #188	; 0xbc
 801726c:	492a      	ldr	r1, [pc, #168]	; (8017318 <ip_reass_free_complete_datagram+0x13c>)
 801726e:	4828      	ldr	r0, [pc, #160]	; (8017310 <ip_reass_free_complete_datagram+0x134>)
 8017270:	f001 fb5c 	bl	801892c <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017274:	8bfa      	ldrh	r2, [r7, #30]
 8017276:	8a7b      	ldrh	r3, [r7, #18]
 8017278:	4413      	add	r3, r2
 801727a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801727c:	69b8      	ldr	r0, [r7, #24]
 801727e:	f7f7 fb09 	bl	800e894 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	685b      	ldr	r3, [r3, #4]
 8017286:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017288:	e01f      	b.n	80172ca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801728a:	69bb      	ldr	r3, [r7, #24]
 801728c:	685b      	ldr	r3, [r3, #4]
 801728e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017290:	69bb      	ldr	r3, [r7, #24]
 8017292:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017294:	697b      	ldr	r3, [r7, #20]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801729a:	68f8      	ldr	r0, [r7, #12]
 801729c:	f7f7 fb88 	bl	800e9b0 <pbuf_clen>
 80172a0:	4603      	mov	r3, r0
 80172a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80172a4:	8bfa      	ldrh	r2, [r7, #30]
 80172a6:	8a7b      	ldrh	r3, [r7, #18]
 80172a8:	4413      	add	r3, r2
 80172aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80172ae:	db05      	blt.n	80172bc <ip_reass_free_complete_datagram+0xe0>
 80172b0:	4b15      	ldr	r3, [pc, #84]	; (8017308 <ip_reass_free_complete_datagram+0x12c>)
 80172b2:	22cc      	movs	r2, #204	; 0xcc
 80172b4:	4918      	ldr	r1, [pc, #96]	; (8017318 <ip_reass_free_complete_datagram+0x13c>)
 80172b6:	4816      	ldr	r0, [pc, #88]	; (8017310 <ip_reass_free_complete_datagram+0x134>)
 80172b8:	f001 fb38 	bl	801892c <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80172bc:	8bfa      	ldrh	r2, [r7, #30]
 80172be:	8a7b      	ldrh	r3, [r7, #18]
 80172c0:	4413      	add	r3, r2
 80172c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80172c4:	68f8      	ldr	r0, [r7, #12]
 80172c6:	f7f7 fae5 	bl	800e894 <pbuf_free>
  while (p != NULL) {
 80172ca:	69bb      	ldr	r3, [r7, #24]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d1dc      	bne.n	801728a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80172d0:	6839      	ldr	r1, [r7, #0]
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f000 f8c2 	bl	801745c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80172d8:	4b10      	ldr	r3, [pc, #64]	; (801731c <ip_reass_free_complete_datagram+0x140>)
 80172da:	881b      	ldrh	r3, [r3, #0]
 80172dc:	8bfa      	ldrh	r2, [r7, #30]
 80172de:	429a      	cmp	r2, r3
 80172e0:	d905      	bls.n	80172ee <ip_reass_free_complete_datagram+0x112>
 80172e2:	4b09      	ldr	r3, [pc, #36]	; (8017308 <ip_reass_free_complete_datagram+0x12c>)
 80172e4:	22d2      	movs	r2, #210	; 0xd2
 80172e6:	490e      	ldr	r1, [pc, #56]	; (8017320 <ip_reass_free_complete_datagram+0x144>)
 80172e8:	4809      	ldr	r0, [pc, #36]	; (8017310 <ip_reass_free_complete_datagram+0x134>)
 80172ea:	f001 fb1f 	bl	801892c <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80172ee:	4b0b      	ldr	r3, [pc, #44]	; (801731c <ip_reass_free_complete_datagram+0x140>)
 80172f0:	881a      	ldrh	r2, [r3, #0]
 80172f2:	8bfb      	ldrh	r3, [r7, #30]
 80172f4:	1ad3      	subs	r3, r2, r3
 80172f6:	b29a      	uxth	r2, r3
 80172f8:	4b08      	ldr	r3, [pc, #32]	; (801731c <ip_reass_free_complete_datagram+0x140>)
 80172fa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80172fc:	8bfb      	ldrh	r3, [r7, #30]
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3720      	adds	r7, #32
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}
 8017306:	bf00      	nop
 8017308:	08023288 	.word	0x08023288
 801730c:	080232c4 	.word	0x080232c4
 8017310:	080232d0 	.word	0x080232d0
 8017314:	080232f8 	.word	0x080232f8
 8017318:	0802330c 	.word	0x0802330c
 801731c:	20004be8 	.word	0x20004be8
 8017320:	0802332c 	.word	0x0802332c

08017324 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b08a      	sub	sp, #40	; 0x28
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
 801732c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801732e:	2300      	movs	r3, #0
 8017330:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017332:	2300      	movs	r3, #0
 8017334:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017336:	2300      	movs	r3, #0
 8017338:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801733a:	2300      	movs	r3, #0
 801733c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801733e:	2300      	movs	r3, #0
 8017340:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017342:	4b28      	ldr	r3, [pc, #160]	; (80173e4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017348:	e030      	b.n	80173ac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734c:	695a      	ldr	r2, [r3, #20]
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	68db      	ldr	r3, [r3, #12]
 8017352:	429a      	cmp	r2, r3
 8017354:	d10c      	bne.n	8017370 <ip_reass_remove_oldest_datagram+0x4c>
 8017356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017358:	699a      	ldr	r2, [r3, #24]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	691b      	ldr	r3, [r3, #16]
 801735e:	429a      	cmp	r2, r3
 8017360:	d106      	bne.n	8017370 <ip_reass_remove_oldest_datagram+0x4c>
 8017362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017364:	899a      	ldrh	r2, [r3, #12]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	889b      	ldrh	r3, [r3, #4]
 801736a:	b29b      	uxth	r3, r3
 801736c:	429a      	cmp	r2, r3
 801736e:	d014      	beq.n	801739a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017370:	693b      	ldr	r3, [r7, #16]
 8017372:	3301      	adds	r3, #1
 8017374:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017376:	6a3b      	ldr	r3, [r7, #32]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d104      	bne.n	8017386 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801737e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017380:	69fb      	ldr	r3, [r7, #28]
 8017382:	61bb      	str	r3, [r7, #24]
 8017384:	e009      	b.n	801739a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017388:	7fda      	ldrb	r2, [r3, #31]
 801738a:	6a3b      	ldr	r3, [r7, #32]
 801738c:	7fdb      	ldrb	r3, [r3, #31]
 801738e:	429a      	cmp	r2, r3
 8017390:	d803      	bhi.n	801739a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017394:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017396:	69fb      	ldr	r3, [r7, #28]
 8017398:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d001      	beq.n	80173a6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80173a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80173a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80173ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d1cb      	bne.n	801734a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80173b2:	6a3b      	ldr	r3, [r7, #32]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d008      	beq.n	80173ca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80173b8:	69b9      	ldr	r1, [r7, #24]
 80173ba:	6a38      	ldr	r0, [r7, #32]
 80173bc:	f7ff ff0e 	bl	80171dc <ip_reass_free_complete_datagram>
 80173c0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80173c2:	697a      	ldr	r2, [r7, #20]
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	4413      	add	r3, r2
 80173c8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80173ca:	697a      	ldr	r2, [r7, #20]
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	429a      	cmp	r2, r3
 80173d0:	da02      	bge.n	80173d8 <ip_reass_remove_oldest_datagram+0xb4>
 80173d2:	693b      	ldr	r3, [r7, #16]
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	dcac      	bgt.n	8017332 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80173d8:	697b      	ldr	r3, [r7, #20]
}
 80173da:	4618      	mov	r0, r3
 80173dc:	3728      	adds	r7, #40	; 0x28
 80173de:	46bd      	mov	sp, r7
 80173e0:	bd80      	pop	{r7, pc}
 80173e2:	bf00      	nop
 80173e4:	20004be4 	.word	0x20004be4

080173e8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b084      	sub	sp, #16
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80173f2:	2004      	movs	r0, #4
 80173f4:	f7f6 fbd0 	bl	800db98 <memp_malloc>
 80173f8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d110      	bne.n	8017422 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017400:	6839      	ldr	r1, [r7, #0]
 8017402:	6878      	ldr	r0, [r7, #4]
 8017404:	f7ff ff8e 	bl	8017324 <ip_reass_remove_oldest_datagram>
 8017408:	4602      	mov	r2, r0
 801740a:	683b      	ldr	r3, [r7, #0]
 801740c:	4293      	cmp	r3, r2
 801740e:	dc03      	bgt.n	8017418 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017410:	2004      	movs	r0, #4
 8017412:	f7f6 fbc1 	bl	800db98 <memp_malloc>
 8017416:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d101      	bne.n	8017422 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801741e:	2300      	movs	r3, #0
 8017420:	e016      	b.n	8017450 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017422:	2220      	movs	r2, #32
 8017424:	2100      	movs	r1, #0
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	f000 fffa 	bl	8018420 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	220f      	movs	r2, #15
 8017430:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017432:	4b09      	ldr	r3, [pc, #36]	; (8017458 <ip_reass_enqueue_new_datagram+0x70>)
 8017434:	681a      	ldr	r2, [r3, #0]
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801743a:	4a07      	ldr	r2, [pc, #28]	; (8017458 <ip_reass_enqueue_new_datagram+0x70>)
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	3308      	adds	r3, #8
 8017444:	2214      	movs	r2, #20
 8017446:	6879      	ldr	r1, [r7, #4]
 8017448:	4618      	mov	r0, r3
 801744a:	f000 ffc1 	bl	80183d0 <memcpy>
  return ipr;
 801744e:	68fb      	ldr	r3, [r7, #12]
}
 8017450:	4618      	mov	r0, r3
 8017452:	3710      	adds	r7, #16
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}
 8017458:	20004be4 	.word	0x20004be4

0801745c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017466:	4b10      	ldr	r3, [pc, #64]	; (80174a8 <ip_reass_dequeue_datagram+0x4c>)
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	687a      	ldr	r2, [r7, #4]
 801746c:	429a      	cmp	r2, r3
 801746e:	d104      	bne.n	801747a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	4a0c      	ldr	r2, [pc, #48]	; (80174a8 <ip_reass_dequeue_datagram+0x4c>)
 8017476:	6013      	str	r3, [r2, #0]
 8017478:	e00d      	b.n	8017496 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801747a:	683b      	ldr	r3, [r7, #0]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d106      	bne.n	801748e <ip_reass_dequeue_datagram+0x32>
 8017480:	4b0a      	ldr	r3, [pc, #40]	; (80174ac <ip_reass_dequeue_datagram+0x50>)
 8017482:	f240 1245 	movw	r2, #325	; 0x145
 8017486:	490a      	ldr	r1, [pc, #40]	; (80174b0 <ip_reass_dequeue_datagram+0x54>)
 8017488:	480a      	ldr	r0, [pc, #40]	; (80174b4 <ip_reass_dequeue_datagram+0x58>)
 801748a:	f001 fa4f 	bl	801892c <printf>
    prev->next = ipr->next;
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681a      	ldr	r2, [r3, #0]
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017496:	6879      	ldr	r1, [r7, #4]
 8017498:	2004      	movs	r0, #4
 801749a:	f7f6 fbcf 	bl	800dc3c <memp_free>
}
 801749e:	bf00      	nop
 80174a0:	3708      	adds	r7, #8
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	20004be4 	.word	0x20004be4
 80174ac:	08023288 	.word	0x08023288
 80174b0:	08023350 	.word	0x08023350
 80174b4:	080232d0 	.word	0x080232d0

080174b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b08c      	sub	sp, #48	; 0x30
 80174bc:	af00      	add	r7, sp, #0
 80174be:	60f8      	str	r0, [r7, #12]
 80174c0:	60b9      	str	r1, [r7, #8]
 80174c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80174c4:	2300      	movs	r3, #0
 80174c6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80174c8:	2301      	movs	r3, #1
 80174ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	685b      	ldr	r3, [r3, #4]
 80174d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80174d2:	69fb      	ldr	r3, [r7, #28]
 80174d4:	885b      	ldrh	r3, [r3, #2]
 80174d6:	b29b      	uxth	r3, r3
 80174d8:	4618      	mov	r0, r3
 80174da:	f7f5 fea7 	bl	800d22c <lwip_htons>
 80174de:	4603      	mov	r3, r0
 80174e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80174e2:	69fb      	ldr	r3, [r7, #28]
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	f003 030f 	and.w	r3, r3, #15
 80174ea:	b2db      	uxtb	r3, r3
 80174ec:	009b      	lsls	r3, r3, #2
 80174ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80174f0:	7e7b      	ldrb	r3, [r7, #25]
 80174f2:	b29b      	uxth	r3, r3
 80174f4:	8b7a      	ldrh	r2, [r7, #26]
 80174f6:	429a      	cmp	r2, r3
 80174f8:	d202      	bcs.n	8017500 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174fa:	f04f 33ff 	mov.w	r3, #4294967295
 80174fe:	e135      	b.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017500:	7e7b      	ldrb	r3, [r7, #25]
 8017502:	b29b      	uxth	r3, r3
 8017504:	8b7a      	ldrh	r2, [r7, #26]
 8017506:	1ad3      	subs	r3, r2, r3
 8017508:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801750a:	69fb      	ldr	r3, [r7, #28]
 801750c:	88db      	ldrh	r3, [r3, #6]
 801750e:	b29b      	uxth	r3, r3
 8017510:	4618      	mov	r0, r3
 8017512:	f7f5 fe8b 	bl	800d22c <lwip_htons>
 8017516:	4603      	mov	r3, r0
 8017518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801751c:	b29b      	uxth	r3, r3
 801751e:	00db      	lsls	r3, r3, #3
 8017520:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	685b      	ldr	r3, [r3, #4]
 8017526:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752a:	2200      	movs	r2, #0
 801752c:	701a      	strb	r2, [r3, #0]
 801752e:	2200      	movs	r2, #0
 8017530:	705a      	strb	r2, [r3, #1]
 8017532:	2200      	movs	r2, #0
 8017534:	709a      	strb	r2, [r3, #2]
 8017536:	2200      	movs	r2, #0
 8017538:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753c:	8afa      	ldrh	r2, [r7, #22]
 801753e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017540:	8afa      	ldrh	r2, [r7, #22]
 8017542:	8b7b      	ldrh	r3, [r7, #26]
 8017544:	4413      	add	r3, r2
 8017546:	b29a      	uxth	r2, r3
 8017548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801754a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801754e:	88db      	ldrh	r3, [r3, #6]
 8017550:	b29b      	uxth	r3, r3
 8017552:	8afa      	ldrh	r2, [r7, #22]
 8017554:	429a      	cmp	r2, r3
 8017556:	d902      	bls.n	801755e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017558:	f04f 33ff 	mov.w	r3, #4294967295
 801755c:	e106      	b.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	685b      	ldr	r3, [r3, #4]
 8017562:	627b      	str	r3, [r7, #36]	; 0x24
 8017564:	e068      	b.n	8017638 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017568:	685b      	ldr	r3, [r3, #4]
 801756a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801756e:	889b      	ldrh	r3, [r3, #4]
 8017570:	b29a      	uxth	r2, r3
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	889b      	ldrh	r3, [r3, #4]
 8017576:	b29b      	uxth	r3, r3
 8017578:	429a      	cmp	r2, r3
 801757a:	d235      	bcs.n	80175e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801757e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017580:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017584:	2b00      	cmp	r3, #0
 8017586:	d020      	beq.n	80175ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758a:	889b      	ldrh	r3, [r3, #4]
 801758c:	b29a      	uxth	r2, r3
 801758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017590:	88db      	ldrh	r3, [r3, #6]
 8017592:	b29b      	uxth	r3, r3
 8017594:	429a      	cmp	r2, r3
 8017596:	d307      	bcc.n	80175a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801759a:	88db      	ldrh	r3, [r3, #6]
 801759c:	b29a      	uxth	r2, r3
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	889b      	ldrh	r3, [r3, #4]
 80175a2:	b29b      	uxth	r3, r3
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d902      	bls.n	80175ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175a8:	f04f 33ff 	mov.w	r3, #4294967295
 80175ac:	e0de      	b.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80175ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b0:	68ba      	ldr	r2, [r7, #8]
 80175b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80175b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b6:	88db      	ldrh	r3, [r3, #6]
 80175b8:	b29a      	uxth	r2, r3
 80175ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175bc:	889b      	ldrh	r3, [r3, #4]
 80175be:	b29b      	uxth	r3, r3
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d03d      	beq.n	8017640 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80175c4:	2300      	movs	r3, #0
 80175c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80175c8:	e03a      	b.n	8017640 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80175ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175cc:	88db      	ldrh	r3, [r3, #6]
 80175ce:	b29a      	uxth	r2, r3
 80175d0:	693b      	ldr	r3, [r7, #16]
 80175d2:	889b      	ldrh	r3, [r3, #4]
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d902      	bls.n	80175e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175da:	f04f 33ff 	mov.w	r3, #4294967295
 80175de:	e0c5      	b.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	68ba      	ldr	r2, [r7, #8]
 80175e4:	605a      	str	r2, [r3, #4]
      break;
 80175e6:	e02b      	b.n	8017640 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80175e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ea:	889b      	ldrh	r3, [r3, #4]
 80175ec:	b29a      	uxth	r2, r3
 80175ee:	693b      	ldr	r3, [r7, #16]
 80175f0:	889b      	ldrh	r3, [r3, #4]
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	429a      	cmp	r2, r3
 80175f6:	d102      	bne.n	80175fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175f8:	f04f 33ff 	mov.w	r3, #4294967295
 80175fc:	e0b6      	b.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80175fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017600:	889b      	ldrh	r3, [r3, #4]
 8017602:	b29a      	uxth	r2, r3
 8017604:	693b      	ldr	r3, [r7, #16]
 8017606:	88db      	ldrh	r3, [r3, #6]
 8017608:	b29b      	uxth	r3, r3
 801760a:	429a      	cmp	r2, r3
 801760c:	d202      	bcs.n	8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801760e:	f04f 33ff 	mov.w	r3, #4294967295
 8017612:	e0ab      	b.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017616:	2b00      	cmp	r3, #0
 8017618:	d009      	beq.n	801762e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801761c:	88db      	ldrh	r3, [r3, #6]
 801761e:	b29a      	uxth	r2, r3
 8017620:	693b      	ldr	r3, [r7, #16]
 8017622:	889b      	ldrh	r3, [r3, #4]
 8017624:	b29b      	uxth	r3, r3
 8017626:	429a      	cmp	r2, r3
 8017628:	d001      	beq.n	801762e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801762a:	2300      	movs	r3, #0
 801762c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801762e:	693b      	ldr	r3, [r7, #16]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017634:	693b      	ldr	r3, [r7, #16]
 8017636:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801763a:	2b00      	cmp	r3, #0
 801763c:	d193      	bne.n	8017566 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801763e:	e000      	b.n	8017642 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017640:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017644:	2b00      	cmp	r3, #0
 8017646:	d12d      	bne.n	80176a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801764a:	2b00      	cmp	r3, #0
 801764c:	d01c      	beq.n	8017688 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017650:	88db      	ldrh	r3, [r3, #6]
 8017652:	b29a      	uxth	r2, r3
 8017654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017656:	889b      	ldrh	r3, [r3, #4]
 8017658:	b29b      	uxth	r3, r3
 801765a:	429a      	cmp	r2, r3
 801765c:	d906      	bls.n	801766c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801765e:	4b45      	ldr	r3, [pc, #276]	; (8017774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017660:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017664:	4944      	ldr	r1, [pc, #272]	; (8017778 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017666:	4845      	ldr	r0, [pc, #276]	; (801777c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017668:	f001 f960 	bl	801892c <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801766e:	68ba      	ldr	r2, [r7, #8]
 8017670:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017674:	88db      	ldrh	r3, [r3, #6]
 8017676:	b29a      	uxth	r2, r3
 8017678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801767a:	889b      	ldrh	r3, [r3, #4]
 801767c:	b29b      	uxth	r3, r3
 801767e:	429a      	cmp	r2, r3
 8017680:	d010      	beq.n	80176a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017682:	2300      	movs	r3, #0
 8017684:	623b      	str	r3, [r7, #32]
 8017686:	e00d      	b.n	80176a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	685b      	ldr	r3, [r3, #4]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d006      	beq.n	801769e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017690:	4b38      	ldr	r3, [pc, #224]	; (8017774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017692:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017696:	493a      	ldr	r1, [pc, #232]	; (8017780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017698:	4838      	ldr	r0, [pc, #224]	; (801777c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801769a:	f001 f947 	bl	801892c <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	68ba      	ldr	r2, [r7, #8]
 80176a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d105      	bne.n	80176b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	7f9b      	ldrb	r3, [r3, #30]
 80176ae:	f003 0301 	and.w	r3, r3, #1
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d059      	beq.n	801776a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80176b6:	6a3b      	ldr	r3, [r7, #32]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d04f      	beq.n	801775c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d006      	beq.n	80176d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	685b      	ldr	r3, [r3, #4]
 80176c8:	685b      	ldr	r3, [r3, #4]
 80176ca:	889b      	ldrh	r3, [r3, #4]
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d002      	beq.n	80176d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80176d2:	2300      	movs	r3, #0
 80176d4:	623b      	str	r3, [r7, #32]
 80176d6:	e041      	b.n	801775c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80176d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176da:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80176dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80176e2:	e012      	b.n	801770a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80176e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176e6:	685b      	ldr	r3, [r3, #4]
 80176e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80176ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ec:	88db      	ldrh	r3, [r3, #6]
 80176ee:	b29a      	uxth	r2, r3
 80176f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176f2:	889b      	ldrh	r3, [r3, #4]
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d002      	beq.n	8017700 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80176fa:	2300      	movs	r3, #0
 80176fc:	623b      	str	r3, [r7, #32]
            break;
 80176fe:	e007      	b.n	8017710 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017702:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801770c:	2b00      	cmp	r3, #0
 801770e:	d1e9      	bne.n	80176e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017710:	6a3b      	ldr	r3, [r7, #32]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d022      	beq.n	801775c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	685b      	ldr	r3, [r3, #4]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d106      	bne.n	801772c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801771e:	4b15      	ldr	r3, [pc, #84]	; (8017774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017720:	f240 12df 	movw	r2, #479	; 0x1df
 8017724:	4917      	ldr	r1, [pc, #92]	; (8017784 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017726:	4815      	ldr	r0, [pc, #84]	; (801777c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017728:	f001 f900 	bl	801892c <printf>
          LWIP_ASSERT("sanity check",
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	685b      	ldr	r3, [r3, #4]
 8017730:	685b      	ldr	r3, [r3, #4]
 8017732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017734:	429a      	cmp	r2, r3
 8017736:	d106      	bne.n	8017746 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017738:	4b0e      	ldr	r3, [pc, #56]	; (8017774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801773a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801773e:	4911      	ldr	r1, [pc, #68]	; (8017784 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017740:	480e      	ldr	r0, [pc, #56]	; (801777c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017742:	f001 f8f3 	bl	801892c <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d006      	beq.n	801775c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801774e:	4b09      	ldr	r3, [pc, #36]	; (8017774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017750:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017754:	490c      	ldr	r1, [pc, #48]	; (8017788 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017756:	4809      	ldr	r0, [pc, #36]	; (801777c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017758:	f001 f8e8 	bl	801892c <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801775c:	6a3b      	ldr	r3, [r7, #32]
 801775e:	2b00      	cmp	r3, #0
 8017760:	bf14      	ite	ne
 8017762:	2301      	movne	r3, #1
 8017764:	2300      	moveq	r3, #0
 8017766:	b2db      	uxtb	r3, r3
 8017768:	e000      	b.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801776a:	2300      	movs	r3, #0
}
 801776c:	4618      	mov	r0, r3
 801776e:	3730      	adds	r7, #48	; 0x30
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}
 8017774:	08023288 	.word	0x08023288
 8017778:	0802336c 	.word	0x0802336c
 801777c:	080232d0 	.word	0x080232d0
 8017780:	0802338c 	.word	0x0802338c
 8017784:	080233c4 	.word	0x080233c4
 8017788:	080233d4 	.word	0x080233d4

0801778c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b08e      	sub	sp, #56	; 0x38
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	685b      	ldr	r3, [r3, #4]
 8017798:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	f003 030f 	and.w	r3, r3, #15
 80177a2:	b2db      	uxtb	r3, r3
 80177a4:	009b      	lsls	r3, r3, #2
 80177a6:	b2db      	uxtb	r3, r3
 80177a8:	2b14      	cmp	r3, #20
 80177aa:	f040 8167 	bne.w	8017a7c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80177ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177b0:	88db      	ldrh	r3, [r3, #6]
 80177b2:	b29b      	uxth	r3, r3
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7f5 fd39 	bl	800d22c <lwip_htons>
 80177ba:	4603      	mov	r3, r0
 80177bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177c0:	b29b      	uxth	r3, r3
 80177c2:	00db      	lsls	r3, r3, #3
 80177c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80177c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c8:	885b      	ldrh	r3, [r3, #2]
 80177ca:	b29b      	uxth	r3, r3
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7f5 fd2d 	bl	800d22c <lwip_htons>
 80177d2:	4603      	mov	r3, r0
 80177d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80177d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d8:	781b      	ldrb	r3, [r3, #0]
 80177da:	f003 030f 	and.w	r3, r3, #15
 80177de:	b2db      	uxtb	r3, r3
 80177e0:	009b      	lsls	r3, r3, #2
 80177e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80177e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80177ea:	b29b      	uxth	r3, r3
 80177ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80177ee:	429a      	cmp	r2, r3
 80177f0:	f0c0 8146 	bcc.w	8017a80 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80177f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80177f8:	b29b      	uxth	r3, r3
 80177fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80177fc:	1ad3      	subs	r3, r2, r3
 80177fe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	f7f7 f8d5 	bl	800e9b0 <pbuf_clen>
 8017806:	4603      	mov	r3, r0
 8017808:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801780a:	4b9f      	ldr	r3, [pc, #636]	; (8017a88 <ip4_reass+0x2fc>)
 801780c:	881b      	ldrh	r3, [r3, #0]
 801780e:	461a      	mov	r2, r3
 8017810:	8c3b      	ldrh	r3, [r7, #32]
 8017812:	4413      	add	r3, r2
 8017814:	2b0a      	cmp	r3, #10
 8017816:	dd10      	ble.n	801783a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017818:	8c3b      	ldrh	r3, [r7, #32]
 801781a:	4619      	mov	r1, r3
 801781c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801781e:	f7ff fd81 	bl	8017324 <ip_reass_remove_oldest_datagram>
 8017822:	4603      	mov	r3, r0
 8017824:	2b00      	cmp	r3, #0
 8017826:	f000 812d 	beq.w	8017a84 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801782a:	4b97      	ldr	r3, [pc, #604]	; (8017a88 <ip4_reass+0x2fc>)
 801782c:	881b      	ldrh	r3, [r3, #0]
 801782e:	461a      	mov	r2, r3
 8017830:	8c3b      	ldrh	r3, [r7, #32]
 8017832:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017834:	2b0a      	cmp	r3, #10
 8017836:	f300 8125 	bgt.w	8017a84 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801783a:	4b94      	ldr	r3, [pc, #592]	; (8017a8c <ip4_reass+0x300>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	633b      	str	r3, [r7, #48]	; 0x30
 8017840:	e015      	b.n	801786e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017844:	695a      	ldr	r2, [r3, #20]
 8017846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017848:	68db      	ldr	r3, [r3, #12]
 801784a:	429a      	cmp	r2, r3
 801784c:	d10c      	bne.n	8017868 <ip4_reass+0xdc>
 801784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017850:	699a      	ldr	r2, [r3, #24]
 8017852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017854:	691b      	ldr	r3, [r3, #16]
 8017856:	429a      	cmp	r2, r3
 8017858:	d106      	bne.n	8017868 <ip4_reass+0xdc>
 801785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801785c:	899a      	ldrh	r2, [r3, #12]
 801785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017860:	889b      	ldrh	r3, [r3, #4]
 8017862:	b29b      	uxth	r3, r3
 8017864:	429a      	cmp	r2, r3
 8017866:	d006      	beq.n	8017876 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	633b      	str	r3, [r7, #48]	; 0x30
 801786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017870:	2b00      	cmp	r3, #0
 8017872:	d1e6      	bne.n	8017842 <ip4_reass+0xb6>
 8017874:	e000      	b.n	8017878 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017876:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801787a:	2b00      	cmp	r3, #0
 801787c:	d109      	bne.n	8017892 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801787e:	8c3b      	ldrh	r3, [r7, #32]
 8017880:	4619      	mov	r1, r3
 8017882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017884:	f7ff fdb0 	bl	80173e8 <ip_reass_enqueue_new_datagram>
 8017888:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801788c:	2b00      	cmp	r3, #0
 801788e:	d11c      	bne.n	80178ca <ip4_reass+0x13e>
      goto nullreturn;
 8017890:	e109      	b.n	8017aa6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017894:	88db      	ldrh	r3, [r3, #6]
 8017896:	b29b      	uxth	r3, r3
 8017898:	4618      	mov	r0, r3
 801789a:	f7f5 fcc7 	bl	800d22c <lwip_htons>
 801789e:	4603      	mov	r3, r0
 80178a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d110      	bne.n	80178ca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80178a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178aa:	89db      	ldrh	r3, [r3, #14]
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7f5 fcbd 	bl	800d22c <lwip_htons>
 80178b2:	4603      	mov	r3, r0
 80178b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d006      	beq.n	80178ca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80178bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178be:	3308      	adds	r3, #8
 80178c0:	2214      	movs	r2, #20
 80178c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80178c4:	4618      	mov	r0, r3
 80178c6:	f000 fd83 	bl	80183d0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80178ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178cc:	88db      	ldrh	r3, [r3, #6]
 80178ce:	b29b      	uxth	r3, r3
 80178d0:	f003 0320 	and.w	r3, r3, #32
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	bf0c      	ite	eq
 80178d8:	2301      	moveq	r3, #1
 80178da:	2300      	movne	r3, #0
 80178dc:	b2db      	uxtb	r3, r3
 80178de:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80178e0:	69fb      	ldr	r3, [r7, #28]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d00e      	beq.n	8017904 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80178e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80178e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178ea:	4413      	add	r3, r2
 80178ec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80178ee:	8b7a      	ldrh	r2, [r7, #26]
 80178f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80178f2:	429a      	cmp	r2, r3
 80178f4:	f0c0 80a0 	bcc.w	8017a38 <ip4_reass+0x2ac>
 80178f8:	8b7b      	ldrh	r3, [r7, #26]
 80178fa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80178fe:	4293      	cmp	r3, r2
 8017900:	f200 809a 	bhi.w	8017a38 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017904:	69fa      	ldr	r2, [r7, #28]
 8017906:	6879      	ldr	r1, [r7, #4]
 8017908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801790a:	f7ff fdd5 	bl	80174b8 <ip_reass_chain_frag_into_datagram_and_validate>
 801790e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017910:	697b      	ldr	r3, [r7, #20]
 8017912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017916:	f000 8091 	beq.w	8017a3c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801791a:	4b5b      	ldr	r3, [pc, #364]	; (8017a88 <ip4_reass+0x2fc>)
 801791c:	881a      	ldrh	r2, [r3, #0]
 801791e:	8c3b      	ldrh	r3, [r7, #32]
 8017920:	4413      	add	r3, r2
 8017922:	b29a      	uxth	r2, r3
 8017924:	4b58      	ldr	r3, [pc, #352]	; (8017a88 <ip4_reass+0x2fc>)
 8017926:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017928:	69fb      	ldr	r3, [r7, #28]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d00d      	beq.n	801794a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801792e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017932:	4413      	add	r3, r2
 8017934:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017938:	8a7a      	ldrh	r2, [r7, #18]
 801793a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793e:	7f9b      	ldrb	r3, [r3, #30]
 8017940:	f043 0301 	orr.w	r3, r3, #1
 8017944:	b2da      	uxtb	r2, r3
 8017946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017948:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801794a:	697b      	ldr	r3, [r7, #20]
 801794c:	2b01      	cmp	r3, #1
 801794e:	d171      	bne.n	8017a34 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017952:	8b9b      	ldrh	r3, [r3, #28]
 8017954:	3314      	adds	r3, #20
 8017956:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801795a:	685b      	ldr	r3, [r3, #4]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017964:	685b      	ldr	r3, [r3, #4]
 8017966:	685b      	ldr	r3, [r3, #4]
 8017968:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801796c:	3308      	adds	r3, #8
 801796e:	2214      	movs	r2, #20
 8017970:	4619      	mov	r1, r3
 8017972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017974:	f000 fd2c 	bl	80183d0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017978:	8a3b      	ldrh	r3, [r7, #16]
 801797a:	4618      	mov	r0, r3
 801797c:	f7f5 fc56 	bl	800d22c <lwip_htons>
 8017980:	4603      	mov	r3, r0
 8017982:	461a      	mov	r2, r3
 8017984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017986:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801798a:	2200      	movs	r2, #0
 801798c:	719a      	strb	r2, [r3, #6]
 801798e:	2200      	movs	r2, #0
 8017990:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017994:	2200      	movs	r2, #0
 8017996:	729a      	strb	r2, [r3, #10]
 8017998:	2200      	movs	r2, #0
 801799a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801799e:	685b      	ldr	r3, [r3, #4]
 80179a0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80179a2:	e00d      	b.n	80179c0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80179a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179a6:	685b      	ldr	r3, [r3, #4]
 80179a8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80179aa:	2114      	movs	r1, #20
 80179ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80179ae:	f7f6 feeb 	bl	800e788 <pbuf_remove_header>
      pbuf_cat(p, r);
 80179b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f7f7 f83b 	bl	800ea30 <pbuf_cat>
      r = iprh->next_pbuf;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80179c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d1ee      	bne.n	80179a4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80179c6:	4b31      	ldr	r3, [pc, #196]	; (8017a8c <ip4_reass+0x300>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d102      	bne.n	80179d6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80179d0:	2300      	movs	r3, #0
 80179d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179d4:	e010      	b.n	80179f8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80179d6:	4b2d      	ldr	r3, [pc, #180]	; (8017a8c <ip4_reass+0x300>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179dc:	e007      	b.n	80179ee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80179de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d006      	beq.n	80179f6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80179e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d1f4      	bne.n	80179de <ip4_reass+0x252>
 80179f4:	e000      	b.n	80179f8 <ip4_reass+0x26c>
          break;
 80179f6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80179f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80179fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179fc:	f7ff fd2e 	bl	801745c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017a00:	6878      	ldr	r0, [r7, #4]
 8017a02:	f7f6 ffd5 	bl	800e9b0 <pbuf_clen>
 8017a06:	4603      	mov	r3, r0
 8017a08:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017a0a:	4b1f      	ldr	r3, [pc, #124]	; (8017a88 <ip4_reass+0x2fc>)
 8017a0c:	881b      	ldrh	r3, [r3, #0]
 8017a0e:	8c3a      	ldrh	r2, [r7, #32]
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d906      	bls.n	8017a22 <ip4_reass+0x296>
 8017a14:	4b1e      	ldr	r3, [pc, #120]	; (8017a90 <ip4_reass+0x304>)
 8017a16:	f240 229b 	movw	r2, #667	; 0x29b
 8017a1a:	491e      	ldr	r1, [pc, #120]	; (8017a94 <ip4_reass+0x308>)
 8017a1c:	481e      	ldr	r0, [pc, #120]	; (8017a98 <ip4_reass+0x30c>)
 8017a1e:	f000 ff85 	bl	801892c <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017a22:	4b19      	ldr	r3, [pc, #100]	; (8017a88 <ip4_reass+0x2fc>)
 8017a24:	881a      	ldrh	r2, [r3, #0]
 8017a26:	8c3b      	ldrh	r3, [r7, #32]
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	b29a      	uxth	r2, r3
 8017a2c:	4b16      	ldr	r3, [pc, #88]	; (8017a88 <ip4_reass+0x2fc>)
 8017a2e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	e03c      	b.n	8017aae <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017a34:	2300      	movs	r3, #0
 8017a36:	e03a      	b.n	8017aae <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017a38:	bf00      	nop
 8017a3a:	e000      	b.n	8017a3e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017a3c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d106      	bne.n	8017a52 <ip4_reass+0x2c6>
 8017a44:	4b12      	ldr	r3, [pc, #72]	; (8017a90 <ip4_reass+0x304>)
 8017a46:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017a4a:	4914      	ldr	r1, [pc, #80]	; (8017a9c <ip4_reass+0x310>)
 8017a4c:	4812      	ldr	r0, [pc, #72]	; (8017a98 <ip4_reass+0x30c>)
 8017a4e:	f000 ff6d 	bl	801892c <printf>
  if (ipr->p == NULL) {
 8017a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a54:	685b      	ldr	r3, [r3, #4]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d124      	bne.n	8017aa4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017a5a:	4b0c      	ldr	r3, [pc, #48]	; (8017a8c <ip4_reass+0x300>)
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a60:	429a      	cmp	r2, r3
 8017a62:	d006      	beq.n	8017a72 <ip4_reass+0x2e6>
 8017a64:	4b0a      	ldr	r3, [pc, #40]	; (8017a90 <ip4_reass+0x304>)
 8017a66:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017a6a:	490d      	ldr	r1, [pc, #52]	; (8017aa0 <ip4_reass+0x314>)
 8017a6c:	480a      	ldr	r0, [pc, #40]	; (8017a98 <ip4_reass+0x30c>)
 8017a6e:	f000 ff5d 	bl	801892c <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017a72:	2100      	movs	r1, #0
 8017a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a76:	f7ff fcf1 	bl	801745c <ip_reass_dequeue_datagram>
 8017a7a:	e014      	b.n	8017aa6 <ip4_reass+0x31a>
    goto nullreturn;
 8017a7c:	bf00      	nop
 8017a7e:	e012      	b.n	8017aa6 <ip4_reass+0x31a>
    goto nullreturn;
 8017a80:	bf00      	nop
 8017a82:	e010      	b.n	8017aa6 <ip4_reass+0x31a>
      goto nullreturn;
 8017a84:	bf00      	nop
 8017a86:	e00e      	b.n	8017aa6 <ip4_reass+0x31a>
 8017a88:	20004be8 	.word	0x20004be8
 8017a8c:	20004be4 	.word	0x20004be4
 8017a90:	08023288 	.word	0x08023288
 8017a94:	080233f8 	.word	0x080233f8
 8017a98:	080232d0 	.word	0x080232d0
 8017a9c:	08023414 	.word	0x08023414
 8017aa0:	08023420 	.word	0x08023420
  }

nullreturn:
 8017aa4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017aa6:	6878      	ldr	r0, [r7, #4]
 8017aa8:	f7f6 fef4 	bl	800e894 <pbuf_free>
  return NULL;
 8017aac:	2300      	movs	r3, #0
}
 8017aae:	4618      	mov	r0, r3
 8017ab0:	3738      	adds	r7, #56	; 0x38
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}
 8017ab6:	bf00      	nop

08017ab8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017abc:	2005      	movs	r0, #5
 8017abe:	f7f6 f86b 	bl	800db98 <memp_malloc>
 8017ac2:	4603      	mov	r3, r0
}
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	bd80      	pop	{r7, pc}

08017ac8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d106      	bne.n	8017ae4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017ad6:	4b07      	ldr	r3, [pc, #28]	; (8017af4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017ad8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017adc:	4906      	ldr	r1, [pc, #24]	; (8017af8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017ade:	4807      	ldr	r0, [pc, #28]	; (8017afc <ip_frag_free_pbuf_custom_ref+0x34>)
 8017ae0:	f000 ff24 	bl	801892c <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017ae4:	6879      	ldr	r1, [r7, #4]
 8017ae6:	2005      	movs	r0, #5
 8017ae8:	f7f6 f8a8 	bl	800dc3c <memp_free>
}
 8017aec:	bf00      	nop
 8017aee:	3708      	adds	r7, #8
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}
 8017af4:	08023288 	.word	0x08023288
 8017af8:	08023440 	.word	0x08023440
 8017afc:	080232d0 	.word	0x080232d0

08017b00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b084      	sub	sp, #16
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d106      	bne.n	8017b20 <ipfrag_free_pbuf_custom+0x20>
 8017b12:	4b11      	ldr	r3, [pc, #68]	; (8017b58 <ipfrag_free_pbuf_custom+0x58>)
 8017b14:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017b18:	4910      	ldr	r1, [pc, #64]	; (8017b5c <ipfrag_free_pbuf_custom+0x5c>)
 8017b1a:	4811      	ldr	r0, [pc, #68]	; (8017b60 <ipfrag_free_pbuf_custom+0x60>)
 8017b1c:	f000 ff06 	bl	801892c <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017b20:	68fa      	ldr	r2, [r7, #12]
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	429a      	cmp	r2, r3
 8017b26:	d006      	beq.n	8017b36 <ipfrag_free_pbuf_custom+0x36>
 8017b28:	4b0b      	ldr	r3, [pc, #44]	; (8017b58 <ipfrag_free_pbuf_custom+0x58>)
 8017b2a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017b2e:	490d      	ldr	r1, [pc, #52]	; (8017b64 <ipfrag_free_pbuf_custom+0x64>)
 8017b30:	480b      	ldr	r0, [pc, #44]	; (8017b60 <ipfrag_free_pbuf_custom+0x60>)
 8017b32:	f000 fefb 	bl	801892c <printf>
  if (pcr->original != NULL) {
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	695b      	ldr	r3, [r3, #20]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d004      	beq.n	8017b48 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	695b      	ldr	r3, [r3, #20]
 8017b42:	4618      	mov	r0, r3
 8017b44:	f7f6 fea6 	bl	800e894 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017b48:	68f8      	ldr	r0, [r7, #12]
 8017b4a:	f7ff ffbd 	bl	8017ac8 <ip_frag_free_pbuf_custom_ref>
}
 8017b4e:	bf00      	nop
 8017b50:	3710      	adds	r7, #16
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}
 8017b56:	bf00      	nop
 8017b58:	08023288 	.word	0x08023288
 8017b5c:	0802344c 	.word	0x0802344c
 8017b60:	080232d0 	.word	0x080232d0
 8017b64:	08023458 	.word	0x08023458

08017b68 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b094      	sub	sp, #80	; 0x50
 8017b6c:	af02      	add	r7, sp, #8
 8017b6e:	60f8      	str	r0, [r7, #12]
 8017b70:	60b9      	str	r1, [r7, #8]
 8017b72:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017b74:	2300      	movs	r3, #0
 8017b76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017b7a:	68bb      	ldr	r3, [r7, #8]
 8017b7c:	8c1b      	ldrh	r3, [r3, #32]
 8017b7e:	3b14      	subs	r3, #20
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	da00      	bge.n	8017b86 <ip4_frag+0x1e>
 8017b84:	3307      	adds	r3, #7
 8017b86:	10db      	asrs	r3, r3, #3
 8017b88:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017b8a:	2314      	movs	r3, #20
 8017b8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	685b      	ldr	r3, [r3, #4]
 8017b92:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b96:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	f003 030f 	and.w	r3, r3, #15
 8017ba0:	b2db      	uxtb	r3, r3
 8017ba2:	009b      	lsls	r3, r3, #2
 8017ba4:	b2db      	uxtb	r3, r3
 8017ba6:	2b14      	cmp	r3, #20
 8017ba8:	d002      	beq.n	8017bb0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017baa:	f06f 0305 	mvn.w	r3, #5
 8017bae:	e110      	b.n	8017dd2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	895b      	ldrh	r3, [r3, #10]
 8017bb4:	2b13      	cmp	r3, #19
 8017bb6:	d809      	bhi.n	8017bcc <ip4_frag+0x64>
 8017bb8:	4b88      	ldr	r3, [pc, #544]	; (8017ddc <ip4_frag+0x274>)
 8017bba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017bbe:	4988      	ldr	r1, [pc, #544]	; (8017de0 <ip4_frag+0x278>)
 8017bc0:	4888      	ldr	r0, [pc, #544]	; (8017de4 <ip4_frag+0x27c>)
 8017bc2:	f000 feb3 	bl	801892c <printf>
 8017bc6:	f06f 0305 	mvn.w	r3, #5
 8017bca:	e102      	b.n	8017dd2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bce:	88db      	ldrh	r3, [r3, #6]
 8017bd0:	b29b      	uxth	r3, r3
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7f5 fb2a 	bl	800d22c <lwip_htons>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017bdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017bde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017be2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017be6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017bec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	891b      	ldrh	r3, [r3, #8]
 8017bf2:	3b14      	subs	r3, #20
 8017bf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017bf8:	e0e1      	b.n	8017dbe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017bfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017bfc:	00db      	lsls	r3, r3, #3
 8017bfe:	b29b      	uxth	r3, r3
 8017c00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c04:	4293      	cmp	r3, r2
 8017c06:	bf28      	it	cs
 8017c08:	4613      	movcs	r3, r2
 8017c0a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017c0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c10:	2114      	movs	r1, #20
 8017c12:	200e      	movs	r0, #14
 8017c14:	f7f6 fb5a 	bl	800e2cc <pbuf_alloc>
 8017c18:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	f000 80d5 	beq.w	8017dcc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c24:	895b      	ldrh	r3, [r3, #10]
 8017c26:	2b13      	cmp	r3, #19
 8017c28:	d806      	bhi.n	8017c38 <ip4_frag+0xd0>
 8017c2a:	4b6c      	ldr	r3, [pc, #432]	; (8017ddc <ip4_frag+0x274>)
 8017c2c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017c30:	496d      	ldr	r1, [pc, #436]	; (8017de8 <ip4_frag+0x280>)
 8017c32:	486c      	ldr	r0, [pc, #432]	; (8017de4 <ip4_frag+0x27c>)
 8017c34:	f000 fe7a 	bl	801892c <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c3a:	685b      	ldr	r3, [r3, #4]
 8017c3c:	2214      	movs	r2, #20
 8017c3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017c40:	4618      	mov	r0, r3
 8017c42:	f000 fbc5 	bl	80183d0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017c4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017c52:	e064      	b.n	8017d1e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	895a      	ldrh	r2, [r3, #10]
 8017c58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c5a:	1ad3      	subs	r3, r2, r3
 8017c5c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	895b      	ldrh	r3, [r3, #10]
 8017c62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c64:	429a      	cmp	r2, r3
 8017c66:	d906      	bls.n	8017c76 <ip4_frag+0x10e>
 8017c68:	4b5c      	ldr	r3, [pc, #368]	; (8017ddc <ip4_frag+0x274>)
 8017c6a:	f240 322d 	movw	r2, #813	; 0x32d
 8017c6e:	495f      	ldr	r1, [pc, #380]	; (8017dec <ip4_frag+0x284>)
 8017c70:	485c      	ldr	r0, [pc, #368]	; (8017de4 <ip4_frag+0x27c>)
 8017c72:	f000 fe5b 	bl	801892c <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017c76:	8bfa      	ldrh	r2, [r7, #30]
 8017c78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017c7c:	4293      	cmp	r3, r2
 8017c7e:	bf28      	it	cs
 8017c80:	4613      	movcs	r3, r2
 8017c82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017c86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d105      	bne.n	8017c9a <ip4_frag+0x132>
        poff = 0;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	60fb      	str	r3, [r7, #12]
        continue;
 8017c98:	e041      	b.n	8017d1e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017c9a:	f7ff ff0d 	bl	8017ab8 <ip_frag_alloc_pbuf_custom_ref>
 8017c9e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017ca0:	69bb      	ldr	r3, [r7, #24]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d103      	bne.n	8017cae <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ca8:	f7f6 fdf4 	bl	800e894 <pbuf_free>
        goto memerr;
 8017cac:	e08f      	b.n	8017dce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017cae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017cb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017cb6:	4413      	add	r3, r2
 8017cb8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017cbc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017cc0:	9201      	str	r2, [sp, #4]
 8017cc2:	9300      	str	r3, [sp, #0]
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	2241      	movs	r2, #65	; 0x41
 8017cc8:	2000      	movs	r0, #0
 8017cca:	f7f6 fc29 	bl	800e520 <pbuf_alloced_custom>
 8017cce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d106      	bne.n	8017ce4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017cd6:	69b8      	ldr	r0, [r7, #24]
 8017cd8:	f7ff fef6 	bl	8017ac8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cde:	f7f6 fdd9 	bl	800e894 <pbuf_free>
        goto memerr;
 8017ce2:	e074      	b.n	8017dce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017ce4:	68f8      	ldr	r0, [r7, #12]
 8017ce6:	f7f6 fe7b 	bl	800e9e0 <pbuf_ref>
      pcr->original = p;
 8017cea:	69bb      	ldr	r3, [r7, #24]
 8017cec:	68fa      	ldr	r2, [r7, #12]
 8017cee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017cf0:	69bb      	ldr	r3, [r7, #24]
 8017cf2:	4a3f      	ldr	r2, [pc, #252]	; (8017df0 <ip4_frag+0x288>)
 8017cf4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017cf6:	6979      	ldr	r1, [r7, #20]
 8017cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cfa:	f7f6 fe99 	bl	800ea30 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017cfe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017d02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017d0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d004      	beq.n	8017d1e <ip4_frag+0x1b6>
        poff = 0;
 8017d14:	2300      	movs	r3, #0
 8017d16:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017d1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d196      	bne.n	8017c54 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017d26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017d28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d2c:	4413      	add	r3, r2
 8017d2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	8c1b      	ldrh	r3, [r3, #32]
 8017d34:	f1a3 0213 	sub.w	r2, r3, #19
 8017d38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	bfcc      	ite	gt
 8017d40:	2301      	movgt	r3, #1
 8017d42:	2300      	movle	r3, #0
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017d48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d50:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017d52:	6a3b      	ldr	r3, [r7, #32]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d002      	beq.n	8017d5e <ip4_frag+0x1f6>
 8017d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d003      	beq.n	8017d66 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017d5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017d64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017d66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f7f5 fa5f 	bl	800d22c <lwip_htons>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	461a      	mov	r2, r3
 8017d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d74:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017d76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017d78:	3314      	adds	r3, #20
 8017d7a:	b29b      	uxth	r3, r3
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7f5 fa55 	bl	800d22c <lwip_htons>
 8017d82:	4603      	mov	r3, r0
 8017d84:	461a      	mov	r2, r3
 8017d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d88:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	729a      	strb	r2, [r3, #10]
 8017d90:	2200      	movs	r2, #0
 8017d92:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	695b      	ldr	r3, [r3, #20]
 8017d98:	687a      	ldr	r2, [r7, #4]
 8017d9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d9c:	68b8      	ldr	r0, [r7, #8]
 8017d9e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017da2:	f7f6 fd77 	bl	800e894 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017da6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017daa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017dac:	1ad3      	subs	r3, r2, r3
 8017dae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017db2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017db6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017db8:	4413      	add	r3, r2
 8017dba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017dbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	f47f af19 	bne.w	8017bfa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017dc8:	2300      	movs	r3, #0
 8017dca:	e002      	b.n	8017dd2 <ip4_frag+0x26a>
      goto memerr;
 8017dcc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	3748      	adds	r7, #72	; 0x48
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}
 8017dda:	bf00      	nop
 8017ddc:	08023288 	.word	0x08023288
 8017de0:	08023464 	.word	0x08023464
 8017de4:	080232d0 	.word	0x080232d0
 8017de8:	08023480 	.word	0x08023480
 8017dec:	080234a0 	.word	0x080234a0
 8017df0:	08017b01 	.word	0x08017b01

08017df4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b086      	sub	sp, #24
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
 8017dfc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017dfe:	230e      	movs	r3, #14
 8017e00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	895b      	ldrh	r3, [r3, #10]
 8017e06:	2b0e      	cmp	r3, #14
 8017e08:	d96e      	bls.n	8017ee8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	7bdb      	ldrb	r3, [r3, #15]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d106      	bne.n	8017e20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017e18:	3301      	adds	r3, #1
 8017e1a:	b2da      	uxtb	r2, r3
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	685b      	ldr	r3, [r3, #4]
 8017e24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	7b1a      	ldrb	r2, [r3, #12]
 8017e2a:	7b5b      	ldrb	r3, [r3, #13]
 8017e2c:	021b      	lsls	r3, r3, #8
 8017e2e:	4313      	orrs	r3, r2
 8017e30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017e32:	693b      	ldr	r3, [r7, #16]
 8017e34:	781b      	ldrb	r3, [r3, #0]
 8017e36:	f003 0301 	and.w	r3, r3, #1
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d023      	beq.n	8017e86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017e3e:	693b      	ldr	r3, [r7, #16]
 8017e40:	781b      	ldrb	r3, [r3, #0]
 8017e42:	2b01      	cmp	r3, #1
 8017e44:	d10f      	bne.n	8017e66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017e46:	693b      	ldr	r3, [r7, #16]
 8017e48:	785b      	ldrb	r3, [r3, #1]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d11b      	bne.n	8017e86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017e52:	2b5e      	cmp	r3, #94	; 0x5e
 8017e54:	d117      	bne.n	8017e86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	7b5b      	ldrb	r3, [r3, #13]
 8017e5a:	f043 0310 	orr.w	r3, r3, #16
 8017e5e:	b2da      	uxtb	r2, r3
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	735a      	strb	r2, [r3, #13]
 8017e64:	e00f      	b.n	8017e86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017e66:	693b      	ldr	r3, [r7, #16]
 8017e68:	2206      	movs	r2, #6
 8017e6a:	4928      	ldr	r1, [pc, #160]	; (8017f0c <ethernet_input+0x118>)
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f000 faa1 	bl	80183b4 <memcmp>
 8017e72:	4603      	mov	r3, r0
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d106      	bne.n	8017e86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	7b5b      	ldrb	r3, [r3, #13]
 8017e7c:	f043 0308 	orr.w	r3, r3, #8
 8017e80:	b2da      	uxtb	r2, r3
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017e86:	89fb      	ldrh	r3, [r7, #14]
 8017e88:	2b08      	cmp	r3, #8
 8017e8a:	d003      	beq.n	8017e94 <ethernet_input+0xa0>
 8017e8c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017e90:	d014      	beq.n	8017ebc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017e92:	e032      	b.n	8017efa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8017e9a:	f003 0308 	and.w	r3, r3, #8
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d024      	beq.n	8017eec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017ea2:	8afb      	ldrh	r3, [r7, #22]
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	f7f6 fc6e 	bl	800e788 <pbuf_remove_header>
 8017eac:	4603      	mov	r3, r0
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d11e      	bne.n	8017ef0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017eb2:	6839      	ldr	r1, [r7, #0]
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f7fe ff27 	bl	8016d08 <ip4_input>
      break;
 8017eba:	e013      	b.n	8017ee4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8017ec2:	f003 0308 	and.w	r3, r3, #8
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d014      	beq.n	8017ef4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017eca:	8afb      	ldrh	r3, [r7, #22]
 8017ecc:	4619      	mov	r1, r3
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	f7f6 fc5a 	bl	800e788 <pbuf_remove_header>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d10e      	bne.n	8017ef8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017eda:	6839      	ldr	r1, [r7, #0]
 8017edc:	6878      	ldr	r0, [r7, #4]
 8017ede:	f7fe f8c7 	bl	8016070 <etharp_input>
      break;
 8017ee2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	e00c      	b.n	8017f02 <ethernet_input+0x10e>
    goto free_and_return;
 8017ee8:	bf00      	nop
 8017eea:	e006      	b.n	8017efa <ethernet_input+0x106>
        goto free_and_return;
 8017eec:	bf00      	nop
 8017eee:	e004      	b.n	8017efa <ethernet_input+0x106>
        goto free_and_return;
 8017ef0:	bf00      	nop
 8017ef2:	e002      	b.n	8017efa <ethernet_input+0x106>
        goto free_and_return;
 8017ef4:	bf00      	nop
 8017ef6:	e000      	b.n	8017efa <ethernet_input+0x106>
        goto free_and_return;
 8017ef8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017efa:	6878      	ldr	r0, [r7, #4]
 8017efc:	f7f6 fcca 	bl	800e894 <pbuf_free>
  return ERR_OK;
 8017f00:	2300      	movs	r3, #0
}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3718      	adds	r7, #24
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}
 8017f0a:	bf00      	nop
 8017f0c:	08023674 	.word	0x08023674

08017f10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b086      	sub	sp, #24
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	60f8      	str	r0, [r7, #12]
 8017f18:	60b9      	str	r1, [r7, #8]
 8017f1a:	607a      	str	r2, [r7, #4]
 8017f1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017f1e:	8c3b      	ldrh	r3, [r7, #32]
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7f5 f983 	bl	800d22c <lwip_htons>
 8017f26:	4603      	mov	r3, r0
 8017f28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017f2a:	210e      	movs	r1, #14
 8017f2c:	68b8      	ldr	r0, [r7, #8]
 8017f2e:	f7f6 fc1b 	bl	800e768 <pbuf_add_header>
 8017f32:	4603      	mov	r3, r0
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d125      	bne.n	8017f84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	8afa      	ldrh	r2, [r7, #22]
 8017f42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	2206      	movs	r2, #6
 8017f48:	6839      	ldr	r1, [r7, #0]
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f000 fa40 	bl	80183d0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017f50:	693b      	ldr	r3, [r7, #16]
 8017f52:	3306      	adds	r3, #6
 8017f54:	2206      	movs	r2, #6
 8017f56:	6879      	ldr	r1, [r7, #4]
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f000 fa39 	bl	80183d0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f64:	2b06      	cmp	r3, #6
 8017f66:	d006      	beq.n	8017f76 <ethernet_output+0x66>
 8017f68:	4b0a      	ldr	r3, [pc, #40]	; (8017f94 <ethernet_output+0x84>)
 8017f6a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017f6e:	490a      	ldr	r1, [pc, #40]	; (8017f98 <ethernet_output+0x88>)
 8017f70:	480a      	ldr	r0, [pc, #40]	; (8017f9c <ethernet_output+0x8c>)
 8017f72:	f000 fcdb 	bl	801892c <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	699b      	ldr	r3, [r3, #24]
 8017f7a:	68b9      	ldr	r1, [r7, #8]
 8017f7c:	68f8      	ldr	r0, [r7, #12]
 8017f7e:	4798      	blx	r3
 8017f80:	4603      	mov	r3, r0
 8017f82:	e002      	b.n	8017f8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017f84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017f86:	f06f 0301 	mvn.w	r3, #1
}
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	3718      	adds	r7, #24
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	bd80      	pop	{r7, pc}
 8017f92:	bf00      	nop
 8017f94:	080234b0 	.word	0x080234b0
 8017f98:	080234e8 	.word	0x080234e8
 8017f9c:	0802351c 	.word	0x0802351c

08017fa0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b086      	sub	sp, #24
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	60bb      	str	r3, [r7, #8]
 8017fae:	2304      	movs	r3, #4
 8017fb0:	60fb      	str	r3, [r7, #12]
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	613b      	str	r3, [r7, #16]
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017fba:	f107 0308 	add.w	r3, r7, #8
 8017fbe:	2100      	movs	r1, #0
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7f0 fb30 	bl	8008626 <osMessageCreate>
 8017fc6:	4602      	mov	r2, r0
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d102      	bne.n	8017fda <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8017fd8:	e000      	b.n	8017fdc <sys_mbox_new+0x3c>

  return ERR_OK;
 8017fda:	2300      	movs	r3, #0
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3718      	adds	r7, #24
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b082      	sub	sp, #8
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7f0 fbf5 	bl	80087e0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7f0 fc06 	bl	800880c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018000:	bf00      	nop
 8018002:	3708      	adds	r7, #8
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}

08018008 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b084      	sub	sp, #16
 801800c:	af00      	add	r7, sp, #0
 801800e:	6078      	str	r0, [r7, #4]
 8018010:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	6839      	ldr	r1, [r7, #0]
 8018018:	2200      	movs	r2, #0
 801801a:	4618      	mov	r0, r3
 801801c:	f7f0 fb2c 	bl	8008678 <osMessagePut>
 8018020:	4603      	mov	r3, r0
 8018022:	2b00      	cmp	r3, #0
 8018024:	d102      	bne.n	801802c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018026:	2300      	movs	r3, #0
 8018028:	73fb      	strb	r3, [r7, #15]
 801802a:	e001      	b.n	8018030 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801802c:	23ff      	movs	r3, #255	; 0xff
 801802e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018034:	4618      	mov	r0, r3
 8018036:	3710      	adds	r7, #16
 8018038:	46bd      	mov	sp, r7
 801803a:	bd80      	pop	{r7, pc}

0801803c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b08c      	sub	sp, #48	; 0x30
 8018040:	af00      	add	r7, sp, #0
 8018042:	61f8      	str	r0, [r7, #28]
 8018044:	61b9      	str	r1, [r7, #24]
 8018046:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018048:	f7f0 f92c 	bl	80082a4 <osKernelSysTick>
 801804c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801804e:	697b      	ldr	r3, [r7, #20]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d017      	beq.n	8018084 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018054:	69fb      	ldr	r3, [r7, #28]
 8018056:	6819      	ldr	r1, [r3, #0]
 8018058:	f107 0320 	add.w	r3, r7, #32
 801805c:	697a      	ldr	r2, [r7, #20]
 801805e:	4618      	mov	r0, r3
 8018060:	f7f0 fb4a 	bl	80086f8 <osMessageGet>

    if(event.status == osEventMessage)
 8018064:	6a3b      	ldr	r3, [r7, #32]
 8018066:	2b10      	cmp	r3, #16
 8018068:	d109      	bne.n	801807e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806c:	461a      	mov	r2, r3
 801806e:	69bb      	ldr	r3, [r7, #24]
 8018070:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018072:	f7f0 f917 	bl	80082a4 <osKernelSysTick>
 8018076:	4602      	mov	r2, r0
 8018078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807a:	1ad3      	subs	r3, r2, r3
 801807c:	e019      	b.n	80180b2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801807e:	f04f 33ff 	mov.w	r3, #4294967295
 8018082:	e016      	b.n	80180b2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018084:	69fb      	ldr	r3, [r7, #28]
 8018086:	6819      	ldr	r1, [r3, #0]
 8018088:	463b      	mov	r3, r7
 801808a:	f04f 32ff 	mov.w	r2, #4294967295
 801808e:	4618      	mov	r0, r3
 8018090:	f7f0 fb32 	bl	80086f8 <osMessageGet>
 8018094:	f107 0320 	add.w	r3, r7, #32
 8018098:	463a      	mov	r2, r7
 801809a:	ca07      	ldmia	r2, {r0, r1, r2}
 801809c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80180a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a2:	461a      	mov	r2, r3
 80180a4:	69bb      	ldr	r3, [r7, #24]
 80180a6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80180a8:	f7f0 f8fc 	bl	80082a4 <osKernelSysTick>
 80180ac:	4602      	mov	r2, r0
 80180ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3730      	adds	r7, #48	; 0x30
 80180b6:	46bd      	mov	sp, r7
 80180b8:	bd80      	pop	{r7, pc}

080180ba <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80180ba:	b580      	push	{r7, lr}
 80180bc:	b086      	sub	sp, #24
 80180be:	af00      	add	r7, sp, #0
 80180c0:	6078      	str	r0, [r7, #4]
 80180c2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6819      	ldr	r1, [r3, #0]
 80180c8:	f107 030c 	add.w	r3, r7, #12
 80180cc:	2200      	movs	r2, #0
 80180ce:	4618      	mov	r0, r3
 80180d0:	f7f0 fb12 	bl	80086f8 <osMessageGet>

  if(event.status == osEventMessage)
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	2b10      	cmp	r3, #16
 80180d8:	d105      	bne.n	80180e6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	461a      	mov	r2, r3
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80180e2:	2300      	movs	r3, #0
 80180e4:	e001      	b.n	80180ea <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80180e6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80180ea:	4618      	mov	r0, r3
 80180ec:	3718      	adds	r7, #24
 80180ee:	46bd      	mov	sp, r7
 80180f0:	bd80      	pop	{r7, pc}

080180f2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80180f2:	b480      	push	{r7}
 80180f4:	b083      	sub	sp, #12
 80180f6:	af00      	add	r7, sp, #0
 80180f8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d101      	bne.n	8018106 <sys_mbox_valid+0x14>
    return 0;
 8018102:	2300      	movs	r3, #0
 8018104:	e000      	b.n	8018108 <sys_mbox_valid+0x16>
  else
    return 1;
 8018106:	2301      	movs	r3, #1
}
 8018108:	4618      	mov	r0, r3
 801810a:	370c      	adds	r7, #12
 801810c:	46bd      	mov	sp, r7
 801810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018112:	4770      	bx	lr

08018114 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018114:	b480      	push	{r7}
 8018116:	b083      	sub	sp, #12
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2200      	movs	r2, #0
 8018120:	601a      	str	r2, [r3, #0]
}
 8018122:	bf00      	nop
 8018124:	370c      	adds	r7, #12
 8018126:	46bd      	mov	sp, r7
 8018128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812c:	4770      	bx	lr

0801812e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801812e:	b580      	push	{r7, lr}
 8018130:	b084      	sub	sp, #16
 8018132:	af00      	add	r7, sp, #0
 8018134:	6078      	str	r0, [r7, #4]
 8018136:	460b      	mov	r3, r1
 8018138:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801813a:	2300      	movs	r3, #0
 801813c:	60bb      	str	r3, [r7, #8]
 801813e:	2300      	movs	r3, #0
 8018140:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018142:	f107 0308 	add.w	r3, r7, #8
 8018146:	2101      	movs	r1, #1
 8018148:	4618      	mov	r0, r3
 801814a:	f7f0 f9a3 	bl	8008494 <osSemaphoreCreate>
 801814e:	4602      	mov	r2, r0
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d102      	bne.n	8018162 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801815c:	f04f 33ff 	mov.w	r3, #4294967295
 8018160:	e009      	b.n	8018176 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018162:	78fb      	ldrb	r3, [r7, #3]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d105      	bne.n	8018174 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2100      	movs	r1, #0
 801816e:	4618      	mov	r0, r3
 8018170:	f7f0 f9c2 	bl	80084f8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018174:	2300      	movs	r3, #0
}
 8018176:	4618      	mov	r0, r3
 8018178:	3710      	adds	r7, #16
 801817a:	46bd      	mov	sp, r7
 801817c:	bd80      	pop	{r7, pc}

0801817e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801817e:	b580      	push	{r7, lr}
 8018180:	b084      	sub	sp, #16
 8018182:	af00      	add	r7, sp, #0
 8018184:	6078      	str	r0, [r7, #4]
 8018186:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018188:	f7f0 f88c 	bl	80082a4 <osKernelSysTick>
 801818c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d011      	beq.n	80181b8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	6839      	ldr	r1, [r7, #0]
 801819a:	4618      	mov	r0, r3
 801819c:	f7f0 f9ac 	bl	80084f8 <osSemaphoreWait>
 80181a0:	4603      	mov	r3, r0
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d105      	bne.n	80181b2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80181a6:	f7f0 f87d 	bl	80082a4 <osKernelSysTick>
 80181aa:	4602      	mov	r2, r0
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	1ad3      	subs	r3, r2, r3
 80181b0:	e012      	b.n	80181d8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80181b2:	f04f 33ff 	mov.w	r3, #4294967295
 80181b6:	e00f      	b.n	80181d8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80181b8:	bf00      	nop
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	f04f 31ff 	mov.w	r1, #4294967295
 80181c2:	4618      	mov	r0, r3
 80181c4:	f7f0 f998 	bl	80084f8 <osSemaphoreWait>
 80181c8:	4603      	mov	r3, r0
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d1f5      	bne.n	80181ba <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80181ce:	f7f0 f869 	bl	80082a4 <osKernelSysTick>
 80181d2:	4602      	mov	r2, r0
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80181d8:	4618      	mov	r0, r3
 80181da:	3710      	adds	r7, #16
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}

080181e0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b082      	sub	sp, #8
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7f0 f9d1 	bl	8008594 <osSemaphoreRelease>
}
 80181f2:	bf00      	nop
 80181f4:	3708      	adds	r7, #8
 80181f6:	46bd      	mov	sp, r7
 80181f8:	bd80      	pop	{r7, pc}

080181fa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80181fa:	b580      	push	{r7, lr}
 80181fc:	b082      	sub	sp, #8
 80181fe:	af00      	add	r7, sp, #0
 8018200:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	4618      	mov	r0, r3
 8018208:	f7f0 f9fa 	bl	8008600 <osSemaphoreDelete>
}
 801820c:	bf00      	nop
 801820e:	3708      	adds	r7, #8
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018214:	b480      	push	{r7}
 8018216:	b083      	sub	sp, #12
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d101      	bne.n	8018228 <sys_sem_valid+0x14>
    return 0;
 8018224:	2300      	movs	r3, #0
 8018226:	e000      	b.n	801822a <sys_sem_valid+0x16>
  else
    return 1;
 8018228:	2301      	movs	r3, #1
}
 801822a:	4618      	mov	r0, r3
 801822c:	370c      	adds	r7, #12
 801822e:	46bd      	mov	sp, r7
 8018230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018234:	4770      	bx	lr

08018236 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018236:	b480      	push	{r7}
 8018238:	b083      	sub	sp, #12
 801823a:	af00      	add	r7, sp, #0
 801823c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	2200      	movs	r2, #0
 8018242:	601a      	str	r2, [r3, #0]
}
 8018244:	bf00      	nop
 8018246:	370c      	adds	r7, #12
 8018248:	46bd      	mov	sp, r7
 801824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824e:	4770      	bx	lr

08018250 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018254:	4803      	ldr	r0, [pc, #12]	; (8018264 <sys_init+0x14>)
 8018256:	f7f0 f881 	bl	800835c <osMutexCreate>
 801825a:	4603      	mov	r3, r0
 801825c:	4a02      	ldr	r2, [pc, #8]	; (8018268 <sys_init+0x18>)
 801825e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018260:	bf00      	nop
 8018262:	bd80      	pop	{r7, pc}
 8018264:	08023684 	.word	0x08023684
 8018268:	2000b6b4 	.word	0x2000b6b4

0801826c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801826c:	b580      	push	{r7, lr}
 801826e:	b084      	sub	sp, #16
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018274:	2300      	movs	r3, #0
 8018276:	60bb      	str	r3, [r7, #8]
 8018278:	2300      	movs	r3, #0
 801827a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801827c:	f107 0308 	add.w	r3, r7, #8
 8018280:	4618      	mov	r0, r3
 8018282:	f7f0 f86b 	bl	800835c <osMutexCreate>
 8018286:	4602      	mov	r2, r0
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d102      	bne.n	801829a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018294:	f04f 33ff 	mov.w	r3, #4294967295
 8018298:	e000      	b.n	801829c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801829a:	2300      	movs	r3, #0
}
 801829c:	4618      	mov	r0, r3
 801829e:	3710      	adds	r7, #16
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}

080182a4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	f04f 31ff 	mov.w	r1, #4294967295
 80182b4:	4618      	mov	r0, r3
 80182b6:	f7f0 f869 	bl	800838c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80182ba:	bf00      	nop
 80182bc:	3708      	adds	r7, #8
 80182be:	46bd      	mov	sp, r7
 80182c0:	bd80      	pop	{r7, pc}

080182c2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80182c2:	b580      	push	{r7, lr}
 80182c4:	b082      	sub	sp, #8
 80182c6:	af00      	add	r7, sp, #0
 80182c8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7f0 f8aa 	bl	8008428 <osMutexRelease>
}
 80182d4:	bf00      	nop
 80182d6:	3708      	adds	r7, #8
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}

080182dc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b08c      	sub	sp, #48	; 0x30
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	60f8      	str	r0, [r7, #12]
 80182e4:	60b9      	str	r1, [r7, #8]
 80182e6:	607a      	str	r2, [r7, #4]
 80182e8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80182ea:	f107 0314 	add.w	r3, r7, #20
 80182ee:	2200      	movs	r2, #0
 80182f0:	601a      	str	r2, [r3, #0]
 80182f2:	605a      	str	r2, [r3, #4]
 80182f4:	609a      	str	r2, [r3, #8]
 80182f6:	60da      	str	r2, [r3, #12]
 80182f8:	611a      	str	r2, [r3, #16]
 80182fa:	615a      	str	r2, [r3, #20]
 80182fc:	619a      	str	r2, [r3, #24]
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	617b      	str	r3, [r7, #20]
 8018302:	68bb      	ldr	r3, [r7, #8]
 8018304:	61bb      	str	r3, [r7, #24]
 8018306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018308:	b21b      	sxth	r3, r3
 801830a:	83bb      	strh	r3, [r7, #28]
 801830c:	683b      	ldr	r3, [r7, #0]
 801830e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018310:	f107 0314 	add.w	r3, r7, #20
 8018314:	6879      	ldr	r1, [r7, #4]
 8018316:	4618      	mov	r0, r3
 8018318:	f7ef ffd4 	bl	80082c4 <osThreadCreate>
 801831c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801831e:	4618      	mov	r0, r3
 8018320:	3730      	adds	r7, #48	; 0x30
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}
	...

08018328 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801832c:	4b04      	ldr	r3, [pc, #16]	; (8018340 <sys_arch_protect+0x18>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	f04f 31ff 	mov.w	r1, #4294967295
 8018334:	4618      	mov	r0, r3
 8018336:	f7f0 f829 	bl	800838c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801833a:	2301      	movs	r3, #1
}
 801833c:	4618      	mov	r0, r3
 801833e:	bd80      	pop	{r7, pc}
 8018340:	2000b6b4 	.word	0x2000b6b4

08018344 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b082      	sub	sp, #8
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801834c:	4b04      	ldr	r3, [pc, #16]	; (8018360 <sys_arch_unprotect+0x1c>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4618      	mov	r0, r3
 8018352:	f7f0 f869 	bl	8008428 <osMutexRelease>
}
 8018356:	bf00      	nop
 8018358:	3708      	adds	r7, #8
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	2000b6b4 	.word	0x2000b6b4

08018364 <atoi>:
 8018364:	220a      	movs	r2, #10
 8018366:	2100      	movs	r1, #0
 8018368:	f000 bba8 	b.w	8018abc <strtol>

0801836c <__libc_init_array>:
 801836c:	b570      	push	{r4, r5, r6, lr}
 801836e:	4d0d      	ldr	r5, [pc, #52]	; (80183a4 <__libc_init_array+0x38>)
 8018370:	4c0d      	ldr	r4, [pc, #52]	; (80183a8 <__libc_init_array+0x3c>)
 8018372:	1b64      	subs	r4, r4, r5
 8018374:	10a4      	asrs	r4, r4, #2
 8018376:	2600      	movs	r6, #0
 8018378:	42a6      	cmp	r6, r4
 801837a:	d109      	bne.n	8018390 <__libc_init_array+0x24>
 801837c:	4d0b      	ldr	r5, [pc, #44]	; (80183ac <__libc_init_array+0x40>)
 801837e:	4c0c      	ldr	r4, [pc, #48]	; (80183b0 <__libc_init_array+0x44>)
 8018380:	f007 fdac 	bl	801fedc <_init>
 8018384:	1b64      	subs	r4, r4, r5
 8018386:	10a4      	asrs	r4, r4, #2
 8018388:	2600      	movs	r6, #0
 801838a:	42a6      	cmp	r6, r4
 801838c:	d105      	bne.n	801839a <__libc_init_array+0x2e>
 801838e:	bd70      	pop	{r4, r5, r6, pc}
 8018390:	f855 3b04 	ldr.w	r3, [r5], #4
 8018394:	4798      	blx	r3
 8018396:	3601      	adds	r6, #1
 8018398:	e7ee      	b.n	8018378 <__libc_init_array+0xc>
 801839a:	f855 3b04 	ldr.w	r3, [r5], #4
 801839e:	4798      	blx	r3
 80183a0:	3601      	adds	r6, #1
 80183a2:	e7f2      	b.n	801838a <__libc_init_array+0x1e>
 80183a4:	08023b98 	.word	0x08023b98
 80183a8:	08023b98 	.word	0x08023b98
 80183ac:	08023b98 	.word	0x08023b98
 80183b0:	08023ba0 	.word	0x08023ba0

080183b4 <memcmp>:
 80183b4:	b530      	push	{r4, r5, lr}
 80183b6:	3901      	subs	r1, #1
 80183b8:	2400      	movs	r4, #0
 80183ba:	42a2      	cmp	r2, r4
 80183bc:	d101      	bne.n	80183c2 <memcmp+0xe>
 80183be:	2000      	movs	r0, #0
 80183c0:	e005      	b.n	80183ce <memcmp+0x1a>
 80183c2:	5d03      	ldrb	r3, [r0, r4]
 80183c4:	3401      	adds	r4, #1
 80183c6:	5d0d      	ldrb	r5, [r1, r4]
 80183c8:	42ab      	cmp	r3, r5
 80183ca:	d0f6      	beq.n	80183ba <memcmp+0x6>
 80183cc:	1b58      	subs	r0, r3, r5
 80183ce:	bd30      	pop	{r4, r5, pc}

080183d0 <memcpy>:
 80183d0:	440a      	add	r2, r1
 80183d2:	4291      	cmp	r1, r2
 80183d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80183d8:	d100      	bne.n	80183dc <memcpy+0xc>
 80183da:	4770      	bx	lr
 80183dc:	b510      	push	{r4, lr}
 80183de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80183e6:	4291      	cmp	r1, r2
 80183e8:	d1f9      	bne.n	80183de <memcpy+0xe>
 80183ea:	bd10      	pop	{r4, pc}

080183ec <memmove>:
 80183ec:	4288      	cmp	r0, r1
 80183ee:	b510      	push	{r4, lr}
 80183f0:	eb01 0402 	add.w	r4, r1, r2
 80183f4:	d902      	bls.n	80183fc <memmove+0x10>
 80183f6:	4284      	cmp	r4, r0
 80183f8:	4623      	mov	r3, r4
 80183fa:	d807      	bhi.n	801840c <memmove+0x20>
 80183fc:	1e43      	subs	r3, r0, #1
 80183fe:	42a1      	cmp	r1, r4
 8018400:	d008      	beq.n	8018414 <memmove+0x28>
 8018402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018406:	f803 2f01 	strb.w	r2, [r3, #1]!
 801840a:	e7f8      	b.n	80183fe <memmove+0x12>
 801840c:	4402      	add	r2, r0
 801840e:	4601      	mov	r1, r0
 8018410:	428a      	cmp	r2, r1
 8018412:	d100      	bne.n	8018416 <memmove+0x2a>
 8018414:	bd10      	pop	{r4, pc}
 8018416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801841a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801841e:	e7f7      	b.n	8018410 <memmove+0x24>

08018420 <memset>:
 8018420:	4402      	add	r2, r0
 8018422:	4603      	mov	r3, r0
 8018424:	4293      	cmp	r3, r2
 8018426:	d100      	bne.n	801842a <memset+0xa>
 8018428:	4770      	bx	lr
 801842a:	f803 1b01 	strb.w	r1, [r3], #1
 801842e:	e7f9      	b.n	8018424 <memset+0x4>

08018430 <validate_structure>:
 8018430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018432:	6801      	ldr	r1, [r0, #0]
 8018434:	293b      	cmp	r1, #59	; 0x3b
 8018436:	4604      	mov	r4, r0
 8018438:	d911      	bls.n	801845e <validate_structure+0x2e>
 801843a:	223c      	movs	r2, #60	; 0x3c
 801843c:	4668      	mov	r0, sp
 801843e:	f002 f85d 	bl	801a4fc <div>
 8018442:	9a01      	ldr	r2, [sp, #4]
 8018444:	6863      	ldr	r3, [r4, #4]
 8018446:	9900      	ldr	r1, [sp, #0]
 8018448:	2a00      	cmp	r2, #0
 801844a:	440b      	add	r3, r1
 801844c:	6063      	str	r3, [r4, #4]
 801844e:	bfbb      	ittet	lt
 8018450:	323c      	addlt	r2, #60	; 0x3c
 8018452:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8018456:	6022      	strge	r2, [r4, #0]
 8018458:	6022      	strlt	r2, [r4, #0]
 801845a:	bfb8      	it	lt
 801845c:	6063      	strlt	r3, [r4, #4]
 801845e:	6861      	ldr	r1, [r4, #4]
 8018460:	293b      	cmp	r1, #59	; 0x3b
 8018462:	d911      	bls.n	8018488 <validate_structure+0x58>
 8018464:	223c      	movs	r2, #60	; 0x3c
 8018466:	4668      	mov	r0, sp
 8018468:	f002 f848 	bl	801a4fc <div>
 801846c:	9a01      	ldr	r2, [sp, #4]
 801846e:	68a3      	ldr	r3, [r4, #8]
 8018470:	9900      	ldr	r1, [sp, #0]
 8018472:	2a00      	cmp	r2, #0
 8018474:	440b      	add	r3, r1
 8018476:	60a3      	str	r3, [r4, #8]
 8018478:	bfbb      	ittet	lt
 801847a:	323c      	addlt	r2, #60	; 0x3c
 801847c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8018480:	6062      	strge	r2, [r4, #4]
 8018482:	6062      	strlt	r2, [r4, #4]
 8018484:	bfb8      	it	lt
 8018486:	60a3      	strlt	r3, [r4, #8]
 8018488:	68a1      	ldr	r1, [r4, #8]
 801848a:	2917      	cmp	r1, #23
 801848c:	d911      	bls.n	80184b2 <validate_structure+0x82>
 801848e:	2218      	movs	r2, #24
 8018490:	4668      	mov	r0, sp
 8018492:	f002 f833 	bl	801a4fc <div>
 8018496:	9a01      	ldr	r2, [sp, #4]
 8018498:	68e3      	ldr	r3, [r4, #12]
 801849a:	9900      	ldr	r1, [sp, #0]
 801849c:	2a00      	cmp	r2, #0
 801849e:	440b      	add	r3, r1
 80184a0:	60e3      	str	r3, [r4, #12]
 80184a2:	bfbb      	ittet	lt
 80184a4:	3218      	addlt	r2, #24
 80184a6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80184aa:	60a2      	strge	r2, [r4, #8]
 80184ac:	60a2      	strlt	r2, [r4, #8]
 80184ae:	bfb8      	it	lt
 80184b0:	60e3      	strlt	r3, [r4, #12]
 80184b2:	6921      	ldr	r1, [r4, #16]
 80184b4:	290b      	cmp	r1, #11
 80184b6:	d911      	bls.n	80184dc <validate_structure+0xac>
 80184b8:	220c      	movs	r2, #12
 80184ba:	4668      	mov	r0, sp
 80184bc:	f002 f81e 	bl	801a4fc <div>
 80184c0:	9a01      	ldr	r2, [sp, #4]
 80184c2:	6963      	ldr	r3, [r4, #20]
 80184c4:	9900      	ldr	r1, [sp, #0]
 80184c6:	2a00      	cmp	r2, #0
 80184c8:	440b      	add	r3, r1
 80184ca:	6163      	str	r3, [r4, #20]
 80184cc:	bfbb      	ittet	lt
 80184ce:	320c      	addlt	r2, #12
 80184d0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80184d4:	6122      	strge	r2, [r4, #16]
 80184d6:	6122      	strlt	r2, [r4, #16]
 80184d8:	bfb8      	it	lt
 80184da:	6163      	strlt	r3, [r4, #20]
 80184dc:	6963      	ldr	r3, [r4, #20]
 80184de:	0799      	lsls	r1, r3, #30
 80184e0:	d120      	bne.n	8018524 <validate_structure+0xf4>
 80184e2:	2164      	movs	r1, #100	; 0x64
 80184e4:	fb93 f2f1 	sdiv	r2, r3, r1
 80184e8:	fb01 3212 	mls	r2, r1, r2, r3
 80184ec:	b9e2      	cbnz	r2, 8018528 <validate_structure+0xf8>
 80184ee:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80184f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80184f6:	fb93 f2f1 	sdiv	r2, r3, r1
 80184fa:	fb01 3312 	mls	r3, r1, r2, r3
 80184fe:	2b00      	cmp	r3, #0
 8018500:	bf14      	ite	ne
 8018502:	231c      	movne	r3, #28
 8018504:	231d      	moveq	r3, #29
 8018506:	68e2      	ldr	r2, [r4, #12]
 8018508:	2a00      	cmp	r2, #0
 801850a:	dc0f      	bgt.n	801852c <validate_structure+0xfc>
 801850c:	4f33      	ldr	r7, [pc, #204]	; (80185dc <validate_structure+0x1ac>)
 801850e:	260b      	movs	r6, #11
 8018510:	2064      	movs	r0, #100	; 0x64
 8018512:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8018516:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801851a:	f1bc 0f00 	cmp.w	ip, #0
 801851e:	dd31      	ble.n	8018584 <validate_structure+0x154>
 8018520:	b003      	add	sp, #12
 8018522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018524:	231c      	movs	r3, #28
 8018526:	e7ee      	b.n	8018506 <validate_structure+0xd6>
 8018528:	231d      	movs	r3, #29
 801852a:	e7ec      	b.n	8018506 <validate_structure+0xd6>
 801852c:	4f2b      	ldr	r7, [pc, #172]	; (80185dc <validate_structure+0x1ac>)
 801852e:	f04f 0c00 	mov.w	ip, #0
 8018532:	2564      	movs	r5, #100	; 0x64
 8018534:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8018538:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801853c:	2a01      	cmp	r2, #1
 801853e:	bf14      	ite	ne
 8018540:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8018544:	4618      	moveq	r0, r3
 8018546:	4281      	cmp	r1, r0
 8018548:	ddea      	ble.n	8018520 <validate_structure+0xf0>
 801854a:	3201      	adds	r2, #1
 801854c:	1a09      	subs	r1, r1, r0
 801854e:	2a0c      	cmp	r2, #12
 8018550:	60e1      	str	r1, [r4, #12]
 8018552:	6122      	str	r2, [r4, #16]
 8018554:	d1f0      	bne.n	8018538 <validate_structure+0x108>
 8018556:	6963      	ldr	r3, [r4, #20]
 8018558:	1c5a      	adds	r2, r3, #1
 801855a:	0791      	lsls	r1, r2, #30
 801855c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8018560:	d137      	bne.n	80185d2 <validate_structure+0x1a2>
 8018562:	fb92 f1f5 	sdiv	r1, r2, r5
 8018566:	fb05 2211 	mls	r2, r5, r1, r2
 801856a:	2a00      	cmp	r2, #0
 801856c:	d133      	bne.n	80185d6 <validate_structure+0x1a6>
 801856e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8018572:	fb93 f2f6 	sdiv	r2, r3, r6
 8018576:	fb06 3312 	mls	r3, r6, r2, r3
 801857a:	2b00      	cmp	r3, #0
 801857c:	bf14      	ite	ne
 801857e:	231c      	movne	r3, #28
 8018580:	231d      	moveq	r3, #29
 8018582:	e7d9      	b.n	8018538 <validate_structure+0x108>
 8018584:	6921      	ldr	r1, [r4, #16]
 8018586:	3901      	subs	r1, #1
 8018588:	6121      	str	r1, [r4, #16]
 801858a:	3101      	adds	r1, #1
 801858c:	d114      	bne.n	80185b8 <validate_structure+0x188>
 801858e:	6963      	ldr	r3, [r4, #20]
 8018590:	1e59      	subs	r1, r3, #1
 8018592:	078a      	lsls	r2, r1, #30
 8018594:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8018598:	d117      	bne.n	80185ca <validate_structure+0x19a>
 801859a:	fb91 f2f0 	sdiv	r2, r1, r0
 801859e:	fb00 1112 	mls	r1, r0, r2, r1
 80185a2:	b9a1      	cbnz	r1, 80185ce <validate_structure+0x19e>
 80185a4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80185a8:	fb93 f2f5 	sdiv	r2, r3, r5
 80185ac:	fb05 3312 	mls	r3, r5, r2, r3
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	bf14      	ite	ne
 80185b4:	231c      	movne	r3, #28
 80185b6:	231d      	moveq	r3, #29
 80185b8:	6922      	ldr	r2, [r4, #16]
 80185ba:	2a01      	cmp	r2, #1
 80185bc:	bf14      	ite	ne
 80185be:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80185c2:	461a      	moveq	r2, r3
 80185c4:	4462      	add	r2, ip
 80185c6:	60e2      	str	r2, [r4, #12]
 80185c8:	e7a5      	b.n	8018516 <validate_structure+0xe6>
 80185ca:	231c      	movs	r3, #28
 80185cc:	e7f4      	b.n	80185b8 <validate_structure+0x188>
 80185ce:	231d      	movs	r3, #29
 80185d0:	e7f2      	b.n	80185b8 <validate_structure+0x188>
 80185d2:	231c      	movs	r3, #28
 80185d4:	e7b0      	b.n	8018538 <validate_structure+0x108>
 80185d6:	231d      	movs	r3, #29
 80185d8:	e7ae      	b.n	8018538 <validate_structure+0x108>
 80185da:	bf00      	nop
 80185dc:	08023794 	.word	0x08023794

080185e0 <mktime>:
 80185e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e4:	b08b      	sub	sp, #44	; 0x2c
 80185e6:	4605      	mov	r5, r0
 80185e8:	f003 f8b0 	bl	801b74c <__gettzinfo>
 80185ec:	4607      	mov	r7, r0
 80185ee:	4628      	mov	r0, r5
 80185f0:	f7ff ff1e 	bl	8018430 <validate_structure>
 80185f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80185f8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80185fc:	68a8      	ldr	r0, [r5, #8]
 80185fe:	696e      	ldr	r6, [r5, #20]
 8018600:	fb0a 2303 	mla	r3, sl, r3, r2
 8018604:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8018608:	fb0a 3a00 	mla	sl, sl, r0, r3
 801860c:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8018610:	4ac3      	ldr	r2, [pc, #780]	; (8018920 <mktime+0x340>)
 8018612:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018616:	3c01      	subs	r4, #1
 8018618:	2b01      	cmp	r3, #1
 801861a:	4414      	add	r4, r2
 801861c:	dd11      	ble.n	8018642 <mktime+0x62>
 801861e:	07b1      	lsls	r1, r6, #30
 8018620:	d10f      	bne.n	8018642 <mktime+0x62>
 8018622:	2264      	movs	r2, #100	; 0x64
 8018624:	fb96 f3f2 	sdiv	r3, r6, r2
 8018628:	fb02 6313 	mls	r3, r2, r3, r6
 801862c:	b943      	cbnz	r3, 8018640 <mktime+0x60>
 801862e:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8018632:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018636:	fb91 f3f2 	sdiv	r3, r1, r2
 801863a:	fb02 1313 	mls	r3, r2, r3, r1
 801863e:	b903      	cbnz	r3, 8018642 <mktime+0x62>
 8018640:	3401      	adds	r4, #1
 8018642:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8018646:	3310      	adds	r3, #16
 8018648:	f644 6220 	movw	r2, #20000	; 0x4e20
 801864c:	4293      	cmp	r3, r2
 801864e:	61ec      	str	r4, [r5, #28]
 8018650:	f200 8161 	bhi.w	8018916 <mktime+0x336>
 8018654:	2e46      	cmp	r6, #70	; 0x46
 8018656:	dd77      	ble.n	8018748 <mktime+0x168>
 8018658:	2346      	movs	r3, #70	; 0x46
 801865a:	f240 1e6d 	movw	lr, #365	; 0x16d
 801865e:	2164      	movs	r1, #100	; 0x64
 8018660:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8018664:	079a      	lsls	r2, r3, #30
 8018666:	d169      	bne.n	801873c <mktime+0x15c>
 8018668:	fb93 f2f1 	sdiv	r2, r3, r1
 801866c:	fb01 3212 	mls	r2, r1, r2, r3
 8018670:	2a00      	cmp	r2, #0
 8018672:	d166      	bne.n	8018742 <mktime+0x162>
 8018674:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8018678:	fb9c f2f0 	sdiv	r2, ip, r0
 801867c:	fb00 c212 	mls	r2, r0, r2, ip
 8018680:	2a00      	cmp	r2, #0
 8018682:	bf14      	ite	ne
 8018684:	4672      	movne	r2, lr
 8018686:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801868a:	3301      	adds	r3, #1
 801868c:	429e      	cmp	r6, r3
 801868e:	4414      	add	r4, r2
 8018690:	d1e8      	bne.n	8018664 <mktime+0x84>
 8018692:	4ba4      	ldr	r3, [pc, #656]	; (8018924 <mktime+0x344>)
 8018694:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8018698:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801869c:	f000 fac0 	bl	8018c20 <__tz_lock>
 80186a0:	f000 faca 	bl	8018c38 <_tzset_unlocked>
 80186a4:	4ba0      	ldr	r3, [pc, #640]	; (8018928 <mktime+0x348>)
 80186a6:	f8d3 9000 	ldr.w	r9, [r3]
 80186aa:	f1b9 0f00 	cmp.w	r9, #0
 80186ae:	d03f      	beq.n	8018730 <mktime+0x150>
 80186b0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80186b4:	6968      	ldr	r0, [r5, #20]
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	f1b9 0f01 	cmp.w	r9, #1
 80186bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80186c0:	46c8      	mov	r8, r9
 80186c2:	bfa8      	it	ge
 80186c4:	f04f 0801 	movge.w	r8, #1
 80186c8:	4283      	cmp	r3, r0
 80186ca:	d17f      	bne.n	80187cc <mktime+0x1ec>
 80186cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186ce:	4619      	mov	r1, r3
 80186d0:	17da      	asrs	r2, r3, #31
 80186d2:	e9cd 1200 	strd	r1, r2, [sp]
 80186d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80186da:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80186de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80186e4:	1a80      	subs	r0, r0, r2
 80186e6:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80186ea:	4582      	cmp	sl, r0
 80186ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80186f0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80186f4:	da71      	bge.n	80187da <mktime+0x1fa>
 80186f6:	9800      	ldr	r0, [sp, #0]
 80186f8:	6a39      	ldr	r1, [r7, #32]
 80186fa:	1a09      	subs	r1, r1, r0
 80186fc:	9104      	str	r1, [sp, #16]
 80186fe:	9801      	ldr	r0, [sp, #4]
 8018700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018702:	eb61 0100 	sbc.w	r1, r1, r0
 8018706:	9105      	str	r1, [sp, #20]
 8018708:	6839      	ldr	r1, [r7, #0]
 801870a:	2900      	cmp	r1, #0
 801870c:	d075      	beq.n	80187fa <mktime+0x21a>
 801870e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018712:	4582      	cmp	sl, r0
 8018714:	eb7b 0101 	sbcs.w	r1, fp, r1
 8018718:	db05      	blt.n	8018726 <mktime+0x146>
 801871a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801871e:	4582      	cmp	sl, r0
 8018720:	eb7b 0101 	sbcs.w	r1, fp, r1
 8018724:	db6f      	blt.n	8018806 <mktime+0x226>
 8018726:	f1b9 0f00 	cmp.w	r9, #0
 801872a:	f04f 0900 	mov.w	r9, #0
 801872e:	da6f      	bge.n	8018810 <mktime+0x230>
 8018730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018732:	eb1a 0a03 	adds.w	sl, sl, r3
 8018736:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801873a:	e0ae      	b.n	801889a <mktime+0x2ba>
 801873c:	f240 126d 	movw	r2, #365	; 0x16d
 8018740:	e7a3      	b.n	801868a <mktime+0xaa>
 8018742:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8018746:	e7a0      	b.n	801868a <mktime+0xaa>
 8018748:	d0a3      	beq.n	8018692 <mktime+0xb2>
 801874a:	2345      	movs	r3, #69	; 0x45
 801874c:	f240 1e6d 	movw	lr, #365	; 0x16d
 8018750:	2164      	movs	r1, #100	; 0x64
 8018752:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8018756:	e012      	b.n	801877e <mktime+0x19e>
 8018758:	bb62      	cbnz	r2, 80187b4 <mktime+0x1d4>
 801875a:	fb93 f2f1 	sdiv	r2, r3, r1
 801875e:	fb01 3212 	mls	r2, r1, r2, r3
 8018762:	bb52      	cbnz	r2, 80187ba <mktime+0x1da>
 8018764:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8018768:	fb9c f2f0 	sdiv	r2, ip, r0
 801876c:	fb00 c212 	mls	r2, r0, r2, ip
 8018770:	2a00      	cmp	r2, #0
 8018772:	bf14      	ite	ne
 8018774:	4672      	movne	r2, lr
 8018776:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801877a:	1aa4      	subs	r4, r4, r2
 801877c:	3b01      	subs	r3, #1
 801877e:	429e      	cmp	r6, r3
 8018780:	f003 0203 	and.w	r2, r3, #3
 8018784:	dbe8      	blt.n	8018758 <mktime+0x178>
 8018786:	b9da      	cbnz	r2, 80187c0 <mktime+0x1e0>
 8018788:	2264      	movs	r2, #100	; 0x64
 801878a:	fb96 f3f2 	sdiv	r3, r6, r2
 801878e:	fb02 6313 	mls	r3, r2, r3, r6
 8018792:	b9c3      	cbnz	r3, 80187c6 <mktime+0x1e6>
 8018794:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8018798:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801879c:	fb91 f3f2 	sdiv	r3, r1, r2
 80187a0:	fb02 1313 	mls	r3, r2, r3, r1
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	f240 136d 	movw	r3, #365	; 0x16d
 80187aa:	bf08      	it	eq
 80187ac:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80187b0:	1ae4      	subs	r4, r4, r3
 80187b2:	e76e      	b.n	8018692 <mktime+0xb2>
 80187b4:	f240 126d 	movw	r2, #365	; 0x16d
 80187b8:	e7df      	b.n	801877a <mktime+0x19a>
 80187ba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80187be:	e7dc      	b.n	801877a <mktime+0x19a>
 80187c0:	f240 136d 	movw	r3, #365	; 0x16d
 80187c4:	e7f4      	b.n	80187b0 <mktime+0x1d0>
 80187c6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80187ca:	e7f1      	b.n	80187b0 <mktime+0x1d0>
 80187cc:	f000 f980 	bl	8018ad0 <__tzcalc_limits>
 80187d0:	2800      	cmp	r0, #0
 80187d2:	f47f af7b 	bne.w	80186cc <mktime+0xec>
 80187d6:	46c1      	mov	r9, r8
 80187d8:	e054      	b.n	8018884 <mktime+0x2a4>
 80187da:	9800      	ldr	r0, [sp, #0]
 80187dc:	9902      	ldr	r1, [sp, #8]
 80187de:	1a09      	subs	r1, r1, r0
 80187e0:	9108      	str	r1, [sp, #32]
 80187e2:	9801      	ldr	r0, [sp, #4]
 80187e4:	9903      	ldr	r1, [sp, #12]
 80187e6:	eb61 0100 	sbc.w	r1, r1, r0
 80187ea:	9109      	str	r1, [sp, #36]	; 0x24
 80187ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80187f0:	4582      	cmp	sl, r0
 80187f2:	eb7b 0101 	sbcs.w	r1, fp, r1
 80187f6:	dbee      	blt.n	80187d6 <mktime+0x1f6>
 80187f8:	e77d      	b.n	80186f6 <mktime+0x116>
 80187fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80187fe:	4582      	cmp	sl, r0
 8018800:	eb7b 0101 	sbcs.w	r1, fp, r1
 8018804:	db89      	blt.n	801871a <mktime+0x13a>
 8018806:	f1b9 0f00 	cmp.w	r9, #0
 801880a:	db3f      	blt.n	801888c <mktime+0x2ac>
 801880c:	f04f 0901 	mov.w	r9, #1
 8018810:	ea88 0809 	eor.w	r8, r8, r9
 8018814:	f1b8 0f01 	cmp.w	r8, #1
 8018818:	d134      	bne.n	8018884 <mktime+0x2a4>
 801881a:	f1b9 0f00 	cmp.w	r9, #0
 801881e:	d04f      	beq.n	80188c0 <mktime+0x2e0>
 8018820:	1ad3      	subs	r3, r2, r3
 8018822:	682a      	ldr	r2, [r5, #0]
 8018824:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8018828:	441a      	add	r2, r3
 801882a:	eb1a 0a03 	adds.w	sl, sl, r3
 801882e:	602a      	str	r2, [r5, #0]
 8018830:	4628      	mov	r0, r5
 8018832:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8018836:	f7ff fdfb 	bl	8018430 <validate_structure>
 801883a:	68ea      	ldr	r2, [r5, #12]
 801883c:	ebb2 0208 	subs.w	r2, r2, r8
 8018840:	d020      	beq.n	8018884 <mktime+0x2a4>
 8018842:	2a01      	cmp	r2, #1
 8018844:	dc3e      	bgt.n	80188c4 <mktime+0x2e4>
 8018846:	1c90      	adds	r0, r2, #2
 8018848:	bfd8      	it	le
 801884a:	2201      	movle	r2, #1
 801884c:	69eb      	ldr	r3, [r5, #28]
 801884e:	18d3      	adds	r3, r2, r3
 8018850:	4414      	add	r4, r2
 8018852:	d540      	bpl.n	80188d6 <mktime+0x2f6>
 8018854:	1e72      	subs	r2, r6, #1
 8018856:	0791      	lsls	r1, r2, #30
 8018858:	d137      	bne.n	80188ca <mktime+0x2ea>
 801885a:	2164      	movs	r1, #100	; 0x64
 801885c:	fb92 f3f1 	sdiv	r3, r2, r1
 8018860:	fb01 2313 	mls	r3, r1, r3, r2
 8018864:	bba3      	cbnz	r3, 80188d0 <mktime+0x2f0>
 8018866:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801886a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801886e:	fb96 f3f2 	sdiv	r3, r6, r2
 8018872:	fb02 6613 	mls	r6, r2, r3, r6
 8018876:	2e00      	cmp	r6, #0
 8018878:	f240 136d 	movw	r3, #365	; 0x16d
 801887c:	bf18      	it	ne
 801887e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8018882:	61eb      	str	r3, [r5, #28]
 8018884:	f1b9 0f01 	cmp.w	r9, #1
 8018888:	f47f af52 	bne.w	8018730 <mktime+0x150>
 801888c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801888e:	eb1a 0a03 	adds.w	sl, sl, r3
 8018892:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8018896:	f04f 0901 	mov.w	r9, #1
 801889a:	f000 f9c7 	bl	8018c2c <__tz_unlock>
 801889e:	3404      	adds	r4, #4
 80188a0:	2307      	movs	r3, #7
 80188a2:	fb94 f3f3 	sdiv	r3, r4, r3
 80188a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80188aa:	1ae4      	subs	r4, r4, r3
 80188ac:	bf48      	it	mi
 80188ae:	3407      	addmi	r4, #7
 80188b0:	f8c5 9020 	str.w	r9, [r5, #32]
 80188b4:	61ac      	str	r4, [r5, #24]
 80188b6:	4650      	mov	r0, sl
 80188b8:	4659      	mov	r1, fp
 80188ba:	b00b      	add	sp, #44	; 0x2c
 80188bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188c0:	1a9b      	subs	r3, r3, r2
 80188c2:	e7ae      	b.n	8018822 <mktime+0x242>
 80188c4:	f04f 32ff 	mov.w	r2, #4294967295
 80188c8:	e7c0      	b.n	801884c <mktime+0x26c>
 80188ca:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80188ce:	e7d8      	b.n	8018882 <mktime+0x2a2>
 80188d0:	f240 136d 	movw	r3, #365	; 0x16d
 80188d4:	e7d5      	b.n	8018882 <mktime+0x2a2>
 80188d6:	07b2      	lsls	r2, r6, #30
 80188d8:	d117      	bne.n	801890a <mktime+0x32a>
 80188da:	2164      	movs	r1, #100	; 0x64
 80188dc:	fb96 f2f1 	sdiv	r2, r6, r1
 80188e0:	fb01 6212 	mls	r2, r1, r2, r6
 80188e4:	b9a2      	cbnz	r2, 8018910 <mktime+0x330>
 80188e6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80188ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80188ee:	fb96 f2f1 	sdiv	r2, r6, r1
 80188f2:	fb01 6612 	mls	r6, r1, r2, r6
 80188f6:	2e00      	cmp	r6, #0
 80188f8:	f240 126d 	movw	r2, #365	; 0x16d
 80188fc:	bf08      	it	eq
 80188fe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8018902:	4293      	cmp	r3, r2
 8018904:	bfa8      	it	ge
 8018906:	1a9b      	subge	r3, r3, r2
 8018908:	e7bb      	b.n	8018882 <mktime+0x2a2>
 801890a:	f240 126d 	movw	r2, #365	; 0x16d
 801890e:	e7f8      	b.n	8018902 <mktime+0x322>
 8018910:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8018914:	e7f5      	b.n	8018902 <mktime+0x322>
 8018916:	f04f 3aff 	mov.w	sl, #4294967295
 801891a:	f04f 3bff 	mov.w	fp, #4294967295
 801891e:	e7ca      	b.n	80188b6 <mktime+0x2d6>
 8018920:	080237c4 	.word	0x080237c4
 8018924:	00015180 	.word	0x00015180
 8018928:	20004c04 	.word	0x20004c04

0801892c <printf>:
 801892c:	b40f      	push	{r0, r1, r2, r3}
 801892e:	b507      	push	{r0, r1, r2, lr}
 8018930:	4906      	ldr	r1, [pc, #24]	; (801894c <printf+0x20>)
 8018932:	ab04      	add	r3, sp, #16
 8018934:	6808      	ldr	r0, [r1, #0]
 8018936:	f853 2b04 	ldr.w	r2, [r3], #4
 801893a:	6881      	ldr	r1, [r0, #8]
 801893c:	9301      	str	r3, [sp, #4]
 801893e:	f000 faff 	bl	8018f40 <_vfprintf_r>
 8018942:	b003      	add	sp, #12
 8018944:	f85d eb04 	ldr.w	lr, [sp], #4
 8018948:	b004      	add	sp, #16
 801894a:	4770      	bx	lr
 801894c:	20000038 	.word	0x20000038

08018950 <rand>:
 8018950:	4b0b      	ldr	r3, [pc, #44]	; (8018980 <rand+0x30>)
 8018952:	480c      	ldr	r0, [pc, #48]	; (8018984 <rand+0x34>)
 8018954:	6819      	ldr	r1, [r3, #0]
 8018956:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 801895a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 801895e:	b510      	push	{r4, lr}
 8018960:	4c09      	ldr	r4, [pc, #36]	; (8018988 <rand+0x38>)
 8018962:	4350      	muls	r0, r2
 8018964:	fb04 0003 	mla	r0, r4, r3, r0
 8018968:	fba2 3404 	umull	r3, r4, r2, r4
 801896c:	1c5a      	adds	r2, r3, #1
 801896e:	4404      	add	r4, r0
 8018970:	f144 0000 	adc.w	r0, r4, #0
 8018974:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 8018978:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801897c:	bd10      	pop	{r4, pc}
 801897e:	bf00      	nop
 8018980:	20000038 	.word	0x20000038
 8018984:	5851f42d 	.word	0x5851f42d
 8018988:	4c957f2d 	.word	0x4c957f2d

0801898c <strncmp>:
 801898c:	b510      	push	{r4, lr}
 801898e:	b16a      	cbz	r2, 80189ac <strncmp+0x20>
 8018990:	3901      	subs	r1, #1
 8018992:	1884      	adds	r4, r0, r2
 8018994:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018998:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801899c:	4293      	cmp	r3, r2
 801899e:	d103      	bne.n	80189a8 <strncmp+0x1c>
 80189a0:	42a0      	cmp	r0, r4
 80189a2:	d001      	beq.n	80189a8 <strncmp+0x1c>
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d1f5      	bne.n	8018994 <strncmp+0x8>
 80189a8:	1a98      	subs	r0, r3, r2
 80189aa:	bd10      	pop	{r4, pc}
 80189ac:	4610      	mov	r0, r2
 80189ae:	e7fc      	b.n	80189aa <strncmp+0x1e>

080189b0 <_strtol_l.isra.0>:
 80189b0:	2b01      	cmp	r3, #1
 80189b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189b6:	d001      	beq.n	80189bc <_strtol_l.isra.0+0xc>
 80189b8:	2b24      	cmp	r3, #36	; 0x24
 80189ba:	d906      	bls.n	80189ca <_strtol_l.isra.0+0x1a>
 80189bc:	f002 fc14 	bl	801b1e8 <__errno>
 80189c0:	2316      	movs	r3, #22
 80189c2:	6003      	str	r3, [r0, #0]
 80189c4:	2000      	movs	r0, #0
 80189c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189ca:	4f3a      	ldr	r7, [pc, #232]	; (8018ab4 <_strtol_l.isra.0+0x104>)
 80189cc:	468e      	mov	lr, r1
 80189ce:	4676      	mov	r6, lr
 80189d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80189d4:	5de5      	ldrb	r5, [r4, r7]
 80189d6:	f015 0508 	ands.w	r5, r5, #8
 80189da:	d1f8      	bne.n	80189ce <_strtol_l.isra.0+0x1e>
 80189dc:	2c2d      	cmp	r4, #45	; 0x2d
 80189de:	d134      	bne.n	8018a4a <_strtol_l.isra.0+0x9a>
 80189e0:	f89e 4000 	ldrb.w	r4, [lr]
 80189e4:	f04f 0801 	mov.w	r8, #1
 80189e8:	f106 0e02 	add.w	lr, r6, #2
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d05c      	beq.n	8018aaa <_strtol_l.isra.0+0xfa>
 80189f0:	2b10      	cmp	r3, #16
 80189f2:	d10c      	bne.n	8018a0e <_strtol_l.isra.0+0x5e>
 80189f4:	2c30      	cmp	r4, #48	; 0x30
 80189f6:	d10a      	bne.n	8018a0e <_strtol_l.isra.0+0x5e>
 80189f8:	f89e 4000 	ldrb.w	r4, [lr]
 80189fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018a00:	2c58      	cmp	r4, #88	; 0x58
 8018a02:	d14d      	bne.n	8018aa0 <_strtol_l.isra.0+0xf0>
 8018a04:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018a08:	2310      	movs	r3, #16
 8018a0a:	f10e 0e02 	add.w	lr, lr, #2
 8018a0e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8018a12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018a16:	2600      	movs	r6, #0
 8018a18:	fbbc f9f3 	udiv	r9, ip, r3
 8018a1c:	4635      	mov	r5, r6
 8018a1e:	fb03 ca19 	mls	sl, r3, r9, ip
 8018a22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018a26:	2f09      	cmp	r7, #9
 8018a28:	d818      	bhi.n	8018a5c <_strtol_l.isra.0+0xac>
 8018a2a:	463c      	mov	r4, r7
 8018a2c:	42a3      	cmp	r3, r4
 8018a2e:	dd24      	ble.n	8018a7a <_strtol_l.isra.0+0xca>
 8018a30:	2e00      	cmp	r6, #0
 8018a32:	db1f      	blt.n	8018a74 <_strtol_l.isra.0+0xc4>
 8018a34:	45a9      	cmp	r9, r5
 8018a36:	d31d      	bcc.n	8018a74 <_strtol_l.isra.0+0xc4>
 8018a38:	d101      	bne.n	8018a3e <_strtol_l.isra.0+0x8e>
 8018a3a:	45a2      	cmp	sl, r4
 8018a3c:	db1a      	blt.n	8018a74 <_strtol_l.isra.0+0xc4>
 8018a3e:	fb05 4503 	mla	r5, r5, r3, r4
 8018a42:	2601      	movs	r6, #1
 8018a44:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018a48:	e7eb      	b.n	8018a22 <_strtol_l.isra.0+0x72>
 8018a4a:	2c2b      	cmp	r4, #43	; 0x2b
 8018a4c:	bf08      	it	eq
 8018a4e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018a52:	46a8      	mov	r8, r5
 8018a54:	bf08      	it	eq
 8018a56:	f106 0e02 	addeq.w	lr, r6, #2
 8018a5a:	e7c7      	b.n	80189ec <_strtol_l.isra.0+0x3c>
 8018a5c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018a60:	2f19      	cmp	r7, #25
 8018a62:	d801      	bhi.n	8018a68 <_strtol_l.isra.0+0xb8>
 8018a64:	3c37      	subs	r4, #55	; 0x37
 8018a66:	e7e1      	b.n	8018a2c <_strtol_l.isra.0+0x7c>
 8018a68:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018a6c:	2f19      	cmp	r7, #25
 8018a6e:	d804      	bhi.n	8018a7a <_strtol_l.isra.0+0xca>
 8018a70:	3c57      	subs	r4, #87	; 0x57
 8018a72:	e7db      	b.n	8018a2c <_strtol_l.isra.0+0x7c>
 8018a74:	f04f 36ff 	mov.w	r6, #4294967295
 8018a78:	e7e4      	b.n	8018a44 <_strtol_l.isra.0+0x94>
 8018a7a:	2e00      	cmp	r6, #0
 8018a7c:	da05      	bge.n	8018a8a <_strtol_l.isra.0+0xda>
 8018a7e:	2322      	movs	r3, #34	; 0x22
 8018a80:	6003      	str	r3, [r0, #0]
 8018a82:	4665      	mov	r5, ip
 8018a84:	b942      	cbnz	r2, 8018a98 <_strtol_l.isra.0+0xe8>
 8018a86:	4628      	mov	r0, r5
 8018a88:	e79d      	b.n	80189c6 <_strtol_l.isra.0+0x16>
 8018a8a:	f1b8 0f00 	cmp.w	r8, #0
 8018a8e:	d000      	beq.n	8018a92 <_strtol_l.isra.0+0xe2>
 8018a90:	426d      	negs	r5, r5
 8018a92:	2a00      	cmp	r2, #0
 8018a94:	d0f7      	beq.n	8018a86 <_strtol_l.isra.0+0xd6>
 8018a96:	b10e      	cbz	r6, 8018a9c <_strtol_l.isra.0+0xec>
 8018a98:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018a9c:	6011      	str	r1, [r2, #0]
 8018a9e:	e7f2      	b.n	8018a86 <_strtol_l.isra.0+0xd6>
 8018aa0:	2430      	movs	r4, #48	; 0x30
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d1b3      	bne.n	8018a0e <_strtol_l.isra.0+0x5e>
 8018aa6:	2308      	movs	r3, #8
 8018aa8:	e7b1      	b.n	8018a0e <_strtol_l.isra.0+0x5e>
 8018aaa:	2c30      	cmp	r4, #48	; 0x30
 8018aac:	d0a4      	beq.n	80189f8 <_strtol_l.isra.0+0x48>
 8018aae:	230a      	movs	r3, #10
 8018ab0:	e7ad      	b.n	8018a0e <_strtol_l.isra.0+0x5e>
 8018ab2:	bf00      	nop
 8018ab4:	0802368d 	.word	0x0802368d

08018ab8 <_strtol_r>:
 8018ab8:	f7ff bf7a 	b.w	80189b0 <_strtol_l.isra.0>

08018abc <strtol>:
 8018abc:	4613      	mov	r3, r2
 8018abe:	460a      	mov	r2, r1
 8018ac0:	4601      	mov	r1, r0
 8018ac2:	4802      	ldr	r0, [pc, #8]	; (8018acc <strtol+0x10>)
 8018ac4:	6800      	ldr	r0, [r0, #0]
 8018ac6:	f7ff bf73 	b.w	80189b0 <_strtol_l.isra.0>
 8018aca:	bf00      	nop
 8018acc:	20000038 	.word	0x20000038

08018ad0 <__tzcalc_limits>:
 8018ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad4:	4680      	mov	r8, r0
 8018ad6:	f002 fe39 	bl	801b74c <__gettzinfo>
 8018ada:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8018ade:	4598      	cmp	r8, r3
 8018ae0:	f340 8098 	ble.w	8018c14 <__tzcalc_limits+0x144>
 8018ae4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8018ae8:	4443      	add	r3, r8
 8018aea:	109b      	asrs	r3, r3, #2
 8018aec:	f240 126d 	movw	r2, #365	; 0x16d
 8018af0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8018af4:	fb02 3505 	mla	r5, r2, r5, r3
 8018af8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8018afc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8018b00:	fb93 f3f2 	sdiv	r3, r3, r2
 8018b04:	441d      	add	r5, r3
 8018b06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8018b0a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8018b0e:	fb98 f7f3 	sdiv	r7, r8, r3
 8018b12:	fb03 8717 	mls	r7, r3, r7, r8
 8018b16:	4442      	add	r2, r8
 8018b18:	fab7 fc87 	clz	ip, r7
 8018b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8018b20:	f008 0303 	and.w	r3, r8, #3
 8018b24:	4415      	add	r5, r2
 8018b26:	2264      	movs	r2, #100	; 0x64
 8018b28:	f8c0 8004 	str.w	r8, [r0, #4]
 8018b2c:	fb98 f6f2 	sdiv	r6, r8, r2
 8018b30:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8018b34:	fb02 8616 	mls	r6, r2, r6, r8
 8018b38:	4604      	mov	r4, r0
 8018b3a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8018b3e:	9300      	str	r3, [sp, #0]
 8018b40:	f04f 0e07 	mov.w	lr, #7
 8018b44:	7a22      	ldrb	r2, [r4, #8]
 8018b46:	6963      	ldr	r3, [r4, #20]
 8018b48:	2a4a      	cmp	r2, #74	; 0x4a
 8018b4a:	d128      	bne.n	8018b9e <__tzcalc_limits+0xce>
 8018b4c:	9900      	ldr	r1, [sp, #0]
 8018b4e:	18ea      	adds	r2, r5, r3
 8018b50:	b901      	cbnz	r1, 8018b54 <__tzcalc_limits+0x84>
 8018b52:	b906      	cbnz	r6, 8018b56 <__tzcalc_limits+0x86>
 8018b54:	bb0f      	cbnz	r7, 8018b9a <__tzcalc_limits+0xca>
 8018b56:	2b3b      	cmp	r3, #59	; 0x3b
 8018b58:	bfd4      	ite	le
 8018b5a:	2300      	movle	r3, #0
 8018b5c:	2301      	movgt	r3, #1
 8018b5e:	4413      	add	r3, r2
 8018b60:	1e5a      	subs	r2, r3, #1
 8018b62:	69a3      	ldr	r3, [r4, #24]
 8018b64:	492c      	ldr	r1, [pc, #176]	; (8018c18 <__tzcalc_limits+0x148>)
 8018b66:	fb01 3202 	mla	r2, r1, r2, r3
 8018b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018b6c:	4413      	add	r3, r2
 8018b6e:	461a      	mov	r2, r3
 8018b70:	17db      	asrs	r3, r3, #31
 8018b72:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018b76:	3428      	adds	r4, #40	; 0x28
 8018b78:	45a3      	cmp	fp, r4
 8018b7a:	d1e3      	bne.n	8018b44 <__tzcalc_limits+0x74>
 8018b7c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8018b80:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8018b84:	4294      	cmp	r4, r2
 8018b86:	eb75 0303 	sbcs.w	r3, r5, r3
 8018b8a:	bfb4      	ite	lt
 8018b8c:	2301      	movlt	r3, #1
 8018b8e:	2300      	movge	r3, #0
 8018b90:	6003      	str	r3, [r0, #0]
 8018b92:	2001      	movs	r0, #1
 8018b94:	b003      	add	sp, #12
 8018b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	e7df      	b.n	8018b5e <__tzcalc_limits+0x8e>
 8018b9e:	2a44      	cmp	r2, #68	; 0x44
 8018ba0:	d101      	bne.n	8018ba6 <__tzcalc_limits+0xd6>
 8018ba2:	18ea      	adds	r2, r5, r3
 8018ba4:	e7dd      	b.n	8018b62 <__tzcalc_limits+0x92>
 8018ba6:	9a00      	ldr	r2, [sp, #0]
 8018ba8:	bb72      	cbnz	r2, 8018c08 <__tzcalc_limits+0x138>
 8018baa:	2e00      	cmp	r6, #0
 8018bac:	bf0c      	ite	eq
 8018bae:	46e0      	moveq	r8, ip
 8018bb0:	f04f 0801 	movne.w	r8, #1
 8018bb4:	4919      	ldr	r1, [pc, #100]	; (8018c1c <__tzcalc_limits+0x14c>)
 8018bb6:	68e2      	ldr	r2, [r4, #12]
 8018bb8:	9201      	str	r2, [sp, #4]
 8018bba:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8018bbe:	fb0a 1808 	mla	r8, sl, r8, r1
 8018bc2:	462a      	mov	r2, r5
 8018bc4:	f04f 0900 	mov.w	r9, #0
 8018bc8:	f1a8 0804 	sub.w	r8, r8, #4
 8018bcc:	9901      	ldr	r1, [sp, #4]
 8018bce:	f109 0901 	add.w	r9, r9, #1
 8018bd2:	4549      	cmp	r1, r9
 8018bd4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8018bd8:	dc18      	bgt.n	8018c0c <__tzcalc_limits+0x13c>
 8018bda:	f102 0804 	add.w	r8, r2, #4
 8018bde:	fb98 f9fe 	sdiv	r9, r8, lr
 8018be2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8018be6:	eba8 0909 	sub.w	r9, r8, r9
 8018bea:	ebb3 0909 	subs.w	r9, r3, r9
 8018bee:	6923      	ldr	r3, [r4, #16]
 8018bf0:	f103 33ff 	add.w	r3, r3, #4294967295
 8018bf4:	bf48      	it	mi
 8018bf6:	f109 0907 	addmi.w	r9, r9, #7
 8018bfa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8018bfe:	444b      	add	r3, r9
 8018c00:	4553      	cmp	r3, sl
 8018c02:	da05      	bge.n	8018c10 <__tzcalc_limits+0x140>
 8018c04:	441a      	add	r2, r3
 8018c06:	e7ac      	b.n	8018b62 <__tzcalc_limits+0x92>
 8018c08:	46e0      	mov	r8, ip
 8018c0a:	e7d3      	b.n	8018bb4 <__tzcalc_limits+0xe4>
 8018c0c:	4452      	add	r2, sl
 8018c0e:	e7dd      	b.n	8018bcc <__tzcalc_limits+0xfc>
 8018c10:	3b07      	subs	r3, #7
 8018c12:	e7f5      	b.n	8018c00 <__tzcalc_limits+0x130>
 8018c14:	2000      	movs	r0, #0
 8018c16:	e7bd      	b.n	8018b94 <__tzcalc_limits+0xc4>
 8018c18:	00015180 	.word	0x00015180
 8018c1c:	08023904 	.word	0x08023904

08018c20 <__tz_lock>:
 8018c20:	4801      	ldr	r0, [pc, #4]	; (8018c28 <__tz_lock+0x8>)
 8018c22:	f002 bd9d 	b.w	801b760 <__retarget_lock_acquire>
 8018c26:	bf00      	nop
 8018c28:	2000b6bf 	.word	0x2000b6bf

08018c2c <__tz_unlock>:
 8018c2c:	4801      	ldr	r0, [pc, #4]	; (8018c34 <__tz_unlock+0x8>)
 8018c2e:	f002 bd99 	b.w	801b764 <__retarget_lock_release>
 8018c32:	bf00      	nop
 8018c34:	2000b6bf 	.word	0x2000b6bf

08018c38 <_tzset_unlocked>:
 8018c38:	4b01      	ldr	r3, [pc, #4]	; (8018c40 <_tzset_unlocked+0x8>)
 8018c3a:	6818      	ldr	r0, [r3, #0]
 8018c3c:	f000 b802 	b.w	8018c44 <_tzset_unlocked_r>
 8018c40:	20000038 	.word	0x20000038

08018c44 <_tzset_unlocked_r>:
 8018c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c48:	b08d      	sub	sp, #52	; 0x34
 8018c4a:	4607      	mov	r7, r0
 8018c4c:	f002 fd7e 	bl	801b74c <__gettzinfo>
 8018c50:	49ae      	ldr	r1, [pc, #696]	; (8018f0c <_tzset_unlocked_r+0x2c8>)
 8018c52:	4eaf      	ldr	r6, [pc, #700]	; (8018f10 <_tzset_unlocked_r+0x2cc>)
 8018c54:	4605      	mov	r5, r0
 8018c56:	4638      	mov	r0, r7
 8018c58:	f002 fd70 	bl	801b73c <_getenv_r>
 8018c5c:	4604      	mov	r4, r0
 8018c5e:	b970      	cbnz	r0, 8018c7e <_tzset_unlocked_r+0x3a>
 8018c60:	4bac      	ldr	r3, [pc, #688]	; (8018f14 <_tzset_unlocked_r+0x2d0>)
 8018c62:	4aad      	ldr	r2, [pc, #692]	; (8018f18 <_tzset_unlocked_r+0x2d4>)
 8018c64:	6018      	str	r0, [r3, #0]
 8018c66:	4bad      	ldr	r3, [pc, #692]	; (8018f1c <_tzset_unlocked_r+0x2d8>)
 8018c68:	6018      	str	r0, [r3, #0]
 8018c6a:	4bad      	ldr	r3, [pc, #692]	; (8018f20 <_tzset_unlocked_r+0x2dc>)
 8018c6c:	6830      	ldr	r0, [r6, #0]
 8018c6e:	e9c3 2200 	strd	r2, r2, [r3]
 8018c72:	f002 fded 	bl	801b850 <free>
 8018c76:	6034      	str	r4, [r6, #0]
 8018c78:	b00d      	add	sp, #52	; 0x34
 8018c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c7e:	6831      	ldr	r1, [r6, #0]
 8018c80:	2900      	cmp	r1, #0
 8018c82:	d15f      	bne.n	8018d44 <_tzset_unlocked_r+0x100>
 8018c84:	6830      	ldr	r0, [r6, #0]
 8018c86:	f002 fde3 	bl	801b850 <free>
 8018c8a:	4620      	mov	r0, r4
 8018c8c:	f7e7 fac0 	bl	8000210 <strlen>
 8018c90:	1c41      	adds	r1, r0, #1
 8018c92:	4638      	mov	r0, r7
 8018c94:	f002 fde4 	bl	801b860 <_malloc_r>
 8018c98:	6030      	str	r0, [r6, #0]
 8018c9a:	2800      	cmp	r0, #0
 8018c9c:	d157      	bne.n	8018d4e <_tzset_unlocked_r+0x10a>
 8018c9e:	7823      	ldrb	r3, [r4, #0]
 8018ca0:	4aa0      	ldr	r2, [pc, #640]	; (8018f24 <_tzset_unlocked_r+0x2e0>)
 8018ca2:	49a1      	ldr	r1, [pc, #644]	; (8018f28 <_tzset_unlocked_r+0x2e4>)
 8018ca4:	2b3a      	cmp	r3, #58	; 0x3a
 8018ca6:	bf08      	it	eq
 8018ca8:	3401      	addeq	r4, #1
 8018caa:	ae0a      	add	r6, sp, #40	; 0x28
 8018cac:	4633      	mov	r3, r6
 8018cae:	4620      	mov	r0, r4
 8018cb0:	f003 fb9c 	bl	801c3ec <siscanf>
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	dddf      	ble.n	8018c78 <_tzset_unlocked_r+0x34>
 8018cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018cba:	18e7      	adds	r7, r4, r3
 8018cbc:	5ce3      	ldrb	r3, [r4, r3]
 8018cbe:	2b2d      	cmp	r3, #45	; 0x2d
 8018cc0:	d149      	bne.n	8018d56 <_tzset_unlocked_r+0x112>
 8018cc2:	3701      	adds	r7, #1
 8018cc4:	f04f 34ff 	mov.w	r4, #4294967295
 8018cc8:	f10d 0a20 	add.w	sl, sp, #32
 8018ccc:	f10d 0b1e 	add.w	fp, sp, #30
 8018cd0:	f04f 0800 	mov.w	r8, #0
 8018cd4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8018cd8:	4994      	ldr	r1, [pc, #592]	; (8018f2c <_tzset_unlocked_r+0x2e8>)
 8018cda:	9603      	str	r6, [sp, #12]
 8018cdc:	f8cd b000 	str.w	fp, [sp]
 8018ce0:	4633      	mov	r3, r6
 8018ce2:	aa07      	add	r2, sp, #28
 8018ce4:	4638      	mov	r0, r7
 8018ce6:	f8ad 801e 	strh.w	r8, [sp, #30]
 8018cea:	f8ad 8020 	strh.w	r8, [sp, #32]
 8018cee:	f003 fb7d 	bl	801c3ec <siscanf>
 8018cf2:	4540      	cmp	r0, r8
 8018cf4:	ddc0      	ble.n	8018c78 <_tzset_unlocked_r+0x34>
 8018cf6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018cfa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018cfe:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8018f38 <_tzset_unlocked_r+0x2f4>
 8018d02:	213c      	movs	r1, #60	; 0x3c
 8018d04:	fb01 2203 	mla	r2, r1, r3, r2
 8018d08:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8018d0c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8018d10:	fb01 2303 	mla	r3, r1, r3, r2
 8018d14:	435c      	muls	r4, r3
 8018d16:	62ac      	str	r4, [r5, #40]	; 0x28
 8018d18:	4c81      	ldr	r4, [pc, #516]	; (8018f20 <_tzset_unlocked_r+0x2dc>)
 8018d1a:	4b82      	ldr	r3, [pc, #520]	; (8018f24 <_tzset_unlocked_r+0x2e0>)
 8018d1c:	6023      	str	r3, [r4, #0]
 8018d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d20:	4981      	ldr	r1, [pc, #516]	; (8018f28 <_tzset_unlocked_r+0x2e4>)
 8018d22:	441f      	add	r7, r3
 8018d24:	464a      	mov	r2, r9
 8018d26:	4633      	mov	r3, r6
 8018d28:	4638      	mov	r0, r7
 8018d2a:	f003 fb5f 	bl	801c3ec <siscanf>
 8018d2e:	4540      	cmp	r0, r8
 8018d30:	dc16      	bgt.n	8018d60 <_tzset_unlocked_r+0x11c>
 8018d32:	6823      	ldr	r3, [r4, #0]
 8018d34:	6063      	str	r3, [r4, #4]
 8018d36:	4b77      	ldr	r3, [pc, #476]	; (8018f14 <_tzset_unlocked_r+0x2d0>)
 8018d38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8018d3a:	601a      	str	r2, [r3, #0]
 8018d3c:	4b77      	ldr	r3, [pc, #476]	; (8018f1c <_tzset_unlocked_r+0x2d8>)
 8018d3e:	f8c3 8000 	str.w	r8, [r3]
 8018d42:	e799      	b.n	8018c78 <_tzset_unlocked_r+0x34>
 8018d44:	f7e7 fabc 	bl	80002c0 <strcmp>
 8018d48:	2800      	cmp	r0, #0
 8018d4a:	d19b      	bne.n	8018c84 <_tzset_unlocked_r+0x40>
 8018d4c:	e794      	b.n	8018c78 <_tzset_unlocked_r+0x34>
 8018d4e:	4621      	mov	r1, r4
 8018d50:	f003 fbbd 	bl	801c4ce <strcpy>
 8018d54:	e7a3      	b.n	8018c9e <_tzset_unlocked_r+0x5a>
 8018d56:	2b2b      	cmp	r3, #43	; 0x2b
 8018d58:	bf08      	it	eq
 8018d5a:	3701      	addeq	r7, #1
 8018d5c:	2401      	movs	r4, #1
 8018d5e:	e7b3      	b.n	8018cc8 <_tzset_unlocked_r+0x84>
 8018d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d62:	f8c4 9004 	str.w	r9, [r4, #4]
 8018d66:	18fc      	adds	r4, r7, r3
 8018d68:	5cfb      	ldrb	r3, [r7, r3]
 8018d6a:	2b2d      	cmp	r3, #45	; 0x2d
 8018d6c:	f040 808b 	bne.w	8018e86 <_tzset_unlocked_r+0x242>
 8018d70:	3401      	adds	r4, #1
 8018d72:	f04f 37ff 	mov.w	r7, #4294967295
 8018d76:	2300      	movs	r3, #0
 8018d78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018d7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018d80:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018d84:	930a      	str	r3, [sp, #40]	; 0x28
 8018d86:	e9cd a602 	strd	sl, r6, [sp, #8]
 8018d8a:	e9cd b600 	strd	fp, r6, [sp]
 8018d8e:	4967      	ldr	r1, [pc, #412]	; (8018f2c <_tzset_unlocked_r+0x2e8>)
 8018d90:	4633      	mov	r3, r6
 8018d92:	aa07      	add	r2, sp, #28
 8018d94:	4620      	mov	r0, r4
 8018d96:	f003 fb29 	bl	801c3ec <siscanf>
 8018d9a:	2800      	cmp	r0, #0
 8018d9c:	dc78      	bgt.n	8018e90 <_tzset_unlocked_r+0x24c>
 8018d9e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8018da0:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8018da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018da6:	652f      	str	r7, [r5, #80]	; 0x50
 8018da8:	441c      	add	r4, r3
 8018daa:	462f      	mov	r7, r5
 8018dac:	f04f 0900 	mov.w	r9, #0
 8018db0:	7823      	ldrb	r3, [r4, #0]
 8018db2:	2b2c      	cmp	r3, #44	; 0x2c
 8018db4:	bf08      	it	eq
 8018db6:	3401      	addeq	r4, #1
 8018db8:	f894 8000 	ldrb.w	r8, [r4]
 8018dbc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8018dc0:	d178      	bne.n	8018eb4 <_tzset_unlocked_r+0x270>
 8018dc2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8018dc6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8018dca:	ab09      	add	r3, sp, #36	; 0x24
 8018dcc:	9300      	str	r3, [sp, #0]
 8018dce:	4958      	ldr	r1, [pc, #352]	; (8018f30 <_tzset_unlocked_r+0x2ec>)
 8018dd0:	9603      	str	r6, [sp, #12]
 8018dd2:	4633      	mov	r3, r6
 8018dd4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8018dd8:	4620      	mov	r0, r4
 8018dda:	f003 fb07 	bl	801c3ec <siscanf>
 8018dde:	2803      	cmp	r0, #3
 8018de0:	f47f af4a 	bne.w	8018c78 <_tzset_unlocked_r+0x34>
 8018de4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018de8:	1e4b      	subs	r3, r1, #1
 8018dea:	2b0b      	cmp	r3, #11
 8018dec:	f63f af44 	bhi.w	8018c78 <_tzset_unlocked_r+0x34>
 8018df0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018df4:	1e53      	subs	r3, r2, #1
 8018df6:	2b04      	cmp	r3, #4
 8018df8:	f63f af3e 	bhi.w	8018c78 <_tzset_unlocked_r+0x34>
 8018dfc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018e00:	2b06      	cmp	r3, #6
 8018e02:	f63f af39 	bhi.w	8018c78 <_tzset_unlocked_r+0x34>
 8018e06:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8018e0a:	f887 8008 	strb.w	r8, [r7, #8]
 8018e0e:	617b      	str	r3, [r7, #20]
 8018e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e12:	eb04 0803 	add.w	r8, r4, r3
 8018e16:	2302      	movs	r3, #2
 8018e18:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018e22:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018e26:	930a      	str	r3, [sp, #40]	; 0x28
 8018e28:	f898 3000 	ldrb.w	r3, [r8]
 8018e2c:	2b2f      	cmp	r3, #47	; 0x2f
 8018e2e:	d109      	bne.n	8018e44 <_tzset_unlocked_r+0x200>
 8018e30:	e9cd a602 	strd	sl, r6, [sp, #8]
 8018e34:	e9cd b600 	strd	fp, r6, [sp]
 8018e38:	493e      	ldr	r1, [pc, #248]	; (8018f34 <_tzset_unlocked_r+0x2f0>)
 8018e3a:	4633      	mov	r3, r6
 8018e3c:	aa07      	add	r2, sp, #28
 8018e3e:	4640      	mov	r0, r8
 8018e40:	f003 fad4 	bl	801c3ec <siscanf>
 8018e44:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018e48:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018e4c:	213c      	movs	r1, #60	; 0x3c
 8018e4e:	fb01 2203 	mla	r2, r1, r3, r2
 8018e52:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8018e56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8018e5a:	fb01 2303 	mla	r3, r1, r3, r2
 8018e5e:	61bb      	str	r3, [r7, #24]
 8018e60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018e62:	3728      	adds	r7, #40	; 0x28
 8018e64:	4444      	add	r4, r8
 8018e66:	f1b9 0f00 	cmp.w	r9, #0
 8018e6a:	d020      	beq.n	8018eae <_tzset_unlocked_r+0x26a>
 8018e6c:	6868      	ldr	r0, [r5, #4]
 8018e6e:	f7ff fe2f 	bl	8018ad0 <__tzcalc_limits>
 8018e72:	4b28      	ldr	r3, [pc, #160]	; (8018f14 <_tzset_unlocked_r+0x2d0>)
 8018e74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8018e76:	601a      	str	r2, [r3, #0]
 8018e78:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8018e7a:	1a9b      	subs	r3, r3, r2
 8018e7c:	4a27      	ldr	r2, [pc, #156]	; (8018f1c <_tzset_unlocked_r+0x2d8>)
 8018e7e:	bf18      	it	ne
 8018e80:	2301      	movne	r3, #1
 8018e82:	6013      	str	r3, [r2, #0]
 8018e84:	e6f8      	b.n	8018c78 <_tzset_unlocked_r+0x34>
 8018e86:	2b2b      	cmp	r3, #43	; 0x2b
 8018e88:	bf08      	it	eq
 8018e8a:	3401      	addeq	r4, #1
 8018e8c:	2701      	movs	r7, #1
 8018e8e:	e772      	b.n	8018d76 <_tzset_unlocked_r+0x132>
 8018e90:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018e94:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018e98:	213c      	movs	r1, #60	; 0x3c
 8018e9a:	fb01 2203 	mla	r2, r1, r3, r2
 8018e9e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8018ea2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8018ea6:	fb01 2303 	mla	r3, r1, r3, r2
 8018eaa:	435f      	muls	r7, r3
 8018eac:	e77a      	b.n	8018da4 <_tzset_unlocked_r+0x160>
 8018eae:	f04f 0901 	mov.w	r9, #1
 8018eb2:	e77d      	b.n	8018db0 <_tzset_unlocked_r+0x16c>
 8018eb4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8018eb8:	bf06      	itte	eq
 8018eba:	3401      	addeq	r4, #1
 8018ebc:	4643      	moveq	r3, r8
 8018ebe:	2344      	movne	r3, #68	; 0x44
 8018ec0:	220a      	movs	r2, #10
 8018ec2:	a90b      	add	r1, sp, #44	; 0x2c
 8018ec4:	4620      	mov	r0, r4
 8018ec6:	9305      	str	r3, [sp, #20]
 8018ec8:	f003 fb9a 	bl	801c600 <strtoul>
 8018ecc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8018ed0:	9b05      	ldr	r3, [sp, #20]
 8018ed2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8018ed6:	45a0      	cmp	r8, r4
 8018ed8:	d114      	bne.n	8018f04 <_tzset_unlocked_r+0x2c0>
 8018eda:	234d      	movs	r3, #77	; 0x4d
 8018edc:	f1b9 0f00 	cmp.w	r9, #0
 8018ee0:	d107      	bne.n	8018ef2 <_tzset_unlocked_r+0x2ae>
 8018ee2:	722b      	strb	r3, [r5, #8]
 8018ee4:	2103      	movs	r1, #3
 8018ee6:	2302      	movs	r3, #2
 8018ee8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8018eec:	f8c5 9014 	str.w	r9, [r5, #20]
 8018ef0:	e791      	b.n	8018e16 <_tzset_unlocked_r+0x1d2>
 8018ef2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8018ef6:	220b      	movs	r2, #11
 8018ef8:	2301      	movs	r3, #1
 8018efa:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8018efe:	2300      	movs	r3, #0
 8018f00:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018f02:	e788      	b.n	8018e16 <_tzset_unlocked_r+0x1d2>
 8018f04:	b280      	uxth	r0, r0
 8018f06:	723b      	strb	r3, [r7, #8]
 8018f08:	6178      	str	r0, [r7, #20]
 8018f0a:	e784      	b.n	8018e16 <_tzset_unlocked_r+0x1d2>
 8018f0c:	080237f4 	.word	0x080237f4
 8018f10:	20004c00 	.word	0x20004c00
 8018f14:	20004c08 	.word	0x20004c08
 8018f18:	080237f7 	.word	0x080237f7
 8018f1c:	20004c04 	.word	0x20004c04
 8018f20:	20000468 	.word	0x20000468
 8018f24:	20004bf5 	.word	0x20004bf5
 8018f28:	080237fb 	.word	0x080237fb
 8018f2c:	0802381e 	.word	0x0802381e
 8018f30:	0802380a 	.word	0x0802380a
 8018f34:	0802381d 	.word	0x0802381d
 8018f38:	20004bea 	.word	0x20004bea
 8018f3c:	00000000 	.word	0x00000000

08018f40 <_vfprintf_r>:
 8018f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f44:	ed2d 8b04 	vpush	{d8-d9}
 8018f48:	b0cf      	sub	sp, #316	; 0x13c
 8018f4a:	4689      	mov	r9, r1
 8018f4c:	9203      	str	r2, [sp, #12]
 8018f4e:	461c      	mov	r4, r3
 8018f50:	461e      	mov	r6, r3
 8018f52:	4682      	mov	sl, r0
 8018f54:	f002 fbfe 	bl	801b754 <_localeconv_r>
 8018f58:	6803      	ldr	r3, [r0, #0]
 8018f5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f7e7 f957 	bl	8000210 <strlen>
 8018f62:	900e      	str	r0, [sp, #56]	; 0x38
 8018f64:	f1ba 0f00 	cmp.w	sl, #0
 8018f68:	d005      	beq.n	8018f76 <_vfprintf_r+0x36>
 8018f6a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8018f6e:	b913      	cbnz	r3, 8018f76 <_vfprintf_r+0x36>
 8018f70:	4650      	mov	r0, sl
 8018f72:	f002 fa39 	bl	801b3e8 <__sinit>
 8018f76:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8018f7a:	07d8      	lsls	r0, r3, #31
 8018f7c:	d407      	bmi.n	8018f8e <_vfprintf_r+0x4e>
 8018f7e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8018f82:	0599      	lsls	r1, r3, #22
 8018f84:	d403      	bmi.n	8018f8e <_vfprintf_r+0x4e>
 8018f86:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8018f8a:	f002 fbea 	bl	801b762 <__retarget_lock_acquire_recursive>
 8018f8e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8018f92:	049a      	lsls	r2, r3, #18
 8018f94:	d409      	bmi.n	8018faa <_vfprintf_r+0x6a>
 8018f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018f9a:	f8a9 300c 	strh.w	r3, [r9, #12]
 8018f9e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8018fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018fa6:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8018faa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8018fae:	071f      	lsls	r7, r3, #28
 8018fb0:	d502      	bpl.n	8018fb8 <_vfprintf_r+0x78>
 8018fb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018fb6:	b9d3      	cbnz	r3, 8018fee <_vfprintf_r+0xae>
 8018fb8:	4649      	mov	r1, r9
 8018fba:	4650      	mov	r0, sl
 8018fbc:	f001 fa36 	bl	801a42c <__swsetup_r>
 8018fc0:	b1a8      	cbz	r0, 8018fee <_vfprintf_r+0xae>
 8018fc2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8018fc6:	07dd      	lsls	r5, r3, #31
 8018fc8:	d508      	bpl.n	8018fdc <_vfprintf_r+0x9c>
 8018fca:	f04f 33ff 	mov.w	r3, #4294967295
 8018fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8018fd0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018fd2:	b04f      	add	sp, #316	; 0x13c
 8018fd4:	ecbd 8b04 	vpop	{d8-d9}
 8018fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fdc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8018fe0:	059c      	lsls	r4, r3, #22
 8018fe2:	d4f2      	bmi.n	8018fca <_vfprintf_r+0x8a>
 8018fe4:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8018fe8:	f002 fbbd 	bl	801b766 <__retarget_lock_release_recursive>
 8018fec:	e7ed      	b.n	8018fca <_vfprintf_r+0x8a>
 8018fee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8018ff2:	f003 021a 	and.w	r2, r3, #26
 8018ff6:	2a0a      	cmp	r2, #10
 8018ff8:	d115      	bne.n	8019026 <_vfprintf_r+0xe6>
 8018ffa:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8018ffe:	2a00      	cmp	r2, #0
 8019000:	db11      	blt.n	8019026 <_vfprintf_r+0xe6>
 8019002:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8019006:	07d0      	lsls	r0, r2, #31
 8019008:	d405      	bmi.n	8019016 <_vfprintf_r+0xd6>
 801900a:	0599      	lsls	r1, r3, #22
 801900c:	d403      	bmi.n	8019016 <_vfprintf_r+0xd6>
 801900e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8019012:	f002 fba8 	bl	801b766 <__retarget_lock_release_recursive>
 8019016:	9a03      	ldr	r2, [sp, #12]
 8019018:	4623      	mov	r3, r4
 801901a:	4649      	mov	r1, r9
 801901c:	4650      	mov	r0, sl
 801901e:	f001 f9c5 	bl	801a3ac <__sbprintf>
 8019022:	900f      	str	r0, [sp, #60]	; 0x3c
 8019024:	e7d4      	b.n	8018fd0 <_vfprintf_r+0x90>
 8019026:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8019290 <_vfprintf_r+0x350>
 801902a:	2500      	movs	r5, #0
 801902c:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8019030:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8019034:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8019038:	ac25      	add	r4, sp, #148	; 0x94
 801903a:	9422      	str	r4, [sp, #136]	; 0x88
 801903c:	9505      	str	r5, [sp, #20]
 801903e:	950a      	str	r5, [sp, #40]	; 0x28
 8019040:	9512      	str	r5, [sp, #72]	; 0x48
 8019042:	9514      	str	r5, [sp, #80]	; 0x50
 8019044:	950f      	str	r5, [sp, #60]	; 0x3c
 8019046:	9b03      	ldr	r3, [sp, #12]
 8019048:	461d      	mov	r5, r3
 801904a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801904e:	b10a      	cbz	r2, 8019054 <_vfprintf_r+0x114>
 8019050:	2a25      	cmp	r2, #37	; 0x25
 8019052:	d1f9      	bne.n	8019048 <_vfprintf_r+0x108>
 8019054:	9b03      	ldr	r3, [sp, #12]
 8019056:	1aef      	subs	r7, r5, r3
 8019058:	d00d      	beq.n	8019076 <_vfprintf_r+0x136>
 801905a:	e9c4 3700 	strd	r3, r7, [r4]
 801905e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019060:	443b      	add	r3, r7
 8019062:	9324      	str	r3, [sp, #144]	; 0x90
 8019064:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019066:	3301      	adds	r3, #1
 8019068:	2b07      	cmp	r3, #7
 801906a:	9323      	str	r3, [sp, #140]	; 0x8c
 801906c:	dc79      	bgt.n	8019162 <_vfprintf_r+0x222>
 801906e:	3408      	adds	r4, #8
 8019070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019072:	443b      	add	r3, r7
 8019074:	930f      	str	r3, [sp, #60]	; 0x3c
 8019076:	782b      	ldrb	r3, [r5, #0]
 8019078:	2b00      	cmp	r3, #0
 801907a:	f001 8156 	beq.w	801a32a <_vfprintf_r+0x13ea>
 801907e:	2300      	movs	r3, #0
 8019080:	3501      	adds	r5, #1
 8019082:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8019086:	f04f 38ff 	mov.w	r8, #4294967295
 801908a:	9310      	str	r3, [sp, #64]	; 0x40
 801908c:	469b      	mov	fp, r3
 801908e:	270a      	movs	r7, #10
 8019090:	212b      	movs	r1, #43	; 0x2b
 8019092:	462a      	mov	r2, r5
 8019094:	f812 3b01 	ldrb.w	r3, [r2], #1
 8019098:	9307      	str	r3, [sp, #28]
 801909a:	4613      	mov	r3, r2
 801909c:	930b      	str	r3, [sp, #44]	; 0x2c
 801909e:	9b07      	ldr	r3, [sp, #28]
 80190a0:	3b20      	subs	r3, #32
 80190a2:	2b5a      	cmp	r3, #90	; 0x5a
 80190a4:	f200 85c0 	bhi.w	8019c28 <_vfprintf_r+0xce8>
 80190a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80190ac:	05be007e 	.word	0x05be007e
 80190b0:	008605be 	.word	0x008605be
 80190b4:	05be05be 	.word	0x05be05be
 80190b8:	006505be 	.word	0x006505be
 80190bc:	05be05be 	.word	0x05be05be
 80190c0:	00930089 	.word	0x00930089
 80190c4:	009005be 	.word	0x009005be
 80190c8:	05be0096 	.word	0x05be0096
 80190cc:	00b200af 	.word	0x00b200af
 80190d0:	00b200b2 	.word	0x00b200b2
 80190d4:	00b200b2 	.word	0x00b200b2
 80190d8:	00b200b2 	.word	0x00b200b2
 80190dc:	00b200b2 	.word	0x00b200b2
 80190e0:	05be05be 	.word	0x05be05be
 80190e4:	05be05be 	.word	0x05be05be
 80190e8:	05be05be 	.word	0x05be05be
 80190ec:	012105be 	.word	0x012105be
 80190f0:	00df05be 	.word	0x00df05be
 80190f4:	012100f6 	.word	0x012100f6
 80190f8:	01210121 	.word	0x01210121
 80190fc:	05be05be 	.word	0x05be05be
 8019100:	05be05be 	.word	0x05be05be
 8019104:	05be00c2 	.word	0x05be00c2
 8019108:	049005be 	.word	0x049005be
 801910c:	05be05be 	.word	0x05be05be
 8019110:	04d705be 	.word	0x04d705be
 8019114:	04fb05be 	.word	0x04fb05be
 8019118:	05be05be 	.word	0x05be05be
 801911c:	05be051a 	.word	0x05be051a
 8019120:	05be05be 	.word	0x05be05be
 8019124:	05be05be 	.word	0x05be05be
 8019128:	05be05be 	.word	0x05be05be
 801912c:	012105be 	.word	0x012105be
 8019130:	00df05be 	.word	0x00df05be
 8019134:	012100f8 	.word	0x012100f8
 8019138:	01210121 	.word	0x01210121
 801913c:	00f800c5 	.word	0x00f800c5
 8019140:	05be00d9 	.word	0x05be00d9
 8019144:	05be00d2 	.word	0x05be00d2
 8019148:	0492046d 	.word	0x0492046d
 801914c:	00d904c6 	.word	0x00d904c6
 8019150:	04d705be 	.word	0x04d705be
 8019154:	04fd007c 	.word	0x04fd007c
 8019158:	05be05be 	.word	0x05be05be
 801915c:	05be0537 	.word	0x05be0537
 8019160:	007c      	.short	0x007c
 8019162:	aa22      	add	r2, sp, #136	; 0x88
 8019164:	4649      	mov	r1, r9
 8019166:	4650      	mov	r0, sl
 8019168:	f004 fad1 	bl	801d70e <__sprint_r>
 801916c:	2800      	cmp	r0, #0
 801916e:	f040 8130 	bne.w	80193d2 <_vfprintf_r+0x492>
 8019172:	ac25      	add	r4, sp, #148	; 0x94
 8019174:	e77c      	b.n	8019070 <_vfprintf_r+0x130>
 8019176:	4650      	mov	r0, sl
 8019178:	f002 faec 	bl	801b754 <_localeconv_r>
 801917c:	6843      	ldr	r3, [r0, #4]
 801917e:	9314      	str	r3, [sp, #80]	; 0x50
 8019180:	4618      	mov	r0, r3
 8019182:	f7e7 f845 	bl	8000210 <strlen>
 8019186:	9012      	str	r0, [sp, #72]	; 0x48
 8019188:	4650      	mov	r0, sl
 801918a:	f002 fae3 	bl	801b754 <_localeconv_r>
 801918e:	6883      	ldr	r3, [r0, #8]
 8019190:	930a      	str	r3, [sp, #40]	; 0x28
 8019192:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019194:	212b      	movs	r1, #43	; 0x2b
 8019196:	b12b      	cbz	r3, 80191a4 <_vfprintf_r+0x264>
 8019198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801919a:	b11b      	cbz	r3, 80191a4 <_vfprintf_r+0x264>
 801919c:	781b      	ldrb	r3, [r3, #0]
 801919e:	b10b      	cbz	r3, 80191a4 <_vfprintf_r+0x264>
 80191a0:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80191a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80191a6:	e774      	b.n	8019092 <_vfprintf_r+0x152>
 80191a8:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d1f9      	bne.n	80191a4 <_vfprintf_r+0x264>
 80191b0:	2320      	movs	r3, #32
 80191b2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80191b6:	e7f5      	b.n	80191a4 <_vfprintf_r+0x264>
 80191b8:	f04b 0b01 	orr.w	fp, fp, #1
 80191bc:	e7f2      	b.n	80191a4 <_vfprintf_r+0x264>
 80191be:	f856 3b04 	ldr.w	r3, [r6], #4
 80191c2:	9310      	str	r3, [sp, #64]	; 0x40
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	daed      	bge.n	80191a4 <_vfprintf_r+0x264>
 80191c8:	425b      	negs	r3, r3
 80191ca:	9310      	str	r3, [sp, #64]	; 0x40
 80191cc:	f04b 0b04 	orr.w	fp, fp, #4
 80191d0:	e7e8      	b.n	80191a4 <_vfprintf_r+0x264>
 80191d2:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80191d6:	e7e5      	b.n	80191a4 <_vfprintf_r+0x264>
 80191d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191de:	9207      	str	r2, [sp, #28]
 80191e0:	2a2a      	cmp	r2, #42	; 0x2a
 80191e2:	d10f      	bne.n	8019204 <_vfprintf_r+0x2c4>
 80191e4:	f856 0b04 	ldr.w	r0, [r6], #4
 80191e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80191ea:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 80191ee:	e7d9      	b.n	80191a4 <_vfprintf_r+0x264>
 80191f0:	fb07 2808 	mla	r8, r7, r8, r2
 80191f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191f8:	9207      	str	r2, [sp, #28]
 80191fa:	9a07      	ldr	r2, [sp, #28]
 80191fc:	3a30      	subs	r2, #48	; 0x30
 80191fe:	2a09      	cmp	r2, #9
 8019200:	d9f6      	bls.n	80191f0 <_vfprintf_r+0x2b0>
 8019202:	e74b      	b.n	801909c <_vfprintf_r+0x15c>
 8019204:	f04f 0800 	mov.w	r8, #0
 8019208:	e7f7      	b.n	80191fa <_vfprintf_r+0x2ba>
 801920a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801920e:	e7c9      	b.n	80191a4 <_vfprintf_r+0x264>
 8019210:	2200      	movs	r2, #0
 8019212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019214:	9210      	str	r2, [sp, #64]	; 0x40
 8019216:	9a07      	ldr	r2, [sp, #28]
 8019218:	9810      	ldr	r0, [sp, #64]	; 0x40
 801921a:	3a30      	subs	r2, #48	; 0x30
 801921c:	fb07 2200 	mla	r2, r7, r0, r2
 8019220:	9210      	str	r2, [sp, #64]	; 0x40
 8019222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019226:	9207      	str	r2, [sp, #28]
 8019228:	3a30      	subs	r2, #48	; 0x30
 801922a:	2a09      	cmp	r2, #9
 801922c:	d9f3      	bls.n	8019216 <_vfprintf_r+0x2d6>
 801922e:	e735      	b.n	801909c <_vfprintf_r+0x15c>
 8019230:	f04b 0b08 	orr.w	fp, fp, #8
 8019234:	e7b6      	b.n	80191a4 <_vfprintf_r+0x264>
 8019236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019238:	781b      	ldrb	r3, [r3, #0]
 801923a:	2b68      	cmp	r3, #104	; 0x68
 801923c:	bf01      	itttt	eq
 801923e:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8019240:	3301      	addeq	r3, #1
 8019242:	930b      	streq	r3, [sp, #44]	; 0x2c
 8019244:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8019248:	bf18      	it	ne
 801924a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801924e:	e7a9      	b.n	80191a4 <_vfprintf_r+0x264>
 8019250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	2b6c      	cmp	r3, #108	; 0x6c
 8019256:	d105      	bne.n	8019264 <_vfprintf_r+0x324>
 8019258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801925a:	3301      	adds	r3, #1
 801925c:	930b      	str	r3, [sp, #44]	; 0x2c
 801925e:	f04b 0b20 	orr.w	fp, fp, #32
 8019262:	e79f      	b.n	80191a4 <_vfprintf_r+0x264>
 8019264:	f04b 0b10 	orr.w	fp, fp, #16
 8019268:	e79c      	b.n	80191a4 <_vfprintf_r+0x264>
 801926a:	4632      	mov	r2, r6
 801926c:	2000      	movs	r0, #0
 801926e:	f852 3b04 	ldr.w	r3, [r2], #4
 8019272:	9206      	str	r2, [sp, #24]
 8019274:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8019278:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801927c:	ab35      	add	r3, sp, #212	; 0xd4
 801927e:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8019282:	9004      	str	r0, [sp, #16]
 8019284:	f04f 0801 	mov.w	r8, #1
 8019288:	4606      	mov	r6, r0
 801928a:	4605      	mov	r5, r0
 801928c:	9303      	str	r3, [sp, #12]
 801928e:	e1c3      	b.n	8019618 <_vfprintf_r+0x6d8>
	...
 8019298:	f04b 0b10 	orr.w	fp, fp, #16
 801929c:	f01b 0f20 	tst.w	fp, #32
 80192a0:	d012      	beq.n	80192c8 <_vfprintf_r+0x388>
 80192a2:	3607      	adds	r6, #7
 80192a4:	f026 0307 	bic.w	r3, r6, #7
 80192a8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80192ac:	9306      	str	r3, [sp, #24]
 80192ae:	2e00      	cmp	r6, #0
 80192b0:	f177 0300 	sbcs.w	r3, r7, #0
 80192b4:	da06      	bge.n	80192c4 <_vfprintf_r+0x384>
 80192b6:	4276      	negs	r6, r6
 80192b8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80192bc:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80192c0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80192c4:	2301      	movs	r3, #1
 80192c6:	e392      	b.n	80199ee <_vfprintf_r+0xaae>
 80192c8:	1d33      	adds	r3, r6, #4
 80192ca:	f01b 0f10 	tst.w	fp, #16
 80192ce:	9306      	str	r3, [sp, #24]
 80192d0:	d002      	beq.n	80192d8 <_vfprintf_r+0x398>
 80192d2:	6836      	ldr	r6, [r6, #0]
 80192d4:	17f7      	asrs	r7, r6, #31
 80192d6:	e7ea      	b.n	80192ae <_vfprintf_r+0x36e>
 80192d8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80192dc:	6836      	ldr	r6, [r6, #0]
 80192de:	d001      	beq.n	80192e4 <_vfprintf_r+0x3a4>
 80192e0:	b236      	sxth	r6, r6
 80192e2:	e7f7      	b.n	80192d4 <_vfprintf_r+0x394>
 80192e4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80192e8:	bf18      	it	ne
 80192ea:	b276      	sxtbne	r6, r6
 80192ec:	e7f2      	b.n	80192d4 <_vfprintf_r+0x394>
 80192ee:	3607      	adds	r6, #7
 80192f0:	f026 0307 	bic.w	r3, r6, #7
 80192f4:	ecb3 7b02 	vldmia	r3!, {d7}
 80192f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80192fc:	9306      	str	r3, [sp, #24]
 80192fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019300:	ee09 3a10 	vmov	s18, r3
 8019304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801930a:	ee09 3a90 	vmov	s19, r3
 801930e:	f04f 32ff 	mov.w	r2, #4294967295
 8019312:	4b39      	ldr	r3, [pc, #228]	; (80193f8 <_vfprintf_r+0x4b8>)
 8019314:	ec51 0b19 	vmov	r0, r1, d9
 8019318:	f7e7 fc32 	bl	8000b80 <__aeabi_dcmpun>
 801931c:	bb20      	cbnz	r0, 8019368 <_vfprintf_r+0x428>
 801931e:	4b36      	ldr	r3, [pc, #216]	; (80193f8 <_vfprintf_r+0x4b8>)
 8019320:	ec51 0b19 	vmov	r0, r1, d9
 8019324:	f04f 32ff 	mov.w	r2, #4294967295
 8019328:	f7e7 fc0c 	bl	8000b44 <__aeabi_dcmple>
 801932c:	b9e0      	cbnz	r0, 8019368 <_vfprintf_r+0x428>
 801932e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019332:	2200      	movs	r2, #0
 8019334:	2300      	movs	r3, #0
 8019336:	f7e7 fbfb 	bl	8000b30 <__aeabi_dcmplt>
 801933a:	b110      	cbz	r0, 8019342 <_vfprintf_r+0x402>
 801933c:	232d      	movs	r3, #45	; 0x2d
 801933e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8019342:	4a2e      	ldr	r2, [pc, #184]	; (80193fc <_vfprintf_r+0x4bc>)
 8019344:	482e      	ldr	r0, [pc, #184]	; (8019400 <_vfprintf_r+0x4c0>)
 8019346:	9907      	ldr	r1, [sp, #28]
 8019348:	4613      	mov	r3, r2
 801934a:	2947      	cmp	r1, #71	; 0x47
 801934c:	bfc8      	it	gt
 801934e:	4603      	movgt	r3, r0
 8019350:	9303      	str	r3, [sp, #12]
 8019352:	2300      	movs	r3, #0
 8019354:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8019358:	9304      	str	r3, [sp, #16]
 801935a:	f04f 0803 	mov.w	r8, #3
 801935e:	461e      	mov	r6, r3
 8019360:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019364:	461d      	mov	r5, r3
 8019366:	e157      	b.n	8019618 <_vfprintf_r+0x6d8>
 8019368:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801936c:	4610      	mov	r0, r2
 801936e:	4619      	mov	r1, r3
 8019370:	f7e7 fc06 	bl	8000b80 <__aeabi_dcmpun>
 8019374:	b140      	cbz	r0, 8019388 <_vfprintf_r+0x448>
 8019376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019378:	4a22      	ldr	r2, [pc, #136]	; (8019404 <_vfprintf_r+0x4c4>)
 801937a:	4823      	ldr	r0, [pc, #140]	; (8019408 <_vfprintf_r+0x4c8>)
 801937c:	2b00      	cmp	r3, #0
 801937e:	bfbc      	itt	lt
 8019380:	232d      	movlt	r3, #45	; 0x2d
 8019382:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8019386:	e7de      	b.n	8019346 <_vfprintf_r+0x406>
 8019388:	9b07      	ldr	r3, [sp, #28]
 801938a:	f023 0320 	bic.w	r3, r3, #32
 801938e:	2b41      	cmp	r3, #65	; 0x41
 8019390:	9308      	str	r3, [sp, #32]
 8019392:	d13b      	bne.n	801940c <_vfprintf_r+0x4cc>
 8019394:	2330      	movs	r3, #48	; 0x30
 8019396:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801939a:	9b07      	ldr	r3, [sp, #28]
 801939c:	2b61      	cmp	r3, #97	; 0x61
 801939e:	bf0c      	ite	eq
 80193a0:	2378      	moveq	r3, #120	; 0x78
 80193a2:	2358      	movne	r3, #88	; 0x58
 80193a4:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80193a8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80193ac:	f04b 0b02 	orr.w	fp, fp, #2
 80193b0:	f340 8209 	ble.w	80197c6 <_vfprintf_r+0x886>
 80193b4:	f108 0101 	add.w	r1, r8, #1
 80193b8:	4650      	mov	r0, sl
 80193ba:	f002 fa51 	bl	801b860 <_malloc_r>
 80193be:	9003      	str	r0, [sp, #12]
 80193c0:	2800      	cmp	r0, #0
 80193c2:	f040 8204 	bne.w	80197ce <_vfprintf_r+0x88e>
 80193c6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80193ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193ce:	f8a9 300c 	strh.w	r3, [r9, #12]
 80193d2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80193d6:	07d9      	lsls	r1, r3, #31
 80193d8:	d407      	bmi.n	80193ea <_vfprintf_r+0x4aa>
 80193da:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80193de:	059a      	lsls	r2, r3, #22
 80193e0:	d403      	bmi.n	80193ea <_vfprintf_r+0x4aa>
 80193e2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80193e6:	f002 f9be 	bl	801b766 <__retarget_lock_release_recursive>
 80193ea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80193ee:	065b      	lsls	r3, r3, #25
 80193f0:	f57f adee 	bpl.w	8018fd0 <_vfprintf_r+0x90>
 80193f4:	e5e9      	b.n	8018fca <_vfprintf_r+0x8a>
 80193f6:	bf00      	nop
 80193f8:	7fefffff 	.word	0x7fefffff
 80193fc:	08023830 	.word	0x08023830
 8019400:	08023834 	.word	0x08023834
 8019404:	08023838 	.word	0x08023838
 8019408:	0802383c 	.word	0x0802383c
 801940c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8019410:	f000 81e0 	beq.w	80197d4 <_vfprintf_r+0x894>
 8019414:	9b08      	ldr	r3, [sp, #32]
 8019416:	2b47      	cmp	r3, #71	; 0x47
 8019418:	f040 81e0 	bne.w	80197dc <_vfprintf_r+0x89c>
 801941c:	f1b8 0f00 	cmp.w	r8, #0
 8019420:	f040 81dc 	bne.w	80197dc <_vfprintf_r+0x89c>
 8019424:	f8cd 8010 	str.w	r8, [sp, #16]
 8019428:	f04f 0801 	mov.w	r8, #1
 801942c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8019430:	9311      	str	r3, [sp, #68]	; 0x44
 8019432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019434:	2b00      	cmp	r3, #0
 8019436:	f280 81d3 	bge.w	80197e0 <_vfprintf_r+0x8a0>
 801943a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801943c:	ee08 3a10 	vmov	s16, r3
 8019440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019442:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019446:	ee08 3a90 	vmov	s17, r3
 801944a:	232d      	movs	r3, #45	; 0x2d
 801944c:	9318      	str	r3, [sp, #96]	; 0x60
 801944e:	9b08      	ldr	r3, [sp, #32]
 8019450:	2b41      	cmp	r3, #65	; 0x41
 8019452:	f040 81e3 	bne.w	801981c <_vfprintf_r+0x8dc>
 8019456:	eeb0 0a48 	vmov.f32	s0, s16
 801945a:	eef0 0a68 	vmov.f32	s1, s17
 801945e:	a81c      	add	r0, sp, #112	; 0x70
 8019460:	f002 ff7c 	bl	801c35c <frexp>
 8019464:	2200      	movs	r2, #0
 8019466:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801946a:	ec51 0b10 	vmov	r0, r1, d0
 801946e:	f7e7 f8ed 	bl	800064c <__aeabi_dmul>
 8019472:	2200      	movs	r2, #0
 8019474:	2300      	movs	r3, #0
 8019476:	4606      	mov	r6, r0
 8019478:	460f      	mov	r7, r1
 801947a:	f7e7 fb4f 	bl	8000b1c <__aeabi_dcmpeq>
 801947e:	b108      	cbz	r0, 8019484 <_vfprintf_r+0x544>
 8019480:	2301      	movs	r3, #1
 8019482:	931c      	str	r3, [sp, #112]	; 0x70
 8019484:	4bb7      	ldr	r3, [pc, #732]	; (8019764 <_vfprintf_r+0x824>)
 8019486:	4ab8      	ldr	r2, [pc, #736]	; (8019768 <_vfprintf_r+0x828>)
 8019488:	9907      	ldr	r1, [sp, #28]
 801948a:	9d03      	ldr	r5, [sp, #12]
 801948c:	2961      	cmp	r1, #97	; 0x61
 801948e:	bf18      	it	ne
 8019490:	461a      	movne	r2, r3
 8019492:	f108 33ff 	add.w	r3, r8, #4294967295
 8019496:	9217      	str	r2, [sp, #92]	; 0x5c
 8019498:	9305      	str	r3, [sp, #20]
 801949a:	4bb4      	ldr	r3, [pc, #720]	; (801976c <_vfprintf_r+0x82c>)
 801949c:	2200      	movs	r2, #0
 801949e:	4630      	mov	r0, r6
 80194a0:	4639      	mov	r1, r7
 80194a2:	f7e7 f8d3 	bl	800064c <__aeabi_dmul>
 80194a6:	460f      	mov	r7, r1
 80194a8:	4606      	mov	r6, r0
 80194aa:	f7e7 fb7f 	bl	8000bac <__aeabi_d2iz>
 80194ae:	9019      	str	r0, [sp, #100]	; 0x64
 80194b0:	f7e7 f862 	bl	8000578 <__aeabi_i2d>
 80194b4:	4602      	mov	r2, r0
 80194b6:	460b      	mov	r3, r1
 80194b8:	4630      	mov	r0, r6
 80194ba:	4639      	mov	r1, r7
 80194bc:	f7e6 ff0e 	bl	80002dc <__aeabi_dsub>
 80194c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80194c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80194c4:	5c9b      	ldrb	r3, [r3, r2]
 80194c6:	f805 3b01 	strb.w	r3, [r5], #1
 80194ca:	9b05      	ldr	r3, [sp, #20]
 80194cc:	9309      	str	r3, [sp, #36]	; 0x24
 80194ce:	1c5a      	adds	r2, r3, #1
 80194d0:	4606      	mov	r6, r0
 80194d2:	460f      	mov	r7, r1
 80194d4:	d007      	beq.n	80194e6 <_vfprintf_r+0x5a6>
 80194d6:	3b01      	subs	r3, #1
 80194d8:	9305      	str	r3, [sp, #20]
 80194da:	2200      	movs	r2, #0
 80194dc:	2300      	movs	r3, #0
 80194de:	f7e7 fb1d 	bl	8000b1c <__aeabi_dcmpeq>
 80194e2:	2800      	cmp	r0, #0
 80194e4:	d0d9      	beq.n	801949a <_vfprintf_r+0x55a>
 80194e6:	4ba2      	ldr	r3, [pc, #648]	; (8019770 <_vfprintf_r+0x830>)
 80194e8:	2200      	movs	r2, #0
 80194ea:	4630      	mov	r0, r6
 80194ec:	4639      	mov	r1, r7
 80194ee:	f7e7 fb3d 	bl	8000b6c <__aeabi_dcmpgt>
 80194f2:	b960      	cbnz	r0, 801950e <_vfprintf_r+0x5ce>
 80194f4:	4b9e      	ldr	r3, [pc, #632]	; (8019770 <_vfprintf_r+0x830>)
 80194f6:	2200      	movs	r2, #0
 80194f8:	4630      	mov	r0, r6
 80194fa:	4639      	mov	r1, r7
 80194fc:	f7e7 fb0e 	bl	8000b1c <__aeabi_dcmpeq>
 8019500:	2800      	cmp	r0, #0
 8019502:	f000 8186 	beq.w	8019812 <_vfprintf_r+0x8d2>
 8019506:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019508:	07df      	lsls	r7, r3, #31
 801950a:	f140 8182 	bpl.w	8019812 <_vfprintf_r+0x8d2>
 801950e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019510:	9520      	str	r5, [sp, #128]	; 0x80
 8019512:	7bd9      	ldrb	r1, [r3, #15]
 8019514:	2030      	movs	r0, #48	; 0x30
 8019516:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019518:	1e53      	subs	r3, r2, #1
 801951a:	9320      	str	r3, [sp, #128]	; 0x80
 801951c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8019520:	428b      	cmp	r3, r1
 8019522:	f000 8165 	beq.w	80197f0 <_vfprintf_r+0x8b0>
 8019526:	2b39      	cmp	r3, #57	; 0x39
 8019528:	bf0b      	itete	eq
 801952a:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801952c:	3301      	addne	r3, #1
 801952e:	7a9b      	ldrbeq	r3, [r3, #10]
 8019530:	b2db      	uxtbne	r3, r3
 8019532:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019536:	9b03      	ldr	r3, [sp, #12]
 8019538:	1aeb      	subs	r3, r5, r3
 801953a:	9305      	str	r3, [sp, #20]
 801953c:	9b08      	ldr	r3, [sp, #32]
 801953e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8019540:	2b47      	cmp	r3, #71	; 0x47
 8019542:	f040 81b3 	bne.w	80198ac <_vfprintf_r+0x96c>
 8019546:	1cee      	adds	r6, r5, #3
 8019548:	db02      	blt.n	8019550 <_vfprintf_r+0x610>
 801954a:	4545      	cmp	r5, r8
 801954c:	f340 81d5 	ble.w	80198fa <_vfprintf_r+0x9ba>
 8019550:	9b07      	ldr	r3, [sp, #28]
 8019552:	3b02      	subs	r3, #2
 8019554:	9307      	str	r3, [sp, #28]
 8019556:	9907      	ldr	r1, [sp, #28]
 8019558:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801955c:	f021 0120 	bic.w	r1, r1, #32
 8019560:	2941      	cmp	r1, #65	; 0x41
 8019562:	bf08      	it	eq
 8019564:	320f      	addeq	r2, #15
 8019566:	f105 33ff 	add.w	r3, r5, #4294967295
 801956a:	bf06      	itte	eq
 801956c:	b2d2      	uxtbeq	r2, r2
 801956e:	2101      	moveq	r1, #1
 8019570:	2100      	movne	r1, #0
 8019572:	2b00      	cmp	r3, #0
 8019574:	931c      	str	r3, [sp, #112]	; 0x70
 8019576:	bfb8      	it	lt
 8019578:	f1c5 0301 	rsblt	r3, r5, #1
 801957c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8019580:	bfb4      	ite	lt
 8019582:	222d      	movlt	r2, #45	; 0x2d
 8019584:	222b      	movge	r2, #43	; 0x2b
 8019586:	2b09      	cmp	r3, #9
 8019588:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801958c:	f340 81a4 	ble.w	80198d8 <_vfprintf_r+0x998>
 8019590:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8019594:	260a      	movs	r6, #10
 8019596:	4611      	mov	r1, r2
 8019598:	fb93 f5f6 	sdiv	r5, r3, r6
 801959c:	fb06 3015 	mls	r0, r6, r5, r3
 80195a0:	3030      	adds	r0, #48	; 0x30
 80195a2:	f801 0c01 	strb.w	r0, [r1, #-1]
 80195a6:	4618      	mov	r0, r3
 80195a8:	2863      	cmp	r0, #99	; 0x63
 80195aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80195ae:	462b      	mov	r3, r5
 80195b0:	dcf1      	bgt.n	8019596 <_vfprintf_r+0x656>
 80195b2:	3330      	adds	r3, #48	; 0x30
 80195b4:	1e88      	subs	r0, r1, #2
 80195b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80195ba:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80195be:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80195c2:	4603      	mov	r3, r0
 80195c4:	42ab      	cmp	r3, r5
 80195c6:	f0c0 8182 	bcc.w	80198ce <_vfprintf_r+0x98e>
 80195ca:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80195ce:	1a52      	subs	r2, r2, r1
 80195d0:	42a8      	cmp	r0, r5
 80195d2:	bf88      	it	hi
 80195d4:	2200      	movhi	r2, #0
 80195d6:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80195da:	441a      	add	r2, r3
 80195dc:	ab1e      	add	r3, sp, #120	; 0x78
 80195de:	1ad3      	subs	r3, r2, r3
 80195e0:	9a05      	ldr	r2, [sp, #20]
 80195e2:	9315      	str	r3, [sp, #84]	; 0x54
 80195e4:	2a01      	cmp	r2, #1
 80195e6:	eb03 0802 	add.w	r8, r3, r2
 80195ea:	dc02      	bgt.n	80195f2 <_vfprintf_r+0x6b2>
 80195ec:	f01b 0f01 	tst.w	fp, #1
 80195f0:	d001      	beq.n	80195f6 <_vfprintf_r+0x6b6>
 80195f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195f4:	4498      	add	r8, r3
 80195f6:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 80195fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80195fe:	9311      	str	r3, [sp, #68]	; 0x44
 8019600:	2300      	movs	r3, #0
 8019602:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019606:	461d      	mov	r5, r3
 8019608:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801960a:	b113      	cbz	r3, 8019612 <_vfprintf_r+0x6d2>
 801960c:	232d      	movs	r3, #45	; 0x2d
 801960e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8019612:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8019616:	2600      	movs	r6, #0
 8019618:	4546      	cmp	r6, r8
 801961a:	4633      	mov	r3, r6
 801961c:	bfb8      	it	lt
 801961e:	4643      	movlt	r3, r8
 8019620:	9311      	str	r3, [sp, #68]	; 0x44
 8019622:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8019626:	b113      	cbz	r3, 801962e <_vfprintf_r+0x6ee>
 8019628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801962a:	3301      	adds	r3, #1
 801962c:	9311      	str	r3, [sp, #68]	; 0x44
 801962e:	f01b 0302 	ands.w	r3, fp, #2
 8019632:	9317      	str	r3, [sp, #92]	; 0x5c
 8019634:	bf1e      	ittt	ne
 8019636:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8019638:	3302      	addne	r3, #2
 801963a:	9311      	strne	r3, [sp, #68]	; 0x44
 801963c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8019640:	9318      	str	r3, [sp, #96]	; 0x60
 8019642:	d11f      	bne.n	8019684 <_vfprintf_r+0x744>
 8019644:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8019648:	1a9f      	subs	r7, r3, r2
 801964a:	2f00      	cmp	r7, #0
 801964c:	dd1a      	ble.n	8019684 <_vfprintf_r+0x744>
 801964e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8019652:	4848      	ldr	r0, [pc, #288]	; (8019774 <_vfprintf_r+0x834>)
 8019654:	6020      	str	r0, [r4, #0]
 8019656:	2f10      	cmp	r7, #16
 8019658:	f103 0301 	add.w	r3, r3, #1
 801965c:	f104 0108 	add.w	r1, r4, #8
 8019660:	f300 82f0 	bgt.w	8019c44 <_vfprintf_r+0xd04>
 8019664:	6067      	str	r7, [r4, #4]
 8019666:	2b07      	cmp	r3, #7
 8019668:	4417      	add	r7, r2
 801966a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801966e:	f340 82fc 	ble.w	8019c6a <_vfprintf_r+0xd2a>
 8019672:	aa22      	add	r2, sp, #136	; 0x88
 8019674:	4649      	mov	r1, r9
 8019676:	4650      	mov	r0, sl
 8019678:	f004 f849 	bl	801d70e <__sprint_r>
 801967c:	2800      	cmp	r0, #0
 801967e:	f040 8632 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019682:	ac25      	add	r4, sp, #148	; 0x94
 8019684:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8019688:	b173      	cbz	r3, 80196a8 <_vfprintf_r+0x768>
 801968a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801968e:	6023      	str	r3, [r4, #0]
 8019690:	2301      	movs	r3, #1
 8019692:	6063      	str	r3, [r4, #4]
 8019694:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019696:	3301      	adds	r3, #1
 8019698:	9324      	str	r3, [sp, #144]	; 0x90
 801969a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801969c:	3301      	adds	r3, #1
 801969e:	2b07      	cmp	r3, #7
 80196a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80196a2:	f300 82e4 	bgt.w	8019c6e <_vfprintf_r+0xd2e>
 80196a6:	3408      	adds	r4, #8
 80196a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80196aa:	b16b      	cbz	r3, 80196c8 <_vfprintf_r+0x788>
 80196ac:	ab1b      	add	r3, sp, #108	; 0x6c
 80196ae:	6023      	str	r3, [r4, #0]
 80196b0:	2302      	movs	r3, #2
 80196b2:	6063      	str	r3, [r4, #4]
 80196b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80196b6:	3302      	adds	r3, #2
 80196b8:	9324      	str	r3, [sp, #144]	; 0x90
 80196ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80196bc:	3301      	adds	r3, #1
 80196be:	2b07      	cmp	r3, #7
 80196c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80196c2:	f300 82de 	bgt.w	8019c82 <_vfprintf_r+0xd42>
 80196c6:	3408      	adds	r4, #8
 80196c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80196ca:	2b80      	cmp	r3, #128	; 0x80
 80196cc:	d11f      	bne.n	801970e <_vfprintf_r+0x7ce>
 80196ce:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80196d2:	1a9f      	subs	r7, r3, r2
 80196d4:	2f00      	cmp	r7, #0
 80196d6:	dd1a      	ble.n	801970e <_vfprintf_r+0x7ce>
 80196d8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80196dc:	4826      	ldr	r0, [pc, #152]	; (8019778 <_vfprintf_r+0x838>)
 80196de:	6020      	str	r0, [r4, #0]
 80196e0:	2f10      	cmp	r7, #16
 80196e2:	f103 0301 	add.w	r3, r3, #1
 80196e6:	f104 0108 	add.w	r1, r4, #8
 80196ea:	f300 82d4 	bgt.w	8019c96 <_vfprintf_r+0xd56>
 80196ee:	6067      	str	r7, [r4, #4]
 80196f0:	2b07      	cmp	r3, #7
 80196f2:	4417      	add	r7, r2
 80196f4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80196f8:	f340 82e0 	ble.w	8019cbc <_vfprintf_r+0xd7c>
 80196fc:	aa22      	add	r2, sp, #136	; 0x88
 80196fe:	4649      	mov	r1, r9
 8019700:	4650      	mov	r0, sl
 8019702:	f004 f804 	bl	801d70e <__sprint_r>
 8019706:	2800      	cmp	r0, #0
 8019708:	f040 85ed 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801970c:	ac25      	add	r4, sp, #148	; 0x94
 801970e:	eba6 0608 	sub.w	r6, r6, r8
 8019712:	2e00      	cmp	r6, #0
 8019714:	dd1a      	ble.n	801974c <_vfprintf_r+0x80c>
 8019716:	4f18      	ldr	r7, [pc, #96]	; (8019778 <_vfprintf_r+0x838>)
 8019718:	6027      	str	r7, [r4, #0]
 801971a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801971e:	2e10      	cmp	r6, #16
 8019720:	f103 0301 	add.w	r3, r3, #1
 8019724:	f104 0108 	add.w	r1, r4, #8
 8019728:	f300 82ca 	bgt.w	8019cc0 <_vfprintf_r+0xd80>
 801972c:	6066      	str	r6, [r4, #4]
 801972e:	2b07      	cmp	r3, #7
 8019730:	4416      	add	r6, r2
 8019732:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8019736:	f340 82d6 	ble.w	8019ce6 <_vfprintf_r+0xda6>
 801973a:	aa22      	add	r2, sp, #136	; 0x88
 801973c:	4649      	mov	r1, r9
 801973e:	4650      	mov	r0, sl
 8019740:	f003 ffe5 	bl	801d70e <__sprint_r>
 8019744:	2800      	cmp	r0, #0
 8019746:	f040 85ce 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801974a:	ac25      	add	r4, sp, #148	; 0x94
 801974c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019750:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8019752:	f040 82cf 	bne.w	8019cf4 <_vfprintf_r+0xdb4>
 8019756:	9b03      	ldr	r3, [sp, #12]
 8019758:	e9c4 3800 	strd	r3, r8, [r4]
 801975c:	4446      	add	r6, r8
 801975e:	9624      	str	r6, [sp, #144]	; 0x90
 8019760:	e00c      	b.n	801977c <_vfprintf_r+0x83c>
 8019762:	bf00      	nop
 8019764:	08023851 	.word	0x08023851
 8019768:	08023840 	.word	0x08023840
 801976c:	40300000 	.word	0x40300000
 8019770:	3fe00000 	.word	0x3fe00000
 8019774:	08023864 	.word	0x08023864
 8019778:	08023874 	.word	0x08023874
 801977c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801977e:	3301      	adds	r3, #1
 8019780:	2b07      	cmp	r3, #7
 8019782:	9323      	str	r3, [sp, #140]	; 0x8c
 8019784:	f300 82fb 	bgt.w	8019d7e <_vfprintf_r+0xe3e>
 8019788:	3408      	adds	r4, #8
 801978a:	f01b 0f04 	tst.w	fp, #4
 801978e:	f040 858c 	bne.w	801a2aa <_vfprintf_r+0x136a>
 8019792:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8019796:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019798:	428a      	cmp	r2, r1
 801979a:	bfac      	ite	ge
 801979c:	189b      	addge	r3, r3, r2
 801979e:	185b      	addlt	r3, r3, r1
 80197a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80197a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80197a4:	b13b      	cbz	r3, 80197b6 <_vfprintf_r+0x876>
 80197a6:	aa22      	add	r2, sp, #136	; 0x88
 80197a8:	4649      	mov	r1, r9
 80197aa:	4650      	mov	r0, sl
 80197ac:	f003 ffaf 	bl	801d70e <__sprint_r>
 80197b0:	2800      	cmp	r0, #0
 80197b2:	f040 8598 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 80197b6:	2300      	movs	r3, #0
 80197b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80197ba:	9b04      	ldr	r3, [sp, #16]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	f040 85ae 	bne.w	801a31e <_vfprintf_r+0x13de>
 80197c2:	ac25      	add	r4, sp, #148	; 0x94
 80197c4:	e0eb      	b.n	801999e <_vfprintf_r+0xa5e>
 80197c6:	ab35      	add	r3, sp, #212	; 0xd4
 80197c8:	9004      	str	r0, [sp, #16]
 80197ca:	9303      	str	r3, [sp, #12]
 80197cc:	e62e      	b.n	801942c <_vfprintf_r+0x4ec>
 80197ce:	9b03      	ldr	r3, [sp, #12]
 80197d0:	9304      	str	r3, [sp, #16]
 80197d2:	e62b      	b.n	801942c <_vfprintf_r+0x4ec>
 80197d4:	9004      	str	r0, [sp, #16]
 80197d6:	f04f 0806 	mov.w	r8, #6
 80197da:	e627      	b.n	801942c <_vfprintf_r+0x4ec>
 80197dc:	9004      	str	r0, [sp, #16]
 80197de:	e625      	b.n	801942c <_vfprintf_r+0x4ec>
 80197e0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80197e4:	2300      	movs	r3, #0
 80197e6:	eeb0 8a47 	vmov.f32	s16, s14
 80197ea:	eef0 8a67 	vmov.f32	s17, s15
 80197ee:	e62d      	b.n	801944c <_vfprintf_r+0x50c>
 80197f0:	f802 0c01 	strb.w	r0, [r2, #-1]
 80197f4:	e68f      	b.n	8019516 <_vfprintf_r+0x5d6>
 80197f6:	f803 0b01 	strb.w	r0, [r3], #1
 80197fa:	1aca      	subs	r2, r1, r3
 80197fc:	2a00      	cmp	r2, #0
 80197fe:	dafa      	bge.n	80197f6 <_vfprintf_r+0x8b6>
 8019800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019804:	3201      	adds	r2, #1
 8019806:	f103 0301 	add.w	r3, r3, #1
 801980a:	bfb8      	it	lt
 801980c:	2300      	movlt	r3, #0
 801980e:	441d      	add	r5, r3
 8019810:	e691      	b.n	8019536 <_vfprintf_r+0x5f6>
 8019812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019814:	462b      	mov	r3, r5
 8019816:	18a9      	adds	r1, r5, r2
 8019818:	2030      	movs	r0, #48	; 0x30
 801981a:	e7ee      	b.n	80197fa <_vfprintf_r+0x8ba>
 801981c:	9b08      	ldr	r3, [sp, #32]
 801981e:	2b46      	cmp	r3, #70	; 0x46
 8019820:	d005      	beq.n	801982e <_vfprintf_r+0x8ee>
 8019822:	2b45      	cmp	r3, #69	; 0x45
 8019824:	d11b      	bne.n	801985e <_vfprintf_r+0x91e>
 8019826:	f108 0501 	add.w	r5, r8, #1
 801982a:	2102      	movs	r1, #2
 801982c:	e001      	b.n	8019832 <_vfprintf_r+0x8f2>
 801982e:	4645      	mov	r5, r8
 8019830:	2103      	movs	r1, #3
 8019832:	ab20      	add	r3, sp, #128	; 0x80
 8019834:	9301      	str	r3, [sp, #4]
 8019836:	ab1d      	add	r3, sp, #116	; 0x74
 8019838:	9300      	str	r3, [sp, #0]
 801983a:	462a      	mov	r2, r5
 801983c:	ab1c      	add	r3, sp, #112	; 0x70
 801983e:	4650      	mov	r0, sl
 8019840:	eeb0 0a48 	vmov.f32	s0, s16
 8019844:	eef0 0a68 	vmov.f32	s1, s17
 8019848:	f000 fefa 	bl	801a640 <_dtoa_r>
 801984c:	9b08      	ldr	r3, [sp, #32]
 801984e:	9003      	str	r0, [sp, #12]
 8019850:	2b47      	cmp	r3, #71	; 0x47
 8019852:	d106      	bne.n	8019862 <_vfprintf_r+0x922>
 8019854:	f01b 0f01 	tst.w	fp, #1
 8019858:	d103      	bne.n	8019862 <_vfprintf_r+0x922>
 801985a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801985c:	e66b      	b.n	8019536 <_vfprintf_r+0x5f6>
 801985e:	4645      	mov	r5, r8
 8019860:	e7e3      	b.n	801982a <_vfprintf_r+0x8ea>
 8019862:	9b03      	ldr	r3, [sp, #12]
 8019864:	195e      	adds	r6, r3, r5
 8019866:	9b08      	ldr	r3, [sp, #32]
 8019868:	2b46      	cmp	r3, #70	; 0x46
 801986a:	d10f      	bne.n	801988c <_vfprintf_r+0x94c>
 801986c:	9b03      	ldr	r3, [sp, #12]
 801986e:	781b      	ldrb	r3, [r3, #0]
 8019870:	2b30      	cmp	r3, #48	; 0x30
 8019872:	d109      	bne.n	8019888 <_vfprintf_r+0x948>
 8019874:	ec51 0b18 	vmov	r0, r1, d8
 8019878:	2200      	movs	r2, #0
 801987a:	2300      	movs	r3, #0
 801987c:	f7e7 f94e 	bl	8000b1c <__aeabi_dcmpeq>
 8019880:	b910      	cbnz	r0, 8019888 <_vfprintf_r+0x948>
 8019882:	f1c5 0501 	rsb	r5, r5, #1
 8019886:	951c      	str	r5, [sp, #112]	; 0x70
 8019888:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801988a:	441e      	add	r6, r3
 801988c:	ec51 0b18 	vmov	r0, r1, d8
 8019890:	2200      	movs	r2, #0
 8019892:	2300      	movs	r3, #0
 8019894:	f7e7 f942 	bl	8000b1c <__aeabi_dcmpeq>
 8019898:	b100      	cbz	r0, 801989c <_vfprintf_r+0x95c>
 801989a:	9620      	str	r6, [sp, #128]	; 0x80
 801989c:	2230      	movs	r2, #48	; 0x30
 801989e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80198a0:	429e      	cmp	r6, r3
 80198a2:	d9da      	bls.n	801985a <_vfprintf_r+0x91a>
 80198a4:	1c59      	adds	r1, r3, #1
 80198a6:	9120      	str	r1, [sp, #128]	; 0x80
 80198a8:	701a      	strb	r2, [r3, #0]
 80198aa:	e7f8      	b.n	801989e <_vfprintf_r+0x95e>
 80198ac:	9b08      	ldr	r3, [sp, #32]
 80198ae:	2b46      	cmp	r3, #70	; 0x46
 80198b0:	f47f ae51 	bne.w	8019556 <_vfprintf_r+0x616>
 80198b4:	f00b 0301 	and.w	r3, fp, #1
 80198b8:	2d00      	cmp	r5, #0
 80198ba:	ea43 0308 	orr.w	r3, r3, r8
 80198be:	dd18      	ble.n	80198f2 <_vfprintf_r+0x9b2>
 80198c0:	b383      	cbz	r3, 8019924 <_vfprintf_r+0x9e4>
 80198c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198c4:	18eb      	adds	r3, r5, r3
 80198c6:	4498      	add	r8, r3
 80198c8:	2366      	movs	r3, #102	; 0x66
 80198ca:	9307      	str	r3, [sp, #28]
 80198cc:	e030      	b.n	8019930 <_vfprintf_r+0x9f0>
 80198ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80198d2:	f802 6b01 	strb.w	r6, [r2], #1
 80198d6:	e675      	b.n	80195c4 <_vfprintf_r+0x684>
 80198d8:	b941      	cbnz	r1, 80198ec <_vfprintf_r+0x9ac>
 80198da:	2230      	movs	r2, #48	; 0x30
 80198dc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80198e0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80198e4:	3330      	adds	r3, #48	; 0x30
 80198e6:	f802 3b01 	strb.w	r3, [r2], #1
 80198ea:	e677      	b.n	80195dc <_vfprintf_r+0x69c>
 80198ec:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80198f0:	e7f8      	b.n	80198e4 <_vfprintf_r+0x9a4>
 80198f2:	b1cb      	cbz	r3, 8019928 <_vfprintf_r+0x9e8>
 80198f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198f6:	3301      	adds	r3, #1
 80198f8:	e7e5      	b.n	80198c6 <_vfprintf_r+0x986>
 80198fa:	9b05      	ldr	r3, [sp, #20]
 80198fc:	429d      	cmp	r5, r3
 80198fe:	db07      	blt.n	8019910 <_vfprintf_r+0x9d0>
 8019900:	f01b 0f01 	tst.w	fp, #1
 8019904:	d029      	beq.n	801995a <_vfprintf_r+0xa1a>
 8019906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019908:	eb05 0803 	add.w	r8, r5, r3
 801990c:	2367      	movs	r3, #103	; 0x67
 801990e:	e7dc      	b.n	80198ca <_vfprintf_r+0x98a>
 8019910:	9b05      	ldr	r3, [sp, #20]
 8019912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019914:	2d00      	cmp	r5, #0
 8019916:	eb03 0802 	add.w	r8, r3, r2
 801991a:	dcf7      	bgt.n	801990c <_vfprintf_r+0x9cc>
 801991c:	f1c5 0301 	rsb	r3, r5, #1
 8019920:	4498      	add	r8, r3
 8019922:	e7f3      	b.n	801990c <_vfprintf_r+0x9cc>
 8019924:	46a8      	mov	r8, r5
 8019926:	e7cf      	b.n	80198c8 <_vfprintf_r+0x988>
 8019928:	2366      	movs	r3, #102	; 0x66
 801992a:	9307      	str	r3, [sp, #28]
 801992c:	f04f 0801 	mov.w	r8, #1
 8019930:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8019934:	9309      	str	r3, [sp, #36]	; 0x24
 8019936:	d023      	beq.n	8019980 <_vfprintf_r+0xa40>
 8019938:	2300      	movs	r3, #0
 801993a:	2d00      	cmp	r5, #0
 801993c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019940:	f77f ae62 	ble.w	8019608 <_vfprintf_r+0x6c8>
 8019944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019946:	781b      	ldrb	r3, [r3, #0]
 8019948:	2bff      	cmp	r3, #255	; 0xff
 801994a:	d108      	bne.n	801995e <_vfprintf_r+0xa1e>
 801994c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019950:	4413      	add	r3, r2
 8019952:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019954:	fb02 8803 	mla	r8, r2, r3, r8
 8019958:	e656      	b.n	8019608 <_vfprintf_r+0x6c8>
 801995a:	46a8      	mov	r8, r5
 801995c:	e7d6      	b.n	801990c <_vfprintf_r+0x9cc>
 801995e:	42ab      	cmp	r3, r5
 8019960:	daf4      	bge.n	801994c <_vfprintf_r+0xa0c>
 8019962:	1aed      	subs	r5, r5, r3
 8019964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019966:	785b      	ldrb	r3, [r3, #1]
 8019968:	b133      	cbz	r3, 8019978 <_vfprintf_r+0xa38>
 801996a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801996c:	3301      	adds	r3, #1
 801996e:	9309      	str	r3, [sp, #36]	; 0x24
 8019970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019972:	3301      	adds	r3, #1
 8019974:	930a      	str	r3, [sp, #40]	; 0x28
 8019976:	e7e5      	b.n	8019944 <_vfprintf_r+0xa04>
 8019978:	9b08      	ldr	r3, [sp, #32]
 801997a:	3301      	adds	r3, #1
 801997c:	9308      	str	r3, [sp, #32]
 801997e:	e7e1      	b.n	8019944 <_vfprintf_r+0xa04>
 8019980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019982:	9308      	str	r3, [sp, #32]
 8019984:	e640      	b.n	8019608 <_vfprintf_r+0x6c8>
 8019986:	4632      	mov	r2, r6
 8019988:	f01b 0f20 	tst.w	fp, #32
 801998c:	f852 3b04 	ldr.w	r3, [r2], #4
 8019990:	9206      	str	r2, [sp, #24]
 8019992:	d009      	beq.n	80199a8 <_vfprintf_r+0xa68>
 8019994:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019996:	4610      	mov	r0, r2
 8019998:	17d1      	asrs	r1, r2, #31
 801999a:	e9c3 0100 	strd	r0, r1, [r3]
 801999e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199a0:	9e06      	ldr	r6, [sp, #24]
 80199a2:	9303      	str	r3, [sp, #12]
 80199a4:	f7ff bb4f 	b.w	8019046 <_vfprintf_r+0x106>
 80199a8:	f01b 0f10 	tst.w	fp, #16
 80199ac:	d002      	beq.n	80199b4 <_vfprintf_r+0xa74>
 80199ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80199b0:	601a      	str	r2, [r3, #0]
 80199b2:	e7f4      	b.n	801999e <_vfprintf_r+0xa5e>
 80199b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80199b8:	d002      	beq.n	80199c0 <_vfprintf_r+0xa80>
 80199ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80199bc:	801a      	strh	r2, [r3, #0]
 80199be:	e7ee      	b.n	801999e <_vfprintf_r+0xa5e>
 80199c0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80199c4:	d0f3      	beq.n	80199ae <_vfprintf_r+0xa6e>
 80199c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80199c8:	701a      	strb	r2, [r3, #0]
 80199ca:	e7e8      	b.n	801999e <_vfprintf_r+0xa5e>
 80199cc:	f04b 0b10 	orr.w	fp, fp, #16
 80199d0:	f01b 0f20 	tst.w	fp, #32
 80199d4:	d01e      	beq.n	8019a14 <_vfprintf_r+0xad4>
 80199d6:	3607      	adds	r6, #7
 80199d8:	f026 0307 	bic.w	r3, r6, #7
 80199dc:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80199e0:	9306      	str	r3, [sp, #24]
 80199e2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80199e6:	2300      	movs	r3, #0
 80199e8:	2200      	movs	r2, #0
 80199ea:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80199ee:	f1b8 3fff 	cmp.w	r8, #4294967295
 80199f2:	f000 84a9 	beq.w	801a348 <_vfprintf_r+0x1408>
 80199f6:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 80199fa:	9204      	str	r2, [sp, #16]
 80199fc:	ea56 0207 	orrs.w	r2, r6, r7
 8019a00:	f040 84a8 	bne.w	801a354 <_vfprintf_r+0x1414>
 8019a04:	f1b8 0f00 	cmp.w	r8, #0
 8019a08:	f000 8104 	beq.w	8019c14 <_vfprintf_r+0xcd4>
 8019a0c:	2b01      	cmp	r3, #1
 8019a0e:	f040 84a4 	bne.w	801a35a <_vfprintf_r+0x141a>
 8019a12:	e09a      	b.n	8019b4a <_vfprintf_r+0xc0a>
 8019a14:	1d33      	adds	r3, r6, #4
 8019a16:	f01b 0f10 	tst.w	fp, #16
 8019a1a:	9306      	str	r3, [sp, #24]
 8019a1c:	d001      	beq.n	8019a22 <_vfprintf_r+0xae2>
 8019a1e:	6836      	ldr	r6, [r6, #0]
 8019a20:	e003      	b.n	8019a2a <_vfprintf_r+0xaea>
 8019a22:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8019a26:	d002      	beq.n	8019a2e <_vfprintf_r+0xaee>
 8019a28:	8836      	ldrh	r6, [r6, #0]
 8019a2a:	2700      	movs	r7, #0
 8019a2c:	e7d9      	b.n	80199e2 <_vfprintf_r+0xaa2>
 8019a2e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8019a32:	d0f4      	beq.n	8019a1e <_vfprintf_r+0xade>
 8019a34:	7836      	ldrb	r6, [r6, #0]
 8019a36:	e7f8      	b.n	8019a2a <_vfprintf_r+0xaea>
 8019a38:	4633      	mov	r3, r6
 8019a3a:	2278      	movs	r2, #120	; 0x78
 8019a3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8019a40:	9306      	str	r3, [sp, #24]
 8019a42:	f647 0330 	movw	r3, #30768	; 0x7830
 8019a46:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8019a4a:	4ba8      	ldr	r3, [pc, #672]	; (8019cec <_vfprintf_r+0xdac>)
 8019a4c:	9316      	str	r3, [sp, #88]	; 0x58
 8019a4e:	2700      	movs	r7, #0
 8019a50:	f04b 0b02 	orr.w	fp, fp, #2
 8019a54:	2302      	movs	r3, #2
 8019a56:	9207      	str	r2, [sp, #28]
 8019a58:	e7c6      	b.n	80199e8 <_vfprintf_r+0xaa8>
 8019a5a:	4632      	mov	r2, r6
 8019a5c:	2500      	movs	r5, #0
 8019a5e:	f852 3b04 	ldr.w	r3, [r2], #4
 8019a62:	9303      	str	r3, [sp, #12]
 8019a64:	f1b8 3fff 	cmp.w	r8, #4294967295
 8019a68:	9206      	str	r2, [sp, #24]
 8019a6a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8019a6e:	d010      	beq.n	8019a92 <_vfprintf_r+0xb52>
 8019a70:	9803      	ldr	r0, [sp, #12]
 8019a72:	4642      	mov	r2, r8
 8019a74:	4629      	mov	r1, r5
 8019a76:	f7e6 fbd3 	bl	8000220 <memchr>
 8019a7a:	9004      	str	r0, [sp, #16]
 8019a7c:	2800      	cmp	r0, #0
 8019a7e:	f000 80df 	beq.w	8019c40 <_vfprintf_r+0xd00>
 8019a82:	9a03      	ldr	r2, [sp, #12]
 8019a84:	9504      	str	r5, [sp, #16]
 8019a86:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8019a8a:	eba0 0802 	sub.w	r8, r0, r2
 8019a8e:	462e      	mov	r6, r5
 8019a90:	e5c2      	b.n	8019618 <_vfprintf_r+0x6d8>
 8019a92:	9803      	ldr	r0, [sp, #12]
 8019a94:	f7e6 fbbc 	bl	8000210 <strlen>
 8019a98:	462e      	mov	r6, r5
 8019a9a:	4680      	mov	r8, r0
 8019a9c:	9504      	str	r5, [sp, #16]
 8019a9e:	4633      	mov	r3, r6
 8019aa0:	e45e      	b.n	8019360 <_vfprintf_r+0x420>
 8019aa2:	f04b 0b10 	orr.w	fp, fp, #16
 8019aa6:	f01b 0f20 	tst.w	fp, #32
 8019aaa:	d007      	beq.n	8019abc <_vfprintf_r+0xb7c>
 8019aac:	3607      	adds	r6, #7
 8019aae:	f026 0307 	bic.w	r3, r6, #7
 8019ab2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8019ab6:	9306      	str	r3, [sp, #24]
 8019ab8:	2301      	movs	r3, #1
 8019aba:	e795      	b.n	80199e8 <_vfprintf_r+0xaa8>
 8019abc:	1d33      	adds	r3, r6, #4
 8019abe:	f01b 0f10 	tst.w	fp, #16
 8019ac2:	9306      	str	r3, [sp, #24]
 8019ac4:	d001      	beq.n	8019aca <_vfprintf_r+0xb8a>
 8019ac6:	6836      	ldr	r6, [r6, #0]
 8019ac8:	e003      	b.n	8019ad2 <_vfprintf_r+0xb92>
 8019aca:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8019ace:	d002      	beq.n	8019ad6 <_vfprintf_r+0xb96>
 8019ad0:	8836      	ldrh	r6, [r6, #0]
 8019ad2:	2700      	movs	r7, #0
 8019ad4:	e7f0      	b.n	8019ab8 <_vfprintf_r+0xb78>
 8019ad6:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8019ada:	d0f4      	beq.n	8019ac6 <_vfprintf_r+0xb86>
 8019adc:	7836      	ldrb	r6, [r6, #0]
 8019ade:	e7f8      	b.n	8019ad2 <_vfprintf_r+0xb92>
 8019ae0:	4b83      	ldr	r3, [pc, #524]	; (8019cf0 <_vfprintf_r+0xdb0>)
 8019ae2:	9316      	str	r3, [sp, #88]	; 0x58
 8019ae4:	f01b 0f20 	tst.w	fp, #32
 8019ae8:	d019      	beq.n	8019b1e <_vfprintf_r+0xbde>
 8019aea:	3607      	adds	r6, #7
 8019aec:	f026 0307 	bic.w	r3, r6, #7
 8019af0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8019af4:	9306      	str	r3, [sp, #24]
 8019af6:	f01b 0f01 	tst.w	fp, #1
 8019afa:	d00a      	beq.n	8019b12 <_vfprintf_r+0xbd2>
 8019afc:	ea56 0307 	orrs.w	r3, r6, r7
 8019b00:	d007      	beq.n	8019b12 <_vfprintf_r+0xbd2>
 8019b02:	2330      	movs	r3, #48	; 0x30
 8019b04:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8019b08:	9b07      	ldr	r3, [sp, #28]
 8019b0a:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8019b0e:	f04b 0b02 	orr.w	fp, fp, #2
 8019b12:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8019b16:	2302      	movs	r3, #2
 8019b18:	e766      	b.n	80199e8 <_vfprintf_r+0xaa8>
 8019b1a:	4b74      	ldr	r3, [pc, #464]	; (8019cec <_vfprintf_r+0xdac>)
 8019b1c:	e7e1      	b.n	8019ae2 <_vfprintf_r+0xba2>
 8019b1e:	1d33      	adds	r3, r6, #4
 8019b20:	f01b 0f10 	tst.w	fp, #16
 8019b24:	9306      	str	r3, [sp, #24]
 8019b26:	d001      	beq.n	8019b2c <_vfprintf_r+0xbec>
 8019b28:	6836      	ldr	r6, [r6, #0]
 8019b2a:	e003      	b.n	8019b34 <_vfprintf_r+0xbf4>
 8019b2c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8019b30:	d002      	beq.n	8019b38 <_vfprintf_r+0xbf8>
 8019b32:	8836      	ldrh	r6, [r6, #0]
 8019b34:	2700      	movs	r7, #0
 8019b36:	e7de      	b.n	8019af6 <_vfprintf_r+0xbb6>
 8019b38:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8019b3c:	d0f4      	beq.n	8019b28 <_vfprintf_r+0xbe8>
 8019b3e:	7836      	ldrb	r6, [r6, #0]
 8019b40:	e7f8      	b.n	8019b34 <_vfprintf_r+0xbf4>
 8019b42:	2f00      	cmp	r7, #0
 8019b44:	bf08      	it	eq
 8019b46:	2e0a      	cmpeq	r6, #10
 8019b48:	d206      	bcs.n	8019b58 <_vfprintf_r+0xc18>
 8019b4a:	3630      	adds	r6, #48	; 0x30
 8019b4c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8019b50:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8019b54:	f000 bc23 	b.w	801a39e <_vfprintf_r+0x145e>
 8019b58:	2300      	movs	r3, #0
 8019b5a:	9305      	str	r3, [sp, #20]
 8019b5c:	9b04      	ldr	r3, [sp, #16]
 8019b5e:	ad4e      	add	r5, sp, #312	; 0x138
 8019b60:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8019b64:	1e6b      	subs	r3, r5, #1
 8019b66:	9303      	str	r3, [sp, #12]
 8019b68:	220a      	movs	r2, #10
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	4630      	mov	r0, r6
 8019b6e:	4639      	mov	r1, r7
 8019b70:	f7e7 f844 	bl	8000bfc <__aeabi_uldivmod>
 8019b74:	9b05      	ldr	r3, [sp, #20]
 8019b76:	3230      	adds	r2, #48	; 0x30
 8019b78:	3301      	adds	r3, #1
 8019b7a:	f805 2c01 	strb.w	r2, [r5, #-1]
 8019b7e:	9305      	str	r3, [sp, #20]
 8019b80:	f1bb 0f00 	cmp.w	fp, #0
 8019b84:	d019      	beq.n	8019bba <_vfprintf_r+0xc7a>
 8019b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b88:	9a05      	ldr	r2, [sp, #20]
 8019b8a:	781b      	ldrb	r3, [r3, #0]
 8019b8c:	429a      	cmp	r2, r3
 8019b8e:	d114      	bne.n	8019bba <_vfprintf_r+0xc7a>
 8019b90:	2aff      	cmp	r2, #255	; 0xff
 8019b92:	d012      	beq.n	8019bba <_vfprintf_r+0xc7a>
 8019b94:	2f00      	cmp	r7, #0
 8019b96:	bf08      	it	eq
 8019b98:	2e0a      	cmpeq	r6, #10
 8019b9a:	d30e      	bcc.n	8019bba <_vfprintf_r+0xc7a>
 8019b9c:	9b03      	ldr	r3, [sp, #12]
 8019b9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ba0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019ba2:	1a9b      	subs	r3, r3, r2
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	9303      	str	r3, [sp, #12]
 8019ba8:	f002 fc99 	bl	801c4de <strncpy>
 8019bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bae:	785d      	ldrb	r5, [r3, #1]
 8019bb0:	b1e5      	cbz	r5, 8019bec <_vfprintf_r+0xcac>
 8019bb2:	3301      	adds	r3, #1
 8019bb4:	930a      	str	r3, [sp, #40]	; 0x28
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	9305      	str	r3, [sp, #20]
 8019bba:	220a      	movs	r2, #10
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	4630      	mov	r0, r6
 8019bc0:	4639      	mov	r1, r7
 8019bc2:	f7e7 f81b 	bl	8000bfc <__aeabi_uldivmod>
 8019bc6:	2f00      	cmp	r7, #0
 8019bc8:	bf08      	it	eq
 8019bca:	2e0a      	cmpeq	r6, #10
 8019bcc:	d20a      	bcs.n	8019be4 <_vfprintf_r+0xca4>
 8019bce:	9b03      	ldr	r3, [sp, #12]
 8019bd0:	f8dd b010 	ldr.w	fp, [sp, #16]
 8019bd4:	aa4e      	add	r2, sp, #312	; 0x138
 8019bd6:	4646      	mov	r6, r8
 8019bd8:	eba2 0803 	sub.w	r8, r2, r3
 8019bdc:	2300      	movs	r3, #0
 8019bde:	9304      	str	r3, [sp, #16]
 8019be0:	f7ff bbbe 	b.w	8019360 <_vfprintf_r+0x420>
 8019be4:	9d03      	ldr	r5, [sp, #12]
 8019be6:	4606      	mov	r6, r0
 8019be8:	460f      	mov	r7, r1
 8019bea:	e7bb      	b.n	8019b64 <_vfprintf_r+0xc24>
 8019bec:	9505      	str	r5, [sp, #20]
 8019bee:	e7e4      	b.n	8019bba <_vfprintf_r+0xc7a>
 8019bf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019bf2:	f006 030f 	and.w	r3, r6, #15
 8019bf6:	5cd3      	ldrb	r3, [r2, r3]
 8019bf8:	9a03      	ldr	r2, [sp, #12]
 8019bfa:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8019bfe:	0933      	lsrs	r3, r6, #4
 8019c00:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8019c04:	9203      	str	r2, [sp, #12]
 8019c06:	093a      	lsrs	r2, r7, #4
 8019c08:	461e      	mov	r6, r3
 8019c0a:	4617      	mov	r7, r2
 8019c0c:	ea56 0307 	orrs.w	r3, r6, r7
 8019c10:	d1ee      	bne.n	8019bf0 <_vfprintf_r+0xcb0>
 8019c12:	e7dc      	b.n	8019bce <_vfprintf_r+0xc8e>
 8019c14:	b933      	cbnz	r3, 8019c24 <_vfprintf_r+0xce4>
 8019c16:	f01b 0f01 	tst.w	fp, #1
 8019c1a:	d003      	beq.n	8019c24 <_vfprintf_r+0xce4>
 8019c1c:	2330      	movs	r3, #48	; 0x30
 8019c1e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8019c22:	e795      	b.n	8019b50 <_vfprintf_r+0xc10>
 8019c24:	ab4e      	add	r3, sp, #312	; 0x138
 8019c26:	e3ba      	b.n	801a39e <_vfprintf_r+0x145e>
 8019c28:	9b07      	ldr	r3, [sp, #28]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	f000 837d 	beq.w	801a32a <_vfprintf_r+0x13ea>
 8019c30:	2000      	movs	r0, #0
 8019c32:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8019c36:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8019c3a:	9606      	str	r6, [sp, #24]
 8019c3c:	f7ff bb1e 	b.w	801927c <_vfprintf_r+0x33c>
 8019c40:	9e04      	ldr	r6, [sp, #16]
 8019c42:	e72c      	b.n	8019a9e <_vfprintf_r+0xb5e>
 8019c44:	2010      	movs	r0, #16
 8019c46:	4402      	add	r2, r0
 8019c48:	2b07      	cmp	r3, #7
 8019c4a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8019c4e:	6060      	str	r0, [r4, #4]
 8019c50:	dd08      	ble.n	8019c64 <_vfprintf_r+0xd24>
 8019c52:	aa22      	add	r2, sp, #136	; 0x88
 8019c54:	4649      	mov	r1, r9
 8019c56:	4650      	mov	r0, sl
 8019c58:	f003 fd59 	bl	801d70e <__sprint_r>
 8019c5c:	2800      	cmp	r0, #0
 8019c5e:	f040 8342 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019c62:	a925      	add	r1, sp, #148	; 0x94
 8019c64:	3f10      	subs	r7, #16
 8019c66:	460c      	mov	r4, r1
 8019c68:	e4f1      	b.n	801964e <_vfprintf_r+0x70e>
 8019c6a:	460c      	mov	r4, r1
 8019c6c:	e50a      	b.n	8019684 <_vfprintf_r+0x744>
 8019c6e:	aa22      	add	r2, sp, #136	; 0x88
 8019c70:	4649      	mov	r1, r9
 8019c72:	4650      	mov	r0, sl
 8019c74:	f003 fd4b 	bl	801d70e <__sprint_r>
 8019c78:	2800      	cmp	r0, #0
 8019c7a:	f040 8334 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019c7e:	ac25      	add	r4, sp, #148	; 0x94
 8019c80:	e512      	b.n	80196a8 <_vfprintf_r+0x768>
 8019c82:	aa22      	add	r2, sp, #136	; 0x88
 8019c84:	4649      	mov	r1, r9
 8019c86:	4650      	mov	r0, sl
 8019c88:	f003 fd41 	bl	801d70e <__sprint_r>
 8019c8c:	2800      	cmp	r0, #0
 8019c8e:	f040 832a 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019c92:	ac25      	add	r4, sp, #148	; 0x94
 8019c94:	e518      	b.n	80196c8 <_vfprintf_r+0x788>
 8019c96:	2010      	movs	r0, #16
 8019c98:	4402      	add	r2, r0
 8019c9a:	2b07      	cmp	r3, #7
 8019c9c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8019ca0:	6060      	str	r0, [r4, #4]
 8019ca2:	dd08      	ble.n	8019cb6 <_vfprintf_r+0xd76>
 8019ca4:	aa22      	add	r2, sp, #136	; 0x88
 8019ca6:	4649      	mov	r1, r9
 8019ca8:	4650      	mov	r0, sl
 8019caa:	f003 fd30 	bl	801d70e <__sprint_r>
 8019cae:	2800      	cmp	r0, #0
 8019cb0:	f040 8319 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019cb4:	a925      	add	r1, sp, #148	; 0x94
 8019cb6:	3f10      	subs	r7, #16
 8019cb8:	460c      	mov	r4, r1
 8019cba:	e50d      	b.n	80196d8 <_vfprintf_r+0x798>
 8019cbc:	460c      	mov	r4, r1
 8019cbe:	e526      	b.n	801970e <_vfprintf_r+0x7ce>
 8019cc0:	2010      	movs	r0, #16
 8019cc2:	4402      	add	r2, r0
 8019cc4:	2b07      	cmp	r3, #7
 8019cc6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8019cca:	6060      	str	r0, [r4, #4]
 8019ccc:	dd08      	ble.n	8019ce0 <_vfprintf_r+0xda0>
 8019cce:	aa22      	add	r2, sp, #136	; 0x88
 8019cd0:	4649      	mov	r1, r9
 8019cd2:	4650      	mov	r0, sl
 8019cd4:	f003 fd1b 	bl	801d70e <__sprint_r>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	f040 8304 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019cde:	a925      	add	r1, sp, #148	; 0x94
 8019ce0:	3e10      	subs	r6, #16
 8019ce2:	460c      	mov	r4, r1
 8019ce4:	e518      	b.n	8019718 <_vfprintf_r+0x7d8>
 8019ce6:	460c      	mov	r4, r1
 8019ce8:	e530      	b.n	801974c <_vfprintf_r+0x80c>
 8019cea:	bf00      	nop
 8019cec:	08023840 	.word	0x08023840
 8019cf0:	08023851 	.word	0x08023851
 8019cf4:	9b07      	ldr	r3, [sp, #28]
 8019cf6:	2b65      	cmp	r3, #101	; 0x65
 8019cf8:	f340 8242 	ble.w	801a180 <_vfprintf_r+0x1240>
 8019cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019d00:	2200      	movs	r2, #0
 8019d02:	2300      	movs	r3, #0
 8019d04:	f7e6 ff0a 	bl	8000b1c <__aeabi_dcmpeq>
 8019d08:	2800      	cmp	r0, #0
 8019d0a:	d068      	beq.n	8019dde <_vfprintf_r+0xe9e>
 8019d0c:	4b6d      	ldr	r3, [pc, #436]	; (8019ec4 <_vfprintf_r+0xf84>)
 8019d0e:	6023      	str	r3, [r4, #0]
 8019d10:	2301      	movs	r3, #1
 8019d12:	441e      	add	r6, r3
 8019d14:	6063      	str	r3, [r4, #4]
 8019d16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019d18:	9624      	str	r6, [sp, #144]	; 0x90
 8019d1a:	3301      	adds	r3, #1
 8019d1c:	2b07      	cmp	r3, #7
 8019d1e:	9323      	str	r3, [sp, #140]	; 0x8c
 8019d20:	dc37      	bgt.n	8019d92 <_vfprintf_r+0xe52>
 8019d22:	3408      	adds	r4, #8
 8019d24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019d26:	9a05      	ldr	r2, [sp, #20]
 8019d28:	4293      	cmp	r3, r2
 8019d2a:	db03      	blt.n	8019d34 <_vfprintf_r+0xdf4>
 8019d2c:	f01b 0f01 	tst.w	fp, #1
 8019d30:	f43f ad2b 	beq.w	801978a <_vfprintf_r+0x84a>
 8019d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019d36:	6023      	str	r3, [r4, #0]
 8019d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d3c:	6063      	str	r3, [r4, #4]
 8019d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019d40:	4413      	add	r3, r2
 8019d42:	9324      	str	r3, [sp, #144]	; 0x90
 8019d44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019d46:	3301      	adds	r3, #1
 8019d48:	2b07      	cmp	r3, #7
 8019d4a:	9323      	str	r3, [sp, #140]	; 0x8c
 8019d4c:	dc2b      	bgt.n	8019da6 <_vfprintf_r+0xe66>
 8019d4e:	3408      	adds	r4, #8
 8019d50:	9b05      	ldr	r3, [sp, #20]
 8019d52:	1e5d      	subs	r5, r3, #1
 8019d54:	2d00      	cmp	r5, #0
 8019d56:	f77f ad18 	ble.w	801978a <_vfprintf_r+0x84a>
 8019d5a:	4e5b      	ldr	r6, [pc, #364]	; (8019ec8 <_vfprintf_r+0xf88>)
 8019d5c:	2710      	movs	r7, #16
 8019d5e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8019d62:	2d10      	cmp	r5, #16
 8019d64:	f103 0301 	add.w	r3, r3, #1
 8019d68:	f104 0108 	add.w	r1, r4, #8
 8019d6c:	6026      	str	r6, [r4, #0]
 8019d6e:	dc24      	bgt.n	8019dba <_vfprintf_r+0xe7a>
 8019d70:	6065      	str	r5, [r4, #4]
 8019d72:	2b07      	cmp	r3, #7
 8019d74:	4415      	add	r5, r2
 8019d76:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8019d7a:	f340 8293 	ble.w	801a2a4 <_vfprintf_r+0x1364>
 8019d7e:	aa22      	add	r2, sp, #136	; 0x88
 8019d80:	4649      	mov	r1, r9
 8019d82:	4650      	mov	r0, sl
 8019d84:	f003 fcc3 	bl	801d70e <__sprint_r>
 8019d88:	2800      	cmp	r0, #0
 8019d8a:	f040 82ac 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019d8e:	ac25      	add	r4, sp, #148	; 0x94
 8019d90:	e4fb      	b.n	801978a <_vfprintf_r+0x84a>
 8019d92:	aa22      	add	r2, sp, #136	; 0x88
 8019d94:	4649      	mov	r1, r9
 8019d96:	4650      	mov	r0, sl
 8019d98:	f003 fcb9 	bl	801d70e <__sprint_r>
 8019d9c:	2800      	cmp	r0, #0
 8019d9e:	f040 82a2 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019da2:	ac25      	add	r4, sp, #148	; 0x94
 8019da4:	e7be      	b.n	8019d24 <_vfprintf_r+0xde4>
 8019da6:	aa22      	add	r2, sp, #136	; 0x88
 8019da8:	4649      	mov	r1, r9
 8019daa:	4650      	mov	r0, sl
 8019dac:	f003 fcaf 	bl	801d70e <__sprint_r>
 8019db0:	2800      	cmp	r0, #0
 8019db2:	f040 8298 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019db6:	ac25      	add	r4, sp, #148	; 0x94
 8019db8:	e7ca      	b.n	8019d50 <_vfprintf_r+0xe10>
 8019dba:	3210      	adds	r2, #16
 8019dbc:	2b07      	cmp	r3, #7
 8019dbe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8019dc2:	6067      	str	r7, [r4, #4]
 8019dc4:	dd08      	ble.n	8019dd8 <_vfprintf_r+0xe98>
 8019dc6:	aa22      	add	r2, sp, #136	; 0x88
 8019dc8:	4649      	mov	r1, r9
 8019dca:	4650      	mov	r0, sl
 8019dcc:	f003 fc9f 	bl	801d70e <__sprint_r>
 8019dd0:	2800      	cmp	r0, #0
 8019dd2:	f040 8288 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019dd6:	a925      	add	r1, sp, #148	; 0x94
 8019dd8:	3d10      	subs	r5, #16
 8019dda:	460c      	mov	r4, r1
 8019ddc:	e7bf      	b.n	8019d5e <_vfprintf_r+0xe1e>
 8019dde:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	dc73      	bgt.n	8019ecc <_vfprintf_r+0xf8c>
 8019de4:	4b37      	ldr	r3, [pc, #220]	; (8019ec4 <_vfprintf_r+0xf84>)
 8019de6:	6023      	str	r3, [r4, #0]
 8019de8:	2301      	movs	r3, #1
 8019dea:	441e      	add	r6, r3
 8019dec:	6063      	str	r3, [r4, #4]
 8019dee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019df0:	9624      	str	r6, [sp, #144]	; 0x90
 8019df2:	3301      	adds	r3, #1
 8019df4:	2b07      	cmp	r3, #7
 8019df6:	9323      	str	r3, [sp, #140]	; 0x8c
 8019df8:	dc3d      	bgt.n	8019e76 <_vfprintf_r+0xf36>
 8019dfa:	3408      	adds	r4, #8
 8019dfc:	9905      	ldr	r1, [sp, #20]
 8019dfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019e00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019e02:	430a      	orrs	r2, r1
 8019e04:	f00b 0101 	and.w	r1, fp, #1
 8019e08:	430a      	orrs	r2, r1
 8019e0a:	f43f acbe 	beq.w	801978a <_vfprintf_r+0x84a>
 8019e0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019e10:	6022      	str	r2, [r4, #0]
 8019e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e14:	6062      	str	r2, [r4, #4]
 8019e16:	4413      	add	r3, r2
 8019e18:	9324      	str	r3, [sp, #144]	; 0x90
 8019e1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019e1c:	3301      	adds	r3, #1
 8019e1e:	2b07      	cmp	r3, #7
 8019e20:	9323      	str	r3, [sp, #140]	; 0x8c
 8019e22:	dc32      	bgt.n	8019e8a <_vfprintf_r+0xf4a>
 8019e24:	3408      	adds	r4, #8
 8019e26:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8019e28:	2d00      	cmp	r5, #0
 8019e2a:	da1b      	bge.n	8019e64 <_vfprintf_r+0xf24>
 8019e2c:	4e26      	ldr	r6, [pc, #152]	; (8019ec8 <_vfprintf_r+0xf88>)
 8019e2e:	426d      	negs	r5, r5
 8019e30:	4623      	mov	r3, r4
 8019e32:	2710      	movs	r7, #16
 8019e34:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8019e38:	2d10      	cmp	r5, #16
 8019e3a:	f102 0201 	add.w	r2, r2, #1
 8019e3e:	f104 0408 	add.w	r4, r4, #8
 8019e42:	601e      	str	r6, [r3, #0]
 8019e44:	dc2b      	bgt.n	8019e9e <_vfprintf_r+0xf5e>
 8019e46:	605d      	str	r5, [r3, #4]
 8019e48:	2a07      	cmp	r2, #7
 8019e4a:	440d      	add	r5, r1
 8019e4c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8019e50:	dd08      	ble.n	8019e64 <_vfprintf_r+0xf24>
 8019e52:	aa22      	add	r2, sp, #136	; 0x88
 8019e54:	4649      	mov	r1, r9
 8019e56:	4650      	mov	r0, sl
 8019e58:	f003 fc59 	bl	801d70e <__sprint_r>
 8019e5c:	2800      	cmp	r0, #0
 8019e5e:	f040 8242 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019e62:	ac25      	add	r4, sp, #148	; 0x94
 8019e64:	9b03      	ldr	r3, [sp, #12]
 8019e66:	6023      	str	r3, [r4, #0]
 8019e68:	9b05      	ldr	r3, [sp, #20]
 8019e6a:	9a05      	ldr	r2, [sp, #20]
 8019e6c:	6063      	str	r3, [r4, #4]
 8019e6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019e70:	4413      	add	r3, r2
 8019e72:	9324      	str	r3, [sp, #144]	; 0x90
 8019e74:	e482      	b.n	801977c <_vfprintf_r+0x83c>
 8019e76:	aa22      	add	r2, sp, #136	; 0x88
 8019e78:	4649      	mov	r1, r9
 8019e7a:	4650      	mov	r0, sl
 8019e7c:	f003 fc47 	bl	801d70e <__sprint_r>
 8019e80:	2800      	cmp	r0, #0
 8019e82:	f040 8230 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019e86:	ac25      	add	r4, sp, #148	; 0x94
 8019e88:	e7b8      	b.n	8019dfc <_vfprintf_r+0xebc>
 8019e8a:	aa22      	add	r2, sp, #136	; 0x88
 8019e8c:	4649      	mov	r1, r9
 8019e8e:	4650      	mov	r0, sl
 8019e90:	f003 fc3d 	bl	801d70e <__sprint_r>
 8019e94:	2800      	cmp	r0, #0
 8019e96:	f040 8226 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019e9a:	ac25      	add	r4, sp, #148	; 0x94
 8019e9c:	e7c3      	b.n	8019e26 <_vfprintf_r+0xee6>
 8019e9e:	3110      	adds	r1, #16
 8019ea0:	2a07      	cmp	r2, #7
 8019ea2:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8019ea6:	605f      	str	r7, [r3, #4]
 8019ea8:	dd08      	ble.n	8019ebc <_vfprintf_r+0xf7c>
 8019eaa:	aa22      	add	r2, sp, #136	; 0x88
 8019eac:	4649      	mov	r1, r9
 8019eae:	4650      	mov	r0, sl
 8019eb0:	f003 fc2d 	bl	801d70e <__sprint_r>
 8019eb4:	2800      	cmp	r0, #0
 8019eb6:	f040 8216 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019eba:	ac25      	add	r4, sp, #148	; 0x94
 8019ebc:	3d10      	subs	r5, #16
 8019ebe:	4623      	mov	r3, r4
 8019ec0:	e7b8      	b.n	8019e34 <_vfprintf_r+0xef4>
 8019ec2:	bf00      	nop
 8019ec4:	08023862 	.word	0x08023862
 8019ec8:	08023874 	.word	0x08023874
 8019ecc:	9b05      	ldr	r3, [sp, #20]
 8019ece:	42ab      	cmp	r3, r5
 8019ed0:	bfa8      	it	ge
 8019ed2:	462b      	movge	r3, r5
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	461f      	mov	r7, r3
 8019ed8:	dd0b      	ble.n	8019ef2 <_vfprintf_r+0xfb2>
 8019eda:	9b03      	ldr	r3, [sp, #12]
 8019edc:	e9c4 3700 	strd	r3, r7, [r4]
 8019ee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019ee2:	3301      	adds	r3, #1
 8019ee4:	443e      	add	r6, r7
 8019ee6:	2b07      	cmp	r3, #7
 8019ee8:	9624      	str	r6, [sp, #144]	; 0x90
 8019eea:	9323      	str	r3, [sp, #140]	; 0x8c
 8019eec:	f300 808c 	bgt.w	801a008 <_vfprintf_r+0x10c8>
 8019ef0:	3408      	adds	r4, #8
 8019ef2:	2f00      	cmp	r7, #0
 8019ef4:	bfac      	ite	ge
 8019ef6:	1bee      	subge	r6, r5, r7
 8019ef8:	462e      	movlt	r6, r5
 8019efa:	2e00      	cmp	r6, #0
 8019efc:	dd1c      	ble.n	8019f38 <_vfprintf_r+0xff8>
 8019efe:	4f9f      	ldr	r7, [pc, #636]	; (801a17c <_vfprintf_r+0x123c>)
 8019f00:	f04f 0810 	mov.w	r8, #16
 8019f04:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8019f08:	2e10      	cmp	r6, #16
 8019f0a:	f103 0301 	add.w	r3, r3, #1
 8019f0e:	f104 0108 	add.w	r1, r4, #8
 8019f12:	6027      	str	r7, [r4, #0]
 8019f14:	f300 8082 	bgt.w	801a01c <_vfprintf_r+0x10dc>
 8019f18:	6066      	str	r6, [r4, #4]
 8019f1a:	2b07      	cmp	r3, #7
 8019f1c:	4416      	add	r6, r2
 8019f1e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8019f22:	f340 808e 	ble.w	801a042 <_vfprintf_r+0x1102>
 8019f26:	aa22      	add	r2, sp, #136	; 0x88
 8019f28:	4649      	mov	r1, r9
 8019f2a:	4650      	mov	r0, sl
 8019f2c:	f003 fbef 	bl	801d70e <__sprint_r>
 8019f30:	2800      	cmp	r0, #0
 8019f32:	f040 81d8 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 8019f36:	ac25      	add	r4, sp, #148	; 0x94
 8019f38:	9b03      	ldr	r3, [sp, #12]
 8019f3a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8019f3e:	441d      	add	r5, r3
 8019f40:	d00d      	beq.n	8019f5e <_vfprintf_r+0x101e>
 8019f42:	4e8e      	ldr	r6, [pc, #568]	; (801a17c <_vfprintf_r+0x123c>)
 8019f44:	2710      	movs	r7, #16
 8019f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d17c      	bne.n	801a046 <_vfprintf_r+0x1106>
 8019f4c:	9b08      	ldr	r3, [sp, #32]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d17c      	bne.n	801a04c <_vfprintf_r+0x110c>
 8019f52:	9b03      	ldr	r3, [sp, #12]
 8019f54:	9a05      	ldr	r2, [sp, #20]
 8019f56:	4413      	add	r3, r2
 8019f58:	429d      	cmp	r5, r3
 8019f5a:	bf28      	it	cs
 8019f5c:	461d      	movcs	r5, r3
 8019f5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019f60:	9a05      	ldr	r2, [sp, #20]
 8019f62:	4293      	cmp	r3, r2
 8019f64:	db02      	blt.n	8019f6c <_vfprintf_r+0x102c>
 8019f66:	f01b 0f01 	tst.w	fp, #1
 8019f6a:	d00e      	beq.n	8019f8a <_vfprintf_r+0x104a>
 8019f6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019f6e:	6023      	str	r3, [r4, #0]
 8019f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019f74:	6063      	str	r3, [r4, #4]
 8019f76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f78:	4413      	add	r3, r2
 8019f7a:	9324      	str	r3, [sp, #144]	; 0x90
 8019f7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019f7e:	3301      	adds	r3, #1
 8019f80:	2b07      	cmp	r3, #7
 8019f82:	9323      	str	r3, [sp, #140]	; 0x8c
 8019f84:	f300 80e5 	bgt.w	801a152 <_vfprintf_r+0x1212>
 8019f88:	3408      	adds	r4, #8
 8019f8a:	9905      	ldr	r1, [sp, #20]
 8019f8c:	9b03      	ldr	r3, [sp, #12]
 8019f8e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8019f90:	440b      	add	r3, r1
 8019f92:	1b8e      	subs	r6, r1, r6
 8019f94:	1b5a      	subs	r2, r3, r5
 8019f96:	4296      	cmp	r6, r2
 8019f98:	bfa8      	it	ge
 8019f9a:	4616      	movge	r6, r2
 8019f9c:	2e00      	cmp	r6, #0
 8019f9e:	dd0b      	ble.n	8019fb8 <_vfprintf_r+0x1078>
 8019fa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019fa2:	4433      	add	r3, r6
 8019fa4:	9324      	str	r3, [sp, #144]	; 0x90
 8019fa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019fa8:	3301      	adds	r3, #1
 8019faa:	2b07      	cmp	r3, #7
 8019fac:	e9c4 5600 	strd	r5, r6, [r4]
 8019fb0:	9323      	str	r3, [sp, #140]	; 0x8c
 8019fb2:	f300 80d8 	bgt.w	801a166 <_vfprintf_r+0x1226>
 8019fb6:	3408      	adds	r4, #8
 8019fb8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8019fba:	9b05      	ldr	r3, [sp, #20]
 8019fbc:	2e00      	cmp	r6, #0
 8019fbe:	eba3 0505 	sub.w	r5, r3, r5
 8019fc2:	bfa8      	it	ge
 8019fc4:	1bad      	subge	r5, r5, r6
 8019fc6:	2d00      	cmp	r5, #0
 8019fc8:	f77f abdf 	ble.w	801978a <_vfprintf_r+0x84a>
 8019fcc:	4e6b      	ldr	r6, [pc, #428]	; (801a17c <_vfprintf_r+0x123c>)
 8019fce:	2710      	movs	r7, #16
 8019fd0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8019fd4:	2d10      	cmp	r5, #16
 8019fd6:	f103 0301 	add.w	r3, r3, #1
 8019fda:	f104 0108 	add.w	r1, r4, #8
 8019fde:	6026      	str	r6, [r4, #0]
 8019fe0:	f77f aec6 	ble.w	8019d70 <_vfprintf_r+0xe30>
 8019fe4:	3210      	adds	r2, #16
 8019fe6:	2b07      	cmp	r3, #7
 8019fe8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8019fec:	6067      	str	r7, [r4, #4]
 8019fee:	dd08      	ble.n	801a002 <_vfprintf_r+0x10c2>
 8019ff0:	aa22      	add	r2, sp, #136	; 0x88
 8019ff2:	4649      	mov	r1, r9
 8019ff4:	4650      	mov	r0, sl
 8019ff6:	f003 fb8a 	bl	801d70e <__sprint_r>
 8019ffa:	2800      	cmp	r0, #0
 8019ffc:	f040 8173 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a000:	a925      	add	r1, sp, #148	; 0x94
 801a002:	3d10      	subs	r5, #16
 801a004:	460c      	mov	r4, r1
 801a006:	e7e3      	b.n	8019fd0 <_vfprintf_r+0x1090>
 801a008:	aa22      	add	r2, sp, #136	; 0x88
 801a00a:	4649      	mov	r1, r9
 801a00c:	4650      	mov	r0, sl
 801a00e:	f003 fb7e 	bl	801d70e <__sprint_r>
 801a012:	2800      	cmp	r0, #0
 801a014:	f040 8167 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a018:	ac25      	add	r4, sp, #148	; 0x94
 801a01a:	e76a      	b.n	8019ef2 <_vfprintf_r+0xfb2>
 801a01c:	3210      	adds	r2, #16
 801a01e:	2b07      	cmp	r3, #7
 801a020:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801a024:	f8c4 8004 	str.w	r8, [r4, #4]
 801a028:	dd08      	ble.n	801a03c <_vfprintf_r+0x10fc>
 801a02a:	aa22      	add	r2, sp, #136	; 0x88
 801a02c:	4649      	mov	r1, r9
 801a02e:	4650      	mov	r0, sl
 801a030:	f003 fb6d 	bl	801d70e <__sprint_r>
 801a034:	2800      	cmp	r0, #0
 801a036:	f040 8156 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a03a:	a925      	add	r1, sp, #148	; 0x94
 801a03c:	3e10      	subs	r6, #16
 801a03e:	460c      	mov	r4, r1
 801a040:	e760      	b.n	8019f04 <_vfprintf_r+0xfc4>
 801a042:	460c      	mov	r4, r1
 801a044:	e778      	b.n	8019f38 <_vfprintf_r+0xff8>
 801a046:	9b08      	ldr	r3, [sp, #32]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d052      	beq.n	801a0f2 <_vfprintf_r+0x11b2>
 801a04c:	9b08      	ldr	r3, [sp, #32]
 801a04e:	3b01      	subs	r3, #1
 801a050:	9308      	str	r3, [sp, #32]
 801a052:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a054:	6023      	str	r3, [r4, #0]
 801a056:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a058:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a05a:	6063      	str	r3, [r4, #4]
 801a05c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a05e:	4413      	add	r3, r2
 801a060:	9324      	str	r3, [sp, #144]	; 0x90
 801a062:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801a064:	3301      	adds	r3, #1
 801a066:	2b07      	cmp	r3, #7
 801a068:	9323      	str	r3, [sp, #140]	; 0x8c
 801a06a:	dc49      	bgt.n	801a100 <_vfprintf_r+0x11c0>
 801a06c:	3408      	adds	r4, #8
 801a06e:	9b03      	ldr	r3, [sp, #12]
 801a070:	9a05      	ldr	r2, [sp, #20]
 801a072:	eb03 0802 	add.w	r8, r3, r2
 801a076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a078:	781b      	ldrb	r3, [r3, #0]
 801a07a:	eba8 0805 	sub.w	r8, r8, r5
 801a07e:	4598      	cmp	r8, r3
 801a080:	bfa8      	it	ge
 801a082:	4698      	movge	r8, r3
 801a084:	f1b8 0f00 	cmp.w	r8, #0
 801a088:	dd0a      	ble.n	801a0a0 <_vfprintf_r+0x1160>
 801a08a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a08c:	4443      	add	r3, r8
 801a08e:	9324      	str	r3, [sp, #144]	; 0x90
 801a090:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801a092:	3301      	adds	r3, #1
 801a094:	2b07      	cmp	r3, #7
 801a096:	e9c4 5800 	strd	r5, r8, [r4]
 801a09a:	9323      	str	r3, [sp, #140]	; 0x8c
 801a09c:	dc3a      	bgt.n	801a114 <_vfprintf_r+0x11d4>
 801a09e:	3408      	adds	r4, #8
 801a0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0a2:	781b      	ldrb	r3, [r3, #0]
 801a0a4:	f1b8 0f00 	cmp.w	r8, #0
 801a0a8:	bfac      	ite	ge
 801a0aa:	eba3 0808 	subge.w	r8, r3, r8
 801a0ae:	4698      	movlt	r8, r3
 801a0b0:	f1b8 0f00 	cmp.w	r8, #0
 801a0b4:	dd19      	ble.n	801a0ea <_vfprintf_r+0x11aa>
 801a0b6:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801a0ba:	f1b8 0f10 	cmp.w	r8, #16
 801a0be:	f102 0201 	add.w	r2, r2, #1
 801a0c2:	f104 0108 	add.w	r1, r4, #8
 801a0c6:	6026      	str	r6, [r4, #0]
 801a0c8:	dc2e      	bgt.n	801a128 <_vfprintf_r+0x11e8>
 801a0ca:	4443      	add	r3, r8
 801a0cc:	2a07      	cmp	r2, #7
 801a0ce:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801a0d2:	f8c4 8004 	str.w	r8, [r4, #4]
 801a0d6:	dd3a      	ble.n	801a14e <_vfprintf_r+0x120e>
 801a0d8:	aa22      	add	r2, sp, #136	; 0x88
 801a0da:	4649      	mov	r1, r9
 801a0dc:	4650      	mov	r0, sl
 801a0de:	f003 fb16 	bl	801d70e <__sprint_r>
 801a0e2:	2800      	cmp	r0, #0
 801a0e4:	f040 80ff 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a0e8:	ac25      	add	r4, sp, #148	; 0x94
 801a0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0ec:	781b      	ldrb	r3, [r3, #0]
 801a0ee:	441d      	add	r5, r3
 801a0f0:	e729      	b.n	8019f46 <_vfprintf_r+0x1006>
 801a0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0f4:	3b01      	subs	r3, #1
 801a0f6:	930a      	str	r3, [sp, #40]	; 0x28
 801a0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0fa:	3b01      	subs	r3, #1
 801a0fc:	9309      	str	r3, [sp, #36]	; 0x24
 801a0fe:	e7a8      	b.n	801a052 <_vfprintf_r+0x1112>
 801a100:	aa22      	add	r2, sp, #136	; 0x88
 801a102:	4649      	mov	r1, r9
 801a104:	4650      	mov	r0, sl
 801a106:	f003 fb02 	bl	801d70e <__sprint_r>
 801a10a:	2800      	cmp	r0, #0
 801a10c:	f040 80eb 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a110:	ac25      	add	r4, sp, #148	; 0x94
 801a112:	e7ac      	b.n	801a06e <_vfprintf_r+0x112e>
 801a114:	aa22      	add	r2, sp, #136	; 0x88
 801a116:	4649      	mov	r1, r9
 801a118:	4650      	mov	r0, sl
 801a11a:	f003 faf8 	bl	801d70e <__sprint_r>
 801a11e:	2800      	cmp	r0, #0
 801a120:	f040 80e1 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a124:	ac25      	add	r4, sp, #148	; 0x94
 801a126:	e7bb      	b.n	801a0a0 <_vfprintf_r+0x1160>
 801a128:	3310      	adds	r3, #16
 801a12a:	2a07      	cmp	r2, #7
 801a12c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801a130:	6067      	str	r7, [r4, #4]
 801a132:	dd08      	ble.n	801a146 <_vfprintf_r+0x1206>
 801a134:	aa22      	add	r2, sp, #136	; 0x88
 801a136:	4649      	mov	r1, r9
 801a138:	4650      	mov	r0, sl
 801a13a:	f003 fae8 	bl	801d70e <__sprint_r>
 801a13e:	2800      	cmp	r0, #0
 801a140:	f040 80d1 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a144:	a925      	add	r1, sp, #148	; 0x94
 801a146:	f1a8 0810 	sub.w	r8, r8, #16
 801a14a:	460c      	mov	r4, r1
 801a14c:	e7b3      	b.n	801a0b6 <_vfprintf_r+0x1176>
 801a14e:	460c      	mov	r4, r1
 801a150:	e7cb      	b.n	801a0ea <_vfprintf_r+0x11aa>
 801a152:	aa22      	add	r2, sp, #136	; 0x88
 801a154:	4649      	mov	r1, r9
 801a156:	4650      	mov	r0, sl
 801a158:	f003 fad9 	bl	801d70e <__sprint_r>
 801a15c:	2800      	cmp	r0, #0
 801a15e:	f040 80c2 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a162:	ac25      	add	r4, sp, #148	; 0x94
 801a164:	e711      	b.n	8019f8a <_vfprintf_r+0x104a>
 801a166:	aa22      	add	r2, sp, #136	; 0x88
 801a168:	4649      	mov	r1, r9
 801a16a:	4650      	mov	r0, sl
 801a16c:	f003 facf 	bl	801d70e <__sprint_r>
 801a170:	2800      	cmp	r0, #0
 801a172:	f040 80b8 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a176:	ac25      	add	r4, sp, #148	; 0x94
 801a178:	e71e      	b.n	8019fb8 <_vfprintf_r+0x1078>
 801a17a:	bf00      	nop
 801a17c:	08023874 	.word	0x08023874
 801a180:	9a05      	ldr	r2, [sp, #20]
 801a182:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801a184:	2a01      	cmp	r2, #1
 801a186:	9a03      	ldr	r2, [sp, #12]
 801a188:	6022      	str	r2, [r4, #0]
 801a18a:	f106 0601 	add.w	r6, r6, #1
 801a18e:	f103 0301 	add.w	r3, r3, #1
 801a192:	f04f 0201 	mov.w	r2, #1
 801a196:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801a19a:	f104 0508 	add.w	r5, r4, #8
 801a19e:	6062      	str	r2, [r4, #4]
 801a1a0:	dc02      	bgt.n	801a1a8 <_vfprintf_r+0x1268>
 801a1a2:	f01b 0f01 	tst.w	fp, #1
 801a1a6:	d078      	beq.n	801a29a <_vfprintf_r+0x135a>
 801a1a8:	2b07      	cmp	r3, #7
 801a1aa:	dd08      	ble.n	801a1be <_vfprintf_r+0x127e>
 801a1ac:	aa22      	add	r2, sp, #136	; 0x88
 801a1ae:	4649      	mov	r1, r9
 801a1b0:	4650      	mov	r0, sl
 801a1b2:	f003 faac 	bl	801d70e <__sprint_r>
 801a1b6:	2800      	cmp	r0, #0
 801a1b8:	f040 8095 	bne.w	801a2e6 <_vfprintf_r+0x13a6>
 801a1bc:	ad25      	add	r5, sp, #148	; 0x94
 801a1be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a1c0:	602b      	str	r3, [r5, #0]
 801a1c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a1c6:	606b      	str	r3, [r5, #4]
 801a1c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a1ca:	4413      	add	r3, r2
 801a1cc:	9324      	str	r3, [sp, #144]	; 0x90
 801a1ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801a1d0:	3301      	adds	r3, #1
 801a1d2:	2b07      	cmp	r3, #7
 801a1d4:	9323      	str	r3, [sp, #140]	; 0x8c
 801a1d6:	dc32      	bgt.n	801a23e <_vfprintf_r+0x12fe>
 801a1d8:	3508      	adds	r5, #8
 801a1da:	9b05      	ldr	r3, [sp, #20]
 801a1dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a1e0:	1e5c      	subs	r4, r3, #1
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	f7e6 fc99 	bl	8000b1c <__aeabi_dcmpeq>
 801a1ea:	2800      	cmp	r0, #0
 801a1ec:	d130      	bne.n	801a250 <_vfprintf_r+0x1310>
 801a1ee:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801a1f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a1f2:	9803      	ldr	r0, [sp, #12]
 801a1f4:	9a05      	ldr	r2, [sp, #20]
 801a1f6:	3101      	adds	r1, #1
 801a1f8:	3b01      	subs	r3, #1
 801a1fa:	3001      	adds	r0, #1
 801a1fc:	4413      	add	r3, r2
 801a1fe:	2907      	cmp	r1, #7
 801a200:	e9c5 0400 	strd	r0, r4, [r5]
 801a204:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801a208:	dd4a      	ble.n	801a2a0 <_vfprintf_r+0x1360>
 801a20a:	aa22      	add	r2, sp, #136	; 0x88
 801a20c:	4649      	mov	r1, r9
 801a20e:	4650      	mov	r0, sl
 801a210:	f003 fa7d 	bl	801d70e <__sprint_r>
 801a214:	2800      	cmp	r0, #0
 801a216:	d166      	bne.n	801a2e6 <_vfprintf_r+0x13a6>
 801a218:	ad25      	add	r5, sp, #148	; 0x94
 801a21a:	ab1e      	add	r3, sp, #120	; 0x78
 801a21c:	602b      	str	r3, [r5, #0]
 801a21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a220:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a222:	606b      	str	r3, [r5, #4]
 801a224:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a226:	4413      	add	r3, r2
 801a228:	9324      	str	r3, [sp, #144]	; 0x90
 801a22a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801a22c:	3301      	adds	r3, #1
 801a22e:	2b07      	cmp	r3, #7
 801a230:	9323      	str	r3, [sp, #140]	; 0x8c
 801a232:	f73f ada4 	bgt.w	8019d7e <_vfprintf_r+0xe3e>
 801a236:	f105 0408 	add.w	r4, r5, #8
 801a23a:	f7ff baa6 	b.w	801978a <_vfprintf_r+0x84a>
 801a23e:	aa22      	add	r2, sp, #136	; 0x88
 801a240:	4649      	mov	r1, r9
 801a242:	4650      	mov	r0, sl
 801a244:	f003 fa63 	bl	801d70e <__sprint_r>
 801a248:	2800      	cmp	r0, #0
 801a24a:	d14c      	bne.n	801a2e6 <_vfprintf_r+0x13a6>
 801a24c:	ad25      	add	r5, sp, #148	; 0x94
 801a24e:	e7c4      	b.n	801a1da <_vfprintf_r+0x129a>
 801a250:	2c00      	cmp	r4, #0
 801a252:	dde2      	ble.n	801a21a <_vfprintf_r+0x12da>
 801a254:	4e53      	ldr	r6, [pc, #332]	; (801a3a4 <_vfprintf_r+0x1464>)
 801a256:	2710      	movs	r7, #16
 801a258:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801a25c:	2c10      	cmp	r4, #16
 801a25e:	f103 0301 	add.w	r3, r3, #1
 801a262:	f105 0108 	add.w	r1, r5, #8
 801a266:	602e      	str	r6, [r5, #0]
 801a268:	dc07      	bgt.n	801a27a <_vfprintf_r+0x133a>
 801a26a:	606c      	str	r4, [r5, #4]
 801a26c:	2b07      	cmp	r3, #7
 801a26e:	4414      	add	r4, r2
 801a270:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801a274:	dcc9      	bgt.n	801a20a <_vfprintf_r+0x12ca>
 801a276:	460d      	mov	r5, r1
 801a278:	e7cf      	b.n	801a21a <_vfprintf_r+0x12da>
 801a27a:	3210      	adds	r2, #16
 801a27c:	2b07      	cmp	r3, #7
 801a27e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801a282:	606f      	str	r7, [r5, #4]
 801a284:	dd06      	ble.n	801a294 <_vfprintf_r+0x1354>
 801a286:	aa22      	add	r2, sp, #136	; 0x88
 801a288:	4649      	mov	r1, r9
 801a28a:	4650      	mov	r0, sl
 801a28c:	f003 fa3f 	bl	801d70e <__sprint_r>
 801a290:	bb48      	cbnz	r0, 801a2e6 <_vfprintf_r+0x13a6>
 801a292:	a925      	add	r1, sp, #148	; 0x94
 801a294:	3c10      	subs	r4, #16
 801a296:	460d      	mov	r5, r1
 801a298:	e7de      	b.n	801a258 <_vfprintf_r+0x1318>
 801a29a:	2b07      	cmp	r3, #7
 801a29c:	ddbd      	ble.n	801a21a <_vfprintf_r+0x12da>
 801a29e:	e7b4      	b.n	801a20a <_vfprintf_r+0x12ca>
 801a2a0:	3508      	adds	r5, #8
 801a2a2:	e7ba      	b.n	801a21a <_vfprintf_r+0x12da>
 801a2a4:	460c      	mov	r4, r1
 801a2a6:	f7ff ba70 	b.w	801978a <_vfprintf_r+0x84a>
 801a2aa:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801a2ae:	1a9d      	subs	r5, r3, r2
 801a2b0:	2d00      	cmp	r5, #0
 801a2b2:	f77f aa6e 	ble.w	8019792 <_vfprintf_r+0x852>
 801a2b6:	4e3c      	ldr	r6, [pc, #240]	; (801a3a8 <_vfprintf_r+0x1468>)
 801a2b8:	2710      	movs	r7, #16
 801a2ba:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801a2be:	2d10      	cmp	r5, #16
 801a2c0:	f103 0301 	add.w	r3, r3, #1
 801a2c4:	6026      	str	r6, [r4, #0]
 801a2c6:	dc18      	bgt.n	801a2fa <_vfprintf_r+0x13ba>
 801a2c8:	6065      	str	r5, [r4, #4]
 801a2ca:	2b07      	cmp	r3, #7
 801a2cc:	4415      	add	r5, r2
 801a2ce:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801a2d2:	f77f aa5e 	ble.w	8019792 <_vfprintf_r+0x852>
 801a2d6:	aa22      	add	r2, sp, #136	; 0x88
 801a2d8:	4649      	mov	r1, r9
 801a2da:	4650      	mov	r0, sl
 801a2dc:	f003 fa17 	bl	801d70e <__sprint_r>
 801a2e0:	2800      	cmp	r0, #0
 801a2e2:	f43f aa56 	beq.w	8019792 <_vfprintf_r+0x852>
 801a2e6:	9b04      	ldr	r3, [sp, #16]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	f43f a872 	beq.w	80193d2 <_vfprintf_r+0x492>
 801a2ee:	4619      	mov	r1, r3
 801a2f0:	4650      	mov	r0, sl
 801a2f2:	f001 f909 	bl	801b508 <_free_r>
 801a2f6:	f7ff b86c 	b.w	80193d2 <_vfprintf_r+0x492>
 801a2fa:	3210      	adds	r2, #16
 801a2fc:	2b07      	cmp	r3, #7
 801a2fe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801a302:	6067      	str	r7, [r4, #4]
 801a304:	dc02      	bgt.n	801a30c <_vfprintf_r+0x13cc>
 801a306:	3408      	adds	r4, #8
 801a308:	3d10      	subs	r5, #16
 801a30a:	e7d6      	b.n	801a2ba <_vfprintf_r+0x137a>
 801a30c:	aa22      	add	r2, sp, #136	; 0x88
 801a30e:	4649      	mov	r1, r9
 801a310:	4650      	mov	r0, sl
 801a312:	f003 f9fc 	bl	801d70e <__sprint_r>
 801a316:	2800      	cmp	r0, #0
 801a318:	d1e5      	bne.n	801a2e6 <_vfprintf_r+0x13a6>
 801a31a:	ac25      	add	r4, sp, #148	; 0x94
 801a31c:	e7f4      	b.n	801a308 <_vfprintf_r+0x13c8>
 801a31e:	9904      	ldr	r1, [sp, #16]
 801a320:	4650      	mov	r0, sl
 801a322:	f001 f8f1 	bl	801b508 <_free_r>
 801a326:	f7ff ba4c 	b.w	80197c2 <_vfprintf_r+0x882>
 801a32a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a32c:	b91b      	cbnz	r3, 801a336 <_vfprintf_r+0x13f6>
 801a32e:	2300      	movs	r3, #0
 801a330:	9323      	str	r3, [sp, #140]	; 0x8c
 801a332:	f7ff b84e 	b.w	80193d2 <_vfprintf_r+0x492>
 801a336:	aa22      	add	r2, sp, #136	; 0x88
 801a338:	4649      	mov	r1, r9
 801a33a:	4650      	mov	r0, sl
 801a33c:	f003 f9e7 	bl	801d70e <__sprint_r>
 801a340:	2800      	cmp	r0, #0
 801a342:	d0f4      	beq.n	801a32e <_vfprintf_r+0x13ee>
 801a344:	f7ff b845 	b.w	80193d2 <_vfprintf_r+0x492>
 801a348:	ea56 0207 	orrs.w	r2, r6, r7
 801a34c:	f8cd b010 	str.w	fp, [sp, #16]
 801a350:	f43f ab5c 	beq.w	8019a0c <_vfprintf_r+0xacc>
 801a354:	2b01      	cmp	r3, #1
 801a356:	f43f abf4 	beq.w	8019b42 <_vfprintf_r+0xc02>
 801a35a:	2b02      	cmp	r3, #2
 801a35c:	ab4e      	add	r3, sp, #312	; 0x138
 801a35e:	9303      	str	r3, [sp, #12]
 801a360:	f43f ac46 	beq.w	8019bf0 <_vfprintf_r+0xcb0>
 801a364:	9903      	ldr	r1, [sp, #12]
 801a366:	f006 0307 	and.w	r3, r6, #7
 801a36a:	460a      	mov	r2, r1
 801a36c:	3330      	adds	r3, #48	; 0x30
 801a36e:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801a372:	9203      	str	r2, [sp, #12]
 801a374:	08f2      	lsrs	r2, r6, #3
 801a376:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801a37a:	08f8      	lsrs	r0, r7, #3
 801a37c:	4616      	mov	r6, r2
 801a37e:	4607      	mov	r7, r0
 801a380:	ea56 0207 	orrs.w	r2, r6, r7
 801a384:	d1ee      	bne.n	801a364 <_vfprintf_r+0x1424>
 801a386:	9a04      	ldr	r2, [sp, #16]
 801a388:	07d0      	lsls	r0, r2, #31
 801a38a:	f57f ac20 	bpl.w	8019bce <_vfprintf_r+0xc8e>
 801a38e:	2b30      	cmp	r3, #48	; 0x30
 801a390:	f43f ac1d 	beq.w	8019bce <_vfprintf_r+0xc8e>
 801a394:	9a03      	ldr	r2, [sp, #12]
 801a396:	2330      	movs	r3, #48	; 0x30
 801a398:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a39c:	1e8b      	subs	r3, r1, #2
 801a39e:	9303      	str	r3, [sp, #12]
 801a3a0:	e415      	b.n	8019bce <_vfprintf_r+0xc8e>
 801a3a2:	bf00      	nop
 801a3a4:	08023874 	.word	0x08023874
 801a3a8:	08023864 	.word	0x08023864

0801a3ac <__sbprintf>:
 801a3ac:	b570      	push	{r4, r5, r6, lr}
 801a3ae:	460c      	mov	r4, r1
 801a3b0:	8989      	ldrh	r1, [r1, #12]
 801a3b2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801a3b6:	f021 0102 	bic.w	r1, r1, #2
 801a3ba:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a3be:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801a3c0:	911b      	str	r1, [sp, #108]	; 0x6c
 801a3c2:	89e1      	ldrh	r1, [r4, #14]
 801a3c4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a3c8:	69e1      	ldr	r1, [r4, #28]
 801a3ca:	9109      	str	r1, [sp, #36]	; 0x24
 801a3cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a3ce:	910b      	str	r1, [sp, #44]	; 0x2c
 801a3d0:	a91c      	add	r1, sp, #112	; 0x70
 801a3d2:	9102      	str	r1, [sp, #8]
 801a3d4:	9106      	str	r1, [sp, #24]
 801a3d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a3da:	4606      	mov	r6, r0
 801a3dc:	9104      	str	r1, [sp, #16]
 801a3de:	9107      	str	r1, [sp, #28]
 801a3e0:	a818      	add	r0, sp, #96	; 0x60
 801a3e2:	2100      	movs	r1, #0
 801a3e4:	e9cd 3200 	strd	r3, r2, [sp]
 801a3e8:	9108      	str	r1, [sp, #32]
 801a3ea:	f001 f9b7 	bl	801b75c <__retarget_lock_init_recursive>
 801a3ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a3f2:	a902      	add	r1, sp, #8
 801a3f4:	4630      	mov	r0, r6
 801a3f6:	f7fe fda3 	bl	8018f40 <_vfprintf_r>
 801a3fa:	1e05      	subs	r5, r0, #0
 801a3fc:	db07      	blt.n	801a40e <__sbprintf+0x62>
 801a3fe:	a902      	add	r1, sp, #8
 801a400:	4630      	mov	r0, r6
 801a402:	f000 ff85 	bl	801b310 <_fflush_r>
 801a406:	2800      	cmp	r0, #0
 801a408:	bf18      	it	ne
 801a40a:	f04f 35ff 	movne.w	r5, #4294967295
 801a40e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a412:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a414:	065b      	lsls	r3, r3, #25
 801a416:	bf42      	ittt	mi
 801a418:	89a3      	ldrhmi	r3, [r4, #12]
 801a41a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801a41e:	81a3      	strhmi	r3, [r4, #12]
 801a420:	f001 f99d 	bl	801b75e <__retarget_lock_close_recursive>
 801a424:	4628      	mov	r0, r5
 801a426:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801a42a:	bd70      	pop	{r4, r5, r6, pc}

0801a42c <__swsetup_r>:
 801a42c:	b538      	push	{r3, r4, r5, lr}
 801a42e:	4b2a      	ldr	r3, [pc, #168]	; (801a4d8 <__swsetup_r+0xac>)
 801a430:	4605      	mov	r5, r0
 801a432:	6818      	ldr	r0, [r3, #0]
 801a434:	460c      	mov	r4, r1
 801a436:	b118      	cbz	r0, 801a440 <__swsetup_r+0x14>
 801a438:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a43a:	b90b      	cbnz	r3, 801a440 <__swsetup_r+0x14>
 801a43c:	f000 ffd4 	bl	801b3e8 <__sinit>
 801a440:	89a3      	ldrh	r3, [r4, #12]
 801a442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a446:	0718      	lsls	r0, r3, #28
 801a448:	d422      	bmi.n	801a490 <__swsetup_r+0x64>
 801a44a:	06d9      	lsls	r1, r3, #27
 801a44c:	d407      	bmi.n	801a45e <__swsetup_r+0x32>
 801a44e:	2309      	movs	r3, #9
 801a450:	602b      	str	r3, [r5, #0]
 801a452:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a456:	81a3      	strh	r3, [r4, #12]
 801a458:	f04f 30ff 	mov.w	r0, #4294967295
 801a45c:	e034      	b.n	801a4c8 <__swsetup_r+0x9c>
 801a45e:	0758      	lsls	r0, r3, #29
 801a460:	d512      	bpl.n	801a488 <__swsetup_r+0x5c>
 801a462:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a464:	b141      	cbz	r1, 801a478 <__swsetup_r+0x4c>
 801a466:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801a46a:	4299      	cmp	r1, r3
 801a46c:	d002      	beq.n	801a474 <__swsetup_r+0x48>
 801a46e:	4628      	mov	r0, r5
 801a470:	f001 f84a 	bl	801b508 <_free_r>
 801a474:	2300      	movs	r3, #0
 801a476:	6323      	str	r3, [r4, #48]	; 0x30
 801a478:	89a3      	ldrh	r3, [r4, #12]
 801a47a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a47e:	81a3      	strh	r3, [r4, #12]
 801a480:	2300      	movs	r3, #0
 801a482:	6063      	str	r3, [r4, #4]
 801a484:	6923      	ldr	r3, [r4, #16]
 801a486:	6023      	str	r3, [r4, #0]
 801a488:	89a3      	ldrh	r3, [r4, #12]
 801a48a:	f043 0308 	orr.w	r3, r3, #8
 801a48e:	81a3      	strh	r3, [r4, #12]
 801a490:	6923      	ldr	r3, [r4, #16]
 801a492:	b94b      	cbnz	r3, 801a4a8 <__swsetup_r+0x7c>
 801a494:	89a3      	ldrh	r3, [r4, #12]
 801a496:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a49a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a49e:	d003      	beq.n	801a4a8 <__swsetup_r+0x7c>
 801a4a0:	4621      	mov	r1, r4
 801a4a2:	4628      	mov	r0, r5
 801a4a4:	f001 f98c 	bl	801b7c0 <__smakebuf_r>
 801a4a8:	89a0      	ldrh	r0, [r4, #12]
 801a4aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4ae:	f010 0301 	ands.w	r3, r0, #1
 801a4b2:	d00a      	beq.n	801a4ca <__swsetup_r+0x9e>
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	60a3      	str	r3, [r4, #8]
 801a4b8:	6963      	ldr	r3, [r4, #20]
 801a4ba:	425b      	negs	r3, r3
 801a4bc:	61a3      	str	r3, [r4, #24]
 801a4be:	6923      	ldr	r3, [r4, #16]
 801a4c0:	b943      	cbnz	r3, 801a4d4 <__swsetup_r+0xa8>
 801a4c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4c6:	d1c4      	bne.n	801a452 <__swsetup_r+0x26>
 801a4c8:	bd38      	pop	{r3, r4, r5, pc}
 801a4ca:	0781      	lsls	r1, r0, #30
 801a4cc:	bf58      	it	pl
 801a4ce:	6963      	ldrpl	r3, [r4, #20]
 801a4d0:	60a3      	str	r3, [r4, #8]
 801a4d2:	e7f4      	b.n	801a4be <__swsetup_r+0x92>
 801a4d4:	2000      	movs	r0, #0
 801a4d6:	e7f7      	b.n	801a4c8 <__swsetup_r+0x9c>
 801a4d8:	20000038 	.word	0x20000038

0801a4dc <register_fini>:
 801a4dc:	4b02      	ldr	r3, [pc, #8]	; (801a4e8 <register_fini+0xc>)
 801a4de:	b113      	cbz	r3, 801a4e6 <register_fini+0xa>
 801a4e0:	4802      	ldr	r0, [pc, #8]	; (801a4ec <register_fini+0x10>)
 801a4e2:	f000 b805 	b.w	801a4f0 <atexit>
 801a4e6:	4770      	bx	lr
 801a4e8:	00000000 	.word	0x00000000
 801a4ec:	0801b439 	.word	0x0801b439

0801a4f0 <atexit>:
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	4601      	mov	r1, r0
 801a4f4:	461a      	mov	r2, r3
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f003 be16 	b.w	801e128 <__register_exitproc>

0801a4fc <div>:
 801a4fc:	2900      	cmp	r1, #0
 801a4fe:	b510      	push	{r4, lr}
 801a500:	fb91 f4f2 	sdiv	r4, r1, r2
 801a504:	fb02 1314 	mls	r3, r2, r4, r1
 801a508:	db06      	blt.n	801a518 <div+0x1c>
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	da01      	bge.n	801a512 <div+0x16>
 801a50e:	3401      	adds	r4, #1
 801a510:	1a9b      	subs	r3, r3, r2
 801a512:	e9c0 4300 	strd	r4, r3, [r0]
 801a516:	bd10      	pop	{r4, pc}
 801a518:	2b00      	cmp	r3, #0
 801a51a:	bfc4      	itt	gt
 801a51c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801a520:	189b      	addgt	r3, r3, r2
 801a522:	e7f6      	b.n	801a512 <div+0x16>

0801a524 <quorem>:
 801a524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a528:	6903      	ldr	r3, [r0, #16]
 801a52a:	690c      	ldr	r4, [r1, #16]
 801a52c:	42a3      	cmp	r3, r4
 801a52e:	4607      	mov	r7, r0
 801a530:	f2c0 8081 	blt.w	801a636 <quorem+0x112>
 801a534:	3c01      	subs	r4, #1
 801a536:	f101 0814 	add.w	r8, r1, #20
 801a53a:	f100 0514 	add.w	r5, r0, #20
 801a53e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a542:	9301      	str	r3, [sp, #4]
 801a544:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a54c:	3301      	adds	r3, #1
 801a54e:	429a      	cmp	r2, r3
 801a550:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a554:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a558:	fbb2 f6f3 	udiv	r6, r2, r3
 801a55c:	d331      	bcc.n	801a5c2 <quorem+0x9e>
 801a55e:	f04f 0e00 	mov.w	lr, #0
 801a562:	4640      	mov	r0, r8
 801a564:	46ac      	mov	ip, r5
 801a566:	46f2      	mov	sl, lr
 801a568:	f850 2b04 	ldr.w	r2, [r0], #4
 801a56c:	b293      	uxth	r3, r2
 801a56e:	fb06 e303 	mla	r3, r6, r3, lr
 801a572:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a576:	b29b      	uxth	r3, r3
 801a578:	ebaa 0303 	sub.w	r3, sl, r3
 801a57c:	0c12      	lsrs	r2, r2, #16
 801a57e:	f8dc a000 	ldr.w	sl, [ip]
 801a582:	fb06 e202 	mla	r2, r6, r2, lr
 801a586:	fa13 f38a 	uxtah	r3, r3, sl
 801a58a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a58e:	fa1f fa82 	uxth.w	sl, r2
 801a592:	f8dc 2000 	ldr.w	r2, [ip]
 801a596:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801a59a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a59e:	b29b      	uxth	r3, r3
 801a5a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a5a4:	4581      	cmp	r9, r0
 801a5a6:	f84c 3b04 	str.w	r3, [ip], #4
 801a5aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a5ae:	d2db      	bcs.n	801a568 <quorem+0x44>
 801a5b0:	f855 300b 	ldr.w	r3, [r5, fp]
 801a5b4:	b92b      	cbnz	r3, 801a5c2 <quorem+0x9e>
 801a5b6:	9b01      	ldr	r3, [sp, #4]
 801a5b8:	3b04      	subs	r3, #4
 801a5ba:	429d      	cmp	r5, r3
 801a5bc:	461a      	mov	r2, r3
 801a5be:	d32e      	bcc.n	801a61e <quorem+0xfa>
 801a5c0:	613c      	str	r4, [r7, #16]
 801a5c2:	4638      	mov	r0, r7
 801a5c4:	f001 fdca 	bl	801c15c <__mcmp>
 801a5c8:	2800      	cmp	r0, #0
 801a5ca:	db24      	blt.n	801a616 <quorem+0xf2>
 801a5cc:	3601      	adds	r6, #1
 801a5ce:	4628      	mov	r0, r5
 801a5d0:	f04f 0c00 	mov.w	ip, #0
 801a5d4:	f858 2b04 	ldr.w	r2, [r8], #4
 801a5d8:	f8d0 e000 	ldr.w	lr, [r0]
 801a5dc:	b293      	uxth	r3, r2
 801a5de:	ebac 0303 	sub.w	r3, ip, r3
 801a5e2:	0c12      	lsrs	r2, r2, #16
 801a5e4:	fa13 f38e 	uxtah	r3, r3, lr
 801a5e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a5ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a5f0:	b29b      	uxth	r3, r3
 801a5f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a5f6:	45c1      	cmp	r9, r8
 801a5f8:	f840 3b04 	str.w	r3, [r0], #4
 801a5fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a600:	d2e8      	bcs.n	801a5d4 <quorem+0xb0>
 801a602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a60a:	b922      	cbnz	r2, 801a616 <quorem+0xf2>
 801a60c:	3b04      	subs	r3, #4
 801a60e:	429d      	cmp	r5, r3
 801a610:	461a      	mov	r2, r3
 801a612:	d30a      	bcc.n	801a62a <quorem+0x106>
 801a614:	613c      	str	r4, [r7, #16]
 801a616:	4630      	mov	r0, r6
 801a618:	b003      	add	sp, #12
 801a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a61e:	6812      	ldr	r2, [r2, #0]
 801a620:	3b04      	subs	r3, #4
 801a622:	2a00      	cmp	r2, #0
 801a624:	d1cc      	bne.n	801a5c0 <quorem+0x9c>
 801a626:	3c01      	subs	r4, #1
 801a628:	e7c7      	b.n	801a5ba <quorem+0x96>
 801a62a:	6812      	ldr	r2, [r2, #0]
 801a62c:	3b04      	subs	r3, #4
 801a62e:	2a00      	cmp	r2, #0
 801a630:	d1f0      	bne.n	801a614 <quorem+0xf0>
 801a632:	3c01      	subs	r4, #1
 801a634:	e7eb      	b.n	801a60e <quorem+0xea>
 801a636:	2000      	movs	r0, #0
 801a638:	e7ee      	b.n	801a618 <quorem+0xf4>
 801a63a:	0000      	movs	r0, r0
 801a63c:	0000      	movs	r0, r0
	...

0801a640 <_dtoa_r>:
 801a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a644:	ed2d 8b02 	vpush	{d8}
 801a648:	b095      	sub	sp, #84	; 0x54
 801a64a:	ec57 6b10 	vmov	r6, r7, d0
 801a64e:	9105      	str	r1, [sp, #20]
 801a650:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801a652:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a654:	9209      	str	r2, [sp, #36]	; 0x24
 801a656:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801a65a:	4604      	mov	r4, r0
 801a65c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a65e:	b141      	cbz	r1, 801a672 <_dtoa_r+0x32>
 801a660:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a662:	604a      	str	r2, [r1, #4]
 801a664:	2301      	movs	r3, #1
 801a666:	4093      	lsls	r3, r2
 801a668:	608b      	str	r3, [r1, #8]
 801a66a:	f001 fb6c 	bl	801bd46 <_Bfree>
 801a66e:	2300      	movs	r3, #0
 801a670:	6423      	str	r3, [r4, #64]	; 0x40
 801a672:	1e3b      	subs	r3, r7, #0
 801a674:	bfb9      	ittee	lt
 801a676:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a67a:	9303      	strlt	r3, [sp, #12]
 801a67c:	2300      	movge	r3, #0
 801a67e:	602b      	strge	r3, [r5, #0]
 801a680:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801a684:	4ba2      	ldr	r3, [pc, #648]	; (801a910 <_dtoa_r+0x2d0>)
 801a686:	bfbc      	itt	lt
 801a688:	2201      	movlt	r2, #1
 801a68a:	602a      	strlt	r2, [r5, #0]
 801a68c:	ea33 0309 	bics.w	r3, r3, r9
 801a690:	d11b      	bne.n	801a6ca <_dtoa_r+0x8a>
 801a692:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a694:	f242 730f 	movw	r3, #9999	; 0x270f
 801a698:	6013      	str	r3, [r2, #0]
 801a69a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a69e:	4333      	orrs	r3, r6
 801a6a0:	f000 8578 	beq.w	801b194 <_dtoa_r+0xb54>
 801a6a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a6a6:	b90b      	cbnz	r3, 801a6ac <_dtoa_r+0x6c>
 801a6a8:	4b9a      	ldr	r3, [pc, #616]	; (801a914 <_dtoa_r+0x2d4>)
 801a6aa:	e024      	b.n	801a6f6 <_dtoa_r+0xb6>
 801a6ac:	4b99      	ldr	r3, [pc, #612]	; (801a914 <_dtoa_r+0x2d4>)
 801a6ae:	9300      	str	r3, [sp, #0]
 801a6b0:	3303      	adds	r3, #3
 801a6b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a6b4:	6013      	str	r3, [r2, #0]
 801a6b6:	9800      	ldr	r0, [sp, #0]
 801a6b8:	b015      	add	sp, #84	; 0x54
 801a6ba:	ecbd 8b02 	vpop	{d8}
 801a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6c2:	4b95      	ldr	r3, [pc, #596]	; (801a918 <_dtoa_r+0x2d8>)
 801a6c4:	9300      	str	r3, [sp, #0]
 801a6c6:	3308      	adds	r3, #8
 801a6c8:	e7f3      	b.n	801a6b2 <_dtoa_r+0x72>
 801a6ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	ec51 0b17 	vmov	r0, r1, d7
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801a6da:	f7e6 fa1f 	bl	8000b1c <__aeabi_dcmpeq>
 801a6de:	4680      	mov	r8, r0
 801a6e0:	b158      	cbz	r0, 801a6fa <_dtoa_r+0xba>
 801a6e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6e4:	2301      	movs	r3, #1
 801a6e6:	6013      	str	r3, [r2, #0]
 801a6e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	f000 854f 	beq.w	801b18e <_dtoa_r+0xb4e>
 801a6f0:	488a      	ldr	r0, [pc, #552]	; (801a91c <_dtoa_r+0x2dc>)
 801a6f2:	6018      	str	r0, [r3, #0]
 801a6f4:	1e43      	subs	r3, r0, #1
 801a6f6:	9300      	str	r3, [sp, #0]
 801a6f8:	e7dd      	b.n	801a6b6 <_dtoa_r+0x76>
 801a6fa:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801a6fe:	aa12      	add	r2, sp, #72	; 0x48
 801a700:	a913      	add	r1, sp, #76	; 0x4c
 801a702:	4620      	mov	r0, r4
 801a704:	f001 fdce 	bl	801c2a4 <__d2b>
 801a708:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a70c:	4683      	mov	fp, r0
 801a70e:	2d00      	cmp	r5, #0
 801a710:	d07c      	beq.n	801a80c <_dtoa_r+0x1cc>
 801a712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a714:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801a718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a71c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801a720:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801a724:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801a728:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a72c:	4b7c      	ldr	r3, [pc, #496]	; (801a920 <_dtoa_r+0x2e0>)
 801a72e:	2200      	movs	r2, #0
 801a730:	4630      	mov	r0, r6
 801a732:	4639      	mov	r1, r7
 801a734:	f7e5 fdd2 	bl	80002dc <__aeabi_dsub>
 801a738:	a36f      	add	r3, pc, #444	; (adr r3, 801a8f8 <_dtoa_r+0x2b8>)
 801a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73e:	f7e5 ff85 	bl	800064c <__aeabi_dmul>
 801a742:	a36f      	add	r3, pc, #444	; (adr r3, 801a900 <_dtoa_r+0x2c0>)
 801a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a748:	f7e5 fdca 	bl	80002e0 <__adddf3>
 801a74c:	4606      	mov	r6, r0
 801a74e:	4628      	mov	r0, r5
 801a750:	460f      	mov	r7, r1
 801a752:	f7e5 ff11 	bl	8000578 <__aeabi_i2d>
 801a756:	a36c      	add	r3, pc, #432	; (adr r3, 801a908 <_dtoa_r+0x2c8>)
 801a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a75c:	f7e5 ff76 	bl	800064c <__aeabi_dmul>
 801a760:	4602      	mov	r2, r0
 801a762:	460b      	mov	r3, r1
 801a764:	4630      	mov	r0, r6
 801a766:	4639      	mov	r1, r7
 801a768:	f7e5 fdba 	bl	80002e0 <__adddf3>
 801a76c:	4606      	mov	r6, r0
 801a76e:	460f      	mov	r7, r1
 801a770:	f7e6 fa1c 	bl	8000bac <__aeabi_d2iz>
 801a774:	2200      	movs	r2, #0
 801a776:	4682      	mov	sl, r0
 801a778:	2300      	movs	r3, #0
 801a77a:	4630      	mov	r0, r6
 801a77c:	4639      	mov	r1, r7
 801a77e:	f7e6 f9d7 	bl	8000b30 <__aeabi_dcmplt>
 801a782:	b148      	cbz	r0, 801a798 <_dtoa_r+0x158>
 801a784:	4650      	mov	r0, sl
 801a786:	f7e5 fef7 	bl	8000578 <__aeabi_i2d>
 801a78a:	4632      	mov	r2, r6
 801a78c:	463b      	mov	r3, r7
 801a78e:	f7e6 f9c5 	bl	8000b1c <__aeabi_dcmpeq>
 801a792:	b908      	cbnz	r0, 801a798 <_dtoa_r+0x158>
 801a794:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a798:	f1ba 0f16 	cmp.w	sl, #22
 801a79c:	d854      	bhi.n	801a848 <_dtoa_r+0x208>
 801a79e:	4b61      	ldr	r3, [pc, #388]	; (801a924 <_dtoa_r+0x2e4>)
 801a7a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a7ac:	f7e6 f9c0 	bl	8000b30 <__aeabi_dcmplt>
 801a7b0:	2800      	cmp	r0, #0
 801a7b2:	d04b      	beq.n	801a84c <_dtoa_r+0x20c>
 801a7b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	930e      	str	r3, [sp, #56]	; 0x38
 801a7bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a7be:	1b5d      	subs	r5, r3, r5
 801a7c0:	1e6b      	subs	r3, r5, #1
 801a7c2:	9304      	str	r3, [sp, #16]
 801a7c4:	bf43      	ittte	mi
 801a7c6:	2300      	movmi	r3, #0
 801a7c8:	f1c5 0801 	rsbmi	r8, r5, #1
 801a7cc:	9304      	strmi	r3, [sp, #16]
 801a7ce:	f04f 0800 	movpl.w	r8, #0
 801a7d2:	f1ba 0f00 	cmp.w	sl, #0
 801a7d6:	db3b      	blt.n	801a850 <_dtoa_r+0x210>
 801a7d8:	9b04      	ldr	r3, [sp, #16]
 801a7da:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801a7de:	4453      	add	r3, sl
 801a7e0:	9304      	str	r3, [sp, #16]
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	9306      	str	r3, [sp, #24]
 801a7e6:	9b05      	ldr	r3, [sp, #20]
 801a7e8:	2b09      	cmp	r3, #9
 801a7ea:	d86a      	bhi.n	801a8c2 <_dtoa_r+0x282>
 801a7ec:	2b05      	cmp	r3, #5
 801a7ee:	bfc4      	itt	gt
 801a7f0:	3b04      	subgt	r3, #4
 801a7f2:	9305      	strgt	r3, [sp, #20]
 801a7f4:	9b05      	ldr	r3, [sp, #20]
 801a7f6:	f1a3 0302 	sub.w	r3, r3, #2
 801a7fa:	bfcc      	ite	gt
 801a7fc:	2500      	movgt	r5, #0
 801a7fe:	2501      	movle	r5, #1
 801a800:	2b03      	cmp	r3, #3
 801a802:	d86a      	bhi.n	801a8da <_dtoa_r+0x29a>
 801a804:	e8df f003 	tbb	[pc, r3]
 801a808:	5b4d4f2c 	.word	0x5b4d4f2c
 801a80c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801a810:	441d      	add	r5, r3
 801a812:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a816:	2b20      	cmp	r3, #32
 801a818:	bfc1      	itttt	gt
 801a81a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a81e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801a822:	fa09 f303 	lslgt.w	r3, r9, r3
 801a826:	fa26 f000 	lsrgt.w	r0, r6, r0
 801a82a:	bfda      	itte	le
 801a82c:	f1c3 0320 	rsble	r3, r3, #32
 801a830:	fa06 f003 	lslle.w	r0, r6, r3
 801a834:	4318      	orrgt	r0, r3
 801a836:	f7e5 fe8f 	bl	8000558 <__aeabi_ui2d>
 801a83a:	2301      	movs	r3, #1
 801a83c:	4606      	mov	r6, r0
 801a83e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801a842:	3d01      	subs	r5, #1
 801a844:	9310      	str	r3, [sp, #64]	; 0x40
 801a846:	e771      	b.n	801a72c <_dtoa_r+0xec>
 801a848:	2301      	movs	r3, #1
 801a84a:	e7b6      	b.n	801a7ba <_dtoa_r+0x17a>
 801a84c:	900e      	str	r0, [sp, #56]	; 0x38
 801a84e:	e7b5      	b.n	801a7bc <_dtoa_r+0x17c>
 801a850:	f1ca 0300 	rsb	r3, sl, #0
 801a854:	9306      	str	r3, [sp, #24]
 801a856:	2300      	movs	r3, #0
 801a858:	eba8 080a 	sub.w	r8, r8, sl
 801a85c:	930d      	str	r3, [sp, #52]	; 0x34
 801a85e:	e7c2      	b.n	801a7e6 <_dtoa_r+0x1a6>
 801a860:	2300      	movs	r3, #0
 801a862:	9308      	str	r3, [sp, #32]
 801a864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a866:	2b00      	cmp	r3, #0
 801a868:	dc3a      	bgt.n	801a8e0 <_dtoa_r+0x2a0>
 801a86a:	f04f 0901 	mov.w	r9, #1
 801a86e:	f8cd 9004 	str.w	r9, [sp, #4]
 801a872:	464b      	mov	r3, r9
 801a874:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a878:	2200      	movs	r2, #0
 801a87a:	6462      	str	r2, [r4, #68]	; 0x44
 801a87c:	2204      	movs	r2, #4
 801a87e:	f102 0014 	add.w	r0, r2, #20
 801a882:	4298      	cmp	r0, r3
 801a884:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a886:	d931      	bls.n	801a8ec <_dtoa_r+0x2ac>
 801a888:	4620      	mov	r0, r4
 801a88a:	f001 fa37 	bl	801bcfc <_Balloc>
 801a88e:	9000      	str	r0, [sp, #0]
 801a890:	2800      	cmp	r0, #0
 801a892:	d14d      	bne.n	801a930 <_dtoa_r+0x2f0>
 801a894:	4b24      	ldr	r3, [pc, #144]	; (801a928 <_dtoa_r+0x2e8>)
 801a896:	4602      	mov	r2, r0
 801a898:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a89c:	4823      	ldr	r0, [pc, #140]	; (801a92c <_dtoa_r+0x2ec>)
 801a89e:	f003 fc83 	bl	801e1a8 <__assert_func>
 801a8a2:	2301      	movs	r3, #1
 801a8a4:	e7dd      	b.n	801a862 <_dtoa_r+0x222>
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	9308      	str	r3, [sp, #32]
 801a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8ac:	eb0a 0903 	add.w	r9, sl, r3
 801a8b0:	f109 0301 	add.w	r3, r9, #1
 801a8b4:	2b01      	cmp	r3, #1
 801a8b6:	9301      	str	r3, [sp, #4]
 801a8b8:	bfb8      	it	lt
 801a8ba:	2301      	movlt	r3, #1
 801a8bc:	e7dc      	b.n	801a878 <_dtoa_r+0x238>
 801a8be:	2301      	movs	r3, #1
 801a8c0:	e7f2      	b.n	801a8a8 <_dtoa_r+0x268>
 801a8c2:	2501      	movs	r5, #1
 801a8c4:	2300      	movs	r3, #0
 801a8c6:	9305      	str	r3, [sp, #20]
 801a8c8:	9508      	str	r5, [sp, #32]
 801a8ca:	f04f 39ff 	mov.w	r9, #4294967295
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	f8cd 9004 	str.w	r9, [sp, #4]
 801a8d4:	2312      	movs	r3, #18
 801a8d6:	9209      	str	r2, [sp, #36]	; 0x24
 801a8d8:	e7ce      	b.n	801a878 <_dtoa_r+0x238>
 801a8da:	2301      	movs	r3, #1
 801a8dc:	9308      	str	r3, [sp, #32]
 801a8de:	e7f4      	b.n	801a8ca <_dtoa_r+0x28a>
 801a8e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a8e4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a8e8:	464b      	mov	r3, r9
 801a8ea:	e7c5      	b.n	801a878 <_dtoa_r+0x238>
 801a8ec:	3101      	adds	r1, #1
 801a8ee:	6461      	str	r1, [r4, #68]	; 0x44
 801a8f0:	0052      	lsls	r2, r2, #1
 801a8f2:	e7c4      	b.n	801a87e <_dtoa_r+0x23e>
 801a8f4:	f3af 8000 	nop.w
 801a8f8:	636f4361 	.word	0x636f4361
 801a8fc:	3fd287a7 	.word	0x3fd287a7
 801a900:	8b60c8b3 	.word	0x8b60c8b3
 801a904:	3fc68a28 	.word	0x3fc68a28
 801a908:	509f79fb 	.word	0x509f79fb
 801a90c:	3fd34413 	.word	0x3fd34413
 801a910:	7ff00000 	.word	0x7ff00000
 801a914:	08023884 	.word	0x08023884
 801a918:	08023888 	.word	0x08023888
 801a91c:	08023863 	.word	0x08023863
 801a920:	3ff80000 	.word	0x3ff80000
 801a924:	080239f0 	.word	0x080239f0
 801a928:	08023891 	.word	0x08023891
 801a92c:	080238a2 	.word	0x080238a2
 801a930:	9b00      	ldr	r3, [sp, #0]
 801a932:	6423      	str	r3, [r4, #64]	; 0x40
 801a934:	9b01      	ldr	r3, [sp, #4]
 801a936:	2b0e      	cmp	r3, #14
 801a938:	f200 80ad 	bhi.w	801aa96 <_dtoa_r+0x456>
 801a93c:	2d00      	cmp	r5, #0
 801a93e:	f000 80aa 	beq.w	801aa96 <_dtoa_r+0x456>
 801a942:	f1ba 0f00 	cmp.w	sl, #0
 801a946:	dd36      	ble.n	801a9b6 <_dtoa_r+0x376>
 801a948:	4ac2      	ldr	r2, [pc, #776]	; (801ac54 <_dtoa_r+0x614>)
 801a94a:	f00a 030f 	and.w	r3, sl, #15
 801a94e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a952:	ed93 7b00 	vldr	d7, [r3]
 801a956:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801a95a:	ea4f 172a 	mov.w	r7, sl, asr #4
 801a95e:	eeb0 8a47 	vmov.f32	s16, s14
 801a962:	eef0 8a67 	vmov.f32	s17, s15
 801a966:	d016      	beq.n	801a996 <_dtoa_r+0x356>
 801a968:	4bbb      	ldr	r3, [pc, #748]	; (801ac58 <_dtoa_r+0x618>)
 801a96a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a96e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a972:	f7e5 ff95 	bl	80008a0 <__aeabi_ddiv>
 801a976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a97a:	f007 070f 	and.w	r7, r7, #15
 801a97e:	2503      	movs	r5, #3
 801a980:	4eb5      	ldr	r6, [pc, #724]	; (801ac58 <_dtoa_r+0x618>)
 801a982:	b957      	cbnz	r7, 801a99a <_dtoa_r+0x35a>
 801a984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a988:	ec53 2b18 	vmov	r2, r3, d8
 801a98c:	f7e5 ff88 	bl	80008a0 <__aeabi_ddiv>
 801a990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a994:	e029      	b.n	801a9ea <_dtoa_r+0x3aa>
 801a996:	2502      	movs	r5, #2
 801a998:	e7f2      	b.n	801a980 <_dtoa_r+0x340>
 801a99a:	07f9      	lsls	r1, r7, #31
 801a99c:	d508      	bpl.n	801a9b0 <_dtoa_r+0x370>
 801a99e:	ec51 0b18 	vmov	r0, r1, d8
 801a9a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a9a6:	f7e5 fe51 	bl	800064c <__aeabi_dmul>
 801a9aa:	ec41 0b18 	vmov	d8, r0, r1
 801a9ae:	3501      	adds	r5, #1
 801a9b0:	107f      	asrs	r7, r7, #1
 801a9b2:	3608      	adds	r6, #8
 801a9b4:	e7e5      	b.n	801a982 <_dtoa_r+0x342>
 801a9b6:	f000 80a6 	beq.w	801ab06 <_dtoa_r+0x4c6>
 801a9ba:	f1ca 0600 	rsb	r6, sl, #0
 801a9be:	4ba5      	ldr	r3, [pc, #660]	; (801ac54 <_dtoa_r+0x614>)
 801a9c0:	4fa5      	ldr	r7, [pc, #660]	; (801ac58 <_dtoa_r+0x618>)
 801a9c2:	f006 020f 	and.w	r2, r6, #15
 801a9c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a9d2:	f7e5 fe3b 	bl	800064c <__aeabi_dmul>
 801a9d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a9da:	1136      	asrs	r6, r6, #4
 801a9dc:	2300      	movs	r3, #0
 801a9de:	2502      	movs	r5, #2
 801a9e0:	2e00      	cmp	r6, #0
 801a9e2:	f040 8085 	bne.w	801aaf0 <_dtoa_r+0x4b0>
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d1d2      	bne.n	801a990 <_dtoa_r+0x350>
 801a9ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	f000 808c 	beq.w	801ab0a <_dtoa_r+0x4ca>
 801a9f2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a9f6:	4b99      	ldr	r3, [pc, #612]	; (801ac5c <_dtoa_r+0x61c>)
 801a9f8:	2200      	movs	r2, #0
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	4639      	mov	r1, r7
 801a9fe:	f7e6 f897 	bl	8000b30 <__aeabi_dcmplt>
 801aa02:	2800      	cmp	r0, #0
 801aa04:	f000 8081 	beq.w	801ab0a <_dtoa_r+0x4ca>
 801aa08:	9b01      	ldr	r3, [sp, #4]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d07d      	beq.n	801ab0a <_dtoa_r+0x4ca>
 801aa0e:	f1b9 0f00 	cmp.w	r9, #0
 801aa12:	dd3c      	ble.n	801aa8e <_dtoa_r+0x44e>
 801aa14:	f10a 33ff 	add.w	r3, sl, #4294967295
 801aa18:	9307      	str	r3, [sp, #28]
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	4b90      	ldr	r3, [pc, #576]	; (801ac60 <_dtoa_r+0x620>)
 801aa1e:	4630      	mov	r0, r6
 801aa20:	4639      	mov	r1, r7
 801aa22:	f7e5 fe13 	bl	800064c <__aeabi_dmul>
 801aa26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aa2a:	3501      	adds	r5, #1
 801aa2c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801aa30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801aa34:	4628      	mov	r0, r5
 801aa36:	f7e5 fd9f 	bl	8000578 <__aeabi_i2d>
 801aa3a:	4632      	mov	r2, r6
 801aa3c:	463b      	mov	r3, r7
 801aa3e:	f7e5 fe05 	bl	800064c <__aeabi_dmul>
 801aa42:	4b88      	ldr	r3, [pc, #544]	; (801ac64 <_dtoa_r+0x624>)
 801aa44:	2200      	movs	r2, #0
 801aa46:	f7e5 fc4b 	bl	80002e0 <__adddf3>
 801aa4a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801aa4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aa52:	9303      	str	r3, [sp, #12]
 801aa54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d15c      	bne.n	801ab14 <_dtoa_r+0x4d4>
 801aa5a:	4b83      	ldr	r3, [pc, #524]	; (801ac68 <_dtoa_r+0x628>)
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	4630      	mov	r0, r6
 801aa60:	4639      	mov	r1, r7
 801aa62:	f7e5 fc3b 	bl	80002dc <__aeabi_dsub>
 801aa66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801aa6a:	4606      	mov	r6, r0
 801aa6c:	460f      	mov	r7, r1
 801aa6e:	f7e6 f87d 	bl	8000b6c <__aeabi_dcmpgt>
 801aa72:	2800      	cmp	r0, #0
 801aa74:	f040 8295 	bne.w	801afa2 <_dtoa_r+0x962>
 801aa78:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801aa7c:	4630      	mov	r0, r6
 801aa7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa82:	4639      	mov	r1, r7
 801aa84:	f7e6 f854 	bl	8000b30 <__aeabi_dcmplt>
 801aa88:	2800      	cmp	r0, #0
 801aa8a:	f040 8287 	bne.w	801af9c <_dtoa_r+0x95c>
 801aa8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801aa92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801aa96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	f2c0 8157 	blt.w	801ad4c <_dtoa_r+0x70c>
 801aa9e:	f1ba 0f0e 	cmp.w	sl, #14
 801aaa2:	f300 8153 	bgt.w	801ad4c <_dtoa_r+0x70c>
 801aaa6:	4b6b      	ldr	r3, [pc, #428]	; (801ac54 <_dtoa_r+0x614>)
 801aaa8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801aaac:	e9d3 8900 	ldrd	r8, r9, [r3]
 801aab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	f280 80e2 	bge.w	801ac7c <_dtoa_r+0x63c>
 801aab8:	9b01      	ldr	r3, [sp, #4]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	f300 80de 	bgt.w	801ac7c <_dtoa_r+0x63c>
 801aac0:	f040 826c 	bne.w	801af9c <_dtoa_r+0x95c>
 801aac4:	4b68      	ldr	r3, [pc, #416]	; (801ac68 <_dtoa_r+0x628>)
 801aac6:	2200      	movs	r2, #0
 801aac8:	4640      	mov	r0, r8
 801aaca:	4649      	mov	r1, r9
 801aacc:	f7e5 fdbe 	bl	800064c <__aeabi_dmul>
 801aad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801aad4:	f7e6 f840 	bl	8000b58 <__aeabi_dcmpge>
 801aad8:	9e01      	ldr	r6, [sp, #4]
 801aada:	4637      	mov	r7, r6
 801aadc:	2800      	cmp	r0, #0
 801aade:	f040 8242 	bne.w	801af66 <_dtoa_r+0x926>
 801aae2:	9d00      	ldr	r5, [sp, #0]
 801aae4:	2331      	movs	r3, #49	; 0x31
 801aae6:	f805 3b01 	strb.w	r3, [r5], #1
 801aaea:	f10a 0a01 	add.w	sl, sl, #1
 801aaee:	e23e      	b.n	801af6e <_dtoa_r+0x92e>
 801aaf0:	07f2      	lsls	r2, r6, #31
 801aaf2:	d505      	bpl.n	801ab00 <_dtoa_r+0x4c0>
 801aaf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aaf8:	f7e5 fda8 	bl	800064c <__aeabi_dmul>
 801aafc:	3501      	adds	r5, #1
 801aafe:	2301      	movs	r3, #1
 801ab00:	1076      	asrs	r6, r6, #1
 801ab02:	3708      	adds	r7, #8
 801ab04:	e76c      	b.n	801a9e0 <_dtoa_r+0x3a0>
 801ab06:	2502      	movs	r5, #2
 801ab08:	e76f      	b.n	801a9ea <_dtoa_r+0x3aa>
 801ab0a:	9b01      	ldr	r3, [sp, #4]
 801ab0c:	f8cd a01c 	str.w	sl, [sp, #28]
 801ab10:	930c      	str	r3, [sp, #48]	; 0x30
 801ab12:	e78d      	b.n	801aa30 <_dtoa_r+0x3f0>
 801ab14:	9900      	ldr	r1, [sp, #0]
 801ab16:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ab18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab1a:	4b4e      	ldr	r3, [pc, #312]	; (801ac54 <_dtoa_r+0x614>)
 801ab1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ab20:	4401      	add	r1, r0
 801ab22:	9102      	str	r1, [sp, #8]
 801ab24:	9908      	ldr	r1, [sp, #32]
 801ab26:	eeb0 8a47 	vmov.f32	s16, s14
 801ab2a:	eef0 8a67 	vmov.f32	s17, s15
 801ab2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ab32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ab36:	2900      	cmp	r1, #0
 801ab38:	d045      	beq.n	801abc6 <_dtoa_r+0x586>
 801ab3a:	494c      	ldr	r1, [pc, #304]	; (801ac6c <_dtoa_r+0x62c>)
 801ab3c:	2000      	movs	r0, #0
 801ab3e:	f7e5 feaf 	bl	80008a0 <__aeabi_ddiv>
 801ab42:	ec53 2b18 	vmov	r2, r3, d8
 801ab46:	f7e5 fbc9 	bl	80002dc <__aeabi_dsub>
 801ab4a:	9d00      	ldr	r5, [sp, #0]
 801ab4c:	ec41 0b18 	vmov	d8, r0, r1
 801ab50:	4639      	mov	r1, r7
 801ab52:	4630      	mov	r0, r6
 801ab54:	f7e6 f82a 	bl	8000bac <__aeabi_d2iz>
 801ab58:	900c      	str	r0, [sp, #48]	; 0x30
 801ab5a:	f7e5 fd0d 	bl	8000578 <__aeabi_i2d>
 801ab5e:	4602      	mov	r2, r0
 801ab60:	460b      	mov	r3, r1
 801ab62:	4630      	mov	r0, r6
 801ab64:	4639      	mov	r1, r7
 801ab66:	f7e5 fbb9 	bl	80002dc <__aeabi_dsub>
 801ab6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab6c:	3330      	adds	r3, #48	; 0x30
 801ab6e:	f805 3b01 	strb.w	r3, [r5], #1
 801ab72:	ec53 2b18 	vmov	r2, r3, d8
 801ab76:	4606      	mov	r6, r0
 801ab78:	460f      	mov	r7, r1
 801ab7a:	f7e5 ffd9 	bl	8000b30 <__aeabi_dcmplt>
 801ab7e:	2800      	cmp	r0, #0
 801ab80:	d165      	bne.n	801ac4e <_dtoa_r+0x60e>
 801ab82:	4632      	mov	r2, r6
 801ab84:	463b      	mov	r3, r7
 801ab86:	4935      	ldr	r1, [pc, #212]	; (801ac5c <_dtoa_r+0x61c>)
 801ab88:	2000      	movs	r0, #0
 801ab8a:	f7e5 fba7 	bl	80002dc <__aeabi_dsub>
 801ab8e:	ec53 2b18 	vmov	r2, r3, d8
 801ab92:	f7e5 ffcd 	bl	8000b30 <__aeabi_dcmplt>
 801ab96:	2800      	cmp	r0, #0
 801ab98:	f040 80b8 	bne.w	801ad0c <_dtoa_r+0x6cc>
 801ab9c:	9b02      	ldr	r3, [sp, #8]
 801ab9e:	429d      	cmp	r5, r3
 801aba0:	f43f af75 	beq.w	801aa8e <_dtoa_r+0x44e>
 801aba4:	4b2e      	ldr	r3, [pc, #184]	; (801ac60 <_dtoa_r+0x620>)
 801aba6:	ec51 0b18 	vmov	r0, r1, d8
 801abaa:	2200      	movs	r2, #0
 801abac:	f7e5 fd4e 	bl	800064c <__aeabi_dmul>
 801abb0:	4b2b      	ldr	r3, [pc, #172]	; (801ac60 <_dtoa_r+0x620>)
 801abb2:	ec41 0b18 	vmov	d8, r0, r1
 801abb6:	2200      	movs	r2, #0
 801abb8:	4630      	mov	r0, r6
 801abba:	4639      	mov	r1, r7
 801abbc:	f7e5 fd46 	bl	800064c <__aeabi_dmul>
 801abc0:	4606      	mov	r6, r0
 801abc2:	460f      	mov	r7, r1
 801abc4:	e7c4      	b.n	801ab50 <_dtoa_r+0x510>
 801abc6:	ec51 0b17 	vmov	r0, r1, d7
 801abca:	f7e5 fd3f 	bl	800064c <__aeabi_dmul>
 801abce:	9b02      	ldr	r3, [sp, #8]
 801abd0:	9d00      	ldr	r5, [sp, #0]
 801abd2:	930c      	str	r3, [sp, #48]	; 0x30
 801abd4:	ec41 0b18 	vmov	d8, r0, r1
 801abd8:	4639      	mov	r1, r7
 801abda:	4630      	mov	r0, r6
 801abdc:	f7e5 ffe6 	bl	8000bac <__aeabi_d2iz>
 801abe0:	9011      	str	r0, [sp, #68]	; 0x44
 801abe2:	f7e5 fcc9 	bl	8000578 <__aeabi_i2d>
 801abe6:	4602      	mov	r2, r0
 801abe8:	460b      	mov	r3, r1
 801abea:	4630      	mov	r0, r6
 801abec:	4639      	mov	r1, r7
 801abee:	f7e5 fb75 	bl	80002dc <__aeabi_dsub>
 801abf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801abf4:	3330      	adds	r3, #48	; 0x30
 801abf6:	f805 3b01 	strb.w	r3, [r5], #1
 801abfa:	9b02      	ldr	r3, [sp, #8]
 801abfc:	429d      	cmp	r5, r3
 801abfe:	4606      	mov	r6, r0
 801ac00:	460f      	mov	r7, r1
 801ac02:	f04f 0200 	mov.w	r2, #0
 801ac06:	d133      	bne.n	801ac70 <_dtoa_r+0x630>
 801ac08:	4b18      	ldr	r3, [pc, #96]	; (801ac6c <_dtoa_r+0x62c>)
 801ac0a:	ec51 0b18 	vmov	r0, r1, d8
 801ac0e:	f7e5 fb67 	bl	80002e0 <__adddf3>
 801ac12:	4602      	mov	r2, r0
 801ac14:	460b      	mov	r3, r1
 801ac16:	4630      	mov	r0, r6
 801ac18:	4639      	mov	r1, r7
 801ac1a:	f7e5 ffa7 	bl	8000b6c <__aeabi_dcmpgt>
 801ac1e:	2800      	cmp	r0, #0
 801ac20:	d174      	bne.n	801ad0c <_dtoa_r+0x6cc>
 801ac22:	ec53 2b18 	vmov	r2, r3, d8
 801ac26:	4911      	ldr	r1, [pc, #68]	; (801ac6c <_dtoa_r+0x62c>)
 801ac28:	2000      	movs	r0, #0
 801ac2a:	f7e5 fb57 	bl	80002dc <__aeabi_dsub>
 801ac2e:	4602      	mov	r2, r0
 801ac30:	460b      	mov	r3, r1
 801ac32:	4630      	mov	r0, r6
 801ac34:	4639      	mov	r1, r7
 801ac36:	f7e5 ff7b 	bl	8000b30 <__aeabi_dcmplt>
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	f43f af27 	beq.w	801aa8e <_dtoa_r+0x44e>
 801ac40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ac42:	1e6b      	subs	r3, r5, #1
 801ac44:	930c      	str	r3, [sp, #48]	; 0x30
 801ac46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ac4a:	2b30      	cmp	r3, #48	; 0x30
 801ac4c:	d0f8      	beq.n	801ac40 <_dtoa_r+0x600>
 801ac4e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ac52:	e049      	b.n	801ace8 <_dtoa_r+0x6a8>
 801ac54:	080239f0 	.word	0x080239f0
 801ac58:	080239c8 	.word	0x080239c8
 801ac5c:	3ff00000 	.word	0x3ff00000
 801ac60:	40240000 	.word	0x40240000
 801ac64:	401c0000 	.word	0x401c0000
 801ac68:	40140000 	.word	0x40140000
 801ac6c:	3fe00000 	.word	0x3fe00000
 801ac70:	4baf      	ldr	r3, [pc, #700]	; (801af30 <_dtoa_r+0x8f0>)
 801ac72:	f7e5 fceb 	bl	800064c <__aeabi_dmul>
 801ac76:	4606      	mov	r6, r0
 801ac78:	460f      	mov	r7, r1
 801ac7a:	e7ad      	b.n	801abd8 <_dtoa_r+0x598>
 801ac7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ac80:	9d00      	ldr	r5, [sp, #0]
 801ac82:	4642      	mov	r2, r8
 801ac84:	464b      	mov	r3, r9
 801ac86:	4630      	mov	r0, r6
 801ac88:	4639      	mov	r1, r7
 801ac8a:	f7e5 fe09 	bl	80008a0 <__aeabi_ddiv>
 801ac8e:	f7e5 ff8d 	bl	8000bac <__aeabi_d2iz>
 801ac92:	9002      	str	r0, [sp, #8]
 801ac94:	f7e5 fc70 	bl	8000578 <__aeabi_i2d>
 801ac98:	4642      	mov	r2, r8
 801ac9a:	464b      	mov	r3, r9
 801ac9c:	f7e5 fcd6 	bl	800064c <__aeabi_dmul>
 801aca0:	4602      	mov	r2, r0
 801aca2:	460b      	mov	r3, r1
 801aca4:	4630      	mov	r0, r6
 801aca6:	4639      	mov	r1, r7
 801aca8:	f7e5 fb18 	bl	80002dc <__aeabi_dsub>
 801acac:	9e02      	ldr	r6, [sp, #8]
 801acae:	9f01      	ldr	r7, [sp, #4]
 801acb0:	3630      	adds	r6, #48	; 0x30
 801acb2:	f805 6b01 	strb.w	r6, [r5], #1
 801acb6:	9e00      	ldr	r6, [sp, #0]
 801acb8:	1bae      	subs	r6, r5, r6
 801acba:	42b7      	cmp	r7, r6
 801acbc:	4602      	mov	r2, r0
 801acbe:	460b      	mov	r3, r1
 801acc0:	d137      	bne.n	801ad32 <_dtoa_r+0x6f2>
 801acc2:	f7e5 fb0d 	bl	80002e0 <__adddf3>
 801acc6:	4642      	mov	r2, r8
 801acc8:	464b      	mov	r3, r9
 801acca:	4606      	mov	r6, r0
 801accc:	460f      	mov	r7, r1
 801acce:	f7e5 ff4d 	bl	8000b6c <__aeabi_dcmpgt>
 801acd2:	b9c8      	cbnz	r0, 801ad08 <_dtoa_r+0x6c8>
 801acd4:	4642      	mov	r2, r8
 801acd6:	464b      	mov	r3, r9
 801acd8:	4630      	mov	r0, r6
 801acda:	4639      	mov	r1, r7
 801acdc:	f7e5 ff1e 	bl	8000b1c <__aeabi_dcmpeq>
 801ace0:	b110      	cbz	r0, 801ace8 <_dtoa_r+0x6a8>
 801ace2:	9b02      	ldr	r3, [sp, #8]
 801ace4:	07d9      	lsls	r1, r3, #31
 801ace6:	d40f      	bmi.n	801ad08 <_dtoa_r+0x6c8>
 801ace8:	4620      	mov	r0, r4
 801acea:	4659      	mov	r1, fp
 801acec:	f001 f82b 	bl	801bd46 <_Bfree>
 801acf0:	2300      	movs	r3, #0
 801acf2:	702b      	strb	r3, [r5, #0]
 801acf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acf6:	f10a 0001 	add.w	r0, sl, #1
 801acfa:	6018      	str	r0, [r3, #0]
 801acfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	f43f acd9 	beq.w	801a6b6 <_dtoa_r+0x76>
 801ad04:	601d      	str	r5, [r3, #0]
 801ad06:	e4d6      	b.n	801a6b6 <_dtoa_r+0x76>
 801ad08:	f8cd a01c 	str.w	sl, [sp, #28]
 801ad0c:	462b      	mov	r3, r5
 801ad0e:	461d      	mov	r5, r3
 801ad10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ad14:	2a39      	cmp	r2, #57	; 0x39
 801ad16:	d108      	bne.n	801ad2a <_dtoa_r+0x6ea>
 801ad18:	9a00      	ldr	r2, [sp, #0]
 801ad1a:	429a      	cmp	r2, r3
 801ad1c:	d1f7      	bne.n	801ad0e <_dtoa_r+0x6ce>
 801ad1e:	9a07      	ldr	r2, [sp, #28]
 801ad20:	9900      	ldr	r1, [sp, #0]
 801ad22:	3201      	adds	r2, #1
 801ad24:	9207      	str	r2, [sp, #28]
 801ad26:	2230      	movs	r2, #48	; 0x30
 801ad28:	700a      	strb	r2, [r1, #0]
 801ad2a:	781a      	ldrb	r2, [r3, #0]
 801ad2c:	3201      	adds	r2, #1
 801ad2e:	701a      	strb	r2, [r3, #0]
 801ad30:	e78d      	b.n	801ac4e <_dtoa_r+0x60e>
 801ad32:	4b7f      	ldr	r3, [pc, #508]	; (801af30 <_dtoa_r+0x8f0>)
 801ad34:	2200      	movs	r2, #0
 801ad36:	f7e5 fc89 	bl	800064c <__aeabi_dmul>
 801ad3a:	2200      	movs	r2, #0
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	4606      	mov	r6, r0
 801ad40:	460f      	mov	r7, r1
 801ad42:	f7e5 feeb 	bl	8000b1c <__aeabi_dcmpeq>
 801ad46:	2800      	cmp	r0, #0
 801ad48:	d09b      	beq.n	801ac82 <_dtoa_r+0x642>
 801ad4a:	e7cd      	b.n	801ace8 <_dtoa_r+0x6a8>
 801ad4c:	9a08      	ldr	r2, [sp, #32]
 801ad4e:	2a00      	cmp	r2, #0
 801ad50:	f000 80c4 	beq.w	801aedc <_dtoa_r+0x89c>
 801ad54:	9a05      	ldr	r2, [sp, #20]
 801ad56:	2a01      	cmp	r2, #1
 801ad58:	f300 80a8 	bgt.w	801aeac <_dtoa_r+0x86c>
 801ad5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad5e:	2a00      	cmp	r2, #0
 801ad60:	f000 80a0 	beq.w	801aea4 <_dtoa_r+0x864>
 801ad64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ad68:	9e06      	ldr	r6, [sp, #24]
 801ad6a:	4645      	mov	r5, r8
 801ad6c:	9a04      	ldr	r2, [sp, #16]
 801ad6e:	2101      	movs	r1, #1
 801ad70:	441a      	add	r2, r3
 801ad72:	4620      	mov	r0, r4
 801ad74:	4498      	add	r8, r3
 801ad76:	9204      	str	r2, [sp, #16]
 801ad78:	f001 f888 	bl	801be8c <__i2b>
 801ad7c:	4607      	mov	r7, r0
 801ad7e:	2d00      	cmp	r5, #0
 801ad80:	dd0b      	ble.n	801ad9a <_dtoa_r+0x75a>
 801ad82:	9b04      	ldr	r3, [sp, #16]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	dd08      	ble.n	801ad9a <_dtoa_r+0x75a>
 801ad88:	42ab      	cmp	r3, r5
 801ad8a:	9a04      	ldr	r2, [sp, #16]
 801ad8c:	bfa8      	it	ge
 801ad8e:	462b      	movge	r3, r5
 801ad90:	eba8 0803 	sub.w	r8, r8, r3
 801ad94:	1aed      	subs	r5, r5, r3
 801ad96:	1ad3      	subs	r3, r2, r3
 801ad98:	9304      	str	r3, [sp, #16]
 801ad9a:	9b06      	ldr	r3, [sp, #24]
 801ad9c:	b1fb      	cbz	r3, 801adde <_dtoa_r+0x79e>
 801ad9e:	9b08      	ldr	r3, [sp, #32]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	f000 809f 	beq.w	801aee4 <_dtoa_r+0x8a4>
 801ada6:	2e00      	cmp	r6, #0
 801ada8:	dd11      	ble.n	801adce <_dtoa_r+0x78e>
 801adaa:	4639      	mov	r1, r7
 801adac:	4632      	mov	r2, r6
 801adae:	4620      	mov	r0, r4
 801adb0:	f001 f928 	bl	801c004 <__pow5mult>
 801adb4:	465a      	mov	r2, fp
 801adb6:	4601      	mov	r1, r0
 801adb8:	4607      	mov	r7, r0
 801adba:	4620      	mov	r0, r4
 801adbc:	f001 f87c 	bl	801beb8 <__multiply>
 801adc0:	4659      	mov	r1, fp
 801adc2:	9007      	str	r0, [sp, #28]
 801adc4:	4620      	mov	r0, r4
 801adc6:	f000 ffbe 	bl	801bd46 <_Bfree>
 801adca:	9b07      	ldr	r3, [sp, #28]
 801adcc:	469b      	mov	fp, r3
 801adce:	9b06      	ldr	r3, [sp, #24]
 801add0:	1b9a      	subs	r2, r3, r6
 801add2:	d004      	beq.n	801adde <_dtoa_r+0x79e>
 801add4:	4659      	mov	r1, fp
 801add6:	4620      	mov	r0, r4
 801add8:	f001 f914 	bl	801c004 <__pow5mult>
 801addc:	4683      	mov	fp, r0
 801adde:	2101      	movs	r1, #1
 801ade0:	4620      	mov	r0, r4
 801ade2:	f001 f853 	bl	801be8c <__i2b>
 801ade6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ade8:	2b00      	cmp	r3, #0
 801adea:	4606      	mov	r6, r0
 801adec:	dd7c      	ble.n	801aee8 <_dtoa_r+0x8a8>
 801adee:	461a      	mov	r2, r3
 801adf0:	4601      	mov	r1, r0
 801adf2:	4620      	mov	r0, r4
 801adf4:	f001 f906 	bl	801c004 <__pow5mult>
 801adf8:	9b05      	ldr	r3, [sp, #20]
 801adfa:	2b01      	cmp	r3, #1
 801adfc:	4606      	mov	r6, r0
 801adfe:	dd76      	ble.n	801aeee <_dtoa_r+0x8ae>
 801ae00:	2300      	movs	r3, #0
 801ae02:	9306      	str	r3, [sp, #24]
 801ae04:	6933      	ldr	r3, [r6, #16]
 801ae06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ae0a:	6918      	ldr	r0, [r3, #16]
 801ae0c:	f000 ffee 	bl	801bdec <__hi0bits>
 801ae10:	f1c0 0020 	rsb	r0, r0, #32
 801ae14:	9b04      	ldr	r3, [sp, #16]
 801ae16:	4418      	add	r0, r3
 801ae18:	f010 001f 	ands.w	r0, r0, #31
 801ae1c:	f000 8086 	beq.w	801af2c <_dtoa_r+0x8ec>
 801ae20:	f1c0 0320 	rsb	r3, r0, #32
 801ae24:	2b04      	cmp	r3, #4
 801ae26:	dd7f      	ble.n	801af28 <_dtoa_r+0x8e8>
 801ae28:	f1c0 001c 	rsb	r0, r0, #28
 801ae2c:	9b04      	ldr	r3, [sp, #16]
 801ae2e:	4403      	add	r3, r0
 801ae30:	4480      	add	r8, r0
 801ae32:	4405      	add	r5, r0
 801ae34:	9304      	str	r3, [sp, #16]
 801ae36:	f1b8 0f00 	cmp.w	r8, #0
 801ae3a:	dd05      	ble.n	801ae48 <_dtoa_r+0x808>
 801ae3c:	4659      	mov	r1, fp
 801ae3e:	4642      	mov	r2, r8
 801ae40:	4620      	mov	r0, r4
 801ae42:	f001 f91f 	bl	801c084 <__lshift>
 801ae46:	4683      	mov	fp, r0
 801ae48:	9b04      	ldr	r3, [sp, #16]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	dd05      	ble.n	801ae5a <_dtoa_r+0x81a>
 801ae4e:	4631      	mov	r1, r6
 801ae50:	461a      	mov	r2, r3
 801ae52:	4620      	mov	r0, r4
 801ae54:	f001 f916 	bl	801c084 <__lshift>
 801ae58:	4606      	mov	r6, r0
 801ae5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d069      	beq.n	801af34 <_dtoa_r+0x8f4>
 801ae60:	4631      	mov	r1, r6
 801ae62:	4658      	mov	r0, fp
 801ae64:	f001 f97a 	bl	801c15c <__mcmp>
 801ae68:	2800      	cmp	r0, #0
 801ae6a:	da63      	bge.n	801af34 <_dtoa_r+0x8f4>
 801ae6c:	2300      	movs	r3, #0
 801ae6e:	4659      	mov	r1, fp
 801ae70:	220a      	movs	r2, #10
 801ae72:	4620      	mov	r0, r4
 801ae74:	f000 ff70 	bl	801bd58 <__multadd>
 801ae78:	9b08      	ldr	r3, [sp, #32]
 801ae7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ae7e:	4683      	mov	fp, r0
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	f000 818e 	beq.w	801b1a2 <_dtoa_r+0xb62>
 801ae86:	4639      	mov	r1, r7
 801ae88:	2300      	movs	r3, #0
 801ae8a:	220a      	movs	r2, #10
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f000 ff63 	bl	801bd58 <__multadd>
 801ae92:	f1b9 0f00 	cmp.w	r9, #0
 801ae96:	4607      	mov	r7, r0
 801ae98:	f300 808e 	bgt.w	801afb8 <_dtoa_r+0x978>
 801ae9c:	9b05      	ldr	r3, [sp, #20]
 801ae9e:	2b02      	cmp	r3, #2
 801aea0:	dc50      	bgt.n	801af44 <_dtoa_r+0x904>
 801aea2:	e089      	b.n	801afb8 <_dtoa_r+0x978>
 801aea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801aea6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801aeaa:	e75d      	b.n	801ad68 <_dtoa_r+0x728>
 801aeac:	9b01      	ldr	r3, [sp, #4]
 801aeae:	1e5e      	subs	r6, r3, #1
 801aeb0:	9b06      	ldr	r3, [sp, #24]
 801aeb2:	42b3      	cmp	r3, r6
 801aeb4:	bfbf      	itttt	lt
 801aeb6:	9b06      	ldrlt	r3, [sp, #24]
 801aeb8:	9606      	strlt	r6, [sp, #24]
 801aeba:	1af2      	sublt	r2, r6, r3
 801aebc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801aebe:	bfb6      	itet	lt
 801aec0:	189b      	addlt	r3, r3, r2
 801aec2:	1b9e      	subge	r6, r3, r6
 801aec4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801aec6:	9b01      	ldr	r3, [sp, #4]
 801aec8:	bfb8      	it	lt
 801aeca:	2600      	movlt	r6, #0
 801aecc:	2b00      	cmp	r3, #0
 801aece:	bfb5      	itete	lt
 801aed0:	eba8 0503 	sublt.w	r5, r8, r3
 801aed4:	9b01      	ldrge	r3, [sp, #4]
 801aed6:	2300      	movlt	r3, #0
 801aed8:	4645      	movge	r5, r8
 801aeda:	e747      	b.n	801ad6c <_dtoa_r+0x72c>
 801aedc:	9e06      	ldr	r6, [sp, #24]
 801aede:	9f08      	ldr	r7, [sp, #32]
 801aee0:	4645      	mov	r5, r8
 801aee2:	e74c      	b.n	801ad7e <_dtoa_r+0x73e>
 801aee4:	9a06      	ldr	r2, [sp, #24]
 801aee6:	e775      	b.n	801add4 <_dtoa_r+0x794>
 801aee8:	9b05      	ldr	r3, [sp, #20]
 801aeea:	2b01      	cmp	r3, #1
 801aeec:	dc18      	bgt.n	801af20 <_dtoa_r+0x8e0>
 801aeee:	9b02      	ldr	r3, [sp, #8]
 801aef0:	b9b3      	cbnz	r3, 801af20 <_dtoa_r+0x8e0>
 801aef2:	9b03      	ldr	r3, [sp, #12]
 801aef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aef8:	b9a3      	cbnz	r3, 801af24 <_dtoa_r+0x8e4>
 801aefa:	9b03      	ldr	r3, [sp, #12]
 801aefc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801af00:	0d1b      	lsrs	r3, r3, #20
 801af02:	051b      	lsls	r3, r3, #20
 801af04:	b12b      	cbz	r3, 801af12 <_dtoa_r+0x8d2>
 801af06:	9b04      	ldr	r3, [sp, #16]
 801af08:	3301      	adds	r3, #1
 801af0a:	9304      	str	r3, [sp, #16]
 801af0c:	f108 0801 	add.w	r8, r8, #1
 801af10:	2301      	movs	r3, #1
 801af12:	9306      	str	r3, [sp, #24]
 801af14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af16:	2b00      	cmp	r3, #0
 801af18:	f47f af74 	bne.w	801ae04 <_dtoa_r+0x7c4>
 801af1c:	2001      	movs	r0, #1
 801af1e:	e779      	b.n	801ae14 <_dtoa_r+0x7d4>
 801af20:	2300      	movs	r3, #0
 801af22:	e7f6      	b.n	801af12 <_dtoa_r+0x8d2>
 801af24:	9b02      	ldr	r3, [sp, #8]
 801af26:	e7f4      	b.n	801af12 <_dtoa_r+0x8d2>
 801af28:	d085      	beq.n	801ae36 <_dtoa_r+0x7f6>
 801af2a:	4618      	mov	r0, r3
 801af2c:	301c      	adds	r0, #28
 801af2e:	e77d      	b.n	801ae2c <_dtoa_r+0x7ec>
 801af30:	40240000 	.word	0x40240000
 801af34:	9b01      	ldr	r3, [sp, #4]
 801af36:	2b00      	cmp	r3, #0
 801af38:	dc38      	bgt.n	801afac <_dtoa_r+0x96c>
 801af3a:	9b05      	ldr	r3, [sp, #20]
 801af3c:	2b02      	cmp	r3, #2
 801af3e:	dd35      	ble.n	801afac <_dtoa_r+0x96c>
 801af40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801af44:	f1b9 0f00 	cmp.w	r9, #0
 801af48:	d10d      	bne.n	801af66 <_dtoa_r+0x926>
 801af4a:	4631      	mov	r1, r6
 801af4c:	464b      	mov	r3, r9
 801af4e:	2205      	movs	r2, #5
 801af50:	4620      	mov	r0, r4
 801af52:	f000 ff01 	bl	801bd58 <__multadd>
 801af56:	4601      	mov	r1, r0
 801af58:	4606      	mov	r6, r0
 801af5a:	4658      	mov	r0, fp
 801af5c:	f001 f8fe 	bl	801c15c <__mcmp>
 801af60:	2800      	cmp	r0, #0
 801af62:	f73f adbe 	bgt.w	801aae2 <_dtoa_r+0x4a2>
 801af66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af68:	9d00      	ldr	r5, [sp, #0]
 801af6a:	ea6f 0a03 	mvn.w	sl, r3
 801af6e:	f04f 0800 	mov.w	r8, #0
 801af72:	4631      	mov	r1, r6
 801af74:	4620      	mov	r0, r4
 801af76:	f000 fee6 	bl	801bd46 <_Bfree>
 801af7a:	2f00      	cmp	r7, #0
 801af7c:	f43f aeb4 	beq.w	801ace8 <_dtoa_r+0x6a8>
 801af80:	f1b8 0f00 	cmp.w	r8, #0
 801af84:	d005      	beq.n	801af92 <_dtoa_r+0x952>
 801af86:	45b8      	cmp	r8, r7
 801af88:	d003      	beq.n	801af92 <_dtoa_r+0x952>
 801af8a:	4641      	mov	r1, r8
 801af8c:	4620      	mov	r0, r4
 801af8e:	f000 feda 	bl	801bd46 <_Bfree>
 801af92:	4639      	mov	r1, r7
 801af94:	4620      	mov	r0, r4
 801af96:	f000 fed6 	bl	801bd46 <_Bfree>
 801af9a:	e6a5      	b.n	801ace8 <_dtoa_r+0x6a8>
 801af9c:	2600      	movs	r6, #0
 801af9e:	4637      	mov	r7, r6
 801afa0:	e7e1      	b.n	801af66 <_dtoa_r+0x926>
 801afa2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801afa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801afa8:	4637      	mov	r7, r6
 801afaa:	e59a      	b.n	801aae2 <_dtoa_r+0x4a2>
 801afac:	9b08      	ldr	r3, [sp, #32]
 801afae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	f000 80fc 	beq.w	801b1b0 <_dtoa_r+0xb70>
 801afb8:	2d00      	cmp	r5, #0
 801afba:	dd05      	ble.n	801afc8 <_dtoa_r+0x988>
 801afbc:	4639      	mov	r1, r7
 801afbe:	462a      	mov	r2, r5
 801afc0:	4620      	mov	r0, r4
 801afc2:	f001 f85f 	bl	801c084 <__lshift>
 801afc6:	4607      	mov	r7, r0
 801afc8:	9b06      	ldr	r3, [sp, #24]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d05b      	beq.n	801b086 <_dtoa_r+0xa46>
 801afce:	6879      	ldr	r1, [r7, #4]
 801afd0:	4620      	mov	r0, r4
 801afd2:	f000 fe93 	bl	801bcfc <_Balloc>
 801afd6:	4605      	mov	r5, r0
 801afd8:	b920      	cbnz	r0, 801afe4 <_dtoa_r+0x9a4>
 801afda:	4b80      	ldr	r3, [pc, #512]	; (801b1dc <_dtoa_r+0xb9c>)
 801afdc:	4602      	mov	r2, r0
 801afde:	f240 21ea 	movw	r1, #746	; 0x2ea
 801afe2:	e45b      	b.n	801a89c <_dtoa_r+0x25c>
 801afe4:	693a      	ldr	r2, [r7, #16]
 801afe6:	3202      	adds	r2, #2
 801afe8:	0092      	lsls	r2, r2, #2
 801afea:	f107 010c 	add.w	r1, r7, #12
 801afee:	300c      	adds	r0, #12
 801aff0:	f7fd f9ee 	bl	80183d0 <memcpy>
 801aff4:	2201      	movs	r2, #1
 801aff6:	4629      	mov	r1, r5
 801aff8:	4620      	mov	r0, r4
 801affa:	f001 f843 	bl	801c084 <__lshift>
 801affe:	9b00      	ldr	r3, [sp, #0]
 801b000:	3301      	adds	r3, #1
 801b002:	9301      	str	r3, [sp, #4]
 801b004:	9b00      	ldr	r3, [sp, #0]
 801b006:	444b      	add	r3, r9
 801b008:	9307      	str	r3, [sp, #28]
 801b00a:	9b02      	ldr	r3, [sp, #8]
 801b00c:	f003 0301 	and.w	r3, r3, #1
 801b010:	46b8      	mov	r8, r7
 801b012:	9306      	str	r3, [sp, #24]
 801b014:	4607      	mov	r7, r0
 801b016:	9b01      	ldr	r3, [sp, #4]
 801b018:	4631      	mov	r1, r6
 801b01a:	3b01      	subs	r3, #1
 801b01c:	4658      	mov	r0, fp
 801b01e:	9302      	str	r3, [sp, #8]
 801b020:	f7ff fa80 	bl	801a524 <quorem>
 801b024:	4603      	mov	r3, r0
 801b026:	3330      	adds	r3, #48	; 0x30
 801b028:	9004      	str	r0, [sp, #16]
 801b02a:	4641      	mov	r1, r8
 801b02c:	4658      	mov	r0, fp
 801b02e:	9308      	str	r3, [sp, #32]
 801b030:	f001 f894 	bl	801c15c <__mcmp>
 801b034:	463a      	mov	r2, r7
 801b036:	4681      	mov	r9, r0
 801b038:	4631      	mov	r1, r6
 801b03a:	4620      	mov	r0, r4
 801b03c:	f001 f8aa 	bl	801c194 <__mdiff>
 801b040:	68c2      	ldr	r2, [r0, #12]
 801b042:	9b08      	ldr	r3, [sp, #32]
 801b044:	4605      	mov	r5, r0
 801b046:	bb02      	cbnz	r2, 801b08a <_dtoa_r+0xa4a>
 801b048:	4601      	mov	r1, r0
 801b04a:	4658      	mov	r0, fp
 801b04c:	f001 f886 	bl	801c15c <__mcmp>
 801b050:	9b08      	ldr	r3, [sp, #32]
 801b052:	4602      	mov	r2, r0
 801b054:	4629      	mov	r1, r5
 801b056:	4620      	mov	r0, r4
 801b058:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b05c:	f000 fe73 	bl	801bd46 <_Bfree>
 801b060:	9b05      	ldr	r3, [sp, #20]
 801b062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b064:	9d01      	ldr	r5, [sp, #4]
 801b066:	ea43 0102 	orr.w	r1, r3, r2
 801b06a:	9b06      	ldr	r3, [sp, #24]
 801b06c:	430b      	orrs	r3, r1
 801b06e:	9b08      	ldr	r3, [sp, #32]
 801b070:	d10d      	bne.n	801b08e <_dtoa_r+0xa4e>
 801b072:	2b39      	cmp	r3, #57	; 0x39
 801b074:	d029      	beq.n	801b0ca <_dtoa_r+0xa8a>
 801b076:	f1b9 0f00 	cmp.w	r9, #0
 801b07a:	dd01      	ble.n	801b080 <_dtoa_r+0xa40>
 801b07c:	9b04      	ldr	r3, [sp, #16]
 801b07e:	3331      	adds	r3, #49	; 0x31
 801b080:	9a02      	ldr	r2, [sp, #8]
 801b082:	7013      	strb	r3, [r2, #0]
 801b084:	e775      	b.n	801af72 <_dtoa_r+0x932>
 801b086:	4638      	mov	r0, r7
 801b088:	e7b9      	b.n	801affe <_dtoa_r+0x9be>
 801b08a:	2201      	movs	r2, #1
 801b08c:	e7e2      	b.n	801b054 <_dtoa_r+0xa14>
 801b08e:	f1b9 0f00 	cmp.w	r9, #0
 801b092:	db06      	blt.n	801b0a2 <_dtoa_r+0xa62>
 801b094:	9905      	ldr	r1, [sp, #20]
 801b096:	ea41 0909 	orr.w	r9, r1, r9
 801b09a:	9906      	ldr	r1, [sp, #24]
 801b09c:	ea59 0101 	orrs.w	r1, r9, r1
 801b0a0:	d120      	bne.n	801b0e4 <_dtoa_r+0xaa4>
 801b0a2:	2a00      	cmp	r2, #0
 801b0a4:	ddec      	ble.n	801b080 <_dtoa_r+0xa40>
 801b0a6:	4659      	mov	r1, fp
 801b0a8:	2201      	movs	r2, #1
 801b0aa:	4620      	mov	r0, r4
 801b0ac:	9301      	str	r3, [sp, #4]
 801b0ae:	f000 ffe9 	bl	801c084 <__lshift>
 801b0b2:	4631      	mov	r1, r6
 801b0b4:	4683      	mov	fp, r0
 801b0b6:	f001 f851 	bl	801c15c <__mcmp>
 801b0ba:	2800      	cmp	r0, #0
 801b0bc:	9b01      	ldr	r3, [sp, #4]
 801b0be:	dc02      	bgt.n	801b0c6 <_dtoa_r+0xa86>
 801b0c0:	d1de      	bne.n	801b080 <_dtoa_r+0xa40>
 801b0c2:	07da      	lsls	r2, r3, #31
 801b0c4:	d5dc      	bpl.n	801b080 <_dtoa_r+0xa40>
 801b0c6:	2b39      	cmp	r3, #57	; 0x39
 801b0c8:	d1d8      	bne.n	801b07c <_dtoa_r+0xa3c>
 801b0ca:	9a02      	ldr	r2, [sp, #8]
 801b0cc:	2339      	movs	r3, #57	; 0x39
 801b0ce:	7013      	strb	r3, [r2, #0]
 801b0d0:	462b      	mov	r3, r5
 801b0d2:	461d      	mov	r5, r3
 801b0d4:	3b01      	subs	r3, #1
 801b0d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b0da:	2a39      	cmp	r2, #57	; 0x39
 801b0dc:	d050      	beq.n	801b180 <_dtoa_r+0xb40>
 801b0de:	3201      	adds	r2, #1
 801b0e0:	701a      	strb	r2, [r3, #0]
 801b0e2:	e746      	b.n	801af72 <_dtoa_r+0x932>
 801b0e4:	2a00      	cmp	r2, #0
 801b0e6:	dd03      	ble.n	801b0f0 <_dtoa_r+0xab0>
 801b0e8:	2b39      	cmp	r3, #57	; 0x39
 801b0ea:	d0ee      	beq.n	801b0ca <_dtoa_r+0xa8a>
 801b0ec:	3301      	adds	r3, #1
 801b0ee:	e7c7      	b.n	801b080 <_dtoa_r+0xa40>
 801b0f0:	9a01      	ldr	r2, [sp, #4]
 801b0f2:	9907      	ldr	r1, [sp, #28]
 801b0f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b0f8:	428a      	cmp	r2, r1
 801b0fa:	d02a      	beq.n	801b152 <_dtoa_r+0xb12>
 801b0fc:	4659      	mov	r1, fp
 801b0fe:	2300      	movs	r3, #0
 801b100:	220a      	movs	r2, #10
 801b102:	4620      	mov	r0, r4
 801b104:	f000 fe28 	bl	801bd58 <__multadd>
 801b108:	45b8      	cmp	r8, r7
 801b10a:	4683      	mov	fp, r0
 801b10c:	f04f 0300 	mov.w	r3, #0
 801b110:	f04f 020a 	mov.w	r2, #10
 801b114:	4641      	mov	r1, r8
 801b116:	4620      	mov	r0, r4
 801b118:	d107      	bne.n	801b12a <_dtoa_r+0xaea>
 801b11a:	f000 fe1d 	bl	801bd58 <__multadd>
 801b11e:	4680      	mov	r8, r0
 801b120:	4607      	mov	r7, r0
 801b122:	9b01      	ldr	r3, [sp, #4]
 801b124:	3301      	adds	r3, #1
 801b126:	9301      	str	r3, [sp, #4]
 801b128:	e775      	b.n	801b016 <_dtoa_r+0x9d6>
 801b12a:	f000 fe15 	bl	801bd58 <__multadd>
 801b12e:	4639      	mov	r1, r7
 801b130:	4680      	mov	r8, r0
 801b132:	2300      	movs	r3, #0
 801b134:	220a      	movs	r2, #10
 801b136:	4620      	mov	r0, r4
 801b138:	f000 fe0e 	bl	801bd58 <__multadd>
 801b13c:	4607      	mov	r7, r0
 801b13e:	e7f0      	b.n	801b122 <_dtoa_r+0xae2>
 801b140:	f1b9 0f00 	cmp.w	r9, #0
 801b144:	9a00      	ldr	r2, [sp, #0]
 801b146:	bfcc      	ite	gt
 801b148:	464d      	movgt	r5, r9
 801b14a:	2501      	movle	r5, #1
 801b14c:	4415      	add	r5, r2
 801b14e:	f04f 0800 	mov.w	r8, #0
 801b152:	4659      	mov	r1, fp
 801b154:	2201      	movs	r2, #1
 801b156:	4620      	mov	r0, r4
 801b158:	9301      	str	r3, [sp, #4]
 801b15a:	f000 ff93 	bl	801c084 <__lshift>
 801b15e:	4631      	mov	r1, r6
 801b160:	4683      	mov	fp, r0
 801b162:	f000 fffb 	bl	801c15c <__mcmp>
 801b166:	2800      	cmp	r0, #0
 801b168:	dcb2      	bgt.n	801b0d0 <_dtoa_r+0xa90>
 801b16a:	d102      	bne.n	801b172 <_dtoa_r+0xb32>
 801b16c:	9b01      	ldr	r3, [sp, #4]
 801b16e:	07db      	lsls	r3, r3, #31
 801b170:	d4ae      	bmi.n	801b0d0 <_dtoa_r+0xa90>
 801b172:	462b      	mov	r3, r5
 801b174:	461d      	mov	r5, r3
 801b176:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b17a:	2a30      	cmp	r2, #48	; 0x30
 801b17c:	d0fa      	beq.n	801b174 <_dtoa_r+0xb34>
 801b17e:	e6f8      	b.n	801af72 <_dtoa_r+0x932>
 801b180:	9a00      	ldr	r2, [sp, #0]
 801b182:	429a      	cmp	r2, r3
 801b184:	d1a5      	bne.n	801b0d2 <_dtoa_r+0xa92>
 801b186:	f10a 0a01 	add.w	sl, sl, #1
 801b18a:	2331      	movs	r3, #49	; 0x31
 801b18c:	e779      	b.n	801b082 <_dtoa_r+0xa42>
 801b18e:	4b14      	ldr	r3, [pc, #80]	; (801b1e0 <_dtoa_r+0xba0>)
 801b190:	f7ff bab1 	b.w	801a6f6 <_dtoa_r+0xb6>
 801b194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b196:	2b00      	cmp	r3, #0
 801b198:	f47f aa93 	bne.w	801a6c2 <_dtoa_r+0x82>
 801b19c:	4b11      	ldr	r3, [pc, #68]	; (801b1e4 <_dtoa_r+0xba4>)
 801b19e:	f7ff baaa 	b.w	801a6f6 <_dtoa_r+0xb6>
 801b1a2:	f1b9 0f00 	cmp.w	r9, #0
 801b1a6:	dc03      	bgt.n	801b1b0 <_dtoa_r+0xb70>
 801b1a8:	9b05      	ldr	r3, [sp, #20]
 801b1aa:	2b02      	cmp	r3, #2
 801b1ac:	f73f aeca 	bgt.w	801af44 <_dtoa_r+0x904>
 801b1b0:	9d00      	ldr	r5, [sp, #0]
 801b1b2:	4631      	mov	r1, r6
 801b1b4:	4658      	mov	r0, fp
 801b1b6:	f7ff f9b5 	bl	801a524 <quorem>
 801b1ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801b1be:	f805 3b01 	strb.w	r3, [r5], #1
 801b1c2:	9a00      	ldr	r2, [sp, #0]
 801b1c4:	1aaa      	subs	r2, r5, r2
 801b1c6:	4591      	cmp	r9, r2
 801b1c8:	ddba      	ble.n	801b140 <_dtoa_r+0xb00>
 801b1ca:	4659      	mov	r1, fp
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	220a      	movs	r2, #10
 801b1d0:	4620      	mov	r0, r4
 801b1d2:	f000 fdc1 	bl	801bd58 <__multadd>
 801b1d6:	4683      	mov	fp, r0
 801b1d8:	e7eb      	b.n	801b1b2 <_dtoa_r+0xb72>
 801b1da:	bf00      	nop
 801b1dc:	08023891 	.word	0x08023891
 801b1e0:	08023862 	.word	0x08023862
 801b1e4:	08023888 	.word	0x08023888

0801b1e8 <__errno>:
 801b1e8:	4b01      	ldr	r3, [pc, #4]	; (801b1f0 <__errno+0x8>)
 801b1ea:	6818      	ldr	r0, [r3, #0]
 801b1ec:	4770      	bx	lr
 801b1ee:	bf00      	nop
 801b1f0:	20000038 	.word	0x20000038

0801b1f4 <__sflush_r>:
 801b1f4:	898b      	ldrh	r3, [r1, #12]
 801b1f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1fe:	4605      	mov	r5, r0
 801b200:	0718      	lsls	r0, r3, #28
 801b202:	460c      	mov	r4, r1
 801b204:	d45f      	bmi.n	801b2c6 <__sflush_r+0xd2>
 801b206:	684b      	ldr	r3, [r1, #4]
 801b208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	818a      	strh	r2, [r1, #12]
 801b210:	dc05      	bgt.n	801b21e <__sflush_r+0x2a>
 801b212:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801b214:	2b00      	cmp	r3, #0
 801b216:	dc02      	bgt.n	801b21e <__sflush_r+0x2a>
 801b218:	2000      	movs	r0, #0
 801b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b21e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b220:	2e00      	cmp	r6, #0
 801b222:	d0f9      	beq.n	801b218 <__sflush_r+0x24>
 801b224:	2300      	movs	r3, #0
 801b226:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b22a:	682f      	ldr	r7, [r5, #0]
 801b22c:	602b      	str	r3, [r5, #0]
 801b22e:	d036      	beq.n	801b29e <__sflush_r+0xaa>
 801b230:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801b232:	89a3      	ldrh	r3, [r4, #12]
 801b234:	075a      	lsls	r2, r3, #29
 801b236:	d505      	bpl.n	801b244 <__sflush_r+0x50>
 801b238:	6863      	ldr	r3, [r4, #4]
 801b23a:	1ac0      	subs	r0, r0, r3
 801b23c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b23e:	b10b      	cbz	r3, 801b244 <__sflush_r+0x50>
 801b240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b242:	1ac0      	subs	r0, r0, r3
 801b244:	2300      	movs	r3, #0
 801b246:	4602      	mov	r2, r0
 801b248:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b24a:	69e1      	ldr	r1, [r4, #28]
 801b24c:	4628      	mov	r0, r5
 801b24e:	47b0      	blx	r6
 801b250:	1c43      	adds	r3, r0, #1
 801b252:	89a3      	ldrh	r3, [r4, #12]
 801b254:	d106      	bne.n	801b264 <__sflush_r+0x70>
 801b256:	6829      	ldr	r1, [r5, #0]
 801b258:	291d      	cmp	r1, #29
 801b25a:	d830      	bhi.n	801b2be <__sflush_r+0xca>
 801b25c:	4a2b      	ldr	r2, [pc, #172]	; (801b30c <__sflush_r+0x118>)
 801b25e:	40ca      	lsrs	r2, r1
 801b260:	07d6      	lsls	r6, r2, #31
 801b262:	d52c      	bpl.n	801b2be <__sflush_r+0xca>
 801b264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b268:	b21b      	sxth	r3, r3
 801b26a:	2200      	movs	r2, #0
 801b26c:	6062      	str	r2, [r4, #4]
 801b26e:	04d9      	lsls	r1, r3, #19
 801b270:	6922      	ldr	r2, [r4, #16]
 801b272:	81a3      	strh	r3, [r4, #12]
 801b274:	6022      	str	r2, [r4, #0]
 801b276:	d504      	bpl.n	801b282 <__sflush_r+0x8e>
 801b278:	1c42      	adds	r2, r0, #1
 801b27a:	d101      	bne.n	801b280 <__sflush_r+0x8c>
 801b27c:	682b      	ldr	r3, [r5, #0]
 801b27e:	b903      	cbnz	r3, 801b282 <__sflush_r+0x8e>
 801b280:	6520      	str	r0, [r4, #80]	; 0x50
 801b282:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b284:	602f      	str	r7, [r5, #0]
 801b286:	2900      	cmp	r1, #0
 801b288:	d0c6      	beq.n	801b218 <__sflush_r+0x24>
 801b28a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801b28e:	4299      	cmp	r1, r3
 801b290:	d002      	beq.n	801b298 <__sflush_r+0xa4>
 801b292:	4628      	mov	r0, r5
 801b294:	f000 f938 	bl	801b508 <_free_r>
 801b298:	2000      	movs	r0, #0
 801b29a:	6320      	str	r0, [r4, #48]	; 0x30
 801b29c:	e7bd      	b.n	801b21a <__sflush_r+0x26>
 801b29e:	69e1      	ldr	r1, [r4, #28]
 801b2a0:	2301      	movs	r3, #1
 801b2a2:	4628      	mov	r0, r5
 801b2a4:	47b0      	blx	r6
 801b2a6:	1c41      	adds	r1, r0, #1
 801b2a8:	d1c3      	bne.n	801b232 <__sflush_r+0x3e>
 801b2aa:	682b      	ldr	r3, [r5, #0]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d0c0      	beq.n	801b232 <__sflush_r+0x3e>
 801b2b0:	2b1d      	cmp	r3, #29
 801b2b2:	d001      	beq.n	801b2b8 <__sflush_r+0xc4>
 801b2b4:	2b16      	cmp	r3, #22
 801b2b6:	d101      	bne.n	801b2bc <__sflush_r+0xc8>
 801b2b8:	602f      	str	r7, [r5, #0]
 801b2ba:	e7ad      	b.n	801b218 <__sflush_r+0x24>
 801b2bc:	89a3      	ldrh	r3, [r4, #12]
 801b2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2c2:	81a3      	strh	r3, [r4, #12]
 801b2c4:	e7a9      	b.n	801b21a <__sflush_r+0x26>
 801b2c6:	690f      	ldr	r7, [r1, #16]
 801b2c8:	2f00      	cmp	r7, #0
 801b2ca:	d0a5      	beq.n	801b218 <__sflush_r+0x24>
 801b2cc:	079b      	lsls	r3, r3, #30
 801b2ce:	680e      	ldr	r6, [r1, #0]
 801b2d0:	bf08      	it	eq
 801b2d2:	694b      	ldreq	r3, [r1, #20]
 801b2d4:	600f      	str	r7, [r1, #0]
 801b2d6:	bf18      	it	ne
 801b2d8:	2300      	movne	r3, #0
 801b2da:	eba6 0807 	sub.w	r8, r6, r7
 801b2de:	608b      	str	r3, [r1, #8]
 801b2e0:	f1b8 0f00 	cmp.w	r8, #0
 801b2e4:	dd98      	ble.n	801b218 <__sflush_r+0x24>
 801b2e6:	69e1      	ldr	r1, [r4, #28]
 801b2e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b2ea:	4643      	mov	r3, r8
 801b2ec:	463a      	mov	r2, r7
 801b2ee:	4628      	mov	r0, r5
 801b2f0:	47b0      	blx	r6
 801b2f2:	2800      	cmp	r0, #0
 801b2f4:	dc06      	bgt.n	801b304 <__sflush_r+0x110>
 801b2f6:	89a3      	ldrh	r3, [r4, #12]
 801b2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2fc:	81a3      	strh	r3, [r4, #12]
 801b2fe:	f04f 30ff 	mov.w	r0, #4294967295
 801b302:	e78a      	b.n	801b21a <__sflush_r+0x26>
 801b304:	4407      	add	r7, r0
 801b306:	eba8 0800 	sub.w	r8, r8, r0
 801b30a:	e7e9      	b.n	801b2e0 <__sflush_r+0xec>
 801b30c:	20400001 	.word	0x20400001

0801b310 <_fflush_r>:
 801b310:	b538      	push	{r3, r4, r5, lr}
 801b312:	460c      	mov	r4, r1
 801b314:	4605      	mov	r5, r0
 801b316:	b118      	cbz	r0, 801b320 <_fflush_r+0x10>
 801b318:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b31a:	b90b      	cbnz	r3, 801b320 <_fflush_r+0x10>
 801b31c:	f000 f864 	bl	801b3e8 <__sinit>
 801b320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b324:	b1bb      	cbz	r3, 801b356 <_fflush_r+0x46>
 801b326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b328:	07d0      	lsls	r0, r2, #31
 801b32a:	d404      	bmi.n	801b336 <_fflush_r+0x26>
 801b32c:	0599      	lsls	r1, r3, #22
 801b32e:	d402      	bmi.n	801b336 <_fflush_r+0x26>
 801b330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b332:	f000 fa16 	bl	801b762 <__retarget_lock_acquire_recursive>
 801b336:	4628      	mov	r0, r5
 801b338:	4621      	mov	r1, r4
 801b33a:	f7ff ff5b 	bl	801b1f4 <__sflush_r>
 801b33e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b340:	07da      	lsls	r2, r3, #31
 801b342:	4605      	mov	r5, r0
 801b344:	d405      	bmi.n	801b352 <_fflush_r+0x42>
 801b346:	89a3      	ldrh	r3, [r4, #12]
 801b348:	059b      	lsls	r3, r3, #22
 801b34a:	d402      	bmi.n	801b352 <_fflush_r+0x42>
 801b34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b34e:	f000 fa0a 	bl	801b766 <__retarget_lock_release_recursive>
 801b352:	4628      	mov	r0, r5
 801b354:	bd38      	pop	{r3, r4, r5, pc}
 801b356:	461d      	mov	r5, r3
 801b358:	e7fb      	b.n	801b352 <_fflush_r+0x42>
	...

0801b35c <std>:
 801b35c:	2300      	movs	r3, #0
 801b35e:	b510      	push	{r4, lr}
 801b360:	4604      	mov	r4, r0
 801b362:	e9c0 3300 	strd	r3, r3, [r0]
 801b366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b36a:	6083      	str	r3, [r0, #8]
 801b36c:	8181      	strh	r1, [r0, #12]
 801b36e:	6643      	str	r3, [r0, #100]	; 0x64
 801b370:	81c2      	strh	r2, [r0, #14]
 801b372:	6183      	str	r3, [r0, #24]
 801b374:	4619      	mov	r1, r3
 801b376:	2208      	movs	r2, #8
 801b378:	305c      	adds	r0, #92	; 0x5c
 801b37a:	f7fd f851 	bl	8018420 <memset>
 801b37e:	4b07      	ldr	r3, [pc, #28]	; (801b39c <std+0x40>)
 801b380:	6223      	str	r3, [r4, #32]
 801b382:	4b07      	ldr	r3, [pc, #28]	; (801b3a0 <std+0x44>)
 801b384:	6263      	str	r3, [r4, #36]	; 0x24
 801b386:	4b07      	ldr	r3, [pc, #28]	; (801b3a4 <std+0x48>)
 801b388:	62a3      	str	r3, [r4, #40]	; 0x28
 801b38a:	4b07      	ldr	r3, [pc, #28]	; (801b3a8 <std+0x4c>)
 801b38c:	61e4      	str	r4, [r4, #28]
 801b38e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b390:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b398:	f000 b9e0 	b.w	801b75c <__retarget_lock_init_recursive>
 801b39c:	0801c445 	.word	0x0801c445
 801b3a0:	0801c46b 	.word	0x0801c46b
 801b3a4:	0801c4a3 	.word	0x0801c4a3
 801b3a8:	0801c4c7 	.word	0x0801c4c7

0801b3ac <_cleanup_r>:
 801b3ac:	4901      	ldr	r1, [pc, #4]	; (801b3b4 <_cleanup_r+0x8>)
 801b3ae:	f000 b96b 	b.w	801b688 <_fwalk_reent>
 801b3b2:	bf00      	nop
 801b3b4:	0801e279 	.word	0x0801e279

0801b3b8 <__sfp_lock_acquire>:
 801b3b8:	4801      	ldr	r0, [pc, #4]	; (801b3c0 <__sfp_lock_acquire+0x8>)
 801b3ba:	f000 b9d2 	b.w	801b762 <__retarget_lock_acquire_recursive>
 801b3be:	bf00      	nop
 801b3c0:	2000b6c0 	.word	0x2000b6c0

0801b3c4 <__sfp_lock_release>:
 801b3c4:	4801      	ldr	r0, [pc, #4]	; (801b3cc <__sfp_lock_release+0x8>)
 801b3c6:	f000 b9ce 	b.w	801b766 <__retarget_lock_release_recursive>
 801b3ca:	bf00      	nop
 801b3cc:	2000b6c0 	.word	0x2000b6c0

0801b3d0 <__sinit_lock_acquire>:
 801b3d0:	4801      	ldr	r0, [pc, #4]	; (801b3d8 <__sinit_lock_acquire+0x8>)
 801b3d2:	f000 b9c6 	b.w	801b762 <__retarget_lock_acquire_recursive>
 801b3d6:	bf00      	nop
 801b3d8:	2000b6bb 	.word	0x2000b6bb

0801b3dc <__sinit_lock_release>:
 801b3dc:	4801      	ldr	r0, [pc, #4]	; (801b3e4 <__sinit_lock_release+0x8>)
 801b3de:	f000 b9c2 	b.w	801b766 <__retarget_lock_release_recursive>
 801b3e2:	bf00      	nop
 801b3e4:	2000b6bb 	.word	0x2000b6bb

0801b3e8 <__sinit>:
 801b3e8:	b510      	push	{r4, lr}
 801b3ea:	4604      	mov	r4, r0
 801b3ec:	f7ff fff0 	bl	801b3d0 <__sinit_lock_acquire>
 801b3f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801b3f2:	b11a      	cbz	r2, 801b3fc <__sinit+0x14>
 801b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3f8:	f7ff bff0 	b.w	801b3dc <__sinit_lock_release>
 801b3fc:	4b0d      	ldr	r3, [pc, #52]	; (801b434 <__sinit+0x4c>)
 801b3fe:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b400:	2303      	movs	r3, #3
 801b402:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801b406:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801b40a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801b40e:	6860      	ldr	r0, [r4, #4]
 801b410:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801b414:	2104      	movs	r1, #4
 801b416:	f7ff ffa1 	bl	801b35c <std>
 801b41a:	68a0      	ldr	r0, [r4, #8]
 801b41c:	2201      	movs	r2, #1
 801b41e:	2109      	movs	r1, #9
 801b420:	f7ff ff9c 	bl	801b35c <std>
 801b424:	68e0      	ldr	r0, [r4, #12]
 801b426:	2202      	movs	r2, #2
 801b428:	2112      	movs	r1, #18
 801b42a:	f7ff ff97 	bl	801b35c <std>
 801b42e:	2301      	movs	r3, #1
 801b430:	63a3      	str	r3, [r4, #56]	; 0x38
 801b432:	e7df      	b.n	801b3f4 <__sinit+0xc>
 801b434:	0801b3ad 	.word	0x0801b3ad

0801b438 <__libc_fini_array>:
 801b438:	b538      	push	{r3, r4, r5, lr}
 801b43a:	4d07      	ldr	r5, [pc, #28]	; (801b458 <__libc_fini_array+0x20>)
 801b43c:	4c07      	ldr	r4, [pc, #28]	; (801b45c <__libc_fini_array+0x24>)
 801b43e:	1b64      	subs	r4, r4, r5
 801b440:	10a4      	asrs	r4, r4, #2
 801b442:	b91c      	cbnz	r4, 801b44c <__libc_fini_array+0x14>
 801b444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b448:	f004 bd4e 	b.w	801fee8 <_fini>
 801b44c:	3c01      	subs	r4, #1
 801b44e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801b452:	4798      	blx	r3
 801b454:	e7f5      	b.n	801b442 <__libc_fini_array+0xa>
 801b456:	bf00      	nop
 801b458:	08023ba0 	.word	0x08023ba0
 801b45c:	08023ba4 	.word	0x08023ba4

0801b460 <_malloc_trim_r>:
 801b460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b464:	4606      	mov	r6, r0
 801b466:	2008      	movs	r0, #8
 801b468:	460c      	mov	r4, r1
 801b46a:	f002 f909 	bl	801d680 <sysconf>
 801b46e:	4f23      	ldr	r7, [pc, #140]	; (801b4fc <_malloc_trim_r+0x9c>)
 801b470:	4680      	mov	r8, r0
 801b472:	4630      	mov	r0, r6
 801b474:	f000 fc36 	bl	801bce4 <__malloc_lock>
 801b478:	68bb      	ldr	r3, [r7, #8]
 801b47a:	685d      	ldr	r5, [r3, #4]
 801b47c:	f025 0503 	bic.w	r5, r5, #3
 801b480:	1b2c      	subs	r4, r5, r4
 801b482:	3c11      	subs	r4, #17
 801b484:	4444      	add	r4, r8
 801b486:	fbb4 f4f8 	udiv	r4, r4, r8
 801b48a:	3c01      	subs	r4, #1
 801b48c:	fb08 f404 	mul.w	r4, r8, r4
 801b490:	45a0      	cmp	r8, r4
 801b492:	dd05      	ble.n	801b4a0 <_malloc_trim_r+0x40>
 801b494:	4630      	mov	r0, r6
 801b496:	f000 fc2b 	bl	801bcf0 <__malloc_unlock>
 801b49a:	2000      	movs	r0, #0
 801b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4a0:	2100      	movs	r1, #0
 801b4a2:	4630      	mov	r0, r6
 801b4a4:	f000 ff92 	bl	801c3cc <_sbrk_r>
 801b4a8:	68bb      	ldr	r3, [r7, #8]
 801b4aa:	442b      	add	r3, r5
 801b4ac:	4298      	cmp	r0, r3
 801b4ae:	d1f1      	bne.n	801b494 <_malloc_trim_r+0x34>
 801b4b0:	4261      	negs	r1, r4
 801b4b2:	4630      	mov	r0, r6
 801b4b4:	f000 ff8a 	bl	801c3cc <_sbrk_r>
 801b4b8:	3001      	adds	r0, #1
 801b4ba:	d110      	bne.n	801b4de <_malloc_trim_r+0x7e>
 801b4bc:	2100      	movs	r1, #0
 801b4be:	4630      	mov	r0, r6
 801b4c0:	f000 ff84 	bl	801c3cc <_sbrk_r>
 801b4c4:	68ba      	ldr	r2, [r7, #8]
 801b4c6:	1a83      	subs	r3, r0, r2
 801b4c8:	2b0f      	cmp	r3, #15
 801b4ca:	dde3      	ble.n	801b494 <_malloc_trim_r+0x34>
 801b4cc:	490c      	ldr	r1, [pc, #48]	; (801b500 <_malloc_trim_r+0xa0>)
 801b4ce:	6809      	ldr	r1, [r1, #0]
 801b4d0:	1a40      	subs	r0, r0, r1
 801b4d2:	490c      	ldr	r1, [pc, #48]	; (801b504 <_malloc_trim_r+0xa4>)
 801b4d4:	f043 0301 	orr.w	r3, r3, #1
 801b4d8:	6008      	str	r0, [r1, #0]
 801b4da:	6053      	str	r3, [r2, #4]
 801b4dc:	e7da      	b.n	801b494 <_malloc_trim_r+0x34>
 801b4de:	68bb      	ldr	r3, [r7, #8]
 801b4e0:	4a08      	ldr	r2, [pc, #32]	; (801b504 <_malloc_trim_r+0xa4>)
 801b4e2:	1b2d      	subs	r5, r5, r4
 801b4e4:	f045 0501 	orr.w	r5, r5, #1
 801b4e8:	605d      	str	r5, [r3, #4]
 801b4ea:	6813      	ldr	r3, [r2, #0]
 801b4ec:	4630      	mov	r0, r6
 801b4ee:	1b1c      	subs	r4, r3, r4
 801b4f0:	6014      	str	r4, [r2, #0]
 801b4f2:	f000 fbfd 	bl	801bcf0 <__malloc_unlock>
 801b4f6:	2001      	movs	r0, #1
 801b4f8:	e7d0      	b.n	801b49c <_malloc_trim_r+0x3c>
 801b4fa:	bf00      	nop
 801b4fc:	200004d0 	.word	0x200004d0
 801b500:	200008d8 	.word	0x200008d8
 801b504:	20004c0c 	.word	0x20004c0c

0801b508 <_free_r>:
 801b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b50a:	4605      	mov	r5, r0
 801b50c:	460f      	mov	r7, r1
 801b50e:	2900      	cmp	r1, #0
 801b510:	f000 80b1 	beq.w	801b676 <_free_r+0x16e>
 801b514:	f000 fbe6 	bl	801bce4 <__malloc_lock>
 801b518:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801b51c:	4856      	ldr	r0, [pc, #344]	; (801b678 <_free_r+0x170>)
 801b51e:	f022 0401 	bic.w	r4, r2, #1
 801b522:	f1a7 0308 	sub.w	r3, r7, #8
 801b526:	eb03 0c04 	add.w	ip, r3, r4
 801b52a:	6881      	ldr	r1, [r0, #8]
 801b52c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801b530:	4561      	cmp	r1, ip
 801b532:	f026 0603 	bic.w	r6, r6, #3
 801b536:	f002 0201 	and.w	r2, r2, #1
 801b53a:	d11b      	bne.n	801b574 <_free_r+0x6c>
 801b53c:	4434      	add	r4, r6
 801b53e:	b93a      	cbnz	r2, 801b550 <_free_r+0x48>
 801b540:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801b544:	1a9b      	subs	r3, r3, r2
 801b546:	4414      	add	r4, r2
 801b548:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801b54c:	60ca      	str	r2, [r1, #12]
 801b54e:	6091      	str	r1, [r2, #8]
 801b550:	f044 0201 	orr.w	r2, r4, #1
 801b554:	605a      	str	r2, [r3, #4]
 801b556:	6083      	str	r3, [r0, #8]
 801b558:	4b48      	ldr	r3, [pc, #288]	; (801b67c <_free_r+0x174>)
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	42a3      	cmp	r3, r4
 801b55e:	d804      	bhi.n	801b56a <_free_r+0x62>
 801b560:	4b47      	ldr	r3, [pc, #284]	; (801b680 <_free_r+0x178>)
 801b562:	4628      	mov	r0, r5
 801b564:	6819      	ldr	r1, [r3, #0]
 801b566:	f7ff ff7b 	bl	801b460 <_malloc_trim_r>
 801b56a:	4628      	mov	r0, r5
 801b56c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b570:	f000 bbbe 	b.w	801bcf0 <__malloc_unlock>
 801b574:	f8cc 6004 	str.w	r6, [ip, #4]
 801b578:	2a00      	cmp	r2, #0
 801b57a:	d138      	bne.n	801b5ee <_free_r+0xe6>
 801b57c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801b580:	1a5b      	subs	r3, r3, r1
 801b582:	440c      	add	r4, r1
 801b584:	6899      	ldr	r1, [r3, #8]
 801b586:	f100 0708 	add.w	r7, r0, #8
 801b58a:	42b9      	cmp	r1, r7
 801b58c:	d031      	beq.n	801b5f2 <_free_r+0xea>
 801b58e:	68df      	ldr	r7, [r3, #12]
 801b590:	60cf      	str	r7, [r1, #12]
 801b592:	60b9      	str	r1, [r7, #8]
 801b594:	eb0c 0106 	add.w	r1, ip, r6
 801b598:	6849      	ldr	r1, [r1, #4]
 801b59a:	07c9      	lsls	r1, r1, #31
 801b59c:	d40b      	bmi.n	801b5b6 <_free_r+0xae>
 801b59e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801b5a2:	4434      	add	r4, r6
 801b5a4:	bb3a      	cbnz	r2, 801b5f6 <_free_r+0xee>
 801b5a6:	4e37      	ldr	r6, [pc, #220]	; (801b684 <_free_r+0x17c>)
 801b5a8:	42b1      	cmp	r1, r6
 801b5aa:	d124      	bne.n	801b5f6 <_free_r+0xee>
 801b5ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b5b0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801b5b4:	2201      	movs	r2, #1
 801b5b6:	f044 0101 	orr.w	r1, r4, #1
 801b5ba:	6059      	str	r1, [r3, #4]
 801b5bc:	511c      	str	r4, [r3, r4]
 801b5be:	2a00      	cmp	r2, #0
 801b5c0:	d1d3      	bne.n	801b56a <_free_r+0x62>
 801b5c2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801b5c6:	d21b      	bcs.n	801b600 <_free_r+0xf8>
 801b5c8:	0961      	lsrs	r1, r4, #5
 801b5ca:	08e2      	lsrs	r2, r4, #3
 801b5cc:	2401      	movs	r4, #1
 801b5ce:	408c      	lsls	r4, r1
 801b5d0:	6841      	ldr	r1, [r0, #4]
 801b5d2:	3201      	adds	r2, #1
 801b5d4:	430c      	orrs	r4, r1
 801b5d6:	6044      	str	r4, [r0, #4]
 801b5d8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801b5dc:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801b5e0:	3908      	subs	r1, #8
 801b5e2:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801b5e6:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801b5ea:	60e3      	str	r3, [r4, #12]
 801b5ec:	e7bd      	b.n	801b56a <_free_r+0x62>
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	e7d0      	b.n	801b594 <_free_r+0x8c>
 801b5f2:	2201      	movs	r2, #1
 801b5f4:	e7ce      	b.n	801b594 <_free_r+0x8c>
 801b5f6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801b5fa:	60ce      	str	r6, [r1, #12]
 801b5fc:	60b1      	str	r1, [r6, #8]
 801b5fe:	e7da      	b.n	801b5b6 <_free_r+0xae>
 801b600:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801b604:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801b608:	d214      	bcs.n	801b634 <_free_r+0x12c>
 801b60a:	09a2      	lsrs	r2, r4, #6
 801b60c:	3238      	adds	r2, #56	; 0x38
 801b60e:	1c51      	adds	r1, r2, #1
 801b610:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801b614:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801b618:	428e      	cmp	r6, r1
 801b61a:	d125      	bne.n	801b668 <_free_r+0x160>
 801b61c:	2401      	movs	r4, #1
 801b61e:	1092      	asrs	r2, r2, #2
 801b620:	fa04 f202 	lsl.w	r2, r4, r2
 801b624:	6844      	ldr	r4, [r0, #4]
 801b626:	4322      	orrs	r2, r4
 801b628:	6042      	str	r2, [r0, #4]
 801b62a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801b62e:	60b3      	str	r3, [r6, #8]
 801b630:	60cb      	str	r3, [r1, #12]
 801b632:	e79a      	b.n	801b56a <_free_r+0x62>
 801b634:	2a14      	cmp	r2, #20
 801b636:	d801      	bhi.n	801b63c <_free_r+0x134>
 801b638:	325b      	adds	r2, #91	; 0x5b
 801b63a:	e7e8      	b.n	801b60e <_free_r+0x106>
 801b63c:	2a54      	cmp	r2, #84	; 0x54
 801b63e:	d802      	bhi.n	801b646 <_free_r+0x13e>
 801b640:	0b22      	lsrs	r2, r4, #12
 801b642:	326e      	adds	r2, #110	; 0x6e
 801b644:	e7e3      	b.n	801b60e <_free_r+0x106>
 801b646:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801b64a:	d802      	bhi.n	801b652 <_free_r+0x14a>
 801b64c:	0be2      	lsrs	r2, r4, #15
 801b64e:	3277      	adds	r2, #119	; 0x77
 801b650:	e7dd      	b.n	801b60e <_free_r+0x106>
 801b652:	f240 5154 	movw	r1, #1364	; 0x554
 801b656:	428a      	cmp	r2, r1
 801b658:	bf9a      	itte	ls
 801b65a:	0ca2      	lsrls	r2, r4, #18
 801b65c:	327c      	addls	r2, #124	; 0x7c
 801b65e:	227e      	movhi	r2, #126	; 0x7e
 801b660:	e7d5      	b.n	801b60e <_free_r+0x106>
 801b662:	6889      	ldr	r1, [r1, #8]
 801b664:	428e      	cmp	r6, r1
 801b666:	d004      	beq.n	801b672 <_free_r+0x16a>
 801b668:	684a      	ldr	r2, [r1, #4]
 801b66a:	f022 0203 	bic.w	r2, r2, #3
 801b66e:	42a2      	cmp	r2, r4
 801b670:	d8f7      	bhi.n	801b662 <_free_r+0x15a>
 801b672:	68ce      	ldr	r6, [r1, #12]
 801b674:	e7d9      	b.n	801b62a <_free_r+0x122>
 801b676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b678:	200004d0 	.word	0x200004d0
 801b67c:	200008dc 	.word	0x200008dc
 801b680:	20004c3c 	.word	0x20004c3c
 801b684:	200004d8 	.word	0x200004d8

0801b688 <_fwalk_reent>:
 801b688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b68c:	4606      	mov	r6, r0
 801b68e:	4688      	mov	r8, r1
 801b690:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801b694:	2700      	movs	r7, #0
 801b696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b69a:	f1b9 0901 	subs.w	r9, r9, #1
 801b69e:	d505      	bpl.n	801b6ac <_fwalk_reent+0x24>
 801b6a0:	6824      	ldr	r4, [r4, #0]
 801b6a2:	2c00      	cmp	r4, #0
 801b6a4:	d1f7      	bne.n	801b696 <_fwalk_reent+0xe>
 801b6a6:	4638      	mov	r0, r7
 801b6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6ac:	89ab      	ldrh	r3, [r5, #12]
 801b6ae:	2b01      	cmp	r3, #1
 801b6b0:	d907      	bls.n	801b6c2 <_fwalk_reent+0x3a>
 801b6b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b6b6:	3301      	adds	r3, #1
 801b6b8:	d003      	beq.n	801b6c2 <_fwalk_reent+0x3a>
 801b6ba:	4629      	mov	r1, r5
 801b6bc:	4630      	mov	r0, r6
 801b6be:	47c0      	blx	r8
 801b6c0:	4307      	orrs	r7, r0
 801b6c2:	3568      	adds	r5, #104	; 0x68
 801b6c4:	e7e9      	b.n	801b69a <_fwalk_reent+0x12>
	...

0801b6c8 <_findenv_r>:
 801b6c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6cc:	4607      	mov	r7, r0
 801b6ce:	4689      	mov	r9, r1
 801b6d0:	4616      	mov	r6, r2
 801b6d2:	f002 fdc5 	bl	801e260 <__env_lock>
 801b6d6:	4b18      	ldr	r3, [pc, #96]	; (801b738 <_findenv_r+0x70>)
 801b6d8:	681c      	ldr	r4, [r3, #0]
 801b6da:	469a      	mov	sl, r3
 801b6dc:	b134      	cbz	r4, 801b6ec <_findenv_r+0x24>
 801b6de:	464b      	mov	r3, r9
 801b6e0:	4698      	mov	r8, r3
 801b6e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 801b6e6:	b139      	cbz	r1, 801b6f8 <_findenv_r+0x30>
 801b6e8:	293d      	cmp	r1, #61	; 0x3d
 801b6ea:	d1f9      	bne.n	801b6e0 <_findenv_r+0x18>
 801b6ec:	4638      	mov	r0, r7
 801b6ee:	f002 fdbd 	bl	801e26c <__env_unlock>
 801b6f2:	2000      	movs	r0, #0
 801b6f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6f8:	eba8 0809 	sub.w	r8, r8, r9
 801b6fc:	46a3      	mov	fp, r4
 801b6fe:	f854 0b04 	ldr.w	r0, [r4], #4
 801b702:	2800      	cmp	r0, #0
 801b704:	d0f2      	beq.n	801b6ec <_findenv_r+0x24>
 801b706:	4642      	mov	r2, r8
 801b708:	4649      	mov	r1, r9
 801b70a:	f7fd f93f 	bl	801898c <strncmp>
 801b70e:	2800      	cmp	r0, #0
 801b710:	d1f4      	bne.n	801b6fc <_findenv_r+0x34>
 801b712:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b716:	eb03 0508 	add.w	r5, r3, r8
 801b71a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b71e:	2b3d      	cmp	r3, #61	; 0x3d
 801b720:	d1ec      	bne.n	801b6fc <_findenv_r+0x34>
 801b722:	f8da 3000 	ldr.w	r3, [sl]
 801b726:	ebab 0303 	sub.w	r3, fp, r3
 801b72a:	109b      	asrs	r3, r3, #2
 801b72c:	4638      	mov	r0, r7
 801b72e:	6033      	str	r3, [r6, #0]
 801b730:	f002 fd9c 	bl	801e26c <__env_unlock>
 801b734:	1c68      	adds	r0, r5, #1
 801b736:	e7dd      	b.n	801b6f4 <_findenv_r+0x2c>
 801b738:	20000018 	.word	0x20000018

0801b73c <_getenv_r>:
 801b73c:	b507      	push	{r0, r1, r2, lr}
 801b73e:	aa01      	add	r2, sp, #4
 801b740:	f7ff ffc2 	bl	801b6c8 <_findenv_r>
 801b744:	b003      	add	sp, #12
 801b746:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801b74c <__gettzinfo>:
 801b74c:	4800      	ldr	r0, [pc, #0]	; (801b750 <__gettzinfo+0x4>)
 801b74e:	4770      	bx	lr
 801b750:	20000478 	.word	0x20000478

0801b754 <_localeconv_r>:
 801b754:	4800      	ldr	r0, [pc, #0]	; (801b758 <_localeconv_r+0x4>)
 801b756:	4770      	bx	lr
 801b758:	200009d0 	.word	0x200009d0

0801b75c <__retarget_lock_init_recursive>:
 801b75c:	4770      	bx	lr

0801b75e <__retarget_lock_close_recursive>:
 801b75e:	4770      	bx	lr

0801b760 <__retarget_lock_acquire>:
 801b760:	4770      	bx	lr

0801b762 <__retarget_lock_acquire_recursive>:
 801b762:	4770      	bx	lr

0801b764 <__retarget_lock_release>:
 801b764:	4770      	bx	lr

0801b766 <__retarget_lock_release_recursive>:
 801b766:	4770      	bx	lr

0801b768 <__swhatbuf_r>:
 801b768:	b570      	push	{r4, r5, r6, lr}
 801b76a:	460e      	mov	r6, r1
 801b76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b770:	2900      	cmp	r1, #0
 801b772:	b096      	sub	sp, #88	; 0x58
 801b774:	4614      	mov	r4, r2
 801b776:	461d      	mov	r5, r3
 801b778:	da09      	bge.n	801b78e <__swhatbuf_r+0x26>
 801b77a:	89b3      	ldrh	r3, [r6, #12]
 801b77c:	2200      	movs	r2, #0
 801b77e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b782:	602a      	str	r2, [r5, #0]
 801b784:	d116      	bne.n	801b7b4 <__swhatbuf_r+0x4c>
 801b786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b78a:	6023      	str	r3, [r4, #0]
 801b78c:	e015      	b.n	801b7ba <__swhatbuf_r+0x52>
 801b78e:	466a      	mov	r2, sp
 801b790:	f002 fe48 	bl	801e424 <_fstat_r>
 801b794:	2800      	cmp	r0, #0
 801b796:	dbf0      	blt.n	801b77a <__swhatbuf_r+0x12>
 801b798:	9a01      	ldr	r2, [sp, #4]
 801b79a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b79e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b7a2:	425a      	negs	r2, r3
 801b7a4:	415a      	adcs	r2, r3
 801b7a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b7aa:	602a      	str	r2, [r5, #0]
 801b7ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b7b0:	6023      	str	r3, [r4, #0]
 801b7b2:	e002      	b.n	801b7ba <__swhatbuf_r+0x52>
 801b7b4:	2340      	movs	r3, #64	; 0x40
 801b7b6:	6023      	str	r3, [r4, #0]
 801b7b8:	4610      	mov	r0, r2
 801b7ba:	b016      	add	sp, #88	; 0x58
 801b7bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b7c0 <__smakebuf_r>:
 801b7c0:	898b      	ldrh	r3, [r1, #12]
 801b7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b7c4:	079d      	lsls	r5, r3, #30
 801b7c6:	4606      	mov	r6, r0
 801b7c8:	460c      	mov	r4, r1
 801b7ca:	d507      	bpl.n	801b7dc <__smakebuf_r+0x1c>
 801b7cc:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801b7d0:	6023      	str	r3, [r4, #0]
 801b7d2:	6123      	str	r3, [r4, #16]
 801b7d4:	2301      	movs	r3, #1
 801b7d6:	6163      	str	r3, [r4, #20]
 801b7d8:	b002      	add	sp, #8
 801b7da:	bd70      	pop	{r4, r5, r6, pc}
 801b7dc:	ab01      	add	r3, sp, #4
 801b7de:	466a      	mov	r2, sp
 801b7e0:	f7ff ffc2 	bl	801b768 <__swhatbuf_r>
 801b7e4:	9900      	ldr	r1, [sp, #0]
 801b7e6:	4605      	mov	r5, r0
 801b7e8:	4630      	mov	r0, r6
 801b7ea:	f000 f839 	bl	801b860 <_malloc_r>
 801b7ee:	b948      	cbnz	r0, 801b804 <__smakebuf_r+0x44>
 801b7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b7f4:	059a      	lsls	r2, r3, #22
 801b7f6:	d4ef      	bmi.n	801b7d8 <__smakebuf_r+0x18>
 801b7f8:	f023 0303 	bic.w	r3, r3, #3
 801b7fc:	f043 0302 	orr.w	r3, r3, #2
 801b800:	81a3      	strh	r3, [r4, #12]
 801b802:	e7e3      	b.n	801b7cc <__smakebuf_r+0xc>
 801b804:	4b0d      	ldr	r3, [pc, #52]	; (801b83c <__smakebuf_r+0x7c>)
 801b806:	63f3      	str	r3, [r6, #60]	; 0x3c
 801b808:	89a3      	ldrh	r3, [r4, #12]
 801b80a:	6020      	str	r0, [r4, #0]
 801b80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b810:	81a3      	strh	r3, [r4, #12]
 801b812:	9b00      	ldr	r3, [sp, #0]
 801b814:	6163      	str	r3, [r4, #20]
 801b816:	9b01      	ldr	r3, [sp, #4]
 801b818:	6120      	str	r0, [r4, #16]
 801b81a:	b15b      	cbz	r3, 801b834 <__smakebuf_r+0x74>
 801b81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b820:	4630      	mov	r0, r6
 801b822:	f002 ff5b 	bl	801e6dc <_isatty_r>
 801b826:	b128      	cbz	r0, 801b834 <__smakebuf_r+0x74>
 801b828:	89a3      	ldrh	r3, [r4, #12]
 801b82a:	f023 0303 	bic.w	r3, r3, #3
 801b82e:	f043 0301 	orr.w	r3, r3, #1
 801b832:	81a3      	strh	r3, [r4, #12]
 801b834:	89a0      	ldrh	r0, [r4, #12]
 801b836:	4305      	orrs	r5, r0
 801b838:	81a5      	strh	r5, [r4, #12]
 801b83a:	e7cd      	b.n	801b7d8 <__smakebuf_r+0x18>
 801b83c:	0801b3ad 	.word	0x0801b3ad

0801b840 <malloc>:
 801b840:	4b02      	ldr	r3, [pc, #8]	; (801b84c <malloc+0xc>)
 801b842:	4601      	mov	r1, r0
 801b844:	6818      	ldr	r0, [r3, #0]
 801b846:	f000 b80b 	b.w	801b860 <_malloc_r>
 801b84a:	bf00      	nop
 801b84c:	20000038 	.word	0x20000038

0801b850 <free>:
 801b850:	4b02      	ldr	r3, [pc, #8]	; (801b85c <free+0xc>)
 801b852:	4601      	mov	r1, r0
 801b854:	6818      	ldr	r0, [r3, #0]
 801b856:	f7ff be57 	b.w	801b508 <_free_r>
 801b85a:	bf00      	nop
 801b85c:	20000038 	.word	0x20000038

0801b860 <_malloc_r>:
 801b860:	f101 030b 	add.w	r3, r1, #11
 801b864:	2b16      	cmp	r3, #22
 801b866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b86a:	4605      	mov	r5, r0
 801b86c:	d906      	bls.n	801b87c <_malloc_r+0x1c>
 801b86e:	f033 0707 	bics.w	r7, r3, #7
 801b872:	d504      	bpl.n	801b87e <_malloc_r+0x1e>
 801b874:	230c      	movs	r3, #12
 801b876:	602b      	str	r3, [r5, #0]
 801b878:	2400      	movs	r4, #0
 801b87a:	e1ae      	b.n	801bbda <_malloc_r+0x37a>
 801b87c:	2710      	movs	r7, #16
 801b87e:	42b9      	cmp	r1, r7
 801b880:	d8f8      	bhi.n	801b874 <_malloc_r+0x14>
 801b882:	4628      	mov	r0, r5
 801b884:	f000 fa2e 	bl	801bce4 <__malloc_lock>
 801b888:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801b88c:	4ec3      	ldr	r6, [pc, #780]	; (801bb9c <_malloc_r+0x33c>)
 801b88e:	d238      	bcs.n	801b902 <_malloc_r+0xa2>
 801b890:	f107 0208 	add.w	r2, r7, #8
 801b894:	4432      	add	r2, r6
 801b896:	f1a2 0108 	sub.w	r1, r2, #8
 801b89a:	6854      	ldr	r4, [r2, #4]
 801b89c:	428c      	cmp	r4, r1
 801b89e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801b8a2:	d102      	bne.n	801b8aa <_malloc_r+0x4a>
 801b8a4:	68d4      	ldr	r4, [r2, #12]
 801b8a6:	42a2      	cmp	r2, r4
 801b8a8:	d010      	beq.n	801b8cc <_malloc_r+0x6c>
 801b8aa:	6863      	ldr	r3, [r4, #4]
 801b8ac:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801b8b0:	f023 0303 	bic.w	r3, r3, #3
 801b8b4:	60ca      	str	r2, [r1, #12]
 801b8b6:	4423      	add	r3, r4
 801b8b8:	6091      	str	r1, [r2, #8]
 801b8ba:	685a      	ldr	r2, [r3, #4]
 801b8bc:	f042 0201 	orr.w	r2, r2, #1
 801b8c0:	605a      	str	r2, [r3, #4]
 801b8c2:	4628      	mov	r0, r5
 801b8c4:	f000 fa14 	bl	801bcf0 <__malloc_unlock>
 801b8c8:	3408      	adds	r4, #8
 801b8ca:	e186      	b.n	801bbda <_malloc_r+0x37a>
 801b8cc:	3302      	adds	r3, #2
 801b8ce:	4ab4      	ldr	r2, [pc, #720]	; (801bba0 <_malloc_r+0x340>)
 801b8d0:	6934      	ldr	r4, [r6, #16]
 801b8d2:	4294      	cmp	r4, r2
 801b8d4:	4611      	mov	r1, r2
 801b8d6:	d077      	beq.n	801b9c8 <_malloc_r+0x168>
 801b8d8:	6860      	ldr	r0, [r4, #4]
 801b8da:	f020 0c03 	bic.w	ip, r0, #3
 801b8de:	ebac 0007 	sub.w	r0, ip, r7
 801b8e2:	280f      	cmp	r0, #15
 801b8e4:	dd48      	ble.n	801b978 <_malloc_r+0x118>
 801b8e6:	19e1      	adds	r1, r4, r7
 801b8e8:	f040 0301 	orr.w	r3, r0, #1
 801b8ec:	f047 0701 	orr.w	r7, r7, #1
 801b8f0:	6067      	str	r7, [r4, #4]
 801b8f2:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801b8f6:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801b8fa:	604b      	str	r3, [r1, #4]
 801b8fc:	f844 000c 	str.w	r0, [r4, ip]
 801b900:	e7df      	b.n	801b8c2 <_malloc_r+0x62>
 801b902:	0a7b      	lsrs	r3, r7, #9
 801b904:	d02a      	beq.n	801b95c <_malloc_r+0xfc>
 801b906:	2b04      	cmp	r3, #4
 801b908:	d812      	bhi.n	801b930 <_malloc_r+0xd0>
 801b90a:	09bb      	lsrs	r3, r7, #6
 801b90c:	3338      	adds	r3, #56	; 0x38
 801b90e:	1c5a      	adds	r2, r3, #1
 801b910:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801b914:	f1a2 0c08 	sub.w	ip, r2, #8
 801b918:	6854      	ldr	r4, [r2, #4]
 801b91a:	4564      	cmp	r4, ip
 801b91c:	d006      	beq.n	801b92c <_malloc_r+0xcc>
 801b91e:	6862      	ldr	r2, [r4, #4]
 801b920:	f022 0203 	bic.w	r2, r2, #3
 801b924:	1bd0      	subs	r0, r2, r7
 801b926:	280f      	cmp	r0, #15
 801b928:	dd1c      	ble.n	801b964 <_malloc_r+0x104>
 801b92a:	3b01      	subs	r3, #1
 801b92c:	3301      	adds	r3, #1
 801b92e:	e7ce      	b.n	801b8ce <_malloc_r+0x6e>
 801b930:	2b14      	cmp	r3, #20
 801b932:	d801      	bhi.n	801b938 <_malloc_r+0xd8>
 801b934:	335b      	adds	r3, #91	; 0x5b
 801b936:	e7ea      	b.n	801b90e <_malloc_r+0xae>
 801b938:	2b54      	cmp	r3, #84	; 0x54
 801b93a:	d802      	bhi.n	801b942 <_malloc_r+0xe2>
 801b93c:	0b3b      	lsrs	r3, r7, #12
 801b93e:	336e      	adds	r3, #110	; 0x6e
 801b940:	e7e5      	b.n	801b90e <_malloc_r+0xae>
 801b942:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801b946:	d802      	bhi.n	801b94e <_malloc_r+0xee>
 801b948:	0bfb      	lsrs	r3, r7, #15
 801b94a:	3377      	adds	r3, #119	; 0x77
 801b94c:	e7df      	b.n	801b90e <_malloc_r+0xae>
 801b94e:	f240 5254 	movw	r2, #1364	; 0x554
 801b952:	4293      	cmp	r3, r2
 801b954:	d804      	bhi.n	801b960 <_malloc_r+0x100>
 801b956:	0cbb      	lsrs	r3, r7, #18
 801b958:	337c      	adds	r3, #124	; 0x7c
 801b95a:	e7d8      	b.n	801b90e <_malloc_r+0xae>
 801b95c:	233f      	movs	r3, #63	; 0x3f
 801b95e:	e7d6      	b.n	801b90e <_malloc_r+0xae>
 801b960:	237e      	movs	r3, #126	; 0x7e
 801b962:	e7d4      	b.n	801b90e <_malloc_r+0xae>
 801b964:	2800      	cmp	r0, #0
 801b966:	68e1      	ldr	r1, [r4, #12]
 801b968:	db04      	blt.n	801b974 <_malloc_r+0x114>
 801b96a:	68a3      	ldr	r3, [r4, #8]
 801b96c:	60d9      	str	r1, [r3, #12]
 801b96e:	608b      	str	r3, [r1, #8]
 801b970:	18a3      	adds	r3, r4, r2
 801b972:	e7a2      	b.n	801b8ba <_malloc_r+0x5a>
 801b974:	460c      	mov	r4, r1
 801b976:	e7d0      	b.n	801b91a <_malloc_r+0xba>
 801b978:	2800      	cmp	r0, #0
 801b97a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801b97e:	db07      	blt.n	801b990 <_malloc_r+0x130>
 801b980:	44a4      	add	ip, r4
 801b982:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801b986:	f043 0301 	orr.w	r3, r3, #1
 801b98a:	f8cc 3004 	str.w	r3, [ip, #4]
 801b98e:	e798      	b.n	801b8c2 <_malloc_r+0x62>
 801b990:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801b994:	6870      	ldr	r0, [r6, #4]
 801b996:	f080 809e 	bcs.w	801bad6 <_malloc_r+0x276>
 801b99a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801b99e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801b9a2:	f04f 0c01 	mov.w	ip, #1
 801b9a6:	3201      	adds	r2, #1
 801b9a8:	fa0c fc0e 	lsl.w	ip, ip, lr
 801b9ac:	ea4c 0000 	orr.w	r0, ip, r0
 801b9b0:	6070      	str	r0, [r6, #4]
 801b9b2:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801b9b6:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801b9ba:	3808      	subs	r0, #8
 801b9bc:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801b9c0:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801b9c4:	f8cc 400c 	str.w	r4, [ip, #12]
 801b9c8:	2001      	movs	r0, #1
 801b9ca:	109a      	asrs	r2, r3, #2
 801b9cc:	fa00 f202 	lsl.w	r2, r0, r2
 801b9d0:	6870      	ldr	r0, [r6, #4]
 801b9d2:	4290      	cmp	r0, r2
 801b9d4:	d326      	bcc.n	801ba24 <_malloc_r+0x1c4>
 801b9d6:	4210      	tst	r0, r2
 801b9d8:	d106      	bne.n	801b9e8 <_malloc_r+0x188>
 801b9da:	f023 0303 	bic.w	r3, r3, #3
 801b9de:	0052      	lsls	r2, r2, #1
 801b9e0:	4210      	tst	r0, r2
 801b9e2:	f103 0304 	add.w	r3, r3, #4
 801b9e6:	d0fa      	beq.n	801b9de <_malloc_r+0x17e>
 801b9e8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801b9ec:	46c1      	mov	r9, r8
 801b9ee:	469e      	mov	lr, r3
 801b9f0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801b9f4:	454c      	cmp	r4, r9
 801b9f6:	f040 80b3 	bne.w	801bb60 <_malloc_r+0x300>
 801b9fa:	f10e 0e01 	add.w	lr, lr, #1
 801b9fe:	f01e 0f03 	tst.w	lr, #3
 801ba02:	f109 0908 	add.w	r9, r9, #8
 801ba06:	d1f3      	bne.n	801b9f0 <_malloc_r+0x190>
 801ba08:	0798      	lsls	r0, r3, #30
 801ba0a:	f040 80ec 	bne.w	801bbe6 <_malloc_r+0x386>
 801ba0e:	6873      	ldr	r3, [r6, #4]
 801ba10:	ea23 0302 	bic.w	r3, r3, r2
 801ba14:	6073      	str	r3, [r6, #4]
 801ba16:	6870      	ldr	r0, [r6, #4]
 801ba18:	0052      	lsls	r2, r2, #1
 801ba1a:	4290      	cmp	r0, r2
 801ba1c:	d302      	bcc.n	801ba24 <_malloc_r+0x1c4>
 801ba1e:	2a00      	cmp	r2, #0
 801ba20:	f040 80ee 	bne.w	801bc00 <_malloc_r+0x3a0>
 801ba24:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801ba28:	f8db 1004 	ldr.w	r1, [fp, #4]
 801ba2c:	f021 0903 	bic.w	r9, r1, #3
 801ba30:	45b9      	cmp	r9, r7
 801ba32:	d304      	bcc.n	801ba3e <_malloc_r+0x1de>
 801ba34:	eba9 0207 	sub.w	r2, r9, r7
 801ba38:	2a0f      	cmp	r2, #15
 801ba3a:	f300 8149 	bgt.w	801bcd0 <_malloc_r+0x470>
 801ba3e:	4a59      	ldr	r2, [pc, #356]	; (801bba4 <_malloc_r+0x344>)
 801ba40:	6811      	ldr	r1, [r2, #0]
 801ba42:	3110      	adds	r1, #16
 801ba44:	eb0b 0309 	add.w	r3, fp, r9
 801ba48:	4439      	add	r1, r7
 801ba4a:	2008      	movs	r0, #8
 801ba4c:	9301      	str	r3, [sp, #4]
 801ba4e:	9100      	str	r1, [sp, #0]
 801ba50:	f001 fe16 	bl	801d680 <sysconf>
 801ba54:	4a54      	ldr	r2, [pc, #336]	; (801bba8 <_malloc_r+0x348>)
 801ba56:	e9dd 1300 	ldrd	r1, r3, [sp]
 801ba5a:	4680      	mov	r8, r0
 801ba5c:	6810      	ldr	r0, [r2, #0]
 801ba5e:	3001      	adds	r0, #1
 801ba60:	bf1f      	itttt	ne
 801ba62:	f101 31ff 	addne.w	r1, r1, #4294967295
 801ba66:	4441      	addne	r1, r8
 801ba68:	f1c8 0000 	rsbne	r0, r8, #0
 801ba6c:	4001      	andne	r1, r0
 801ba6e:	4628      	mov	r0, r5
 801ba70:	e9cd 1300 	strd	r1, r3, [sp]
 801ba74:	f000 fcaa 	bl	801c3cc <_sbrk_r>
 801ba78:	1c42      	adds	r2, r0, #1
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	f000 80fc 	beq.w	801bc78 <_malloc_r+0x418>
 801ba80:	9b01      	ldr	r3, [sp, #4]
 801ba82:	9900      	ldr	r1, [sp, #0]
 801ba84:	4a48      	ldr	r2, [pc, #288]	; (801bba8 <_malloc_r+0x348>)
 801ba86:	4283      	cmp	r3, r0
 801ba88:	d902      	bls.n	801ba90 <_malloc_r+0x230>
 801ba8a:	45b3      	cmp	fp, r6
 801ba8c:	f040 80f4 	bne.w	801bc78 <_malloc_r+0x418>
 801ba90:	f8df a120 	ldr.w	sl, [pc, #288]	; 801bbb4 <_malloc_r+0x354>
 801ba94:	f8da 0000 	ldr.w	r0, [sl]
 801ba98:	42a3      	cmp	r3, r4
 801ba9a:	eb00 0e01 	add.w	lr, r0, r1
 801ba9e:	f8ca e000 	str.w	lr, [sl]
 801baa2:	f108 3cff 	add.w	ip, r8, #4294967295
 801baa6:	f040 80ad 	bne.w	801bc04 <_malloc_r+0x3a4>
 801baaa:	ea13 0f0c 	tst.w	r3, ip
 801baae:	f040 80a9 	bne.w	801bc04 <_malloc_r+0x3a4>
 801bab2:	68b3      	ldr	r3, [r6, #8]
 801bab4:	4449      	add	r1, r9
 801bab6:	f041 0101 	orr.w	r1, r1, #1
 801baba:	6059      	str	r1, [r3, #4]
 801babc:	4a3b      	ldr	r2, [pc, #236]	; (801bbac <_malloc_r+0x34c>)
 801babe:	f8da 3000 	ldr.w	r3, [sl]
 801bac2:	6811      	ldr	r1, [r2, #0]
 801bac4:	428b      	cmp	r3, r1
 801bac6:	bf88      	it	hi
 801bac8:	6013      	strhi	r3, [r2, #0]
 801baca:	4a39      	ldr	r2, [pc, #228]	; (801bbb0 <_malloc_r+0x350>)
 801bacc:	6811      	ldr	r1, [r2, #0]
 801bace:	428b      	cmp	r3, r1
 801bad0:	bf88      	it	hi
 801bad2:	6013      	strhi	r3, [r2, #0]
 801bad4:	e0d0      	b.n	801bc78 <_malloc_r+0x418>
 801bad6:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 801bada:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801bade:	d218      	bcs.n	801bb12 <_malloc_r+0x2b2>
 801bae0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801bae4:	3238      	adds	r2, #56	; 0x38
 801bae6:	f102 0e01 	add.w	lr, r2, #1
 801baea:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801baee:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801baf2:	45f0      	cmp	r8, lr
 801baf4:	d12b      	bne.n	801bb4e <_malloc_r+0x2ee>
 801baf6:	1092      	asrs	r2, r2, #2
 801baf8:	f04f 0c01 	mov.w	ip, #1
 801bafc:	fa0c f202 	lsl.w	r2, ip, r2
 801bb00:	4310      	orrs	r0, r2
 801bb02:	6070      	str	r0, [r6, #4]
 801bb04:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801bb08:	f8c8 4008 	str.w	r4, [r8, #8]
 801bb0c:	f8ce 400c 	str.w	r4, [lr, #12]
 801bb10:	e75a      	b.n	801b9c8 <_malloc_r+0x168>
 801bb12:	2a14      	cmp	r2, #20
 801bb14:	d801      	bhi.n	801bb1a <_malloc_r+0x2ba>
 801bb16:	325b      	adds	r2, #91	; 0x5b
 801bb18:	e7e5      	b.n	801bae6 <_malloc_r+0x286>
 801bb1a:	2a54      	cmp	r2, #84	; 0x54
 801bb1c:	d803      	bhi.n	801bb26 <_malloc_r+0x2c6>
 801bb1e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801bb22:	326e      	adds	r2, #110	; 0x6e
 801bb24:	e7df      	b.n	801bae6 <_malloc_r+0x286>
 801bb26:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801bb2a:	d803      	bhi.n	801bb34 <_malloc_r+0x2d4>
 801bb2c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801bb30:	3277      	adds	r2, #119	; 0x77
 801bb32:	e7d8      	b.n	801bae6 <_malloc_r+0x286>
 801bb34:	f240 5e54 	movw	lr, #1364	; 0x554
 801bb38:	4572      	cmp	r2, lr
 801bb3a:	bf9a      	itte	ls
 801bb3c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801bb40:	327c      	addls	r2, #124	; 0x7c
 801bb42:	227e      	movhi	r2, #126	; 0x7e
 801bb44:	e7cf      	b.n	801bae6 <_malloc_r+0x286>
 801bb46:	f8de e008 	ldr.w	lr, [lr, #8]
 801bb4a:	45f0      	cmp	r8, lr
 801bb4c:	d005      	beq.n	801bb5a <_malloc_r+0x2fa>
 801bb4e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801bb52:	f022 0203 	bic.w	r2, r2, #3
 801bb56:	4562      	cmp	r2, ip
 801bb58:	d8f5      	bhi.n	801bb46 <_malloc_r+0x2e6>
 801bb5a:	f8de 800c 	ldr.w	r8, [lr, #12]
 801bb5e:	e7d1      	b.n	801bb04 <_malloc_r+0x2a4>
 801bb60:	6860      	ldr	r0, [r4, #4]
 801bb62:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801bb66:	f020 0003 	bic.w	r0, r0, #3
 801bb6a:	eba0 0a07 	sub.w	sl, r0, r7
 801bb6e:	f1ba 0f0f 	cmp.w	sl, #15
 801bb72:	dd21      	ble.n	801bbb8 <_malloc_r+0x358>
 801bb74:	68a3      	ldr	r3, [r4, #8]
 801bb76:	19e2      	adds	r2, r4, r7
 801bb78:	f047 0701 	orr.w	r7, r7, #1
 801bb7c:	6067      	str	r7, [r4, #4]
 801bb7e:	f8c3 c00c 	str.w	ip, [r3, #12]
 801bb82:	f8cc 3008 	str.w	r3, [ip, #8]
 801bb86:	f04a 0301 	orr.w	r3, sl, #1
 801bb8a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801bb8e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801bb92:	6053      	str	r3, [r2, #4]
 801bb94:	f844 a000 	str.w	sl, [r4, r0]
 801bb98:	e693      	b.n	801b8c2 <_malloc_r+0x62>
 801bb9a:	bf00      	nop
 801bb9c:	200004d0 	.word	0x200004d0
 801bba0:	200004d8 	.word	0x200004d8
 801bba4:	20004c3c 	.word	0x20004c3c
 801bba8:	200008d8 	.word	0x200008d8
 801bbac:	20004c34 	.word	0x20004c34
 801bbb0:	20004c38 	.word	0x20004c38
 801bbb4:	20004c0c 	.word	0x20004c0c
 801bbb8:	f1ba 0f00 	cmp.w	sl, #0
 801bbbc:	db11      	blt.n	801bbe2 <_malloc_r+0x382>
 801bbbe:	4420      	add	r0, r4
 801bbc0:	6843      	ldr	r3, [r0, #4]
 801bbc2:	f043 0301 	orr.w	r3, r3, #1
 801bbc6:	6043      	str	r3, [r0, #4]
 801bbc8:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801bbcc:	4628      	mov	r0, r5
 801bbce:	f8c3 c00c 	str.w	ip, [r3, #12]
 801bbd2:	f8cc 3008 	str.w	r3, [ip, #8]
 801bbd6:	f000 f88b 	bl	801bcf0 <__malloc_unlock>
 801bbda:	4620      	mov	r0, r4
 801bbdc:	b003      	add	sp, #12
 801bbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbe2:	4664      	mov	r4, ip
 801bbe4:	e706      	b.n	801b9f4 <_malloc_r+0x194>
 801bbe6:	f858 0908 	ldr.w	r0, [r8], #-8
 801bbea:	4540      	cmp	r0, r8
 801bbec:	f103 33ff 	add.w	r3, r3, #4294967295
 801bbf0:	f43f af0a 	beq.w	801ba08 <_malloc_r+0x1a8>
 801bbf4:	e70f      	b.n	801ba16 <_malloc_r+0x1b6>
 801bbf6:	3304      	adds	r3, #4
 801bbf8:	0052      	lsls	r2, r2, #1
 801bbfa:	4210      	tst	r0, r2
 801bbfc:	d0fb      	beq.n	801bbf6 <_malloc_r+0x396>
 801bbfe:	e6f3      	b.n	801b9e8 <_malloc_r+0x188>
 801bc00:	4673      	mov	r3, lr
 801bc02:	e7fa      	b.n	801bbfa <_malloc_r+0x39a>
 801bc04:	6810      	ldr	r0, [r2, #0]
 801bc06:	3001      	adds	r0, #1
 801bc08:	bf1b      	ittet	ne
 801bc0a:	1ae3      	subne	r3, r4, r3
 801bc0c:	4473      	addne	r3, lr
 801bc0e:	6014      	streq	r4, [r2, #0]
 801bc10:	f8ca 3000 	strne.w	r3, [sl]
 801bc14:	f014 0307 	ands.w	r3, r4, #7
 801bc18:	bf1a      	itte	ne
 801bc1a:	f1c3 0008 	rsbne	r0, r3, #8
 801bc1e:	1824      	addne	r4, r4, r0
 801bc20:	4618      	moveq	r0, r3
 801bc22:	1862      	adds	r2, r4, r1
 801bc24:	ea02 010c 	and.w	r1, r2, ip
 801bc28:	4480      	add	r8, r0
 801bc2a:	eba8 0801 	sub.w	r8, r8, r1
 801bc2e:	ea08 080c 	and.w	r8, r8, ip
 801bc32:	4641      	mov	r1, r8
 801bc34:	4628      	mov	r0, r5
 801bc36:	9301      	str	r3, [sp, #4]
 801bc38:	9200      	str	r2, [sp, #0]
 801bc3a:	f000 fbc7 	bl	801c3cc <_sbrk_r>
 801bc3e:	1c43      	adds	r3, r0, #1
 801bc40:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc44:	d105      	bne.n	801bc52 <_malloc_r+0x3f2>
 801bc46:	b32b      	cbz	r3, 801bc94 <_malloc_r+0x434>
 801bc48:	f1a3 0008 	sub.w	r0, r3, #8
 801bc4c:	4410      	add	r0, r2
 801bc4e:	f04f 0800 	mov.w	r8, #0
 801bc52:	f8da 2000 	ldr.w	r2, [sl]
 801bc56:	60b4      	str	r4, [r6, #8]
 801bc58:	1b00      	subs	r0, r0, r4
 801bc5a:	4440      	add	r0, r8
 801bc5c:	4442      	add	r2, r8
 801bc5e:	f040 0001 	orr.w	r0, r0, #1
 801bc62:	45b3      	cmp	fp, r6
 801bc64:	f8ca 2000 	str.w	r2, [sl]
 801bc68:	6060      	str	r0, [r4, #4]
 801bc6a:	f43f af27 	beq.w	801babc <_malloc_r+0x25c>
 801bc6e:	f1b9 0f0f 	cmp.w	r9, #15
 801bc72:	d812      	bhi.n	801bc9a <_malloc_r+0x43a>
 801bc74:	2301      	movs	r3, #1
 801bc76:	6063      	str	r3, [r4, #4]
 801bc78:	68b3      	ldr	r3, [r6, #8]
 801bc7a:	685b      	ldr	r3, [r3, #4]
 801bc7c:	f023 0303 	bic.w	r3, r3, #3
 801bc80:	42bb      	cmp	r3, r7
 801bc82:	eba3 0207 	sub.w	r2, r3, r7
 801bc86:	d301      	bcc.n	801bc8c <_malloc_r+0x42c>
 801bc88:	2a0f      	cmp	r2, #15
 801bc8a:	dc21      	bgt.n	801bcd0 <_malloc_r+0x470>
 801bc8c:	4628      	mov	r0, r5
 801bc8e:	f000 f82f 	bl	801bcf0 <__malloc_unlock>
 801bc92:	e5f1      	b.n	801b878 <_malloc_r+0x18>
 801bc94:	4610      	mov	r0, r2
 801bc96:	4698      	mov	r8, r3
 801bc98:	e7db      	b.n	801bc52 <_malloc_r+0x3f2>
 801bc9a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801bc9e:	f1a9 090c 	sub.w	r9, r9, #12
 801bca2:	f029 0907 	bic.w	r9, r9, #7
 801bca6:	f003 0301 	and.w	r3, r3, #1
 801bcaa:	ea43 0309 	orr.w	r3, r3, r9
 801bcae:	f8cb 3004 	str.w	r3, [fp, #4]
 801bcb2:	2205      	movs	r2, #5
 801bcb4:	eb0b 0309 	add.w	r3, fp, r9
 801bcb8:	f1b9 0f0f 	cmp.w	r9, #15
 801bcbc:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801bcc0:	f67f aefc 	bls.w	801babc <_malloc_r+0x25c>
 801bcc4:	f10b 0108 	add.w	r1, fp, #8
 801bcc8:	4628      	mov	r0, r5
 801bcca:	f7ff fc1d 	bl	801b508 <_free_r>
 801bcce:	e6f5      	b.n	801babc <_malloc_r+0x25c>
 801bcd0:	68b4      	ldr	r4, [r6, #8]
 801bcd2:	f047 0301 	orr.w	r3, r7, #1
 801bcd6:	4427      	add	r7, r4
 801bcd8:	f042 0201 	orr.w	r2, r2, #1
 801bcdc:	6063      	str	r3, [r4, #4]
 801bcde:	60b7      	str	r7, [r6, #8]
 801bce0:	607a      	str	r2, [r7, #4]
 801bce2:	e5ee      	b.n	801b8c2 <_malloc_r+0x62>

0801bce4 <__malloc_lock>:
 801bce4:	4801      	ldr	r0, [pc, #4]	; (801bcec <__malloc_lock+0x8>)
 801bce6:	f7ff bd3c 	b.w	801b762 <__retarget_lock_acquire_recursive>
 801bcea:	bf00      	nop
 801bcec:	2000b6bc 	.word	0x2000b6bc

0801bcf0 <__malloc_unlock>:
 801bcf0:	4801      	ldr	r0, [pc, #4]	; (801bcf8 <__malloc_unlock+0x8>)
 801bcf2:	f7ff bd38 	b.w	801b766 <__retarget_lock_release_recursive>
 801bcf6:	bf00      	nop
 801bcf8:	2000b6bc 	.word	0x2000b6bc

0801bcfc <_Balloc>:
 801bcfc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801bcfe:	b570      	push	{r4, r5, r6, lr}
 801bd00:	4605      	mov	r5, r0
 801bd02:	460c      	mov	r4, r1
 801bd04:	b17b      	cbz	r3, 801bd26 <_Balloc+0x2a>
 801bd06:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801bd08:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bd0c:	b9a0      	cbnz	r0, 801bd38 <_Balloc+0x3c>
 801bd0e:	2101      	movs	r1, #1
 801bd10:	fa01 f604 	lsl.w	r6, r1, r4
 801bd14:	1d72      	adds	r2, r6, #5
 801bd16:	0092      	lsls	r2, r2, #2
 801bd18:	4628      	mov	r0, r5
 801bd1a:	f002 fa63 	bl	801e1e4 <_calloc_r>
 801bd1e:	b148      	cbz	r0, 801bd34 <_Balloc+0x38>
 801bd20:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801bd24:	e00b      	b.n	801bd3e <_Balloc+0x42>
 801bd26:	2221      	movs	r2, #33	; 0x21
 801bd28:	2104      	movs	r1, #4
 801bd2a:	f002 fa5b 	bl	801e1e4 <_calloc_r>
 801bd2e:	64e8      	str	r0, [r5, #76]	; 0x4c
 801bd30:	2800      	cmp	r0, #0
 801bd32:	d1e8      	bne.n	801bd06 <_Balloc+0xa>
 801bd34:	2000      	movs	r0, #0
 801bd36:	bd70      	pop	{r4, r5, r6, pc}
 801bd38:	6802      	ldr	r2, [r0, #0]
 801bd3a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801bd3e:	2300      	movs	r3, #0
 801bd40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bd44:	e7f7      	b.n	801bd36 <_Balloc+0x3a>

0801bd46 <_Bfree>:
 801bd46:	b131      	cbz	r1, 801bd56 <_Bfree+0x10>
 801bd48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801bd4a:	684a      	ldr	r2, [r1, #4]
 801bd4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bd50:	6008      	str	r0, [r1, #0]
 801bd52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801bd56:	4770      	bx	lr

0801bd58 <__multadd>:
 801bd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd5c:	690e      	ldr	r6, [r1, #16]
 801bd5e:	4607      	mov	r7, r0
 801bd60:	4698      	mov	r8, r3
 801bd62:	460c      	mov	r4, r1
 801bd64:	f101 0014 	add.w	r0, r1, #20
 801bd68:	2300      	movs	r3, #0
 801bd6a:	6805      	ldr	r5, [r0, #0]
 801bd6c:	b2a9      	uxth	r1, r5
 801bd6e:	fb02 8101 	mla	r1, r2, r1, r8
 801bd72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801bd76:	0c2d      	lsrs	r5, r5, #16
 801bd78:	fb02 c505 	mla	r5, r2, r5, ip
 801bd7c:	b289      	uxth	r1, r1
 801bd7e:	3301      	adds	r3, #1
 801bd80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801bd84:	429e      	cmp	r6, r3
 801bd86:	f840 1b04 	str.w	r1, [r0], #4
 801bd8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801bd8e:	dcec      	bgt.n	801bd6a <__multadd+0x12>
 801bd90:	f1b8 0f00 	cmp.w	r8, #0
 801bd94:	d022      	beq.n	801bddc <__multadd+0x84>
 801bd96:	68a3      	ldr	r3, [r4, #8]
 801bd98:	42b3      	cmp	r3, r6
 801bd9a:	dc19      	bgt.n	801bdd0 <__multadd+0x78>
 801bd9c:	6861      	ldr	r1, [r4, #4]
 801bd9e:	4638      	mov	r0, r7
 801bda0:	3101      	adds	r1, #1
 801bda2:	f7ff ffab 	bl	801bcfc <_Balloc>
 801bda6:	4605      	mov	r5, r0
 801bda8:	b928      	cbnz	r0, 801bdb6 <__multadd+0x5e>
 801bdaa:	4602      	mov	r2, r0
 801bdac:	4b0d      	ldr	r3, [pc, #52]	; (801bde4 <__multadd+0x8c>)
 801bdae:	480e      	ldr	r0, [pc, #56]	; (801bde8 <__multadd+0x90>)
 801bdb0:	21b5      	movs	r1, #181	; 0xb5
 801bdb2:	f002 f9f9 	bl	801e1a8 <__assert_func>
 801bdb6:	6922      	ldr	r2, [r4, #16]
 801bdb8:	3202      	adds	r2, #2
 801bdba:	f104 010c 	add.w	r1, r4, #12
 801bdbe:	0092      	lsls	r2, r2, #2
 801bdc0:	300c      	adds	r0, #12
 801bdc2:	f7fc fb05 	bl	80183d0 <memcpy>
 801bdc6:	4621      	mov	r1, r4
 801bdc8:	4638      	mov	r0, r7
 801bdca:	f7ff ffbc 	bl	801bd46 <_Bfree>
 801bdce:	462c      	mov	r4, r5
 801bdd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801bdd4:	3601      	adds	r6, #1
 801bdd6:	f8c3 8014 	str.w	r8, [r3, #20]
 801bdda:	6126      	str	r6, [r4, #16]
 801bddc:	4620      	mov	r0, r4
 801bdde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bde2:	bf00      	nop
 801bde4:	08023891 	.word	0x08023891
 801bde8:	08023964 	.word	0x08023964

0801bdec <__hi0bits>:
 801bdec:	0c03      	lsrs	r3, r0, #16
 801bdee:	041b      	lsls	r3, r3, #16
 801bdf0:	b9d3      	cbnz	r3, 801be28 <__hi0bits+0x3c>
 801bdf2:	0400      	lsls	r0, r0, #16
 801bdf4:	2310      	movs	r3, #16
 801bdf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bdfa:	bf04      	itt	eq
 801bdfc:	0200      	lsleq	r0, r0, #8
 801bdfe:	3308      	addeq	r3, #8
 801be00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801be04:	bf04      	itt	eq
 801be06:	0100      	lsleq	r0, r0, #4
 801be08:	3304      	addeq	r3, #4
 801be0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801be0e:	bf04      	itt	eq
 801be10:	0080      	lsleq	r0, r0, #2
 801be12:	3302      	addeq	r3, #2
 801be14:	2800      	cmp	r0, #0
 801be16:	db05      	blt.n	801be24 <__hi0bits+0x38>
 801be18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801be1c:	f103 0301 	add.w	r3, r3, #1
 801be20:	bf08      	it	eq
 801be22:	2320      	moveq	r3, #32
 801be24:	4618      	mov	r0, r3
 801be26:	4770      	bx	lr
 801be28:	2300      	movs	r3, #0
 801be2a:	e7e4      	b.n	801bdf6 <__hi0bits+0xa>

0801be2c <__lo0bits>:
 801be2c:	6803      	ldr	r3, [r0, #0]
 801be2e:	f013 0207 	ands.w	r2, r3, #7
 801be32:	4601      	mov	r1, r0
 801be34:	d00b      	beq.n	801be4e <__lo0bits+0x22>
 801be36:	07da      	lsls	r2, r3, #31
 801be38:	d424      	bmi.n	801be84 <__lo0bits+0x58>
 801be3a:	0798      	lsls	r0, r3, #30
 801be3c:	bf49      	itett	mi
 801be3e:	085b      	lsrmi	r3, r3, #1
 801be40:	089b      	lsrpl	r3, r3, #2
 801be42:	2001      	movmi	r0, #1
 801be44:	600b      	strmi	r3, [r1, #0]
 801be46:	bf5c      	itt	pl
 801be48:	600b      	strpl	r3, [r1, #0]
 801be4a:	2002      	movpl	r0, #2
 801be4c:	4770      	bx	lr
 801be4e:	b298      	uxth	r0, r3
 801be50:	b9b0      	cbnz	r0, 801be80 <__lo0bits+0x54>
 801be52:	0c1b      	lsrs	r3, r3, #16
 801be54:	2010      	movs	r0, #16
 801be56:	f013 0fff 	tst.w	r3, #255	; 0xff
 801be5a:	bf04      	itt	eq
 801be5c:	0a1b      	lsreq	r3, r3, #8
 801be5e:	3008      	addeq	r0, #8
 801be60:	071a      	lsls	r2, r3, #28
 801be62:	bf04      	itt	eq
 801be64:	091b      	lsreq	r3, r3, #4
 801be66:	3004      	addeq	r0, #4
 801be68:	079a      	lsls	r2, r3, #30
 801be6a:	bf04      	itt	eq
 801be6c:	089b      	lsreq	r3, r3, #2
 801be6e:	3002      	addeq	r0, #2
 801be70:	07da      	lsls	r2, r3, #31
 801be72:	d403      	bmi.n	801be7c <__lo0bits+0x50>
 801be74:	085b      	lsrs	r3, r3, #1
 801be76:	f100 0001 	add.w	r0, r0, #1
 801be7a:	d005      	beq.n	801be88 <__lo0bits+0x5c>
 801be7c:	600b      	str	r3, [r1, #0]
 801be7e:	4770      	bx	lr
 801be80:	4610      	mov	r0, r2
 801be82:	e7e8      	b.n	801be56 <__lo0bits+0x2a>
 801be84:	2000      	movs	r0, #0
 801be86:	4770      	bx	lr
 801be88:	2020      	movs	r0, #32
 801be8a:	4770      	bx	lr

0801be8c <__i2b>:
 801be8c:	b510      	push	{r4, lr}
 801be8e:	460c      	mov	r4, r1
 801be90:	2101      	movs	r1, #1
 801be92:	f7ff ff33 	bl	801bcfc <_Balloc>
 801be96:	4602      	mov	r2, r0
 801be98:	b928      	cbnz	r0, 801bea6 <__i2b+0x1a>
 801be9a:	4b05      	ldr	r3, [pc, #20]	; (801beb0 <__i2b+0x24>)
 801be9c:	4805      	ldr	r0, [pc, #20]	; (801beb4 <__i2b+0x28>)
 801be9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801bea2:	f002 f981 	bl	801e1a8 <__assert_func>
 801bea6:	2301      	movs	r3, #1
 801bea8:	6144      	str	r4, [r0, #20]
 801beaa:	6103      	str	r3, [r0, #16]
 801beac:	bd10      	pop	{r4, pc}
 801beae:	bf00      	nop
 801beb0:	08023891 	.word	0x08023891
 801beb4:	08023964 	.word	0x08023964

0801beb8 <__multiply>:
 801beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bebc:	4614      	mov	r4, r2
 801bebe:	690a      	ldr	r2, [r1, #16]
 801bec0:	6923      	ldr	r3, [r4, #16]
 801bec2:	429a      	cmp	r2, r3
 801bec4:	bfb8      	it	lt
 801bec6:	460b      	movlt	r3, r1
 801bec8:	460d      	mov	r5, r1
 801beca:	bfbc      	itt	lt
 801becc:	4625      	movlt	r5, r4
 801bece:	461c      	movlt	r4, r3
 801bed0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801bed4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801bed8:	68ab      	ldr	r3, [r5, #8]
 801beda:	6869      	ldr	r1, [r5, #4]
 801bedc:	eb0a 0709 	add.w	r7, sl, r9
 801bee0:	42bb      	cmp	r3, r7
 801bee2:	b085      	sub	sp, #20
 801bee4:	bfb8      	it	lt
 801bee6:	3101      	addlt	r1, #1
 801bee8:	f7ff ff08 	bl	801bcfc <_Balloc>
 801beec:	b930      	cbnz	r0, 801befc <__multiply+0x44>
 801beee:	4602      	mov	r2, r0
 801bef0:	4b42      	ldr	r3, [pc, #264]	; (801bffc <__multiply+0x144>)
 801bef2:	4843      	ldr	r0, [pc, #268]	; (801c000 <__multiply+0x148>)
 801bef4:	f240 115d 	movw	r1, #349	; 0x15d
 801bef8:	f002 f956 	bl	801e1a8 <__assert_func>
 801befc:	f100 0614 	add.w	r6, r0, #20
 801bf00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801bf04:	4633      	mov	r3, r6
 801bf06:	2200      	movs	r2, #0
 801bf08:	4543      	cmp	r3, r8
 801bf0a:	d31e      	bcc.n	801bf4a <__multiply+0x92>
 801bf0c:	f105 0c14 	add.w	ip, r5, #20
 801bf10:	f104 0314 	add.w	r3, r4, #20
 801bf14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801bf18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801bf1c:	9202      	str	r2, [sp, #8]
 801bf1e:	ebac 0205 	sub.w	r2, ip, r5
 801bf22:	3a15      	subs	r2, #21
 801bf24:	f022 0203 	bic.w	r2, r2, #3
 801bf28:	3204      	adds	r2, #4
 801bf2a:	f105 0115 	add.w	r1, r5, #21
 801bf2e:	458c      	cmp	ip, r1
 801bf30:	bf38      	it	cc
 801bf32:	2204      	movcc	r2, #4
 801bf34:	9201      	str	r2, [sp, #4]
 801bf36:	9a02      	ldr	r2, [sp, #8]
 801bf38:	9303      	str	r3, [sp, #12]
 801bf3a:	429a      	cmp	r2, r3
 801bf3c:	d808      	bhi.n	801bf50 <__multiply+0x98>
 801bf3e:	2f00      	cmp	r7, #0
 801bf40:	dc55      	bgt.n	801bfee <__multiply+0x136>
 801bf42:	6107      	str	r7, [r0, #16]
 801bf44:	b005      	add	sp, #20
 801bf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf4a:	f843 2b04 	str.w	r2, [r3], #4
 801bf4e:	e7db      	b.n	801bf08 <__multiply+0x50>
 801bf50:	f8b3 a000 	ldrh.w	sl, [r3]
 801bf54:	f1ba 0f00 	cmp.w	sl, #0
 801bf58:	d020      	beq.n	801bf9c <__multiply+0xe4>
 801bf5a:	f105 0e14 	add.w	lr, r5, #20
 801bf5e:	46b1      	mov	r9, r6
 801bf60:	2200      	movs	r2, #0
 801bf62:	f85e 4b04 	ldr.w	r4, [lr], #4
 801bf66:	f8d9 b000 	ldr.w	fp, [r9]
 801bf6a:	b2a1      	uxth	r1, r4
 801bf6c:	fa1f fb8b 	uxth.w	fp, fp
 801bf70:	fb0a b101 	mla	r1, sl, r1, fp
 801bf74:	4411      	add	r1, r2
 801bf76:	f8d9 2000 	ldr.w	r2, [r9]
 801bf7a:	0c24      	lsrs	r4, r4, #16
 801bf7c:	0c12      	lsrs	r2, r2, #16
 801bf7e:	fb0a 2404 	mla	r4, sl, r4, r2
 801bf82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801bf86:	b289      	uxth	r1, r1
 801bf88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801bf8c:	45f4      	cmp	ip, lr
 801bf8e:	f849 1b04 	str.w	r1, [r9], #4
 801bf92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801bf96:	d8e4      	bhi.n	801bf62 <__multiply+0xaa>
 801bf98:	9901      	ldr	r1, [sp, #4]
 801bf9a:	5072      	str	r2, [r6, r1]
 801bf9c:	9a03      	ldr	r2, [sp, #12]
 801bf9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bfa2:	3304      	adds	r3, #4
 801bfa4:	f1b9 0f00 	cmp.w	r9, #0
 801bfa8:	d01f      	beq.n	801bfea <__multiply+0x132>
 801bfaa:	6834      	ldr	r4, [r6, #0]
 801bfac:	f105 0114 	add.w	r1, r5, #20
 801bfb0:	46b6      	mov	lr, r6
 801bfb2:	f04f 0a00 	mov.w	sl, #0
 801bfb6:	880a      	ldrh	r2, [r1, #0]
 801bfb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801bfbc:	fb09 b202 	mla	r2, r9, r2, fp
 801bfc0:	4492      	add	sl, r2
 801bfc2:	b2a4      	uxth	r4, r4
 801bfc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801bfc8:	f84e 4b04 	str.w	r4, [lr], #4
 801bfcc:	f851 4b04 	ldr.w	r4, [r1], #4
 801bfd0:	f8be 2000 	ldrh.w	r2, [lr]
 801bfd4:	0c24      	lsrs	r4, r4, #16
 801bfd6:	fb09 2404 	mla	r4, r9, r4, r2
 801bfda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801bfde:	458c      	cmp	ip, r1
 801bfe0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801bfe4:	d8e7      	bhi.n	801bfb6 <__multiply+0xfe>
 801bfe6:	9a01      	ldr	r2, [sp, #4]
 801bfe8:	50b4      	str	r4, [r6, r2]
 801bfea:	3604      	adds	r6, #4
 801bfec:	e7a3      	b.n	801bf36 <__multiply+0x7e>
 801bfee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d1a5      	bne.n	801bf42 <__multiply+0x8a>
 801bff6:	3f01      	subs	r7, #1
 801bff8:	e7a1      	b.n	801bf3e <__multiply+0x86>
 801bffa:	bf00      	nop
 801bffc:	08023891 	.word	0x08023891
 801c000:	08023964 	.word	0x08023964

0801c004 <__pow5mult>:
 801c004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c008:	4615      	mov	r5, r2
 801c00a:	f012 0203 	ands.w	r2, r2, #3
 801c00e:	4606      	mov	r6, r0
 801c010:	460f      	mov	r7, r1
 801c012:	d007      	beq.n	801c024 <__pow5mult+0x20>
 801c014:	4c1a      	ldr	r4, [pc, #104]	; (801c080 <__pow5mult+0x7c>)
 801c016:	3a01      	subs	r2, #1
 801c018:	2300      	movs	r3, #0
 801c01a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c01e:	f7ff fe9b 	bl	801bd58 <__multadd>
 801c022:	4607      	mov	r7, r0
 801c024:	10ad      	asrs	r5, r5, #2
 801c026:	d027      	beq.n	801c078 <__pow5mult+0x74>
 801c028:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801c02a:	b944      	cbnz	r4, 801c03e <__pow5mult+0x3a>
 801c02c:	f240 2171 	movw	r1, #625	; 0x271
 801c030:	4630      	mov	r0, r6
 801c032:	f7ff ff2b 	bl	801be8c <__i2b>
 801c036:	2300      	movs	r3, #0
 801c038:	64b0      	str	r0, [r6, #72]	; 0x48
 801c03a:	4604      	mov	r4, r0
 801c03c:	6003      	str	r3, [r0, #0]
 801c03e:	f04f 0900 	mov.w	r9, #0
 801c042:	07eb      	lsls	r3, r5, #31
 801c044:	d50a      	bpl.n	801c05c <__pow5mult+0x58>
 801c046:	4639      	mov	r1, r7
 801c048:	4622      	mov	r2, r4
 801c04a:	4630      	mov	r0, r6
 801c04c:	f7ff ff34 	bl	801beb8 <__multiply>
 801c050:	4639      	mov	r1, r7
 801c052:	4680      	mov	r8, r0
 801c054:	4630      	mov	r0, r6
 801c056:	f7ff fe76 	bl	801bd46 <_Bfree>
 801c05a:	4647      	mov	r7, r8
 801c05c:	106d      	asrs	r5, r5, #1
 801c05e:	d00b      	beq.n	801c078 <__pow5mult+0x74>
 801c060:	6820      	ldr	r0, [r4, #0]
 801c062:	b938      	cbnz	r0, 801c074 <__pow5mult+0x70>
 801c064:	4622      	mov	r2, r4
 801c066:	4621      	mov	r1, r4
 801c068:	4630      	mov	r0, r6
 801c06a:	f7ff ff25 	bl	801beb8 <__multiply>
 801c06e:	6020      	str	r0, [r4, #0]
 801c070:	f8c0 9000 	str.w	r9, [r0]
 801c074:	4604      	mov	r4, r0
 801c076:	e7e4      	b.n	801c042 <__pow5mult+0x3e>
 801c078:	4638      	mov	r0, r7
 801c07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c07e:	bf00      	nop
 801c080:	08023ab8 	.word	0x08023ab8

0801c084 <__lshift>:
 801c084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c088:	460c      	mov	r4, r1
 801c08a:	6849      	ldr	r1, [r1, #4]
 801c08c:	6923      	ldr	r3, [r4, #16]
 801c08e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c092:	68a3      	ldr	r3, [r4, #8]
 801c094:	4607      	mov	r7, r0
 801c096:	4691      	mov	r9, r2
 801c098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c09c:	f108 0601 	add.w	r6, r8, #1
 801c0a0:	42b3      	cmp	r3, r6
 801c0a2:	db0b      	blt.n	801c0bc <__lshift+0x38>
 801c0a4:	4638      	mov	r0, r7
 801c0a6:	f7ff fe29 	bl	801bcfc <_Balloc>
 801c0aa:	4605      	mov	r5, r0
 801c0ac:	b948      	cbnz	r0, 801c0c2 <__lshift+0x3e>
 801c0ae:	4602      	mov	r2, r0
 801c0b0:	4b28      	ldr	r3, [pc, #160]	; (801c154 <__lshift+0xd0>)
 801c0b2:	4829      	ldr	r0, [pc, #164]	; (801c158 <__lshift+0xd4>)
 801c0b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c0b8:	f002 f876 	bl	801e1a8 <__assert_func>
 801c0bc:	3101      	adds	r1, #1
 801c0be:	005b      	lsls	r3, r3, #1
 801c0c0:	e7ee      	b.n	801c0a0 <__lshift+0x1c>
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	f100 0114 	add.w	r1, r0, #20
 801c0c8:	f100 0210 	add.w	r2, r0, #16
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	4553      	cmp	r3, sl
 801c0d0:	db33      	blt.n	801c13a <__lshift+0xb6>
 801c0d2:	6920      	ldr	r0, [r4, #16]
 801c0d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c0d8:	f104 0314 	add.w	r3, r4, #20
 801c0dc:	f019 091f 	ands.w	r9, r9, #31
 801c0e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c0e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c0e8:	d02b      	beq.n	801c142 <__lshift+0xbe>
 801c0ea:	f1c9 0e20 	rsb	lr, r9, #32
 801c0ee:	468a      	mov	sl, r1
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	6818      	ldr	r0, [r3, #0]
 801c0f4:	fa00 f009 	lsl.w	r0, r0, r9
 801c0f8:	4302      	orrs	r2, r0
 801c0fa:	f84a 2b04 	str.w	r2, [sl], #4
 801c0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801c102:	459c      	cmp	ip, r3
 801c104:	fa22 f20e 	lsr.w	r2, r2, lr
 801c108:	d8f3      	bhi.n	801c0f2 <__lshift+0x6e>
 801c10a:	ebac 0304 	sub.w	r3, ip, r4
 801c10e:	3b15      	subs	r3, #21
 801c110:	f023 0303 	bic.w	r3, r3, #3
 801c114:	3304      	adds	r3, #4
 801c116:	f104 0015 	add.w	r0, r4, #21
 801c11a:	4584      	cmp	ip, r0
 801c11c:	bf38      	it	cc
 801c11e:	2304      	movcc	r3, #4
 801c120:	50ca      	str	r2, [r1, r3]
 801c122:	b10a      	cbz	r2, 801c128 <__lshift+0xa4>
 801c124:	f108 0602 	add.w	r6, r8, #2
 801c128:	3e01      	subs	r6, #1
 801c12a:	4638      	mov	r0, r7
 801c12c:	612e      	str	r6, [r5, #16]
 801c12e:	4621      	mov	r1, r4
 801c130:	f7ff fe09 	bl	801bd46 <_Bfree>
 801c134:	4628      	mov	r0, r5
 801c136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c13a:	f842 0f04 	str.w	r0, [r2, #4]!
 801c13e:	3301      	adds	r3, #1
 801c140:	e7c5      	b.n	801c0ce <__lshift+0x4a>
 801c142:	3904      	subs	r1, #4
 801c144:	f853 2b04 	ldr.w	r2, [r3], #4
 801c148:	f841 2f04 	str.w	r2, [r1, #4]!
 801c14c:	459c      	cmp	ip, r3
 801c14e:	d8f9      	bhi.n	801c144 <__lshift+0xc0>
 801c150:	e7ea      	b.n	801c128 <__lshift+0xa4>
 801c152:	bf00      	nop
 801c154:	08023891 	.word	0x08023891
 801c158:	08023964 	.word	0x08023964

0801c15c <__mcmp>:
 801c15c:	b530      	push	{r4, r5, lr}
 801c15e:	6902      	ldr	r2, [r0, #16]
 801c160:	690c      	ldr	r4, [r1, #16]
 801c162:	1b12      	subs	r2, r2, r4
 801c164:	d10e      	bne.n	801c184 <__mcmp+0x28>
 801c166:	f100 0314 	add.w	r3, r0, #20
 801c16a:	3114      	adds	r1, #20
 801c16c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c17c:	42a5      	cmp	r5, r4
 801c17e:	d003      	beq.n	801c188 <__mcmp+0x2c>
 801c180:	d305      	bcc.n	801c18e <__mcmp+0x32>
 801c182:	2201      	movs	r2, #1
 801c184:	4610      	mov	r0, r2
 801c186:	bd30      	pop	{r4, r5, pc}
 801c188:	4283      	cmp	r3, r0
 801c18a:	d3f3      	bcc.n	801c174 <__mcmp+0x18>
 801c18c:	e7fa      	b.n	801c184 <__mcmp+0x28>
 801c18e:	f04f 32ff 	mov.w	r2, #4294967295
 801c192:	e7f7      	b.n	801c184 <__mcmp+0x28>

0801c194 <__mdiff>:
 801c194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c198:	460c      	mov	r4, r1
 801c19a:	4606      	mov	r6, r0
 801c19c:	4611      	mov	r1, r2
 801c19e:	4620      	mov	r0, r4
 801c1a0:	4617      	mov	r7, r2
 801c1a2:	f7ff ffdb 	bl	801c15c <__mcmp>
 801c1a6:	1e05      	subs	r5, r0, #0
 801c1a8:	d110      	bne.n	801c1cc <__mdiff+0x38>
 801c1aa:	4629      	mov	r1, r5
 801c1ac:	4630      	mov	r0, r6
 801c1ae:	f7ff fda5 	bl	801bcfc <_Balloc>
 801c1b2:	b930      	cbnz	r0, 801c1c2 <__mdiff+0x2e>
 801c1b4:	4b39      	ldr	r3, [pc, #228]	; (801c29c <__mdiff+0x108>)
 801c1b6:	4602      	mov	r2, r0
 801c1b8:	f240 2132 	movw	r1, #562	; 0x232
 801c1bc:	4838      	ldr	r0, [pc, #224]	; (801c2a0 <__mdiff+0x10c>)
 801c1be:	f001 fff3 	bl	801e1a8 <__assert_func>
 801c1c2:	2301      	movs	r3, #1
 801c1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c1c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1cc:	bfa4      	itt	ge
 801c1ce:	463b      	movge	r3, r7
 801c1d0:	4627      	movge	r7, r4
 801c1d2:	4630      	mov	r0, r6
 801c1d4:	6879      	ldr	r1, [r7, #4]
 801c1d6:	bfa6      	itte	ge
 801c1d8:	461c      	movge	r4, r3
 801c1da:	2500      	movge	r5, #0
 801c1dc:	2501      	movlt	r5, #1
 801c1de:	f7ff fd8d 	bl	801bcfc <_Balloc>
 801c1e2:	b920      	cbnz	r0, 801c1ee <__mdiff+0x5a>
 801c1e4:	4b2d      	ldr	r3, [pc, #180]	; (801c29c <__mdiff+0x108>)
 801c1e6:	4602      	mov	r2, r0
 801c1e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c1ec:	e7e6      	b.n	801c1bc <__mdiff+0x28>
 801c1ee:	693e      	ldr	r6, [r7, #16]
 801c1f0:	60c5      	str	r5, [r0, #12]
 801c1f2:	6925      	ldr	r5, [r4, #16]
 801c1f4:	f107 0114 	add.w	r1, r7, #20
 801c1f8:	f104 0914 	add.w	r9, r4, #20
 801c1fc:	f100 0e14 	add.w	lr, r0, #20
 801c200:	f107 0210 	add.w	r2, r7, #16
 801c204:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801c208:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801c20c:	46f2      	mov	sl, lr
 801c20e:	2700      	movs	r7, #0
 801c210:	f859 3b04 	ldr.w	r3, [r9], #4
 801c214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c218:	fa1f f883 	uxth.w	r8, r3
 801c21c:	fa17 f78b 	uxtah	r7, r7, fp
 801c220:	0c1b      	lsrs	r3, r3, #16
 801c222:	eba7 0808 	sub.w	r8, r7, r8
 801c226:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c22a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c22e:	fa1f f888 	uxth.w	r8, r8
 801c232:	141f      	asrs	r7, r3, #16
 801c234:	454d      	cmp	r5, r9
 801c236:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c23a:	f84a 3b04 	str.w	r3, [sl], #4
 801c23e:	d8e7      	bhi.n	801c210 <__mdiff+0x7c>
 801c240:	1b2b      	subs	r3, r5, r4
 801c242:	3b15      	subs	r3, #21
 801c244:	f023 0303 	bic.w	r3, r3, #3
 801c248:	3304      	adds	r3, #4
 801c24a:	3415      	adds	r4, #21
 801c24c:	42a5      	cmp	r5, r4
 801c24e:	bf38      	it	cc
 801c250:	2304      	movcc	r3, #4
 801c252:	4419      	add	r1, r3
 801c254:	4473      	add	r3, lr
 801c256:	469e      	mov	lr, r3
 801c258:	460d      	mov	r5, r1
 801c25a:	4565      	cmp	r5, ip
 801c25c:	d30e      	bcc.n	801c27c <__mdiff+0xe8>
 801c25e:	f10c 0203 	add.w	r2, ip, #3
 801c262:	1a52      	subs	r2, r2, r1
 801c264:	f022 0203 	bic.w	r2, r2, #3
 801c268:	3903      	subs	r1, #3
 801c26a:	458c      	cmp	ip, r1
 801c26c:	bf38      	it	cc
 801c26e:	2200      	movcc	r2, #0
 801c270:	441a      	add	r2, r3
 801c272:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801c276:	b17b      	cbz	r3, 801c298 <__mdiff+0x104>
 801c278:	6106      	str	r6, [r0, #16]
 801c27a:	e7a5      	b.n	801c1c8 <__mdiff+0x34>
 801c27c:	f855 8b04 	ldr.w	r8, [r5], #4
 801c280:	fa17 f488 	uxtah	r4, r7, r8
 801c284:	1422      	asrs	r2, r4, #16
 801c286:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801c28a:	b2a4      	uxth	r4, r4
 801c28c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801c290:	f84e 4b04 	str.w	r4, [lr], #4
 801c294:	1417      	asrs	r7, r2, #16
 801c296:	e7e0      	b.n	801c25a <__mdiff+0xc6>
 801c298:	3e01      	subs	r6, #1
 801c29a:	e7ea      	b.n	801c272 <__mdiff+0xde>
 801c29c:	08023891 	.word	0x08023891
 801c2a0:	08023964 	.word	0x08023964

0801c2a4 <__d2b>:
 801c2a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c2a8:	4689      	mov	r9, r1
 801c2aa:	2101      	movs	r1, #1
 801c2ac:	ec57 6b10 	vmov	r6, r7, d0
 801c2b0:	4690      	mov	r8, r2
 801c2b2:	f7ff fd23 	bl	801bcfc <_Balloc>
 801c2b6:	4604      	mov	r4, r0
 801c2b8:	b930      	cbnz	r0, 801c2c8 <__d2b+0x24>
 801c2ba:	4602      	mov	r2, r0
 801c2bc:	4b25      	ldr	r3, [pc, #148]	; (801c354 <__d2b+0xb0>)
 801c2be:	4826      	ldr	r0, [pc, #152]	; (801c358 <__d2b+0xb4>)
 801c2c0:	f240 310a 	movw	r1, #778	; 0x30a
 801c2c4:	f001 ff70 	bl	801e1a8 <__assert_func>
 801c2c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c2cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c2d0:	bb35      	cbnz	r5, 801c320 <__d2b+0x7c>
 801c2d2:	2e00      	cmp	r6, #0
 801c2d4:	9301      	str	r3, [sp, #4]
 801c2d6:	d028      	beq.n	801c32a <__d2b+0x86>
 801c2d8:	4668      	mov	r0, sp
 801c2da:	9600      	str	r6, [sp, #0]
 801c2dc:	f7ff fda6 	bl	801be2c <__lo0bits>
 801c2e0:	9900      	ldr	r1, [sp, #0]
 801c2e2:	b300      	cbz	r0, 801c326 <__d2b+0x82>
 801c2e4:	9a01      	ldr	r2, [sp, #4]
 801c2e6:	f1c0 0320 	rsb	r3, r0, #32
 801c2ea:	fa02 f303 	lsl.w	r3, r2, r3
 801c2ee:	430b      	orrs	r3, r1
 801c2f0:	40c2      	lsrs	r2, r0
 801c2f2:	6163      	str	r3, [r4, #20]
 801c2f4:	9201      	str	r2, [sp, #4]
 801c2f6:	9b01      	ldr	r3, [sp, #4]
 801c2f8:	61a3      	str	r3, [r4, #24]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	bf14      	ite	ne
 801c2fe:	2202      	movne	r2, #2
 801c300:	2201      	moveq	r2, #1
 801c302:	6122      	str	r2, [r4, #16]
 801c304:	b1d5      	cbz	r5, 801c33c <__d2b+0x98>
 801c306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c30a:	4405      	add	r5, r0
 801c30c:	f8c9 5000 	str.w	r5, [r9]
 801c310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c314:	f8c8 0000 	str.w	r0, [r8]
 801c318:	4620      	mov	r0, r4
 801c31a:	b003      	add	sp, #12
 801c31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c324:	e7d5      	b.n	801c2d2 <__d2b+0x2e>
 801c326:	6161      	str	r1, [r4, #20]
 801c328:	e7e5      	b.n	801c2f6 <__d2b+0x52>
 801c32a:	a801      	add	r0, sp, #4
 801c32c:	f7ff fd7e 	bl	801be2c <__lo0bits>
 801c330:	9b01      	ldr	r3, [sp, #4]
 801c332:	6163      	str	r3, [r4, #20]
 801c334:	2201      	movs	r2, #1
 801c336:	6122      	str	r2, [r4, #16]
 801c338:	3020      	adds	r0, #32
 801c33a:	e7e3      	b.n	801c304 <__d2b+0x60>
 801c33c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c344:	f8c9 0000 	str.w	r0, [r9]
 801c348:	6918      	ldr	r0, [r3, #16]
 801c34a:	f7ff fd4f 	bl	801bdec <__hi0bits>
 801c34e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c352:	e7df      	b.n	801c314 <__d2b+0x70>
 801c354:	08023891 	.word	0x08023891
 801c358:	08023964 	.word	0x08023964

0801c35c <frexp>:
 801c35c:	b570      	push	{r4, r5, r6, lr}
 801c35e:	2100      	movs	r1, #0
 801c360:	ec55 4b10 	vmov	r4, r5, d0
 801c364:	6001      	str	r1, [r0, #0]
 801c366:	4916      	ldr	r1, [pc, #88]	; (801c3c0 <frexp+0x64>)
 801c368:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801c36c:	428a      	cmp	r2, r1
 801c36e:	4606      	mov	r6, r0
 801c370:	462b      	mov	r3, r5
 801c372:	dc22      	bgt.n	801c3ba <frexp+0x5e>
 801c374:	ee10 1a10 	vmov	r1, s0
 801c378:	4311      	orrs	r1, r2
 801c37a:	d01e      	beq.n	801c3ba <frexp+0x5e>
 801c37c:	4911      	ldr	r1, [pc, #68]	; (801c3c4 <frexp+0x68>)
 801c37e:	4029      	ands	r1, r5
 801c380:	b969      	cbnz	r1, 801c39e <frexp+0x42>
 801c382:	4b11      	ldr	r3, [pc, #68]	; (801c3c8 <frexp+0x6c>)
 801c384:	2200      	movs	r2, #0
 801c386:	ee10 0a10 	vmov	r0, s0
 801c38a:	4629      	mov	r1, r5
 801c38c:	f7e4 f95e 	bl	800064c <__aeabi_dmul>
 801c390:	460b      	mov	r3, r1
 801c392:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c396:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801c39a:	4604      	mov	r4, r0
 801c39c:	6031      	str	r1, [r6, #0]
 801c39e:	6831      	ldr	r1, [r6, #0]
 801c3a0:	1512      	asrs	r2, r2, #20
 801c3a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c3a6:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801c3aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c3ae:	440a      	add	r2, r1
 801c3b0:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801c3b4:	6032      	str	r2, [r6, #0]
 801c3b6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801c3ba:	ec45 4b10 	vmov	d0, r4, r5
 801c3be:	bd70      	pop	{r4, r5, r6, pc}
 801c3c0:	7fefffff 	.word	0x7fefffff
 801c3c4:	7ff00000 	.word	0x7ff00000
 801c3c8:	43500000 	.word	0x43500000

0801c3cc <_sbrk_r>:
 801c3cc:	b538      	push	{r3, r4, r5, lr}
 801c3ce:	4d06      	ldr	r5, [pc, #24]	; (801c3e8 <_sbrk_r+0x1c>)
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	4604      	mov	r4, r0
 801c3d4:	4608      	mov	r0, r1
 801c3d6:	602b      	str	r3, [r5, #0]
 801c3d8:	f7e6 fbc6 	bl	8002b68 <_sbrk>
 801c3dc:	1c43      	adds	r3, r0, #1
 801c3de:	d102      	bne.n	801c3e6 <_sbrk_r+0x1a>
 801c3e0:	682b      	ldr	r3, [r5, #0]
 801c3e2:	b103      	cbz	r3, 801c3e6 <_sbrk_r+0x1a>
 801c3e4:	6023      	str	r3, [r4, #0]
 801c3e6:	bd38      	pop	{r3, r4, r5, pc}
 801c3e8:	2000b6b0 	.word	0x2000b6b0

0801c3ec <siscanf>:
 801c3ec:	b40e      	push	{r1, r2, r3}
 801c3ee:	b510      	push	{r4, lr}
 801c3f0:	b09f      	sub	sp, #124	; 0x7c
 801c3f2:	ac21      	add	r4, sp, #132	; 0x84
 801c3f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 801c3f8:	f854 2b04 	ldr.w	r2, [r4], #4
 801c3fc:	9201      	str	r2, [sp, #4]
 801c3fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c402:	9004      	str	r0, [sp, #16]
 801c404:	9008      	str	r0, [sp, #32]
 801c406:	f7e3 ff03 	bl	8000210 <strlen>
 801c40a:	4b0c      	ldr	r3, [pc, #48]	; (801c43c <siscanf+0x50>)
 801c40c:	9005      	str	r0, [sp, #20]
 801c40e:	9009      	str	r0, [sp, #36]	; 0x24
 801c410:	930c      	str	r3, [sp, #48]	; 0x30
 801c412:	480b      	ldr	r0, [pc, #44]	; (801c440 <siscanf+0x54>)
 801c414:	9a01      	ldr	r2, [sp, #4]
 801c416:	6800      	ldr	r0, [r0, #0]
 801c418:	9403      	str	r4, [sp, #12]
 801c41a:	2300      	movs	r3, #0
 801c41c:	9310      	str	r3, [sp, #64]	; 0x40
 801c41e:	9315      	str	r3, [sp, #84]	; 0x54
 801c420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c424:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c428:	a904      	add	r1, sp, #16
 801c42a:	4623      	mov	r3, r4
 801c42c:	f000 f984 	bl	801c738 <__ssvfiscanf_r>
 801c430:	b01f      	add	sp, #124	; 0x7c
 801c432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c436:	b003      	add	sp, #12
 801c438:	4770      	bx	lr
 801c43a:	bf00      	nop
 801c43c:	0801c467 	.word	0x0801c467
 801c440:	20000038 	.word	0x20000038

0801c444 <__sread>:
 801c444:	b510      	push	{r4, lr}
 801c446:	460c      	mov	r4, r1
 801c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c44c:	f002 f9a8 	bl	801e7a0 <_read_r>
 801c450:	2800      	cmp	r0, #0
 801c452:	bfab      	itete	ge
 801c454:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801c456:	89a3      	ldrhlt	r3, [r4, #12]
 801c458:	181b      	addge	r3, r3, r0
 801c45a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c45e:	bfac      	ite	ge
 801c460:	6523      	strge	r3, [r4, #80]	; 0x50
 801c462:	81a3      	strhlt	r3, [r4, #12]
 801c464:	bd10      	pop	{r4, pc}

0801c466 <__seofread>:
 801c466:	2000      	movs	r0, #0
 801c468:	4770      	bx	lr

0801c46a <__swrite>:
 801c46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c46e:	461f      	mov	r7, r3
 801c470:	898b      	ldrh	r3, [r1, #12]
 801c472:	05db      	lsls	r3, r3, #23
 801c474:	4605      	mov	r5, r0
 801c476:	460c      	mov	r4, r1
 801c478:	4616      	mov	r6, r2
 801c47a:	d505      	bpl.n	801c488 <__swrite+0x1e>
 801c47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c480:	2302      	movs	r3, #2
 801c482:	2200      	movs	r2, #0
 801c484:	f002 f94e 	bl	801e724 <_lseek_r>
 801c488:	89a3      	ldrh	r3, [r4, #12]
 801c48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c48e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c492:	81a3      	strh	r3, [r4, #12]
 801c494:	4632      	mov	r2, r6
 801c496:	463b      	mov	r3, r7
 801c498:	4628      	mov	r0, r5
 801c49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c49e:	f001 be31 	b.w	801e104 <_write_r>

0801c4a2 <__sseek>:
 801c4a2:	b510      	push	{r4, lr}
 801c4a4:	460c      	mov	r4, r1
 801c4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4aa:	f002 f93b 	bl	801e724 <_lseek_r>
 801c4ae:	1c43      	adds	r3, r0, #1
 801c4b0:	89a3      	ldrh	r3, [r4, #12]
 801c4b2:	bf15      	itete	ne
 801c4b4:	6520      	strne	r0, [r4, #80]	; 0x50
 801c4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c4be:	81a3      	strheq	r3, [r4, #12]
 801c4c0:	bf18      	it	ne
 801c4c2:	81a3      	strhne	r3, [r4, #12]
 801c4c4:	bd10      	pop	{r4, pc}

0801c4c6 <__sclose>:
 801c4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4ca:	f001 beb9 	b.w	801e240 <_close_r>

0801c4ce <strcpy>:
 801c4ce:	4603      	mov	r3, r0
 801c4d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c4d4:	f803 2b01 	strb.w	r2, [r3], #1
 801c4d8:	2a00      	cmp	r2, #0
 801c4da:	d1f9      	bne.n	801c4d0 <strcpy+0x2>
 801c4dc:	4770      	bx	lr

0801c4de <strncpy>:
 801c4de:	b510      	push	{r4, lr}
 801c4e0:	3901      	subs	r1, #1
 801c4e2:	4603      	mov	r3, r0
 801c4e4:	b132      	cbz	r2, 801c4f4 <strncpy+0x16>
 801c4e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c4ea:	f803 4b01 	strb.w	r4, [r3], #1
 801c4ee:	3a01      	subs	r2, #1
 801c4f0:	2c00      	cmp	r4, #0
 801c4f2:	d1f7      	bne.n	801c4e4 <strncpy+0x6>
 801c4f4:	441a      	add	r2, r3
 801c4f6:	2100      	movs	r1, #0
 801c4f8:	4293      	cmp	r3, r2
 801c4fa:	d100      	bne.n	801c4fe <strncpy+0x20>
 801c4fc:	bd10      	pop	{r4, pc}
 801c4fe:	f803 1b01 	strb.w	r1, [r3], #1
 801c502:	e7f9      	b.n	801c4f8 <strncpy+0x1a>

0801c504 <_strtoul_l.isra.0>:
 801c504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c508:	4e3b      	ldr	r6, [pc, #236]	; (801c5f8 <_strtoul_l.isra.0+0xf4>)
 801c50a:	4686      	mov	lr, r0
 801c50c:	468c      	mov	ip, r1
 801c50e:	4660      	mov	r0, ip
 801c510:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c514:	5da5      	ldrb	r5, [r4, r6]
 801c516:	f015 0508 	ands.w	r5, r5, #8
 801c51a:	d1f8      	bne.n	801c50e <_strtoul_l.isra.0+0xa>
 801c51c:	2c2d      	cmp	r4, #45	; 0x2d
 801c51e:	d134      	bne.n	801c58a <_strtoul_l.isra.0+0x86>
 801c520:	f89c 4000 	ldrb.w	r4, [ip]
 801c524:	f04f 0801 	mov.w	r8, #1
 801c528:	f100 0c02 	add.w	ip, r0, #2
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d05e      	beq.n	801c5ee <_strtoul_l.isra.0+0xea>
 801c530:	2b10      	cmp	r3, #16
 801c532:	d10c      	bne.n	801c54e <_strtoul_l.isra.0+0x4a>
 801c534:	2c30      	cmp	r4, #48	; 0x30
 801c536:	d10a      	bne.n	801c54e <_strtoul_l.isra.0+0x4a>
 801c538:	f89c 0000 	ldrb.w	r0, [ip]
 801c53c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c540:	2858      	cmp	r0, #88	; 0x58
 801c542:	d14f      	bne.n	801c5e4 <_strtoul_l.isra.0+0xe0>
 801c544:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801c548:	2310      	movs	r3, #16
 801c54a:	f10c 0c02 	add.w	ip, ip, #2
 801c54e:	f04f 37ff 	mov.w	r7, #4294967295
 801c552:	2500      	movs	r5, #0
 801c554:	fbb7 f7f3 	udiv	r7, r7, r3
 801c558:	fb03 f907 	mul.w	r9, r3, r7
 801c55c:	ea6f 0909 	mvn.w	r9, r9
 801c560:	4628      	mov	r0, r5
 801c562:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801c566:	2e09      	cmp	r6, #9
 801c568:	d818      	bhi.n	801c59c <_strtoul_l.isra.0+0x98>
 801c56a:	4634      	mov	r4, r6
 801c56c:	42a3      	cmp	r3, r4
 801c56e:	dd24      	ble.n	801c5ba <_strtoul_l.isra.0+0xb6>
 801c570:	2d00      	cmp	r5, #0
 801c572:	db1f      	blt.n	801c5b4 <_strtoul_l.isra.0+0xb0>
 801c574:	4287      	cmp	r7, r0
 801c576:	d31d      	bcc.n	801c5b4 <_strtoul_l.isra.0+0xb0>
 801c578:	d101      	bne.n	801c57e <_strtoul_l.isra.0+0x7a>
 801c57a:	45a1      	cmp	r9, r4
 801c57c:	db1a      	blt.n	801c5b4 <_strtoul_l.isra.0+0xb0>
 801c57e:	fb00 4003 	mla	r0, r0, r3, r4
 801c582:	2501      	movs	r5, #1
 801c584:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c588:	e7eb      	b.n	801c562 <_strtoul_l.isra.0+0x5e>
 801c58a:	2c2b      	cmp	r4, #43	; 0x2b
 801c58c:	bf08      	it	eq
 801c58e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801c592:	46a8      	mov	r8, r5
 801c594:	bf08      	it	eq
 801c596:	f100 0c02 	addeq.w	ip, r0, #2
 801c59a:	e7c7      	b.n	801c52c <_strtoul_l.isra.0+0x28>
 801c59c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801c5a0:	2e19      	cmp	r6, #25
 801c5a2:	d801      	bhi.n	801c5a8 <_strtoul_l.isra.0+0xa4>
 801c5a4:	3c37      	subs	r4, #55	; 0x37
 801c5a6:	e7e1      	b.n	801c56c <_strtoul_l.isra.0+0x68>
 801c5a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801c5ac:	2e19      	cmp	r6, #25
 801c5ae:	d804      	bhi.n	801c5ba <_strtoul_l.isra.0+0xb6>
 801c5b0:	3c57      	subs	r4, #87	; 0x57
 801c5b2:	e7db      	b.n	801c56c <_strtoul_l.isra.0+0x68>
 801c5b4:	f04f 35ff 	mov.w	r5, #4294967295
 801c5b8:	e7e4      	b.n	801c584 <_strtoul_l.isra.0+0x80>
 801c5ba:	2d00      	cmp	r5, #0
 801c5bc:	da07      	bge.n	801c5ce <_strtoul_l.isra.0+0xca>
 801c5be:	2322      	movs	r3, #34	; 0x22
 801c5c0:	f8ce 3000 	str.w	r3, [lr]
 801c5c4:	f04f 30ff 	mov.w	r0, #4294967295
 801c5c8:	b942      	cbnz	r2, 801c5dc <_strtoul_l.isra.0+0xd8>
 801c5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5ce:	f1b8 0f00 	cmp.w	r8, #0
 801c5d2:	d000      	beq.n	801c5d6 <_strtoul_l.isra.0+0xd2>
 801c5d4:	4240      	negs	r0, r0
 801c5d6:	2a00      	cmp	r2, #0
 801c5d8:	d0f7      	beq.n	801c5ca <_strtoul_l.isra.0+0xc6>
 801c5da:	b10d      	cbz	r5, 801c5e0 <_strtoul_l.isra.0+0xdc>
 801c5dc:	f10c 31ff 	add.w	r1, ip, #4294967295
 801c5e0:	6011      	str	r1, [r2, #0]
 801c5e2:	e7f2      	b.n	801c5ca <_strtoul_l.isra.0+0xc6>
 801c5e4:	2430      	movs	r4, #48	; 0x30
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d1b1      	bne.n	801c54e <_strtoul_l.isra.0+0x4a>
 801c5ea:	2308      	movs	r3, #8
 801c5ec:	e7af      	b.n	801c54e <_strtoul_l.isra.0+0x4a>
 801c5ee:	2c30      	cmp	r4, #48	; 0x30
 801c5f0:	d0a2      	beq.n	801c538 <_strtoul_l.isra.0+0x34>
 801c5f2:	230a      	movs	r3, #10
 801c5f4:	e7ab      	b.n	801c54e <_strtoul_l.isra.0+0x4a>
 801c5f6:	bf00      	nop
 801c5f8:	0802368d 	.word	0x0802368d

0801c5fc <_strtoul_r>:
 801c5fc:	f7ff bf82 	b.w	801c504 <_strtoul_l.isra.0>

0801c600 <strtoul>:
 801c600:	4613      	mov	r3, r2
 801c602:	460a      	mov	r2, r1
 801c604:	4601      	mov	r1, r0
 801c606:	4802      	ldr	r0, [pc, #8]	; (801c610 <strtoul+0x10>)
 801c608:	6800      	ldr	r0, [r0, #0]
 801c60a:	f7ff bf7b 	b.w	801c504 <_strtoul_l.isra.0>
 801c60e:	bf00      	nop
 801c610:	20000038 	.word	0x20000038

0801c614 <_sungetc_r>:
 801c614:	b538      	push	{r3, r4, r5, lr}
 801c616:	1c4b      	adds	r3, r1, #1
 801c618:	4614      	mov	r4, r2
 801c61a:	d103      	bne.n	801c624 <_sungetc_r+0x10>
 801c61c:	f04f 35ff 	mov.w	r5, #4294967295
 801c620:	4628      	mov	r0, r5
 801c622:	bd38      	pop	{r3, r4, r5, pc}
 801c624:	8993      	ldrh	r3, [r2, #12]
 801c626:	f023 0320 	bic.w	r3, r3, #32
 801c62a:	8193      	strh	r3, [r2, #12]
 801c62c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c62e:	6852      	ldr	r2, [r2, #4]
 801c630:	b2cd      	uxtb	r5, r1
 801c632:	b18b      	cbz	r3, 801c658 <_sungetc_r+0x44>
 801c634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c636:	4293      	cmp	r3, r2
 801c638:	dd08      	ble.n	801c64c <_sungetc_r+0x38>
 801c63a:	6823      	ldr	r3, [r4, #0]
 801c63c:	1e5a      	subs	r2, r3, #1
 801c63e:	6022      	str	r2, [r4, #0]
 801c640:	f803 5c01 	strb.w	r5, [r3, #-1]
 801c644:	6863      	ldr	r3, [r4, #4]
 801c646:	3301      	adds	r3, #1
 801c648:	6063      	str	r3, [r4, #4]
 801c64a:	e7e9      	b.n	801c620 <_sungetc_r+0xc>
 801c64c:	4621      	mov	r1, r4
 801c64e:	f001 f824 	bl	801d69a <__submore>
 801c652:	2800      	cmp	r0, #0
 801c654:	d0f1      	beq.n	801c63a <_sungetc_r+0x26>
 801c656:	e7e1      	b.n	801c61c <_sungetc_r+0x8>
 801c658:	6921      	ldr	r1, [r4, #16]
 801c65a:	6823      	ldr	r3, [r4, #0]
 801c65c:	b151      	cbz	r1, 801c674 <_sungetc_r+0x60>
 801c65e:	4299      	cmp	r1, r3
 801c660:	d208      	bcs.n	801c674 <_sungetc_r+0x60>
 801c662:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801c666:	42a9      	cmp	r1, r5
 801c668:	d104      	bne.n	801c674 <_sungetc_r+0x60>
 801c66a:	3b01      	subs	r3, #1
 801c66c:	3201      	adds	r2, #1
 801c66e:	6023      	str	r3, [r4, #0]
 801c670:	6062      	str	r2, [r4, #4]
 801c672:	e7d5      	b.n	801c620 <_sungetc_r+0xc>
 801c674:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 801c678:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801c67c:	6323      	str	r3, [r4, #48]	; 0x30
 801c67e:	2303      	movs	r3, #3
 801c680:	6363      	str	r3, [r4, #52]	; 0x34
 801c682:	4623      	mov	r3, r4
 801c684:	f803 5f42 	strb.w	r5, [r3, #66]!
 801c688:	6023      	str	r3, [r4, #0]
 801c68a:	2301      	movs	r3, #1
 801c68c:	e7dc      	b.n	801c648 <_sungetc_r+0x34>

0801c68e <__ssrefill_r>:
 801c68e:	b510      	push	{r4, lr}
 801c690:	460c      	mov	r4, r1
 801c692:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801c694:	b169      	cbz	r1, 801c6b2 <__ssrefill_r+0x24>
 801c696:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801c69a:	4299      	cmp	r1, r3
 801c69c:	d001      	beq.n	801c6a2 <__ssrefill_r+0x14>
 801c69e:	f7fe ff33 	bl	801b508 <_free_r>
 801c6a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c6a4:	6063      	str	r3, [r4, #4]
 801c6a6:	2000      	movs	r0, #0
 801c6a8:	6320      	str	r0, [r4, #48]	; 0x30
 801c6aa:	b113      	cbz	r3, 801c6b2 <__ssrefill_r+0x24>
 801c6ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c6ae:	6023      	str	r3, [r4, #0]
 801c6b0:	bd10      	pop	{r4, pc}
 801c6b2:	6923      	ldr	r3, [r4, #16]
 801c6b4:	6023      	str	r3, [r4, #0]
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	6063      	str	r3, [r4, #4]
 801c6ba:	89a3      	ldrh	r3, [r4, #12]
 801c6bc:	f043 0320 	orr.w	r3, r3, #32
 801c6c0:	81a3      	strh	r3, [r4, #12]
 801c6c2:	f04f 30ff 	mov.w	r0, #4294967295
 801c6c6:	e7f3      	b.n	801c6b0 <__ssrefill_r+0x22>

0801c6c8 <_sfread_r>:
 801c6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6cc:	461f      	mov	r7, r3
 801c6ce:	4613      	mov	r3, r2
 801c6d0:	437b      	muls	r3, r7
 801c6d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c6d4:	4682      	mov	sl, r0
 801c6d6:	4688      	mov	r8, r1
 801c6d8:	4691      	mov	r9, r2
 801c6da:	d027      	beq.n	801c72c <_sfread_r+0x64>
 801c6dc:	461e      	mov	r6, r3
 801c6de:	e9d4 1500 	ldrd	r1, r5, [r4]
 801c6e2:	42b5      	cmp	r5, r6
 801c6e4:	d30b      	bcc.n	801c6fe <_sfread_r+0x36>
 801c6e6:	4632      	mov	r2, r6
 801c6e8:	4640      	mov	r0, r8
 801c6ea:	f7fb fe71 	bl	80183d0 <memcpy>
 801c6ee:	6862      	ldr	r2, [r4, #4]
 801c6f0:	1b92      	subs	r2, r2, r6
 801c6f2:	6062      	str	r2, [r4, #4]
 801c6f4:	6822      	ldr	r2, [r4, #0]
 801c6f6:	4432      	add	r2, r6
 801c6f8:	6022      	str	r2, [r4, #0]
 801c6fa:	463b      	mov	r3, r7
 801c6fc:	e016      	b.n	801c72c <_sfread_r+0x64>
 801c6fe:	462a      	mov	r2, r5
 801c700:	4640      	mov	r0, r8
 801c702:	9301      	str	r3, [sp, #4]
 801c704:	f7fb fe64 	bl	80183d0 <memcpy>
 801c708:	6822      	ldr	r2, [r4, #0]
 801c70a:	2300      	movs	r3, #0
 801c70c:	442a      	add	r2, r5
 801c70e:	6063      	str	r3, [r4, #4]
 801c710:	6022      	str	r2, [r4, #0]
 801c712:	4621      	mov	r1, r4
 801c714:	4650      	mov	r0, sl
 801c716:	f7ff ffba 	bl	801c68e <__ssrefill_r>
 801c71a:	44a8      	add	r8, r5
 801c71c:	9b01      	ldr	r3, [sp, #4]
 801c71e:	eba6 0b05 	sub.w	fp, r6, r5
 801c722:	b138      	cbz	r0, 801c734 <_sfread_r+0x6c>
 801c724:	441d      	add	r5, r3
 801c726:	1bad      	subs	r5, r5, r6
 801c728:	fbb5 f3f9 	udiv	r3, r5, r9
 801c72c:	4618      	mov	r0, r3
 801c72e:	b003      	add	sp, #12
 801c730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c734:	465e      	mov	r6, fp
 801c736:	e7d2      	b.n	801c6de <_sfread_r+0x16>

0801c738 <__ssvfiscanf_r>:
 801c738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c73c:	ed2d 8b02 	vpush	{d8}
 801c740:	b0df      	sub	sp, #380	; 0x17c
 801c742:	461e      	mov	r6, r3
 801c744:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 801c748:	af02      	add	r7, sp, #8
 801c74a:	049d      	lsls	r5, r3, #18
 801c74c:	ee08 0a10 	vmov	s16, r0
 801c750:	460c      	mov	r4, r1
 801c752:	613a      	str	r2, [r7, #16]
 801c754:	d406      	bmi.n	801c764 <__ssvfiscanf_r+0x2c>
 801c756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c75a:	818b      	strh	r3, [r1, #12]
 801c75c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801c75e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c762:	664b      	str	r3, [r1, #100]	; 0x64
 801c764:	2300      	movs	r3, #0
 801c766:	e9c7 3307 	strd	r3, r3, [r7, #28]
 801c76a:	617b      	str	r3, [r7, #20]
 801c76c:	469b      	mov	fp, r3
 801c76e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c770:	627b      	str	r3, [r7, #36]	; 0x24
 801c772:	693a      	ldr	r2, [r7, #16]
 801c774:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c778:	613a      	str	r2, [r7, #16]
 801c77a:	637b      	str	r3, [r7, #52]	; 0x34
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d035      	beq.n	801c7ec <__ssvfiscanf_r+0xb4>
 801c780:	4a9f      	ldr	r2, [pc, #636]	; (801ca00 <__ssvfiscanf_r+0x2c8>)
 801c782:	f813 9002 	ldrb.w	r9, [r3, r2]
 801c786:	f019 0908 	ands.w	r9, r9, #8
 801c78a:	d019      	beq.n	801c7c0 <__ssvfiscanf_r+0x88>
 801c78c:	6863      	ldr	r3, [r4, #4]
 801c78e:	2b00      	cmp	r3, #0
 801c790:	dd0e      	ble.n	801c7b0 <__ssvfiscanf_r+0x78>
 801c792:	6823      	ldr	r3, [r4, #0]
 801c794:	499a      	ldr	r1, [pc, #616]	; (801ca00 <__ssvfiscanf_r+0x2c8>)
 801c796:	781a      	ldrb	r2, [r3, #0]
 801c798:	5c8a      	ldrb	r2, [r1, r2]
 801c79a:	0710      	lsls	r0, r2, #28
 801c79c:	d5e9      	bpl.n	801c772 <__ssvfiscanf_r+0x3a>
 801c79e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c7a0:	3201      	adds	r2, #1
 801c7a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c7a4:	6862      	ldr	r2, [r4, #4]
 801c7a6:	3301      	adds	r3, #1
 801c7a8:	3a01      	subs	r2, #1
 801c7aa:	6062      	str	r2, [r4, #4]
 801c7ac:	6023      	str	r3, [r4, #0]
 801c7ae:	e7ed      	b.n	801c78c <__ssvfiscanf_r+0x54>
 801c7b0:	ee18 0a10 	vmov	r0, s16
 801c7b4:	4621      	mov	r1, r4
 801c7b6:	f7ff ff6a 	bl	801c68e <__ssrefill_r>
 801c7ba:	2800      	cmp	r0, #0
 801c7bc:	d0e9      	beq.n	801c792 <__ssvfiscanf_r+0x5a>
 801c7be:	e7d8      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801c7c0:	2b25      	cmp	r3, #37	; 0x25
 801c7c2:	f040 809f 	bne.w	801c904 <__ssvfiscanf_r+0x1cc>
 801c7c6:	693b      	ldr	r3, [r7, #16]
 801c7c8:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 801c7cc:	220a      	movs	r2, #10
 801c7ce:	6939      	ldr	r1, [r7, #16]
 801c7d0:	781d      	ldrb	r5, [r3, #0]
 801c7d2:	3101      	adds	r1, #1
 801c7d4:	2d7a      	cmp	r5, #122	; 0x7a
 801c7d6:	6139      	str	r1, [r7, #16]
 801c7d8:	d808      	bhi.n	801c7ec <__ssvfiscanf_r+0xb4>
 801c7da:	2d42      	cmp	r5, #66	; 0x42
 801c7dc:	d80b      	bhi.n	801c7f6 <__ssvfiscanf_r+0xbe>
 801c7de:	2d2a      	cmp	r5, #42	; 0x2a
 801c7e0:	f000 80b9 	beq.w	801c956 <__ssvfiscanf_r+0x21e>
 801c7e4:	d87e      	bhi.n	801c8e4 <__ssvfiscanf_r+0x1ac>
 801c7e6:	2d25      	cmp	r5, #37	; 0x25
 801c7e8:	f000 808c 	beq.w	801c904 <__ssvfiscanf_r+0x1cc>
 801c7ec:	f1bb 0f00 	cmp.w	fp, #0
 801c7f0:	f000 815f 	beq.w	801cab2 <__ssvfiscanf_r+0x37a>
 801c7f4:	e158      	b.n	801caa8 <__ssvfiscanf_r+0x370>
 801c7f6:	3d43      	subs	r5, #67	; 0x43
 801c7f8:	2d37      	cmp	r5, #55	; 0x37
 801c7fa:	d8f7      	bhi.n	801c7ec <__ssvfiscanf_r+0xb4>
 801c7fc:	a101      	add	r1, pc, #4	; (adr r1, 801c804 <__ssvfiscanf_r+0xcc>)
 801c7fe:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 801c802:	bf00      	nop
 801c804:	0801cad7 	.word	0x0801cad7
 801c808:	0801c9d3 	.word	0x0801c9d3
 801c80c:	0801c7ed 	.word	0x0801c7ed
 801c810:	0801c7ed 	.word	0x0801c7ed
 801c814:	0801c7ed 	.word	0x0801c7ed
 801c818:	0801c7ed 	.word	0x0801c7ed
 801c81c:	0801c7ed 	.word	0x0801c7ed
 801c820:	0801c7ed 	.word	0x0801c7ed
 801c824:	0801c7ed 	.word	0x0801c7ed
 801c828:	0801c9a5 	.word	0x0801c9a5
 801c82c:	0801c7ed 	.word	0x0801c7ed
 801c830:	0801c7ed 	.word	0x0801c7ed
 801c834:	0801c9db 	.word	0x0801c9db
 801c838:	0801c7ed 	.word	0x0801c7ed
 801c83c:	0801c7ed 	.word	0x0801c7ed
 801c840:	0801c7ed 	.word	0x0801c7ed
 801c844:	0801ca0d 	.word	0x0801ca0d
 801c848:	0801c7ed 	.word	0x0801c7ed
 801c84c:	0801c7ed 	.word	0x0801c7ed
 801c850:	0801c7ed 	.word	0x0801c7ed
 801c854:	0801c7ed 	.word	0x0801c7ed
 801c858:	0801c9f3 	.word	0x0801c9f3
 801c85c:	0801c7ed 	.word	0x0801c7ed
 801c860:	0801c7ed 	.word	0x0801c7ed
 801c864:	0801cac3 	.word	0x0801cac3
 801c868:	0801c7ed 	.word	0x0801c7ed
 801c86c:	0801c7ed 	.word	0x0801c7ed
 801c870:	0801c7ed 	.word	0x0801c7ed
 801c874:	0801c7ed 	.word	0x0801c7ed
 801c878:	0801c7ed 	.word	0x0801c7ed
 801c87c:	0801c7ed 	.word	0x0801c7ed
 801c880:	0801c7ed 	.word	0x0801c7ed
 801c884:	0801cadb 	.word	0x0801cadb
 801c888:	0801c9d7 	.word	0x0801c9d7
 801c88c:	0801c7ed 	.word	0x0801c7ed
 801c890:	0801c7ed 	.word	0x0801c7ed
 801c894:	0801c7ed 	.word	0x0801c7ed
 801c898:	0801c989 	.word	0x0801c989
 801c89c:	0801cb2f 	.word	0x0801cb2f
 801c8a0:	0801c9a5 	.word	0x0801c9a5
 801c8a4:	0801c7ed 	.word	0x0801c7ed
 801c8a8:	0801c96b 	.word	0x0801c96b
 801c8ac:	0801c9b5 	.word	0x0801c9b5
 801c8b0:	0801cae9 	.word	0x0801cae9
 801c8b4:	0801c9df 	.word	0x0801c9df
 801c8b8:	0801cae3 	.word	0x0801cae3
 801c8bc:	0801c7ed 	.word	0x0801c7ed
 801c8c0:	0801c7ed 	.word	0x0801c7ed
 801c8c4:	0801ca11 	.word	0x0801ca11
 801c8c8:	0801c9ad 	.word	0x0801c9ad
 801c8cc:	0801c9eb 	.word	0x0801c9eb
 801c8d0:	0801c7ed 	.word	0x0801c7ed
 801c8d4:	0801c7ed 	.word	0x0801c7ed
 801c8d8:	0801c9f3 	.word	0x0801c9f3
 801c8dc:	0801c7ed 	.word	0x0801c7ed
 801c8e0:	0801c9ad 	.word	0x0801c9ad
 801c8e4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801c8e8:	2b09      	cmp	r3, #9
 801c8ea:	f63f af7f 	bhi.w	801c7ec <__ssvfiscanf_r+0xb4>
 801c8ee:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 801c8f2:	f47f af7b 	bne.w	801c7ec <__ssvfiscanf_r+0xb4>
 801c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8f8:	fb02 5503 	mla	r5, r2, r3, r5
 801c8fc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801c900:	62bb      	str	r3, [r7, #40]	; 0x28
 801c902:	e030      	b.n	801c966 <__ssvfiscanf_r+0x22e>
 801c904:	6863      	ldr	r3, [r4, #4]
 801c906:	2b00      	cmp	r3, #0
 801c908:	dd10      	ble.n	801c92c <__ssvfiscanf_r+0x1f4>
 801c90a:	6823      	ldr	r3, [r4, #0]
 801c90c:	693a      	ldr	r2, [r7, #16]
 801c90e:	7819      	ldrb	r1, [r3, #0]
 801c910:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 801c914:	4291      	cmp	r1, r2
 801c916:	f47f af69 	bne.w	801c7ec <__ssvfiscanf_r+0xb4>
 801c91a:	6862      	ldr	r2, [r4, #4]
 801c91c:	3301      	adds	r3, #1
 801c91e:	6023      	str	r3, [r4, #0]
 801c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c922:	3a01      	subs	r2, #1
 801c924:	6062      	str	r2, [r4, #4]
 801c926:	3301      	adds	r3, #1
 801c928:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c92a:	e722      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801c92c:	ee18 0a10 	vmov	r0, s16
 801c930:	4621      	mov	r1, r4
 801c932:	f7ff feac 	bl	801c68e <__ssrefill_r>
 801c936:	2800      	cmp	r0, #0
 801c938:	d0e7      	beq.n	801c90a <__ssvfiscanf_r+0x1d2>
 801c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c93c:	b11b      	cbz	r3, 801c946 <__ssvfiscanf_r+0x20e>
 801c93e:	89a3      	ldrh	r3, [r4, #12]
 801c940:	065b      	lsls	r3, r3, #25
 801c942:	f57f af53 	bpl.w	801c7ec <__ssvfiscanf_r+0xb4>
 801c946:	f1bb 0f00 	cmp.w	fp, #0
 801c94a:	f040 80a1 	bne.w	801ca90 <__ssvfiscanf_r+0x358>
 801c94e:	f04f 33ff 	mov.w	r3, #4294967295
 801c952:	627b      	str	r3, [r7, #36]	; 0x24
 801c954:	e0ad      	b.n	801cab2 <__ssvfiscanf_r+0x37a>
 801c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c958:	ea53 0309 	orrs.w	r3, r3, r9
 801c95c:	62bb      	str	r3, [r7, #40]	; 0x28
 801c95e:	f47f af45 	bne.w	801c7ec <__ssvfiscanf_r+0xb4>
 801c962:	f04f 0910 	mov.w	r9, #16
 801c966:	693b      	ldr	r3, [r7, #16]
 801c968:	e731      	b.n	801c7ce <__ssvfiscanf_r+0x96>
 801c96a:	f019 0f0f 	tst.w	r9, #15
 801c96e:	f47f af3d 	bne.w	801c7ec <__ssvfiscanf_r+0xb4>
 801c972:	7859      	ldrb	r1, [r3, #1]
 801c974:	296c      	cmp	r1, #108	; 0x6c
 801c976:	d104      	bne.n	801c982 <__ssvfiscanf_r+0x24a>
 801c978:	3302      	adds	r3, #2
 801c97a:	613b      	str	r3, [r7, #16]
 801c97c:	f049 0902 	orr.w	r9, r9, #2
 801c980:	e7f1      	b.n	801c966 <__ssvfiscanf_r+0x22e>
 801c982:	f049 0901 	orr.w	r9, r9, #1
 801c986:	e7ee      	b.n	801c966 <__ssvfiscanf_r+0x22e>
 801c988:	f019 0f0f 	tst.w	r9, #15
 801c98c:	f47f af2e 	bne.w	801c7ec <__ssvfiscanf_r+0xb4>
 801c990:	7859      	ldrb	r1, [r3, #1]
 801c992:	2968      	cmp	r1, #104	; 0x68
 801c994:	bf03      	ittte	eq
 801c996:	3302      	addeq	r3, #2
 801c998:	613b      	streq	r3, [r7, #16]
 801c99a:	f049 0908 	orreq.w	r9, r9, #8
 801c99e:	f049 0904 	orrne.w	r9, r9, #4
 801c9a2:	e7e0      	b.n	801c966 <__ssvfiscanf_r+0x22e>
 801c9a4:	f019 0f0f 	tst.w	r9, #15
 801c9a8:	d0e8      	beq.n	801c97c <__ssvfiscanf_r+0x244>
 801c9aa:	e71f      	b.n	801c7ec <__ssvfiscanf_r+0xb4>
 801c9ac:	f019 0f0f 	tst.w	r9, #15
 801c9b0:	d0d9      	beq.n	801c966 <__ssvfiscanf_r+0x22e>
 801c9b2:	e71b      	b.n	801c7ec <__ssvfiscanf_r+0xb4>
 801c9b4:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 801c9b8:	f47f af18 	bne.w	801c7ec <__ssvfiscanf_r+0xb4>
 801c9bc:	f1bb 0f00 	cmp.w	fp, #0
 801c9c0:	d104      	bne.n	801c9cc <__ssvfiscanf_r+0x294>
 801c9c2:	b082      	sub	sp, #8
 801c9c4:	f10d 0b08 	add.w	fp, sp, #8
 801c9c8:	e9cb 3300 	strd	r3, r3, [fp]
 801c9cc:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 801c9d0:	e7c9      	b.n	801c966 <__ssvfiscanf_r+0x22e>
 801c9d2:	f049 0901 	orr.w	r9, r9, #1
 801c9d6:	4b0b      	ldr	r3, [pc, #44]	; (801ca04 <__ssvfiscanf_r+0x2cc>)
 801c9d8:	e008      	b.n	801c9ec <__ssvfiscanf_r+0x2b4>
 801c9da:	f049 0901 	orr.w	r9, r9, #1
 801c9de:	4b0a      	ldr	r3, [pc, #40]	; (801ca08 <__ssvfiscanf_r+0x2d0>)
 801c9e0:	617b      	str	r3, [r7, #20]
 801c9e2:	2308      	movs	r3, #8
 801c9e4:	61fb      	str	r3, [r7, #28]
 801c9e6:	2503      	movs	r5, #3
 801c9e8:	e013      	b.n	801ca12 <__ssvfiscanf_r+0x2da>
 801c9ea:	4b07      	ldr	r3, [pc, #28]	; (801ca08 <__ssvfiscanf_r+0x2d0>)
 801c9ec:	617b      	str	r3, [r7, #20]
 801c9ee:	230a      	movs	r3, #10
 801c9f0:	e7f8      	b.n	801c9e4 <__ssvfiscanf_r+0x2ac>
 801c9f2:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 801c9f6:	4b04      	ldr	r3, [pc, #16]	; (801ca08 <__ssvfiscanf_r+0x2d0>)
 801c9f8:	617b      	str	r3, [r7, #20]
 801c9fa:	2310      	movs	r3, #16
 801c9fc:	e7f2      	b.n	801c9e4 <__ssvfiscanf_r+0x2ac>
 801c9fe:	bf00      	nop
 801ca00:	0802368d 	.word	0x0802368d
 801ca04:	08018ab9 	.word	0x08018ab9
 801ca08:	0801c5fd 	.word	0x0801c5fd
 801ca0c:	f049 0901 	orr.w	r9, r9, #1
 801ca10:	2502      	movs	r5, #2
 801ca12:	6863      	ldr	r3, [r4, #4]
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	f340 808e 	ble.w	801cb36 <__ssvfiscanf_r+0x3fe>
 801ca1a:	f019 0f40 	tst.w	r9, #64	; 0x40
 801ca1e:	d106      	bne.n	801ca2e <__ssvfiscanf_r+0x2f6>
 801ca20:	6823      	ldr	r3, [r4, #0]
 801ca22:	49b3      	ldr	r1, [pc, #716]	; (801ccf0 <__ssvfiscanf_r+0x5b8>)
 801ca24:	781a      	ldrb	r2, [r3, #0]
 801ca26:	5c52      	ldrb	r2, [r2, r1]
 801ca28:	0711      	lsls	r1, r2, #28
 801ca2a:	f100 808d 	bmi.w	801cb48 <__ssvfiscanf_r+0x410>
 801ca2e:	2d02      	cmp	r5, #2
 801ca30:	f000 8394 	beq.w	801d15c <__ssvfiscanf_r+0xa24>
 801ca34:	2d03      	cmp	r5, #3
 801ca36:	f000 8535 	beq.w	801d4a4 <__ssvfiscanf_r+0xd6c>
 801ca3a:	f009 0310 	and.w	r3, r9, #16
 801ca3e:	2d01      	cmp	r5, #1
 801ca40:	61bb      	str	r3, [r7, #24]
 801ca42:	f009 0301 	and.w	r3, r9, #1
 801ca46:	f000 81cc 	beq.w	801cde2 <__ssvfiscanf_r+0x6aa>
 801ca4a:	6abd      	ldr	r5, [r7, #40]	; 0x28
 801ca4c:	2d01      	cmp	r5, #1
 801ca4e:	bf38      	it	cc
 801ca50:	2501      	movcc	r5, #1
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	f000 8150 	beq.w	801ccf8 <__ssvfiscanf_r+0x5c0>
 801ca58:	69bb      	ldr	r3, [r7, #24]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	f040 810d 	bne.w	801cc7a <__ssvfiscanf_r+0x542>
 801ca60:	4633      	mov	r3, r6
 801ca62:	f019 0f80 	tst.w	r9, #128	; 0x80
 801ca66:	f853 6b04 	ldr.w	r6, [r3], #4
 801ca6a:	62bb      	str	r3, [r7, #40]	; 0x28
 801ca6c:	f000 810c 	beq.w	801cc88 <__ssvfiscanf_r+0x550>
 801ca70:	b146      	cbz	r6, 801ca84 <__ssvfiscanf_r+0x34c>
 801ca72:	2080      	movs	r0, #128	; 0x80
 801ca74:	f7fe fee4 	bl	801b840 <malloc>
 801ca78:	4680      	mov	r8, r0
 801ca7a:	2800      	cmp	r0, #0
 801ca7c:	d178      	bne.n	801cb70 <__ssvfiscanf_r+0x438>
 801ca7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca82:	627b      	str	r3, [r7, #36]	; 0x24
 801ca84:	f1bb 0f00 	cmp.w	fp, #0
 801ca88:	d013      	beq.n	801cab2 <__ssvfiscanf_r+0x37a>
 801ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca8c:	3301      	adds	r3, #1
 801ca8e:	d10b      	bne.n	801caa8 <__ssvfiscanf_r+0x370>
 801ca90:	2400      	movs	r4, #0
 801ca92:	4626      	mov	r6, r4
 801ca94:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 801ca98:	f8db 5000 	ldr.w	r5, [fp]
 801ca9c:	42a3      	cmp	r3, r4
 801ca9e:	f300 85df 	bgt.w	801d660 <__ssvfiscanf_r+0xf28>
 801caa2:	f04f 33ff 	mov.w	r3, #4294967295
 801caa6:	627b      	str	r3, [r7, #36]	; 0x24
 801caa8:	f8db 0000 	ldr.w	r0, [fp]
 801caac:	b108      	cbz	r0, 801cab2 <__ssvfiscanf_r+0x37a>
 801caae:	f7fe fecf 	bl	801b850 <free>
 801cab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cab4:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 801cab8:	46bd      	mov	sp, r7
 801caba:	ecbd 8b02 	vpop	{d8}
 801cabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac2:	6939      	ldr	r1, [r7, #16]
 801cac4:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801cac8:	f002 f82a 	bl	801eb20 <__sccl>
 801cacc:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 801cad0:	6138      	str	r0, [r7, #16]
 801cad2:	2501      	movs	r5, #1
 801cad4:	e79d      	b.n	801ca12 <__ssvfiscanf_r+0x2da>
 801cad6:	f049 0901 	orr.w	r9, r9, #1
 801cada:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 801cade:	2500      	movs	r5, #0
 801cae0:	e797      	b.n	801ca12 <__ssvfiscanf_r+0x2da>
 801cae2:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 801cae6:	e786      	b.n	801c9f6 <__ssvfiscanf_r+0x2be>
 801cae8:	f019 0f10 	tst.w	r9, #16
 801caec:	f47f ae41 	bne.w	801c772 <__ssvfiscanf_r+0x3a>
 801caf0:	f019 0f08 	tst.w	r9, #8
 801caf4:	f856 1b04 	ldr.w	r1, [r6], #4
 801caf8:	d002      	beq.n	801cb00 <__ssvfiscanf_r+0x3c8>
 801cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cafc:	700b      	strb	r3, [r1, #0]
 801cafe:	e638      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801cb00:	f019 0f04 	tst.w	r9, #4
 801cb04:	d002      	beq.n	801cb0c <__ssvfiscanf_r+0x3d4>
 801cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb08:	800b      	strh	r3, [r1, #0]
 801cb0a:	e632      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801cb0c:	f019 0f01 	tst.w	r9, #1
 801cb10:	d002      	beq.n	801cb18 <__ssvfiscanf_r+0x3e0>
 801cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb14:	600b      	str	r3, [r1, #0]
 801cb16:	e62c      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801cb18:	f019 0f02 	tst.w	r9, #2
 801cb1c:	d0f9      	beq.n	801cb12 <__ssvfiscanf_r+0x3da>
 801cb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb20:	ea4f 79e3 	mov.w	r9, r3, asr #31
 801cb24:	461a      	mov	r2, r3
 801cb26:	464b      	mov	r3, r9
 801cb28:	e9c1 2300 	strd	r2, r3, [r1]
 801cb2c:	e621      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801cb2e:	4b71      	ldr	r3, [pc, #452]	; (801ccf4 <__ssvfiscanf_r+0x5bc>)
 801cb30:	617b      	str	r3, [r7, #20]
 801cb32:	2300      	movs	r3, #0
 801cb34:	e756      	b.n	801c9e4 <__ssvfiscanf_r+0x2ac>
 801cb36:	ee18 0a10 	vmov	r0, s16
 801cb3a:	4621      	mov	r1, r4
 801cb3c:	f7ff fda7 	bl	801c68e <__ssrefill_r>
 801cb40:	2800      	cmp	r0, #0
 801cb42:	f43f af6a 	beq.w	801ca1a <__ssvfiscanf_r+0x2e2>
 801cb46:	e6f8      	b.n	801c93a <__ssvfiscanf_r+0x202>
 801cb48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cb4a:	3201      	adds	r2, #1
 801cb4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cb4e:	6862      	ldr	r2, [r4, #4]
 801cb50:	3a01      	subs	r2, #1
 801cb52:	2a00      	cmp	r2, #0
 801cb54:	6062      	str	r2, [r4, #4]
 801cb56:	dd02      	ble.n	801cb5e <__ssvfiscanf_r+0x426>
 801cb58:	3301      	adds	r3, #1
 801cb5a:	6023      	str	r3, [r4, #0]
 801cb5c:	e760      	b.n	801ca20 <__ssvfiscanf_r+0x2e8>
 801cb5e:	ee18 0a10 	vmov	r0, s16
 801cb62:	4621      	mov	r1, r4
 801cb64:	f7ff fd93 	bl	801c68e <__ssrefill_r>
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	f43f af59 	beq.w	801ca20 <__ssvfiscanf_r+0x2e8>
 801cb6e:	e6e4      	b.n	801c93a <__ssvfiscanf_r+0x202>
 801cb70:	f8bb a006 	ldrh.w	sl, [fp, #6]
 801cb74:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 801cb78:	6030      	str	r0, [r6, #0]
 801cb7a:	45ca      	cmp	sl, r9
 801cb7c:	d313      	bcc.n	801cba6 <__ssvfiscanf_r+0x46e>
 801cb7e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 801cb82:	4599      	cmp	r9, r3
 801cb84:	f63f af7b 	bhi.w	801ca7e <__ssvfiscanf_r+0x346>
 801cb88:	f109 0908 	add.w	r9, r9, #8
 801cb8c:	f8db 0000 	ldr.w	r0, [fp]
 801cb90:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801cb94:	f001 fe16 	bl	801e7c4 <realloc>
 801cb98:	2800      	cmp	r0, #0
 801cb9a:	f43f af70 	beq.w	801ca7e <__ssvfiscanf_r+0x346>
 801cb9e:	f8cb 0000 	str.w	r0, [fp]
 801cba2:	f8ab 9004 	strh.w	r9, [fp, #4]
 801cba6:	f8db 3000 	ldr.w	r3, [fp]
 801cbaa:	f10a 0201 	add.w	r2, sl, #1
 801cbae:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 801cbb2:	f8ab 2006 	strh.w	r2, [fp, #6]
 801cbb6:	46b2      	mov	sl, r6
 801cbb8:	f04f 0920 	mov.w	r9, #32
 801cbbc:	4646      	mov	r6, r8
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	60fa      	str	r2, [r7, #12]
 801cbc2:	f001 fda9 	bl	801e718 <__locale_mb_cur_max>
 801cbc6:	68fa      	ldr	r2, [r7, #12]
 801cbc8:	4290      	cmp	r0, r2
 801cbca:	f43f aeb6 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801cbce:	6821      	ldr	r1, [r4, #0]
 801cbd0:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 801cbd4:	f811 0b01 	ldrb.w	r0, [r1], #1
 801cbd8:	f80c 0002 	strb.w	r0, [ip, r2]
 801cbdc:	1c53      	adds	r3, r2, #1
 801cbde:	6862      	ldr	r2, [r4, #4]
 801cbe0:	3a01      	subs	r2, #1
 801cbe2:	e9c4 1200 	strd	r1, r2, [r4]
 801cbe6:	6a3a      	ldr	r2, [r7, #32]
 801cbe8:	2a03      	cmp	r2, #3
 801cbea:	d102      	bne.n	801cbf2 <__ssvfiscanf_r+0x4ba>
 801cbec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cbee:	2a04      	cmp	r2, #4
 801cbf0:	d007      	beq.n	801cc02 <__ssvfiscanf_r+0x4ca>
 801cbf2:	2208      	movs	r2, #8
 801cbf4:	2100      	movs	r1, #0
 801cbf6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801cbfa:	623b      	str	r3, [r7, #32]
 801cbfc:	f7fb fc10 	bl	8018420 <memset>
 801cc00:	6a3b      	ldr	r3, [r7, #32]
 801cc02:	60fb      	str	r3, [r7, #12]
 801cc04:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801cc08:	9200      	str	r2, [sp, #0]
 801cc0a:	ee18 0a10 	vmov	r0, s16
 801cc0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801cc12:	4631      	mov	r1, r6
 801cc14:	f001 fd98 	bl	801e748 <_mbrtowc_r>
 801cc18:	1c42      	adds	r2, r0, #1
 801cc1a:	6238      	str	r0, [r7, #32]
 801cc1c:	f43f ae8d 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	2800      	cmp	r0, #0
 801cc24:	d135      	bne.n	801cc92 <__ssvfiscanf_r+0x55a>
 801cc26:	69ba      	ldr	r2, [r7, #24]
 801cc28:	b902      	cbnz	r2, 801cc2c <__ssvfiscanf_r+0x4f4>
 801cc2a:	6032      	str	r2, [r6, #0]
 801cc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc2e:	441a      	add	r2, r3
 801cc30:	6a3b      	ldr	r3, [r7, #32]
 801cc32:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cc34:	2b03      	cmp	r3, #3
 801cc36:	d102      	bne.n	801cc3e <__ssvfiscanf_r+0x506>
 801cc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cc3a:	2b04      	cmp	r3, #4
 801cc3c:	d000      	beq.n	801cc40 <__ssvfiscanf_r+0x508>
 801cc3e:	3d01      	subs	r5, #1
 801cc40:	69bb      	ldr	r3, [r7, #24]
 801cc42:	b9c3      	cbnz	r3, 801cc76 <__ssvfiscanf_r+0x53e>
 801cc44:	f1ba 0f00 	cmp.w	sl, #0
 801cc48:	d014      	beq.n	801cc74 <__ssvfiscanf_r+0x53c>
 801cc4a:	eba6 0308 	sub.w	r3, r6, r8
 801cc4e:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 801cc52:	d80f      	bhi.n	801cc74 <__ssvfiscanf_r+0x53c>
 801cc54:	4640      	mov	r0, r8
 801cc56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801cc5a:	60fb      	str	r3, [r7, #12]
 801cc5c:	f001 fdb2 	bl	801e7c4 <realloc>
 801cc60:	4680      	mov	r8, r0
 801cc62:	2800      	cmp	r0, #0
 801cc64:	f43f af0b 	beq.w	801ca7e <__ssvfiscanf_r+0x346>
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	f8ca 0000 	str.w	r0, [sl]
 801cc6e:	18c6      	adds	r6, r0, r3
 801cc70:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801cc74:	3604      	adds	r6, #4
 801cc76:	2200      	movs	r2, #0
 801cc78:	e00f      	b.n	801cc9a <__ssvfiscanf_r+0x562>
 801cc7a:	f04f 0900 	mov.w	r9, #0
 801cc7e:	62be      	str	r6, [r7, #40]	; 0x28
 801cc80:	46c8      	mov	r8, r9
 801cc82:	46ca      	mov	sl, r9
 801cc84:	464e      	mov	r6, r9
 801cc86:	e79a      	b.n	801cbbe <__ssvfiscanf_r+0x486>
 801cc88:	f8d7 9018 	ldr.w	r9, [r7, #24]
 801cc8c:	46c8      	mov	r8, r9
 801cc8e:	46ca      	mov	sl, r9
 801cc90:	e795      	b.n	801cbbe <__ssvfiscanf_r+0x486>
 801cc92:	6a3a      	ldr	r2, [r7, #32]
 801cc94:	3202      	adds	r2, #2
 801cc96:	d1c9      	bne.n	801cc2c <__ssvfiscanf_r+0x4f4>
 801cc98:	461a      	mov	r2, r3
 801cc9a:	6863      	ldr	r3, [r4, #4]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	dc14      	bgt.n	801ccca <__ssvfiscanf_r+0x592>
 801cca0:	ee18 0a10 	vmov	r0, s16
 801cca4:	4621      	mov	r1, r4
 801cca6:	60fa      	str	r2, [r7, #12]
 801cca8:	f7ff fcf1 	bl	801c68e <__ssrefill_r>
 801ccac:	68fa      	ldr	r2, [r7, #12]
 801ccae:	b160      	cbz	r0, 801ccca <__ssvfiscanf_r+0x592>
 801ccb0:	2a00      	cmp	r2, #0
 801ccb2:	f47f ae42 	bne.w	801c93a <__ssvfiscanf_r+0x202>
 801ccb6:	f1ba 0f00 	cmp.w	sl, #0
 801ccba:	d10a      	bne.n	801ccd2 <__ssvfiscanf_r+0x59a>
 801ccbc:	69bb      	ldr	r3, [r7, #24]
 801ccbe:	b913      	cbnz	r3, 801ccc6 <__ssvfiscanf_r+0x58e>
 801ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccc2:	3301      	adds	r3, #1
 801ccc4:	627b      	str	r3, [r7, #36]	; 0x24
 801ccc6:	6abe      	ldr	r6, [r7, #40]	; 0x28
 801ccc8:	e553      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801ccca:	2d00      	cmp	r5, #0
 801cccc:	f47f af78 	bne.w	801cbc0 <__ssvfiscanf_r+0x488>
 801ccd0:	e7f1      	b.n	801ccb6 <__ssvfiscanf_r+0x57e>
 801ccd2:	eba6 0108 	sub.w	r1, r6, r8
 801ccd6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 801ccda:	d9ef      	bls.n	801ccbc <__ssvfiscanf_r+0x584>
 801ccdc:	f8da 0000 	ldr.w	r0, [sl]
 801cce0:	f001 fd70 	bl	801e7c4 <realloc>
 801cce4:	2800      	cmp	r0, #0
 801cce6:	d0e9      	beq.n	801ccbc <__ssvfiscanf_r+0x584>
 801cce8:	f8ca 0000 	str.w	r0, [sl]
 801ccec:	e7e6      	b.n	801ccbc <__ssvfiscanf_r+0x584>
 801ccee:	bf00      	nop
 801ccf0:	0802368d 	.word	0x0802368d
 801ccf4:	08018ab9 	.word	0x08018ab9
 801ccf8:	69ba      	ldr	r2, [r7, #24]
 801ccfa:	b1e2      	cbz	r2, 801cd36 <__ssvfiscanf_r+0x5fe>
 801ccfc:	4698      	mov	r8, r3
 801ccfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cd02:	429d      	cmp	r5, r3
 801cd04:	dd11      	ble.n	801cd2a <__ssvfiscanf_r+0x5f2>
 801cd06:	4498      	add	r8, r3
 801cd08:	1aed      	subs	r5, r5, r3
 801cd0a:	4413      	add	r3, r2
 801cd0c:	ee18 0a10 	vmov	r0, s16
 801cd10:	6023      	str	r3, [r4, #0]
 801cd12:	4621      	mov	r1, r4
 801cd14:	f7ff fcbb 	bl	801c68e <__ssrefill_r>
 801cd18:	2800      	cmp	r0, #0
 801cd1a:	d0f0      	beq.n	801ccfe <__ssvfiscanf_r+0x5c6>
 801cd1c:	f1b8 0f00 	cmp.w	r8, #0
 801cd20:	f43f ae0b 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801cd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd26:	4443      	add	r3, r8
 801cd28:	e5fe      	b.n	801c928 <__ssvfiscanf_r+0x1f0>
 801cd2a:	1b5b      	subs	r3, r3, r5
 801cd2c:	44a8      	add	r8, r5
 801cd2e:	4415      	add	r5, r2
 801cd30:	6063      	str	r3, [r4, #4]
 801cd32:	6025      	str	r5, [r4, #0]
 801cd34:	e7f6      	b.n	801cd24 <__ssvfiscanf_r+0x5ec>
 801cd36:	46b0      	mov	r8, r6
 801cd38:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 801cd3c:	f858 6b04 	ldr.w	r6, [r8], #4
 801cd40:	d02e      	beq.n	801cda0 <__ssvfiscanf_r+0x668>
 801cd42:	2e00      	cmp	r6, #0
 801cd44:	f43f ad52 	beq.w	801c7ec <__ssvfiscanf_r+0xb4>
 801cd48:	4628      	mov	r0, r5
 801cd4a:	f7fe fd79 	bl	801b840 <malloc>
 801cd4e:	62b8      	str	r0, [r7, #40]	; 0x28
 801cd50:	2800      	cmp	r0, #0
 801cd52:	f43f adf8 	beq.w	801c946 <__ssvfiscanf_r+0x20e>
 801cd56:	f8bb a006 	ldrh.w	sl, [fp, #6]
 801cd5a:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 801cd5e:	6030      	str	r0, [r6, #0]
 801cd60:	45ca      	cmp	sl, r9
 801cd62:	d313      	bcc.n	801cd8c <__ssvfiscanf_r+0x654>
 801cd64:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 801cd68:	4599      	cmp	r9, r3
 801cd6a:	f63f ae91 	bhi.w	801ca90 <__ssvfiscanf_r+0x358>
 801cd6e:	f109 0908 	add.w	r9, r9, #8
 801cd72:	f8db 0000 	ldr.w	r0, [fp]
 801cd76:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801cd7a:	f001 fd23 	bl	801e7c4 <realloc>
 801cd7e:	2800      	cmp	r0, #0
 801cd80:	f43f ae86 	beq.w	801ca90 <__ssvfiscanf_r+0x358>
 801cd84:	f8cb 0000 	str.w	r0, [fp]
 801cd88:	f8ab 9004 	strh.w	r9, [fp, #4]
 801cd8c:	f8db 3000 	ldr.w	r3, [fp]
 801cd90:	f10a 0201 	add.w	r2, sl, #1
 801cd94:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 801cd98:	46b1      	mov	r9, r6
 801cd9a:	6abe      	ldr	r6, [r7, #40]	; 0x28
 801cd9c:	f8ab 2006 	strh.w	r2, [fp, #6]
 801cda0:	4631      	mov	r1, r6
 801cda2:	ee18 0a10 	vmov	r0, s16
 801cda6:	9400      	str	r4, [sp, #0]
 801cda8:	462b      	mov	r3, r5
 801cdaa:	2201      	movs	r2, #1
 801cdac:	f7ff fc8c 	bl	801c6c8 <_sfread_r>
 801cdb0:	4606      	mov	r6, r0
 801cdb2:	2800      	cmp	r0, #0
 801cdb4:	f43f adc1 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801cdb8:	f1b9 0f00 	cmp.w	r9, #0
 801cdbc:	d009      	beq.n	801cdd2 <__ssvfiscanf_r+0x69a>
 801cdbe:	4285      	cmp	r5, r0
 801cdc0:	d907      	bls.n	801cdd2 <__ssvfiscanf_r+0x69a>
 801cdc2:	4601      	mov	r1, r0
 801cdc4:	f8d9 0000 	ldr.w	r0, [r9]
 801cdc8:	f001 fcfc 	bl	801e7c4 <realloc>
 801cdcc:	b108      	cbz	r0, 801cdd2 <__ssvfiscanf_r+0x69a>
 801cdce:	f8c9 0000 	str.w	r0, [r9]
 801cdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdd4:	4433      	add	r3, r6
 801cdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdda:	3301      	adds	r3, #1
 801cddc:	627b      	str	r3, [r7, #36]	; 0x24
 801cdde:	4646      	mov	r6, r8
 801cde0:	e4c7      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801cde2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cde4:	2a00      	cmp	r2, #0
 801cde6:	bf08      	it	eq
 801cde8:	f04f 32ff 	moveq.w	r2, #4294967295
 801cdec:	461d      	mov	r5, r3
 801cdee:	62ba      	str	r2, [r7, #40]	; 0x28
 801cdf0:	69bb      	ldr	r3, [r7, #24]
 801cdf2:	2d00      	cmp	r5, #0
 801cdf4:	f000 8105 	beq.w	801d002 <__ssvfiscanf_r+0x8ca>
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	f040 80a5 	bne.w	801cf48 <__ssvfiscanf_r+0x810>
 801cdfe:	4633      	mov	r3, r6
 801ce00:	f019 0f80 	tst.w	r9, #128	; 0x80
 801ce04:	f853 5b04 	ldr.w	r5, [r3], #4
 801ce08:	607b      	str	r3, [r7, #4]
 801ce0a:	f000 80a6 	beq.w	801cf5a <__ssvfiscanf_r+0x822>
 801ce0e:	2d00      	cmp	r5, #0
 801ce10:	f43f ae38 	beq.w	801ca84 <__ssvfiscanf_r+0x34c>
 801ce14:	2080      	movs	r0, #128	; 0x80
 801ce16:	f7fe fd13 	bl	801b840 <malloc>
 801ce1a:	4680      	mov	r8, r0
 801ce1c:	2800      	cmp	r0, #0
 801ce1e:	f43f ae2e 	beq.w	801ca7e <__ssvfiscanf_r+0x346>
 801ce22:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801ce26:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 801ce2a:	6028      	str	r0, [r5, #0]
 801ce2c:	45b1      	cmp	r9, r6
 801ce2e:	d311      	bcc.n	801ce54 <__ssvfiscanf_r+0x71c>
 801ce30:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 801ce34:	429e      	cmp	r6, r3
 801ce36:	f63f ae22 	bhi.w	801ca7e <__ssvfiscanf_r+0x346>
 801ce3a:	3608      	adds	r6, #8
 801ce3c:	f8db 0000 	ldr.w	r0, [fp]
 801ce40:	00b1      	lsls	r1, r6, #2
 801ce42:	f001 fcbf 	bl	801e7c4 <realloc>
 801ce46:	2800      	cmp	r0, #0
 801ce48:	f43f ae19 	beq.w	801ca7e <__ssvfiscanf_r+0x346>
 801ce4c:	f8cb 0000 	str.w	r0, [fp]
 801ce50:	f8ab 6004 	strh.w	r6, [fp, #4]
 801ce54:	f8db 3000 	ldr.w	r3, [fp]
 801ce58:	60fd      	str	r5, [r7, #12]
 801ce5a:	f109 0201 	add.w	r2, r9, #1
 801ce5e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801ce62:	f8ab 2006 	strh.w	r2, [fp, #6]
 801ce66:	4645      	mov	r5, r8
 801ce68:	f04f 0920 	mov.w	r9, #32
 801ce6c:	2600      	movs	r6, #0
 801ce6e:	f001 fc53 	bl	801e718 <__locale_mb_cur_max>
 801ce72:	42b0      	cmp	r0, r6
 801ce74:	f43f ad61 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801ce78:	1c73      	adds	r3, r6, #1
 801ce7a:	60bb      	str	r3, [r7, #8]
 801ce7c:	6823      	ldr	r3, [r4, #0]
 801ce7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801ce82:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce86:	558a      	strb	r2, [r1, r6]
 801ce88:	6862      	ldr	r2, [r4, #4]
 801ce8a:	3a01      	subs	r2, #1
 801ce8c:	e9c4 3200 	strd	r3, r2, [r4]
 801ce90:	6a3b      	ldr	r3, [r7, #32]
 801ce92:	2b03      	cmp	r3, #3
 801ce94:	d102      	bne.n	801ce9c <__ssvfiscanf_r+0x764>
 801ce96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce98:	2b04      	cmp	r3, #4
 801ce9a:	d005      	beq.n	801cea8 <__ssvfiscanf_r+0x770>
 801ce9c:	2208      	movs	r2, #8
 801ce9e:	2100      	movs	r1, #0
 801cea0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801cea4:	f7fb fabc 	bl	8018420 <memset>
 801cea8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ceac:	9300      	str	r3, [sp, #0]
 801ceae:	ee18 0a10 	vmov	r0, s16
 801ceb2:	68bb      	ldr	r3, [r7, #8]
 801ceb4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801ceb8:	4629      	mov	r1, r5
 801ceba:	f001 fc45 	bl	801e748 <_mbrtowc_r>
 801cebe:	4603      	mov	r3, r0
 801cec0:	6238      	str	r0, [r7, #32]
 801cec2:	1c58      	adds	r0, r3, #1
 801cec4:	f43f ad39 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d14c      	bne.n	801cf66 <__ssvfiscanf_r+0x82e>
 801cecc:	602b      	str	r3, [r5, #0]
 801cece:	682e      	ldr	r6, [r5, #0]
 801ced0:	1c71      	adds	r1, r6, #1
 801ced2:	d059      	beq.n	801cf88 <__ssvfiscanf_r+0x850>
 801ced4:	2208      	movs	r2, #8
 801ced6:	2100      	movs	r1, #0
 801ced8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801cedc:	f7fb faa0 	bl	8018420 <memset>
 801cee0:	4b9d      	ldr	r3, [pc, #628]	; (801d158 <__ssvfiscanf_r+0xa20>)
 801cee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801cee6:	603b      	str	r3, [r7, #0]
 801cee8:	4632      	mov	r2, r6
 801ceea:	ee18 0a10 	vmov	r0, s16
 801ceee:	683e      	ldr	r6, [r7, #0]
 801cef0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cef4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801cef8:	47b0      	blx	r6
 801cefa:	2801      	cmp	r0, #1
 801cefc:	d146      	bne.n	801cf8c <__ssvfiscanf_r+0x854>
 801cefe:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 801cf02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cf06:	f813 300a 	ldrb.w	r3, [r3, sl]
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d14b      	bne.n	801cfa6 <__ssvfiscanf_r+0x86e>
 801cf0e:	f107 0648 	add.w	r6, r7, #72	; 0x48
 801cf12:	68bb      	ldr	r3, [r7, #8]
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d13c      	bne.n	801cf92 <__ssvfiscanf_r+0x85a>
 801cf18:	69bb      	ldr	r3, [r7, #24]
 801cf1a:	b99b      	cbnz	r3, 801cf44 <__ssvfiscanf_r+0x80c>
 801cf1c:	602b      	str	r3, [r5, #0]
 801cf1e:	68fb      	ldr	r3, [r7, #12]
 801cf20:	b16b      	cbz	r3, 801cf3e <__ssvfiscanf_r+0x806>
 801cf22:	eba5 0108 	sub.w	r1, r5, r8
 801cf26:	108b      	asrs	r3, r1, #2
 801cf28:	3301      	adds	r3, #1
 801cf2a:	4599      	cmp	r9, r3
 801cf2c:	d907      	bls.n	801cf3e <__ssvfiscanf_r+0x806>
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	3104      	adds	r1, #4
 801cf32:	6818      	ldr	r0, [r3, #0]
 801cf34:	f001 fc46 	bl	801e7c4 <realloc>
 801cf38:	b108      	cbz	r0, 801cf3e <__ssvfiscanf_r+0x806>
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	6018      	str	r0, [r3, #0]
 801cf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf40:	3301      	adds	r3, #1
 801cf42:	627b      	str	r3, [r7, #36]	; 0x24
 801cf44:	687e      	ldr	r6, [r7, #4]
 801cf46:	e414      	b.n	801c772 <__ssvfiscanf_r+0x3a>
 801cf48:	f04f 0900 	mov.w	r9, #0
 801cf4c:	607e      	str	r6, [r7, #4]
 801cf4e:	46c8      	mov	r8, r9
 801cf50:	f8c7 900c 	str.w	r9, [r7, #12]
 801cf54:	f107 0534 	add.w	r5, r7, #52	; 0x34
 801cf58:	e788      	b.n	801ce6c <__ssvfiscanf_r+0x734>
 801cf5a:	f8d7 9018 	ldr.w	r9, [r7, #24]
 801cf5e:	f8c7 900c 	str.w	r9, [r7, #12]
 801cf62:	46c8      	mov	r8, r9
 801cf64:	e782      	b.n	801ce6c <__ssvfiscanf_r+0x734>
 801cf66:	6a3b      	ldr	r3, [r7, #32]
 801cf68:	3302      	adds	r3, #2
 801cf6a:	d1b0      	bne.n	801cece <__ssvfiscanf_r+0x796>
 801cf6c:	68be      	ldr	r6, [r7, #8]
 801cf6e:	6863      	ldr	r3, [r4, #4]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	dc41      	bgt.n	801cff8 <__ssvfiscanf_r+0x8c0>
 801cf74:	ee18 0a10 	vmov	r0, s16
 801cf78:	4621      	mov	r1, r4
 801cf7a:	f7ff fb88 	bl	801c68e <__ssrefill_r>
 801cf7e:	2800      	cmp	r0, #0
 801cf80:	d03a      	beq.n	801cff8 <__ssvfiscanf_r+0x8c0>
 801cf82:	2e00      	cmp	r6, #0
 801cf84:	d0c8      	beq.n	801cf18 <__ssvfiscanf_r+0x7e0>
 801cf86:	e4d8      	b.n	801c93a <__ssvfiscanf_r+0x202>
 801cf88:	46b2      	mov	sl, r6
 801cf8a:	e7ba      	b.n	801cf02 <__ssvfiscanf_r+0x7ca>
 801cf8c:	f04f 0a00 	mov.w	sl, #0
 801cf90:	e7b7      	b.n	801cf02 <__ssvfiscanf_r+0x7ca>
 801cf92:	68bb      	ldr	r3, [r7, #8]
 801cf94:	3b01      	subs	r3, #1
 801cf96:	ee18 0a10 	vmov	r0, s16
 801cf9a:	5cf1      	ldrb	r1, [r6, r3]
 801cf9c:	60bb      	str	r3, [r7, #8]
 801cf9e:	4622      	mov	r2, r4
 801cfa0:	f7ff fb38 	bl	801c614 <_sungetc_r>
 801cfa4:	e7b5      	b.n	801cf12 <__ssvfiscanf_r+0x7da>
 801cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfa8:	68ba      	ldr	r2, [r7, #8]
 801cfaa:	4413      	add	r3, r2
 801cfac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cfae:	6a3b      	ldr	r3, [r7, #32]
 801cfb0:	2b03      	cmp	r3, #3
 801cfb2:	d102      	bne.n	801cfba <__ssvfiscanf_r+0x882>
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfb6:	2b04      	cmp	r3, #4
 801cfb8:	d002      	beq.n	801cfc0 <__ssvfiscanf_r+0x888>
 801cfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfbc:	3b01      	subs	r3, #1
 801cfbe:	62bb      	str	r3, [r7, #40]	; 0x28
 801cfc0:	69bb      	ldr	r3, [r7, #24]
 801cfc2:	b9bb      	cbnz	r3, 801cff4 <__ssvfiscanf_r+0x8bc>
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	3504      	adds	r5, #4
 801cfc8:	b1a3      	cbz	r3, 801cff4 <__ssvfiscanf_r+0x8bc>
 801cfca:	eba5 0608 	sub.w	r6, r5, r8
 801cfce:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 801cfd2:	d80d      	bhi.n	801cff0 <__ssvfiscanf_r+0x8b8>
 801cfd4:	4640      	mov	r0, r8
 801cfd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801cfda:	f001 fbf3 	bl	801e7c4 <realloc>
 801cfde:	4680      	mov	r8, r0
 801cfe0:	2800      	cmp	r0, #0
 801cfe2:	f43f ad4c 	beq.w	801ca7e <__ssvfiscanf_r+0x346>
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	1985      	adds	r5, r0, r6
 801cfea:	6018      	str	r0, [r3, #0]
 801cfec:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801cff0:	69be      	ldr	r6, [r7, #24]
 801cff2:	e7bc      	b.n	801cf6e <__ssvfiscanf_r+0x836>
 801cff4:	2600      	movs	r6, #0
 801cff6:	e7ba      	b.n	801cf6e <__ssvfiscanf_r+0x836>
 801cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	f47f af37 	bne.w	801ce6e <__ssvfiscanf_r+0x736>
 801d000:	e78a      	b.n	801cf18 <__ssvfiscanf_r+0x7e0>
 801d002:	b1f3      	cbz	r3, 801d042 <__ssvfiscanf_r+0x90a>
 801d004:	f107 0870 	add.w	r8, r7, #112	; 0x70
 801d008:	6823      	ldr	r3, [r4, #0]
 801d00a:	781a      	ldrb	r2, [r3, #0]
 801d00c:	f818 2002 	ldrb.w	r2, [r8, r2]
 801d010:	b912      	cbnz	r2, 801d018 <__ssvfiscanf_r+0x8e0>
 801d012:	b99d      	cbnz	r5, 801d03c <__ssvfiscanf_r+0x904>
 801d014:	f7ff bbea 	b.w	801c7ec <__ssvfiscanf_r+0xb4>
 801d018:	3301      	adds	r3, #1
 801d01a:	6862      	ldr	r2, [r4, #4]
 801d01c:	6023      	str	r3, [r4, #0]
 801d01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d020:	3501      	adds	r5, #1
 801d022:	3a01      	subs	r2, #1
 801d024:	42ab      	cmp	r3, r5
 801d026:	6062      	str	r2, [r4, #4]
 801d028:	d008      	beq.n	801d03c <__ssvfiscanf_r+0x904>
 801d02a:	2a00      	cmp	r2, #0
 801d02c:	dcec      	bgt.n	801d008 <__ssvfiscanf_r+0x8d0>
 801d02e:	ee18 0a10 	vmov	r0, s16
 801d032:	4621      	mov	r1, r4
 801d034:	f7ff fb2b 	bl	801c68e <__ssrefill_r>
 801d038:	2800      	cmp	r0, #0
 801d03a:	d0e5      	beq.n	801d008 <__ssvfiscanf_r+0x8d0>
 801d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d03e:	442b      	add	r3, r5
 801d040:	e472      	b.n	801c928 <__ssvfiscanf_r+0x1f0>
 801d042:	4633      	mov	r3, r6
 801d044:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 801d048:	f853 6b04 	ldr.w	r6, [r3], #4
 801d04c:	61bb      	str	r3, [r7, #24]
 801d04e:	f000 8081 	beq.w	801d154 <__ssvfiscanf_r+0xa1c>
 801d052:	2e00      	cmp	r6, #0
 801d054:	f43f abca 	beq.w	801c7ec <__ssvfiscanf_r+0xb4>
 801d058:	2020      	movs	r0, #32
 801d05a:	f7fe fbf1 	bl	801b840 <malloc>
 801d05e:	4680      	mov	r8, r0
 801d060:	2800      	cmp	r0, #0
 801d062:	f43f ac70 	beq.w	801c946 <__ssvfiscanf_r+0x20e>
 801d066:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801d06a:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 801d06e:	6030      	str	r0, [r6, #0]
 801d070:	45a9      	cmp	r9, r5
 801d072:	d311      	bcc.n	801d098 <__ssvfiscanf_r+0x960>
 801d074:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 801d078:	429d      	cmp	r5, r3
 801d07a:	f63f ad09 	bhi.w	801ca90 <__ssvfiscanf_r+0x358>
 801d07e:	3508      	adds	r5, #8
 801d080:	f8db 0000 	ldr.w	r0, [fp]
 801d084:	00a9      	lsls	r1, r5, #2
 801d086:	f001 fb9d 	bl	801e7c4 <realloc>
 801d08a:	2800      	cmp	r0, #0
 801d08c:	f43f ad00 	beq.w	801ca90 <__ssvfiscanf_r+0x358>
 801d090:	f8cb 0000 	str.w	r0, [fp]
 801d094:	f8ab 5004 	strh.w	r5, [fp, #4]
 801d098:	f8db 3000 	ldr.w	r3, [fp]
 801d09c:	f109 0201 	add.w	r2, r9, #1
 801d0a0:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 801d0a4:	46b2      	mov	sl, r6
 801d0a6:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d0aa:	4646      	mov	r6, r8
 801d0ac:	2520      	movs	r5, #32
 801d0ae:	46b0      	mov	r8, r6
 801d0b0:	f107 0970 	add.w	r9, r7, #112	; 0x70
 801d0b4:	6823      	ldr	r3, [r4, #0]
 801d0b6:	781a      	ldrb	r2, [r3, #0]
 801d0b8:	f819 2002 	ldrb.w	r2, [r9, r2]
 801d0bc:	b36a      	cbz	r2, 801d11a <__ssvfiscanf_r+0x9e2>
 801d0be:	6862      	ldr	r2, [r4, #4]
 801d0c0:	3a01      	subs	r2, #1
 801d0c2:	6062      	str	r2, [r4, #4]
 801d0c4:	1c5a      	adds	r2, r3, #1
 801d0c6:	6022      	str	r2, [r4, #0]
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	f806 3b01 	strb.w	r3, [r6], #1
 801d0ce:	f1ba 0f00 	cmp.w	sl, #0
 801d0d2:	d011      	beq.n	801d0f8 <__ssvfiscanf_r+0x9c0>
 801d0d4:	eba6 0308 	sub.w	r3, r6, r8
 801d0d8:	42ab      	cmp	r3, r5
 801d0da:	d30d      	bcc.n	801d0f8 <__ssvfiscanf_r+0x9c0>
 801d0dc:	006d      	lsls	r5, r5, #1
 801d0de:	4640      	mov	r0, r8
 801d0e0:	4629      	mov	r1, r5
 801d0e2:	60fb      	str	r3, [r7, #12]
 801d0e4:	f001 fb6e 	bl	801e7c4 <realloc>
 801d0e8:	4680      	mov	r8, r0
 801d0ea:	2800      	cmp	r0, #0
 801d0ec:	f43f ac2b 	beq.w	801c946 <__ssvfiscanf_r+0x20e>
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	f8ca 0000 	str.w	r0, [sl]
 801d0f6:	18c6      	adds	r6, r0, r3
 801d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0fa:	3b01      	subs	r3, #1
 801d0fc:	62bb      	str	r3, [r7, #40]	; 0x28
 801d0fe:	d00c      	beq.n	801d11a <__ssvfiscanf_r+0x9e2>
 801d100:	6863      	ldr	r3, [r4, #4]
 801d102:	2b00      	cmp	r3, #0
 801d104:	dcd6      	bgt.n	801d0b4 <__ssvfiscanf_r+0x97c>
 801d106:	ee18 0a10 	vmov	r0, s16
 801d10a:	4621      	mov	r1, r4
 801d10c:	f7ff fabf 	bl	801c68e <__ssrefill_r>
 801d110:	2800      	cmp	r0, #0
 801d112:	d0cf      	beq.n	801d0b4 <__ssvfiscanf_r+0x97c>
 801d114:	4546      	cmp	r6, r8
 801d116:	f43f ac10 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801d11a:	ebb6 0808 	subs.w	r8, r6, r8
 801d11e:	f43f ab65 	beq.w	801c7ec <__ssvfiscanf_r+0xb4>
 801d122:	2300      	movs	r3, #0
 801d124:	7033      	strb	r3, [r6, #0]
 801d126:	f1ba 0f00 	cmp.w	sl, #0
 801d12a:	d00a      	beq.n	801d142 <__ssvfiscanf_r+0xa0a>
 801d12c:	f108 0101 	add.w	r1, r8, #1
 801d130:	428d      	cmp	r5, r1
 801d132:	d906      	bls.n	801d142 <__ssvfiscanf_r+0xa0a>
 801d134:	f8da 0000 	ldr.w	r0, [sl]
 801d138:	f001 fb44 	bl	801e7c4 <realloc>
 801d13c:	b108      	cbz	r0, 801d142 <__ssvfiscanf_r+0xa0a>
 801d13e:	f8ca 0000 	str.w	r0, [sl]
 801d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d144:	3301      	adds	r3, #1
 801d146:	627b      	str	r3, [r7, #36]	; 0x24
 801d148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d14a:	4443      	add	r3, r8
 801d14c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d14e:	69be      	ldr	r6, [r7, #24]
 801d150:	f7ff bb0f 	b.w	801c772 <__ssvfiscanf_r+0x3a>
 801d154:	46aa      	mov	sl, r5
 801d156:	e7aa      	b.n	801d0ae <__ssvfiscanf_r+0x976>
 801d158:	200008e0 	.word	0x200008e0
 801d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d15e:	2b00      	cmp	r3, #0
 801d160:	bf08      	it	eq
 801d162:	f04f 33ff 	moveq.w	r3, #4294967295
 801d166:	f019 0501 	ands.w	r5, r9, #1
 801d16a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d16c:	f009 0810 	and.w	r8, r9, #16
 801d170:	f000 80f5 	beq.w	801d35e <__ssvfiscanf_r+0xc26>
 801d174:	f1b8 0f00 	cmp.w	r8, #0
 801d178:	f040 809a 	bne.w	801d2b0 <__ssvfiscanf_r+0xb78>
 801d17c:	4633      	mov	r3, r6
 801d17e:	f019 0f80 	tst.w	r9, #128	; 0x80
 801d182:	f853 5b04 	ldr.w	r5, [r3], #4
 801d186:	61bb      	str	r3, [r7, #24]
 801d188:	f000 809a 	beq.w	801d2c0 <__ssvfiscanf_r+0xb88>
 801d18c:	2d00      	cmp	r5, #0
 801d18e:	f43f ac79 	beq.w	801ca84 <__ssvfiscanf_r+0x34c>
 801d192:	2080      	movs	r0, #128	; 0x80
 801d194:	f7fe fb54 	bl	801b840 <malloc>
 801d198:	4606      	mov	r6, r0
 801d19a:	2800      	cmp	r0, #0
 801d19c:	f43f ac6f 	beq.w	801ca7e <__ssvfiscanf_r+0x346>
 801d1a0:	f8bb a006 	ldrh.w	sl, [fp, #6]
 801d1a4:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 801d1a8:	6028      	str	r0, [r5, #0]
 801d1aa:	45ca      	cmp	sl, r9
 801d1ac:	d313      	bcc.n	801d1d6 <__ssvfiscanf_r+0xa9e>
 801d1ae:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 801d1b2:	4599      	cmp	r9, r3
 801d1b4:	f63f ac63 	bhi.w	801ca7e <__ssvfiscanf_r+0x346>
 801d1b8:	f109 0908 	add.w	r9, r9, #8
 801d1bc:	f8db 0000 	ldr.w	r0, [fp]
 801d1c0:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801d1c4:	f001 fafe 	bl	801e7c4 <realloc>
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	f43f ac58 	beq.w	801ca7e <__ssvfiscanf_r+0x346>
 801d1ce:	f8cb 0000 	str.w	r0, [fp]
 801d1d2:	f8ab 9004 	strh.w	r9, [fp, #4]
 801d1d6:	f8db 3000 	ldr.w	r3, [fp]
 801d1da:	f10a 0201 	add.w	r2, sl, #1
 801d1de:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 801d1e2:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d1e6:	46aa      	mov	sl, r5
 801d1e8:	f04f 0920 	mov.w	r9, #32
 801d1ec:	4635      	mov	r5, r6
 801d1ee:	2200      	movs	r2, #0
 801d1f0:	6823      	ldr	r3, [r4, #0]
 801d1f2:	49ab      	ldr	r1, [pc, #684]	; (801d4a0 <__ssvfiscanf_r+0xd68>)
 801d1f4:	781b      	ldrb	r3, [r3, #0]
 801d1f6:	5c5b      	ldrb	r3, [r3, r1]
 801d1f8:	0718      	lsls	r0, r3, #28
 801d1fa:	d43f      	bmi.n	801d27c <__ssvfiscanf_r+0xb44>
 801d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d03c      	beq.n	801d27c <__ssvfiscanf_r+0xb44>
 801d202:	60fa      	str	r2, [r7, #12]
 801d204:	f001 fa88 	bl	801e718 <__locale_mb_cur_max>
 801d208:	68fa      	ldr	r2, [r7, #12]
 801d20a:	4290      	cmp	r0, r2
 801d20c:	f43f ab95 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801d210:	6821      	ldr	r1, [r4, #0]
 801d212:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 801d216:	f811 0b01 	ldrb.w	r0, [r1], #1
 801d21a:	f80c 0002 	strb.w	r0, [ip, r2]
 801d21e:	1c53      	adds	r3, r2, #1
 801d220:	6862      	ldr	r2, [r4, #4]
 801d222:	3a01      	subs	r2, #1
 801d224:	e9c4 1200 	strd	r1, r2, [r4]
 801d228:	6a3a      	ldr	r2, [r7, #32]
 801d22a:	2a03      	cmp	r2, #3
 801d22c:	d102      	bne.n	801d234 <__ssvfiscanf_r+0xafc>
 801d22e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d230:	2a04      	cmp	r2, #4
 801d232:	d007      	beq.n	801d244 <__ssvfiscanf_r+0xb0c>
 801d234:	2208      	movs	r2, #8
 801d236:	2100      	movs	r1, #0
 801d238:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801d23c:	623b      	str	r3, [r7, #32]
 801d23e:	f7fb f8ef 	bl	8018420 <memset>
 801d242:	6a3b      	ldr	r3, [r7, #32]
 801d244:	60fb      	str	r3, [r7, #12]
 801d246:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801d24a:	9200      	str	r2, [sp, #0]
 801d24c:	ee18 0a10 	vmov	r0, s16
 801d250:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d254:	4629      	mov	r1, r5
 801d256:	f001 fa77 	bl	801e748 <_mbrtowc_r>
 801d25a:	1c42      	adds	r2, r0, #1
 801d25c:	6238      	str	r0, [r7, #32]
 801d25e:	f43f ab6c 	beq.w	801c93a <__ssvfiscanf_r+0x202>
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	bb80      	cbnz	r0, 801d2c8 <__ssvfiscanf_r+0xb90>
 801d266:	6028      	str	r0, [r5, #0]
 801d268:	6828      	ldr	r0, [r5, #0]
 801d26a:	60fb      	str	r3, [r7, #12]
 801d26c:	f001 fa46 	bl	801e6fc <iswspace>
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	4602      	mov	r2, r0
 801d274:	2800      	cmp	r0, #0
 801d276:	d047      	beq.n	801d308 <__ssvfiscanf_r+0xbd0>
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d139      	bne.n	801d2f0 <__ssvfiscanf_r+0xbb8>
 801d27c:	f1b8 0f00 	cmp.w	r8, #0
 801d280:	f47f af65 	bne.w	801d14e <__ssvfiscanf_r+0xa16>
 801d284:	f8c5 8000 	str.w	r8, [r5]
 801d288:	f1ba 0f00 	cmp.w	sl, #0
 801d28c:	d00c      	beq.n	801d2a8 <__ssvfiscanf_r+0xb70>
 801d28e:	1ba9      	subs	r1, r5, r6
 801d290:	108b      	asrs	r3, r1, #2
 801d292:	3301      	adds	r3, #1
 801d294:	4599      	cmp	r9, r3
 801d296:	d907      	bls.n	801d2a8 <__ssvfiscanf_r+0xb70>
 801d298:	f8da 0000 	ldr.w	r0, [sl]
 801d29c:	3104      	adds	r1, #4
 801d29e:	f001 fa91 	bl	801e7c4 <realloc>
 801d2a2:	b108      	cbz	r0, 801d2a8 <__ssvfiscanf_r+0xb70>
 801d2a4:	f8ca 0000 	str.w	r0, [sl]
 801d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2aa:	3301      	adds	r3, #1
 801d2ac:	627b      	str	r3, [r7, #36]	; 0x24
 801d2ae:	e74e      	b.n	801d14e <__ssvfiscanf_r+0xa16>
 801d2b0:	f04f 0900 	mov.w	r9, #0
 801d2b4:	61be      	str	r6, [r7, #24]
 801d2b6:	46ca      	mov	sl, r9
 801d2b8:	464e      	mov	r6, r9
 801d2ba:	f107 0534 	add.w	r5, r7, #52	; 0x34
 801d2be:	e796      	b.n	801d1ee <__ssvfiscanf_r+0xab6>
 801d2c0:	46c1      	mov	r9, r8
 801d2c2:	4646      	mov	r6, r8
 801d2c4:	46c2      	mov	sl, r8
 801d2c6:	e792      	b.n	801d1ee <__ssvfiscanf_r+0xab6>
 801d2c8:	6a3a      	ldr	r2, [r7, #32]
 801d2ca:	3202      	adds	r2, #2
 801d2cc:	d1cc      	bne.n	801d268 <__ssvfiscanf_r+0xb30>
 801d2ce:	461a      	mov	r2, r3
 801d2d0:	6863      	ldr	r3, [r4, #4]
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	dc8c      	bgt.n	801d1f0 <__ssvfiscanf_r+0xab8>
 801d2d6:	ee18 0a10 	vmov	r0, s16
 801d2da:	4621      	mov	r1, r4
 801d2dc:	60fa      	str	r2, [r7, #12]
 801d2de:	f7ff f9d6 	bl	801c68e <__ssrefill_r>
 801d2e2:	68fa      	ldr	r2, [r7, #12]
 801d2e4:	2800      	cmp	r0, #0
 801d2e6:	d083      	beq.n	801d1f0 <__ssvfiscanf_r+0xab8>
 801d2e8:	2a00      	cmp	r2, #0
 801d2ea:	f47f ab26 	bne.w	801c93a <__ssvfiscanf_r+0x202>
 801d2ee:	e7c5      	b.n	801d27c <__ssvfiscanf_r+0xb44>
 801d2f0:	3b01      	subs	r3, #1
 801d2f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801d2f6:	ee18 0a10 	vmov	r0, s16
 801d2fa:	5cc9      	ldrb	r1, [r1, r3]
 801d2fc:	62bb      	str	r3, [r7, #40]	; 0x28
 801d2fe:	4622      	mov	r2, r4
 801d300:	f7ff f988 	bl	801c614 <_sungetc_r>
 801d304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d306:	e7b7      	b.n	801d278 <__ssvfiscanf_r+0xb40>
 801d308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d30a:	4419      	add	r1, r3
 801d30c:	6a3b      	ldr	r3, [r7, #32]
 801d30e:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d310:	2b03      	cmp	r3, #3
 801d312:	d102      	bne.n	801d31a <__ssvfiscanf_r+0xbe2>
 801d314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d316:	2b04      	cmp	r3, #4
 801d318:	d002      	beq.n	801d320 <__ssvfiscanf_r+0xbe8>
 801d31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d31c:	3b01      	subs	r3, #1
 801d31e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d320:	f1b8 0f00 	cmp.w	r8, #0
 801d324:	d1d4      	bne.n	801d2d0 <__ssvfiscanf_r+0xb98>
 801d326:	3504      	adds	r5, #4
 801d328:	f1ba 0f00 	cmp.w	sl, #0
 801d32c:	d015      	beq.n	801d35a <__ssvfiscanf_r+0xc22>
 801d32e:	1bab      	subs	r3, r5, r6
 801d330:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 801d334:	d80f      	bhi.n	801d356 <__ssvfiscanf_r+0xc1e>
 801d336:	4630      	mov	r0, r6
 801d338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801d33c:	60fb      	str	r3, [r7, #12]
 801d33e:	f001 fa41 	bl	801e7c4 <realloc>
 801d342:	4606      	mov	r6, r0
 801d344:	2800      	cmp	r0, #0
 801d346:	f43f ab9a 	beq.w	801ca7e <__ssvfiscanf_r+0x346>
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	f8ca 0000 	str.w	r0, [sl]
 801d350:	18c5      	adds	r5, r0, r3
 801d352:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d356:	4642      	mov	r2, r8
 801d358:	e7ba      	b.n	801d2d0 <__ssvfiscanf_r+0xb98>
 801d35a:	4652      	mov	r2, sl
 801d35c:	e7b8      	b.n	801d2d0 <__ssvfiscanf_r+0xb98>
 801d35e:	f1b8 0f00 	cmp.w	r8, #0
 801d362:	d01a      	beq.n	801d39a <__ssvfiscanf_r+0xc62>
 801d364:	6823      	ldr	r3, [r4, #0]
 801d366:	494e      	ldr	r1, [pc, #312]	; (801d4a0 <__ssvfiscanf_r+0xd68>)
 801d368:	781a      	ldrb	r2, [r3, #0]
 801d36a:	5c52      	ldrb	r2, [r2, r1]
 801d36c:	0711      	lsls	r1, r2, #28
 801d36e:	f53f ae65 	bmi.w	801d03c <__ssvfiscanf_r+0x904>
 801d372:	3301      	adds	r3, #1
 801d374:	6862      	ldr	r2, [r4, #4]
 801d376:	6023      	str	r3, [r4, #0]
 801d378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d37a:	3501      	adds	r5, #1
 801d37c:	3a01      	subs	r2, #1
 801d37e:	42ab      	cmp	r3, r5
 801d380:	6062      	str	r2, [r4, #4]
 801d382:	f43f ae5b 	beq.w	801d03c <__ssvfiscanf_r+0x904>
 801d386:	2a00      	cmp	r2, #0
 801d388:	dcec      	bgt.n	801d364 <__ssvfiscanf_r+0xc2c>
 801d38a:	ee18 0a10 	vmov	r0, s16
 801d38e:	4621      	mov	r1, r4
 801d390:	f7ff f97d 	bl	801c68e <__ssrefill_r>
 801d394:	2800      	cmp	r0, #0
 801d396:	d0e5      	beq.n	801d364 <__ssvfiscanf_r+0xc2c>
 801d398:	e650      	b.n	801d03c <__ssvfiscanf_r+0x904>
 801d39a:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 801d39e:	f856 5b04 	ldr.w	r5, [r6], #4
 801d3a2:	d07b      	beq.n	801d49c <__ssvfiscanf_r+0xd64>
 801d3a4:	2d00      	cmp	r5, #0
 801d3a6:	f43f aa21 	beq.w	801c7ec <__ssvfiscanf_r+0xb4>
 801d3aa:	2020      	movs	r0, #32
 801d3ac:	f7fe fa48 	bl	801b840 <malloc>
 801d3b0:	4681      	mov	r9, r0
 801d3b2:	2800      	cmp	r0, #0
 801d3b4:	f43f aac7 	beq.w	801c946 <__ssvfiscanf_r+0x20e>
 801d3b8:	f8bb a006 	ldrh.w	sl, [fp, #6]
 801d3bc:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 801d3c0:	6028      	str	r0, [r5, #0]
 801d3c2:	45c2      	cmp	sl, r8
 801d3c4:	d313      	bcc.n	801d3ee <__ssvfiscanf_r+0xcb6>
 801d3c6:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 801d3ca:	4598      	cmp	r8, r3
 801d3cc:	f63f ab60 	bhi.w	801ca90 <__ssvfiscanf_r+0x358>
 801d3d0:	f108 0808 	add.w	r8, r8, #8
 801d3d4:	f8db 0000 	ldr.w	r0, [fp]
 801d3d8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801d3dc:	f001 f9f2 	bl	801e7c4 <realloc>
 801d3e0:	2800      	cmp	r0, #0
 801d3e2:	f43f ab55 	beq.w	801ca90 <__ssvfiscanf_r+0x358>
 801d3e6:	f8cb 0000 	str.w	r0, [fp]
 801d3ea:	f8ab 8004 	strh.w	r8, [fp, #4]
 801d3ee:	f8db 3000 	ldr.w	r3, [fp]
 801d3f2:	f10a 0201 	add.w	r2, sl, #1
 801d3f6:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 801d3fa:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d3fe:	46aa      	mov	sl, r5
 801d400:	464d      	mov	r5, r9
 801d402:	f04f 0920 	mov.w	r9, #32
 801d406:	46a8      	mov	r8, r5
 801d408:	6823      	ldr	r3, [r4, #0]
 801d40a:	4925      	ldr	r1, [pc, #148]	; (801d4a0 <__ssvfiscanf_r+0xd68>)
 801d40c:	781a      	ldrb	r2, [r3, #0]
 801d40e:	5c52      	ldrb	r2, [r2, r1]
 801d410:	0712      	lsls	r2, r2, #28
 801d412:	d42b      	bmi.n	801d46c <__ssvfiscanf_r+0xd34>
 801d414:	6862      	ldr	r2, [r4, #4]
 801d416:	3a01      	subs	r2, #1
 801d418:	6062      	str	r2, [r4, #4]
 801d41a:	1c5a      	adds	r2, r3, #1
 801d41c:	6022      	str	r2, [r4, #0]
 801d41e:	781b      	ldrb	r3, [r3, #0]
 801d420:	f805 3b01 	strb.w	r3, [r5], #1
 801d424:	f1ba 0f00 	cmp.w	sl, #0
 801d428:	d012      	beq.n	801d450 <__ssvfiscanf_r+0xd18>
 801d42a:	eba5 0308 	sub.w	r3, r5, r8
 801d42e:	454b      	cmp	r3, r9
 801d430:	d30e      	bcc.n	801d450 <__ssvfiscanf_r+0xd18>
 801d432:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d436:	4640      	mov	r0, r8
 801d438:	4649      	mov	r1, r9
 801d43a:	61bb      	str	r3, [r7, #24]
 801d43c:	f001 f9c2 	bl	801e7c4 <realloc>
 801d440:	4680      	mov	r8, r0
 801d442:	2800      	cmp	r0, #0
 801d444:	f43f aa7f 	beq.w	801c946 <__ssvfiscanf_r+0x20e>
 801d448:	69bb      	ldr	r3, [r7, #24]
 801d44a:	f8ca 0000 	str.w	r0, [sl]
 801d44e:	18c5      	adds	r5, r0, r3
 801d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d452:	3b01      	subs	r3, #1
 801d454:	62bb      	str	r3, [r7, #40]	; 0x28
 801d456:	d009      	beq.n	801d46c <__ssvfiscanf_r+0xd34>
 801d458:	6863      	ldr	r3, [r4, #4]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	dcd4      	bgt.n	801d408 <__ssvfiscanf_r+0xcd0>
 801d45e:	ee18 0a10 	vmov	r0, s16
 801d462:	4621      	mov	r1, r4
 801d464:	f7ff f913 	bl	801c68e <__ssrefill_r>
 801d468:	2800      	cmp	r0, #0
 801d46a:	d0cd      	beq.n	801d408 <__ssvfiscanf_r+0xcd0>
 801d46c:	2300      	movs	r3, #0
 801d46e:	702b      	strb	r3, [r5, #0]
 801d470:	eba5 0508 	sub.w	r5, r5, r8
 801d474:	f1ba 0f00 	cmp.w	sl, #0
 801d478:	d009      	beq.n	801d48e <__ssvfiscanf_r+0xd56>
 801d47a:	1c69      	adds	r1, r5, #1
 801d47c:	4589      	cmp	r9, r1
 801d47e:	d906      	bls.n	801d48e <__ssvfiscanf_r+0xd56>
 801d480:	f8da 0000 	ldr.w	r0, [sl]
 801d484:	f001 f99e 	bl	801e7c4 <realloc>
 801d488:	b108      	cbz	r0, 801d48e <__ssvfiscanf_r+0xd56>
 801d48a:	f8ca 0000 	str.w	r0, [sl]
 801d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d490:	442b      	add	r3, r5
 801d492:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d496:	3301      	adds	r3, #1
 801d498:	f7ff b96a 	b.w	801c770 <__ssvfiscanf_r+0x38>
 801d49c:	46ca      	mov	sl, r9
 801d49e:	e7b2      	b.n	801d406 <__ssvfiscanf_r+0xcce>
 801d4a0:	0802368d 	.word	0x0802368d
 801d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4a6:	3b01      	subs	r3, #1
 801d4a8:	2b26      	cmp	r3, #38	; 0x26
 801d4aa:	bf81      	itttt	hi
 801d4ac:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 801d4ae:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 801d4b2:	2327      	movhi	r3, #39	; 0x27
 801d4b4:	62bb      	strhi	r3, [r7, #40]	; 0x28
 801d4b6:	bf98      	it	ls
 801d4b8:	2500      	movls	r5, #0
 801d4ba:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 801d4be:	f04f 0a00 	mov.w	sl, #0
 801d4c2:	f107 0848 	add.w	r8, r7, #72	; 0x48
 801d4c6:	6822      	ldr	r2, [r4, #0]
 801d4c8:	7813      	ldrb	r3, [r2, #0]
 801d4ca:	2b39      	cmp	r3, #57	; 0x39
 801d4cc:	d80f      	bhi.n	801d4ee <__ssvfiscanf_r+0xdb6>
 801d4ce:	2b2a      	cmp	r3, #42	; 0x2a
 801d4d0:	d91a      	bls.n	801d508 <__ssvfiscanf_r+0xdd0>
 801d4d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801d4d6:	290e      	cmp	r1, #14
 801d4d8:	d816      	bhi.n	801d508 <__ssvfiscanf_r+0xdd0>
 801d4da:	e8df f001 	tbb	[pc, r1]
 801d4de:	1577      	.short	0x1577
 801d4e0:	41151577 	.word	0x41151577
 801d4e4:	67676767 	.word	0x67676767
 801d4e8:	6f676767 	.word	0x6f676767
 801d4ec:	6f          	.byte	0x6f
 801d4ed:	00          	.byte	0x00
 801d4ee:	2b66      	cmp	r3, #102	; 0x66
 801d4f0:	d834      	bhi.n	801d55c <__ssvfiscanf_r+0xe24>
 801d4f2:	2b60      	cmp	r3, #96	; 0x60
 801d4f4:	d803      	bhi.n	801d4fe <__ssvfiscanf_r+0xdc6>
 801d4f6:	2b46      	cmp	r3, #70	; 0x46
 801d4f8:	d804      	bhi.n	801d504 <__ssvfiscanf_r+0xdcc>
 801d4fa:	2b40      	cmp	r3, #64	; 0x40
 801d4fc:	d904      	bls.n	801d508 <__ssvfiscanf_r+0xdd0>
 801d4fe:	69f9      	ldr	r1, [r7, #28]
 801d500:	290a      	cmp	r1, #10
 801d502:	e061      	b.n	801d5c8 <__ssvfiscanf_r+0xe90>
 801d504:	2b58      	cmp	r3, #88	; 0x58
 801d506:	d067      	beq.n	801d5d8 <__ssvfiscanf_r+0xea0>
 801d508:	f419 7f80 	tst.w	r9, #256	; 0x100
 801d50c:	d012      	beq.n	801d534 <__ssvfiscanf_r+0xdfc>
 801d50e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d512:	4598      	cmp	r8, r3
 801d514:	d909      	bls.n	801d52a <__ssvfiscanf_r+0xdf2>
 801d516:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 801d51a:	ee18 0a10 	vmov	r0, s16
 801d51e:	4622      	mov	r2, r4
 801d520:	f7ff f878 	bl	801c614 <_sungetc_r>
 801d524:	f108 35ff 	add.w	r5, r8, #4294967295
 801d528:	46a8      	mov	r8, r5
 801d52a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d52e:	4598      	cmp	r8, r3
 801d530:	f43f a95c 	beq.w	801c7ec <__ssvfiscanf_r+0xb4>
 801d534:	f019 0210 	ands.w	r2, r9, #16
 801d538:	d16b      	bne.n	801d612 <__ssvfiscanf_r+0xeda>
 801d53a:	697d      	ldr	r5, [r7, #20]
 801d53c:	69fb      	ldr	r3, [r7, #28]
 801d53e:	f888 2000 	strb.w	r2, [r8]
 801d542:	ee18 0a10 	vmov	r0, s16
 801d546:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801d54a:	47a8      	blx	r5
 801d54c:	f019 0f20 	tst.w	r9, #32
 801d550:	f106 0504 	add.w	r5, r6, #4
 801d554:	d054      	beq.n	801d600 <__ssvfiscanf_r+0xec8>
 801d556:	6833      	ldr	r3, [r6, #0]
 801d558:	6018      	str	r0, [r3, #0]
 801d55a:	e056      	b.n	801d60a <__ssvfiscanf_r+0xed2>
 801d55c:	2b78      	cmp	r3, #120	; 0x78
 801d55e:	e7d2      	b.n	801d506 <__ssvfiscanf_r+0xdce>
 801d560:	f419 6f00 	tst.w	r9, #2048	; 0x800
 801d564:	d00a      	beq.n	801d57c <__ssvfiscanf_r+0xe44>
 801d566:	69f9      	ldr	r1, [r7, #28]
 801d568:	b919      	cbnz	r1, 801d572 <__ssvfiscanf_r+0xe3a>
 801d56a:	2108      	movs	r1, #8
 801d56c:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 801d570:	61f9      	str	r1, [r7, #28]
 801d572:	f419 6f80 	tst.w	r9, #1024	; 0x400
 801d576:	d004      	beq.n	801d582 <__ssvfiscanf_r+0xe4a>
 801d578:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 801d57c:	f808 3b01 	strb.w	r3, [r8], #1
 801d580:	e008      	b.n	801d594 <__ssvfiscanf_r+0xe5c>
 801d582:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 801d586:	b11d      	cbz	r5, 801d590 <__ssvfiscanf_r+0xe58>
 801d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d58a:	3301      	adds	r3, #1
 801d58c:	3d01      	subs	r5, #1
 801d58e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d590:	f10a 0a01 	add.w	sl, sl, #1
 801d594:	6863      	ldr	r3, [r4, #4]
 801d596:	3b01      	subs	r3, #1
 801d598:	2b00      	cmp	r3, #0
 801d59a:	6063      	str	r3, [r4, #4]
 801d59c:	dd28      	ble.n	801d5f0 <__ssvfiscanf_r+0xeb8>
 801d59e:	3201      	adds	r2, #1
 801d5a0:	6022      	str	r2, [r4, #0]
 801d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5a4:	3b01      	subs	r3, #1
 801d5a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801d5a8:	d18d      	bne.n	801d4c6 <__ssvfiscanf_r+0xd8e>
 801d5aa:	e7ad      	b.n	801d508 <__ssvfiscanf_r+0xdd0>
 801d5ac:	69f8      	ldr	r0, [r7, #28]
 801d5ae:	4932      	ldr	r1, [pc, #200]	; (801d678 <__ssvfiscanf_r+0xf40>)
 801d5b0:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 801d5b4:	61f9      	str	r1, [r7, #28]
 801d5b6:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 801d5ba:	e7df      	b.n	801d57c <__ssvfiscanf_r+0xe44>
 801d5bc:	69f8      	ldr	r0, [r7, #28]
 801d5be:	492e      	ldr	r1, [pc, #184]	; (801d678 <__ssvfiscanf_r+0xf40>)
 801d5c0:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 801d5c4:	61f9      	str	r1, [r7, #28]
 801d5c6:	2908      	cmp	r1, #8
 801d5c8:	dcf5      	bgt.n	801d5b6 <__ssvfiscanf_r+0xe7e>
 801d5ca:	e79d      	b.n	801d508 <__ssvfiscanf_r+0xdd0>
 801d5cc:	f019 0f80 	tst.w	r9, #128	; 0x80
 801d5d0:	d09a      	beq.n	801d508 <__ssvfiscanf_r+0xdd0>
 801d5d2:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 801d5d6:	e7d1      	b.n	801d57c <__ssvfiscanf_r+0xe44>
 801d5d8:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 801d5dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801d5e0:	d192      	bne.n	801d508 <__ssvfiscanf_r+0xdd0>
 801d5e2:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 801d5e6:	2110      	movs	r1, #16
 801d5e8:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 801d5ec:	61f9      	str	r1, [r7, #28]
 801d5ee:	e7c5      	b.n	801d57c <__ssvfiscanf_r+0xe44>
 801d5f0:	ee18 0a10 	vmov	r0, s16
 801d5f4:	4621      	mov	r1, r4
 801d5f6:	f7ff f84a 	bl	801c68e <__ssrefill_r>
 801d5fa:	2800      	cmp	r0, #0
 801d5fc:	d0d1      	beq.n	801d5a2 <__ssvfiscanf_r+0xe6a>
 801d5fe:	e783      	b.n	801d508 <__ssvfiscanf_r+0xdd0>
 801d600:	f019 0f08 	tst.w	r9, #8
 801d604:	d00e      	beq.n	801d624 <__ssvfiscanf_r+0xeec>
 801d606:	6833      	ldr	r3, [r6, #0]
 801d608:	7018      	strb	r0, [r3, #0]
 801d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d60c:	3301      	adds	r3, #1
 801d60e:	627b      	str	r3, [r7, #36]	; 0x24
 801d610:	462e      	mov	r6, r5
 801d612:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d616:	eba8 0803 	sub.w	r8, r8, r3
 801d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d61c:	44c2      	add	sl, r8
 801d61e:	4453      	add	r3, sl
 801d620:	f7ff b982 	b.w	801c928 <__ssvfiscanf_r+0x1f0>
 801d624:	f019 0f04 	tst.w	r9, #4
 801d628:	d002      	beq.n	801d630 <__ssvfiscanf_r+0xef8>
 801d62a:	6833      	ldr	r3, [r6, #0]
 801d62c:	8018      	strh	r0, [r3, #0]
 801d62e:	e7ec      	b.n	801d60a <__ssvfiscanf_r+0xed2>
 801d630:	f019 0201 	ands.w	r2, r9, #1
 801d634:	d18f      	bne.n	801d556 <__ssvfiscanf_r+0xe1e>
 801d636:	f019 0f02 	tst.w	r9, #2
 801d63a:	d08c      	beq.n	801d556 <__ssvfiscanf_r+0xe1e>
 801d63c:	4b0f      	ldr	r3, [pc, #60]	; (801d67c <__ssvfiscanf_r+0xf44>)
 801d63e:	6979      	ldr	r1, [r7, #20]
 801d640:	4299      	cmp	r1, r3
 801d642:	ee18 0a10 	vmov	r0, s16
 801d646:	69fb      	ldr	r3, [r7, #28]
 801d648:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801d64c:	d105      	bne.n	801d65a <__ssvfiscanf_r+0xf22>
 801d64e:	f001 fbd3 	bl	801edf8 <_strtoull_r>
 801d652:	6833      	ldr	r3, [r6, #0]
 801d654:	e9c3 0100 	strd	r0, r1, [r3]
 801d658:	e7d7      	b.n	801d60a <__ssvfiscanf_r+0xed2>
 801d65a:	f001 fb31 	bl	801ecc0 <_strtoll_r>
 801d65e:	e7f8      	b.n	801d652 <__ssvfiscanf_r+0xf1a>
 801d660:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801d664:	6818      	ldr	r0, [r3, #0]
 801d666:	f7fe f8f3 	bl	801b850 <free>
 801d66a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801d66e:	3401      	adds	r4, #1
 801d670:	601e      	str	r6, [r3, #0]
 801d672:	f7ff ba0f 	b.w	801ca94 <__ssvfiscanf_r+0x35c>
 801d676:	bf00      	nop
 801d678:	08023ac4 	.word	0x08023ac4
 801d67c:	0801c5fd 	.word	0x0801c5fd

0801d680 <sysconf>:
 801d680:	2808      	cmp	r0, #8
 801d682:	b508      	push	{r3, lr}
 801d684:	d006      	beq.n	801d694 <sysconf+0x14>
 801d686:	f7fd fdaf 	bl	801b1e8 <__errno>
 801d68a:	2316      	movs	r3, #22
 801d68c:	6003      	str	r3, [r0, #0]
 801d68e:	f04f 30ff 	mov.w	r0, #4294967295
 801d692:	bd08      	pop	{r3, pc}
 801d694:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801d698:	e7fb      	b.n	801d692 <sysconf+0x12>

0801d69a <__submore>:
 801d69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d69e:	460c      	mov	r4, r1
 801d6a0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801d6a2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801d6a6:	4299      	cmp	r1, r3
 801d6a8:	d11d      	bne.n	801d6e6 <__submore+0x4c>
 801d6aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d6ae:	f7fe f8d7 	bl	801b860 <_malloc_r>
 801d6b2:	b918      	cbnz	r0, 801d6bc <__submore+0x22>
 801d6b4:	f04f 30ff 	mov.w	r0, #4294967295
 801d6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d6c0:	6363      	str	r3, [r4, #52]	; 0x34
 801d6c2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801d6c6:	6320      	str	r0, [r4, #48]	; 0x30
 801d6c8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801d6cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 801d6d0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801d6d4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801d6d8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801d6dc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801d6e0:	6020      	str	r0, [r4, #0]
 801d6e2:	2000      	movs	r0, #0
 801d6e4:	e7e8      	b.n	801d6b8 <__submore+0x1e>
 801d6e6:	6b66      	ldr	r6, [r4, #52]	; 0x34
 801d6e8:	0077      	lsls	r7, r6, #1
 801d6ea:	463a      	mov	r2, r7
 801d6ec:	f001 f872 	bl	801e7d4 <_realloc_r>
 801d6f0:	4605      	mov	r5, r0
 801d6f2:	2800      	cmp	r0, #0
 801d6f4:	d0de      	beq.n	801d6b4 <__submore+0x1a>
 801d6f6:	eb00 0806 	add.w	r8, r0, r6
 801d6fa:	4601      	mov	r1, r0
 801d6fc:	4632      	mov	r2, r6
 801d6fe:	4640      	mov	r0, r8
 801d700:	f7fa fe66 	bl	80183d0 <memcpy>
 801d704:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 801d708:	f8c4 8000 	str.w	r8, [r4]
 801d70c:	e7e9      	b.n	801d6e2 <__submore+0x48>

0801d70e <__sprint_r>:
 801d70e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d712:	6893      	ldr	r3, [r2, #8]
 801d714:	4680      	mov	r8, r0
 801d716:	460f      	mov	r7, r1
 801d718:	4614      	mov	r4, r2
 801d71a:	b91b      	cbnz	r3, 801d724 <__sprint_r+0x16>
 801d71c:	6053      	str	r3, [r2, #4]
 801d71e:	4618      	mov	r0, r3
 801d720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d724:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801d726:	049d      	lsls	r5, r3, #18
 801d728:	d520      	bpl.n	801d76c <__sprint_r+0x5e>
 801d72a:	6815      	ldr	r5, [r2, #0]
 801d72c:	3508      	adds	r5, #8
 801d72e:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801d732:	f04f 0900 	mov.w	r9, #0
 801d736:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801d73a:	45ca      	cmp	sl, r9
 801d73c:	dc0b      	bgt.n	801d756 <__sprint_r+0x48>
 801d73e:	68a3      	ldr	r3, [r4, #8]
 801d740:	f026 0003 	bic.w	r0, r6, #3
 801d744:	1a18      	subs	r0, r3, r0
 801d746:	60a0      	str	r0, [r4, #8]
 801d748:	3508      	adds	r5, #8
 801d74a:	2800      	cmp	r0, #0
 801d74c:	d1ef      	bne.n	801d72e <__sprint_r+0x20>
 801d74e:	2300      	movs	r3, #0
 801d750:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801d754:	e7e4      	b.n	801d720 <__sprint_r+0x12>
 801d756:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801d75a:	463a      	mov	r2, r7
 801d75c:	4640      	mov	r0, r8
 801d75e:	f000 fe36 	bl	801e3ce <_fputwc_r>
 801d762:	1c43      	adds	r3, r0, #1
 801d764:	d0f3      	beq.n	801d74e <__sprint_r+0x40>
 801d766:	f109 0901 	add.w	r9, r9, #1
 801d76a:	e7e6      	b.n	801d73a <__sprint_r+0x2c>
 801d76c:	f000 fe6c 	bl	801e448 <__sfvwrite_r>
 801d770:	e7ed      	b.n	801d74e <__sprint_r+0x40>
	...

0801d774 <_vfiprintf_r>:
 801d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d778:	ed2d 8b02 	vpush	{d8}
 801d77c:	b0b9      	sub	sp, #228	; 0xe4
 801d77e:	460f      	mov	r7, r1
 801d780:	9201      	str	r2, [sp, #4]
 801d782:	461d      	mov	r5, r3
 801d784:	461c      	mov	r4, r3
 801d786:	4681      	mov	r9, r0
 801d788:	b118      	cbz	r0, 801d792 <_vfiprintf_r+0x1e>
 801d78a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801d78c:	b90b      	cbnz	r3, 801d792 <_vfiprintf_r+0x1e>
 801d78e:	f7fd fe2b 	bl	801b3e8 <__sinit>
 801d792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d794:	07d8      	lsls	r0, r3, #31
 801d796:	d405      	bmi.n	801d7a4 <_vfiprintf_r+0x30>
 801d798:	89bb      	ldrh	r3, [r7, #12]
 801d79a:	0599      	lsls	r1, r3, #22
 801d79c:	d402      	bmi.n	801d7a4 <_vfiprintf_r+0x30>
 801d79e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d7a0:	f7fd ffdf 	bl	801b762 <__retarget_lock_acquire_recursive>
 801d7a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d7a8:	049a      	lsls	r2, r3, #18
 801d7aa:	d406      	bmi.n	801d7ba <_vfiprintf_r+0x46>
 801d7ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d7b0:	81bb      	strh	r3, [r7, #12]
 801d7b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d7b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d7b8:	667b      	str	r3, [r7, #100]	; 0x64
 801d7ba:	89bb      	ldrh	r3, [r7, #12]
 801d7bc:	071e      	lsls	r6, r3, #28
 801d7be:	d501      	bpl.n	801d7c4 <_vfiprintf_r+0x50>
 801d7c0:	693b      	ldr	r3, [r7, #16]
 801d7c2:	b9bb      	cbnz	r3, 801d7f4 <_vfiprintf_r+0x80>
 801d7c4:	4639      	mov	r1, r7
 801d7c6:	4648      	mov	r0, r9
 801d7c8:	f7fc fe30 	bl	801a42c <__swsetup_r>
 801d7cc:	b190      	cbz	r0, 801d7f4 <_vfiprintf_r+0x80>
 801d7ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d7d0:	07d8      	lsls	r0, r3, #31
 801d7d2:	d508      	bpl.n	801d7e6 <_vfiprintf_r+0x72>
 801d7d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d7d8:	9302      	str	r3, [sp, #8]
 801d7da:	9802      	ldr	r0, [sp, #8]
 801d7dc:	b039      	add	sp, #228	; 0xe4
 801d7de:	ecbd 8b02 	vpop	{d8}
 801d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7e6:	89bb      	ldrh	r3, [r7, #12]
 801d7e8:	0599      	lsls	r1, r3, #22
 801d7ea:	d4f3      	bmi.n	801d7d4 <_vfiprintf_r+0x60>
 801d7ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d7ee:	f7fd ffba 	bl	801b766 <__retarget_lock_release_recursive>
 801d7f2:	e7ef      	b.n	801d7d4 <_vfiprintf_r+0x60>
 801d7f4:	89bb      	ldrh	r3, [r7, #12]
 801d7f6:	f003 021a 	and.w	r2, r3, #26
 801d7fa:	2a0a      	cmp	r2, #10
 801d7fc:	d113      	bne.n	801d826 <_vfiprintf_r+0xb2>
 801d7fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801d802:	2a00      	cmp	r2, #0
 801d804:	db0f      	blt.n	801d826 <_vfiprintf_r+0xb2>
 801d806:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d808:	07d2      	lsls	r2, r2, #31
 801d80a:	d404      	bmi.n	801d816 <_vfiprintf_r+0xa2>
 801d80c:	059e      	lsls	r6, r3, #22
 801d80e:	d402      	bmi.n	801d816 <_vfiprintf_r+0xa2>
 801d810:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d812:	f7fd ffa8 	bl	801b766 <__retarget_lock_release_recursive>
 801d816:	9a01      	ldr	r2, [sp, #4]
 801d818:	462b      	mov	r3, r5
 801d81a:	4639      	mov	r1, r7
 801d81c:	4648      	mov	r0, r9
 801d81e:	f000 fc31 	bl	801e084 <__sbprintf>
 801d822:	9002      	str	r0, [sp, #8]
 801d824:	e7d9      	b.n	801d7da <_vfiprintf_r+0x66>
 801d826:	2300      	movs	r3, #0
 801d828:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 801d82c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d830:	ae0f      	add	r6, sp, #60	; 0x3c
 801d832:	ee08 3a10 	vmov	s16, r3
 801d836:	960c      	str	r6, [sp, #48]	; 0x30
 801d838:	9307      	str	r3, [sp, #28]
 801d83a:	9302      	str	r3, [sp, #8]
 801d83c:	9b01      	ldr	r3, [sp, #4]
 801d83e:	461d      	mov	r5, r3
 801d840:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d844:	b10a      	cbz	r2, 801d84a <_vfiprintf_r+0xd6>
 801d846:	2a25      	cmp	r2, #37	; 0x25
 801d848:	d1f9      	bne.n	801d83e <_vfiprintf_r+0xca>
 801d84a:	9b01      	ldr	r3, [sp, #4]
 801d84c:	ebb5 0803 	subs.w	r8, r5, r3
 801d850:	d00d      	beq.n	801d86e <_vfiprintf_r+0xfa>
 801d852:	e9c6 3800 	strd	r3, r8, [r6]
 801d856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d858:	4443      	add	r3, r8
 801d85a:	930e      	str	r3, [sp, #56]	; 0x38
 801d85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d85e:	3301      	adds	r3, #1
 801d860:	2b07      	cmp	r3, #7
 801d862:	930d      	str	r3, [sp, #52]	; 0x34
 801d864:	dc75      	bgt.n	801d952 <_vfiprintf_r+0x1de>
 801d866:	3608      	adds	r6, #8
 801d868:	9b02      	ldr	r3, [sp, #8]
 801d86a:	4443      	add	r3, r8
 801d86c:	9302      	str	r3, [sp, #8]
 801d86e:	782b      	ldrb	r3, [r5, #0]
 801d870:	2b00      	cmp	r3, #0
 801d872:	f000 83c8 	beq.w	801e006 <_vfiprintf_r+0x892>
 801d876:	2300      	movs	r3, #0
 801d878:	f04f 31ff 	mov.w	r1, #4294967295
 801d87c:	1c6a      	adds	r2, r5, #1
 801d87e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801d882:	9100      	str	r1, [sp, #0]
 801d884:	9303      	str	r3, [sp, #12]
 801d886:	469a      	mov	sl, r3
 801d888:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d88c:	9201      	str	r2, [sp, #4]
 801d88e:	f1a3 0220 	sub.w	r2, r3, #32
 801d892:	2a5a      	cmp	r2, #90	; 0x5a
 801d894:	f200 8310 	bhi.w	801deb8 <_vfiprintf_r+0x744>
 801d898:	e8df f012 	tbh	[pc, r2, lsl #1]
 801d89c:	030e0099 	.word	0x030e0099
 801d8a0:	00a1030e 	.word	0x00a1030e
 801d8a4:	030e030e 	.word	0x030e030e
 801d8a8:	0080030e 	.word	0x0080030e
 801d8ac:	030e030e 	.word	0x030e030e
 801d8b0:	00ae00a4 	.word	0x00ae00a4
 801d8b4:	00ab030e 	.word	0x00ab030e
 801d8b8:	030e00b0 	.word	0x030e00b0
 801d8bc:	00ce00cb 	.word	0x00ce00cb
 801d8c0:	00ce00ce 	.word	0x00ce00ce
 801d8c4:	00ce00ce 	.word	0x00ce00ce
 801d8c8:	00ce00ce 	.word	0x00ce00ce
 801d8cc:	00ce00ce 	.word	0x00ce00ce
 801d8d0:	030e030e 	.word	0x030e030e
 801d8d4:	030e030e 	.word	0x030e030e
 801d8d8:	030e030e 	.word	0x030e030e
 801d8dc:	030e030e 	.word	0x030e030e
 801d8e0:	00f8030e 	.word	0x00f8030e
 801d8e4:	030e0106 	.word	0x030e0106
 801d8e8:	030e030e 	.word	0x030e030e
 801d8ec:	030e030e 	.word	0x030e030e
 801d8f0:	030e030e 	.word	0x030e030e
 801d8f4:	030e030e 	.word	0x030e030e
 801d8f8:	014d030e 	.word	0x014d030e
 801d8fc:	030e030e 	.word	0x030e030e
 801d900:	0192030e 	.word	0x0192030e
 801d904:	0270030e 	.word	0x0270030e
 801d908:	030e030e 	.word	0x030e030e
 801d90c:	030e028e 	.word	0x030e028e
 801d910:	030e030e 	.word	0x030e030e
 801d914:	030e030e 	.word	0x030e030e
 801d918:	030e030e 	.word	0x030e030e
 801d91c:	030e030e 	.word	0x030e030e
 801d920:	00f8030e 	.word	0x00f8030e
 801d924:	030e0108 	.word	0x030e0108
 801d928:	030e030e 	.word	0x030e030e
 801d92c:	010800de 	.word	0x010800de
 801d930:	030e00f2 	.word	0x030e00f2
 801d934:	030e00eb 	.word	0x030e00eb
 801d938:	014f0130 	.word	0x014f0130
 801d93c:	00f20182 	.word	0x00f20182
 801d940:	0192030e 	.word	0x0192030e
 801d944:	02720097 	.word	0x02720097
 801d948:	030e030e 	.word	0x030e030e
 801d94c:	030e0065 	.word	0x030e0065
 801d950:	0097      	.short	0x0097
 801d952:	aa0c      	add	r2, sp, #48	; 0x30
 801d954:	4639      	mov	r1, r7
 801d956:	4648      	mov	r0, r9
 801d958:	f7ff fed9 	bl	801d70e <__sprint_r>
 801d95c:	2800      	cmp	r0, #0
 801d95e:	f040 8331 	bne.w	801dfc4 <_vfiprintf_r+0x850>
 801d962:	ae0f      	add	r6, sp, #60	; 0x3c
 801d964:	e780      	b.n	801d868 <_vfiprintf_r+0xf4>
 801d966:	4a95      	ldr	r2, [pc, #596]	; (801dbbc <_vfiprintf_r+0x448>)
 801d968:	9205      	str	r2, [sp, #20]
 801d96a:	f01a 0f20 	tst.w	sl, #32
 801d96e:	f000 8225 	beq.w	801ddbc <_vfiprintf_r+0x648>
 801d972:	3407      	adds	r4, #7
 801d974:	f024 0b07 	bic.w	fp, r4, #7
 801d978:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801d97c:	f01a 0f01 	tst.w	sl, #1
 801d980:	d009      	beq.n	801d996 <_vfiprintf_r+0x222>
 801d982:	ea54 0205 	orrs.w	r2, r4, r5
 801d986:	bf1f      	itttt	ne
 801d988:	2230      	movne	r2, #48	; 0x30
 801d98a:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 801d98e:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 801d992:	f04a 0a02 	orrne.w	sl, sl, #2
 801d996:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801d99a:	e10d      	b.n	801dbb8 <_vfiprintf_r+0x444>
 801d99c:	4648      	mov	r0, r9
 801d99e:	f7fd fed9 	bl	801b754 <_localeconv_r>
 801d9a2:	6843      	ldr	r3, [r0, #4]
 801d9a4:	4618      	mov	r0, r3
 801d9a6:	ee08 3a10 	vmov	s16, r3
 801d9aa:	f7e2 fc31 	bl	8000210 <strlen>
 801d9ae:	9007      	str	r0, [sp, #28]
 801d9b0:	4648      	mov	r0, r9
 801d9b2:	f7fd fecf 	bl	801b754 <_localeconv_r>
 801d9b6:	6883      	ldr	r3, [r0, #8]
 801d9b8:	9306      	str	r3, [sp, #24]
 801d9ba:	9b07      	ldr	r3, [sp, #28]
 801d9bc:	b12b      	cbz	r3, 801d9ca <_vfiprintf_r+0x256>
 801d9be:	9b06      	ldr	r3, [sp, #24]
 801d9c0:	b11b      	cbz	r3, 801d9ca <_vfiprintf_r+0x256>
 801d9c2:	781b      	ldrb	r3, [r3, #0]
 801d9c4:	b10b      	cbz	r3, 801d9ca <_vfiprintf_r+0x256>
 801d9c6:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801d9ca:	9a01      	ldr	r2, [sp, #4]
 801d9cc:	e75c      	b.n	801d888 <_vfiprintf_r+0x114>
 801d9ce:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d1f9      	bne.n	801d9ca <_vfiprintf_r+0x256>
 801d9d6:	2320      	movs	r3, #32
 801d9d8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801d9dc:	e7f5      	b.n	801d9ca <_vfiprintf_r+0x256>
 801d9de:	f04a 0a01 	orr.w	sl, sl, #1
 801d9e2:	e7f2      	b.n	801d9ca <_vfiprintf_r+0x256>
 801d9e4:	f854 3b04 	ldr.w	r3, [r4], #4
 801d9e8:	9303      	str	r3, [sp, #12]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	daed      	bge.n	801d9ca <_vfiprintf_r+0x256>
 801d9ee:	425b      	negs	r3, r3
 801d9f0:	9303      	str	r3, [sp, #12]
 801d9f2:	f04a 0a04 	orr.w	sl, sl, #4
 801d9f6:	e7e8      	b.n	801d9ca <_vfiprintf_r+0x256>
 801d9f8:	232b      	movs	r3, #43	; 0x2b
 801d9fa:	e7ed      	b.n	801d9d8 <_vfiprintf_r+0x264>
 801d9fc:	9a01      	ldr	r2, [sp, #4]
 801d9fe:	f812 3b01 	ldrb.w	r3, [r2], #1
 801da02:	2b2a      	cmp	r3, #42	; 0x2a
 801da04:	d112      	bne.n	801da2c <_vfiprintf_r+0x2b8>
 801da06:	f854 0b04 	ldr.w	r0, [r4], #4
 801da0a:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801da0e:	e9cd 3200 	strd	r3, r2, [sp]
 801da12:	e7da      	b.n	801d9ca <_vfiprintf_r+0x256>
 801da14:	9b00      	ldr	r3, [sp, #0]
 801da16:	200a      	movs	r0, #10
 801da18:	fb00 1303 	mla	r3, r0, r3, r1
 801da1c:	9300      	str	r3, [sp, #0]
 801da1e:	f812 3b01 	ldrb.w	r3, [r2], #1
 801da22:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801da26:	2909      	cmp	r1, #9
 801da28:	d9f4      	bls.n	801da14 <_vfiprintf_r+0x2a0>
 801da2a:	e72f      	b.n	801d88c <_vfiprintf_r+0x118>
 801da2c:	2100      	movs	r1, #0
 801da2e:	9100      	str	r1, [sp, #0]
 801da30:	e7f7      	b.n	801da22 <_vfiprintf_r+0x2ae>
 801da32:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801da36:	e7c8      	b.n	801d9ca <_vfiprintf_r+0x256>
 801da38:	2100      	movs	r1, #0
 801da3a:	9a01      	ldr	r2, [sp, #4]
 801da3c:	9103      	str	r1, [sp, #12]
 801da3e:	9903      	ldr	r1, [sp, #12]
 801da40:	3b30      	subs	r3, #48	; 0x30
 801da42:	200a      	movs	r0, #10
 801da44:	fb00 3301 	mla	r3, r0, r1, r3
 801da48:	9303      	str	r3, [sp, #12]
 801da4a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801da4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801da52:	2909      	cmp	r1, #9
 801da54:	d9f3      	bls.n	801da3e <_vfiprintf_r+0x2ca>
 801da56:	e719      	b.n	801d88c <_vfiprintf_r+0x118>
 801da58:	9b01      	ldr	r3, [sp, #4]
 801da5a:	781b      	ldrb	r3, [r3, #0]
 801da5c:	2b68      	cmp	r3, #104	; 0x68
 801da5e:	bf01      	itttt	eq
 801da60:	9b01      	ldreq	r3, [sp, #4]
 801da62:	3301      	addeq	r3, #1
 801da64:	9301      	streq	r3, [sp, #4]
 801da66:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801da6a:	bf18      	it	ne
 801da6c:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801da70:	e7ab      	b.n	801d9ca <_vfiprintf_r+0x256>
 801da72:	9b01      	ldr	r3, [sp, #4]
 801da74:	781b      	ldrb	r3, [r3, #0]
 801da76:	2b6c      	cmp	r3, #108	; 0x6c
 801da78:	d105      	bne.n	801da86 <_vfiprintf_r+0x312>
 801da7a:	9b01      	ldr	r3, [sp, #4]
 801da7c:	3301      	adds	r3, #1
 801da7e:	9301      	str	r3, [sp, #4]
 801da80:	f04a 0a20 	orr.w	sl, sl, #32
 801da84:	e7a1      	b.n	801d9ca <_vfiprintf_r+0x256>
 801da86:	f04a 0a10 	orr.w	sl, sl, #16
 801da8a:	e79e      	b.n	801d9ca <_vfiprintf_r+0x256>
 801da8c:	46a3      	mov	fp, r4
 801da8e:	2100      	movs	r1, #0
 801da90:	f85b 3b04 	ldr.w	r3, [fp], #4
 801da94:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801da98:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801da9c:	2301      	movs	r3, #1
 801da9e:	9300      	str	r3, [sp, #0]
 801daa0:	460d      	mov	r5, r1
 801daa2:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 801daa6:	e0a0      	b.n	801dbea <_vfiprintf_r+0x476>
 801daa8:	f04a 0a10 	orr.w	sl, sl, #16
 801daac:	f01a 0f20 	tst.w	sl, #32
 801dab0:	d011      	beq.n	801dad6 <_vfiprintf_r+0x362>
 801dab2:	3407      	adds	r4, #7
 801dab4:	f024 0b07 	bic.w	fp, r4, #7
 801dab8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801dabc:	2c00      	cmp	r4, #0
 801dabe:	f175 0300 	sbcs.w	r3, r5, #0
 801dac2:	da06      	bge.n	801dad2 <_vfiprintf_r+0x35e>
 801dac4:	4264      	negs	r4, r4
 801dac6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801daca:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801dace:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801dad2:	2301      	movs	r3, #1
 801dad4:	e03f      	b.n	801db56 <_vfiprintf_r+0x3e2>
 801dad6:	f01a 0f10 	tst.w	sl, #16
 801dada:	f104 0b04 	add.w	fp, r4, #4
 801dade:	d002      	beq.n	801dae6 <_vfiprintf_r+0x372>
 801dae0:	6824      	ldr	r4, [r4, #0]
 801dae2:	17e5      	asrs	r5, r4, #31
 801dae4:	e7ea      	b.n	801dabc <_vfiprintf_r+0x348>
 801dae6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801daea:	6824      	ldr	r4, [r4, #0]
 801daec:	d001      	beq.n	801daf2 <_vfiprintf_r+0x37e>
 801daee:	b224      	sxth	r4, r4
 801daf0:	e7f7      	b.n	801dae2 <_vfiprintf_r+0x36e>
 801daf2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801daf6:	bf18      	it	ne
 801daf8:	b264      	sxtbne	r4, r4
 801dafa:	e7f2      	b.n	801dae2 <_vfiprintf_r+0x36e>
 801dafc:	f01a 0f20 	tst.w	sl, #32
 801db00:	f854 3b04 	ldr.w	r3, [r4], #4
 801db04:	d005      	beq.n	801db12 <_vfiprintf_r+0x39e>
 801db06:	9a02      	ldr	r2, [sp, #8]
 801db08:	4610      	mov	r0, r2
 801db0a:	17d1      	asrs	r1, r2, #31
 801db0c:	e9c3 0100 	strd	r0, r1, [r3]
 801db10:	e694      	b.n	801d83c <_vfiprintf_r+0xc8>
 801db12:	f01a 0f10 	tst.w	sl, #16
 801db16:	d002      	beq.n	801db1e <_vfiprintf_r+0x3aa>
 801db18:	9a02      	ldr	r2, [sp, #8]
 801db1a:	601a      	str	r2, [r3, #0]
 801db1c:	e68e      	b.n	801d83c <_vfiprintf_r+0xc8>
 801db1e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801db22:	d002      	beq.n	801db2a <_vfiprintf_r+0x3b6>
 801db24:	9a02      	ldr	r2, [sp, #8]
 801db26:	801a      	strh	r2, [r3, #0]
 801db28:	e688      	b.n	801d83c <_vfiprintf_r+0xc8>
 801db2a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801db2e:	d0f3      	beq.n	801db18 <_vfiprintf_r+0x3a4>
 801db30:	9a02      	ldr	r2, [sp, #8]
 801db32:	701a      	strb	r2, [r3, #0]
 801db34:	e682      	b.n	801d83c <_vfiprintf_r+0xc8>
 801db36:	f04a 0a10 	orr.w	sl, sl, #16
 801db3a:	f01a 0f20 	tst.w	sl, #32
 801db3e:	d01d      	beq.n	801db7c <_vfiprintf_r+0x408>
 801db40:	3407      	adds	r4, #7
 801db42:	f024 0b07 	bic.w	fp, r4, #7
 801db46:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801db4a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801db4e:	2300      	movs	r3, #0
 801db50:	2200      	movs	r2, #0
 801db52:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 801db56:	9a00      	ldr	r2, [sp, #0]
 801db58:	3201      	adds	r2, #1
 801db5a:	f000 8261 	beq.w	801e020 <_vfiprintf_r+0x8ac>
 801db5e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 801db62:	9204      	str	r2, [sp, #16]
 801db64:	ea54 0205 	orrs.w	r2, r4, r5
 801db68:	f040 8260 	bne.w	801e02c <_vfiprintf_r+0x8b8>
 801db6c:	9a00      	ldr	r2, [sp, #0]
 801db6e:	2a00      	cmp	r2, #0
 801db70:	f000 8197 	beq.w	801dea2 <_vfiprintf_r+0x72e>
 801db74:	2b01      	cmp	r3, #1
 801db76:	f040 825c 	bne.w	801e032 <_vfiprintf_r+0x8be>
 801db7a:	e135      	b.n	801dde8 <_vfiprintf_r+0x674>
 801db7c:	f01a 0f10 	tst.w	sl, #16
 801db80:	f104 0b04 	add.w	fp, r4, #4
 801db84:	d001      	beq.n	801db8a <_vfiprintf_r+0x416>
 801db86:	6824      	ldr	r4, [r4, #0]
 801db88:	e003      	b.n	801db92 <_vfiprintf_r+0x41e>
 801db8a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801db8e:	d002      	beq.n	801db96 <_vfiprintf_r+0x422>
 801db90:	8824      	ldrh	r4, [r4, #0]
 801db92:	2500      	movs	r5, #0
 801db94:	e7d9      	b.n	801db4a <_vfiprintf_r+0x3d6>
 801db96:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801db9a:	d0f4      	beq.n	801db86 <_vfiprintf_r+0x412>
 801db9c:	7824      	ldrb	r4, [r4, #0]
 801db9e:	e7f8      	b.n	801db92 <_vfiprintf_r+0x41e>
 801dba0:	46a3      	mov	fp, r4
 801dba2:	f647 0330 	movw	r3, #30768	; 0x7830
 801dba6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801dbaa:	f85b 4b04 	ldr.w	r4, [fp], #4
 801dbae:	4b03      	ldr	r3, [pc, #12]	; (801dbbc <_vfiprintf_r+0x448>)
 801dbb0:	9305      	str	r3, [sp, #20]
 801dbb2:	2500      	movs	r5, #0
 801dbb4:	f04a 0a02 	orr.w	sl, sl, #2
 801dbb8:	2302      	movs	r3, #2
 801dbba:	e7c9      	b.n	801db50 <_vfiprintf_r+0x3dc>
 801dbbc:	08023840 	.word	0x08023840
 801dbc0:	9b00      	ldr	r3, [sp, #0]
 801dbc2:	46a3      	mov	fp, r4
 801dbc4:	2500      	movs	r5, #0
 801dbc6:	1c5c      	adds	r4, r3, #1
 801dbc8:	f85b 8b04 	ldr.w	r8, [fp], #4
 801dbcc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801dbd0:	f000 80cf 	beq.w	801dd72 <_vfiprintf_r+0x5fe>
 801dbd4:	461a      	mov	r2, r3
 801dbd6:	4629      	mov	r1, r5
 801dbd8:	4640      	mov	r0, r8
 801dbda:	f7e2 fb21 	bl	8000220 <memchr>
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	f000 8174 	beq.w	801decc <_vfiprintf_r+0x758>
 801dbe4:	eba0 0308 	sub.w	r3, r0, r8
 801dbe8:	9300      	str	r3, [sp, #0]
 801dbea:	9b00      	ldr	r3, [sp, #0]
 801dbec:	42ab      	cmp	r3, r5
 801dbee:	bfb8      	it	lt
 801dbf0:	462b      	movlt	r3, r5
 801dbf2:	9304      	str	r3, [sp, #16]
 801dbf4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801dbf8:	b113      	cbz	r3, 801dc00 <_vfiprintf_r+0x48c>
 801dbfa:	9b04      	ldr	r3, [sp, #16]
 801dbfc:	3301      	adds	r3, #1
 801dbfe:	9304      	str	r3, [sp, #16]
 801dc00:	f01a 0302 	ands.w	r3, sl, #2
 801dc04:	9308      	str	r3, [sp, #32]
 801dc06:	bf1e      	ittt	ne
 801dc08:	9b04      	ldrne	r3, [sp, #16]
 801dc0a:	3302      	addne	r3, #2
 801dc0c:	9304      	strne	r3, [sp, #16]
 801dc0e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801dc12:	9309      	str	r3, [sp, #36]	; 0x24
 801dc14:	d11f      	bne.n	801dc56 <_vfiprintf_r+0x4e2>
 801dc16:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801dc1a:	1a9c      	subs	r4, r3, r2
 801dc1c:	2c00      	cmp	r4, #0
 801dc1e:	dd1a      	ble.n	801dc56 <_vfiprintf_r+0x4e2>
 801dc20:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801dc24:	48b9      	ldr	r0, [pc, #740]	; (801df0c <_vfiprintf_r+0x798>)
 801dc26:	6030      	str	r0, [r6, #0]
 801dc28:	2c10      	cmp	r4, #16
 801dc2a:	f103 0301 	add.w	r3, r3, #1
 801dc2e:	f106 0108 	add.w	r1, r6, #8
 801dc32:	f300 814d 	bgt.w	801ded0 <_vfiprintf_r+0x75c>
 801dc36:	6074      	str	r4, [r6, #4]
 801dc38:	2b07      	cmp	r3, #7
 801dc3a:	4414      	add	r4, r2
 801dc3c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801dc40:	f340 8158 	ble.w	801def4 <_vfiprintf_r+0x780>
 801dc44:	aa0c      	add	r2, sp, #48	; 0x30
 801dc46:	4639      	mov	r1, r7
 801dc48:	4648      	mov	r0, r9
 801dc4a:	f7ff fd60 	bl	801d70e <__sprint_r>
 801dc4e:	2800      	cmp	r0, #0
 801dc50:	f040 81b8 	bne.w	801dfc4 <_vfiprintf_r+0x850>
 801dc54:	ae0f      	add	r6, sp, #60	; 0x3c
 801dc56:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801dc5a:	b173      	cbz	r3, 801dc7a <_vfiprintf_r+0x506>
 801dc5c:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 801dc60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc62:	6032      	str	r2, [r6, #0]
 801dc64:	2201      	movs	r2, #1
 801dc66:	6072      	str	r2, [r6, #4]
 801dc68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dc6a:	3301      	adds	r3, #1
 801dc6c:	3201      	adds	r2, #1
 801dc6e:	2b07      	cmp	r3, #7
 801dc70:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801dc74:	f300 8140 	bgt.w	801def8 <_vfiprintf_r+0x784>
 801dc78:	3608      	adds	r6, #8
 801dc7a:	9b08      	ldr	r3, [sp, #32]
 801dc7c:	b16b      	cbz	r3, 801dc9a <_vfiprintf_r+0x526>
 801dc7e:	aa0b      	add	r2, sp, #44	; 0x2c
 801dc80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc82:	6032      	str	r2, [r6, #0]
 801dc84:	2202      	movs	r2, #2
 801dc86:	6072      	str	r2, [r6, #4]
 801dc88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dc8a:	3301      	adds	r3, #1
 801dc8c:	3202      	adds	r2, #2
 801dc8e:	2b07      	cmp	r3, #7
 801dc90:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801dc94:	f300 8140 	bgt.w	801df18 <_vfiprintf_r+0x7a4>
 801dc98:	3608      	adds	r6, #8
 801dc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc9c:	2b80      	cmp	r3, #128	; 0x80
 801dc9e:	d11f      	bne.n	801dce0 <_vfiprintf_r+0x56c>
 801dca0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801dca4:	1a9c      	subs	r4, r3, r2
 801dca6:	2c00      	cmp	r4, #0
 801dca8:	dd1a      	ble.n	801dce0 <_vfiprintf_r+0x56c>
 801dcaa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801dcae:	4898      	ldr	r0, [pc, #608]	; (801df10 <_vfiprintf_r+0x79c>)
 801dcb0:	6030      	str	r0, [r6, #0]
 801dcb2:	2c10      	cmp	r4, #16
 801dcb4:	f103 0301 	add.w	r3, r3, #1
 801dcb8:	f106 0108 	add.w	r1, r6, #8
 801dcbc:	f300 8135 	bgt.w	801df2a <_vfiprintf_r+0x7b6>
 801dcc0:	6074      	str	r4, [r6, #4]
 801dcc2:	2b07      	cmp	r3, #7
 801dcc4:	4414      	add	r4, r2
 801dcc6:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801dcca:	f340 8140 	ble.w	801df4e <_vfiprintf_r+0x7da>
 801dcce:	aa0c      	add	r2, sp, #48	; 0x30
 801dcd0:	4639      	mov	r1, r7
 801dcd2:	4648      	mov	r0, r9
 801dcd4:	f7ff fd1b 	bl	801d70e <__sprint_r>
 801dcd8:	2800      	cmp	r0, #0
 801dcda:	f040 8173 	bne.w	801dfc4 <_vfiprintf_r+0x850>
 801dcde:	ae0f      	add	r6, sp, #60	; 0x3c
 801dce0:	9b00      	ldr	r3, [sp, #0]
 801dce2:	1aec      	subs	r4, r5, r3
 801dce4:	2c00      	cmp	r4, #0
 801dce6:	dd1a      	ble.n	801dd1e <_vfiprintf_r+0x5aa>
 801dce8:	4d89      	ldr	r5, [pc, #548]	; (801df10 <_vfiprintf_r+0x79c>)
 801dcea:	6035      	str	r5, [r6, #0]
 801dcec:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 801dcf0:	2c10      	cmp	r4, #16
 801dcf2:	f103 0301 	add.w	r3, r3, #1
 801dcf6:	f106 0208 	add.w	r2, r6, #8
 801dcfa:	f300 812a 	bgt.w	801df52 <_vfiprintf_r+0x7de>
 801dcfe:	6074      	str	r4, [r6, #4]
 801dd00:	2b07      	cmp	r3, #7
 801dd02:	440c      	add	r4, r1
 801dd04:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801dd08:	f340 8134 	ble.w	801df74 <_vfiprintf_r+0x800>
 801dd0c:	aa0c      	add	r2, sp, #48	; 0x30
 801dd0e:	4639      	mov	r1, r7
 801dd10:	4648      	mov	r0, r9
 801dd12:	f7ff fcfc 	bl	801d70e <__sprint_r>
 801dd16:	2800      	cmp	r0, #0
 801dd18:	f040 8154 	bne.w	801dfc4 <_vfiprintf_r+0x850>
 801dd1c:	ae0f      	add	r6, sp, #60	; 0x3c
 801dd1e:	9b00      	ldr	r3, [sp, #0]
 801dd20:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dd22:	6073      	str	r3, [r6, #4]
 801dd24:	4418      	add	r0, r3
 801dd26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd28:	f8c6 8000 	str.w	r8, [r6]
 801dd2c:	3301      	adds	r3, #1
 801dd2e:	2b07      	cmp	r3, #7
 801dd30:	900e      	str	r0, [sp, #56]	; 0x38
 801dd32:	930d      	str	r3, [sp, #52]	; 0x34
 801dd34:	f300 8120 	bgt.w	801df78 <_vfiprintf_r+0x804>
 801dd38:	f106 0308 	add.w	r3, r6, #8
 801dd3c:	f01a 0f04 	tst.w	sl, #4
 801dd40:	f040 8122 	bne.w	801df88 <_vfiprintf_r+0x814>
 801dd44:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801dd48:	9904      	ldr	r1, [sp, #16]
 801dd4a:	428a      	cmp	r2, r1
 801dd4c:	bfac      	ite	ge
 801dd4e:	189b      	addge	r3, r3, r2
 801dd50:	185b      	addlt	r3, r3, r1
 801dd52:	9302      	str	r3, [sp, #8]
 801dd54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd56:	b13b      	cbz	r3, 801dd68 <_vfiprintf_r+0x5f4>
 801dd58:	aa0c      	add	r2, sp, #48	; 0x30
 801dd5a:	4639      	mov	r1, r7
 801dd5c:	4648      	mov	r0, r9
 801dd5e:	f7ff fcd6 	bl	801d70e <__sprint_r>
 801dd62:	2800      	cmp	r0, #0
 801dd64:	f040 812e 	bne.w	801dfc4 <_vfiprintf_r+0x850>
 801dd68:	2300      	movs	r3, #0
 801dd6a:	930d      	str	r3, [sp, #52]	; 0x34
 801dd6c:	465c      	mov	r4, fp
 801dd6e:	ae0f      	add	r6, sp, #60	; 0x3c
 801dd70:	e564      	b.n	801d83c <_vfiprintf_r+0xc8>
 801dd72:	4640      	mov	r0, r8
 801dd74:	f7e2 fa4c 	bl	8000210 <strlen>
 801dd78:	9000      	str	r0, [sp, #0]
 801dd7a:	e736      	b.n	801dbea <_vfiprintf_r+0x476>
 801dd7c:	f04a 0a10 	orr.w	sl, sl, #16
 801dd80:	f01a 0f20 	tst.w	sl, #32
 801dd84:	d006      	beq.n	801dd94 <_vfiprintf_r+0x620>
 801dd86:	3407      	adds	r4, #7
 801dd88:	f024 0b07 	bic.w	fp, r4, #7
 801dd8c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801dd90:	2301      	movs	r3, #1
 801dd92:	e6dd      	b.n	801db50 <_vfiprintf_r+0x3dc>
 801dd94:	f01a 0f10 	tst.w	sl, #16
 801dd98:	f104 0b04 	add.w	fp, r4, #4
 801dd9c:	d001      	beq.n	801dda2 <_vfiprintf_r+0x62e>
 801dd9e:	6824      	ldr	r4, [r4, #0]
 801dda0:	e003      	b.n	801ddaa <_vfiprintf_r+0x636>
 801dda2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801dda6:	d002      	beq.n	801ddae <_vfiprintf_r+0x63a>
 801dda8:	8824      	ldrh	r4, [r4, #0]
 801ddaa:	2500      	movs	r5, #0
 801ddac:	e7f0      	b.n	801dd90 <_vfiprintf_r+0x61c>
 801ddae:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801ddb2:	d0f4      	beq.n	801dd9e <_vfiprintf_r+0x62a>
 801ddb4:	7824      	ldrb	r4, [r4, #0]
 801ddb6:	e7f8      	b.n	801ddaa <_vfiprintf_r+0x636>
 801ddb8:	4a56      	ldr	r2, [pc, #344]	; (801df14 <_vfiprintf_r+0x7a0>)
 801ddba:	e5d5      	b.n	801d968 <_vfiprintf_r+0x1f4>
 801ddbc:	f01a 0f10 	tst.w	sl, #16
 801ddc0:	f104 0b04 	add.w	fp, r4, #4
 801ddc4:	d001      	beq.n	801ddca <_vfiprintf_r+0x656>
 801ddc6:	6824      	ldr	r4, [r4, #0]
 801ddc8:	e003      	b.n	801ddd2 <_vfiprintf_r+0x65e>
 801ddca:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801ddce:	d002      	beq.n	801ddd6 <_vfiprintf_r+0x662>
 801ddd0:	8824      	ldrh	r4, [r4, #0]
 801ddd2:	2500      	movs	r5, #0
 801ddd4:	e5d2      	b.n	801d97c <_vfiprintf_r+0x208>
 801ddd6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801ddda:	d0f4      	beq.n	801ddc6 <_vfiprintf_r+0x652>
 801dddc:	7824      	ldrb	r4, [r4, #0]
 801ddde:	e7f8      	b.n	801ddd2 <_vfiprintf_r+0x65e>
 801dde0:	2d00      	cmp	r5, #0
 801dde2:	bf08      	it	eq
 801dde4:	2c0a      	cmpeq	r4, #10
 801dde6:	d205      	bcs.n	801ddf4 <_vfiprintf_r+0x680>
 801dde8:	3430      	adds	r4, #48	; 0x30
 801ddea:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 801ddee:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 801ddf2:	e13c      	b.n	801e06e <_vfiprintf_r+0x8fa>
 801ddf4:	ab38      	add	r3, sp, #224	; 0xe0
 801ddf6:	9308      	str	r3, [sp, #32]
 801ddf8:	9b04      	ldr	r3, [sp, #16]
 801ddfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ddfe:	f04f 0a00 	mov.w	sl, #0
 801de02:	9309      	str	r3, [sp, #36]	; 0x24
 801de04:	9b08      	ldr	r3, [sp, #32]
 801de06:	220a      	movs	r2, #10
 801de08:	f103 38ff 	add.w	r8, r3, #4294967295
 801de0c:	4620      	mov	r0, r4
 801de0e:	2300      	movs	r3, #0
 801de10:	4629      	mov	r1, r5
 801de12:	f7e2 fef3 	bl	8000bfc <__aeabi_uldivmod>
 801de16:	9b08      	ldr	r3, [sp, #32]
 801de18:	3230      	adds	r2, #48	; 0x30
 801de1a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801de1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de20:	f10a 0a01 	add.w	sl, sl, #1
 801de24:	b1db      	cbz	r3, 801de5e <_vfiprintf_r+0x6ea>
 801de26:	9b06      	ldr	r3, [sp, #24]
 801de28:	781b      	ldrb	r3, [r3, #0]
 801de2a:	4553      	cmp	r3, sl
 801de2c:	d117      	bne.n	801de5e <_vfiprintf_r+0x6ea>
 801de2e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801de32:	d014      	beq.n	801de5e <_vfiprintf_r+0x6ea>
 801de34:	2d00      	cmp	r5, #0
 801de36:	bf08      	it	eq
 801de38:	2c0a      	cmpeq	r4, #10
 801de3a:	d310      	bcc.n	801de5e <_vfiprintf_r+0x6ea>
 801de3c:	9b07      	ldr	r3, [sp, #28]
 801de3e:	eba8 0803 	sub.w	r8, r8, r3
 801de42:	461a      	mov	r2, r3
 801de44:	ee18 1a10 	vmov	r1, s16
 801de48:	4640      	mov	r0, r8
 801de4a:	f7fe fb48 	bl	801c4de <strncpy>
 801de4e:	9b06      	ldr	r3, [sp, #24]
 801de50:	785b      	ldrb	r3, [r3, #1]
 801de52:	b1a3      	cbz	r3, 801de7e <_vfiprintf_r+0x70a>
 801de54:	9b06      	ldr	r3, [sp, #24]
 801de56:	3301      	adds	r3, #1
 801de58:	9306      	str	r3, [sp, #24]
 801de5a:	f04f 0a00 	mov.w	sl, #0
 801de5e:	220a      	movs	r2, #10
 801de60:	2300      	movs	r3, #0
 801de62:	4620      	mov	r0, r4
 801de64:	4629      	mov	r1, r5
 801de66:	f7e2 fec9 	bl	8000bfc <__aeabi_uldivmod>
 801de6a:	2d00      	cmp	r5, #0
 801de6c:	bf08      	it	eq
 801de6e:	2c0a      	cmpeq	r4, #10
 801de70:	f0c0 80fd 	bcc.w	801e06e <_vfiprintf_r+0x8fa>
 801de74:	4604      	mov	r4, r0
 801de76:	460d      	mov	r5, r1
 801de78:	f8cd 8020 	str.w	r8, [sp, #32]
 801de7c:	e7c2      	b.n	801de04 <_vfiprintf_r+0x690>
 801de7e:	469a      	mov	sl, r3
 801de80:	e7ed      	b.n	801de5e <_vfiprintf_r+0x6ea>
 801de82:	9a05      	ldr	r2, [sp, #20]
 801de84:	f004 030f 	and.w	r3, r4, #15
 801de88:	5cd3      	ldrb	r3, [r2, r3]
 801de8a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801de8e:	0923      	lsrs	r3, r4, #4
 801de90:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 801de94:	092a      	lsrs	r2, r5, #4
 801de96:	461c      	mov	r4, r3
 801de98:	4615      	mov	r5, r2
 801de9a:	ea54 0305 	orrs.w	r3, r4, r5
 801de9e:	d1f0      	bne.n	801de82 <_vfiprintf_r+0x70e>
 801dea0:	e0e5      	b.n	801e06e <_vfiprintf_r+0x8fa>
 801dea2:	b933      	cbnz	r3, 801deb2 <_vfiprintf_r+0x73e>
 801dea4:	f01a 0f01 	tst.w	sl, #1
 801dea8:	d003      	beq.n	801deb2 <_vfiprintf_r+0x73e>
 801deaa:	2330      	movs	r3, #48	; 0x30
 801deac:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 801deb0:	e79d      	b.n	801ddee <_vfiprintf_r+0x67a>
 801deb2:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801deb6:	e0da      	b.n	801e06e <_vfiprintf_r+0x8fa>
 801deb8:	2b00      	cmp	r3, #0
 801deba:	f000 80a4 	beq.w	801e006 <_vfiprintf_r+0x892>
 801debe:	2100      	movs	r1, #0
 801dec0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801dec4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801dec8:	46a3      	mov	fp, r4
 801deca:	e5e7      	b.n	801da9c <_vfiprintf_r+0x328>
 801decc:	4605      	mov	r5, r0
 801dece:	e68c      	b.n	801dbea <_vfiprintf_r+0x476>
 801ded0:	2010      	movs	r0, #16
 801ded2:	4402      	add	r2, r0
 801ded4:	2b07      	cmp	r3, #7
 801ded6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801deda:	6070      	str	r0, [r6, #4]
 801dedc:	dd07      	ble.n	801deee <_vfiprintf_r+0x77a>
 801dede:	aa0c      	add	r2, sp, #48	; 0x30
 801dee0:	4639      	mov	r1, r7
 801dee2:	4648      	mov	r0, r9
 801dee4:	f7ff fc13 	bl	801d70e <__sprint_r>
 801dee8:	2800      	cmp	r0, #0
 801deea:	d16b      	bne.n	801dfc4 <_vfiprintf_r+0x850>
 801deec:	a90f      	add	r1, sp, #60	; 0x3c
 801deee:	3c10      	subs	r4, #16
 801def0:	460e      	mov	r6, r1
 801def2:	e695      	b.n	801dc20 <_vfiprintf_r+0x4ac>
 801def4:	460e      	mov	r6, r1
 801def6:	e6ae      	b.n	801dc56 <_vfiprintf_r+0x4e2>
 801def8:	aa0c      	add	r2, sp, #48	; 0x30
 801defa:	4639      	mov	r1, r7
 801defc:	4648      	mov	r0, r9
 801defe:	f7ff fc06 	bl	801d70e <__sprint_r>
 801df02:	2800      	cmp	r0, #0
 801df04:	d15e      	bne.n	801dfc4 <_vfiprintf_r+0x850>
 801df06:	ae0f      	add	r6, sp, #60	; 0x3c
 801df08:	e6b7      	b.n	801dc7a <_vfiprintf_r+0x506>
 801df0a:	bf00      	nop
 801df0c:	08023ae6 	.word	0x08023ae6
 801df10:	08023af6 	.word	0x08023af6
 801df14:	08023851 	.word	0x08023851
 801df18:	aa0c      	add	r2, sp, #48	; 0x30
 801df1a:	4639      	mov	r1, r7
 801df1c:	4648      	mov	r0, r9
 801df1e:	f7ff fbf6 	bl	801d70e <__sprint_r>
 801df22:	2800      	cmp	r0, #0
 801df24:	d14e      	bne.n	801dfc4 <_vfiprintf_r+0x850>
 801df26:	ae0f      	add	r6, sp, #60	; 0x3c
 801df28:	e6b7      	b.n	801dc9a <_vfiprintf_r+0x526>
 801df2a:	2010      	movs	r0, #16
 801df2c:	4402      	add	r2, r0
 801df2e:	2b07      	cmp	r3, #7
 801df30:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801df34:	6070      	str	r0, [r6, #4]
 801df36:	dd07      	ble.n	801df48 <_vfiprintf_r+0x7d4>
 801df38:	aa0c      	add	r2, sp, #48	; 0x30
 801df3a:	4639      	mov	r1, r7
 801df3c:	4648      	mov	r0, r9
 801df3e:	f7ff fbe6 	bl	801d70e <__sprint_r>
 801df42:	2800      	cmp	r0, #0
 801df44:	d13e      	bne.n	801dfc4 <_vfiprintf_r+0x850>
 801df46:	a90f      	add	r1, sp, #60	; 0x3c
 801df48:	3c10      	subs	r4, #16
 801df4a:	460e      	mov	r6, r1
 801df4c:	e6ad      	b.n	801dcaa <_vfiprintf_r+0x536>
 801df4e:	460e      	mov	r6, r1
 801df50:	e6c6      	b.n	801dce0 <_vfiprintf_r+0x56c>
 801df52:	2010      	movs	r0, #16
 801df54:	4401      	add	r1, r0
 801df56:	2b07      	cmp	r3, #7
 801df58:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801df5c:	6070      	str	r0, [r6, #4]
 801df5e:	dd06      	ble.n	801df6e <_vfiprintf_r+0x7fa>
 801df60:	aa0c      	add	r2, sp, #48	; 0x30
 801df62:	4639      	mov	r1, r7
 801df64:	4648      	mov	r0, r9
 801df66:	f7ff fbd2 	bl	801d70e <__sprint_r>
 801df6a:	bb58      	cbnz	r0, 801dfc4 <_vfiprintf_r+0x850>
 801df6c:	aa0f      	add	r2, sp, #60	; 0x3c
 801df6e:	3c10      	subs	r4, #16
 801df70:	4616      	mov	r6, r2
 801df72:	e6ba      	b.n	801dcea <_vfiprintf_r+0x576>
 801df74:	4616      	mov	r6, r2
 801df76:	e6d2      	b.n	801dd1e <_vfiprintf_r+0x5aa>
 801df78:	aa0c      	add	r2, sp, #48	; 0x30
 801df7a:	4639      	mov	r1, r7
 801df7c:	4648      	mov	r0, r9
 801df7e:	f7ff fbc6 	bl	801d70e <__sprint_r>
 801df82:	b9f8      	cbnz	r0, 801dfc4 <_vfiprintf_r+0x850>
 801df84:	ab0f      	add	r3, sp, #60	; 0x3c
 801df86:	e6d9      	b.n	801dd3c <_vfiprintf_r+0x5c8>
 801df88:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 801df8c:	1a54      	subs	r4, r2, r1
 801df8e:	2c00      	cmp	r4, #0
 801df90:	f77f aed8 	ble.w	801dd44 <_vfiprintf_r+0x5d0>
 801df94:	4d3a      	ldr	r5, [pc, #232]	; (801e080 <_vfiprintf_r+0x90c>)
 801df96:	2610      	movs	r6, #16
 801df98:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801df9c:	2c10      	cmp	r4, #16
 801df9e:	f102 0201 	add.w	r2, r2, #1
 801dfa2:	601d      	str	r5, [r3, #0]
 801dfa4:	dc1d      	bgt.n	801dfe2 <_vfiprintf_r+0x86e>
 801dfa6:	605c      	str	r4, [r3, #4]
 801dfa8:	2a07      	cmp	r2, #7
 801dfaa:	440c      	add	r4, r1
 801dfac:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 801dfb0:	f77f aec8 	ble.w	801dd44 <_vfiprintf_r+0x5d0>
 801dfb4:	aa0c      	add	r2, sp, #48	; 0x30
 801dfb6:	4639      	mov	r1, r7
 801dfb8:	4648      	mov	r0, r9
 801dfba:	f7ff fba8 	bl	801d70e <__sprint_r>
 801dfbe:	2800      	cmp	r0, #0
 801dfc0:	f43f aec0 	beq.w	801dd44 <_vfiprintf_r+0x5d0>
 801dfc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801dfc6:	07d9      	lsls	r1, r3, #31
 801dfc8:	d405      	bmi.n	801dfd6 <_vfiprintf_r+0x862>
 801dfca:	89bb      	ldrh	r3, [r7, #12]
 801dfcc:	059a      	lsls	r2, r3, #22
 801dfce:	d402      	bmi.n	801dfd6 <_vfiprintf_r+0x862>
 801dfd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801dfd2:	f7fd fbc8 	bl	801b766 <__retarget_lock_release_recursive>
 801dfd6:	89bb      	ldrh	r3, [r7, #12]
 801dfd8:	065b      	lsls	r3, r3, #25
 801dfda:	f57f abfe 	bpl.w	801d7da <_vfiprintf_r+0x66>
 801dfde:	f7ff bbf9 	b.w	801d7d4 <_vfiprintf_r+0x60>
 801dfe2:	3110      	adds	r1, #16
 801dfe4:	2a07      	cmp	r2, #7
 801dfe6:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 801dfea:	605e      	str	r6, [r3, #4]
 801dfec:	dc02      	bgt.n	801dff4 <_vfiprintf_r+0x880>
 801dfee:	3308      	adds	r3, #8
 801dff0:	3c10      	subs	r4, #16
 801dff2:	e7d1      	b.n	801df98 <_vfiprintf_r+0x824>
 801dff4:	aa0c      	add	r2, sp, #48	; 0x30
 801dff6:	4639      	mov	r1, r7
 801dff8:	4648      	mov	r0, r9
 801dffa:	f7ff fb88 	bl	801d70e <__sprint_r>
 801dffe:	2800      	cmp	r0, #0
 801e000:	d1e0      	bne.n	801dfc4 <_vfiprintf_r+0x850>
 801e002:	ab0f      	add	r3, sp, #60	; 0x3c
 801e004:	e7f4      	b.n	801dff0 <_vfiprintf_r+0x87c>
 801e006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e008:	b913      	cbnz	r3, 801e010 <_vfiprintf_r+0x89c>
 801e00a:	2300      	movs	r3, #0
 801e00c:	930d      	str	r3, [sp, #52]	; 0x34
 801e00e:	e7d9      	b.n	801dfc4 <_vfiprintf_r+0x850>
 801e010:	aa0c      	add	r2, sp, #48	; 0x30
 801e012:	4639      	mov	r1, r7
 801e014:	4648      	mov	r0, r9
 801e016:	f7ff fb7a 	bl	801d70e <__sprint_r>
 801e01a:	2800      	cmp	r0, #0
 801e01c:	d0f5      	beq.n	801e00a <_vfiprintf_r+0x896>
 801e01e:	e7d1      	b.n	801dfc4 <_vfiprintf_r+0x850>
 801e020:	ea54 0205 	orrs.w	r2, r4, r5
 801e024:	f8cd a010 	str.w	sl, [sp, #16]
 801e028:	f43f ada4 	beq.w	801db74 <_vfiprintf_r+0x400>
 801e02c:	2b01      	cmp	r3, #1
 801e02e:	f43f aed7 	beq.w	801dde0 <_vfiprintf_r+0x66c>
 801e032:	2b02      	cmp	r3, #2
 801e034:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801e038:	f43f af23 	beq.w	801de82 <_vfiprintf_r+0x70e>
 801e03c:	08e2      	lsrs	r2, r4, #3
 801e03e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 801e042:	08e8      	lsrs	r0, r5, #3
 801e044:	f004 0307 	and.w	r3, r4, #7
 801e048:	4605      	mov	r5, r0
 801e04a:	4614      	mov	r4, r2
 801e04c:	3330      	adds	r3, #48	; 0x30
 801e04e:	ea54 0205 	orrs.w	r2, r4, r5
 801e052:	4641      	mov	r1, r8
 801e054:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801e058:	d1f0      	bne.n	801e03c <_vfiprintf_r+0x8c8>
 801e05a:	9a04      	ldr	r2, [sp, #16]
 801e05c:	07d0      	lsls	r0, r2, #31
 801e05e:	d506      	bpl.n	801e06e <_vfiprintf_r+0x8fa>
 801e060:	2b30      	cmp	r3, #48	; 0x30
 801e062:	d004      	beq.n	801e06e <_vfiprintf_r+0x8fa>
 801e064:	2330      	movs	r3, #48	; 0x30
 801e066:	f808 3c01 	strb.w	r3, [r8, #-1]
 801e06a:	f1a1 0802 	sub.w	r8, r1, #2
 801e06e:	ab38      	add	r3, sp, #224	; 0xe0
 801e070:	eba3 0308 	sub.w	r3, r3, r8
 801e074:	9d00      	ldr	r5, [sp, #0]
 801e076:	f8dd a010 	ldr.w	sl, [sp, #16]
 801e07a:	9300      	str	r3, [sp, #0]
 801e07c:	e5b5      	b.n	801dbea <_vfiprintf_r+0x476>
 801e07e:	bf00      	nop
 801e080:	08023ae6 	.word	0x08023ae6

0801e084 <__sbprintf>:
 801e084:	b570      	push	{r4, r5, r6, lr}
 801e086:	460c      	mov	r4, r1
 801e088:	8989      	ldrh	r1, [r1, #12]
 801e08a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801e08e:	f021 0102 	bic.w	r1, r1, #2
 801e092:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e096:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801e098:	911b      	str	r1, [sp, #108]	; 0x6c
 801e09a:	89e1      	ldrh	r1, [r4, #14]
 801e09c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e0a0:	69e1      	ldr	r1, [r4, #28]
 801e0a2:	9109      	str	r1, [sp, #36]	; 0x24
 801e0a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e0a6:	910b      	str	r1, [sp, #44]	; 0x2c
 801e0a8:	a91c      	add	r1, sp, #112	; 0x70
 801e0aa:	9102      	str	r1, [sp, #8]
 801e0ac:	9106      	str	r1, [sp, #24]
 801e0ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e0b2:	4606      	mov	r6, r0
 801e0b4:	9104      	str	r1, [sp, #16]
 801e0b6:	9107      	str	r1, [sp, #28]
 801e0b8:	a818      	add	r0, sp, #96	; 0x60
 801e0ba:	2100      	movs	r1, #0
 801e0bc:	e9cd 3200 	strd	r3, r2, [sp]
 801e0c0:	9108      	str	r1, [sp, #32]
 801e0c2:	f7fd fb4b 	bl	801b75c <__retarget_lock_init_recursive>
 801e0c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e0ca:	a902      	add	r1, sp, #8
 801e0cc:	4630      	mov	r0, r6
 801e0ce:	f7ff fb51 	bl	801d774 <_vfiprintf_r>
 801e0d2:	1e05      	subs	r5, r0, #0
 801e0d4:	db07      	blt.n	801e0e6 <__sbprintf+0x62>
 801e0d6:	a902      	add	r1, sp, #8
 801e0d8:	4630      	mov	r0, r6
 801e0da:	f7fd f919 	bl	801b310 <_fflush_r>
 801e0de:	2800      	cmp	r0, #0
 801e0e0:	bf18      	it	ne
 801e0e2:	f04f 35ff 	movne.w	r5, #4294967295
 801e0e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801e0ea:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e0ec:	065b      	lsls	r3, r3, #25
 801e0ee:	bf42      	ittt	mi
 801e0f0:	89a3      	ldrhmi	r3, [r4, #12]
 801e0f2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801e0f6:	81a3      	strhmi	r3, [r4, #12]
 801e0f8:	f7fd fb31 	bl	801b75e <__retarget_lock_close_recursive>
 801e0fc:	4628      	mov	r0, r5
 801e0fe:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801e102:	bd70      	pop	{r4, r5, r6, pc}

0801e104 <_write_r>:
 801e104:	b538      	push	{r3, r4, r5, lr}
 801e106:	4d07      	ldr	r5, [pc, #28]	; (801e124 <_write_r+0x20>)
 801e108:	4604      	mov	r4, r0
 801e10a:	4608      	mov	r0, r1
 801e10c:	4611      	mov	r1, r2
 801e10e:	2200      	movs	r2, #0
 801e110:	602a      	str	r2, [r5, #0]
 801e112:	461a      	mov	r2, r3
 801e114:	f7e2 ff2f 	bl	8000f76 <_write>
 801e118:	1c43      	adds	r3, r0, #1
 801e11a:	d102      	bne.n	801e122 <_write_r+0x1e>
 801e11c:	682b      	ldr	r3, [r5, #0]
 801e11e:	b103      	cbz	r3, 801e122 <_write_r+0x1e>
 801e120:	6023      	str	r3, [r4, #0]
 801e122:	bd38      	pop	{r3, r4, r5, pc}
 801e124:	2000b6b0 	.word	0x2000b6b0

0801e128 <__register_exitproc>:
 801e128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e12c:	4d1c      	ldr	r5, [pc, #112]	; (801e1a0 <__register_exitproc+0x78>)
 801e12e:	4606      	mov	r6, r0
 801e130:	6828      	ldr	r0, [r5, #0]
 801e132:	4698      	mov	r8, r3
 801e134:	460f      	mov	r7, r1
 801e136:	4691      	mov	r9, r2
 801e138:	f7fd fb13 	bl	801b762 <__retarget_lock_acquire_recursive>
 801e13c:	4b19      	ldr	r3, [pc, #100]	; (801e1a4 <__register_exitproc+0x7c>)
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801e144:	4628      	mov	r0, r5
 801e146:	b91c      	cbnz	r4, 801e150 <__register_exitproc+0x28>
 801e148:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801e14c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801e150:	6865      	ldr	r5, [r4, #4]
 801e152:	6800      	ldr	r0, [r0, #0]
 801e154:	2d1f      	cmp	r5, #31
 801e156:	dd05      	ble.n	801e164 <__register_exitproc+0x3c>
 801e158:	f7fd fb05 	bl	801b766 <__retarget_lock_release_recursive>
 801e15c:	f04f 30ff 	mov.w	r0, #4294967295
 801e160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e164:	b19e      	cbz	r6, 801e18e <__register_exitproc+0x66>
 801e166:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801e16a:	2201      	movs	r2, #1
 801e16c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801e170:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801e174:	40aa      	lsls	r2, r5
 801e176:	4313      	orrs	r3, r2
 801e178:	2e02      	cmp	r6, #2
 801e17a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801e17e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801e182:	bf02      	ittt	eq
 801e184:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801e188:	431a      	orreq	r2, r3
 801e18a:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 801e18e:	1c6b      	adds	r3, r5, #1
 801e190:	3502      	adds	r5, #2
 801e192:	6063      	str	r3, [r4, #4]
 801e194:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801e198:	f7fd fae5 	bl	801b766 <__retarget_lock_release_recursive>
 801e19c:	2000      	movs	r0, #0
 801e19e:	e7df      	b.n	801e160 <__register_exitproc+0x38>
 801e1a0:	20000470 	.word	0x20000470
 801e1a4:	08023790 	.word	0x08023790

0801e1a8 <__assert_func>:
 801e1a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e1aa:	4614      	mov	r4, r2
 801e1ac:	461a      	mov	r2, r3
 801e1ae:	4b09      	ldr	r3, [pc, #36]	; (801e1d4 <__assert_func+0x2c>)
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	4605      	mov	r5, r0
 801e1b4:	68d8      	ldr	r0, [r3, #12]
 801e1b6:	b14c      	cbz	r4, 801e1cc <__assert_func+0x24>
 801e1b8:	4b07      	ldr	r3, [pc, #28]	; (801e1d8 <__assert_func+0x30>)
 801e1ba:	9100      	str	r1, [sp, #0]
 801e1bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e1c0:	4906      	ldr	r1, [pc, #24]	; (801e1dc <__assert_func+0x34>)
 801e1c2:	462b      	mov	r3, r5
 801e1c4:	f000 f8b0 	bl	801e328 <fiprintf>
 801e1c8:	f000 fe85 	bl	801eed6 <abort>
 801e1cc:	4b04      	ldr	r3, [pc, #16]	; (801e1e0 <__assert_func+0x38>)
 801e1ce:	461c      	mov	r4, r3
 801e1d0:	e7f3      	b.n	801e1ba <__assert_func+0x12>
 801e1d2:	bf00      	nop
 801e1d4:	20000038 	.word	0x20000038
 801e1d8:	08023b06 	.word	0x08023b06
 801e1dc:	08023b13 	.word	0x08023b13
 801e1e0:	08023b41 	.word	0x08023b41

0801e1e4 <_calloc_r>:
 801e1e4:	b510      	push	{r4, lr}
 801e1e6:	4351      	muls	r1, r2
 801e1e8:	f7fd fb3a 	bl	801b860 <_malloc_r>
 801e1ec:	4604      	mov	r4, r0
 801e1ee:	b198      	cbz	r0, 801e218 <_calloc_r+0x34>
 801e1f0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e1f4:	f022 0203 	bic.w	r2, r2, #3
 801e1f8:	3a04      	subs	r2, #4
 801e1fa:	2a24      	cmp	r2, #36	; 0x24
 801e1fc:	d81b      	bhi.n	801e236 <_calloc_r+0x52>
 801e1fe:	2a13      	cmp	r2, #19
 801e200:	d917      	bls.n	801e232 <_calloc_r+0x4e>
 801e202:	2100      	movs	r1, #0
 801e204:	2a1b      	cmp	r2, #27
 801e206:	e9c0 1100 	strd	r1, r1, [r0]
 801e20a:	d807      	bhi.n	801e21c <_calloc_r+0x38>
 801e20c:	f100 0308 	add.w	r3, r0, #8
 801e210:	2200      	movs	r2, #0
 801e212:	e9c3 2200 	strd	r2, r2, [r3]
 801e216:	609a      	str	r2, [r3, #8]
 801e218:	4620      	mov	r0, r4
 801e21a:	bd10      	pop	{r4, pc}
 801e21c:	2a24      	cmp	r2, #36	; 0x24
 801e21e:	e9c0 1102 	strd	r1, r1, [r0, #8]
 801e222:	bf11      	iteee	ne
 801e224:	f100 0310 	addne.w	r3, r0, #16
 801e228:	6101      	streq	r1, [r0, #16]
 801e22a:	f100 0318 	addeq.w	r3, r0, #24
 801e22e:	6141      	streq	r1, [r0, #20]
 801e230:	e7ee      	b.n	801e210 <_calloc_r+0x2c>
 801e232:	4603      	mov	r3, r0
 801e234:	e7ec      	b.n	801e210 <_calloc_r+0x2c>
 801e236:	2100      	movs	r1, #0
 801e238:	f7fa f8f2 	bl	8018420 <memset>
 801e23c:	e7ec      	b.n	801e218 <_calloc_r+0x34>
	...

0801e240 <_close_r>:
 801e240:	b538      	push	{r3, r4, r5, lr}
 801e242:	4d06      	ldr	r5, [pc, #24]	; (801e25c <_close_r+0x1c>)
 801e244:	2300      	movs	r3, #0
 801e246:	4604      	mov	r4, r0
 801e248:	4608      	mov	r0, r1
 801e24a:	602b      	str	r3, [r5, #0]
 801e24c:	f7e4 fc57 	bl	8002afe <_close>
 801e250:	1c43      	adds	r3, r0, #1
 801e252:	d102      	bne.n	801e25a <_close_r+0x1a>
 801e254:	682b      	ldr	r3, [r5, #0]
 801e256:	b103      	cbz	r3, 801e25a <_close_r+0x1a>
 801e258:	6023      	str	r3, [r4, #0]
 801e25a:	bd38      	pop	{r3, r4, r5, pc}
 801e25c:	2000b6b0 	.word	0x2000b6b0

0801e260 <__env_lock>:
 801e260:	4801      	ldr	r0, [pc, #4]	; (801e268 <__env_lock+0x8>)
 801e262:	f7fd ba7e 	b.w	801b762 <__retarget_lock_acquire_recursive>
 801e266:	bf00      	nop
 801e268:	2000b6ba 	.word	0x2000b6ba

0801e26c <__env_unlock>:
 801e26c:	4801      	ldr	r0, [pc, #4]	; (801e274 <__env_unlock+0x8>)
 801e26e:	f7fd ba7a 	b.w	801b766 <__retarget_lock_release_recursive>
 801e272:	bf00      	nop
 801e274:	2000b6ba 	.word	0x2000b6ba

0801e278 <_fclose_r>:
 801e278:	b570      	push	{r4, r5, r6, lr}
 801e27a:	4606      	mov	r6, r0
 801e27c:	460c      	mov	r4, r1
 801e27e:	b911      	cbnz	r1, 801e286 <_fclose_r+0xe>
 801e280:	2500      	movs	r5, #0
 801e282:	4628      	mov	r0, r5
 801e284:	bd70      	pop	{r4, r5, r6, pc}
 801e286:	b118      	cbz	r0, 801e290 <_fclose_r+0x18>
 801e288:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e28a:	b90b      	cbnz	r3, 801e290 <_fclose_r+0x18>
 801e28c:	f7fd f8ac 	bl	801b3e8 <__sinit>
 801e290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e292:	07d8      	lsls	r0, r3, #31
 801e294:	d405      	bmi.n	801e2a2 <_fclose_r+0x2a>
 801e296:	89a3      	ldrh	r3, [r4, #12]
 801e298:	0599      	lsls	r1, r3, #22
 801e29a:	d402      	bmi.n	801e2a2 <_fclose_r+0x2a>
 801e29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e29e:	f7fd fa60 	bl	801b762 <__retarget_lock_acquire_recursive>
 801e2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2a6:	b93b      	cbnz	r3, 801e2b8 <_fclose_r+0x40>
 801e2a8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801e2aa:	f015 0501 	ands.w	r5, r5, #1
 801e2ae:	d1e7      	bne.n	801e280 <_fclose_r+0x8>
 801e2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2b2:	f7fd fa58 	bl	801b766 <__retarget_lock_release_recursive>
 801e2b6:	e7e4      	b.n	801e282 <_fclose_r+0xa>
 801e2b8:	4621      	mov	r1, r4
 801e2ba:	4630      	mov	r0, r6
 801e2bc:	f7fc ff9a 	bl	801b1f4 <__sflush_r>
 801e2c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e2c2:	4605      	mov	r5, r0
 801e2c4:	b133      	cbz	r3, 801e2d4 <_fclose_r+0x5c>
 801e2c6:	69e1      	ldr	r1, [r4, #28]
 801e2c8:	4630      	mov	r0, r6
 801e2ca:	4798      	blx	r3
 801e2cc:	2800      	cmp	r0, #0
 801e2ce:	bfb8      	it	lt
 801e2d0:	f04f 35ff 	movlt.w	r5, #4294967295
 801e2d4:	89a3      	ldrh	r3, [r4, #12]
 801e2d6:	061a      	lsls	r2, r3, #24
 801e2d8:	d503      	bpl.n	801e2e2 <_fclose_r+0x6a>
 801e2da:	6921      	ldr	r1, [r4, #16]
 801e2dc:	4630      	mov	r0, r6
 801e2de:	f7fd f913 	bl	801b508 <_free_r>
 801e2e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e2e4:	b141      	cbz	r1, 801e2f8 <_fclose_r+0x80>
 801e2e6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801e2ea:	4299      	cmp	r1, r3
 801e2ec:	d002      	beq.n	801e2f4 <_fclose_r+0x7c>
 801e2ee:	4630      	mov	r0, r6
 801e2f0:	f7fd f90a 	bl	801b508 <_free_r>
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	6323      	str	r3, [r4, #48]	; 0x30
 801e2f8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801e2fa:	b121      	cbz	r1, 801e306 <_fclose_r+0x8e>
 801e2fc:	4630      	mov	r0, r6
 801e2fe:	f7fd f903 	bl	801b508 <_free_r>
 801e302:	2300      	movs	r3, #0
 801e304:	6463      	str	r3, [r4, #68]	; 0x44
 801e306:	f7fd f857 	bl	801b3b8 <__sfp_lock_acquire>
 801e30a:	2300      	movs	r3, #0
 801e30c:	81a3      	strh	r3, [r4, #12]
 801e30e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e310:	07db      	lsls	r3, r3, #31
 801e312:	d402      	bmi.n	801e31a <_fclose_r+0xa2>
 801e314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e316:	f7fd fa26 	bl	801b766 <__retarget_lock_release_recursive>
 801e31a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e31c:	f7fd fa1f 	bl	801b75e <__retarget_lock_close_recursive>
 801e320:	f7fd f850 	bl	801b3c4 <__sfp_lock_release>
 801e324:	e7ad      	b.n	801e282 <_fclose_r+0xa>
	...

0801e328 <fiprintf>:
 801e328:	b40e      	push	{r1, r2, r3}
 801e32a:	b503      	push	{r0, r1, lr}
 801e32c:	4601      	mov	r1, r0
 801e32e:	ab03      	add	r3, sp, #12
 801e330:	4805      	ldr	r0, [pc, #20]	; (801e348 <fiprintf+0x20>)
 801e332:	f853 2b04 	ldr.w	r2, [r3], #4
 801e336:	6800      	ldr	r0, [r0, #0]
 801e338:	9301      	str	r3, [sp, #4]
 801e33a:	f7ff fa1b 	bl	801d774 <_vfiprintf_r>
 801e33e:	b002      	add	sp, #8
 801e340:	f85d eb04 	ldr.w	lr, [sp], #4
 801e344:	b003      	add	sp, #12
 801e346:	4770      	bx	lr
 801e348:	20000038 	.word	0x20000038

0801e34c <__fputwc>:
 801e34c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e350:	4680      	mov	r8, r0
 801e352:	460e      	mov	r6, r1
 801e354:	4615      	mov	r5, r2
 801e356:	f000 f9df 	bl	801e718 <__locale_mb_cur_max>
 801e35a:	2801      	cmp	r0, #1
 801e35c:	d11c      	bne.n	801e398 <__fputwc+0x4c>
 801e35e:	1e73      	subs	r3, r6, #1
 801e360:	2bfe      	cmp	r3, #254	; 0xfe
 801e362:	d819      	bhi.n	801e398 <__fputwc+0x4c>
 801e364:	f88d 6004 	strb.w	r6, [sp, #4]
 801e368:	4604      	mov	r4, r0
 801e36a:	2700      	movs	r7, #0
 801e36c:	f10d 0904 	add.w	r9, sp, #4
 801e370:	42a7      	cmp	r7, r4
 801e372:	d020      	beq.n	801e3b6 <__fputwc+0x6a>
 801e374:	68ab      	ldr	r3, [r5, #8]
 801e376:	f817 1009 	ldrb.w	r1, [r7, r9]
 801e37a:	3b01      	subs	r3, #1
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	60ab      	str	r3, [r5, #8]
 801e380:	da04      	bge.n	801e38c <__fputwc+0x40>
 801e382:	69aa      	ldr	r2, [r5, #24]
 801e384:	4293      	cmp	r3, r2
 801e386:	db1a      	blt.n	801e3be <__fputwc+0x72>
 801e388:	290a      	cmp	r1, #10
 801e38a:	d018      	beq.n	801e3be <__fputwc+0x72>
 801e38c:	682b      	ldr	r3, [r5, #0]
 801e38e:	1c5a      	adds	r2, r3, #1
 801e390:	602a      	str	r2, [r5, #0]
 801e392:	7019      	strb	r1, [r3, #0]
 801e394:	3701      	adds	r7, #1
 801e396:	e7eb      	b.n	801e370 <__fputwc+0x24>
 801e398:	4632      	mov	r2, r6
 801e39a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801e39e:	a901      	add	r1, sp, #4
 801e3a0:	4640      	mov	r0, r8
 801e3a2:	f000 fd75 	bl	801ee90 <_wcrtomb_r>
 801e3a6:	1c42      	adds	r2, r0, #1
 801e3a8:	4604      	mov	r4, r0
 801e3aa:	d1de      	bne.n	801e36a <__fputwc+0x1e>
 801e3ac:	89ab      	ldrh	r3, [r5, #12]
 801e3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3b2:	81ab      	strh	r3, [r5, #12]
 801e3b4:	4606      	mov	r6, r0
 801e3b6:	4630      	mov	r0, r6
 801e3b8:	b003      	add	sp, #12
 801e3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3be:	462a      	mov	r2, r5
 801e3c0:	4640      	mov	r0, r8
 801e3c2:	f000 fd1b 	bl	801edfc <__swbuf_r>
 801e3c6:	1c43      	adds	r3, r0, #1
 801e3c8:	d1e4      	bne.n	801e394 <__fputwc+0x48>
 801e3ca:	4606      	mov	r6, r0
 801e3cc:	e7f3      	b.n	801e3b6 <__fputwc+0x6a>

0801e3ce <_fputwc_r>:
 801e3ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801e3d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e3d2:	4614      	mov	r4, r2
 801e3d4:	07da      	lsls	r2, r3, #31
 801e3d6:	4605      	mov	r5, r0
 801e3d8:	d407      	bmi.n	801e3ea <_fputwc_r+0x1c>
 801e3da:	89a3      	ldrh	r3, [r4, #12]
 801e3dc:	059b      	lsls	r3, r3, #22
 801e3de:	d404      	bmi.n	801e3ea <_fputwc_r+0x1c>
 801e3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3e2:	9101      	str	r1, [sp, #4]
 801e3e4:	f7fd f9bd 	bl	801b762 <__retarget_lock_acquire_recursive>
 801e3e8:	9901      	ldr	r1, [sp, #4]
 801e3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e3ee:	0498      	lsls	r0, r3, #18
 801e3f0:	d406      	bmi.n	801e400 <_fputwc_r+0x32>
 801e3f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e3f6:	81a3      	strh	r3, [r4, #12]
 801e3f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e3fe:	6663      	str	r3, [r4, #100]	; 0x64
 801e400:	4622      	mov	r2, r4
 801e402:	4628      	mov	r0, r5
 801e404:	f7ff ffa2 	bl	801e34c <__fputwc>
 801e408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e40a:	07da      	lsls	r2, r3, #31
 801e40c:	4605      	mov	r5, r0
 801e40e:	d405      	bmi.n	801e41c <_fputwc_r+0x4e>
 801e410:	89a3      	ldrh	r3, [r4, #12]
 801e412:	059b      	lsls	r3, r3, #22
 801e414:	d402      	bmi.n	801e41c <_fputwc_r+0x4e>
 801e416:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e418:	f7fd f9a5 	bl	801b766 <__retarget_lock_release_recursive>
 801e41c:	4628      	mov	r0, r5
 801e41e:	b003      	add	sp, #12
 801e420:	bd30      	pop	{r4, r5, pc}
	...

0801e424 <_fstat_r>:
 801e424:	b538      	push	{r3, r4, r5, lr}
 801e426:	4d07      	ldr	r5, [pc, #28]	; (801e444 <_fstat_r+0x20>)
 801e428:	2300      	movs	r3, #0
 801e42a:	4604      	mov	r4, r0
 801e42c:	4608      	mov	r0, r1
 801e42e:	4611      	mov	r1, r2
 801e430:	602b      	str	r3, [r5, #0]
 801e432:	f7e4 fb70 	bl	8002b16 <_fstat>
 801e436:	1c43      	adds	r3, r0, #1
 801e438:	d102      	bne.n	801e440 <_fstat_r+0x1c>
 801e43a:	682b      	ldr	r3, [r5, #0]
 801e43c:	b103      	cbz	r3, 801e440 <_fstat_r+0x1c>
 801e43e:	6023      	str	r3, [r4, #0]
 801e440:	bd38      	pop	{r3, r4, r5, pc}
 801e442:	bf00      	nop
 801e444:	2000b6b0 	.word	0x2000b6b0

0801e448 <__sfvwrite_r>:
 801e448:	6893      	ldr	r3, [r2, #8]
 801e44a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e44e:	4606      	mov	r6, r0
 801e450:	460c      	mov	r4, r1
 801e452:	4690      	mov	r8, r2
 801e454:	b91b      	cbnz	r3, 801e45e <__sfvwrite_r+0x16>
 801e456:	2000      	movs	r0, #0
 801e458:	b003      	add	sp, #12
 801e45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e45e:	898b      	ldrh	r3, [r1, #12]
 801e460:	0718      	lsls	r0, r3, #28
 801e462:	d550      	bpl.n	801e506 <__sfvwrite_r+0xbe>
 801e464:	690b      	ldr	r3, [r1, #16]
 801e466:	2b00      	cmp	r3, #0
 801e468:	d04d      	beq.n	801e506 <__sfvwrite_r+0xbe>
 801e46a:	89a3      	ldrh	r3, [r4, #12]
 801e46c:	f8d8 7000 	ldr.w	r7, [r8]
 801e470:	f013 0902 	ands.w	r9, r3, #2
 801e474:	d16c      	bne.n	801e550 <__sfvwrite_r+0x108>
 801e476:	f013 0301 	ands.w	r3, r3, #1
 801e47a:	f000 809c 	beq.w	801e5b6 <__sfvwrite_r+0x16e>
 801e47e:	4648      	mov	r0, r9
 801e480:	46ca      	mov	sl, r9
 801e482:	46cb      	mov	fp, r9
 801e484:	f1bb 0f00 	cmp.w	fp, #0
 801e488:	f000 8103 	beq.w	801e692 <__sfvwrite_r+0x24a>
 801e48c:	b950      	cbnz	r0, 801e4a4 <__sfvwrite_r+0x5c>
 801e48e:	465a      	mov	r2, fp
 801e490:	210a      	movs	r1, #10
 801e492:	4650      	mov	r0, sl
 801e494:	f7e1 fec4 	bl	8000220 <memchr>
 801e498:	2800      	cmp	r0, #0
 801e49a:	f000 80ff 	beq.w	801e69c <__sfvwrite_r+0x254>
 801e49e:	3001      	adds	r0, #1
 801e4a0:	eba0 090a 	sub.w	r9, r0, sl
 801e4a4:	6820      	ldr	r0, [r4, #0]
 801e4a6:	6921      	ldr	r1, [r4, #16]
 801e4a8:	6963      	ldr	r3, [r4, #20]
 801e4aa:	45d9      	cmp	r9, fp
 801e4ac:	464a      	mov	r2, r9
 801e4ae:	bf28      	it	cs
 801e4b0:	465a      	movcs	r2, fp
 801e4b2:	4288      	cmp	r0, r1
 801e4b4:	f240 80f5 	bls.w	801e6a2 <__sfvwrite_r+0x25a>
 801e4b8:	68a5      	ldr	r5, [r4, #8]
 801e4ba:	441d      	add	r5, r3
 801e4bc:	42aa      	cmp	r2, r5
 801e4be:	f340 80f0 	ble.w	801e6a2 <__sfvwrite_r+0x25a>
 801e4c2:	4651      	mov	r1, sl
 801e4c4:	462a      	mov	r2, r5
 801e4c6:	f7f9 ff91 	bl	80183ec <memmove>
 801e4ca:	6823      	ldr	r3, [r4, #0]
 801e4cc:	442b      	add	r3, r5
 801e4ce:	6023      	str	r3, [r4, #0]
 801e4d0:	4621      	mov	r1, r4
 801e4d2:	4630      	mov	r0, r6
 801e4d4:	f7fc ff1c 	bl	801b310 <_fflush_r>
 801e4d8:	2800      	cmp	r0, #0
 801e4da:	d167      	bne.n	801e5ac <__sfvwrite_r+0x164>
 801e4dc:	ebb9 0905 	subs.w	r9, r9, r5
 801e4e0:	f040 80f7 	bne.w	801e6d2 <__sfvwrite_r+0x28a>
 801e4e4:	4621      	mov	r1, r4
 801e4e6:	4630      	mov	r0, r6
 801e4e8:	f7fc ff12 	bl	801b310 <_fflush_r>
 801e4ec:	2800      	cmp	r0, #0
 801e4ee:	d15d      	bne.n	801e5ac <__sfvwrite_r+0x164>
 801e4f0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801e4f4:	44aa      	add	sl, r5
 801e4f6:	ebab 0b05 	sub.w	fp, fp, r5
 801e4fa:	1b55      	subs	r5, r2, r5
 801e4fc:	f8c8 5008 	str.w	r5, [r8, #8]
 801e500:	2d00      	cmp	r5, #0
 801e502:	d1bf      	bne.n	801e484 <__sfvwrite_r+0x3c>
 801e504:	e7a7      	b.n	801e456 <__sfvwrite_r+0xe>
 801e506:	4621      	mov	r1, r4
 801e508:	4630      	mov	r0, r6
 801e50a:	f7fb ff8f 	bl	801a42c <__swsetup_r>
 801e50e:	2800      	cmp	r0, #0
 801e510:	d0ab      	beq.n	801e46a <__sfvwrite_r+0x22>
 801e512:	f04f 30ff 	mov.w	r0, #4294967295
 801e516:	e79f      	b.n	801e458 <__sfvwrite_r+0x10>
 801e518:	e9d7 b900 	ldrd	fp, r9, [r7]
 801e51c:	3708      	adds	r7, #8
 801e51e:	f1b9 0f00 	cmp.w	r9, #0
 801e522:	d0f9      	beq.n	801e518 <__sfvwrite_r+0xd0>
 801e524:	45d1      	cmp	r9, sl
 801e526:	464b      	mov	r3, r9
 801e528:	69e1      	ldr	r1, [r4, #28]
 801e52a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801e52c:	bf28      	it	cs
 801e52e:	4653      	movcs	r3, sl
 801e530:	465a      	mov	r2, fp
 801e532:	4630      	mov	r0, r6
 801e534:	47a8      	blx	r5
 801e536:	2800      	cmp	r0, #0
 801e538:	dd38      	ble.n	801e5ac <__sfvwrite_r+0x164>
 801e53a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e53e:	4483      	add	fp, r0
 801e540:	eba9 0900 	sub.w	r9, r9, r0
 801e544:	1a18      	subs	r0, r3, r0
 801e546:	f8c8 0008 	str.w	r0, [r8, #8]
 801e54a:	2800      	cmp	r0, #0
 801e54c:	d1e7      	bne.n	801e51e <__sfvwrite_r+0xd6>
 801e54e:	e782      	b.n	801e456 <__sfvwrite_r+0xe>
 801e550:	f04f 0b00 	mov.w	fp, #0
 801e554:	f8df a180 	ldr.w	sl, [pc, #384]	; 801e6d8 <__sfvwrite_r+0x290>
 801e558:	46d9      	mov	r9, fp
 801e55a:	e7e0      	b.n	801e51e <__sfvwrite_r+0xd6>
 801e55c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 801e560:	3708      	adds	r7, #8
 801e562:	f1ba 0f00 	cmp.w	sl, #0
 801e566:	d0f9      	beq.n	801e55c <__sfvwrite_r+0x114>
 801e568:	89a3      	ldrh	r3, [r4, #12]
 801e56a:	68a2      	ldr	r2, [r4, #8]
 801e56c:	6820      	ldr	r0, [r4, #0]
 801e56e:	0599      	lsls	r1, r3, #22
 801e570:	d563      	bpl.n	801e63a <__sfvwrite_r+0x1f2>
 801e572:	4552      	cmp	r2, sl
 801e574:	d836      	bhi.n	801e5e4 <__sfvwrite_r+0x19c>
 801e576:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801e57a:	d033      	beq.n	801e5e4 <__sfvwrite_r+0x19c>
 801e57c:	6921      	ldr	r1, [r4, #16]
 801e57e:	6965      	ldr	r5, [r4, #20]
 801e580:	eba0 0b01 	sub.w	fp, r0, r1
 801e584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e58c:	f10b 0201 	add.w	r2, fp, #1
 801e590:	106d      	asrs	r5, r5, #1
 801e592:	4452      	add	r2, sl
 801e594:	4295      	cmp	r5, r2
 801e596:	bf38      	it	cc
 801e598:	4615      	movcc	r5, r2
 801e59a:	055b      	lsls	r3, r3, #21
 801e59c:	d53d      	bpl.n	801e61a <__sfvwrite_r+0x1d2>
 801e59e:	4629      	mov	r1, r5
 801e5a0:	4630      	mov	r0, r6
 801e5a2:	f7fd f95d 	bl	801b860 <_malloc_r>
 801e5a6:	b948      	cbnz	r0, 801e5bc <__sfvwrite_r+0x174>
 801e5a8:	230c      	movs	r3, #12
 801e5aa:	6033      	str	r3, [r6, #0]
 801e5ac:	89a3      	ldrh	r3, [r4, #12]
 801e5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e5b2:	81a3      	strh	r3, [r4, #12]
 801e5b4:	e7ad      	b.n	801e512 <__sfvwrite_r+0xca>
 801e5b6:	4699      	mov	r9, r3
 801e5b8:	469a      	mov	sl, r3
 801e5ba:	e7d2      	b.n	801e562 <__sfvwrite_r+0x11a>
 801e5bc:	465a      	mov	r2, fp
 801e5be:	6921      	ldr	r1, [r4, #16]
 801e5c0:	9001      	str	r0, [sp, #4]
 801e5c2:	f7f9 ff05 	bl	80183d0 <memcpy>
 801e5c6:	89a2      	ldrh	r2, [r4, #12]
 801e5c8:	9b01      	ldr	r3, [sp, #4]
 801e5ca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801e5ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801e5d2:	81a2      	strh	r2, [r4, #12]
 801e5d4:	6123      	str	r3, [r4, #16]
 801e5d6:	6165      	str	r5, [r4, #20]
 801e5d8:	445b      	add	r3, fp
 801e5da:	eba5 050b 	sub.w	r5, r5, fp
 801e5de:	6023      	str	r3, [r4, #0]
 801e5e0:	4652      	mov	r2, sl
 801e5e2:	60a5      	str	r5, [r4, #8]
 801e5e4:	4552      	cmp	r2, sl
 801e5e6:	bf28      	it	cs
 801e5e8:	4652      	movcs	r2, sl
 801e5ea:	6820      	ldr	r0, [r4, #0]
 801e5ec:	9201      	str	r2, [sp, #4]
 801e5ee:	4649      	mov	r1, r9
 801e5f0:	f7f9 fefc 	bl	80183ec <memmove>
 801e5f4:	68a3      	ldr	r3, [r4, #8]
 801e5f6:	9a01      	ldr	r2, [sp, #4]
 801e5f8:	1a9b      	subs	r3, r3, r2
 801e5fa:	60a3      	str	r3, [r4, #8]
 801e5fc:	6823      	ldr	r3, [r4, #0]
 801e5fe:	441a      	add	r2, r3
 801e600:	4655      	mov	r5, sl
 801e602:	6022      	str	r2, [r4, #0]
 801e604:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801e608:	44a9      	add	r9, r5
 801e60a:	ebaa 0a05 	sub.w	sl, sl, r5
 801e60e:	1b45      	subs	r5, r0, r5
 801e610:	f8c8 5008 	str.w	r5, [r8, #8]
 801e614:	2d00      	cmp	r5, #0
 801e616:	d1a4      	bne.n	801e562 <__sfvwrite_r+0x11a>
 801e618:	e71d      	b.n	801e456 <__sfvwrite_r+0xe>
 801e61a:	462a      	mov	r2, r5
 801e61c:	4630      	mov	r0, r6
 801e61e:	f000 f8d9 	bl	801e7d4 <_realloc_r>
 801e622:	4603      	mov	r3, r0
 801e624:	2800      	cmp	r0, #0
 801e626:	d1d5      	bne.n	801e5d4 <__sfvwrite_r+0x18c>
 801e628:	6921      	ldr	r1, [r4, #16]
 801e62a:	4630      	mov	r0, r6
 801e62c:	f7fc ff6c 	bl	801b508 <_free_r>
 801e630:	89a3      	ldrh	r3, [r4, #12]
 801e632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e636:	81a3      	strh	r3, [r4, #12]
 801e638:	e7b6      	b.n	801e5a8 <__sfvwrite_r+0x160>
 801e63a:	6923      	ldr	r3, [r4, #16]
 801e63c:	4283      	cmp	r3, r0
 801e63e:	d302      	bcc.n	801e646 <__sfvwrite_r+0x1fe>
 801e640:	6961      	ldr	r1, [r4, #20]
 801e642:	4551      	cmp	r1, sl
 801e644:	d915      	bls.n	801e672 <__sfvwrite_r+0x22a>
 801e646:	4552      	cmp	r2, sl
 801e648:	bf28      	it	cs
 801e64a:	4652      	movcs	r2, sl
 801e64c:	4649      	mov	r1, r9
 801e64e:	4615      	mov	r5, r2
 801e650:	f7f9 fecc 	bl	80183ec <memmove>
 801e654:	68a3      	ldr	r3, [r4, #8]
 801e656:	6822      	ldr	r2, [r4, #0]
 801e658:	1b5b      	subs	r3, r3, r5
 801e65a:	442a      	add	r2, r5
 801e65c:	60a3      	str	r3, [r4, #8]
 801e65e:	6022      	str	r2, [r4, #0]
 801e660:	2b00      	cmp	r3, #0
 801e662:	d1cf      	bne.n	801e604 <__sfvwrite_r+0x1bc>
 801e664:	4621      	mov	r1, r4
 801e666:	4630      	mov	r0, r6
 801e668:	f7fc fe52 	bl	801b310 <_fflush_r>
 801e66c:	2800      	cmp	r0, #0
 801e66e:	d0c9      	beq.n	801e604 <__sfvwrite_r+0x1bc>
 801e670:	e79c      	b.n	801e5ac <__sfvwrite_r+0x164>
 801e672:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801e676:	459a      	cmp	sl, r3
 801e678:	bf38      	it	cc
 801e67a:	4653      	movcc	r3, sl
 801e67c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801e67e:	fb93 f3f1 	sdiv	r3, r3, r1
 801e682:	464a      	mov	r2, r9
 801e684:	434b      	muls	r3, r1
 801e686:	4630      	mov	r0, r6
 801e688:	69e1      	ldr	r1, [r4, #28]
 801e68a:	47a8      	blx	r5
 801e68c:	1e05      	subs	r5, r0, #0
 801e68e:	dcb9      	bgt.n	801e604 <__sfvwrite_r+0x1bc>
 801e690:	e78c      	b.n	801e5ac <__sfvwrite_r+0x164>
 801e692:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801e696:	2000      	movs	r0, #0
 801e698:	3708      	adds	r7, #8
 801e69a:	e6f3      	b.n	801e484 <__sfvwrite_r+0x3c>
 801e69c:	f10b 0901 	add.w	r9, fp, #1
 801e6a0:	e700      	b.n	801e4a4 <__sfvwrite_r+0x5c>
 801e6a2:	4293      	cmp	r3, r2
 801e6a4:	dc08      	bgt.n	801e6b8 <__sfvwrite_r+0x270>
 801e6a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801e6a8:	69e1      	ldr	r1, [r4, #28]
 801e6aa:	4652      	mov	r2, sl
 801e6ac:	4630      	mov	r0, r6
 801e6ae:	47a8      	blx	r5
 801e6b0:	1e05      	subs	r5, r0, #0
 801e6b2:	f73f af13 	bgt.w	801e4dc <__sfvwrite_r+0x94>
 801e6b6:	e779      	b.n	801e5ac <__sfvwrite_r+0x164>
 801e6b8:	4651      	mov	r1, sl
 801e6ba:	9201      	str	r2, [sp, #4]
 801e6bc:	f7f9 fe96 	bl	80183ec <memmove>
 801e6c0:	9a01      	ldr	r2, [sp, #4]
 801e6c2:	68a3      	ldr	r3, [r4, #8]
 801e6c4:	1a9b      	subs	r3, r3, r2
 801e6c6:	60a3      	str	r3, [r4, #8]
 801e6c8:	6823      	ldr	r3, [r4, #0]
 801e6ca:	4413      	add	r3, r2
 801e6cc:	6023      	str	r3, [r4, #0]
 801e6ce:	4615      	mov	r5, r2
 801e6d0:	e704      	b.n	801e4dc <__sfvwrite_r+0x94>
 801e6d2:	2001      	movs	r0, #1
 801e6d4:	e70c      	b.n	801e4f0 <__sfvwrite_r+0xa8>
 801e6d6:	bf00      	nop
 801e6d8:	7ffffc00 	.word	0x7ffffc00

0801e6dc <_isatty_r>:
 801e6dc:	b538      	push	{r3, r4, r5, lr}
 801e6de:	4d06      	ldr	r5, [pc, #24]	; (801e6f8 <_isatty_r+0x1c>)
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	4604      	mov	r4, r0
 801e6e4:	4608      	mov	r0, r1
 801e6e6:	602b      	str	r3, [r5, #0]
 801e6e8:	f7e4 fa25 	bl	8002b36 <_isatty>
 801e6ec:	1c43      	adds	r3, r0, #1
 801e6ee:	d102      	bne.n	801e6f6 <_isatty_r+0x1a>
 801e6f0:	682b      	ldr	r3, [r5, #0]
 801e6f2:	b103      	cbz	r3, 801e6f6 <_isatty_r+0x1a>
 801e6f4:	6023      	str	r3, [r4, #0]
 801e6f6:	bd38      	pop	{r3, r4, r5, pc}
 801e6f8:	2000b6b0 	.word	0x2000b6b0

0801e6fc <iswspace>:
 801e6fc:	2100      	movs	r1, #0
 801e6fe:	f000 b801 	b.w	801e704 <iswspace_l>
	...

0801e704 <iswspace_l>:
 801e704:	28ff      	cmp	r0, #255	; 0xff
 801e706:	bf9d      	ittte	ls
 801e708:	4b02      	ldrls	r3, [pc, #8]	; (801e714 <iswspace_l+0x10>)
 801e70a:	5cc0      	ldrbls	r0, [r0, r3]
 801e70c:	f000 0008 	andls.w	r0, r0, #8
 801e710:	2000      	movhi	r0, #0
 801e712:	4770      	bx	lr
 801e714:	0802368d 	.word	0x0802368d

0801e718 <__locale_mb_cur_max>:
 801e718:	4b01      	ldr	r3, [pc, #4]	; (801e720 <__locale_mb_cur_max+0x8>)
 801e71a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801e71e:	4770      	bx	lr
 801e720:	200008e0 	.word	0x200008e0

0801e724 <_lseek_r>:
 801e724:	b538      	push	{r3, r4, r5, lr}
 801e726:	4d07      	ldr	r5, [pc, #28]	; (801e744 <_lseek_r+0x20>)
 801e728:	4604      	mov	r4, r0
 801e72a:	4608      	mov	r0, r1
 801e72c:	4611      	mov	r1, r2
 801e72e:	2200      	movs	r2, #0
 801e730:	602a      	str	r2, [r5, #0]
 801e732:	461a      	mov	r2, r3
 801e734:	f7e4 fa0a 	bl	8002b4c <_lseek>
 801e738:	1c43      	adds	r3, r0, #1
 801e73a:	d102      	bne.n	801e742 <_lseek_r+0x1e>
 801e73c:	682b      	ldr	r3, [r5, #0]
 801e73e:	b103      	cbz	r3, 801e742 <_lseek_r+0x1e>
 801e740:	6023      	str	r3, [r4, #0]
 801e742:	bd38      	pop	{r3, r4, r5, pc}
 801e744:	2000b6b0 	.word	0x2000b6b0

0801e748 <_mbrtowc_r>:
 801e748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e74a:	4c0a      	ldr	r4, [pc, #40]	; (801e774 <_mbrtowc_r+0x2c>)
 801e74c:	9e08      	ldr	r6, [sp, #32]
 801e74e:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 801e752:	9600      	str	r6, [sp, #0]
 801e754:	4605      	mov	r5, r0
 801e756:	4614      	mov	r4, r2
 801e758:	b912      	cbnz	r2, 801e760 <_mbrtowc_r+0x18>
 801e75a:	4a07      	ldr	r2, [pc, #28]	; (801e778 <_mbrtowc_r+0x30>)
 801e75c:	2301      	movs	r3, #1
 801e75e:	4621      	mov	r1, r4
 801e760:	47b8      	blx	r7
 801e762:	1c43      	adds	r3, r0, #1
 801e764:	bf01      	itttt	eq
 801e766:	2300      	moveq	r3, #0
 801e768:	6033      	streq	r3, [r6, #0]
 801e76a:	238a      	moveq	r3, #138	; 0x8a
 801e76c:	602b      	streq	r3, [r5, #0]
 801e76e:	b003      	add	sp, #12
 801e770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e772:	bf00      	nop
 801e774:	200008e0 	.word	0x200008e0
 801e778:	08023b41 	.word	0x08023b41

0801e77c <__ascii_mbtowc>:
 801e77c:	b082      	sub	sp, #8
 801e77e:	b901      	cbnz	r1, 801e782 <__ascii_mbtowc+0x6>
 801e780:	a901      	add	r1, sp, #4
 801e782:	b142      	cbz	r2, 801e796 <__ascii_mbtowc+0x1a>
 801e784:	b14b      	cbz	r3, 801e79a <__ascii_mbtowc+0x1e>
 801e786:	7813      	ldrb	r3, [r2, #0]
 801e788:	600b      	str	r3, [r1, #0]
 801e78a:	7812      	ldrb	r2, [r2, #0]
 801e78c:	1e10      	subs	r0, r2, #0
 801e78e:	bf18      	it	ne
 801e790:	2001      	movne	r0, #1
 801e792:	b002      	add	sp, #8
 801e794:	4770      	bx	lr
 801e796:	4610      	mov	r0, r2
 801e798:	e7fb      	b.n	801e792 <__ascii_mbtowc+0x16>
 801e79a:	f06f 0001 	mvn.w	r0, #1
 801e79e:	e7f8      	b.n	801e792 <__ascii_mbtowc+0x16>

0801e7a0 <_read_r>:
 801e7a0:	b538      	push	{r3, r4, r5, lr}
 801e7a2:	4d07      	ldr	r5, [pc, #28]	; (801e7c0 <_read_r+0x20>)
 801e7a4:	4604      	mov	r4, r0
 801e7a6:	4608      	mov	r0, r1
 801e7a8:	4611      	mov	r1, r2
 801e7aa:	2200      	movs	r2, #0
 801e7ac:	602a      	str	r2, [r5, #0]
 801e7ae:	461a      	mov	r2, r3
 801e7b0:	f7e4 f988 	bl	8002ac4 <_read>
 801e7b4:	1c43      	adds	r3, r0, #1
 801e7b6:	d102      	bne.n	801e7be <_read_r+0x1e>
 801e7b8:	682b      	ldr	r3, [r5, #0]
 801e7ba:	b103      	cbz	r3, 801e7be <_read_r+0x1e>
 801e7bc:	6023      	str	r3, [r4, #0]
 801e7be:	bd38      	pop	{r3, r4, r5, pc}
 801e7c0:	2000b6b0 	.word	0x2000b6b0

0801e7c4 <realloc>:
 801e7c4:	4b02      	ldr	r3, [pc, #8]	; (801e7d0 <realloc+0xc>)
 801e7c6:	460a      	mov	r2, r1
 801e7c8:	4601      	mov	r1, r0
 801e7ca:	6818      	ldr	r0, [r3, #0]
 801e7cc:	f000 b802 	b.w	801e7d4 <_realloc_r>
 801e7d0:	20000038 	.word	0x20000038

0801e7d4 <_realloc_r>:
 801e7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7d8:	4681      	mov	r9, r0
 801e7da:	460c      	mov	r4, r1
 801e7dc:	b929      	cbnz	r1, 801e7ea <_realloc_r+0x16>
 801e7de:	4611      	mov	r1, r2
 801e7e0:	b003      	add	sp, #12
 801e7e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e6:	f7fd b83b 	b.w	801b860 <_malloc_r>
 801e7ea:	9201      	str	r2, [sp, #4]
 801e7ec:	f7fd fa7a 	bl	801bce4 <__malloc_lock>
 801e7f0:	9a01      	ldr	r2, [sp, #4]
 801e7f2:	f102 080b 	add.w	r8, r2, #11
 801e7f6:	f1b8 0f16 	cmp.w	r8, #22
 801e7fa:	d90b      	bls.n	801e814 <_realloc_r+0x40>
 801e7fc:	f038 0807 	bics.w	r8, r8, #7
 801e800:	d50a      	bpl.n	801e818 <_realloc_r+0x44>
 801e802:	230c      	movs	r3, #12
 801e804:	f8c9 3000 	str.w	r3, [r9]
 801e808:	f04f 0b00 	mov.w	fp, #0
 801e80c:	4658      	mov	r0, fp
 801e80e:	b003      	add	sp, #12
 801e810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e814:	f04f 0810 	mov.w	r8, #16
 801e818:	4590      	cmp	r8, r2
 801e81a:	d3f2      	bcc.n	801e802 <_realloc_r+0x2e>
 801e81c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801e820:	f025 0603 	bic.w	r6, r5, #3
 801e824:	45b0      	cmp	r8, r6
 801e826:	f1a4 0a08 	sub.w	sl, r4, #8
 801e82a:	f340 8170 	ble.w	801eb0e <_realloc_r+0x33a>
 801e82e:	48a9      	ldr	r0, [pc, #676]	; (801ead4 <_realloc_r+0x300>)
 801e830:	9001      	str	r0, [sp, #4]
 801e832:	f8d0 c008 	ldr.w	ip, [r0, #8]
 801e836:	eb0a 0306 	add.w	r3, sl, r6
 801e83a:	459c      	cmp	ip, r3
 801e83c:	6859      	ldr	r1, [r3, #4]
 801e83e:	d005      	beq.n	801e84c <_realloc_r+0x78>
 801e840:	f021 0001 	bic.w	r0, r1, #1
 801e844:	4418      	add	r0, r3
 801e846:	6840      	ldr	r0, [r0, #4]
 801e848:	07c7      	lsls	r7, r0, #31
 801e84a:	d427      	bmi.n	801e89c <_realloc_r+0xc8>
 801e84c:	f021 0103 	bic.w	r1, r1, #3
 801e850:	459c      	cmp	ip, r3
 801e852:	eb06 0701 	add.w	r7, r6, r1
 801e856:	d119      	bne.n	801e88c <_realloc_r+0xb8>
 801e858:	f108 0010 	add.w	r0, r8, #16
 801e85c:	42b8      	cmp	r0, r7
 801e85e:	dc1f      	bgt.n	801e8a0 <_realloc_r+0xcc>
 801e860:	eb0a 0308 	add.w	r3, sl, r8
 801e864:	9a01      	ldr	r2, [sp, #4]
 801e866:	eba7 0708 	sub.w	r7, r7, r8
 801e86a:	f047 0701 	orr.w	r7, r7, #1
 801e86e:	6093      	str	r3, [r2, #8]
 801e870:	605f      	str	r7, [r3, #4]
 801e872:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801e876:	f003 0301 	and.w	r3, r3, #1
 801e87a:	ea43 0308 	orr.w	r3, r3, r8
 801e87e:	f844 3c04 	str.w	r3, [r4, #-4]
 801e882:	4648      	mov	r0, r9
 801e884:	f7fd fa34 	bl	801bcf0 <__malloc_unlock>
 801e888:	46a3      	mov	fp, r4
 801e88a:	e7bf      	b.n	801e80c <_realloc_r+0x38>
 801e88c:	45b8      	cmp	r8, r7
 801e88e:	dc07      	bgt.n	801e8a0 <_realloc_r+0xcc>
 801e890:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801e894:	60da      	str	r2, [r3, #12]
 801e896:	6093      	str	r3, [r2, #8]
 801e898:	4655      	mov	r5, sl
 801e89a:	e07f      	b.n	801e99c <_realloc_r+0x1c8>
 801e89c:	2100      	movs	r1, #0
 801e89e:	460b      	mov	r3, r1
 801e8a0:	07e8      	lsls	r0, r5, #31
 801e8a2:	f100 80e5 	bmi.w	801ea70 <_realloc_r+0x29c>
 801e8a6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801e8aa:	ebaa 0505 	sub.w	r5, sl, r5
 801e8ae:	6868      	ldr	r0, [r5, #4]
 801e8b0:	f020 0003 	bic.w	r0, r0, #3
 801e8b4:	eb00 0b06 	add.w	fp, r0, r6
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	f000 80a5 	beq.w	801ea08 <_realloc_r+0x234>
 801e8be:	459c      	cmp	ip, r3
 801e8c0:	eb01 070b 	add.w	r7, r1, fp
 801e8c4:	d14a      	bne.n	801e95c <_realloc_r+0x188>
 801e8c6:	f108 0310 	add.w	r3, r8, #16
 801e8ca:	42bb      	cmp	r3, r7
 801e8cc:	f300 809c 	bgt.w	801ea08 <_realloc_r+0x234>
 801e8d0:	46ab      	mov	fp, r5
 801e8d2:	68eb      	ldr	r3, [r5, #12]
 801e8d4:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801e8d8:	60d3      	str	r3, [r2, #12]
 801e8da:	609a      	str	r2, [r3, #8]
 801e8dc:	1f32      	subs	r2, r6, #4
 801e8de:	2a24      	cmp	r2, #36	; 0x24
 801e8e0:	d837      	bhi.n	801e952 <_realloc_r+0x17e>
 801e8e2:	2a13      	cmp	r2, #19
 801e8e4:	d933      	bls.n	801e94e <_realloc_r+0x17a>
 801e8e6:	6823      	ldr	r3, [r4, #0]
 801e8e8:	60ab      	str	r3, [r5, #8]
 801e8ea:	6863      	ldr	r3, [r4, #4]
 801e8ec:	60eb      	str	r3, [r5, #12]
 801e8ee:	2a1b      	cmp	r2, #27
 801e8f0:	d81b      	bhi.n	801e92a <_realloc_r+0x156>
 801e8f2:	3408      	adds	r4, #8
 801e8f4:	f105 0310 	add.w	r3, r5, #16
 801e8f8:	6822      	ldr	r2, [r4, #0]
 801e8fa:	601a      	str	r2, [r3, #0]
 801e8fc:	6862      	ldr	r2, [r4, #4]
 801e8fe:	605a      	str	r2, [r3, #4]
 801e900:	68a2      	ldr	r2, [r4, #8]
 801e902:	609a      	str	r2, [r3, #8]
 801e904:	eb05 0308 	add.w	r3, r5, r8
 801e908:	9a01      	ldr	r2, [sp, #4]
 801e90a:	eba7 0708 	sub.w	r7, r7, r8
 801e90e:	f047 0701 	orr.w	r7, r7, #1
 801e912:	6093      	str	r3, [r2, #8]
 801e914:	605f      	str	r7, [r3, #4]
 801e916:	686b      	ldr	r3, [r5, #4]
 801e918:	f003 0301 	and.w	r3, r3, #1
 801e91c:	ea43 0308 	orr.w	r3, r3, r8
 801e920:	606b      	str	r3, [r5, #4]
 801e922:	4648      	mov	r0, r9
 801e924:	f7fd f9e4 	bl	801bcf0 <__malloc_unlock>
 801e928:	e770      	b.n	801e80c <_realloc_r+0x38>
 801e92a:	68a3      	ldr	r3, [r4, #8]
 801e92c:	612b      	str	r3, [r5, #16]
 801e92e:	68e3      	ldr	r3, [r4, #12]
 801e930:	616b      	str	r3, [r5, #20]
 801e932:	2a24      	cmp	r2, #36	; 0x24
 801e934:	bf01      	itttt	eq
 801e936:	6923      	ldreq	r3, [r4, #16]
 801e938:	61ab      	streq	r3, [r5, #24]
 801e93a:	6962      	ldreq	r2, [r4, #20]
 801e93c:	61ea      	streq	r2, [r5, #28]
 801e93e:	bf19      	ittee	ne
 801e940:	3410      	addne	r4, #16
 801e942:	f105 0318 	addne.w	r3, r5, #24
 801e946:	f105 0320 	addeq.w	r3, r5, #32
 801e94a:	3418      	addeq	r4, #24
 801e94c:	e7d4      	b.n	801e8f8 <_realloc_r+0x124>
 801e94e:	465b      	mov	r3, fp
 801e950:	e7d2      	b.n	801e8f8 <_realloc_r+0x124>
 801e952:	4621      	mov	r1, r4
 801e954:	4658      	mov	r0, fp
 801e956:	f7f9 fd49 	bl	80183ec <memmove>
 801e95a:	e7d3      	b.n	801e904 <_realloc_r+0x130>
 801e95c:	45b8      	cmp	r8, r7
 801e95e:	dc53      	bgt.n	801ea08 <_realloc_r+0x234>
 801e960:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801e964:	4628      	mov	r0, r5
 801e966:	60da      	str	r2, [r3, #12]
 801e968:	6093      	str	r3, [r2, #8]
 801e96a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801e96e:	68eb      	ldr	r3, [r5, #12]
 801e970:	60d3      	str	r3, [r2, #12]
 801e972:	609a      	str	r2, [r3, #8]
 801e974:	1f32      	subs	r2, r6, #4
 801e976:	2a24      	cmp	r2, #36	; 0x24
 801e978:	d842      	bhi.n	801ea00 <_realloc_r+0x22c>
 801e97a:	2a13      	cmp	r2, #19
 801e97c:	d908      	bls.n	801e990 <_realloc_r+0x1bc>
 801e97e:	6823      	ldr	r3, [r4, #0]
 801e980:	60ab      	str	r3, [r5, #8]
 801e982:	6863      	ldr	r3, [r4, #4]
 801e984:	60eb      	str	r3, [r5, #12]
 801e986:	2a1b      	cmp	r2, #27
 801e988:	d828      	bhi.n	801e9dc <_realloc_r+0x208>
 801e98a:	3408      	adds	r4, #8
 801e98c:	f105 0010 	add.w	r0, r5, #16
 801e990:	6823      	ldr	r3, [r4, #0]
 801e992:	6003      	str	r3, [r0, #0]
 801e994:	6863      	ldr	r3, [r4, #4]
 801e996:	6043      	str	r3, [r0, #4]
 801e998:	68a3      	ldr	r3, [r4, #8]
 801e99a:	6083      	str	r3, [r0, #8]
 801e99c:	686a      	ldr	r2, [r5, #4]
 801e99e:	eba7 0008 	sub.w	r0, r7, r8
 801e9a2:	280f      	cmp	r0, #15
 801e9a4:	f002 0201 	and.w	r2, r2, #1
 801e9a8:	eb05 0307 	add.w	r3, r5, r7
 801e9ac:	f240 80b1 	bls.w	801eb12 <_realloc_r+0x33e>
 801e9b0:	eb05 0108 	add.w	r1, r5, r8
 801e9b4:	ea48 0202 	orr.w	r2, r8, r2
 801e9b8:	f040 0001 	orr.w	r0, r0, #1
 801e9bc:	606a      	str	r2, [r5, #4]
 801e9be:	6048      	str	r0, [r1, #4]
 801e9c0:	685a      	ldr	r2, [r3, #4]
 801e9c2:	f042 0201 	orr.w	r2, r2, #1
 801e9c6:	605a      	str	r2, [r3, #4]
 801e9c8:	3108      	adds	r1, #8
 801e9ca:	4648      	mov	r0, r9
 801e9cc:	f7fc fd9c 	bl	801b508 <_free_r>
 801e9d0:	4648      	mov	r0, r9
 801e9d2:	f7fd f98d 	bl	801bcf0 <__malloc_unlock>
 801e9d6:	f105 0b08 	add.w	fp, r5, #8
 801e9da:	e717      	b.n	801e80c <_realloc_r+0x38>
 801e9dc:	68a3      	ldr	r3, [r4, #8]
 801e9de:	612b      	str	r3, [r5, #16]
 801e9e0:	68e3      	ldr	r3, [r4, #12]
 801e9e2:	616b      	str	r3, [r5, #20]
 801e9e4:	2a24      	cmp	r2, #36	; 0x24
 801e9e6:	bf01      	itttt	eq
 801e9e8:	6923      	ldreq	r3, [r4, #16]
 801e9ea:	61ab      	streq	r3, [r5, #24]
 801e9ec:	6963      	ldreq	r3, [r4, #20]
 801e9ee:	61eb      	streq	r3, [r5, #28]
 801e9f0:	bf19      	ittee	ne
 801e9f2:	3410      	addne	r4, #16
 801e9f4:	f105 0018 	addne.w	r0, r5, #24
 801e9f8:	f105 0020 	addeq.w	r0, r5, #32
 801e9fc:	3418      	addeq	r4, #24
 801e9fe:	e7c7      	b.n	801e990 <_realloc_r+0x1bc>
 801ea00:	4621      	mov	r1, r4
 801ea02:	f7f9 fcf3 	bl	80183ec <memmove>
 801ea06:	e7c9      	b.n	801e99c <_realloc_r+0x1c8>
 801ea08:	45d8      	cmp	r8, fp
 801ea0a:	dc31      	bgt.n	801ea70 <_realloc_r+0x29c>
 801ea0c:	4628      	mov	r0, r5
 801ea0e:	68eb      	ldr	r3, [r5, #12]
 801ea10:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801ea14:	60d3      	str	r3, [r2, #12]
 801ea16:	609a      	str	r2, [r3, #8]
 801ea18:	1f32      	subs	r2, r6, #4
 801ea1a:	2a24      	cmp	r2, #36	; 0x24
 801ea1c:	d824      	bhi.n	801ea68 <_realloc_r+0x294>
 801ea1e:	2a13      	cmp	r2, #19
 801ea20:	d908      	bls.n	801ea34 <_realloc_r+0x260>
 801ea22:	6823      	ldr	r3, [r4, #0]
 801ea24:	60ab      	str	r3, [r5, #8]
 801ea26:	6863      	ldr	r3, [r4, #4]
 801ea28:	60eb      	str	r3, [r5, #12]
 801ea2a:	2a1b      	cmp	r2, #27
 801ea2c:	d80a      	bhi.n	801ea44 <_realloc_r+0x270>
 801ea2e:	3408      	adds	r4, #8
 801ea30:	f105 0010 	add.w	r0, r5, #16
 801ea34:	6823      	ldr	r3, [r4, #0]
 801ea36:	6003      	str	r3, [r0, #0]
 801ea38:	6863      	ldr	r3, [r4, #4]
 801ea3a:	6043      	str	r3, [r0, #4]
 801ea3c:	68a3      	ldr	r3, [r4, #8]
 801ea3e:	6083      	str	r3, [r0, #8]
 801ea40:	465f      	mov	r7, fp
 801ea42:	e7ab      	b.n	801e99c <_realloc_r+0x1c8>
 801ea44:	68a3      	ldr	r3, [r4, #8]
 801ea46:	612b      	str	r3, [r5, #16]
 801ea48:	68e3      	ldr	r3, [r4, #12]
 801ea4a:	616b      	str	r3, [r5, #20]
 801ea4c:	2a24      	cmp	r2, #36	; 0x24
 801ea4e:	bf01      	itttt	eq
 801ea50:	6923      	ldreq	r3, [r4, #16]
 801ea52:	61ab      	streq	r3, [r5, #24]
 801ea54:	6963      	ldreq	r3, [r4, #20]
 801ea56:	61eb      	streq	r3, [r5, #28]
 801ea58:	bf19      	ittee	ne
 801ea5a:	3410      	addne	r4, #16
 801ea5c:	f105 0018 	addne.w	r0, r5, #24
 801ea60:	f105 0020 	addeq.w	r0, r5, #32
 801ea64:	3418      	addeq	r4, #24
 801ea66:	e7e5      	b.n	801ea34 <_realloc_r+0x260>
 801ea68:	4621      	mov	r1, r4
 801ea6a:	f7f9 fcbf 	bl	80183ec <memmove>
 801ea6e:	e7e7      	b.n	801ea40 <_realloc_r+0x26c>
 801ea70:	4611      	mov	r1, r2
 801ea72:	4648      	mov	r0, r9
 801ea74:	f7fc fef4 	bl	801b860 <_malloc_r>
 801ea78:	4683      	mov	fp, r0
 801ea7a:	2800      	cmp	r0, #0
 801ea7c:	f43f af51 	beq.w	801e922 <_realloc_r+0x14e>
 801ea80:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ea84:	f023 0301 	bic.w	r3, r3, #1
 801ea88:	4453      	add	r3, sl
 801ea8a:	f1a0 0208 	sub.w	r2, r0, #8
 801ea8e:	4293      	cmp	r3, r2
 801ea90:	d105      	bne.n	801ea9e <_realloc_r+0x2ca>
 801ea92:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801ea96:	f027 0703 	bic.w	r7, r7, #3
 801ea9a:	4437      	add	r7, r6
 801ea9c:	e6fc      	b.n	801e898 <_realloc_r+0xc4>
 801ea9e:	1f32      	subs	r2, r6, #4
 801eaa0:	2a24      	cmp	r2, #36	; 0x24
 801eaa2:	d830      	bhi.n	801eb06 <_realloc_r+0x332>
 801eaa4:	2a13      	cmp	r2, #19
 801eaa6:	d92b      	bls.n	801eb00 <_realloc_r+0x32c>
 801eaa8:	6823      	ldr	r3, [r4, #0]
 801eaaa:	6003      	str	r3, [r0, #0]
 801eaac:	6863      	ldr	r3, [r4, #4]
 801eaae:	6043      	str	r3, [r0, #4]
 801eab0:	2a1b      	cmp	r2, #27
 801eab2:	d811      	bhi.n	801ead8 <_realloc_r+0x304>
 801eab4:	f104 0208 	add.w	r2, r4, #8
 801eab8:	f100 0308 	add.w	r3, r0, #8
 801eabc:	6811      	ldr	r1, [r2, #0]
 801eabe:	6019      	str	r1, [r3, #0]
 801eac0:	6851      	ldr	r1, [r2, #4]
 801eac2:	6059      	str	r1, [r3, #4]
 801eac4:	6892      	ldr	r2, [r2, #8]
 801eac6:	609a      	str	r2, [r3, #8]
 801eac8:	4621      	mov	r1, r4
 801eaca:	4648      	mov	r0, r9
 801eacc:	f7fc fd1c 	bl	801b508 <_free_r>
 801ead0:	e727      	b.n	801e922 <_realloc_r+0x14e>
 801ead2:	bf00      	nop
 801ead4:	200004d0 	.word	0x200004d0
 801ead8:	68a3      	ldr	r3, [r4, #8]
 801eada:	6083      	str	r3, [r0, #8]
 801eadc:	68e3      	ldr	r3, [r4, #12]
 801eade:	60c3      	str	r3, [r0, #12]
 801eae0:	2a24      	cmp	r2, #36	; 0x24
 801eae2:	bf01      	itttt	eq
 801eae4:	6923      	ldreq	r3, [r4, #16]
 801eae6:	6103      	streq	r3, [r0, #16]
 801eae8:	6961      	ldreq	r1, [r4, #20]
 801eaea:	6141      	streq	r1, [r0, #20]
 801eaec:	bf19      	ittee	ne
 801eaee:	f104 0210 	addne.w	r2, r4, #16
 801eaf2:	f100 0310 	addne.w	r3, r0, #16
 801eaf6:	f104 0218 	addeq.w	r2, r4, #24
 801eafa:	f100 0318 	addeq.w	r3, r0, #24
 801eafe:	e7dd      	b.n	801eabc <_realloc_r+0x2e8>
 801eb00:	4603      	mov	r3, r0
 801eb02:	4622      	mov	r2, r4
 801eb04:	e7da      	b.n	801eabc <_realloc_r+0x2e8>
 801eb06:	4621      	mov	r1, r4
 801eb08:	f7f9 fc70 	bl	80183ec <memmove>
 801eb0c:	e7dc      	b.n	801eac8 <_realloc_r+0x2f4>
 801eb0e:	4637      	mov	r7, r6
 801eb10:	e6c2      	b.n	801e898 <_realloc_r+0xc4>
 801eb12:	4317      	orrs	r7, r2
 801eb14:	606f      	str	r7, [r5, #4]
 801eb16:	685a      	ldr	r2, [r3, #4]
 801eb18:	f042 0201 	orr.w	r2, r2, #1
 801eb1c:	605a      	str	r2, [r3, #4]
 801eb1e:	e757      	b.n	801e9d0 <_realloc_r+0x1fc>

0801eb20 <__sccl>:
 801eb20:	b570      	push	{r4, r5, r6, lr}
 801eb22:	780b      	ldrb	r3, [r1, #0]
 801eb24:	4604      	mov	r4, r0
 801eb26:	2b5e      	cmp	r3, #94	; 0x5e
 801eb28:	bf0b      	itete	eq
 801eb2a:	784b      	ldrbeq	r3, [r1, #1]
 801eb2c:	1c48      	addne	r0, r1, #1
 801eb2e:	1c88      	addeq	r0, r1, #2
 801eb30:	2200      	movne	r2, #0
 801eb32:	bf08      	it	eq
 801eb34:	2201      	moveq	r2, #1
 801eb36:	1e61      	subs	r1, r4, #1
 801eb38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801eb3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 801eb40:	42a9      	cmp	r1, r5
 801eb42:	d1fb      	bne.n	801eb3c <__sccl+0x1c>
 801eb44:	b90b      	cbnz	r3, 801eb4a <__sccl+0x2a>
 801eb46:	3801      	subs	r0, #1
 801eb48:	bd70      	pop	{r4, r5, r6, pc}
 801eb4a:	f082 0101 	eor.w	r1, r2, #1
 801eb4e:	54e1      	strb	r1, [r4, r3]
 801eb50:	1c42      	adds	r2, r0, #1
 801eb52:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801eb56:	2d2d      	cmp	r5, #45	; 0x2d
 801eb58:	f102 36ff 	add.w	r6, r2, #4294967295
 801eb5c:	4610      	mov	r0, r2
 801eb5e:	d006      	beq.n	801eb6e <__sccl+0x4e>
 801eb60:	2d5d      	cmp	r5, #93	; 0x5d
 801eb62:	d0f1      	beq.n	801eb48 <__sccl+0x28>
 801eb64:	b90d      	cbnz	r5, 801eb6a <__sccl+0x4a>
 801eb66:	4630      	mov	r0, r6
 801eb68:	e7ee      	b.n	801eb48 <__sccl+0x28>
 801eb6a:	462b      	mov	r3, r5
 801eb6c:	e7ef      	b.n	801eb4e <__sccl+0x2e>
 801eb6e:	7816      	ldrb	r6, [r2, #0]
 801eb70:	2e5d      	cmp	r6, #93	; 0x5d
 801eb72:	d0fa      	beq.n	801eb6a <__sccl+0x4a>
 801eb74:	42b3      	cmp	r3, r6
 801eb76:	dcf8      	bgt.n	801eb6a <__sccl+0x4a>
 801eb78:	4618      	mov	r0, r3
 801eb7a:	3001      	adds	r0, #1
 801eb7c:	4286      	cmp	r6, r0
 801eb7e:	5421      	strb	r1, [r4, r0]
 801eb80:	dcfb      	bgt.n	801eb7a <__sccl+0x5a>
 801eb82:	43d8      	mvns	r0, r3
 801eb84:	4430      	add	r0, r6
 801eb86:	1c5d      	adds	r5, r3, #1
 801eb88:	42b3      	cmp	r3, r6
 801eb8a:	bfa8      	it	ge
 801eb8c:	2000      	movge	r0, #0
 801eb8e:	182b      	adds	r3, r5, r0
 801eb90:	3202      	adds	r2, #2
 801eb92:	e7de      	b.n	801eb52 <__sccl+0x32>

0801eb94 <_strtoll_l.isra.0>:
 801eb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb98:	b087      	sub	sp, #28
 801eb9a:	4691      	mov	r9, r2
 801eb9c:	4a47      	ldr	r2, [pc, #284]	; (801ecbc <_strtoll_l.isra.0+0x128>)
 801eb9e:	9005      	str	r0, [sp, #20]
 801eba0:	4688      	mov	r8, r1
 801eba2:	461f      	mov	r7, r3
 801eba4:	460d      	mov	r5, r1
 801eba6:	462b      	mov	r3, r5
 801eba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ebac:	5ca6      	ldrb	r6, [r4, r2]
 801ebae:	f016 0608 	ands.w	r6, r6, #8
 801ebb2:	d1f8      	bne.n	801eba6 <_strtoll_l.isra.0+0x12>
 801ebb4:	2c2d      	cmp	r4, #45	; 0x2d
 801ebb6:	d147      	bne.n	801ec48 <_strtoll_l.isra.0+0xb4>
 801ebb8:	782c      	ldrb	r4, [r5, #0]
 801ebba:	2601      	movs	r6, #1
 801ebbc:	1c9d      	adds	r5, r3, #2
 801ebbe:	2f00      	cmp	r7, #0
 801ebc0:	d077      	beq.n	801ecb2 <_strtoll_l.isra.0+0x11e>
 801ebc2:	2f10      	cmp	r7, #16
 801ebc4:	d109      	bne.n	801ebda <_strtoll_l.isra.0+0x46>
 801ebc6:	2c30      	cmp	r4, #48	; 0x30
 801ebc8:	d107      	bne.n	801ebda <_strtoll_l.isra.0+0x46>
 801ebca:	782b      	ldrb	r3, [r5, #0]
 801ebcc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ebd0:	2b58      	cmp	r3, #88	; 0x58
 801ebd2:	d169      	bne.n	801eca8 <_strtoll_l.isra.0+0x114>
 801ebd4:	786c      	ldrb	r4, [r5, #1]
 801ebd6:	2710      	movs	r7, #16
 801ebd8:	3502      	adds	r5, #2
 801ebda:	f04f 32ff 	mov.w	r2, #4294967295
 801ebde:	1990      	adds	r0, r2, r6
 801ebe0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ebe4:	ea4f 7be7 	mov.w	fp, r7, asr #31
 801ebe8:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 801ebec:	463a      	mov	r2, r7
 801ebee:	465b      	mov	r3, fp
 801ebf0:	e9cd 0100 	strd	r0, r1, [sp]
 801ebf4:	f7e2 f802 	bl	8000bfc <__aeabi_uldivmod>
 801ebf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ebfc:	46ba      	mov	sl, r7
 801ebfe:	4696      	mov	lr, r2
 801ec00:	2300      	movs	r3, #0
 801ec02:	2000      	movs	r0, #0
 801ec04:	2100      	movs	r1, #0
 801ec06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ec0a:	f1bc 0f09 	cmp.w	ip, #9
 801ec0e:	d820      	bhi.n	801ec52 <_strtoll_l.isra.0+0xbe>
 801ec10:	4664      	mov	r4, ip
 801ec12:	42a7      	cmp	r7, r4
 801ec14:	dd2e      	ble.n	801ec74 <_strtoll_l.isra.0+0xe0>
 801ec16:	1c5a      	adds	r2, r3, #1
 801ec18:	d013      	beq.n	801ec42 <_strtoll_l.isra.0+0xae>
 801ec1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ec1e:	428b      	cmp	r3, r1
 801ec20:	bf08      	it	eq
 801ec22:	4282      	cmpeq	r2, r0
 801ec24:	d323      	bcc.n	801ec6e <_strtoll_l.isra.0+0xda>
 801ec26:	d101      	bne.n	801ec2c <_strtoll_l.isra.0+0x98>
 801ec28:	45a6      	cmp	lr, r4
 801ec2a:	db20      	blt.n	801ec6e <_strtoll_l.isra.0+0xda>
 801ec2c:	fb0a f301 	mul.w	r3, sl, r1
 801ec30:	fb00 330b 	mla	r3, r0, fp, r3
 801ec34:	fbaa 0100 	umull	r0, r1, sl, r0
 801ec38:	4419      	add	r1, r3
 801ec3a:	1900      	adds	r0, r0, r4
 801ec3c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801ec40:	2301      	movs	r3, #1
 801ec42:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ec46:	e7de      	b.n	801ec06 <_strtoll_l.isra.0+0x72>
 801ec48:	2c2b      	cmp	r4, #43	; 0x2b
 801ec4a:	bf04      	itt	eq
 801ec4c:	782c      	ldrbeq	r4, [r5, #0]
 801ec4e:	1c9d      	addeq	r5, r3, #2
 801ec50:	e7b5      	b.n	801ebbe <_strtoll_l.isra.0+0x2a>
 801ec52:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ec56:	f1bc 0f19 	cmp.w	ip, #25
 801ec5a:	d801      	bhi.n	801ec60 <_strtoll_l.isra.0+0xcc>
 801ec5c:	3c37      	subs	r4, #55	; 0x37
 801ec5e:	e7d8      	b.n	801ec12 <_strtoll_l.isra.0+0x7e>
 801ec60:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ec64:	f1bc 0f19 	cmp.w	ip, #25
 801ec68:	d804      	bhi.n	801ec74 <_strtoll_l.isra.0+0xe0>
 801ec6a:	3c57      	subs	r4, #87	; 0x57
 801ec6c:	e7d1      	b.n	801ec12 <_strtoll_l.isra.0+0x7e>
 801ec6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ec72:	e7e6      	b.n	801ec42 <_strtoll_l.isra.0+0xae>
 801ec74:	1c5a      	adds	r2, r3, #1
 801ec76:	d10a      	bne.n	801ec8e <_strtoll_l.isra.0+0xfa>
 801ec78:	9a05      	ldr	r2, [sp, #20]
 801ec7a:	2322      	movs	r3, #34	; 0x22
 801ec7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec80:	6013      	str	r3, [r2, #0]
 801ec82:	f1b9 0f00 	cmp.w	r9, #0
 801ec86:	d10a      	bne.n	801ec9e <_strtoll_l.isra.0+0x10a>
 801ec88:	b007      	add	sp, #28
 801ec8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec8e:	b116      	cbz	r6, 801ec96 <_strtoll_l.isra.0+0x102>
 801ec90:	4240      	negs	r0, r0
 801ec92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801ec96:	f1b9 0f00 	cmp.w	r9, #0
 801ec9a:	d0f5      	beq.n	801ec88 <_strtoll_l.isra.0+0xf4>
 801ec9c:	b10b      	cbz	r3, 801eca2 <_strtoll_l.isra.0+0x10e>
 801ec9e:	f105 38ff 	add.w	r8, r5, #4294967295
 801eca2:	f8c9 8000 	str.w	r8, [r9]
 801eca6:	e7ef      	b.n	801ec88 <_strtoll_l.isra.0+0xf4>
 801eca8:	2430      	movs	r4, #48	; 0x30
 801ecaa:	2f00      	cmp	r7, #0
 801ecac:	d195      	bne.n	801ebda <_strtoll_l.isra.0+0x46>
 801ecae:	2708      	movs	r7, #8
 801ecb0:	e793      	b.n	801ebda <_strtoll_l.isra.0+0x46>
 801ecb2:	2c30      	cmp	r4, #48	; 0x30
 801ecb4:	d089      	beq.n	801ebca <_strtoll_l.isra.0+0x36>
 801ecb6:	270a      	movs	r7, #10
 801ecb8:	e78f      	b.n	801ebda <_strtoll_l.isra.0+0x46>
 801ecba:	bf00      	nop
 801ecbc:	0802368d 	.word	0x0802368d

0801ecc0 <_strtoll_r>:
 801ecc0:	f7ff bf68 	b.w	801eb94 <_strtoll_l.isra.0>

0801ecc4 <_strtoull_l.isra.0>:
 801ecc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecc8:	b085      	sub	sp, #20
 801ecca:	4691      	mov	r9, r2
 801eccc:	4a49      	ldr	r2, [pc, #292]	; (801edf4 <_strtoull_l.isra.0+0x130>)
 801ecce:	9003      	str	r0, [sp, #12]
 801ecd0:	4688      	mov	r8, r1
 801ecd2:	461e      	mov	r6, r3
 801ecd4:	460d      	mov	r5, r1
 801ecd6:	462b      	mov	r3, r5
 801ecd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ecdc:	5ca7      	ldrb	r7, [r4, r2]
 801ecde:	f017 0708 	ands.w	r7, r7, #8
 801ece2:	d1f8      	bne.n	801ecd6 <_strtoull_l.isra.0+0x12>
 801ece4:	2c2d      	cmp	r4, #45	; 0x2d
 801ece6:	d14a      	bne.n	801ed7e <_strtoull_l.isra.0+0xba>
 801ece8:	782c      	ldrb	r4, [r5, #0]
 801ecea:	2701      	movs	r7, #1
 801ecec:	1c9d      	adds	r5, r3, #2
 801ecee:	2e00      	cmp	r6, #0
 801ecf0:	d07c      	beq.n	801edec <_strtoull_l.isra.0+0x128>
 801ecf2:	2e10      	cmp	r6, #16
 801ecf4:	d109      	bne.n	801ed0a <_strtoull_l.isra.0+0x46>
 801ecf6:	2c30      	cmp	r4, #48	; 0x30
 801ecf8:	d107      	bne.n	801ed0a <_strtoull_l.isra.0+0x46>
 801ecfa:	782b      	ldrb	r3, [r5, #0]
 801ecfc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ed00:	2b58      	cmp	r3, #88	; 0x58
 801ed02:	d16e      	bne.n	801ede2 <_strtoull_l.isra.0+0x11e>
 801ed04:	786c      	ldrb	r4, [r5, #1]
 801ed06:	2610      	movs	r6, #16
 801ed08:	3502      	adds	r5, #2
 801ed0a:	ea4f 7be6 	mov.w	fp, r6, asr #31
 801ed0e:	4632      	mov	r2, r6
 801ed10:	465b      	mov	r3, fp
 801ed12:	f04f 30ff 	mov.w	r0, #4294967295
 801ed16:	f04f 31ff 	mov.w	r1, #4294967295
 801ed1a:	f7e1 ff6f 	bl	8000bfc <__aeabi_uldivmod>
 801ed1e:	e9cd 0100 	strd	r0, r1, [sp]
 801ed22:	4632      	mov	r2, r6
 801ed24:	465b      	mov	r3, fp
 801ed26:	f04f 30ff 	mov.w	r0, #4294967295
 801ed2a:	f04f 31ff 	mov.w	r1, #4294967295
 801ed2e:	f7e1 ff65 	bl	8000bfc <__aeabi_uldivmod>
 801ed32:	46b2      	mov	sl, r6
 801ed34:	4696      	mov	lr, r2
 801ed36:	2300      	movs	r3, #0
 801ed38:	2000      	movs	r0, #0
 801ed3a:	2100      	movs	r1, #0
 801ed3c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ed40:	f1bc 0f09 	cmp.w	ip, #9
 801ed44:	d820      	bhi.n	801ed88 <_strtoull_l.isra.0+0xc4>
 801ed46:	4664      	mov	r4, ip
 801ed48:	42a6      	cmp	r6, r4
 801ed4a:	dd2e      	ble.n	801edaa <_strtoull_l.isra.0+0xe6>
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	db29      	blt.n	801eda4 <_strtoull_l.isra.0+0xe0>
 801ed50:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed54:	428b      	cmp	r3, r1
 801ed56:	bf08      	it	eq
 801ed58:	4282      	cmpeq	r2, r0
 801ed5a:	d323      	bcc.n	801eda4 <_strtoull_l.isra.0+0xe0>
 801ed5c:	d101      	bne.n	801ed62 <_strtoull_l.isra.0+0x9e>
 801ed5e:	45a6      	cmp	lr, r4
 801ed60:	db20      	blt.n	801eda4 <_strtoull_l.isra.0+0xe0>
 801ed62:	fb0a f301 	mul.w	r3, sl, r1
 801ed66:	fb00 330b 	mla	r3, r0, fp, r3
 801ed6a:	fbaa 0100 	umull	r0, r1, sl, r0
 801ed6e:	4419      	add	r1, r3
 801ed70:	1900      	adds	r0, r0, r4
 801ed72:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801ed76:	2301      	movs	r3, #1
 801ed78:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ed7c:	e7de      	b.n	801ed3c <_strtoull_l.isra.0+0x78>
 801ed7e:	2c2b      	cmp	r4, #43	; 0x2b
 801ed80:	bf04      	itt	eq
 801ed82:	782c      	ldrbeq	r4, [r5, #0]
 801ed84:	1c9d      	addeq	r5, r3, #2
 801ed86:	e7b2      	b.n	801ecee <_strtoull_l.isra.0+0x2a>
 801ed88:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ed8c:	f1bc 0f19 	cmp.w	ip, #25
 801ed90:	d801      	bhi.n	801ed96 <_strtoull_l.isra.0+0xd2>
 801ed92:	3c37      	subs	r4, #55	; 0x37
 801ed94:	e7d8      	b.n	801ed48 <_strtoull_l.isra.0+0x84>
 801ed96:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ed9a:	f1bc 0f19 	cmp.w	ip, #25
 801ed9e:	d804      	bhi.n	801edaa <_strtoull_l.isra.0+0xe6>
 801eda0:	3c57      	subs	r4, #87	; 0x57
 801eda2:	e7d1      	b.n	801ed48 <_strtoull_l.isra.0+0x84>
 801eda4:	f04f 33ff 	mov.w	r3, #4294967295
 801eda8:	e7e6      	b.n	801ed78 <_strtoull_l.isra.0+0xb4>
 801edaa:	2b00      	cmp	r3, #0
 801edac:	da0c      	bge.n	801edc8 <_strtoull_l.isra.0+0x104>
 801edae:	9a03      	ldr	r2, [sp, #12]
 801edb0:	2322      	movs	r3, #34	; 0x22
 801edb2:	6013      	str	r3, [r2, #0]
 801edb4:	f04f 30ff 	mov.w	r0, #4294967295
 801edb8:	f04f 31ff 	mov.w	r1, #4294967295
 801edbc:	f1b9 0f00 	cmp.w	r9, #0
 801edc0:	d10a      	bne.n	801edd8 <_strtoull_l.isra.0+0x114>
 801edc2:	b005      	add	sp, #20
 801edc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edc8:	b117      	cbz	r7, 801edd0 <_strtoull_l.isra.0+0x10c>
 801edca:	4240      	negs	r0, r0
 801edcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801edd0:	f1b9 0f00 	cmp.w	r9, #0
 801edd4:	d0f5      	beq.n	801edc2 <_strtoull_l.isra.0+0xfe>
 801edd6:	b10b      	cbz	r3, 801eddc <_strtoull_l.isra.0+0x118>
 801edd8:	f105 38ff 	add.w	r8, r5, #4294967295
 801eddc:	f8c9 8000 	str.w	r8, [r9]
 801ede0:	e7ef      	b.n	801edc2 <_strtoull_l.isra.0+0xfe>
 801ede2:	2430      	movs	r4, #48	; 0x30
 801ede4:	2e00      	cmp	r6, #0
 801ede6:	d190      	bne.n	801ed0a <_strtoull_l.isra.0+0x46>
 801ede8:	2608      	movs	r6, #8
 801edea:	e78e      	b.n	801ed0a <_strtoull_l.isra.0+0x46>
 801edec:	2c30      	cmp	r4, #48	; 0x30
 801edee:	d084      	beq.n	801ecfa <_strtoull_l.isra.0+0x36>
 801edf0:	260a      	movs	r6, #10
 801edf2:	e78a      	b.n	801ed0a <_strtoull_l.isra.0+0x46>
 801edf4:	0802368d 	.word	0x0802368d

0801edf8 <_strtoull_r>:
 801edf8:	f7ff bf64 	b.w	801ecc4 <_strtoull_l.isra.0>

0801edfc <__swbuf_r>:
 801edfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edfe:	460e      	mov	r6, r1
 801ee00:	4614      	mov	r4, r2
 801ee02:	4605      	mov	r5, r0
 801ee04:	b118      	cbz	r0, 801ee0e <__swbuf_r+0x12>
 801ee06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801ee08:	b90b      	cbnz	r3, 801ee0e <__swbuf_r+0x12>
 801ee0a:	f7fc faed 	bl	801b3e8 <__sinit>
 801ee0e:	69a3      	ldr	r3, [r4, #24]
 801ee10:	60a3      	str	r3, [r4, #8]
 801ee12:	89a3      	ldrh	r3, [r4, #12]
 801ee14:	0719      	lsls	r1, r3, #28
 801ee16:	d529      	bpl.n	801ee6c <__swbuf_r+0x70>
 801ee18:	6923      	ldr	r3, [r4, #16]
 801ee1a:	b33b      	cbz	r3, 801ee6c <__swbuf_r+0x70>
 801ee1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee20:	b2f6      	uxtb	r6, r6
 801ee22:	049a      	lsls	r2, r3, #18
 801ee24:	4637      	mov	r7, r6
 801ee26:	d52a      	bpl.n	801ee7e <__swbuf_r+0x82>
 801ee28:	6823      	ldr	r3, [r4, #0]
 801ee2a:	6920      	ldr	r0, [r4, #16]
 801ee2c:	1a18      	subs	r0, r3, r0
 801ee2e:	6963      	ldr	r3, [r4, #20]
 801ee30:	4283      	cmp	r3, r0
 801ee32:	dc04      	bgt.n	801ee3e <__swbuf_r+0x42>
 801ee34:	4621      	mov	r1, r4
 801ee36:	4628      	mov	r0, r5
 801ee38:	f7fc fa6a 	bl	801b310 <_fflush_r>
 801ee3c:	b9e0      	cbnz	r0, 801ee78 <__swbuf_r+0x7c>
 801ee3e:	68a3      	ldr	r3, [r4, #8]
 801ee40:	3b01      	subs	r3, #1
 801ee42:	60a3      	str	r3, [r4, #8]
 801ee44:	6823      	ldr	r3, [r4, #0]
 801ee46:	1c5a      	adds	r2, r3, #1
 801ee48:	6022      	str	r2, [r4, #0]
 801ee4a:	701e      	strb	r6, [r3, #0]
 801ee4c:	6962      	ldr	r2, [r4, #20]
 801ee4e:	1c43      	adds	r3, r0, #1
 801ee50:	429a      	cmp	r2, r3
 801ee52:	d004      	beq.n	801ee5e <__swbuf_r+0x62>
 801ee54:	89a3      	ldrh	r3, [r4, #12]
 801ee56:	07db      	lsls	r3, r3, #31
 801ee58:	d506      	bpl.n	801ee68 <__swbuf_r+0x6c>
 801ee5a:	2e0a      	cmp	r6, #10
 801ee5c:	d104      	bne.n	801ee68 <__swbuf_r+0x6c>
 801ee5e:	4621      	mov	r1, r4
 801ee60:	4628      	mov	r0, r5
 801ee62:	f7fc fa55 	bl	801b310 <_fflush_r>
 801ee66:	b938      	cbnz	r0, 801ee78 <__swbuf_r+0x7c>
 801ee68:	4638      	mov	r0, r7
 801ee6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee6c:	4621      	mov	r1, r4
 801ee6e:	4628      	mov	r0, r5
 801ee70:	f7fb fadc 	bl	801a42c <__swsetup_r>
 801ee74:	2800      	cmp	r0, #0
 801ee76:	d0d1      	beq.n	801ee1c <__swbuf_r+0x20>
 801ee78:	f04f 37ff 	mov.w	r7, #4294967295
 801ee7c:	e7f4      	b.n	801ee68 <__swbuf_r+0x6c>
 801ee7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ee82:	81a3      	strh	r3, [r4, #12]
 801ee84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ee86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ee8a:	6663      	str	r3, [r4, #100]	; 0x64
 801ee8c:	e7cc      	b.n	801ee28 <__swbuf_r+0x2c>
	...

0801ee90 <_wcrtomb_r>:
 801ee90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee92:	4c09      	ldr	r4, [pc, #36]	; (801eeb8 <_wcrtomb_r+0x28>)
 801ee94:	b085      	sub	sp, #20
 801ee96:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801ee9a:	4605      	mov	r5, r0
 801ee9c:	461e      	mov	r6, r3
 801ee9e:	b909      	cbnz	r1, 801eea4 <_wcrtomb_r+0x14>
 801eea0:	460a      	mov	r2, r1
 801eea2:	a901      	add	r1, sp, #4
 801eea4:	47b8      	blx	r7
 801eea6:	1c43      	adds	r3, r0, #1
 801eea8:	bf01      	itttt	eq
 801eeaa:	2300      	moveq	r3, #0
 801eeac:	6033      	streq	r3, [r6, #0]
 801eeae:	238a      	moveq	r3, #138	; 0x8a
 801eeb0:	602b      	streq	r3, [r5, #0]
 801eeb2:	b005      	add	sp, #20
 801eeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eeb6:	bf00      	nop
 801eeb8:	200008e0 	.word	0x200008e0

0801eebc <__ascii_wctomb>:
 801eebc:	b149      	cbz	r1, 801eed2 <__ascii_wctomb+0x16>
 801eebe:	2aff      	cmp	r2, #255	; 0xff
 801eec0:	bf85      	ittet	hi
 801eec2:	238a      	movhi	r3, #138	; 0x8a
 801eec4:	6003      	strhi	r3, [r0, #0]
 801eec6:	700a      	strbls	r2, [r1, #0]
 801eec8:	f04f 30ff 	movhi.w	r0, #4294967295
 801eecc:	bf98      	it	ls
 801eece:	2001      	movls	r0, #1
 801eed0:	4770      	bx	lr
 801eed2:	4608      	mov	r0, r1
 801eed4:	4770      	bx	lr

0801eed6 <abort>:
 801eed6:	b508      	push	{r3, lr}
 801eed8:	2006      	movs	r0, #6
 801eeda:	f000 f82d 	bl	801ef38 <raise>
 801eede:	2001      	movs	r0, #1
 801eee0:	f7e3 fde6 	bl	8002ab0 <_exit>

0801eee4 <_raise_r>:
 801eee4:	291f      	cmp	r1, #31
 801eee6:	b538      	push	{r3, r4, r5, lr}
 801eee8:	4604      	mov	r4, r0
 801eeea:	460d      	mov	r5, r1
 801eeec:	d904      	bls.n	801eef8 <_raise_r+0x14>
 801eeee:	2316      	movs	r3, #22
 801eef0:	6003      	str	r3, [r0, #0]
 801eef2:	f04f 30ff 	mov.w	r0, #4294967295
 801eef6:	bd38      	pop	{r3, r4, r5, pc}
 801eef8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801eefc:	b112      	cbz	r2, 801ef04 <_raise_r+0x20>
 801eefe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ef02:	b94b      	cbnz	r3, 801ef18 <_raise_r+0x34>
 801ef04:	4620      	mov	r0, r4
 801ef06:	f000 f831 	bl	801ef6c <_getpid_r>
 801ef0a:	462a      	mov	r2, r5
 801ef0c:	4601      	mov	r1, r0
 801ef0e:	4620      	mov	r0, r4
 801ef10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ef14:	f000 b818 	b.w	801ef48 <_kill_r>
 801ef18:	2b01      	cmp	r3, #1
 801ef1a:	d00a      	beq.n	801ef32 <_raise_r+0x4e>
 801ef1c:	1c59      	adds	r1, r3, #1
 801ef1e:	d103      	bne.n	801ef28 <_raise_r+0x44>
 801ef20:	2316      	movs	r3, #22
 801ef22:	6003      	str	r3, [r0, #0]
 801ef24:	2001      	movs	r0, #1
 801ef26:	e7e6      	b.n	801eef6 <_raise_r+0x12>
 801ef28:	2400      	movs	r4, #0
 801ef2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ef2e:	4628      	mov	r0, r5
 801ef30:	4798      	blx	r3
 801ef32:	2000      	movs	r0, #0
 801ef34:	e7df      	b.n	801eef6 <_raise_r+0x12>
	...

0801ef38 <raise>:
 801ef38:	4b02      	ldr	r3, [pc, #8]	; (801ef44 <raise+0xc>)
 801ef3a:	4601      	mov	r1, r0
 801ef3c:	6818      	ldr	r0, [r3, #0]
 801ef3e:	f7ff bfd1 	b.w	801eee4 <_raise_r>
 801ef42:	bf00      	nop
 801ef44:	20000038 	.word	0x20000038

0801ef48 <_kill_r>:
 801ef48:	b538      	push	{r3, r4, r5, lr}
 801ef4a:	4d07      	ldr	r5, [pc, #28]	; (801ef68 <_kill_r+0x20>)
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	4604      	mov	r4, r0
 801ef50:	4608      	mov	r0, r1
 801ef52:	4611      	mov	r1, r2
 801ef54:	602b      	str	r3, [r5, #0]
 801ef56:	f7e3 fd99 	bl	8002a8c <_kill>
 801ef5a:	1c43      	adds	r3, r0, #1
 801ef5c:	d102      	bne.n	801ef64 <_kill_r+0x1c>
 801ef5e:	682b      	ldr	r3, [r5, #0]
 801ef60:	b103      	cbz	r3, 801ef64 <_kill_r+0x1c>
 801ef62:	6023      	str	r3, [r4, #0]
 801ef64:	bd38      	pop	{r3, r4, r5, pc}
 801ef66:	bf00      	nop
 801ef68:	2000b6b0 	.word	0x2000b6b0

0801ef6c <_getpid_r>:
 801ef6c:	f7e3 bd86 	b.w	8002a7c <_getpid>

0801ef70 <pow>:
 801ef70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef74:	ec59 8b10 	vmov	r8, r9, d0
 801ef78:	ec57 6b11 	vmov	r6, r7, d1
 801ef7c:	f000 f8a8 	bl	801f0d0 <__ieee754_pow>
 801ef80:	4b4e      	ldr	r3, [pc, #312]	; (801f0bc <pow+0x14c>)
 801ef82:	f993 3000 	ldrsb.w	r3, [r3]
 801ef86:	3301      	adds	r3, #1
 801ef88:	ec55 4b10 	vmov	r4, r5, d0
 801ef8c:	d015      	beq.n	801efba <pow+0x4a>
 801ef8e:	4632      	mov	r2, r6
 801ef90:	463b      	mov	r3, r7
 801ef92:	4630      	mov	r0, r6
 801ef94:	4639      	mov	r1, r7
 801ef96:	f7e1 fdf3 	bl	8000b80 <__aeabi_dcmpun>
 801ef9a:	b970      	cbnz	r0, 801efba <pow+0x4a>
 801ef9c:	4642      	mov	r2, r8
 801ef9e:	464b      	mov	r3, r9
 801efa0:	4640      	mov	r0, r8
 801efa2:	4649      	mov	r1, r9
 801efa4:	f7e1 fdec 	bl	8000b80 <__aeabi_dcmpun>
 801efa8:	2200      	movs	r2, #0
 801efaa:	2300      	movs	r3, #0
 801efac:	b148      	cbz	r0, 801efc2 <pow+0x52>
 801efae:	4630      	mov	r0, r6
 801efb0:	4639      	mov	r1, r7
 801efb2:	f7e1 fdb3 	bl	8000b1c <__aeabi_dcmpeq>
 801efb6:	2800      	cmp	r0, #0
 801efb8:	d17d      	bne.n	801f0b6 <pow+0x146>
 801efba:	ec45 4b10 	vmov	d0, r4, r5
 801efbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801efc2:	4640      	mov	r0, r8
 801efc4:	4649      	mov	r1, r9
 801efc6:	f7e1 fda9 	bl	8000b1c <__aeabi_dcmpeq>
 801efca:	b1e0      	cbz	r0, 801f006 <pow+0x96>
 801efcc:	2200      	movs	r2, #0
 801efce:	2300      	movs	r3, #0
 801efd0:	4630      	mov	r0, r6
 801efd2:	4639      	mov	r1, r7
 801efd4:	f7e1 fda2 	bl	8000b1c <__aeabi_dcmpeq>
 801efd8:	2800      	cmp	r0, #0
 801efda:	d16c      	bne.n	801f0b6 <pow+0x146>
 801efdc:	ec47 6b10 	vmov	d0, r6, r7
 801efe0:	f000 fe55 	bl	801fc8e <finite>
 801efe4:	2800      	cmp	r0, #0
 801efe6:	d0e8      	beq.n	801efba <pow+0x4a>
 801efe8:	2200      	movs	r2, #0
 801efea:	2300      	movs	r3, #0
 801efec:	4630      	mov	r0, r6
 801efee:	4639      	mov	r1, r7
 801eff0:	f7e1 fd9e 	bl	8000b30 <__aeabi_dcmplt>
 801eff4:	2800      	cmp	r0, #0
 801eff6:	d0e0      	beq.n	801efba <pow+0x4a>
 801eff8:	f7fc f8f6 	bl	801b1e8 <__errno>
 801effc:	2321      	movs	r3, #33	; 0x21
 801effe:	6003      	str	r3, [r0, #0]
 801f000:	2400      	movs	r4, #0
 801f002:	4d2f      	ldr	r5, [pc, #188]	; (801f0c0 <pow+0x150>)
 801f004:	e7d9      	b.n	801efba <pow+0x4a>
 801f006:	ec45 4b10 	vmov	d0, r4, r5
 801f00a:	f000 fe40 	bl	801fc8e <finite>
 801f00e:	bbb8      	cbnz	r0, 801f080 <pow+0x110>
 801f010:	ec49 8b10 	vmov	d0, r8, r9
 801f014:	f000 fe3b 	bl	801fc8e <finite>
 801f018:	b390      	cbz	r0, 801f080 <pow+0x110>
 801f01a:	ec47 6b10 	vmov	d0, r6, r7
 801f01e:	f000 fe36 	bl	801fc8e <finite>
 801f022:	b368      	cbz	r0, 801f080 <pow+0x110>
 801f024:	4622      	mov	r2, r4
 801f026:	462b      	mov	r3, r5
 801f028:	4620      	mov	r0, r4
 801f02a:	4629      	mov	r1, r5
 801f02c:	f7e1 fda8 	bl	8000b80 <__aeabi_dcmpun>
 801f030:	b160      	cbz	r0, 801f04c <pow+0xdc>
 801f032:	f7fc f8d9 	bl	801b1e8 <__errno>
 801f036:	2321      	movs	r3, #33	; 0x21
 801f038:	6003      	str	r3, [r0, #0]
 801f03a:	2200      	movs	r2, #0
 801f03c:	2300      	movs	r3, #0
 801f03e:	4610      	mov	r0, r2
 801f040:	4619      	mov	r1, r3
 801f042:	f7e1 fc2d 	bl	80008a0 <__aeabi_ddiv>
 801f046:	4604      	mov	r4, r0
 801f048:	460d      	mov	r5, r1
 801f04a:	e7b6      	b.n	801efba <pow+0x4a>
 801f04c:	f7fc f8cc 	bl	801b1e8 <__errno>
 801f050:	2322      	movs	r3, #34	; 0x22
 801f052:	6003      	str	r3, [r0, #0]
 801f054:	2200      	movs	r2, #0
 801f056:	2300      	movs	r3, #0
 801f058:	4640      	mov	r0, r8
 801f05a:	4649      	mov	r1, r9
 801f05c:	f7e1 fd68 	bl	8000b30 <__aeabi_dcmplt>
 801f060:	2400      	movs	r4, #0
 801f062:	b158      	cbz	r0, 801f07c <pow+0x10c>
 801f064:	ec47 6b10 	vmov	d0, r6, r7
 801f068:	f000 fe26 	bl	801fcb8 <rint>
 801f06c:	4632      	mov	r2, r6
 801f06e:	ec51 0b10 	vmov	r0, r1, d0
 801f072:	463b      	mov	r3, r7
 801f074:	f7e1 fd52 	bl	8000b1c <__aeabi_dcmpeq>
 801f078:	2800      	cmp	r0, #0
 801f07a:	d0c2      	beq.n	801f002 <pow+0x92>
 801f07c:	4d11      	ldr	r5, [pc, #68]	; (801f0c4 <pow+0x154>)
 801f07e:	e79c      	b.n	801efba <pow+0x4a>
 801f080:	2200      	movs	r2, #0
 801f082:	2300      	movs	r3, #0
 801f084:	4620      	mov	r0, r4
 801f086:	4629      	mov	r1, r5
 801f088:	f7e1 fd48 	bl	8000b1c <__aeabi_dcmpeq>
 801f08c:	2800      	cmp	r0, #0
 801f08e:	d094      	beq.n	801efba <pow+0x4a>
 801f090:	ec49 8b10 	vmov	d0, r8, r9
 801f094:	f000 fdfb 	bl	801fc8e <finite>
 801f098:	2800      	cmp	r0, #0
 801f09a:	d08e      	beq.n	801efba <pow+0x4a>
 801f09c:	ec47 6b10 	vmov	d0, r6, r7
 801f0a0:	f000 fdf5 	bl	801fc8e <finite>
 801f0a4:	2800      	cmp	r0, #0
 801f0a6:	d088      	beq.n	801efba <pow+0x4a>
 801f0a8:	f7fc f89e 	bl	801b1e8 <__errno>
 801f0ac:	2322      	movs	r3, #34	; 0x22
 801f0ae:	6003      	str	r3, [r0, #0]
 801f0b0:	2400      	movs	r4, #0
 801f0b2:	2500      	movs	r5, #0
 801f0b4:	e781      	b.n	801efba <pow+0x4a>
 801f0b6:	4d04      	ldr	r5, [pc, #16]	; (801f0c8 <pow+0x158>)
 801f0b8:	2400      	movs	r4, #0
 801f0ba:	e77e      	b.n	801efba <pow+0x4a>
 801f0bc:	20000a4c 	.word	0x20000a4c
 801f0c0:	fff00000 	.word	0xfff00000
 801f0c4:	7ff00000 	.word	0x7ff00000
 801f0c8:	3ff00000 	.word	0x3ff00000
 801f0cc:	00000000 	.word	0x00000000

0801f0d0 <__ieee754_pow>:
 801f0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0d4:	ed2d 8b06 	vpush	{d8-d10}
 801f0d8:	b08d      	sub	sp, #52	; 0x34
 801f0da:	ed8d 1b02 	vstr	d1, [sp, #8]
 801f0de:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801f0e2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801f0e6:	ea56 0100 	orrs.w	r1, r6, r0
 801f0ea:	ec53 2b10 	vmov	r2, r3, d0
 801f0ee:	f000 84d1 	beq.w	801fa94 <__ieee754_pow+0x9c4>
 801f0f2:	497f      	ldr	r1, [pc, #508]	; (801f2f0 <__ieee754_pow+0x220>)
 801f0f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801f0f8:	428c      	cmp	r4, r1
 801f0fa:	ee10 8a10 	vmov	r8, s0
 801f0fe:	4699      	mov	r9, r3
 801f100:	dc09      	bgt.n	801f116 <__ieee754_pow+0x46>
 801f102:	d103      	bne.n	801f10c <__ieee754_pow+0x3c>
 801f104:	b97a      	cbnz	r2, 801f126 <__ieee754_pow+0x56>
 801f106:	42a6      	cmp	r6, r4
 801f108:	dd02      	ble.n	801f110 <__ieee754_pow+0x40>
 801f10a:	e00c      	b.n	801f126 <__ieee754_pow+0x56>
 801f10c:	428e      	cmp	r6, r1
 801f10e:	dc02      	bgt.n	801f116 <__ieee754_pow+0x46>
 801f110:	428e      	cmp	r6, r1
 801f112:	d110      	bne.n	801f136 <__ieee754_pow+0x66>
 801f114:	b178      	cbz	r0, 801f136 <__ieee754_pow+0x66>
 801f116:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801f11a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f11e:	ea54 0308 	orrs.w	r3, r4, r8
 801f122:	f000 84b7 	beq.w	801fa94 <__ieee754_pow+0x9c4>
 801f126:	4873      	ldr	r0, [pc, #460]	; (801f2f4 <__ieee754_pow+0x224>)
 801f128:	b00d      	add	sp, #52	; 0x34
 801f12a:	ecbd 8b06 	vpop	{d8-d10}
 801f12e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f132:	f000 bdb9 	b.w	801fca8 <nan>
 801f136:	f1b9 0f00 	cmp.w	r9, #0
 801f13a:	da36      	bge.n	801f1aa <__ieee754_pow+0xda>
 801f13c:	496e      	ldr	r1, [pc, #440]	; (801f2f8 <__ieee754_pow+0x228>)
 801f13e:	428e      	cmp	r6, r1
 801f140:	dc51      	bgt.n	801f1e6 <__ieee754_pow+0x116>
 801f142:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801f146:	428e      	cmp	r6, r1
 801f148:	f340 84af 	ble.w	801faaa <__ieee754_pow+0x9da>
 801f14c:	1531      	asrs	r1, r6, #20
 801f14e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801f152:	2914      	cmp	r1, #20
 801f154:	dd0f      	ble.n	801f176 <__ieee754_pow+0xa6>
 801f156:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801f15a:	fa20 fc01 	lsr.w	ip, r0, r1
 801f15e:	fa0c f101 	lsl.w	r1, ip, r1
 801f162:	4281      	cmp	r1, r0
 801f164:	f040 84a1 	bne.w	801faaa <__ieee754_pow+0x9da>
 801f168:	f00c 0c01 	and.w	ip, ip, #1
 801f16c:	f1cc 0102 	rsb	r1, ip, #2
 801f170:	9100      	str	r1, [sp, #0]
 801f172:	b180      	cbz	r0, 801f196 <__ieee754_pow+0xc6>
 801f174:	e059      	b.n	801f22a <__ieee754_pow+0x15a>
 801f176:	2800      	cmp	r0, #0
 801f178:	d155      	bne.n	801f226 <__ieee754_pow+0x156>
 801f17a:	f1c1 0114 	rsb	r1, r1, #20
 801f17e:	fa46 fc01 	asr.w	ip, r6, r1
 801f182:	fa0c f101 	lsl.w	r1, ip, r1
 801f186:	42b1      	cmp	r1, r6
 801f188:	f040 848c 	bne.w	801faa4 <__ieee754_pow+0x9d4>
 801f18c:	f00c 0c01 	and.w	ip, ip, #1
 801f190:	f1cc 0102 	rsb	r1, ip, #2
 801f194:	9100      	str	r1, [sp, #0]
 801f196:	4959      	ldr	r1, [pc, #356]	; (801f2fc <__ieee754_pow+0x22c>)
 801f198:	428e      	cmp	r6, r1
 801f19a:	d12d      	bne.n	801f1f8 <__ieee754_pow+0x128>
 801f19c:	2f00      	cmp	r7, #0
 801f19e:	da79      	bge.n	801f294 <__ieee754_pow+0x1c4>
 801f1a0:	4956      	ldr	r1, [pc, #344]	; (801f2fc <__ieee754_pow+0x22c>)
 801f1a2:	2000      	movs	r0, #0
 801f1a4:	f7e1 fb7c 	bl	80008a0 <__aeabi_ddiv>
 801f1a8:	e016      	b.n	801f1d8 <__ieee754_pow+0x108>
 801f1aa:	2100      	movs	r1, #0
 801f1ac:	9100      	str	r1, [sp, #0]
 801f1ae:	2800      	cmp	r0, #0
 801f1b0:	d13b      	bne.n	801f22a <__ieee754_pow+0x15a>
 801f1b2:	494f      	ldr	r1, [pc, #316]	; (801f2f0 <__ieee754_pow+0x220>)
 801f1b4:	428e      	cmp	r6, r1
 801f1b6:	d1ee      	bne.n	801f196 <__ieee754_pow+0xc6>
 801f1b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801f1bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801f1c0:	ea53 0308 	orrs.w	r3, r3, r8
 801f1c4:	f000 8466 	beq.w	801fa94 <__ieee754_pow+0x9c4>
 801f1c8:	4b4d      	ldr	r3, [pc, #308]	; (801f300 <__ieee754_pow+0x230>)
 801f1ca:	429c      	cmp	r4, r3
 801f1cc:	dd0d      	ble.n	801f1ea <__ieee754_pow+0x11a>
 801f1ce:	2f00      	cmp	r7, #0
 801f1d0:	f280 8464 	bge.w	801fa9c <__ieee754_pow+0x9cc>
 801f1d4:	2000      	movs	r0, #0
 801f1d6:	2100      	movs	r1, #0
 801f1d8:	ec41 0b10 	vmov	d0, r0, r1
 801f1dc:	b00d      	add	sp, #52	; 0x34
 801f1de:	ecbd 8b06 	vpop	{d8-d10}
 801f1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1e6:	2102      	movs	r1, #2
 801f1e8:	e7e0      	b.n	801f1ac <__ieee754_pow+0xdc>
 801f1ea:	2f00      	cmp	r7, #0
 801f1ec:	daf2      	bge.n	801f1d4 <__ieee754_pow+0x104>
 801f1ee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801f1f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f1f6:	e7ef      	b.n	801f1d8 <__ieee754_pow+0x108>
 801f1f8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801f1fc:	d104      	bne.n	801f208 <__ieee754_pow+0x138>
 801f1fe:	4610      	mov	r0, r2
 801f200:	4619      	mov	r1, r3
 801f202:	f7e1 fa23 	bl	800064c <__aeabi_dmul>
 801f206:	e7e7      	b.n	801f1d8 <__ieee754_pow+0x108>
 801f208:	493e      	ldr	r1, [pc, #248]	; (801f304 <__ieee754_pow+0x234>)
 801f20a:	428f      	cmp	r7, r1
 801f20c:	d10d      	bne.n	801f22a <__ieee754_pow+0x15a>
 801f20e:	f1b9 0f00 	cmp.w	r9, #0
 801f212:	db0a      	blt.n	801f22a <__ieee754_pow+0x15a>
 801f214:	ec43 2b10 	vmov	d0, r2, r3
 801f218:	b00d      	add	sp, #52	; 0x34
 801f21a:	ecbd 8b06 	vpop	{d8-d10}
 801f21e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f222:	f000 bc77 	b.w	801fb14 <__ieee754_sqrt>
 801f226:	2100      	movs	r1, #0
 801f228:	9100      	str	r1, [sp, #0]
 801f22a:	ec43 2b10 	vmov	d0, r2, r3
 801f22e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f232:	f000 fd23 	bl	801fc7c <fabs>
 801f236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f23a:	ec51 0b10 	vmov	r0, r1, d0
 801f23e:	f1b8 0f00 	cmp.w	r8, #0
 801f242:	d12a      	bne.n	801f29a <__ieee754_pow+0x1ca>
 801f244:	b12c      	cbz	r4, 801f252 <__ieee754_pow+0x182>
 801f246:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801f2fc <__ieee754_pow+0x22c>
 801f24a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801f24e:	45e6      	cmp	lr, ip
 801f250:	d123      	bne.n	801f29a <__ieee754_pow+0x1ca>
 801f252:	2f00      	cmp	r7, #0
 801f254:	da05      	bge.n	801f262 <__ieee754_pow+0x192>
 801f256:	4602      	mov	r2, r0
 801f258:	460b      	mov	r3, r1
 801f25a:	2000      	movs	r0, #0
 801f25c:	4927      	ldr	r1, [pc, #156]	; (801f2fc <__ieee754_pow+0x22c>)
 801f25e:	f7e1 fb1f 	bl	80008a0 <__aeabi_ddiv>
 801f262:	f1b9 0f00 	cmp.w	r9, #0
 801f266:	dab7      	bge.n	801f1d8 <__ieee754_pow+0x108>
 801f268:	9b00      	ldr	r3, [sp, #0]
 801f26a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801f26e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f272:	4323      	orrs	r3, r4
 801f274:	d108      	bne.n	801f288 <__ieee754_pow+0x1b8>
 801f276:	4602      	mov	r2, r0
 801f278:	460b      	mov	r3, r1
 801f27a:	4610      	mov	r0, r2
 801f27c:	4619      	mov	r1, r3
 801f27e:	f7e1 f82d 	bl	80002dc <__aeabi_dsub>
 801f282:	4602      	mov	r2, r0
 801f284:	460b      	mov	r3, r1
 801f286:	e78d      	b.n	801f1a4 <__ieee754_pow+0xd4>
 801f288:	9b00      	ldr	r3, [sp, #0]
 801f28a:	2b01      	cmp	r3, #1
 801f28c:	d1a4      	bne.n	801f1d8 <__ieee754_pow+0x108>
 801f28e:	4602      	mov	r2, r0
 801f290:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f294:	4610      	mov	r0, r2
 801f296:	4619      	mov	r1, r3
 801f298:	e79e      	b.n	801f1d8 <__ieee754_pow+0x108>
 801f29a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801f29e:	f10c 35ff 	add.w	r5, ip, #4294967295
 801f2a2:	950a      	str	r5, [sp, #40]	; 0x28
 801f2a4:	9d00      	ldr	r5, [sp, #0]
 801f2a6:	46ac      	mov	ip, r5
 801f2a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f2aa:	ea5c 0505 	orrs.w	r5, ip, r5
 801f2ae:	d0e4      	beq.n	801f27a <__ieee754_pow+0x1aa>
 801f2b0:	4b15      	ldr	r3, [pc, #84]	; (801f308 <__ieee754_pow+0x238>)
 801f2b2:	429e      	cmp	r6, r3
 801f2b4:	f340 80fc 	ble.w	801f4b0 <__ieee754_pow+0x3e0>
 801f2b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801f2bc:	429e      	cmp	r6, r3
 801f2be:	4b10      	ldr	r3, [pc, #64]	; (801f300 <__ieee754_pow+0x230>)
 801f2c0:	dd07      	ble.n	801f2d2 <__ieee754_pow+0x202>
 801f2c2:	429c      	cmp	r4, r3
 801f2c4:	dc0a      	bgt.n	801f2dc <__ieee754_pow+0x20c>
 801f2c6:	2f00      	cmp	r7, #0
 801f2c8:	da84      	bge.n	801f1d4 <__ieee754_pow+0x104>
 801f2ca:	a307      	add	r3, pc, #28	; (adr r3, 801f2e8 <__ieee754_pow+0x218>)
 801f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2d0:	e795      	b.n	801f1fe <__ieee754_pow+0x12e>
 801f2d2:	429c      	cmp	r4, r3
 801f2d4:	dbf7      	blt.n	801f2c6 <__ieee754_pow+0x1f6>
 801f2d6:	4b09      	ldr	r3, [pc, #36]	; (801f2fc <__ieee754_pow+0x22c>)
 801f2d8:	429c      	cmp	r4, r3
 801f2da:	dd17      	ble.n	801f30c <__ieee754_pow+0x23c>
 801f2dc:	2f00      	cmp	r7, #0
 801f2de:	dcf4      	bgt.n	801f2ca <__ieee754_pow+0x1fa>
 801f2e0:	e778      	b.n	801f1d4 <__ieee754_pow+0x104>
 801f2e2:	bf00      	nop
 801f2e4:	f3af 8000 	nop.w
 801f2e8:	8800759c 	.word	0x8800759c
 801f2ec:	7e37e43c 	.word	0x7e37e43c
 801f2f0:	7ff00000 	.word	0x7ff00000
 801f2f4:	08023b41 	.word	0x08023b41
 801f2f8:	433fffff 	.word	0x433fffff
 801f2fc:	3ff00000 	.word	0x3ff00000
 801f300:	3fefffff 	.word	0x3fefffff
 801f304:	3fe00000 	.word	0x3fe00000
 801f308:	41e00000 	.word	0x41e00000
 801f30c:	4b64      	ldr	r3, [pc, #400]	; (801f4a0 <__ieee754_pow+0x3d0>)
 801f30e:	2200      	movs	r2, #0
 801f310:	f7e0 ffe4 	bl	80002dc <__aeabi_dsub>
 801f314:	a356      	add	r3, pc, #344	; (adr r3, 801f470 <__ieee754_pow+0x3a0>)
 801f316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f31a:	4604      	mov	r4, r0
 801f31c:	460d      	mov	r5, r1
 801f31e:	f7e1 f995 	bl	800064c <__aeabi_dmul>
 801f322:	a355      	add	r3, pc, #340	; (adr r3, 801f478 <__ieee754_pow+0x3a8>)
 801f324:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f328:	4606      	mov	r6, r0
 801f32a:	460f      	mov	r7, r1
 801f32c:	4620      	mov	r0, r4
 801f32e:	4629      	mov	r1, r5
 801f330:	f7e1 f98c 	bl	800064c <__aeabi_dmul>
 801f334:	4b5b      	ldr	r3, [pc, #364]	; (801f4a4 <__ieee754_pow+0x3d4>)
 801f336:	4682      	mov	sl, r0
 801f338:	468b      	mov	fp, r1
 801f33a:	2200      	movs	r2, #0
 801f33c:	4620      	mov	r0, r4
 801f33e:	4629      	mov	r1, r5
 801f340:	f7e1 f984 	bl	800064c <__aeabi_dmul>
 801f344:	4602      	mov	r2, r0
 801f346:	460b      	mov	r3, r1
 801f348:	a14d      	add	r1, pc, #308	; (adr r1, 801f480 <__ieee754_pow+0x3b0>)
 801f34a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f34e:	f7e0 ffc5 	bl	80002dc <__aeabi_dsub>
 801f352:	4622      	mov	r2, r4
 801f354:	462b      	mov	r3, r5
 801f356:	f7e1 f979 	bl	800064c <__aeabi_dmul>
 801f35a:	4602      	mov	r2, r0
 801f35c:	460b      	mov	r3, r1
 801f35e:	2000      	movs	r0, #0
 801f360:	4951      	ldr	r1, [pc, #324]	; (801f4a8 <__ieee754_pow+0x3d8>)
 801f362:	f7e0 ffbb 	bl	80002dc <__aeabi_dsub>
 801f366:	4622      	mov	r2, r4
 801f368:	4680      	mov	r8, r0
 801f36a:	4689      	mov	r9, r1
 801f36c:	462b      	mov	r3, r5
 801f36e:	4620      	mov	r0, r4
 801f370:	4629      	mov	r1, r5
 801f372:	f7e1 f96b 	bl	800064c <__aeabi_dmul>
 801f376:	4602      	mov	r2, r0
 801f378:	460b      	mov	r3, r1
 801f37a:	4640      	mov	r0, r8
 801f37c:	4649      	mov	r1, r9
 801f37e:	f7e1 f965 	bl	800064c <__aeabi_dmul>
 801f382:	a341      	add	r3, pc, #260	; (adr r3, 801f488 <__ieee754_pow+0x3b8>)
 801f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f388:	f7e1 f960 	bl	800064c <__aeabi_dmul>
 801f38c:	4602      	mov	r2, r0
 801f38e:	460b      	mov	r3, r1
 801f390:	4650      	mov	r0, sl
 801f392:	4659      	mov	r1, fp
 801f394:	f7e0 ffa2 	bl	80002dc <__aeabi_dsub>
 801f398:	4602      	mov	r2, r0
 801f39a:	460b      	mov	r3, r1
 801f39c:	4680      	mov	r8, r0
 801f39e:	4689      	mov	r9, r1
 801f3a0:	4630      	mov	r0, r6
 801f3a2:	4639      	mov	r1, r7
 801f3a4:	f7e0 ff9c 	bl	80002e0 <__adddf3>
 801f3a8:	2400      	movs	r4, #0
 801f3aa:	4632      	mov	r2, r6
 801f3ac:	463b      	mov	r3, r7
 801f3ae:	4620      	mov	r0, r4
 801f3b0:	460d      	mov	r5, r1
 801f3b2:	f7e0 ff93 	bl	80002dc <__aeabi_dsub>
 801f3b6:	4602      	mov	r2, r0
 801f3b8:	460b      	mov	r3, r1
 801f3ba:	4640      	mov	r0, r8
 801f3bc:	4649      	mov	r1, r9
 801f3be:	f7e0 ff8d 	bl	80002dc <__aeabi_dsub>
 801f3c2:	9b00      	ldr	r3, [sp, #0]
 801f3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f3c6:	3b01      	subs	r3, #1
 801f3c8:	4313      	orrs	r3, r2
 801f3ca:	4682      	mov	sl, r0
 801f3cc:	468b      	mov	fp, r1
 801f3ce:	f040 81f1 	bne.w	801f7b4 <__ieee754_pow+0x6e4>
 801f3d2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801f490 <__ieee754_pow+0x3c0>
 801f3d6:	eeb0 8a47 	vmov.f32	s16, s14
 801f3da:	eef0 8a67 	vmov.f32	s17, s15
 801f3de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f3e2:	2600      	movs	r6, #0
 801f3e4:	4632      	mov	r2, r6
 801f3e6:	463b      	mov	r3, r7
 801f3e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f3ec:	f7e0 ff76 	bl	80002dc <__aeabi_dsub>
 801f3f0:	4622      	mov	r2, r4
 801f3f2:	462b      	mov	r3, r5
 801f3f4:	f7e1 f92a 	bl	800064c <__aeabi_dmul>
 801f3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f3fc:	4680      	mov	r8, r0
 801f3fe:	4689      	mov	r9, r1
 801f400:	4650      	mov	r0, sl
 801f402:	4659      	mov	r1, fp
 801f404:	f7e1 f922 	bl	800064c <__aeabi_dmul>
 801f408:	4602      	mov	r2, r0
 801f40a:	460b      	mov	r3, r1
 801f40c:	4640      	mov	r0, r8
 801f40e:	4649      	mov	r1, r9
 801f410:	f7e0 ff66 	bl	80002e0 <__adddf3>
 801f414:	4632      	mov	r2, r6
 801f416:	463b      	mov	r3, r7
 801f418:	4680      	mov	r8, r0
 801f41a:	4689      	mov	r9, r1
 801f41c:	4620      	mov	r0, r4
 801f41e:	4629      	mov	r1, r5
 801f420:	f7e1 f914 	bl	800064c <__aeabi_dmul>
 801f424:	460b      	mov	r3, r1
 801f426:	4604      	mov	r4, r0
 801f428:	460d      	mov	r5, r1
 801f42a:	4602      	mov	r2, r0
 801f42c:	4649      	mov	r1, r9
 801f42e:	4640      	mov	r0, r8
 801f430:	f7e0 ff56 	bl	80002e0 <__adddf3>
 801f434:	4b1d      	ldr	r3, [pc, #116]	; (801f4ac <__ieee754_pow+0x3dc>)
 801f436:	4299      	cmp	r1, r3
 801f438:	ec45 4b19 	vmov	d9, r4, r5
 801f43c:	4606      	mov	r6, r0
 801f43e:	460f      	mov	r7, r1
 801f440:	468b      	mov	fp, r1
 801f442:	f340 82fe 	ble.w	801fa42 <__ieee754_pow+0x972>
 801f446:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801f44a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801f44e:	4303      	orrs	r3, r0
 801f450:	f000 81f0 	beq.w	801f834 <__ieee754_pow+0x764>
 801f454:	a310      	add	r3, pc, #64	; (adr r3, 801f498 <__ieee754_pow+0x3c8>)
 801f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f45a:	ec51 0b18 	vmov	r0, r1, d8
 801f45e:	f7e1 f8f5 	bl	800064c <__aeabi_dmul>
 801f462:	a30d      	add	r3, pc, #52	; (adr r3, 801f498 <__ieee754_pow+0x3c8>)
 801f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f468:	e6cb      	b.n	801f202 <__ieee754_pow+0x132>
 801f46a:	bf00      	nop
 801f46c:	f3af 8000 	nop.w
 801f470:	60000000 	.word	0x60000000
 801f474:	3ff71547 	.word	0x3ff71547
 801f478:	f85ddf44 	.word	0xf85ddf44
 801f47c:	3e54ae0b 	.word	0x3e54ae0b
 801f480:	55555555 	.word	0x55555555
 801f484:	3fd55555 	.word	0x3fd55555
 801f488:	652b82fe 	.word	0x652b82fe
 801f48c:	3ff71547 	.word	0x3ff71547
 801f490:	00000000 	.word	0x00000000
 801f494:	bff00000 	.word	0xbff00000
 801f498:	8800759c 	.word	0x8800759c
 801f49c:	7e37e43c 	.word	0x7e37e43c
 801f4a0:	3ff00000 	.word	0x3ff00000
 801f4a4:	3fd00000 	.word	0x3fd00000
 801f4a8:	3fe00000 	.word	0x3fe00000
 801f4ac:	408fffff 	.word	0x408fffff
 801f4b0:	4bd7      	ldr	r3, [pc, #860]	; (801f810 <__ieee754_pow+0x740>)
 801f4b2:	ea03 0309 	and.w	r3, r3, r9
 801f4b6:	2200      	movs	r2, #0
 801f4b8:	b92b      	cbnz	r3, 801f4c6 <__ieee754_pow+0x3f6>
 801f4ba:	4bd6      	ldr	r3, [pc, #856]	; (801f814 <__ieee754_pow+0x744>)
 801f4bc:	f7e1 f8c6 	bl	800064c <__aeabi_dmul>
 801f4c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801f4c4:	460c      	mov	r4, r1
 801f4c6:	1523      	asrs	r3, r4, #20
 801f4c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801f4cc:	4413      	add	r3, r2
 801f4ce:	9309      	str	r3, [sp, #36]	; 0x24
 801f4d0:	4bd1      	ldr	r3, [pc, #836]	; (801f818 <__ieee754_pow+0x748>)
 801f4d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801f4d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801f4da:	429c      	cmp	r4, r3
 801f4dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801f4e0:	dd08      	ble.n	801f4f4 <__ieee754_pow+0x424>
 801f4e2:	4bce      	ldr	r3, [pc, #824]	; (801f81c <__ieee754_pow+0x74c>)
 801f4e4:	429c      	cmp	r4, r3
 801f4e6:	f340 8163 	ble.w	801f7b0 <__ieee754_pow+0x6e0>
 801f4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4ec:	3301      	adds	r3, #1
 801f4ee:	9309      	str	r3, [sp, #36]	; 0x24
 801f4f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801f4f4:	2400      	movs	r4, #0
 801f4f6:	00e3      	lsls	r3, r4, #3
 801f4f8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f4fa:	4bc9      	ldr	r3, [pc, #804]	; (801f820 <__ieee754_pow+0x750>)
 801f4fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f500:	ed93 7b00 	vldr	d7, [r3]
 801f504:	4629      	mov	r1, r5
 801f506:	ec53 2b17 	vmov	r2, r3, d7
 801f50a:	eeb0 8a47 	vmov.f32	s16, s14
 801f50e:	eef0 8a67 	vmov.f32	s17, s15
 801f512:	4682      	mov	sl, r0
 801f514:	f7e0 fee2 	bl	80002dc <__aeabi_dsub>
 801f518:	4652      	mov	r2, sl
 801f51a:	4606      	mov	r6, r0
 801f51c:	460f      	mov	r7, r1
 801f51e:	462b      	mov	r3, r5
 801f520:	ec51 0b18 	vmov	r0, r1, d8
 801f524:	f7e0 fedc 	bl	80002e0 <__adddf3>
 801f528:	4602      	mov	r2, r0
 801f52a:	460b      	mov	r3, r1
 801f52c:	2000      	movs	r0, #0
 801f52e:	49bd      	ldr	r1, [pc, #756]	; (801f824 <__ieee754_pow+0x754>)
 801f530:	f7e1 f9b6 	bl	80008a0 <__aeabi_ddiv>
 801f534:	ec41 0b19 	vmov	d9, r0, r1
 801f538:	4602      	mov	r2, r0
 801f53a:	460b      	mov	r3, r1
 801f53c:	4630      	mov	r0, r6
 801f53e:	4639      	mov	r1, r7
 801f540:	f7e1 f884 	bl	800064c <__aeabi_dmul>
 801f544:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f548:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f54c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f550:	2300      	movs	r3, #0
 801f552:	9304      	str	r3, [sp, #16]
 801f554:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801f558:	46ab      	mov	fp, r5
 801f55a:	106d      	asrs	r5, r5, #1
 801f55c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801f560:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801f564:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801f568:	2200      	movs	r2, #0
 801f56a:	4640      	mov	r0, r8
 801f56c:	4649      	mov	r1, r9
 801f56e:	4614      	mov	r4, r2
 801f570:	461d      	mov	r5, r3
 801f572:	f7e1 f86b 	bl	800064c <__aeabi_dmul>
 801f576:	4602      	mov	r2, r0
 801f578:	460b      	mov	r3, r1
 801f57a:	4630      	mov	r0, r6
 801f57c:	4639      	mov	r1, r7
 801f57e:	f7e0 fead 	bl	80002dc <__aeabi_dsub>
 801f582:	ec53 2b18 	vmov	r2, r3, d8
 801f586:	4606      	mov	r6, r0
 801f588:	460f      	mov	r7, r1
 801f58a:	4620      	mov	r0, r4
 801f58c:	4629      	mov	r1, r5
 801f58e:	f7e0 fea5 	bl	80002dc <__aeabi_dsub>
 801f592:	4602      	mov	r2, r0
 801f594:	460b      	mov	r3, r1
 801f596:	4650      	mov	r0, sl
 801f598:	4659      	mov	r1, fp
 801f59a:	f7e0 fe9f 	bl	80002dc <__aeabi_dsub>
 801f59e:	4642      	mov	r2, r8
 801f5a0:	464b      	mov	r3, r9
 801f5a2:	f7e1 f853 	bl	800064c <__aeabi_dmul>
 801f5a6:	4602      	mov	r2, r0
 801f5a8:	460b      	mov	r3, r1
 801f5aa:	4630      	mov	r0, r6
 801f5ac:	4639      	mov	r1, r7
 801f5ae:	f7e0 fe95 	bl	80002dc <__aeabi_dsub>
 801f5b2:	ec53 2b19 	vmov	r2, r3, d9
 801f5b6:	f7e1 f849 	bl	800064c <__aeabi_dmul>
 801f5ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f5be:	ec41 0b18 	vmov	d8, r0, r1
 801f5c2:	4610      	mov	r0, r2
 801f5c4:	4619      	mov	r1, r3
 801f5c6:	f7e1 f841 	bl	800064c <__aeabi_dmul>
 801f5ca:	a37d      	add	r3, pc, #500	; (adr r3, 801f7c0 <__ieee754_pow+0x6f0>)
 801f5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5d0:	4604      	mov	r4, r0
 801f5d2:	460d      	mov	r5, r1
 801f5d4:	f7e1 f83a 	bl	800064c <__aeabi_dmul>
 801f5d8:	a37b      	add	r3, pc, #492	; (adr r3, 801f7c8 <__ieee754_pow+0x6f8>)
 801f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5de:	f7e0 fe7f 	bl	80002e0 <__adddf3>
 801f5e2:	4622      	mov	r2, r4
 801f5e4:	462b      	mov	r3, r5
 801f5e6:	f7e1 f831 	bl	800064c <__aeabi_dmul>
 801f5ea:	a379      	add	r3, pc, #484	; (adr r3, 801f7d0 <__ieee754_pow+0x700>)
 801f5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5f0:	f7e0 fe76 	bl	80002e0 <__adddf3>
 801f5f4:	4622      	mov	r2, r4
 801f5f6:	462b      	mov	r3, r5
 801f5f8:	f7e1 f828 	bl	800064c <__aeabi_dmul>
 801f5fc:	a376      	add	r3, pc, #472	; (adr r3, 801f7d8 <__ieee754_pow+0x708>)
 801f5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f602:	f7e0 fe6d 	bl	80002e0 <__adddf3>
 801f606:	4622      	mov	r2, r4
 801f608:	462b      	mov	r3, r5
 801f60a:	f7e1 f81f 	bl	800064c <__aeabi_dmul>
 801f60e:	a374      	add	r3, pc, #464	; (adr r3, 801f7e0 <__ieee754_pow+0x710>)
 801f610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f614:	f7e0 fe64 	bl	80002e0 <__adddf3>
 801f618:	4622      	mov	r2, r4
 801f61a:	462b      	mov	r3, r5
 801f61c:	f7e1 f816 	bl	800064c <__aeabi_dmul>
 801f620:	a371      	add	r3, pc, #452	; (adr r3, 801f7e8 <__ieee754_pow+0x718>)
 801f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f626:	f7e0 fe5b 	bl	80002e0 <__adddf3>
 801f62a:	4622      	mov	r2, r4
 801f62c:	4606      	mov	r6, r0
 801f62e:	460f      	mov	r7, r1
 801f630:	462b      	mov	r3, r5
 801f632:	4620      	mov	r0, r4
 801f634:	4629      	mov	r1, r5
 801f636:	f7e1 f809 	bl	800064c <__aeabi_dmul>
 801f63a:	4602      	mov	r2, r0
 801f63c:	460b      	mov	r3, r1
 801f63e:	4630      	mov	r0, r6
 801f640:	4639      	mov	r1, r7
 801f642:	f7e1 f803 	bl	800064c <__aeabi_dmul>
 801f646:	4642      	mov	r2, r8
 801f648:	4604      	mov	r4, r0
 801f64a:	460d      	mov	r5, r1
 801f64c:	464b      	mov	r3, r9
 801f64e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f652:	f7e0 fe45 	bl	80002e0 <__adddf3>
 801f656:	ec53 2b18 	vmov	r2, r3, d8
 801f65a:	f7e0 fff7 	bl	800064c <__aeabi_dmul>
 801f65e:	4622      	mov	r2, r4
 801f660:	462b      	mov	r3, r5
 801f662:	f7e0 fe3d 	bl	80002e0 <__adddf3>
 801f666:	4642      	mov	r2, r8
 801f668:	4682      	mov	sl, r0
 801f66a:	468b      	mov	fp, r1
 801f66c:	464b      	mov	r3, r9
 801f66e:	4640      	mov	r0, r8
 801f670:	4649      	mov	r1, r9
 801f672:	f7e0 ffeb 	bl	800064c <__aeabi_dmul>
 801f676:	4b6c      	ldr	r3, [pc, #432]	; (801f828 <__ieee754_pow+0x758>)
 801f678:	2200      	movs	r2, #0
 801f67a:	4606      	mov	r6, r0
 801f67c:	460f      	mov	r7, r1
 801f67e:	f7e0 fe2f 	bl	80002e0 <__adddf3>
 801f682:	4652      	mov	r2, sl
 801f684:	465b      	mov	r3, fp
 801f686:	f7e0 fe2b 	bl	80002e0 <__adddf3>
 801f68a:	9c04      	ldr	r4, [sp, #16]
 801f68c:	460d      	mov	r5, r1
 801f68e:	4622      	mov	r2, r4
 801f690:	460b      	mov	r3, r1
 801f692:	4640      	mov	r0, r8
 801f694:	4649      	mov	r1, r9
 801f696:	f7e0 ffd9 	bl	800064c <__aeabi_dmul>
 801f69a:	4b63      	ldr	r3, [pc, #396]	; (801f828 <__ieee754_pow+0x758>)
 801f69c:	4680      	mov	r8, r0
 801f69e:	4689      	mov	r9, r1
 801f6a0:	2200      	movs	r2, #0
 801f6a2:	4620      	mov	r0, r4
 801f6a4:	4629      	mov	r1, r5
 801f6a6:	f7e0 fe19 	bl	80002dc <__aeabi_dsub>
 801f6aa:	4632      	mov	r2, r6
 801f6ac:	463b      	mov	r3, r7
 801f6ae:	f7e0 fe15 	bl	80002dc <__aeabi_dsub>
 801f6b2:	4602      	mov	r2, r0
 801f6b4:	460b      	mov	r3, r1
 801f6b6:	4650      	mov	r0, sl
 801f6b8:	4659      	mov	r1, fp
 801f6ba:	f7e0 fe0f 	bl	80002dc <__aeabi_dsub>
 801f6be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f6c2:	f7e0 ffc3 	bl	800064c <__aeabi_dmul>
 801f6c6:	4622      	mov	r2, r4
 801f6c8:	4606      	mov	r6, r0
 801f6ca:	460f      	mov	r7, r1
 801f6cc:	462b      	mov	r3, r5
 801f6ce:	ec51 0b18 	vmov	r0, r1, d8
 801f6d2:	f7e0 ffbb 	bl	800064c <__aeabi_dmul>
 801f6d6:	4602      	mov	r2, r0
 801f6d8:	460b      	mov	r3, r1
 801f6da:	4630      	mov	r0, r6
 801f6dc:	4639      	mov	r1, r7
 801f6de:	f7e0 fdff 	bl	80002e0 <__adddf3>
 801f6e2:	4606      	mov	r6, r0
 801f6e4:	460f      	mov	r7, r1
 801f6e6:	4602      	mov	r2, r0
 801f6e8:	460b      	mov	r3, r1
 801f6ea:	4640      	mov	r0, r8
 801f6ec:	4649      	mov	r1, r9
 801f6ee:	f7e0 fdf7 	bl	80002e0 <__adddf3>
 801f6f2:	9c04      	ldr	r4, [sp, #16]
 801f6f4:	a33e      	add	r3, pc, #248	; (adr r3, 801f7f0 <__ieee754_pow+0x720>)
 801f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6fa:	4620      	mov	r0, r4
 801f6fc:	460d      	mov	r5, r1
 801f6fe:	f7e0 ffa5 	bl	800064c <__aeabi_dmul>
 801f702:	4642      	mov	r2, r8
 801f704:	ec41 0b18 	vmov	d8, r0, r1
 801f708:	464b      	mov	r3, r9
 801f70a:	4620      	mov	r0, r4
 801f70c:	4629      	mov	r1, r5
 801f70e:	f7e0 fde5 	bl	80002dc <__aeabi_dsub>
 801f712:	4602      	mov	r2, r0
 801f714:	460b      	mov	r3, r1
 801f716:	4630      	mov	r0, r6
 801f718:	4639      	mov	r1, r7
 801f71a:	f7e0 fddf 	bl	80002dc <__aeabi_dsub>
 801f71e:	a336      	add	r3, pc, #216	; (adr r3, 801f7f8 <__ieee754_pow+0x728>)
 801f720:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f724:	f7e0 ff92 	bl	800064c <__aeabi_dmul>
 801f728:	a335      	add	r3, pc, #212	; (adr r3, 801f800 <__ieee754_pow+0x730>)
 801f72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f72e:	4606      	mov	r6, r0
 801f730:	460f      	mov	r7, r1
 801f732:	4620      	mov	r0, r4
 801f734:	4629      	mov	r1, r5
 801f736:	f7e0 ff89 	bl	800064c <__aeabi_dmul>
 801f73a:	4602      	mov	r2, r0
 801f73c:	460b      	mov	r3, r1
 801f73e:	4630      	mov	r0, r6
 801f740:	4639      	mov	r1, r7
 801f742:	f7e0 fdcd 	bl	80002e0 <__adddf3>
 801f746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f748:	4b38      	ldr	r3, [pc, #224]	; (801f82c <__ieee754_pow+0x75c>)
 801f74a:	4413      	add	r3, r2
 801f74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f750:	f7e0 fdc6 	bl	80002e0 <__adddf3>
 801f754:	4682      	mov	sl, r0
 801f756:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f758:	468b      	mov	fp, r1
 801f75a:	f7e0 ff0d 	bl	8000578 <__aeabi_i2d>
 801f75e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f760:	4b33      	ldr	r3, [pc, #204]	; (801f830 <__ieee754_pow+0x760>)
 801f762:	4413      	add	r3, r2
 801f764:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f768:	4606      	mov	r6, r0
 801f76a:	460f      	mov	r7, r1
 801f76c:	4652      	mov	r2, sl
 801f76e:	465b      	mov	r3, fp
 801f770:	ec51 0b18 	vmov	r0, r1, d8
 801f774:	f7e0 fdb4 	bl	80002e0 <__adddf3>
 801f778:	4642      	mov	r2, r8
 801f77a:	464b      	mov	r3, r9
 801f77c:	f7e0 fdb0 	bl	80002e0 <__adddf3>
 801f780:	4632      	mov	r2, r6
 801f782:	463b      	mov	r3, r7
 801f784:	f7e0 fdac 	bl	80002e0 <__adddf3>
 801f788:	9c04      	ldr	r4, [sp, #16]
 801f78a:	4632      	mov	r2, r6
 801f78c:	463b      	mov	r3, r7
 801f78e:	4620      	mov	r0, r4
 801f790:	460d      	mov	r5, r1
 801f792:	f7e0 fda3 	bl	80002dc <__aeabi_dsub>
 801f796:	4642      	mov	r2, r8
 801f798:	464b      	mov	r3, r9
 801f79a:	f7e0 fd9f 	bl	80002dc <__aeabi_dsub>
 801f79e:	ec53 2b18 	vmov	r2, r3, d8
 801f7a2:	f7e0 fd9b 	bl	80002dc <__aeabi_dsub>
 801f7a6:	4602      	mov	r2, r0
 801f7a8:	460b      	mov	r3, r1
 801f7aa:	4650      	mov	r0, sl
 801f7ac:	4659      	mov	r1, fp
 801f7ae:	e606      	b.n	801f3be <__ieee754_pow+0x2ee>
 801f7b0:	2401      	movs	r4, #1
 801f7b2:	e6a0      	b.n	801f4f6 <__ieee754_pow+0x426>
 801f7b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801f808 <__ieee754_pow+0x738>
 801f7b8:	e60d      	b.n	801f3d6 <__ieee754_pow+0x306>
 801f7ba:	bf00      	nop
 801f7bc:	f3af 8000 	nop.w
 801f7c0:	4a454eef 	.word	0x4a454eef
 801f7c4:	3fca7e28 	.word	0x3fca7e28
 801f7c8:	93c9db65 	.word	0x93c9db65
 801f7cc:	3fcd864a 	.word	0x3fcd864a
 801f7d0:	a91d4101 	.word	0xa91d4101
 801f7d4:	3fd17460 	.word	0x3fd17460
 801f7d8:	518f264d 	.word	0x518f264d
 801f7dc:	3fd55555 	.word	0x3fd55555
 801f7e0:	db6fabff 	.word	0xdb6fabff
 801f7e4:	3fdb6db6 	.word	0x3fdb6db6
 801f7e8:	33333303 	.word	0x33333303
 801f7ec:	3fe33333 	.word	0x3fe33333
 801f7f0:	e0000000 	.word	0xe0000000
 801f7f4:	3feec709 	.word	0x3feec709
 801f7f8:	dc3a03fd 	.word	0xdc3a03fd
 801f7fc:	3feec709 	.word	0x3feec709
 801f800:	145b01f5 	.word	0x145b01f5
 801f804:	be3e2fe0 	.word	0xbe3e2fe0
 801f808:	00000000 	.word	0x00000000
 801f80c:	3ff00000 	.word	0x3ff00000
 801f810:	7ff00000 	.word	0x7ff00000
 801f814:	43400000 	.word	0x43400000
 801f818:	0003988e 	.word	0x0003988e
 801f81c:	000bb679 	.word	0x000bb679
 801f820:	08023b50 	.word	0x08023b50
 801f824:	3ff00000 	.word	0x3ff00000
 801f828:	40080000 	.word	0x40080000
 801f82c:	08023b70 	.word	0x08023b70
 801f830:	08023b60 	.word	0x08023b60
 801f834:	a3b5      	add	r3, pc, #724	; (adr r3, 801fb0c <__ieee754_pow+0xa3c>)
 801f836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f83a:	4640      	mov	r0, r8
 801f83c:	4649      	mov	r1, r9
 801f83e:	f7e0 fd4f 	bl	80002e0 <__adddf3>
 801f842:	4622      	mov	r2, r4
 801f844:	ec41 0b1a 	vmov	d10, r0, r1
 801f848:	462b      	mov	r3, r5
 801f84a:	4630      	mov	r0, r6
 801f84c:	4639      	mov	r1, r7
 801f84e:	f7e0 fd45 	bl	80002dc <__aeabi_dsub>
 801f852:	4602      	mov	r2, r0
 801f854:	460b      	mov	r3, r1
 801f856:	ec51 0b1a 	vmov	r0, r1, d10
 801f85a:	f7e1 f987 	bl	8000b6c <__aeabi_dcmpgt>
 801f85e:	2800      	cmp	r0, #0
 801f860:	f47f adf8 	bne.w	801f454 <__ieee754_pow+0x384>
 801f864:	4aa4      	ldr	r2, [pc, #656]	; (801faf8 <__ieee754_pow+0xa28>)
 801f866:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f86a:	4293      	cmp	r3, r2
 801f86c:	f340 810b 	ble.w	801fa86 <__ieee754_pow+0x9b6>
 801f870:	151b      	asrs	r3, r3, #20
 801f872:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801f876:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801f87a:	fa4a f303 	asr.w	r3, sl, r3
 801f87e:	445b      	add	r3, fp
 801f880:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f884:	4e9d      	ldr	r6, [pc, #628]	; (801fafc <__ieee754_pow+0xa2c>)
 801f886:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801f88a:	4116      	asrs	r6, r2
 801f88c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801f890:	2000      	movs	r0, #0
 801f892:	ea23 0106 	bic.w	r1, r3, r6
 801f896:	f1c2 0214 	rsb	r2, r2, #20
 801f89a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801f89e:	fa4a fa02 	asr.w	sl, sl, r2
 801f8a2:	f1bb 0f00 	cmp.w	fp, #0
 801f8a6:	4602      	mov	r2, r0
 801f8a8:	460b      	mov	r3, r1
 801f8aa:	4620      	mov	r0, r4
 801f8ac:	4629      	mov	r1, r5
 801f8ae:	bfb8      	it	lt
 801f8b0:	f1ca 0a00 	rsblt	sl, sl, #0
 801f8b4:	f7e0 fd12 	bl	80002dc <__aeabi_dsub>
 801f8b8:	ec41 0b19 	vmov	d9, r0, r1
 801f8bc:	4642      	mov	r2, r8
 801f8be:	464b      	mov	r3, r9
 801f8c0:	ec51 0b19 	vmov	r0, r1, d9
 801f8c4:	f7e0 fd0c 	bl	80002e0 <__adddf3>
 801f8c8:	2400      	movs	r4, #0
 801f8ca:	a379      	add	r3, pc, #484	; (adr r3, 801fab0 <__ieee754_pow+0x9e0>)
 801f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8d0:	4620      	mov	r0, r4
 801f8d2:	460d      	mov	r5, r1
 801f8d4:	f7e0 feba 	bl	800064c <__aeabi_dmul>
 801f8d8:	ec53 2b19 	vmov	r2, r3, d9
 801f8dc:	4606      	mov	r6, r0
 801f8de:	460f      	mov	r7, r1
 801f8e0:	4620      	mov	r0, r4
 801f8e2:	4629      	mov	r1, r5
 801f8e4:	f7e0 fcfa 	bl	80002dc <__aeabi_dsub>
 801f8e8:	4602      	mov	r2, r0
 801f8ea:	460b      	mov	r3, r1
 801f8ec:	4640      	mov	r0, r8
 801f8ee:	4649      	mov	r1, r9
 801f8f0:	f7e0 fcf4 	bl	80002dc <__aeabi_dsub>
 801f8f4:	a370      	add	r3, pc, #448	; (adr r3, 801fab8 <__ieee754_pow+0x9e8>)
 801f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8fa:	f7e0 fea7 	bl	800064c <__aeabi_dmul>
 801f8fe:	a370      	add	r3, pc, #448	; (adr r3, 801fac0 <__ieee754_pow+0x9f0>)
 801f900:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f904:	4680      	mov	r8, r0
 801f906:	4689      	mov	r9, r1
 801f908:	4620      	mov	r0, r4
 801f90a:	4629      	mov	r1, r5
 801f90c:	f7e0 fe9e 	bl	800064c <__aeabi_dmul>
 801f910:	4602      	mov	r2, r0
 801f912:	460b      	mov	r3, r1
 801f914:	4640      	mov	r0, r8
 801f916:	4649      	mov	r1, r9
 801f918:	f7e0 fce2 	bl	80002e0 <__adddf3>
 801f91c:	4604      	mov	r4, r0
 801f91e:	460d      	mov	r5, r1
 801f920:	4602      	mov	r2, r0
 801f922:	460b      	mov	r3, r1
 801f924:	4630      	mov	r0, r6
 801f926:	4639      	mov	r1, r7
 801f928:	f7e0 fcda 	bl	80002e0 <__adddf3>
 801f92c:	4632      	mov	r2, r6
 801f92e:	463b      	mov	r3, r7
 801f930:	4680      	mov	r8, r0
 801f932:	4689      	mov	r9, r1
 801f934:	f7e0 fcd2 	bl	80002dc <__aeabi_dsub>
 801f938:	4602      	mov	r2, r0
 801f93a:	460b      	mov	r3, r1
 801f93c:	4620      	mov	r0, r4
 801f93e:	4629      	mov	r1, r5
 801f940:	f7e0 fccc 	bl	80002dc <__aeabi_dsub>
 801f944:	4642      	mov	r2, r8
 801f946:	4606      	mov	r6, r0
 801f948:	460f      	mov	r7, r1
 801f94a:	464b      	mov	r3, r9
 801f94c:	4640      	mov	r0, r8
 801f94e:	4649      	mov	r1, r9
 801f950:	f7e0 fe7c 	bl	800064c <__aeabi_dmul>
 801f954:	a35c      	add	r3, pc, #368	; (adr r3, 801fac8 <__ieee754_pow+0x9f8>)
 801f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f95a:	4604      	mov	r4, r0
 801f95c:	460d      	mov	r5, r1
 801f95e:	f7e0 fe75 	bl	800064c <__aeabi_dmul>
 801f962:	a35b      	add	r3, pc, #364	; (adr r3, 801fad0 <__ieee754_pow+0xa00>)
 801f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f968:	f7e0 fcb8 	bl	80002dc <__aeabi_dsub>
 801f96c:	4622      	mov	r2, r4
 801f96e:	462b      	mov	r3, r5
 801f970:	f7e0 fe6c 	bl	800064c <__aeabi_dmul>
 801f974:	a358      	add	r3, pc, #352	; (adr r3, 801fad8 <__ieee754_pow+0xa08>)
 801f976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f97a:	f7e0 fcb1 	bl	80002e0 <__adddf3>
 801f97e:	4622      	mov	r2, r4
 801f980:	462b      	mov	r3, r5
 801f982:	f7e0 fe63 	bl	800064c <__aeabi_dmul>
 801f986:	a356      	add	r3, pc, #344	; (adr r3, 801fae0 <__ieee754_pow+0xa10>)
 801f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f98c:	f7e0 fca6 	bl	80002dc <__aeabi_dsub>
 801f990:	4622      	mov	r2, r4
 801f992:	462b      	mov	r3, r5
 801f994:	f7e0 fe5a 	bl	800064c <__aeabi_dmul>
 801f998:	a353      	add	r3, pc, #332	; (adr r3, 801fae8 <__ieee754_pow+0xa18>)
 801f99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f99e:	f7e0 fc9f 	bl	80002e0 <__adddf3>
 801f9a2:	4622      	mov	r2, r4
 801f9a4:	462b      	mov	r3, r5
 801f9a6:	f7e0 fe51 	bl	800064c <__aeabi_dmul>
 801f9aa:	4602      	mov	r2, r0
 801f9ac:	460b      	mov	r3, r1
 801f9ae:	4640      	mov	r0, r8
 801f9b0:	4649      	mov	r1, r9
 801f9b2:	f7e0 fc93 	bl	80002dc <__aeabi_dsub>
 801f9b6:	4604      	mov	r4, r0
 801f9b8:	460d      	mov	r5, r1
 801f9ba:	4602      	mov	r2, r0
 801f9bc:	460b      	mov	r3, r1
 801f9be:	4640      	mov	r0, r8
 801f9c0:	4649      	mov	r1, r9
 801f9c2:	f7e0 fe43 	bl	800064c <__aeabi_dmul>
 801f9c6:	2200      	movs	r2, #0
 801f9c8:	ec41 0b19 	vmov	d9, r0, r1
 801f9cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	4629      	mov	r1, r5
 801f9d4:	f7e0 fc82 	bl	80002dc <__aeabi_dsub>
 801f9d8:	4602      	mov	r2, r0
 801f9da:	460b      	mov	r3, r1
 801f9dc:	ec51 0b19 	vmov	r0, r1, d9
 801f9e0:	f7e0 ff5e 	bl	80008a0 <__aeabi_ddiv>
 801f9e4:	4632      	mov	r2, r6
 801f9e6:	4604      	mov	r4, r0
 801f9e8:	460d      	mov	r5, r1
 801f9ea:	463b      	mov	r3, r7
 801f9ec:	4640      	mov	r0, r8
 801f9ee:	4649      	mov	r1, r9
 801f9f0:	f7e0 fe2c 	bl	800064c <__aeabi_dmul>
 801f9f4:	4632      	mov	r2, r6
 801f9f6:	463b      	mov	r3, r7
 801f9f8:	f7e0 fc72 	bl	80002e0 <__adddf3>
 801f9fc:	4602      	mov	r2, r0
 801f9fe:	460b      	mov	r3, r1
 801fa00:	4620      	mov	r0, r4
 801fa02:	4629      	mov	r1, r5
 801fa04:	f7e0 fc6a 	bl	80002dc <__aeabi_dsub>
 801fa08:	4642      	mov	r2, r8
 801fa0a:	464b      	mov	r3, r9
 801fa0c:	f7e0 fc66 	bl	80002dc <__aeabi_dsub>
 801fa10:	460b      	mov	r3, r1
 801fa12:	4602      	mov	r2, r0
 801fa14:	493a      	ldr	r1, [pc, #232]	; (801fb00 <__ieee754_pow+0xa30>)
 801fa16:	2000      	movs	r0, #0
 801fa18:	f7e0 fc60 	bl	80002dc <__aeabi_dsub>
 801fa1c:	e9cd 0100 	strd	r0, r1, [sp]
 801fa20:	9b01      	ldr	r3, [sp, #4]
 801fa22:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801fa26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fa2a:	da2f      	bge.n	801fa8c <__ieee754_pow+0x9bc>
 801fa2c:	4650      	mov	r0, sl
 801fa2e:	ed9d 0b00 	vldr	d0, [sp]
 801fa32:	f000 f9cd 	bl	801fdd0 <scalbn>
 801fa36:	ec51 0b10 	vmov	r0, r1, d0
 801fa3a:	ec53 2b18 	vmov	r2, r3, d8
 801fa3e:	f7ff bbe0 	b.w	801f202 <__ieee754_pow+0x132>
 801fa42:	4b30      	ldr	r3, [pc, #192]	; (801fb04 <__ieee754_pow+0xa34>)
 801fa44:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801fa48:	429e      	cmp	r6, r3
 801fa4a:	f77f af0b 	ble.w	801f864 <__ieee754_pow+0x794>
 801fa4e:	4b2e      	ldr	r3, [pc, #184]	; (801fb08 <__ieee754_pow+0xa38>)
 801fa50:	440b      	add	r3, r1
 801fa52:	4303      	orrs	r3, r0
 801fa54:	d00b      	beq.n	801fa6e <__ieee754_pow+0x99e>
 801fa56:	a326      	add	r3, pc, #152	; (adr r3, 801faf0 <__ieee754_pow+0xa20>)
 801fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa5c:	ec51 0b18 	vmov	r0, r1, d8
 801fa60:	f7e0 fdf4 	bl	800064c <__aeabi_dmul>
 801fa64:	a322      	add	r3, pc, #136	; (adr r3, 801faf0 <__ieee754_pow+0xa20>)
 801fa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa6a:	f7ff bbca 	b.w	801f202 <__ieee754_pow+0x132>
 801fa6e:	4622      	mov	r2, r4
 801fa70:	462b      	mov	r3, r5
 801fa72:	f7e0 fc33 	bl	80002dc <__aeabi_dsub>
 801fa76:	4642      	mov	r2, r8
 801fa78:	464b      	mov	r3, r9
 801fa7a:	f7e1 f86d 	bl	8000b58 <__aeabi_dcmpge>
 801fa7e:	2800      	cmp	r0, #0
 801fa80:	f43f aef0 	beq.w	801f864 <__ieee754_pow+0x794>
 801fa84:	e7e7      	b.n	801fa56 <__ieee754_pow+0x986>
 801fa86:	f04f 0a00 	mov.w	sl, #0
 801fa8a:	e717      	b.n	801f8bc <__ieee754_pow+0x7ec>
 801fa8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fa90:	4619      	mov	r1, r3
 801fa92:	e7d2      	b.n	801fa3a <__ieee754_pow+0x96a>
 801fa94:	491a      	ldr	r1, [pc, #104]	; (801fb00 <__ieee754_pow+0xa30>)
 801fa96:	2000      	movs	r0, #0
 801fa98:	f7ff bb9e 	b.w	801f1d8 <__ieee754_pow+0x108>
 801fa9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801faa0:	f7ff bb9a 	b.w	801f1d8 <__ieee754_pow+0x108>
 801faa4:	9000      	str	r0, [sp, #0]
 801faa6:	f7ff bb76 	b.w	801f196 <__ieee754_pow+0xc6>
 801faaa:	2100      	movs	r1, #0
 801faac:	f7ff bb60 	b.w	801f170 <__ieee754_pow+0xa0>
 801fab0:	00000000 	.word	0x00000000
 801fab4:	3fe62e43 	.word	0x3fe62e43
 801fab8:	fefa39ef 	.word	0xfefa39ef
 801fabc:	3fe62e42 	.word	0x3fe62e42
 801fac0:	0ca86c39 	.word	0x0ca86c39
 801fac4:	be205c61 	.word	0xbe205c61
 801fac8:	72bea4d0 	.word	0x72bea4d0
 801facc:	3e663769 	.word	0x3e663769
 801fad0:	c5d26bf1 	.word	0xc5d26bf1
 801fad4:	3ebbbd41 	.word	0x3ebbbd41
 801fad8:	af25de2c 	.word	0xaf25de2c
 801fadc:	3f11566a 	.word	0x3f11566a
 801fae0:	16bebd93 	.word	0x16bebd93
 801fae4:	3f66c16c 	.word	0x3f66c16c
 801fae8:	5555553e 	.word	0x5555553e
 801faec:	3fc55555 	.word	0x3fc55555
 801faf0:	c2f8f359 	.word	0xc2f8f359
 801faf4:	01a56e1f 	.word	0x01a56e1f
 801faf8:	3fe00000 	.word	0x3fe00000
 801fafc:	000fffff 	.word	0x000fffff
 801fb00:	3ff00000 	.word	0x3ff00000
 801fb04:	4090cbff 	.word	0x4090cbff
 801fb08:	3f6f3400 	.word	0x3f6f3400
 801fb0c:	652b82fe 	.word	0x652b82fe
 801fb10:	3c971547 	.word	0x3c971547

0801fb14 <__ieee754_sqrt>:
 801fb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb18:	ec55 4b10 	vmov	r4, r5, d0
 801fb1c:	4e56      	ldr	r6, [pc, #344]	; (801fc78 <__ieee754_sqrt+0x164>)
 801fb1e:	43ae      	bics	r6, r5
 801fb20:	ee10 0a10 	vmov	r0, s0
 801fb24:	ee10 3a10 	vmov	r3, s0
 801fb28:	4629      	mov	r1, r5
 801fb2a:	462a      	mov	r2, r5
 801fb2c:	d110      	bne.n	801fb50 <__ieee754_sqrt+0x3c>
 801fb2e:	ee10 2a10 	vmov	r2, s0
 801fb32:	462b      	mov	r3, r5
 801fb34:	f7e0 fd8a 	bl	800064c <__aeabi_dmul>
 801fb38:	4602      	mov	r2, r0
 801fb3a:	460b      	mov	r3, r1
 801fb3c:	4620      	mov	r0, r4
 801fb3e:	4629      	mov	r1, r5
 801fb40:	f7e0 fbce 	bl	80002e0 <__adddf3>
 801fb44:	4604      	mov	r4, r0
 801fb46:	460d      	mov	r5, r1
 801fb48:	ec45 4b10 	vmov	d0, r4, r5
 801fb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb50:	2d00      	cmp	r5, #0
 801fb52:	dc10      	bgt.n	801fb76 <__ieee754_sqrt+0x62>
 801fb54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801fb58:	4330      	orrs	r0, r6
 801fb5a:	d0f5      	beq.n	801fb48 <__ieee754_sqrt+0x34>
 801fb5c:	b15d      	cbz	r5, 801fb76 <__ieee754_sqrt+0x62>
 801fb5e:	ee10 2a10 	vmov	r2, s0
 801fb62:	462b      	mov	r3, r5
 801fb64:	ee10 0a10 	vmov	r0, s0
 801fb68:	f7e0 fbb8 	bl	80002dc <__aeabi_dsub>
 801fb6c:	4602      	mov	r2, r0
 801fb6e:	460b      	mov	r3, r1
 801fb70:	f7e0 fe96 	bl	80008a0 <__aeabi_ddiv>
 801fb74:	e7e6      	b.n	801fb44 <__ieee754_sqrt+0x30>
 801fb76:	1509      	asrs	r1, r1, #20
 801fb78:	d076      	beq.n	801fc68 <__ieee754_sqrt+0x154>
 801fb7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801fb7e:	07ce      	lsls	r6, r1, #31
 801fb80:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801fb84:	bf5e      	ittt	pl
 801fb86:	0fda      	lsrpl	r2, r3, #31
 801fb88:	005b      	lslpl	r3, r3, #1
 801fb8a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801fb8e:	0fda      	lsrs	r2, r3, #31
 801fb90:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801fb94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801fb98:	2000      	movs	r0, #0
 801fb9a:	106d      	asrs	r5, r5, #1
 801fb9c:	005b      	lsls	r3, r3, #1
 801fb9e:	f04f 0e16 	mov.w	lr, #22
 801fba2:	4684      	mov	ip, r0
 801fba4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801fba8:	eb0c 0401 	add.w	r4, ip, r1
 801fbac:	4294      	cmp	r4, r2
 801fbae:	bfde      	ittt	le
 801fbb0:	1b12      	suble	r2, r2, r4
 801fbb2:	eb04 0c01 	addle.w	ip, r4, r1
 801fbb6:	1840      	addle	r0, r0, r1
 801fbb8:	0052      	lsls	r2, r2, #1
 801fbba:	f1be 0e01 	subs.w	lr, lr, #1
 801fbbe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801fbc2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801fbc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fbca:	d1ed      	bne.n	801fba8 <__ieee754_sqrt+0x94>
 801fbcc:	4671      	mov	r1, lr
 801fbce:	2720      	movs	r7, #32
 801fbd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801fbd4:	4562      	cmp	r2, ip
 801fbd6:	eb04 060e 	add.w	r6, r4, lr
 801fbda:	dc02      	bgt.n	801fbe2 <__ieee754_sqrt+0xce>
 801fbdc:	d113      	bne.n	801fc06 <__ieee754_sqrt+0xf2>
 801fbde:	429e      	cmp	r6, r3
 801fbe0:	d811      	bhi.n	801fc06 <__ieee754_sqrt+0xf2>
 801fbe2:	2e00      	cmp	r6, #0
 801fbe4:	eb06 0e04 	add.w	lr, r6, r4
 801fbe8:	da43      	bge.n	801fc72 <__ieee754_sqrt+0x15e>
 801fbea:	f1be 0f00 	cmp.w	lr, #0
 801fbee:	db40      	blt.n	801fc72 <__ieee754_sqrt+0x15e>
 801fbf0:	f10c 0801 	add.w	r8, ip, #1
 801fbf4:	eba2 020c 	sub.w	r2, r2, ip
 801fbf8:	429e      	cmp	r6, r3
 801fbfa:	bf88      	it	hi
 801fbfc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801fc00:	1b9b      	subs	r3, r3, r6
 801fc02:	4421      	add	r1, r4
 801fc04:	46c4      	mov	ip, r8
 801fc06:	0052      	lsls	r2, r2, #1
 801fc08:	3f01      	subs	r7, #1
 801fc0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801fc0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fc12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fc16:	d1dd      	bne.n	801fbd4 <__ieee754_sqrt+0xc0>
 801fc18:	4313      	orrs	r3, r2
 801fc1a:	d006      	beq.n	801fc2a <__ieee754_sqrt+0x116>
 801fc1c:	1c4c      	adds	r4, r1, #1
 801fc1e:	bf13      	iteet	ne
 801fc20:	3101      	addne	r1, #1
 801fc22:	3001      	addeq	r0, #1
 801fc24:	4639      	moveq	r1, r7
 801fc26:	f021 0101 	bicne.w	r1, r1, #1
 801fc2a:	1043      	asrs	r3, r0, #1
 801fc2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801fc30:	0849      	lsrs	r1, r1, #1
 801fc32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801fc36:	07c2      	lsls	r2, r0, #31
 801fc38:	bf48      	it	mi
 801fc3a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801fc3e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801fc42:	460c      	mov	r4, r1
 801fc44:	463d      	mov	r5, r7
 801fc46:	e77f      	b.n	801fb48 <__ieee754_sqrt+0x34>
 801fc48:	0ada      	lsrs	r2, r3, #11
 801fc4a:	3815      	subs	r0, #21
 801fc4c:	055b      	lsls	r3, r3, #21
 801fc4e:	2a00      	cmp	r2, #0
 801fc50:	d0fa      	beq.n	801fc48 <__ieee754_sqrt+0x134>
 801fc52:	02d7      	lsls	r7, r2, #11
 801fc54:	d50a      	bpl.n	801fc6c <__ieee754_sqrt+0x158>
 801fc56:	f1c1 0420 	rsb	r4, r1, #32
 801fc5a:	fa23 f404 	lsr.w	r4, r3, r4
 801fc5e:	1e4d      	subs	r5, r1, #1
 801fc60:	408b      	lsls	r3, r1
 801fc62:	4322      	orrs	r2, r4
 801fc64:	1b41      	subs	r1, r0, r5
 801fc66:	e788      	b.n	801fb7a <__ieee754_sqrt+0x66>
 801fc68:	4608      	mov	r0, r1
 801fc6a:	e7f0      	b.n	801fc4e <__ieee754_sqrt+0x13a>
 801fc6c:	0052      	lsls	r2, r2, #1
 801fc6e:	3101      	adds	r1, #1
 801fc70:	e7ef      	b.n	801fc52 <__ieee754_sqrt+0x13e>
 801fc72:	46e0      	mov	r8, ip
 801fc74:	e7be      	b.n	801fbf4 <__ieee754_sqrt+0xe0>
 801fc76:	bf00      	nop
 801fc78:	7ff00000 	.word	0x7ff00000

0801fc7c <fabs>:
 801fc7c:	ec51 0b10 	vmov	r0, r1, d0
 801fc80:	ee10 2a10 	vmov	r2, s0
 801fc84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fc88:	ec43 2b10 	vmov	d0, r2, r3
 801fc8c:	4770      	bx	lr

0801fc8e <finite>:
 801fc8e:	b082      	sub	sp, #8
 801fc90:	ed8d 0b00 	vstr	d0, [sp]
 801fc94:	9801      	ldr	r0, [sp, #4]
 801fc96:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801fc9a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801fc9e:	0fc0      	lsrs	r0, r0, #31
 801fca0:	b002      	add	sp, #8
 801fca2:	4770      	bx	lr
 801fca4:	0000      	movs	r0, r0
	...

0801fca8 <nan>:
 801fca8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801fcb0 <nan+0x8>
 801fcac:	4770      	bx	lr
 801fcae:	bf00      	nop
 801fcb0:	00000000 	.word	0x00000000
 801fcb4:	7ff80000 	.word	0x7ff80000

0801fcb8 <rint>:
 801fcb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fcba:	ec51 0b10 	vmov	r0, r1, d0
 801fcbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fcc2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801fcc6:	2e13      	cmp	r6, #19
 801fcc8:	ee10 4a10 	vmov	r4, s0
 801fccc:	460b      	mov	r3, r1
 801fcce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801fcd2:	dc58      	bgt.n	801fd86 <rint+0xce>
 801fcd4:	2e00      	cmp	r6, #0
 801fcd6:	da2b      	bge.n	801fd30 <rint+0x78>
 801fcd8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801fcdc:	4302      	orrs	r2, r0
 801fcde:	d023      	beq.n	801fd28 <rint+0x70>
 801fce0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801fce4:	4302      	orrs	r2, r0
 801fce6:	4254      	negs	r4, r2
 801fce8:	4314      	orrs	r4, r2
 801fcea:	0c4b      	lsrs	r3, r1, #17
 801fcec:	0b24      	lsrs	r4, r4, #12
 801fcee:	045b      	lsls	r3, r3, #17
 801fcf0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801fcf4:	ea44 0103 	orr.w	r1, r4, r3
 801fcf8:	4b32      	ldr	r3, [pc, #200]	; (801fdc4 <rint+0x10c>)
 801fcfa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801fcfe:	e9d3 6700 	ldrd	r6, r7, [r3]
 801fd02:	4602      	mov	r2, r0
 801fd04:	460b      	mov	r3, r1
 801fd06:	4630      	mov	r0, r6
 801fd08:	4639      	mov	r1, r7
 801fd0a:	f7e0 fae9 	bl	80002e0 <__adddf3>
 801fd0e:	e9cd 0100 	strd	r0, r1, [sp]
 801fd12:	463b      	mov	r3, r7
 801fd14:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fd18:	4632      	mov	r2, r6
 801fd1a:	f7e0 fadf 	bl	80002dc <__aeabi_dsub>
 801fd1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fd22:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801fd26:	4639      	mov	r1, r7
 801fd28:	ec41 0b10 	vmov	d0, r0, r1
 801fd2c:	b003      	add	sp, #12
 801fd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd30:	4a25      	ldr	r2, [pc, #148]	; (801fdc8 <rint+0x110>)
 801fd32:	4132      	asrs	r2, r6
 801fd34:	ea01 0702 	and.w	r7, r1, r2
 801fd38:	4307      	orrs	r7, r0
 801fd3a:	d0f5      	beq.n	801fd28 <rint+0x70>
 801fd3c:	0851      	lsrs	r1, r2, #1
 801fd3e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801fd42:	4314      	orrs	r4, r2
 801fd44:	d00c      	beq.n	801fd60 <rint+0xa8>
 801fd46:	ea23 0201 	bic.w	r2, r3, r1
 801fd4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801fd4e:	2e13      	cmp	r6, #19
 801fd50:	fa43 f606 	asr.w	r6, r3, r6
 801fd54:	bf0c      	ite	eq
 801fd56:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801fd5a:	2400      	movne	r4, #0
 801fd5c:	ea42 0306 	orr.w	r3, r2, r6
 801fd60:	4918      	ldr	r1, [pc, #96]	; (801fdc4 <rint+0x10c>)
 801fd62:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801fd66:	4622      	mov	r2, r4
 801fd68:	e9d5 4500 	ldrd	r4, r5, [r5]
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	4629      	mov	r1, r5
 801fd70:	f7e0 fab6 	bl	80002e0 <__adddf3>
 801fd74:	e9cd 0100 	strd	r0, r1, [sp]
 801fd78:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fd7c:	4622      	mov	r2, r4
 801fd7e:	462b      	mov	r3, r5
 801fd80:	f7e0 faac 	bl	80002dc <__aeabi_dsub>
 801fd84:	e7d0      	b.n	801fd28 <rint+0x70>
 801fd86:	2e33      	cmp	r6, #51	; 0x33
 801fd88:	dd07      	ble.n	801fd9a <rint+0xe2>
 801fd8a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fd8e:	d1cb      	bne.n	801fd28 <rint+0x70>
 801fd90:	ee10 2a10 	vmov	r2, s0
 801fd94:	f7e0 faa4 	bl	80002e0 <__adddf3>
 801fd98:	e7c6      	b.n	801fd28 <rint+0x70>
 801fd9a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801fd9e:	f04f 36ff 	mov.w	r6, #4294967295
 801fda2:	40d6      	lsrs	r6, r2
 801fda4:	4230      	tst	r0, r6
 801fda6:	d0bf      	beq.n	801fd28 <rint+0x70>
 801fda8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801fdac:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801fdb0:	bf1f      	itttt	ne
 801fdb2:	ea24 0101 	bicne.w	r1, r4, r1
 801fdb6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801fdba:	fa44 f202 	asrne.w	r2, r4, r2
 801fdbe:	ea41 0402 	orrne.w	r4, r1, r2
 801fdc2:	e7cd      	b.n	801fd60 <rint+0xa8>
 801fdc4:	08023b80 	.word	0x08023b80
 801fdc8:	000fffff 	.word	0x000fffff
 801fdcc:	00000000 	.word	0x00000000

0801fdd0 <scalbn>:
 801fdd0:	b570      	push	{r4, r5, r6, lr}
 801fdd2:	ec55 4b10 	vmov	r4, r5, d0
 801fdd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801fdda:	4606      	mov	r6, r0
 801fddc:	462b      	mov	r3, r5
 801fdde:	b99a      	cbnz	r2, 801fe08 <scalbn+0x38>
 801fde0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fde4:	4323      	orrs	r3, r4
 801fde6:	d036      	beq.n	801fe56 <scalbn+0x86>
 801fde8:	4b39      	ldr	r3, [pc, #228]	; (801fed0 <scalbn+0x100>)
 801fdea:	4629      	mov	r1, r5
 801fdec:	ee10 0a10 	vmov	r0, s0
 801fdf0:	2200      	movs	r2, #0
 801fdf2:	f7e0 fc2b 	bl	800064c <__aeabi_dmul>
 801fdf6:	4b37      	ldr	r3, [pc, #220]	; (801fed4 <scalbn+0x104>)
 801fdf8:	429e      	cmp	r6, r3
 801fdfa:	4604      	mov	r4, r0
 801fdfc:	460d      	mov	r5, r1
 801fdfe:	da10      	bge.n	801fe22 <scalbn+0x52>
 801fe00:	a32b      	add	r3, pc, #172	; (adr r3, 801feb0 <scalbn+0xe0>)
 801fe02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe06:	e03a      	b.n	801fe7e <scalbn+0xae>
 801fe08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801fe0c:	428a      	cmp	r2, r1
 801fe0e:	d10c      	bne.n	801fe2a <scalbn+0x5a>
 801fe10:	ee10 2a10 	vmov	r2, s0
 801fe14:	4620      	mov	r0, r4
 801fe16:	4629      	mov	r1, r5
 801fe18:	f7e0 fa62 	bl	80002e0 <__adddf3>
 801fe1c:	4604      	mov	r4, r0
 801fe1e:	460d      	mov	r5, r1
 801fe20:	e019      	b.n	801fe56 <scalbn+0x86>
 801fe22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fe26:	460b      	mov	r3, r1
 801fe28:	3a36      	subs	r2, #54	; 0x36
 801fe2a:	4432      	add	r2, r6
 801fe2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801fe30:	428a      	cmp	r2, r1
 801fe32:	dd08      	ble.n	801fe46 <scalbn+0x76>
 801fe34:	2d00      	cmp	r5, #0
 801fe36:	a120      	add	r1, pc, #128	; (adr r1, 801feb8 <scalbn+0xe8>)
 801fe38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe3c:	da1c      	bge.n	801fe78 <scalbn+0xa8>
 801fe3e:	a120      	add	r1, pc, #128	; (adr r1, 801fec0 <scalbn+0xf0>)
 801fe40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe44:	e018      	b.n	801fe78 <scalbn+0xa8>
 801fe46:	2a00      	cmp	r2, #0
 801fe48:	dd08      	ble.n	801fe5c <scalbn+0x8c>
 801fe4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fe4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fe52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fe56:	ec45 4b10 	vmov	d0, r4, r5
 801fe5a:	bd70      	pop	{r4, r5, r6, pc}
 801fe5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801fe60:	da19      	bge.n	801fe96 <scalbn+0xc6>
 801fe62:	f24c 3350 	movw	r3, #50000	; 0xc350
 801fe66:	429e      	cmp	r6, r3
 801fe68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801fe6c:	dd0a      	ble.n	801fe84 <scalbn+0xb4>
 801fe6e:	a112      	add	r1, pc, #72	; (adr r1, 801feb8 <scalbn+0xe8>)
 801fe70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	d1e2      	bne.n	801fe3e <scalbn+0x6e>
 801fe78:	a30f      	add	r3, pc, #60	; (adr r3, 801feb8 <scalbn+0xe8>)
 801fe7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe7e:	f7e0 fbe5 	bl	800064c <__aeabi_dmul>
 801fe82:	e7cb      	b.n	801fe1c <scalbn+0x4c>
 801fe84:	a10a      	add	r1, pc, #40	; (adr r1, 801feb0 <scalbn+0xe0>)
 801fe86:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe8a:	2b00      	cmp	r3, #0
 801fe8c:	d0b8      	beq.n	801fe00 <scalbn+0x30>
 801fe8e:	a10e      	add	r1, pc, #56	; (adr r1, 801fec8 <scalbn+0xf8>)
 801fe90:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe94:	e7b4      	b.n	801fe00 <scalbn+0x30>
 801fe96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fe9a:	3236      	adds	r2, #54	; 0x36
 801fe9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fea0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801fea4:	4620      	mov	r0, r4
 801fea6:	4b0c      	ldr	r3, [pc, #48]	; (801fed8 <scalbn+0x108>)
 801fea8:	2200      	movs	r2, #0
 801feaa:	e7e8      	b.n	801fe7e <scalbn+0xae>
 801feac:	f3af 8000 	nop.w
 801feb0:	c2f8f359 	.word	0xc2f8f359
 801feb4:	01a56e1f 	.word	0x01a56e1f
 801feb8:	8800759c 	.word	0x8800759c
 801febc:	7e37e43c 	.word	0x7e37e43c
 801fec0:	8800759c 	.word	0x8800759c
 801fec4:	fe37e43c 	.word	0xfe37e43c
 801fec8:	c2f8f359 	.word	0xc2f8f359
 801fecc:	81a56e1f 	.word	0x81a56e1f
 801fed0:	43500000 	.word	0x43500000
 801fed4:	ffff3cb0 	.word	0xffff3cb0
 801fed8:	3c900000 	.word	0x3c900000

0801fedc <_init>:
 801fedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fede:	bf00      	nop
 801fee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fee2:	bc08      	pop	{r3}
 801fee4:	469e      	mov	lr, r3
 801fee6:	4770      	bx	lr

0801fee8 <_fini>:
 801fee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801feea:	bf00      	nop
 801feec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801feee:	bc08      	pop	{r3}
 801fef0:	469e      	mov	lr, r3
 801fef2:	4770      	bx	lr
