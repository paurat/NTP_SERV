
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000243fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005000  080245d0  080245d0  000345d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080295d0  080295d0  00040a50  2**0
                  CONTENTS
  4 .ARM          00000008  080295d0  080295d0  000395d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080295d8  080295d8  00040a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080295d8  080295d8  000395d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080295e0  080295e0  000395e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  080295e4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b428  20000a50  0802a034  00040a50  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000be78  0802a034  0004be78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY
 12 .debug_info   000536ca  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a546  00000000  00000000  0009414a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027d0  00000000  00000000  0009e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002628  00000000  00000000  000a0e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b45e  00000000  00000000  000a3488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f68b  00000000  00000000  000de8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f4f4  00000000  00000000  0011df71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023d465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bfb4  00000000  00000000  0023d4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a50 	.word	0x20000a50
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080245b4 	.word	0x080245b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a54 	.word	0x20000a54
 800020c:	080245b4 	.word	0x080245b4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "local_files.h"
#define CONFIGURATION_START_ADDR 0x080c0000
void clearFlash(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstSector = 7;//flash memory sector
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfSectors = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <clearFlash+0x44>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <clearFlash+0x44>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	60da      	str	r2, [r3, #12]
	EraseInitStruct.Sector = FirstSector;
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <clearFlash+0x44>)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbSectors = NbOfSectors;
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <clearFlash+0x44>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	6093      	str	r3, [r2, #8]
	uint32_t SectorError = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 8000fca:	f004 f89d 	bl	8005108 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <clearFlash+0x44>)
 8000fd4:	f004 f9fa 	bl	80053cc <HAL_FLASHEx_Erase>
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();

	}
	HAL_FLASH_Lock();
 8000fd8:	f004 f8b8 	bl	800514c <HAL_FLASH_Lock>

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000a6c 	.word	0x20000a6c

08000fe8 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(char* data, int size, int offset) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <WriteDeviceAddressOffset+0x5c>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000ffc:	f004 f884 	bl	8005108 <HAL_FLASH_Unlock>
	for (int i = 0; i<size; i++){
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e012      	b.n	800102c <WriteDeviceAddressOffset+0x44>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address+i, data[i]) != HAL_OK){
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	18d1      	adds	r1, r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	2000      	movs	r0, #0
 800101c:	f004 f818 	bl	8005050 <HAL_FLASH_Program>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d107      	bne.n	8001036 <WriteDeviceAddressOffset+0x4e>
	for (int i = 0; i<size; i++){
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbe8      	blt.n	8001006 <WriteDeviceAddressOffset+0x1e>
 8001034:	e000      	b.n	8001038 <WriteDeviceAddressOffset+0x50>
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			// int error = HAL_FLASH_GetError();

			break;
 8001036:	bf00      	nop
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001038:	f004 f888 	bl	800514c <HAL_FLASH_Lock>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	080c0000 	.word	0x080c0000

08001048 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(char* Dout, int size, int offset)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <ReadDeviceAddressOffset+0x4c>)
 8001058:	4413      	add	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00c      	b.n	800107c <ReadDeviceAddressOffset+0x34>
		Dout[i] = *(__IO char*)(Address+i);
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4413      	add	r3, r2
 8001068:	4619      	mov	r1, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	780a      	ldrb	r2, [r1, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbee      	blt.n	8001062 <ReadDeviceAddressOffset+0x1a>
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	080c0000 	.word	0x080c0000

08001098 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <vApplicationGetIdleTaskMemory+0x30>)
 80010ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000a7c 	.word	0x20000a7c
 80010c8:	20000ad0 	.word	0x20000ad0

080010cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010f4:	e000      	b.n	80010f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f9      	beq.n	80010f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001102:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
	int i=0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e009      	b.n	8001144 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffc7 	bl	80010cc <ITM_SendChar>
	for(i=0;i<len;i++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf1      	blt.n	8001130 <_write+0x16>
	return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b0c0      	sub	sp, #256	; 0x100
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	memset(&gps,0,sizeof(gps));
 800115e:	221b      	movs	r2, #27
 8001160:	2100      	movs	r1, #0
 8001162:	489e      	ldr	r0, [pc, #632]	; (80013dc <main+0x284>)
 8001164:	f01a f95c 	bl	801b420 <memset>
	// ZDA-38;RMC-68



	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8001168:	4b9d      	ldr	r3, [pc, #628]	; (80013e0 <main+0x288>)
 800116a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800116e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8001174:	4a9b      	ldr	r2, [pc, #620]	; (80013e4 <main+0x28c>)
 8001176:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800117a:	ca07      	ldmia	r2, {r0, r1, r2}
 800117c:	c303      	stmia	r3!, {r0, r1}
 800117e:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8001180:	4b99      	ldr	r3, [pc, #612]	; (80013e8 <main+0x290>)
 8001182:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8001186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 800118c:	4a97      	ldr	r2, [pc, #604]	; (80013ec <main+0x294>)
 800118e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001192:	ca07      	ldmia	r2, {r0, r1, r2}
 8001194:	c303      	stmia	r3!, {r0, r1}
 8001196:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8001198:	4b95      	ldr	r3, [pc, #596]	; (80013f0 <main+0x298>)
 800119a:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 80011a4:	4a93      	ldr	r2, [pc, #588]	; (80013f4 <main+0x29c>)
 80011a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ac:	c303      	stmia	r3!, {r0, r1}
 80011ae:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 80011b0:	4b91      	ldr	r3, [pc, #580]	; (80013f8 <main+0x2a0>)
 80011b2:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80011b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 80011bc:	4a8f      	ldr	r2, [pc, #572]	; (80013fc <main+0x2a4>)
 80011be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c4:	c303      	stmia	r3!, {r0, r1}
 80011c6:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 80011c8:	4b8d      	ldr	r3, [pc, #564]	; (8001400 <main+0x2a8>)
 80011ca:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80011ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 80011d4:	4a8b      	ldr	r2, [pc, #556]	; (8001404 <main+0x2ac>)
 80011d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011da:	ca07      	ldmia	r2, {r0, r1, r2}
 80011dc:	c303      	stmia	r3!, {r0, r1}
 80011de:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 80011e0:	4b89      	ldr	r3, [pc, #548]	; (8001408 <main+0x2b0>)
 80011e2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 80011ec:	4a87      	ldr	r2, [pc, #540]	; (800140c <main+0x2b4>)
 80011ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	c303      	stmia	r3!, {r0, r1}
 80011f6:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 80011f8:	4b85      	ldr	r3, [pc, #532]	; (8001410 <main+0x2b8>)
 80011fa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80011fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8001204:	4a83      	ldr	r2, [pc, #524]	; (8001414 <main+0x2bc>)
 8001206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	c303      	stmia	r3!, {r0, r1}
 800120e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f002 fd69 	bl	8003ce6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f90e 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //MX_LWIP_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 fa8a 	bl	8001730 <MX_GPIO_Init>
  MX_UART7_Init();
 800121c:	f000 fa58 	bl	80016d0 <MX_UART7_Init>
  MX_RTC_Init();
 8001220:	f000 f9a6 	bl	8001570 <MX_RTC_Init>
  MX_TIM1_Init();
 8001224:	f000 fa00 	bl	8001628 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //TIM1
  HAL_TIM_Base_Start_IT(&htim1);
 8001228:	487b      	ldr	r0, [pc, #492]	; (8001418 <main+0x2c0>)
 800122a:	f006 f847 	bl	80072bc <HAL_TIM_Base_Start_IT>

  HAL_Delay(5000);
 800122e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001232:	f002 fd85 	bl	8003d40 <HAL_Delay>
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 8001236:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	2210      	movs	r2, #16
 8001240:	4876      	ldr	r0, [pc, #472]	; (800141c <main+0x2c4>)
 8001242:	f006 fcf9 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001246:	2064      	movs	r0, #100	; 0x64
 8001248:	f002 fd7a 	bl	8003d40 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 800124c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	220a      	movs	r2, #10
 8001256:	4871      	ldr	r0, [pc, #452]	; (800141c <main+0x2c4>)
 8001258:	f006 fcee 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	; 0x64
 800125e:	f002 fd6f 	bl	8003d40 <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 8001262:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	2210      	movs	r2, #16
 800126c:	486b      	ldr	r0, [pc, #428]	; (800141c <main+0x2c4>)
 800126e:	f006 fce3 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001272:	2064      	movs	r0, #100	; 0x64
 8001274:	f002 fd64 	bl	8003d40 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 8001278:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800127c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001280:	220a      	movs	r2, #10
 8001282:	4866      	ldr	r0, [pc, #408]	; (800141c <main+0x2c4>)
 8001284:	f006 fcd8 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f002 fd59 	bl	8003d40 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 800128e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	2210      	movs	r2, #16
 8001298:	4860      	ldr	r0, [pc, #384]	; (800141c <main+0x2c4>)
 800129a:	f006 fccd 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f002 fd4e 	bl	8003d40 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 80012a4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80012a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ac:	220a      	movs	r2, #10
 80012ae:	485b      	ldr	r0, [pc, #364]	; (800141c <main+0x2c4>)
 80012b0:	f006 fcc2 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012b4:	2064      	movs	r0, #100	; 0x64
 80012b6:	f002 fd43 	bl	8003d40 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 80012ba:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	2210      	movs	r2, #16
 80012c4:	4855      	ldr	r0, [pc, #340]	; (800141c <main+0x2c4>)
 80012c6:	f006 fcb7 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	; 0x64
 80012cc:	f002 fd38 	bl	8003d40 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 80012d0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80012d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d8:	220a      	movs	r2, #10
 80012da:	4850      	ldr	r0, [pc, #320]	; (800141c <main+0x2c4>)
 80012dc:	f006 fcac 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f002 fd2d 	bl	8003d40 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 80012e6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	2210      	movs	r2, #16
 80012f0:	484a      	ldr	r0, [pc, #296]	; (800141c <main+0x2c4>)
 80012f2:	f006 fca1 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012f6:	2064      	movs	r0, #100	; 0x64
 80012f8:	f002 fd22 	bl	8003d40 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 80012fc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	220a      	movs	r2, #10
 8001306:	4845      	ldr	r0, [pc, #276]	; (800141c <main+0x2c4>)
 8001308:	f006 fc96 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 800130c:	2064      	movs	r0, #100	; 0x64
 800130e:	f002 fd17 	bl	8003d40 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 8001312:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	2210      	movs	r2, #16
 800131c:	483f      	ldr	r0, [pc, #252]	; (800141c <main+0x2c4>)
 800131e:	f006 fc8b 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f002 fd0c 	bl	8003d40 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 8001328:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	220a      	movs	r2, #10
 8001332:	483a      	ldr	r0, [pc, #232]	; (800141c <main+0x2c4>)
 8001334:	f006 fc80 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f002 fd01 	bl	8003d40 <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 800133e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	2210      	movs	r2, #16
 8001348:	4834      	ldr	r0, [pc, #208]	; (800141c <main+0x2c4>)
 800134a:	f006 fc75 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f002 fcf6 	bl	8003d40 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 8001354:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135c:	220a      	movs	r2, #10
 800135e:	482f      	ldr	r0, [pc, #188]	; (800141c <main+0x2c4>)
 8001360:	f006 fc6a 	bl	8007c38 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f002 fceb 	bl	8003d40 <HAL_Delay>

  //start the web server
  int offset =0;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 8001370:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001374:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001378:	4829      	ldr	r0, [pc, #164]	; (8001420 <main+0x2c8>)
 800137a:	f7ff fe65 	bl	8001048 <ReadDeviceAddressOffset>
 offset+=sizeof(user_info);
 800137e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001382:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8001386:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <main+0x2cc>)
 800138c:	f107 041c 	add.w	r4, r7, #28
 8001390:	461d      	mov	r5, r3
 8001392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001396:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800139a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f008 fc09 	bl	8009bbc <osThreadCreate>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <main+0x2d0>)
 80013ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 80013b0:	463b      	mov	r3, r7
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <main+0x2d4>)
 80013b4:	461c      	mov	r4, r3
 80013b6:	4615      	mov	r5, r2
 80013b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80013c4:	463b      	mov	r3, r7
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f008 fbf7 	bl	8009bbc <osThreadCreate>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a17      	ldr	r2, [pc, #92]	; (8001430 <main+0x2d8>)
 80013d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013d4:	f008 fbdb 	bl	8009b8e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <main+0x280>
 80013da:	bf00      	nop
 80013dc:	200050c8 	.word	0x200050c8
 80013e0:	080245e8 	.word	0x080245e8
 80013e4:	080245f8 	.word	0x080245f8
 80013e8:	08024604 	.word	0x08024604
 80013ec:	08024614 	.word	0x08024614
 80013f0:	08024620 	.word	0x08024620
 80013f4:	08024630 	.word	0x08024630
 80013f8:	0802463c 	.word	0x0802463c
 80013fc:	0802464c 	.word	0x0802464c
 8001400:	08024658 	.word	0x08024658
 8001404:	08024668 	.word	0x08024668
 8001408:	08024674 	.word	0x08024674
 800140c:	08024684 	.word	0x08024684
 8001410:	08024690 	.word	0x08024690
 8001414:	080246a0 	.word	0x080246a0
 8001418:	200052b8 	.word	0x200052b8
 800141c:	2000520c 	.word	0x2000520c
 8001420:	200050e4 	.word	0x200050e4
 8001424:	080246ac 	.word	0x080246ac
 8001428:	20005208 	.word	0x20005208
 800142c:	080246c8 	.word	0x080246c8
 8001430:	20005294 	.word	0x20005294

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0b4      	sub	sp, #208	; 0xd0
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f019 ffec 	bl	801b420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2284      	movs	r2, #132	; 0x84
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f019 ffdd 	bl	801b420 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001466:	f004 fa9f 	bl	80059a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <SystemClock_Config+0x134>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <SystemClock_Config+0x134>)
 8001470:	f023 0318 	bic.w	r3, r3, #24
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <SystemClock_Config+0x134>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a3b      	ldr	r2, [pc, #236]	; (8001568 <SystemClock_Config+0x134>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <SystemClock_Config+0x134>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <SystemClock_Config+0x138>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a36      	ldr	r2, [pc, #216]	; (800156c <SystemClock_Config+0x138>)
 8001494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <SystemClock_Config+0x138>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80014a6:	2305      	movs	r3, #5
 80014a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014c8:	2319      	movs	r3, #25
 80014ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80014ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014dc:	2309      	movs	r3, #9
 80014de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 fabe 	bl	8005a68 <HAL_RCC_OscConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014f2:	f001 f86b 	bl	80025cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014f6:	f004 fa67 	bl	80059c8 <HAL_PWREx_EnableOverDrive>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001500:	f001 f864 	bl	80025cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001516:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800151a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001526:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800152a:	2106      	movs	r1, #6
 800152c:	4618      	mov	r0, r3
 800152e:	f004 fd3f 	bl	8005fb0 <HAL_RCC_ClockConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001538:	f001 f848 	bl	80025cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART7;
 800153c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001540:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001548:	2300      	movs	r3, #0
 800154a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	4618      	mov	r0, r3
 8001552:	f004 ff35 	bl	80063c0 <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800155c:	f001 f836 	bl	80025cc <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	37d0      	adds	r7, #208	; 0xd0
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000

08001570 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <MX_RTC_Init+0xb0>)
 800158e:	4a25      	ldr	r2, [pc, #148]	; (8001624 <MX_RTC_Init+0xb4>)
 8001590:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <MX_RTC_Init+0xb0>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <MX_RTC_Init+0xb0>)
 800159a:	227f      	movs	r2, #127	; 0x7f
 800159c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <MX_RTC_Init+0xb0>)
 80015a0:	22ff      	movs	r2, #255	; 0xff
 80015a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MX_RTC_Init+0xb0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_RTC_Init+0xb0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_RTC_Init+0xb0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015b6:	481a      	ldr	r0, [pc, #104]	; (8001620 <MX_RTC_Init+0xb0>)
 80015b8:	f005 faf2 	bl	8006ba0 <HAL_RTC_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80015c2:	f001 f803 	bl	80025cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80015c6:	2317      	movs	r3, #23
 80015c8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 59;
 80015ca:	233b      	movs	r3, #59	; 0x3b
 80015cc:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	480f      	ldr	r0, [pc, #60]	; (8001620 <MX_RTC_Init+0xb0>)
 80015e4:	f005 fb6e 	bl	8006cc4 <HAL_RTC_SetTime>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80015ee:	f000 ffed 	bl	80025cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80015f2:	2307      	movs	r3, #7
 80015f4:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_DECEMBER;
 80015f6:	2312      	movs	r3, #18
 80015f8:	717b      	strb	r3, [r7, #5]
  sDate.Date = 31;
 80015fa:	231f      	movs	r3, #31
 80015fc:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_RTC_Init+0xb0>)
 800160a:	f005 fc77 	bl	8006efc <HAL_RTC_SetDate>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001614:	f000 ffda 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20005298 	.word	0x20005298
 8001624:	40002800 	.word	0x40002800

08001628 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <MX_TIM1_Init+0xa0>)
 8001648:	4a20      	ldr	r2, [pc, #128]	; (80016cc <MX_TIM1_Init+0xa4>)
 800164a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <MX_TIM1_Init+0xa0>)
 800164e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001652:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_TIM1_Init+0xa0>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_TIM1_Init+0xa0>)
 800165c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001660:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_TIM1_Init+0xa0>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_TIM1_Init+0xa0>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_TIM1_Init+0xa0>)
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001674:	4814      	ldr	r0, [pc, #80]	; (80016c8 <MX_TIM1_Init+0xa0>)
 8001676:	f005 fdc9 	bl	800720c <HAL_TIM_Base_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001680:	f000 ffa4 	bl	80025cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001688:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4619      	mov	r1, r3
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_TIM1_Init+0xa0>)
 8001692:	f005 ffab 	bl	80075ec <HAL_TIM_ConfigClockSource>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800169c:	f000 ff96 	bl	80025cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_TIM1_Init+0xa0>)
 80016b2:	f006 f9c7 	bl	8007a44 <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016bc:	f000 ff86 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200052b8 	.word	0x200052b8
 80016cc:	40010000 	.word	0x40010000

080016d0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_UART7_Init+0x58>)
 80016d6:	4a15      	ldr	r2, [pc, #84]	; (800172c <MX_UART7_Init+0x5c>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <MX_UART7_Init+0x58>)
 80016dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_UART7_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_UART7_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_UART7_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_UART7_Init+0x58>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_UART7_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_UART7_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <MX_UART7_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_UART7_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_UART7_Init+0x58>)
 8001714:	f006 fa42 	bl	8007b9c <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800171e:	f000 ff55 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000520c 	.word	0x2000520c
 800172c:	40007800 	.word	0x40007800

08001730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b090      	sub	sp, #64	; 0x40
 8001734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001746:	4ba8      	ldr	r3, [pc, #672]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4aa7      	ldr	r2, [pc, #668]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4ba5      	ldr	r3, [pc, #660]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800175e:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4aa1      	ldr	r2, [pc, #644]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b9f      	ldr	r3, [pc, #636]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	4b9c      	ldr	r3, [pc, #624]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a9b      	ldr	r2, [pc, #620]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b99      	ldr	r3, [pc, #612]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a95      	ldr	r2, [pc, #596]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017a6:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a8f      	ldr	r2, [pc, #572]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b8d      	ldr	r3, [pc, #564]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a89      	ldr	r2, [pc, #548]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b87      	ldr	r3, [pc, #540]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017d6:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a83      	ldr	r2, [pc, #524]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	4b7e      	ldr	r3, [pc, #504]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a7d      	ldr	r2, [pc, #500]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b7b      	ldr	r3, [pc, #492]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001806:	4b78      	ldr	r3, [pc, #480]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a77      	ldr	r2, [pc, #476]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800181e:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a71      	ldr	r2, [pc, #452]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <MX_GPIO_Init+0x2b8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2120      	movs	r1, #32
 800183a:	486c      	ldr	r0, [pc, #432]	; (80019ec <MX_GPIO_Init+0x2bc>)
 800183c:	f004 f868 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2102      	movs	r1, #2
 8001844:	486a      	ldr	r0, [pc, #424]	; (80019f0 <MX_GPIO_Init+0x2c0>)
 8001846:	f004 f863 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2108      	movs	r1, #8
 800184e:	4869      	ldr	r0, [pc, #420]	; (80019f4 <MX_GPIO_Init+0x2c4>)
 8001850:	f004 f85e 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Timled_GPIO_Port, Timled_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	4867      	ldr	r0, [pc, #412]	; (80019f8 <MX_GPIO_Init+0x2c8>)
 800185a:	f004 f859 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800185e:	2308      	movs	r3, #8
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	4862      	ldr	r0, [pc, #392]	; (80019fc <MX_GPIO_Init+0x2cc>)
 8001872:	f003 fe89 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001876:	f643 0323 	movw	r3, #14371	; 0x3823
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001888:	230a      	movs	r3, #10
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001890:	4619      	mov	r1, r3
 8001892:	485b      	ldr	r0, [pc, #364]	; (8001a00 <MX_GPIO_Init+0x2d0>)
 8001894:	f003 fe78 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018aa:	4619      	mov	r1, r3
 80018ac:	4855      	ldr	r0, [pc, #340]	; (8001a04 <MX_GPIO_Init+0x2d4>)
 80018ae:	f003 fe6b 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80018b2:	2320      	movs	r3, #32
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c6:	4619      	mov	r1, r3
 80018c8:	4848      	ldr	r0, [pc, #288]	; (80019ec <MX_GPIO_Init+0x2bc>)
 80018ca:	f003 fe5d 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018ce:	2310      	movs	r3, #16
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d2:	2300      	movs	r3, #0
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	4842      	ldr	r0, [pc, #264]	; (80019ec <MX_GPIO_Init+0x2bc>)
 80018e2:	f003 fe51 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80018e6:	2302      	movs	r3, #2
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	4619      	mov	r1, r3
 80018fc:	483c      	ldr	r0, [pc, #240]	; (80019f0 <MX_GPIO_Init+0x2c0>)
 80018fe:	f003 fe43 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 8001902:	2301      	movs	r3, #1
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001906:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800190c:	2302      	movs	r3, #2
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001914:	4619      	mov	r1, r3
 8001916:	4836      	ldr	r0, [pc, #216]	; (80019f0 <MX_GPIO_Init+0x2c0>)
 8001918:	f003 fe36 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800191c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	482f      	ldr	r0, [pc, #188]	; (80019f0 <MX_GPIO_Init+0x2c0>)
 8001932:	f003 fe29 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001936:	2310      	movs	r3, #16
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001946:	230a      	movs	r3, #10
 8001948:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194e:	4619      	mov	r1, r3
 8001950:	4829      	ldr	r0, [pc, #164]	; (80019f8 <MX_GPIO_Init+0x2c8>)
 8001952:	f003 fe19 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001956:	2305      	movs	r3, #5
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001966:	230a      	movs	r3, #10
 8001968:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196e:	4619      	mov	r1, r3
 8001970:	4825      	ldr	r0, [pc, #148]	; (8001a08 <MX_GPIO_Init+0x2d8>)
 8001972:	f003 fe09 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001976:	2308      	movs	r3, #8
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198a:	4619      	mov	r1, r3
 800198c:	4819      	ldr	r0, [pc, #100]	; (80019f4 <MX_GPIO_Init+0x2c4>)
 800198e:	f003 fdfb 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001992:	2328      	movs	r3, #40	; 0x28
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019a2:	230a      	movs	r3, #10
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019aa:	4619      	mov	r1, r3
 80019ac:	4817      	ldr	r0, [pc, #92]	; (8001a0c <MX_GPIO_Init+0x2dc>)
 80019ae:	f003 fdeb 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : Timled_Pin */
  GPIO_InitStruct.Pin = Timled_Pin;
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(Timled_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <MX_GPIO_Init+0x2c8>)
 80019ca:	f003 fddd 	bl	8005588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	2006      	movs	r0, #6
 80019d4:	f002 fa90 	bl	8003ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019d8:	2006      	movs	r0, #6
 80019da:	f002 faa9 	bl	8003f30 <HAL_NVIC_EnableIRQ>

}
 80019de:	bf00      	nop
 80019e0:	3740      	adds	r7, #64	; 0x40
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40021800 	.word	0x40021800
 80019f8:	40021c00 	.word	0x40021c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40022400 	.word	0x40022400
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	int PPS_Counter_period=0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
	if(GPIO_Pin == PPS_Pin) {
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d142      	bne.n	8001aaa <HAL_GPIO_EXTI_Callback+0x9a>
		if(PPS_count>2&&PPS_count<12){
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	dd0c      	ble.n	8001a46 <HAL_GPIO_EXTI_Callback+0x36>
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b0b      	cmp	r3, #11
 8001a32:	dc08      	bgt.n	8001a46 <HAL_GPIO_EXTI_Callback+0x36>
		PPS_mass[PPS_count-2] = TIM1->CNT;
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3b02      	subs	r3, #2
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if(PPS_count==12){
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d12d      	bne.n	8001aaa <HAL_GPIO_EXTI_Callback+0x9a>
			HAL_GPIO_TogglePin(Timled_GPIO_Port, Timled_Pin);
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	4821      	ldr	r0, [pc, #132]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001a52:	f003 ff76 	bl	8005942 <HAL_GPIO_TogglePin>
			PPS_Counter_period=(PPS_mass[0]+PPS_mass[1]+PPS_mass[2]+PPS_mass[3]+PPS_mass[4]+PPS_mass[5]+PPS_mass[6]+PPS_mass[7]+PPS_mass[8]+PPS_mass[9])/10;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	441a      	add	r2, r3
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	441a      	add	r2, r3
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	441a      	add	r2, r3
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	441a      	add	r2, r3
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	441a      	add	r2, r3
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	441a      	add	r2, r3
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a92:	fb82 1203 	smull	r1, r2, r2, r3
 8001a96:	1092      	asrs	r2, r2, #2
 8001a98:	17db      	asrs	r3, r3, #31
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	60fb      	str	r3, [r7, #12]
			TIM1->ARR=PPS_Counter_period;
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
			PPS_count=0;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
		}
	}
	if(PPS_count<12){
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b0b      	cmp	r3, #11
 8001ab0:	dc04      	bgt.n	8001abc <HAL_GPIO_EXTI_Callback+0xac>
		PPS_count=PPS_count+1;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001aba:	6013      	str	r3, [r2, #0]
		}
		TIM1->CNT = 0;//обнуление счетчика
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24


		}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000cf8 	.word	0x20000cf8
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	20000cfc 	.word	0x20000cfc
 8001ad8:	40021c00 	.word	0x40021c00
 8001adc:	66666667 	.word	0x66666667

08001ae0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
	if(huart == &huart7) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a62      	ldr	r2, [pc, #392]	; (8001c8c <HAL_UART_RxCpltCallback+0x1ac>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	f040 82b4 	bne.w	8002070 <HAL_UART_RxCpltCallback+0x590>
		//$ message start
		if(buff[0]=='$'){
 8001b08:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <HAL_UART_RxCpltCallback+0x1b0>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b24      	cmp	r3, #36	; 0x24
 8001b0e:	d106      	bne.n	8001b1e <HAL_UART_RxCpltCallback+0x3e>
			count=0;
 8001b10:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001b16:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <HAL_UART_RxCpltCallback+0x1b8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e00f      	b.n	8001b3e <HAL_UART_RxCpltCallback+0x5e>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10b      	bne.n	8001b3e <HAL_UART_RxCpltCallback+0x5e>
 8001b26:	4b5a      	ldr	r3, [pc, #360]	; (8001c90 <HAL_UART_RxCpltCallback+0x1b0>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b47      	cmp	r3, #71	; 0x47
 8001b2c:	d007      	beq.n	8001b3e <HAL_UART_RxCpltCallback+0x5e>
			count=0;
 8001b2e:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_UART_RxCpltCallback+0x1bc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_UART_RxCpltCallback+0x1bc>)
 8001b3c:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001b3e:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <HAL_UART_RxCpltCallback+0x1b0>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4a54      	ldr	r2, [pc, #336]	; (8001c94 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fb4f 	bl	80021ec <calc_crc>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d13e      	bne.n	8001bd6 <HAL_UART_RxCpltCallback+0xf6>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 8001b58:	f000 fba4 	bl	80022a4 <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 8001b5c:	4850      	ldr	r0, [pc, #320]	; (8001ca0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001b5e:	f019 fb0b 	bl	801b178 <atoi>
 8001b62:	4603      	mov	r3, r0
 8001b64:	3b01      	subs	r3, #1
 8001b66:	4a4f      	ldr	r2, [pc, #316]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b68:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 8001b6a:	484f      	ldr	r0, [pc, #316]	; (8001ca8 <HAL_UART_RxCpltCallback+0x1c8>)
 8001b6c:	f019 fb04 	bl	801b178 <atoi>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b74:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 8001b76:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_UART_RxCpltCallback+0x1cc>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b30      	cmp	r3, #48	; 0x30
 8001b7c:	d108      	bne.n	8001b90 <HAL_UART_RxCpltCallback+0xb0>
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <HAL_UART_RxCpltCallback+0x1cc>)
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	2b30      	cmp	r3, #48	; 0x30
 8001b84:	d104      	bne.n	8001b90 <HAL_UART_RxCpltCallback+0xb0>
				century=century+100;//atoi(gps.year)
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3364      	adds	r3, #100	; 0x64
 8001b8c:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b8e:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 8001b90:	4846      	ldr	r0, [pc, #280]	; (8001cac <HAL_UART_RxCpltCallback+0x1cc>)
 8001b92:	f019 faf1 	bl	801b178 <atoi>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a41      	ldr	r2, [pc, #260]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001ba0:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 8001ba2:	4844      	ldr	r0, [pc, #272]	; (8001cb4 <HAL_UART_RxCpltCallback+0x1d4>)
 8001ba4:	f019 fae8 	bl	801b178 <atoi>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a3e      	ldr	r2, [pc, #248]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001bac:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 8001bae:	4842      	ldr	r0, [pc, #264]	; (8001cb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8001bb0:	f019 fae2 	bl	801b178 <atoi>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a3b      	ldr	r2, [pc, #236]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001bb8:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8001bba:	4840      	ldr	r0, [pc, #256]	; (8001cbc <HAL_UART_RxCpltCallback+0x1dc>)
 8001bbc:	f019 fadc 	bl	801b178 <atoi>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a38      	ldr	r2, [pc, #224]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001bc4:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 8001bc6:	4837      	ldr	r0, [pc, #220]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001bc8:	f019 fd0a 	bl	801b5e0 <mktime>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	493b      	ldr	r1, [pc, #236]	; (8001cc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8001bd2:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		}
		if(res==1&&gps_unix!=rtc_read()){
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d14a      	bne.n	8001c72 <HAL_UART_RxCpltCallback+0x192>
 8001bdc:	f000 fb62 	bl	80022a4 <rtc_read>
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	4299      	cmp	r1, r3
 8001be8:	bf08      	it	eq
 8001bea:	4290      	cmpeq	r0, r2
 8001bec:	d041      	beq.n	8001c72 <HAL_UART_RxCpltCallback+0x192>

			time_ref_s=htonl(gps_unix- DIFF_SEC_1970_2036);
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00d ff8a 	bl	800fb12 <lwip_htonl>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8001c02:	6013      	str	r3, [r2, #0]
			sTime.Hours = Time_calc.tm_hour;
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = Time_calc.tm_min;
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = Time_calc.tm_sec;
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	73bb      	strb	r3, [r7, #14]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]




			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4828      	ldr	r0, [pc, #160]	; (8001ccc <HAL_UART_RxCpltCallback+0x1ec>)
 8001c2a:	f005 f84b 	bl	8006cc4 <HAL_RTC_SetTime>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_RxCpltCallback+0x158>
			{
				Error_Handler();
 8001c34:	f000 fcca 	bl	80025cc <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	727b      	strb	r3, [r7, #9]
			sDate.Date = Time_calc.tm_mday;
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	72bb      	strb	r3, [r7, #10]
			sDate.Year = Time_calc.tm_year-century;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_UART_RxCpltCallback+0x1d0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	72fb      	strb	r3, [r7, #11]
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	481a      	ldr	r0, [pc, #104]	; (8001ccc <HAL_UART_RxCpltCallback+0x1ec>)
 8001c64:	f005 f94a 	bl	8006efc <HAL_RTC_SetDate>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_UART_RxCpltCallback+0x192>
			{
				Error_Handler();
 8001c6e:	f000 fcad 	bl	80025cc <Error_Handler>

		}
		//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_UART_RxCpltCallback+0x1b4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d12c      	bne.n	8001cd4 <HAL_UART_RxCpltCallback+0x1f4>
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_UART_RxCpltCallback+0x1b0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b5a      	cmp	r3, #90	; 0x5a
 8001c80:	d128      	bne.n	8001cd4 <HAL_UART_RxCpltCallback+0x1f4>
			Tipe_Mes=1;
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_UART_RxCpltCallback+0x1f0>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e02f      	b.n	8001cea <HAL_UART_RxCpltCallback+0x20a>
 8001c8a:	bf00      	nop
 8001c8c:	2000520c 	.word	0x2000520c
 8001c90:	20000d38 	.word	0x20000d38
 8001c94:	20000cf4 	.word	0x20000cf4
 8001c98:	20000ce0 	.word	0x20000ce0
 8001c9c:	20000cd0 	.word	0x20000cd0
 8001ca0:	200050cb 	.word	0x200050cb
 8001ca4:	2000530c 	.word	0x2000530c
 8001ca8:	200050c8 	.word	0x200050c8
 8001cac:	20000d3c 	.word	0x20000d3c
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	200050d3 	.word	0x200050d3
 8001cb8:	200050d6 	.word	0x200050d6
 8001cbc:	200050d9 	.word	0x200050d9
 8001cc0:	20000cd8 	.word	0x20000cd8
 8001cc4:	83aa7e80 	.word	0x83aa7e80
 8001cc8:	20005308 	.word	0x20005308
 8001ccc:	20005298 	.word	0x20005298
 8001cd0:	20000cd4 	.word	0x20000cd4
		}
		else if(count==3&&buff[0]=='R'){
 8001cd4:	4b91      	ldr	r3, [pc, #580]	; (8001f1c <HAL_UART_RxCpltCallback+0x43c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d106      	bne.n	8001cea <HAL_UART_RxCpltCallback+0x20a>
 8001cdc:	4b90      	ldr	r3, [pc, #576]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b52      	cmp	r3, #82	; 0x52
 8001ce2:	d102      	bne.n	8001cea <HAL_UART_RxCpltCallback+0x20a>
			Tipe_Mes=2;
 8001ce4:	4b8f      	ldr	r3, [pc, #572]	; (8001f24 <HAL_UART_RxCpltCallback+0x444>)
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 8001cea:	4b8e      	ldr	r3, [pc, #568]	; (8001f24 <HAL_UART_RxCpltCallback+0x444>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	f040 80d4 	bne.w	8001e9c <HAL_UART_RxCpltCallback+0x3bc>

			if(count==6&&buff[0]!=','){
 8001cf4:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_UART_RxCpltCallback+0x43c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d10b      	bne.n	8001d14 <HAL_UART_RxCpltCallback+0x234>
 8001cfc:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2c      	cmp	r3, #44	; 0x2c
 8001d02:	d007      	beq.n	8001d14 <HAL_UART_RxCpltCallback+0x234>
				count=0;
 8001d04:	4b85      	ldr	r3, [pc, #532]	; (8001f1c <HAL_UART_RxCpltCallback+0x43c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8001d0a:	4b87      	ldr	r3, [pc, #540]	; (8001f28 <HAL_UART_RxCpltCallback+0x448>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a85      	ldr	r2, [pc, #532]	; (8001f28 <HAL_UART_RxCpltCallback+0x448>)
 8001d12:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8001d14:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b2c      	cmp	r3, #44	; 0x2c
 8001d1a:	d107      	bne.n	8001d2c <HAL_UART_RxCpltCallback+0x24c>
				zpt++;
 8001d1c:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a82      	ldr	r2, [pc, #520]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001d24:	6013      	str	r3, [r2, #0]
				ind=0;
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 8001d2c:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10e      	bne.n	8001d52 <HAL_UART_RxCpltCallback+0x272>
 8001d34:	4b7a      	ldr	r3, [pc, #488]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b2c      	cmp	r3, #44	; 0x2c
 8001d3a:	d00a      	beq.n	8001d52 <HAL_UART_RxCpltCallback+0x272>
				time_buff[ind]=buff[0];
 8001d3c:	4b7c      	ldr	r3, [pc, #496]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a77      	ldr	r2, [pc, #476]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001d42:	7811      	ldrb	r1, [r2, #0]
 8001d44:	4a7b      	ldr	r2, [pc, #492]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d46:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001d48:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4a78      	ldr	r2, [pc, #480]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001d50:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 8001d52:	4b76      	ldr	r3, [pc, #472]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d127      	bne.n	8001daa <HAL_UART_RxCpltCallback+0x2ca>
 8001d5a:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b2c      	cmp	r3, #44	; 0x2c
 8001d60:	d123      	bne.n	8001daa <HAL_UART_RxCpltCallback+0x2ca>
				gps.hours[0]=time_buff[0];
 8001d62:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	4b74      	ldr	r3, [pc, #464]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001d68:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 8001d6a:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d6c:	785a      	ldrb	r2, [r3, #1]
 8001d6e:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001d70:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 8001d72:	4b70      	ldr	r3, [pc, #448]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d74:	789a      	ldrb	r2, [r3, #2]
 8001d76:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001d78:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d7c:	78da      	ldrb	r2, [r3, #3]
 8001d7e:	4b6e      	ldr	r3, [pc, #440]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001d80:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 8001d82:	4b6c      	ldr	r3, [pc, #432]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d84:	791a      	ldrb	r2, [r3, #4]
 8001d86:	4b6c      	ldr	r3, [pc, #432]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001d88:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d8c:	795a      	ldrb	r2, [r3, #5]
 8001d8e:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001d90:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 8001d92:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d94:	799a      	ldrb	r2, [r3, #6]
 8001d96:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001d98:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 8001d9a:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001d9c:	79da      	ldrb	r2, [r3, #7]
 8001d9e:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001da0:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 8001da2:	4b64      	ldr	r3, [pc, #400]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001da4:	7a1a      	ldrb	r2, [r3, #8]
 8001da6:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001da8:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 8001daa:	4b60      	ldr	r3, [pc, #384]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d10e      	bne.n	8001dd0 <HAL_UART_RxCpltCallback+0x2f0>
 8001db2:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b2c      	cmp	r3, #44	; 0x2c
 8001db8:	d00a      	beq.n	8001dd0 <HAL_UART_RxCpltCallback+0x2f0>

				time_buff[ind]=buff[0];
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001dc0:	7811      	ldrb	r1, [r2, #0]
 8001dc2:	4a5c      	ldr	r2, [pc, #368]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001dc4:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001dce:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8001dd0:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d10b      	bne.n	8001df0 <HAL_UART_RxCpltCallback+0x310>
 8001dd8:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b2c      	cmp	r3, #44	; 0x2c
 8001dde:	d107      	bne.n	8001df0 <HAL_UART_RxCpltCallback+0x310>
				gps.day[0]=time_buff[0];
 8001de0:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001de6:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8001de8:	4b52      	ldr	r3, [pc, #328]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001dea:	785a      	ldrb	r2, [r3, #1]
 8001dec:	4b52      	ldr	r3, [pc, #328]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001dee:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 8001df0:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d10e      	bne.n	8001e16 <HAL_UART_RxCpltCallback+0x336>
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b2c      	cmp	r3, #44	; 0x2c
 8001dfe:	d00a      	beq.n	8001e16 <HAL_UART_RxCpltCallback+0x336>

				time_buff[ind]=buff[0];
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a46      	ldr	r2, [pc, #280]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001e06:	7811      	ldrb	r1, [r2, #0]
 8001e08:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e0a:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001e0c:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a47      	ldr	r2, [pc, #284]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001e14:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 8001e16:	4b45      	ldr	r3, [pc, #276]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d10b      	bne.n	8001e36 <HAL_UART_RxCpltCallback+0x356>
 8001e1e:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b2c      	cmp	r3, #44	; 0x2c
 8001e24:	d107      	bne.n	8001e36 <HAL_UART_RxCpltCallback+0x356>
				gps.month[0]=time_buff[0];
 8001e26:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001e2c:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[1];
 8001e2e:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e30:	785a      	ldrb	r2, [r3, #1]
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001e34:	711a      	strb	r2, [r3, #4]
			}
			if(zpt==4&&buff[0]!=','){
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d10e      	bne.n	8001e5c <HAL_UART_RxCpltCallback+0x37c>
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b2c      	cmp	r3, #44	; 0x2c
 8001e44:	d00a      	beq.n	8001e5c <HAL_UART_RxCpltCallback+0x37c>

				time_buff[ind]=buff[0];
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a35      	ldr	r2, [pc, #212]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001e4c:	7811      	ldrb	r1, [r2, #0]
 8001e4e:	4a39      	ldr	r2, [pc, #228]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e50:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001e5a:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d11b      	bne.n	8001e9c <HAL_UART_RxCpltCallback+0x3bc>
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b2c      	cmp	r3, #44	; 0x2c
 8001e6a:	d117      	bne.n	8001e9c <HAL_UART_RxCpltCallback+0x3bc>
				gps.year[0]=time_buff[0];
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001e72:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[1];
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e76:	785a      	ldrb	r2, [r3, #1]
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001e7a:	71da      	strb	r2, [r3, #7]
				gps.year[2]=time_buff[2];
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e7e:	789a      	ldrb	r2, [r3, #2]
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001e82:	721a      	strb	r2, [r3, #8]
				gps.year[3]=time_buff[3];
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e86:	78da      	ldrb	r2, [r3, #3]
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_UART_RxCpltCallback+0x458>)
 8001e8a:	725a      	strb	r2, [r3, #9]
				year_str[0]=time_buff[2];
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e8e:	789a      	ldrb	r2, [r3, #2]
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_UART_RxCpltCallback+0x45c>)
 8001e92:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[3];
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001e96:	78da      	ldrb	r2, [r3, #3]
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <HAL_UART_RxCpltCallback+0x45c>)
 8001e9a:	705a      	strb	r2, [r3, #1]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_UART_RxCpltCallback+0x444>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	f040 80c9 	bne.w	8002038 <HAL_UART_RxCpltCallback+0x558>

			if(count==6&&buff[0]!=','){
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_UART_RxCpltCallback+0x43c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d10b      	bne.n	8001ec6 <HAL_UART_RxCpltCallback+0x3e6>
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b2c      	cmp	r3, #44	; 0x2c
 8001eb4:	d007      	beq.n	8001ec6 <HAL_UART_RxCpltCallback+0x3e6>
				count=0;
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_UART_RxCpltCallback+0x43c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_UART_RxCpltCallback+0x448>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_UART_RxCpltCallback+0x448>)
 8001ec4:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b2c      	cmp	r3, #44	; 0x2c
 8001ecc:	d107      	bne.n	8001ede <HAL_UART_RxCpltCallback+0x3fe>
				zpt++;
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001ed6:	6013      	str	r3, [r2, #0]
				ind=0;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10e      	bne.n	8001f04 <HAL_UART_RxCpltCallback+0x424>
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b2c      	cmp	r3, #44	; 0x2c
 8001eec:	d00a      	beq.n	8001f04 <HAL_UART_RxCpltCallback+0x424>

				time_buff[ind]=buff[0];
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001ef4:	7811      	ldrb	r1, [r2, #0]
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001ef8:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_UART_RxCpltCallback+0x450>)
 8001f02:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_UART_RxCpltCallback+0x44c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d13b      	bne.n	8001f84 <HAL_UART_RxCpltCallback+0x4a4>
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_UART_RxCpltCallback+0x440>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b2c      	cmp	r3, #44	; 0x2c
 8001f12:	d137      	bne.n	8001f84 <HAL_UART_RxCpltCallback+0x4a4>
				gps.hours[0]=time_buff[0];
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_UART_RxCpltCallback+0x454>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	e012      	b.n	8001f40 <HAL_UART_RxCpltCallback+0x460>
 8001f1a:	bf00      	nop
 8001f1c:	20000cf4 	.word	0x20000cf4
 8001f20:	20000d38 	.word	0x20000d38
 8001f24:	20000cd4 	.word	0x20000cd4
 8001f28:	20000cd0 	.word	0x20000cd0
 8001f2c:	20000ce0 	.word	0x20000ce0
 8001f30:	20000cec 	.word	0x20000cec
 8001f34:	20000d28 	.word	0x20000d28
 8001f38:	200050c8 	.word	0x200050c8
 8001f3c:	20000d3c 	.word	0x20000d3c
 8001f40:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f42:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 8001f44:	4b4d      	ldr	r3, [pc, #308]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f46:	785a      	ldrb	r2, [r3, #1]
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f4a:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f4e:	789a      	ldrb	r2, [r3, #2]
 8001f50:	4b49      	ldr	r3, [pc, #292]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f52:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 8001f54:	4b49      	ldr	r3, [pc, #292]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f56:	78da      	ldrb	r2, [r3, #3]
 8001f58:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f5a:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 8001f5c:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f5e:	791a      	ldrb	r2, [r3, #4]
 8001f60:	4b45      	ldr	r3, [pc, #276]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f62:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 8001f64:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f66:	795a      	ldrb	r2, [r3, #5]
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f6a:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 8001f6c:	4b43      	ldr	r3, [pc, #268]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f6e:	799a      	ldrb	r2, [r3, #6]
 8001f70:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f72:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 8001f74:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f76:	79da      	ldrb	r2, [r3, #7]
 8001f78:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f7a:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f7e:	7a1a      	ldrb	r2, [r3, #8]
 8001f80:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001f82:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 8001f84:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <HAL_UART_RxCpltCallback+0x5a0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d10e      	bne.n	8001faa <HAL_UART_RxCpltCallback+0x4ca>
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_UART_RxCpltCallback+0x5a4>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b2c      	cmp	r3, #44	; 0x2c
 8001f92:	d00a      	beq.n	8001faa <HAL_UART_RxCpltCallback+0x4ca>

				time_buff[ind]=buff[0];
 8001f94:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <HAL_UART_RxCpltCallback+0x5a8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3a      	ldr	r2, [pc, #232]	; (8002084 <HAL_UART_RxCpltCallback+0x5a4>)
 8001f9a:	7811      	ldrb	r1, [r2, #0]
 8001f9c:	4a37      	ldr	r2, [pc, #220]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001f9e:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001fa0:	4b39      	ldr	r3, [pc, #228]	; (8002088 <HAL_UART_RxCpltCallback+0x5a8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a38      	ldr	r2, [pc, #224]	; (8002088 <HAL_UART_RxCpltCallback+0x5a8>)
 8001fa8:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8001faa:	4b35      	ldr	r3, [pc, #212]	; (8002080 <HAL_UART_RxCpltCallback+0x5a0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_UART_RxCpltCallback+0x4e2>
 8001fb2:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_UART_RxCpltCallback+0x5a4>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b2c      	cmp	r3, #44	; 0x2c
 8001fb8:	d103      	bne.n	8001fc2 <HAL_UART_RxCpltCallback+0x4e2>
				gps.sinc[1]=time_buff[0];
 8001fba:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001fc0:	769a      	strb	r2, [r3, #26]
			}

			if(zpt==9&&buff[0]!=','){
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_UART_RxCpltCallback+0x5a0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b09      	cmp	r3, #9
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_UART_RxCpltCallback+0x508>
 8001fca:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <HAL_UART_RxCpltCallback+0x5a4>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b2c      	cmp	r3, #44	; 0x2c
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_UART_RxCpltCallback+0x508>

				time_buff[ind]=buff[0];
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_UART_RxCpltCallback+0x5a8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <HAL_UART_RxCpltCallback+0x5a4>)
 8001fd8:	7811      	ldrb	r1, [r2, #0]
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001fdc:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_UART_RxCpltCallback+0x5a8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <HAL_UART_RxCpltCallback+0x5a8>)
 8001fe6:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_UART_RxCpltCallback+0x5a0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b0a      	cmp	r3, #10
 8001fee:	d123      	bne.n	8002038 <HAL_UART_RxCpltCallback+0x558>
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_UART_RxCpltCallback+0x5a4>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ff6:	d11f      	bne.n	8002038 <HAL_UART_RxCpltCallback+0x558>
				gps.day[0]=time_buff[0];
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8001ffe:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8002002:	785a      	ldrb	r2, [r3, #1]
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8002006:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 800200a:	789a      	ldrb	r2, [r3, #2]
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 800200e:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[3];
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8002012:	78da      	ldrb	r2, [r3, #3]
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8002016:	711a      	strb	r2, [r3, #4]
				gps.year[0]=time_buff[4];
 8002018:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 800201a:	791a      	ldrb	r2, [r3, #4]
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 800201e:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[5];
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8002022:	795a      	ldrb	r2, [r3, #5]
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8002026:	71da      	strb	r2, [r3, #7]
				year_str[0]=time_buff[4];
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 800202a:	791a      	ldrb	r2, [r3, #4]
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_UART_RxCpltCallback+0x5ac>)
 800202e:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[5];
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_UART_RxCpltCallback+0x59c>)
 8002032:	795a      	ldrb	r2, [r3, #5]
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_UART_RxCpltCallback+0x5ac>)
 8002036:	705a      	strb	r2, [r3, #1]
			}
		}

		//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_UART_RxCpltCallback+0x5b0>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_UART_RxCpltCallback+0x5b4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_UART_RxCpltCallback+0x572>

			//HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);

			dataReceived=0;
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_UART_RxCpltCallback+0x5b0>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_UART_RxCpltCallback+0x5b4>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 8002052:	2201      	movs	r2, #1
 8002054:	490b      	ldr	r1, [pc, #44]	; (8002084 <HAL_UART_RxCpltCallback+0x5a4>)
 8002056:	4810      	ldr	r0, [pc, #64]	; (8002098 <HAL_UART_RxCpltCallback+0x5b8>)
 8002058:	f005 fe81 	bl	8007d5e <HAL_UART_Receive_IT>
		gps.errors[1]=ERRORS;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_UART_RxCpltCallback+0x5bc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_UART_RxCpltCallback+0x598>)
 8002064:	761a      	strb	r2, [r3, #24]
		count++;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_UART_RxCpltCallback+0x5c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_UART_RxCpltCallback+0x5c0>)
 800206e:	6013      	str	r3, [r2, #0]
	}
}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200050c8 	.word	0x200050c8
 800207c:	20000d28 	.word	0x20000d28
 8002080:	20000ce0 	.word	0x20000ce0
 8002084:	20000d38 	.word	0x20000d38
 8002088:	20000cec 	.word	0x20000cec
 800208c:	20000d3c 	.word	0x20000d3c
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004
 8002098:	2000520c 	.word	0x2000520c
 800209c:	20000cd0 	.word	0x20000cd0
 80020a0:	20000cf4 	.word	0x20000cf4

080020a4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

//	//if(huart == &huart6) {

		dataTransmitted=1;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_UART_TxCpltCallback+0x30>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_UART_TxCpltCallback+0x34>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_UART_TxCpltCallback+0x22>
			//HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
			dataReceived=0;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_UART_TxCpltCallback+0x34>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_UART_TxCpltCallback+0x30>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
		}
	//}
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000004 	.word	0x20000004
 80020d8:	20000000 	.word	0x20000000
 80020dc:	00000000 	.word	0x00000000

080020e0 <Hex_to_dec>:

char Hex_to_dec(char hex[2]){
 80020e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
    dec = 0;
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <Hex_to_dec+0x108>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe f895 	bl	8000224 <strlen>
 80020fa:	4603      	mov	r3, r0
 80020fc:	3b01      	subs	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e060      	b.n	80021c4 <Hex_to_dec+0xe4>
        switch (hex[i]) {
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	3b41      	subs	r3, #65	; 0x41
 800210c:	2b05      	cmp	r3, #5
 800210e:	d821      	bhi.n	8002154 <Hex_to_dec+0x74>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <Hex_to_dec+0x38>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002131 	.word	0x08002131
 800211c:	08002137 	.word	0x08002137
 8002120:	0800213d 	.word	0x0800213d
 8002124:	08002143 	.word	0x08002143
 8002128:	08002149 	.word	0x08002149
 800212c:	0800214f 	.word	0x0800214f
        case 'A':
            dig = 10;
 8002130:	230a      	movs	r3, #10
 8002132:	613b      	str	r3, [r7, #16]
            break;
 8002134:	e014      	b.n	8002160 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 8002136:	230b      	movs	r3, #11
 8002138:	613b      	str	r3, [r7, #16]
            break;
 800213a:	e011      	b.n	8002160 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 800213c:	230c      	movs	r3, #12
 800213e:	613b      	str	r3, [r7, #16]
            break;
 8002140:	e00e      	b.n	8002160 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 8002142:	230d      	movs	r3, #13
 8002144:	613b      	str	r3, [r7, #16]
            break;
 8002146:	e00b      	b.n	8002160 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 8002148:	230e      	movs	r3, #14
 800214a:	613b      	str	r3, [r7, #16]
            break;
 800214c:	e008      	b.n	8002160 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 800214e:	230f      	movs	r3, #15
 8002150:	613b      	str	r3, [r7, #16]
            break;
 8002152:	e005      	b.n	8002160 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	3b30      	subs	r3, #48	; 0x30
 800215e:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <Hex_to_dec+0x108>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fa0d 	bl	8000584 <__aeabi_i2d>
 800216a:	4604      	mov	r4, r0
 800216c:	460d      	mov	r5, r1
 800216e:	6938      	ldr	r0, [r7, #16]
 8002170:	f7fe fa08 	bl	8000584 <__aeabi_i2d>
 8002174:	4680      	mov	r8, r0
 8002176:	4689      	mov	r9, r1
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7fe fa03 	bl	8000584 <__aeabi_i2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	ec43 2b11 	vmov	d1, r2, r3
 8002186:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80021e0 <Hex_to_dec+0x100>
 800218a:	f021 fa5f 	bl	802364c <pow>
 800218e:	ec53 2b10 	vmov	r2, r3, d0
 8002192:	4640      	mov	r0, r8
 8002194:	4649      	mov	r1, r9
 8002196:	f7fe fa5f 	bl	8000658 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe f8a3 	bl	80002ec <__adddf3>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe fd03 	bl	8000bb8 <__aeabi_d2iz>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <Hex_to_dec+0x108>)
 80021b6:	6013      	str	r3, [r2, #0]
        cont++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da9b      	bge.n	8002102 <Hex_to_dec+0x22>
    }
    return dec;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <Hex_to_dec+0x108>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w
 80021e0:	00000000 	.word	0x00000000
 80021e4:	40300000 	.word	0x40300000
 80021e8:	20005290 	.word	0x20005290

080021ec <calc_crc>:


char calc_crc(char c,int cnt){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b2a      	cmp	r3, #42	; 0x2a
 80021fc:	d108      	bne.n	8002210 <calc_crc+0x24>
		start_crc=0;
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <calc_crc+0xa0>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <calc_crc+0xa4>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
		z=0;
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <calc_crc+0xa8>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <calc_crc+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <calc_crc+0x38>
		crc^=c;
 8002218:	79fa      	ldrb	r2, [r7, #7]
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <calc_crc+0xac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4053      	eors	r3, r2
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <calc_crc+0xac>)
 8002222:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <calc_crc+0xa4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d110      	bne.n	800224e <calc_crc+0x62>
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b2a      	cmp	r3, #42	; 0x2a
 8002230:	d00d      	beq.n	800224e <calc_crc+0x62>
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <calc_crc+0xa8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	dc09      	bgt.n	800224e <calc_crc+0x62>
		crc_buff[z]=c;
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <calc_crc+0xa8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4917      	ldr	r1, [pc, #92]	; (800229c <calc_crc+0xb0>)
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	54ca      	strb	r2, [r1, r3]
		z++;
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <calc_crc+0xa8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <calc_crc+0xa8>)
 800224c:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b0a      	cmp	r3, #10
 8002252:	d10a      	bne.n	800226a <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 8002254:	4811      	ldr	r0, [pc, #68]	; (800229c <calc_crc+0xb0>)
 8002256:	f7ff ff43 	bl	80020e0 <Hex_to_dec>
		if(crc==dec){
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <calc_crc+0xac>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <calc_crc+0xb4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d101      	bne.n	800226a <calc_crc+0x7e>
			//Test++;
			return 1;
 8002266:	2301      	movs	r3, #1
 8002268:	e00c      	b.n	8002284 <calc_crc+0x98>
		}
	}
	if(cnt==0){
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d108      	bne.n	8002282 <calc_crc+0x96>
		start_crc=1;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <calc_crc+0xa0>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <calc_crc+0xa4>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
		crc=0;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <calc_crc+0xac>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000ce4 	.word	0x20000ce4
 8002290:	20000d24 	.word	0x20000d24
 8002294:	20000ce8 	.word	0x20000ce8
 8002298:	20000cf0 	.word	0x20000cf0
 800229c:	20000d34 	.word	0x20000d34
 80022a0:	20005290 	.word	0x20005290

080022a4 <rtc_read>:

time_t rtc_read(void) {
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b092      	sub	sp, #72	; 0x48
 80022a8:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <rtc_read+0x84>)
 80022ac:	4a1f      	ldr	r2, [pc, #124]	; (800232c <rtc_read+0x88>)
 80022ae:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 80022b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b4:	2200      	movs	r2, #0
 80022b6:	4619      	mov	r1, r3
 80022b8:	481b      	ldr	r0, [pc, #108]	; (8002328 <rtc_read+0x84>)
 80022ba:	f004 fdc1 	bl	8006e40 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 80022be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022c2:	2200      	movs	r2, #0
 80022c4:	4619      	mov	r1, r3
 80022c6:	4818      	ldr	r0, [pc, #96]	; (8002328 <rtc_read+0x84>)
 80022c8:	f004 fec0 	bl	800704c <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 80022cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80022d0:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 80022d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80022d6:	613b      	str	r3, [r7, #16]
	timeinfo.tm_mday = dateStruct.Date;
 80022d8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80022dc:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_year = dateStruct.Year + 100;
 80022de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022e2:	3364      	adds	r3, #100	; 0x64
 80022e4:	617b      	str	r3, [r7, #20]
	timeinfo.tm_hour = timeStruct.Hours;
 80022e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022ea:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_min = timeStruct.Minutes;
 80022ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80022f0:	607b      	str	r3, [r7, #4]
	timeinfo.tm_sec = timeStruct.Seconds;
 80022f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022f6:	603b      	str	r3, [r7, #0]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 80022f8:	463b      	mov	r3, r7
 80022fa:	4618      	mov	r0, r3
 80022fc:	f019 f970 	bl	801b5e0 <mktime>
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <rtc_read+0x8c>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <rtc_read+0x90>)
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	461a      	mov	r2, r3
 800230c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002310:	1884      	adds	r4, r0, r2
 8002312:	eb41 0503 	adc.w	r5, r1, r3
 8002316:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40


	return t;
 800231a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	3748      	adds	r7, #72	; 0x48
 8002324:	46bd      	mov	sp, r7
 8002326:	bdb0      	pop	{r4, r5, r7, pc}
 8002328:	20005298 	.word	0x20005298
 800232c:	40002800 	.word	0x40002800
 8002330:	200050e4 	.word	0x200050e4
 8002334:	08028090 	.word	0x08028090

08002338 <tcpecho_init>:

void tcpecho_init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 800233e:	2301      	movs	r3, #1
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002346:	2200      	movs	r2, #0
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <tcpecho_init+0x20>)
 800234a:	4804      	ldr	r0, [pc, #16]	; (800235c <tcpecho_init+0x24>)
 800234c:	f018 fed0 	bl	801b0f0 <sys_thread_new>
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	0800245d 	.word	0x0800245d
 800235c:	080246e4 	.word	0x080246e4

08002360 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002368:	f006 ff24 	bl	80091b4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 800236c:	f00d fb9c 	bl	800faa8 <httpd_init>
	/* Initialize tcp echo server */
	tcpecho_init();
 8002370:	f7ff ffe2 	bl	8002338 <tcpecho_init>


	  ip4_addr_t add;
	  inet_aton(user_info.ip, &add);
 8002374:	f107 0318 	add.w	r3, r7, #24
 8002378:	4619      	mov	r1, r3
 800237a:	4831      	ldr	r0, [pc, #196]	; (8002440 <StartDefaultTask+0xe0>)
 800237c:	f017 fce2 	bl	8019d44 <ip4addr_aton>
	  setIP(add.addr);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	4618      	mov	r0, r3
 8002384:	f006 fef2 	bl	800916c <setIP>

	ip4_addr_t mask;
	inet_aton(user_info.netmask, &mask);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	482d      	ldr	r0, [pc, #180]	; (8002444 <StartDefaultTask+0xe4>)
 8002390:	f017 fcd8 	bl	8019d44 <ip4addr_aton>
	setNetmask(mask.addr);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4618      	mov	r0, r3
 8002398:	f006 fefa 	bl	8009190 <setNetmask>
	int IPres=0;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
	/* Infinite loop */
	for(;;)
	{

		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 80023a0:	2201      	movs	r2, #1
 80023a2:	4929      	ldr	r1, [pc, #164]	; (8002448 <StartDefaultTask+0xe8>)
 80023a4:	4829      	ldr	r0, [pc, #164]	; (800244c <StartDefaultTask+0xec>)
 80023a6:	f005 fcda 	bl	8007d5e <HAL_UART_Receive_IT>

		if(HAL_GPIO_ReadPin (GPIOI, Button_Pin)){
 80023aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ae:	4828      	ldr	r0, [pc, #160]	; (8002450 <StartDefaultTask+0xf0>)
 80023b0:	f003 fa96 	bl	80058e0 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <StartDefaultTask+0x62>

			IPres=IPres+1;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3301      	adds	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	e035      	b.n	800242e <StartDefaultTask+0xce>
		}
		else
		{
			HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin,GPIO_PIN_RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2102      	movs	r1, #2
 80023c6:	4822      	ldr	r0, [pc, #136]	; (8002450 <StartDefaultTask+0xf0>)
 80023c8:	f003 faa2 	bl	8005910 <HAL_GPIO_WritePin>
			if(IPres>5){
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	dd2b      	ble.n	800242a <StartDefaultTask+0xca>
				memset(&user_info,0,sizeof(user_info));
 80023d2:	f44f 7292 	mov.w	r2, #292	; 0x124
 80023d6:	2100      	movs	r1, #0
 80023d8:	4819      	ldr	r0, [pc, #100]	; (8002440 <StartDefaultTask+0xe0>)
 80023da:	f019 f821 	bl	801b420 <memset>
				strncpy(user_info.ip,"192.168.0.68",13);
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <StartDefaultTask+0xe0>)
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <StartDefaultTask+0xf4>)
 80023e2:	4614      	mov	r4, r2
 80023e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e6:	c407      	stmia	r4!, {r0, r1, r2}
 80023e8:	7023      	strb	r3, [r4, #0]
				strncpy(user_info.netmask,"255.255.255.0",14);
 80023ea:	4a16      	ldr	r2, [pc, #88]	; (8002444 <StartDefaultTask+0xe4>)
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <StartDefaultTask+0xf8>)
 80023ee:	4614      	mov	r4, r2
 80023f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80023f2:	6020      	str	r0, [r4, #0]
 80023f4:	6061      	str	r1, [r4, #4]
 80023f6:	60a2      	str	r2, [r4, #8]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	81a3      	strh	r3, [r4, #12]
				user_info.zone=12;
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <StartDefaultTask+0xe0>)
 80023fe:	220c      	movs	r2, #12
 8002400:	611a      	str	r2, [r3, #16]
				//setIPaddr
				ip4_addr_t add;
				inet_aton(user_info.ip, &add);
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	4619      	mov	r1, r3
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <StartDefaultTask+0xe0>)
 800240a:	f017 fc9b 	bl	8019d44 <ip4addr_aton>
				setIP(add.addr);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4618      	mov	r0, r3
 8002412:	f006 feab 	bl	800916c <setIP>
				//setNetMask
				ip4_addr_t mask;
				inet_aton(user_info.netmask, &mask);
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	4619      	mov	r1, r3
 800241c:	4809      	ldr	r0, [pc, #36]	; (8002444 <StartDefaultTask+0xe4>)
 800241e:	f017 fc91 	bl	8019d44 <ip4addr_aton>
				setNetmask(mask.addr);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f006 feb3 	bl	8009190 <setNetmask>
			}
			IPres=0;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]

		}
		//HAL_GPIO_TogglePin(Led_GPIO_Port, Led1_Pin);
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 800242e:	2102      	movs	r1, #2
 8002430:	4807      	ldr	r0, [pc, #28]	; (8002450 <StartDefaultTask+0xf0>)
 8002432:	f003 fa86 	bl	8005942 <HAL_GPIO_TogglePin>
		//HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
		//HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
		HAL_Delay(1000);
 8002436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800243a:	f001 fc81 	bl	8003d40 <HAL_Delay>
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 800243e:	e7af      	b.n	80023a0 <StartDefaultTask+0x40>
 8002440:	200050e4 	.word	0x200050e4
 8002444:	200051f7 	.word	0x200051f7
 8002448:	20000d38 	.word	0x20000d38
 800244c:	2000520c 	.word	0x2000520c
 8002450:	40022000 	.word	0x40022000
 8002454:	080246f4 	.word	0x080246f4
 8002458:	08024704 	.word	0x08024704

0800245c <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
		//struct tm tm_;
		//uint32_t tm_ms_;


		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_UDP);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2020      	movs	r0, #32
 800246a:	f00a fb6d 	bl	800cb48 <netconn_new_with_proto_and_callback>
 800246e:	61f8      	str	r0, [r7, #28]
		if (conn!=NULL)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8089 	beq.w	800258a <tcpecho_thread+0x12e>
		{
			/* Bind connection to well known port number 7. */
			err = netconn_bind(conn, NULL, 123);
 8002478:	227b      	movs	r2, #123	; 0x7b
 800247a:	2100      	movs	r1, #0
 800247c:	69f8      	ldr	r0, [r7, #28]
 800247e:	f00a fc1d 	bl	800ccbc <netconn_bind>
 8002482:	4603      	mov	r3, r0
 8002484:	76fb      	strb	r3, [r7, #27]
			if (err == ERR_OK)
 8002486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d17a      	bne.n	8002584 <tcpecho_thread+0x128>
			{
				while (1)
				{
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 800248e:	e067      	b.n	8002560 <tcpecho_thread+0x104>
					{
						do
						{
							netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f107 0212 	add.w	r2, r7, #18
 8002496:	f107 010c 	add.w	r1, r7, #12
 800249a:	4618      	mov	r0, r3
 800249c:	f00c f914 	bl	800e6c8 <netbuf_data>

							if(buf_data_len < 48 || buf_data_len > 2048)
 80024a0:	8a7b      	ldrh	r3, [r7, #18]
 80024a2:	2b2f      	cmp	r3, #47	; 0x2f
 80024a4:	d903      	bls.n	80024ae <tcpecho_thread+0x52>
 80024a6:	8a7b      	ldrh	r3, [r7, #18]
 80024a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ac:	d904      	bls.n	80024b8 <tcpecho_thread+0x5c>
							{
								netbuf_delete(buf);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00c f8e9 	bl	800e688 <netbuf_delete>
								continue;
 80024b6:	e048      	b.n	800254a <tcpecho_thread+0xee>
							}
							ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	701a      	strb	r2, [r3, #0]
							ntp_packet_ptr->stratum = ntpd_status.stratum;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a34      	ldr	r2, [pc, #208]	; (8002594 <tcpecho_thread+0x138>)
 80024c2:	7a12      	ldrb	r2, [r2, #8]
 80024c4:	705a      	strb	r2, [r3, #1]
							ntp_packet_ptr->poll = 5; // 32s
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2205      	movs	r2, #5
 80024ca:	709a      	strb	r2, [r3, #2]
							ntp_packet_ptr->precision = -10; // ~1ms
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	22f6      	movs	r2, #246	; 0xf6
 80024d0:	70da      	strb	r2, [r3, #3]

							ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
							ntp_packet_ptr->rootDispersion_s = 0;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	811a      	strh	r2, [r3, #8]
							ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 80024de:	2041      	movs	r0, #65	; 0x41
 80024e0:	f00d fb17 	bl	800fb12 <lwip_htonl>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	b292      	uxth	r2, r2
 80024ea:	815a      	strh	r2, [r3, #10]
							ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <tcpecho_thread+0x13c>)
 80024f0:	60da      	str	r2, [r3, #12]
							/* Move client's transmit timestamp into origin fields */
							ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024f8:	619a      	str	r2, [r3, #24]
							ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002500:	61da      	str	r2, [r3, #28]

							ntp_packet_ptr->refTm_s = time_ref_s;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a25      	ldr	r2, [pc, #148]	; (800259c <tcpecho_thread+0x140>)
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	611a      	str	r2, [r3, #16]
							ntp_packet_ptr->refTm_f = time_ref_f;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <tcpecho_thread+0x144>)
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	615a      	str	r2, [r3, #20]

							//rtcGetTime(&RTCD1, &ntpd_datetime);
							//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

							ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 8002512:	f7ff fec7 	bl	80022a4 <rtc_read>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <tcpecho_thread+0x148>)
 800251c:	4413      	add	r3, r2
 800251e:	68fc      	ldr	r4, [r7, #12]
 8002520:	4618      	mov	r0, r3
 8002522:	f00d faf6 	bl	800fb12 <lwip_htonl>
 8002526:	4603      	mov	r3, r0
 8002528:	6223      	str	r3, [r4, #32]
							ntp_packet_ptr->rxTm_f = 0;//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

							/* Copy into transmit timestamp fields */
							ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a12      	ldr	r2, [r2, #32]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
							ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c

							netconn_send(conn, buf);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	4619      	mov	r1, r3
 8002544:	69f8      	ldr	r0, [r7, #28]
 8002546:	f00a fde7 	bl	800d118 <netconn_send>
						}
						while (netbuf_next(buf) >= 0);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4618      	mov	r0, r3
 800254e:	f00c f905 	bl	800e75c <netbuf_next>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	da9b      	bge.n	8002490 <tcpecho_thread+0x34>

						netbuf_delete(buf);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4618      	mov	r0, r3
 800255c:	f00c f894 	bl	800e688 <netbuf_delete>
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4619      	mov	r1, r3
 8002566:	69f8      	ldr	r0, [r7, #28]
 8002568:	f00a fd5c 	bl	800d024 <netconn_recv>
 800256c:	4603      	mov	r3, r0
 800256e:	76bb      	strb	r3, [r7, #26]
 8002570:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d08b      	beq.n	8002490 <tcpecho_thread+0x34>
					}
					/* Close connection and discard connection identifier. */
					//netconn_close(newconn);
					//netconn_delete(newconn);
					ntpd_status.requests_count++;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <tcpecho_thread+0x138>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	3301      	adds	r3, #1
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <tcpecho_thread+0x138>)
 8002580:	6053      	str	r3, [r2, #4]
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002582:	e7ed      	b.n	8002560 <tcpecho_thread+0x104>
				}
			}
			else
			{
				netconn_delete(conn);
 8002584:	69f8      	ldr	r0, [r7, #28]
 8002586:	f00a fb7d 	bl	800cc84 <netconn_delete>
			}
		}

  /* USER CODE END tcpecho_thread */
}
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	bf00      	nop
 8002594:	2000000c 	.word	0x2000000c
 8002598:	00535047 	.word	0x00535047
 800259c:	20005308 	.word	0x20005308
 80025a0:	20005304 	.word	0x20005304
 80025a4:	83aa7e80 	.word	0x83aa7e80

080025a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
//    {
//            HAL_GPIO_TogglePin(Timled_GPIO_Port, Timled_Pin);
//            //200 МГц APB2
//   }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025ba:	f001 fba1 	bl	8003d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40001000 	.word	0x40001000

080025cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d0:	b672      	cpsid	i
}
 80025d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <Error_Handler+0x8>
	...

080025d8 <fs_open_custom>:
#define JSON_SIZE 1608
struct tm WebPageTime;
int fs_read_custom(struct fs_file *file, char *buffer, int count){
	return 0;
}
int fs_open_custom(struct fs_file *file, const char *name){
 80025d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025dc:	f2ad 6df4 	subw	sp, sp, #1780	; 0x6f4
 80025e0:	af04      	add	r7, sp, #16
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	6018      	str	r0, [r3, #0]
 80025e6:	463b      	mov	r3, r7
 80025e8:	6019      	str	r1, [r3, #0]
	char generated_html[JSON_SIZE];
	memset(generated_html, 0, JSON_SIZE);
 80025ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025ee:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f018 ff13 	bl	801b420 <memset>
	u16_t offset = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de

	if (!strcmp(name, "/info.json")) {
 8002600:	463b      	mov	r3, r7
 8002602:	499f      	ldr	r1, [pc, #636]	; (8002880 <fs_open_custom+0x2a8>)
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	f7fd fe03 	bl	8000210 <strcmp>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d14a      	bne.n	80026a6 <fs_open_custom+0xce>

		char* ip=user_info.ip;
 8002610:	4b9c      	ldr	r3, [pc, #624]	; (8002884 <fs_open_custom+0x2ac>)
 8002612:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
		int zone=user_info.zone;
 8002616:	4b9b      	ldr	r3, [pc, #620]	; (8002884 <fs_open_custom+0x2ac>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
		char* contacts=user_info.contacts;
 800261e:	4b9a      	ldr	r3, [pc, #616]	; (8002888 <fs_open_custom+0x2b0>)
 8002620:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		char* netmask=user_info.netmask;
 8002624:	4b99      	ldr	r3, [pc, #612]	; (800288c <fs_open_custom+0x2b4>)
 8002626:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
		char macstr[18]; //string to be displayed on web page
		sprintf (macstr, "%02X:%02X:%02X:%02X:%02X:%02X", getMAC(0), getMAC(1), getMAC(2), getMAC(3), getMAC(4), getMAC(5) );
 800262a:	2000      	movs	r0, #0
 800262c:	f006 fd8c 	bl	8009148 <getMAC>
 8002630:	4603      	mov	r3, r0
 8002632:	4698      	mov	r8, r3
 8002634:	2001      	movs	r0, #1
 8002636:	f006 fd87 	bl	8009148 <getMAC>
 800263a:	4603      	mov	r3, r0
 800263c:	4699      	mov	r9, r3
 800263e:	2002      	movs	r0, #2
 8002640:	f006 fd82 	bl	8009148 <getMAC>
 8002644:	4603      	mov	r3, r0
 8002646:	461c      	mov	r4, r3
 8002648:	2003      	movs	r0, #3
 800264a:	f006 fd7d 	bl	8009148 <getMAC>
 800264e:	4603      	mov	r3, r0
 8002650:	461d      	mov	r5, r3
 8002652:	2004      	movs	r0, #4
 8002654:	f006 fd78 	bl	8009148 <getMAC>
 8002658:	4603      	mov	r3, r0
 800265a:	461e      	mov	r6, r3
 800265c:	2005      	movs	r0, #5
 800265e:	f006 fd73 	bl	8009148 <getMAC>
 8002662:	4603      	mov	r3, r0
 8002664:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002668:	9303      	str	r3, [sp, #12]
 800266a:	9602      	str	r6, [sp, #8]
 800266c:	9501      	str	r5, [sp, #4]
 800266e:	9400      	str	r4, [sp, #0]
 8002670:	464b      	mov	r3, r9
 8002672:	4642      	mov	r2, r8
 8002674:	4986      	ldr	r1, [pc, #536]	; (8002890 <fs_open_custom+0x2b8>)
 8002676:	f019 f9bd 	bl	801b9f4 <sprintf>

			offset = sprintf(generated_html,"[{\"IPaddress\":\"%s\",\"NetMask\":\"%s\",\"Timezone\":\"%d\",\"contacts\":\"%s\",\"software_version\":\"0.00001\",\"mac\":\"%s\"}]",ip,netmask,zone,contacts,macstr);
 800267a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800267e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8002694:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 8002698:	497e      	ldr	r1, [pc, #504]	; (8002894 <fs_open_custom+0x2bc>)
 800269a:	f019 f9ab 	bl	801b9f4 <sprintf>
 800269e:	4603      	mov	r3, r0
 80026a0:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
 80026a4:	e0a7      	b.n	80027f6 <fs_open_custom+0x21e>
	}
	else if (!strcmp(name, "/uptime.json")) {
 80026a6:	463b      	mov	r3, r7
 80026a8:	497b      	ldr	r1, [pc, #492]	; (8002898 <fs_open_custom+0x2c0>)
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	f7fd fdb0 	bl	8000210 <strcmp>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 809f 	bne.w	80027f6 <fs_open_custom+0x21e>
		RTC_DateTypeDef dateStruct;
		RTC_TimeTypeDef timeStruct;

		//hrtc.Instance = RTC;
		if (gps.year[0]!='V'){
 80026b8:	4b78      	ldr	r3, [pc, #480]	; (800289c <fs_open_custom+0x2c4>)
 80026ba:	799b      	ldrb	r3, [r3, #6]
 80026bc:	2b56      	cmp	r3, #86	; 0x56
 80026be:	f000 808d 	beq.w	80027dc <fs_open_custom+0x204>
			// Read actual date and time
			HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 80026c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026c6:	2200      	movs	r2, #0
 80026c8:	4619      	mov	r1, r3
 80026ca:	4875      	ldr	r0, [pc, #468]	; (80028a0 <fs_open_custom+0x2c8>)
 80026cc:	f004 fbb8 	bl	8006e40 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 80026d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026d4:	2200      	movs	r2, #0
 80026d6:	4619      	mov	r1, r3
 80026d8:	4871      	ldr	r0, [pc, #452]	; (80028a0 <fs_open_custom+0x2c8>)
 80026da:	f004 fcb7 	bl	800704c <HAL_RTC_GetDate>

			struct tm timeinfo;

			timeinfo.tm_wday = dateStruct.WeekDay;
 80026de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	619a      	str	r2, [r3, #24]
			timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 80026ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	611a      	str	r2, [r3, #16]
			timeinfo.tm_mday = dateStruct.Date;
 80026fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026fe:	789b      	ldrb	r3, [r3, #2]
 8002700:	461a      	mov	r2, r3
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	60da      	str	r2, [r3, #12]
			timeinfo.tm_year = dateStruct.Year;
 8002708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800270c:	78db      	ldrb	r3, [r3, #3]
 800270e:	461a      	mov	r2, r3
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	615a      	str	r2, [r3, #20]
			timeinfo.tm_hour = timeStruct.Hours;
 8002716:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	609a      	str	r2, [r3, #8]
			timeinfo.tm_min = timeStruct.Minutes;
 8002724:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002728:	785b      	ldrb	r3, [r3, #1]
 800272a:	461a      	mov	r2, r3
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	605a      	str	r2, [r3, #4]
			timeinfo.tm_sec = timeStruct.Seconds;
 8002732:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002736:	789b      	ldrb	r3, [r3, #2]
 8002738:	461a      	mov	r2, r3
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	601a      	str	r2, [r3, #0]

			time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	4618      	mov	r0, r3
 8002746:	f018 ff4b 	bl	801b5e0 <mktime>
 800274a:	4b4e      	ldr	r3, [pc, #312]	; (8002884 <fs_open_custom+0x2ac>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4a55      	ldr	r2, [pc, #340]	; (80028a4 <fs_open_custom+0x2cc>)
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	461a      	mov	r2, r3
 8002756:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800275a:	1884      	adds	r4, r0, r2
 800275c:	eb41 0503 	adc.w	r5, r1, r3
 8002760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002764:	e9c3 4500 	strd	r4, r5, [r3]
			// time_t  to   tm

			localtime_r(  &t, &WebPageTime );
 8002768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276c:	494e      	ldr	r1, [pc, #312]	; (80028a8 <fs_open_custom+0x2d0>)
 800276e:	4618      	mov	r0, r3
 8002770:	f018 fd2a 	bl	801b1c8 <localtime_r>

			int Hours=WebPageTime.tm_hour;
 8002774:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <fs_open_custom+0x2d0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
			int Minutes=WebPageTime.tm_min;
 800277c:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <fs_open_custom+0x2d0>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
			int Seconds=WebPageTime.tm_sec;
 8002784:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <fs_open_custom+0x2d0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
			int Date=WebPageTime.tm_mday;
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <fs_open_custom+0x2d0>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
			int Month=WebPageTime.tm_mon+1;
 8002794:	4b44      	ldr	r3, [pc, #272]	; (80028a8 <fs_open_custom+0x2d0>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	3301      	adds	r3, #1
 800279a:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
			int Year=WebPageTime.tm_year+2000;
 800279e:	4b42      	ldr	r3, [pc, #264]	; (80028a8 <fs_open_custom+0x2d0>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80027a6:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4


			offset = sprintf(generated_html,"%02d:%02d:%02d %02d.%02d.%04d",Hours,Minutes,Seconds,Date,Month,Year);
 80027aa:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80027ae:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 80027b2:	9303      	str	r3, [sp, #12]
 80027b4:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 80027ca:	f8d7 26d8 	ldr.w	r2, [r7, #1752]	; 0x6d8
 80027ce:	4937      	ldr	r1, [pc, #220]	; (80028ac <fs_open_custom+0x2d4>)
 80027d0:	f019 f910 	bl	801b9f4 <sprintf>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
 80027da:	e00c      	b.n	80027f6 <fs_open_custom+0x21e>
		}
		else if (gps.year[0]=='V') {
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <fs_open_custom+0x2c4>)
 80027de:	799b      	ldrb	r3, [r3, #6]
 80027e0:	2b56      	cmp	r3, #86	; 0x56
 80027e2:	d108      	bne.n	80027f6 <fs_open_custom+0x21e>
			offset = sprintf(generated_html,"no reference time");
 80027e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027e8:	4931      	ldr	r1, [pc, #196]	; (80028b0 <fs_open_custom+0x2d8>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f019 f902 	bl	801b9f4 <sprintf>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
//		else if (gps.year[0]=='') {
//					offset = sprintf(generated_html,"no Reference Timestamp");
//				}
	}

	if (offset>0){
 80027f6:	f8b7 36de 	ldrh.w	r3, [r7, #1758]	; 0x6de
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00e      	beq.n	800281c <fs_open_custom+0x244>
		memset(file, 0, sizeof(struct fs_file));
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	2214      	movs	r2, #20
 8002802:	2100      	movs	r1, #0
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	f018 fe0b 	bl	801b420 <memset>
		file->pextension = mem_malloc(offset);
 800280a:	f8b7 36de 	ldrh.w	r3, [r7, #1758]	; 0x6de
 800280e:	4618      	mov	r0, r3
 8002810:	f00d fcd4 	bl	80101bc <mem_malloc>
 8002814:	4602      	mov	r2, r0
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60da      	str	r2, [r3, #12]
	}

	if (file->pextension != NULL) {
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d020      	beq.n	8002868 <fs_open_custom+0x290>
		/* instead of doing memcpy, you would generate e.g. a JSON here */
		memcpy(file->pextension, generated_html, offset);
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f8b7 26de 	ldrh.w	r2, [r7, #1758]	; 0x6de
 8002830:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002834:	4618      	mov	r0, r3
 8002836:	f018 fdcb 	bl	801b3d0 <memcpy>
		file->data = (const char *)file->pextension;
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	601a      	str	r2, [r3, #0]
		file->len = offset; /* don't send the trailing 0 */
 8002846:	f8b7 26de 	ldrh.w	r2, [r7, #1758]	; 0x6de
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
		file->index = file->len;
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	609a      	str	r2, [r3, #8]
		/* allow persisteng connections */
		file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	741a      	strb	r2, [r3, #16]
		return 1;
 8002864:	2301      	movs	r3, #1
 8002866:	e005      	b.n	8002874 <fs_open_custom+0x29c>
	}

	printf("Extension fail %s\n\r",name);
 8002868:	463b      	mov	r3, r7
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	4811      	ldr	r0, [pc, #68]	; (80028b4 <fs_open_custom+0x2dc>)
 800286e:	f019 f85d 	bl	801b92c <printf>
	return 0;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	f207 67e4 	addw	r7, r7, #1764	; 0x6e4
 800287a:	46bd      	mov	sp, r7
 800287c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002880:	08024714 	.word	0x08024714
 8002884:	200050e4 	.word	0x200050e4
 8002888:	200050f8 	.word	0x200050f8
 800288c:	200051f7 	.word	0x200051f7
 8002890:	08024720 	.word	0x08024720
 8002894:	08024740 	.word	0x08024740
 8002898:	080247ac 	.word	0x080247ac
 800289c:	200050c8 	.word	0x200050c8
 80028a0:	20005298 	.word	0x20005298
 80028a4:	08028090 	.word	0x08028090
 80028a8:	20005330 	.word	0x20005330
 80028ac:	080247bc 	.word	0x080247bc
 80028b0:	080247dc 	.word	0x080247dc
 80028b4:	080247f0 	.word	0x080247f0

080028b8 <fs_close_custom>:
void fs_close_custom(struct fs_file *file){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	if (file && file->pextension) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <fs_close_custom+0x26>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <fs_close_custom+0x26>
		mem_free(file->pextension);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f00d fad8 	bl	800fe88 <mem_free>
		file->pextension = NULL;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
	}
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d801      	bhi.n	8002900 <jsmn_alloc_token+0x1a>
    return NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e014      	b.n	800292a <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	1c59      	adds	r1, r3, #1
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	6051      	str	r1, [r2, #4]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8002928:	697b      	ldr	r3, [r7, #20]
}
 800292a:	4618      	mov	r0, r3
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	460b      	mov	r3, r1
 8002944:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	7afa      	ldrb	r2, [r7, #11]
 800294a:	701a      	strb	r2, [r3, #0]
  token->start = start;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]
  token->end = end;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002980:	e07c      	b.n	8002a7c <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b7d      	cmp	r3, #125	; 0x7d
 800298e:	f000 8083 	beq.w	8002a98 <jsmn_parse_primitive+0x12c>
 8002992:	2b7d      	cmp	r3, #125	; 0x7d
 8002994:	dc58      	bgt.n	8002a48 <jsmn_parse_primitive+0xdc>
 8002996:	2b5d      	cmp	r3, #93	; 0x5d
 8002998:	d07e      	beq.n	8002a98 <jsmn_parse_primitive+0x12c>
 800299a:	2b5d      	cmp	r3, #93	; 0x5d
 800299c:	dc54      	bgt.n	8002a48 <jsmn_parse_primitive+0xdc>
 800299e:	2b2c      	cmp	r3, #44	; 0x2c
 80029a0:	dc50      	bgt.n	8002a44 <jsmn_parse_primitive+0xd8>
 80029a2:	2b09      	cmp	r3, #9
 80029a4:	db50      	blt.n	8002a48 <jsmn_parse_primitive+0xdc>
 80029a6:	3b09      	subs	r3, #9
 80029a8:	2b23      	cmp	r3, #35	; 0x23
 80029aa:	d84d      	bhi.n	8002a48 <jsmn_parse_primitive+0xdc>
 80029ac:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <jsmn_parse_primitive+0x48>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	08002a99 	.word	0x08002a99
 80029b8:	08002a99 	.word	0x08002a99
 80029bc:	08002a49 	.word	0x08002a49
 80029c0:	08002a49 	.word	0x08002a49
 80029c4:	08002a99 	.word	0x08002a99
 80029c8:	08002a49 	.word	0x08002a49
 80029cc:	08002a49 	.word	0x08002a49
 80029d0:	08002a49 	.word	0x08002a49
 80029d4:	08002a49 	.word	0x08002a49
 80029d8:	08002a49 	.word	0x08002a49
 80029dc:	08002a49 	.word	0x08002a49
 80029e0:	08002a49 	.word	0x08002a49
 80029e4:	08002a49 	.word	0x08002a49
 80029e8:	08002a49 	.word	0x08002a49
 80029ec:	08002a49 	.word	0x08002a49
 80029f0:	08002a49 	.word	0x08002a49
 80029f4:	08002a49 	.word	0x08002a49
 80029f8:	08002a49 	.word	0x08002a49
 80029fc:	08002a49 	.word	0x08002a49
 8002a00:	08002a49 	.word	0x08002a49
 8002a04:	08002a49 	.word	0x08002a49
 8002a08:	08002a49 	.word	0x08002a49
 8002a0c:	08002a49 	.word	0x08002a49
 8002a10:	08002a99 	.word	0x08002a99
 8002a14:	08002a49 	.word	0x08002a49
 8002a18:	08002a49 	.word	0x08002a49
 8002a1c:	08002a49 	.word	0x08002a49
 8002a20:	08002a49 	.word	0x08002a49
 8002a24:	08002a49 	.word	0x08002a49
 8002a28:	08002a49 	.word	0x08002a49
 8002a2c:	08002a49 	.word	0x08002a49
 8002a30:	08002a49 	.word	0x08002a49
 8002a34:	08002a49 	.word	0x08002a49
 8002a38:	08002a49 	.word	0x08002a49
 8002a3c:	08002a49 	.word	0x08002a49
 8002a40:	08002a99 	.word	0x08002a99
 8002a44:	2b3a      	cmp	r3, #58	; 0x3a
 8002a46:	d027      	beq.n	8002a98 <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8002a48:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4413      	add	r3, r2
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b1f      	cmp	r3, #31
 8002a56:	d906      	bls.n	8002a66 <jsmn_parse_primitive+0xfa>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b7e      	cmp	r3, #126	; 0x7e
 8002a64:	d905      	bls.n	8002a72 <jsmn_parse_primitive+0x106>
      parser->pos = start;
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8002a6c:	f06f 0301 	mvn.w	r3, #1
 8002a70:	e03b      	b.n	8002aea <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d90a      	bls.n	8002a9c <jsmn_parse_primitive+0x130>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f af76 	bne.w	8002982 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8002a96:	e001      	b.n	8002a9c <jsmn_parse_primitive+0x130>
      goto found;
 8002a98:	bf00      	nop
 8002a9a:	e000      	b.n	8002a9e <jsmn_parse_primitive+0x132>
found:
 8002a9c:	bf00      	nop
  if (tokens == NULL) {
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d106      	bne.n	8002ab2 <jsmn_parse_primitive+0x146>
    parser->pos--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]
    return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e01b      	b.n	8002aea <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002ab2:	6a3a      	ldr	r2, [r7, #32]
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff ff15 	bl	80028e6 <jsmn_alloc_token>
 8002abc:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <jsmn_parse_primitive+0x164>
    parser->pos = start;
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	e00c      	b.n	8002aea <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	6938      	ldr	r0, [r7, #16]
 8002ada:	f7ff ff2c 	bl	8002936 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	1e5a      	subs	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]
  return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop

08002af4 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002b12:	e0e6      	b.n	8002ce2 <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
 8002b22:	2b22      	cmp	r3, #34	; 0x22
 8002b24:	d11d      	bne.n	8002b62 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <jsmn_parse_string+0x3c>
        return 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e0ea      	b.n	8002d06 <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7ff fed6 	bl	80028e6 <jsmn_alloc_token>
 8002b3a:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <jsmn_parse_string+0x5a>
        parser->pos = start;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	e0db      	b.n	8002d06 <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2104      	movs	r1, #4
 8002b58:	6938      	ldr	r0, [r7, #16]
 8002b5a:	f7ff feec 	bl	8002936 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e0d1      	b.n	8002d06 <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b5c      	cmp	r3, #92	; 0x5c
 8002b66:	f040 80b4 	bne.w	8002cd2 <jsmn_parse_string+0x1de>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f240 80ad 	bls.w	8002cd2 <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b75      	cmp	r3, #117	; 0x75
 8002b8e:	f300 809a 	bgt.w	8002cc6 <jsmn_parse_string+0x1d2>
 8002b92:	2b5c      	cmp	r3, #92	; 0x5c
 8002b94:	da06      	bge.n	8002ba4 <jsmn_parse_string+0xb0>
 8002b96:	2b22      	cmp	r3, #34	; 0x22
 8002b98:	f000 809d 	beq.w	8002cd6 <jsmn_parse_string+0x1e2>
 8002b9c:	2b2f      	cmp	r3, #47	; 0x2f
 8002b9e:	f000 809a 	beq.w	8002cd6 <jsmn_parse_string+0x1e2>
 8002ba2:	e090      	b.n	8002cc6 <jsmn_parse_string+0x1d2>
 8002ba4:	3b5c      	subs	r3, #92	; 0x5c
 8002ba6:	2b19      	cmp	r3, #25
 8002ba8:	f200 808d 	bhi.w	8002cc6 <jsmn_parse_string+0x1d2>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <jsmn_parse_string+0xc0>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002cd7 	.word	0x08002cd7
 8002bb8:	08002cc7 	.word	0x08002cc7
 8002bbc:	08002cc7 	.word	0x08002cc7
 8002bc0:	08002cc7 	.word	0x08002cc7
 8002bc4:	08002cc7 	.word	0x08002cc7
 8002bc8:	08002cc7 	.word	0x08002cc7
 8002bcc:	08002cd7 	.word	0x08002cd7
 8002bd0:	08002cc7 	.word	0x08002cc7
 8002bd4:	08002cc7 	.word	0x08002cc7
 8002bd8:	08002cc7 	.word	0x08002cc7
 8002bdc:	08002cd7 	.word	0x08002cd7
 8002be0:	08002cc7 	.word	0x08002cc7
 8002be4:	08002cc7 	.word	0x08002cc7
 8002be8:	08002cc7 	.word	0x08002cc7
 8002bec:	08002cc7 	.word	0x08002cc7
 8002bf0:	08002cc7 	.word	0x08002cc7
 8002bf4:	08002cc7 	.word	0x08002cc7
 8002bf8:	08002cc7 	.word	0x08002cc7
 8002bfc:	08002cd7 	.word	0x08002cd7
 8002c00:	08002cc7 	.word	0x08002cc7
 8002c04:	08002cc7 	.word	0x08002cc7
 8002c08:	08002cc7 	.word	0x08002cc7
 8002c0c:	08002cd7 	.word	0x08002cd7
 8002c10:	08002cc7 	.word	0x08002cc7
 8002c14:	08002cd7 	.word	0x08002cd7
 8002c18:	08002c1d 	.word	0x08002c1d
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	e037      	b.n	8002c9c <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4413      	add	r3, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b2f      	cmp	r3, #47	; 0x2f
 8002c38:	d906      	bls.n	8002c48 <jsmn_parse_string+0x154>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	4413      	add	r3, r2
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b39      	cmp	r3, #57	; 0x39
 8002c46:	d921      	bls.n	8002c8c <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d906      	bls.n	8002c64 <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b46      	cmp	r3, #70	; 0x46
 8002c62:	d913      	bls.n	8002c8c <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002c6e:	2b60      	cmp	r3, #96	; 0x60
 8002c70:	d906      	bls.n	8002c80 <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4413      	add	r3, r2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b66      	cmp	r3, #102	; 0x66
 8002c7e:	d905      	bls.n	8002c8c <jsmn_parse_string+0x198>
            parser->pos = start;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8002c86:	f06f 0301 	mvn.w	r3, #1
 8002c8a:	e03c      	b.n	8002d06 <jsmn_parse_string+0x212>
          }
          parser->pos++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]
             i++) {
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	dc0b      	bgt.n	8002cba <jsmn_parse_string+0x1c6>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d906      	bls.n	8002cba <jsmn_parse_string+0x1c6>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1b8      	bne.n	8002c2c <jsmn_parse_string+0x138>
        }
        parser->pos--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1e5a      	subs	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	601a      	str	r2, [r3, #0]
        break;
 8002cc4:	e008      	b.n	8002cd8 <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8002ccc:	f06f 0301 	mvn.w	r3, #1
 8002cd0:	e019      	b.n	8002d06 <jsmn_parse_string+0x212>
      }
    }
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <jsmn_parse_string+0x1e4>
        break;
 8002cd6:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d907      	bls.n	8002cfc <jsmn_parse_string+0x208>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f af0c 	bne.w	8002b14 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8002d02:	f06f 0302 	mvn.w	r3, #2
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop

08002d10 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002d24:	e1bf      	b.n	80030a6 <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	2b7d      	cmp	r3, #125	; 0x7d
 8002d36:	f000 80b9 	beq.w	8002eac <jsmn_parse+0x19c>
 8002d3a:	2b7d      	cmp	r3, #125	; 0x7d
 8002d3c:	f300 8181 	bgt.w	8003042 <jsmn_parse+0x332>
 8002d40:	2b7b      	cmp	r3, #123	; 0x7b
 8002d42:	d07c      	beq.n	8002e3e <jsmn_parse+0x12e>
 8002d44:	2b7b      	cmp	r3, #123	; 0x7b
 8002d46:	f300 817c 	bgt.w	8003042 <jsmn_parse+0x332>
 8002d4a:	2b5d      	cmp	r3, #93	; 0x5d
 8002d4c:	f000 80ae 	beq.w	8002eac <jsmn_parse+0x19c>
 8002d50:	2b5d      	cmp	r3, #93	; 0x5d
 8002d52:	f300 8176 	bgt.w	8003042 <jsmn_parse+0x332>
 8002d56:	2b3a      	cmp	r3, #58	; 0x3a
 8002d58:	dc6e      	bgt.n	8002e38 <jsmn_parse+0x128>
 8002d5a:	2b09      	cmp	r3, #9
 8002d5c:	f2c0 8171 	blt.w	8003042 <jsmn_parse+0x332>
 8002d60:	3b09      	subs	r3, #9
 8002d62:	2b31      	cmp	r3, #49	; 0x31
 8002d64:	f200 816d 	bhi.w	8003042 <jsmn_parse+0x332>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <jsmn_parse+0x60>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08003087 	.word	0x08003087
 8002d74:	08003087 	.word	0x08003087
 8002d78:	08003043 	.word	0x08003043
 8002d7c:	08003043 	.word	0x08003043
 8002d80:	08003087 	.word	0x08003087
 8002d84:	08003043 	.word	0x08003043
 8002d88:	08003043 	.word	0x08003043
 8002d8c:	08003043 	.word	0x08003043
 8002d90:	08003043 	.word	0x08003043
 8002d94:	08003043 	.word	0x08003043
 8002d98:	08003043 	.word	0x08003043
 8002d9c:	08003043 	.word	0x08003043
 8002da0:	08003043 	.word	0x08003043
 8002da4:	08003043 	.word	0x08003043
 8002da8:	08003043 	.word	0x08003043
 8002dac:	08003043 	.word	0x08003043
 8002db0:	08003043 	.word	0x08003043
 8002db4:	08003043 	.word	0x08003043
 8002db8:	08003043 	.word	0x08003043
 8002dbc:	08003043 	.word	0x08003043
 8002dc0:	08003043 	.word	0x08003043
 8002dc4:	08003043 	.word	0x08003043
 8002dc8:	08003043 	.word	0x08003043
 8002dcc:	08003087 	.word	0x08003087
 8002dd0:	08003043 	.word	0x08003043
 8002dd4:	08002f61 	.word	0x08002f61
 8002dd8:	08003043 	.word	0x08003043
 8002ddc:	08003043 	.word	0x08003043
 8002de0:	08003043 	.word	0x08003043
 8002de4:	08003043 	.word	0x08003043
 8002de8:	08003043 	.word	0x08003043
 8002dec:	08003043 	.word	0x08003043
 8002df0:	08003043 	.word	0x08003043
 8002df4:	08003043 	.word	0x08003043
 8002df8:	08003043 	.word	0x08003043
 8002dfc:	08002fb5 	.word	0x08002fb5
 8002e00:	08003043 	.word	0x08003043
 8002e04:	08003043 	.word	0x08003043
 8002e08:	08003043 	.word	0x08003043
 8002e0c:	08003043 	.word	0x08003043
 8002e10:	08003043 	.word	0x08003043
 8002e14:	08003043 	.word	0x08003043
 8002e18:	08003043 	.word	0x08003043
 8002e1c:	08003043 	.word	0x08003043
 8002e20:	08003043 	.word	0x08003043
 8002e24:	08003043 	.word	0x08003043
 8002e28:	08003043 	.word	0x08003043
 8002e2c:	08003043 	.word	0x08003043
 8002e30:	08003043 	.word	0x08003043
 8002e34:	08002fa7 	.word	0x08002fa7
 8002e38:	2b5b      	cmp	r3, #91	; 0x5b
 8002e3a:	f040 8102 	bne.w	8003042 <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	3301      	adds	r3, #1
 8002e42:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 811f 	beq.w	800308a <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff fd48 	bl	80028e6 <jsmn_alloc_token>
 8002e56:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	e14f      	b.n	8003104 <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d00a      	beq.n	8002e84 <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
 8002e86:	2b7b      	cmp	r3, #123	; 0x7b
 8002e88:	d101      	bne.n	8002e8e <jsmn_parse+0x17e>
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	e000      	b.n	8002e90 <jsmn_parse+0x180>
 8002e8e:	2202      	movs	r2, #2
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	609a      	str	r2, [r3, #8]
      break;
 8002eaa:	e0f7      	b.n	800309c <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80ed 	beq.w	800308e <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8002eb4:	7ffb      	ldrb	r3, [r7, #31]
 8002eb6:	2b7d      	cmp	r3, #125	; 0x7d
 8002eb8:	d101      	bne.n	8002ebe <jsmn_parse+0x1ae>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <jsmn_parse+0x1b0>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	e024      	b.n	8002f16 <jsmn_parse+0x206>
        token = &tokens[i];
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d017      	beq.n	8002f10 <jsmn_parse+0x200>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d112      	bne.n	8002f10 <jsmn_parse+0x200>
          if (token->type != type) {
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	7fba      	ldrb	r2, [r7, #30]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d002      	beq.n	8002efa <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 8002ef4:	f06f 0301 	mvn.w	r3, #1
 8002ef8:	e104      	b.n	8003104 <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	461a      	mov	r2, r3
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	609a      	str	r2, [r3, #8]
          break;
 8002f0e:	e005      	b.n	8002f1c <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	3b01      	subs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	dad7      	bge.n	8002ecc <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d119      	bne.n	8002f58 <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 8002f24:	f06f 0301 	mvn.w	r3, #1
 8002f28:	e0ec      	b.n	8003104 <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d009      	beq.n	8002f52 <jsmn_parse+0x242>
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d104      	bne.n	8002f52 <jsmn_parse+0x242>
          parser->toksuper = i;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4c:	609a      	str	r2, [r3, #8]
          break;
 8002f4e:	bf00      	nop
        }
      }
#endif
      break;
 8002f50:	e0a4      	b.n	800309c <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	3b01      	subs	r3, #1
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	dae5      	bge.n	8002f2a <jsmn_parse+0x21a>
      break;
 8002f5e:	e09d      	b.n	800309c <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7ff fdc2 	bl	8002af4 <jsmn_parse_string>
 8002f70:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da01      	bge.n	8002f7c <jsmn_parse+0x26c>
        return r;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	e0c3      	b.n	8003104 <jsmn_parse+0x3f4>
      }
      count++;
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	f000 8082 	beq.w	8003092 <jsmn_parse+0x382>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d07e      	beq.n	8003092 <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	3201      	adds	r2, #1
 8002fa2:	60da      	str	r2, [r3, #12]
      }
      break;
 8002fa4:	e075      	b.n	8003092 <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	461a      	mov	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	609a      	str	r2, [r3, #8]
      break;
 8002fb2:	e073      	b.n	800309c <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d06d      	beq.n	8003096 <jsmn_parse+0x386>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc2:	d068      	beq.n	8003096 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d060      	beq.n	8003096 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d058      	beq.n	8003096 <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
 8002fec:	e025      	b.n	800303a <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d006      	beq.n	800300a <jsmn_parse+0x2fa>
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d114      	bne.n	8003034 <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4413      	add	r3, r2
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d00c      	beq.n	8003034 <jsmn_parse+0x324>
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	4413      	add	r3, r2
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d104      	bne.n	8003034 <jsmn_parse+0x324>
              parser->toksuper = i;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	609a      	str	r2, [r3, #8]
              break;
 8003030:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8003032:	e030      	b.n	8003096 <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	3b01      	subs	r3, #1
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	dad6      	bge.n	8002fee <jsmn_parse+0x2de>
      break;
 8003040:	e029      	b.n	8003096 <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff fc8d 	bl	800296c <jsmn_parse_primitive>
 8003052:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	da01      	bge.n	800305e <jsmn_parse+0x34e>
        return r;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	e052      	b.n	8003104 <jsmn_parse+0x3f4>
      }
      count++;
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	3301      	adds	r3, #1
 8003062:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d015      	beq.n	800309a <jsmn_parse+0x38a>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d012      	beq.n	800309a <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4413      	add	r3, r2
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	3201      	adds	r2, #1
 8003082:	60da      	str	r2, [r3, #12]
      }
      break;
 8003084:	e009      	b.n	800309a <jsmn_parse+0x38a>
      break;
 8003086:	bf00      	nop
 8003088:	e008      	b.n	800309c <jsmn_parse+0x38c>
        break;
 800308a:	bf00      	nop
 800308c:	e006      	b.n	800309c <jsmn_parse+0x38c>
        break;
 800308e:	bf00      	nop
 8003090:	e004      	b.n	800309c <jsmn_parse+0x38c>
      break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <jsmn_parse+0x38c>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <jsmn_parse+0x38c>
      break;
 800309a:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d907      	bls.n	80030c0 <jsmn_parse+0x3b0>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f47f ae33 	bne.w	8002d26 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01d      	beq.n	8003102 <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	e015      	b.n	80030fc <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d00a      	beq.n	80030f6 <jsmn_parse+0x3e6>
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d102      	bne.n	80030f6 <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 80030f0:	f06f 0302 	mvn.w	r3, #2
 80030f4:	e006      	b.n	8003104 <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	3b01      	subs	r3, #1
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	dae6      	bge.n	80030d0 <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 8003102:	6a3b      	ldr	r3, [r7, #32]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3728      	adds	r7, #40	; 0x28
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f04f 32ff 	mov.w	r2, #4294967295
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <jsoneq>:
int post_offset=0;
//static char last_user[USER_PASS_BUFSIZE];

char buf_data[USER_PASS_BUFSIZE];

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11e      	bne.n	8003186 <jsoneq+0x52>
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fd f86b 	bl	8000224 <strlen>
 800314e:	4603      	mov	r3, r0
 8003150:	4619      	mov	r1, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	4299      	cmp	r1, r3
 800315e:	d112      	bne.n	8003186 <jsoneq+0x52>
			strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	461a      	mov	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1898      	adds	r0, r3, r2
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	461a      	mov	r2, r3
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	f018 fc69 	bl	801ba4e <strncmp>
 800317c:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <jsoneq+0x52>
		return 0;
 8003182:	2300      	movs	r3, #0
 8003184:	e001      	b.n	800318a <jsoneq+0x56>
	}
	return -1;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <httpd_post_begin>:
err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request, u16_t http_request_len, int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	807b      	strh	r3, [r7, #2]
	post_offset=0;
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <httpd_post_begin+0x68>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

	memset(buf_data,0,sizeof(buf_data));
 80031a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ac:	2100      	movs	r1, #0
 80031ae:	4814      	ldr	r0, [pc, #80]	; (8003200 <httpd_post_begin+0x6c>)
 80031b0:	f018 f936 	bl	801b420 <memset>
	LWIP_UNUSED_ARG(connection);
	LWIP_UNUSED_ARG(http_request);
	LWIP_UNUSED_ARG(http_request_len);
	LWIP_UNUSED_ARG(content_len);
	LWIP_UNUSED_ARG(post_auto_wnd);
	if (!memcmp(uri, "/info.html", 10)) {
 80031b4:	220a      	movs	r2, #10
 80031b6:	4913      	ldr	r1, [pc, #76]	; (8003204 <httpd_post_begin+0x70>)
 80031b8:	68b8      	ldr	r0, [r7, #8]
 80031ba:	f018 f8fb 	bl	801b3b4 <memcmp>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d115      	bne.n	80031f0 <httpd_post_begin+0x5c>
		if (current_connection != connection) {
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <httpd_post_begin+0x74>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d010      	beq.n	80031f0 <httpd_post_begin+0x5c>
			current_connection = connection;
 80031ce:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <httpd_post_begin+0x74>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6013      	str	r3, [r2, #0]
			valid_connection = NULL;
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <httpd_post_begin+0x78>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
			/* default page is "login failed" */
			snprintf(response_uri, response_uri_len, "/info.html");
 80031da:	8c3b      	ldrh	r3, [r7, #32]
 80031dc:	4a09      	ldr	r2, [pc, #36]	; (8003204 <httpd_post_begin+0x70>)
 80031de:	4619      	mov	r1, r3
 80031e0:	69f8      	ldr	r0, [r7, #28]
 80031e2:	f018 fbd3 	bl	801b98c <snprintf>
			/* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
			*post_auto_wnd = 1;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
			return ERR_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e001      	b.n	80031f4 <httpd_post_begin+0x60>
		}
	}
	return ERR_VAL;
 80031f0:	f06f 0305 	mvn.w	r3, #5
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000d48 	.word	0x20000d48
 8003200:	20005354 	.word	0x20005354
 8003204:	08024804 	.word	0x08024804
 8003208:	20000d40 	.word	0x20000d40
 800320c:	20000d44 	.word	0x20000d44

08003210 <httpd_post_receive_data>:

err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	4b98      	ldr	r3, [pc, #608]	; (800347c <httpd_post_receive_data+0x26c>)
 800321c:	f242 0258 	movw	r2, #8280	; 0x2058
 8003220:	443a      	add	r2, r7
 8003222:	4413      	add	r3, r2
 8003224:	6018      	str	r0, [r3, #0]
 8003226:	4b96      	ldr	r3, [pc, #600]	; (8003480 <httpd_post_receive_data+0x270>)
 8003228:	f242 0258 	movw	r2, #8280	; 0x2058
 800322c:	443a      	add	r2, r7
 800322e:	4413      	add	r3, r2
 8003230:	6019      	str	r1, [r3, #0]
	err_t ret;

	if ((post_offset+p->len) <= USER_PASS_BUFSIZE){
 8003232:	4b93      	ldr	r3, [pc, #588]	; (8003480 <httpd_post_receive_data+0x270>)
 8003234:	f242 0258 	movw	r2, #8280	; 0x2058
 8003238:	443a      	add	r2, r7
 800323a:	4413      	add	r3, r2
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	895b      	ldrh	r3, [r3, #10]
 8003240:	461a      	mov	r2, r3
 8003242:	4b90      	ldr	r3, [pc, #576]	; (8003484 <httpd_post_receive_data+0x274>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4413      	add	r3, r2
 8003248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324c:	dc34      	bgt.n	80032b8 <httpd_post_receive_data+0xa8>
		strncpy(buf_data+post_offset, p->payload,p->len);
 800324e:	4b8d      	ldr	r3, [pc, #564]	; (8003484 <httpd_post_receive_data+0x274>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	4b8c      	ldr	r3, [pc, #560]	; (8003488 <httpd_post_receive_data+0x278>)
 8003256:	18d0      	adds	r0, r2, r3
 8003258:	4b89      	ldr	r3, [pc, #548]	; (8003480 <httpd_post_receive_data+0x270>)
 800325a:	f242 0258 	movw	r2, #8280	; 0x2058
 800325e:	443a      	add	r2, r7
 8003260:	4413      	add	r3, r2
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	4b86      	ldr	r3, [pc, #536]	; (8003480 <httpd_post_receive_data+0x270>)
 8003268:	f242 0258 	movw	r2, #8280	; 0x2058
 800326c:	443a      	add	r2, r7
 800326e:	4413      	add	r3, r2
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	895b      	ldrh	r3, [r3, #10]
 8003274:	461a      	mov	r2, r3
 8003276:	f018 fbfc 	bl	801ba72 <strncpy>
	else{
		ret = ERR_VAL;
		pbuf_free(p);
		return ret;
	}
	post_offset += p->len;
 800327a:	4b81      	ldr	r3, [pc, #516]	; (8003480 <httpd_post_receive_data+0x270>)
 800327c:	f242 0258 	movw	r2, #8280	; 0x2058
 8003280:	443a      	add	r2, r7
 8003282:	4413      	add	r3, r2
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	895b      	ldrh	r3, [r3, #10]
 8003288:	461a      	mov	r2, r3
 800328a:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <httpd_post_receive_data+0x274>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4413      	add	r3, r2
 8003290:	4a7c      	ldr	r2, [pc, #496]	; (8003484 <httpd_post_receive_data+0x274>)
 8003292:	6013      	str	r3, [r2, #0]

	int data_len = strlen(buf_data);
 8003294:	487c      	ldr	r0, [pc, #496]	; (8003488 <httpd_post_receive_data+0x278>)
 8003296:	f7fc ffc5 	bl	8000224 <strlen>
 800329a:	4603      	mov	r3, r0
 800329c:	f242 024c 	movw	r2, #8268	; 0x204c
 80032a0:	443a      	add	r2, r7
 80032a2:	6013      	str	r3, [r2, #0]
	if (buf_data[data_len-1]!=']'){
 80032a4:	f242 034c 	movw	r3, #8268	; 0x204c
 80032a8:	443b      	add	r3, r7
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	4a76      	ldr	r2, [pc, #472]	; (8003488 <httpd_post_receive_data+0x278>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	2b5d      	cmp	r3, #93	; 0x5d
 80032b4:	d026      	beq.n	8003304 <httpd_post_receive_data+0xf4>
 80032b6:	e012      	b.n	80032de <httpd_post_receive_data+0xce>
		ret = ERR_VAL;
 80032b8:	23fa      	movs	r3, #250	; 0xfa
 80032ba:	f242 0257 	movw	r2, #8279	; 0x2057
 80032be:	443a      	add	r2, r7
 80032c0:	7013      	strb	r3, [r2, #0]
		pbuf_free(p);
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <httpd_post_receive_data+0x270>)
 80032c4:	f242 0258 	movw	r2, #8280	; 0x2058
 80032c8:	443a      	add	r2, r7
 80032ca:	4413      	add	r3, r2
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	f00d ffc7 	bl	8011260 <pbuf_free>
		return ret;
 80032d2:	f242 0357 	movw	r3, #8279	; 0x2057
 80032d6:	443b      	add	r3, r7
 80032d8:	f993 3000 	ldrsb.w	r3, [r3]
 80032dc:	e284      	b.n	80037e8 <httpd_post_receive_data+0x5d8>
		ret = ERR_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	f242 0257 	movw	r2, #8279	; 0x2057
 80032e4:	443a      	add	r2, r7
 80032e6:	7013      	strb	r3, [r2, #0]
		pbuf_free(p);
 80032e8:	4b65      	ldr	r3, [pc, #404]	; (8003480 <httpd_post_receive_data+0x270>)
 80032ea:	f242 0258 	movw	r2, #8280	; 0x2058
 80032ee:	443a      	add	r2, r7
 80032f0:	4413      	add	r3, r2
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	f00d ffb4 	bl	8011260 <pbuf_free>
		return ret;
 80032f8:	f242 0357 	movw	r3, #8279	; 0x2057
 80032fc:	443b      	add	r3, r7
 80032fe:	f993 3000 	ldrsb.w	r3, [r3]
 8003302:	e271      	b.n	80037e8 <httpd_post_receive_data+0x5d8>
	}

	LWIP_ASSERT("NULL pbuf", p != NULL);
 8003304:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <httpd_post_receive_data+0x270>)
 8003306:	f242 0258 	movw	r2, #8280	; 0x2058
 800330a:	443a      	add	r2, r7
 800330c:	4413      	add	r3, r2
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <httpd_post_receive_data+0x110>
 8003314:	4b5d      	ldr	r3, [pc, #372]	; (800348c <httpd_post_receive_data+0x27c>)
 8003316:	224d      	movs	r2, #77	; 0x4d
 8003318:	495d      	ldr	r1, [pc, #372]	; (8003490 <httpd_post_receive_data+0x280>)
 800331a:	485e      	ldr	r0, [pc, #376]	; (8003494 <httpd_post_receive_data+0x284>)
 800331c:	f018 fb06 	bl	801b92c <printf>

	if (current_connection == connection) {
 8003320:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <httpd_post_receive_data+0x288>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b55      	ldr	r3, [pc, #340]	; (800347c <httpd_post_receive_data+0x26c>)
 8003326:	f242 0158 	movw	r1, #8280	; 0x2058
 800332a:	4439      	add	r1, r7
 800332c:	440b      	add	r3, r1
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4293      	cmp	r3, r2
 8003332:	f040 8247 	bne.w	80037c4 <httpd_post_receive_data+0x5b4>
		jsmn_parser parser;
		jsmntok_t t[512]; /* We expect no more than 512 JSON tokens */
		jsmn_init(&parser);
 8003336:	f242 0314 	movw	r3, #8212	; 0x2014
 800333a:	443b      	add	r3, r7
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fee5 	bl	800310c <jsmn_init>

		int tokens = jsmn_parse(&parser, buf_data, strlen(buf_data), t, 128);
 8003342:	4851      	ldr	r0, [pc, #324]	; (8003488 <httpd_post_receive_data+0x278>)
 8003344:	f7fc ff6e 	bl	8000224 <strlen>
 8003348:	4602      	mov	r2, r0
 800334a:	4b54      	ldr	r3, [pc, #336]	; (800349c <httpd_post_receive_data+0x28c>)
 800334c:	f242 0158 	movw	r1, #8280	; 0x2058
 8003350:	4439      	add	r1, r7
 8003352:	440b      	add	r3, r1
 8003354:	f242 0014 	movw	r0, #8212	; 0x2014
 8003358:	4438      	add	r0, r7
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	9100      	str	r1, [sp, #0]
 800335e:	494a      	ldr	r1, [pc, #296]	; (8003488 <httpd_post_receive_data+0x278>)
 8003360:	f7ff fcd6 	bl	8002d10 <jsmn_parse>
 8003364:	f242 0348 	movw	r3, #8264	; 0x2048
 8003368:	443b      	add	r3, r7
 800336a:	6018      	str	r0, [r3, #0]
		for (int i = 0; i<tokens; i++){
 800336c:	2300      	movs	r3, #0
 800336e:	f242 0250 	movw	r2, #8272	; 0x2050
 8003372:	443a      	add	r2, r7
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e1de      	b.n	8003736 <httpd_post_receive_data+0x526>
			if (jsoneq(buf_data, &t[i], "IPaddress") == 0) {
 8003378:	4b48      	ldr	r3, [pc, #288]	; (800349c <httpd_post_receive_data+0x28c>)
 800337a:	f242 0258 	movw	r2, #8280	; 0x2058
 800337e:	443a      	add	r2, r7
 8003380:	4413      	add	r3, r2
 8003382:	f242 0250 	movw	r2, #8272	; 0x2050
 8003386:	443a      	add	r2, r7
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	4413      	add	r3, r2
 800338e:	4a44      	ldr	r2, [pc, #272]	; (80034a0 <httpd_post_receive_data+0x290>)
 8003390:	4619      	mov	r1, r3
 8003392:	483d      	ldr	r0, [pc, #244]	; (8003488 <httpd_post_receive_data+0x278>)
 8003394:	f7ff fece 	bl	8003134 <jsoneq>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 8084 	bne.w	80034a8 <httpd_post_receive_data+0x298>
				buf_data[t[i+1].end] = '\0';
 80033a0:	f242 0350 	movw	r3, #8272	; 0x2050
 80033a4:	443b      	add	r3, r7
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	4b3c      	ldr	r3, [pc, #240]	; (800349c <httpd_post_receive_data+0x28c>)
 80033ac:	f242 0158 	movw	r1, #8280	; 0x2058
 80033b0:	4439      	add	r1, r7
 80033b2:	440b      	add	r3, r1
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	4413      	add	r3, r2
 80033b8:	3308      	adds	r3, #8
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a32      	ldr	r2, [pc, #200]	; (8003488 <httpd_post_receive_data+0x278>)
 80033be:	2100      	movs	r1, #0
 80033c0:	54d1      	strb	r1, [r2, r3]
				memset(user_info.ip,0,16);
 80033c2:	2210      	movs	r2, #16
 80033c4:	2100      	movs	r1, #0
 80033c6:	4837      	ldr	r0, [pc, #220]	; (80034a4 <httpd_post_receive_data+0x294>)
 80033c8:	f018 f82a 	bl	801b420 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 80033cc:	2310      	movs	r3, #16
 80033ce:	f242 0228 	movw	r2, #8232	; 0x2028
 80033d2:	443a      	add	r2, r7
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	f242 0350 	movw	r3, #8272	; 0x2050
 80033da:	443b      	add	r3, r7
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	4b2e      	ldr	r3, [pc, #184]	; (800349c <httpd_post_receive_data+0x28c>)
 80033e2:	f242 0158 	movw	r1, #8280	; 0x2058
 80033e6:	4439      	add	r1, r7
 80033e8:	440b      	add	r3, r1
 80033ea:	0112      	lsls	r2, r2, #4
 80033ec:	4413      	add	r3, r2
 80033ee:	3308      	adds	r3, #8
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	f242 0350 	movw	r3, #8272	; 0x2050
 80033f6:	443b      	add	r3, r7
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	1c59      	adds	r1, r3, #1
 80033fc:	4b27      	ldr	r3, [pc, #156]	; (800349c <httpd_post_receive_data+0x28c>)
 80033fe:	f242 0058 	movw	r0, #8280	; 0x2058
 8003402:	4438      	add	r0, r7
 8003404:	4403      	add	r3, r0
 8003406:	0109      	lsls	r1, r1, #4
 8003408:	440b      	add	r3, r1
 800340a:	3304      	adds	r3, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f242 0224 	movw	r2, #8228	; 0x2024
 8003414:	443a      	add	r2, r7
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	f242 0324 	movw	r3, #8228	; 0x2024
 800341c:	443b      	add	r3, r7
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f242 0328 	movw	r3, #8232	; 0x2028
 8003424:	443b      	add	r3, r7
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4293      	cmp	r3, r2
 800342a:	bfa8      	it	ge
 800342c:	4613      	movge	r3, r2
 800342e:	f242 0220 	movw	r2, #8224	; 0x2020
 8003432:	443a      	add	r2, r7
 8003434:	6013      	str	r3, [r2, #0]
				strncpy(user_info.ip,&buf_data[t[i+1].start],len);
 8003436:	f242 0350 	movw	r3, #8272	; 0x2050
 800343a:	443b      	add	r3, r7
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <httpd_post_receive_data+0x28c>)
 8003442:	f242 0158 	movw	r1, #8280	; 0x2058
 8003446:	4439      	add	r1, r7
 8003448:	440b      	add	r3, r1
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <httpd_post_receive_data+0x278>)
 8003454:	4413      	add	r3, r2
 8003456:	f242 0220 	movw	r2, #8224	; 0x2020
 800345a:	443a      	add	r2, r7
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	4619      	mov	r1, r3
 8003460:	4810      	ldr	r0, [pc, #64]	; (80034a4 <httpd_post_receive_data+0x294>)
 8003462:	f018 fb06 	bl	801ba72 <strncpy>
				i++;
 8003466:	f242 0350 	movw	r3, #8272	; 0x2050
 800346a:	443b      	add	r3, r7
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	f242 0250 	movw	r2, #8272	; 0x2050
 8003474:	443a      	add	r2, r7
 8003476:	6013      	str	r3, [r2, #0]
				continue;
 8003478:	e154      	b.n	8003724 <httpd_post_receive_data+0x514>
 800347a:	bf00      	nop
 800347c:	ffffdfac 	.word	0xffffdfac
 8003480:	ffffdfa8 	.word	0xffffdfa8
 8003484:	20000d48 	.word	0x20000d48
 8003488:	20005354 	.word	0x20005354
 800348c:	08024810 	.word	0x08024810
 8003490:	08024828 	.word	0x08024828
 8003494:	08024834 	.word	0x08024834
 8003498:	20000d40 	.word	0x20000d40
 800349c:	ffffdfb4 	.word	0xffffdfb4
 80034a0:	0802485c 	.word	0x0802485c
 80034a4:	200050e4 	.word	0x200050e4
			}
			if (jsoneq(buf_data, &t[i], "NetMask") == 0) {
 80034a8:	4b59      	ldr	r3, [pc, #356]	; (8003610 <httpd_post_receive_data+0x400>)
 80034aa:	f242 0258 	movw	r2, #8280	; 0x2058
 80034ae:	443a      	add	r2, r7
 80034b0:	4413      	add	r3, r2
 80034b2:	f242 0250 	movw	r2, #8272	; 0x2050
 80034b6:	443a      	add	r2, r7
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	4413      	add	r3, r2
 80034be:	4a55      	ldr	r2, [pc, #340]	; (8003614 <httpd_post_receive_data+0x404>)
 80034c0:	4619      	mov	r1, r3
 80034c2:	4855      	ldr	r0, [pc, #340]	; (8003618 <httpd_post_receive_data+0x408>)
 80034c4:	f7ff fe36 	bl	8003134 <jsoneq>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d16c      	bne.n	80035a8 <httpd_post_receive_data+0x398>
				buf_data[t[i+1].end] = '\0';
 80034ce:	f242 0350 	movw	r3, #8272	; 0x2050
 80034d2:	443b      	add	r3, r7
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	4b4d      	ldr	r3, [pc, #308]	; (8003610 <httpd_post_receive_data+0x400>)
 80034da:	f242 0158 	movw	r1, #8280	; 0x2058
 80034de:	4439      	add	r1, r7
 80034e0:	440b      	add	r3, r1
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	4413      	add	r3, r2
 80034e6:	3308      	adds	r3, #8
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <httpd_post_receive_data+0x408>)
 80034ec:	2100      	movs	r1, #0
 80034ee:	54d1      	strb	r1, [r2, r3]
				memset(user_info.netmask,0,16);
 80034f0:	2210      	movs	r2, #16
 80034f2:	2100      	movs	r1, #0
 80034f4:	4849      	ldr	r0, [pc, #292]	; (800361c <httpd_post_receive_data+0x40c>)
 80034f6:	f017 ff93 	bl	801b420 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 80034fa:	2310      	movs	r3, #16
 80034fc:	f242 0234 	movw	r2, #8244	; 0x2034
 8003500:	443a      	add	r2, r7
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	f242 0350 	movw	r3, #8272	; 0x2050
 8003508:	443b      	add	r3, r7
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	4b40      	ldr	r3, [pc, #256]	; (8003610 <httpd_post_receive_data+0x400>)
 8003510:	f242 0158 	movw	r1, #8280	; 0x2058
 8003514:	4439      	add	r1, r7
 8003516:	440b      	add	r3, r1
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	4413      	add	r3, r2
 800351c:	3308      	adds	r3, #8
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	f242 0350 	movw	r3, #8272	; 0x2050
 8003524:	443b      	add	r3, r7
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	1c59      	adds	r1, r3, #1
 800352a:	4b39      	ldr	r3, [pc, #228]	; (8003610 <httpd_post_receive_data+0x400>)
 800352c:	f242 0058 	movw	r0, #8280	; 0x2058
 8003530:	4438      	add	r0, r7
 8003532:	4403      	add	r3, r0
 8003534:	0109      	lsls	r1, r1, #4
 8003536:	440b      	add	r3, r1
 8003538:	3304      	adds	r3, #4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f242 0230 	movw	r2, #8240	; 0x2030
 8003542:	443a      	add	r2, r7
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	f242 0330 	movw	r3, #8240	; 0x2030
 800354a:	443b      	add	r3, r7
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	f242 0334 	movw	r3, #8244	; 0x2034
 8003552:	443b      	add	r3, r7
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4293      	cmp	r3, r2
 8003558:	bfa8      	it	ge
 800355a:	4613      	movge	r3, r2
 800355c:	f242 022c 	movw	r2, #8236	; 0x202c
 8003560:	443a      	add	r2, r7
 8003562:	6013      	str	r3, [r2, #0]
				strncpy(user_info.netmask,&buf_data[t[i+1].start],len);
 8003564:	f242 0350 	movw	r3, #8272	; 0x2050
 8003568:	443b      	add	r3, r7
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	4b28      	ldr	r3, [pc, #160]	; (8003610 <httpd_post_receive_data+0x400>)
 8003570:	f242 0158 	movw	r1, #8280	; 0x2058
 8003574:	4439      	add	r1, r7
 8003576:	440b      	add	r3, r1
 8003578:	0112      	lsls	r2, r2, #4
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a25      	ldr	r2, [pc, #148]	; (8003618 <httpd_post_receive_data+0x408>)
 8003582:	4413      	add	r3, r2
 8003584:	f242 022c 	movw	r2, #8236	; 0x202c
 8003588:	443a      	add	r2, r7
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	4823      	ldr	r0, [pc, #140]	; (800361c <httpd_post_receive_data+0x40c>)
 8003590:	f018 fa6f 	bl	801ba72 <strncpy>
				i++;
 8003594:	f242 0350 	movw	r3, #8272	; 0x2050
 8003598:	443b      	add	r3, r7
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	f242 0250 	movw	r2, #8272	; 0x2050
 80035a2:	443a      	add	r2, r7
 80035a4:	6013      	str	r3, [r2, #0]
				continue;
 80035a6:	e0bd      	b.n	8003724 <httpd_post_receive_data+0x514>
			}
			if (jsoneq(buf_data, &t[i], "Timezone") == 0) {
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <httpd_post_receive_data+0x400>)
 80035aa:	f242 0258 	movw	r2, #8280	; 0x2058
 80035ae:	443a      	add	r2, r7
 80035b0:	4413      	add	r3, r2
 80035b2:	f242 0250 	movw	r2, #8272	; 0x2050
 80035b6:	443a      	add	r2, r7
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	0112      	lsls	r2, r2, #4
 80035bc:	4413      	add	r3, r2
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <httpd_post_receive_data+0x410>)
 80035c0:	4619      	mov	r1, r3
 80035c2:	4815      	ldr	r0, [pc, #84]	; (8003618 <httpd_post_receive_data+0x408>)
 80035c4:	f7ff fdb6 	bl	8003134 <jsoneq>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d12c      	bne.n	8003628 <httpd_post_receive_data+0x418>
				user_info.zone = atoi(&buf_data[t[i+1].start]);
 80035ce:	f242 0350 	movw	r3, #8272	; 0x2050
 80035d2:	443b      	add	r3, r7
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <httpd_post_receive_data+0x400>)
 80035da:	f242 0158 	movw	r1, #8280	; 0x2058
 80035de:	4439      	add	r1, r7
 80035e0:	440b      	add	r3, r1
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <httpd_post_receive_data+0x408>)
 80035ec:	4413      	add	r3, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f017 fdc2 	bl	801b178 <atoi>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <httpd_post_receive_data+0x414>)
 80035f8:	6113      	str	r3, [r2, #16]
				i++;
 80035fa:	f242 0350 	movw	r3, #8272	; 0x2050
 80035fe:	443b      	add	r3, r7
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	f242 0250 	movw	r2, #8272	; 0x2050
 8003608:	443a      	add	r2, r7
 800360a:	6013      	str	r3, [r2, #0]
				continue;
 800360c:	e08a      	b.n	8003724 <httpd_post_receive_data+0x514>
 800360e:	bf00      	nop
 8003610:	ffffdfb4 	.word	0xffffdfb4
 8003614:	08024868 	.word	0x08024868
 8003618:	20005354 	.word	0x20005354
 800361c:	200051f7 	.word	0x200051f7
 8003620:	08024870 	.word	0x08024870
 8003624:	200050e4 	.word	0x200050e4
			}
			if (jsoneq(buf_data, &t[i], "contacts") == 0) {
 8003628:	4b72      	ldr	r3, [pc, #456]	; (80037f4 <httpd_post_receive_data+0x5e4>)
 800362a:	f242 0258 	movw	r2, #8280	; 0x2058
 800362e:	443a      	add	r2, r7
 8003630:	4413      	add	r3, r2
 8003632:	f242 0250 	movw	r2, #8272	; 0x2050
 8003636:	443a      	add	r2, r7
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	4413      	add	r3, r2
 800363e:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <httpd_post_receive_data+0x5e8>)
 8003640:	4619      	mov	r1, r3
 8003642:	486e      	ldr	r0, [pc, #440]	; (80037fc <httpd_post_receive_data+0x5ec>)
 8003644:	f7ff fd76 	bl	8003134 <jsoneq>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d16a      	bne.n	8003724 <httpd_post_receive_data+0x514>
				memset(user_info.contacts,0,INFOLEN);
 800364e:	22ff      	movs	r2, #255	; 0xff
 8003650:	2100      	movs	r1, #0
 8003652:	486b      	ldr	r0, [pc, #428]	; (8003800 <httpd_post_receive_data+0x5f0>)
 8003654:	f017 fee4 	bl	801b420 <memset>
				buf_data[t[i+1].end] = '\0';
 8003658:	f242 0350 	movw	r3, #8272	; 0x2050
 800365c:	443b      	add	r3, r7
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	4b64      	ldr	r3, [pc, #400]	; (80037f4 <httpd_post_receive_data+0x5e4>)
 8003664:	f242 0158 	movw	r1, #8280	; 0x2058
 8003668:	4439      	add	r1, r7
 800366a:	440b      	add	r3, r1
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	4413      	add	r3, r2
 8003670:	3308      	adds	r3, #8
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a61      	ldr	r2, [pc, #388]	; (80037fc <httpd_post_receive_data+0x5ec>)
 8003676:	2100      	movs	r1, #0
 8003678:	54d1      	strb	r1, [r2, r3]
				int len = mymin(INFOLEN,t[i+1].end-t[i+1].start);
 800367a:	23ff      	movs	r3, #255	; 0xff
 800367c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	f242 0350 	movw	r3, #8272	; 0x2050
 8003686:	443b      	add	r3, r7
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <httpd_post_receive_data+0x5e4>)
 800368e:	f242 0158 	movw	r1, #8280	; 0x2058
 8003692:	4439      	add	r1, r7
 8003694:	440b      	add	r3, r1
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	4413      	add	r3, r2
 800369a:	3308      	adds	r3, #8
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f242 0350 	movw	r3, #8272	; 0x2050
 80036a2:	443b      	add	r3, r7
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	4b52      	ldr	r3, [pc, #328]	; (80037f4 <httpd_post_receive_data+0x5e4>)
 80036aa:	f242 0058 	movw	r0, #8280	; 0x2058
 80036ae:	4438      	add	r0, r7
 80036b0:	4403      	add	r3, r0
 80036b2:	0109      	lsls	r1, r1, #4
 80036b4:	440b      	add	r3, r1
 80036b6:	3304      	adds	r3, #4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f242 023c 	movw	r2, #8252	; 0x203c
 80036c0:	443a      	add	r2, r7
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	f242 033c 	movw	r3, #8252	; 0x203c
 80036c8:	443b      	add	r3, r7
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4293      	cmp	r3, r2
 80036d4:	bfa8      	it	ge
 80036d6:	4613      	movge	r3, r2
 80036d8:	f242 0238 	movw	r2, #8248	; 0x2038
 80036dc:	443a      	add	r2, r7
 80036de:	6013      	str	r3, [r2, #0]
				strncpy(user_info.contacts,&buf_data[t[i+1].start],len);
 80036e0:	f242 0350 	movw	r3, #8272	; 0x2050
 80036e4:	443b      	add	r3, r7
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <httpd_post_receive_data+0x5e4>)
 80036ec:	f242 0158 	movw	r1, #8280	; 0x2058
 80036f0:	4439      	add	r1, r7
 80036f2:	440b      	add	r3, r1
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3f      	ldr	r2, [pc, #252]	; (80037fc <httpd_post_receive_data+0x5ec>)
 80036fe:	4413      	add	r3, r2
 8003700:	f242 0238 	movw	r2, #8248	; 0x2038
 8003704:	443a      	add	r2, r7
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	483d      	ldr	r0, [pc, #244]	; (8003800 <httpd_post_receive_data+0x5f0>)
 800370c:	f018 f9b1 	bl	801ba72 <strncpy>
				i++;
 8003710:	f242 0350 	movw	r3, #8272	; 0x2050
 8003714:	443b      	add	r3, r7
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	f242 0250 	movw	r2, #8272	; 0x2050
 800371e:	443a      	add	r2, r7
 8003720:	6013      	str	r3, [r2, #0]
				continue;
 8003722:	bf00      	nop
		for (int i = 0; i<tokens; i++){
 8003724:	f242 0350 	movw	r3, #8272	; 0x2050
 8003728:	443b      	add	r3, r7
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	f242 0250 	movw	r2, #8272	; 0x2050
 8003732:	443a      	add	r2, r7
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	f242 0350 	movw	r3, #8272	; 0x2050
 800373a:	443b      	add	r3, r7
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f242 0348 	movw	r3, #8264	; 0x2048
 8003742:	443b      	add	r3, r7
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	f6ff ae16 	blt.w	8003378 <httpd_post_receive_data+0x168>
			}
		}
		//setIPaddr
		ip4_addr_t add;
		inet_aton(user_info.ip, &add);
 800374c:	f242 0310 	movw	r3, #8208	; 0x2010
 8003750:	443b      	add	r3, r7
 8003752:	4619      	mov	r1, r3
 8003754:	482b      	ldr	r0, [pc, #172]	; (8003804 <httpd_post_receive_data+0x5f4>)
 8003756:	f016 faf5 	bl	8019d44 <ip4addr_aton>
		setIP(add.addr);
 800375a:	f242 0310 	movw	r3, #8208	; 0x2010
 800375e:	443b      	add	r3, r7
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f005 fd02 	bl	800916c <setIP>
		//setNetMask
		ip4_addr_t mask;
		inet_aton(user_info.netmask, &mask);
 8003768:	f242 030c 	movw	r3, #8204	; 0x200c
 800376c:	443b      	add	r3, r7
 800376e:	4619      	mov	r1, r3
 8003770:	4825      	ldr	r0, [pc, #148]	; (8003808 <httpd_post_receive_data+0x5f8>)
 8003772:	f016 fae7 	bl	8019d44 <ip4addr_aton>
		setNetmask(mask.addr);
 8003776:	f242 030c 	movw	r3, #8204	; 0x200c
 800377a:	443b      	add	r3, r7
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f005 fd06 	bl	8009190 <setNetmask>

        clearFlash();
 8003784:	f7fd fc0c 	bl	8000fa0 <clearFlash>
        int offset=0;
 8003788:	2300      	movs	r3, #0
 800378a:	f242 0244 	movw	r2, #8260	; 0x2044
 800378e:	443a      	add	r2, r7
 8003790:	6013      	str	r3, [r2, #0]
        WriteDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 8003792:	f242 0344 	movw	r3, #8260	; 0x2044
 8003796:	443b      	add	r3, r7
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800379e:	4819      	ldr	r0, [pc, #100]	; (8003804 <httpd_post_receive_data+0x5f4>)
 80037a0:	f7fd fc22 	bl	8000fe8 <WriteDeviceAddressOffset>
        offset+=sizeof(user_info);
 80037a4:	f242 0344 	movw	r3, #8260	; 0x2044
 80037a8:	443b      	add	r3, r7
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80037b0:	f242 0244 	movw	r2, #8260	; 0x2044
 80037b4:	443a      	add	r2, r7
 80037b6:	6013      	str	r3, [r2, #0]
		/* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       connection is unknown */
		ret = ERR_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f242 0257 	movw	r2, #8279	; 0x2057
 80037be:	443a      	add	r2, r7
 80037c0:	7013      	strb	r3, [r2, #0]
 80037c2:	e004      	b.n	80037ce <httpd_post_receive_data+0x5be>
	} else {
		ret = ERR_VAL;
 80037c4:	23fa      	movs	r3, #250	; 0xfa
 80037c6:	f242 0257 	movw	r2, #8279	; 0x2057
 80037ca:	443a      	add	r2, r7
 80037cc:	7013      	strb	r3, [r2, #0]
	}

	/* this function must ALWAYS free the pbuf it is passed or it will leak memory */
	pbuf_free(p);
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <httpd_post_receive_data+0x5fc>)
 80037d0:	f242 0258 	movw	r2, #8280	; 0x2058
 80037d4:	443a      	add	r2, r7
 80037d6:	4413      	add	r3, r2
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	f00d fd41 	bl	8011260 <pbuf_free>

	return ret;
 80037de:	f242 0357 	movw	r3, #8279	; 0x2057
 80037e2:	443b      	add	r3, r7
 80037e4:	f993 3000 	ldrsb.w	r3, [r3]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	ffffdfb4 	.word	0xffffdfb4
 80037f8:	0802487c 	.word	0x0802487c
 80037fc:	20005354 	.word	0x20005354
 8003800:	200050f8 	.word	0x200050f8
 8003804:	200050e4 	.word	0x200050e4
 8003808:	200051f7 	.word	0x200051f7
 800380c:	ffffdfa8 	.word	0xffffdfa8

08003810 <httpd_post_finished>:

void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/404.html");
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	4a0f      	ldr	r2, [pc, #60]	; (8003860 <httpd_post_finished+0x50>)
 8003822:	4619      	mov	r1, r3
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f018 f8b1 	bl	801b98c <snprintf>
	if (current_connection == connection) {
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <httpd_post_finished+0x54>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d110      	bne.n	8003856 <httpd_post_finished+0x46>
		if (valid_connection == connection) {
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <httpd_post_finished+0x58>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	429a      	cmp	r2, r3
 800383c:	d105      	bne.n	800384a <httpd_post_finished+0x3a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/info.html");
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4a0a      	ldr	r2, [pc, #40]	; (800386c <httpd_post_finished+0x5c>)
 8003842:	4619      	mov	r1, r3
 8003844:	68b8      	ldr	r0, [r7, #8]
 8003846:	f018 f8a1 	bl	801b98c <snprintf>
		}
		current_connection = NULL;
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <httpd_post_finished+0x54>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <httpd_post_finished+0x58>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
	}
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	08024888 	.word	0x08024888
 8003864:	20000d40 	.word	0x20000d40
 8003868:	20000d44 	.word	0x20000d44
 800386c:	08024804 	.word	0x08024804

08003870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_MspInit+0x4c>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a10      	ldr	r2, [pc, #64]	; (80038bc <HAL_MspInit+0x4c>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6413      	str	r3, [r2, #64]	; 0x40
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_MspInit+0x4c>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_MspInit+0x4c>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <HAL_MspInit+0x4c>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <HAL_MspInit+0x4c>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038a6:	2200      	movs	r2, #0
 80038a8:	210f      	movs	r1, #15
 80038aa:	f06f 0001 	mvn.w	r0, #1
 80038ae:	f000 fb23 	bl	8003ef8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <HAL_RTC_MspInit+0x2c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d105      	bne.n	80038de <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RTC_MspInit+0x30>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	4a06      	ldr	r2, [pc, #24]	; (80038f0 <HAL_RTC_MspInit+0x30>)
 80038d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038dc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40002800 	.word	0x40002800
 80038f0:	40023800 	.word	0x40023800

080038f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <HAL_TIM_Base_MspInit+0x44>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <HAL_TIM_Base_MspInit+0x48>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	4a0c      	ldr	r2, [pc, #48]	; (800393c <HAL_TIM_Base_MspInit+0x48>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6453      	str	r3, [r2, #68]	; 0x44
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_TIM_Base_MspInit+0x48>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800391e:	2200      	movs	r2, #0
 8003920:	2105      	movs	r1, #5
 8003922:	2019      	movs	r0, #25
 8003924:	f000 fae8 	bl	8003ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003928:	2019      	movs	r0, #25
 800392a:	f000 fb01 	bl	8003f30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40023800 	.word	0x40023800

08003940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <HAL_UART_MspInit+0x8c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d12f      	bne.n	80039c2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_UART_MspInit+0x90>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <HAL_UART_MspInit+0x90>)
 8003968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_UART_MspInit+0x90>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_UART_MspInit+0x90>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_UART_MspInit+0x90>)
 8003980:	f043 0320 	orr.w	r3, r3, #32
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_UART_MspInit+0x90>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003992:	23c0      	movs	r3, #192	; 0xc0
 8003994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003996:	2302      	movs	r3, #2
 8003998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399e:	2303      	movs	r3, #3
 80039a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80039a2:	2308      	movs	r3, #8
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	4619      	mov	r1, r3
 80039ac:	4809      	ldr	r0, [pc, #36]	; (80039d4 <HAL_UART_MspInit+0x94>)
 80039ae:	f001 fdeb 	bl	8005588 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2105      	movs	r1, #5
 80039b6:	2052      	movs	r0, #82	; 0x52
 80039b8:	f000 fa9e 	bl	8003ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80039bc:	2052      	movs	r0, #82	; 0x52
 80039be:	f000 fab7 	bl	8003f30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80039c2:	bf00      	nop
 80039c4:	3728      	adds	r7, #40	; 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40007800 	.word	0x40007800
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40021400 	.word	0x40021400

080039d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	2036      	movs	r0, #54	; 0x36
 80039ee:	f000 fa83 	bl	8003ef8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039f2:	2036      	movs	r0, #54	; 0x36
 80039f4:	f000 fa9c 	bl	8003f30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80039f8:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <HAL_InitTick+0xa0>)
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_InitTick+0xa0>)
 80039fe:	f043 0310 	orr.w	r3, r3, #16
 8003a02:	6413      	str	r3, [r2, #64]	; 0x40
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_InitTick+0xa0>)
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a10:	f107 0210 	add.w	r2, r7, #16
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f002 fc9e 	bl	800635c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a20:	f002 fc74 	bl	800630c <HAL_RCC_GetPCLK1Freq>
 8003a24:	4603      	mov	r3, r0
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	0c9b      	lsrs	r3, r3, #18
 8003a34:	3b01      	subs	r3, #1
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <HAL_InitTick+0xac>)
 8003a3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a46:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003a58:	4809      	ldr	r0, [pc, #36]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a5a:	f003 fbd7 	bl	800720c <HAL_TIM_Base_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003a64:	4806      	ldr	r0, [pc, #24]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a66:	f003 fc29 	bl	80072bc <HAL_TIM_Base_Start_IT>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	e000      	b.n	8003a70 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3730      	adds	r7, #48	; 0x30
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	431bde83 	.word	0x431bde83
 8003a80:	20005554 	.word	0x20005554
 8003a84:	40001000 	.word	0x40001000

08003a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <NMI_Handler+0x4>

08003a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <HardFault_Handler+0x4>

08003a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a98:	e7fe      	b.n	8003a98 <MemManage_Handler+0x4>

08003a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a9e:	e7fe      	b.n	8003a9e <BusFault_Handler+0x4>

08003aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <UsageFault_Handler+0x4>

08003aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f001 ff5d 	bl	8005978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003aca:	f003 fc6f 	bl	80073ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200052b8 	.word	0x200052b8

08003ad8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <TIM6_DAC_IRQHandler+0x10>)
 8003ade:	f003 fc65 	bl	80073ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20005554 	.word	0x20005554

08003aec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <ETH_IRQHandler+0x10>)
 8003af2:	f000 fe9f 	bl	8004834 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20006ed8 	.word	0x20006ed8

08003b00 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <UART7_IRQHandler+0x10>)
 8003b06:	f004 f979 	bl	8007dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000520c 	.word	0x2000520c

08003b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
	return 1;
 8003b18:	2301      	movs	r3, #1
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <_kill>:

int _kill(int pid, int sig)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <_kill+0x20>)
 8003b30:	2216      	movs	r2, #22
 8003b32:	601a      	str	r2, [r3, #0]
	return -1;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	2000be64 	.word	0x2000be64

08003b48 <_exit>:

void _exit (int status)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ffe5 	bl	8003b24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b5a:	e7fe      	b.n	8003b5a <_exit+0x12>

08003b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e00a      	b.n	8003b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b6e:	f3af 8000 	nop.w
 8003b72:	4601      	mov	r1, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	60ba      	str	r2, [r7, #8]
 8003b7a:	b2ca      	uxtb	r2, r1
 8003b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3301      	adds	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	dbf0      	blt.n	8003b6e <_read+0x12>
	}

return len;
 8003b8c:	687b      	ldr	r3, [r7, #4]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
	return -1;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_isatty>:

int _isatty(int file)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8003bd6:	2301      	movs	r3, #1
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
	return 0;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <_sbrk+0x5c>)
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <_sbrk+0x60>)
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <_sbrk+0x64>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <_sbrk+0x64>)
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <_sbrk+0x68>)
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <_sbrk+0x64>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d205      	bcs.n	8003c3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <_sbrk+0x6c>)
 8003c32:	220c      	movs	r2, #12
 8003c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	e009      	b.n	8003c50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <_sbrk+0x64>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <_sbrk+0x64>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	4a06      	ldr	r2, [pc, #24]	; (8003c64 <_sbrk+0x64>)
 8003c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	20050000 	.word	0x20050000
 8003c60:	00000400 	.word	0x00000400
 8003c64:	20000d50 	.word	0x20000d50
 8003c68:	2000be78 	.word	0x2000be78
 8003c6c:	2000be64 	.word	0x2000be64

08003c70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <SystemInit+0x20>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <SystemInit+0x20>)
 8003c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c98:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c9a:	490e      	ldr	r1, [pc, #56]	; (8003cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ca0:	e002      	b.n	8003ca8 <LoopCopyDataInit>

08003ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ca6:	3304      	adds	r3, #4

08003ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cac:	d3f9      	bcc.n	8003ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cae:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cb0:	4c0b      	ldr	r4, [pc, #44]	; (8003ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cb4:	e001      	b.n	8003cba <LoopFillZerobss>

08003cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cb8:	3204      	adds	r2, #4

08003cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cbc:	d3fb      	bcc.n	8003cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cbe:	f7ff ffd7 	bl	8003c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cc2:	f017 fa5d 	bl	801b180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cc6:	f7fd fa47 	bl	8001158 <main>
  bx  lr    
 8003cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ccc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cd4:	20000a50 	.word	0x20000a50
  ldr r2, =_sidata
 8003cd8:	080295e4 	.word	0x080295e4
  ldr r2, =_sbss
 8003cdc:	20000a50 	.word	0x20000a50
  ldr r4, =_ebss
 8003ce0:	2000be78 	.word	0x2000be78

08003ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ce4:	e7fe      	b.n	8003ce4 <ADC_IRQHandler>

08003ce6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cea:	2003      	movs	r0, #3
 8003cec:	f000 f8f9 	bl	8003ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7ff fe71 	bl	80039d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cf6:	f7ff fdbb 	bl	8003870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_IncTick+0x20>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_IncTick+0x24>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_IncTick+0x24>)
 8003d12:	6013      	str	r3, [r2, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000024 	.word	0x20000024
 8003d24:	200055a0 	.word	0x200055a0

08003d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_GetTick+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	200055a0 	.word	0x200055a0

08003d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7ff ffee 	bl	8003d28 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d005      	beq.n	8003d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_Delay+0x44>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d66:	bf00      	nop
 8003d68:	f7ff ffde 	bl	8003d28 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d8f7      	bhi.n	8003d68 <HAL_Delay+0x28>
  {
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000024 	.word	0x20000024

08003d88 <__NVIC_SetPriorityGrouping>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db6:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	60d3      	str	r3, [r2, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00
 8003dcc:	05fa0000 	.word	0x05fa0000

08003dd0 <__NVIC_GetPriorityGrouping>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_EnableIRQ>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0b      	blt.n	8003e16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4907      	ldr	r1, [pc, #28]	; (8003e24 <__NVIC_EnableIRQ+0x38>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	e000e100 	.word	0xe000e100

08003e28 <__NVIC_SetPriority>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	6039      	str	r1, [r7, #0]
 8003e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	db0a      	blt.n	8003e52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	490c      	ldr	r1, [pc, #48]	; (8003e74 <__NVIC_SetPriority+0x4c>)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e50:	e00a      	b.n	8003e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4908      	ldr	r1, [pc, #32]	; (8003e78 <__NVIC_SetPriority+0x50>)
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	3b04      	subs	r3, #4
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	440b      	add	r3, r1
 8003e66:	761a      	strb	r2, [r3, #24]
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	e000e100 	.word	0xe000e100
 8003e78:	e000ed00 	.word	0xe000ed00

08003e7c <NVIC_EncodePriority>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f1c3 0307 	rsb	r3, r3, #7
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	bf28      	it	cs
 8003e9a:	2304      	movcs	r3, #4
 8003e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d902      	bls.n	8003eac <NVIC_EncodePriority+0x30>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3b03      	subs	r3, #3
 8003eaa:	e000      	b.n	8003eae <NVIC_EncodePriority+0x32>
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	43d9      	mvns	r1, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	4313      	orrs	r3, r2
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3724      	adds	r7, #36	; 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ff4c 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f0a:	f7ff ff61 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 8003f0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7ff ffb1 	bl	8003e7c <NVIC_EncodePriority>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff80 	bl	8003e28 <__NVIC_SetPriority>
}
 8003f28:	bf00      	nop
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff54 	bl	8003dec <__NVIC_EnableIRQ>
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f5a:	f7ff fee5 	bl	8003d28 <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d008      	beq.n	8003f7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e052      	b.n	8004024 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0216 	bic.w	r2, r2, #22
 8003f8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <HAL_DMA_Abort+0x62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0208 	bic.w	r2, r2, #8
 8003fbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fce:	e013      	b.n	8003ff8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fd0:	f7ff feaa 	bl	8003d28 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d90c      	bls.n	8003ff8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e015      	b.n	8004024 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e4      	bne.n	8003fd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	223f      	movs	r2, #63	; 0x3f
 800400c:	409a      	lsls	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d004      	beq.n	800404a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e00c      	b.n	8004064 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2205      	movs	r2, #5
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004080:	4ba9      	ldr	r3, [pc, #676]	; (8004328 <HAL_ETH_Init+0x2b8>)
 8004082:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e181      	b.n	800439a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f005 f9b0 	bl	8009410 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b0:	4b9e      	ldr	r3, [pc, #632]	; (800432c <HAL_ETH_Init+0x2bc>)
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	4a9d      	ldr	r2, [pc, #628]	; (800432c <HAL_ETH_Init+0x2bc>)
 80040b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ba:	6453      	str	r3, [r2, #68]	; 0x44
 80040bc:	4b9b      	ldr	r3, [pc, #620]	; (800432c <HAL_ETH_Init+0x2bc>)
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80040c8:	4b99      	ldr	r3, [pc, #612]	; (8004330 <HAL_ETH_Init+0x2c0>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a98      	ldr	r2, [pc, #608]	; (8004330 <HAL_ETH_Init+0x2c0>)
 80040ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040d2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80040d4:	4b96      	ldr	r3, [pc, #600]	; (8004330 <HAL_ETH_Init+0x2c0>)
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4994      	ldr	r1, [pc, #592]	; (8004330 <HAL_ETH_Init+0x2c0>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80040fa:	f7ff fe15 	bl	8003d28 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004100:	e011      	b.n	8004126 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004102:	f7ff fe11 	bl	8003d28 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004110:	d909      	bls.n	8004126 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2203      	movs	r2, #3
 8004116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e139      	b.n	800439a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e4      	bne.n	8004102 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f023 031c 	bic.w	r3, r3, #28
 8004146:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004148:	f002 f8d4 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 800414c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4a78      	ldr	r2, [pc, #480]	; (8004334 <HAL_ETH_Init+0x2c4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d908      	bls.n	8004168 <HAL_ETH_Init+0xf8>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	4a77      	ldr	r2, [pc, #476]	; (8004338 <HAL_ETH_Init+0x2c8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d804      	bhi.n	8004168 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f043 0308 	orr.w	r3, r3, #8
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e027      	b.n	80041b8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	4a73      	ldr	r2, [pc, #460]	; (8004338 <HAL_ETH_Init+0x2c8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d908      	bls.n	8004182 <HAL_ETH_Init+0x112>
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	4a6d      	ldr	r2, [pc, #436]	; (8004328 <HAL_ETH_Init+0x2b8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d204      	bcs.n	8004182 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f043 030c 	orr.w	r3, r3, #12
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	e01a      	b.n	80041b8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4a68      	ldr	r2, [pc, #416]	; (8004328 <HAL_ETH_Init+0x2b8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d303      	bcc.n	8004192 <HAL_ETH_Init+0x122>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	4a6b      	ldr	r2, [pc, #428]	; (800433c <HAL_ETH_Init+0x2cc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d911      	bls.n	80041b6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4a69      	ldr	r2, [pc, #420]	; (800433c <HAL_ETH_Init+0x2cc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d908      	bls.n	80041ac <HAL_ETH_Init+0x13c>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4a68      	ldr	r2, [pc, #416]	; (8004340 <HAL_ETH_Init+0x2d0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d804      	bhi.n	80041ac <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e005      	b.n	80041b8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f043 0310 	orr.w	r3, r3, #16
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	e000      	b.n	80041b8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80041b6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80041c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041c4:	2100      	movs	r1, #0
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fc17 	bl	80049fa <HAL_ETH_WritePHYRegister>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80041d6:	6939      	ldr	r1, [r7, #16]
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fca3 	bl	8004b24 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0d7      	b.n	800439a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80041ea:	20ff      	movs	r0, #255	; 0xff
 80041ec:	f7ff fda8 	bl	8003d40 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80a5 	beq.w	8004344 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80041fa:	f7ff fd95 	bl	8003d28 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004200:	f107 030c 	add.w	r3, r7, #12
 8004204:	461a      	mov	r2, r3
 8004206:	2101      	movs	r1, #1
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fb8e 	bl	800492a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800420e:	f7ff fd8b 	bl	8003d28 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	f241 3288 	movw	r2, #5000	; 0x1388
 800421c:	4293      	cmp	r3, r2
 800421e:	d90f      	bls.n	8004240 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004224:	6939      	ldr	r1, [r7, #16]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fc7c 	bl	8004b24 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0ac      	b.n	800439a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0da      	beq.n	8004200 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800424a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800424e:	2100      	movs	r1, #0
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fbd2 	bl	80049fa <HAL_ETH_WritePHYRegister>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004260:	6939      	ldr	r1, [r7, #16]
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fc5e 	bl	8004b24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004270:	2301      	movs	r3, #1
 8004272:	e092      	b.n	800439a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004274:	f7ff fd58 	bl	8003d28 <HAL_GetTick>
 8004278:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800427a:	f107 030c 	add.w	r3, r7, #12
 800427e:	461a      	mov	r2, r3
 8004280:	2101      	movs	r1, #1
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fb51 	bl	800492a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004288:	f7ff fd4e 	bl	8003d28 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d90f      	bls.n	80042ba <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800429e:	6939      	ldr	r1, [r7, #16]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fc3f 	bl	8004b24 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e06f      	b.n	800439a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0da      	beq.n	800427a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	461a      	mov	r2, r3
 80042ca:	2110      	movs	r1, #16
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fb2c 	bl	800492a <HAL_ETH_ReadPHYRegister>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80042dc:	6939      	ldr	r1, [r7, #16]
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fc20 	bl	8004b24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80042ec:	2301      	movs	r3, #1
 80042ee:	e054      	b.n	800439a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	e002      	b.n	800430a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	e035      	b.n	8004388 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	e030      	b.n	8004388 <HAL_ETH_Init+0x318>
 8004326:	bf00      	nop
 8004328:	03938700 	.word	0x03938700
 800432c:	40023800 	.word	0x40023800
 8004330:	40013800 	.word	0x40013800
 8004334:	01312cff 	.word	0x01312cff
 8004338:	02160ebf 	.word	0x02160ebf
 800433c:	05f5e0ff 	.word	0x05f5e0ff
 8004340:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	08db      	lsrs	r3, r3, #3
 800434a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004354:	4313      	orrs	r3, r2
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	2100      	movs	r1, #0
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fb4c 	bl	80049fa <HAL_ETH_WritePHYRegister>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800436c:	6939      	ldr	r1, [r7, #16]
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fbd8 	bl	8004b24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e00c      	b.n	800439a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004380:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004384:	f7ff fcdc 	bl	8003d40 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004388:	6939      	ldr	r1, [r7, #16]
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fbca 	bl	8004b24 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_ETH_DMATxDescListInit+0x20>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e052      	b.n	800446a <HAL_ETH_DMATxDescListInit+0xc6>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e030      	b.n	8004442 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	015b      	lsls	r3, r3, #5
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	4413      	add	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043f0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4413      	add	r3, r2
 8004400:	461a      	mov	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	429a      	cmp	r2, r3
 8004422:	d208      	bcs.n	8004436 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	3301      	adds	r3, #1
 8004428:	015b      	lsls	r3, r3, #5
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4413      	add	r3, r2
 800442e:	461a      	mov	r2, r3
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e002      	b.n	800443c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3301      	adds	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d3ca      	bcc.n	80043e0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6819      	ldr	r1, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	f241 0310 	movw	r3, #4112	; 0x1010
 8004454:	440b      	add	r3, r1
 8004456:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_ETH_DMARxDescListInit+0x20>
 8004492:	2302      	movs	r3, #2
 8004494:	e056      	b.n	8004544 <HAL_ETH_DMARxDescListInit+0xce>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e034      	b.n	800451c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	015b      	lsls	r3, r3, #5
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4413      	add	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044c2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80044ca:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4413      	add	r3, r2
 80044da:	461a      	mov	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d105      	bne.n	80044f4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d208      	bcs.n	8004510 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	3301      	adds	r3, #1
 8004502:	015b      	lsls	r3, r3, #5
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	4413      	add	r3, r2
 8004508:	461a      	mov	r2, r3
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	e002      	b.n	8004516 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	3301      	adds	r3, #1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d3c6      	bcc.n	80044b2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	f241 030c 	movw	r3, #4108	; 0x100c
 800452e:	440b      	add	r3, r1
 8004530:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_ETH_TransmitFrame+0x24>
 8004570:	2302      	movs	r3, #2
 8004572:	e0cd      	b.n	8004710 <HAL_ETH_TransmitFrame+0x1c0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800459a:	2301      	movs	r3, #1
 800459c:	e0b8      	b.n	8004710 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da09      	bge.n	80045bc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2212      	movs	r2, #18
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0a9      	b.n	8004710 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d915      	bls.n	80045f2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	4a54      	ldr	r2, [pc, #336]	; (800471c <HAL_ETH_TransmitFrame+0x1cc>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0a9b      	lsrs	r3, r3, #10
 80045d0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	4b51      	ldr	r3, [pc, #324]	; (800471c <HAL_ETH_TransmitFrame+0x1cc>)
 80045d6:	fba3 1302 	umull	r1, r3, r3, r2
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3301      	adds	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e001      	b.n	80045f6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d11c      	bne.n	8004636 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800460a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004616:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004626:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
 8004634:	e04b      	b.n	80046ce <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e044      	b.n	80046c6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800464a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800466a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3b01      	subs	r3, #1
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d116      	bne.n	80046a4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004684:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4a25      	ldr	r2, [pc, #148]	; (8004720 <HAL_ETH_TransmitFrame+0x1d0>)
 800468a:	fb02 f203 	mul.w	r2, r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	4413      	add	r3, r2
 8004692:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004696:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80046a2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80046b2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3301      	adds	r3, #1
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d3b6      	bcc.n	800463c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	f241 0314 	movw	r3, #4116	; 0x1014
 80046d6:	4413      	add	r3, r2
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	f241 0314 	movw	r3, #4116	; 0x1014
 80046ea:	4413      	add	r3, r2
 80046ec:	2204      	movs	r2, #4
 80046ee:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	f241 0304 	movw	r3, #4100	; 0x1004
 80046f8:	4413      	add	r3, r2
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	ac02b00b 	.word	0xac02b00b
 8004720:	fffffa0c 	.word	0xfffffa0c

08004724 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800473a:	2302      	movs	r3, #2
 800473c:	e074      	b.n	8004828 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800474e:	e05a      	b.n	8004806 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004764:	d10d      	bne.n	8004782 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
 8004780:	e041      	b.n	8004806 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10b      	bne.n	80047a8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
 80047a6:	e02e      	b.n	8004806 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d103      	bne.n	80047ca <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80047d6:	1f1a      	subs	r2, r3, #4
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	e010      	b.n	8004828 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db02      	blt.n	8004816 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d99c      	bls.n	8004750 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	f241 0314 	movw	r3, #4116	; 0x1014
 8004844:	4413      	add	r3, r2
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d112      	bne.n	8004876 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f004 fe7f 	bl	8009554 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f241 0314 	movw	r3, #4116	; 0x1014
 800485e:	4413      	add	r3, r2
 8004860:	2240      	movs	r2, #64	; 0x40
 8004862:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004874:	e01b      	b.n	80048ae <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	f241 0314 	movw	r3, #4116	; 0x1014
 800487e:	4413      	add	r3, r2
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d111      	bne.n	80048ae <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f839 	bl	8004902 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	f241 0314 	movw	r3, #4116	; 0x1014
 8004898:	4413      	add	r3, r2
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	f241 0314 	movw	r3, #4116	; 0x1014
 80048b6:	4413      	add	r3, r2
 80048b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048bc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	f241 0314 	movw	r3, #4116	; 0x1014
 80048c6:	4413      	add	r3, r2
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d2:	d112      	bne.n	80048fa <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f81e 	bl	8004916 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	f241 0314 	movw	r3, #4116	; 0x1014
 80048e2:	4413      	add	r3, r2
 80048e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80048e8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	460b      	mov	r3, r1
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b82      	cmp	r3, #130	; 0x82
 800494a:	d101      	bne.n	8004950 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
 800494e:	e050      	b.n	80049f2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2282      	movs	r2, #130	; 0x82
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 031c 	and.w	r3, r3, #28
 8004966:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8a1b      	ldrh	r3, [r3, #16]
 800496c:	02db      	lsls	r3, r3, #11
 800496e:	b29b      	uxth	r3, r3
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004976:	897b      	ldrh	r3, [r7, #10]
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f023 0302 	bic.w	r3, r3, #2
 800498a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800499c:	f7ff f9c4 	bl	8003d28 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049a2:	e015      	b.n	80049d0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80049a4:	f7ff f9c0 	bl	8003d28 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d309      	bcc.n	80049c8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e014      	b.n	80049f2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e4      	bne.n	80049a4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	460b      	mov	r3, r1
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b42      	cmp	r3, #66	; 0x42
 8004a1a:	d101      	bne.n	8004a20 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e04e      	b.n	8004abe <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2242      	movs	r2, #66	; 0x42
 8004a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f003 031c 	and.w	r3, r3, #28
 8004a36:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8a1b      	ldrh	r3, [r3, #16]
 8004a3c:	02db      	lsls	r3, r3, #11
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004a46:	897b      	ldrh	r3, [r7, #10]
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f043 0302 	orr.w	r3, r3, #2
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004a76:	f7ff f957 	bl	8003d28 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a7c:	e015      	b.n	8004aaa <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004a7e:	f7ff f953 	bl	8003d28 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8c:	d309      	bcc.n	8004aa2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e00d      	b.n	8004abe <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e4      	bne.n	8004a7e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_ETH_Start+0x16>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e01f      	b.n	8004b1c <HAL_ETH_Start+0x56>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa1b 	bl	8004f28 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa35 	bl	8004f62 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fa7f 	bl	8004ffc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa4c 	bl	8004f9c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fa61 	bl	8004fcc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b0b0      	sub	sp, #192	; 0xc0
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b40:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b48:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004b52:	2300      	movs	r3, #0
 8004b54:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b70:	e001      	b.n	8004b76 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b7a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b80:	2300      	movs	r3, #0
 8004b82:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004b90:	2340      	movs	r3, #64	; 0x40
 8004b92:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004bf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bfc:	4bab      	ldr	r3, [pc, #684]	; (8004eac <ETH_MACDMAConfig+0x388>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c08:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004c0c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004c10:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004c16:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004c1a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004c1e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004c24:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004c28:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004c2c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004c30:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004c34:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004c38:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c4c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f7ff f871 	bl	8003d40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c66:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004c68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004c6c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004c70:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004c76:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004c7c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004c82:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004c88:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004c8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004c94:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004c96:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f7ff f84c 	bl	8003d40 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004cb0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cba:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004cc4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004cd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004cd4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004cd8:	4013      	ands	r3, r2
 8004cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ce2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004ce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004ce8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004cee:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004cf4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004cfa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004cfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004d00:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004d02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d14:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d20:	2001      	movs	r0, #1
 8004d22:	f7ff f80d 	bl	8003d40 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d2e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004d30:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004d34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	f7fe fff8 	bl	8003d40 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d58:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d62:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004d68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d6c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004d7e:	2304      	movs	r3, #4
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d92:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004da2:	2300      	movs	r3, #0
 8004da4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f241 0318 	movw	r3, #4120	; 0x1018
 8004dae:	4413      	add	r3, r2
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004db6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004dba:	4b3d      	ldr	r3, [pc, #244]	; (8004eb0 <ETH_MACDMAConfig+0x38c>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004dc2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004dc4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004dc6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004dc8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004dca:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004dcc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004dce:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004dd0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004dd2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004dd4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004dd6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004dda:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004dde:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004de2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004de4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	f241 0318 	movw	r3, #4120	; 0x1018
 8004df6:	4413      	add	r3, r2
 8004df8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004dfc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e06:	4413      	add	r3, r2
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f7fe ff96 	bl	8003d40 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e22:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e28:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004e2c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004e30:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004e34:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e38:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004e3a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004e3e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f7fe ff6f 	bl	8003d40 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e6e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10d      	bne.n	8004e94 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f241 031c 	movw	r3, #4124	; 0x101c
 8004e80:	4413      	add	r3, r2
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6811      	ldr	r1, [r2, #0]
 8004e88:	4a0a      	ldr	r2, [pc, #40]	; (8004eb4 <ETH_MACDMAConfig+0x390>)
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	f241 031c 	movw	r3, #4124	; 0x101c
 8004e90:	440b      	add	r3, r1
 8004e92:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f80b 	bl	8004eb8 <ETH_MACAddressConfig>
}
 8004ea2:	bf00      	nop
 8004ea4:	37c0      	adds	r7, #192	; 0xc0
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	ff20810f 	.word	0xff20810f
 8004eb0:	f8de3f23 	.word	0xf8de3f23
 8004eb4:	00010040 	.word	0x00010040

08004eb8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3305      	adds	r3, #5
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	3204      	adds	r2, #4
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <ETH_MACAddressConfig+0x68>)
 8004eda:	4413      	add	r3, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3303      	adds	r3, #3
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	061a      	lsls	r2, r3, #24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3302      	adds	r3, #2
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	4313      	orrs	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <ETH_MACAddressConfig+0x6c>)
 8004f0a:	4413      	add	r3, r2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6013      	str	r3, [r2, #0]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40028040 	.word	0x40028040
 8004f24:	40028044 	.word	0x40028044

08004f28 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0208 	orr.w	r2, r2, #8
 8004f42:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	f7fe fef7 	bl	8003d40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0204 	orr.w	r2, r2, #4
 8004f7c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f86:	2001      	movs	r0, #1
 8004f88:	f7fe feda 	bl	8003d40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	601a      	str	r2, [r3, #0]
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	f241 0318 	movw	r3, #4120	; 0x1018
 8004fac:	4413      	add	r3, r2
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6811      	ldr	r1, [r2, #0]
 8004fb4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004fb8:	f241 0318 	movw	r3, #4120	; 0x1018
 8004fbc:	440b      	add	r3, r1
 8004fbe:	601a      	str	r2, [r3, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	f241 0318 	movw	r3, #4120	; 0x1018
 8004fdc:	4413      	add	r3, r2
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6811      	ldr	r1, [r2, #0]
 8004fe4:	f043 0202 	orr.w	r2, r3, #2
 8004fe8:	f241 0318 	movw	r3, #4120	; 0x1018
 8004fec:	440b      	add	r3, r1
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005010:	4413      	add	r3, r2
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6811      	ldr	r1, [r2, #0]
 8005018:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800501c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005020:	440b      	add	r3, r1
 8005022:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	f241 0318 	movw	r3, #4120	; 0x1018
 800502c:	4413      	add	r3, r2
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005032:	2001      	movs	r0, #1
 8005034:	f7fe fe84 	bl	8003d40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6819      	ldr	r1, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f241 0318 	movw	r3, #4120	; 0x1018
 8005042:	440b      	add	r3, r1
 8005044:	601a      	str	r2, [r3, #0]
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005062:	4b27      	ldr	r3, [pc, #156]	; (8005100 <HAL_FLASH_Program+0xb0>)
 8005064:	7d1b      	ldrb	r3, [r3, #20]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_FLASH_Program+0x1e>
 800506a:	2302      	movs	r3, #2
 800506c:	e043      	b.n	80050f6 <HAL_FLASH_Program+0xa6>
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <HAL_FLASH_Program+0xb0>)
 8005070:	2201      	movs	r2, #1
 8005072:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005074:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005078:	f000 f878 	bl	800516c <FLASH_WaitForLastOperation>
 800507c:	4603      	mov	r3, r0
 800507e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d133      	bne.n	80050ee <HAL_FLASH_Program+0x9e>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d823      	bhi.n	80050d4 <HAL_FLASH_Program+0x84>
 800508c:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <HAL_FLASH_Program+0x44>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050b1 	.word	0x080050b1
 800509c:	080050bd 	.word	0x080050bd
 80050a0:	080050c9 	.word	0x080050c9
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80050a4:	783b      	ldrb	r3, [r7, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	68b8      	ldr	r0, [r7, #8]
 80050aa:	f000 f921 	bl	80052f0 <FLASH_Program_Byte>
        break;
 80050ae:	e012      	b.n	80050d6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80050b0:	883b      	ldrh	r3, [r7, #0]
 80050b2:	4619      	mov	r1, r3
 80050b4:	68b8      	ldr	r0, [r7, #8]
 80050b6:	f000 f8f5 	bl	80052a4 <FLASH_Program_HalfWord>
        break;
 80050ba:	e00c      	b.n	80050d6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	4619      	mov	r1, r3
 80050c0:	68b8      	ldr	r0, [r7, #8]
 80050c2:	f000 f8c9 	bl	8005258 <FLASH_Program_Word>
        break;
 80050c6:	e006      	b.n	80050d6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80050c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050cc:	68b8      	ldr	r0, [r7, #8]
 80050ce:	f000 f88d 	bl	80051ec <FLASH_Program_DoubleWord>
        break;
 80050d2:	e000      	b.n	80050d6 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80050d4:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050da:	f000 f847 	bl	800516c <FLASH_WaitForLastOperation>
 80050de:	4603      	mov	r3, r0
 80050e0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <HAL_FLASH_Program+0xb4>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	4a07      	ldr	r2, [pc, #28]	; (8005104 <HAL_FLASH_Program+0xb4>)
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_FLASH_Program+0xb0>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	751a      	strb	r2, [r3, #20]

  return status;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200055a4 	.word	0x200055a4
 8005104:	40023c00 	.word	0x40023c00

08005108 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_FLASH_Unlock+0x38>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	da0b      	bge.n	8005132 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_FLASH_Unlock+0x38>)
 800511c:	4a09      	ldr	r2, [pc, #36]	; (8005144 <HAL_FLASH_Unlock+0x3c>)
 800511e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_FLASH_Unlock+0x38>)
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <HAL_FLASH_Unlock+0x40>)
 8005124:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_FLASH_Unlock+0x38>)
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	da01      	bge.n	8005132 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005132:	79fb      	ldrb	r3, [r7, #7]
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40023c00 	.word	0x40023c00
 8005144:	45670123 	.word	0x45670123
 8005148:	cdef89ab 	.word	0xcdef89ab

0800514c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_FLASH_Lock+0x1c>)
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	4a04      	ldr	r2, [pc, #16]	; (8005168 <HAL_FLASH_Lock+0x1c>)
 8005156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800515a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40023c00 	.word	0x40023c00

0800516c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005178:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <FLASH_WaitForLastOperation+0x78>)
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800517e:	f7fe fdd3 	bl	8003d28 <HAL_GetTick>
 8005182:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005184:	e010      	b.n	80051a8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d00c      	beq.n	80051a8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <FLASH_WaitForLastOperation+0x38>
 8005194:	f7fe fdc8 	bl	8003d28 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d201      	bcs.n	80051a8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e019      	b.n	80051dc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <FLASH_WaitForLastOperation+0x7c>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e8      	bne.n	8005186 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <FLASH_WaitForLastOperation+0x7c>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80051c0:	f000 f8ba 	bl	8005338 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e009      	b.n	80051dc <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80051c8:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <FLASH_WaitForLastOperation+0x7c>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80051d4:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <FLASH_WaitForLastOperation+0x7c>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
  
}  
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	200055a4 	.word	0x200055a4
 80051e8:	40023c00 	.word	0x40023c00

080051ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80051f8:	4b16      	ldr	r3, [pc, #88]	; (8005254 <FLASH_Program_DoubleWord+0x68>)
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	4a15      	ldr	r2, [pc, #84]	; (8005254 <FLASH_Program_DoubleWord+0x68>)
 80051fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005202:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <FLASH_Program_DoubleWord+0x68>)
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	4a12      	ldr	r2, [pc, #72]	; (8005254 <FLASH_Program_DoubleWord+0x68>)
 800520a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800520e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <FLASH_Program_DoubleWord+0x68>)
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <FLASH_Program_DoubleWord+0x68>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005222:	f3bf 8f6f 	isb	sy
}
 8005226:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	000a      	movs	r2, r1
 8005236:	2300      	movs	r3, #0
 8005238:	68f9      	ldr	r1, [r7, #12]
 800523a:	3104      	adds	r1, #4
 800523c:	4613      	mov	r3, r2
 800523e:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005240:	f3bf 8f4f 	dsb	sy
}
 8005244:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40023c00 	.word	0x40023c00

08005258 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <FLASH_Program_Word+0x48>)
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <FLASH_Program_Word+0x48>)
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <FLASH_Program_Word+0x48>)
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <FLASH_Program_Word+0x48>)
 8005274:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005278:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <FLASH_Program_Word+0x48>)
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <FLASH_Program_Word+0x48>)
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800528c:	f3bf 8f4f 	dsb	sy
}
 8005290:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40023c00 	.word	0x40023c00

080052a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <FLASH_Program_HalfWord+0x48>)
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	4a0d      	ldr	r2, [pc, #52]	; (80052ec <FLASH_Program_HalfWord+0x48>)
 80052b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <FLASH_Program_HalfWord+0x48>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <FLASH_Program_HalfWord+0x48>)
 80052c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <FLASH_Program_HalfWord+0x48>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	4a07      	ldr	r2, [pc, #28]	; (80052ec <FLASH_Program_HalfWord+0x48>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052da:	f3bf 8f4f 	dsb	sy
}
 80052de:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40023c00 	.word	0x40023c00

080052f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <FLASH_Program_Byte+0x44>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	4a0c      	ldr	r2, [pc, #48]	; (8005334 <FLASH_Program_Byte+0x44>)
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <FLASH_Program_Byte+0x44>)
 800530a:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <FLASH_Program_Byte+0x44>)
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005310:	4b08      	ldr	r3, [pc, #32]	; (8005334 <FLASH_Program_Byte+0x44>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	4a07      	ldr	r2, [pc, #28]	; (8005334 <FLASH_Program_Byte+0x44>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005322:	f3bf 8f4f 	dsb	sy
}
 8005326:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40023c00 	.word	0x40023c00

08005338 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800533c:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <FLASH_SetErrorCode+0x8c>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005348:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 8005352:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005354:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <FLASH_SetErrorCode+0x8c>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005360:	4b19      	ldr	r3, [pc, #100]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f043 0310 	orr.w	r3, r3, #16
 8005368:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 800536a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <FLASH_SetErrorCode+0x8c>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005378:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f043 0308 	orr.w	r3, r3, #8
 8005380:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 8005382:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <FLASH_SetErrorCode+0x8c>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005390:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f043 0304 	orr.w	r3, r3, #4
 8005398:	4a0b      	ldr	r2, [pc, #44]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 800539a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <FLASH_SetErrorCode+0x8c>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80053a8:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f043 0302 	orr.w	r3, r3, #2
 80053b0:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <FLASH_SetErrorCode+0x90>)
 80053b2:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80053b4:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <FLASH_SetErrorCode+0x8c>)
 80053b6:	22f2      	movs	r2, #242	; 0xf2
 80053b8:	60da      	str	r2, [r3, #12]
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	40023c00 	.word	0x40023c00
 80053c8:	200055a4 	.word	0x200055a4

080053cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053de:	4b2f      	ldr	r3, [pc, #188]	; (800549c <HAL_FLASHEx_Erase+0xd0>)
 80053e0:	7d1b      	ldrb	r3, [r3, #20]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_FLASHEx_Erase+0x1e>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e053      	b.n	8005492 <HAL_FLASHEx_Erase+0xc6>
 80053ea:	4b2c      	ldr	r3, [pc, #176]	; (800549c <HAL_FLASHEx_Erase+0xd0>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053f4:	f7ff feba 	bl	800516c <FLASH_WaitForLastOperation>
 80053f8:	4603      	mov	r3, r0
 80053fa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d143      	bne.n	800548a <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f04f 32ff 	mov.w	r2, #4294967295
 8005408:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d112      	bne.n	8005438 <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f843 	bl	80054a4 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800541e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005422:	f7ff fea3 	bl	800516c <FLASH_WaitForLastOperation>
 8005426:	4603      	mov	r3, r0
 8005428:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800542a:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <HAL_FLASHEx_Erase+0xd4>)
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_FLASHEx_Erase+0xd4>)
 8005430:	f023 0304 	bic.w	r3, r3, #4
 8005434:	6113      	str	r3, [r2, #16]
 8005436:	e028      	b.n	800548a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	e01c      	b.n	800547a <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	4619      	mov	r1, r3
 8005448:	68b8      	ldr	r0, [r7, #8]
 800544a:	f000 f851 	bl	80054f0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800544e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005452:	f7ff fe8b 	bl	800516c <FLASH_WaitForLastOperation>
 8005456:	4603      	mov	r3, r0
 8005458:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800545a:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <HAL_FLASHEx_Erase+0xd4>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	4a10      	ldr	r2, [pc, #64]	; (80054a0 <HAL_FLASHEx_Erase+0xd4>)
 8005460:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8005464:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	601a      	str	r2, [r3, #0]
          break;
 8005472:	e00a      	b.n	800548a <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	3301      	adds	r3, #1
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4413      	add	r3, r2
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	d3da      	bcc.n	8005440 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800548a:	4b04      	ldr	r3, [pc, #16]	; (800549c <HAL_FLASHEx_Erase+0xd0>)
 800548c:	2200      	movs	r2, #0
 800548e:	751a      	strb	r2, [r3, #20]

  return status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200055a4 	.word	0x200055a4
 80054a0:	40023c00 	.word	0x40023c00

080054a4 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <FLASH_MassErase+0x48>)
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <FLASH_MassErase+0x48>)
 80054b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80054ba:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <FLASH_MassErase+0x48>)
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	4a0b      	ldr	r2, [pc, #44]	; (80054ec <FLASH_MassErase+0x48>)
 80054c0:	f043 0304 	orr.w	r3, r3, #4
 80054c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <FLASH_MassErase+0x48>)
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	4313      	orrs	r3, r2
 80054d0:	4a06      	ldr	r2, [pc, #24]	; (80054ec <FLASH_MassErase+0x48>)
 80054d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80054d8:	f3bf 8f4f 	dsb	sy
}
 80054dc:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40023c00 	.word	0x40023c00

080054f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e010      	b.n	800552e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d103      	bne.n	800551a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	e009      	b.n	800552e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d103      	bne.n	8005528 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	e002      	b.n	800552e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005528:	f44f 7340 	mov.w	r3, #768	; 0x300
 800552c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <FLASH_Erase_Sector+0x94>)
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	4a14      	ldr	r2, [pc, #80]	; (8005584 <FLASH_Erase_Sector+0x94>)
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005538:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <FLASH_Erase_Sector+0x94>)
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	4911      	ldr	r1, [pc, #68]	; (8005584 <FLASH_Erase_Sector+0x94>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8005546:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <FLASH_Erase_Sector+0x94>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	4a0e      	ldr	r2, [pc, #56]	; (8005584 <FLASH_Erase_Sector+0x94>)
 800554c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005550:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <FLASH_Erase_Sector+0x94>)
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4313      	orrs	r3, r2
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <FLASH_Erase_Sector+0x94>)
 800555e:	f043 0302 	orr.w	r3, r3, #2
 8005562:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005564:	4b07      	ldr	r3, [pc, #28]	; (8005584 <FLASH_Erase_Sector+0x94>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	4a06      	ldr	r2, [pc, #24]	; (8005584 <FLASH_Erase_Sector+0x94>)
 800556a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005570:	f3bf 8f4f 	dsb	sy
}
 8005574:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40023c00 	.word	0x40023c00

08005588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800559a:	2300      	movs	r3, #0
 800559c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	e175      	b.n	8005894 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80055a8:	2201      	movs	r2, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	f040 8164 	bne.w	800588e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d005      	beq.n	80055de <HAL_GPIO_Init+0x56>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d130      	bne.n	8005640 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2203      	movs	r2, #3
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4313      	orrs	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005614:	2201      	movs	r2, #1
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	43db      	mvns	r3, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4013      	ands	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	f003 0201 	and.w	r2, r3, #1
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4313      	orrs	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	2b03      	cmp	r3, #3
 800564a:	d017      	beq.n	800567c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	2203      	movs	r2, #3
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d123      	bne.n	80056d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	08da      	lsrs	r2, r3, #3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3208      	adds	r2, #8
 8005690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	220f      	movs	r2, #15
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	4313      	orrs	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	08da      	lsrs	r2, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3208      	adds	r2, #8
 80056ca:	69b9      	ldr	r1, [r7, #24]
 80056cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	2203      	movs	r2, #3
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4013      	ands	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 0203 	and.w	r2, r3, #3
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80be 	beq.w	800588e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005712:	4b66      	ldr	r3, [pc, #408]	; (80058ac <HAL_GPIO_Init+0x324>)
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	4a65      	ldr	r2, [pc, #404]	; (80058ac <HAL_GPIO_Init+0x324>)
 8005718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800571c:	6453      	str	r3, [r2, #68]	; 0x44
 800571e:	4b63      	ldr	r3, [pc, #396]	; (80058ac <HAL_GPIO_Init+0x324>)
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800572a:	4a61      	ldr	r2, [pc, #388]	; (80058b0 <HAL_GPIO_Init+0x328>)
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	089b      	lsrs	r3, r3, #2
 8005730:	3302      	adds	r3, #2
 8005732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	220f      	movs	r2, #15
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4013      	ands	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a58      	ldr	r2, [pc, #352]	; (80058b4 <HAL_GPIO_Init+0x32c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d037      	beq.n	80057c6 <HAL_GPIO_Init+0x23e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a57      	ldr	r2, [pc, #348]	; (80058b8 <HAL_GPIO_Init+0x330>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d031      	beq.n	80057c2 <HAL_GPIO_Init+0x23a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a56      	ldr	r2, [pc, #344]	; (80058bc <HAL_GPIO_Init+0x334>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d02b      	beq.n	80057be <HAL_GPIO_Init+0x236>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a55      	ldr	r2, [pc, #340]	; (80058c0 <HAL_GPIO_Init+0x338>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d025      	beq.n	80057ba <HAL_GPIO_Init+0x232>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a54      	ldr	r2, [pc, #336]	; (80058c4 <HAL_GPIO_Init+0x33c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01f      	beq.n	80057b6 <HAL_GPIO_Init+0x22e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a53      	ldr	r2, [pc, #332]	; (80058c8 <HAL_GPIO_Init+0x340>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d019      	beq.n	80057b2 <HAL_GPIO_Init+0x22a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a52      	ldr	r2, [pc, #328]	; (80058cc <HAL_GPIO_Init+0x344>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <HAL_GPIO_Init+0x226>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a51      	ldr	r2, [pc, #324]	; (80058d0 <HAL_GPIO_Init+0x348>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00d      	beq.n	80057aa <HAL_GPIO_Init+0x222>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a50      	ldr	r2, [pc, #320]	; (80058d4 <HAL_GPIO_Init+0x34c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <HAL_GPIO_Init+0x21e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a4f      	ldr	r2, [pc, #316]	; (80058d8 <HAL_GPIO_Init+0x350>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <HAL_GPIO_Init+0x21a>
 800579e:	2309      	movs	r3, #9
 80057a0:	e012      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057a2:	230a      	movs	r3, #10
 80057a4:	e010      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057a6:	2308      	movs	r3, #8
 80057a8:	e00e      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057aa:	2307      	movs	r3, #7
 80057ac:	e00c      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057ae:	2306      	movs	r3, #6
 80057b0:	e00a      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057b2:	2305      	movs	r3, #5
 80057b4:	e008      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057b6:	2304      	movs	r3, #4
 80057b8:	e006      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057ba:	2303      	movs	r3, #3
 80057bc:	e004      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057be:	2302      	movs	r3, #2
 80057c0:	e002      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057c6:	2300      	movs	r3, #0
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	f002 0203 	and.w	r2, r2, #3
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	4093      	lsls	r3, r2
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057d8:	4935      	ldr	r1, [pc, #212]	; (80058b0 <HAL_GPIO_Init+0x328>)
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	3302      	adds	r3, #2
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057e6:	4b3d      	ldr	r3, [pc, #244]	; (80058dc <HAL_GPIO_Init+0x354>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	43db      	mvns	r3, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4013      	ands	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800580a:	4a34      	ldr	r2, [pc, #208]	; (80058dc <HAL_GPIO_Init+0x354>)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005810:	4b32      	ldr	r3, [pc, #200]	; (80058dc <HAL_GPIO_Init+0x354>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005834:	4a29      	ldr	r2, [pc, #164]	; (80058dc <HAL_GPIO_Init+0x354>)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800583a:	4b28      	ldr	r3, [pc, #160]	; (80058dc <HAL_GPIO_Init+0x354>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	43db      	mvns	r3, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800585e:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <HAL_GPIO_Init+0x354>)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_GPIO_Init+0x354>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <HAL_GPIO_Init+0x354>)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3301      	adds	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	f67f ae86 	bls.w	80055a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40013800 	.word	0x40013800
 80058b4:	40020000 	.word	0x40020000
 80058b8:	40020400 	.word	0x40020400
 80058bc:	40020800 	.word	0x40020800
 80058c0:	40020c00 	.word	0x40020c00
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40021400 	.word	0x40021400
 80058cc:	40021800 	.word	0x40021800
 80058d0:	40021c00 	.word	0x40021c00
 80058d4:	40022000 	.word	0x40022000
 80058d8:	40022400 	.word	0x40022400
 80058dc:	40013c00 	.word	0x40013c00

080058e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	887b      	ldrh	r3, [r7, #2]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	e001      	b.n	8005902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
 800591c:	4613      	mov	r3, r2
 800591e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005920:	787b      	ldrb	r3, [r7, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800592c:	e003      	b.n	8005936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	041a      	lsls	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	619a      	str	r2, [r3, #24]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005954:	887a      	ldrh	r2, [r7, #2]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4013      	ands	r3, r2
 800595a:	041a      	lsls	r2, r3, #16
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	43d9      	mvns	r1, r3
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	400b      	ands	r3, r1
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	619a      	str	r2, [r3, #24]
}
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d006      	beq.n	800599c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800598e:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fc f83a 	bl	8001a10 <HAL_GPIO_EXTI_Callback>
  }
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40013c00 	.word	0x40013c00

080059a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bf00      	nop
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40007000 	.word	0x40007000

080059c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80059d2:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x98>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	4a22      	ldr	r2, [pc, #136]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x98>)
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6413      	str	r3, [r2, #64]	; 0x40
 80059de:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x98>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059ea:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059f6:	f7fe f997 	bl	8003d28 <HAL_GetTick>
 80059fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059fc:	e009      	b.n	8005a12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059fe:	f7fe f993 	bl	8003d28 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a0c:	d901      	bls.n	8005a12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e022      	b.n	8005a58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a12:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1e:	d1ee      	bne.n	80059fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a20:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0f      	ldr	r2, [pc, #60]	; (8005a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a2c:	f7fe f97c 	bl	8003d28 <HAL_GetTick>
 8005a30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a32:	e009      	b.n	8005a48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a34:	f7fe f978 	bl	8003d28 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a42:	d901      	bls.n	8005a48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e007      	b.n	8005a58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a54:	d1ee      	bne.n	8005a34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40007000 	.word	0x40007000

08005a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a70:	2300      	movs	r3, #0
 8005a72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e291      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8087 	beq.w	8005b9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a8c:	4b96      	ldr	r3, [pc, #600]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 030c 	and.w	r3, r3, #12
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d00c      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a98:	4b93      	ldr	r3, [pc, #588]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 030c 	and.w	r3, r3, #12
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d112      	bne.n	8005aca <HAL_RCC_OscConfig+0x62>
 8005aa4:	4b90      	ldr	r3, [pc, #576]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab0:	d10b      	bne.n	8005aca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab2:	4b8d      	ldr	r3, [pc, #564]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d06c      	beq.n	8005b98 <HAL_RCC_OscConfig+0x130>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d168      	bne.n	8005b98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e26b      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad2:	d106      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x7a>
 8005ad4:	4b84      	ldr	r3, [pc, #528]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a83      	ldr	r2, [pc, #524]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e02e      	b.n	8005b40 <HAL_RCC_OscConfig+0xd8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10c      	bne.n	8005b04 <HAL_RCC_OscConfig+0x9c>
 8005aea:	4b7f      	ldr	r3, [pc, #508]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a7e      	ldr	r2, [pc, #504]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	4b7c      	ldr	r3, [pc, #496]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a7b      	ldr	r2, [pc, #492]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e01d      	b.n	8005b40 <HAL_RCC_OscConfig+0xd8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCC_OscConfig+0xc0>
 8005b0e:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a75      	ldr	r2, [pc, #468]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	4b73      	ldr	r3, [pc, #460]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a72      	ldr	r2, [pc, #456]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e00b      	b.n	8005b40 <HAL_RCC_OscConfig+0xd8>
 8005b28:	4b6f      	ldr	r3, [pc, #444]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6e      	ldr	r2, [pc, #440]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	4b6c      	ldr	r3, [pc, #432]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a6b      	ldr	r2, [pc, #428]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d013      	beq.n	8005b70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fe f8ee 	bl	8003d28 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b50:	f7fe f8ea 	bl	8003d28 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e21f      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b62:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f0      	beq.n	8005b50 <HAL_RCC_OscConfig+0xe8>
 8005b6e:	e014      	b.n	8005b9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b70:	f7fe f8da 	bl	8003d28 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b78:	f7fe f8d6 	bl	8003d28 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b64      	cmp	r3, #100	; 0x64
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e20b      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8a:	4b57      	ldr	r3, [pc, #348]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f0      	bne.n	8005b78 <HAL_RCC_OscConfig+0x110>
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d069      	beq.n	8005c7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ba6:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bb2:	4b4d      	ldr	r3, [pc, #308]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d11c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x190>
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d116      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_RCC_OscConfig+0x17a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d001      	beq.n	8005be2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e1df      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	493d      	ldr	r1, [pc, #244]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf6:	e040      	b.n	8005c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d023      	beq.n	8005c48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c00:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a38      	ldr	r2, [pc, #224]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fe f88c 	bl	8003d28 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c14:	f7fe f888 	bl	8003d28 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e1bd      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c26:	4b30      	ldr	r3, [pc, #192]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c32:	4b2d      	ldr	r3, [pc, #180]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4929      	ldr	r1, [pc, #164]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]
 8005c46:	e018      	b.n	8005c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c48:	4b27      	ldr	r3, [pc, #156]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fe f868 	bl	8003d28 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5c:	f7fe f864 	bl	8003d28 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e199      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d038      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d019      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c8e:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c92:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fe f845 	bl	8003d28 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca2:	f7fe f841 	bl	8003d28 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e176      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x23a>
 8005cc0:	e01a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cce:	f7fe f82b 	bl	8003d28 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd4:	e00a      	b.n	8005cec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd6:	f7fe f827 	bl	8003d28 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d903      	bls.n	8005cec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e15c      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
 8005ce8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cec:	4b91      	ldr	r3, [pc, #580]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1ee      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80a4 	beq.w	8005e4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d06:	4b8b      	ldr	r3, [pc, #556]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10d      	bne.n	8005d2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d12:	4b88      	ldr	r3, [pc, #544]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	4a87      	ldr	r2, [pc, #540]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d1e:	4b85      	ldr	r3, [pc, #532]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d2e:	4b82      	ldr	r3, [pc, #520]	; (8005f38 <HAL_RCC_OscConfig+0x4d0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d118      	bne.n	8005d6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005d3a:	4b7f      	ldr	r3, [pc, #508]	; (8005f38 <HAL_RCC_OscConfig+0x4d0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a7e      	ldr	r2, [pc, #504]	; (8005f38 <HAL_RCC_OscConfig+0x4d0>)
 8005d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d46:	f7fd ffef 	bl	8003d28 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4e:	f7fd ffeb 	bl	8003d28 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b64      	cmp	r3, #100	; 0x64
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e120      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d60:	4b75      	ldr	r3, [pc, #468]	; (8005f38 <HAL_RCC_OscConfig+0x4d0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d106      	bne.n	8005d82 <HAL_RCC_OscConfig+0x31a>
 8005d74:	4b6f      	ldr	r3, [pc, #444]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a6e      	ldr	r2, [pc, #440]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d80:	e02d      	b.n	8005dde <HAL_RCC_OscConfig+0x376>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x33c>
 8005d8a:	4b6a      	ldr	r3, [pc, #424]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	4a69      	ldr	r2, [pc, #420]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	6713      	str	r3, [r2, #112]	; 0x70
 8005d96:	4b67      	ldr	r3, [pc, #412]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	4a66      	ldr	r2, [pc, #408]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d9c:	f023 0304 	bic.w	r3, r3, #4
 8005da0:	6713      	str	r3, [r2, #112]	; 0x70
 8005da2:	e01c      	b.n	8005dde <HAL_RCC_OscConfig+0x376>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b05      	cmp	r3, #5
 8005daa:	d10c      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x35e>
 8005dac:	4b61      	ldr	r3, [pc, #388]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	4a60      	ldr	r2, [pc, #384]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005db2:	f043 0304 	orr.w	r3, r3, #4
 8005db6:	6713      	str	r3, [r2, #112]	; 0x70
 8005db8:	4b5e      	ldr	r3, [pc, #376]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	4a5d      	ldr	r2, [pc, #372]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc4:	e00b      	b.n	8005dde <HAL_RCC_OscConfig+0x376>
 8005dc6:	4b5b      	ldr	r3, [pc, #364]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	4a5a      	ldr	r2, [pc, #360]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd2:	4b58      	ldr	r3, [pc, #352]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	4a57      	ldr	r2, [pc, #348]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dd8:	f023 0304 	bic.w	r3, r3, #4
 8005ddc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d015      	beq.n	8005e12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de6:	f7fd ff9f 	bl	8003d28 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dec:	e00a      	b.n	8005e04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dee:	f7fd ff9b 	bl	8003d28 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e0ce      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e04:	4b4b      	ldr	r3, [pc, #300]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0ee      	beq.n	8005dee <HAL_RCC_OscConfig+0x386>
 8005e10:	e014      	b.n	8005e3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e12:	f7fd ff89 	bl	8003d28 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fd ff85 	bl	8003d28 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e0b8      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e30:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1ee      	bne.n	8005e1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d105      	bne.n	8005e4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e42:	4b3c      	ldr	r3, [pc, #240]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	4a3b      	ldr	r2, [pc, #236]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80a4 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e58:	4b36      	ldr	r3, [pc, #216]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 030c 	and.w	r3, r3, #12
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d06b      	beq.n	8005f3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d149      	bne.n	8005f00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6c:	4b31      	ldr	r3, [pc, #196]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a30      	ldr	r2, [pc, #192]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fd ff56 	bl	8003d28 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fd ff52 	bl	8003d28 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e087      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e92:	4b28      	ldr	r3, [pc, #160]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69da      	ldr	r2, [r3, #28]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	019b      	lsls	r3, r3, #6
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	041b      	lsls	r3, r3, #16
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	061b      	lsls	r3, r3, #24
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fd ff26 	bl	8003d28 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7fd ff22 	bl	8003d28 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e057      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x478>
 8005efe:	e04f      	b.n	8005fa0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a0b      	ldr	r2, [pc, #44]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fd ff0c 	bl	8003d28 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fd ff08 	bl	8003d28 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e03d      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f26:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x4ac>
 8005f32:	e035      	b.n	8005fa0 <HAL_RCC_OscConfig+0x538>
 8005f34:	40023800 	.word	0x40023800
 8005f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x544>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d028      	beq.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d121      	bne.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d11a      	bne.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d111      	bne.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	3b01      	subs	r3, #1
 8005f86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d107      	bne.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40023800 	.word	0x40023800

08005fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0d0      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc8:	4b6a      	ldr	r3, [pc, #424]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d910      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd6:	4b67      	ldr	r3, [pc, #412]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f023 020f 	bic.w	r2, r3, #15
 8005fde:	4965      	ldr	r1, [pc, #404]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b63      	ldr	r3, [pc, #396]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0b8      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006010:	4b59      	ldr	r3, [pc, #356]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a58      	ldr	r2, [pc, #352]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800601a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006028:	4b53      	ldr	r3, [pc, #332]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a52      	ldr	r2, [pc, #328]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800602e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006034:	4b50      	ldr	r3, [pc, #320]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	494d      	ldr	r1, [pc, #308]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d040      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	4b47      	ldr	r3, [pc, #284]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d115      	bne.n	8006092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d107      	bne.n	8006082 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006072:	4b41      	ldr	r3, [pc, #260]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e073      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006082:	4b3d      	ldr	r3, [pc, #244]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e06b      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006092:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f023 0203 	bic.w	r2, r3, #3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4936      	ldr	r1, [pc, #216]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a4:	f7fd fe40 	bl	8003d28 <HAL_GetTick>
 80060a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060aa:	e00a      	b.n	80060c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ac:	f7fd fe3c 	bl	8003d28 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e053      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c2:	4b2d      	ldr	r3, [pc, #180]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 020c 	and.w	r2, r3, #12
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d1eb      	bne.n	80060ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d210      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 020f 	bic.w	r2, r3, #15
 80060ea:	4922      	ldr	r1, [pc, #136]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e032      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006110:	4b19      	ldr	r3, [pc, #100]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4916      	ldr	r1, [pc, #88]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	490e      	ldr	r1, [pc, #56]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006142:	f000 f821 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	490a      	ldr	r1, [pc, #40]	; (800617c <HAL_RCC_ClockConfig+0x1cc>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	4a09      	ldr	r2, [pc, #36]	; (8006180 <HAL_RCC_ClockConfig+0x1d0>)
 800615c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <HAL_RCC_ClockConfig+0x1d4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fd fc38 	bl	80039d8 <HAL_InitTick>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023c00 	.word	0x40023c00
 8006178:	40023800 	.word	0x40023800
 800617c:	0802810c 	.word	0x0802810c
 8006180:	2000001c 	.word	0x2000001c
 8006184:	20000020 	.word	0x20000020

08006188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	b5b0      	push	{r4, r5, r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800618e:	2100      	movs	r1, #0
 8006190:	6079      	str	r1, [r7, #4]
 8006192:	2100      	movs	r1, #0
 8006194:	60f9      	str	r1, [r7, #12]
 8006196:	2100      	movs	r1, #0
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800619a:	2100      	movs	r1, #0
 800619c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800619e:	4952      	ldr	r1, [pc, #328]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80061a0:	6889      	ldr	r1, [r1, #8]
 80061a2:	f001 010c 	and.w	r1, r1, #12
 80061a6:	2908      	cmp	r1, #8
 80061a8:	d00d      	beq.n	80061c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80061aa:	2908      	cmp	r1, #8
 80061ac:	f200 8094 	bhi.w	80062d8 <HAL_RCC_GetSysClockFreq+0x150>
 80061b0:	2900      	cmp	r1, #0
 80061b2:	d002      	beq.n	80061ba <HAL_RCC_GetSysClockFreq+0x32>
 80061b4:	2904      	cmp	r1, #4
 80061b6:	d003      	beq.n	80061c0 <HAL_RCC_GetSysClockFreq+0x38>
 80061b8:	e08e      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061ba:	4b4c      	ldr	r3, [pc, #304]	; (80062ec <HAL_RCC_GetSysClockFreq+0x164>)
 80061bc:	60bb      	str	r3, [r7, #8]
      break;
 80061be:	e08e      	b.n	80062de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061c0:	4b4b      	ldr	r3, [pc, #300]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80061c2:	60bb      	str	r3, [r7, #8]
      break;
 80061c4:	e08b      	b.n	80062de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c6:	4948      	ldr	r1, [pc, #288]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80061c8:	6849      	ldr	r1, [r1, #4]
 80061ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80061ce:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80061d0:	4945      	ldr	r1, [pc, #276]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80061d2:	6849      	ldr	r1, [r1, #4]
 80061d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80061d8:	2900      	cmp	r1, #0
 80061da:	d024      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061dc:	4942      	ldr	r1, [pc, #264]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80061de:	6849      	ldr	r1, [r1, #4]
 80061e0:	0989      	lsrs	r1, r1, #6
 80061e2:	4608      	mov	r0, r1
 80061e4:	f04f 0100 	mov.w	r1, #0
 80061e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80061ec:	f04f 0500 	mov.w	r5, #0
 80061f0:	ea00 0204 	and.w	r2, r0, r4
 80061f4:	ea01 0305 	and.w	r3, r1, r5
 80061f8:	493d      	ldr	r1, [pc, #244]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80061fa:	fb01 f003 	mul.w	r0, r1, r3
 80061fe:	2100      	movs	r1, #0
 8006200:	fb01 f102 	mul.w	r1, r1, r2
 8006204:	1844      	adds	r4, r0, r1
 8006206:	493a      	ldr	r1, [pc, #232]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8006208:	fba2 0101 	umull	r0, r1, r2, r1
 800620c:	1863      	adds	r3, r4, r1
 800620e:	4619      	mov	r1, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	f7fa fd46 	bl	8000ca8 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4613      	mov	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e04a      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006226:	4b30      	ldr	r3, [pc, #192]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	099b      	lsrs	r3, r3, #6
 800622c:	461a      	mov	r2, r3
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006236:	f04f 0100 	mov.w	r1, #0
 800623a:	ea02 0400 	and.w	r4, r2, r0
 800623e:	ea03 0501 	and.w	r5, r3, r1
 8006242:	4620      	mov	r0, r4
 8006244:	4629      	mov	r1, r5
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	014b      	lsls	r3, r1, #5
 8006250:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006254:	0142      	lsls	r2, r0, #5
 8006256:	4610      	mov	r0, r2
 8006258:	4619      	mov	r1, r3
 800625a:	1b00      	subs	r0, r0, r4
 800625c:	eb61 0105 	sbc.w	r1, r1, r5
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	018b      	lsls	r3, r1, #6
 800626a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800626e:	0182      	lsls	r2, r0, #6
 8006270:	1a12      	subs	r2, r2, r0
 8006272:	eb63 0301 	sbc.w	r3, r3, r1
 8006276:	f04f 0000 	mov.w	r0, #0
 800627a:	f04f 0100 	mov.w	r1, #0
 800627e:	00d9      	lsls	r1, r3, #3
 8006280:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006284:	00d0      	lsls	r0, r2, #3
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	1912      	adds	r2, r2, r4
 800628c:	eb45 0303 	adc.w	r3, r5, r3
 8006290:	f04f 0000 	mov.w	r0, #0
 8006294:	f04f 0100 	mov.w	r1, #0
 8006298:	0299      	lsls	r1, r3, #10
 800629a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800629e:	0290      	lsls	r0, r2, #10
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4610      	mov	r0, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	f7fa fcfa 	bl	8000ca8 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4613      	mov	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	3301      	adds	r3, #1
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	60bb      	str	r3, [r7, #8]
      break;
 80062d6:	e002      	b.n	80062de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <HAL_RCC_GetSysClockFreq+0x164>)
 80062da:	60bb      	str	r3, [r7, #8]
      break;
 80062dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062de:	68bb      	ldr	r3, [r7, #8]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bdb0      	pop	{r4, r5, r7, pc}
 80062e8:	40023800 	.word	0x40023800
 80062ec:	00f42400 	.word	0x00f42400
 80062f0:	017d7840 	.word	0x017d7840

080062f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f8:	4b03      	ldr	r3, [pc, #12]	; (8006308 <HAL_RCC_GetHCLKFreq+0x14>)
 80062fa:	681b      	ldr	r3, [r3, #0]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	2000001c 	.word	0x2000001c

0800630c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006310:	f7ff fff0 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8006314:	4602      	mov	r2, r0
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	0a9b      	lsrs	r3, r3, #10
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	4903      	ldr	r1, [pc, #12]	; (8006330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006322:	5ccb      	ldrb	r3, [r1, r3]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40023800 	.word	0x40023800
 8006330:	0802811c 	.word	0x0802811c

08006334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006338:	f7ff ffdc 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	0b5b      	lsrs	r3, r3, #13
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4903      	ldr	r1, [pc, #12]	; (8006358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40023800 	.word	0x40023800
 8006358:	0802811c 	.word	0x0802811c

0800635c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	220f      	movs	r2, #15
 800636a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800636c:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <HAL_RCC_GetClockConfig+0x5c>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0203 	and.w	r2, r3, #3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <HAL_RCC_GetClockConfig+0x5c>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006390:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	08db      	lsrs	r3, r3, #3
 8006396:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800639e:	4b07      	ldr	r3, [pc, #28]	; (80063bc <HAL_RCC_GetClockConfig+0x60>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 020f 	and.w	r2, r3, #15
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	601a      	str	r2, [r3, #0]
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40023800 	.word	0x40023800
 80063bc:	40023c00 	.word	0x40023c00

080063c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d012      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063e8:	4b69      	ldr	r3, [pc, #420]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	4a68      	ldr	r2, [pc, #416]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063f2:	6093      	str	r3, [r2, #8]
 80063f4:	4b66      	ldr	r3, [pc, #408]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fc:	4964      	ldr	r1, [pc, #400]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800640a:	2301      	movs	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d017      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800641a:	4b5d      	ldr	r3, [pc, #372]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800641c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	4959      	ldr	r1, [pc, #356]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006438:	d101      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800643a:	2301      	movs	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d017      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006456:	4b4e      	ldr	r3, [pc, #312]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800645c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	494a      	ldr	r1, [pc, #296]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006474:	d101      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006482:	2301      	movs	r3, #1
 8006484:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006492:	2301      	movs	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 808b 	beq.w	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064a4:	4b3a      	ldr	r3, [pc, #232]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	4a39      	ldr	r2, [pc, #228]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ae:	6413      	str	r3, [r2, #64]	; 0x40
 80064b0:	4b37      	ldr	r3, [pc, #220]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064bc:	4b35      	ldr	r3, [pc, #212]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a34      	ldr	r2, [pc, #208]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c8:	f7fd fc2e 	bl	8003d28 <HAL_GetTick>
 80064cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064ce:	e008      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d0:	f7fd fc2a 	bl	8003d28 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b64      	cmp	r3, #100	; 0x64
 80064dc:	d901      	bls.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e357      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064e2:	4b2c      	ldr	r3, [pc, #176]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0f0      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ee:	4b28      	ldr	r3, [pc, #160]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d035      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	429a      	cmp	r2, r3
 800650a:	d02e      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800650c:	4b20      	ldr	r3, [pc, #128]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006514:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006516:	4b1e      	ldr	r3, [pc, #120]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	4a1d      	ldr	r2, [pc, #116]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006520:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006522:	4b1b      	ldr	r3, [pc, #108]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	4a1a      	ldr	r2, [pc, #104]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800652e:	4a18      	ldr	r2, [pc, #96]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006534:	4b16      	ldr	r3, [pc, #88]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b01      	cmp	r3, #1
 800653e:	d114      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fd fbf2 	bl	8003d28 <HAL_GetTick>
 8006544:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006546:	e00a      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006548:	f7fd fbee 	bl	8003d28 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f241 3288 	movw	r2, #5000	; 0x1388
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e319      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655e:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0ee      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006576:	d111      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006586:	400b      	ands	r3, r1
 8006588:	4901      	ldr	r1, [pc, #4]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800658a:	4313      	orrs	r3, r2
 800658c:	608b      	str	r3, [r1, #8]
 800658e:	e00b      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006590:	40023800 	.word	0x40023800
 8006594:	40007000 	.word	0x40007000
 8006598:	0ffffcff 	.word	0x0ffffcff
 800659c:	4bb1      	ldr	r3, [pc, #708]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4ab0      	ldr	r2, [pc, #704]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80065a6:	6093      	str	r3, [r2, #8]
 80065a8:	4bae      	ldr	r3, [pc, #696]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065b4:	49ab      	ldr	r1, [pc, #684]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d010      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065c6:	4ba7      	ldr	r3, [pc, #668]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065cc:	4aa5      	ldr	r2, [pc, #660]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065d6:	4ba3      	ldr	r3, [pc, #652]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	49a0      	ldr	r1, [pc, #640]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065f4:	4b9b      	ldr	r3, [pc, #620]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006602:	4998      	ldr	r1, [pc, #608]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006616:	4b93      	ldr	r3, [pc, #588]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006624:	498f      	ldr	r1, [pc, #572]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00a      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006638:	4b8a      	ldr	r3, [pc, #552]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006646:	4987      	ldr	r1, [pc, #540]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800665a:	4b82      	ldr	r3, [pc, #520]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006660:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	497e      	ldr	r1, [pc, #504]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800667c:	4b79      	ldr	r3, [pc, #484]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006682:	f023 0203 	bic.w	r2, r3, #3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	4976      	ldr	r1, [pc, #472]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800669e:	4b71      	ldr	r3, [pc, #452]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	f023 020c 	bic.w	r2, r3, #12
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ac:	496d      	ldr	r1, [pc, #436]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066c0:	4b68      	ldr	r3, [pc, #416]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ce:	4965      	ldr	r1, [pc, #404]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066e2:	4b60      	ldr	r3, [pc, #384]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f0:	495c      	ldr	r1, [pc, #368]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006704:	4b57      	ldr	r3, [pc, #348]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	4954      	ldr	r1, [pc, #336]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006726:	4b4f      	ldr	r3, [pc, #316]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006734:	494b      	ldr	r1, [pc, #300]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006748:	4b46      	ldr	r3, [pc, #280]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006756:	4943      	ldr	r1, [pc, #268]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800676a:	4b3e      	ldr	r3, [pc, #248]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006770:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006778:	493a      	ldr	r1, [pc, #232]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800678c:	4b35      	ldr	r3, [pc, #212]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800679a:	4932      	ldr	r1, [pc, #200]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d011      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067ae:	4b2d      	ldr	r3, [pc, #180]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067bc:	4929      	ldr	r1, [pc, #164]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067cc:	d101      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80067ce:	2301      	movs	r3, #1
 80067d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067de:	2301      	movs	r3, #1
 80067e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067ee:	4b1d      	ldr	r3, [pc, #116]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fc:	4919      	ldr	r1, [pc, #100]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006810:	4b14      	ldr	r3, [pc, #80]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006816:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006820:	4910      	ldr	r1, [pc, #64]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d006      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80d9 	beq.w	80069ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800683c:	4b09      	ldr	r3, [pc, #36]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a08      	ldr	r2, [pc, #32]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006842:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006848:	f7fd fa6e 	bl	8003d28 <HAL_GetTick>
 800684c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800684e:	e00b      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006850:	f7fd fa6a 	bl	8003d28 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b64      	cmp	r3, #100	; 0x64
 800685c:	d904      	bls.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e197      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006862:	bf00      	nop
 8006864:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006868:	4b6c      	ldr	r3, [pc, #432]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1ed      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d021      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	2b00      	cmp	r3, #0
 8006886:	d11d      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006888:	4b64      	ldr	r3, [pc, #400]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800688a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006896:	4b61      	ldr	r3, [pc, #388]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800689c:	0e1b      	lsrs	r3, r3, #24
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	019a      	lsls	r2, r3, #6
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	041b      	lsls	r3, r3, #16
 80068ae:	431a      	orrs	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	061b      	lsls	r3, r3, #24
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	071b      	lsls	r3, r3, #28
 80068bc:	4957      	ldr	r1, [pc, #348]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d8:	d00a      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d02e      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ee:	d129      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068f0:	4b4a      	ldr	r3, [pc, #296]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068fe:	4b47      	ldr	r3, [pc, #284]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006904:	0f1b      	lsrs	r3, r3, #28
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	019a      	lsls	r2, r3, #6
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	041b      	lsls	r3, r3, #16
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	061b      	lsls	r3, r3, #24
 800691e:	431a      	orrs	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	071b      	lsls	r3, r3, #28
 8006924:	493d      	ldr	r1, [pc, #244]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800692c:	4b3b      	ldr	r3, [pc, #236]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800692e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006932:	f023 021f 	bic.w	r2, r3, #31
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	3b01      	subs	r3, #1
 800693c:	4937      	ldr	r1, [pc, #220]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01d      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006950:	4b32      	ldr	r3, [pc, #200]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006956:	0e1b      	lsrs	r3, r3, #24
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800695e:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006964:	0f1b      	lsrs	r3, r3, #28
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	019a      	lsls	r2, r3, #6
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	431a      	orrs	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	431a      	orrs	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	071b      	lsls	r3, r3, #28
 8006984:	4925      	ldr	r1, [pc, #148]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d011      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	019a      	lsls	r2, r3, #6
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	041b      	lsls	r3, r3, #16
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	061b      	lsls	r3, r3, #24
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	071b      	lsls	r3, r3, #28
 80069b4:	4919      	ldr	r1, [pc, #100]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069bc:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a16      	ldr	r2, [pc, #88]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c8:	f7fd f9ae 	bl	8003d28 <HAL_GetTick>
 80069cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069d0:	f7fd f9aa 	bl	8003d28 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b64      	cmp	r3, #100	; 0x64
 80069dc:	d901      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e0d7      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069e2:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f040 80cd 	bne.w	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a08      	ldr	r2, [pc, #32]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a02:	f7fd f991 	bl	8003d28 <HAL_GetTick>
 8006a06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a08:	e00a      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a0a:	f7fd f98d 	bl	8003d28 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b64      	cmp	r3, #100	; 0x64
 8006a16:	d903      	bls.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e0ba      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006a1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a20:	4b5e      	ldr	r3, [pc, #376]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2c:	d0ed      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d02e      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d12a      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a56:	4b51      	ldr	r3, [pc, #324]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5c:	0c1b      	lsrs	r3, r3, #16
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a64:	4b4d      	ldr	r3, [pc, #308]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6a:	0f1b      	lsrs	r3, r3, #28
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	019a      	lsls	r2, r3, #6
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	061b      	lsls	r3, r3, #24
 8006a84:	431a      	orrs	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	071b      	lsls	r3, r3, #28
 8006a8a:	4944      	ldr	r1, [pc, #272]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a92:	4b42      	ldr	r3, [pc, #264]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	493d      	ldr	r1, [pc, #244]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d022      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ac0:	d11d      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ac2:	4b36      	ldr	r3, [pc, #216]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac8:	0e1b      	lsrs	r3, r3, #24
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ad0:	4b32      	ldr	r3, [pc, #200]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad6:	0f1b      	lsrs	r3, r3, #28
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	019a      	lsls	r2, r3, #6
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	041b      	lsls	r3, r3, #16
 8006aea:	431a      	orrs	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	061b      	lsls	r3, r3, #24
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	071b      	lsls	r3, r3, #28
 8006af6:	4929      	ldr	r1, [pc, #164]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d028      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b0a:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b10:	0e1b      	lsrs	r3, r3, #24
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b18:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1e:	0c1b      	lsrs	r3, r3, #16
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	019a      	lsls	r2, r3, #6
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	431a      	orrs	r2, r3
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	071b      	lsls	r3, r3, #28
 8006b3e:	4917      	ldr	r1, [pc, #92]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	4911      	ldr	r1, [pc, #68]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0e      	ldr	r2, [pc, #56]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b68:	f7fd f8de 	bl	8003d28 <HAL_GetTick>
 8006b6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b70:	f7fd f8da 	bl	8003d28 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b64      	cmp	r3, #100	; 0x64
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e007      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b82:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b8e:	d1ef      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800

08006ba0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e081      	b.n	8006cb6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7f5b      	ldrb	r3, [r3, #29]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d105      	bne.n	8006bc8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fc fe7c 	bl	80038c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	22ca      	movs	r2, #202	; 0xca
 8006bd4:	625a      	str	r2, [r3, #36]	; 0x24
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2253      	movs	r2, #83	; 0x53
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 faac 	bl	800713c <RTC_EnterInitMode>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	22ff      	movs	r2, #255	; 0xff
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e05c      	b.n	8006cb6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6899      	ldr	r1, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <HAL_RTC_Init+0x120>)
 8006c08:	400b      	ands	r3, r1
 8006c0a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68d2      	ldr	r2, [r2, #12]
 8006c32:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6919      	ldr	r1, [r3, #16]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	041a      	lsls	r2, r3, #16
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c56:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10e      	bne.n	8006c84 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa40 	bl	80070ec <HAL_RTC_WaitForSynchro>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	22ff      	movs	r2, #255	; 0xff
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e018      	b.n	8006cb6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0208 	bic.w	r2, r2, #8
 8006c92:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	22ff      	movs	r2, #255	; 0xff
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
  }
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	ff8fffbf 	.word	0xff8fffbf

08006cc4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006cc4:	b590      	push	{r4, r7, lr}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	7f1b      	ldrb	r3, [r3, #28]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_RTC_SetTime+0x1c>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e0a8      	b.n	8006e32 <HAL_RTC_SetTime+0x16e>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d126      	bne.n	8006d40 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fa42 	bl	8007194 <RTC_ByteToBcd2>
 8006d10:	4603      	mov	r3, r0
 8006d12:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fa3b 	bl	8007194 <RTC_ByteToBcd2>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006d22:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	789b      	ldrb	r3, [r3, #2]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fa33 	bl	8007194 <RTC_ByteToBcd2>
 8006d2e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006d30:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	7b1b      	ldrb	r3, [r3, #12]
 8006d38:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e018      	b.n	8006d72 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2200      	movs	r2, #0
 8006d52:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006d60:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006d66:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	7b1b      	ldrb	r3, [r3, #12]
 8006d6c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	22ca      	movs	r2, #202	; 0xca
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2253      	movs	r2, #83	; 0x53
 8006d80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 f9da 	bl	800713c <RTC_EnterInitMode>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	22ff      	movs	r2, #255	; 0xff
 8006d94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2204      	movs	r2, #4
 8006d9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e045      	b.n	8006e32 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	6979      	ldr	r1, [r7, #20]
 8006dac:	4b23      	ldr	r3, [pc, #140]	; (8006e3c <HAL_RTC_SetTime+0x178>)
 8006dae:	400b      	ands	r3, r1
 8006db0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dc0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6899      	ldr	r1, [r3, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006de8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d111      	bne.n	8006e1c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f977 	bl	80070ec <HAL_RTC_WaitForSynchro>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	22ff      	movs	r2, #255	; 0xff
 8006e0a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e00a      	b.n	8006e32 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	22ff      	movs	r2, #255	; 0xff
 8006e22:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006e30:	2300      	movs	r3, #0
  }
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd90      	pop	{r4, r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	007f7f7f 	.word	0x007f7f7f

08006e40 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4b22      	ldr	r3, [pc, #136]	; (8006ef8 <HAL_RTC_GetTime+0xb8>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	0c1b      	lsrs	r3, r3, #16
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d11a      	bne.n	8006eee <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f987 	bl	80071d0 <RTC_Bcd2ToByte>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f97e 	bl	80071d0 <RTC_Bcd2ToByte>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	789b      	ldrb	r3, [r3, #2]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f975 	bl	80071d0 <RTC_Bcd2ToByte>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	007f7f7f 	.word	0x007f7f7f

08006efc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	7f1b      	ldrb	r3, [r3, #28]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_RTC_SetDate+0x1c>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e092      	b.n	800703e <HAL_RTC_SetDate+0x142>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2202      	movs	r2, #2
 8006f22:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10e      	bne.n	8006f48 <HAL_RTC_SetDate+0x4c>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	f023 0310 	bic.w	r3, r3, #16
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	330a      	adds	r3, #10
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d11c      	bne.n	8006f88 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	78db      	ldrb	r3, [r3, #3]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f91e 	bl	8007194 <RTC_ByteToBcd2>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f917 	bl	8007194 <RTC_ByteToBcd2>
 8006f66:	4603      	mov	r3, r0
 8006f68:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006f6a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	789b      	ldrb	r3, [r3, #2]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 f90f 	bl	8007194 <RTC_ByteToBcd2>
 8006f76:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006f78:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	e00e      	b.n	8006fa6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	78db      	ldrb	r3, [r3, #3]
 8006f8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006f94:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006f9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	22ca      	movs	r2, #202	; 0xca
 8006fac:	625a      	str	r2, [r3, #36]	; 0x24
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2253      	movs	r2, #83	; 0x53
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f8c0 	bl	800713c <RTC_EnterInitMode>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	22ff      	movs	r2, #255	; 0xff
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e031      	b.n	800703e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	6979      	ldr	r1, [r7, #20]
 8006fe0:	4b19      	ldr	r3, [pc, #100]	; (8007048 <HAL_RTC_SetDate+0x14c>)
 8006fe2:	400b      	ands	r3, r1
 8006fe4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	d111      	bne.n	8007028 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f871 	bl	80070ec <HAL_RTC_WaitForSynchro>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2204      	movs	r2, #4
 800701c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e00a      	b.n	800703e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	22ff      	movs	r2, #255	; 0xff
 800702e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2201      	movs	r2, #1
 8007034:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800703c:	2300      	movs	r3, #0
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd90      	pop	{r4, r7, pc}
 8007046:	bf00      	nop
 8007048:	00ffff3f 	.word	0x00ffff3f

0800704c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	4b21      	ldr	r3, [pc, #132]	; (80070e8 <HAL_RTC_GetDate+0x9c>)
 8007064:	4013      	ands	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	b2da      	uxtb	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	b2da      	uxtb	r2, r3
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	0b5b      	lsrs	r3, r3, #13
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	b2da      	uxtb	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d11a      	bne.n	80070dc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	78db      	ldrb	r3, [r3, #3]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f890 	bl	80071d0 <RTC_Bcd2ToByte>
 80070b0:	4603      	mov	r3, r0
 80070b2:	461a      	mov	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f887 	bl	80071d0 <RTC_Bcd2ToByte>
 80070c2:	4603      	mov	r3, r0
 80070c4:	461a      	mov	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	789b      	ldrb	r3, [r3, #2]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 f87e 	bl	80071d0 <RTC_Bcd2ToByte>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	00ffff3f 	.word	0x00ffff3f

080070ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007106:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007108:	f7fc fe0e 	bl	8003d28 <HAL_GetTick>
 800710c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800710e:	e009      	b.n	8007124 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007110:	f7fc fe0a 	bl	8003d28 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800711e:	d901      	bls.n	8007124 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e007      	b.n	8007134 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0ee      	beq.n	8007110 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	d119      	bne.n	800718a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f04f 32ff 	mov.w	r2, #4294967295
 800715e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007160:	f7fc fde2 	bl	8003d28 <HAL_GetTick>
 8007164:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007166:	e009      	b.n	800717c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007168:	f7fc fdde 	bl	8003d28 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007176:	d901      	bls.n	800717c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e007      	b.n	800718c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0ee      	beq.n	8007168 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80071a2:	e005      	b.n	80071b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	3b0a      	subs	r3, #10
 80071ae:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2b09      	cmp	r3, #9
 80071b4:	d8f6      	bhi.n	80071a4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b2db      	uxtb	r3, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	091b      	lsrs	r3, r3, #4
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	b2db      	uxtb	r3, r3
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e049      	b.n	80072b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fc fb5e 	bl	80038f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	4619      	mov	r1, r3
 800724a:	4610      	mov	r0, r2
 800724c:	f000 fac0 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d001      	beq.n	80072d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e054      	b.n	800737e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a26      	ldr	r2, [pc, #152]	; (800738c <HAL_TIM_Base_Start_IT+0xd0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d022      	beq.n	800733c <HAL_TIM_Base_Start_IT+0x80>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fe:	d01d      	beq.n	800733c <HAL_TIM_Base_Start_IT+0x80>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a22      	ldr	r2, [pc, #136]	; (8007390 <HAL_TIM_Base_Start_IT+0xd4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d018      	beq.n	800733c <HAL_TIM_Base_Start_IT+0x80>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a21      	ldr	r2, [pc, #132]	; (8007394 <HAL_TIM_Base_Start_IT+0xd8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <HAL_TIM_Base_Start_IT+0x80>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1f      	ldr	r2, [pc, #124]	; (8007398 <HAL_TIM_Base_Start_IT+0xdc>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_TIM_Base_Start_IT+0x80>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1e      	ldr	r2, [pc, #120]	; (800739c <HAL_TIM_Base_Start_IT+0xe0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_TIM_Base_Start_IT+0x80>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_TIM_Base_Start_IT+0x80>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1b      	ldr	r2, [pc, #108]	; (80073a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d115      	bne.n	8007368 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <HAL_TIM_Base_Start_IT+0xec>)
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b06      	cmp	r3, #6
 800734c:	d015      	beq.n	800737a <HAL_TIM_Base_Start_IT+0xbe>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007354:	d011      	beq.n	800737a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f042 0201 	orr.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007366:	e008      	b.n	800737a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0201 	orr.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e000      	b.n	800737c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40010000 	.word	0x40010000
 8007390:	40000400 	.word	0x40000400
 8007394:	40000800 	.word	0x40000800
 8007398:	40000c00 	.word	0x40000c00
 800739c:	40010400 	.word	0x40010400
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40001800 	.word	0x40001800
 80073a8:	00010007 	.word	0x00010007

080073ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d122      	bne.n	8007408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d11b      	bne.n	8007408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f06f 0202 	mvn.w	r2, #2
 80073d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f9d0 	bl	8007794 <HAL_TIM_IC_CaptureCallback>
 80073f4:	e005      	b.n	8007402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f9c2 	bl	8007780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f9d3 	bl	80077a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b04      	cmp	r3, #4
 8007414:	d122      	bne.n	800745c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b04      	cmp	r3, #4
 8007422:	d11b      	bne.n	800745c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0204 	mvn.w	r2, #4
 800742c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f9a6 	bl	8007794 <HAL_TIM_IC_CaptureCallback>
 8007448:	e005      	b.n	8007456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f998 	bl	8007780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f9a9 	bl	80077a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b08      	cmp	r3, #8
 8007468:	d122      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b08      	cmp	r3, #8
 8007476:	d11b      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0208 	mvn.w	r2, #8
 8007480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2204      	movs	r2, #4
 8007486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f97c 	bl	8007794 <HAL_TIM_IC_CaptureCallback>
 800749c:	e005      	b.n	80074aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f96e 	bl	8007780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f97f 	bl	80077a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b10      	cmp	r3, #16
 80074bc:	d122      	bne.n	8007504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d11b      	bne.n	8007504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 0210 	mvn.w	r2, #16
 80074d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2208      	movs	r2, #8
 80074da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f952 	bl	8007794 <HAL_TIM_IC_CaptureCallback>
 80074f0:	e005      	b.n	80074fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f944 	bl	8007780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f955 	bl	80077a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b01      	cmp	r3, #1
 8007510:	d10e      	bne.n	8007530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b01      	cmp	r3, #1
 800751e:	d107      	bne.n	8007530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f06f 0201 	mvn.w	r2, #1
 8007528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fb f83c 	bl	80025a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	d10e      	bne.n	800755c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007548:	2b80      	cmp	r3, #128	; 0x80
 800754a:	d107      	bne.n	800755c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb0c 	bl	8007b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756a:	d10e      	bne.n	800758a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007576:	2b80      	cmp	r3, #128	; 0x80
 8007578:	d107      	bne.n	800758a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 faff 	bl	8007b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	d10e      	bne.n	80075b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d107      	bne.n	80075b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f903 	bl	80077bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d10e      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d107      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f06f 0220 	mvn.w	r2, #32
 80075da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fabf 	bl	8007b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIM_ConfigClockSource+0x1c>
 8007604:	2302      	movs	r3, #2
 8007606:	e0b4      	b.n	8007772 <HAL_TIM_ConfigClockSource+0x186>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	4b56      	ldr	r3, [pc, #344]	; (800777c <HAL_TIM_ConfigClockSource+0x190>)
 8007624:	4013      	ands	r3, r2
 8007626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d03e      	beq.n	80076c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007646:	f200 8087 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	f000 8086 	beq.w	800775e <HAL_TIM_ConfigClockSource+0x172>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	d87f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007658:	2b70      	cmp	r3, #112	; 0x70
 800765a:	d01a      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0xa6>
 800765c:	2b70      	cmp	r3, #112	; 0x70
 800765e:	d87b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007660:	2b60      	cmp	r3, #96	; 0x60
 8007662:	d050      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x11a>
 8007664:	2b60      	cmp	r3, #96	; 0x60
 8007666:	d877      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007668:	2b50      	cmp	r3, #80	; 0x50
 800766a:	d03c      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0xfa>
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d873      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d058      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x13a>
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d86f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b30      	cmp	r3, #48	; 0x30
 800767a:	d064      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d86b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d060      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d867      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05c      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d05a      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 8007690:	e062      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6899      	ldr	r1, [r3, #8]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f000 f9af 	bl	8007a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	609a      	str	r2, [r3, #8]
      break;
 80076be:	e04f      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f000 f998 	bl	8007a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e2:	609a      	str	r2, [r3, #8]
      break;
 80076e4:	e03c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 f90c 	bl	8007910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2150      	movs	r1, #80	; 0x50
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f965 	bl	80079ce <TIM_ITRx_SetConfig>
      break;
 8007704:	e02c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 f92b 	bl	800796e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2160      	movs	r1, #96	; 0x60
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f955 	bl	80079ce <TIM_ITRx_SetConfig>
      break;
 8007724:	e01c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	f000 f8ec 	bl	8007910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2140      	movs	r1, #64	; 0x40
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f945 	bl	80079ce <TIM_ITRx_SetConfig>
      break;
 8007744:	e00c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 f93c 	bl	80079ce <TIM_ITRx_SetConfig>
      break;
 8007756:	e003      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e000      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800775e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	fffeff88 	.word	0xfffeff88

08007780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a40      	ldr	r2, [pc, #256]	; (80078e4 <TIM_Base_SetConfig+0x114>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d013      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ee:	d00f      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a3d      	ldr	r2, [pc, #244]	; (80078e8 <TIM_Base_SetConfig+0x118>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00b      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a3c      	ldr	r2, [pc, #240]	; (80078ec <TIM_Base_SetConfig+0x11c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d007      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a3b      	ldr	r2, [pc, #236]	; (80078f0 <TIM_Base_SetConfig+0x120>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a3a      	ldr	r2, [pc, #232]	; (80078f4 <TIM_Base_SetConfig+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d108      	bne.n	8007822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2f      	ldr	r2, [pc, #188]	; (80078e4 <TIM_Base_SetConfig+0x114>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d02b      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007830:	d027      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a2c      	ldr	r2, [pc, #176]	; (80078e8 <TIM_Base_SetConfig+0x118>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d023      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a2b      	ldr	r2, [pc, #172]	; (80078ec <TIM_Base_SetConfig+0x11c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01f      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2a      	ldr	r2, [pc, #168]	; (80078f0 <TIM_Base_SetConfig+0x120>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d01b      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a29      	ldr	r2, [pc, #164]	; (80078f4 <TIM_Base_SetConfig+0x124>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d017      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a28      	ldr	r2, [pc, #160]	; (80078f8 <TIM_Base_SetConfig+0x128>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d013      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a27      	ldr	r2, [pc, #156]	; (80078fc <TIM_Base_SetConfig+0x12c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00f      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a26      	ldr	r2, [pc, #152]	; (8007900 <TIM_Base_SetConfig+0x130>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00b      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a25      	ldr	r2, [pc, #148]	; (8007904 <TIM_Base_SetConfig+0x134>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d007      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a24      	ldr	r2, [pc, #144]	; (8007908 <TIM_Base_SetConfig+0x138>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_Base_SetConfig+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a23      	ldr	r2, [pc, #140]	; (800790c <TIM_Base_SetConfig+0x13c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d108      	bne.n	8007894 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a0a      	ldr	r2, [pc, #40]	; (80078e4 <TIM_Base_SetConfig+0x114>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_Base_SetConfig+0xf8>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a0c      	ldr	r2, [pc, #48]	; (80078f4 <TIM_Base_SetConfig+0x124>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d103      	bne.n	80078d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	615a      	str	r2, [r3, #20]
}
 80078d6:	bf00      	nop
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40000400 	.word	0x40000400
 80078ec:	40000800 	.word	0x40000800
 80078f0:	40000c00 	.word	0x40000c00
 80078f4:	40010400 	.word	0x40010400
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40014400 	.word	0x40014400
 8007900:	40014800 	.word	0x40014800
 8007904:	40001800 	.word	0x40001800
 8007908:	40001c00 	.word	0x40001c00
 800790c:	40002000 	.word	0x40002000

08007910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	f023 0201 	bic.w	r2, r3, #1
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800793a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f023 030a 	bic.w	r3, r3, #10
 800794c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800796e:	b480      	push	{r7}
 8007970:	b087      	sub	sp, #28
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f023 0210 	bic.w	r2, r3, #16
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	031b      	lsls	r3, r3, #12
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	621a      	str	r2, [r3, #32]
}
 80079c2:	bf00      	nop
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	f043 0307 	orr.w	r3, r3, #7
 80079f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	609a      	str	r2, [r3, #8]
}
 80079f8:	bf00      	nop
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	021a      	lsls	r2, r3, #8
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	609a      	str	r2, [r3, #8]
}
 8007a38:	bf00      	nop
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d101      	bne.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e06d      	b.n	8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a30      	ldr	r2, [pc, #192]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d004      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a2f      	ldr	r2, [pc, #188]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d108      	bne.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a20      	ldr	r2, [pc, #128]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d022      	beq.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ace:	d01d      	beq.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1d      	ldr	r2, [pc, #116]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d018      	beq.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d013      	beq.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00e      	beq.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a16      	ldr	r2, [pc, #88]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a15      	ldr	r2, [pc, #84]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d10c      	bne.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	40010000 	.word	0x40010000
 8007b48:	40010400 	.word	0x40010400
 8007b4c:	40000400 	.word	0x40000400
 8007b50:	40000800 	.word	0x40000800
 8007b54:	40000c00 	.word	0x40000c00
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40001800 	.word	0x40001800

08007b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e040      	b.n	8007c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7fb febe 	bl	8003940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2224      	movs	r2, #36	; 0x24
 8007bc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0201 	bic.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fbee 	bl	80083bc <UART_SetConfig>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e022      	b.n	8007c30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fe44 	bl	8008880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fecb 	bl	80089c4 <UART_CheckIdleState>
 8007c2e:	4603      	mov	r3, r0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	f040 8081 	bne.w	8007d54 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_UART_Transmit+0x26>
 8007c58:	88fb      	ldrh	r3, [r7, #6]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e079      	b.n	8007d56 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_UART_Transmit+0x38>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e072      	b.n	8007d56 <HAL_UART_Transmit+0x11e>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2221      	movs	r2, #33	; 0x21
 8007c84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c86:	f7fc f84f 	bl	8003d28 <HAL_GetTick>
 8007c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	88fa      	ldrh	r2, [r7, #6]
 8007c90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	88fa      	ldrh	r2, [r7, #6]
 8007c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca4:	d108      	bne.n	8007cb8 <HAL_UART_Transmit+0x80>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e003      	b.n	8007cc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007cc8:	e02c      	b.n	8007d24 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2180      	movs	r1, #128	; 0x80
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 fea8 	bl	8008a2a <UART_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e038      	b.n	8007d56 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	3302      	adds	r3, #2
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	e007      	b.n	8007d12 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	781a      	ldrb	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1cc      	bne.n	8007cca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2200      	movs	r2, #0
 8007d38:	2140      	movs	r1, #64	; 0x40
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 fe75 	bl	8008a2a <UART_WaitOnFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e005      	b.n	8007d56 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	e000      	b.n	8007d56 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007d54:	2302      	movs	r3, #2
  }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3720      	adds	r7, #32
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b08a      	sub	sp, #40	; 0x28
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d13d      	bne.n	8007df0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_UART_Receive_IT+0x22>
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e036      	b.n	8007df2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Receive_IT+0x34>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e02f      	b.n	8007df2 <HAL_UART_Receive_IT+0x94>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d018      	beq.n	8007de0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	613b      	str	r3, [r7, #16]
   return(result);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	623b      	str	r3, [r7, #32]
 8007dce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	69f9      	ldr	r1, [r7, #28]
 8007dd2:	6a3a      	ldr	r2, [r7, #32]
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e6      	bne.n	8007dae <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	461a      	mov	r2, r3
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 fee4 	bl	8008bb4 <UART_Start_Receive_IT>
 8007dec:	4603      	mov	r3, r0
 8007dee:	e000      	b.n	8007df2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3728      	adds	r7, #40	; 0x28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b0ba      	sub	sp, #232	; 0xe8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e26:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d115      	bne.n	8007e64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3c:	f003 0320 	and.w	r3, r3, #32
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00f      	beq.n	8007e64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 828f 	beq.w	8008378 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
      }
      return;
 8007e62:	e289      	b.n	8008378 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 8117 	beq.w	800809c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d106      	bne.n	8007e88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e7e:	4b85      	ldr	r3, [pc, #532]	; (8008094 <HAL_UART_IRQHandler+0x298>)
 8007e80:	4013      	ands	r3, r2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 810a 	beq.w	800809c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d011      	beq.n	8007eb8 <HAL_UART_IRQHandler+0xbc>
 8007e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eae:	f043 0201 	orr.w	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d011      	beq.n	8007ee8 <HAL_UART_IRQHandler+0xec>
 8007ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ede:	f043 0204 	orr.w	r2, r3, #4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d011      	beq.n	8007f18 <HAL_UART_IRQHandler+0x11c>
 8007ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2204      	movs	r2, #4
 8007f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f0e:	f043 0202 	orr.w	r2, r3, #2
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d017      	beq.n	8007f54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d105      	bne.n	8007f3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2208      	movs	r2, #8
 8007f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f4a:	f043 0208 	orr.w	r2, r3, #8
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d012      	beq.n	8007f86 <HAL_UART_IRQHandler+0x18a>
 8007f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00c      	beq.n	8007f86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7c:	f043 0220 	orr.w	r2, r3, #32
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 81f5 	beq.w	800837c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00d      	beq.n	8007fba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d005      	beq.n	8007fde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d04f      	beq.n	800807e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 feb2 	bl	8008d48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d141      	bne.n	8008076 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800800c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800801e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800802a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1d9      	bne.n	8007ff2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008042:	2b00      	cmp	r3, #0
 8008044:	d013      	beq.n	800806e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	4a13      	ldr	r2, [pc, #76]	; (8008098 <HAL_UART_IRQHandler+0x29c>)
 800804c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008052:	4618      	mov	r0, r3
 8008054:	f7fb ffea 	bl	800402c <HAL_DMA_Abort_IT>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d017      	beq.n	800808e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806c:	e00f      	b.n	800808e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f98e 	bl	8008390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008074:	e00b      	b.n	800808e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f98a 	bl	8008390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807c:	e007      	b.n	800808e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f986 	bl	8008390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800808c:	e176      	b.n	800837c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808e:	bf00      	nop
    return;
 8008090:	e174      	b.n	800837c <HAL_UART_IRQHandler+0x580>
 8008092:	bf00      	nop
 8008094:	04000120 	.word	0x04000120
 8008098:	08008e0f 	.word	0x08008e0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	f040 8144 	bne.w	800832e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 813d 	beq.w	800832e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8136 	beq.w	800832e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2210      	movs	r2, #16
 80080c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d4:	2b40      	cmp	r3, #64	; 0x40
 80080d6:	f040 80b2 	bne.w	800823e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 8148 	beq.w	8008380 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080fa:	429a      	cmp	r2, r3
 80080fc:	f080 8140 	bcs.w	8008380 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008114:	f000 8085 	beq.w	8008222 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800812c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008146:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800814e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800815a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1da      	bne.n	8008118 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008174:	f023 0301 	bic.w	r3, r3, #1
 8008178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3308      	adds	r3, #8
 8008182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008186:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800818a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800818e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e1      	bne.n	8008162 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e3      	bne.n	800819e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f2:	f023 0310 	bic.w	r3, r3, #16
 80081f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008204:	65bb      	str	r3, [r7, #88]	; 0x58
 8008206:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800820a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e4      	bne.n	80081e2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821c:	4618      	mov	r0, r3
 800821e:	f7fb fe95 	bl	8003f4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800822e:	b29b      	uxth	r3, r3
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	b29b      	uxth	r3, r3
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8b4 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800823c:	e0a0      	b.n	8008380 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800824a:	b29b      	uxth	r3, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 8092 	beq.w	8008384 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8008260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 808d 	beq.w	8008384 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800827e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800828c:	647b      	str	r3, [r7, #68]	; 0x44
 800828e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800829a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e4      	bne.n	800826a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	623b      	str	r3, [r7, #32]
   return(result);
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082c4:	633a      	str	r2, [r7, #48]	; 0x30
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e3      	bne.n	80082a0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2220      	movs	r2, #32
 80082dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0310 	bic.w	r3, r3, #16
 80082fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	69b9      	ldr	r1, [r7, #24]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	617b      	str	r3, [r7, #20]
   return(result);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e4      	bne.n	80082ea <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f83c 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800832c:	e02a      	b.n	8008384 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800832e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00e      	beq.n	8008358 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800833a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b00      	cmp	r3, #0
 8008344:	d008      	beq.n	8008358 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01c      	beq.n	8008388 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
    }
    return;
 8008356:	e017      	b.n	8008388 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d012      	beq.n	800838a <HAL_UART_IRQHandler+0x58e>
 8008364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fd62 	bl	8008e3a <UART_EndTransmit_IT>
    return;
 8008376:	e008      	b.n	800838a <HAL_UART_IRQHandler+0x58e>
      return;
 8008378:	bf00      	nop
 800837a:	e006      	b.n	800838a <HAL_UART_IRQHandler+0x58e>
    return;
 800837c:	bf00      	nop
 800837e:	e004      	b.n	800838a <HAL_UART_IRQHandler+0x58e>
      return;
 8008380:	bf00      	nop
 8008382:	e002      	b.n	800838a <HAL_UART_IRQHandler+0x58e>
      return;
 8008384:	bf00      	nop
 8008386:	e000      	b.n	800838a <HAL_UART_IRQHandler+0x58e>
    return;
 8008388:	bf00      	nop
  }

}
 800838a:	37e8      	adds	r7, #232	; 0xe8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b088      	sub	sp, #32
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	431a      	orrs	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4ba7      	ldr	r3, [pc, #668]	; (8008684 <UART_SetConfig+0x2c8>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	6979      	ldr	r1, [r7, #20]
 80083f0:	430b      	orrs	r3, r1
 80083f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	430a      	orrs	r2, r1
 800842c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a95      	ldr	r2, [pc, #596]	; (8008688 <UART_SetConfig+0x2cc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d120      	bne.n	800847a <UART_SetConfig+0xbe>
 8008438:	4b94      	ldr	r3, [pc, #592]	; (800868c <UART_SetConfig+0x2d0>)
 800843a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	2b03      	cmp	r3, #3
 8008444:	d816      	bhi.n	8008474 <UART_SetConfig+0xb8>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <UART_SetConfig+0x90>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	0800845d 	.word	0x0800845d
 8008450:	08008469 	.word	0x08008469
 8008454:	08008463 	.word	0x08008463
 8008458:	0800846f 	.word	0x0800846f
 800845c:	2301      	movs	r3, #1
 800845e:	77fb      	strb	r3, [r7, #31]
 8008460:	e14f      	b.n	8008702 <UART_SetConfig+0x346>
 8008462:	2302      	movs	r3, #2
 8008464:	77fb      	strb	r3, [r7, #31]
 8008466:	e14c      	b.n	8008702 <UART_SetConfig+0x346>
 8008468:	2304      	movs	r3, #4
 800846a:	77fb      	strb	r3, [r7, #31]
 800846c:	e149      	b.n	8008702 <UART_SetConfig+0x346>
 800846e:	2308      	movs	r3, #8
 8008470:	77fb      	strb	r3, [r7, #31]
 8008472:	e146      	b.n	8008702 <UART_SetConfig+0x346>
 8008474:	2310      	movs	r3, #16
 8008476:	77fb      	strb	r3, [r7, #31]
 8008478:	e143      	b.n	8008702 <UART_SetConfig+0x346>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a84      	ldr	r2, [pc, #528]	; (8008690 <UART_SetConfig+0x2d4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d132      	bne.n	80084ea <UART_SetConfig+0x12e>
 8008484:	4b81      	ldr	r3, [pc, #516]	; (800868c <UART_SetConfig+0x2d0>)
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848a:	f003 030c 	and.w	r3, r3, #12
 800848e:	2b0c      	cmp	r3, #12
 8008490:	d828      	bhi.n	80084e4 <UART_SetConfig+0x128>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <UART_SetConfig+0xdc>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084cd 	.word	0x080084cd
 800849c:	080084e5 	.word	0x080084e5
 80084a0:	080084e5 	.word	0x080084e5
 80084a4:	080084e5 	.word	0x080084e5
 80084a8:	080084d9 	.word	0x080084d9
 80084ac:	080084e5 	.word	0x080084e5
 80084b0:	080084e5 	.word	0x080084e5
 80084b4:	080084e5 	.word	0x080084e5
 80084b8:	080084d3 	.word	0x080084d3
 80084bc:	080084e5 	.word	0x080084e5
 80084c0:	080084e5 	.word	0x080084e5
 80084c4:	080084e5 	.word	0x080084e5
 80084c8:	080084df 	.word	0x080084df
 80084cc:	2300      	movs	r3, #0
 80084ce:	77fb      	strb	r3, [r7, #31]
 80084d0:	e117      	b.n	8008702 <UART_SetConfig+0x346>
 80084d2:	2302      	movs	r3, #2
 80084d4:	77fb      	strb	r3, [r7, #31]
 80084d6:	e114      	b.n	8008702 <UART_SetConfig+0x346>
 80084d8:	2304      	movs	r3, #4
 80084da:	77fb      	strb	r3, [r7, #31]
 80084dc:	e111      	b.n	8008702 <UART_SetConfig+0x346>
 80084de:	2308      	movs	r3, #8
 80084e0:	77fb      	strb	r3, [r7, #31]
 80084e2:	e10e      	b.n	8008702 <UART_SetConfig+0x346>
 80084e4:	2310      	movs	r3, #16
 80084e6:	77fb      	strb	r3, [r7, #31]
 80084e8:	e10b      	b.n	8008702 <UART_SetConfig+0x346>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a69      	ldr	r2, [pc, #420]	; (8008694 <UART_SetConfig+0x2d8>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d120      	bne.n	8008536 <UART_SetConfig+0x17a>
 80084f4:	4b65      	ldr	r3, [pc, #404]	; (800868c <UART_SetConfig+0x2d0>)
 80084f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084fe:	2b30      	cmp	r3, #48	; 0x30
 8008500:	d013      	beq.n	800852a <UART_SetConfig+0x16e>
 8008502:	2b30      	cmp	r3, #48	; 0x30
 8008504:	d814      	bhi.n	8008530 <UART_SetConfig+0x174>
 8008506:	2b20      	cmp	r3, #32
 8008508:	d009      	beq.n	800851e <UART_SetConfig+0x162>
 800850a:	2b20      	cmp	r3, #32
 800850c:	d810      	bhi.n	8008530 <UART_SetConfig+0x174>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <UART_SetConfig+0x15c>
 8008512:	2b10      	cmp	r3, #16
 8008514:	d006      	beq.n	8008524 <UART_SetConfig+0x168>
 8008516:	e00b      	b.n	8008530 <UART_SetConfig+0x174>
 8008518:	2300      	movs	r3, #0
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	e0f1      	b.n	8008702 <UART_SetConfig+0x346>
 800851e:	2302      	movs	r3, #2
 8008520:	77fb      	strb	r3, [r7, #31]
 8008522:	e0ee      	b.n	8008702 <UART_SetConfig+0x346>
 8008524:	2304      	movs	r3, #4
 8008526:	77fb      	strb	r3, [r7, #31]
 8008528:	e0eb      	b.n	8008702 <UART_SetConfig+0x346>
 800852a:	2308      	movs	r3, #8
 800852c:	77fb      	strb	r3, [r7, #31]
 800852e:	e0e8      	b.n	8008702 <UART_SetConfig+0x346>
 8008530:	2310      	movs	r3, #16
 8008532:	77fb      	strb	r3, [r7, #31]
 8008534:	e0e5      	b.n	8008702 <UART_SetConfig+0x346>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a57      	ldr	r2, [pc, #348]	; (8008698 <UART_SetConfig+0x2dc>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d120      	bne.n	8008582 <UART_SetConfig+0x1c6>
 8008540:	4b52      	ldr	r3, [pc, #328]	; (800868c <UART_SetConfig+0x2d0>)
 8008542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800854a:	2bc0      	cmp	r3, #192	; 0xc0
 800854c:	d013      	beq.n	8008576 <UART_SetConfig+0x1ba>
 800854e:	2bc0      	cmp	r3, #192	; 0xc0
 8008550:	d814      	bhi.n	800857c <UART_SetConfig+0x1c0>
 8008552:	2b80      	cmp	r3, #128	; 0x80
 8008554:	d009      	beq.n	800856a <UART_SetConfig+0x1ae>
 8008556:	2b80      	cmp	r3, #128	; 0x80
 8008558:	d810      	bhi.n	800857c <UART_SetConfig+0x1c0>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <UART_SetConfig+0x1a8>
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d006      	beq.n	8008570 <UART_SetConfig+0x1b4>
 8008562:	e00b      	b.n	800857c <UART_SetConfig+0x1c0>
 8008564:	2300      	movs	r3, #0
 8008566:	77fb      	strb	r3, [r7, #31]
 8008568:	e0cb      	b.n	8008702 <UART_SetConfig+0x346>
 800856a:	2302      	movs	r3, #2
 800856c:	77fb      	strb	r3, [r7, #31]
 800856e:	e0c8      	b.n	8008702 <UART_SetConfig+0x346>
 8008570:	2304      	movs	r3, #4
 8008572:	77fb      	strb	r3, [r7, #31]
 8008574:	e0c5      	b.n	8008702 <UART_SetConfig+0x346>
 8008576:	2308      	movs	r3, #8
 8008578:	77fb      	strb	r3, [r7, #31]
 800857a:	e0c2      	b.n	8008702 <UART_SetConfig+0x346>
 800857c:	2310      	movs	r3, #16
 800857e:	77fb      	strb	r3, [r7, #31]
 8008580:	e0bf      	b.n	8008702 <UART_SetConfig+0x346>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a45      	ldr	r2, [pc, #276]	; (800869c <UART_SetConfig+0x2e0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d125      	bne.n	80085d8 <UART_SetConfig+0x21c>
 800858c:	4b3f      	ldr	r3, [pc, #252]	; (800868c <UART_SetConfig+0x2d0>)
 800858e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800859a:	d017      	beq.n	80085cc <UART_SetConfig+0x210>
 800859c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085a0:	d817      	bhi.n	80085d2 <UART_SetConfig+0x216>
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a6:	d00b      	beq.n	80085c0 <UART_SetConfig+0x204>
 80085a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ac:	d811      	bhi.n	80085d2 <UART_SetConfig+0x216>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <UART_SetConfig+0x1fe>
 80085b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b6:	d006      	beq.n	80085c6 <UART_SetConfig+0x20a>
 80085b8:	e00b      	b.n	80085d2 <UART_SetConfig+0x216>
 80085ba:	2300      	movs	r3, #0
 80085bc:	77fb      	strb	r3, [r7, #31]
 80085be:	e0a0      	b.n	8008702 <UART_SetConfig+0x346>
 80085c0:	2302      	movs	r3, #2
 80085c2:	77fb      	strb	r3, [r7, #31]
 80085c4:	e09d      	b.n	8008702 <UART_SetConfig+0x346>
 80085c6:	2304      	movs	r3, #4
 80085c8:	77fb      	strb	r3, [r7, #31]
 80085ca:	e09a      	b.n	8008702 <UART_SetConfig+0x346>
 80085cc:	2308      	movs	r3, #8
 80085ce:	77fb      	strb	r3, [r7, #31]
 80085d0:	e097      	b.n	8008702 <UART_SetConfig+0x346>
 80085d2:	2310      	movs	r3, #16
 80085d4:	77fb      	strb	r3, [r7, #31]
 80085d6:	e094      	b.n	8008702 <UART_SetConfig+0x346>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a30      	ldr	r2, [pc, #192]	; (80086a0 <UART_SetConfig+0x2e4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d125      	bne.n	800862e <UART_SetConfig+0x272>
 80085e2:	4b2a      	ldr	r3, [pc, #168]	; (800868c <UART_SetConfig+0x2d0>)
 80085e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085f0:	d017      	beq.n	8008622 <UART_SetConfig+0x266>
 80085f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085f6:	d817      	bhi.n	8008628 <UART_SetConfig+0x26c>
 80085f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085fc:	d00b      	beq.n	8008616 <UART_SetConfig+0x25a>
 80085fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008602:	d811      	bhi.n	8008628 <UART_SetConfig+0x26c>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <UART_SetConfig+0x254>
 8008608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800860c:	d006      	beq.n	800861c <UART_SetConfig+0x260>
 800860e:	e00b      	b.n	8008628 <UART_SetConfig+0x26c>
 8008610:	2301      	movs	r3, #1
 8008612:	77fb      	strb	r3, [r7, #31]
 8008614:	e075      	b.n	8008702 <UART_SetConfig+0x346>
 8008616:	2302      	movs	r3, #2
 8008618:	77fb      	strb	r3, [r7, #31]
 800861a:	e072      	b.n	8008702 <UART_SetConfig+0x346>
 800861c:	2304      	movs	r3, #4
 800861e:	77fb      	strb	r3, [r7, #31]
 8008620:	e06f      	b.n	8008702 <UART_SetConfig+0x346>
 8008622:	2308      	movs	r3, #8
 8008624:	77fb      	strb	r3, [r7, #31]
 8008626:	e06c      	b.n	8008702 <UART_SetConfig+0x346>
 8008628:	2310      	movs	r3, #16
 800862a:	77fb      	strb	r3, [r7, #31]
 800862c:	e069      	b.n	8008702 <UART_SetConfig+0x346>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a1c      	ldr	r2, [pc, #112]	; (80086a4 <UART_SetConfig+0x2e8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d137      	bne.n	80086a8 <UART_SetConfig+0x2ec>
 8008638:	4b14      	ldr	r3, [pc, #80]	; (800868c <UART_SetConfig+0x2d0>)
 800863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008646:	d017      	beq.n	8008678 <UART_SetConfig+0x2bc>
 8008648:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800864c:	d817      	bhi.n	800867e <UART_SetConfig+0x2c2>
 800864e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008652:	d00b      	beq.n	800866c <UART_SetConfig+0x2b0>
 8008654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008658:	d811      	bhi.n	800867e <UART_SetConfig+0x2c2>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <UART_SetConfig+0x2aa>
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008662:	d006      	beq.n	8008672 <UART_SetConfig+0x2b6>
 8008664:	e00b      	b.n	800867e <UART_SetConfig+0x2c2>
 8008666:	2300      	movs	r3, #0
 8008668:	77fb      	strb	r3, [r7, #31]
 800866a:	e04a      	b.n	8008702 <UART_SetConfig+0x346>
 800866c:	2302      	movs	r3, #2
 800866e:	77fb      	strb	r3, [r7, #31]
 8008670:	e047      	b.n	8008702 <UART_SetConfig+0x346>
 8008672:	2304      	movs	r3, #4
 8008674:	77fb      	strb	r3, [r7, #31]
 8008676:	e044      	b.n	8008702 <UART_SetConfig+0x346>
 8008678:	2308      	movs	r3, #8
 800867a:	77fb      	strb	r3, [r7, #31]
 800867c:	e041      	b.n	8008702 <UART_SetConfig+0x346>
 800867e:	2310      	movs	r3, #16
 8008680:	77fb      	strb	r3, [r7, #31]
 8008682:	e03e      	b.n	8008702 <UART_SetConfig+0x346>
 8008684:	efff69f3 	.word	0xefff69f3
 8008688:	40011000 	.word	0x40011000
 800868c:	40023800 	.word	0x40023800
 8008690:	40004400 	.word	0x40004400
 8008694:	40004800 	.word	0x40004800
 8008698:	40004c00 	.word	0x40004c00
 800869c:	40005000 	.word	0x40005000
 80086a0:	40011400 	.word	0x40011400
 80086a4:	40007800 	.word	0x40007800
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a71      	ldr	r2, [pc, #452]	; (8008874 <UART_SetConfig+0x4b8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d125      	bne.n	80086fe <UART_SetConfig+0x342>
 80086b2:	4b71      	ldr	r3, [pc, #452]	; (8008878 <UART_SetConfig+0x4bc>)
 80086b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086c0:	d017      	beq.n	80086f2 <UART_SetConfig+0x336>
 80086c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086c6:	d817      	bhi.n	80086f8 <UART_SetConfig+0x33c>
 80086c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086cc:	d00b      	beq.n	80086e6 <UART_SetConfig+0x32a>
 80086ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d2:	d811      	bhi.n	80086f8 <UART_SetConfig+0x33c>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <UART_SetConfig+0x324>
 80086d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086dc:	d006      	beq.n	80086ec <UART_SetConfig+0x330>
 80086de:	e00b      	b.n	80086f8 <UART_SetConfig+0x33c>
 80086e0:	2300      	movs	r3, #0
 80086e2:	77fb      	strb	r3, [r7, #31]
 80086e4:	e00d      	b.n	8008702 <UART_SetConfig+0x346>
 80086e6:	2302      	movs	r3, #2
 80086e8:	77fb      	strb	r3, [r7, #31]
 80086ea:	e00a      	b.n	8008702 <UART_SetConfig+0x346>
 80086ec:	2304      	movs	r3, #4
 80086ee:	77fb      	strb	r3, [r7, #31]
 80086f0:	e007      	b.n	8008702 <UART_SetConfig+0x346>
 80086f2:	2308      	movs	r3, #8
 80086f4:	77fb      	strb	r3, [r7, #31]
 80086f6:	e004      	b.n	8008702 <UART_SetConfig+0x346>
 80086f8:	2310      	movs	r3, #16
 80086fa:	77fb      	strb	r3, [r7, #31]
 80086fc:	e001      	b.n	8008702 <UART_SetConfig+0x346>
 80086fe:	2310      	movs	r3, #16
 8008700:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800870a:	d15a      	bne.n	80087c2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800870c:	7ffb      	ldrb	r3, [r7, #31]
 800870e:	2b08      	cmp	r3, #8
 8008710:	d827      	bhi.n	8008762 <UART_SetConfig+0x3a6>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <UART_SetConfig+0x35c>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	0800873d 	.word	0x0800873d
 800871c:	08008745 	.word	0x08008745
 8008720:	0800874d 	.word	0x0800874d
 8008724:	08008763 	.word	0x08008763
 8008728:	08008753 	.word	0x08008753
 800872c:	08008763 	.word	0x08008763
 8008730:	08008763 	.word	0x08008763
 8008734:	08008763 	.word	0x08008763
 8008738:	0800875b 	.word	0x0800875b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800873c:	f7fd fde6 	bl	800630c <HAL_RCC_GetPCLK1Freq>
 8008740:	61b8      	str	r0, [r7, #24]
        break;
 8008742:	e013      	b.n	800876c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008744:	f7fd fdf6 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 8008748:	61b8      	str	r0, [r7, #24]
        break;
 800874a:	e00f      	b.n	800876c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800874c:	4b4b      	ldr	r3, [pc, #300]	; (800887c <UART_SetConfig+0x4c0>)
 800874e:	61bb      	str	r3, [r7, #24]
        break;
 8008750:	e00c      	b.n	800876c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008752:	f7fd fd19 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8008756:	61b8      	str	r0, [r7, #24]
        break;
 8008758:	e008      	b.n	800876c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800875e:	61bb      	str	r3, [r7, #24]
        break;
 8008760:	e004      	b.n	800876c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	77bb      	strb	r3, [r7, #30]
        break;
 800876a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d074      	beq.n	800885c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	005a      	lsls	r2, r3, #1
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	441a      	add	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b0f      	cmp	r3, #15
 800878c:	d916      	bls.n	80087bc <UART_SetConfig+0x400>
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008794:	d212      	bcs.n	80087bc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	b29b      	uxth	r3, r3
 800879a:	f023 030f 	bic.w	r3, r3, #15
 800879e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	89fb      	ldrh	r3, [r7, #14]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	89fa      	ldrh	r2, [r7, #14]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	e04f      	b.n	800885c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	77bb      	strb	r3, [r7, #30]
 80087c0:	e04c      	b.n	800885c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087c2:	7ffb      	ldrb	r3, [r7, #31]
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d828      	bhi.n	800881a <UART_SetConfig+0x45e>
 80087c8:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <UART_SetConfig+0x414>)
 80087ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ce:	bf00      	nop
 80087d0:	080087f5 	.word	0x080087f5
 80087d4:	080087fd 	.word	0x080087fd
 80087d8:	08008805 	.word	0x08008805
 80087dc:	0800881b 	.word	0x0800881b
 80087e0:	0800880b 	.word	0x0800880b
 80087e4:	0800881b 	.word	0x0800881b
 80087e8:	0800881b 	.word	0x0800881b
 80087ec:	0800881b 	.word	0x0800881b
 80087f0:	08008813 	.word	0x08008813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f4:	f7fd fd8a 	bl	800630c <HAL_RCC_GetPCLK1Freq>
 80087f8:	61b8      	str	r0, [r7, #24]
        break;
 80087fa:	e013      	b.n	8008824 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087fc:	f7fd fd9a 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 8008800:	61b8      	str	r0, [r7, #24]
        break;
 8008802:	e00f      	b.n	8008824 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008804:	4b1d      	ldr	r3, [pc, #116]	; (800887c <UART_SetConfig+0x4c0>)
 8008806:	61bb      	str	r3, [r7, #24]
        break;
 8008808:	e00c      	b.n	8008824 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880a:	f7fd fcbd 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 800880e:	61b8      	str	r0, [r7, #24]
        break;
 8008810:	e008      	b.n	8008824 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008816:	61bb      	str	r3, [r7, #24]
        break;
 8008818:	e004      	b.n	8008824 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	77bb      	strb	r3, [r7, #30]
        break;
 8008822:	bf00      	nop
    }

    if (pclk != 0U)
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d018      	beq.n	800885c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	085a      	lsrs	r2, r3, #1
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	441a      	add	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	fbb2 f3f3 	udiv	r3, r2, r3
 800883c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2b0f      	cmp	r3, #15
 8008842:	d909      	bls.n	8008858 <UART_SetConfig+0x49c>
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800884a:	d205      	bcs.n	8008858 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	b29a      	uxth	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	60da      	str	r2, [r3, #12]
 8008856:	e001      	b.n	800885c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008868:	7fbb      	ldrb	r3, [r7, #30]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3720      	adds	r7, #32
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	40007c00 	.word	0x40007c00
 8008878:	40023800 	.word	0x40023800
 800887c:	00f42400 	.word	0x00f42400

08008880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00a      	beq.n	80088ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	f003 0308 	and.w	r3, r3, #8
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	f003 0310 	and.w	r3, r3, #16
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01a      	beq.n	8008996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800897e:	d10a      	bne.n	8008996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	605a      	str	r2, [r3, #4]
  }
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089d4:	f7fb f9a8 	bl	8003d28 <HAL_GetTick>
 80089d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0308 	and.w	r3, r3, #8
 80089e4:	2b08      	cmp	r3, #8
 80089e6:	d10e      	bne.n	8008a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f817 	bl	8008a2a <UART_WaitOnFlagUntilTimeout>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e00d      	b.n	8008a22 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b09c      	sub	sp, #112	; 0x70
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	603b      	str	r3, [r7, #0]
 8008a36:	4613      	mov	r3, r2
 8008a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a3a:	e0a5      	b.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a42:	f000 80a1 	beq.w	8008b88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a46:	f7fb f96f 	bl	8003d28 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d302      	bcc.n	8008a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8008a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d13e      	bne.n	8008ada <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a70:	667b      	str	r3, [r7, #100]	; 0x64
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e6      	bne.n	8008a5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e5      	bne.n	8008a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e067      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d04f      	beq.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008af6:	d147      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
 8008b22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	613b      	str	r3, [r7, #16]
   return(result);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f023 0301 	bic.w	r3, r3, #1
 8008b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3308      	adds	r3, #8
 8008b52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b54:	623a      	str	r2, [r7, #32]
 8008b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	69f9      	ldr	r1, [r7, #28]
 8008b5a:	6a3a      	ldr	r2, [r7, #32]
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e5      	bne.n	8008b34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2220      	movs	r2, #32
 8008b72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e010      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69da      	ldr	r2, [r3, #28]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4013      	ands	r3, r2
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	f43f af4a 	beq.w	8008a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3770      	adds	r7, #112	; 0x70
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b097      	sub	sp, #92	; 0x5c
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be6:	d10e      	bne.n	8008c06 <UART_Start_Receive_IT+0x52>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <UART_Start_Receive_IT+0x48>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bfa:	e02d      	b.n	8008c58 <UART_Start_Receive_IT+0xa4>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	22ff      	movs	r2, #255	; 0xff
 8008c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c04:	e028      	b.n	8008c58 <UART_Start_Receive_IT+0xa4>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10d      	bne.n	8008c2a <UART_Start_Receive_IT+0x76>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d104      	bne.n	8008c20 <UART_Start_Receive_IT+0x6c>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	22ff      	movs	r2, #255	; 0xff
 8008c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c1e:	e01b      	b.n	8008c58 <UART_Start_Receive_IT+0xa4>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	227f      	movs	r2, #127	; 0x7f
 8008c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c28:	e016      	b.n	8008c58 <UART_Start_Receive_IT+0xa4>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c32:	d10d      	bne.n	8008c50 <UART_Start_Receive_IT+0x9c>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d104      	bne.n	8008c46 <UART_Start_Receive_IT+0x92>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	227f      	movs	r2, #127	; 0x7f
 8008c40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c44:	e008      	b.n	8008c58 <UART_Start_Receive_IT+0xa4>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	223f      	movs	r2, #63	; 0x3f
 8008c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c4e:	e003      	b.n	8008c58 <UART_Start_Receive_IT+0xa4>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2222      	movs	r2, #34	; 0x22
 8008c64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c78:	f043 0301 	orr.w	r3, r3, #1
 8008c7c:	657b      	str	r3, [r7, #84]	; 0x54
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3308      	adds	r3, #8
 8008c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c86:	64ba      	str	r2, [r7, #72]	; 0x48
 8008c88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e5      	bne.n	8008c66 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca2:	d107      	bne.n	8008cb4 <UART_Start_Receive_IT+0x100>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d103      	bne.n	8008cb4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4a24      	ldr	r2, [pc, #144]	; (8008d40 <UART_Start_Receive_IT+0x18c>)
 8008cb0:	665a      	str	r2, [r3, #100]	; 0x64
 8008cb2:	e002      	b.n	8008cba <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4a23      	ldr	r2, [pc, #140]	; (8008d44 <UART_Start_Receive_IT+0x190>)
 8008cb8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d019      	beq.n	8008cfe <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8008cea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf0:	e841 2300 	strex	r3, r2, [r1]
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e6      	bne.n	8008cca <UART_Start_Receive_IT+0x116>
 8008cfc:	e018      	b.n	8008d30 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f043 0320 	orr.w	r3, r3, #32
 8008d12:	653b      	str	r3, [r7, #80]	; 0x50
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1c:	623b      	str	r3, [r7, #32]
 8008d1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	69f9      	ldr	r1, [r7, #28]
 8008d22:	6a3a      	ldr	r2, [r7, #32]
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e6      	bne.n	8008cfe <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	375c      	adds	r7, #92	; 0x5c
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	08008feb 	.word	0x08008feb
 8008d44:	08008e8f 	.word	0x08008e8f

08008d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b095      	sub	sp, #84	; 0x54
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e6      	bne.n	8008d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3308      	adds	r3, #8
 8008d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008da4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e5      	bne.n	8008d82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d118      	bne.n	8008df0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f023 0310 	bic.w	r3, r3, #16
 8008dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ddc:	61bb      	str	r3, [r7, #24]
 8008dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6979      	ldr	r1, [r7, #20]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e6      	bne.n	8008dbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2220      	movs	r2, #32
 8008df4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008e02:	bf00      	nop
 8008e04:	3754      	adds	r7, #84	; 0x54
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff faaf 	bl	8008390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b088      	sub	sp, #32
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e56:	61fb      	str	r3, [r7, #28]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	6979      	ldr	r1, [r7, #20]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	e841 2300 	strex	r3, r2, [r1]
 8008e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e6      	bne.n	8008e42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2220      	movs	r2, #32
 8008e78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7f9 f90f 	bl	80020a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e86:	bf00      	nop
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b096      	sub	sp, #88	; 0x58
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea4:	2b22      	cmp	r3, #34	; 0x22
 8008ea6:	f040 8094 	bne.w	8008fd2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008eb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008eb8:	b2d9      	uxtb	r1, r3
 8008eba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec4:	400a      	ands	r2, r1
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d177      	bne.n	8008fe2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f06:	653b      	str	r3, [r7, #80]	; 0x50
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f10:	647b      	str	r3, [r7, #68]	; 0x44
 8008f12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e6      	bne.n	8008ef2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3308      	adds	r3, #8
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	623b      	str	r3, [r7, #32]
   return(result);
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f44:	633a      	str	r2, [r7, #48]	; 0x30
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e5      	bne.n	8008f24 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d12e      	bne.n	8008fca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	e853 3f00 	ldrex	r3, [r3]
 8008f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0310 	bic.w	r3, r3, #16
 8008f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	69b9      	ldr	r1, [r7, #24]
 8008f96:	69fa      	ldr	r2, [r7, #28]
 8008f98:	e841 2300 	strex	r3, r2, [r1]
 8008f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e6      	bne.n	8008f72 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	2b10      	cmp	r3, #16
 8008fb0:	d103      	bne.n	8008fba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2210      	movs	r2, #16
 8008fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff f9ee 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fc8:	e00b      	b.n	8008fe2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7f8 fd88 	bl	8001ae0 <HAL_UART_RxCpltCallback>
}
 8008fd0:	e007      	b.n	8008fe2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	699a      	ldr	r2, [r3, #24]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f042 0208 	orr.w	r2, r2, #8
 8008fe0:	619a      	str	r2, [r3, #24]
}
 8008fe2:	bf00      	nop
 8008fe4:	3758      	adds	r7, #88	; 0x58
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b096      	sub	sp, #88	; 0x58
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ff8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009000:	2b22      	cmp	r3, #34	; 0x22
 8009002:	f040 8094 	bne.w	800912e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009014:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009016:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800901a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800901e:	4013      	ands	r3, r2
 8009020:	b29a      	uxth	r2, r3
 8009022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009024:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902a:	1c9a      	adds	r2, r3, #2
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009036:	b29b      	uxth	r3, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009048:	b29b      	uxth	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d177      	bne.n	800913e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	461a      	mov	r2, r3
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	643b      	str	r3, [r7, #64]	; 0x40
 800906e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e6      	bne.n	800904e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f023 0301 	bic.w	r3, r3, #1
 8009096:	64bb      	str	r3, [r7, #72]	; 0x48
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e5      	bne.n	8009080 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d12e      	bne.n	8009126 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	60bb      	str	r3, [r7, #8]
   return(result);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f023 0310 	bic.w	r3, r3, #16
 80090e2:	647b      	str	r3, [r7, #68]	; 0x44
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ec:	61bb      	str	r3, [r7, #24]
 80090ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	6979      	ldr	r1, [r7, #20]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	613b      	str	r3, [r7, #16]
   return(result);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e6      	bne.n	80090ce <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	f003 0310 	and.w	r3, r3, #16
 800910a:	2b10      	cmp	r3, #16
 800910c:	d103      	bne.n	8009116 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2210      	movs	r2, #16
 8009114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7ff f940 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009124:	e00b      	b.n	800913e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7f8 fcda 	bl	8001ae0 <HAL_UART_RxCpltCallback>
}
 800912c:	e007      	b.n	800913e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	699a      	ldr	r2, [r3, #24]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0208 	orr.w	r2, r2, #8
 800913c:	619a      	str	r2, [r3, #24]
}
 800913e:	bf00      	nop
 8009140:	3758      	adds	r7, #88	; 0x58
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <getMAC>:
uint8_t IP_ADDRESS[4];
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
uint8_t getMAC(int n){
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	/* get MAC hardware address */
	return gnetif.hwaddr[n];
 8009150:	4a05      	ldr	r2, [pc, #20]	; (8009168 <getMAC+0x20>)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	3322      	adds	r3, #34	; 0x22
 8009158:	781b      	ldrb	r3, [r3, #0]
}
 800915a:	4618      	mov	r0, r3
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	200055c4 	.word	0x200055c4

0800916c <setIP>:

const ip4_addr_t* getIPAddr(){
	return netif_ip4_addr(&gnetif);
}

void setIP(u32_t addr){
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60fb      	str	r3, [r7, #12]
	netif_set_ipaddr(&gnetif,&temp);
 8009178:	f107 030c 	add.w	r3, r7, #12
 800917c:	4619      	mov	r1, r3
 800917e:	4803      	ldr	r0, [pc, #12]	; (800918c <setIP+0x20>)
 8009180:	f007 fb4a 	bl	8010818 <netif_set_ipaddr>
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	200055c4 	.word	0x200055c4

08009190 <setNetmask>:
	ip4_addr_t temp;
	temp.addr = addr;
	netif_set_gw(&gnetif,&temp);
}

void setNetmask(u32_t addr){
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60fb      	str	r3, [r7, #12]
	netif_set_netmask(&gnetif,&temp);
 800919c:	f107 030c 	add.w	r3, r7, #12
 80091a0:	4619      	mov	r1, r3
 80091a2:	4803      	ldr	r0, [pc, #12]	; (80091b0 <setNetmask+0x20>)
 80091a4:	f007 fb80 	bl	80108a8 <netif_set_netmask>
}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	200055c4 	.word	0x200055c4

080091b4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80091ba:	4b8c      	ldr	r3, [pc, #560]	; (80093ec <MX_LWIP_Init+0x238>)
 80091bc:	22c0      	movs	r2, #192	; 0xc0
 80091be:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80091c0:	4b8a      	ldr	r3, [pc, #552]	; (80093ec <MX_LWIP_Init+0x238>)
 80091c2:	22a8      	movs	r2, #168	; 0xa8
 80091c4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80091c6:	4b89      	ldr	r3, [pc, #548]	; (80093ec <MX_LWIP_Init+0x238>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 55;
 80091cc:	4b87      	ldr	r3, [pc, #540]	; (80093ec <MX_LWIP_Init+0x238>)
 80091ce:	2237      	movs	r2, #55	; 0x37
 80091d0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80091d2:	4b87      	ldr	r3, [pc, #540]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80091d4:	22ff      	movs	r2, #255	; 0xff
 80091d6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80091d8:	4b85      	ldr	r3, [pc, #532]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80091da:	22ff      	movs	r2, #255	; 0xff
 80091dc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80091de:	4b84      	ldr	r3, [pc, #528]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80091e0:	22ff      	movs	r2, #255	; 0xff
 80091e2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80091e4:	4b82      	ldr	r3, [pc, #520]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80091ea:	4b82      	ldr	r3, [pc, #520]	; (80093f4 <MX_LWIP_Init+0x240>)
 80091ec:	22c0      	movs	r2, #192	; 0xc0
 80091ee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80091f0:	4b80      	ldr	r3, [pc, #512]	; (80093f4 <MX_LWIP_Init+0x240>)
 80091f2:	22a8      	movs	r2, #168	; 0xa8
 80091f4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80091f6:	4b7f      	ldr	r3, [pc, #508]	; (80093f4 <MX_LWIP_Init+0x240>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80091fc:	4b7d      	ldr	r3, [pc, #500]	; (80093f4 <MX_LWIP_Init+0x240>)
 80091fe:	2201      	movs	r2, #1
 8009200:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009202:	2100      	movs	r1, #0
 8009204:	2000      	movs	r0, #0
 8009206:	f005 fc47 	bl	800ea98 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800920a:	4b78      	ldr	r3, [pc, #480]	; (80093ec <MX_LWIP_Init+0x238>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	061a      	lsls	r2, r3, #24
 8009210:	4b76      	ldr	r3, [pc, #472]	; (80093ec <MX_LWIP_Init+0x238>)
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	041b      	lsls	r3, r3, #16
 8009216:	431a      	orrs	r2, r3
 8009218:	4b74      	ldr	r3, [pc, #464]	; (80093ec <MX_LWIP_Init+0x238>)
 800921a:	789b      	ldrb	r3, [r3, #2]
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	4313      	orrs	r3, r2
 8009220:	4a72      	ldr	r2, [pc, #456]	; (80093ec <MX_LWIP_Init+0x238>)
 8009222:	78d2      	ldrb	r2, [r2, #3]
 8009224:	4313      	orrs	r3, r2
 8009226:	061a      	lsls	r2, r3, #24
 8009228:	4b70      	ldr	r3, [pc, #448]	; (80093ec <MX_LWIP_Init+0x238>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	0619      	lsls	r1, r3, #24
 800922e:	4b6f      	ldr	r3, [pc, #444]	; (80093ec <MX_LWIP_Init+0x238>)
 8009230:	785b      	ldrb	r3, [r3, #1]
 8009232:	041b      	lsls	r3, r3, #16
 8009234:	4319      	orrs	r1, r3
 8009236:	4b6d      	ldr	r3, [pc, #436]	; (80093ec <MX_LWIP_Init+0x238>)
 8009238:	789b      	ldrb	r3, [r3, #2]
 800923a:	021b      	lsls	r3, r3, #8
 800923c:	430b      	orrs	r3, r1
 800923e:	496b      	ldr	r1, [pc, #428]	; (80093ec <MX_LWIP_Init+0x238>)
 8009240:	78c9      	ldrb	r1, [r1, #3]
 8009242:	430b      	orrs	r3, r1
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800924a:	431a      	orrs	r2, r3
 800924c:	4b67      	ldr	r3, [pc, #412]	; (80093ec <MX_LWIP_Init+0x238>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	0619      	lsls	r1, r3, #24
 8009252:	4b66      	ldr	r3, [pc, #408]	; (80093ec <MX_LWIP_Init+0x238>)
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	041b      	lsls	r3, r3, #16
 8009258:	4319      	orrs	r1, r3
 800925a:	4b64      	ldr	r3, [pc, #400]	; (80093ec <MX_LWIP_Init+0x238>)
 800925c:	789b      	ldrb	r3, [r3, #2]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	430b      	orrs	r3, r1
 8009262:	4962      	ldr	r1, [pc, #392]	; (80093ec <MX_LWIP_Init+0x238>)
 8009264:	78c9      	ldrb	r1, [r1, #3]
 8009266:	430b      	orrs	r3, r1
 8009268:	0a1b      	lsrs	r3, r3, #8
 800926a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800926e:	431a      	orrs	r2, r3
 8009270:	4b5e      	ldr	r3, [pc, #376]	; (80093ec <MX_LWIP_Init+0x238>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	0619      	lsls	r1, r3, #24
 8009276:	4b5d      	ldr	r3, [pc, #372]	; (80093ec <MX_LWIP_Init+0x238>)
 8009278:	785b      	ldrb	r3, [r3, #1]
 800927a:	041b      	lsls	r3, r3, #16
 800927c:	4319      	orrs	r1, r3
 800927e:	4b5b      	ldr	r3, [pc, #364]	; (80093ec <MX_LWIP_Init+0x238>)
 8009280:	789b      	ldrb	r3, [r3, #2]
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	430b      	orrs	r3, r1
 8009286:	4959      	ldr	r1, [pc, #356]	; (80093ec <MX_LWIP_Init+0x238>)
 8009288:	78c9      	ldrb	r1, [r1, #3]
 800928a:	430b      	orrs	r3, r1
 800928c:	0e1b      	lsrs	r3, r3, #24
 800928e:	4313      	orrs	r3, r2
 8009290:	4a59      	ldr	r2, [pc, #356]	; (80093f8 <MX_LWIP_Init+0x244>)
 8009292:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009294:	4b56      	ldr	r3, [pc, #344]	; (80093f0 <MX_LWIP_Init+0x23c>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	061a      	lsls	r2, r3, #24
 800929a:	4b55      	ldr	r3, [pc, #340]	; (80093f0 <MX_LWIP_Init+0x23c>)
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	041b      	lsls	r3, r3, #16
 80092a0:	431a      	orrs	r2, r3
 80092a2:	4b53      	ldr	r3, [pc, #332]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092a4:	789b      	ldrb	r3, [r3, #2]
 80092a6:	021b      	lsls	r3, r3, #8
 80092a8:	4313      	orrs	r3, r2
 80092aa:	4a51      	ldr	r2, [pc, #324]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092ac:	78d2      	ldrb	r2, [r2, #3]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	061a      	lsls	r2, r3, #24
 80092b2:	4b4f      	ldr	r3, [pc, #316]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	0619      	lsls	r1, r3, #24
 80092b8:	4b4d      	ldr	r3, [pc, #308]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	4319      	orrs	r1, r3
 80092c0:	4b4b      	ldr	r3, [pc, #300]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092c2:	789b      	ldrb	r3, [r3, #2]
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	430b      	orrs	r3, r1
 80092c8:	4949      	ldr	r1, [pc, #292]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092ca:	78c9      	ldrb	r1, [r1, #3]
 80092cc:	430b      	orrs	r3, r1
 80092ce:	021b      	lsls	r3, r3, #8
 80092d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092d4:	431a      	orrs	r2, r3
 80092d6:	4b46      	ldr	r3, [pc, #280]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	0619      	lsls	r1, r3, #24
 80092dc:	4b44      	ldr	r3, [pc, #272]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	4319      	orrs	r1, r3
 80092e4:	4b42      	ldr	r3, [pc, #264]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092e6:	789b      	ldrb	r3, [r3, #2]
 80092e8:	021b      	lsls	r3, r3, #8
 80092ea:	430b      	orrs	r3, r1
 80092ec:	4940      	ldr	r1, [pc, #256]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092ee:	78c9      	ldrb	r1, [r1, #3]
 80092f0:	430b      	orrs	r3, r1
 80092f2:	0a1b      	lsrs	r3, r3, #8
 80092f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80092f8:	431a      	orrs	r2, r3
 80092fa:	4b3d      	ldr	r3, [pc, #244]	; (80093f0 <MX_LWIP_Init+0x23c>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	0619      	lsls	r1, r3, #24
 8009300:	4b3b      	ldr	r3, [pc, #236]	; (80093f0 <MX_LWIP_Init+0x23c>)
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	041b      	lsls	r3, r3, #16
 8009306:	4319      	orrs	r1, r3
 8009308:	4b39      	ldr	r3, [pc, #228]	; (80093f0 <MX_LWIP_Init+0x23c>)
 800930a:	789b      	ldrb	r3, [r3, #2]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	430b      	orrs	r3, r1
 8009310:	4937      	ldr	r1, [pc, #220]	; (80093f0 <MX_LWIP_Init+0x23c>)
 8009312:	78c9      	ldrb	r1, [r1, #3]
 8009314:	430b      	orrs	r3, r1
 8009316:	0e1b      	lsrs	r3, r3, #24
 8009318:	4313      	orrs	r3, r2
 800931a:	4a38      	ldr	r2, [pc, #224]	; (80093fc <MX_LWIP_Init+0x248>)
 800931c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800931e:	4b35      	ldr	r3, [pc, #212]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	061a      	lsls	r2, r3, #24
 8009324:	4b33      	ldr	r3, [pc, #204]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009326:	785b      	ldrb	r3, [r3, #1]
 8009328:	041b      	lsls	r3, r3, #16
 800932a:	431a      	orrs	r2, r3
 800932c:	4b31      	ldr	r3, [pc, #196]	; (80093f4 <MX_LWIP_Init+0x240>)
 800932e:	789b      	ldrb	r3, [r3, #2]
 8009330:	021b      	lsls	r3, r3, #8
 8009332:	4313      	orrs	r3, r2
 8009334:	4a2f      	ldr	r2, [pc, #188]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009336:	78d2      	ldrb	r2, [r2, #3]
 8009338:	4313      	orrs	r3, r2
 800933a:	061a      	lsls	r2, r3, #24
 800933c:	4b2d      	ldr	r3, [pc, #180]	; (80093f4 <MX_LWIP_Init+0x240>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	0619      	lsls	r1, r3, #24
 8009342:	4b2c      	ldr	r3, [pc, #176]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	041b      	lsls	r3, r3, #16
 8009348:	4319      	orrs	r1, r3
 800934a:	4b2a      	ldr	r3, [pc, #168]	; (80093f4 <MX_LWIP_Init+0x240>)
 800934c:	789b      	ldrb	r3, [r3, #2]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	430b      	orrs	r3, r1
 8009352:	4928      	ldr	r1, [pc, #160]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009354:	78c9      	ldrb	r1, [r1, #3]
 8009356:	430b      	orrs	r3, r1
 8009358:	021b      	lsls	r3, r3, #8
 800935a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800935e:	431a      	orrs	r2, r3
 8009360:	4b24      	ldr	r3, [pc, #144]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	0619      	lsls	r1, r3, #24
 8009366:	4b23      	ldr	r3, [pc, #140]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	041b      	lsls	r3, r3, #16
 800936c:	4319      	orrs	r1, r3
 800936e:	4b21      	ldr	r3, [pc, #132]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009370:	789b      	ldrb	r3, [r3, #2]
 8009372:	021b      	lsls	r3, r3, #8
 8009374:	430b      	orrs	r3, r1
 8009376:	491f      	ldr	r1, [pc, #124]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009378:	78c9      	ldrb	r1, [r1, #3]
 800937a:	430b      	orrs	r3, r1
 800937c:	0a1b      	lsrs	r3, r3, #8
 800937e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009382:	431a      	orrs	r2, r3
 8009384:	4b1b      	ldr	r3, [pc, #108]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	0619      	lsls	r1, r3, #24
 800938a:	4b1a      	ldr	r3, [pc, #104]	; (80093f4 <MX_LWIP_Init+0x240>)
 800938c:	785b      	ldrb	r3, [r3, #1]
 800938e:	041b      	lsls	r3, r3, #16
 8009390:	4319      	orrs	r1, r3
 8009392:	4b18      	ldr	r3, [pc, #96]	; (80093f4 <MX_LWIP_Init+0x240>)
 8009394:	789b      	ldrb	r3, [r3, #2]
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	430b      	orrs	r3, r1
 800939a:	4916      	ldr	r1, [pc, #88]	; (80093f4 <MX_LWIP_Init+0x240>)
 800939c:	78c9      	ldrb	r1, [r1, #3]
 800939e:	430b      	orrs	r3, r1
 80093a0:	0e1b      	lsrs	r3, r3, #24
 80093a2:	4313      	orrs	r3, r2
 80093a4:	4a16      	ldr	r2, [pc, #88]	; (8009400 <MX_LWIP_Init+0x24c>)
 80093a6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80093a8:	4b16      	ldr	r3, [pc, #88]	; (8009404 <MX_LWIP_Init+0x250>)
 80093aa:	9302      	str	r3, [sp, #8]
 80093ac:	4b16      	ldr	r3, [pc, #88]	; (8009408 <MX_LWIP_Init+0x254>)
 80093ae:	9301      	str	r3, [sp, #4]
 80093b0:	2300      	movs	r3, #0
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	4b12      	ldr	r3, [pc, #72]	; (8009400 <MX_LWIP_Init+0x24c>)
 80093b6:	4a11      	ldr	r2, [pc, #68]	; (80093fc <MX_LWIP_Init+0x248>)
 80093b8:	490f      	ldr	r1, [pc, #60]	; (80093f8 <MX_LWIP_Init+0x244>)
 80093ba:	4814      	ldr	r0, [pc, #80]	; (800940c <MX_LWIP_Init+0x258>)
 80093bc:	f007 f904 	bl	80105c8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80093c0:	4812      	ldr	r0, [pc, #72]	; (800940c <MX_LWIP_Init+0x258>)
 80093c2:	f007 fb03 	bl	80109cc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80093c6:	4b11      	ldr	r3, [pc, #68]	; (800940c <MX_LWIP_Init+0x258>)
 80093c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80093cc:	089b      	lsrs	r3, r3, #2
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80093d8:	480c      	ldr	r0, [pc, #48]	; (800940c <MX_LWIP_Init+0x258>)
 80093da:	f007 fb07 	bl	80109ec <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80093de:	e002      	b.n	80093e6 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 80093e0:	480a      	ldr	r0, [pc, #40]	; (800940c <MX_LWIP_Init+0x258>)
 80093e2:	f007 fb6f 	bl	8010ac4 <netif_set_down>
}
 80093e6:	bf00      	nop
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	200055fc 	.word	0x200055fc
 80093f0:	200055f8 	.word	0x200055f8
 80093f4:	200055c0 	.word	0x200055c0
 80093f8:	200055f4 	.word	0x200055f4
 80093fc:	20005600 	.word	0x20005600
 8009400:	20005604 	.word	0x20005604
 8009404:	0800e9a9 	.word	0x0800e9a9
 8009408:	08009ad1 	.word	0x08009ad1
 800940c:	200055c4 	.word	0x200055c4

08009410 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08e      	sub	sp, #56	; 0x38
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800941c:	2200      	movs	r2, #0
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	605a      	str	r2, [r3, #4]
 8009422:	609a      	str	r2, [r3, #8]
 8009424:	60da      	str	r2, [r3, #12]
 8009426:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a44      	ldr	r2, [pc, #272]	; (8009540 <HAL_ETH_MspInit+0x130>)
 800942e:	4293      	cmp	r3, r2
 8009430:	f040 8081 	bne.w	8009536 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009434:	4b43      	ldr	r3, [pc, #268]	; (8009544 <HAL_ETH_MspInit+0x134>)
 8009436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009438:	4a42      	ldr	r2, [pc, #264]	; (8009544 <HAL_ETH_MspInit+0x134>)
 800943a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800943e:	6313      	str	r3, [r2, #48]	; 0x30
 8009440:	4b40      	ldr	r3, [pc, #256]	; (8009544 <HAL_ETH_MspInit+0x134>)
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009448:	623b      	str	r3, [r7, #32]
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	4b3d      	ldr	r3, [pc, #244]	; (8009544 <HAL_ETH_MspInit+0x134>)
 800944e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009450:	4a3c      	ldr	r2, [pc, #240]	; (8009544 <HAL_ETH_MspInit+0x134>)
 8009452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009456:	6313      	str	r3, [r2, #48]	; 0x30
 8009458:	4b3a      	ldr	r3, [pc, #232]	; (8009544 <HAL_ETH_MspInit+0x134>)
 800945a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009460:	61fb      	str	r3, [r7, #28]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4b37      	ldr	r3, [pc, #220]	; (8009544 <HAL_ETH_MspInit+0x134>)
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	4a36      	ldr	r2, [pc, #216]	; (8009544 <HAL_ETH_MspInit+0x134>)
 800946a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800946e:	6313      	str	r3, [r2, #48]	; 0x30
 8009470:	4b34      	ldr	r3, [pc, #208]	; (8009544 <HAL_ETH_MspInit+0x134>)
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009478:	61bb      	str	r3, [r7, #24]
 800947a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800947c:	4b31      	ldr	r3, [pc, #196]	; (8009544 <HAL_ETH_MspInit+0x134>)
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	4a30      	ldr	r2, [pc, #192]	; (8009544 <HAL_ETH_MspInit+0x134>)
 8009482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009486:	6313      	str	r3, [r2, #48]	; 0x30
 8009488:	4b2e      	ldr	r3, [pc, #184]	; (8009544 <HAL_ETH_MspInit+0x134>)
 800948a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009494:	4b2b      	ldr	r3, [pc, #172]	; (8009544 <HAL_ETH_MspInit+0x134>)
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	4a2a      	ldr	r2, [pc, #168]	; (8009544 <HAL_ETH_MspInit+0x134>)
 800949a:	f043 0304 	orr.w	r3, r3, #4
 800949e:	6313      	str	r3, [r2, #48]	; 0x30
 80094a0:	4b28      	ldr	r3, [pc, #160]	; (8009544 <HAL_ETH_MspInit+0x134>)
 80094a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ac:	4b25      	ldr	r3, [pc, #148]	; (8009544 <HAL_ETH_MspInit+0x134>)
 80094ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b0:	4a24      	ldr	r2, [pc, #144]	; (8009544 <HAL_ETH_MspInit+0x134>)
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	6313      	str	r3, [r2, #48]	; 0x30
 80094b8:	4b22      	ldr	r3, [pc, #136]	; (8009544 <HAL_ETH_MspInit+0x134>)
 80094ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80094c4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ca:	2302      	movs	r3, #2
 80094cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094d2:	2303      	movs	r3, #3
 80094d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80094d6:	230b      	movs	r3, #11
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80094da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094de:	4619      	mov	r1, r3
 80094e0:	4819      	ldr	r0, [pc, #100]	; (8009548 <HAL_ETH_MspInit+0x138>)
 80094e2:	f7fc f851 	bl	8005588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80094e6:	2332      	movs	r3, #50	; 0x32
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ea:	2302      	movs	r3, #2
 80094ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094f2:	2303      	movs	r3, #3
 80094f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80094f6:	230b      	movs	r3, #11
 80094f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094fe:	4619      	mov	r1, r3
 8009500:	4812      	ldr	r0, [pc, #72]	; (800954c <HAL_ETH_MspInit+0x13c>)
 8009502:	f7fc f841 	bl	8005588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009506:	2386      	movs	r3, #134	; 0x86
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800950a:	2302      	movs	r3, #2
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800950e:	2300      	movs	r3, #0
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009512:	2303      	movs	r3, #3
 8009514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009516:	230b      	movs	r3, #11
 8009518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800951a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800951e:	4619      	mov	r1, r3
 8009520:	480b      	ldr	r0, [pc, #44]	; (8009550 <HAL_ETH_MspInit+0x140>)
 8009522:	f7fc f831 	bl	8005588 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009526:	2200      	movs	r2, #0
 8009528:	2105      	movs	r1, #5
 800952a:	203d      	movs	r0, #61	; 0x3d
 800952c:	f7fa fce4 	bl	8003ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009530:	203d      	movs	r0, #61	; 0x3d
 8009532:	f7fa fcfd 	bl	8003f30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009536:	bf00      	nop
 8009538:	3738      	adds	r7, #56	; 0x38
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	40028000 	.word	0x40028000
 8009544:	40023800 	.word	0x40023800
 8009548:	40021800 	.word	0x40021800
 800954c:	40020800 	.word	0x40020800
 8009550:	40020000 	.word	0x40020000

08009554 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800955c:	4b04      	ldr	r3, [pc, #16]	; (8009570 <HAL_ETH_RxCpltCallback+0x1c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fc93 	bl	8009e8c <osSemaphoreRelease>
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000d54 	.word	0x20000d54

08009574 <crc32b>:

/* USER CODE BEGIN 4 */
uint32_t crc32b(uint8_t *message, size_t size) {
 8009574:	b480      	push	{r7}
 8009576:	b089      	sub	sp, #36	; 0x24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
	int i, j;
	uint32_t byte, crc, mask;

	i = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	61fb      	str	r3, [r7, #28]
	crc = 0xFFFFFFFF;
 8009582:	f04f 33ff 	mov.w	r3, #4294967295
 8009586:	617b      	str	r3, [r7, #20]
	for(int k = 0; k<size;k++) {
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]
 800958c:	e023      	b.n	80095d6 <crc32b+0x62>
		byte = message[k]; // Get next byte.
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	4413      	add	r3, r2
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	60fb      	str	r3, [r7, #12]
		crc = crc ^ byte;
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4053      	eors	r3, r2
 800959e:	617b      	str	r3, [r7, #20]
		for (j = 7; j >= 0; j--) { // Do eight times.
 80095a0:	2307      	movs	r3, #7
 80095a2:	61bb      	str	r3, [r7, #24]
 80095a4:	e00e      	b.n	80095c4 <crc32b+0x50>
			mask = -(crc & 1);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	425b      	negs	r3, r3
 80095ae:	60bb      	str	r3, [r7, #8]
			crc = (crc >> 1) ^ (0xEDB88320 & mask);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	085a      	lsrs	r2, r3, #1
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <crc32b+0x7c>)
 80095b8:	400b      	ands	r3, r1
 80095ba:	4053      	eors	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]
		for (j = 7; j >= 0; j--) { // Do eight times.
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	daed      	bge.n	80095a6 <crc32b+0x32>
		}
		i = i + 1;
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	3301      	adds	r3, #1
 80095ce:	61fb      	str	r3, [r7, #28]
	for(int k = 0; k<size;k++) {
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	3301      	adds	r3, #1
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d8d7      	bhi.n	800958e <crc32b+0x1a>
	}
	return ~crc;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	43db      	mvns	r3, r3
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3724      	adds	r7, #36	; 0x24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	edb88320 	.word	0xedb88320

080095f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80095f4:	b5b0      	push	{r4, r5, r7, lr}
 80095f6:	b090      	sub	sp, #64	; 0x40
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009600:	4b69      	ldr	r3, [pc, #420]	; (80097a8 <low_level_init+0x1b4>)
 8009602:	4a6a      	ldr	r2, [pc, #424]	; (80097ac <low_level_init+0x1b8>)
 8009604:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009606:	4b68      	ldr	r3, [pc, #416]	; (80097a8 <low_level_init+0x1b4>)
 8009608:	2201      	movs	r2, #1
 800960a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800960c:	4b66      	ldr	r3, [pc, #408]	; (80097a8 <low_level_init+0x1b4>)
 800960e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009612:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009614:	4b64      	ldr	r3, [pc, #400]	; (80097a8 <low_level_init+0x1b4>)
 8009616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800961a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800961c:	4b62      	ldr	r3, [pc, #392]	; (80097a8 <low_level_init+0x1b4>)
 800961e:	2200      	movs	r2, #0
 8009620:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8009622:	2300      	movs	r3, #0
 8009624:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[1] = 0x80;
 8009628:	2380      	movs	r3, #128	; 0x80
 800962a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  MACAddr[2] = 0xE1;
 800962e:	23e1      	movs	r3, #225	; 0xe1
 8009630:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  MACAddr[3] = 0x00;
 8009634:	2300      	movs	r3, #0
 8009636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  MACAddr[4] = 0x00;
 800963a:	2300      	movs	r3, #0
 800963c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[5] = 0x00;
 8009640:	2300      	movs	r3, #0
 8009642:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  heth.Init.MACAddr = &MACAddr[0];
 8009646:	4a58      	ldr	r2, [pc, #352]	; (80097a8 <low_level_init+0x1b4>)
 8009648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800964c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800964e:	4b56      	ldr	r3, [pc, #344]	; (80097a8 <low_level_init+0x1b4>)
 8009650:	2201      	movs	r2, #1
 8009652:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009654:	4b54      	ldr	r3, [pc, #336]	; (80097a8 <low_level_init+0x1b4>)
 8009656:	2200      	movs	r2, #0
 8009658:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800965a:	4b53      	ldr	r3, [pc, #332]	; (80097a8 <low_level_init+0x1b4>)
 800965c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009660:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  u32_t id = crc32b((uint8_t *)UID_BASE, 8);
 8009662:	2108      	movs	r1, #8
 8009664:	4852      	ldr	r0, [pc, #328]	; (80097b0 <low_level_init+0x1bc>)
 8009666:	f7ff ff85 	bl	8009574 <crc32b>
 800966a:	63f8      	str	r0, [r7, #60]	; 0x3c

    MACAddr[3] = (id>>16)&0xFF;
 800966c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800966e:	0c1b      	lsrs	r3, r3, #16
 8009670:	b2db      	uxtb	r3, r3
 8009672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MACAddr[4] =(id>>8)&0xFF;
 8009676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009678:	0a1b      	lsrs	r3, r3, #8
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    MACAddr[5] = id&0xFF;
 8009680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009688:	4847      	ldr	r0, [pc, #284]	; (80097a8 <low_level_init+0x1b4>)
 800968a:	f7fa fcf1 	bl	8004070 <HAL_ETH_Init>
 800968e:	4603      	mov	r3, r0
 8009690:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  if (hal_eth_init_status == HAL_OK)
 8009694:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009698:	2b00      	cmp	r3, #0
 800969a:	d108      	bne.n	80096ae <low_level_init+0xba>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80096a2:	f043 0304 	orr.w	r3, r3, #4
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80096ae:	2304      	movs	r3, #4
 80096b0:	4a40      	ldr	r2, [pc, #256]	; (80097b4 <low_level_init+0x1c0>)
 80096b2:	4941      	ldr	r1, [pc, #260]	; (80097b8 <low_level_init+0x1c4>)
 80096b4:	483c      	ldr	r0, [pc, #240]	; (80097a8 <low_level_init+0x1b4>)
 80096b6:	f7fa fe75 	bl	80043a4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80096ba:	2304      	movs	r3, #4
 80096bc:	4a3f      	ldr	r2, [pc, #252]	; (80097bc <low_level_init+0x1c8>)
 80096be:	4940      	ldr	r1, [pc, #256]	; (80097c0 <low_level_init+0x1cc>)
 80096c0:	4839      	ldr	r0, [pc, #228]	; (80097a8 <low_level_init+0x1b4>)
 80096c2:	f7fa fed8 	bl	8004476 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2206      	movs	r2, #6
 80096ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80096ce:	4b36      	ldr	r3, [pc, #216]	; (80097a8 <low_level_init+0x1b4>)
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	781a      	ldrb	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80096da:	4b33      	ldr	r3, [pc, #204]	; (80097a8 <low_level_init+0x1b4>)
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	785a      	ldrb	r2, [r3, #1]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80096e6:	4b30      	ldr	r3, [pc, #192]	; (80097a8 <low_level_init+0x1b4>)
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	789a      	ldrb	r2, [r3, #2]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80096f2:	4b2d      	ldr	r3, [pc, #180]	; (80097a8 <low_level_init+0x1b4>)
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	78da      	ldrb	r2, [r3, #3]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80096fe:	4b2a      	ldr	r3, [pc, #168]	; (80097a8 <low_level_init+0x1b4>)
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	791a      	ldrb	r2, [r3, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800970a:	4b27      	ldr	r3, [pc, #156]	; (80097a8 <low_level_init+0x1b4>)
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	795a      	ldrb	r2, [r3, #5]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800971c:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009724:	f043 030a 	orr.w	r3, r3, #10
 8009728:	b2da      	uxtb	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009730:	2300      	movs	r3, #0
 8009732:	627b      	str	r3, [r7, #36]	; 0x24
 8009734:	2300      	movs	r3, #0
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800973c:	2101      	movs	r1, #1
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fb24 	bl	8009d8c <osSemaphoreCreate>
 8009744:	4603      	mov	r3, r0
 8009746:	4a1f      	ldr	r2, [pc, #124]	; (80097c4 <low_level_init+0x1d0>)
 8009748:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800974a:	4b1f      	ldr	r3, [pc, #124]	; (80097c8 <low_level_init+0x1d4>)
 800974c:	f107 0408 	add.w	r4, r7, #8
 8009750:	461d      	mov	r5, r3
 8009752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009756:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800975a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800975e:	f107 0308 	add.w	r3, r7, #8
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fa29 	bl	8009bbc <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800976a:	480f      	ldr	r0, [pc, #60]	; (80097a8 <low_level_init+0x1b4>)
 800976c:	f7fb f9ab 	bl	8004ac6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009770:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009774:	461a      	mov	r2, r3
 8009776:	211d      	movs	r1, #29
 8009778:	480b      	ldr	r0, [pc, #44]	; (80097a8 <low_level_init+0x1b4>)
 800977a:	f7fb f8d6 	bl	800492a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800977e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009780:	f043 030b 	orr.w	r3, r3, #11
 8009784:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009788:	461a      	mov	r2, r3
 800978a:	211d      	movs	r1, #29
 800978c:	4806      	ldr	r0, [pc, #24]	; (80097a8 <low_level_init+0x1b4>)
 800978e:	f7fb f934 	bl	80049fa <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009792:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009796:	461a      	mov	r2, r3
 8009798:	211d      	movs	r1, #29
 800979a:	4803      	ldr	r0, [pc, #12]	; (80097a8 <low_level_init+0x1b4>)
 800979c:	f7fb f8c5 	bl	800492a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80097a0:	bf00      	nop
 80097a2:	3740      	adds	r7, #64	; 0x40
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bdb0      	pop	{r4, r5, r7, pc}
 80097a8:	20006ed8 	.word	0x20006ed8
 80097ac:	40028000 	.word	0x40028000
 80097b0:	1ff0f420 	.word	0x1ff0f420
 80097b4:	20006f20 	.word	0x20006f20
 80097b8:	20005608 	.word	0x20005608
 80097bc:	20005688 	.word	0x20005688
 80097c0:	20006e58 	.word	0x20006e58
 80097c4:	20000d54 	.word	0x20000d54
 80097c8:	0802489c 	.word	0x0802489c

080097cc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08a      	sub	sp, #40	; 0x28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80097d6:	4b4b      	ldr	r3, [pc, #300]	; (8009904 <low_level_output+0x138>)
 80097d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80097ee:	4b45      	ldr	r3, [pc, #276]	; (8009904 <low_level_output+0x138>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	623b      	str	r3, [r7, #32]
 80097fc:	e05a      	b.n	80098b4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	da03      	bge.n	800980e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009806:	23f8      	movs	r3, #248	; 0xf8
 8009808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800980c:	e05c      	b.n	80098c8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	895b      	ldrh	r3, [r3, #10]
 8009812:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009818:	e02f      	b.n	800987a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	18d0      	adds	r0, r2, r3
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	18d1      	adds	r1, r2, r3
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800982e:	1a9b      	subs	r3, r3, r2
 8009830:	461a      	mov	r2, r3
 8009832:	f011 fdcd 	bl	801b3d0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	da03      	bge.n	800984c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009844:	23f8      	movs	r3, #248	; 0xf8
 8009846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800984a:	e03d      	b.n	80098c8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800985c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009868:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009874:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	4413      	add	r3, r2
 8009880:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009884:	4293      	cmp	r3, r2
 8009886:	d8c8      	bhi.n	800981a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009888:	69fa      	ldr	r2, [r7, #28]
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	18d0      	adds	r0, r2, r3
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	4413      	add	r3, r2
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	4619      	mov	r1, r3
 800989a:	f011 fd99 	bl	801b3d0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4413      	add	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	623b      	str	r3, [r7, #32]
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1a1      	bne.n	80097fe <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	4811      	ldr	r0, [pc, #68]	; (8009904 <low_level_output+0x138>)
 80098be:	f7fa fe47 	bl	8004550 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80098c8:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <low_level_output+0x138>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	f241 0314 	movw	r3, #4116	; 0x1014
 80098d0:	4413      	add	r3, r2
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0320 	and.w	r3, r3, #32
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00d      	beq.n	80098f8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80098dc:	4b09      	ldr	r3, [pc, #36]	; (8009904 <low_level_output+0x138>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	f241 0314 	movw	r3, #4116	; 0x1014
 80098e4:	4413      	add	r3, r2
 80098e6:	2220      	movs	r2, #32
 80098e8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80098ea:	4b06      	ldr	r3, [pc, #24]	; (8009904 <low_level_output+0x138>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	f241 0304 	movw	r3, #4100	; 0x1004
 80098f2:	4413      	add	r3, r2
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80098f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3728      	adds	r7, #40	; 0x28
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20006ed8 	.word	0x20006ed8

08009908 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b08c      	sub	sp, #48	; 0x30
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009910:	2300      	movs	r3, #0
 8009912:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009914:	2300      	movs	r3, #0
 8009916:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009928:	2300      	movs	r3, #0
 800992a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800992c:	484f      	ldr	r0, [pc, #316]	; (8009a6c <low_level_input+0x164>)
 800992e:	f7fa fef9 	bl	8004724 <HAL_ETH_GetReceivedFrame_IT>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <low_level_input+0x34>

    return NULL;
 8009938:	2300      	movs	r3, #0
 800993a:	e092      	b.n	8009a62 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800993c:	4b4b      	ldr	r3, [pc, #300]	; (8009a6c <low_level_input+0x164>)
 800993e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009940:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009942:	4b4a      	ldr	r3, [pc, #296]	; (8009a6c <low_level_input+0x164>)
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8009948:	89fb      	ldrh	r3, [r7, #14]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d007      	beq.n	800995e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800994e:	89fb      	ldrh	r3, [r7, #14]
 8009950:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009954:	4619      	mov	r1, r3
 8009956:	2000      	movs	r0, #0
 8009958:	f007 f99e 	bl	8010c98 <pbuf_alloc>
 800995c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	2b00      	cmp	r3, #0
 8009962:	d04b      	beq.n	80099fc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009964:	4b41      	ldr	r3, [pc, #260]	; (8009a6c <low_level_input+0x164>)
 8009966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009968:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009970:	62bb      	str	r3, [r7, #40]	; 0x28
 8009972:	e040      	b.n	80099f6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	895b      	ldrh	r3, [r3, #10]
 8009978:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800997e:	e021      	b.n	80099c4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	18d0      	adds	r0, r2, r3
 8009988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	18d1      	adds	r1, r2, r3
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8009994:	1a9b      	subs	r3, r3, r2
 8009996:	461a      	mov	r2, r3
 8009998:	f011 fd1a 	bl	801b3d0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	4413      	add	r3, r2
 80099ae:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80099b2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80099be:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	4413      	add	r3, r2
 80099ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d8d6      	bhi.n	8009980 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	18d0      	adds	r0, r2, r3
 80099da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	4413      	add	r3, r2
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	4619      	mov	r1, r3
 80099e4:	f011 fcf4 	bl	801b3d0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80099e8:	69fa      	ldr	r2, [r7, #28]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	4413      	add	r3, r2
 80099ee:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1bb      	bne.n	8009974 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80099fc:	4b1b      	ldr	r3, [pc, #108]	; (8009a6c <low_level_input+0x164>)
 80099fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a00:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009a02:	2300      	movs	r3, #0
 8009a04:	613b      	str	r3, [r7, #16]
 8009a06:	e00b      	b.n	8009a20 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	613b      	str	r3, [r7, #16]
 8009a20:	4b12      	ldr	r3, [pc, #72]	; (8009a6c <low_level_input+0x164>)
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d3ee      	bcc.n	8009a08 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8009a2a:	4b10      	ldr	r3, [pc, #64]	; (8009a6c <low_level_input+0x164>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8009a30:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <low_level_input+0x164>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	f241 0314 	movw	r3, #4116	; 0x1014
 8009a38:	4413      	add	r3, r2
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00d      	beq.n	8009a60 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009a44:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <low_level_input+0x164>)
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	f241 0314 	movw	r3, #4116	; 0x1014
 8009a4c:	4413      	add	r3, r2
 8009a4e:	2280      	movs	r2, #128	; 0x80
 8009a50:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009a52:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <low_level_input+0x164>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	f241 0308 	movw	r3, #4104	; 0x1008
 8009a5a:	4413      	add	r3, r2
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3730      	adds	r7, #48	; 0x30
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20006ed8 	.word	0x20006ed8

08009a70 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009a7c:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <ethernetif_input+0x58>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f04f 31ff 	mov.w	r1, #4294967295
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 f9b3 	bl	8009df0 <osSemaphoreWait>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1f5      	bne.n	8009a7c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009a90:	480e      	ldr	r0, [pc, #56]	; (8009acc <ethernetif_input+0x5c>)
 8009a92:	f011 fb11 	bl	801b0b8 <sys_mutex_lock>
        p = low_level_input( netif );
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff ff36 	bl	8009908 <low_level_input>
 8009a9c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00a      	beq.n	8009aba <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	68f9      	ldr	r1, [r7, #12]
 8009aaa:	68b8      	ldr	r0, [r7, #8]
 8009aac:	4798      	blx	r3
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8009ab4:	68b8      	ldr	r0, [r7, #8]
 8009ab6:	f007 fbd3 	bl	8011260 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009aba:	4804      	ldr	r0, [pc, #16]	; (8009acc <ethernetif_input+0x5c>)
 8009abc:	f011 fb0b 	bl	801b0d6 <sys_mutex_unlock>
      } while(p!=NULL);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e4      	bne.n	8009a90 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009ac6:	e7d9      	b.n	8009a7c <ethernetif_input+0xc>
 8009ac8:	20000d54 	.word	0x20000d54
 8009acc:	20008730 	.word	0x20008730

08009ad0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d106      	bne.n	8009aec <ethernetif_init+0x1c>
 8009ade:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <ethernetif_init+0x48>)
 8009ae0:	f240 223f 	movw	r2, #575	; 0x23f
 8009ae4:	490d      	ldr	r1, [pc, #52]	; (8009b1c <ethernetif_init+0x4c>)
 8009ae6:	480e      	ldr	r0, [pc, #56]	; (8009b20 <ethernetif_init+0x50>)
 8009ae8:	f011 ff20 	bl	801b92c <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2273      	movs	r2, #115	; 0x73
 8009af0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2274      	movs	r2, #116	; 0x74
 8009af8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <ethernetif_init+0x54>)
 8009b00:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a08      	ldr	r2, [pc, #32]	; (8009b28 <ethernetif_init+0x58>)
 8009b06:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff fd73 	bl	80095f4 <low_level_init>

  return ERR_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	080248b8 	.word	0x080248b8
 8009b1c:	080248d4 	.word	0x080248d4
 8009b20:	080248e4 	.word	0x080248e4
 8009b24:	08018e79 	.word	0x08018e79
 8009b28:	080097cd 	.word	0x080097cd

08009b2c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009b30:	f7fa f8fa 	bl	8003d28 <HAL_GetTick>
 8009b34:	4603      	mov	r3, r0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	4603      	mov	r3, r0
 8009b42:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b4c:	2b84      	cmp	r3, #132	; 0x84
 8009b4e:	d005      	beq.n	8009b5c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009b50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4413      	add	r3, r2
 8009b58:	3303      	adds	r3, #3
 8009b5a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b70:	f3ef 8305 	mrs	r3, IPSR
 8009b74:	607b      	str	r3, [r7, #4]
  return(result);
 8009b76:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009b92:	f001 fd29 	bl	800b5e8 <vTaskStartScheduler>
  
  return osOK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009ba0:	f7ff ffe3 	bl	8009b6a <inHandlerMode>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009baa:	f001 fe3d 	bl	800b828 <xTaskGetTickCountFromISR>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	e002      	b.n	8009bb8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009bb2:	f001 fe29 	bl	800b808 <xTaskGetTickCount>
 8009bb6:	4603      	mov	r3, r0
  }
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bbe:	b089      	sub	sp, #36	; 0x24
 8009bc0:	af04      	add	r7, sp, #16
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d020      	beq.n	8009c10 <osThreadCreate+0x54>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d01c      	beq.n	8009c10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685c      	ldr	r4, [r3, #4]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681d      	ldr	r5, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691e      	ldr	r6, [r3, #16]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7ff ffa6 	bl	8009b3a <makeFreeRtosPriority>
 8009bee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bf8:	9202      	str	r2, [sp, #8]
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	9100      	str	r1, [sp, #0]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	4632      	mov	r2, r6
 8009c02:	4629      	mov	r1, r5
 8009c04:	4620      	mov	r0, r4
 8009c06:	f001 fb53 	bl	800b2b0 <xTaskCreateStatic>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	e01c      	b.n	8009c4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685c      	ldr	r4, [r3, #4]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c1c:	b29e      	uxth	r6, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff ff88 	bl	8009b3a <makeFreeRtosPriority>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	f107 030c 	add.w	r3, r7, #12
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	9200      	str	r2, [sp, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	4632      	mov	r2, r6
 8009c38:	4629      	mov	r1, r5
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f001 fb9b 	bl	800b376 <xTaskCreate>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d001      	beq.n	8009c4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e000      	b.n	8009c4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c54 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d007      	beq.n	8009c74 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	2001      	movs	r0, #1
 8009c6c:	f000 fc91 	bl	800a592 <xQueueCreateMutexStatic>
 8009c70:	4603      	mov	r3, r0
 8009c72:	e003      	b.n	8009c7c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009c74:	2001      	movs	r0, #1
 8009c76:	f000 fc74 	bl	800a562 <xQueueCreateMutex>
 8009c7a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <osMutexWait+0x18>
    return osErrorParameter;
 8009c98:	2380      	movs	r3, #128	; 0x80
 8009c9a:	e03a      	b.n	8009d12 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca6:	d103      	bne.n	8009cb0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	e009      	b.n	8009cc4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d006      	beq.n	8009cc4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <osMutexWait+0x40>
      ticks = 1;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009cc4:	f7ff ff51 	bl	8009b6a <inHandlerMode>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d017      	beq.n	8009cfe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009cce:	f107 0308 	add.w	r3, r7, #8
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 f8ac 	bl	800ae34 <xQueueReceiveFromISR>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d001      	beq.n	8009ce6 <osMutexWait+0x62>
      return osErrorOS;
 8009ce2:	23ff      	movs	r3, #255	; 0xff
 8009ce4:	e015      	b.n	8009d12 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d011      	beq.n	8009d10 <osMutexWait+0x8c>
 8009cec:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <osMutexWait+0x98>)
 8009cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	e008      	b.n	8009d10 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009cfe:	68f9      	ldr	r1, [r7, #12]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 ff83 	bl	800ac0c <xQueueSemaphoreTake>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d001      	beq.n	8009d10 <osMutexWait+0x8c>
    return osErrorOS;
 8009d0c:	23ff      	movs	r3, #255	; 0xff
 8009d0e:	e000      	b.n	8009d12 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	e000ed04 	.word	0xe000ed04

08009d20 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009d30:	f7ff ff1b 	bl	8009b6a <inHandlerMode>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d016      	beq.n	8009d68 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009d3a:	f107 0308 	add.w	r3, r7, #8
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fde7 	bl	800a914 <xQueueGiveFromISR>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d001      	beq.n	8009d50 <osMutexRelease+0x30>
      return osErrorOS;
 8009d4c:	23ff      	movs	r3, #255	; 0xff
 8009d4e:	e017      	b.n	8009d80 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d013      	beq.n	8009d7e <osMutexRelease+0x5e>
 8009d56:	4b0c      	ldr	r3, [pc, #48]	; (8009d88 <osMutexRelease+0x68>)
 8009d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	e00a      	b.n	8009d7e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fc2a 	bl	800a5c8 <xQueueGenericSend>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d001      	beq.n	8009d7e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009d7a:	23ff      	movs	r3, #255	; 0xff
 8009d7c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	e000ed04 	.word	0xe000ed04

08009d8c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00f      	beq.n	8009dbe <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d10a      	bne.n	8009dba <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	2203      	movs	r2, #3
 8009daa:	9200      	str	r2, [sp, #0]
 8009dac:	2200      	movs	r2, #0
 8009dae:	2100      	movs	r1, #0
 8009db0:	2001      	movs	r0, #1
 8009db2:	f000 fad9 	bl	800a368 <xQueueGenericCreateStatic>
 8009db6:	4603      	mov	r3, r0
 8009db8:	e016      	b.n	8009de8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e014      	b.n	8009de8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d110      	bne.n	8009de6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	2001      	movs	r0, #1
 8009dca:	f000 fb4f 	bl	800a46c <xQueueGenericCreate>
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <osSemaphoreCreate+0x56>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2100      	movs	r1, #0
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 fbf3 	bl	800a5c8 <xQueueGenericSend>
      return sema;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	e000      	b.n	8009de8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009de6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009e04:	2380      	movs	r3, #128	; 0x80
 8009e06:	e03a      	b.n	8009e7e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e12:	d103      	bne.n	8009e1c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009e14:	f04f 33ff 	mov.w	r3, #4294967295
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	e009      	b.n	8009e30 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d006      	beq.n	8009e30 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <osSemaphoreWait+0x40>
      ticks = 1;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009e30:	f7ff fe9b 	bl	8009b6a <inHandlerMode>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d017      	beq.n	8009e6a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	461a      	mov	r2, r3
 8009e40:	2100      	movs	r1, #0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fff6 	bl	800ae34 <xQueueReceiveFromISR>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d001      	beq.n	8009e52 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009e4e:	23ff      	movs	r3, #255	; 0xff
 8009e50:	e015      	b.n	8009e7e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d011      	beq.n	8009e7c <osSemaphoreWait+0x8c>
 8009e58:	4b0b      	ldr	r3, [pc, #44]	; (8009e88 <osSemaphoreWait+0x98>)
 8009e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	e008      	b.n	8009e7c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009e6a:	68f9      	ldr	r1, [r7, #12]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fecd 	bl	800ac0c <xQueueSemaphoreTake>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d001      	beq.n	8009e7c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009e78:	23ff      	movs	r3, #255	; 0xff
 8009e7a:	e000      	b.n	8009e7e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009e9c:	f7ff fe65 	bl	8009b6a <inHandlerMode>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d016      	beq.n	8009ed4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009ea6:	f107 0308 	add.w	r3, r7, #8
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fd31 	bl	800a914 <xQueueGiveFromISR>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d001      	beq.n	8009ebc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009eb8:	23ff      	movs	r3, #255	; 0xff
 8009eba:	e017      	b.n	8009eec <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d013      	beq.n	8009eea <osSemaphoreRelease+0x5e>
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <osSemaphoreRelease+0x68>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	e00a      	b.n	8009eea <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fb74 	bl	800a5c8 <xQueueGenericSend>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d001      	beq.n	8009eea <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009ee6:	23ff      	movs	r3, #255	; 0xff
 8009ee8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009eea:	68fb      	ldr	r3, [r7, #12]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	e000ed04 	.word	0xe000ed04

08009ef8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009f00:	f7ff fe33 	bl	8009b6a <inHandlerMode>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009f0a:	2382      	movs	r3, #130	; 0x82
 8009f0c:	e003      	b.n	8009f16 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 f856 	bl	800afc0 <vQueueDelete>

  return osOK; 
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009f1e:	b590      	push	{r4, r7, lr}
 8009f20:	b085      	sub	sp, #20
 8009f22:	af02      	add	r7, sp, #8
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d011      	beq.n	8009f54 <osMessageCreate+0x36>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00d      	beq.n	8009f54 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6859      	ldr	r1, [r3, #4]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2400      	movs	r4, #0
 8009f4a:	9400      	str	r4, [sp, #0]
 8009f4c:	f000 fa0c 	bl	800a368 <xQueueGenericCreateStatic>
 8009f50:	4603      	mov	r3, r0
 8009f52:	e008      	b.n	8009f66 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6818      	ldr	r0, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f000 fa84 	bl	800a46c <xQueueGenericCreate>
 8009f64:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd90      	pop	{r4, r7, pc}
	...

08009f70 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <osMessagePut+0x1e>
    ticks = 1;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009f8e:	f7ff fdec 	bl	8009b6a <inHandlerMode>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d018      	beq.n	8009fca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009f98:	f107 0210 	add.w	r2, r7, #16
 8009f9c:	f107 0108 	add.w	r1, r7, #8
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 fc16 	bl	800a7d4 <xQueueGenericSendFromISR>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d001      	beq.n	8009fb2 <osMessagePut+0x42>
      return osErrorOS;
 8009fae:	23ff      	movs	r3, #255	; 0xff
 8009fb0:	e018      	b.n	8009fe4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d014      	beq.n	8009fe2 <osMessagePut+0x72>
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <osMessagePut+0x7c>)
 8009fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	e00b      	b.n	8009fe2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009fca:	f107 0108 	add.w	r1, r7, #8
 8009fce:	2300      	movs	r3, #0
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 faf8 	bl	800a5c8 <xQueueGenericSend>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d001      	beq.n	8009fe2 <osMessagePut+0x72>
      return osErrorOS;
 8009fde:	23ff      	movs	r3, #255	; 0xff
 8009fe0:	e000      	b.n	8009fe4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009ff0:	b590      	push	{r4, r7, lr}
 8009ff2:	b08b      	sub	sp, #44	; 0x2c
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10a      	bne.n	800a020 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a00a:	2380      	movs	r3, #128	; 0x80
 800a00c:	617b      	str	r3, [r7, #20]
    return event;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	461c      	mov	r4, r3
 800a012:	f107 0314 	add.w	r3, r7, #20
 800a016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a01a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a01e:	e054      	b.n	800a0ca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a020:	2300      	movs	r3, #0
 800a022:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02e:	d103      	bne.n	800a038 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a030:	f04f 33ff 	mov.w	r3, #4294967295
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
 800a036:	e009      	b.n	800a04c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d006      	beq.n	800a04c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <osMessageGet+0x5c>
      ticks = 1;
 800a048:	2301      	movs	r3, #1
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a04c:	f7ff fd8d 	bl	8009b6a <inHandlerMode>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01c      	beq.n	800a090 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a056:	f107 0220 	add.w	r2, r7, #32
 800a05a:	f107 0314 	add.w	r3, r7, #20
 800a05e:	3304      	adds	r3, #4
 800a060:	4619      	mov	r1, r3
 800a062:	68b8      	ldr	r0, [r7, #8]
 800a064:	f000 fee6 	bl	800ae34 <xQueueReceiveFromISR>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d102      	bne.n	800a074 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a06e:	2310      	movs	r3, #16
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	e001      	b.n	800a078 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a074:	2300      	movs	r3, #0
 800a076:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d01d      	beq.n	800a0ba <osMessageGet+0xca>
 800a07e:	4b15      	ldr	r3, [pc, #84]	; (800a0d4 <osMessageGet+0xe4>)
 800a080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	e014      	b.n	800a0ba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a090:	f107 0314 	add.w	r3, r7, #20
 800a094:	3304      	adds	r3, #4
 800a096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a098:	4619      	mov	r1, r3
 800a09a:	68b8      	ldr	r0, [r7, #8]
 800a09c:	f000 fcd0 	bl	800aa40 <xQueueReceive>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d102      	bne.n	800a0ac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a0a6:	2310      	movs	r3, #16
 800a0a8:	617b      	str	r3, [r7, #20]
 800a0aa:	e006      	b.n	800a0ba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <osMessageGet+0xc6>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e000      	b.n	800a0b8 <osMessageGet+0xc8>
 800a0b6:	2340      	movs	r3, #64	; 0x40
 800a0b8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	461c      	mov	r4, r3
 800a0be:	f107 0314 	add.w	r3, r7, #20
 800a0c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	372c      	adds	r7, #44	; 0x2c
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd90      	pop	{r4, r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	e000ed04 	.word	0xe000ed04

0800a0d8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a0e0:	f7ff fd43 	bl	8009b6a <inHandlerMode>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d004      	beq.n	800a0f4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 ff48 	bl	800af80 <uxQueueMessagesWaitingFromISR>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	e003      	b.n	800a0fc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 ff23 	bl	800af40 <uxQueueMessagesWaiting>
 800a0fa:	4603      	mov	r3, r0
  }
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a10c:	f7ff fd2d 	bl	8009b6a <inHandlerMode>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <osMessageDelete+0x16>
    return osErrorISR;
 800a116:	2382      	movs	r3, #130	; 0x82
 800a118:	e003      	b.n	800a122 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 ff50 	bl	800afc0 <vQueueDelete>

  return osOK; 
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f103 0208 	add.w	r2, r3, #8
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f04f 32ff 	mov.w	r2, #4294967295
 800a142:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f103 0208 	add.w	r2, r3, #8
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f103 0208 	add.w	r2, r3, #8
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a16a:	b480      	push	{r7}
 800a16c:	b083      	sub	sp, #12
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	601a      	str	r2, [r3, #0]
}
 800a1c0:	bf00      	nop
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e2:	d103      	bne.n	800a1ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	60fb      	str	r3, [r7, #12]
 800a1ea:	e00c      	b.n	800a206 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e002      	b.n	800a1fa <vListInsert+0x2e>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	429a      	cmp	r2, r3
 800a204:	d2f6      	bcs.n	800a1f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	601a      	str	r2, [r3, #0]
}
 800a232:	bf00      	nop
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a23e:	b480      	push	{r7}
 800a240:	b085      	sub	sp, #20
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6892      	ldr	r2, [r2, #8]
 800a254:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6852      	ldr	r2, [r2, #4]
 800a25e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	429a      	cmp	r2, r3
 800a268:	d103      	bne.n	800a272 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	1e5a      	subs	r2, r3, #1
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
	...

0800a294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10c      	bne.n	800a2c2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	b672      	cpsid	i
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	b662      	cpsie	i
 800a2bc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a2c2:	f002 f913 	bl	800c4ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ce:	68f9      	ldr	r1, [r7, #12]
 800a2d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2d2:	fb01 f303 	mul.w	r3, r1, r3
 800a2d6:	441a      	add	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	68f9      	ldr	r1, [r7, #12]
 800a2f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2f8:	fb01 f303 	mul.w	r3, r1, r3
 800a2fc:	441a      	add	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	22ff      	movs	r2, #255	; 0xff
 800a306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	22ff      	movs	r2, #255	; 0xff
 800a30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d114      	bne.n	800a342 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01a      	beq.n	800a356 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3310      	adds	r3, #16
 800a324:	4618      	mov	r0, r3
 800a326:	f001 fbcf 	bl	800bac8 <xTaskRemoveFromEventList>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d012      	beq.n	800a356 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a330:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <xQueueGenericReset+0xd0>)
 800a332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	e009      	b.n	800a356 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3310      	adds	r3, #16
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff feef 	bl	800a12a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3324      	adds	r3, #36	; 0x24
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff feea 	bl	800a12a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a356:	f002 f8fd 	bl	800c554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a35a:	2301      	movs	r3, #1
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	e000ed04 	.word	0xe000ed04

0800a368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08e      	sub	sp, #56	; 0x38
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10c      	bne.n	800a396 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	b672      	cpsid	i
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	b662      	cpsie	i
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10c      	bne.n	800a3b6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	b672      	cpsid	i
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	b662      	cpsie	i
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <xQueueGenericCreateStatic+0x5a>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <xQueueGenericCreateStatic+0x5e>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <xQueueGenericCreateStatic+0x60>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10c      	bne.n	800a3e6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	b672      	cpsid	i
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	b662      	cpsie	i
 800a3e0:	623b      	str	r3, [r7, #32]
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d102      	bne.n	800a3f2 <xQueueGenericCreateStatic+0x8a>
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <xQueueGenericCreateStatic+0x8e>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e000      	b.n	800a3f8 <xQueueGenericCreateStatic+0x90>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10c      	bne.n	800a416 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	b672      	cpsid	i
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	b662      	cpsie	i
 800a410:	61fb      	str	r3, [r7, #28]
}
 800a412:	bf00      	nop
 800a414:	e7fe      	b.n	800a414 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a416:	2348      	movs	r3, #72	; 0x48
 800a418:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	2b48      	cmp	r3, #72	; 0x48
 800a41e:	d00c      	beq.n	800a43a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	b672      	cpsid	i
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	b662      	cpsie	i
 800a434:	61bb      	str	r3, [r7, #24]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a43a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00d      	beq.n	800a462 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a44e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	4613      	mov	r3, r2
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f847 	bl	800a4f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a464:	4618      	mov	r0, r3
 800a466:	3730      	adds	r7, #48	; 0x30
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08a      	sub	sp, #40	; 0x28
 800a470:	af02      	add	r7, sp, #8
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	4613      	mov	r3, r2
 800a478:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10c      	bne.n	800a49a <xQueueGenericCreate+0x2e>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	b672      	cpsid	i
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	b662      	cpsie	i
 800a494:	613b      	str	r3, [r7, #16]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61fb      	str	r3, [r7, #28]
 800a4a4:	e004      	b.n	800a4b0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	fb02 f303 	mul.w	r3, r2, r3
 800a4ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	3348      	adds	r3, #72	; 0x48
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f002 f945 	bl	800c744 <pvPortMalloc>
 800a4ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d011      	beq.n	800a4e6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	3348      	adds	r3, #72	; 0x48
 800a4ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4d4:	79fa      	ldrb	r2, [r7, #7]
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	68b9      	ldr	r1, [r7, #8]
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 f805 	bl	800a4f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4e6:	69bb      	ldr	r3, [r7, #24]
	}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3720      	adds	r7, #32
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d103      	bne.n	800a50c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	e002      	b.n	800a512 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a51e:	2101      	movs	r1, #1
 800a520:	69b8      	ldr	r0, [r7, #24]
 800a522:	f7ff feb7 	bl	800a294 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a526:	bf00      	nop
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00e      	beq.n	800a55a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a54e:	2300      	movs	r3, #0
 800a550:	2200      	movs	r2, #0
 800a552:	2100      	movs	r1, #0
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f837 	bl	800a5c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a562:	b580      	push	{r7, lr}
 800a564:	b086      	sub	sp, #24
 800a566:	af00      	add	r7, sp, #0
 800a568:	4603      	mov	r3, r0
 800a56a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a56c:	2301      	movs	r3, #1
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	2300      	movs	r3, #0
 800a572:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	461a      	mov	r2, r3
 800a578:	6939      	ldr	r1, [r7, #16]
 800a57a:	6978      	ldr	r0, [r7, #20]
 800a57c:	f7ff ff76 	bl	800a46c <xQueueGenericCreate>
 800a580:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff ffd3 	bl	800a52e <prvInitialiseMutex>

		return xNewQueue;
 800a588:	68fb      	ldr	r3, [r7, #12]
	}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a592:	b580      	push	{r7, lr}
 800a594:	b088      	sub	sp, #32
 800a596:	af02      	add	r7, sp, #8
 800a598:	4603      	mov	r3, r0
 800a59a:	6039      	str	r1, [r7, #0]
 800a59c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	617b      	str	r3, [r7, #20]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	6939      	ldr	r1, [r7, #16]
 800a5b0:	6978      	ldr	r0, [r7, #20]
 800a5b2:	f7ff fed9 	bl	800a368 <xQueueGenericCreateStatic>
 800a5b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7ff ffb8 	bl	800a52e <prvInitialiseMutex>

		return xNewQueue;
 800a5be:	68fb      	ldr	r3, [r7, #12]
	}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08e      	sub	sp, #56	; 0x38
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10c      	bne.n	800a5fe <xQueueGenericSend+0x36>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	b672      	cpsid	i
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	b662      	cpsie	i
 800a5f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <xQueueGenericSend+0x44>
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <xQueueGenericSend+0x48>
 800a60c:	2301      	movs	r3, #1
 800a60e:	e000      	b.n	800a612 <xQueueGenericSend+0x4a>
 800a610:	2300      	movs	r3, #0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10c      	bne.n	800a630 <xQueueGenericSend+0x68>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	b672      	cpsid	i
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	b662      	cpsie	i
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d103      	bne.n	800a63e <xQueueGenericSend+0x76>
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d101      	bne.n	800a642 <xQueueGenericSend+0x7a>
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <xQueueGenericSend+0x7c>
 800a642:	2300      	movs	r3, #0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10c      	bne.n	800a662 <xQueueGenericSend+0x9a>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	b672      	cpsid	i
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	b662      	cpsie	i
 800a65c:	623b      	str	r3, [r7, #32]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a662:	f001 fbf5 	bl	800be50 <xTaskGetSchedulerState>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d102      	bne.n	800a672 <xQueueGenericSend+0xaa>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <xQueueGenericSend+0xae>
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <xQueueGenericSend+0xb0>
 800a676:	2300      	movs	r3, #0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10c      	bne.n	800a696 <xQueueGenericSend+0xce>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	b672      	cpsid	i
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	b662      	cpsie	i
 800a690:	61fb      	str	r3, [r7, #28]
}
 800a692:	bf00      	nop
 800a694:	e7fe      	b.n	800a694 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a696:	f001 ff29 	bl	800c4ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d302      	bcc.n	800a6ac <xQueueGenericSend+0xe4>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d129      	bne.n	800a700 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6b2:	f000 fcc2 	bl	800b03a <prvCopyDataToQueue>
 800a6b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d010      	beq.n	800a6e2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c2:	3324      	adds	r3, #36	; 0x24
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f001 f9ff 	bl	800bac8 <xTaskRemoveFromEventList>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d013      	beq.n	800a6f8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6d0:	4b3f      	ldr	r3, [pc, #252]	; (800a7d0 <xQueueGenericSend+0x208>)
 800a6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	e00a      	b.n	800a6f8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d007      	beq.n	800a6f8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6e8:	4b39      	ldr	r3, [pc, #228]	; (800a7d0 <xQueueGenericSend+0x208>)
 800a6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6f8:	f001 ff2c 	bl	800c554 <vPortExitCritical>
				return pdPASS;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e063      	b.n	800a7c8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d103      	bne.n	800a70e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a706:	f001 ff25 	bl	800c554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e05c      	b.n	800a7c8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a710:	2b00      	cmp	r3, #0
 800a712:	d106      	bne.n	800a722 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a714:	f107 0314 	add.w	r3, r7, #20
 800a718:	4618      	mov	r0, r3
 800a71a:	f001 fa39 	bl	800bb90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a71e:	2301      	movs	r3, #1
 800a720:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a722:	f001 ff17 	bl	800c554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a726:	f000 ffc3 	bl	800b6b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a72a:	f001 fedf 	bl	800c4ec <vPortEnterCritical>
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a734:	b25b      	sxtb	r3, r3
 800a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73a:	d103      	bne.n	800a744 <xQueueGenericSend+0x17c>
 800a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a74a:	b25b      	sxtb	r3, r3
 800a74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a750:	d103      	bne.n	800a75a <xQueueGenericSend+0x192>
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a75a:	f001 fefb 	bl	800c554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a75e:	1d3a      	adds	r2, r7, #4
 800a760:	f107 0314 	add.w	r3, r7, #20
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f001 fa28 	bl	800bbbc <xTaskCheckForTimeOut>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d124      	bne.n	800a7bc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a774:	f000 fd59 	bl	800b22a <prvIsQueueFull>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d018      	beq.n	800a7b0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	3310      	adds	r3, #16
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f001 f978 	bl	800ba7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a78c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a78e:	f000 fce4 	bl	800b15a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a792:	f000 ff9b 	bl	800b6cc <xTaskResumeAll>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f47f af7c 	bne.w	800a696 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a79e:	4b0c      	ldr	r3, [pc, #48]	; (800a7d0 <xQueueGenericSend+0x208>)
 800a7a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	e772      	b.n	800a696 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7b2:	f000 fcd2 	bl	800b15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7b6:	f000 ff89 	bl	800b6cc <xTaskResumeAll>
 800a7ba:	e76c      	b.n	800a696 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7be:	f000 fccc 	bl	800b15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7c2:	f000 ff83 	bl	800b6cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3738      	adds	r7, #56	; 0x38
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	; 0x38
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10c      	bne.n	800a806 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	b672      	cpsid	i
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	b662      	cpsie	i
 800a800:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <xQueueGenericSendFromISR+0x40>
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <xQueueGenericSendFromISR+0x44>
 800a814:	2301      	movs	r3, #1
 800a816:	e000      	b.n	800a81a <xQueueGenericSendFromISR+0x46>
 800a818:	2300      	movs	r3, #0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10c      	bne.n	800a838 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	b672      	cpsid	i
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	b662      	cpsie	i
 800a832:	623b      	str	r3, [r7, #32]
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d103      	bne.n	800a846 <xQueueGenericSendFromISR+0x72>
 800a83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <xQueueGenericSendFromISR+0x76>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <xQueueGenericSendFromISR+0x78>
 800a84a:	2300      	movs	r3, #0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10c      	bne.n	800a86a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	b672      	cpsid	i
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	b662      	cpsie	i
 800a864:	61fb      	str	r3, [r7, #28]
}
 800a866:	bf00      	nop
 800a868:	e7fe      	b.n	800a868 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a86a:	f001 ff27 	bl	800c6bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a86e:	f3ef 8211 	mrs	r2, BASEPRI
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	b672      	cpsid	i
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	b662      	cpsie	i
 800a886:	61ba      	str	r2, [r7, #24]
 800a888:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a88a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a896:	429a      	cmp	r2, r3
 800a898:	d302      	bcc.n	800a8a0 <xQueueGenericSendFromISR+0xcc>
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d12c      	bne.n	800a8fa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8b0:	f000 fbc3 	bl	800b03a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8bc:	d112      	bne.n	800a8e4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d016      	beq.n	800a8f4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	3324      	adds	r3, #36	; 0x24
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f001 f8fc 	bl	800bac8 <xTaskRemoveFromEventList>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00e      	beq.n	800a8f4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00b      	beq.n	800a8f4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	e007      	b.n	800a8f4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	b25a      	sxtb	r2, r3
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a8f8:	e001      	b.n	800a8fe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a908:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3738      	adds	r7, #56	; 0x38
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08e      	sub	sp, #56	; 0x38
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10c      	bne.n	800a942 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	b672      	cpsid	i
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	b662      	cpsie	i
 800a93c:	623b      	str	r3, [r7, #32]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00c      	beq.n	800a964 <xQueueGiveFromISR+0x50>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	b672      	cpsid	i
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	b662      	cpsie	i
 800a95e:	61fb      	str	r3, [r7, #28]
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d103      	bne.n	800a974 <xQueueGiveFromISR+0x60>
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <xQueueGiveFromISR+0x64>
 800a974:	2301      	movs	r3, #1
 800a976:	e000      	b.n	800a97a <xQueueGiveFromISR+0x66>
 800a978:	2300      	movs	r3, #0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10c      	bne.n	800a998 <xQueueGiveFromISR+0x84>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	b672      	cpsid	i
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	b662      	cpsie	i
 800a992:	61bb      	str	r3, [r7, #24]
}
 800a994:	bf00      	nop
 800a996:	e7fe      	b.n	800a996 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a998:	f001 fe90 	bl	800c6bc <vPortValidateInterruptPriority>
	__asm volatile
 800a99c:	f3ef 8211 	mrs	r2, BASEPRI
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	b672      	cpsid	i
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	b662      	cpsie	i
 800a9b4:	617a      	str	r2, [r7, #20]
 800a9b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a9b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d22b      	bcs.n	800aa24 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e6:	d112      	bne.n	800aa0e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d016      	beq.n	800aa1e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	3324      	adds	r3, #36	; 0x24
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 f867 	bl	800bac8 <xTaskRemoveFromEventList>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00e      	beq.n	800aa1e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	e007      	b.n	800aa1e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa12:	3301      	adds	r3, #1
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	b25a      	sxtb	r2, r3
 800aa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	637b      	str	r3, [r7, #52]	; 0x34
 800aa22:	e001      	b.n	800aa28 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	637b      	str	r3, [r7, #52]	; 0x34
 800aa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f383 8811 	msr	BASEPRI, r3
}
 800aa32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3738      	adds	r7, #56	; 0x38
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08c      	sub	sp, #48	; 0x30
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10c      	bne.n	800aa74 <xQueueReceive+0x34>
	__asm volatile
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	b672      	cpsid	i
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	b662      	cpsie	i
 800aa6e:	623b      	str	r3, [r7, #32]
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d103      	bne.n	800aa82 <xQueueReceive+0x42>
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <xQueueReceive+0x46>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <xQueueReceive+0x48>
 800aa86:	2300      	movs	r3, #0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10c      	bne.n	800aaa6 <xQueueReceive+0x66>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	b672      	cpsid	i
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	b662      	cpsie	i
 800aaa0:	61fb      	str	r3, [r7, #28]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaa6:	f001 f9d3 	bl	800be50 <xTaskGetSchedulerState>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <xQueueReceive+0x76>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d101      	bne.n	800aaba <xQueueReceive+0x7a>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e000      	b.n	800aabc <xQueueReceive+0x7c>
 800aaba:	2300      	movs	r3, #0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10c      	bne.n	800aada <xQueueReceive+0x9a>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac4:	b672      	cpsid	i
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	b662      	cpsie	i
 800aad4:	61bb      	str	r3, [r7, #24]
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aada:	f001 fd07 	bl	800c4ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d01f      	beq.n	800ab2a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaee:	f000 fb0e 	bl	800b10e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf4:	1e5a      	subs	r2, r3, #1
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00f      	beq.n	800ab22 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	3310      	adds	r3, #16
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 ffde 	bl	800bac8 <xTaskRemoveFromEventList>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab12:	4b3d      	ldr	r3, [pc, #244]	; (800ac08 <xQueueReceive+0x1c8>)
 800ab14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab22:	f001 fd17 	bl	800c554 <vPortExitCritical>
				return pdPASS;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e069      	b.n	800abfe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d103      	bne.n	800ab38 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab30:	f001 fd10 	bl	800c554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab34:	2300      	movs	r3, #0
 800ab36:	e062      	b.n	800abfe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab3e:	f107 0310 	add.w	r3, r7, #16
 800ab42:	4618      	mov	r0, r3
 800ab44:	f001 f824 	bl	800bb90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab4c:	f001 fd02 	bl	800c554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab50:	f000 fdae 	bl	800b6b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab54:	f001 fcca 	bl	800c4ec <vPortEnterCritical>
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab5e:	b25b      	sxtb	r3, r3
 800ab60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab64:	d103      	bne.n	800ab6e <xQueueReceive+0x12e>
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab74:	b25b      	sxtb	r3, r3
 800ab76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7a:	d103      	bne.n	800ab84 <xQueueReceive+0x144>
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab84:	f001 fce6 	bl	800c554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab88:	1d3a      	adds	r2, r7, #4
 800ab8a:	f107 0310 	add.w	r3, r7, #16
 800ab8e:	4611      	mov	r1, r2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 f813 	bl	800bbbc <xTaskCheckForTimeOut>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d123      	bne.n	800abe4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab9e:	f000 fb2e 	bl	800b1fe <prvIsQueueEmpty>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d017      	beq.n	800abd8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	3324      	adds	r3, #36	; 0x24
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	4611      	mov	r1, r2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 ff63 	bl	800ba7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abb8:	f000 facf 	bl	800b15a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abbc:	f000 fd86 	bl	800b6cc <xTaskResumeAll>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d189      	bne.n	800aada <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800abc6:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <xQueueReceive+0x1c8>)
 800abc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	e780      	b.n	800aada <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abda:	f000 fabe 	bl	800b15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abde:	f000 fd75 	bl	800b6cc <xTaskResumeAll>
 800abe2:	e77a      	b.n	800aada <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe6:	f000 fab8 	bl	800b15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abea:	f000 fd6f 	bl	800b6cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf0:	f000 fb05 	bl	800b1fe <prvIsQueueEmpty>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f43f af6f 	beq.w	800aada <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3730      	adds	r7, #48	; 0x30
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08e      	sub	sp, #56	; 0x38
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac16:	2300      	movs	r3, #0
 800ac18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10c      	bne.n	800ac42 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	b672      	cpsid	i
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	b662      	cpsie	i
 800ac3c:	623b      	str	r3, [r7, #32]
}
 800ac3e:	bf00      	nop
 800ac40:	e7fe      	b.n	800ac40 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00c      	beq.n	800ac64 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	b672      	cpsid	i
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	b662      	cpsie	i
 800ac5e:	61fb      	str	r3, [r7, #28]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac64:	f001 f8f4 	bl	800be50 <xTaskGetSchedulerState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <xQueueSemaphoreTake+0x68>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <xQueueSemaphoreTake+0x6c>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e000      	b.n	800ac7a <xQueueSemaphoreTake+0x6e>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10c      	bne.n	800ac98 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	b672      	cpsid	i
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	b662      	cpsie	i
 800ac92:	61bb      	str	r3, [r7, #24]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac98:	f001 fc28 	bl	800c4ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d024      	beq.n	800acf2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	1e5a      	subs	r2, r3, #1
 800acac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d104      	bne.n	800acc2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800acb8:	f001 fa90 	bl	800c1dc <pvTaskIncrementMutexHeldCount>
 800acbc:	4602      	mov	r2, r0
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00f      	beq.n	800acea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	3310      	adds	r3, #16
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 fefa 	bl	800bac8 <xTaskRemoveFromEventList>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d007      	beq.n	800acea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acda:	4b55      	ldr	r3, [pc, #340]	; (800ae30 <xQueueSemaphoreTake+0x224>)
 800acdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace0:	601a      	str	r2, [r3, #0]
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acea:	f001 fc33 	bl	800c554 <vPortExitCritical>
				return pdPASS;
 800acee:	2301      	movs	r3, #1
 800acf0:	e099      	b.n	800ae26 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d113      	bne.n	800ad20 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00c      	beq.n	800ad18 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad02:	b672      	cpsid	i
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	b662      	cpsie	i
 800ad12:	617b      	str	r3, [r7, #20]
}
 800ad14:	bf00      	nop
 800ad16:	e7fe      	b.n	800ad16 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad18:	f001 fc1c 	bl	800c554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e082      	b.n	800ae26 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad26:	f107 030c 	add.w	r3, r7, #12
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 ff30 	bl	800bb90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad30:	2301      	movs	r3, #1
 800ad32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad34:	f001 fc0e 	bl	800c554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad38:	f000 fcba 	bl	800b6b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad3c:	f001 fbd6 	bl	800c4ec <vPortEnterCritical>
 800ad40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad46:	b25b      	sxtb	r3, r3
 800ad48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4c:	d103      	bne.n	800ad56 <xQueueSemaphoreTake+0x14a>
 800ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad5c:	b25b      	sxtb	r3, r3
 800ad5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad62:	d103      	bne.n	800ad6c <xQueueSemaphoreTake+0x160>
 800ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad6c:	f001 fbf2 	bl	800c554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad70:	463a      	mov	r2, r7
 800ad72:	f107 030c 	add.w	r3, r7, #12
 800ad76:	4611      	mov	r1, r2
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 ff1f 	bl	800bbbc <xTaskCheckForTimeOut>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d132      	bne.n	800adea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad86:	f000 fa3a 	bl	800b1fe <prvIsQueueEmpty>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d026      	beq.n	800adde <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d109      	bne.n	800adac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ad98:	f001 fba8 	bl	800c4ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f001 f873 	bl	800be8c <xTaskPriorityInherit>
 800ada6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ada8:	f001 fbd4 	bl	800c554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	3324      	adds	r3, #36	; 0x24
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	4611      	mov	r1, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f000 fe61 	bl	800ba7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adbc:	f000 f9cd 	bl	800b15a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adc0:	f000 fc84 	bl	800b6cc <xTaskResumeAll>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f47f af66 	bne.w	800ac98 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800adcc:	4b18      	ldr	r3, [pc, #96]	; (800ae30 <xQueueSemaphoreTake+0x224>)
 800adce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	e75c      	b.n	800ac98 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800adde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ade0:	f000 f9bb 	bl	800b15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ade4:	f000 fc72 	bl	800b6cc <xTaskResumeAll>
 800ade8:	e756      	b.n	800ac98 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800adea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adec:	f000 f9b5 	bl	800b15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adf0:	f000 fc6c 	bl	800b6cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adf6:	f000 fa02 	bl	800b1fe <prvIsQueueEmpty>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f43f af4b 	beq.w	800ac98 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00d      	beq.n	800ae24 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ae08:	f001 fb70 	bl	800c4ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae0e:	f000 f8fc 	bl	800b00a <prvGetDisinheritPriorityAfterTimeout>
 800ae12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f001 f940 	bl	800c0a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae20:	f001 fb98 	bl	800c554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3738      	adds	r7, #56	; 0x38
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08e      	sub	sp, #56	; 0x38
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10c      	bne.n	800ae64 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	b672      	cpsid	i
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	b662      	cpsie	i
 800ae5e:	623b      	str	r3, [r7, #32]
}
 800ae60:	bf00      	nop
 800ae62:	e7fe      	b.n	800ae62 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d103      	bne.n	800ae72 <xQueueReceiveFromISR+0x3e>
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <xQueueReceiveFromISR+0x42>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e000      	b.n	800ae78 <xQueueReceiveFromISR+0x44>
 800ae76:	2300      	movs	r3, #0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10c      	bne.n	800ae96 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	b672      	cpsid	i
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	b662      	cpsie	i
 800ae90:	61fb      	str	r3, [r7, #28]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae96:	f001 fc11 	bl	800c6bc <vPortValidateInterruptPriority>
	__asm volatile
 800ae9a:	f3ef 8211 	mrs	r2, BASEPRI
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	b672      	cpsid	i
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	b662      	cpsie	i
 800aeb2:	61ba      	str	r2, [r7, #24]
 800aeb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aeb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aeb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d02f      	beq.n	800af26 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed4:	f000 f91b 	bl	800b10e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	1e5a      	subs	r2, r3, #1
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee8:	d112      	bne.n	800af10 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d016      	beq.n	800af20 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	3310      	adds	r3, #16
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fde6 	bl	800bac8 <xTaskRemoveFromEventList>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00e      	beq.n	800af20 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	e007      	b.n	800af20 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af14:	3301      	adds	r3, #1
 800af16:	b2db      	uxtb	r3, r3
 800af18:	b25a      	sxtb	r2, r3
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af20:	2301      	movs	r3, #1
 800af22:	637b      	str	r3, [r7, #52]	; 0x34
 800af24:	e001      	b.n	800af2a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800af26:	2300      	movs	r3, #0
 800af28:	637b      	str	r3, [r7, #52]	; 0x34
 800af2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	f383 8811 	msr	BASEPRI, r3
}
 800af34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3738      	adds	r7, #56	; 0x38
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10c      	bne.n	800af68 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	b672      	cpsid	i
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	b662      	cpsie	i
 800af62:	60bb      	str	r3, [r7, #8]
}
 800af64:	bf00      	nop
 800af66:	e7fe      	b.n	800af66 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800af68:	f001 fac0 	bl	800c4ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af70:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800af72:	f001 faef 	bl	800c554 <vPortExitCritical>

	return uxReturn;
 800af76:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800af80:	b480      	push	{r7}
 800af82:	b087      	sub	sp, #28
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10c      	bne.n	800afac <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	b672      	cpsid	i
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	b662      	cpsie	i
 800afa6:	60fb      	str	r3, [r7, #12]
}
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800afb2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800afb4:	4618      	mov	r0, r3
 800afb6:	371c      	adds	r7, #28
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10c      	bne.n	800afec <vQueueDelete+0x2c>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	b672      	cpsid	i
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	b662      	cpsie	i
 800afe6:	60bb      	str	r3, [r7, #8]
}
 800afe8:	bf00      	nop
 800afea:	e7fe      	b.n	800afea <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 f935 	bl	800b25c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f001 fc6b 	bl	800c8d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b002:	bf00      	nop
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b00a:	b480      	push	{r7}
 800b00c:	b085      	sub	sp, #20
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	2b00      	cmp	r3, #0
 800b018:	d006      	beq.n	800b028 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f1c3 0307 	rsb	r3, r3, #7
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	e001      	b.n	800b02c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b02c:	68fb      	ldr	r3, [r7, #12]
	}
 800b02e:	4618      	mov	r0, r3
 800b030:	3714      	adds	r7, #20
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b086      	sub	sp, #24
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10d      	bne.n	800b074 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d14d      	bne.n	800b0fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	4618      	mov	r0, r3
 800b066:	f000 ff91 	bl	800bf8c <xTaskPriorityDisinherit>
 800b06a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	609a      	str	r2, [r3, #8]
 800b072:	e043      	b.n	800b0fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d119      	bne.n	800b0ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6858      	ldr	r0, [r3, #4]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b082:	461a      	mov	r2, r3
 800b084:	68b9      	ldr	r1, [r7, #8]
 800b086:	f010 f9a3 	bl	801b3d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	441a      	add	r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d32b      	bcc.n	800b0fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	605a      	str	r2, [r3, #4]
 800b0ac:	e026      	b.n	800b0fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	68d8      	ldr	r0, [r3, #12]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	f010 f989 	bl	801b3d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	68da      	ldr	r2, [r3, #12]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	425b      	negs	r3, r3
 800b0c8:	441a      	add	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	68da      	ldr	r2, [r3, #12]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d207      	bcs.n	800b0ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	425b      	negs	r3, r3
 800b0e4:	441a      	add	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d105      	bne.n	800b0fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b104:	697b      	ldr	r3, [r7, #20]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d018      	beq.n	800b152 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68da      	ldr	r2, [r3, #12]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	441a      	add	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68da      	ldr	r2, [r3, #12]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	429a      	cmp	r2, r3
 800b138:	d303      	bcc.n	800b142 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68d9      	ldr	r1, [r3, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14a:	461a      	mov	r2, r3
 800b14c:	6838      	ldr	r0, [r7, #0]
 800b14e:	f010 f93f 	bl	801b3d0 <memcpy>
	}
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b162:	f001 f9c3 	bl	800c4ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b16c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b16e:	e011      	b.n	800b194 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d012      	beq.n	800b19e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3324      	adds	r3, #36	; 0x24
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fca3 	bl	800bac8 <xTaskRemoveFromEventList>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b188:	f000 fd7e 	bl	800bc88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	3b01      	subs	r3, #1
 800b190:	b2db      	uxtb	r3, r3
 800b192:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dce9      	bgt.n	800b170 <prvUnlockQueue+0x16>
 800b19c:	e000      	b.n	800b1a0 <prvUnlockQueue+0x46>
					break;
 800b19e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	22ff      	movs	r2, #255	; 0xff
 800b1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b1a8:	f001 f9d4 	bl	800c554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b1ac:	f001 f99e 	bl	800c4ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1b8:	e011      	b.n	800b1de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d012      	beq.n	800b1e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3310      	adds	r3, #16
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fc7e 	bl	800bac8 <xTaskRemoveFromEventList>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1d2:	f000 fd59 	bl	800bc88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dce9      	bgt.n	800b1ba <prvUnlockQueue+0x60>
 800b1e6:	e000      	b.n	800b1ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	22ff      	movs	r2, #255	; 0xff
 800b1ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1f2:	f001 f9af 	bl	800c554 <vPortExitCritical>
}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b206:	f001 f971 	bl	800c4ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d102      	bne.n	800b218 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b212:	2301      	movs	r3, #1
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e001      	b.n	800b21c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b21c:	f001 f99a 	bl	800c554 <vPortExitCritical>

	return xReturn;
 800b220:	68fb      	ldr	r3, [r7, #12]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b232:	f001 f95b 	bl	800c4ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b23e:	429a      	cmp	r2, r3
 800b240:	d102      	bne.n	800b248 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b242:	2301      	movs	r3, #1
 800b244:	60fb      	str	r3, [r7, #12]
 800b246:	e001      	b.n	800b24c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b24c:	f001 f982 	bl	800c554 <vPortExitCritical>

	return xReturn;
 800b250:	68fb      	ldr	r3, [r7, #12]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b264:	2300      	movs	r3, #0
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	e016      	b.n	800b298 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b26a:	4a10      	ldr	r2, [pc, #64]	; (800b2ac <vQueueUnregisterQueue+0x50>)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	4413      	add	r3, r2
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	429a      	cmp	r2, r3
 800b278:	d10b      	bne.n	800b292 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b27a:	4a0c      	ldr	r2, [pc, #48]	; (800b2ac <vQueueUnregisterQueue+0x50>)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2100      	movs	r1, #0
 800b280:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b284:	4a09      	ldr	r2, [pc, #36]	; (800b2ac <vQueueUnregisterQueue+0x50>)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	00db      	lsls	r3, r3, #3
 800b28a:	4413      	add	r3, r2
 800b28c:	2200      	movs	r2, #0
 800b28e:	605a      	str	r2, [r3, #4]
				break;
 800b290:	e006      	b.n	800b2a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3301      	adds	r3, #1
 800b296:	60fb      	str	r3, [r7, #12]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b07      	cmp	r3, #7
 800b29c:	d9e5      	bls.n	800b26a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b29e:	bf00      	nop
 800b2a0:	bf00      	nop
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	200086f0 	.word	0x200086f0

0800b2b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08e      	sub	sp, #56	; 0x38
 800b2b4:	af04      	add	r7, sp, #16
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10c      	bne.n	800b2de <xTaskCreateStatic+0x2e>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	b672      	cpsid	i
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	b662      	cpsie	i
 800b2d8:	623b      	str	r3, [r7, #32]
}
 800b2da:	bf00      	nop
 800b2dc:	e7fe      	b.n	800b2dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10c      	bne.n	800b2fe <xTaskCreateStatic+0x4e>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	b672      	cpsid	i
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	b662      	cpsie	i
 800b2f8:	61fb      	str	r3, [r7, #28]
}
 800b2fa:	bf00      	nop
 800b2fc:	e7fe      	b.n	800b2fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2fe:	2354      	movs	r3, #84	; 0x54
 800b300:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b54      	cmp	r3, #84	; 0x54
 800b306:	d00c      	beq.n	800b322 <xTaskCreateStatic+0x72>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	b672      	cpsid	i
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	b662      	cpsie	i
 800b31c:	61bb      	str	r3, [r7, #24]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b322:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	2b00      	cmp	r3, #0
 800b328:	d01e      	beq.n	800b368 <xTaskCreateStatic+0xb8>
 800b32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d01b      	beq.n	800b368 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b332:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b338:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	2202      	movs	r2, #2
 800b33e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b342:	2300      	movs	r3, #0
 800b344:	9303      	str	r3, [sp, #12]
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	9302      	str	r3, [sp, #8]
 800b34a:	f107 0314 	add.w	r3, r7, #20
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	68b9      	ldr	r1, [r7, #8]
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f000 f850 	bl	800b400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b362:	f000 f8d7 	bl	800b514 <prvAddNewTaskToReadyList>
 800b366:	e001      	b.n	800b36c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b36c:	697b      	ldr	r3, [r7, #20]
	}
 800b36e:	4618      	mov	r0, r3
 800b370:	3728      	adds	r7, #40	; 0x28
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b376:	b580      	push	{r7, lr}
 800b378:	b08c      	sub	sp, #48	; 0x30
 800b37a:	af04      	add	r7, sp, #16
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	60b9      	str	r1, [r7, #8]
 800b380:	603b      	str	r3, [r7, #0]
 800b382:	4613      	mov	r3, r2
 800b384:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b386:	88fb      	ldrh	r3, [r7, #6]
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f001 f9da 	bl	800c744 <pvPortMalloc>
 800b390:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00e      	beq.n	800b3b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b398:	2054      	movs	r0, #84	; 0x54
 800b39a:	f001 f9d3 	bl	800c744 <pvPortMalloc>
 800b39e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	631a      	str	r2, [r3, #48]	; 0x30
 800b3ac:	e005      	b.n	800b3ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3ae:	6978      	ldr	r0, [r7, #20]
 800b3b0:	f001 fa92 	bl	800c8d8 <vPortFree>
 800b3b4:	e001      	b.n	800b3ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d017      	beq.n	800b3f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3c8:	88fa      	ldrh	r2, [r7, #6]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	9302      	str	r3, [sp, #8]
 800b3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	68b9      	ldr	r1, [r7, #8]
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 f80e 	bl	800b400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3e4:	69f8      	ldr	r0, [r7, #28]
 800b3e6:	f000 f895 	bl	800b514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	61bb      	str	r3, [r7, #24]
 800b3ee:	e002      	b.n	800b3f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3f6:	69bb      	ldr	r3, [r7, #24]
	}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3720      	adds	r7, #32
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
 800b40c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b418:	440b      	add	r3, r1
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	f023 0307 	bic.w	r3, r3, #7
 800b426:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	f003 0307 	and.w	r3, r3, #7
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00c      	beq.n	800b44c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800b432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b436:	b672      	cpsid	i
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	b662      	cpsie	i
 800b446:	617b      	str	r3, [r7, #20]
}
 800b448:	bf00      	nop
 800b44a:	e7fe      	b.n	800b44a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d01f      	beq.n	800b492 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b452:	2300      	movs	r3, #0
 800b454:	61fb      	str	r3, [r7, #28]
 800b456:	e012      	b.n	800b47e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	4413      	add	r3, r2
 800b45e:	7819      	ldrb	r1, [r3, #0]
 800b460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	4413      	add	r3, r2
 800b466:	3334      	adds	r3, #52	; 0x34
 800b468:	460a      	mov	r2, r1
 800b46a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d006      	beq.n	800b486 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	3301      	adds	r3, #1
 800b47c:	61fb      	str	r3, [r7, #28]
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	2b0f      	cmp	r3, #15
 800b482:	d9e9      	bls.n	800b458 <prvInitialiseNewTask+0x58>
 800b484:	e000      	b.n	800b488 <prvInitialiseNewTask+0x88>
			{
				break;
 800b486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b490:	e003      	b.n	800b49a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	2b06      	cmp	r3, #6
 800b49e:	d901      	bls.n	800b4a4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4a0:	2306      	movs	r3, #6
 800b4a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fe fe55 	bl	800a16a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	3318      	adds	r3, #24
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe fe50 	bl	800a16a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d2:	f1c3 0207 	rsb	r2, r3, #7
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	68f9      	ldr	r1, [r7, #12]
 800b4f2:	69b8      	ldr	r0, [r7, #24]
 800b4f4:	f000 feec 	bl	800c2d0 <pxPortInitialiseStack>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b50a:	bf00      	nop
 800b50c:	3720      	adds	r7, #32
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
	...

0800b514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b51c:	f000 ffe6 	bl	800c4ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b520:	4b2a      	ldr	r3, [pc, #168]	; (800b5cc <prvAddNewTaskToReadyList+0xb8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3301      	adds	r3, #1
 800b526:	4a29      	ldr	r2, [pc, #164]	; (800b5cc <prvAddNewTaskToReadyList+0xb8>)
 800b528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b52a:	4b29      	ldr	r3, [pc, #164]	; (800b5d0 <prvAddNewTaskToReadyList+0xbc>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d109      	bne.n	800b546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b532:	4a27      	ldr	r2, [pc, #156]	; (800b5d0 <prvAddNewTaskToReadyList+0xbc>)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b538:	4b24      	ldr	r3, [pc, #144]	; (800b5cc <prvAddNewTaskToReadyList+0xb8>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d110      	bne.n	800b562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b540:	f000 fbc6 	bl	800bcd0 <prvInitialiseTaskLists>
 800b544:	e00d      	b.n	800b562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b546:	4b23      	ldr	r3, [pc, #140]	; (800b5d4 <prvAddNewTaskToReadyList+0xc0>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b54e:	4b20      	ldr	r3, [pc, #128]	; (800b5d0 <prvAddNewTaskToReadyList+0xbc>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b558:	429a      	cmp	r2, r3
 800b55a:	d802      	bhi.n	800b562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b55c:	4a1c      	ldr	r2, [pc, #112]	; (800b5d0 <prvAddNewTaskToReadyList+0xbc>)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b562:	4b1d      	ldr	r3, [pc, #116]	; (800b5d8 <prvAddNewTaskToReadyList+0xc4>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3301      	adds	r3, #1
 800b568:	4a1b      	ldr	r2, [pc, #108]	; (800b5d8 <prvAddNewTaskToReadyList+0xc4>)
 800b56a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	2201      	movs	r2, #1
 800b572:	409a      	lsls	r2, r3
 800b574:	4b19      	ldr	r3, [pc, #100]	; (800b5dc <prvAddNewTaskToReadyList+0xc8>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4313      	orrs	r3, r2
 800b57a:	4a18      	ldr	r2, [pc, #96]	; (800b5dc <prvAddNewTaskToReadyList+0xc8>)
 800b57c:	6013      	str	r3, [r2, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b582:	4613      	mov	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4a15      	ldr	r2, [pc, #84]	; (800b5e0 <prvAddNewTaskToReadyList+0xcc>)
 800b58c:	441a      	add	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3304      	adds	r3, #4
 800b592:	4619      	mov	r1, r3
 800b594:	4610      	mov	r0, r2
 800b596:	f7fe fdf5 	bl	800a184 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b59a:	f000 ffdb 	bl	800c554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b59e:	4b0d      	ldr	r3, [pc, #52]	; (800b5d4 <prvAddNewTaskToReadyList+0xc0>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00e      	beq.n	800b5c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5a6:	4b0a      	ldr	r3, [pc, #40]	; (800b5d0 <prvAddNewTaskToReadyList+0xbc>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d207      	bcs.n	800b5c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <prvAddNewTaskToReadyList+0xd0>)
 800b5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ba:	601a      	str	r2, [r3, #0]
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	20000e58 	.word	0x20000e58
 800b5d0:	20000d58 	.word	0x20000d58
 800b5d4:	20000e64 	.word	0x20000e64
 800b5d8:	20000e74 	.word	0x20000e74
 800b5dc:	20000e60 	.word	0x20000e60
 800b5e0:	20000d5c 	.word	0x20000d5c
 800b5e4:	e000ed04 	.word	0xe000ed04

0800b5e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08a      	sub	sp, #40	; 0x28
 800b5ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5f6:	463a      	mov	r2, r7
 800b5f8:	1d39      	adds	r1, r7, #4
 800b5fa:	f107 0308 	add.w	r3, r7, #8
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7f5 fd4a 	bl	8001098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	9202      	str	r2, [sp, #8]
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	2300      	movs	r3, #0
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	2300      	movs	r3, #0
 800b614:	460a      	mov	r2, r1
 800b616:	4920      	ldr	r1, [pc, #128]	; (800b698 <vTaskStartScheduler+0xb0>)
 800b618:	4820      	ldr	r0, [pc, #128]	; (800b69c <vTaskStartScheduler+0xb4>)
 800b61a:	f7ff fe49 	bl	800b2b0 <xTaskCreateStatic>
 800b61e:	4603      	mov	r3, r0
 800b620:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <vTaskStartScheduler+0xb8>)
 800b622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b624:	4b1e      	ldr	r3, [pc, #120]	; (800b6a0 <vTaskStartScheduler+0xb8>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b62c:	2301      	movs	r3, #1
 800b62e:	617b      	str	r3, [r7, #20]
 800b630:	e001      	b.n	800b636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b632:	2300      	movs	r3, #0
 800b634:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d118      	bne.n	800b66e <vTaskStartScheduler+0x86>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	b672      	cpsid	i
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	b662      	cpsie	i
 800b650:	613b      	str	r3, [r7, #16]
}
 800b652:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b654:	4b13      	ldr	r3, [pc, #76]	; (800b6a4 <vTaskStartScheduler+0xbc>)
 800b656:	f04f 32ff 	mov.w	r2, #4294967295
 800b65a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b65c:	4b12      	ldr	r3, [pc, #72]	; (800b6a8 <vTaskStartScheduler+0xc0>)
 800b65e:	2201      	movs	r2, #1
 800b660:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b662:	4b12      	ldr	r3, [pc, #72]	; (800b6ac <vTaskStartScheduler+0xc4>)
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b668:	f000 fec2 	bl	800c3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b66c:	e010      	b.n	800b690 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b674:	d10c      	bne.n	800b690 <vTaskStartScheduler+0xa8>
	__asm volatile
 800b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67a:	b672      	cpsid	i
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	b662      	cpsie	i
 800b68a:	60fb      	str	r3, [r7, #12]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <vTaskStartScheduler+0xa6>
}
 800b690:	bf00      	nop
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	0802490c 	.word	0x0802490c
 800b69c:	0800bca1 	.word	0x0800bca1
 800b6a0:	20000e7c 	.word	0x20000e7c
 800b6a4:	20000e78 	.word	0x20000e78
 800b6a8:	20000e64 	.word	0x20000e64
 800b6ac:	20000e5c 	.word	0x20000e5c

0800b6b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b6b4:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <vTaskSuspendAll+0x18>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	4a03      	ldr	r2, [pc, #12]	; (800b6c8 <vTaskSuspendAll+0x18>)
 800b6bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b6be:	bf00      	nop
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	20000e80 	.word	0x20000e80

0800b6cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6da:	4b42      	ldr	r3, [pc, #264]	; (800b7e4 <xTaskResumeAll+0x118>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10c      	bne.n	800b6fc <xTaskResumeAll+0x30>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	b672      	cpsid	i
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	b662      	cpsie	i
 800b6f6:	603b      	str	r3, [r7, #0]
}
 800b6f8:	bf00      	nop
 800b6fa:	e7fe      	b.n	800b6fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b6fc:	f000 fef6 	bl	800c4ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b700:	4b38      	ldr	r3, [pc, #224]	; (800b7e4 <xTaskResumeAll+0x118>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3b01      	subs	r3, #1
 800b706:	4a37      	ldr	r2, [pc, #220]	; (800b7e4 <xTaskResumeAll+0x118>)
 800b708:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b70a:	4b36      	ldr	r3, [pc, #216]	; (800b7e4 <xTaskResumeAll+0x118>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d161      	bne.n	800b7d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b712:	4b35      	ldr	r3, [pc, #212]	; (800b7e8 <xTaskResumeAll+0x11c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d05d      	beq.n	800b7d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b71a:	e02e      	b.n	800b77a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b71c:	4b33      	ldr	r3, [pc, #204]	; (800b7ec <xTaskResumeAll+0x120>)
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3318      	adds	r3, #24
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fd88 	bl	800a23e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3304      	adds	r3, #4
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe fd83 	bl	800a23e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	2201      	movs	r2, #1
 800b73e:	409a      	lsls	r2, r3
 800b740:	4b2b      	ldr	r3, [pc, #172]	; (800b7f0 <xTaskResumeAll+0x124>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4313      	orrs	r3, r2
 800b746:	4a2a      	ldr	r2, [pc, #168]	; (800b7f0 <xTaskResumeAll+0x124>)
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74e:	4613      	mov	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4a27      	ldr	r2, [pc, #156]	; (800b7f4 <xTaskResumeAll+0x128>)
 800b758:	441a      	add	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f7fe fd0f 	bl	800a184 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	4b23      	ldr	r3, [pc, #140]	; (800b7f8 <xTaskResumeAll+0x12c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b770:	429a      	cmp	r2, r3
 800b772:	d302      	bcc.n	800b77a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b774:	4b21      	ldr	r3, [pc, #132]	; (800b7fc <xTaskResumeAll+0x130>)
 800b776:	2201      	movs	r2, #1
 800b778:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b77a:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <xTaskResumeAll+0x120>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1cc      	bne.n	800b71c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b788:	f000 fb42 	bl	800be10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b78c:	4b1c      	ldr	r3, [pc, #112]	; (800b800 <xTaskResumeAll+0x134>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d010      	beq.n	800b7ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b798:	f000 f858 	bl	800b84c <xTaskIncrementTick>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d002      	beq.n	800b7a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b7a2:	4b16      	ldr	r3, [pc, #88]	; (800b7fc <xTaskResumeAll+0x130>)
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1f1      	bne.n	800b798 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b7b4:	4b12      	ldr	r3, [pc, #72]	; (800b800 <xTaskResumeAll+0x134>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7ba:	4b10      	ldr	r3, [pc, #64]	; (800b7fc <xTaskResumeAll+0x130>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d009      	beq.n	800b7d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7c6:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <xTaskResumeAll+0x138>)
 800b7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7d6:	f000 febd 	bl	800c554 <vPortExitCritical>

	return xAlreadyYielded;
 800b7da:	68bb      	ldr	r3, [r7, #8]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20000e80 	.word	0x20000e80
 800b7e8:	20000e58 	.word	0x20000e58
 800b7ec:	20000e18 	.word	0x20000e18
 800b7f0:	20000e60 	.word	0x20000e60
 800b7f4:	20000d5c 	.word	0x20000d5c
 800b7f8:	20000d58 	.word	0x20000d58
 800b7fc:	20000e6c 	.word	0x20000e6c
 800b800:	20000e68 	.word	0x20000e68
 800b804:	e000ed04 	.word	0xe000ed04

0800b808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b80e:	4b05      	ldr	r3, [pc, #20]	; (800b824 <xTaskGetTickCount+0x1c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b814:	687b      	ldr	r3, [r7, #4]
}
 800b816:	4618      	mov	r0, r3
 800b818:	370c      	adds	r7, #12
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	20000e5c 	.word	0x20000e5c

0800b828 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b82e:	f000 ff45 	bl	800c6bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b832:	2300      	movs	r3, #0
 800b834:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b836:	4b04      	ldr	r3, [pc, #16]	; (800b848 <xTaskGetTickCountFromISR+0x20>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b83c:	683b      	ldr	r3, [r7, #0]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20000e5c 	.word	0x20000e5c

0800b84c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b856:	4b4f      	ldr	r3, [pc, #316]	; (800b994 <xTaskIncrementTick+0x148>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f040 808a 	bne.w	800b974 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b860:	4b4d      	ldr	r3, [pc, #308]	; (800b998 <xTaskIncrementTick+0x14c>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3301      	adds	r3, #1
 800b866:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b868:	4a4b      	ldr	r2, [pc, #300]	; (800b998 <xTaskIncrementTick+0x14c>)
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d122      	bne.n	800b8ba <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b874:	4b49      	ldr	r3, [pc, #292]	; (800b99c <xTaskIncrementTick+0x150>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	b672      	cpsid	i
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	b662      	cpsie	i
 800b892:	603b      	str	r3, [r7, #0]
}
 800b894:	bf00      	nop
 800b896:	e7fe      	b.n	800b896 <xTaskIncrementTick+0x4a>
 800b898:	4b40      	ldr	r3, [pc, #256]	; (800b99c <xTaskIncrementTick+0x150>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	4b40      	ldr	r3, [pc, #256]	; (800b9a0 <xTaskIncrementTick+0x154>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a3e      	ldr	r2, [pc, #248]	; (800b99c <xTaskIncrementTick+0x150>)
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	4a3e      	ldr	r2, [pc, #248]	; (800b9a0 <xTaskIncrementTick+0x154>)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	4b3d      	ldr	r3, [pc, #244]	; (800b9a4 <xTaskIncrementTick+0x158>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	4a3c      	ldr	r2, [pc, #240]	; (800b9a4 <xTaskIncrementTick+0x158>)
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	f000 faab 	bl	800be10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8ba:	4b3b      	ldr	r3, [pc, #236]	; (800b9a8 <xTaskIncrementTick+0x15c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d348      	bcc.n	800b956 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8c4:	4b35      	ldr	r3, [pc, #212]	; (800b99c <xTaskIncrementTick+0x150>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d104      	bne.n	800b8d8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8ce:	4b36      	ldr	r3, [pc, #216]	; (800b9a8 <xTaskIncrementTick+0x15c>)
 800b8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d4:	601a      	str	r2, [r3, #0]
					break;
 800b8d6:	e03e      	b.n	800b956 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d8:	4b30      	ldr	r3, [pc, #192]	; (800b99c <xTaskIncrementTick+0x150>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d203      	bcs.n	800b8f8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8f0:	4a2d      	ldr	r2, [pc, #180]	; (800b9a8 <xTaskIncrementTick+0x15c>)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8f6:	e02e      	b.n	800b956 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fe fc9e 	bl	800a23e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b906:	2b00      	cmp	r3, #0
 800b908:	d004      	beq.n	800b914 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	3318      	adds	r3, #24
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe fc95 	bl	800a23e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b918:	2201      	movs	r2, #1
 800b91a:	409a      	lsls	r2, r3
 800b91c:	4b23      	ldr	r3, [pc, #140]	; (800b9ac <xTaskIncrementTick+0x160>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4313      	orrs	r3, r2
 800b922:	4a22      	ldr	r2, [pc, #136]	; (800b9ac <xTaskIncrementTick+0x160>)
 800b924:	6013      	str	r3, [r2, #0]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4a1f      	ldr	r2, [pc, #124]	; (800b9b0 <xTaskIncrementTick+0x164>)
 800b934:	441a      	add	r2, r3
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	3304      	adds	r3, #4
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fe fc21 	bl	800a184 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b946:	4b1b      	ldr	r3, [pc, #108]	; (800b9b4 <xTaskIncrementTick+0x168>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d3b9      	bcc.n	800b8c4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b950:	2301      	movs	r3, #1
 800b952:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b954:	e7b6      	b.n	800b8c4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b956:	4b17      	ldr	r3, [pc, #92]	; (800b9b4 <xTaskIncrementTick+0x168>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95c:	4914      	ldr	r1, [pc, #80]	; (800b9b0 <xTaskIncrementTick+0x164>)
 800b95e:	4613      	mov	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	440b      	add	r3, r1
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d907      	bls.n	800b97e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b96e:	2301      	movs	r3, #1
 800b970:	617b      	str	r3, [r7, #20]
 800b972:	e004      	b.n	800b97e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b974:	4b10      	ldr	r3, [pc, #64]	; (800b9b8 <xTaskIncrementTick+0x16c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3301      	adds	r3, #1
 800b97a:	4a0f      	ldr	r2, [pc, #60]	; (800b9b8 <xTaskIncrementTick+0x16c>)
 800b97c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b97e:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <xTaskIncrementTick+0x170>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b986:	2301      	movs	r3, #1
 800b988:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b98a:	697b      	ldr	r3, [r7, #20]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20000e80 	.word	0x20000e80
 800b998:	20000e5c 	.word	0x20000e5c
 800b99c:	20000e10 	.word	0x20000e10
 800b9a0:	20000e14 	.word	0x20000e14
 800b9a4:	20000e70 	.word	0x20000e70
 800b9a8:	20000e78 	.word	0x20000e78
 800b9ac:	20000e60 	.word	0x20000e60
 800b9b0:	20000d5c 	.word	0x20000d5c
 800b9b4:	20000d58 	.word	0x20000d58
 800b9b8:	20000e68 	.word	0x20000e68
 800b9bc:	20000e6c 	.word	0x20000e6c

0800b9c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b087      	sub	sp, #28
 800b9c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9c6:	4b28      	ldr	r3, [pc, #160]	; (800ba68 <vTaskSwitchContext+0xa8>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9ce:	4b27      	ldr	r3, [pc, #156]	; (800ba6c <vTaskSwitchContext+0xac>)
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9d4:	e041      	b.n	800ba5a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b9d6:	4b25      	ldr	r3, [pc, #148]	; (800ba6c <vTaskSwitchContext+0xac>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9dc:	4b24      	ldr	r3, [pc, #144]	; (800ba70 <vTaskSwitchContext+0xb0>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	fab3 f383 	clz	r3, r3
 800b9e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b9ea:	7afb      	ldrb	r3, [r7, #11]
 800b9ec:	f1c3 031f 	rsb	r3, r3, #31
 800b9f0:	617b      	str	r3, [r7, #20]
 800b9f2:	4920      	ldr	r1, [pc, #128]	; (800ba74 <vTaskSwitchContext+0xb4>)
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	440b      	add	r3, r1
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10c      	bne.n	800ba20 <vTaskSwitchContext+0x60>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	b672      	cpsid	i
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	b662      	cpsie	i
 800ba1a:	607b      	str	r3, [r7, #4]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <vTaskSwitchContext+0x5e>
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4a12      	ldr	r2, [pc, #72]	; (800ba74 <vTaskSwitchContext+0xb4>)
 800ba2c:	4413      	add	r3, r2
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	685a      	ldr	r2, [r3, #4]
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	605a      	str	r2, [r3, #4]
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	3308      	adds	r3, #8
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d104      	bne.n	800ba50 <vTaskSwitchContext+0x90>
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	605a      	str	r2, [r3, #4]
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	4a08      	ldr	r2, [pc, #32]	; (800ba78 <vTaskSwitchContext+0xb8>)
 800ba58:	6013      	str	r3, [r2, #0]
}
 800ba5a:	bf00      	nop
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	20000e80 	.word	0x20000e80
 800ba6c:	20000e6c 	.word	0x20000e6c
 800ba70:	20000e60 	.word	0x20000e60
 800ba74:	20000d5c 	.word	0x20000d5c
 800ba78:	20000d58 	.word	0x20000d58

0800ba7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10c      	bne.n	800baa6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	b672      	cpsid	i
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	b662      	cpsie	i
 800baa0:	60fb      	str	r3, [r7, #12]
}
 800baa2:	bf00      	nop
 800baa4:	e7fe      	b.n	800baa4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baa6:	4b07      	ldr	r3, [pc, #28]	; (800bac4 <vTaskPlaceOnEventList+0x48>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3318      	adds	r3, #24
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f7fe fb8c 	bl	800a1cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bab4:	2101      	movs	r1, #1
 800bab6:	6838      	ldr	r0, [r7, #0]
 800bab8:	f000 fba4 	bl	800c204 <prvAddCurrentTaskToDelayedList>
}
 800babc:	bf00      	nop
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	20000d58 	.word	0x20000d58

0800bac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10c      	bne.n	800baf8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae2:	b672      	cpsid	i
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	b662      	cpsie	i
 800baf2:	60fb      	str	r3, [r7, #12]
}
 800baf4:	bf00      	nop
 800baf6:	e7fe      	b.n	800baf6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	3318      	adds	r3, #24
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe fb9e 	bl	800a23e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb02:	4b1d      	ldr	r3, [pc, #116]	; (800bb78 <xTaskRemoveFromEventList+0xb0>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d11c      	bne.n	800bb44 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fe fb95 	bl	800a23e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	2201      	movs	r2, #1
 800bb1a:	409a      	lsls	r2, r3
 800bb1c:	4b17      	ldr	r3, [pc, #92]	; (800bb7c <xTaskRemoveFromEventList+0xb4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	4a16      	ldr	r2, [pc, #88]	; (800bb7c <xTaskRemoveFromEventList+0xb4>)
 800bb24:	6013      	str	r3, [r2, #0]
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4a13      	ldr	r2, [pc, #76]	; (800bb80 <xTaskRemoveFromEventList+0xb8>)
 800bb34:	441a      	add	r2, r3
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	f7fe fb21 	bl	800a184 <vListInsertEnd>
 800bb42:	e005      	b.n	800bb50 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	3318      	adds	r3, #24
 800bb48:	4619      	mov	r1, r3
 800bb4a:	480e      	ldr	r0, [pc, #56]	; (800bb84 <xTaskRemoveFromEventList+0xbc>)
 800bb4c:	f7fe fb1a 	bl	800a184 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb54:	4b0c      	ldr	r3, [pc, #48]	; (800bb88 <xTaskRemoveFromEventList+0xc0>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d905      	bls.n	800bb6a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb62:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <xTaskRemoveFromEventList+0xc4>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	e001      	b.n	800bb6e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb6e:	697b      	ldr	r3, [r7, #20]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	20000e80 	.word	0x20000e80
 800bb7c:	20000e60 	.word	0x20000e60
 800bb80:	20000d5c 	.word	0x20000d5c
 800bb84:	20000e18 	.word	0x20000e18
 800bb88:	20000d58 	.word	0x20000d58
 800bb8c:	20000e6c 	.word	0x20000e6c

0800bb90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb98:	4b06      	ldr	r3, [pc, #24]	; (800bbb4 <vTaskInternalSetTimeOutState+0x24>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bba0:	4b05      	ldr	r3, [pc, #20]	; (800bbb8 <vTaskInternalSetTimeOutState+0x28>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	605a      	str	r2, [r3, #4]
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	20000e70 	.word	0x20000e70
 800bbb8:	20000e5c 	.word	0x20000e5c

0800bbbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10c      	bne.n	800bbe6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd0:	b672      	cpsid	i
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	b662      	cpsie	i
 800bbe0:	613b      	str	r3, [r7, #16]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10c      	bne.n	800bc06 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf0:	b672      	cpsid	i
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	b662      	cpsie	i
 800bc00:	60fb      	str	r3, [r7, #12]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bc06:	f000 fc71 	bl	800c4ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc0a:	4b1d      	ldr	r3, [pc, #116]	; (800bc80 <xTaskCheckForTimeOut+0xc4>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	69ba      	ldr	r2, [r7, #24]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc22:	d102      	bne.n	800bc2a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc24:	2300      	movs	r3, #0
 800bc26:	61fb      	str	r3, [r7, #28]
 800bc28:	e023      	b.n	800bc72 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	4b15      	ldr	r3, [pc, #84]	; (800bc84 <xTaskCheckForTimeOut+0xc8>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d007      	beq.n	800bc46 <xTaskCheckForTimeOut+0x8a>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	69ba      	ldr	r2, [r7, #24]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d302      	bcc.n	800bc46 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc40:	2301      	movs	r3, #1
 800bc42:	61fb      	str	r3, [r7, #28]
 800bc44:	e015      	b.n	800bc72 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d20b      	bcs.n	800bc68 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	1ad2      	subs	r2, r2, r3
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff ff97 	bl	800bb90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	61fb      	str	r3, [r7, #28]
 800bc66:	e004      	b.n	800bc72 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc72:	f000 fc6f 	bl	800c554 <vPortExitCritical>

	return xReturn;
 800bc76:	69fb      	ldr	r3, [r7, #28]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3720      	adds	r7, #32
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	20000e5c 	.word	0x20000e5c
 800bc84:	20000e70 	.word	0x20000e70

0800bc88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc8c:	4b03      	ldr	r3, [pc, #12]	; (800bc9c <vTaskMissedYield+0x14>)
 800bc8e:	2201      	movs	r2, #1
 800bc90:	601a      	str	r2, [r3, #0]
}
 800bc92:	bf00      	nop
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	20000e6c 	.word	0x20000e6c

0800bca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bca8:	f000 f852 	bl	800bd50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcac:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <prvIdleTask+0x28>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d9f9      	bls.n	800bca8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bcb4:	4b05      	ldr	r3, [pc, #20]	; (800bccc <prvIdleTask+0x2c>)
 800bcb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bcc4:	e7f0      	b.n	800bca8 <prvIdleTask+0x8>
 800bcc6:	bf00      	nop
 800bcc8:	20000d5c 	.word	0x20000d5c
 800bccc:	e000ed04 	.word	0xe000ed04

0800bcd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	607b      	str	r3, [r7, #4]
 800bcda:	e00c      	b.n	800bcf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	4613      	mov	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4a12      	ldr	r2, [pc, #72]	; (800bd30 <prvInitialiseTaskLists+0x60>)
 800bce8:	4413      	add	r3, r2
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fa1d 	bl	800a12a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	607b      	str	r3, [r7, #4]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b06      	cmp	r3, #6
 800bcfa:	d9ef      	bls.n	800bcdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcfc:	480d      	ldr	r0, [pc, #52]	; (800bd34 <prvInitialiseTaskLists+0x64>)
 800bcfe:	f7fe fa14 	bl	800a12a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd02:	480d      	ldr	r0, [pc, #52]	; (800bd38 <prvInitialiseTaskLists+0x68>)
 800bd04:	f7fe fa11 	bl	800a12a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd08:	480c      	ldr	r0, [pc, #48]	; (800bd3c <prvInitialiseTaskLists+0x6c>)
 800bd0a:	f7fe fa0e 	bl	800a12a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd0e:	480c      	ldr	r0, [pc, #48]	; (800bd40 <prvInitialiseTaskLists+0x70>)
 800bd10:	f7fe fa0b 	bl	800a12a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd14:	480b      	ldr	r0, [pc, #44]	; (800bd44 <prvInitialiseTaskLists+0x74>)
 800bd16:	f7fe fa08 	bl	800a12a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd1a:	4b0b      	ldr	r3, [pc, #44]	; (800bd48 <prvInitialiseTaskLists+0x78>)
 800bd1c:	4a05      	ldr	r2, [pc, #20]	; (800bd34 <prvInitialiseTaskLists+0x64>)
 800bd1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd20:	4b0a      	ldr	r3, [pc, #40]	; (800bd4c <prvInitialiseTaskLists+0x7c>)
 800bd22:	4a05      	ldr	r2, [pc, #20]	; (800bd38 <prvInitialiseTaskLists+0x68>)
 800bd24:	601a      	str	r2, [r3, #0]
}
 800bd26:	bf00      	nop
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	20000d5c 	.word	0x20000d5c
 800bd34:	20000de8 	.word	0x20000de8
 800bd38:	20000dfc 	.word	0x20000dfc
 800bd3c:	20000e18 	.word	0x20000e18
 800bd40:	20000e2c 	.word	0x20000e2c
 800bd44:	20000e44 	.word	0x20000e44
 800bd48:	20000e10 	.word	0x20000e10
 800bd4c:	20000e14 	.word	0x20000e14

0800bd50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd56:	e019      	b.n	800bd8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd58:	f000 fbc8 	bl	800c4ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd5c:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <prvCheckTasksWaitingTermination+0x50>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fe fa68 	bl	800a23e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd6e:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <prvCheckTasksWaitingTermination+0x54>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	4a0b      	ldr	r2, [pc, #44]	; (800bda4 <prvCheckTasksWaitingTermination+0x54>)
 800bd76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd78:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <prvCheckTasksWaitingTermination+0x58>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	4a0a      	ldr	r2, [pc, #40]	; (800bda8 <prvCheckTasksWaitingTermination+0x58>)
 800bd80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd82:	f000 fbe7 	bl	800c554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f810 	bl	800bdac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <prvCheckTasksWaitingTermination+0x58>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e1      	bne.n	800bd58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20000e2c 	.word	0x20000e2c
 800bda4:	20000e58 	.word	0x20000e58
 800bda8:	20000e40 	.word	0x20000e40

0800bdac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d108      	bne.n	800bdd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fd88 	bl	800c8d8 <vPortFree>
				vPortFree( pxTCB );
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fd85 	bl	800c8d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bdce:	e01a      	b.n	800be06 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d103      	bne.n	800bde2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fd7c 	bl	800c8d8 <vPortFree>
	}
 800bde0:	e011      	b.n	800be06 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d00c      	beq.n	800be06 <prvDeleteTCB+0x5a>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	b672      	cpsid	i
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	b662      	cpsie	i
 800be00:	60fb      	str	r3, [r7, #12]
}
 800be02:	bf00      	nop
 800be04:	e7fe      	b.n	800be04 <prvDeleteTCB+0x58>
	}
 800be06:	bf00      	nop
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be16:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <prvResetNextTaskUnblockTime+0x38>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d104      	bne.n	800be2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be20:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <prvResetNextTaskUnblockTime+0x3c>)
 800be22:	f04f 32ff 	mov.w	r2, #4294967295
 800be26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be28:	e008      	b.n	800be3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be2a:	4b07      	ldr	r3, [pc, #28]	; (800be48 <prvResetNextTaskUnblockTime+0x38>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	4a04      	ldr	r2, [pc, #16]	; (800be4c <prvResetNextTaskUnblockTime+0x3c>)
 800be3a:	6013      	str	r3, [r2, #0]
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	20000e10 	.word	0x20000e10
 800be4c:	20000e78 	.word	0x20000e78

0800be50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be56:	4b0b      	ldr	r3, [pc, #44]	; (800be84 <xTaskGetSchedulerState+0x34>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d102      	bne.n	800be64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be5e:	2301      	movs	r3, #1
 800be60:	607b      	str	r3, [r7, #4]
 800be62:	e008      	b.n	800be76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be64:	4b08      	ldr	r3, [pc, #32]	; (800be88 <xTaskGetSchedulerState+0x38>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d102      	bne.n	800be72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be6c:	2302      	movs	r3, #2
 800be6e:	607b      	str	r3, [r7, #4]
 800be70:	e001      	b.n	800be76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be72:	2300      	movs	r3, #0
 800be74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be76:	687b      	ldr	r3, [r7, #4]
	}
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	20000e64 	.word	0x20000e64
 800be88:	20000e80 	.word	0x20000e80

0800be8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d069      	beq.n	800bf76 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea6:	4b36      	ldr	r3, [pc, #216]	; (800bf80 <xTaskPriorityInherit+0xf4>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	429a      	cmp	r2, r3
 800beae:	d259      	bcs.n	800bf64 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	db06      	blt.n	800bec6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beb8:	4b31      	ldr	r3, [pc, #196]	; (800bf80 <xTaskPriorityInherit+0xf4>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebe:	f1c3 0207 	rsb	r2, r3, #7
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	6959      	ldr	r1, [r3, #20]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bece:	4613      	mov	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	4413      	add	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4a2b      	ldr	r2, [pc, #172]	; (800bf84 <xTaskPriorityInherit+0xf8>)
 800bed8:	4413      	add	r3, r2
 800beda:	4299      	cmp	r1, r3
 800bedc:	d13a      	bne.n	800bf54 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	3304      	adds	r3, #4
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fe f9ab 	bl	800a23e <uxListRemove>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d115      	bne.n	800bf1a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef2:	4924      	ldr	r1, [pc, #144]	; (800bf84 <xTaskPriorityInherit+0xf8>)
 800bef4:	4613      	mov	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	440b      	add	r3, r1
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10a      	bne.n	800bf1a <xTaskPriorityInherit+0x8e>
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	2201      	movs	r2, #1
 800bf0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0e:	43da      	mvns	r2, r3
 800bf10:	4b1d      	ldr	r3, [pc, #116]	; (800bf88 <xTaskPriorityInherit+0xfc>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4013      	ands	r3, r2
 800bf16:	4a1c      	ldr	r2, [pc, #112]	; (800bf88 <xTaskPriorityInherit+0xfc>)
 800bf18:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf1a:	4b19      	ldr	r3, [pc, #100]	; (800bf80 <xTaskPriorityInherit+0xf4>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf28:	2201      	movs	r2, #1
 800bf2a:	409a      	lsls	r2, r3
 800bf2c:	4b16      	ldr	r3, [pc, #88]	; (800bf88 <xTaskPriorityInherit+0xfc>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	4a15      	ldr	r2, [pc, #84]	; (800bf88 <xTaskPriorityInherit+0xfc>)
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4a10      	ldr	r2, [pc, #64]	; (800bf84 <xTaskPriorityInherit+0xf8>)
 800bf44:	441a      	add	r2, r3
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	3304      	adds	r3, #4
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	f7fe f919 	bl	800a184 <vListInsertEnd>
 800bf52:	e004      	b.n	800bf5e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf54:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <xTaskPriorityInherit+0xf4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	e008      	b.n	800bf76 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf68:	4b05      	ldr	r3, [pc, #20]	; (800bf80 <xTaskPriorityInherit+0xf4>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d201      	bcs.n	800bf76 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bf72:	2301      	movs	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf76:	68fb      	ldr	r3, [r7, #12]
	}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	20000d58 	.word	0x20000d58
 800bf84:	20000d5c 	.word	0x20000d5c
 800bf88:	20000e60 	.word	0x20000e60

0800bf8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d072      	beq.n	800c088 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfa2:	4b3c      	ldr	r3, [pc, #240]	; (800c094 <xTaskPriorityDisinherit+0x108>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d00c      	beq.n	800bfc6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	b672      	cpsid	i
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	b662      	cpsie	i
 800bfc0:	60fb      	str	r3, [r7, #12]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10c      	bne.n	800bfe8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	b672      	cpsid	i
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	b662      	cpsie	i
 800bfe2:	60bb      	str	r3, [r7, #8]
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfec:	1e5a      	subs	r2, r3, #1
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d044      	beq.n	800c088 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c002:	2b00      	cmp	r3, #0
 800c004:	d140      	bne.n	800c088 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3304      	adds	r3, #4
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe f917 	bl	800a23e <uxListRemove>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d115      	bne.n	800c042 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01a:	491f      	ldr	r1, [pc, #124]	; (800c098 <xTaskPriorityDisinherit+0x10c>)
 800c01c:	4613      	mov	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	440b      	add	r3, r1
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10a      	bne.n	800c042 <xTaskPriorityDisinherit+0xb6>
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	2201      	movs	r2, #1
 800c032:	fa02 f303 	lsl.w	r3, r2, r3
 800c036:	43da      	mvns	r2, r3
 800c038:	4b18      	ldr	r3, [pc, #96]	; (800c09c <xTaskPriorityDisinherit+0x110>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4013      	ands	r3, r2
 800c03e:	4a17      	ldr	r2, [pc, #92]	; (800c09c <xTaskPriorityDisinherit+0x110>)
 800c040:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04e:	f1c3 0207 	rsb	r2, r3, #7
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05a:	2201      	movs	r2, #1
 800c05c:	409a      	lsls	r2, r3
 800c05e:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <xTaskPriorityDisinherit+0x110>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4313      	orrs	r3, r2
 800c064:	4a0d      	ldr	r2, [pc, #52]	; (800c09c <xTaskPriorityDisinherit+0x110>)
 800c066:	6013      	str	r3, [r2, #0]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	4a08      	ldr	r2, [pc, #32]	; (800c098 <xTaskPriorityDisinherit+0x10c>)
 800c076:	441a      	add	r2, r3
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	3304      	adds	r3, #4
 800c07c:	4619      	mov	r1, r3
 800c07e:	4610      	mov	r0, r2
 800c080:	f7fe f880 	bl	800a184 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c084:	2301      	movs	r3, #1
 800c086:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c088:	697b      	ldr	r3, [r7, #20]
	}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3718      	adds	r7, #24
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20000d58 	.word	0x20000d58
 800c098:	20000d5c 	.word	0x20000d5c
 800c09c:	20000e60 	.word	0x20000e60

0800c0a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f000 8087 	beq.w	800c1c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10c      	bne.n	800c0dc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	b672      	cpsid	i
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	b662      	cpsie	i
 800c0d6:	60fb      	str	r3, [r7, #12]
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d902      	bls.n	800c0ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	61fb      	str	r3, [r7, #28]
 800c0ea:	e002      	b.n	800c0f2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f6:	69fa      	ldr	r2, [r7, #28]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d065      	beq.n	800c1c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	429a      	cmp	r2, r3
 800c104:	d160      	bne.n	800c1c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c106:	4b32      	ldr	r3, [pc, #200]	; (800c1d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	69ba      	ldr	r2, [r7, #24]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d10c      	bne.n	800c12a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	b672      	cpsid	i
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	b662      	cpsie	i
 800c124:	60bb      	str	r3, [r7, #8]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	69fa      	ldr	r2, [r7, #28]
 800c134:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	db04      	blt.n	800c148 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	f1c3 0207 	rsb	r2, r3, #7
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	6959      	ldr	r1, [r3, #20]
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	4613      	mov	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4a1f      	ldr	r2, [pc, #124]	; (800c1d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c158:	4413      	add	r3, r2
 800c15a:	4299      	cmp	r1, r3
 800c15c:	d134      	bne.n	800c1c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	3304      	adds	r3, #4
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe f86b 	bl	800a23e <uxListRemove>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d115      	bne.n	800c19a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c172:	4918      	ldr	r1, [pc, #96]	; (800c1d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c174:	4613      	mov	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	440b      	add	r3, r1
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10a      	bne.n	800c19a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	2201      	movs	r2, #1
 800c18a:	fa02 f303 	lsl.w	r3, r2, r3
 800c18e:	43da      	mvns	r2, r3
 800c190:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4013      	ands	r3, r2
 800c196:	4a10      	ldr	r2, [pc, #64]	; (800c1d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c198:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19e:	2201      	movs	r2, #1
 800c1a0:	409a      	lsls	r2, r3
 800c1a2:	4b0d      	ldr	r3, [pc, #52]	; (800c1d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	4a0b      	ldr	r2, [pc, #44]	; (800c1d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4a06      	ldr	r2, [pc, #24]	; (800c1d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c1ba:	441a      	add	r2, r3
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	3304      	adds	r3, #4
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	f7fd ffde 	bl	800a184 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1c8:	bf00      	nop
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20000d58 	.word	0x20000d58
 800c1d4:	20000d5c 	.word	0x20000d5c
 800c1d8:	20000e60 	.word	0x20000e60

0800c1dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1e0:	4b07      	ldr	r3, [pc, #28]	; (800c200 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d004      	beq.n	800c1f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1e8:	4b05      	ldr	r3, [pc, #20]	; (800c200 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c1ee:	3201      	adds	r2, #1
 800c1f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c1f2:	4b03      	ldr	r3, [pc, #12]	; (800c200 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
	}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	20000d58 	.word	0x20000d58

0800c204 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c20e:	4b29      	ldr	r3, [pc, #164]	; (800c2b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c214:	4b28      	ldr	r3, [pc, #160]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3304      	adds	r3, #4
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fe f80f 	bl	800a23e <uxListRemove>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10b      	bne.n	800c23e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c226:	4b24      	ldr	r3, [pc, #144]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	2201      	movs	r2, #1
 800c22e:	fa02 f303 	lsl.w	r3, r2, r3
 800c232:	43da      	mvns	r2, r3
 800c234:	4b21      	ldr	r3, [pc, #132]	; (800c2bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4013      	ands	r3, r2
 800c23a:	4a20      	ldr	r2, [pc, #128]	; (800c2bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c23c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c244:	d10a      	bne.n	800c25c <prvAddCurrentTaskToDelayedList+0x58>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d007      	beq.n	800c25c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c24c:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3304      	adds	r3, #4
 800c252:	4619      	mov	r1, r3
 800c254:	481a      	ldr	r0, [pc, #104]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c256:	f7fd ff95 	bl	800a184 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c25a:	e026      	b.n	800c2aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c264:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	429a      	cmp	r2, r3
 800c272:	d209      	bcs.n	800c288 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c274:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	4b0f      	ldr	r3, [pc, #60]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3304      	adds	r3, #4
 800c27e:	4619      	mov	r1, r3
 800c280:	4610      	mov	r0, r2
 800c282:	f7fd ffa3 	bl	800a1cc <vListInsert>
}
 800c286:	e010      	b.n	800c2aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c288:	4b0f      	ldr	r3, [pc, #60]	; (800c2c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3304      	adds	r3, #4
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7fd ff99 	bl	800a1cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c29a:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d202      	bcs.n	800c2aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c2a4:	4a09      	ldr	r2, [pc, #36]	; (800c2cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	6013      	str	r3, [r2, #0]
}
 800c2aa:	bf00      	nop
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000e5c 	.word	0x20000e5c
 800c2b8:	20000d58 	.word	0x20000d58
 800c2bc:	20000e60 	.word	0x20000e60
 800c2c0:	20000e44 	.word	0x20000e44
 800c2c4:	20000e14 	.word	0x20000e14
 800c2c8:	20000e10 	.word	0x20000e10
 800c2cc:	20000e78 	.word	0x20000e78

0800c2d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	3b04      	subs	r3, #4
 800c2e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c2e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3b04      	subs	r3, #4
 800c2ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f023 0201 	bic.w	r2, r3, #1
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3b04      	subs	r3, #4
 800c2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c300:	4a0c      	ldr	r2, [pc, #48]	; (800c334 <pxPortInitialiseStack+0x64>)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3b14      	subs	r3, #20
 800c30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3b04      	subs	r3, #4
 800c316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f06f 0202 	mvn.w	r2, #2
 800c31e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	3b20      	subs	r3, #32
 800c324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c326:	68fb      	ldr	r3, [r7, #12]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	0800c339 	.word	0x0800c339

0800c338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c342:	4b14      	ldr	r3, [pc, #80]	; (800c394 <prvTaskExitError+0x5c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34a:	d00c      	beq.n	800c366 <prvTaskExitError+0x2e>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	b672      	cpsid	i
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	b662      	cpsie	i
 800c360:	60fb      	str	r3, [r7, #12]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <prvTaskExitError+0x2c>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	b672      	cpsid	i
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	b662      	cpsie	i
 800c37a:	60bb      	str	r3, [r7, #8]
}
 800c37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c37e:	bf00      	nop
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d0fc      	beq.n	800c380 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c386:	bf00      	nop
 800c388:	bf00      	nop
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	20000028 	.word	0x20000028
	...

0800c3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <pxCurrentTCBConst2>)
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	6808      	ldr	r0, [r1, #0]
 800c3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	f380 8809 	msr	PSP, r0
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f04f 0000 	mov.w	r0, #0
 800c3b6:	f380 8811 	msr	BASEPRI, r0
 800c3ba:	4770      	bx	lr
 800c3bc:	f3af 8000 	nop.w

0800c3c0 <pxCurrentTCBConst2>:
 800c3c0:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop

0800c3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3c8:	4808      	ldr	r0, [pc, #32]	; (800c3ec <prvPortStartFirstTask+0x24>)
 800c3ca:	6800      	ldr	r0, [r0, #0]
 800c3cc:	6800      	ldr	r0, [r0, #0]
 800c3ce:	f380 8808 	msr	MSP, r0
 800c3d2:	f04f 0000 	mov.w	r0, #0
 800c3d6:	f380 8814 	msr	CONTROL, r0
 800c3da:	b662      	cpsie	i
 800c3dc:	b661      	cpsie	f
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	df00      	svc	0
 800c3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3ea:	bf00      	nop
 800c3ec:	e000ed08 	.word	0xe000ed08

0800c3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3f6:	4b37      	ldr	r3, [pc, #220]	; (800c4d4 <xPortStartScheduler+0xe4>)
 800c3f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	22ff      	movs	r2, #255	; 0xff
 800c406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	b2db      	uxtb	r3, r3
 800c414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	4b2f      	ldr	r3, [pc, #188]	; (800c4d8 <xPortStartScheduler+0xe8>)
 800c41c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c41e:	4b2f      	ldr	r3, [pc, #188]	; (800c4dc <xPortStartScheduler+0xec>)
 800c420:	2207      	movs	r2, #7
 800c422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c424:	e009      	b.n	800c43a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c426:	4b2d      	ldr	r3, [pc, #180]	; (800c4dc <xPortStartScheduler+0xec>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3b01      	subs	r3, #1
 800c42c:	4a2b      	ldr	r2, [pc, #172]	; (800c4dc <xPortStartScheduler+0xec>)
 800c42e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c430:	78fb      	ldrb	r3, [r7, #3]
 800c432:	b2db      	uxtb	r3, r3
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	b2db      	uxtb	r3, r3
 800c438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c43a:	78fb      	ldrb	r3, [r7, #3]
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c442:	2b80      	cmp	r3, #128	; 0x80
 800c444:	d0ef      	beq.n	800c426 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c446:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <xPortStartScheduler+0xec>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f1c3 0307 	rsb	r3, r3, #7
 800c44e:	2b04      	cmp	r3, #4
 800c450:	d00c      	beq.n	800c46c <xPortStartScheduler+0x7c>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	b672      	cpsid	i
 800c458:	f383 8811 	msr	BASEPRI, r3
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	b662      	cpsie	i
 800c466:	60bb      	str	r3, [r7, #8]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c46c:	4b1b      	ldr	r3, [pc, #108]	; (800c4dc <xPortStartScheduler+0xec>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	021b      	lsls	r3, r3, #8
 800c472:	4a1a      	ldr	r2, [pc, #104]	; (800c4dc <xPortStartScheduler+0xec>)
 800c474:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c476:	4b19      	ldr	r3, [pc, #100]	; (800c4dc <xPortStartScheduler+0xec>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c47e:	4a17      	ldr	r2, [pc, #92]	; (800c4dc <xPortStartScheduler+0xec>)
 800c480:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	b2da      	uxtb	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c48a:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <xPortStartScheduler+0xf0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a14      	ldr	r2, [pc, #80]	; (800c4e0 <xPortStartScheduler+0xf0>)
 800c490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c494:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c496:	4b12      	ldr	r3, [pc, #72]	; (800c4e0 <xPortStartScheduler+0xf0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a11      	ldr	r2, [pc, #68]	; (800c4e0 <xPortStartScheduler+0xf0>)
 800c49c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c4a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4a2:	f000 f8dd 	bl	800c660 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4a6:	4b0f      	ldr	r3, [pc, #60]	; (800c4e4 <xPortStartScheduler+0xf4>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4ac:	f000 f8fc 	bl	800c6a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4b0:	4b0d      	ldr	r3, [pc, #52]	; (800c4e8 <xPortStartScheduler+0xf8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a0c      	ldr	r2, [pc, #48]	; (800c4e8 <xPortStartScheduler+0xf8>)
 800c4b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c4ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4bc:	f7ff ff84 	bl	800c3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4c0:	f7ff fa7e 	bl	800b9c0 <vTaskSwitchContext>
	prvTaskExitError();
 800c4c4:	f7ff ff38 	bl	800c338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	e000e400 	.word	0xe000e400
 800c4d8:	20000e84 	.word	0x20000e84
 800c4dc:	20000e88 	.word	0x20000e88
 800c4e0:	e000ed20 	.word	0xe000ed20
 800c4e4:	20000028 	.word	0x20000028
 800c4e8:	e000ef34 	.word	0xe000ef34

0800c4ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	b672      	cpsid	i
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	b662      	cpsie	i
 800c506:	607b      	str	r3, [r7, #4]
}
 800c508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c50a:	4b10      	ldr	r3, [pc, #64]	; (800c54c <vPortEnterCritical+0x60>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	3301      	adds	r3, #1
 800c510:	4a0e      	ldr	r2, [pc, #56]	; (800c54c <vPortEnterCritical+0x60>)
 800c512:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c514:	4b0d      	ldr	r3, [pc, #52]	; (800c54c <vPortEnterCritical+0x60>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d111      	bne.n	800c540 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c51c:	4b0c      	ldr	r3, [pc, #48]	; (800c550 <vPortEnterCritical+0x64>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	b2db      	uxtb	r3, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00c      	beq.n	800c540 <vPortEnterCritical+0x54>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52a:	b672      	cpsid	i
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	b662      	cpsie	i
 800c53a:	603b      	str	r3, [r7, #0]
}
 800c53c:	bf00      	nop
 800c53e:	e7fe      	b.n	800c53e <vPortEnterCritical+0x52>
	}
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	20000028 	.word	0x20000028
 800c550:	e000ed04 	.word	0xe000ed04

0800c554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c55a:	4b13      	ldr	r3, [pc, #76]	; (800c5a8 <vPortExitCritical+0x54>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10c      	bne.n	800c57c <vPortExitCritical+0x28>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	b672      	cpsid	i
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	b662      	cpsie	i
 800c576:	607b      	str	r3, [r7, #4]
}
 800c578:	bf00      	nop
 800c57a:	e7fe      	b.n	800c57a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c57c:	4b0a      	ldr	r3, [pc, #40]	; (800c5a8 <vPortExitCritical+0x54>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3b01      	subs	r3, #1
 800c582:	4a09      	ldr	r2, [pc, #36]	; (800c5a8 <vPortExitCritical+0x54>)
 800c584:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c586:	4b08      	ldr	r3, [pc, #32]	; (800c5a8 <vPortExitCritical+0x54>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d105      	bne.n	800c59a <vPortExitCritical+0x46>
 800c58e:	2300      	movs	r3, #0
 800c590:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	f383 8811 	msr	BASEPRI, r3
}
 800c598:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c59a:	bf00      	nop
 800c59c:	370c      	adds	r7, #12
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	20000028 	.word	0x20000028
 800c5ac:	00000000 	.word	0x00000000

0800c5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5b0:	f3ef 8009 	mrs	r0, PSP
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	4b15      	ldr	r3, [pc, #84]	; (800c610 <pxCurrentTCBConst>)
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	f01e 0f10 	tst.w	lr, #16
 800c5c0:	bf08      	it	eq
 800c5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ca:	6010      	str	r0, [r2, #0]
 800c5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c5d4:	b672      	cpsid	i
 800c5d6:	f380 8811 	msr	BASEPRI, r0
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	b662      	cpsie	i
 800c5e4:	f7ff f9ec 	bl	800b9c0 <vTaskSwitchContext>
 800c5e8:	f04f 0000 	mov.w	r0, #0
 800c5ec:	f380 8811 	msr	BASEPRI, r0
 800c5f0:	bc09      	pop	{r0, r3}
 800c5f2:	6819      	ldr	r1, [r3, #0]
 800c5f4:	6808      	ldr	r0, [r1, #0]
 800c5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fa:	f01e 0f10 	tst.w	lr, #16
 800c5fe:	bf08      	it	eq
 800c600:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c604:	f380 8809 	msr	PSP, r0
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop

0800c610 <pxCurrentTCBConst>:
 800c610:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop

0800c618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c622:	b672      	cpsid	i
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	b662      	cpsie	i
 800c632:	607b      	str	r3, [r7, #4]
}
 800c634:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c636:	f7ff f909 	bl	800b84c <xTaskIncrementTick>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d003      	beq.n	800c648 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c640:	4b06      	ldr	r3, [pc, #24]	; (800c65c <SysTick_Handler+0x44>)
 800c642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c646:	601a      	str	r2, [r3, #0]
 800c648:	2300      	movs	r3, #0
 800c64a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	f383 8811 	msr	BASEPRI, r3
}
 800c652:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c654:	bf00      	nop
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	e000ed04 	.word	0xe000ed04

0800c660 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c660:	b480      	push	{r7}
 800c662:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c664:	4b0b      	ldr	r3, [pc, #44]	; (800c694 <vPortSetupTimerInterrupt+0x34>)
 800c666:	2200      	movs	r2, #0
 800c668:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c66a:	4b0b      	ldr	r3, [pc, #44]	; (800c698 <vPortSetupTimerInterrupt+0x38>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c670:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <vPortSetupTimerInterrupt+0x3c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a0a      	ldr	r2, [pc, #40]	; (800c6a0 <vPortSetupTimerInterrupt+0x40>)
 800c676:	fba2 2303 	umull	r2, r3, r2, r3
 800c67a:	099b      	lsrs	r3, r3, #6
 800c67c:	4a09      	ldr	r2, [pc, #36]	; (800c6a4 <vPortSetupTimerInterrupt+0x44>)
 800c67e:	3b01      	subs	r3, #1
 800c680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c682:	4b04      	ldr	r3, [pc, #16]	; (800c694 <vPortSetupTimerInterrupt+0x34>)
 800c684:	2207      	movs	r2, #7
 800c686:	601a      	str	r2, [r3, #0]
}
 800c688:	bf00      	nop
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	e000e010 	.word	0xe000e010
 800c698:	e000e018 	.word	0xe000e018
 800c69c:	2000001c 	.word	0x2000001c
 800c6a0:	10624dd3 	.word	0x10624dd3
 800c6a4:	e000e014 	.word	0xe000e014

0800c6a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c6b8 <vPortEnableVFP+0x10>
 800c6ac:	6801      	ldr	r1, [r0, #0]
 800c6ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6b2:	6001      	str	r1, [r0, #0]
 800c6b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6b6:	bf00      	nop
 800c6b8:	e000ed88 	.word	0xe000ed88

0800c6bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6c2:	f3ef 8305 	mrs	r3, IPSR
 800c6c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b0f      	cmp	r3, #15
 800c6cc:	d916      	bls.n	800c6fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6ce:	4a19      	ldr	r2, [pc, #100]	; (800c734 <vPortValidateInterruptPriority+0x78>)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c6d8:	4b17      	ldr	r3, [pc, #92]	; (800c738 <vPortValidateInterruptPriority+0x7c>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	7afa      	ldrb	r2, [r7, #11]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d20c      	bcs.n	800c6fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	b672      	cpsid	i
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	b662      	cpsie	i
 800c6f6:	607b      	str	r3, [r7, #4]
}
 800c6f8:	bf00      	nop
 800c6fa:	e7fe      	b.n	800c6fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6fc:	4b0f      	ldr	r3, [pc, #60]	; (800c73c <vPortValidateInterruptPriority+0x80>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c704:	4b0e      	ldr	r3, [pc, #56]	; (800c740 <vPortValidateInterruptPriority+0x84>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d90c      	bls.n	800c726 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c710:	b672      	cpsid	i
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	b662      	cpsie	i
 800c720:	603b      	str	r3, [r7, #0]
}
 800c722:	bf00      	nop
 800c724:	e7fe      	b.n	800c724 <vPortValidateInterruptPriority+0x68>
	}
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	e000e3f0 	.word	0xe000e3f0
 800c738:	20000e84 	.word	0x20000e84
 800c73c:	e000ed0c 	.word	0xe000ed0c
 800c740:	20000e88 	.word	0x20000e88

0800c744 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b08a      	sub	sp, #40	; 0x28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c74c:	2300      	movs	r3, #0
 800c74e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c750:	f7fe ffae 	bl	800b6b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c754:	4b5b      	ldr	r3, [pc, #364]	; (800c8c4 <pvPortMalloc+0x180>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d101      	bne.n	800c760 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c75c:	f000 f91a 	bl	800c994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c760:	4b59      	ldr	r3, [pc, #356]	; (800c8c8 <pvPortMalloc+0x184>)
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4013      	ands	r3, r2
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f040 8092 	bne.w	800c892 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d01f      	beq.n	800c7b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c774:	2208      	movs	r2, #8
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4413      	add	r3, r2
 800c77a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f003 0307 	and.w	r3, r3, #7
 800c782:	2b00      	cmp	r3, #0
 800c784:	d016      	beq.n	800c7b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f023 0307 	bic.w	r3, r3, #7
 800c78c:	3308      	adds	r3, #8
 800c78e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f003 0307 	and.w	r3, r3, #7
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00c      	beq.n	800c7b4 <pvPortMalloc+0x70>
	__asm volatile
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	b672      	cpsid	i
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	b662      	cpsie	i
 800c7ae:	617b      	str	r3, [r7, #20]
}
 800c7b0:	bf00      	nop
 800c7b2:	e7fe      	b.n	800c7b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d06b      	beq.n	800c892 <pvPortMalloc+0x14e>
 800c7ba:	4b44      	ldr	r3, [pc, #272]	; (800c8cc <pvPortMalloc+0x188>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d866      	bhi.n	800c892 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7c4:	4b42      	ldr	r3, [pc, #264]	; (800c8d0 <pvPortMalloc+0x18c>)
 800c7c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7c8:	4b41      	ldr	r3, [pc, #260]	; (800c8d0 <pvPortMalloc+0x18c>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7ce:	e004      	b.n	800c7da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d903      	bls.n	800c7ec <pvPortMalloc+0xa8>
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1f1      	bne.n	800c7d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c7ec:	4b35      	ldr	r3, [pc, #212]	; (800c8c4 <pvPortMalloc+0x180>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d04d      	beq.n	800c892 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7f6:	6a3b      	ldr	r3, [r7, #32]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2208      	movs	r2, #8
 800c7fc:	4413      	add	r3, r2
 800c7fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	1ad2      	subs	r2, r2, r3
 800c810:	2308      	movs	r3, #8
 800c812:	005b      	lsls	r3, r3, #1
 800c814:	429a      	cmp	r2, r3
 800c816:	d921      	bls.n	800c85c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4413      	add	r3, r2
 800c81e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	f003 0307 	and.w	r3, r3, #7
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00c      	beq.n	800c844 <pvPortMalloc+0x100>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	b672      	cpsid	i
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	b662      	cpsie	i
 800c83e:	613b      	str	r3, [r7, #16]
}
 800c840:	bf00      	nop
 800c842:	e7fe      	b.n	800c842 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	1ad2      	subs	r2, r2, r3
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c856:	69b8      	ldr	r0, [r7, #24]
 800c858:	f000 f8fe 	bl	800ca58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c85c:	4b1b      	ldr	r3, [pc, #108]	; (800c8cc <pvPortMalloc+0x188>)
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	4a19      	ldr	r2, [pc, #100]	; (800c8cc <pvPortMalloc+0x188>)
 800c868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c86a:	4b18      	ldr	r3, [pc, #96]	; (800c8cc <pvPortMalloc+0x188>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	4b19      	ldr	r3, [pc, #100]	; (800c8d4 <pvPortMalloc+0x190>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	429a      	cmp	r2, r3
 800c874:	d203      	bcs.n	800c87e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c876:	4b15      	ldr	r3, [pc, #84]	; (800c8cc <pvPortMalloc+0x188>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a16      	ldr	r2, [pc, #88]	; (800c8d4 <pvPortMalloc+0x190>)
 800c87c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	4b11      	ldr	r3, [pc, #68]	; (800c8c8 <pvPortMalloc+0x184>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	431a      	orrs	r2, r3
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88e:	2200      	movs	r2, #0
 800c890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c892:	f7fe ff1b 	bl	800b6cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	f003 0307 	and.w	r3, r3, #7
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00c      	beq.n	800c8ba <pvPortMalloc+0x176>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a4:	b672      	cpsid	i
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	b662      	cpsie	i
 800c8b4:	60fb      	str	r3, [r7, #12]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <pvPortMalloc+0x174>
	return pvReturn;
 800c8ba:	69fb      	ldr	r3, [r7, #28]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3728      	adds	r7, #40	; 0x28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	20004a94 	.word	0x20004a94
 800c8c8:	20004aa0 	.word	0x20004aa0
 800c8cc:	20004a98 	.word	0x20004a98
 800c8d0:	20004a8c 	.word	0x20004a8c
 800c8d4:	20004a9c 	.word	0x20004a9c

0800c8d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d04c      	beq.n	800c984 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8ea:	2308      	movs	r3, #8
 800c8ec:	425b      	negs	r3, r3
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	4b23      	ldr	r3, [pc, #140]	; (800c98c <vPortFree+0xb4>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4013      	ands	r3, r2
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10c      	bne.n	800c920 <vPortFree+0x48>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90a:	b672      	cpsid	i
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	b662      	cpsie	i
 800c91a:	60fb      	str	r3, [r7, #12]
}
 800c91c:	bf00      	nop
 800c91e:	e7fe      	b.n	800c91e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00c      	beq.n	800c942 <vPortFree+0x6a>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	b672      	cpsid	i
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	b662      	cpsie	i
 800c93c:	60bb      	str	r3, [r7, #8]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	685a      	ldr	r2, [r3, #4]
 800c946:	4b11      	ldr	r3, [pc, #68]	; (800c98c <vPortFree+0xb4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4013      	ands	r3, r2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d019      	beq.n	800c984 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d115      	bne.n	800c984 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	4b0b      	ldr	r3, [pc, #44]	; (800c98c <vPortFree+0xb4>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	43db      	mvns	r3, r3
 800c962:	401a      	ands	r2, r3
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c968:	f7fe fea2 	bl	800b6b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	4b07      	ldr	r3, [pc, #28]	; (800c990 <vPortFree+0xb8>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4413      	add	r3, r2
 800c976:	4a06      	ldr	r2, [pc, #24]	; (800c990 <vPortFree+0xb8>)
 800c978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c97a:	6938      	ldr	r0, [r7, #16]
 800c97c:	f000 f86c 	bl	800ca58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c980:	f7fe fea4 	bl	800b6cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c984:	bf00      	nop
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	20004aa0 	.word	0x20004aa0
 800c990:	20004a98 	.word	0x20004a98

0800c994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c99a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c99e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9a0:	4b27      	ldr	r3, [pc, #156]	; (800ca40 <prvHeapInit+0xac>)
 800c9a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00c      	beq.n	800c9c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3307      	adds	r3, #7
 800c9b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f023 0307 	bic.w	r3, r3, #7
 800c9ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	4a1f      	ldr	r2, [pc, #124]	; (800ca40 <prvHeapInit+0xac>)
 800c9c4:	4413      	add	r3, r2
 800c9c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ca44 <prvHeapInit+0xb0>)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ca44 <prvHeapInit+0xb0>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	4413      	add	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9e0:	2208      	movs	r2, #8
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	1a9b      	subs	r3, r3, r2
 800c9e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f023 0307 	bic.w	r3, r3, #7
 800c9ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	4a15      	ldr	r2, [pc, #84]	; (800ca48 <prvHeapInit+0xb4>)
 800c9f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9f6:	4b14      	ldr	r3, [pc, #80]	; (800ca48 <prvHeapInit+0xb4>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9fe:	4b12      	ldr	r3, [pc, #72]	; (800ca48 <prvHeapInit+0xb4>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	1ad2      	subs	r2, r2, r3
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca14:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <prvHeapInit+0xb4>)
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	4a0a      	ldr	r2, [pc, #40]	; (800ca4c <prvHeapInit+0xb8>)
 800ca22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	4a09      	ldr	r2, [pc, #36]	; (800ca50 <prvHeapInit+0xbc>)
 800ca2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca2c:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <prvHeapInit+0xc0>)
 800ca2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca32:	601a      	str	r2, [r3, #0]
}
 800ca34:	bf00      	nop
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr
 800ca40:	20000e8c 	.word	0x20000e8c
 800ca44:	20004a8c 	.word	0x20004a8c
 800ca48:	20004a94 	.word	0x20004a94
 800ca4c:	20004a9c 	.word	0x20004a9c
 800ca50:	20004a98 	.word	0x20004a98
 800ca54:	20004aa0 	.word	0x20004aa0

0800ca58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca60:	4b28      	ldr	r3, [pc, #160]	; (800cb04 <prvInsertBlockIntoFreeList+0xac>)
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	e002      	b.n	800ca6c <prvInsertBlockIntoFreeList+0x14>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d8f7      	bhi.n	800ca66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	4413      	add	r3, r2
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d108      	bne.n	800ca9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	441a      	add	r2, r3
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	441a      	add	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d118      	bne.n	800cae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	4b15      	ldr	r3, [pc, #84]	; (800cb08 <prvInsertBlockIntoFreeList+0xb0>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d00d      	beq.n	800cad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	441a      	add	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	e008      	b.n	800cae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cad6:	4b0c      	ldr	r3, [pc, #48]	; (800cb08 <prvInsertBlockIntoFreeList+0xb0>)
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	e003      	b.n	800cae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	429a      	cmp	r2, r3
 800caee:	d002      	beq.n	800caf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caf6:	bf00      	nop
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	20004a8c 	.word	0x20004a8c
 800cb08:	20004a94 	.word	0x20004a94

0800cb0c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	330c      	adds	r3, #12
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f001 ffa3 	bl	800ea6c <tcpip_send_msg_wait_sem>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cb2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d103      	bne.n	800cb3a <netconn_apimsg+0x2e>
    return apimsg->err;
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cb38:	e001      	b.n	800cb3e <netconn_apimsg+0x32>
  }
  return err;
 800cb3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08c      	sub	sp, #48	; 0x30
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	603a      	str	r2, [r7, #0]
 800cb52:	71fb      	strb	r3, [r7, #7]
 800cb54:	460b      	mov	r3, r1
 800cb56:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 feff 	bl	800d960 <netconn_alloc>
 800cb62:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d054      	beq.n	800cc14 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800cb6a:	79bb      	ldrb	r3, [r7, #6]
 800cb6c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800cb72:	f107 0308 	add.w	r3, r7, #8
 800cb76:	4619      	mov	r1, r3
 800cb78:	4829      	ldr	r0, [pc, #164]	; (800cc20 <netconn_new_with_proto_and_callback+0xd8>)
 800cb7a:	f7ff ffc7 	bl	800cb0c <netconn_apimsg>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800cb84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d043      	beq.n	800cc14 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d005      	beq.n	800cba0 <netconn_new_with_proto_and_callback+0x58>
 800cb94:	4b23      	ldr	r3, [pc, #140]	; (800cc24 <netconn_new_with_proto_and_callback+0xdc>)
 800cb96:	22a3      	movs	r2, #163	; 0xa3
 800cb98:	4923      	ldr	r1, [pc, #140]	; (800cc28 <netconn_new_with_proto_and_callback+0xe0>)
 800cb9a:	4824      	ldr	r0, [pc, #144]	; (800cc2c <netconn_new_with_proto_and_callback+0xe4>)
 800cb9c:	f00e fec6 	bl	801b92c <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	3310      	adds	r3, #16
 800cba4:	4618      	mov	r0, r3
 800cba6:	f00e f9ae 	bl	801af06 <sys_mbox_valid>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d105      	bne.n	800cbbc <netconn_new_with_proto_and_callback+0x74>
 800cbb0:	4b1c      	ldr	r3, [pc, #112]	; (800cc24 <netconn_new_with_proto_and_callback+0xdc>)
 800cbb2:	22a4      	movs	r2, #164	; 0xa4
 800cbb4:	491e      	ldr	r1, [pc, #120]	; (800cc30 <netconn_new_with_proto_and_callback+0xe8>)
 800cbb6:	481d      	ldr	r0, [pc, #116]	; (800cc2c <netconn_new_with_proto_and_callback+0xe4>)
 800cbb8:	f00e feb8 	bl	801b92c <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	3314      	adds	r3, #20
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f00e f9a0 	bl	801af06 <sys_mbox_valid>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d005      	beq.n	800cbd8 <netconn_new_with_proto_and_callback+0x90>
 800cbcc:	4b15      	ldr	r3, [pc, #84]	; (800cc24 <netconn_new_with_proto_and_callback+0xdc>)
 800cbce:	22a6      	movs	r2, #166	; 0xa6
 800cbd0:	4918      	ldr	r1, [pc, #96]	; (800cc34 <netconn_new_with_proto_and_callback+0xec>)
 800cbd2:	4816      	ldr	r0, [pc, #88]	; (800cc2c <netconn_new_with_proto_and_callback+0xe4>)
 800cbd4:	f00e feaa 	bl	801b92c <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800cbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbda:	330c      	adds	r3, #12
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f00e fa23 	bl	801b028 <sys_sem_valid>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d105      	bne.n	800cbf4 <netconn_new_with_proto_and_callback+0xac>
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	; (800cc24 <netconn_new_with_proto_and_callback+0xdc>)
 800cbea:	22a9      	movs	r2, #169	; 0xa9
 800cbec:	4912      	ldr	r1, [pc, #72]	; (800cc38 <netconn_new_with_proto_and_callback+0xf0>)
 800cbee:	480f      	ldr	r0, [pc, #60]	; (800cc2c <netconn_new_with_proto_and_callback+0xe4>)
 800cbf0:	f00e fe9c 	bl	801b92c <printf>
      sys_sem_free(&conn->op_completed);
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	330c      	adds	r3, #12
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f00e fa08 	bl	801b00e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	3310      	adds	r3, #16
 800cc02:	4618      	mov	r0, r3
 800cc04:	f00e f8f8 	bl	801adf8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800cc08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc0a:	2007      	movs	r0, #7
 800cc0c:	f003 fcaa 	bl	8010564 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800cc10:	2300      	movs	r3, #0
 800cc12:	e000      	b.n	800cc16 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3730      	adds	r7, #48	; 0x30
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	0800d935 	.word	0x0800d935
 800cc24:	08024914 	.word	0x08024914
 800cc28:	08024948 	.word	0x08024948
 800cc2c:	0802496c 	.word	0x0802496c
 800cc30:	08024994 	.word	0x08024994
 800cc34:	080249ac 	.word	0x080249ac
 800cc38:	080249d0 	.word	0x080249d0

0800cc3c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08c      	sub	sp, #48	; 0x30
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e014      	b.n	800cc78 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800cc52:	2329      	movs	r3, #41	; 0x29
 800cc54:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800cc56:	f107 030c 	add.w	r3, r7, #12
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4808      	ldr	r0, [pc, #32]	; (800cc80 <netconn_prepare_delete+0x44>)
 800cc5e:	f7ff ff55 	bl	800cb0c <netconn_apimsg>
 800cc62:	4603      	mov	r3, r0
 800cc64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800cc68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <netconn_prepare_delete+0x3a>
    return err;
 800cc70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc74:	e000      	b.n	800cc78 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3730      	adds	r7, #48	; 0x30
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	0800de99 	.word	0x0800de99

0800cc84 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <netconn_delete+0x12>
    return ERR_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	e00d      	b.n	800ccb2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7ff ffd0 	bl	800cc3c <netconn_prepare_delete>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800cca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d102      	bne.n	800ccae <netconn_delete+0x2a>
    netconn_free(conn);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fec7 	bl	800da3c <netconn_free>
  }
  return err;
 800ccae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
	...

0800ccbc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08e      	sub	sp, #56	; 0x38
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d109      	bne.n	800cce4 <netconn_bind+0x28>
 800ccd0:	4b11      	ldr	r3, [pc, #68]	; (800cd18 <netconn_bind+0x5c>)
 800ccd2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ccd6:	4911      	ldr	r1, [pc, #68]	; (800cd1c <netconn_bind+0x60>)
 800ccd8:	4811      	ldr	r0, [pc, #68]	; (800cd20 <netconn_bind+0x64>)
 800ccda:	f00e fe27 	bl	801b92c <printf>
 800ccde:	f06f 030f 	mvn.w	r3, #15
 800cce2:	e015      	b.n	800cd10 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ccea:	4b0e      	ldr	r3, [pc, #56]	; (800cd24 <netconn_bind+0x68>)
 800ccec:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ccfa:	f107 0314 	add.w	r3, r7, #20
 800ccfe:	4619      	mov	r1, r3
 800cd00:	4809      	ldr	r0, [pc, #36]	; (800cd28 <netconn_bind+0x6c>)
 800cd02:	f7ff ff03 	bl	800cb0c <netconn_apimsg>
 800cd06:	4603      	mov	r3, r0
 800cd08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800cd0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3738      	adds	r7, #56	; 0x38
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	08024914 	.word	0x08024914
 800cd1c:	08024a4c 	.word	0x08024a4c
 800cd20:	0802496c 	.word	0x0802496c
 800cd24:	08029094 	.word	0x08029094
 800cd28:	0800e061 	.word	0x0800e061

0800cd2c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	4613      	mov	r3, r2
 800cd38:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d109      	bne.n	800cd58 <netconn_recv_data+0x2c>
 800cd44:	4b58      	ldr	r3, [pc, #352]	; (800cea8 <netconn_recv_data+0x17c>)
 800cd46:	f44f 7212 	mov.w	r2, #584	; 0x248
 800cd4a:	4958      	ldr	r1, [pc, #352]	; (800ceac <netconn_recv_data+0x180>)
 800cd4c:	4858      	ldr	r0, [pc, #352]	; (800ceb0 <netconn_recv_data+0x184>)
 800cd4e:	f00e fded 	bl	801b92c <printf>
 800cd52:	f06f 030f 	mvn.w	r3, #15
 800cd56:	e0a2      	b.n	800ce9e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d109      	bne.n	800cd78 <netconn_recv_data+0x4c>
 800cd64:	4b50      	ldr	r3, [pc, #320]	; (800cea8 <netconn_recv_data+0x17c>)
 800cd66:	f240 224a 	movw	r2, #586	; 0x24a
 800cd6a:	4952      	ldr	r1, [pc, #328]	; (800ceb4 <netconn_recv_data+0x188>)
 800cd6c:	4850      	ldr	r0, [pc, #320]	; (800ceb0 <netconn_recv_data+0x184>)
 800cd6e:	f00e fddd 	bl	801b92c <printf>
 800cd72:	f06f 030f 	mvn.w	r3, #15
 800cd76:	e092      	b.n	800ce9e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	3310      	adds	r3, #16
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f00e f8c2 	bl	801af06 <sys_mbox_valid>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10e      	bne.n	800cda6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 fa23 	bl	800d1d4 <netconn_err>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800cd92:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800cd9a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cd9e:	e07e      	b.n	800ce9e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800cda0:	f06f 030a 	mvn.w	r3, #10
 800cda4:	e07b      	b.n	800ce9e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	7f1b      	ldrb	r3, [r3, #28]
 800cdaa:	f003 0302 	and.w	r3, r3, #2
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10f      	bne.n	800cdd2 <netconn_recv_data+0xa6>
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	f003 0304 	and.w	r3, r3, #4
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10a      	bne.n	800cdd2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	7f1b      	ldrb	r3, [r3, #28]
 800cdc0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d104      	bne.n	800cdd2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d023      	beq.n	800ce1a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3310      	adds	r3, #16
 800cdd6:	f107 0218 	add.w	r2, r7, #24
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f00e f876 	bl	801aece <sys_arch_mbox_tryfetch>
 800cde2:	4603      	mov	r3, r0
 800cde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde8:	d11f      	bne.n	800ce2a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f000 f9f2 	bl	800d1d4 <netconn_err>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800cdf4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d002      	beq.n	800ce02 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800cdfc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ce00:	e04d      	b.n	800ce9e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	7f1b      	ldrb	r3, [r3, #28]
 800ce06:	f003 0301 	and.w	r3, r3, #1
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ce0e:	f06f 030a 	mvn.w	r3, #10
 800ce12:	e044      	b.n	800ce9e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ce14:	f06f 0306 	mvn.w	r3, #6
 800ce18:	e041      	b.n	800ce9e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3310      	adds	r3, #16
 800ce1e:	f107 0118 	add.w	r1, r7, #24
 800ce22:	2200      	movs	r2, #0
 800ce24:	4618      	mov	r0, r3
 800ce26:	f00e f813 	bl	801ae50 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce32:	2b10      	cmp	r3, #16
 800ce34:	d117      	bne.n	800ce66 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	f107 0217 	add.w	r2, r7, #23
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 fa1a 	bl	800d278 <lwip_netconn_is_err_msg>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d009      	beq.n	800ce5e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ce4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce4e:	f113 0f0f 	cmn.w	r3, #15
 800ce52:	d101      	bne.n	800ce58 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	e022      	b.n	800ce9e <netconn_recv_data+0x172>
      }
      return err;
 800ce58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce5c:	e01f      	b.n	800ce9e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	891b      	ldrh	r3, [r3, #8]
 800ce62:	83fb      	strh	r3, [r7, #30]
 800ce64:	e00d      	b.n	800ce82 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d106      	bne.n	800ce7a <netconn_recv_data+0x14e>
 800ce6c:	4b0e      	ldr	r3, [pc, #56]	; (800cea8 <netconn_recv_data+0x17c>)
 800ce6e:	f240 2291 	movw	r2, #657	; 0x291
 800ce72:	4911      	ldr	r1, [pc, #68]	; (800ceb8 <netconn_recv_data+0x18c>)
 800ce74:	480e      	ldr	r0, [pc, #56]	; (800ceb0 <netconn_recv_data+0x184>)
 800ce76:	f00e fd59 	bl	801b92c <printf>
    len = netbuf_len((struct netbuf *)buf);
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	891b      	ldrh	r3, [r3, #8]
 800ce80:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d005      	beq.n	800ce96 <netconn_recv_data+0x16a>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8e:	8bfa      	ldrh	r2, [r7, #30]
 800ce90:	2101      	movs	r1, #1
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3720      	adds	r7, #32
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	08024914 	.word	0x08024914
 800ceac:	08024b2c 	.word	0x08024b2c
 800ceb0:	0802496c 	.word	0x0802496c
 800ceb4:	08024b4c 	.word	0x08024b4c
 800ceb8:	08024b68 	.word	0x08024b68

0800cebc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d005      	beq.n	800ceda <netconn_tcp_recvd_msg+0x1e>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ced6:	2b10      	cmp	r3, #16
 800ced8:	d009      	beq.n	800ceee <netconn_tcp_recvd_msg+0x32>
 800ceda:	4b0c      	ldr	r3, [pc, #48]	; (800cf0c <netconn_tcp_recvd_msg+0x50>)
 800cedc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800cee0:	490b      	ldr	r1, [pc, #44]	; (800cf10 <netconn_tcp_recvd_msg+0x54>)
 800cee2:	480c      	ldr	r0, [pc, #48]	; (800cf14 <netconn_tcp_recvd_msg+0x58>)
 800cee4:	f00e fd22 	bl	801b92c <printf>
 800cee8:	f06f 030f 	mvn.w	r3, #15
 800ceec:	e00a      	b.n	800cf04 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68ba      	ldr	r2, [r7, #8]
 800cef8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800cefa:	6879      	ldr	r1, [r7, #4]
 800cefc:	4806      	ldr	r0, [pc, #24]	; (800cf18 <netconn_tcp_recvd_msg+0x5c>)
 800cefe:	f7ff fe05 	bl	800cb0c <netconn_apimsg>
 800cf02:	4603      	mov	r3, r0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	08024914 	.word	0x08024914
 800cf10:	08024b74 	.word	0x08024b74
 800cf14:	0802496c 	.word	0x0802496c
 800cf18:	0800e16f 	.word	0x0800e16f

0800cf1c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b090      	sub	sp, #64	; 0x40
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	4613      	mov	r3, r2
 800cf28:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3310      	adds	r3, #16
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f00d ffe9 	bl	801af06 <sys_mbox_valid>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d102      	bne.n	800cf40 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800cf3a:	f06f 030a 	mvn.w	r3, #10
 800cf3e:	e06d      	b.n	800d01c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	7f1b      	ldrb	r3, [r3, #28]
 800cf44:	b25b      	sxtb	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	da07      	bge.n	800cf5a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	7f1b      	ldrb	r3, [r3, #28]
 800cf4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800cf58:	e039      	b.n	800cfce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800cf5a:	79fb      	ldrb	r3, [r7, #7]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	68b9      	ldr	r1, [r7, #8]
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff fee3 	bl	800cd2c <netconn_recv_data>
 800cf66:	4603      	mov	r3, r0
 800cf68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800cf6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800cf74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf78:	e050      	b.n	800d01c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800cf80:	79fb      	ldrb	r3, [r7, #7]
 800cf82:	f003 0308 	and.w	r3, r3, #8
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10e      	bne.n	800cfa8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <netconn_recv_data_tcp+0x7a>
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	891b      	ldrh	r3, [r3, #8]
 800cf94:	e000      	b.n	800cf98 <netconn_recv_data_tcp+0x7c>
 800cf96:	2301      	movs	r3, #1
 800cf98:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800cf9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf9c:	f107 0214 	add.w	r2, r7, #20
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f7ff ff8a 	bl	800cebc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d134      	bne.n	800d018 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	f003 0310 	and.w	r3, r3, #16
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d009      	beq.n	800cfcc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	7f1b      	ldrb	r3, [r3, #28]
 800cfbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800cfc6:	f06f 0306 	mvn.w	r3, #6
 800cfca:	e027      	b.n	800d01c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800cfcc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d005      	beq.n	800cfe2 <netconn_recv_data_tcp+0xc6>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2101      	movs	r1, #1
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10f      	bne.n	800d00a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f000 f8f2 	bl	800d1d4 <netconn_err>
 800cff0:	4603      	mov	r3, r0
 800cff2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800cff6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <netconn_recv_data_tcp+0xe8>
          return err;
 800cffe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d002:	e00b      	b.n	800d01c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800d004:	f06f 030d 	mvn.w	r3, #13
 800d008:	e008      	b.n	800d01c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d00a:	2101      	movs	r1, #1
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f000 f8b1 	bl	800d174 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d012:	f06f 030e 	mvn.w	r3, #14
 800d016:	e001      	b.n	800d01c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800d018:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3740      	adds	r7, #64	; 0x40
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d109      	bne.n	800d04c <netconn_recv+0x28>
 800d038:	4b32      	ldr	r3, [pc, #200]	; (800d104 <netconn_recv+0xe0>)
 800d03a:	f240 3263 	movw	r2, #867	; 0x363
 800d03e:	4932      	ldr	r1, [pc, #200]	; (800d108 <netconn_recv+0xe4>)
 800d040:	4832      	ldr	r0, [pc, #200]	; (800d10c <netconn_recv+0xe8>)
 800d042:	f00e fc73 	bl	801b92c <printf>
 800d046:	f06f 030f 	mvn.w	r3, #15
 800d04a:	e056      	b.n	800d0fa <netconn_recv+0xd6>
  *new_buf = NULL;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	2200      	movs	r2, #0
 800d050:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d109      	bne.n	800d06c <netconn_recv+0x48>
 800d058:	4b2a      	ldr	r3, [pc, #168]	; (800d104 <netconn_recv+0xe0>)
 800d05a:	f240 3265 	movw	r2, #869	; 0x365
 800d05e:	492c      	ldr	r1, [pc, #176]	; (800d110 <netconn_recv+0xec>)
 800d060:	482a      	ldr	r0, [pc, #168]	; (800d10c <netconn_recv+0xe8>)
 800d062:	f00e fc63 	bl	801b92c <printf>
 800d066:	f06f 030f 	mvn.w	r3, #15
 800d06a:	e046      	b.n	800d0fa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d074:	2b10      	cmp	r3, #16
 800d076:	d13a      	bne.n	800d0ee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d078:	2300      	movs	r3, #0
 800d07a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d07c:	2006      	movs	r0, #6
 800d07e:	f003 fa1f 	bl	80104c0 <memp_malloc>
 800d082:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d102      	bne.n	800d090 <netconn_recv+0x6c>
      return ERR_MEM;
 800d08a:	f04f 33ff 	mov.w	r3, #4294967295
 800d08e:	e034      	b.n	800d0fa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800d090:	f107 030c 	add.w	r3, r7, #12
 800d094:	2200      	movs	r2, #0
 800d096:	4619      	mov	r1, r3
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff ff3f 	bl	800cf1c <netconn_recv_data_tcp>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d0a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d006      	beq.n	800d0b8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800d0aa:	6979      	ldr	r1, [r7, #20]
 800d0ac:	2006      	movs	r0, #6
 800d0ae:	f003 fa59 	bl	8010564 <memp_free>
      return err;
 800d0b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0b6:	e020      	b.n	800d0fa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d106      	bne.n	800d0cc <netconn_recv+0xa8>
 800d0be:	4b11      	ldr	r3, [pc, #68]	; (800d104 <netconn_recv+0xe0>)
 800d0c0:	f240 3279 	movw	r2, #889	; 0x379
 800d0c4:	4913      	ldr	r1, [pc, #76]	; (800d114 <netconn_recv+0xf0>)
 800d0c6:	4811      	ldr	r0, [pc, #68]	; (800d10c <netconn_recv+0xe8>)
 800d0c8:	f00e fc30 	bl	801b92c <printf>

    buf->p = p;
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e005      	b.n	800d0fa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fe1a 	bl	800cd2c <netconn_recv_data>
 800d0f8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	08024914 	.word	0x08024914
 800d108:	08024b2c 	.word	0x08024b2c
 800d10c:	0802496c 	.word	0x0802496c
 800d110:	08024b4c 	.word	0x08024b4c
 800d114:	08024bc4 	.word	0x08024bc4

0800d118 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08c      	sub	sp, #48	; 0x30
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d109      	bne.n	800d13c <netconn_send+0x24>
 800d128:	4b0e      	ldr	r3, [pc, #56]	; (800d164 <netconn_send+0x4c>)
 800d12a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800d12e:	490e      	ldr	r1, [pc, #56]	; (800d168 <netconn_send+0x50>)
 800d130:	480e      	ldr	r0, [pc, #56]	; (800d16c <netconn_send+0x54>)
 800d132:	f00e fbfb 	bl	801b92c <printf>
 800d136:	f06f 030f 	mvn.w	r3, #15
 800d13a:	e00e      	b.n	800d15a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800d144:	f107 030c 	add.w	r3, r7, #12
 800d148:	4619      	mov	r1, r3
 800d14a:	4809      	ldr	r0, [pc, #36]	; (800d170 <netconn_send+0x58>)
 800d14c:	f7ff fcde 	bl	800cb0c <netconn_apimsg>
 800d150:	4603      	mov	r3, r0
 800d152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d156:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3730      	adds	r7, #48	; 0x30
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	08024914 	.word	0x08024914
 800d168:	08024bd0 	.word	0x08024bd0
 800d16c:	0802496c 	.word	0x0802496c
 800d170:	0800e0d5 	.word	0x0800e0d5

0800d174 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08c      	sub	sp, #48	; 0x30
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d109      	bne.n	800d19a <netconn_close_shutdown+0x26>
 800d186:	4b0f      	ldr	r3, [pc, #60]	; (800d1c4 <netconn_close_shutdown+0x50>)
 800d188:	f240 4247 	movw	r2, #1095	; 0x447
 800d18c:	490e      	ldr	r1, [pc, #56]	; (800d1c8 <netconn_close_shutdown+0x54>)
 800d18e:	480f      	ldr	r0, [pc, #60]	; (800d1cc <netconn_close_shutdown+0x58>)
 800d190:	f00e fbcc 	bl	801b92c <printf>
 800d194:	f06f 030f 	mvn.w	r3, #15
 800d198:	e010      	b.n	800d1bc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d1a2:	2329      	movs	r3, #41	; 0x29
 800d1a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d1a6:	f107 030c 	add.w	r3, r7, #12
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	4808      	ldr	r0, [pc, #32]	; (800d1d0 <netconn_close_shutdown+0x5c>)
 800d1ae:	f7ff fcad 	bl	800cb0c <netconn_apimsg>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d1b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3730      	adds	r7, #48	; 0x30
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	08024914 	.word	0x08024914
 800d1c8:	08024c50 	.word	0x08024c50
 800d1cc:	0802496c 	.word	0x0802496c
 800d1d0:	0800e571 	.word	0x0800e571

0800d1d4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <netconn_err+0x12>
    return ERR_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	e00d      	b.n	800d202 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d1e6:	f00d ffa9 	bl	801b13c <sys_arch_protect>
 800d1ea:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	7a1b      	ldrb	r3, [r3, #8]
 800d1f0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f00d ffad 	bl	801b158 <sys_arch_unprotect>
  return err;
 800d1fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
	...

0800d20c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	4603      	mov	r3, r0
 800d214:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d21a:	f113 0f0d 	cmn.w	r3, #13
 800d21e:	d009      	beq.n	800d234 <lwip_netconn_err_to_msg+0x28>
 800d220:	f113 0f0d 	cmn.w	r3, #13
 800d224:	dc0c      	bgt.n	800d240 <lwip_netconn_err_to_msg+0x34>
 800d226:	f113 0f0f 	cmn.w	r3, #15
 800d22a:	d007      	beq.n	800d23c <lwip_netconn_err_to_msg+0x30>
 800d22c:	f113 0f0e 	cmn.w	r3, #14
 800d230:	d002      	beq.n	800d238 <lwip_netconn_err_to_msg+0x2c>
 800d232:	e005      	b.n	800d240 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d234:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <lwip_netconn_err_to_msg+0x54>)
 800d236:	e00e      	b.n	800d256 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d238:	4b0a      	ldr	r3, [pc, #40]	; (800d264 <lwip_netconn_err_to_msg+0x58>)
 800d23a:	e00c      	b.n	800d256 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d23c:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <lwip_netconn_err_to_msg+0x5c>)
 800d23e:	e00a      	b.n	800d256 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d005      	beq.n	800d254 <lwip_netconn_err_to_msg+0x48>
 800d248:	4b08      	ldr	r3, [pc, #32]	; (800d26c <lwip_netconn_err_to_msg+0x60>)
 800d24a:	227d      	movs	r2, #125	; 0x7d
 800d24c:	4908      	ldr	r1, [pc, #32]	; (800d270 <lwip_netconn_err_to_msg+0x64>)
 800d24e:	4809      	ldr	r0, [pc, #36]	; (800d274 <lwip_netconn_err_to_msg+0x68>)
 800d250:	f00e fb6c 	bl	801b92c <printf>
      return NULL;
 800d254:	2300      	movs	r3, #0
  }
}
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	08028124 	.word	0x08028124
 800d264:	08028125 	.word	0x08028125
 800d268:	08028126 	.word	0x08028126
 800d26c:	08024c6c 	.word	0x08024c6c
 800d270:	08024ca0 	.word	0x08024ca0
 800d274:	08024cb0 	.word	0x08024cb0

0800d278 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d105      	bne.n	800d294 <lwip_netconn_is_err_msg+0x1c>
 800d288:	4b12      	ldr	r3, [pc, #72]	; (800d2d4 <lwip_netconn_is_err_msg+0x5c>)
 800d28a:	2285      	movs	r2, #133	; 0x85
 800d28c:	4912      	ldr	r1, [pc, #72]	; (800d2d8 <lwip_netconn_is_err_msg+0x60>)
 800d28e:	4813      	ldr	r0, [pc, #76]	; (800d2dc <lwip_netconn_is_err_msg+0x64>)
 800d290:	f00e fb4c 	bl	801b92c <printf>

  if (msg == &netconn_aborted) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a12      	ldr	r2, [pc, #72]	; (800d2e0 <lwip_netconn_is_err_msg+0x68>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d104      	bne.n	800d2a6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	22f3      	movs	r2, #243	; 0xf3
 800d2a0:	701a      	strb	r2, [r3, #0]
    return 1;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e012      	b.n	800d2cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a0e      	ldr	r2, [pc, #56]	; (800d2e4 <lwip_netconn_is_err_msg+0x6c>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d104      	bne.n	800d2b8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	22f2      	movs	r2, #242	; 0xf2
 800d2b2:	701a      	strb	r2, [r3, #0]
    return 1;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e009      	b.n	800d2cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a0b      	ldr	r2, [pc, #44]	; (800d2e8 <lwip_netconn_is_err_msg+0x70>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d104      	bne.n	800d2ca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	22f1      	movs	r2, #241	; 0xf1
 800d2c4:	701a      	strb	r2, [r3, #0]
    return 1;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e000      	b.n	800d2cc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	08024c6c 	.word	0x08024c6c
 800d2d8:	08024cd8 	.word	0x08024cd8
 800d2dc:	08024cb0 	.word	0x08024cb0
 800d2e0:	08028124 	.word	0x08028124
 800d2e4:	08028125 	.word	0x08028125
 800d2e8:	08028126 	.word	0x08028126

0800d2ec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d105      	bne.n	800d30c <recv_udp+0x20>
 800d300:	4b34      	ldr	r3, [pc, #208]	; (800d3d4 <recv_udp+0xe8>)
 800d302:	22e5      	movs	r2, #229	; 0xe5
 800d304:	4934      	ldr	r1, [pc, #208]	; (800d3d8 <recv_udp+0xec>)
 800d306:	4835      	ldr	r0, [pc, #212]	; (800d3dc <recv_udp+0xf0>)
 800d308:	f00e fb10 	bl	801b92c <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d105      	bne.n	800d31e <recv_udp+0x32>
 800d312:	4b30      	ldr	r3, [pc, #192]	; (800d3d4 <recv_udp+0xe8>)
 800d314:	22e6      	movs	r2, #230	; 0xe6
 800d316:	4932      	ldr	r1, [pc, #200]	; (800d3e0 <recv_udp+0xf4>)
 800d318:	4830      	ldr	r0, [pc, #192]	; (800d3dc <recv_udp+0xf0>)
 800d31a:	f00e fb07 	bl	801b92c <printf>
  conn = (struct netconn *)arg;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d103      	bne.n	800d330 <recv_udp+0x44>
    pbuf_free(p);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f003 ff99 	bl	8011260 <pbuf_free>
    return;
 800d32e:	e04d      	b.n	800d3cc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	429a      	cmp	r2, r3
 800d338:	d005      	beq.n	800d346 <recv_udp+0x5a>
 800d33a:	4b26      	ldr	r3, [pc, #152]	; (800d3d4 <recv_udp+0xe8>)
 800d33c:	22ee      	movs	r2, #238	; 0xee
 800d33e:	4929      	ldr	r1, [pc, #164]	; (800d3e4 <recv_udp+0xf8>)
 800d340:	4826      	ldr	r0, [pc, #152]	; (800d3dc <recv_udp+0xf0>)
 800d342:	f00e faf3 	bl	801b92c <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	3310      	adds	r3, #16
 800d34a:	4618      	mov	r0, r3
 800d34c:	f00d fddb 	bl	801af06 <sys_mbox_valid>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d103      	bne.n	800d35e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f003 ff82 	bl	8011260 <pbuf_free>
    return;
 800d35c:	e036      	b.n	800d3cc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d35e:	2006      	movs	r0, #6
 800d360:	f003 f8ae 	bl	80104c0 <memp_malloc>
 800d364:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d103      	bne.n	800d374 <recv_udp+0x88>
    pbuf_free(p);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f003 ff77 	bl	8011260 <pbuf_free>
    return;
 800d372:	e02b      	b.n	800d3cc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <recv_udp+0xa0>
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	e000      	b.n	800d38e <recv_udp+0xa2>
 800d38c:	2300      	movs	r3, #0
 800d38e:	69ba      	ldr	r2, [r7, #24]
 800d390:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d396:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	891b      	ldrh	r3, [r3, #8]
 800d39c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	3310      	adds	r3, #16
 800d3a2:	69b9      	ldr	r1, [r7, #24]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f00d fd39 	bl	801ae1c <sys_mbox_trypost>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d003      	beq.n	800d3b8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d3b0:	69b8      	ldr	r0, [r7, #24]
 800d3b2:	f001 f969 	bl	800e688 <netbuf_delete>
    return;
 800d3b6:	e009      	b.n	800d3cc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d005      	beq.n	800d3cc <recv_udp+0xe0>
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	8afa      	ldrh	r2, [r7, #22]
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	69f8      	ldr	r0, [r7, #28]
 800d3ca:	4798      	blx	r3
  }
}
 800d3cc:	3720      	adds	r7, #32
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	08024c6c 	.word	0x08024c6c
 800d3d8:	08024ce4 	.word	0x08024ce4
 800d3dc:	08024cb0 	.word	0x08024cb0
 800d3e0:	08024d08 	.word	0x08024d08
 800d3e4:	08024d28 	.word	0x08024d28

0800d3e8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d106      	bne.n	800d40a <recv_tcp+0x22>
 800d3fc:	4b36      	ldr	r3, [pc, #216]	; (800d4d8 <recv_tcp+0xf0>)
 800d3fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d402:	4936      	ldr	r1, [pc, #216]	; (800d4dc <recv_tcp+0xf4>)
 800d404:	4836      	ldr	r0, [pc, #216]	; (800d4e0 <recv_tcp+0xf8>)
 800d406:	f00e fa91 	bl	801b92c <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d106      	bne.n	800d41e <recv_tcp+0x36>
 800d410:	4b31      	ldr	r3, [pc, #196]	; (800d4d8 <recv_tcp+0xf0>)
 800d412:	f240 122d 	movw	r2, #301	; 0x12d
 800d416:	4933      	ldr	r1, [pc, #204]	; (800d4e4 <recv_tcp+0xfc>)
 800d418:	4831      	ldr	r0, [pc, #196]	; (800d4e0 <recv_tcp+0xf8>)
 800d41a:	f00e fa87 	bl	801b92c <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d41e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d006      	beq.n	800d434 <recv_tcp+0x4c>
 800d426:	4b2c      	ldr	r3, [pc, #176]	; (800d4d8 <recv_tcp+0xf0>)
 800d428:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d42c:	492e      	ldr	r1, [pc, #184]	; (800d4e8 <recv_tcp+0x100>)
 800d42e:	482c      	ldr	r0, [pc, #176]	; (800d4e0 <recv_tcp+0xf8>)
 800d430:	f00e fa7c 	bl	801b92c <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d102      	bne.n	800d444 <recv_tcp+0x5c>
    return ERR_VAL;
 800d43e:	f06f 0305 	mvn.w	r3, #5
 800d442:	e045      	b.n	800d4d0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d006      	beq.n	800d45c <recv_tcp+0x74>
 800d44e:	4b22      	ldr	r3, [pc, #136]	; (800d4d8 <recv_tcp+0xf0>)
 800d450:	f240 1235 	movw	r2, #309	; 0x135
 800d454:	4925      	ldr	r1, [pc, #148]	; (800d4ec <recv_tcp+0x104>)
 800d456:	4822      	ldr	r0, [pc, #136]	; (800d4e0 <recv_tcp+0xf8>)
 800d458:	f00e fa68 	bl	801b92c <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	3310      	adds	r3, #16
 800d460:	4618      	mov	r0, r3
 800d462:	f00d fd50 	bl	801af06 <sys_mbox_valid>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10d      	bne.n	800d488 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d008      	beq.n	800d484 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	891b      	ldrh	r3, [r3, #8]
 800d476:	4619      	mov	r1, r3
 800d478:	68b8      	ldr	r0, [r7, #8]
 800d47a:	f004 fecb 	bl	8012214 <tcp_recved>
      pbuf_free(p);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f003 feee 	bl	8011260 <pbuf_free>
    }
    return ERR_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	e023      	b.n	800d4d0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d005      	beq.n	800d49a <recv_tcp+0xb2>
    msg = p;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	891b      	ldrh	r3, [r3, #8]
 800d496:	83fb      	strh	r3, [r7, #30]
 800d498:	e003      	b.n	800d4a2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d49a:	4b15      	ldr	r3, [pc, #84]	; (800d4f0 <recv_tcp+0x108>)
 800d49c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	3310      	adds	r3, #16
 800d4a6:	69b9      	ldr	r1, [r7, #24]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f00d fcb7 	bl	801ae1c <sys_mbox_trypost>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b8:	e00a      	b.n	800d4d0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d005      	beq.n	800d4ce <recv_tcp+0xe6>
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c6:	8bfa      	ldrh	r2, [r7, #30]
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	6978      	ldr	r0, [r7, #20]
 800d4cc:	4798      	blx	r3
  }

  return ERR_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3720      	adds	r7, #32
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	08024c6c 	.word	0x08024c6c
 800d4dc:	08024d48 	.word	0x08024d48
 800d4e0:	08024cb0 	.word	0x08024cb0
 800d4e4:	08024d6c 	.word	0x08024d6c
 800d4e8:	08024d8c 	.word	0x08024d8c
 800d4ec:	08024da4 	.word	0x08024da4
 800d4f0:	08028126 	.word	0x08028126

0800d4f4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d106      	bne.n	800d516 <poll_tcp+0x22>
 800d508:	4b29      	ldr	r3, [pc, #164]	; (800d5b0 <poll_tcp+0xbc>)
 800d50a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d50e:	4929      	ldr	r1, [pc, #164]	; (800d5b4 <poll_tcp+0xc0>)
 800d510:	4829      	ldr	r0, [pc, #164]	; (800d5b8 <poll_tcp+0xc4>)
 800d512:	f00e fa0b 	bl	801b92c <printf>

  if (conn->state == NETCONN_WRITE) {
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	785b      	ldrb	r3, [r3, #1]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d104      	bne.n	800d528 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d51e:	2101      	movs	r1, #1
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f000 fe59 	bl	800e1d8 <lwip_netconn_do_writemore>
 800d526:	e016      	b.n	800d556 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	785b      	ldrb	r3, [r3, #1]
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	d112      	bne.n	800d556 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6a1b      	ldr	r3, [r3, #32]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00a      	beq.n	800d54e <poll_tcp+0x5a>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6a1b      	ldr	r3, [r3, #32]
 800d53c:	7a5b      	ldrb	r3, [r3, #9]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d005      	beq.n	800d54e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6a1b      	ldr	r3, [r3, #32]
 800d546:	7a5a      	ldrb	r2, [r3, #9]
 800d548:	3a01      	subs	r2, #1
 800d54a:	b2d2      	uxtb	r2, r2
 800d54c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d54e:	2101      	movs	r1, #1
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f000 fb3b 	bl	800dbcc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	7f1b      	ldrb	r3, [r3, #28]
 800d55a:	f003 0310 	and.w	r3, r3, #16
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d021      	beq.n	800d5a6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d01d      	beq.n	800d5a6 <poll_tcp+0xb2>
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d572:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d576:	d316      	bcc.n	800d5a6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d580:	2b04      	cmp	r3, #4
 800d582:	d810      	bhi.n	800d5a6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	7f1b      	ldrb	r3, [r3, #28]
 800d588:	f023 0310 	bic.w	r3, r3, #16
 800d58c:	b2da      	uxtb	r2, r3
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d596:	2b00      	cmp	r3, #0
 800d598:	d005      	beq.n	800d5a6 <poll_tcp+0xb2>
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2102      	movs	r1, #2
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	08024c6c 	.word	0x08024c6c
 800d5b4:	08024dc4 	.word	0x08024dc4
 800d5b8:	08024cb0 	.word	0x08024cb0

0800d5bc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d106      	bne.n	800d5e2 <sent_tcp+0x26>
 800d5d4:	4b20      	ldr	r3, [pc, #128]	; (800d658 <sent_tcp+0x9c>)
 800d5d6:	f240 1293 	movw	r2, #403	; 0x193
 800d5da:	4920      	ldr	r1, [pc, #128]	; (800d65c <sent_tcp+0xa0>)
 800d5dc:	4820      	ldr	r0, [pc, #128]	; (800d660 <sent_tcp+0xa4>)
 800d5de:	f00e f9a5 	bl	801b92c <printf>

  if (conn) {
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d032      	beq.n	800d64e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	785b      	ldrb	r3, [r3, #1]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d104      	bne.n	800d5fa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	6978      	ldr	r0, [r7, #20]
 800d5f4:	f000 fdf0 	bl	800e1d8 <lwip_netconn_do_writemore>
 800d5f8:	e007      	b.n	800d60a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	785b      	ldrb	r3, [r3, #1]
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d103      	bne.n	800d60a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d602:	2101      	movs	r1, #1
 800d604:	6978      	ldr	r0, [r7, #20]
 800d606:	f000 fae1 	bl	800dbcc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d01d      	beq.n	800d64e <sent_tcp+0x92>
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d61a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d61e:	d316      	bcc.n	800d64e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d628:	2b04      	cmp	r3, #4
 800d62a:	d810      	bhi.n	800d64e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	7f1b      	ldrb	r3, [r3, #28]
 800d630:	f023 0310 	bic.w	r3, r3, #16
 800d634:	b2da      	uxtb	r2, r3
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d005      	beq.n	800d64e <sent_tcp+0x92>
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d646:	88fa      	ldrh	r2, [r7, #6]
 800d648:	2102      	movs	r1, #2
 800d64a:	6978      	ldr	r0, [r7, #20]
 800d64c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	08024c6c 	.word	0x08024c6c
 800d65c:	08024dc4 	.word	0x08024dc4
 800d660:	08024cb0 	.word	0x08024cb0

0800d664 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b088      	sub	sp, #32
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d106      	bne.n	800d688 <err_tcp+0x24>
 800d67a:	4b5f      	ldr	r3, [pc, #380]	; (800d7f8 <err_tcp+0x194>)
 800d67c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d680:	495e      	ldr	r1, [pc, #376]	; (800d7fc <err_tcp+0x198>)
 800d682:	485f      	ldr	r0, [pc, #380]	; (800d800 <err_tcp+0x19c>)
 800d684:	f00e f952 	bl	801b92c <printf>

  SYS_ARCH_PROTECT(lev);
 800d688:	f00d fd58 	bl	801b13c <sys_arch_protect>
 800d68c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	2200      	movs	r2, #0
 800d692:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	78fa      	ldrb	r2, [r7, #3]
 800d698:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	7f1b      	ldrb	r3, [r3, #28]
 800d69e:	f043 0301 	orr.w	r3, r3, #1
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	785b      	ldrb	r3, [r3, #1]
 800d6ac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d6b4:	69b8      	ldr	r0, [r7, #24]
 800d6b6:	f00d fd4f 	bl	801b158 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d005      	beq.n	800d6ce <err_tcp+0x6a>
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	2104      	movs	r1, #4
 800d6ca:	69f8      	ldr	r0, [r7, #28]
 800d6cc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d005      	beq.n	800d6e2 <err_tcp+0x7e>
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	69f8      	ldr	r0, [r7, #28]
 800d6e0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d005      	beq.n	800d6f6 <err_tcp+0x92>
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	2102      	movs	r1, #2
 800d6f2:	69f8      	ldr	r0, [r7, #28]
 800d6f4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d6f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7ff fd86 	bl	800d20c <lwip_netconn_err_to_msg>
 800d700:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	3310      	adds	r3, #16
 800d706:	4618      	mov	r0, r3
 800d708:	f00d fbfd 	bl	801af06 <sys_mbox_valid>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d005      	beq.n	800d71e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	3310      	adds	r3, #16
 800d716:	6939      	ldr	r1, [r7, #16]
 800d718:	4618      	mov	r0, r3
 800d71a:	f00d fb7f 	bl	801ae1c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	3314      	adds	r3, #20
 800d722:	4618      	mov	r0, r3
 800d724:	f00d fbef 	bl	801af06 <sys_mbox_valid>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d005      	beq.n	800d73a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	3314      	adds	r3, #20
 800d732:	6939      	ldr	r1, [r7, #16]
 800d734:	4618      	mov	r0, r3
 800d736:	f00d fb71 	bl	801ae1c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d005      	beq.n	800d74c <err_tcp+0xe8>
 800d740:	7dfb      	ldrb	r3, [r7, #23]
 800d742:	2b04      	cmp	r3, #4
 800d744:	d002      	beq.n	800d74c <err_tcp+0xe8>
 800d746:	7dfb      	ldrb	r3, [r7, #23]
 800d748:	2b03      	cmp	r3, #3
 800d74a:	d143      	bne.n	800d7d4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	7f1b      	ldrb	r3, [r3, #28]
 800d750:	f003 0304 	and.w	r3, r3, #4
 800d754:	2b00      	cmp	r3, #0
 800d756:	bf14      	ite	ne
 800d758:	2301      	movne	r3, #1
 800d75a:	2300      	moveq	r3, #0
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	7f1b      	ldrb	r3, [r3, #28]
 800d764:	f023 0304 	bic.w	r3, r3, #4
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d13b      	bne.n	800d7ec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	6a1b      	ldr	r3, [r3, #32]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d106      	bne.n	800d78a <err_tcp+0x126>
 800d77c:	4b1e      	ldr	r3, [pc, #120]	; (800d7f8 <err_tcp+0x194>)
 800d77e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d782:	4920      	ldr	r1, [pc, #128]	; (800d804 <err_tcp+0x1a0>)
 800d784:	481e      	ldr	r0, [pc, #120]	; (800d800 <err_tcp+0x19c>)
 800d786:	f00e f8d1 	bl	801b92c <printf>
      if (old_state == NETCONN_CLOSE) {
 800d78a:	7dfb      	ldrb	r3, [r7, #23]
 800d78c:	2b04      	cmp	r3, #4
 800d78e:	d104      	bne.n	800d79a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	6a1b      	ldr	r3, [r3, #32]
 800d794:	2200      	movs	r2, #0
 800d796:	711a      	strb	r2, [r3, #4]
 800d798:	e003      	b.n	800d7a2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	78fa      	ldrb	r2, [r7, #3]
 800d7a0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	330c      	adds	r3, #12
 800d7aa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d7ac:	68b8      	ldr	r0, [r7, #8]
 800d7ae:	f00d fc3b 	bl	801b028 <sys_sem_valid>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d106      	bne.n	800d7c6 <err_tcp+0x162>
 800d7b8:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <err_tcp+0x194>)
 800d7ba:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d7be:	4912      	ldr	r1, [pc, #72]	; (800d808 <err_tcp+0x1a4>)
 800d7c0:	480f      	ldr	r0, [pc, #60]	; (800d800 <err_tcp+0x19c>)
 800d7c2:	f00e f8b3 	bl	801b92c <printf>
      conn->current_msg = NULL;
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d7cc:	68b8      	ldr	r0, [r7, #8]
 800d7ce:	f00d fc11 	bl	801aff4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d7d2:	e00b      	b.n	800d7ec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	6a1b      	ldr	r3, [r3, #32]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d008      	beq.n	800d7ee <err_tcp+0x18a>
 800d7dc:	4b06      	ldr	r3, [pc, #24]	; (800d7f8 <err_tcp+0x194>)
 800d7de:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d7e2:	490a      	ldr	r1, [pc, #40]	; (800d80c <err_tcp+0x1a8>)
 800d7e4:	4806      	ldr	r0, [pc, #24]	; (800d800 <err_tcp+0x19c>)
 800d7e6:	f00e f8a1 	bl	801b92c <printf>
  }
}
 800d7ea:	e000      	b.n	800d7ee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d7ec:	bf00      	nop
}
 800d7ee:	bf00      	nop
 800d7f0:	3720      	adds	r7, #32
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	08024c6c 	.word	0x08024c6c
 800d7fc:	08024dc4 	.word	0x08024dc4
 800d800:	08024cb0 	.word	0x08024cb0
 800d804:	08024dd4 	.word	0x08024dd4
 800d808:	08024df0 	.word	0x08024df0
 800d80c:	08024e0c 	.word	0x08024e0c

0800d810 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d81e:	6879      	ldr	r1, [r7, #4]
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f005 fbdb 	bl	8012fdc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d826:	490a      	ldr	r1, [pc, #40]	; (800d850 <setup_tcp+0x40>)
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f005 fbe9 	bl	8013000 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d82e:	4909      	ldr	r1, [pc, #36]	; (800d854 <setup_tcp+0x44>)
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f005 fc07 	bl	8013044 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d836:	2202      	movs	r2, #2
 800d838:	4907      	ldr	r1, [pc, #28]	; (800d858 <setup_tcp+0x48>)
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f005 fc5e 	bl	80130fc <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d840:	4906      	ldr	r1, [pc, #24]	; (800d85c <setup_tcp+0x4c>)
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f005 fc20 	bl	8013088 <tcp_err>
}
 800d848:	bf00      	nop
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	0800d3e9 	.word	0x0800d3e9
 800d854:	0800d5bd 	.word	0x0800d5bd
 800d858:	0800d4f5 	.word	0x0800d4f5
 800d85c:	0800d665 	.word	0x0800d665

0800d860 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d860:	b590      	push	{r4, r7, lr}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d868:	2300      	movs	r3, #0
 800d86a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d006      	beq.n	800d884 <pcb_new+0x24>
 800d876:	4b2b      	ldr	r3, [pc, #172]	; (800d924 <pcb_new+0xc4>)
 800d878:	f240 2265 	movw	r2, #613	; 0x265
 800d87c:	492a      	ldr	r1, [pc, #168]	; (800d928 <pcb_new+0xc8>)
 800d87e:	482b      	ldr	r0, [pc, #172]	; (800d92c <pcb_new+0xcc>)
 800d880:	f00e f854 	bl	801b92c <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d88e:	2b10      	cmp	r3, #16
 800d890:	d022      	beq.n	800d8d8 <pcb_new+0x78>
 800d892:	2b20      	cmp	r3, #32
 800d894:	d133      	bne.n	800d8fe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681c      	ldr	r4, [r3, #0]
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f00a fe62 	bl	8018566 <udp_new_ip_type>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d02a      	beq.n	800d906 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2b22      	cmp	r3, #34	; 0x22
 800d8b8:	d104      	bne.n	800d8c4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6858      	ldr	r0, [r3, #4]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	4917      	ldr	r1, [pc, #92]	; (800d930 <pcb_new+0xd0>)
 800d8d2:	f00a fdcf 	bl	8018474 <udp_recv>
      }
      break;
 800d8d6:	e016      	b.n	800d906 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681c      	ldr	r4, [r3, #0]
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f005 fb6e 	bl	8012fc0 <tcp_new_ip_type>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00b      	beq.n	800d90a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7ff ff8a 	bl	800d810 <setup_tcp>
      }
      break;
 800d8fc:	e005      	b.n	800d90a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	22fa      	movs	r2, #250	; 0xfa
 800d902:	711a      	strb	r2, [r3, #4]
      return;
 800d904:	e00a      	b.n	800d91c <pcb_new+0xbc>
      break;
 800d906:	bf00      	nop
 800d908:	e000      	b.n	800d90c <pcb_new+0xac>
      break;
 800d90a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d102      	bne.n	800d91c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	22ff      	movs	r2, #255	; 0xff
 800d91a:	711a      	strb	r2, [r3, #4]
  }
}
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd90      	pop	{r4, r7, pc}
 800d922:	bf00      	nop
 800d924:	08024c6c 	.word	0x08024c6c
 800d928:	08024e50 	.word	0x08024e50
 800d92c:	08024cb0 	.word	0x08024cb0
 800d930:	0800d2ed 	.word	0x0800d2ed

0800d934 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d102      	bne.n	800d956 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff ff85 	bl	800d860 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d956:	bf00      	nop
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
	...

0800d960 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b086      	sub	sp, #24
 800d964:	af00      	add	r7, sp, #0
 800d966:	4603      	mov	r3, r0
 800d968:	6039      	str	r1, [r7, #0]
 800d96a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d96c:	2300      	movs	r3, #0
 800d96e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d970:	2007      	movs	r0, #7
 800d972:	f002 fda5 	bl	80104c0 <memp_malloc>
 800d976:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <netconn_alloc+0x22>
    return NULL;
 800d97e:	2300      	movs	r3, #0
 800d980:	e052      	b.n	800da28 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2200      	movs	r2, #0
 800d986:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	79fa      	ldrb	r2, [r7, #7]
 800d98c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d994:	79fb      	ldrb	r3, [r7, #7]
 800d996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d99a:	2b10      	cmp	r3, #16
 800d99c:	d004      	beq.n	800d9a8 <netconn_alloc+0x48>
 800d99e:	2b20      	cmp	r3, #32
 800d9a0:	d105      	bne.n	800d9ae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d9a2:	2306      	movs	r3, #6
 800d9a4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d9a6:	e00a      	b.n	800d9be <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d9a8:	2306      	movs	r3, #6
 800d9aa:	617b      	str	r3, [r7, #20]
      break;
 800d9ac:	e007      	b.n	800d9be <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d9ae:	4b20      	ldr	r3, [pc, #128]	; (800da30 <netconn_alloc+0xd0>)
 800d9b0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d9b4:	491f      	ldr	r1, [pc, #124]	; (800da34 <netconn_alloc+0xd4>)
 800d9b6:	4820      	ldr	r0, [pc, #128]	; (800da38 <netconn_alloc+0xd8>)
 800d9b8:	f00d ffb8 	bl	801b92c <printf>
      goto free_and_return;
 800d9bc:	e02f      	b.n	800da1e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3310      	adds	r3, #16
 800d9c2:	6979      	ldr	r1, [r7, #20]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f00d f9f5 	bl	801adb4 <sys_mbox_new>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d125      	bne.n	800da1c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	330c      	adds	r3, #12
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f00d fab3 	bl	801af42 <sys_sem_new>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d005      	beq.n	800d9ee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3310      	adds	r3, #16
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f00d fa06 	bl	801adf8 <sys_mbox_free>
    goto free_and_return;
 800d9ec:	e017      	b.n	800da1e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3314      	adds	r3, #20
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f00d fa98 	bl	801af28 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f04f 32ff 	mov.w	r2, #4294967295
 800da04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	683a      	ldr	r2, [r7, #0]
 800da0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	7cfa      	ldrb	r2, [r7, #19]
 800da16:	771a      	strb	r2, [r3, #28]
  return conn;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	e005      	b.n	800da28 <netconn_alloc+0xc8>
    goto free_and_return;
 800da1c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800da1e:	68f9      	ldr	r1, [r7, #12]
 800da20:	2007      	movs	r0, #7
 800da22:	f002 fd9f 	bl	8010564 <memp_free>
  return NULL;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3718      	adds	r7, #24
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	08024c6c 	.word	0x08024c6c
 800da34:	08024e70 	.word	0x08024e70
 800da38:	08024cb0 	.word	0x08024cb0

0800da3c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d006      	beq.n	800da5a <netconn_free+0x1e>
 800da4c:	4b1b      	ldr	r3, [pc, #108]	; (800dabc <netconn_free+0x80>)
 800da4e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800da52:	491b      	ldr	r1, [pc, #108]	; (800dac0 <netconn_free+0x84>)
 800da54:	481b      	ldr	r0, [pc, #108]	; (800dac4 <netconn_free+0x88>)
 800da56:	f00d ff69 	bl	801b92c <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3310      	adds	r3, #16
 800da5e:	4618      	mov	r0, r3
 800da60:	f00d fa51 	bl	801af06 <sys_mbox_valid>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d006      	beq.n	800da78 <netconn_free+0x3c>
 800da6a:	4b14      	ldr	r3, [pc, #80]	; (800dabc <netconn_free+0x80>)
 800da6c:	f240 3223 	movw	r2, #803	; 0x323
 800da70:	4915      	ldr	r1, [pc, #84]	; (800dac8 <netconn_free+0x8c>)
 800da72:	4814      	ldr	r0, [pc, #80]	; (800dac4 <netconn_free+0x88>)
 800da74:	f00d ff5a 	bl	801b92c <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	3314      	adds	r3, #20
 800da7c:	4618      	mov	r0, r3
 800da7e:	f00d fa42 	bl	801af06 <sys_mbox_valid>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d006      	beq.n	800da96 <netconn_free+0x5a>
 800da88:	4b0c      	ldr	r3, [pc, #48]	; (800dabc <netconn_free+0x80>)
 800da8a:	f240 3226 	movw	r2, #806	; 0x326
 800da8e:	490f      	ldr	r1, [pc, #60]	; (800dacc <netconn_free+0x90>)
 800da90:	480c      	ldr	r0, [pc, #48]	; (800dac4 <netconn_free+0x88>)
 800da92:	f00d ff4b 	bl	801b92c <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	330c      	adds	r3, #12
 800da9a:	4618      	mov	r0, r3
 800da9c:	f00d fab7 	bl	801b00e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	330c      	adds	r3, #12
 800daa4:	4618      	mov	r0, r3
 800daa6:	f00d fad0 	bl	801b04a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	2007      	movs	r0, #7
 800daae:	f002 fd59 	bl	8010564 <memp_free>
}
 800dab2:	bf00      	nop
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	08024c6c 	.word	0x08024c6c
 800dac0:	08024e98 	.word	0x08024e98
 800dac4:	08024cb0 	.word	0x08024cb0
 800dac8:	08024ec8 	.word	0x08024ec8
 800dacc:	08024f04 	.word	0x08024f04

0800dad0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	3310      	adds	r3, #16
 800dadc:	4618      	mov	r0, r3
 800dade:	f00d fa12 	bl	801af06 <sys_mbox_valid>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d02f      	beq.n	800db48 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800dae8:	e018      	b.n	800db1c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800daf2:	2b10      	cmp	r3, #16
 800daf4:	d10e      	bne.n	800db14 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	f107 020f 	add.w	r2, r7, #15
 800dafc:	4611      	mov	r1, r2
 800dafe:	4618      	mov	r0, r3
 800db00:	f7ff fbba 	bl	800d278 <lwip_netconn_is_err_msg>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d108      	bne.n	800db1c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f003 fba7 	bl	8011260 <pbuf_free>
 800db12:	e003      	b.n	800db1c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	4618      	mov	r0, r3
 800db18:	f000 fdb6 	bl	800e688 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	3310      	adds	r3, #16
 800db20:	f107 0210 	add.w	r2, r7, #16
 800db24:	4611      	mov	r1, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f00d f9d1 	bl	801aece <sys_arch_mbox_tryfetch>
 800db2c:	4603      	mov	r3, r0
 800db2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db32:	d1da      	bne.n	800daea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	3310      	adds	r3, #16
 800db38:	4618      	mov	r0, r3
 800db3a:	f00d f95d 	bl	801adf8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	3310      	adds	r3, #16
 800db42:	4618      	mov	r0, r3
 800db44:	f00d f9f0 	bl	801af28 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	3314      	adds	r3, #20
 800db4c:	4618      	mov	r0, r3
 800db4e:	f00d f9da 	bl	801af06 <sys_mbox_valid>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d034      	beq.n	800dbc2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800db58:	e01d      	b.n	800db96 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	f107 020e 	add.w	r2, r7, #14
 800db60:	4611      	mov	r1, r2
 800db62:	4618      	mov	r0, r3
 800db64:	f7ff fb88 	bl	800d278 <lwip_netconn_is_err_msg>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d113      	bne.n	800db96 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800db72:	6978      	ldr	r0, [r7, #20]
 800db74:	f7ff ffac 	bl	800dad0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d007      	beq.n	800db90 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	4618      	mov	r0, r3
 800db86:	f004 f96b 	bl	8011e60 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2200      	movs	r2, #0
 800db8e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800db90:	6978      	ldr	r0, [r7, #20]
 800db92:	f7ff ff53 	bl	800da3c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	3314      	adds	r3, #20
 800db9a:	f107 0210 	add.w	r2, r7, #16
 800db9e:	4611      	mov	r1, r2
 800dba0:	4618      	mov	r0, r3
 800dba2:	f00d f994 	bl	801aece <sys_arch_mbox_tryfetch>
 800dba6:	4603      	mov	r3, r0
 800dba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbac:	d1d5      	bne.n	800db5a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f00d f920 	bl	801adf8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	3314      	adds	r3, #20
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f00d f9b3 	bl	801af28 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800dbc2:	bf00      	nop
 800dbc4:	3718      	adds	r7, #24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
	...

0800dbcc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d106      	bne.n	800dbf0 <lwip_netconn_do_close_internal+0x24>
 800dbe2:	4ba1      	ldr	r3, [pc, #644]	; (800de68 <lwip_netconn_do_close_internal+0x29c>)
 800dbe4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800dbe8:	49a0      	ldr	r1, [pc, #640]	; (800de6c <lwip_netconn_do_close_internal+0x2a0>)
 800dbea:	48a1      	ldr	r0, [pc, #644]	; (800de70 <lwip_netconn_do_close_internal+0x2a4>)
 800dbec:	f00d fe9e 	bl	801b92c <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbf8:	2b10      	cmp	r3, #16
 800dbfa:	d006      	beq.n	800dc0a <lwip_netconn_do_close_internal+0x3e>
 800dbfc:	4b9a      	ldr	r3, [pc, #616]	; (800de68 <lwip_netconn_do_close_internal+0x29c>)
 800dbfe:	f240 32a3 	movw	r2, #931	; 0x3a3
 800dc02:	499c      	ldr	r1, [pc, #624]	; (800de74 <lwip_netconn_do_close_internal+0x2a8>)
 800dc04:	489a      	ldr	r0, [pc, #616]	; (800de70 <lwip_netconn_do_close_internal+0x2a4>)
 800dc06:	f00d fe91 	bl	801b92c <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	785b      	ldrb	r3, [r3, #1]
 800dc0e:	2b04      	cmp	r3, #4
 800dc10:	d006      	beq.n	800dc20 <lwip_netconn_do_close_internal+0x54>
 800dc12:	4b95      	ldr	r3, [pc, #596]	; (800de68 <lwip_netconn_do_close_internal+0x29c>)
 800dc14:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800dc18:	4997      	ldr	r1, [pc, #604]	; (800de78 <lwip_netconn_do_close_internal+0x2ac>)
 800dc1a:	4895      	ldr	r0, [pc, #596]	; (800de70 <lwip_netconn_do_close_internal+0x2a4>)
 800dc1c:	f00d fe86 	bl	801b92c <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d106      	bne.n	800dc36 <lwip_netconn_do_close_internal+0x6a>
 800dc28:	4b8f      	ldr	r3, [pc, #572]	; (800de68 <lwip_netconn_do_close_internal+0x29c>)
 800dc2a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800dc2e:	4993      	ldr	r1, [pc, #588]	; (800de7c <lwip_netconn_do_close_internal+0x2b0>)
 800dc30:	488f      	ldr	r0, [pc, #572]	; (800de70 <lwip_netconn_do_close_internal+0x2a4>)
 800dc32:	f00d fe7b 	bl	801b92c <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d106      	bne.n	800dc4c <lwip_netconn_do_close_internal+0x80>
 800dc3e:	4b8a      	ldr	r3, [pc, #552]	; (800de68 <lwip_netconn_do_close_internal+0x29c>)
 800dc40:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dc44:	498e      	ldr	r1, [pc, #568]	; (800de80 <lwip_netconn_do_close_internal+0x2b4>)
 800dc46:	488a      	ldr	r0, [pc, #552]	; (800de70 <lwip_netconn_do_close_internal+0x2a4>)
 800dc48:	f00d fe70 	bl	801b92c <printf>

  tpcb = conn->pcb.tcp;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	7a1b      	ldrb	r3, [r3, #8]
 800dc58:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
 800dc64:	f003 0302 	and.w	r3, r3, #2
 800dc68:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
 800dc6c:	2b03      	cmp	r3, #3
 800dc6e:	d102      	bne.n	800dc76 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800dc70:	2301      	movs	r3, #1
 800dc72:	75bb      	strb	r3, [r7, #22]
 800dc74:	e01f      	b.n	800dcb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800dc76:	7bbb      	ldrb	r3, [r7, #14]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00e      	beq.n	800dc9a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800dc80:	2b05      	cmp	r3, #5
 800dc82:	d007      	beq.n	800dc94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800dc88:	2b06      	cmp	r3, #6
 800dc8a:	d003      	beq.n	800dc94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800dc90:	2b08      	cmp	r3, #8
 800dc92:	d102      	bne.n	800dc9a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800dc94:	2301      	movs	r3, #1
 800dc96:	75bb      	strb	r3, [r7, #22]
 800dc98:	e00d      	b.n	800dcb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800dc9a:	7b7b      	ldrb	r3, [r7, #13]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d008      	beq.n	800dcb2 <lwip_netconn_do_close_internal+0xe6>
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	8b5b      	ldrh	r3, [r3, #26]
 800dca4:	f003 0310 	and.w	r3, r3, #16
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d002      	beq.n	800dcb2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800dcac:	2301      	movs	r3, #1
 800dcae:	75bb      	strb	r3, [r7, #22]
 800dcb0:	e001      	b.n	800dcb6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800dcb6:	7dbb      	ldrb	r3, [r7, #22]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	6938      	ldr	r0, [r7, #16]
 800dcc0:	f005 f98c 	bl	8012fdc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	7d1b      	ldrb	r3, [r3, #20]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d104      	bne.n	800dcd6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800dccc:	2100      	movs	r1, #0
 800dcce:	6938      	ldr	r0, [r7, #16]
 800dcd0:	f005 f9fc 	bl	80130cc <tcp_accept>
 800dcd4:	e01d      	b.n	800dd12 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800dcd6:	7bbb      	ldrb	r3, [r7, #14]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d007      	beq.n	800dcec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800dcdc:	2100      	movs	r1, #0
 800dcde:	6938      	ldr	r0, [r7, #16]
 800dce0:	f005 f98e 	bl	8013000 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800dce4:	2100      	movs	r1, #0
 800dce6:	6938      	ldr	r0, [r7, #16]
 800dce8:	f005 f9f0 	bl	80130cc <tcp_accept>
    }
    if (shut_tx) {
 800dcec:	7b7b      	ldrb	r3, [r7, #13]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d003      	beq.n	800dcfa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	6938      	ldr	r0, [r7, #16]
 800dcf6:	f005 f9a5 	bl	8013044 <tcp_sent>
    }
    if (shut_close) {
 800dcfa:	7dbb      	ldrb	r3, [r7, #22]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d008      	beq.n	800dd12 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800dd00:	2200      	movs	r2, #0
 800dd02:	2100      	movs	r1, #0
 800dd04:	6938      	ldr	r0, [r7, #16]
 800dd06:	f005 f9f9 	bl	80130fc <tcp_poll>
      tcp_err(tpcb, NULL);
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	6938      	ldr	r0, [r7, #16]
 800dd0e:	f005 f9bb 	bl	8013088 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800dd12:	7dbb      	ldrb	r3, [r7, #22]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d005      	beq.n	800dd24 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800dd18:	6938      	ldr	r0, [r7, #16]
 800dd1a:	f003 ff5b 	bl	8011bd4 <tcp_close>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	75fb      	strb	r3, [r7, #23]
 800dd22:	e007      	b.n	800dd34 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
 800dd26:	7b7a      	ldrb	r2, [r7, #13]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6938      	ldr	r0, [r7, #16]
 800dd2c:	f003 ff7e 	bl	8011c2c <tcp_shutdown>
 800dd30:	4603      	mov	r3, r0
 800dd32:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800dd34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d102      	bne.n	800dd42 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	757b      	strb	r3, [r7, #21]
 800dd40:	e016      	b.n	800dd70 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800dd42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4a:	d10f      	bne.n	800dd6c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a1b      	ldr	r3, [r3, #32]
 800dd50:	7a5b      	ldrb	r3, [r3, #9]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10c      	bne.n	800dd70 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800dd56:	2301      	movs	r3, #1
 800dd58:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800dd5a:	7dbb      	ldrb	r3, [r7, #22]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d007      	beq.n	800dd70 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800dd60:	6938      	ldr	r0, [r7, #16]
 800dd62:	f004 f87d 	bl	8011e60 <tcp_abort>
          err = ERR_OK;
 800dd66:	2300      	movs	r3, #0
 800dd68:	75fb      	strb	r3, [r7, #23]
 800dd6a:	e001      	b.n	800dd70 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800dd70:	7d7b      	ldrb	r3, [r7, #21]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d044      	beq.n	800de00 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a1b      	ldr	r3, [r3, #32]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	330c      	adds	r3, #12
 800dd7e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6a1b      	ldr	r3, [r3, #32]
 800dd84:	7dfa      	ldrb	r2, [r7, #23]
 800dd86:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800dd94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d129      	bne.n	800ddf0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800dd9c:	7dbb      	ldrb	r3, [r7, #22]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00c      	beq.n	800ddbc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2200      	movs	r2, #0
 800dda6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d005      	beq.n	800ddbc <lwip_netconn_do_close_internal+0x1f0>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	2104      	movs	r1, #4
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	4798      	blx	r3
      }
      if (shut_rx) {
 800ddbc:	7bbb      	ldrb	r3, [r7, #14]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d009      	beq.n	800ddd6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d005      	beq.n	800ddd6 <lwip_netconn_do_close_internal+0x20a>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddce:	2200      	movs	r2, #0
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	4798      	blx	r3
      }
      if (shut_tx) {
 800ddd6:	7b7b      	ldrb	r3, [r7, #13]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d009      	beq.n	800ddf0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d005      	beq.n	800ddf0 <lwip_netconn_do_close_internal+0x224>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde8:	2200      	movs	r2, #0
 800ddea:	2102      	movs	r1, #2
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ddf0:	78fb      	ldrb	r3, [r7, #3]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800ddf6:	68b8      	ldr	r0, [r7, #8]
 800ddf8:	f00d f8fc 	bl	801aff4 <sys_sem_signal>
    }
    return ERR_OK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	e02e      	b.n	800de5e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800de00:	7d7b      	ldrb	r3, [r7, #21]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d11e      	bne.n	800de44 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	7d1b      	ldrb	r3, [r3, #20]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d106      	bne.n	800de1c <lwip_netconn_do_close_internal+0x250>
 800de0e:	4b16      	ldr	r3, [pc, #88]	; (800de68 <lwip_netconn_do_close_internal+0x29c>)
 800de10:	f240 4241 	movw	r2, #1089	; 0x441
 800de14:	491b      	ldr	r1, [pc, #108]	; (800de84 <lwip_netconn_do_close_internal+0x2b8>)
 800de16:	4816      	ldr	r0, [pc, #88]	; (800de70 <lwip_netconn_do_close_internal+0x2a4>)
 800de18:	f00d fd88 	bl	801b92c <printf>
    if (shut_tx) {
 800de1c:	7b7b      	ldrb	r3, [r7, #13]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d003      	beq.n	800de2a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800de22:	4919      	ldr	r1, [pc, #100]	; (800de88 <lwip_netconn_do_close_internal+0x2bc>)
 800de24:	6938      	ldr	r0, [r7, #16]
 800de26:	f005 f90d 	bl	8013044 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800de2a:	2201      	movs	r2, #1
 800de2c:	4917      	ldr	r1, [pc, #92]	; (800de8c <lwip_netconn_do_close_internal+0x2c0>)
 800de2e:	6938      	ldr	r0, [r7, #16]
 800de30:	f005 f964 	bl	80130fc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800de34:	4916      	ldr	r1, [pc, #88]	; (800de90 <lwip_netconn_do_close_internal+0x2c4>)
 800de36:	6938      	ldr	r0, [r7, #16]
 800de38:	f005 f926 	bl	8013088 <tcp_err>
    tcp_arg(tpcb, conn);
 800de3c:	6879      	ldr	r1, [r7, #4]
 800de3e:	6938      	ldr	r0, [r7, #16]
 800de40:	f005 f8cc 	bl	8012fdc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800de44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d106      	bne.n	800de5a <lwip_netconn_do_close_internal+0x28e>
 800de4c:	4b06      	ldr	r3, [pc, #24]	; (800de68 <lwip_netconn_do_close_internal+0x29c>)
 800de4e:	f240 424d 	movw	r2, #1101	; 0x44d
 800de52:	4910      	ldr	r1, [pc, #64]	; (800de94 <lwip_netconn_do_close_internal+0x2c8>)
 800de54:	4806      	ldr	r0, [pc, #24]	; (800de70 <lwip_netconn_do_close_internal+0x2a4>)
 800de56:	f00d fd69 	bl	801b92c <printf>
  return err;
 800de5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	08024c6c 	.word	0x08024c6c
 800de6c:	08024f40 	.word	0x08024f40
 800de70:	08024cb0 	.word	0x08024cb0
 800de74:	08024f50 	.word	0x08024f50
 800de78:	08024f70 	.word	0x08024f70
 800de7c:	08024f94 	.word	0x08024f94
 800de80:	08024dd4 	.word	0x08024dd4
 800de84:	08024fa8 	.word	0x08024fa8
 800de88:	0800d5bd 	.word	0x0800d5bd
 800de8c:	0800d4f5 	.word	0x0800d4f5
 800de90:	0800d665 	.word	0x0800d665
 800de94:	08024fcc 	.word	0x08024fcc

0800de98 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	785b      	ldrb	r3, [r3, #1]
 800deaa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800deac:	7afb      	ldrb	r3, [r7, #11]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00d      	beq.n	800dece <lwip_netconn_do_delconn+0x36>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800debc:	2b10      	cmp	r3, #16
 800debe:	d006      	beq.n	800dece <lwip_netconn_do_delconn+0x36>
 800dec0:	4b60      	ldr	r3, [pc, #384]	; (800e044 <lwip_netconn_do_delconn+0x1ac>)
 800dec2:	f240 425e 	movw	r2, #1118	; 0x45e
 800dec6:	4960      	ldr	r1, [pc, #384]	; (800e048 <lwip_netconn_do_delconn+0x1b0>)
 800dec8:	4860      	ldr	r0, [pc, #384]	; (800e04c <lwip_netconn_do_delconn+0x1b4>)
 800deca:	f00d fd2f 	bl	801b92c <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800dece:	7afb      	ldrb	r3, [r7, #11]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d005      	beq.n	800dee0 <lwip_netconn_do_delconn+0x48>
 800ded4:	7afb      	ldrb	r3, [r7, #11]
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	d002      	beq.n	800dee0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800deda:	7afb      	ldrb	r3, [r7, #11]
 800dedc:	2b03      	cmp	r3, #3
 800dede:	d109      	bne.n	800def4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800dee0:	7afb      	ldrb	r3, [r7, #11]
 800dee2:	2b03      	cmp	r3, #3
 800dee4:	d10a      	bne.n	800defc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	7f1b      	ldrb	r3, [r3, #28]
 800deec:	f003 0304 	and.w	r3, r3, #4
 800def0:	2b00      	cmp	r3, #0
 800def2:	d103      	bne.n	800defc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	22fb      	movs	r2, #251	; 0xfb
 800def8:	711a      	strb	r2, [r3, #4]
 800defa:	e097      	b.n	800e02c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800defc:	7afb      	ldrb	r3, [r7, #11]
 800defe:	2b03      	cmp	r3, #3
 800df00:	d10d      	bne.n	800df1e <lwip_netconn_do_delconn+0x86>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	7f1b      	ldrb	r3, [r3, #28]
 800df08:	f003 0304 	and.w	r3, r3, #4
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d106      	bne.n	800df1e <lwip_netconn_do_delconn+0x86>
 800df10:	4b4c      	ldr	r3, [pc, #304]	; (800e044 <lwip_netconn_do_delconn+0x1ac>)
 800df12:	f240 427a 	movw	r2, #1146	; 0x47a
 800df16:	494e      	ldr	r1, [pc, #312]	; (800e050 <lwip_netconn_do_delconn+0x1b8>)
 800df18:	484c      	ldr	r0, [pc, #304]	; (800e04c <lwip_netconn_do_delconn+0x1b4>)
 800df1a:	f00d fd07 	bl	801b92c <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4618      	mov	r0, r3
 800df2a:	f7ff fdd1 	bl	800dad0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d05f      	beq.n	800dff8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df42:	2b10      	cmp	r3, #16
 800df44:	d00d      	beq.n	800df62 <lwip_netconn_do_delconn+0xca>
 800df46:	2b20      	cmp	r3, #32
 800df48:	d151      	bne.n	800dfee <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f00a faaa 	bl	80184b4 <udp_remove>
          break;
 800df60:	e046      	b.n	800dff0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	6a1b      	ldr	r3, [r3, #32]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d006      	beq.n	800df7a <lwip_netconn_do_delconn+0xe2>
 800df6c:	4b35      	ldr	r3, [pc, #212]	; (800e044 <lwip_netconn_do_delconn+0x1ac>)
 800df6e:	f240 4294 	movw	r2, #1172	; 0x494
 800df72:	4938      	ldr	r1, [pc, #224]	; (800e054 <lwip_netconn_do_delconn+0x1bc>)
 800df74:	4835      	ldr	r0, [pc, #212]	; (800e04c <lwip_netconn_do_delconn+0x1b4>)
 800df76:	f00d fcd9 	bl	801b92c <printf>
          msg->conn->state = NETCONN_CLOSE;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2204      	movs	r2, #4
 800df80:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2203      	movs	r2, #3
 800df86:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2100      	movs	r1, #0
 800df96:	4618      	mov	r0, r3
 800df98:	f7ff fe18 	bl	800dbcc <lwip_netconn_do_close_internal>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d04b      	beq.n	800e03a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	785b      	ldrb	r3, [r3, #1]
 800dfa8:	2b04      	cmp	r3, #4
 800dfaa:	d006      	beq.n	800dfba <lwip_netconn_do_delconn+0x122>
 800dfac:	4b25      	ldr	r3, [pc, #148]	; (800e044 <lwip_netconn_do_delconn+0x1ac>)
 800dfae:	f240 429a 	movw	r2, #1178	; 0x49a
 800dfb2:	4929      	ldr	r1, [pc, #164]	; (800e058 <lwip_netconn_do_delconn+0x1c0>)
 800dfb4:	4825      	ldr	r0, [pc, #148]	; (800e04c <lwip_netconn_do_delconn+0x1b4>)
 800dfb6:	f00d fcb9 	bl	801b92c <printf>
            UNLOCK_TCPIP_CORE();
 800dfba:	4828      	ldr	r0, [pc, #160]	; (800e05c <lwip_netconn_do_delconn+0x1c4>)
 800dfbc:	f00d f88b 	bl	801b0d6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	330c      	adds	r3, #12
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f00c ffe2 	bl	801af92 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800dfce:	4823      	ldr	r0, [pc, #140]	; (800e05c <lwip_netconn_do_delconn+0x1c4>)
 800dfd0:	f00d f872 	bl	801b0b8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	785b      	ldrb	r3, [r3, #1]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d02d      	beq.n	800e03a <lwip_netconn_do_delconn+0x1a2>
 800dfde:	4b19      	ldr	r3, [pc, #100]	; (800e044 <lwip_netconn_do_delconn+0x1ac>)
 800dfe0:	f240 429e 	movw	r2, #1182	; 0x49e
 800dfe4:	491c      	ldr	r1, [pc, #112]	; (800e058 <lwip_netconn_do_delconn+0x1c0>)
 800dfe6:	4819      	ldr	r0, [pc, #100]	; (800e04c <lwip_netconn_do_delconn+0x1b4>)
 800dfe8:	f00d fca0 	bl	801b92c <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800dfec:	e025      	b.n	800e03a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800dfee:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2200      	movs	r2, #0
 800dff6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d007      	beq.n	800e012 <lwip_netconn_do_delconn+0x17a>
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	6810      	ldr	r0, [r2, #0]
 800e00c:	2200      	movs	r2, #0
 800e00e:	2100      	movs	r1, #0
 800e010:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d007      	beq.n	800e02c <lwip_netconn_do_delconn+0x194>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	6810      	ldr	r0, [r2, #0]
 800e026:	2200      	movs	r2, #0
 800e028:	2102      	movs	r1, #2
 800e02a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	330c      	adds	r3, #12
 800e032:	4618      	mov	r0, r3
 800e034:	f00c fff8 	bl	801b028 <sys_sem_valid>
 800e038:	e000      	b.n	800e03c <lwip_netconn_do_delconn+0x1a4>
          return;
 800e03a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	08024c6c 	.word	0x08024c6c
 800e048:	08024fdc 	.word	0x08024fdc
 800e04c:	08024cb0 	.word	0x08024cb0
 800e050:	08024ff0 	.word	0x08024ff0
 800e054:	08025010 	.word	0x08025010
 800e058:	0802502c 	.word	0x0802502c
 800e05c:	20008730 	.word	0x20008730

0800e060 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d025      	beq.n	800e0c2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e080:	2b10      	cmp	r3, #16
 800e082:	d00e      	beq.n	800e0a2 <lwip_netconn_do_bind+0x42>
 800e084:	2b20      	cmp	r3, #32
 800e086:	d119      	bne.n	800e0bc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	6858      	ldr	r0, [r3, #4]
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	6899      	ldr	r1, [r3, #8]
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	899b      	ldrh	r3, [r3, #12]
 800e096:	461a      	mov	r2, r3
 800e098:	f00a f964 	bl	8018364 <udp_bind>
 800e09c:	4603      	mov	r3, r0
 800e09e:	73fb      	strb	r3, [r7, #15]
        break;
 800e0a0:	e011      	b.n	800e0c6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	6858      	ldr	r0, [r3, #4]
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	6899      	ldr	r1, [r3, #8]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	899b      	ldrh	r3, [r3, #12]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	f003 fee1 	bl	8011e78 <tcp_bind>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	73fb      	strb	r3, [r7, #15]
        break;
 800e0ba:	e004      	b.n	800e0c6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800e0bc:	23fa      	movs	r3, #250	; 0xfa
 800e0be:	73fb      	strb	r3, [r7, #15]
        break;
 800e0c0:	e001      	b.n	800e0c6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800e0c2:	23fa      	movs	r3, #250	; 0xfa
 800e0c4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	7bfa      	ldrb	r2, [r7, #15]
 800e0ca:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e0cc:	bf00      	nop
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7ff f875 	bl	800d1d4 <netconn_err>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e0ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d134      	bne.n	800e160 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d02d      	beq.n	800e15c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e10a:	2b20      	cmp	r3, #32
 800e10c:	d123      	bne.n	800e156 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10c      	bne.n	800e132 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	685a      	ldr	r2, [r3, #4]
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4619      	mov	r1, r3
 800e126:	4610      	mov	r0, r2
 800e128:	f009 ff32 	bl	8017f90 <udp_send>
 800e12c:	4603      	mov	r3, r0
 800e12e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800e130:	e016      	b.n	800e160 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	6858      	ldr	r0, [r3, #4]
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	6819      	ldr	r1, [r3, #0]
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f103 0208 	add.w	r2, r3, #8
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	899b      	ldrh	r3, [r3, #12]
 800e14c:	f009 ff54 	bl	8017ff8 <udp_sendto>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]
          break;
 800e154:	e004      	b.n	800e160 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800e156:	23f5      	movs	r3, #245	; 0xf5
 800e158:	73fb      	strb	r3, [r7, #15]
          break;
 800e15a:	e001      	b.n	800e160 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800e15c:	23f5      	movs	r3, #245	; 0xf5
 800e15e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	7bfa      	ldrb	r2, [r7, #15]
 800e164:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e166:	bf00      	nop
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b086      	sub	sp, #24
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	2200      	movs	r2, #0
 800e17e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d022      	beq.n	800e1d0 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e194:	2b10      	cmp	r3, #16
 800e196:	d11b      	bne.n	800e1d0 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1a4:	d202      	bcs.n	800e1ac <lwip_netconn_do_recv+0x3e>
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	e001      	b.n	800e1b0 <lwip_netconn_do_recv+0x42>
 800e1ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1b0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	89fa      	ldrh	r2, [r7, #14]
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f004 f829 	bl	8012214 <tcp_recved>
        remaining -= recved;
 800e1c2:	89fb      	ldrh	r3, [r7, #14]
 800e1c4:	697a      	ldr	r2, [r7, #20]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1e6      	bne.n	800e19e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e1d0:	bf00      	nop
 800e1d2:	3718      	adds	r7, #24
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d106      	bne.n	800e1fc <lwip_netconn_do_writemore+0x24>
 800e1ee:	4b96      	ldr	r3, [pc, #600]	; (800e448 <lwip_netconn_do_writemore+0x270>)
 800e1f0:	f240 6273 	movw	r2, #1651	; 0x673
 800e1f4:	4995      	ldr	r1, [pc, #596]	; (800e44c <lwip_netconn_do_writemore+0x274>)
 800e1f6:	4896      	ldr	r0, [pc, #600]	; (800e450 <lwip_netconn_do_writemore+0x278>)
 800e1f8:	f00d fb98 	bl	801b92c <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	785b      	ldrb	r3, [r3, #1]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d006      	beq.n	800e212 <lwip_netconn_do_writemore+0x3a>
 800e204:	4b90      	ldr	r3, [pc, #576]	; (800e448 <lwip_netconn_do_writemore+0x270>)
 800e206:	f240 6274 	movw	r2, #1652	; 0x674
 800e20a:	4992      	ldr	r1, [pc, #584]	; (800e454 <lwip_netconn_do_writemore+0x27c>)
 800e20c:	4890      	ldr	r0, [pc, #576]	; (800e450 <lwip_netconn_do_writemore+0x278>)
 800e20e:	f00d fb8d 	bl	801b92c <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a1b      	ldr	r3, [r3, #32]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d106      	bne.n	800e228 <lwip_netconn_do_writemore+0x50>
 800e21a:	4b8b      	ldr	r3, [pc, #556]	; (800e448 <lwip_netconn_do_writemore+0x270>)
 800e21c:	f240 6275 	movw	r2, #1653	; 0x675
 800e220:	498d      	ldr	r1, [pc, #564]	; (800e458 <lwip_netconn_do_writemore+0x280>)
 800e222:	488b      	ldr	r0, [pc, #556]	; (800e450 <lwip_netconn_do_writemore+0x278>)
 800e224:	f00d fb82 	bl	801b92c <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d106      	bne.n	800e23e <lwip_netconn_do_writemore+0x66>
 800e230:	4b85      	ldr	r3, [pc, #532]	; (800e448 <lwip_netconn_do_writemore+0x270>)
 800e232:	f240 6276 	movw	r2, #1654	; 0x676
 800e236:	4989      	ldr	r1, [pc, #548]	; (800e45c <lwip_netconn_do_writemore+0x284>)
 800e238:	4885      	ldr	r0, [pc, #532]	; (800e450 <lwip_netconn_do_writemore+0x278>)
 800e23a:	f00d fb77 	bl	801b92c <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a1b      	ldr	r3, [r3, #32]
 800e242:	699a      	ldr	r2, [r3, #24]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6a1b      	ldr	r3, [r3, #32]
 800e248:	695b      	ldr	r3, [r3, #20]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d306      	bcc.n	800e25c <lwip_netconn_do_writemore+0x84>
 800e24e:	4b7e      	ldr	r3, [pc, #504]	; (800e448 <lwip_netconn_do_writemore+0x270>)
 800e250:	f240 6277 	movw	r2, #1655	; 0x677
 800e254:	4982      	ldr	r1, [pc, #520]	; (800e460 <lwip_netconn_do_writemore+0x288>)
 800e256:	487e      	ldr	r0, [pc, #504]	; (800e450 <lwip_netconn_do_writemore+0x278>)
 800e258:	f00d fb68 	bl	801b92c <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a1b      	ldr	r3, [r3, #32]
 800e260:	899b      	ldrh	r3, [r3, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d106      	bne.n	800e274 <lwip_netconn_do_writemore+0x9c>
 800e266:	4b78      	ldr	r3, [pc, #480]	; (800e448 <lwip_netconn_do_writemore+0x270>)
 800e268:	f240 6279 	movw	r2, #1657	; 0x679
 800e26c:	497d      	ldr	r1, [pc, #500]	; (800e464 <lwip_netconn_do_writemore+0x28c>)
 800e26e:	4878      	ldr	r0, [pc, #480]	; (800e450 <lwip_netconn_do_writemore+0x278>)
 800e270:	f00d fb5c 	bl	801b92c <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a1b      	ldr	r3, [r3, #32]
 800e278:	7f1b      	ldrb	r3, [r3, #28]
 800e27a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	7f1b      	ldrb	r3, [r3, #28]
 800e280:	f003 0302 	and.w	r3, r3, #2
 800e284:	2b00      	cmp	r3, #0
 800e286:	d104      	bne.n	800e292 <lwip_netconn_do_writemore+0xba>
 800e288:	7ebb      	ldrb	r3, [r7, #26]
 800e28a:	f003 0304 	and.w	r3, r3, #4
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <lwip_netconn_do_writemore+0xbe>
 800e292:	2301      	movs	r3, #1
 800e294:	e000      	b.n	800e298 <lwip_netconn_do_writemore+0xc0>
 800e296:	2300      	movs	r3, #0
 800e298:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6a1b      	ldr	r3, [r3, #32]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6a1b      	ldr	r3, [r3, #32]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	685a      	ldr	r2, [r3, #4]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	691b      	ldr	r3, [r3, #16]
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2c4:	d307      	bcc.n	800e2d6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e2c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2ca:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e2cc:	7ebb      	ldrb	r3, [r7, #26]
 800e2ce:	f043 0302 	orr.w	r3, r3, #2
 800e2d2:	76bb      	strb	r3, [r7, #26]
 800e2d4:	e001      	b.n	800e2da <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e2e2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e2e4:	89fa      	ldrh	r2, [r7, #14]
 800e2e6:	8bbb      	ldrh	r3, [r7, #28]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d216      	bcs.n	800e31a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e2ec:	89fb      	ldrh	r3, [r7, #14]
 800e2ee:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e2f0:	7e3b      	ldrb	r3, [r7, #24]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00d      	beq.n	800e312 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e2f6:	8bbb      	ldrh	r3, [r7, #28]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d10e      	bne.n	800e31a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6a1b      	ldr	r3, [r3, #32]
 800e300:	699b      	ldr	r3, [r3, #24]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d102      	bne.n	800e30c <lwip_netconn_do_writemore+0x134>
 800e306:	f06f 0306 	mvn.w	r3, #6
 800e30a:	e000      	b.n	800e30e <lwip_netconn_do_writemore+0x136>
 800e30c:	2300      	movs	r3, #0
 800e30e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e310:	e07d      	b.n	800e40e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e312:	7ebb      	ldrb	r3, [r7, #26]
 800e314:	f043 0302 	orr.w	r3, r3, #2
 800e318:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a1b      	ldr	r3, [r3, #32]
 800e31e:	691a      	ldr	r2, [r3, #16]
 800e320:	8bbb      	ldrh	r3, [r7, #28]
 800e322:	441a      	add	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a1b      	ldr	r3, [r3, #32]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d906      	bls.n	800e33e <lwip_netconn_do_writemore+0x166>
 800e330:	4b45      	ldr	r3, [pc, #276]	; (800e448 <lwip_netconn_do_writemore+0x270>)
 800e332:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800e336:	494c      	ldr	r1, [pc, #304]	; (800e468 <lwip_netconn_do_writemore+0x290>)
 800e338:	4845      	ldr	r0, [pc, #276]	; (800e450 <lwip_netconn_do_writemore+0x278>)
 800e33a:	f00d faf7 	bl	801b92c <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e33e:	8bbb      	ldrh	r3, [r7, #28]
 800e340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e344:	4293      	cmp	r3, r2
 800e346:	d103      	bne.n	800e350 <lwip_netconn_do_writemore+0x178>
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e34e:	d209      	bcs.n	800e364 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e354:	8bba      	ldrh	r2, [r7, #28]
 800e356:	429a      	cmp	r2, r3
 800e358:	d10b      	bne.n	800e372 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	899b      	ldrh	r3, [r3, #12]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d906      	bls.n	800e372 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e364:	2301      	movs	r3, #1
 800e366:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e368:	7ebb      	ldrb	r3, [r7, #26]
 800e36a:	f043 0302 	orr.w	r3, r3, #2
 800e36e:	76bb      	strb	r3, [r7, #26]
 800e370:	e001      	b.n	800e376 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e372:	2300      	movs	r3, #0
 800e374:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6858      	ldr	r0, [r3, #4]
 800e37a:	7ebb      	ldrb	r3, [r7, #26]
 800e37c:	8bba      	ldrh	r2, [r7, #28]
 800e37e:	6979      	ldr	r1, [r7, #20]
 800e380:	f007 fd6a 	bl	8015e58 <tcp_write>
 800e384:	4603      	mov	r3, r0
 800e386:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e388:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d12c      	bne.n	800e3ea <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6a1b      	ldr	r3, [r3, #32]
 800e394:	6999      	ldr	r1, [r3, #24]
 800e396:	8bba      	ldrh	r2, [r7, #28]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6a1b      	ldr	r3, [r3, #32]
 800e39c:	440a      	add	r2, r1
 800e39e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6a1b      	ldr	r3, [r3, #32]
 800e3a4:	6919      	ldr	r1, [r3, #16]
 800e3a6:	8bba      	ldrh	r2, [r7, #28]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a1b      	ldr	r3, [r3, #32]
 800e3ac:	440a      	add	r2, r1
 800e3ae:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a1b      	ldr	r3, [r3, #32]
 800e3b4:	691a      	ldr	r2, [r3, #16]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d113      	bne.n	800e3ea <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	899a      	ldrh	r2, [r3, #12]
 800e3c8:	3a01      	subs	r2, #1
 800e3ca:	b292      	uxth	r2, r2
 800e3cc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	899b      	ldrh	r3, [r3, #12]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d008      	beq.n	800e3ea <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a1b      	ldr	r3, [r3, #32]
 800e3dc:	689a      	ldr	r2, [r3, #8]
 800e3de:	3208      	adds	r2, #8
 800e3e0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a1b      	ldr	r3, [r3, #32]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e3ea:	7e7b      	ldrb	r3, [r7, #25]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d004      	beq.n	800e3fa <lwip_netconn_do_writemore+0x222>
 800e3f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f43f af50 	beq.w	800e29a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e3fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d004      	beq.n	800e40c <lwip_netconn_do_writemore+0x234>
 800e402:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40a:	d146      	bne.n	800e49a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e40c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e40e:	7e3b      	ldrb	r3, [r7, #24]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d02b      	beq.n	800e46c <lwip_netconn_do_writemore+0x294>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6a1b      	ldr	r3, [r3, #32]
 800e418:	699a      	ldr	r2, [r3, #24]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	695b      	ldr	r3, [r3, #20]
 800e420:	429a      	cmp	r2, r3
 800e422:	d223      	bcs.n	800e46c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d005      	beq.n	800e438 <lwip_netconn_do_writemore+0x260>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e430:	2200      	movs	r2, #0
 800e432:	2103      	movs	r1, #3
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	7f1b      	ldrb	r3, [r3, #28]
 800e43c:	f043 0310 	orr.w	r3, r3, #16
 800e440:	b2da      	uxtb	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	771a      	strb	r2, [r3, #28]
 800e446:	e028      	b.n	800e49a <lwip_netconn_do_writemore+0x2c2>
 800e448:	08024c6c 	.word	0x08024c6c
 800e44c:	08024dc4 	.word	0x08024dc4
 800e450:	08024cb0 	.word	0x08024cb0
 800e454:	080250cc 	.word	0x080250cc
 800e458:	08024dd4 	.word	0x08024dd4
 800e45c:	080250ec 	.word	0x080250ec
 800e460:	08025104 	.word	0x08025104
 800e464:	08025144 	.word	0x08025144
 800e468:	0802516c 	.word	0x0802516c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e474:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e478:	d305      	bcc.n	800e486 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e482:	2b04      	cmp	r3, #4
 800e484:	d909      	bls.n	800e49a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d005      	beq.n	800e49a <lwip_netconn_do_writemore+0x2c2>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e492:	2200      	movs	r2, #0
 800e494:	2103      	movs	r1, #3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e49a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d11d      	bne.n	800e4de <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	699a      	ldr	r2, [r3, #24]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6a1b      	ldr	r3, [r3, #32]
 800e4ac:	695b      	ldr	r3, [r3, #20]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d002      	beq.n	800e4b8 <lwip_netconn_do_writemore+0x2e0>
 800e4b2:	7e3b      	ldrb	r3, [r7, #24]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f008 fab3 	bl	8016a2c <tcp_output>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e4ca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e4ce:	f113 0f04 	cmn.w	r3, #4
 800e4d2:	d12c      	bne.n	800e52e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e4d4:	7b3b      	ldrb	r3, [r7, #12]
 800e4d6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	76fb      	strb	r3, [r7, #27]
 800e4dc:	e027      	b.n	800e52e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e4de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e6:	d120      	bne.n	800e52a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f008 fa9d 	bl	8016a2c <tcp_output>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e4f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e4fa:	f113 0f04 	cmn.w	r3, #4
 800e4fe:	d104      	bne.n	800e50a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e500:	7b7b      	ldrb	r3, [r7, #13]
 800e502:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e504:	2301      	movs	r3, #1
 800e506:	76fb      	strb	r3, [r7, #27]
 800e508:	e011      	b.n	800e52e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e50a:	7e3b      	ldrb	r3, [r7, #24]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00e      	beq.n	800e52e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a1b      	ldr	r3, [r3, #32]
 800e514:	699b      	ldr	r3, [r3, #24]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d102      	bne.n	800e520 <lwip_netconn_do_writemore+0x348>
 800e51a:	f06f 0306 	mvn.w	r3, #6
 800e51e:	e000      	b.n	800e522 <lwip_netconn_do_writemore+0x34a>
 800e520:	2300      	movs	r3, #0
 800e522:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e524:	2301      	movs	r3, #1
 800e526:	76fb      	strb	r3, [r7, #27]
 800e528:	e001      	b.n	800e52e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e52a:	2301      	movs	r3, #1
 800e52c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e52e:	7efb      	ldrb	r3, [r7, #27]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d015      	beq.n	800e560 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6a1b      	ldr	r3, [r3, #32]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	330c      	adds	r3, #12
 800e53c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a1b      	ldr	r3, [r3, #32]
 800e542:	7ffa      	ldrb	r2, [r7, #31]
 800e544:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e552:	78fb      	ldrb	r3, [r7, #3]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d006      	beq.n	800e566 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e558:	68b8      	ldr	r0, [r7, #8]
 800e55a:	f00c fd4b 	bl	801aff4 <sys_sem_signal>
 800e55e:	e002      	b.n	800e566 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e560:	f04f 33ff 	mov.w	r3, #4294967295
 800e564:	e000      	b.n	800e568 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3720      	adds	r7, #32
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	785b      	ldrb	r3, [r3, #1]
 800e582:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d069      	beq.n	800e662 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e598:	2b10      	cmp	r3, #16
 800e59a:	d162      	bne.n	800e662 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e5a0:	2b03      	cmp	r3, #3
 800e5a2:	d002      	beq.n	800e5aa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e5a4:	7afb      	ldrb	r3, [r7, #11]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d05b      	beq.n	800e662 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e5aa:	7afb      	ldrb	r3, [r7, #11]
 800e5ac:	2b03      	cmp	r3, #3
 800e5ae:	d103      	bne.n	800e5b8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	22f5      	movs	r2, #245	; 0xf5
 800e5b4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e5b6:	e059      	b.n	800e66c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e5b8:	7afb      	ldrb	r3, [r7, #11]
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d103      	bne.n	800e5c6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	22fb      	movs	r2, #251	; 0xfb
 800e5c2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e5c4:	e052      	b.n	800e66c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	7a1b      	ldrb	r3, [r3, #8]
 800e5ca:	f003 0301 	and.w	r3, r3, #1
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d004      	beq.n	800e5dc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7ff fa7a 	bl	800dad0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6a1b      	ldr	r3, [r3, #32]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d006      	beq.n	800e5f4 <lwip_netconn_do_close+0x84>
 800e5e6:	4b23      	ldr	r3, [pc, #140]	; (800e674 <lwip_netconn_do_close+0x104>)
 800e5e8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e5ec:	4922      	ldr	r1, [pc, #136]	; (800e678 <lwip_netconn_do_close+0x108>)
 800e5ee:	4823      	ldr	r0, [pc, #140]	; (800e67c <lwip_netconn_do_close+0x10c>)
 800e5f0:	f00d f99c 	bl	801b92c <printf>
      msg->conn->state = NETCONN_CLOSE;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2204      	movs	r2, #4
 800e5fa:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2100      	movs	r1, #0
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff fade 	bl	800dbcc <lwip_netconn_do_close_internal>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d029      	beq.n	800e66a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	785b      	ldrb	r3, [r3, #1]
 800e61c:	2b04      	cmp	r3, #4
 800e61e:	d006      	beq.n	800e62e <lwip_netconn_do_close+0xbe>
 800e620:	4b14      	ldr	r3, [pc, #80]	; (800e674 <lwip_netconn_do_close+0x104>)
 800e622:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e626:	4916      	ldr	r1, [pc, #88]	; (800e680 <lwip_netconn_do_close+0x110>)
 800e628:	4814      	ldr	r0, [pc, #80]	; (800e67c <lwip_netconn_do_close+0x10c>)
 800e62a:	f00d f97f 	bl	801b92c <printf>
        UNLOCK_TCPIP_CORE();
 800e62e:	4815      	ldr	r0, [pc, #84]	; (800e684 <lwip_netconn_do_close+0x114>)
 800e630:	f00c fd51 	bl	801b0d6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	330c      	adds	r3, #12
 800e63a:	2100      	movs	r1, #0
 800e63c:	4618      	mov	r0, r3
 800e63e:	f00c fca8 	bl	801af92 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e642:	4810      	ldr	r0, [pc, #64]	; (800e684 <lwip_netconn_do_close+0x114>)
 800e644:	f00c fd38 	bl	801b0b8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	785b      	ldrb	r3, [r3, #1]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00b      	beq.n	800e66a <lwip_netconn_do_close+0xfa>
 800e652:	4b08      	ldr	r3, [pc, #32]	; (800e674 <lwip_netconn_do_close+0x104>)
 800e654:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e658:	4909      	ldr	r1, [pc, #36]	; (800e680 <lwip_netconn_do_close+0x110>)
 800e65a:	4808      	ldr	r0, [pc, #32]	; (800e67c <lwip_netconn_do_close+0x10c>)
 800e65c:	f00d f966 	bl	801b92c <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e660:	e003      	b.n	800e66a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	22f5      	movs	r2, #245	; 0xf5
 800e666:	711a      	strb	r2, [r3, #4]
 800e668:	e000      	b.n	800e66c <lwip_netconn_do_close+0xfc>
      return;
 800e66a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	08024c6c 	.word	0x08024c6c
 800e678:	08025010 	.word	0x08025010
 800e67c:	08024cb0 	.word	0x08024cb0
 800e680:	0802502c 	.word	0x0802502c
 800e684:	20008730 	.word	0x20008730

0800e688 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d013      	beq.n	800e6be <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00b      	beq.n	800e6b6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f002 fddc 	bl	8011260 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	605a      	str	r2, [r3, #4]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	685a      	ldr	r2, [r3, #4]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e6b6:	6879      	ldr	r1, [r7, #4]
 800e6b8:	2006      	movs	r0, #6
 800e6ba:	f001 ff53 	bl	8010564 <memp_free>
  }
}
 800e6be:	bf00      	nop
 800e6c0:	3708      	adds	r7, #8
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
	...

0800e6c8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d108      	bne.n	800e6ec <netbuf_data+0x24>
 800e6da:	4b1b      	ldr	r3, [pc, #108]	; (800e748 <netbuf_data+0x80>)
 800e6dc:	22c6      	movs	r2, #198	; 0xc6
 800e6de:	491b      	ldr	r1, [pc, #108]	; (800e74c <netbuf_data+0x84>)
 800e6e0:	481b      	ldr	r0, [pc, #108]	; (800e750 <netbuf_data+0x88>)
 800e6e2:	f00d f923 	bl	801b92c <printf>
 800e6e6:	f06f 030f 	mvn.w	r3, #15
 800e6ea:	e029      	b.n	800e740 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d108      	bne.n	800e704 <netbuf_data+0x3c>
 800e6f2:	4b15      	ldr	r3, [pc, #84]	; (800e748 <netbuf_data+0x80>)
 800e6f4:	22c7      	movs	r2, #199	; 0xc7
 800e6f6:	4917      	ldr	r1, [pc, #92]	; (800e754 <netbuf_data+0x8c>)
 800e6f8:	4815      	ldr	r0, [pc, #84]	; (800e750 <netbuf_data+0x88>)
 800e6fa:	f00d f917 	bl	801b92c <printf>
 800e6fe:	f06f 030f 	mvn.w	r3, #15
 800e702:	e01d      	b.n	800e740 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d108      	bne.n	800e71c <netbuf_data+0x54>
 800e70a:	4b0f      	ldr	r3, [pc, #60]	; (800e748 <netbuf_data+0x80>)
 800e70c:	22c8      	movs	r2, #200	; 0xc8
 800e70e:	4912      	ldr	r1, [pc, #72]	; (800e758 <netbuf_data+0x90>)
 800e710:	480f      	ldr	r0, [pc, #60]	; (800e750 <netbuf_data+0x88>)
 800e712:	f00d f90b 	bl	801b92c <printf>
 800e716:	f06f 030f 	mvn.w	r3, #15
 800e71a:	e011      	b.n	800e740 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d102      	bne.n	800e72a <netbuf_data+0x62>
    return ERR_BUF;
 800e724:	f06f 0301 	mvn.w	r3, #1
 800e728:	e00a      	b.n	800e740 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	685a      	ldr	r2, [r3, #4]
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	895a      	ldrh	r2, [r3, #10]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	080251c4 	.word	0x080251c4
 800e74c:	080252cc 	.word	0x080252cc
 800e750:	08025214 	.word	0x08025214
 800e754:	080252e8 	.word	0x080252e8
 800e758:	08025308 	.word	0x08025308

0800e75c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d108      	bne.n	800e77c <netbuf_next+0x20>
 800e76a:	4b11      	ldr	r3, [pc, #68]	; (800e7b0 <netbuf_next+0x54>)
 800e76c:	22e0      	movs	r2, #224	; 0xe0
 800e76e:	4911      	ldr	r1, [pc, #68]	; (800e7b4 <netbuf_next+0x58>)
 800e770:	4811      	ldr	r0, [pc, #68]	; (800e7b8 <netbuf_next+0x5c>)
 800e772:	f00d f8db 	bl	801b92c <printf>
 800e776:	f04f 33ff 	mov.w	r3, #4294967295
 800e77a:	e014      	b.n	800e7a6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d102      	bne.n	800e78c <netbuf_next+0x30>
    return -1;
 800e786:	f04f 33ff 	mov.w	r3, #4294967295
 800e78a:	e00c      	b.n	800e7a6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d101      	bne.n	800e7a4 <netbuf_next+0x48>
    return 1;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e000      	b.n	800e7a6 <netbuf_next+0x4a>
  }
  return 0;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3708      	adds	r7, #8
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	080251c4 	.word	0x080251c4
 800e7b4:	08025324 	.word	0x08025324
 800e7b8:	08025214 	.word	0x08025214

0800e7bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e7c6:	f009 f9e9 	bl	8017b9c <sys_timeouts_sleeptime>
 800e7ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d2:	d10b      	bne.n	800e7ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e7d4:	4813      	ldr	r0, [pc, #76]	; (800e824 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7d6:	f00c fc7e 	bl	801b0d6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e7da:	2200      	movs	r2, #0
 800e7dc:	6839      	ldr	r1, [r7, #0]
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f00c fb36 	bl	801ae50 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e7e4:	480f      	ldr	r0, [pc, #60]	; (800e824 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7e6:	f00c fc67 	bl	801b0b8 <sys_mutex_lock>
    return;
 800e7ea:	e018      	b.n	800e81e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d102      	bne.n	800e7f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e7f2:	f009 f999 	bl	8017b28 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e7f6:	e7e6      	b.n	800e7c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e7f8:	480a      	ldr	r0, [pc, #40]	; (800e824 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7fa:	f00c fc6c 	bl	801b0d6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f00c fb24 	bl	801ae50 <sys_arch_mbox_fetch>
 800e808:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e80a:	4806      	ldr	r0, [pc, #24]	; (800e824 <tcpip_timeouts_mbox_fetch+0x68>)
 800e80c:	f00c fc54 	bl	801b0b8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e816:	d102      	bne.n	800e81e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e818:	f009 f986 	bl	8017b28 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e81c:	e7d3      	b.n	800e7c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e81e:	3710      	adds	r7, #16
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	20008730 	.word	0x20008730

0800e828 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e830:	4810      	ldr	r0, [pc, #64]	; (800e874 <tcpip_thread+0x4c>)
 800e832:	f00c fc41 	bl	801b0b8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e836:	4b10      	ldr	r3, [pc, #64]	; (800e878 <tcpip_thread+0x50>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d005      	beq.n	800e84a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e83e:	4b0e      	ldr	r3, [pc, #56]	; (800e878 <tcpip_thread+0x50>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a0e      	ldr	r2, [pc, #56]	; (800e87c <tcpip_thread+0x54>)
 800e844:	6812      	ldr	r2, [r2, #0]
 800e846:	4610      	mov	r0, r2
 800e848:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e84a:	f107 030c 	add.w	r3, r7, #12
 800e84e:	4619      	mov	r1, r3
 800e850:	480b      	ldr	r0, [pc, #44]	; (800e880 <tcpip_thread+0x58>)
 800e852:	f7ff ffb3 	bl	800e7bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d106      	bne.n	800e86a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e85c:	4b09      	ldr	r3, [pc, #36]	; (800e884 <tcpip_thread+0x5c>)
 800e85e:	2291      	movs	r2, #145	; 0x91
 800e860:	4909      	ldr	r1, [pc, #36]	; (800e888 <tcpip_thread+0x60>)
 800e862:	480a      	ldr	r0, [pc, #40]	; (800e88c <tcpip_thread+0x64>)
 800e864:	f00d f862 	bl	801b92c <printf>
      continue;
 800e868:	e003      	b.n	800e872 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f000 f80f 	bl	800e890 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e872:	e7ea      	b.n	800e84a <tcpip_thread+0x22>
 800e874:	20008730 	.word	0x20008730
 800e878:	20004aa4 	.word	0x20004aa4
 800e87c:	20004aa8 	.word	0x20004aa8
 800e880:	20004aac 	.word	0x20004aac
 800e884:	0802535c 	.word	0x0802535c
 800e888:	0802538c 	.word	0x0802538c
 800e88c:	080253ac 	.word	0x080253ac

0800e890 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d026      	beq.n	800e8ee <tcpip_thread_handle_msg+0x5e>
 800e8a0:	2b02      	cmp	r3, #2
 800e8a2:	dc2b      	bgt.n	800e8fc <tcpip_thread_handle_msg+0x6c>
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d002      	beq.n	800e8ae <tcpip_thread_handle_msg+0x1e>
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d015      	beq.n	800e8d8 <tcpip_thread_handle_msg+0x48>
 800e8ac:	e026      	b.n	800e8fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	6850      	ldr	r0, [r2, #4]
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	6892      	ldr	r2, [r2, #8]
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	4798      	blx	r3
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d004      	beq.n	800e8ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f002 fcc9 	bl	8011260 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	2009      	movs	r0, #9
 800e8d2:	f001 fe47 	bl	8010564 <memp_free>
      break;
 800e8d6:	e018      	b.n	800e90a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	6892      	ldr	r2, [r2, #8]
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	2008      	movs	r0, #8
 800e8e8:	f001 fe3c 	bl	8010564 <memp_free>
      break;
 800e8ec:	e00d      	b.n	800e90a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	6892      	ldr	r2, [r2, #8]
 800e8f6:	4610      	mov	r0, r2
 800e8f8:	4798      	blx	r3
      break;
 800e8fa:	e006      	b.n	800e90a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e8fc:	4b05      	ldr	r3, [pc, #20]	; (800e914 <tcpip_thread_handle_msg+0x84>)
 800e8fe:	22cf      	movs	r2, #207	; 0xcf
 800e900:	4905      	ldr	r1, [pc, #20]	; (800e918 <tcpip_thread_handle_msg+0x88>)
 800e902:	4806      	ldr	r0, [pc, #24]	; (800e91c <tcpip_thread_handle_msg+0x8c>)
 800e904:	f00d f812 	bl	801b92c <printf>
      break;
 800e908:	bf00      	nop
  }
}
 800e90a:	bf00      	nop
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	0802535c 	.word	0x0802535c
 800e918:	0802538c 	.word	0x0802538c
 800e91c:	080253ac 	.word	0x080253ac

0800e920 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b086      	sub	sp, #24
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e92c:	481a      	ldr	r0, [pc, #104]	; (800e998 <tcpip_inpkt+0x78>)
 800e92e:	f00c faea 	bl	801af06 <sys_mbox_valid>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d105      	bne.n	800e944 <tcpip_inpkt+0x24>
 800e938:	4b18      	ldr	r3, [pc, #96]	; (800e99c <tcpip_inpkt+0x7c>)
 800e93a:	22fc      	movs	r2, #252	; 0xfc
 800e93c:	4918      	ldr	r1, [pc, #96]	; (800e9a0 <tcpip_inpkt+0x80>)
 800e93e:	4819      	ldr	r0, [pc, #100]	; (800e9a4 <tcpip_inpkt+0x84>)
 800e940:	f00c fff4 	bl	801b92c <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e944:	2009      	movs	r0, #9
 800e946:	f001 fdbb 	bl	80104c0 <memp_malloc>
 800e94a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d102      	bne.n	800e958 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e952:	f04f 33ff 	mov.w	r3, #4294967295
 800e956:	e01a      	b.n	800e98e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	2200      	movs	r2, #0
 800e95c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e970:	6979      	ldr	r1, [r7, #20]
 800e972:	4809      	ldr	r0, [pc, #36]	; (800e998 <tcpip_inpkt+0x78>)
 800e974:	f00c fa52 	bl	801ae1c <sys_mbox_trypost>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d006      	beq.n	800e98c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e97e:	6979      	ldr	r1, [r7, #20]
 800e980:	2009      	movs	r0, #9
 800e982:	f001 fdef 	bl	8010564 <memp_free>
    return ERR_MEM;
 800e986:	f04f 33ff 	mov.w	r3, #4294967295
 800e98a:	e000      	b.n	800e98e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e98c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	20004aac 	.word	0x20004aac
 800e99c:	0802535c 	.word	0x0802535c
 800e9a0:	080253d4 	.word	0x080253d4
 800e9a4:	080253ac 	.word	0x080253ac

0800e9a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e9b8:	f003 0318 	and.w	r3, r3, #24
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d006      	beq.n	800e9ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e9c0:	4a08      	ldr	r2, [pc, #32]	; (800e9e4 <tcpip_input+0x3c>)
 800e9c2:	6839      	ldr	r1, [r7, #0]
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff ffab 	bl	800e920 <tcpip_inpkt>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	e005      	b.n	800e9da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e9ce:	4a06      	ldr	r2, [pc, #24]	; (800e9e8 <tcpip_input+0x40>)
 800e9d0:	6839      	ldr	r1, [r7, #0]
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7ff ffa4 	bl	800e920 <tcpip_inpkt>
 800e9d8:	4603      	mov	r3, r0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	0801ac09 	.word	0x0801ac09
 800e9e8:	080198c9 	.word	0x080198c9

0800e9ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e9f6:	4819      	ldr	r0, [pc, #100]	; (800ea5c <tcpip_try_callback+0x70>)
 800e9f8:	f00c fa85 	bl	801af06 <sys_mbox_valid>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d106      	bne.n	800ea10 <tcpip_try_callback+0x24>
 800ea02:	4b17      	ldr	r3, [pc, #92]	; (800ea60 <tcpip_try_callback+0x74>)
 800ea04:	f240 125d 	movw	r2, #349	; 0x15d
 800ea08:	4916      	ldr	r1, [pc, #88]	; (800ea64 <tcpip_try_callback+0x78>)
 800ea0a:	4817      	ldr	r0, [pc, #92]	; (800ea68 <tcpip_try_callback+0x7c>)
 800ea0c:	f00c ff8e 	bl	801b92c <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ea10:	2008      	movs	r0, #8
 800ea12:	f001 fd55 	bl	80104c0 <memp_malloc>
 800ea16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d102      	bne.n	800ea24 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ea1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea22:	e017      	b.n	800ea54 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2201      	movs	r2, #1
 800ea28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	683a      	ldr	r2, [r7, #0]
 800ea34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ea36:	68f9      	ldr	r1, [r7, #12]
 800ea38:	4808      	ldr	r0, [pc, #32]	; (800ea5c <tcpip_try_callback+0x70>)
 800ea3a:	f00c f9ef 	bl	801ae1c <sys_mbox_trypost>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d006      	beq.n	800ea52 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ea44:	68f9      	ldr	r1, [r7, #12]
 800ea46:	2008      	movs	r0, #8
 800ea48:	f001 fd8c 	bl	8010564 <memp_free>
    return ERR_MEM;
 800ea4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea50:	e000      	b.n	800ea54 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3710      	adds	r7, #16
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20004aac 	.word	0x20004aac
 800ea60:	0802535c 	.word	0x0802535c
 800ea64:	080253d4 	.word	0x080253d4
 800ea68:	080253ac 	.word	0x080253ac

0800ea6c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ea78:	4806      	ldr	r0, [pc, #24]	; (800ea94 <tcpip_send_msg_wait_sem+0x28>)
 800ea7a:	f00c fb1d 	bl	801b0b8 <sys_mutex_lock>
  fn(apimsg);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	68b8      	ldr	r0, [r7, #8]
 800ea82:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ea84:	4803      	ldr	r0, [pc, #12]	; (800ea94 <tcpip_send_msg_wait_sem+0x28>)
 800ea86:	f00c fb26 	bl	801b0d6 <sys_mutex_unlock>
  return ERR_OK;
 800ea8a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	20008730 	.word	0x20008730

0800ea98 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af02      	add	r7, sp, #8
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800eaa2:	f001 f885 	bl	800fbb0 <lwip_init>

  tcpip_init_done = initfunc;
 800eaa6:	4a17      	ldr	r2, [pc, #92]	; (800eb04 <tcpip_init+0x6c>)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800eaac:	4a16      	ldr	r2, [pc, #88]	; (800eb08 <tcpip_init+0x70>)
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800eab2:	2106      	movs	r1, #6
 800eab4:	4815      	ldr	r0, [pc, #84]	; (800eb0c <tcpip_init+0x74>)
 800eab6:	f00c f97d 	bl	801adb4 <sys_mbox_new>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d006      	beq.n	800eace <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800eac0:	4b13      	ldr	r3, [pc, #76]	; (800eb10 <tcpip_init+0x78>)
 800eac2:	f240 2261 	movw	r2, #609	; 0x261
 800eac6:	4913      	ldr	r1, [pc, #76]	; (800eb14 <tcpip_init+0x7c>)
 800eac8:	4813      	ldr	r0, [pc, #76]	; (800eb18 <tcpip_init+0x80>)
 800eaca:	f00c ff2f 	bl	801b92c <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800eace:	4813      	ldr	r0, [pc, #76]	; (800eb1c <tcpip_init+0x84>)
 800ead0:	f00c fad6 	bl	801b080 <sys_mutex_new>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d006      	beq.n	800eae8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800eada:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <tcpip_init+0x78>)
 800eadc:	f240 2265 	movw	r2, #613	; 0x265
 800eae0:	490f      	ldr	r1, [pc, #60]	; (800eb20 <tcpip_init+0x88>)
 800eae2:	480d      	ldr	r0, [pc, #52]	; (800eb18 <tcpip_init+0x80>)
 800eae4:	f00c ff22 	bl	801b92c <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800eae8:	2300      	movs	r3, #0
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	490c      	ldr	r1, [pc, #48]	; (800eb24 <tcpip_init+0x8c>)
 800eaf4:	480c      	ldr	r0, [pc, #48]	; (800eb28 <tcpip_init+0x90>)
 800eaf6:	f00c fafb 	bl	801b0f0 <sys_thread_new>
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20004aa4 	.word	0x20004aa4
 800eb08:	20004aa8 	.word	0x20004aa8
 800eb0c:	20004aac 	.word	0x20004aac
 800eb10:	0802535c 	.word	0x0802535c
 800eb14:	080253e4 	.word	0x080253e4
 800eb18:	080253ac 	.word	0x080253ac
 800eb1c:	20008730 	.word	0x20008730
 800eb20:	08025408 	.word	0x08025408
 800eb24:	0800e829 	.word	0x0800e829
 800eb28:	0802542c 	.word	0x0802542c

0800eb2c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d002      	beq.n	800eb42 <fs_open+0x16>
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d102      	bne.n	800eb48 <fs_open+0x1c>
    return ERR_ARG;
 800eb42:	f06f 030f 	mvn.w	r3, #15
 800eb46:	e037      	b.n	800ebb8 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800eb48:	6839      	ldr	r1, [r7, #0]
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7f3 fd44 	bl	80025d8 <fs_open_custom>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d004      	beq.n	800eb60 <fs_open+0x34>
    file->is_custom_file = 1;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	e02b      	b.n	800ebb8 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800eb66:	4b16      	ldr	r3, [pc, #88]	; (800ebc0 <fs_open+0x94>)
 800eb68:	60fb      	str	r3, [r7, #12]
 800eb6a:	e020      	b.n	800ebae <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	4619      	mov	r1, r3
 800eb72:	6838      	ldr	r0, [r7, #0]
 800eb74:	f7f1 fb4c 	bl	8000210 <strcmp>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d114      	bne.n	800eba8 <fs_open+0x7c>
      file->data = (const char *)f->data;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	689a      	ldr	r2, [r3, #8]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	68da      	ldr	r2, [r3, #12]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	68da      	ldr	r2, [r3, #12]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	7c1a      	ldrb	r2, [r3, #16]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	e007      	b.n	800ebb8 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	60fb      	str	r3, [r7, #12]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1db      	bne.n	800eb6c <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ebb4:	f06f 0305 	mvn.w	r3, #5
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	08028f48 	.word	0x08028f48

0800ebc4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	7c5b      	ldrb	r3, [r3, #17]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d002      	beq.n	800ebda <fs_close+0x16>
    fs_close_custom(file);
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7f3 fe6f 	bl	80028b8 <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ebda:	bf00      	nop
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	b083      	sub	sp, #12
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	1ad3      	subs	r3, r2, r3
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ec08:	2230      	movs	r2, #48	; 0x30
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f00c fc07 	bl	801b420 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ec12:	bf00      	nop
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b082      	sub	sp, #8
 800ec1e:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ec20:	2030      	movs	r0, #48	; 0x30
 800ec22:	f001 facb 	bl	80101bc <mem_malloc>
 800ec26:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d002      	beq.n	800ec34 <http_state_alloc+0x1a>
    http_state_init(ret);
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7ff ffe6 	bl	800ec00 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ec34:	687b      	ldr	r3, [r7, #4]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	695b      	ldr	r3, [r3, #20]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d007      	beq.n	800ec5e <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7ff ffb6 	bl	800ebc4 <fs_close>
    hs->handle = NULL;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6a1b      	ldr	r3, [r3, #32]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d007      	beq.n	800ec76 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6a1b      	ldr	r3, [r3, #32]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f002 faf8 	bl	8011260 <pbuf_free>
    hs->req = NULL;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800ec76:	bf00      	nop
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b082      	sub	sp, #8
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d005      	beq.n	800ec98 <http_state_free+0x1a>
    http_state_eof(hs);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f7ff ffd6 	bl	800ec3e <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f001 f8f8 	bl	800fe88 <mem_free>
  }
}
 800ec98:	bf00      	nop
 800ec9a:	3708      	adds	r7, #8
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b086      	sub	sp, #24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
 800ecac:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d106      	bne.n	800ecc2 <http_write+0x22>
 800ecb4:	4b2c      	ldr	r3, [pc, #176]	; (800ed68 <http_write+0xc8>)
 800ecb6:	f240 2219 	movw	r2, #537	; 0x219
 800ecba:	492c      	ldr	r1, [pc, #176]	; (800ed6c <http_write+0xcc>)
 800ecbc:	482c      	ldr	r0, [pc, #176]	; (800ed70 <http_write+0xd0>)
 800ecbe:	f00c fe35 	bl	801b92c <printf>
  len = *length;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800ecc8:	8afb      	ldrh	r3, [r7, #22]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d101      	bne.n	800ecd2 <http_write+0x32>
    return ERR_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	e045      	b.n	800ed5e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ecd8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800ecda:	8aba      	ldrh	r2, [r7, #20]
 800ecdc:	8afb      	ldrh	r3, [r7, #22]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d201      	bcs.n	800ece6 <http_write+0x46>
    len = max_len;
 800ece2:	8abb      	ldrh	r3, [r7, #20]
 800ece4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecea:	005b      	lsls	r3, r3, #1
 800ecec:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800ecee:	8afa      	ldrh	r2, [r7, #22]
 800ecf0:	8abb      	ldrh	r3, [r7, #20]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d901      	bls.n	800ecfa <http_write+0x5a>
    len = max_len;
 800ecf6:	8abb      	ldrh	r3, [r7, #20]
 800ecf8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800ecfa:	78fb      	ldrb	r3, [r7, #3]
 800ecfc:	8afa      	ldrh	r2, [r7, #22]
 800ecfe:	68b9      	ldr	r1, [r7, #8]
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f007 f8a9 	bl	8015e58 <tcp_write>
 800ed06:	4603      	mov	r3, r0
 800ed08:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800ed0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed12:	d10f      	bne.n	800ed34 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d004      	beq.n	800ed28 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ed24:	2b08      	cmp	r3, #8
 800ed26:	d902      	bls.n	800ed2e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	82fb      	strh	r3, [r7, #22]
 800ed2c:	e002      	b.n	800ed34 <http_write+0x94>
      } else {
        len /= 2;
 800ed2e:	8afb      	ldrh	r3, [r7, #22]
 800ed30:	085b      	lsrs	r3, r3, #1
 800ed32:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ed34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3c:	d102      	bne.n	800ed44 <http_write+0xa4>
 800ed3e:	8afb      	ldrh	r3, [r7, #22]
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d8da      	bhi.n	800ecfa <http_write+0x5a>

  if (err == ERR_OK) {
 800ed44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d103      	bne.n	800ed54 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8afa      	ldrh	r2, [r7, #22]
 800ed50:	801a      	strh	r2, [r3, #0]
 800ed52:	e002      	b.n	800ed5a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800ed5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3718      	adds	r7, #24
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	0802547c 	.word	0x0802547c
 800ed6c:	080254b4 	.word	0x080254b4
 800ed70:	080254c4 	.word	0x080254c4

0800ed74 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b086      	sub	sp, #24
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00b      	beq.n	800eda0 <http_close_or_abort_conn+0x2c>
    if ((hs->post_content_len_left != 0)
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d007      	beq.n	800eda0 <http_close_or_abort_conn+0x2c>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800ed90:	4b1f      	ldr	r3, [pc, #124]	; (800ee10 <http_close_or_abort_conn+0x9c>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800ed96:	223f      	movs	r2, #63	; 0x3f
 800ed98:	491d      	ldr	r1, [pc, #116]	; (800ee10 <http_close_or_abort_conn+0x9c>)
 800ed9a:	68b8      	ldr	r0, [r7, #8]
 800ed9c:	f7f4 fd38 	bl	8003810 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800eda0:	2100      	movs	r1, #0
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	f004 f91a 	bl	8012fdc <tcp_arg>
  altcp_recv(pcb, NULL);
 800eda8:	2100      	movs	r1, #0
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f004 f928 	bl	8013000 <tcp_recv>
  altcp_err(pcb, NULL);
 800edb0:	2100      	movs	r1, #0
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f004 f968 	bl	8013088 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800edb8:	2200      	movs	r2, #0
 800edba:	2100      	movs	r1, #0
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f004 f99d 	bl	80130fc <tcp_poll>
  altcp_sent(pcb, NULL);
 800edc2:	2100      	movs	r1, #0
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f004 f93d 	bl	8013044 <tcp_sent>
  if (hs != NULL) {
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <http_close_or_abort_conn+0x62>
    http_state_free(hs);
 800edd0:	68b8      	ldr	r0, [r7, #8]
 800edd2:	f7ff ff54 	bl	800ec7e <http_state_free>
  }

  if (abort_conn) {
 800edd6:	79fb      	ldrb	r3, [r7, #7]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d004      	beq.n	800ede6 <http_close_or_abort_conn+0x72>
    altcp_abort(pcb);
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f003 f83f 	bl	8011e60 <tcp_abort>
    return ERR_OK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	e00f      	b.n	800ee06 <http_close_or_abort_conn+0x92>
  }
  err = altcp_close(pcb);
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	f002 fef4 	bl	8011bd4 <tcp_close>
 800edec:	4603      	mov	r3, r0
 800edee:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800edf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d004      	beq.n	800ee02 <http_close_or_abort_conn+0x8e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800edf8:	2204      	movs	r2, #4
 800edfa:	4906      	ldr	r1, [pc, #24]	; (800ee14 <http_close_or_abort_conn+0xa0>)
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f004 f97d 	bl	80130fc <tcp_poll>
  }
  return err;
 800ee02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3718      	adds	r7, #24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	20004eb0 	.word	0x20004eb0
 800ee14:	0800f7e7 	.word	0x0800f7e7

0800ee18 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ee22:	2200      	movs	r2, #0
 800ee24:	6839      	ldr	r1, [r7, #0]
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f7ff ffa4 	bl	800ed74 <http_close_or_abort_conn>
 800ee2c:	4603      	mov	r3, r0
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b082      	sub	sp, #8
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
 800ee3e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ee40:	6839      	ldr	r1, [r7, #0]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7ff ffe8 	bl	800ee18 <http_close_conn>
  }
}
 800ee48:	bf00      	nop
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d105      	bne.n	800ee6e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ee62:	6839      	ldr	r1, [r7, #0]
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7ff ffe6 	bl	800ee36 <http_eof>
    return 0;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	e016      	b.n	800ee9c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	695b      	ldr	r3, [r3, #20]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7ff feb5 	bl	800ebe2 <fs_bytes_left>
 800ee78:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	dc05      	bgt.n	800ee8c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ee80:	6839      	ldr	r1, [r7, #0]
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7ff ffd7 	bl	800ee36 <http_eof>
    return 0;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	e007      	b.n	800ee9c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ee8c:	4b05      	ldr	r3, [pc, #20]	; (800eea4 <http_check_eof+0x54>)
 800ee8e:	f240 429d 	movw	r2, #1181	; 0x49d
 800ee92:	4905      	ldr	r1, [pc, #20]	; (800eea8 <http_check_eof+0x58>)
 800ee94:	4805      	ldr	r0, [pc, #20]	; (800eeac <http_check_eof+0x5c>)
 800ee96:	f00c fd49 	bl	801b92c <printf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ee9a:	2301      	movs	r3, #1
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	0802547c 	.word	0x0802547c
 800eea8:	080254ec 	.word	0x080254ec
 800eeac:	080254c4 	.word	0x080254c4

0800eeb0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800eeba:	2300      	movs	r3, #0
 800eebc:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d803      	bhi.n	800eed2 <http_send_data_nonssi+0x22>
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eece:	b29b      	uxth	r3, r3
 800eed0:	e001      	b.n	800eed6 <http_send_data_nonssi+0x26>
 800eed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eed6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	6999      	ldr	r1, [r3, #24]
 800eedc:	f107 020c 	add.w	r2, r7, #12
 800eee0:	2300      	movs	r3, #0
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7ff fedc 	bl	800eca0 <http_write>
 800eee8:	4603      	mov	r3, r0
 800eeea:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800eeec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10d      	bne.n	800ef10 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800eef4:	2301      	movs	r3, #1
 800eef6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	699b      	ldr	r3, [r3, #24]
 800eefc:	89ba      	ldrh	r2, [r7, #12]
 800eefe:	441a      	add	r2, r3
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef08:	89ba      	ldrh	r2, [r7, #12]
 800ef0a:	1a9a      	subs	r2, r3, r2
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800ef10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3710      	adds	r7, #16
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}

0800ef1a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
 800ef22:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ef24:	2300      	movs	r3, #0
 800ef26:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d101      	bne.n	800ef32 <http_send+0x18>
    return 0;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e025      	b.n	800ef7e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d108      	bne.n	800ef4c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800ef3a:	6839      	ldr	r1, [r7, #0]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7ff ff87 	bl	800ee50 <http_check_eof>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d101      	bne.n	800ef4c <http_send+0x32>
      return 0;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	e018      	b.n	800ef7e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7ff ffae 	bl	800eeb0 <http_send_data_nonssi>
 800ef54:	4603      	mov	r3, r0
 800ef56:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d10d      	bne.n	800ef7c <http_send+0x62>
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7ff fe3c 	bl	800ebe2 <fs_bytes_left>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	dc05      	bgt.n	800ef7c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff ff5f 	bl	800ee36 <http_eof>
    return 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	e000      	b.n	800ef7e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ef7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
	...

0800ef88 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	4a1c      	ldr	r2, [pc, #112]	; (800f008 <http_get_404_file+0x80>)
 800ef96:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4610      	mov	r0, r2
 800efa2:	f7ff fdc3 	bl	800eb2c <fs_open>
 800efa6:	4603      	mov	r3, r0
 800efa8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800efaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d024      	beq.n	800effc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	4a15      	ldr	r2, [pc, #84]	; (800f00c <http_get_404_file+0x84>)
 800efb6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	4619      	mov	r1, r3
 800efc0:	4610      	mov	r0, r2
 800efc2:	f7ff fdb3 	bl	800eb2c <fs_open>
 800efc6:	4603      	mov	r3, r0
 800efc8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800efca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d014      	beq.n	800effc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	4a0e      	ldr	r2, [pc, #56]	; (800f010 <http_get_404_file+0x88>)
 800efd6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4619      	mov	r1, r3
 800efe0:	4610      	mov	r0, r2
 800efe2:	f7ff fda3 	bl	800eb2c <fs_open>
 800efe6:	4603      	mov	r3, r0
 800efe8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800efea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d004      	beq.n	800effc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	2200      	movs	r2, #0
 800eff6:	601a      	str	r2, [r3, #0]
        return NULL;
 800eff8:	2300      	movs	r3, #0
 800effa:	e000      	b.n	800effe <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800effc:	687b      	ldr	r3, [r7, #4]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	08025524 	.word	0x08025524
 800f00c:	08025530 	.word	0x08025530
 800f010:	0802553c 	.word	0x0802553c

0800f014 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800f01c:	4b08      	ldr	r3, [pc, #32]	; (800f040 <http_handle_post_finished+0x2c>)
 800f01e:	2200      	movs	r2, #0
 800f020:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800f022:	223f      	movs	r2, #63	; 0x3f
 800f024:	4906      	ldr	r1, [pc, #24]	; (800f040 <http_handle_post_finished+0x2c>)
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7f4 fbf2 	bl	8003810 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800f02c:	2200      	movs	r2, #0
 800f02e:	4904      	ldr	r1, [pc, #16]	; (800f040 <http_handle_post_finished+0x2c>)
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 fa51 	bl	800f4d8 <http_find_file>
 800f036:	4603      	mov	r3, r0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	20004eb0 	.word	0x20004eb0

0800f044 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d010      	beq.n	800f076 <http_post_rxpbuf+0x32>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	8912      	ldrh	r2, [r2, #8]
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d203      	bcs.n	800f068 <http_post_rxpbuf+0x24>
      hs->post_content_len_left = 0;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	62da      	str	r2, [r3, #44]	; 0x2c
 800f066:	e006      	b.n	800f076 <http_post_rxpbuf+0x32>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f06c:	683a      	ldr	r2, [r7, #0]
 800f06e:	8912      	ldrh	r2, [r2, #8]
 800f070:	1a9a      	subs	r2, r3, r2
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d006      	beq.n	800f08a <http_post_rxpbuf+0x46>
    err = httpd_post_receive_data(hs, p);
 800f07c:	6839      	ldr	r1, [r7, #0]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7f4 f8c6 	bl	8003210 <httpd_post_receive_data>
 800f084:	4603      	mov	r3, r0
 800f086:	73fb      	strb	r3, [r7, #15]
 800f088:	e001      	b.n	800f08e <http_post_rxpbuf+0x4a>
  } else {
    err = ERR_OK;
 800f08a:	2300      	movs	r3, #0
 800f08c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800f08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d002      	beq.n	800f09c <http_post_rxpbuf+0x58>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  if (hs->post_content_len_left == 0) {
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d104      	bne.n	800f0ae <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f7ff ffb5 	bl	800f014 <http_handle_post_finished>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	e000      	b.n	800f0b0 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800f0ae:	2300      	movs	r3, #0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3710      	adds	r7, #16
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b092      	sub	sp, #72	; 0x48
 800f0bc:	af04      	add	r7, sp, #16
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
 800f0c4:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800f0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0c8:	1c58      	adds	r0, r3, #1
 800f0ca:	887a      	ldrh	r2, [r7, #2]
 800f0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ce:	1c59      	adds	r1, r3, #1
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	1acb      	subs	r3, r1, r3
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	4964      	ldr	r1, [pc, #400]	; (800f26c <http_post_request+0x1b4>)
 800f0da:	f000 fd33 	bl	800fb44 <lwip_strnstr>
 800f0de:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800f0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f000 80bc 	beq.w	800f260 <http_post_request+0x1a8>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800f0e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ea:	1c58      	adds	r0, r3, #1
 800f0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	495e      	ldr	r1, [pc, #376]	; (800f270 <http_post_request+0x1b8>)
 800f0f8:	f000 fd24 	bl	800fb44 <lwip_strnstr>
 800f0fc:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f100:	2b00      	cmp	r3, #0
 800f102:	f000 80aa 	beq.w	800f25a <http_post_request+0x1a2>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f108:	3310      	adds	r3, #16
 800f10a:	220a      	movs	r2, #10
 800f10c:	4959      	ldr	r1, [pc, #356]	; (800f274 <http_post_request+0x1bc>)
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 fd18 	bl	800fb44 <lwip_strnstr>
 800f114:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 809e 	beq.w	800f25a <http_post_request+0x1a2>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f120:	3310      	adds	r3, #16
 800f122:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800f124:	69f8      	ldr	r0, [r7, #28]
 800f126:	f00c f827 	bl	801b178 <atoi>
 800f12a:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800f12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d10b      	bne.n	800f14a <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	2b30      	cmp	r3, #48	; 0x30
 800f138:	d104      	bne.n	800f144 <http_post_request+0x8c>
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	3301      	adds	r3, #1
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b0d      	cmp	r3, #13
 800f142:	d002      	beq.n	800f14a <http_post_request+0x92>
            content_len = -1;
 800f144:	f04f 33ff 	mov.w	r3, #4294967295
 800f148:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800f14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f2c0 8081 	blt.w	800f254 <http_post_request+0x19c>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800f152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f154:	3301      	adds	r3, #1
 800f156:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800f158:	887a      	ldrh	r2, [r7, #2]
 800f15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15c:	1d19      	adds	r1, r3, #4
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	1acb      	subs	r3, r1, r3
 800f162:	429a      	cmp	r2, r3
 800f164:	db05      	blt.n	800f172 <http_post_request+0xba>
 800f166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f168:	1d1a      	adds	r2, r3, #4
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	1ad3      	subs	r3, r2, r3
 800f16e:	b29b      	uxth	r3, r3
 800f170:	e000      	b.n	800f174 <http_post_request+0xbc>
 800f172:	887b      	ldrh	r3, [r7, #2]
 800f174:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800f176:	887a      	ldrh	r2, [r7, #2]
 800f178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17a:	1d19      	adds	r1, r3, #4
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	1acb      	subs	r3, r1, r3
 800f180:	429a      	cmp	r2, r3
 800f182:	db05      	blt.n	800f190 <http_post_request+0xd8>
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	1d1a      	adds	r2, r3, #4
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	1ad3      	subs	r3, r2, r3
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	e000      	b.n	800f192 <http_post_request+0xda>
 800f190:	887b      	ldrh	r3, [r7, #2]
 800f192:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800f194:	2301      	movs	r3, #1
 800f196:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800f198:	4b37      	ldr	r3, [pc, #220]	; (800f278 <http_post_request+0x1c0>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800f1a4:	8aba      	ldrh	r2, [r7, #20]
 800f1a6:	f107 0312 	add.w	r3, r7, #18
 800f1aa:	9303      	str	r3, [sp, #12]
 800f1ac:	233f      	movs	r3, #63	; 0x3f
 800f1ae:	9302      	str	r3, [sp, #8]
 800f1b0:	4b31      	ldr	r3, [pc, #196]	; (800f278 <http_post_request+0x1c0>)
 800f1b2:	9301      	str	r3, [sp, #4]
 800f1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	69ba      	ldr	r2, [r7, #24]
 800f1bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1be:	68b8      	ldr	r0, [r7, #8]
 800f1c0:	f7f3 ffe8 	bl	8003194 <httpd_post_begin>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800f1c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d13a      	bne.n	800f246 <http_post_request+0x18e>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800f1d4:	8afb      	ldrh	r3, [r7, #22]
 800f1d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800f1d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800f1de:	e007      	b.n	800f1f0 <http_post_request+0x138>
              start_offset -= q->len;
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e2:	895b      	ldrh	r3, [r3, #10]
 800f1e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d004      	beq.n	800f200 <http_post_request+0x148>
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f8:	895b      	ldrh	r3, [r3, #10]
 800f1fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d2ef      	bcs.n	800f1e0 <http_post_request+0x128>
            }
            if (q != NULL) {
 800f200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00d      	beq.n	800f222 <http_post_request+0x16a>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800f206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f208:	4619      	mov	r1, r3
 800f20a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f20c:	f001 ffa2 	bl	8011154 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800f210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f212:	f002 f8cb 	bl	80113ac <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800f216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f218:	68b8      	ldr	r0, [r7, #8]
 800f21a:	f7ff ff13 	bl	800f044 <http_post_rxpbuf>
 800f21e:	4603      	mov	r3, r0
 800f220:	e020      	b.n	800f264 <http_post_request+0x1ac>
            } else if (hs->post_content_len_left == 0) {
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f226:	2b00      	cmp	r3, #0
 800f228:	d10b      	bne.n	800f242 <http_post_request+0x18a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800f22a:	2241      	movs	r2, #65	; 0x41
 800f22c:	2100      	movs	r1, #0
 800f22e:	2000      	movs	r0, #0
 800f230:	f001 fd32 	bl	8010c98 <pbuf_alloc>
 800f234:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800f236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f238:	68b8      	ldr	r0, [r7, #8]
 800f23a:	f7ff ff03 	bl	800f044 <http_post_rxpbuf>
 800f23e:	4603      	mov	r3, r0
 800f240:	e010      	b.n	800f264 <http_post_request+0x1ac>
            } else {
              return ERR_OK;
 800f242:	2300      	movs	r3, #0
 800f244:	e00e      	b.n	800f264 <http_post_request+0x1ac>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800f246:	2200      	movs	r2, #0
 800f248:	490b      	ldr	r1, [pc, #44]	; (800f278 <http_post_request+0x1c0>)
 800f24a:	68b8      	ldr	r0, [r7, #8]
 800f24c:	f000 f944 	bl	800f4d8 <http_find_file>
 800f250:	4603      	mov	r3, r0
 800f252:	e007      	b.n	800f264 <http_post_request+0x1ac>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800f254:	f06f 030f 	mvn.w	r3, #15
 800f258:	e004      	b.n	800f264 <http_post_request+0x1ac>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800f25a:	f06f 030f 	mvn.w	r3, #15
 800f25e:	e001      	b.n	800f264 <http_post_request+0x1ac>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800f260:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800f264:	4618      	mov	r0, r3
 800f266:	3738      	adds	r7, #56	; 0x38
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	08025548 	.word	0x08025548
 800f270:	08025550 	.word	0x08025550
 800f274:	08025564 	.word	0x08025564
 800f278:	20004eb0 	.word	0x20004eb0

0800f27c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b092      	sub	sp, #72	; 0x48
 800f280:	af02      	add	r7, sp, #8
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d106      	bne.n	800f2a0 <http_parse_request+0x24>
 800f292:	4b87      	ldr	r3, [pc, #540]	; (800f4b0 <http_parse_request+0x234>)
 800f294:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800f298:	4986      	ldr	r1, [pc, #536]	; (800f4b4 <http_parse_request+0x238>)
 800f29a:	4887      	ldr	r0, [pc, #540]	; (800f4b8 <http_parse_request+0x23c>)
 800f29c:	f00c fb46 	bl	801b92c <printf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d106      	bne.n	800f2b4 <http_parse_request+0x38>
 800f2a6:	4b82      	ldr	r3, [pc, #520]	; (800f4b0 <http_parse_request+0x234>)
 800f2a8:	f240 72af 	movw	r2, #1967	; 0x7af
 800f2ac:	4983      	ldr	r1, [pc, #524]	; (800f4bc <http_parse_request+0x240>)
 800f2ae:	4882      	ldr	r0, [pc, #520]	; (800f4b8 <http_parse_request+0x23c>)
 800f2b0:	f00c fb3c 	bl	801b92c <printf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	695b      	ldr	r3, [r3, #20]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d103      	bne.n	800f2c4 <http_parse_request+0x48>
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	699b      	ldr	r3, [r3, #24]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800f2c4:	f06f 0307 	mvn.w	r3, #7
 800f2c8:	e0ed      	b.n	800f4a6 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	6a1b      	ldr	r3, [r3, #32]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d103      	bne.n	800f2da <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2d6:	621a      	str	r2, [r3, #32]
 800f2d8:	e005      	b.n	800f2e6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	6a1b      	ldr	r3, [r3, #32]
 800f2de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f002 f88b 	bl	80113fc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800f2e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e8:	f002 f860 	bl	80113ac <pbuf_ref>

  if (hs->req->next != NULL) {
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	6a1b      	ldr	r3, [r3, #32]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d012      	beq.n	800f31c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	6a1b      	ldr	r3, [r3, #32]
 800f2fa:	891b      	ldrh	r3, [r3, #8]
 800f2fc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f300:	4293      	cmp	r3, r2
 800f302:	bf28      	it	cs
 800f304:	4613      	movcs	r3, r2
 800f306:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	6a18      	ldr	r0, [r3, #32]
 800f30c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f30e:	2300      	movs	r3, #0
 800f310:	496b      	ldr	r1, [pc, #428]	; (800f4c0 <http_parse_request+0x244>)
 800f312:	f002 f9ab 	bl	801166c <pbuf_copy_partial>
    data = httpd_req_buf;
 800f316:	4b6a      	ldr	r3, [pc, #424]	; (800f4c0 <http_parse_request+0x244>)
 800f318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f31a:	e005      	b.n	800f328 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800f31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	895b      	ldrh	r3, [r3, #10]
 800f326:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800f328:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f32a:	2b06      	cmp	r3, #6
 800f32c:	f240 80a1 	bls.w	800f472 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800f330:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f332:	461a      	mov	r2, r3
 800f334:	4963      	ldr	r1, [pc, #396]	; (800f4c4 <http_parse_request+0x248>)
 800f336:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f338:	f000 fc04 	bl	800fb44 <lwip_strnstr>
 800f33c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800f33e:	6a3b      	ldr	r3, [r7, #32]
 800f340:	2b00      	cmp	r3, #0
 800f342:	f000 8096 	beq.w	800f472 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800f346:	2300      	movs	r3, #0
 800f348:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800f34a:	2300      	movs	r3, #0
 800f34c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800f34e:	2204      	movs	r2, #4
 800f350:	495d      	ldr	r1, [pc, #372]	; (800f4c8 <http_parse_request+0x24c>)
 800f352:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f354:	f00c fb7b 	bl	801ba4e <strncmp>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d103      	bne.n	800f366 <http_parse_request+0xea>
        sp1 = data + 3;
 800f35e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f360:	3303      	adds	r3, #3
 800f362:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f364:	e014      	b.n	800f390 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800f366:	2205      	movs	r2, #5
 800f368:	4958      	ldr	r1, [pc, #352]	; (800f4cc <http_parse_request+0x250>)
 800f36a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f36c:	f00c fb6f 	bl	801ba4e <strncmp>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d105      	bne.n	800f382 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800f376:	2301      	movs	r3, #1
 800f378:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800f37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37c:	3304      	adds	r3, #4
 800f37e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f380:	e006      	b.n	800f390 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800f382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f384:	3304      	adds	r3, #4
 800f386:	2200      	movs	r2, #0
 800f388:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800f38a:	f06f 030f 	mvn.w	r3, #15
 800f38e:	e08a      	b.n	800f4a6 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800f390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f392:	1c5a      	adds	r2, r3, #1
 800f394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	b29b      	uxth	r3, r3
 800f39a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f39c:	1ad3      	subs	r3, r2, r3
 800f39e:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800f3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	8bfa      	ldrh	r2, [r7, #30]
 800f3a6:	494a      	ldr	r1, [pc, #296]	; (800f4d0 <http_parse_request+0x254>)
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 fbcb 	bl	800fb44 <lwip_strnstr>
 800f3ae:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d10c      	bne.n	800f3d0 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800f3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	8bfa      	ldrh	r2, [r7, #30]
 800f3bc:	4941      	ldr	r1, [pc, #260]	; (800f4c4 <http_parse_request+0x248>)
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fbc0 	bl	800fb44 <lwip_strnstr>
 800f3c4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800f3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d163      	bne.n	800f498 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800f3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d048      	beq.n	800f472 <http_parse_request+0x1f6>
 800f3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d944      	bls.n	800f472 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800f3e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	4939      	ldr	r1, [pc, #228]	; (800f4d4 <http_parse_request+0x258>)
 800f3ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f3f0:	f000 fba8 	bl	800fb44 <lwip_strnstr>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d03b      	beq.n	800f472 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800f400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f402:	2200      	movs	r2, #0
 800f404:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800f406:	8bbb      	ldrh	r3, [r7, #28]
 800f408:	69ba      	ldr	r2, [r7, #24]
 800f40a:	4413      	add	r3, r2
 800f40c:	2200      	movs	r2, #0
 800f40e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800f410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f412:	2b00      	cmp	r3, #0
 800f414:	d026      	beq.n	800f464 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	6a1b      	ldr	r3, [r3, #32]
 800f41a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800f41c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f420:	9301      	str	r3, [sp, #4]
 800f422:	69bb      	ldr	r3, [r7, #24]
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	4613      	mov	r3, r2
 800f428:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f42a:	68b9      	ldr	r1, [r7, #8]
 800f42c:	6978      	ldr	r0, [r7, #20]
 800f42e:	f7ff fe43 	bl	800f0b8 <http_post_request>
 800f432:	4603      	mov	r3, r0
 800f434:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800f436:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00a      	beq.n	800f454 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800f43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f440:	2220      	movs	r2, #32
 800f442:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800f444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f446:	2220      	movs	r2, #32
 800f448:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800f44a:	8bbb      	ldrh	r3, [r7, #28]
 800f44c:	69ba      	ldr	r2, [r7, #24]
 800f44e:	4413      	add	r3, r2
 800f450:	2220      	movs	r2, #32
 800f452:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800f454:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f458:	f113 0f10 	cmn.w	r3, #16
 800f45c:	d01e      	beq.n	800f49c <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800f45e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f462:	e020      	b.n	800f4a6 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800f464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f466:	69b9      	ldr	r1, [r7, #24]
 800f468:	68b8      	ldr	r0, [r7, #8]
 800f46a:	f000 f835 	bl	800f4d8 <http_find_file>
 800f46e:	4603      	mov	r3, r0
 800f470:	e019      	b.n	800f4a6 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	6a1b      	ldr	r3, [r3, #32]
 800f476:	4618      	mov	r0, r3
 800f478:	f001 ff80 	bl	801137c <pbuf_clen>
 800f47c:	4603      	mov	r3, r0
 800f47e:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	6a1b      	ldr	r3, [r3, #32]
 800f484:	891b      	ldrh	r3, [r3, #8]
 800f486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f48a:	d209      	bcs.n	800f4a0 <http_parse_request+0x224>
 800f48c:	8a3b      	ldrh	r3, [r7, #16]
 800f48e:	2b05      	cmp	r3, #5
 800f490:	d806      	bhi.n	800f4a0 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800f492:	f06f 0304 	mvn.w	r3, #4
 800f496:	e006      	b.n	800f4a6 <http_parse_request+0x22a>
          goto badrequest;
 800f498:	bf00      	nop
 800f49a:	e002      	b.n	800f4a2 <http_parse_request+0x226>
              goto badrequest;
 800f49c:	bf00      	nop
 800f49e:	e000      	b.n	800f4a2 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800f4a0:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800f4a2:	f06f 030f 	mvn.w	r3, #15
  }
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3740      	adds	r7, #64	; 0x40
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	0802547c 	.word	0x0802547c
 800f4b4:	08025568 	.word	0x08025568
 800f4b8:	080254c4 	.word	0x080254c4
 800f4bc:	08025574 	.word	0x08025574
 800f4c0:	20004ab0 	.word	0x20004ab0
 800f4c4:	08025564 	.word	0x08025564
 800f4c8:	08025580 	.word	0x08025580
 800f4cc:	08025588 	.word	0x08025588
 800f4d0:	08025590 	.word	0x08025590
 800f4d4:	08025548 	.word	0x08025548

0800f4d8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b092      	sub	sp, #72	; 0x48
 800f4dc:	af02      	add	r7, sp, #8
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7f0 fe95 	bl	8000224 <strlen>
 800f4fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d06b      	beq.n	800f5da <http_find_file+0x102>
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f506:	3b01      	subs	r3, #1
 800f508:	4413      	add	r3, r2
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b2f      	cmp	r3, #47	; 0x2f
 800f50e:	d164      	bne.n	800f5da <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f510:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f512:	4a53      	ldr	r2, [pc, #332]	; (800f660 <http_find_file+0x188>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d102      	bne.n	800f51e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d15d      	bne.n	800f5da <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f520:	3b01      	subs	r3, #1
 800f522:	2b3f      	cmp	r3, #63	; 0x3f
 800f524:	bf28      	it	cs
 800f526:	233f      	movcs	r3, #63	; 0x3f
 800f528:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00a      	beq.n	800f546 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f534:	4619      	mov	r1, r3
 800f536:	484a      	ldr	r0, [pc, #296]	; (800f660 <http_find_file+0x188>)
 800f538:	f00b ff4a 	bl	801b3d0 <memcpy>
      http_uri_buf[copy_len] = 0;
 800f53c:	4a48      	ldr	r2, [pc, #288]	; (800f660 <http_find_file+0x188>)
 800f53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f540:	4413      	add	r3, r2
 800f542:	2200      	movs	r2, #0
 800f544:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f546:	2300      	movs	r3, #0
 800f548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f54a:	e043      	b.n	800f5d4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800f54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d028      	beq.n	800f5a4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f554:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800f558:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800f55a:	6a3b      	ldr	r3, [r7, #32]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d01e      	beq.n	800f59e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800f560:	4a40      	ldr	r2, [pc, #256]	; (800f664 <http_find_file+0x18c>)
 800f562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f564:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f568:	4618      	mov	r0, r3
 800f56a:	f7f0 fe5b 	bl	8000224 <strlen>
 800f56e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800f570:	69fa      	ldr	r2, [r7, #28]
 800f572:	6a3b      	ldr	r3, [r7, #32]
 800f574:	4293      	cmp	r3, r2
 800f576:	bf28      	it	cs
 800f578:	4613      	movcs	r3, r2
 800f57a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800f57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57e:	4a38      	ldr	r2, [pc, #224]	; (800f660 <http_find_file+0x188>)
 800f580:	1898      	adds	r0, r3, r2
 800f582:	4a38      	ldr	r2, [pc, #224]	; (800f664 <http_find_file+0x18c>)
 800f584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f586:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f58a:	69ba      	ldr	r2, [r7, #24]
 800f58c:	4619      	mov	r1, r3
 800f58e:	f00b ff1f 	bl	801b3d0 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800f592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	4413      	add	r3, r2
 800f598:	4a31      	ldr	r2, [pc, #196]	; (800f660 <http_find_file+0x188>)
 800f59a:	2100      	movs	r1, #0
 800f59c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800f59e:	4b30      	ldr	r3, [pc, #192]	; (800f660 <http_find_file+0x188>)
 800f5a0:	633b      	str	r3, [r7, #48]	; 0x30
 800f5a2:	e004      	b.n	800f5ae <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800f5a4:	4a2f      	ldr	r2, [pc, #188]	; (800f664 <http_find_file+0x18c>)
 800f5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f5ac:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7ff faba 	bl	800eb2c <fs_open>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800f5bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d104      	bne.n	800f5ce <http_find_file+0xf6>
        uri = file_name;
 800f5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800f5cc:	e005      	b.n	800f5da <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d6:	2b04      	cmp	r3, #4
 800f5d8:	d9b8      	bls.n	800f54c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800f5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d124      	bne.n	800f62a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	213f      	movs	r1, #63	; 0x3f
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f00c fa25 	bl	801ba34 <strchr>
 800f5ea:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800f5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d005      	beq.n	800f5fe <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800f5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	701a      	strb	r2, [r3, #0]
      params++;
 800f5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	68ba      	ldr	r2, [r7, #8]
 800f602:	4611      	mov	r1, r2
 800f604:	4618      	mov	r0, r3
 800f606:	f7ff fa91 	bl	800eb2c <fs_open>
 800f60a:	4603      	mov	r3, r0
 800f60c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800f60e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d102      	bne.n	800f61c <http_find_file+0x144>
      file = &hs->file_handle;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	63bb      	str	r3, [r7, #56]	; 0x38
 800f61a:	e006      	b.n	800f62a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800f61c:	f107 0308 	add.w	r3, r7, #8
 800f620:	4619      	mov	r1, r3
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f7ff fcb0 	bl	800ef88 <http_get_404_file>
 800f628:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800f62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d106      	bne.n	800f63e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800f630:	f107 0308 	add.w	r3, r7, #8
 800f634:	4619      	mov	r1, r3
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7ff fca6 	bl	800ef88 <http_get_404_file>
 800f63c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800f63e:	68ba      	ldr	r2, [r7, #8]
 800f640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f642:	9301      	str	r3, [sp, #4]
 800f644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	4613      	mov	r3, r2
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f000 f809 	bl	800f668 <http_init_file>
 800f656:	4603      	mov	r3, r0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3740      	adds	r7, #64	; 0x40
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	20004eb0 	.word	0x20004eb0
 800f664:	08028f5c 	.word	0x08028f5c

0800f668 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d068      	beq.n	800f74e <http_init_file+0xe6>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d106      	bne.n	800f692 <http_init_file+0x2a>
 800f684:	4b3b      	ldr	r3, [pc, #236]	; (800f774 <http_init_file+0x10c>)
 800f686:	f640 120b 	movw	r2, #2315	; 0x90b
 800f68a:	493b      	ldr	r1, [pc, #236]	; (800f778 <http_init_file+0x110>)
 800f68c:	483b      	ldr	r0, [pc, #236]	; (800f77c <http_init_file+0x114>)
 800f68e:	f00c f94d 	bl	801b92c <printf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	68ba      	ldr	r2, [r7, #8]
 800f696:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	da06      	bge.n	800f6b6 <http_init_file+0x4e>
 800f6a8:	4b32      	ldr	r3, [pc, #200]	; (800f774 <http_init_file+0x10c>)
 800f6aa:	f640 1234 	movw	r2, #2356	; 0x934
 800f6ae:	4934      	ldr	r1, [pc, #208]	; (800f780 <http_init_file+0x118>)
 800f6b0:	4832      	ldr	r0, [pc, #200]	; (800f77c <http_init_file+0x114>)
 800f6b2:	f00c f93b 	bl	801b92c <printf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	7c5b      	ldrb	r3, [r3, #17]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d007      	beq.n	800f6ce <http_init_file+0x66>
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d103      	bne.n	800f6ce <http_init_file+0x66>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	625a      	str	r2, [r3, #36]	; 0x24
 800f6cc:	e004      	b.n	800f6d8 <http_init_file+0x70>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	695b      	ldr	r3, [r3, #20]
 800f6e4:	7c1b      	ldrb	r3, [r3, #16]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d106      	bne.n	800f6fc <http_init_file+0x94>
 800f6ee:	4b21      	ldr	r3, [pc, #132]	; (800f774 <http_init_file+0x10c>)
 800f6f0:	f640 1243 	movw	r2, #2371	; 0x943
 800f6f4:	4923      	ldr	r1, [pc, #140]	; (800f784 <http_init_file+0x11c>)
 800f6f6:	4821      	ldr	r0, [pc, #132]	; (800f77c <http_init_file+0x114>)
 800f6f8:	f00c f918 	bl	801b92c <printf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d032      	beq.n	800f768 <http_init_file+0x100>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	695b      	ldr	r3, [r3, #20]
 800f706:	7c1b      	ldrb	r3, [r3, #16]
 800f708:	f003 0301 	and.w	r3, r3, #1
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d02b      	beq.n	800f768 <http_init_file+0x100>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6998      	ldr	r0, [r3, #24]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f718:	461a      	mov	r2, r3
 800f71a:	491b      	ldr	r1, [pc, #108]	; (800f788 <http_init_file+0x120>)
 800f71c:	f000 fa12 	bl	800fb44 <lwip_strnstr>
 800f720:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d01f      	beq.n	800f768 <http_init_file+0x100>
        int diff = file_start + 4 - hs->file;
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	1d1a      	adds	r2, r3, #4
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	699b      	ldr	r3, [r3, #24]
 800f730:	1ad3      	subs	r3, r2, r3
 800f732:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	699a      	ldr	r2, [r3, #24]
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	441a      	add	r2, r3
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	1ad2      	subs	r2, r2, r3
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	625a      	str	r2, [r3, #36]	; 0x24
 800f74c:	e00c      	b.n	800f768 <http_init_file+0x100>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2200      	movs	r2, #0
 800f752:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2200      	movs	r2, #0
 800f758:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2200      	movs	r2, #0
 800f75e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2200      	movs	r2, #0
 800f764:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3718      	adds	r7, #24
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	0802547c 	.word	0x0802547c
 800f778:	08025594 	.word	0x08025594
 800f77c:	080254c4 	.word	0x080254c4
 800f780:	080255a8 	.word	0x080255a8
 800f784:	080255c8 	.word	0x080255c8
 800f788:	08025548 	.word	0x08025548

0800f78c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	460b      	mov	r3, r1
 800f796:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d002      	beq.n	800f7a8 <http_err+0x1c>
    http_state_free(hs);
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f7ff fa6b 	bl	800ec7e <http_state_free>
  }
}
 800f7a8:	bf00      	nop
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d101      	bne.n	800f7cc <http_sent+0x1c>
    return ERR_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	e008      	b.n	800f7de <http_sent+0x2e>
  }

  hs->retries = 0;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800f7d4:	6979      	ldr	r1, [r7, #20]
 800f7d6:	68b8      	ldr	r0, [r7, #8]
 800f7d8:	f7ff fb9f 	bl	800ef1a <http_send>

  return ERR_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d107      	bne.n	800f80a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	6838      	ldr	r0, [r7, #0]
 800f7fe:	f7ff fb0b 	bl	800ee18 <http_close_conn>
 800f802:	4603      	mov	r3, r0
 800f804:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800f806:	2300      	movs	r3, #0
 800f808:	e021      	b.n	800f84e <http_poll+0x68>
  } else {
    hs->retries++;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f810:	3301      	adds	r3, #1
 800f812:	b2da      	uxtb	r2, r3
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f820:	2b04      	cmp	r3, #4
 800f822:	d105      	bne.n	800f830 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800f824:	68f9      	ldr	r1, [r7, #12]
 800f826:	6838      	ldr	r0, [r7, #0]
 800f828:	f7ff faf6 	bl	800ee18 <http_close_conn>
      return ERR_OK;
 800f82c:	2300      	movs	r3, #0
 800f82e:	e00e      	b.n	800f84e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	695b      	ldr	r3, [r3, #20]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d009      	beq.n	800f84c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800f838:	68f9      	ldr	r1, [r7, #12]
 800f83a:	6838      	ldr	r0, [r7, #0]
 800f83c:	f7ff fb6d 	bl	800ef1a <http_send>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d002      	beq.n	800f84c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800f846:	6838      	ldr	r0, [r7, #0]
 800f848:	f007 f8f0 	bl	8016a2c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3710      	adds	r7, #16
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
	...

0800f858 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
 800f864:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800f86a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d105      	bne.n	800f87e <http_recv+0x26>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d002      	beq.n	800f87e <http_recv+0x26>
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d111      	bne.n	800f8a2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d008      	beq.n	800f896 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	891b      	ldrh	r3, [r3, #8]
 800f888:	4619      	mov	r1, r3
 800f88a:	68b8      	ldr	r0, [r7, #8]
 800f88c:	f002 fcc2 	bl	8012214 <tcp_recved>
      pbuf_free(p);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f001 fce5 	bl	8011260 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800f896:	6979      	ldr	r1, [r7, #20]
 800f898:	68b8      	ldr	r0, [r7, #8]
 800f89a:	f7ff fabd 	bl	800ee18 <http_close_conn>
    return ERR_OK;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	e06f      	b.n	800f982 <http_recv+0x12a>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	891b      	ldrh	r3, [r3, #8]
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	68b8      	ldr	r0, [r7, #8]
 800f8aa:	f002 fcb3 	bl	8012214 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d011      	beq.n	800f8da <http_recv+0x82>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	6978      	ldr	r0, [r7, #20]
 800f8c2:	f7ff fbbf 	bl	800f044 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d103      	bne.n	800f8d6 <http_recv+0x7e>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800f8ce:	6979      	ldr	r1, [r7, #20]
 800f8d0:	68b8      	ldr	r0, [r7, #8]
 800f8d2:	f7ff fb22 	bl	800ef1a <http_send>
    }
    return ERR_OK;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	e053      	b.n	800f982 <http_recv+0x12a>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	695b      	ldr	r3, [r3, #20]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d14b      	bne.n	800f97a <http_recv+0x122>
      err_t parsed = http_parse_request(p, hs, pcb);
 800f8e2:	68ba      	ldr	r2, [r7, #8]
 800f8e4:	6979      	ldr	r1, [r7, #20]
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f7ff fcc8 	bl	800f27c <http_parse_request>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800f8f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d015      	beq.n	800f924 <http_recv+0xcc>
 800f8f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8fc:	f113 0f05 	cmn.w	r3, #5
 800f900:	d010      	beq.n	800f924 <http_recv+0xcc>
 800f902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f906:	f113 0f10 	cmn.w	r3, #16
 800f90a:	d00b      	beq.n	800f924 <http_recv+0xcc>
 800f90c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f910:	f113 0f08 	cmn.w	r3, #8
 800f914:	d006      	beq.n	800f924 <http_recv+0xcc>
 800f916:	4b1d      	ldr	r3, [pc, #116]	; (800f98c <http_recv+0x134>)
 800f918:	f640 2204 	movw	r2, #2564	; 0xa04
 800f91c:	491c      	ldr	r1, [pc, #112]	; (800f990 <http_recv+0x138>)
 800f91e:	481d      	ldr	r0, [pc, #116]	; (800f994 <http_recv+0x13c>)
 800f920:	f00c f804 	bl	801b92c <printf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800f924:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f928:	f113 0f05 	cmn.w	r3, #5
 800f92c:	d00b      	beq.n	800f946 <http_recv+0xee>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d007      	beq.n	800f946 <http_recv+0xee>
          pbuf_free(hs->req);
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f001 fc90 	bl	8011260 <pbuf_free>
          hs->req = NULL;
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	2200      	movs	r2, #0
 800f944:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f001 fc8a 	bl	8011260 <pbuf_free>
      if (parsed == ERR_OK) {
 800f94c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d108      	bne.n	800f966 <http_recv+0x10e>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d111      	bne.n	800f980 <http_recv+0x128>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800f95c:	6979      	ldr	r1, [r7, #20]
 800f95e:	68b8      	ldr	r0, [r7, #8]
 800f960:	f7ff fadb 	bl	800ef1a <http_send>
 800f964:	e00c      	b.n	800f980 <http_recv+0x128>
        }
      } else if (parsed == ERR_ARG) {
 800f966:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f96a:	f113 0f10 	cmn.w	r3, #16
 800f96e:	d107      	bne.n	800f980 <http_recv+0x128>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800f970:	6979      	ldr	r1, [r7, #20]
 800f972:	68b8      	ldr	r0, [r7, #8]
 800f974:	f7ff fa50 	bl	800ee18 <http_close_conn>
 800f978:	e002      	b.n	800f980 <http_recv+0x128>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f001 fc70 	bl	8011260 <pbuf_free>
    }
  }
  return ERR_OK;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	0802547c 	.word	0x0802547c
 800f990:	080255f4 	.word	0x080255f4
 800f994:	080254c4 	.word	0x080254c4

0800f998 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b086      	sub	sp, #24
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800f9a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d102      	bne.n	800f9b4 <http_accept+0x1c>
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d102      	bne.n	800f9ba <http_accept+0x22>
    return ERR_VAL;
 800f9b4:	f06f 0305 	mvn.w	r3, #5
 800f9b8:	e025      	b.n	800fa06 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f9ba:	2101      	movs	r1, #1
 800f9bc:	68b8      	ldr	r0, [r7, #8]
 800f9be:	f003 f90d 	bl	8012bdc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800f9c2:	f7ff f92a 	bl	800ec1a <http_state_alloc>
 800f9c6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d102      	bne.n	800f9d4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800f9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d2:	e018      	b.n	800fa06 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800f9da:	6979      	ldr	r1, [r7, #20]
 800f9dc:	68b8      	ldr	r0, [r7, #8]
 800f9de:	f003 fafd 	bl	8012fdc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800f9e2:	490b      	ldr	r1, [pc, #44]	; (800fa10 <http_accept+0x78>)
 800f9e4:	68b8      	ldr	r0, [r7, #8]
 800f9e6:	f003 fb0b 	bl	8013000 <tcp_recv>
  altcp_err(pcb, http_err);
 800f9ea:	490a      	ldr	r1, [pc, #40]	; (800fa14 <http_accept+0x7c>)
 800f9ec:	68b8      	ldr	r0, [r7, #8]
 800f9ee:	f003 fb4b 	bl	8013088 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800f9f2:	2204      	movs	r2, #4
 800f9f4:	4908      	ldr	r1, [pc, #32]	; (800fa18 <http_accept+0x80>)
 800f9f6:	68b8      	ldr	r0, [r7, #8]
 800f9f8:	f003 fb80 	bl	80130fc <tcp_poll>
  altcp_sent(pcb, http_sent);
 800f9fc:	4907      	ldr	r1, [pc, #28]	; (800fa1c <http_accept+0x84>)
 800f9fe:	68b8      	ldr	r0, [r7, #8]
 800fa00:	f003 fb20 	bl	8013044 <tcp_sent>

  return ERR_OK;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3718      	adds	r7, #24
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	0800f859 	.word	0x0800f859
 800fa14:	0800f78d 	.word	0x0800f78d
 800fa18:	0800f7e7 	.word	0x0800f7e7
 800fa1c:	0800f7b1 	.word	0x0800f7b1

0800fa20 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d029      	beq.n	800fa86 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800fa32:	2101      	movs	r1, #1
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f003 f8d1 	bl	8012bdc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800fa3a:	887b      	ldrh	r3, [r7, #2]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	4914      	ldr	r1, [pc, #80]	; (800fa90 <httpd_init_pcb+0x70>)
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f002 fa19 	bl	8011e78 <tcp_bind>
 800fa46:	4603      	mov	r3, r0
 800fa48:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800fa4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d006      	beq.n	800fa60 <httpd_init_pcb+0x40>
 800fa52:	4b10      	ldr	r3, [pc, #64]	; (800fa94 <httpd_init_pcb+0x74>)
 800fa54:	f640 2257 	movw	r2, #2647	; 0xa57
 800fa58:	490f      	ldr	r1, [pc, #60]	; (800fa98 <httpd_init_pcb+0x78>)
 800fa5a:	4810      	ldr	r0, [pc, #64]	; (800fa9c <httpd_init_pcb+0x7c>)
 800fa5c:	f00b ff66 	bl	801b92c <printf>
    pcb = altcp_listen(pcb);
 800fa60:	21ff      	movs	r1, #255	; 0xff
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f002 fac0 	bl	8011fe8 <tcp_listen_with_backlog>
 800fa68:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d106      	bne.n	800fa7e <httpd_init_pcb+0x5e>
 800fa70:	4b08      	ldr	r3, [pc, #32]	; (800fa94 <httpd_init_pcb+0x74>)
 800fa72:	f640 2259 	movw	r2, #2649	; 0xa59
 800fa76:	490a      	ldr	r1, [pc, #40]	; (800faa0 <httpd_init_pcb+0x80>)
 800fa78:	4808      	ldr	r0, [pc, #32]	; (800fa9c <httpd_init_pcb+0x7c>)
 800fa7a:	f00b ff57 	bl	801b92c <printf>
    altcp_accept(pcb, http_accept);
 800fa7e:	4909      	ldr	r1, [pc, #36]	; (800faa4 <httpd_init_pcb+0x84>)
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f003 fb23 	bl	80130cc <tcp_accept>
  }
}
 800fa86:	bf00      	nop
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	08029094 	.word	0x08029094
 800fa94:	0802547c 	.word	0x0802547c
 800fa98:	08025620 	.word	0x08025620
 800fa9c:	080254c4 	.word	0x080254c4
 800faa0:	0802563c 	.word	0x0802563c
 800faa4:	0800f999 	.word	0x0800f999

0800faa8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800faae:	202e      	movs	r0, #46	; 0x2e
 800fab0:	f003 fa86 	bl	8012fc0 <tcp_new_ip_type>
 800fab4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d106      	bne.n	800faca <httpd_init+0x22>
 800fabc:	4b07      	ldr	r3, [pc, #28]	; (800fadc <httpd_init+0x34>)
 800fabe:	f640 2272 	movw	r2, #2674	; 0xa72
 800fac2:	4907      	ldr	r1, [pc, #28]	; (800fae0 <httpd_init+0x38>)
 800fac4:	4807      	ldr	r0, [pc, #28]	; (800fae4 <httpd_init+0x3c>)
 800fac6:	f00b ff31 	bl	801b92c <printf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800faca:	2150      	movs	r1, #80	; 0x50
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f7ff ffa7 	bl	800fa20 <httpd_init_pcb>
}
 800fad2:	bf00      	nop
 800fad4:	3708      	adds	r7, #8
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	0802547c 	.word	0x0802547c
 800fae0:	0802565c 	.word	0x0802565c
 800fae4:	080254c4 	.word	0x080254c4

0800fae8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	4603      	mov	r3, r0
 800faf0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800faf2:	88fb      	ldrh	r3, [r7, #6]
 800faf4:	021b      	lsls	r3, r3, #8
 800faf6:	b21a      	sxth	r2, r3
 800faf8:	88fb      	ldrh	r3, [r7, #6]
 800fafa:	0a1b      	lsrs	r3, r3, #8
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	b21b      	sxth	r3, r3
 800fb00:	4313      	orrs	r3, r2
 800fb02:	b21b      	sxth	r3, r3
 800fb04:	b29b      	uxth	r3, r3
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b083      	sub	sp, #12
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	061a      	lsls	r2, r3, #24
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	021b      	lsls	r3, r3, #8
 800fb22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fb26:	431a      	orrs	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	0a1b      	lsrs	r3, r3, #8
 800fb2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fb30:	431a      	orrs	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	0e1b      	lsrs	r3, r3, #24
 800fb36:	4313      	orrs	r3, r2
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	60b9      	str	r1, [r7, #8]
 800fb4e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800fb50:	68b8      	ldr	r0, [r7, #8]
 800fb52:	f7f0 fb67 	bl	8000224 <strlen>
 800fb56:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d101      	bne.n	800fb62 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	e022      	b.n	800fba8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	617b      	str	r3, [r7, #20]
 800fb66:	e012      	b.n	800fb8e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	781a      	ldrb	r2, [r3, #0]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d109      	bne.n	800fb88 <lwip_strnstr+0x44>
 800fb74:	693a      	ldr	r2, [r7, #16]
 800fb76:	68b9      	ldr	r1, [r7, #8]
 800fb78:	6978      	ldr	r0, [r7, #20]
 800fb7a:	f00b ff68 	bl	801ba4e <strncmp>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d101      	bne.n	800fb88 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	e00f      	b.n	800fba8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	617b      	str	r3, [r7, #20]
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d007      	beq.n	800fba6 <lwip_strnstr+0x62>
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	441a      	add	r2, r3
 800fb9c:	68f9      	ldr	r1, [r7, #12]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	440b      	add	r3, r1
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d9e0      	bls.n	800fb68 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800fba6:	2300      	movs	r3, #0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fbba:	f00b fa53 	bl	801b064 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fbbe:	f000 f8d5 	bl	800fd6c <mem_init>
  memp_init();
 800fbc2:	f000 fc31 	bl	8010428 <memp_init>
  pbuf_init();
  netif_init();
 800fbc6:	f000 fcf7 	bl	80105b8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fbca:	f008 f81f 	bl	8017c0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fbce:	f001 fdf1 	bl	80117b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fbd2:	f007 ff61 	bl	8017a98 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fbd6:	bf00      	nop
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
	...

0800fbe0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b083      	sub	sp, #12
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fbea:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <ptr_to_mem+0x20>)
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	88fb      	ldrh	r3, [r7, #6]
 800fbf0:	4413      	add	r3, r2
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	20004ef0 	.word	0x20004ef0

0800fc04 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fc0c:	4b05      	ldr	r3, [pc, #20]	; (800fc24 <mem_to_ptr+0x20>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	1ad3      	subs	r3, r2, r3
 800fc14:	b29b      	uxth	r3, r3
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	370c      	adds	r7, #12
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
 800fc24:	20004ef0 	.word	0x20004ef0

0800fc28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fc28:	b590      	push	{r4, r7, lr}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fc30:	4b45      	ldr	r3, [pc, #276]	; (800fd48 <plug_holes+0x120>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d206      	bcs.n	800fc48 <plug_holes+0x20>
 800fc3a:	4b44      	ldr	r3, [pc, #272]	; (800fd4c <plug_holes+0x124>)
 800fc3c:	f240 12df 	movw	r2, #479	; 0x1df
 800fc40:	4943      	ldr	r1, [pc, #268]	; (800fd50 <plug_holes+0x128>)
 800fc42:	4844      	ldr	r0, [pc, #272]	; (800fd54 <plug_holes+0x12c>)
 800fc44:	f00b fe72 	bl	801b92c <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fc48:	4b43      	ldr	r3, [pc, #268]	; (800fd58 <plug_holes+0x130>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d306      	bcc.n	800fc60 <plug_holes+0x38>
 800fc52:	4b3e      	ldr	r3, [pc, #248]	; (800fd4c <plug_holes+0x124>)
 800fc54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fc58:	4940      	ldr	r1, [pc, #256]	; (800fd5c <plug_holes+0x134>)
 800fc5a:	483e      	ldr	r0, [pc, #248]	; (800fd54 <plug_holes+0x12c>)
 800fc5c:	f00b fe66 	bl	801b92c <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	791b      	ldrb	r3, [r3, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d006      	beq.n	800fc76 <plug_holes+0x4e>
 800fc68:	4b38      	ldr	r3, [pc, #224]	; (800fd4c <plug_holes+0x124>)
 800fc6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fc6e:	493c      	ldr	r1, [pc, #240]	; (800fd60 <plug_holes+0x138>)
 800fc70:	4838      	ldr	r0, [pc, #224]	; (800fd54 <plug_holes+0x12c>)
 800fc72:	f00b fe5b 	bl	801b92c <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	881b      	ldrh	r3, [r3, #0]
 800fc7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc7e:	d906      	bls.n	800fc8e <plug_holes+0x66>
 800fc80:	4b32      	ldr	r3, [pc, #200]	; (800fd4c <plug_holes+0x124>)
 800fc82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fc86:	4937      	ldr	r1, [pc, #220]	; (800fd64 <plug_holes+0x13c>)
 800fc88:	4832      	ldr	r0, [pc, #200]	; (800fd54 <plug_holes+0x12c>)
 800fc8a:	f00b fe4f 	bl	801b92c <printf>

  nmem = ptr_to_mem(mem->next);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7ff ffa4 	bl	800fbe0 <ptr_to_mem>
 800fc98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d024      	beq.n	800fcec <plug_holes+0xc4>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	791b      	ldrb	r3, [r3, #4]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d120      	bne.n	800fcec <plug_holes+0xc4>
 800fcaa:	4b2b      	ldr	r3, [pc, #172]	; (800fd58 <plug_holes+0x130>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d01b      	beq.n	800fcec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fcb4:	4b2c      	ldr	r3, [pc, #176]	; (800fd68 <plug_holes+0x140>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d102      	bne.n	800fcc4 <plug_holes+0x9c>
      lfree = mem;
 800fcbe:	4a2a      	ldr	r2, [pc, #168]	; (800fd68 <plug_holes+0x140>)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	881a      	ldrh	r2, [r3, #0]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcd4:	d00a      	beq.n	800fcec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	881b      	ldrh	r3, [r3, #0]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff ff80 	bl	800fbe0 <ptr_to_mem>
 800fce0:	4604      	mov	r4, r0
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7ff ff8e 	bl	800fc04 <mem_to_ptr>
 800fce8:	4603      	mov	r3, r0
 800fcea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	885b      	ldrh	r3, [r3, #2]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff ff75 	bl	800fbe0 <ptr_to_mem>
 800fcf6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d01f      	beq.n	800fd40 <plug_holes+0x118>
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	791b      	ldrb	r3, [r3, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d11b      	bne.n	800fd40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fd08:	4b17      	ldr	r3, [pc, #92]	; (800fd68 <plug_holes+0x140>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d102      	bne.n	800fd18 <plug_holes+0xf0>
      lfree = pmem;
 800fd12:	4a15      	ldr	r2, [pc, #84]	; (800fd68 <plug_holes+0x140>)
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	881a      	ldrh	r2, [r3, #0]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	881b      	ldrh	r3, [r3, #0]
 800fd24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fd28:	d00a      	beq.n	800fd40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7ff ff56 	bl	800fbe0 <ptr_to_mem>
 800fd34:	4604      	mov	r4, r0
 800fd36:	68b8      	ldr	r0, [r7, #8]
 800fd38:	f7ff ff64 	bl	800fc04 <mem_to_ptr>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fd40:	bf00      	nop
 800fd42:	3714      	adds	r7, #20
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd90      	pop	{r4, r7, pc}
 800fd48:	20004ef0 	.word	0x20004ef0
 800fd4c:	08025678 	.word	0x08025678
 800fd50:	080256a8 	.word	0x080256a8
 800fd54:	080256c0 	.word	0x080256c0
 800fd58:	20004ef4 	.word	0x20004ef4
 800fd5c:	080256e8 	.word	0x080256e8
 800fd60:	08025704 	.word	0x08025704
 800fd64:	08025720 	.word	0x08025720
 800fd68:	20004efc 	.word	0x20004efc

0800fd6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fd72:	4b1f      	ldr	r3, [pc, #124]	; (800fdf0 <mem_init+0x84>)
 800fd74:	3303      	adds	r3, #3
 800fd76:	f023 0303 	bic.w	r3, r3, #3
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	4b1d      	ldr	r3, [pc, #116]	; (800fdf4 <mem_init+0x88>)
 800fd7e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fd80:	4b1c      	ldr	r3, [pc, #112]	; (800fdf4 <mem_init+0x88>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fd8c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2200      	movs	r2, #0
 800fd92:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2200      	movs	r2, #0
 800fd98:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fd9a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800fd9e:	f7ff ff1f 	bl	800fbe0 <ptr_to_mem>
 800fda2:	4603      	mov	r3, r0
 800fda4:	4a14      	ldr	r2, [pc, #80]	; (800fdf8 <mem_init+0x8c>)
 800fda6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fda8:	4b13      	ldr	r3, [pc, #76]	; (800fdf8 <mem_init+0x8c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2201      	movs	r2, #1
 800fdae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fdb0:	4b11      	ldr	r3, [pc, #68]	; (800fdf8 <mem_init+0x8c>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fdb8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fdba:	4b0f      	ldr	r3, [pc, #60]	; (800fdf8 <mem_init+0x8c>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fdc2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fdc4:	4b0b      	ldr	r3, [pc, #44]	; (800fdf4 <mem_init+0x88>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4a0c      	ldr	r2, [pc, #48]	; (800fdfc <mem_init+0x90>)
 800fdca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fdcc:	480c      	ldr	r0, [pc, #48]	; (800fe00 <mem_init+0x94>)
 800fdce:	f00b f957 	bl	801b080 <sys_mutex_new>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d006      	beq.n	800fde6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fdd8:	4b0a      	ldr	r3, [pc, #40]	; (800fe04 <mem_init+0x98>)
 800fdda:	f240 221f 	movw	r2, #543	; 0x21f
 800fdde:	490a      	ldr	r1, [pc, #40]	; (800fe08 <mem_init+0x9c>)
 800fde0:	480a      	ldr	r0, [pc, #40]	; (800fe0c <mem_init+0xa0>)
 800fde2:	f00b fda3 	bl	801b92c <printf>
  }
}
 800fde6:	bf00      	nop
 800fde8:	3708      	adds	r7, #8
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	2000874c 	.word	0x2000874c
 800fdf4:	20004ef0 	.word	0x20004ef0
 800fdf8:	20004ef4 	.word	0x20004ef4
 800fdfc:	20004efc 	.word	0x20004efc
 800fe00:	20004ef8 	.word	0x20004ef8
 800fe04:	08025678 	.word	0x08025678
 800fe08:	0802574c 	.word	0x0802574c
 800fe0c:	080256c0 	.word	0x080256c0

0800fe10 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b086      	sub	sp, #24
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff fef3 	bl	800fc04 <mem_to_ptr>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff feda 	bl	800fbe0 <ptr_to_mem>
 800fe2c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	885b      	ldrh	r3, [r3, #2]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7ff fed4 	bl	800fbe0 <ptr_to_mem>
 800fe38:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	881b      	ldrh	r3, [r3, #0]
 800fe3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe42:	d818      	bhi.n	800fe76 <mem_link_valid+0x66>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	885b      	ldrh	r3, [r3, #2]
 800fe48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe4c:	d813      	bhi.n	800fe76 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fe52:	8afa      	ldrh	r2, [r7, #22]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d004      	beq.n	800fe62 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	881b      	ldrh	r3, [r3, #0]
 800fe5c:	8afa      	ldrh	r2, [r7, #22]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d109      	bne.n	800fe76 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fe62:	4b08      	ldr	r3, [pc, #32]	; (800fe84 <mem_link_valid+0x74>)
 800fe64:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fe66:	693a      	ldr	r2, [r7, #16]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d006      	beq.n	800fe7a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	885b      	ldrh	r3, [r3, #2]
 800fe70:	8afa      	ldrh	r2, [r7, #22]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d001      	beq.n	800fe7a <mem_link_valid+0x6a>
    return 0;
 800fe76:	2300      	movs	r3, #0
 800fe78:	e000      	b.n	800fe7c <mem_link_valid+0x6c>
  }
  return 1;
 800fe7a:	2301      	movs	r3, #1
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3718      	adds	r7, #24
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	20004ef4 	.word	0x20004ef4

0800fe88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b088      	sub	sp, #32
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d070      	beq.n	800ff78 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f003 0303 	and.w	r3, r3, #3
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00d      	beq.n	800febc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fea0:	4b37      	ldr	r3, [pc, #220]	; (800ff80 <mem_free+0xf8>)
 800fea2:	f240 2273 	movw	r2, #627	; 0x273
 800fea6:	4937      	ldr	r1, [pc, #220]	; (800ff84 <mem_free+0xfc>)
 800fea8:	4837      	ldr	r0, [pc, #220]	; (800ff88 <mem_free+0x100>)
 800feaa:	f00b fd3f 	bl	801b92c <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800feae:	f00b f945 	bl	801b13c <sys_arch_protect>
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	f00b f94f 	bl	801b158 <sys_arch_unprotect>
    return;
 800feba:	e05e      	b.n	800ff7a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	3b08      	subs	r3, #8
 800fec0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fec2:	4b32      	ldr	r3, [pc, #200]	; (800ff8c <mem_free+0x104>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	69fa      	ldr	r2, [r7, #28]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d306      	bcc.n	800feda <mem_free+0x52>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f103 020c 	add.w	r2, r3, #12
 800fed2:	4b2f      	ldr	r3, [pc, #188]	; (800ff90 <mem_free+0x108>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d90d      	bls.n	800fef6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800feda:	4b29      	ldr	r3, [pc, #164]	; (800ff80 <mem_free+0xf8>)
 800fedc:	f240 227f 	movw	r2, #639	; 0x27f
 800fee0:	492c      	ldr	r1, [pc, #176]	; (800ff94 <mem_free+0x10c>)
 800fee2:	4829      	ldr	r0, [pc, #164]	; (800ff88 <mem_free+0x100>)
 800fee4:	f00b fd22 	bl	801b92c <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fee8:	f00b f928 	bl	801b13c <sys_arch_protect>
 800feec:	6138      	str	r0, [r7, #16]
 800feee:	6938      	ldr	r0, [r7, #16]
 800fef0:	f00b f932 	bl	801b158 <sys_arch_unprotect>
    return;
 800fef4:	e041      	b.n	800ff7a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fef6:	4828      	ldr	r0, [pc, #160]	; (800ff98 <mem_free+0x110>)
 800fef8:	f00b f8de 	bl	801b0b8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	791b      	ldrb	r3, [r3, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d110      	bne.n	800ff26 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ff04:	4b1e      	ldr	r3, [pc, #120]	; (800ff80 <mem_free+0xf8>)
 800ff06:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ff0a:	4924      	ldr	r1, [pc, #144]	; (800ff9c <mem_free+0x114>)
 800ff0c:	481e      	ldr	r0, [pc, #120]	; (800ff88 <mem_free+0x100>)
 800ff0e:	f00b fd0d 	bl	801b92c <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ff12:	4821      	ldr	r0, [pc, #132]	; (800ff98 <mem_free+0x110>)
 800ff14:	f00b f8df 	bl	801b0d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ff18:	f00b f910 	bl	801b13c <sys_arch_protect>
 800ff1c:	6178      	str	r0, [r7, #20]
 800ff1e:	6978      	ldr	r0, [r7, #20]
 800ff20:	f00b f91a 	bl	801b158 <sys_arch_unprotect>
    return;
 800ff24:	e029      	b.n	800ff7a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ff26:	69f8      	ldr	r0, [r7, #28]
 800ff28:	f7ff ff72 	bl	800fe10 <mem_link_valid>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d110      	bne.n	800ff54 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ff32:	4b13      	ldr	r3, [pc, #76]	; (800ff80 <mem_free+0xf8>)
 800ff34:	f240 2295 	movw	r2, #661	; 0x295
 800ff38:	4919      	ldr	r1, [pc, #100]	; (800ffa0 <mem_free+0x118>)
 800ff3a:	4813      	ldr	r0, [pc, #76]	; (800ff88 <mem_free+0x100>)
 800ff3c:	f00b fcf6 	bl	801b92c <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ff40:	4815      	ldr	r0, [pc, #84]	; (800ff98 <mem_free+0x110>)
 800ff42:	f00b f8c8 	bl	801b0d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ff46:	f00b f8f9 	bl	801b13c <sys_arch_protect>
 800ff4a:	61b8      	str	r0, [r7, #24]
 800ff4c:	69b8      	ldr	r0, [r7, #24]
 800ff4e:	f00b f903 	bl	801b158 <sys_arch_unprotect>
    return;
 800ff52:	e012      	b.n	800ff7a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	2200      	movs	r2, #0
 800ff58:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ff5a:	4b12      	ldr	r3, [pc, #72]	; (800ffa4 <mem_free+0x11c>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	69fa      	ldr	r2, [r7, #28]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d202      	bcs.n	800ff6a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ff64:	4a0f      	ldr	r2, [pc, #60]	; (800ffa4 <mem_free+0x11c>)
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ff6a:	69f8      	ldr	r0, [r7, #28]
 800ff6c:	f7ff fe5c 	bl	800fc28 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ff70:	4809      	ldr	r0, [pc, #36]	; (800ff98 <mem_free+0x110>)
 800ff72:	f00b f8b0 	bl	801b0d6 <sys_mutex_unlock>
 800ff76:	e000      	b.n	800ff7a <mem_free+0xf2>
    return;
 800ff78:	bf00      	nop
}
 800ff7a:	3720      	adds	r7, #32
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	08025678 	.word	0x08025678
 800ff84:	08025768 	.word	0x08025768
 800ff88:	080256c0 	.word	0x080256c0
 800ff8c:	20004ef0 	.word	0x20004ef0
 800ff90:	20004ef4 	.word	0x20004ef4
 800ff94:	0802578c 	.word	0x0802578c
 800ff98:	20004ef8 	.word	0x20004ef8
 800ff9c:	080257a8 	.word	0x080257a8
 800ffa0:	080257d0 	.word	0x080257d0
 800ffa4:	20004efc 	.word	0x20004efc

0800ffa8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b088      	sub	sp, #32
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ffb4:	887b      	ldrh	r3, [r7, #2]
 800ffb6:	3303      	adds	r3, #3
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	f023 0303 	bic.w	r3, r3, #3
 800ffbe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ffc0:	8bfb      	ldrh	r3, [r7, #30]
 800ffc2:	2b0b      	cmp	r3, #11
 800ffc4:	d801      	bhi.n	800ffca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ffc6:	230c      	movs	r3, #12
 800ffc8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ffca:	8bfb      	ldrh	r3, [r7, #30]
 800ffcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ffd0:	d803      	bhi.n	800ffda <mem_trim+0x32>
 800ffd2:	8bfa      	ldrh	r2, [r7, #30]
 800ffd4:	887b      	ldrh	r3, [r7, #2]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d201      	bcs.n	800ffde <mem_trim+0x36>
    return NULL;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	e0d8      	b.n	8010190 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ffde:	4b6e      	ldr	r3, [pc, #440]	; (8010198 <mem_trim+0x1f0>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d304      	bcc.n	800fff2 <mem_trim+0x4a>
 800ffe8:	4b6c      	ldr	r3, [pc, #432]	; (801019c <mem_trim+0x1f4>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d306      	bcc.n	8010000 <mem_trim+0x58>
 800fff2:	4b6b      	ldr	r3, [pc, #428]	; (80101a0 <mem_trim+0x1f8>)
 800fff4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fff8:	496a      	ldr	r1, [pc, #424]	; (80101a4 <mem_trim+0x1fc>)
 800fffa:	486b      	ldr	r0, [pc, #428]	; (80101a8 <mem_trim+0x200>)
 800fffc:	f00b fc96 	bl	801b92c <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010000:	4b65      	ldr	r3, [pc, #404]	; (8010198 <mem_trim+0x1f0>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	429a      	cmp	r2, r3
 8010008:	d304      	bcc.n	8010014 <mem_trim+0x6c>
 801000a:	4b64      	ldr	r3, [pc, #400]	; (801019c <mem_trim+0x1f4>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	429a      	cmp	r2, r3
 8010012:	d307      	bcc.n	8010024 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010014:	f00b f892 	bl	801b13c <sys_arch_protect>
 8010018:	60b8      	str	r0, [r7, #8]
 801001a:	68b8      	ldr	r0, [r7, #8]
 801001c:	f00b f89c 	bl	801b158 <sys_arch_unprotect>
    return rmem;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	e0b5      	b.n	8010190 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	3b08      	subs	r3, #8
 8010028:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801002a:	69b8      	ldr	r0, [r7, #24]
 801002c:	f7ff fdea 	bl	800fc04 <mem_to_ptr>
 8010030:	4603      	mov	r3, r0
 8010032:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	881a      	ldrh	r2, [r3, #0]
 8010038:	8afb      	ldrh	r3, [r7, #22]
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	b29b      	uxth	r3, r3
 801003e:	3b08      	subs	r3, #8
 8010040:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010042:	8bfa      	ldrh	r2, [r7, #30]
 8010044:	8abb      	ldrh	r3, [r7, #20]
 8010046:	429a      	cmp	r2, r3
 8010048:	d906      	bls.n	8010058 <mem_trim+0xb0>
 801004a:	4b55      	ldr	r3, [pc, #340]	; (80101a0 <mem_trim+0x1f8>)
 801004c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010050:	4956      	ldr	r1, [pc, #344]	; (80101ac <mem_trim+0x204>)
 8010052:	4855      	ldr	r0, [pc, #340]	; (80101a8 <mem_trim+0x200>)
 8010054:	f00b fc6a 	bl	801b92c <printf>
  if (newsize > size) {
 8010058:	8bfa      	ldrh	r2, [r7, #30]
 801005a:	8abb      	ldrh	r3, [r7, #20]
 801005c:	429a      	cmp	r2, r3
 801005e:	d901      	bls.n	8010064 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010060:	2300      	movs	r3, #0
 8010062:	e095      	b.n	8010190 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010064:	8bfa      	ldrh	r2, [r7, #30]
 8010066:	8abb      	ldrh	r3, [r7, #20]
 8010068:	429a      	cmp	r2, r3
 801006a:	d101      	bne.n	8010070 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	e08f      	b.n	8010190 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010070:	484f      	ldr	r0, [pc, #316]	; (80101b0 <mem_trim+0x208>)
 8010072:	f00b f821 	bl	801b0b8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	4618      	mov	r0, r3
 801007c:	f7ff fdb0 	bl	800fbe0 <ptr_to_mem>
 8010080:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	791b      	ldrb	r3, [r3, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d13f      	bne.n	801010a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010092:	d106      	bne.n	80100a2 <mem_trim+0xfa>
 8010094:	4b42      	ldr	r3, [pc, #264]	; (80101a0 <mem_trim+0x1f8>)
 8010096:	f240 22f5 	movw	r2, #757	; 0x2f5
 801009a:	4946      	ldr	r1, [pc, #280]	; (80101b4 <mem_trim+0x20c>)
 801009c:	4842      	ldr	r0, [pc, #264]	; (80101a8 <mem_trim+0x200>)
 801009e:	f00b fc45 	bl	801b92c <printf>
    /* remember the old next pointer */
    next = mem2->next;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	881b      	ldrh	r3, [r3, #0]
 80100a6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80100a8:	8afa      	ldrh	r2, [r7, #22]
 80100aa:	8bfb      	ldrh	r3, [r7, #30]
 80100ac:	4413      	add	r3, r2
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	3308      	adds	r3, #8
 80100b2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80100b4:	4b40      	ldr	r3, [pc, #256]	; (80101b8 <mem_trim+0x210>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	693a      	ldr	r2, [r7, #16]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d106      	bne.n	80100cc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80100be:	89fb      	ldrh	r3, [r7, #14]
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7ff fd8d 	bl	800fbe0 <ptr_to_mem>
 80100c6:	4603      	mov	r3, r0
 80100c8:	4a3b      	ldr	r2, [pc, #236]	; (80101b8 <mem_trim+0x210>)
 80100ca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80100cc:	89fb      	ldrh	r3, [r7, #14]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7ff fd86 	bl	800fbe0 <ptr_to_mem>
 80100d4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	2200      	movs	r2, #0
 80100da:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	89ba      	ldrh	r2, [r7, #12]
 80100e0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	8afa      	ldrh	r2, [r7, #22]
 80100e6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	89fa      	ldrh	r2, [r7, #14]
 80100ec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100f6:	d047      	beq.n	8010188 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7ff fd6f 	bl	800fbe0 <ptr_to_mem>
 8010102:	4602      	mov	r2, r0
 8010104:	89fb      	ldrh	r3, [r7, #14]
 8010106:	8053      	strh	r3, [r2, #2]
 8010108:	e03e      	b.n	8010188 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801010a:	8bfb      	ldrh	r3, [r7, #30]
 801010c:	f103 0214 	add.w	r2, r3, #20
 8010110:	8abb      	ldrh	r3, [r7, #20]
 8010112:	429a      	cmp	r2, r3
 8010114:	d838      	bhi.n	8010188 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010116:	8afa      	ldrh	r2, [r7, #22]
 8010118:	8bfb      	ldrh	r3, [r7, #30]
 801011a:	4413      	add	r3, r2
 801011c:	b29b      	uxth	r3, r3
 801011e:	3308      	adds	r3, #8
 8010120:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	881b      	ldrh	r3, [r3, #0]
 8010126:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801012a:	d106      	bne.n	801013a <mem_trim+0x192>
 801012c:	4b1c      	ldr	r3, [pc, #112]	; (80101a0 <mem_trim+0x1f8>)
 801012e:	f240 3216 	movw	r2, #790	; 0x316
 8010132:	4920      	ldr	r1, [pc, #128]	; (80101b4 <mem_trim+0x20c>)
 8010134:	481c      	ldr	r0, [pc, #112]	; (80101a8 <mem_trim+0x200>)
 8010136:	f00b fbf9 	bl	801b92c <printf>
    mem2 = ptr_to_mem(ptr2);
 801013a:	89fb      	ldrh	r3, [r7, #14]
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff fd4f 	bl	800fbe0 <ptr_to_mem>
 8010142:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010144:	4b1c      	ldr	r3, [pc, #112]	; (80101b8 <mem_trim+0x210>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	693a      	ldr	r2, [r7, #16]
 801014a:	429a      	cmp	r2, r3
 801014c:	d202      	bcs.n	8010154 <mem_trim+0x1ac>
      lfree = mem2;
 801014e:	4a1a      	ldr	r2, [pc, #104]	; (80101b8 <mem_trim+0x210>)
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	2200      	movs	r2, #0
 8010158:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	881a      	ldrh	r2, [r3, #0]
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	8afa      	ldrh	r2, [r7, #22]
 8010166:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	89fa      	ldrh	r2, [r7, #14]
 801016c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	881b      	ldrh	r3, [r3, #0]
 8010172:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010176:	d007      	beq.n	8010188 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff fd2f 	bl	800fbe0 <ptr_to_mem>
 8010182:	4602      	mov	r2, r0
 8010184:	89fb      	ldrh	r3, [r7, #14]
 8010186:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010188:	4809      	ldr	r0, [pc, #36]	; (80101b0 <mem_trim+0x208>)
 801018a:	f00a ffa4 	bl	801b0d6 <sys_mutex_unlock>
  return rmem;
 801018e:	687b      	ldr	r3, [r7, #4]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3720      	adds	r7, #32
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	20004ef0 	.word	0x20004ef0
 801019c:	20004ef4 	.word	0x20004ef4
 80101a0:	08025678 	.word	0x08025678
 80101a4:	08025804 	.word	0x08025804
 80101a8:	080256c0 	.word	0x080256c0
 80101ac:	0802581c 	.word	0x0802581c
 80101b0:	20004ef8 	.word	0x20004ef8
 80101b4:	0802583c 	.word	0x0802583c
 80101b8:	20004efc 	.word	0x20004efc

080101bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b088      	sub	sp, #32
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	4603      	mov	r3, r0
 80101c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80101c6:	88fb      	ldrh	r3, [r7, #6]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d101      	bne.n	80101d0 <mem_malloc+0x14>
    return NULL;
 80101cc:	2300      	movs	r3, #0
 80101ce:	e0e2      	b.n	8010396 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80101d0:	88fb      	ldrh	r3, [r7, #6]
 80101d2:	3303      	adds	r3, #3
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	f023 0303 	bic.w	r3, r3, #3
 80101da:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80101dc:	8bbb      	ldrh	r3, [r7, #28]
 80101de:	2b0b      	cmp	r3, #11
 80101e0:	d801      	bhi.n	80101e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80101e2:	230c      	movs	r3, #12
 80101e4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80101e6:	8bbb      	ldrh	r3, [r7, #28]
 80101e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80101ec:	d803      	bhi.n	80101f6 <mem_malloc+0x3a>
 80101ee:	8bba      	ldrh	r2, [r7, #28]
 80101f0:	88fb      	ldrh	r3, [r7, #6]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d201      	bcs.n	80101fa <mem_malloc+0x3e>
    return NULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	e0cd      	b.n	8010396 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80101fa:	4869      	ldr	r0, [pc, #420]	; (80103a0 <mem_malloc+0x1e4>)
 80101fc:	f00a ff5c 	bl	801b0b8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010200:	4b68      	ldr	r3, [pc, #416]	; (80103a4 <mem_malloc+0x1e8>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4618      	mov	r0, r3
 8010206:	f7ff fcfd 	bl	800fc04 <mem_to_ptr>
 801020a:	4603      	mov	r3, r0
 801020c:	83fb      	strh	r3, [r7, #30]
 801020e:	e0b7      	b.n	8010380 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010210:	8bfb      	ldrh	r3, [r7, #30]
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff fce4 	bl	800fbe0 <ptr_to_mem>
 8010218:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	791b      	ldrb	r3, [r3, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	f040 80a7 	bne.w	8010372 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	881b      	ldrh	r3, [r3, #0]
 8010228:	461a      	mov	r2, r3
 801022a:	8bfb      	ldrh	r3, [r7, #30]
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	f1a3 0208 	sub.w	r2, r3, #8
 8010232:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010234:	429a      	cmp	r2, r3
 8010236:	f0c0 809c 	bcc.w	8010372 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	881b      	ldrh	r3, [r3, #0]
 801023e:	461a      	mov	r2, r3
 8010240:	8bfb      	ldrh	r3, [r7, #30]
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	f1a3 0208 	sub.w	r2, r3, #8
 8010248:	8bbb      	ldrh	r3, [r7, #28]
 801024a:	3314      	adds	r3, #20
 801024c:	429a      	cmp	r2, r3
 801024e:	d333      	bcc.n	80102b8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010250:	8bfa      	ldrh	r2, [r7, #30]
 8010252:	8bbb      	ldrh	r3, [r7, #28]
 8010254:	4413      	add	r3, r2
 8010256:	b29b      	uxth	r3, r3
 8010258:	3308      	adds	r3, #8
 801025a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801025c:	8a7b      	ldrh	r3, [r7, #18]
 801025e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010262:	d106      	bne.n	8010272 <mem_malloc+0xb6>
 8010264:	4b50      	ldr	r3, [pc, #320]	; (80103a8 <mem_malloc+0x1ec>)
 8010266:	f240 3287 	movw	r2, #903	; 0x387
 801026a:	4950      	ldr	r1, [pc, #320]	; (80103ac <mem_malloc+0x1f0>)
 801026c:	4850      	ldr	r0, [pc, #320]	; (80103b0 <mem_malloc+0x1f4>)
 801026e:	f00b fb5d 	bl	801b92c <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010272:	8a7b      	ldrh	r3, [r7, #18]
 8010274:	4618      	mov	r0, r3
 8010276:	f7ff fcb3 	bl	800fbe0 <ptr_to_mem>
 801027a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	881a      	ldrh	r2, [r3, #0]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	8bfa      	ldrh	r2, [r7, #30]
 801028e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	8a7a      	ldrh	r2, [r7, #18]
 8010294:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	2201      	movs	r2, #1
 801029a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80102a4:	d00b      	beq.n	80102be <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	881b      	ldrh	r3, [r3, #0]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7ff fc98 	bl	800fbe0 <ptr_to_mem>
 80102b0:	4602      	mov	r2, r0
 80102b2:	8a7b      	ldrh	r3, [r7, #18]
 80102b4:	8053      	strh	r3, [r2, #2]
 80102b6:	e002      	b.n	80102be <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	2201      	movs	r2, #1
 80102bc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80102be:	4b39      	ldr	r3, [pc, #228]	; (80103a4 <mem_malloc+0x1e8>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d127      	bne.n	8010318 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80102c8:	4b36      	ldr	r3, [pc, #216]	; (80103a4 <mem_malloc+0x1e8>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80102ce:	e005      	b.n	80102dc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff fc83 	bl	800fbe0 <ptr_to_mem>
 80102da:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	791b      	ldrb	r3, [r3, #4]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d004      	beq.n	80102ee <mem_malloc+0x132>
 80102e4:	4b33      	ldr	r3, [pc, #204]	; (80103b4 <mem_malloc+0x1f8>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	69ba      	ldr	r2, [r7, #24]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d1f0      	bne.n	80102d0 <mem_malloc+0x114>
          }
          lfree = cur;
 80102ee:	4a2d      	ldr	r2, [pc, #180]	; (80103a4 <mem_malloc+0x1e8>)
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80102f4:	4b2b      	ldr	r3, [pc, #172]	; (80103a4 <mem_malloc+0x1e8>)
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	4b2e      	ldr	r3, [pc, #184]	; (80103b4 <mem_malloc+0x1f8>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d00b      	beq.n	8010318 <mem_malloc+0x15c>
 8010300:	4b28      	ldr	r3, [pc, #160]	; (80103a4 <mem_malloc+0x1e8>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	791b      	ldrb	r3, [r3, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d006      	beq.n	8010318 <mem_malloc+0x15c>
 801030a:	4b27      	ldr	r3, [pc, #156]	; (80103a8 <mem_malloc+0x1ec>)
 801030c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010310:	4929      	ldr	r1, [pc, #164]	; (80103b8 <mem_malloc+0x1fc>)
 8010312:	4827      	ldr	r0, [pc, #156]	; (80103b0 <mem_malloc+0x1f4>)
 8010314:	f00b fb0a 	bl	801b92c <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010318:	4821      	ldr	r0, [pc, #132]	; (80103a0 <mem_malloc+0x1e4>)
 801031a:	f00a fedc 	bl	801b0d6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801031e:	8bba      	ldrh	r2, [r7, #28]
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	4413      	add	r3, r2
 8010324:	3308      	adds	r3, #8
 8010326:	4a23      	ldr	r2, [pc, #140]	; (80103b4 <mem_malloc+0x1f8>)
 8010328:	6812      	ldr	r2, [r2, #0]
 801032a:	4293      	cmp	r3, r2
 801032c:	d906      	bls.n	801033c <mem_malloc+0x180>
 801032e:	4b1e      	ldr	r3, [pc, #120]	; (80103a8 <mem_malloc+0x1ec>)
 8010330:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010334:	4921      	ldr	r1, [pc, #132]	; (80103bc <mem_malloc+0x200>)
 8010336:	481e      	ldr	r0, [pc, #120]	; (80103b0 <mem_malloc+0x1f4>)
 8010338:	f00b faf8 	bl	801b92c <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	f003 0303 	and.w	r3, r3, #3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d006      	beq.n	8010354 <mem_malloc+0x198>
 8010346:	4b18      	ldr	r3, [pc, #96]	; (80103a8 <mem_malloc+0x1ec>)
 8010348:	f240 32bb 	movw	r2, #955	; 0x3bb
 801034c:	491c      	ldr	r1, [pc, #112]	; (80103c0 <mem_malloc+0x204>)
 801034e:	4818      	ldr	r0, [pc, #96]	; (80103b0 <mem_malloc+0x1f4>)
 8010350:	f00b faec 	bl	801b92c <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	f003 0303 	and.w	r3, r3, #3
 801035a:	2b00      	cmp	r3, #0
 801035c:	d006      	beq.n	801036c <mem_malloc+0x1b0>
 801035e:	4b12      	ldr	r3, [pc, #72]	; (80103a8 <mem_malloc+0x1ec>)
 8010360:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010364:	4917      	ldr	r1, [pc, #92]	; (80103c4 <mem_malloc+0x208>)
 8010366:	4812      	ldr	r0, [pc, #72]	; (80103b0 <mem_malloc+0x1f4>)
 8010368:	f00b fae0 	bl	801b92c <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	3308      	adds	r3, #8
 8010370:	e011      	b.n	8010396 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010372:	8bfb      	ldrh	r3, [r7, #30]
 8010374:	4618      	mov	r0, r3
 8010376:	f7ff fc33 	bl	800fbe0 <ptr_to_mem>
 801037a:	4603      	mov	r3, r0
 801037c:	881b      	ldrh	r3, [r3, #0]
 801037e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010380:	8bfa      	ldrh	r2, [r7, #30]
 8010382:	8bbb      	ldrh	r3, [r7, #28]
 8010384:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010388:	429a      	cmp	r2, r3
 801038a:	f4ff af41 	bcc.w	8010210 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801038e:	4804      	ldr	r0, [pc, #16]	; (80103a0 <mem_malloc+0x1e4>)
 8010390:	f00a fea1 	bl	801b0d6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3720      	adds	r7, #32
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	20004ef8 	.word	0x20004ef8
 80103a4:	20004efc 	.word	0x20004efc
 80103a8:	08025678 	.word	0x08025678
 80103ac:	0802583c 	.word	0x0802583c
 80103b0:	080256c0 	.word	0x080256c0
 80103b4:	20004ef4 	.word	0x20004ef4
 80103b8:	08025850 	.word	0x08025850
 80103bc:	0802586c 	.word	0x0802586c
 80103c0:	0802589c 	.word	0x0802589c
 80103c4:	080258cc 	.word	0x080258cc

080103c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	2200      	movs	r2, #0
 80103d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	3303      	adds	r3, #3
 80103de:	f023 0303 	bic.w	r3, r3, #3
 80103e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80103e4:	2300      	movs	r3, #0
 80103e6:	60fb      	str	r3, [r7, #12]
 80103e8:	e011      	b.n	801040e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	689b      	ldr	r3, [r3, #8]
 80103f8:	68ba      	ldr	r2, [r7, #8]
 80103fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	881b      	ldrh	r3, [r3, #0]
 8010400:	461a      	mov	r2, r3
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	4413      	add	r3, r2
 8010406:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	3301      	adds	r3, #1
 801040c:	60fb      	str	r3, [r7, #12]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	885b      	ldrh	r3, [r3, #2]
 8010412:	461a      	mov	r2, r3
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	4293      	cmp	r3, r2
 8010418:	dbe7      	blt.n	80103ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801041a:	bf00      	nop
 801041c:	bf00      	nop
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801042e:	2300      	movs	r3, #0
 8010430:	80fb      	strh	r3, [r7, #6]
 8010432:	e009      	b.n	8010448 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010434:	88fb      	ldrh	r3, [r7, #6]
 8010436:	4a08      	ldr	r2, [pc, #32]	; (8010458 <memp_init+0x30>)
 8010438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801043c:	4618      	mov	r0, r3
 801043e:	f7ff ffc3 	bl	80103c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010442:	88fb      	ldrh	r3, [r7, #6]
 8010444:	3301      	adds	r3, #1
 8010446:	80fb      	strh	r3, [r7, #6]
 8010448:	88fb      	ldrh	r3, [r7, #6]
 801044a:	2b0c      	cmp	r3, #12
 801044c:	d9f2      	bls.n	8010434 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801044e:	bf00      	nop
 8010450:	bf00      	nop
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	08029020 	.word	0x08029020

0801045c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010464:	f00a fe6a 	bl	801b13c <sys_arch_protect>
 8010468:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d015      	beq.n	80104a4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	6812      	ldr	r2, [r2, #0]
 8010480:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	f003 0303 	and.w	r3, r3, #3
 8010488:	2b00      	cmp	r3, #0
 801048a:	d006      	beq.n	801049a <do_memp_malloc_pool+0x3e>
 801048c:	4b09      	ldr	r3, [pc, #36]	; (80104b4 <do_memp_malloc_pool+0x58>)
 801048e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010492:	4909      	ldr	r1, [pc, #36]	; (80104b8 <do_memp_malloc_pool+0x5c>)
 8010494:	4809      	ldr	r0, [pc, #36]	; (80104bc <do_memp_malloc_pool+0x60>)
 8010496:	f00b fa49 	bl	801b92c <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	f00a fe5c 	bl	801b158 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	e003      	b.n	80104ac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f00a fe57 	bl	801b158 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80104aa:	2300      	movs	r3, #0
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3710      	adds	r7, #16
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	080258f0 	.word	0x080258f0
 80104b8:	08025920 	.word	0x08025920
 80104bc:	08025944 	.word	0x08025944

080104c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	4603      	mov	r3, r0
 80104c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80104ca:	79fb      	ldrb	r3, [r7, #7]
 80104cc:	2b0c      	cmp	r3, #12
 80104ce:	d908      	bls.n	80104e2 <memp_malloc+0x22>
 80104d0:	4b0a      	ldr	r3, [pc, #40]	; (80104fc <memp_malloc+0x3c>)
 80104d2:	f240 1257 	movw	r2, #343	; 0x157
 80104d6:	490a      	ldr	r1, [pc, #40]	; (8010500 <memp_malloc+0x40>)
 80104d8:	480a      	ldr	r0, [pc, #40]	; (8010504 <memp_malloc+0x44>)
 80104da:	f00b fa27 	bl	801b92c <printf>
 80104de:	2300      	movs	r3, #0
 80104e0:	e008      	b.n	80104f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80104e2:	79fb      	ldrb	r3, [r7, #7]
 80104e4:	4a08      	ldr	r2, [pc, #32]	; (8010508 <memp_malloc+0x48>)
 80104e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7ff ffb6 	bl	801045c <do_memp_malloc_pool>
 80104f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80104f2:	68fb      	ldr	r3, [r7, #12]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	080258f0 	.word	0x080258f0
 8010500:	08025980 	.word	0x08025980
 8010504:	08025944 	.word	0x08025944
 8010508:	08029020 	.word	0x08029020

0801050c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	f003 0303 	and.w	r3, r3, #3
 801051c:	2b00      	cmp	r3, #0
 801051e:	d006      	beq.n	801052e <do_memp_free_pool+0x22>
 8010520:	4b0d      	ldr	r3, [pc, #52]	; (8010558 <do_memp_free_pool+0x4c>)
 8010522:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010526:	490d      	ldr	r1, [pc, #52]	; (801055c <do_memp_free_pool+0x50>)
 8010528:	480d      	ldr	r0, [pc, #52]	; (8010560 <do_memp_free_pool+0x54>)
 801052a:	f00b f9ff 	bl	801b92c <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010532:	f00a fe03 	bl	801b13c <sys_arch_protect>
 8010536:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	689b      	ldr	r3, [r3, #8]
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801054a:	68b8      	ldr	r0, [r7, #8]
 801054c:	f00a fe04 	bl	801b158 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010550:	bf00      	nop
 8010552:	3710      	adds	r7, #16
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	080258f0 	.word	0x080258f0
 801055c:	080259a0 	.word	0x080259a0
 8010560:	08025944 	.word	0x08025944

08010564 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	4603      	mov	r3, r0
 801056c:	6039      	str	r1, [r7, #0]
 801056e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010570:	79fb      	ldrb	r3, [r7, #7]
 8010572:	2b0c      	cmp	r3, #12
 8010574:	d907      	bls.n	8010586 <memp_free+0x22>
 8010576:	4b0c      	ldr	r3, [pc, #48]	; (80105a8 <memp_free+0x44>)
 8010578:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801057c:	490b      	ldr	r1, [pc, #44]	; (80105ac <memp_free+0x48>)
 801057e:	480c      	ldr	r0, [pc, #48]	; (80105b0 <memp_free+0x4c>)
 8010580:	f00b f9d4 	bl	801b92c <printf>
 8010584:	e00c      	b.n	80105a0 <memp_free+0x3c>

  if (mem == NULL) {
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d008      	beq.n	801059e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801058c:	79fb      	ldrb	r3, [r7, #7]
 801058e:	4a09      	ldr	r2, [pc, #36]	; (80105b4 <memp_free+0x50>)
 8010590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010594:	6839      	ldr	r1, [r7, #0]
 8010596:	4618      	mov	r0, r3
 8010598:	f7ff ffb8 	bl	801050c <do_memp_free_pool>
 801059c:	e000      	b.n	80105a0 <memp_free+0x3c>
    return;
 801059e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	080258f0 	.word	0x080258f0
 80105ac:	080259c0 	.word	0x080259c0
 80105b0:	08025944 	.word	0x08025944
 80105b4:	08029020 	.word	0x08029020

080105b8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80105b8:	b480      	push	{r7}
 80105ba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80105bc:	bf00      	nop
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
	...

080105c8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
 80105d4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d108      	bne.n	80105ee <netif_add+0x26>
 80105dc:	4b56      	ldr	r3, [pc, #344]	; (8010738 <netif_add+0x170>)
 80105de:	f240 1227 	movw	r2, #295	; 0x127
 80105e2:	4956      	ldr	r1, [pc, #344]	; (801073c <netif_add+0x174>)
 80105e4:	4856      	ldr	r0, [pc, #344]	; (8010740 <netif_add+0x178>)
 80105e6:	f00b f9a1 	bl	801b92c <printf>
 80105ea:	2300      	movs	r3, #0
 80105ec:	e09f      	b.n	801072e <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80105ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d108      	bne.n	8010606 <netif_add+0x3e>
 80105f4:	4b50      	ldr	r3, [pc, #320]	; (8010738 <netif_add+0x170>)
 80105f6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80105fa:	4952      	ldr	r1, [pc, #328]	; (8010744 <netif_add+0x17c>)
 80105fc:	4850      	ldr	r0, [pc, #320]	; (8010740 <netif_add+0x178>)
 80105fe:	f00b f995 	bl	801b92c <printf>
 8010602:	2300      	movs	r3, #0
 8010604:	e093      	b.n	801072e <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d101      	bne.n	8010610 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801060c:	4b4e      	ldr	r3, [pc, #312]	; (8010748 <netif_add+0x180>)
 801060e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d101      	bne.n	801061a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010616:	4b4c      	ldr	r3, [pc, #304]	; (8010748 <netif_add+0x180>)
 8010618:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d101      	bne.n	8010624 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010620:	4b49      	ldr	r3, [pc, #292]	; (8010748 <netif_add+0x180>)
 8010622:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2200      	movs	r2, #0
 8010628:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2200      	movs	r2, #0
 801062e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2200      	movs	r2, #0
 8010634:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	4a44      	ldr	r2, [pc, #272]	; (801074c <netif_add+0x184>)
 801063a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2200      	movs	r2, #0
 8010640:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2200      	movs	r2, #0
 8010646:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6a3a      	ldr	r2, [r7, #32]
 801064e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8010650:	4b3f      	ldr	r3, [pc, #252]	; (8010750 <netif_add+0x188>)
 8010652:	781a      	ldrb	r2, [r3, #0]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801065e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	68b9      	ldr	r1, [r7, #8]
 8010666:	68f8      	ldr	r0, [r7, #12]
 8010668:	f000 f966 	bl	8010938 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	4798      	blx	r3
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d001      	beq.n	801067c <netif_add+0xb4>
    return NULL;
 8010678:	2300      	movs	r3, #0
 801067a:	e058      	b.n	801072e <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010682:	2bff      	cmp	r3, #255	; 0xff
 8010684:	d103      	bne.n	801068e <netif_add+0xc6>
        netif->num = 0;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2200      	movs	r2, #0
 801068a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 801068e:	2300      	movs	r3, #0
 8010690:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010692:	4b30      	ldr	r3, [pc, #192]	; (8010754 <netif_add+0x18c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	617b      	str	r3, [r7, #20]
 8010698:	e02b      	b.n	80106f2 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801069a:	697a      	ldr	r2, [r7, #20]
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d106      	bne.n	80106b0 <netif_add+0xe8>
 80106a2:	4b25      	ldr	r3, [pc, #148]	; (8010738 <netif_add+0x170>)
 80106a4:	f240 128b 	movw	r2, #395	; 0x18b
 80106a8:	492b      	ldr	r1, [pc, #172]	; (8010758 <netif_add+0x190>)
 80106aa:	4825      	ldr	r0, [pc, #148]	; (8010740 <netif_add+0x178>)
 80106ac:	f00b f93e 	bl	801b92c <printf>
        num_netifs++;
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	3301      	adds	r3, #1
 80106b4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	2bff      	cmp	r3, #255	; 0xff
 80106ba:	dd06      	ble.n	80106ca <netif_add+0x102>
 80106bc:	4b1e      	ldr	r3, [pc, #120]	; (8010738 <netif_add+0x170>)
 80106be:	f240 128d 	movw	r2, #397	; 0x18d
 80106c2:	4926      	ldr	r1, [pc, #152]	; (801075c <netif_add+0x194>)
 80106c4:	481e      	ldr	r0, [pc, #120]	; (8010740 <netif_add+0x178>)
 80106c6:	f00b f931 	bl	801b92c <printf>
        if (netif2->num == netif->num) {
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d108      	bne.n	80106ec <netif_add+0x124>
          netif->num++;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106e0:	3301      	adds	r3, #1
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 80106ea:	e005      	b.n	80106f8 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	617b      	str	r3, [r7, #20]
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1d0      	bne.n	801069a <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1be      	bne.n	801067c <netif_add+0xb4>
  }
  if (netif->num == 254) {
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010704:	2bfe      	cmp	r3, #254	; 0xfe
 8010706:	d103      	bne.n	8010710 <netif_add+0x148>
    netif_num = 0;
 8010708:	4b11      	ldr	r3, [pc, #68]	; (8010750 <netif_add+0x188>)
 801070a:	2200      	movs	r2, #0
 801070c:	701a      	strb	r2, [r3, #0]
 801070e:	e006      	b.n	801071e <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010716:	3301      	adds	r3, #1
 8010718:	b2da      	uxtb	r2, r3
 801071a:	4b0d      	ldr	r3, [pc, #52]	; (8010750 <netif_add+0x188>)
 801071c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801071e:	4b0d      	ldr	r3, [pc, #52]	; (8010754 <netif_add+0x18c>)
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010726:	4a0b      	ldr	r2, [pc, #44]	; (8010754 <netif_add+0x18c>)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801072c:	68fb      	ldr	r3, [r7, #12]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3718      	adds	r7, #24
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	080259dc 	.word	0x080259dc
 801073c:	08025a70 	.word	0x08025a70
 8010740:	08025a2c 	.word	0x08025a2c
 8010744:	08025a8c 	.word	0x08025a8c
 8010748:	08029094 	.word	0x08029094
 801074c:	08010b29 	.word	0x08010b29
 8010750:	20004f34 	.word	0x20004f34
 8010754:	2000be38 	.word	0x2000be38
 8010758:	08025ab0 	.word	0x08025ab0
 801075c:	08025ac4 	.word	0x08025ac4

08010760 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801076a:	6839      	ldr	r1, [r7, #0]
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f002 fe6b 	bl	8013448 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010772:	6839      	ldr	r1, [r7, #0]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f007 ff03 	bl	8018580 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801077a:	bf00      	nop
 801077c:	3708      	adds	r7, #8
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
	...

08010784 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b086      	sub	sp, #24
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d106      	bne.n	80107a4 <netif_do_set_ipaddr+0x20>
 8010796:	4b1d      	ldr	r3, [pc, #116]	; (801080c <netif_do_set_ipaddr+0x88>)
 8010798:	f240 12cb 	movw	r2, #459	; 0x1cb
 801079c:	491c      	ldr	r1, [pc, #112]	; (8010810 <netif_do_set_ipaddr+0x8c>)
 801079e:	481d      	ldr	r0, [pc, #116]	; (8010814 <netif_do_set_ipaddr+0x90>)
 80107a0:	f00b f8c4 	bl	801b92c <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d106      	bne.n	80107b8 <netif_do_set_ipaddr+0x34>
 80107aa:	4b18      	ldr	r3, [pc, #96]	; (801080c <netif_do_set_ipaddr+0x88>)
 80107ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80107b0:	4917      	ldr	r1, [pc, #92]	; (8010810 <netif_do_set_ipaddr+0x8c>)
 80107b2:	4818      	ldr	r0, [pc, #96]	; (8010814 <netif_do_set_ipaddr+0x90>)
 80107b4:	f00b f8ba 	bl	801b92c <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	3304      	adds	r3, #4
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d01c      	beq.n	8010800 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	3304      	adds	r3, #4
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80107d6:	f107 0314 	add.w	r3, r7, #20
 80107da:	4619      	mov	r1, r3
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff ffbf 	bl	8010760 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <netif_do_set_ipaddr+0x6a>
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	e000      	b.n	80107f0 <netif_do_set_ipaddr+0x6c>
 80107ee:	2300      	movs	r3, #0
 80107f0:	68fa      	ldr	r2, [r7, #12]
 80107f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80107f4:	2101      	movs	r1, #1
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f000 f924 	bl	8010a44 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80107fc:	2301      	movs	r3, #1
 80107fe:	e000      	b.n	8010802 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3718      	adds	r7, #24
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	080259dc 	.word	0x080259dc
 8010810:	08025af4 	.word	0x08025af4
 8010814:	08025a2c 	.word	0x08025a2c

08010818 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  ip_addr_t old_addr;

  LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d107      	bne.n	8010838 <netif_set_ipaddr+0x20>
 8010828:	4b0b      	ldr	r3, [pc, #44]	; (8010858 <netif_set_ipaddr+0x40>)
 801082a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801082e:	490b      	ldr	r1, [pc, #44]	; (801085c <netif_set_ipaddr+0x44>)
 8010830:	480b      	ldr	r0, [pc, #44]	; (8010860 <netif_set_ipaddr+0x48>)
 8010832:	f00b f87b 	bl	801b92c <printf>
 8010836:	e00b      	b.n	8010850 <netif_set_ipaddr+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d101      	bne.n	8010842 <netif_set_ipaddr+0x2a>
    ipaddr = IP4_ADDR_ANY4;
 801083e:	4b09      	ldr	r3, [pc, #36]	; (8010864 <netif_set_ipaddr+0x4c>)
 8010840:	603b      	str	r3, [r7, #0]
  }

  LWIP_ASSERT_CORE_LOCKED();

  if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010842:	f107 030c 	add.w	r3, r7, #12
 8010846:	461a      	mov	r2, r3
 8010848:	6839      	ldr	r1, [r7, #0]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff ff9a 	bl	8010784 <netif_do_set_ipaddr>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_address = &old_addr;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
#endif
  }
}
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	080259dc 	.word	0x080259dc
 801085c:	08025b04 	.word	0x08025b04
 8010860:	08025a2c 	.word	0x08025a2c
 8010864:	08029094 	.word	0x08029094

08010868 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010868:	b480      	push	{r7}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	3308      	adds	r3, #8
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	429a      	cmp	r2, r3
 8010880:	d00a      	beq.n	8010898 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d002      	beq.n	801088e <netif_do_set_netmask+0x26>
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	e000      	b.n	8010890 <netif_do_set_netmask+0x28>
 801088e:	2300      	movs	r3, #0
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010894:	2301      	movs	r3, #1
 8010896:	e000      	b.n	801089a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010898:	2300      	movs	r3, #0
}
 801089a:	4618      	mov	r0, r3
 801089c:	3714      	adds	r7, #20
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr
	...

080108a8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  ip_addr_t old_nm_val;
  ip_addr_t *old_nm = &old_nm_val;
#else
  ip_addr_t *old_nm = NULL;
 80108b2:	2300      	movs	r3, #0
 80108b4:	60fb      	str	r3, [r7, #12]
#endif
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_netmask: invalid netif", netif != NULL, return);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d107      	bne.n	80108cc <netif_set_netmask+0x24>
 80108bc:	4b0a      	ldr	r3, [pc, #40]	; (80108e8 <netif_set_netmask+0x40>)
 80108be:	f240 223a 	movw	r2, #570	; 0x23a
 80108c2:	490a      	ldr	r1, [pc, #40]	; (80108ec <netif_set_netmask+0x44>)
 80108c4:	480a      	ldr	r0, [pc, #40]	; (80108f0 <netif_set_netmask+0x48>)
 80108c6:	f00b f831 	bl	801b92c <printf>
 80108ca:	e009      	b.n	80108e0 <netif_set_netmask+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (netmask == NULL) {
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d101      	bne.n	80108d6 <netif_set_netmask+0x2e>
    netmask = IP4_ADDR_ANY4;
 80108d2:	4b08      	ldr	r3, [pc, #32]	; (80108f4 <netif_set_netmask+0x4c>)
 80108d4:	603b      	str	r3, [r7, #0]
  }

  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80108d6:	68fa      	ldr	r2, [r7, #12]
 80108d8:	6839      	ldr	r1, [r7, #0]
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f7ff ffc4 	bl	8010868 <netif_do_set_netmask>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_netmask = old_nm;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_NETMASK_CHANGED, &args);
#endif
  }
}
 80108e0:	3710      	adds	r7, #16
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	080259dc 	.word	0x080259dc
 80108ec:	08025b24 	.word	0x08025b24
 80108f0:	08025a2c 	.word	0x08025a2c
 80108f4:	08029094 	.word	0x08029094

080108f8 <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	330c      	adds	r3, #12
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	429a      	cmp	r2, r3
 8010910:	d00a      	beq.n	8010928 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <netif_do_set_gw+0x26>
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	e000      	b.n	8010920 <netif_do_set_gw+0x28>
 801091e:	2300      	movs	r3, #0
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010924:	2301      	movs	r3, #1
 8010926:	e000      	b.n	801092a <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010928:	2300      	movs	r3, #0
}
 801092a:	4618      	mov	r0, r3
 801092c:	3714      	adds	r7, #20
 801092e:	46bd      	mov	sp, r7
 8010930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010934:	4770      	bx	lr
	...

08010938 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b088      	sub	sp, #32
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010946:	2300      	movs	r3, #0
 8010948:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801094a:	2300      	movs	r3, #0
 801094c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d101      	bne.n	8010958 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010954:	4b1c      	ldr	r3, [pc, #112]	; (80109c8 <netif_set_addr+0x90>)
 8010956:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d101      	bne.n	8010962 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801095e:	4b1a      	ldr	r3, [pc, #104]	; (80109c8 <netif_set_addr+0x90>)
 8010960:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d101      	bne.n	801096c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010968:	4b17      	ldr	r3, [pc, #92]	; (80109c8 <netif_set_addr+0x90>)
 801096a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d003      	beq.n	801097a <netif_set_addr+0x42>
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d101      	bne.n	801097e <netif_set_addr+0x46>
 801097a:	2301      	movs	r3, #1
 801097c:	e000      	b.n	8010980 <netif_set_addr+0x48>
 801097e:	2300      	movs	r3, #0
 8010980:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d006      	beq.n	8010996 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010988:	f107 0310 	add.w	r3, r7, #16
 801098c:	461a      	mov	r2, r3
 801098e:	68b9      	ldr	r1, [r7, #8]
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f7ff fef7 	bl	8010784 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010996:	69fa      	ldr	r2, [r7, #28]
 8010998:	6879      	ldr	r1, [r7, #4]
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f7ff ff64 	bl	8010868 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80109a0:	69ba      	ldr	r2, [r7, #24]
 80109a2:	6839      	ldr	r1, [r7, #0]
 80109a4:	68f8      	ldr	r0, [r7, #12]
 80109a6:	f7ff ffa7 	bl	80108f8 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d106      	bne.n	80109be <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80109b0:	f107 0310 	add.w	r3, r7, #16
 80109b4:	461a      	mov	r2, r3
 80109b6:	68b9      	ldr	r1, [r7, #8]
 80109b8:	68f8      	ldr	r0, [r7, #12]
 80109ba:	f7ff fee3 	bl	8010784 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80109be:	bf00      	nop
 80109c0:	3720      	adds	r7, #32
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	08029094 	.word	0x08029094

080109cc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80109d4:	4a04      	ldr	r2, [pc, #16]	; (80109e8 <netif_set_default+0x1c>)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80109da:	bf00      	nop
 80109dc:	370c      	adds	r7, #12
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr
 80109e6:	bf00      	nop
 80109e8:	2000be3c 	.word	0x2000be3c

080109ec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d107      	bne.n	8010a0a <netif_set_up+0x1e>
 80109fa:	4b0f      	ldr	r3, [pc, #60]	; (8010a38 <netif_set_up+0x4c>)
 80109fc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010a00:	490e      	ldr	r1, [pc, #56]	; (8010a3c <netif_set_up+0x50>)
 8010a02:	480f      	ldr	r0, [pc, #60]	; (8010a40 <netif_set_up+0x54>)
 8010a04:	f00a ff92 	bl	801b92c <printf>
 8010a08:	e013      	b.n	8010a32 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a10:	f003 0301 	and.w	r3, r3, #1
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10c      	bne.n	8010a32 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a1e:	f043 0301 	orr.w	r3, r3, #1
 8010a22:	b2da      	uxtb	r2, r3
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010a2a:	2103      	movs	r1, #3
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f000 f809 	bl	8010a44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	080259dc 	.word	0x080259dc
 8010a3c:	08025b64 	.word	0x08025b64
 8010a40:	08025a2c 	.word	0x08025a2c

08010a44 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d106      	bne.n	8010a64 <netif_issue_reports+0x20>
 8010a56:	4b18      	ldr	r3, [pc, #96]	; (8010ab8 <netif_issue_reports+0x74>)
 8010a58:	f240 326d 	movw	r2, #877	; 0x36d
 8010a5c:	4917      	ldr	r1, [pc, #92]	; (8010abc <netif_issue_reports+0x78>)
 8010a5e:	4818      	ldr	r0, [pc, #96]	; (8010ac0 <netif_issue_reports+0x7c>)
 8010a60:	f00a ff64 	bl	801b92c <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a6a:	f003 0304 	and.w	r3, r3, #4
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d01e      	beq.n	8010ab0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a78:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d017      	beq.n	8010ab0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010a80:	78fb      	ldrb	r3, [r7, #3]
 8010a82:	f003 0301 	and.w	r3, r3, #1
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d013      	beq.n	8010ab2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	3304      	adds	r3, #4
 8010a8e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00e      	beq.n	8010ab2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a9a:	f003 0308 	and.w	r3, r3, #8
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d007      	beq.n	8010ab2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f008 fcd3 	bl	8019454 <etharp_request>
 8010aae:	e000      	b.n	8010ab2 <netif_issue_reports+0x6e>
    return;
 8010ab0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	080259dc 	.word	0x080259dc
 8010abc:	08025b80 	.word	0x08025b80
 8010ac0:	08025a2c 	.word	0x08025a2c

08010ac4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d107      	bne.n	8010ae2 <netif_set_down+0x1e>
 8010ad2:	4b12      	ldr	r3, [pc, #72]	; (8010b1c <netif_set_down+0x58>)
 8010ad4:	f240 329b 	movw	r2, #923	; 0x39b
 8010ad8:	4911      	ldr	r1, [pc, #68]	; (8010b20 <netif_set_down+0x5c>)
 8010ada:	4812      	ldr	r0, [pc, #72]	; (8010b24 <netif_set_down+0x60>)
 8010adc:	f00a ff26 	bl	801b92c <printf>
 8010ae0:	e019      	b.n	8010b16 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010ae8:	f003 0301 	and.w	r3, r3, #1
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d012      	beq.n	8010b16 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010af6:	f023 0301 	bic.w	r3, r3, #1
 8010afa:	b2da      	uxtb	r2, r3
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010b08:	f003 0308 	and.w	r3, r3, #8
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d002      	beq.n	8010b16 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f008 f85d 	bl	8018bd0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	080259dc 	.word	0x080259dc
 8010b20:	08025ba4 	.word	0x08025ba4
 8010b24:	08025a2c 	.word	0x08025a2c

08010b28 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010b34:	f06f 030b 	mvn.w	r3, #11
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3714      	adds	r7, #20
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr

08010b44 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b085      	sub	sp, #20
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010b4e:	79fb      	ldrb	r3, [r7, #7]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d013      	beq.n	8010b7c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010b54:	4b0d      	ldr	r3, [pc, #52]	; (8010b8c <netif_get_by_index+0x48>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	60fb      	str	r3, [r7, #12]
 8010b5a:	e00c      	b.n	8010b76 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010b62:	3301      	adds	r3, #1
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	79fa      	ldrb	r2, [r7, #7]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d101      	bne.n	8010b70 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	e006      	b.n	8010b7e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	60fb      	str	r3, [r7, #12]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d1ef      	bne.n	8010b5c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	2000be38 	.word	0x2000be38

08010b90 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010b96:	f00a fad1 	bl	801b13c <sys_arch_protect>
 8010b9a:	6038      	str	r0, [r7, #0]
 8010b9c:	4b0d      	ldr	r3, [pc, #52]	; (8010bd4 <pbuf_free_ooseq+0x44>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	701a      	strb	r2, [r3, #0]
 8010ba2:	6838      	ldr	r0, [r7, #0]
 8010ba4:	f00a fad8 	bl	801b158 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010ba8:	4b0b      	ldr	r3, [pc, #44]	; (8010bd8 <pbuf_free_ooseq+0x48>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	607b      	str	r3, [r7, #4]
 8010bae:	e00a      	b.n	8010bc6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d003      	beq.n	8010bc0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f002 fc83 	bl	80134c4 <tcp_free_ooseq>
      return;
 8010bbe:	e005      	b.n	8010bcc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	607b      	str	r3, [r7, #4]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d1f1      	bne.n	8010bb0 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	2000be40 	.word	0x2000be40
 8010bd8:	2000be48 	.word	0x2000be48

08010bdc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010be4:	f7ff ffd4 	bl	8010b90 <pbuf_free_ooseq>
}
 8010be8:	bf00      	nop
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010bf6:	f00a faa1 	bl	801b13c <sys_arch_protect>
 8010bfa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010bfc:	4b0f      	ldr	r3, [pc, #60]	; (8010c3c <pbuf_pool_is_empty+0x4c>)
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010c02:	4b0e      	ldr	r3, [pc, #56]	; (8010c3c <pbuf_pool_is_empty+0x4c>)
 8010c04:	2201      	movs	r2, #1
 8010c06:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f00a faa5 	bl	801b158 <sys_arch_unprotect>

  if (!queued) {
 8010c0e:	78fb      	ldrb	r3, [r7, #3]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d10f      	bne.n	8010c34 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010c14:	2100      	movs	r1, #0
 8010c16:	480a      	ldr	r0, [pc, #40]	; (8010c40 <pbuf_pool_is_empty+0x50>)
 8010c18:	f7fd fee8 	bl	800e9ec <tcpip_try_callback>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d008      	beq.n	8010c34 <pbuf_pool_is_empty+0x44>
 8010c22:	f00a fa8b 	bl	801b13c <sys_arch_protect>
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	4b04      	ldr	r3, [pc, #16]	; (8010c3c <pbuf_pool_is_empty+0x4c>)
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	701a      	strb	r2, [r3, #0]
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f00a fa92 	bl	801b158 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010c34:	bf00      	nop
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	2000be40 	.word	0x2000be40
 8010c40:	08010bdd 	.word	0x08010bdd

08010c44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	4611      	mov	r1, r2
 8010c50:	461a      	mov	r2, r3
 8010c52:	460b      	mov	r3, r1
 8010c54:	80fb      	strh	r3, [r7, #6]
 8010c56:	4613      	mov	r3, r2
 8010c58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	68ba      	ldr	r2, [r7, #8]
 8010c64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	88fa      	ldrh	r2, [r7, #6]
 8010c6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	88ba      	ldrh	r2, [r7, #4]
 8010c70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010c72:	8b3b      	ldrh	r3, [r7, #24]
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	7f3a      	ldrb	r2, [r7, #28]
 8010c7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2201      	movs	r2, #1
 8010c84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	73da      	strb	r2, [r3, #15]
}
 8010c8c:	bf00      	nop
 8010c8e:	3714      	adds	r7, #20
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b08c      	sub	sp, #48	; 0x30
 8010c9c:	af02      	add	r7, sp, #8
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	71fb      	strb	r3, [r7, #7]
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	80bb      	strh	r3, [r7, #4]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010caa:	79fb      	ldrb	r3, [r7, #7]
 8010cac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010cae:	887b      	ldrh	r3, [r7, #2]
 8010cb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010cb4:	d07f      	beq.n	8010db6 <pbuf_alloc+0x11e>
 8010cb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010cba:	f300 80c8 	bgt.w	8010e4e <pbuf_alloc+0x1b6>
 8010cbe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010cc2:	d010      	beq.n	8010ce6 <pbuf_alloc+0x4e>
 8010cc4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010cc8:	f300 80c1 	bgt.w	8010e4e <pbuf_alloc+0x1b6>
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	d002      	beq.n	8010cd6 <pbuf_alloc+0x3e>
 8010cd0:	2b41      	cmp	r3, #65	; 0x41
 8010cd2:	f040 80bc 	bne.w	8010e4e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010cd6:	887a      	ldrh	r2, [r7, #2]
 8010cd8:	88bb      	ldrh	r3, [r7, #4]
 8010cda:	4619      	mov	r1, r3
 8010cdc:	2000      	movs	r0, #0
 8010cde:	f000 f8d1 	bl	8010e84 <pbuf_alloc_reference>
 8010ce2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010ce4:	e0bd      	b.n	8010e62 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010cea:	2300      	movs	r3, #0
 8010cec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010cee:	88bb      	ldrh	r3, [r7, #4]
 8010cf0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010cf2:	200c      	movs	r0, #12
 8010cf4:	f7ff fbe4 	bl	80104c0 <memp_malloc>
 8010cf8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d109      	bne.n	8010d14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010d00:	f7ff ff76 	bl	8010bf0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d002      	beq.n	8010d10 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d0c:	f000 faa8 	bl	8011260 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010d10:	2300      	movs	r3, #0
 8010d12:	e0a7      	b.n	8010e64 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010d14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d16:	3303      	adds	r3, #3
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	f023 0303 	bic.w	r3, r3, #3
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	8b7a      	ldrh	r2, [r7, #26]
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	bf28      	it	cs
 8010d2c:	4613      	movcs	r3, r2
 8010d2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d32:	3310      	adds	r3, #16
 8010d34:	693a      	ldr	r2, [r7, #16]
 8010d36:	4413      	add	r3, r2
 8010d38:	3303      	adds	r3, #3
 8010d3a:	f023 0303 	bic.w	r3, r3, #3
 8010d3e:	4618      	mov	r0, r3
 8010d40:	89f9      	ldrh	r1, [r7, #14]
 8010d42:	8b7a      	ldrh	r2, [r7, #26]
 8010d44:	2300      	movs	r3, #0
 8010d46:	9301      	str	r3, [sp, #4]
 8010d48:	887b      	ldrh	r3, [r7, #2]
 8010d4a:	9300      	str	r3, [sp, #0]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	4601      	mov	r1, r0
 8010d50:	6938      	ldr	r0, [r7, #16]
 8010d52:	f7ff ff77 	bl	8010c44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	f003 0303 	and.w	r3, r3, #3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d006      	beq.n	8010d70 <pbuf_alloc+0xd8>
 8010d62:	4b42      	ldr	r3, [pc, #264]	; (8010e6c <pbuf_alloc+0x1d4>)
 8010d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010d68:	4941      	ldr	r1, [pc, #260]	; (8010e70 <pbuf_alloc+0x1d8>)
 8010d6a:	4842      	ldr	r0, [pc, #264]	; (8010e74 <pbuf_alloc+0x1dc>)
 8010d6c:	f00a fdde 	bl	801b92c <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010d70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d72:	3303      	adds	r3, #3
 8010d74:	f023 0303 	bic.w	r3, r3, #3
 8010d78:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010d7c:	d106      	bne.n	8010d8c <pbuf_alloc+0xf4>
 8010d7e:	4b3b      	ldr	r3, [pc, #236]	; (8010e6c <pbuf_alloc+0x1d4>)
 8010d80:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010d84:	493c      	ldr	r1, [pc, #240]	; (8010e78 <pbuf_alloc+0x1e0>)
 8010d86:	483b      	ldr	r0, [pc, #236]	; (8010e74 <pbuf_alloc+0x1dc>)
 8010d88:	f00a fdd0 	bl	801b92c <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d102      	bne.n	8010d98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	627b      	str	r3, [r7, #36]	; 0x24
 8010d96:	e002      	b.n	8010d9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	693a      	ldr	r2, [r7, #16]
 8010d9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010da2:	8b7a      	ldrh	r2, [r7, #26]
 8010da4:	89fb      	ldrh	r3, [r7, #14]
 8010da6:	1ad3      	subs	r3, r2, r3
 8010da8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010daa:	2300      	movs	r3, #0
 8010dac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010dae:	8b7b      	ldrh	r3, [r7, #26]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d19e      	bne.n	8010cf2 <pbuf_alloc+0x5a>
      break;
 8010db4:	e055      	b.n	8010e62 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010db8:	3303      	adds	r3, #3
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	f023 0303 	bic.w	r3, r3, #3
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	88bb      	ldrh	r3, [r7, #4]
 8010dc4:	3303      	adds	r3, #3
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	f023 0303 	bic.w	r3, r3, #3
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	4413      	add	r3, r2
 8010dd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010dd2:	8b3b      	ldrh	r3, [r7, #24]
 8010dd4:	3310      	adds	r3, #16
 8010dd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010dd8:	8b3a      	ldrh	r2, [r7, #24]
 8010dda:	88bb      	ldrh	r3, [r7, #4]
 8010ddc:	3303      	adds	r3, #3
 8010dde:	f023 0303 	bic.w	r3, r3, #3
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d306      	bcc.n	8010df4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010de6:	8afa      	ldrh	r2, [r7, #22]
 8010de8:	88bb      	ldrh	r3, [r7, #4]
 8010dea:	3303      	adds	r3, #3
 8010dec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d201      	bcs.n	8010df8 <pbuf_alloc+0x160>
        return NULL;
 8010df4:	2300      	movs	r3, #0
 8010df6:	e035      	b.n	8010e64 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010df8:	8afb      	ldrh	r3, [r7, #22]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7ff f9de 	bl	80101bc <mem_malloc>
 8010e00:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d101      	bne.n	8010e0c <pbuf_alloc+0x174>
        return NULL;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	e02b      	b.n	8010e64 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e0e:	3310      	adds	r3, #16
 8010e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e12:	4413      	add	r3, r2
 8010e14:	3303      	adds	r3, #3
 8010e16:	f023 0303 	bic.w	r3, r3, #3
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	88b9      	ldrh	r1, [r7, #4]
 8010e1e:	88ba      	ldrh	r2, [r7, #4]
 8010e20:	2300      	movs	r3, #0
 8010e22:	9301      	str	r3, [sp, #4]
 8010e24:	887b      	ldrh	r3, [r7, #2]
 8010e26:	9300      	str	r3, [sp, #0]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	4601      	mov	r1, r0
 8010e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e2e:	f7ff ff09 	bl	8010c44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	f003 0303 	and.w	r3, r3, #3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d010      	beq.n	8010e60 <pbuf_alloc+0x1c8>
 8010e3e:	4b0b      	ldr	r3, [pc, #44]	; (8010e6c <pbuf_alloc+0x1d4>)
 8010e40:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010e44:	490d      	ldr	r1, [pc, #52]	; (8010e7c <pbuf_alloc+0x1e4>)
 8010e46:	480b      	ldr	r0, [pc, #44]	; (8010e74 <pbuf_alloc+0x1dc>)
 8010e48:	f00a fd70 	bl	801b92c <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010e4c:	e008      	b.n	8010e60 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010e4e:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <pbuf_alloc+0x1d4>)
 8010e50:	f240 1227 	movw	r2, #295	; 0x127
 8010e54:	490a      	ldr	r1, [pc, #40]	; (8010e80 <pbuf_alloc+0x1e8>)
 8010e56:	4807      	ldr	r0, [pc, #28]	; (8010e74 <pbuf_alloc+0x1dc>)
 8010e58:	f00a fd68 	bl	801b92c <printf>
      return NULL;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	e001      	b.n	8010e64 <pbuf_alloc+0x1cc>
      break;
 8010e60:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3728      	adds	r7, #40	; 0x28
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	08025c0c 	.word	0x08025c0c
 8010e70:	08025c3c 	.word	0x08025c3c
 8010e74:	08025c6c 	.word	0x08025c6c
 8010e78:	08025c94 	.word	0x08025c94
 8010e7c:	08025cc8 	.word	0x08025cc8
 8010e80:	08025cf4 	.word	0x08025cf4

08010e84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b086      	sub	sp, #24
 8010e88:	af02      	add	r7, sp, #8
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	807b      	strh	r3, [r7, #2]
 8010e90:	4613      	mov	r3, r2
 8010e92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010e94:	883b      	ldrh	r3, [r7, #0]
 8010e96:	2b41      	cmp	r3, #65	; 0x41
 8010e98:	d009      	beq.n	8010eae <pbuf_alloc_reference+0x2a>
 8010e9a:	883b      	ldrh	r3, [r7, #0]
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d006      	beq.n	8010eae <pbuf_alloc_reference+0x2a>
 8010ea0:	4b0f      	ldr	r3, [pc, #60]	; (8010ee0 <pbuf_alloc_reference+0x5c>)
 8010ea2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010ea6:	490f      	ldr	r1, [pc, #60]	; (8010ee4 <pbuf_alloc_reference+0x60>)
 8010ea8:	480f      	ldr	r0, [pc, #60]	; (8010ee8 <pbuf_alloc_reference+0x64>)
 8010eaa:	f00a fd3f 	bl	801b92c <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010eae:	200b      	movs	r0, #11
 8010eb0:	f7ff fb06 	bl	80104c0 <memp_malloc>
 8010eb4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d101      	bne.n	8010ec0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	e00b      	b.n	8010ed8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010ec0:	8879      	ldrh	r1, [r7, #2]
 8010ec2:	887a      	ldrh	r2, [r7, #2]
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	9301      	str	r3, [sp, #4]
 8010ec8:	883b      	ldrh	r3, [r7, #0]
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	6879      	ldr	r1, [r7, #4]
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f7ff feb7 	bl	8010c44 <pbuf_init_alloced_pbuf>
  return p;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	08025c0c 	.word	0x08025c0c
 8010ee4:	08025d10 	.word	0x08025d10
 8010ee8:	08025c6c 	.word	0x08025c6c

08010eec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b088      	sub	sp, #32
 8010ef0:	af02      	add	r7, sp, #8
 8010ef2:	607b      	str	r3, [r7, #4]
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	73fb      	strb	r3, [r7, #15]
 8010ef8:	460b      	mov	r3, r1
 8010efa:	81bb      	strh	r3, [r7, #12]
 8010efc:	4613      	mov	r3, r2
 8010efe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010f00:	7bfb      	ldrb	r3, [r7, #15]
 8010f02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010f04:	8a7b      	ldrh	r3, [r7, #18]
 8010f06:	3303      	adds	r3, #3
 8010f08:	f023 0203 	bic.w	r2, r3, #3
 8010f0c:	89bb      	ldrh	r3, [r7, #12]
 8010f0e:	441a      	add	r2, r3
 8010f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d901      	bls.n	8010f1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010f16:	2300      	movs	r3, #0
 8010f18:	e018      	b.n	8010f4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010f1a:	6a3b      	ldr	r3, [r7, #32]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d007      	beq.n	8010f30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010f20:	8a7b      	ldrh	r3, [r7, #18]
 8010f22:	3303      	adds	r3, #3
 8010f24:	f023 0303 	bic.w	r3, r3, #3
 8010f28:	6a3a      	ldr	r2, [r7, #32]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	617b      	str	r3, [r7, #20]
 8010f2e:	e001      	b.n	8010f34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010f30:	2300      	movs	r3, #0
 8010f32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	89b9      	ldrh	r1, [r7, #12]
 8010f38:	89ba      	ldrh	r2, [r7, #12]
 8010f3a:	2302      	movs	r3, #2
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	897b      	ldrh	r3, [r7, #10]
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	460b      	mov	r3, r1
 8010f44:	6979      	ldr	r1, [r7, #20]
 8010f46:	f7ff fe7d 	bl	8010c44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010f4a:	687b      	ldr	r3, [r7, #4]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3718      	adds	r7, #24
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d106      	bne.n	8010f74 <pbuf_realloc+0x20>
 8010f66:	4b3a      	ldr	r3, [pc, #232]	; (8011050 <pbuf_realloc+0xfc>)
 8010f68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010f6c:	4939      	ldr	r1, [pc, #228]	; (8011054 <pbuf_realloc+0x100>)
 8010f6e:	483a      	ldr	r0, [pc, #232]	; (8011058 <pbuf_realloc+0x104>)
 8010f70:	f00a fcdc 	bl	801b92c <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	891b      	ldrh	r3, [r3, #8]
 8010f78:	887a      	ldrh	r2, [r7, #2]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d263      	bcs.n	8011046 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	891a      	ldrh	r2, [r3, #8]
 8010f82:	887b      	ldrh	r3, [r7, #2]
 8010f84:	1ad3      	subs	r3, r2, r3
 8010f86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010f88:	887b      	ldrh	r3, [r7, #2]
 8010f8a:	817b      	strh	r3, [r7, #10]
  q = p;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010f90:	e018      	b.n	8010fc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	895b      	ldrh	r3, [r3, #10]
 8010f96:	897a      	ldrh	r2, [r7, #10]
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	891a      	ldrh	r2, [r3, #8]
 8010fa0:	893b      	ldrh	r3, [r7, #8]
 8010fa2:	1ad3      	subs	r3, r2, r3
 8010fa4:	b29a      	uxth	r2, r3
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d106      	bne.n	8010fc4 <pbuf_realloc+0x70>
 8010fb6:	4b26      	ldr	r3, [pc, #152]	; (8011050 <pbuf_realloc+0xfc>)
 8010fb8:	f240 12af 	movw	r2, #431	; 0x1af
 8010fbc:	4927      	ldr	r1, [pc, #156]	; (801105c <pbuf_realloc+0x108>)
 8010fbe:	4826      	ldr	r0, [pc, #152]	; (8011058 <pbuf_realloc+0x104>)
 8010fc0:	f00a fcb4 	bl	801b92c <printf>
  while (rem_len > q->len) {
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	895b      	ldrh	r3, [r3, #10]
 8010fc8:	897a      	ldrh	r2, [r7, #10]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d8e1      	bhi.n	8010f92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	7b1b      	ldrb	r3, [r3, #12]
 8010fd2:	f003 030f 	and.w	r3, r3, #15
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d121      	bne.n	801101e <pbuf_realloc+0xca>
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	895b      	ldrh	r3, [r3, #10]
 8010fde:	897a      	ldrh	r2, [r7, #10]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d01c      	beq.n	801101e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	7b5b      	ldrb	r3, [r3, #13]
 8010fe8:	f003 0302 	and.w	r3, r3, #2
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d116      	bne.n	801101e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	685a      	ldr	r2, [r3, #4]
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	1ad3      	subs	r3, r2, r3
 8010ff8:	b29a      	uxth	r2, r3
 8010ffa:	897b      	ldrh	r3, [r7, #10]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	4619      	mov	r1, r3
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f7fe ffd0 	bl	800ffa8 <mem_trim>
 8011008:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d106      	bne.n	801101e <pbuf_realloc+0xca>
 8011010:	4b0f      	ldr	r3, [pc, #60]	; (8011050 <pbuf_realloc+0xfc>)
 8011012:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011016:	4912      	ldr	r1, [pc, #72]	; (8011060 <pbuf_realloc+0x10c>)
 8011018:	480f      	ldr	r0, [pc, #60]	; (8011058 <pbuf_realloc+0x104>)
 801101a:	f00a fc87 	bl	801b92c <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	897a      	ldrh	r2, [r7, #10]
 8011022:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	895a      	ldrh	r2, [r3, #10]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d004      	beq.n	801103e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4618      	mov	r0, r3
 801103a:	f000 f911 	bl	8011260 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2200      	movs	r2, #0
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	e000      	b.n	8011048 <pbuf_realloc+0xf4>
    return;
 8011046:	bf00      	nop

}
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	08025c0c 	.word	0x08025c0c
 8011054:	08025d24 	.word	0x08025d24
 8011058:	08025c6c 	.word	0x08025c6c
 801105c:	08025d3c 	.word	0x08025d3c
 8011060:	08025d54 	.word	0x08025d54

08011064 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	4613      	mov	r3, r2
 8011070:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d106      	bne.n	8011086 <pbuf_add_header_impl+0x22>
 8011078:	4b2b      	ldr	r3, [pc, #172]	; (8011128 <pbuf_add_header_impl+0xc4>)
 801107a:	f240 12df 	movw	r2, #479	; 0x1df
 801107e:	492b      	ldr	r1, [pc, #172]	; (801112c <pbuf_add_header_impl+0xc8>)
 8011080:	482b      	ldr	r0, [pc, #172]	; (8011130 <pbuf_add_header_impl+0xcc>)
 8011082:	f00a fc53 	bl	801b92c <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d003      	beq.n	8011094 <pbuf_add_header_impl+0x30>
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011092:	d301      	bcc.n	8011098 <pbuf_add_header_impl+0x34>
    return 1;
 8011094:	2301      	movs	r3, #1
 8011096:	e043      	b.n	8011120 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d101      	bne.n	80110a2 <pbuf_add_header_impl+0x3e>
    return 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	e03e      	b.n	8011120 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	891a      	ldrh	r2, [r3, #8]
 80110aa:	8a7b      	ldrh	r3, [r7, #18]
 80110ac:	4413      	add	r3, r2
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	8a7a      	ldrh	r2, [r7, #18]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d901      	bls.n	80110ba <pbuf_add_header_impl+0x56>
    return 1;
 80110b6:	2301      	movs	r3, #1
 80110b8:	e032      	b.n	8011120 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	7b1b      	ldrb	r3, [r3, #12]
 80110be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80110c0:	8a3b      	ldrh	r3, [r7, #16]
 80110c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00c      	beq.n	80110e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	685a      	ldr	r2, [r3, #4]
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	425b      	negs	r3, r3
 80110d2:	4413      	add	r3, r2
 80110d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	3310      	adds	r3, #16
 80110da:	697a      	ldr	r2, [r7, #20]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d20d      	bcs.n	80110fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80110e0:	2301      	movs	r3, #1
 80110e2:	e01d      	b.n	8011120 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80110e4:	79fb      	ldrb	r3, [r7, #7]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d006      	beq.n	80110f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	685a      	ldr	r2, [r3, #4]
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	425b      	negs	r3, r3
 80110f2:	4413      	add	r3, r2
 80110f4:	617b      	str	r3, [r7, #20]
 80110f6:	e001      	b.n	80110fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80110f8:	2301      	movs	r3, #1
 80110fa:	e011      	b.n	8011120 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	697a      	ldr	r2, [r7, #20]
 8011100:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	895a      	ldrh	r2, [r3, #10]
 8011106:	8a7b      	ldrh	r3, [r7, #18]
 8011108:	4413      	add	r3, r2
 801110a:	b29a      	uxth	r2, r3
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	891a      	ldrh	r2, [r3, #8]
 8011114:	8a7b      	ldrh	r3, [r7, #18]
 8011116:	4413      	add	r3, r2
 8011118:	b29a      	uxth	r2, r3
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	811a      	strh	r2, [r3, #8]


  return 0;
 801111e:	2300      	movs	r3, #0
}
 8011120:	4618      	mov	r0, r3
 8011122:	3718      	adds	r7, #24
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	08025c0c 	.word	0x08025c0c
 801112c:	08025d70 	.word	0x08025d70
 8011130:	08025c6c 	.word	0x08025c6c

08011134 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801113e:	2200      	movs	r2, #0
 8011140:	6839      	ldr	r1, [r7, #0]
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f7ff ff8e 	bl	8011064 <pbuf_add_header_impl>
 8011148:	4603      	mov	r3, r0
}
 801114a:	4618      	mov	r0, r3
 801114c:	3708      	adds	r7, #8
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
	...

08011154 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d106      	bne.n	8011172 <pbuf_remove_header+0x1e>
 8011164:	4b20      	ldr	r3, [pc, #128]	; (80111e8 <pbuf_remove_header+0x94>)
 8011166:	f240 224b 	movw	r2, #587	; 0x24b
 801116a:	4920      	ldr	r1, [pc, #128]	; (80111ec <pbuf_remove_header+0x98>)
 801116c:	4820      	ldr	r0, [pc, #128]	; (80111f0 <pbuf_remove_header+0x9c>)
 801116e:	f00a fbdd 	bl	801b92c <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d003      	beq.n	8011180 <pbuf_remove_header+0x2c>
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801117e:	d301      	bcc.n	8011184 <pbuf_remove_header+0x30>
    return 1;
 8011180:	2301      	movs	r3, #1
 8011182:	e02c      	b.n	80111de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d101      	bne.n	801118e <pbuf_remove_header+0x3a>
    return 0;
 801118a:	2300      	movs	r3, #0
 801118c:	e027      	b.n	80111de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	895b      	ldrh	r3, [r3, #10]
 8011196:	89fa      	ldrh	r2, [r7, #14]
 8011198:	429a      	cmp	r2, r3
 801119a:	d908      	bls.n	80111ae <pbuf_remove_header+0x5a>
 801119c:	4b12      	ldr	r3, [pc, #72]	; (80111e8 <pbuf_remove_header+0x94>)
 801119e:	f240 2255 	movw	r2, #597	; 0x255
 80111a2:	4914      	ldr	r1, [pc, #80]	; (80111f4 <pbuf_remove_header+0xa0>)
 80111a4:	4812      	ldr	r0, [pc, #72]	; (80111f0 <pbuf_remove_header+0x9c>)
 80111a6:	f00a fbc1 	bl	801b92c <printf>
 80111aa:	2301      	movs	r3, #1
 80111ac:	e017      	b.n	80111de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	685a      	ldr	r2, [r3, #4]
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	441a      	add	r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	895a      	ldrh	r2, [r3, #10]
 80111c4:	89fb      	ldrh	r3, [r7, #14]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	891a      	ldrh	r2, [r3, #8]
 80111d2:	89fb      	ldrh	r3, [r7, #14]
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80111dc:	2300      	movs	r3, #0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3710      	adds	r7, #16
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop
 80111e8:	08025c0c 	.word	0x08025c0c
 80111ec:	08025d70 	.word	0x08025d70
 80111f0:	08025c6c 	.word	0x08025c6c
 80111f4:	08025d7c 	.word	0x08025d7c

080111f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	460b      	mov	r3, r1
 8011202:	807b      	strh	r3, [r7, #2]
 8011204:	4613      	mov	r3, r2
 8011206:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801120c:	2b00      	cmp	r3, #0
 801120e:	da08      	bge.n	8011222 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011214:	425b      	negs	r3, r3
 8011216:	4619      	mov	r1, r3
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f7ff ff9b 	bl	8011154 <pbuf_remove_header>
 801121e:	4603      	mov	r3, r0
 8011220:	e007      	b.n	8011232 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011222:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011226:	787a      	ldrb	r2, [r7, #1]
 8011228:	4619      	mov	r1, r3
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f7ff ff1a 	bl	8011064 <pbuf_add_header_impl>
 8011230:	4603      	mov	r3, r0
  }
}
 8011232:	4618      	mov	r0, r3
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}

0801123a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801123a:	b580      	push	{r7, lr}
 801123c:	b082      	sub	sp, #8
 801123e:	af00      	add	r7, sp, #0
 8011240:	6078      	str	r0, [r7, #4]
 8011242:	460b      	mov	r3, r1
 8011244:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801124a:	2201      	movs	r2, #1
 801124c:	4619      	mov	r1, r3
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7ff ffd2 	bl	80111f8 <pbuf_header_impl>
 8011254:	4603      	mov	r3, r0
}
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
	...

08011260 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b088      	sub	sp, #32
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d10b      	bne.n	8011286 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d106      	bne.n	8011282 <pbuf_free+0x22>
 8011274:	4b3b      	ldr	r3, [pc, #236]	; (8011364 <pbuf_free+0x104>)
 8011276:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801127a:	493b      	ldr	r1, [pc, #236]	; (8011368 <pbuf_free+0x108>)
 801127c:	483b      	ldr	r0, [pc, #236]	; (801136c <pbuf_free+0x10c>)
 801127e:	f00a fb55 	bl	801b92c <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011282:	2300      	movs	r3, #0
 8011284:	e069      	b.n	801135a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011286:	2300      	movs	r3, #0
 8011288:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801128a:	e062      	b.n	8011352 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801128c:	f009 ff56 	bl	801b13c <sys_arch_protect>
 8011290:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	7b9b      	ldrb	r3, [r3, #14]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d106      	bne.n	80112a8 <pbuf_free+0x48>
 801129a:	4b32      	ldr	r3, [pc, #200]	; (8011364 <pbuf_free+0x104>)
 801129c:	f240 22f1 	movw	r2, #753	; 0x2f1
 80112a0:	4933      	ldr	r1, [pc, #204]	; (8011370 <pbuf_free+0x110>)
 80112a2:	4832      	ldr	r0, [pc, #200]	; (801136c <pbuf_free+0x10c>)
 80112a4:	f00a fb42 	bl	801b92c <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	7b9b      	ldrb	r3, [r3, #14]
 80112ac:	3b01      	subs	r3, #1
 80112ae:	b2da      	uxtb	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	739a      	strb	r2, [r3, #14]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	7b9b      	ldrb	r3, [r3, #14]
 80112b8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80112ba:	69b8      	ldr	r0, [r7, #24]
 80112bc:	f009 ff4c 	bl	801b158 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80112c0:	7dfb      	ldrb	r3, [r7, #23]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d143      	bne.n	801134e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	7b1b      	ldrb	r3, [r3, #12]
 80112d0:	f003 030f 	and.w	r3, r3, #15
 80112d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	7b5b      	ldrb	r3, [r3, #13]
 80112da:	f003 0302 	and.w	r3, r3, #2
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d011      	beq.n	8011306 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	691b      	ldr	r3, [r3, #16]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d106      	bne.n	80112fc <pbuf_free+0x9c>
 80112ee:	4b1d      	ldr	r3, [pc, #116]	; (8011364 <pbuf_free+0x104>)
 80112f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80112f4:	491f      	ldr	r1, [pc, #124]	; (8011374 <pbuf_free+0x114>)
 80112f6:	481d      	ldr	r0, [pc, #116]	; (801136c <pbuf_free+0x10c>)
 80112f8:	f00a fb18 	bl	801b92c <printf>
        pc->custom_free_function(p);
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	691b      	ldr	r3, [r3, #16]
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	4798      	blx	r3
 8011304:	e01d      	b.n	8011342 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011306:	7bfb      	ldrb	r3, [r7, #15]
 8011308:	2b02      	cmp	r3, #2
 801130a:	d104      	bne.n	8011316 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801130c:	6879      	ldr	r1, [r7, #4]
 801130e:	200c      	movs	r0, #12
 8011310:	f7ff f928 	bl	8010564 <memp_free>
 8011314:	e015      	b.n	8011342 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011316:	7bfb      	ldrb	r3, [r7, #15]
 8011318:	2b01      	cmp	r3, #1
 801131a:	d104      	bne.n	8011326 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	200b      	movs	r0, #11
 8011320:	f7ff f920 	bl	8010564 <memp_free>
 8011324:	e00d      	b.n	8011342 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011326:	7bfb      	ldrb	r3, [r7, #15]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d103      	bne.n	8011334 <pbuf_free+0xd4>
          mem_free(p);
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f7fe fdab 	bl	800fe88 <mem_free>
 8011332:	e006      	b.n	8011342 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011334:	4b0b      	ldr	r3, [pc, #44]	; (8011364 <pbuf_free+0x104>)
 8011336:	f240 320f 	movw	r2, #783	; 0x30f
 801133a:	490f      	ldr	r1, [pc, #60]	; (8011378 <pbuf_free+0x118>)
 801133c:	480b      	ldr	r0, [pc, #44]	; (801136c <pbuf_free+0x10c>)
 801133e:	f00a faf5 	bl	801b92c <printf>
        }
      }
      count++;
 8011342:	7ffb      	ldrb	r3, [r7, #31]
 8011344:	3301      	adds	r3, #1
 8011346:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	607b      	str	r3, [r7, #4]
 801134c:	e001      	b.n	8011352 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801134e:	2300      	movs	r3, #0
 8011350:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d199      	bne.n	801128c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011358:	7ffb      	ldrb	r3, [r7, #31]
}
 801135a:	4618      	mov	r0, r3
 801135c:	3720      	adds	r7, #32
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	08025c0c 	.word	0x08025c0c
 8011368:	08025d70 	.word	0x08025d70
 801136c:	08025c6c 	.word	0x08025c6c
 8011370:	08025d9c 	.word	0x08025d9c
 8011374:	08025db4 	.word	0x08025db4
 8011378:	08025dd8 	.word	0x08025dd8

0801137c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801137c:	b480      	push	{r7}
 801137e:	b085      	sub	sp, #20
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011384:	2300      	movs	r3, #0
 8011386:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011388:	e005      	b.n	8011396 <pbuf_clen+0x1a>
    ++len;
 801138a:	89fb      	ldrh	r3, [r7, #14]
 801138c:	3301      	adds	r3, #1
 801138e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d1f6      	bne.n	801138a <pbuf_clen+0xe>
  }
  return len;
 801139c:	89fb      	ldrh	r3, [r7, #14]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3714      	adds	r7, #20
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
	...

080113ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d016      	beq.n	80113e8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80113ba:	f009 febf 	bl	801b13c <sys_arch_protect>
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	7b9b      	ldrb	r3, [r3, #14]
 80113c4:	3301      	adds	r3, #1
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	739a      	strb	r2, [r3, #14]
 80113cc:	68f8      	ldr	r0, [r7, #12]
 80113ce:	f009 fec3 	bl	801b158 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	7b9b      	ldrb	r3, [r3, #14]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d106      	bne.n	80113e8 <pbuf_ref+0x3c>
 80113da:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <pbuf_ref+0x44>)
 80113dc:	f240 3242 	movw	r2, #834	; 0x342
 80113e0:	4904      	ldr	r1, [pc, #16]	; (80113f4 <pbuf_ref+0x48>)
 80113e2:	4805      	ldr	r0, [pc, #20]	; (80113f8 <pbuf_ref+0x4c>)
 80113e4:	f00a faa2 	bl	801b92c <printf>
  }
}
 80113e8:	bf00      	nop
 80113ea:	3710      	adds	r7, #16
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	08025c0c 	.word	0x08025c0c
 80113f4:	08025dec 	.word	0x08025dec
 80113f8:	08025c6c 	.word	0x08025c6c

080113fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d002      	beq.n	8011412 <pbuf_cat+0x16>
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d107      	bne.n	8011422 <pbuf_cat+0x26>
 8011412:	4b20      	ldr	r3, [pc, #128]	; (8011494 <pbuf_cat+0x98>)
 8011414:	f240 3259 	movw	r2, #857	; 0x359
 8011418:	491f      	ldr	r1, [pc, #124]	; (8011498 <pbuf_cat+0x9c>)
 801141a:	4820      	ldr	r0, [pc, #128]	; (801149c <pbuf_cat+0xa0>)
 801141c:	f00a fa86 	bl	801b92c <printf>
 8011420:	e034      	b.n	801148c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	60fb      	str	r3, [r7, #12]
 8011426:	e00a      	b.n	801143e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	891a      	ldrh	r2, [r3, #8]
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	891b      	ldrh	r3, [r3, #8]
 8011430:	4413      	add	r3, r2
 8011432:	b29a      	uxth	r2, r3
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	60fb      	str	r3, [r7, #12]
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1f0      	bne.n	8011428 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	891a      	ldrh	r2, [r3, #8]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	895b      	ldrh	r3, [r3, #10]
 801144e:	429a      	cmp	r2, r3
 8011450:	d006      	beq.n	8011460 <pbuf_cat+0x64>
 8011452:	4b10      	ldr	r3, [pc, #64]	; (8011494 <pbuf_cat+0x98>)
 8011454:	f240 3262 	movw	r2, #866	; 0x362
 8011458:	4911      	ldr	r1, [pc, #68]	; (80114a0 <pbuf_cat+0xa4>)
 801145a:	4810      	ldr	r0, [pc, #64]	; (801149c <pbuf_cat+0xa0>)
 801145c:	f00a fa66 	bl	801b92c <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d006      	beq.n	8011476 <pbuf_cat+0x7a>
 8011468:	4b0a      	ldr	r3, [pc, #40]	; (8011494 <pbuf_cat+0x98>)
 801146a:	f240 3263 	movw	r2, #867	; 0x363
 801146e:	490d      	ldr	r1, [pc, #52]	; (80114a4 <pbuf_cat+0xa8>)
 8011470:	480a      	ldr	r0, [pc, #40]	; (801149c <pbuf_cat+0xa0>)
 8011472:	f00a fa5b 	bl	801b92c <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	891a      	ldrh	r2, [r3, #8]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	891b      	ldrh	r3, [r3, #8]
 801147e:	4413      	add	r3, r2
 8011480:	b29a      	uxth	r2, r3
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	683a      	ldr	r2, [r7, #0]
 801148a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801148c:	3710      	adds	r7, #16
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	08025c0c 	.word	0x08025c0c
 8011498:	08025e00 	.word	0x08025e00
 801149c:	08025c6c 	.word	0x08025c6c
 80114a0:	08025e38 	.word	0x08025e38
 80114a4:	08025e68 	.word	0x08025e68

080114a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80114b2:	6839      	ldr	r1, [r7, #0]
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7ff ffa1 	bl	80113fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80114ba:	6838      	ldr	r0, [r7, #0]
 80114bc:	f7ff ff76 	bl	80113ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80114c0:	bf00      	nop
 80114c2:	3708      	adds	r7, #8
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b086      	sub	sp, #24
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80114d2:	2300      	movs	r3, #0
 80114d4:	617b      	str	r3, [r7, #20]
 80114d6:	2300      	movs	r3, #0
 80114d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d008      	beq.n	80114f2 <pbuf_copy+0x2a>
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d005      	beq.n	80114f2 <pbuf_copy+0x2a>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	891a      	ldrh	r2, [r3, #8]
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	891b      	ldrh	r3, [r3, #8]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d209      	bcs.n	8011506 <pbuf_copy+0x3e>
 80114f2:	4b57      	ldr	r3, [pc, #348]	; (8011650 <pbuf_copy+0x188>)
 80114f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80114f8:	4956      	ldr	r1, [pc, #344]	; (8011654 <pbuf_copy+0x18c>)
 80114fa:	4857      	ldr	r0, [pc, #348]	; (8011658 <pbuf_copy+0x190>)
 80114fc:	f00a fa16 	bl	801b92c <printf>
 8011500:	f06f 030f 	mvn.w	r3, #15
 8011504:	e09f      	b.n	8011646 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	895b      	ldrh	r3, [r3, #10]
 801150a:	461a      	mov	r2, r3
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	1ad2      	subs	r2, r2, r3
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	895b      	ldrh	r3, [r3, #10]
 8011514:	4619      	mov	r1, r3
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	1acb      	subs	r3, r1, r3
 801151a:	429a      	cmp	r2, r3
 801151c:	d306      	bcc.n	801152c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	895b      	ldrh	r3, [r3, #10]
 8011522:	461a      	mov	r2, r3
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	1ad3      	subs	r3, r2, r3
 8011528:	60fb      	str	r3, [r7, #12]
 801152a:	e005      	b.n	8011538 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	895b      	ldrh	r3, [r3, #10]
 8011530:	461a      	mov	r2, r3
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	18d0      	adds	r0, r2, r3
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	685a      	ldr	r2, [r3, #4]
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	4413      	add	r3, r2
 8011548:	68fa      	ldr	r2, [r7, #12]
 801154a:	4619      	mov	r1, r3
 801154c:	f009 ff40 	bl	801b3d0 <memcpy>
    offset_to += len;
 8011550:	697a      	ldr	r2, [r7, #20]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	4413      	add	r3, r2
 8011556:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011558:	693a      	ldr	r2, [r7, #16]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	4413      	add	r3, r2
 801155e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	895b      	ldrh	r3, [r3, #10]
 8011564:	461a      	mov	r2, r3
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	4293      	cmp	r3, r2
 801156a:	d906      	bls.n	801157a <pbuf_copy+0xb2>
 801156c:	4b38      	ldr	r3, [pc, #224]	; (8011650 <pbuf_copy+0x188>)
 801156e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011572:	493a      	ldr	r1, [pc, #232]	; (801165c <pbuf_copy+0x194>)
 8011574:	4838      	ldr	r0, [pc, #224]	; (8011658 <pbuf_copy+0x190>)
 8011576:	f00a f9d9 	bl	801b92c <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	895b      	ldrh	r3, [r3, #10]
 801157e:	461a      	mov	r2, r3
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	4293      	cmp	r3, r2
 8011584:	d906      	bls.n	8011594 <pbuf_copy+0xcc>
 8011586:	4b32      	ldr	r3, [pc, #200]	; (8011650 <pbuf_copy+0x188>)
 8011588:	f240 32da 	movw	r2, #986	; 0x3da
 801158c:	4934      	ldr	r1, [pc, #208]	; (8011660 <pbuf_copy+0x198>)
 801158e:	4832      	ldr	r0, [pc, #200]	; (8011658 <pbuf_copy+0x190>)
 8011590:	f00a f9cc 	bl	801b92c <printf>
    if (offset_from >= p_from->len) {
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	895b      	ldrh	r3, [r3, #10]
 8011598:	461a      	mov	r2, r3
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	4293      	cmp	r3, r2
 801159e:	d304      	bcc.n	80115aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80115a0:	2300      	movs	r3, #0
 80115a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	895b      	ldrh	r3, [r3, #10]
 80115ae:	461a      	mov	r2, r3
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d114      	bne.n	80115e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d10c      	bne.n	80115e0 <pbuf_copy+0x118>
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d009      	beq.n	80115e0 <pbuf_copy+0x118>
 80115cc:	4b20      	ldr	r3, [pc, #128]	; (8011650 <pbuf_copy+0x188>)
 80115ce:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80115d2:	4924      	ldr	r1, [pc, #144]	; (8011664 <pbuf_copy+0x19c>)
 80115d4:	4820      	ldr	r0, [pc, #128]	; (8011658 <pbuf_copy+0x190>)
 80115d6:	f00a f9a9 	bl	801b92c <printf>
 80115da:	f06f 030f 	mvn.w	r3, #15
 80115de:	e032      	b.n	8011646 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d013      	beq.n	801160e <pbuf_copy+0x146>
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	895a      	ldrh	r2, [r3, #10]
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	891b      	ldrh	r3, [r3, #8]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d10d      	bne.n	801160e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d009      	beq.n	801160e <pbuf_copy+0x146>
 80115fa:	4b15      	ldr	r3, [pc, #84]	; (8011650 <pbuf_copy+0x188>)
 80115fc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011600:	4919      	ldr	r1, [pc, #100]	; (8011668 <pbuf_copy+0x1a0>)
 8011602:	4815      	ldr	r0, [pc, #84]	; (8011658 <pbuf_copy+0x190>)
 8011604:	f00a f992 	bl	801b92c <printf>
 8011608:	f06f 0305 	mvn.w	r3, #5
 801160c:	e01b      	b.n	8011646 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d013      	beq.n	801163c <pbuf_copy+0x174>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	895a      	ldrh	r2, [r3, #10]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	891b      	ldrh	r3, [r3, #8]
 801161c:	429a      	cmp	r2, r3
 801161e:	d10d      	bne.n	801163c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d009      	beq.n	801163c <pbuf_copy+0x174>
 8011628:	4b09      	ldr	r3, [pc, #36]	; (8011650 <pbuf_copy+0x188>)
 801162a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801162e:	490e      	ldr	r1, [pc, #56]	; (8011668 <pbuf_copy+0x1a0>)
 8011630:	4809      	ldr	r0, [pc, #36]	; (8011658 <pbuf_copy+0x190>)
 8011632:	f00a f97b 	bl	801b92c <printf>
 8011636:	f06f 0305 	mvn.w	r3, #5
 801163a:	e004      	b.n	8011646 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	f47f af61 	bne.w	8011506 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	3718      	adds	r7, #24
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	08025c0c 	.word	0x08025c0c
 8011654:	08025eb4 	.word	0x08025eb4
 8011658:	08025c6c 	.word	0x08025c6c
 801165c:	08025ee4 	.word	0x08025ee4
 8011660:	08025efc 	.word	0x08025efc
 8011664:	08025f18 	.word	0x08025f18
 8011668:	08025f28 	.word	0x08025f28

0801166c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b088      	sub	sp, #32
 8011670:	af00      	add	r7, sp, #0
 8011672:	60f8      	str	r0, [r7, #12]
 8011674:	60b9      	str	r1, [r7, #8]
 8011676:	4611      	mov	r1, r2
 8011678:	461a      	mov	r2, r3
 801167a:	460b      	mov	r3, r1
 801167c:	80fb      	strh	r3, [r7, #6]
 801167e:	4613      	mov	r3, r2
 8011680:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011682:	2300      	movs	r3, #0
 8011684:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011686:	2300      	movs	r3, #0
 8011688:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d108      	bne.n	80116a2 <pbuf_copy_partial+0x36>
 8011690:	4b2b      	ldr	r3, [pc, #172]	; (8011740 <pbuf_copy_partial+0xd4>)
 8011692:	f240 420a 	movw	r2, #1034	; 0x40a
 8011696:	492b      	ldr	r1, [pc, #172]	; (8011744 <pbuf_copy_partial+0xd8>)
 8011698:	482b      	ldr	r0, [pc, #172]	; (8011748 <pbuf_copy_partial+0xdc>)
 801169a:	f00a f947 	bl	801b92c <printf>
 801169e:	2300      	movs	r3, #0
 80116a0:	e04a      	b.n	8011738 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d108      	bne.n	80116ba <pbuf_copy_partial+0x4e>
 80116a8:	4b25      	ldr	r3, [pc, #148]	; (8011740 <pbuf_copy_partial+0xd4>)
 80116aa:	f240 420b 	movw	r2, #1035	; 0x40b
 80116ae:	4927      	ldr	r1, [pc, #156]	; (801174c <pbuf_copy_partial+0xe0>)
 80116b0:	4825      	ldr	r0, [pc, #148]	; (8011748 <pbuf_copy_partial+0xdc>)
 80116b2:	f00a f93b 	bl	801b92c <printf>
 80116b6:	2300      	movs	r3, #0
 80116b8:	e03e      	b.n	8011738 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	61fb      	str	r3, [r7, #28]
 80116be:	e034      	b.n	801172a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80116c0:	88bb      	ldrh	r3, [r7, #4]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00a      	beq.n	80116dc <pbuf_copy_partial+0x70>
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	895b      	ldrh	r3, [r3, #10]
 80116ca:	88ba      	ldrh	r2, [r7, #4]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d305      	bcc.n	80116dc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	895b      	ldrh	r3, [r3, #10]
 80116d4:	88ba      	ldrh	r2, [r7, #4]
 80116d6:	1ad3      	subs	r3, r2, r3
 80116d8:	80bb      	strh	r3, [r7, #4]
 80116da:	e023      	b.n	8011724 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80116dc:	69fb      	ldr	r3, [r7, #28]
 80116de:	895a      	ldrh	r2, [r3, #10]
 80116e0:	88bb      	ldrh	r3, [r7, #4]
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80116e6:	8b3a      	ldrh	r2, [r7, #24]
 80116e8:	88fb      	ldrh	r3, [r7, #6]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d901      	bls.n	80116f2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80116ee:	88fb      	ldrh	r3, [r7, #6]
 80116f0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80116f2:	8b7b      	ldrh	r3, [r7, #26]
 80116f4:	68ba      	ldr	r2, [r7, #8]
 80116f6:	18d0      	adds	r0, r2, r3
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	685a      	ldr	r2, [r3, #4]
 80116fc:	88bb      	ldrh	r3, [r7, #4]
 80116fe:	4413      	add	r3, r2
 8011700:	8b3a      	ldrh	r2, [r7, #24]
 8011702:	4619      	mov	r1, r3
 8011704:	f009 fe64 	bl	801b3d0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011708:	8afa      	ldrh	r2, [r7, #22]
 801170a:	8b3b      	ldrh	r3, [r7, #24]
 801170c:	4413      	add	r3, r2
 801170e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011710:	8b7a      	ldrh	r2, [r7, #26]
 8011712:	8b3b      	ldrh	r3, [r7, #24]
 8011714:	4413      	add	r3, r2
 8011716:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011718:	88fa      	ldrh	r2, [r7, #6]
 801171a:	8b3b      	ldrh	r3, [r7, #24]
 801171c:	1ad3      	subs	r3, r2, r3
 801171e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011720:	2300      	movs	r3, #0
 8011722:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	61fb      	str	r3, [r7, #28]
 801172a:	88fb      	ldrh	r3, [r7, #6]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d002      	beq.n	8011736 <pbuf_copy_partial+0xca>
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d1c4      	bne.n	80116c0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011736:	8afb      	ldrh	r3, [r7, #22]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3720      	adds	r7, #32
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	08025c0c 	.word	0x08025c0c
 8011744:	08025f54 	.word	0x08025f54
 8011748:	08025c6c 	.word	0x08025c6c
 801174c:	08025f74 	.word	0x08025f74

08011750 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	4603      	mov	r3, r0
 8011758:	603a      	str	r2, [r7, #0]
 801175a:	71fb      	strb	r3, [r7, #7]
 801175c:	460b      	mov	r3, r1
 801175e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	8919      	ldrh	r1, [r3, #8]
 8011764:	88ba      	ldrh	r2, [r7, #4]
 8011766:	79fb      	ldrb	r3, [r7, #7]
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff fa95 	bl	8010c98 <pbuf_alloc>
 801176e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <pbuf_clone+0x2a>
    return NULL;
 8011776:	2300      	movs	r3, #0
 8011778:	e011      	b.n	801179e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	68f8      	ldr	r0, [r7, #12]
 801177e:	f7ff fea3 	bl	80114c8 <pbuf_copy>
 8011782:	4603      	mov	r3, r0
 8011784:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011786:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d006      	beq.n	801179c <pbuf_clone+0x4c>
 801178e:	4b06      	ldr	r3, [pc, #24]	; (80117a8 <pbuf_clone+0x58>)
 8011790:	f240 5224 	movw	r2, #1316	; 0x524
 8011794:	4905      	ldr	r1, [pc, #20]	; (80117ac <pbuf_clone+0x5c>)
 8011796:	4806      	ldr	r0, [pc, #24]	; (80117b0 <pbuf_clone+0x60>)
 8011798:	f00a f8c8 	bl	801b92c <printf>
  return q;
 801179c:	68fb      	ldr	r3, [r7, #12]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	08025c0c 	.word	0x08025c0c
 80117ac:	08026080 	.word	0x08026080
 80117b0:	08025c6c 	.word	0x08025c6c

080117b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80117b8:	f00a f8ca 	bl	801b950 <rand>
 80117bc:	4603      	mov	r3, r0
 80117be:	b29b      	uxth	r3, r3
 80117c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	4b01      	ldr	r3, [pc, #4]	; (80117d4 <tcp_init+0x20>)
 80117ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80117d0:	bf00      	nop
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	2000002c 	.word	0x2000002c

080117d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d105      	bne.n	80117f4 <tcp_free+0x1c>
 80117e8:	4b06      	ldr	r3, [pc, #24]	; (8011804 <tcp_free+0x2c>)
 80117ea:	22d4      	movs	r2, #212	; 0xd4
 80117ec:	4906      	ldr	r1, [pc, #24]	; (8011808 <tcp_free+0x30>)
 80117ee:	4807      	ldr	r0, [pc, #28]	; (801180c <tcp_free+0x34>)
 80117f0:	f00a f89c 	bl	801b92c <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80117f4:	6879      	ldr	r1, [r7, #4]
 80117f6:	2001      	movs	r0, #1
 80117f8:	f7fe feb4 	bl	8010564 <memp_free>
}
 80117fc:	bf00      	nop
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	0802610c 	.word	0x0802610c
 8011808:	0802613c 	.word	0x0802613c
 801180c:	08026150 	.word	0x08026150

08011810 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	7d1b      	ldrb	r3, [r3, #20]
 801181c:	2b01      	cmp	r3, #1
 801181e:	d105      	bne.n	801182c <tcp_free_listen+0x1c>
 8011820:	4b06      	ldr	r3, [pc, #24]	; (801183c <tcp_free_listen+0x2c>)
 8011822:	22df      	movs	r2, #223	; 0xdf
 8011824:	4906      	ldr	r1, [pc, #24]	; (8011840 <tcp_free_listen+0x30>)
 8011826:	4807      	ldr	r0, [pc, #28]	; (8011844 <tcp_free_listen+0x34>)
 8011828:	f00a f880 	bl	801b92c <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801182c:	6879      	ldr	r1, [r7, #4]
 801182e:	2002      	movs	r0, #2
 8011830:	f7fe fe98 	bl	8010564 <memp_free>
}
 8011834:	bf00      	nop
 8011836:	3708      	adds	r7, #8
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	0802610c 	.word	0x0802610c
 8011840:	08026178 	.word	0x08026178
 8011844:	08026150 	.word	0x08026150

08011848 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801184c:	f001 f8b8 	bl	80129c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011850:	4b07      	ldr	r3, [pc, #28]	; (8011870 <tcp_tmr+0x28>)
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	3301      	adds	r3, #1
 8011856:	b2da      	uxtb	r2, r3
 8011858:	4b05      	ldr	r3, [pc, #20]	; (8011870 <tcp_tmr+0x28>)
 801185a:	701a      	strb	r2, [r3, #0]
 801185c:	4b04      	ldr	r3, [pc, #16]	; (8011870 <tcp_tmr+0x28>)
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	f003 0301 	and.w	r3, r3, #1
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011868:	f000 fd6a 	bl	8012340 <tcp_slowtmr>
  }
}
 801186c:	bf00      	nop
 801186e:	bd80      	pop	{r7, pc}
 8011870:	20004f35 	.word	0x20004f35

08011874 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d105      	bne.n	8011890 <tcp_remove_listener+0x1c>
 8011884:	4b0d      	ldr	r3, [pc, #52]	; (80118bc <tcp_remove_listener+0x48>)
 8011886:	22ff      	movs	r2, #255	; 0xff
 8011888:	490d      	ldr	r1, [pc, #52]	; (80118c0 <tcp_remove_listener+0x4c>)
 801188a:	480e      	ldr	r0, [pc, #56]	; (80118c4 <tcp_remove_listener+0x50>)
 801188c:	f00a f84e 	bl	801b92c <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	60fb      	str	r3, [r7, #12]
 8011894:	e00a      	b.n	80118ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	429a      	cmp	r2, r3
 801189e:	d102      	bne.n	80118a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2200      	movs	r2, #0
 80118a4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	68db      	ldr	r3, [r3, #12]
 80118aa:	60fb      	str	r3, [r7, #12]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1f1      	bne.n	8011896 <tcp_remove_listener+0x22>
    }
  }
}
 80118b2:	bf00      	nop
 80118b4:	bf00      	nop
 80118b6:	3710      	adds	r7, #16
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	0802610c 	.word	0x0802610c
 80118c0:	08026194 	.word	0x08026194
 80118c4:	08026150 	.word	0x08026150

080118c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d106      	bne.n	80118e4 <tcp_listen_closed+0x1c>
 80118d6:	4b14      	ldr	r3, [pc, #80]	; (8011928 <tcp_listen_closed+0x60>)
 80118d8:	f240 1211 	movw	r2, #273	; 0x111
 80118dc:	4913      	ldr	r1, [pc, #76]	; (801192c <tcp_listen_closed+0x64>)
 80118de:	4814      	ldr	r0, [pc, #80]	; (8011930 <tcp_listen_closed+0x68>)
 80118e0:	f00a f824 	bl	801b92c <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	7d1b      	ldrb	r3, [r3, #20]
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	d006      	beq.n	80118fa <tcp_listen_closed+0x32>
 80118ec:	4b0e      	ldr	r3, [pc, #56]	; (8011928 <tcp_listen_closed+0x60>)
 80118ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 80118f2:	4910      	ldr	r1, [pc, #64]	; (8011934 <tcp_listen_closed+0x6c>)
 80118f4:	480e      	ldr	r0, [pc, #56]	; (8011930 <tcp_listen_closed+0x68>)
 80118f6:	f00a f819 	bl	801b92c <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80118fa:	2301      	movs	r3, #1
 80118fc:	60fb      	str	r3, [r7, #12]
 80118fe:	e00b      	b.n	8011918 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011900:	4a0d      	ldr	r2, [pc, #52]	; (8011938 <tcp_listen_closed+0x70>)
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	6879      	ldr	r1, [r7, #4]
 801190c:	4618      	mov	r0, r3
 801190e:	f7ff ffb1 	bl	8011874 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	3301      	adds	r3, #1
 8011916:	60fb      	str	r3, [r7, #12]
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2b03      	cmp	r3, #3
 801191c:	d9f0      	bls.n	8011900 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801191e:	bf00      	nop
 8011920:	bf00      	nop
 8011922:	3710      	adds	r7, #16
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	0802610c 	.word	0x0802610c
 801192c:	080261bc 	.word	0x080261bc
 8011930:	08026150 	.word	0x08026150
 8011934:	080261c8 	.word	0x080261c8
 8011938:	0802906c 	.word	0x0802906c

0801193c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801193c:	b5b0      	push	{r4, r5, r7, lr}
 801193e:	b088      	sub	sp, #32
 8011940:	af04      	add	r7, sp, #16
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	460b      	mov	r3, r1
 8011946:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d106      	bne.n	801195c <tcp_close_shutdown+0x20>
 801194e:	4b63      	ldr	r3, [pc, #396]	; (8011adc <tcp_close_shutdown+0x1a0>)
 8011950:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011954:	4962      	ldr	r1, [pc, #392]	; (8011ae0 <tcp_close_shutdown+0x1a4>)
 8011956:	4863      	ldr	r0, [pc, #396]	; (8011ae4 <tcp_close_shutdown+0x1a8>)
 8011958:	f009 ffe8 	bl	801b92c <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801195c:	78fb      	ldrb	r3, [r7, #3]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d066      	beq.n	8011a30 <tcp_close_shutdown+0xf4>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	7d1b      	ldrb	r3, [r3, #20]
 8011966:	2b04      	cmp	r3, #4
 8011968:	d003      	beq.n	8011972 <tcp_close_shutdown+0x36>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	7d1b      	ldrb	r3, [r3, #20]
 801196e:	2b07      	cmp	r3, #7
 8011970:	d15e      	bne.n	8011a30 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011976:	2b00      	cmp	r3, #0
 8011978:	d104      	bne.n	8011984 <tcp_close_shutdown+0x48>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801197e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011982:	d055      	beq.n	8011a30 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	8b5b      	ldrh	r3, [r3, #26]
 8011988:	f003 0310 	and.w	r3, r3, #16
 801198c:	2b00      	cmp	r3, #0
 801198e:	d106      	bne.n	801199e <tcp_close_shutdown+0x62>
 8011990:	4b52      	ldr	r3, [pc, #328]	; (8011adc <tcp_close_shutdown+0x1a0>)
 8011992:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011996:	4954      	ldr	r1, [pc, #336]	; (8011ae8 <tcp_close_shutdown+0x1ac>)
 8011998:	4852      	ldr	r0, [pc, #328]	; (8011ae4 <tcp_close_shutdown+0x1a8>)
 801199a:	f009 ffc7 	bl	801b92c <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80119a6:	687d      	ldr	r5, [r7, #4]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	3304      	adds	r3, #4
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	8ad2      	ldrh	r2, [r2, #22]
 80119b0:	6879      	ldr	r1, [r7, #4]
 80119b2:	8b09      	ldrh	r1, [r1, #24]
 80119b4:	9102      	str	r1, [sp, #8]
 80119b6:	9201      	str	r2, [sp, #4]
 80119b8:	9300      	str	r3, [sp, #0]
 80119ba:	462b      	mov	r3, r5
 80119bc:	4622      	mov	r2, r4
 80119be:	4601      	mov	r1, r0
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f005 fde7 	bl	8017594 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f001 fbc8 	bl	801315c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80119cc:	4b47      	ldr	r3, [pc, #284]	; (8011aec <tcp_close_shutdown+0x1b0>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d105      	bne.n	80119e2 <tcp_close_shutdown+0xa6>
 80119d6:	4b45      	ldr	r3, [pc, #276]	; (8011aec <tcp_close_shutdown+0x1b0>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	4a43      	ldr	r2, [pc, #268]	; (8011aec <tcp_close_shutdown+0x1b0>)
 80119de:	6013      	str	r3, [r2, #0]
 80119e0:	e013      	b.n	8011a0a <tcp_close_shutdown+0xce>
 80119e2:	4b42      	ldr	r3, [pc, #264]	; (8011aec <tcp_close_shutdown+0x1b0>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	60fb      	str	r3, [r7, #12]
 80119e8:	e00c      	b.n	8011a04 <tcp_close_shutdown+0xc8>
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d104      	bne.n	80119fe <tcp_close_shutdown+0xc2>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	68da      	ldr	r2, [r3, #12]
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	60da      	str	r2, [r3, #12]
 80119fc:	e005      	b.n	8011a0a <tcp_close_shutdown+0xce>
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	60fb      	str	r3, [r7, #12]
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1ef      	bne.n	80119ea <tcp_close_shutdown+0xae>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	60da      	str	r2, [r3, #12]
 8011a10:	4b37      	ldr	r3, [pc, #220]	; (8011af0 <tcp_close_shutdown+0x1b4>)
 8011a12:	2201      	movs	r2, #1
 8011a14:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011a16:	4b37      	ldr	r3, [pc, #220]	; (8011af4 <tcp_close_shutdown+0x1b8>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d102      	bne.n	8011a26 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011a20:	f004 f85c 	bl	8015adc <tcp_trigger_input_pcb_close>
 8011a24:	e002      	b.n	8011a2c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7ff fed6 	bl	80117d8 <tcp_free>
      }
      return ERR_OK;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	e050      	b.n	8011ad2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	7d1b      	ldrb	r3, [r3, #20]
 8011a34:	2b02      	cmp	r3, #2
 8011a36:	d03b      	beq.n	8011ab0 <tcp_close_shutdown+0x174>
 8011a38:	2b02      	cmp	r3, #2
 8011a3a:	dc44      	bgt.n	8011ac6 <tcp_close_shutdown+0x18a>
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d002      	beq.n	8011a46 <tcp_close_shutdown+0x10a>
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d02a      	beq.n	8011a9a <tcp_close_shutdown+0x15e>
 8011a44:	e03f      	b.n	8011ac6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	8adb      	ldrh	r3, [r3, #22]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d021      	beq.n	8011a92 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011a4e:	4b2a      	ldr	r3, [pc, #168]	; (8011af8 <tcp_close_shutdown+0x1bc>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d105      	bne.n	8011a64 <tcp_close_shutdown+0x128>
 8011a58:	4b27      	ldr	r3, [pc, #156]	; (8011af8 <tcp_close_shutdown+0x1bc>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	4a26      	ldr	r2, [pc, #152]	; (8011af8 <tcp_close_shutdown+0x1bc>)
 8011a60:	6013      	str	r3, [r2, #0]
 8011a62:	e013      	b.n	8011a8c <tcp_close_shutdown+0x150>
 8011a64:	4b24      	ldr	r3, [pc, #144]	; (8011af8 <tcp_close_shutdown+0x1bc>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	60bb      	str	r3, [r7, #8]
 8011a6a:	e00c      	b.n	8011a86 <tcp_close_shutdown+0x14a>
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d104      	bne.n	8011a80 <tcp_close_shutdown+0x144>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68da      	ldr	r2, [r3, #12]
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	60da      	str	r2, [r3, #12]
 8011a7e:	e005      	b.n	8011a8c <tcp_close_shutdown+0x150>
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	60bb      	str	r3, [r7, #8]
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d1ef      	bne.n	8011a6c <tcp_close_shutdown+0x130>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f7ff fea0 	bl	80117d8 <tcp_free>
      break;
 8011a98:	e01a      	b.n	8011ad0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7ff ff14 	bl	80118c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011aa0:	6879      	ldr	r1, [r7, #4]
 8011aa2:	4816      	ldr	r0, [pc, #88]	; (8011afc <tcp_close_shutdown+0x1c0>)
 8011aa4:	f001 fbaa 	bl	80131fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7ff feb1 	bl	8011810 <tcp_free_listen>
      break;
 8011aae:	e00f      	b.n	8011ad0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011ab0:	6879      	ldr	r1, [r7, #4]
 8011ab2:	480e      	ldr	r0, [pc, #56]	; (8011aec <tcp_close_shutdown+0x1b0>)
 8011ab4:	f001 fba2 	bl	80131fc <tcp_pcb_remove>
 8011ab8:	4b0d      	ldr	r3, [pc, #52]	; (8011af0 <tcp_close_shutdown+0x1b4>)
 8011aba:	2201      	movs	r2, #1
 8011abc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f7ff fe8a 	bl	80117d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011ac4:	e004      	b.n	8011ad0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f81a 	bl	8011b00 <tcp_close_shutdown_fin>
 8011acc:	4603      	mov	r3, r0
 8011ace:	e000      	b.n	8011ad2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011ad0:	2300      	movs	r3, #0
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3710      	adds	r7, #16
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8011ada:	bf00      	nop
 8011adc:	0802610c 	.word	0x0802610c
 8011ae0:	080261e0 	.word	0x080261e0
 8011ae4:	08026150 	.word	0x08026150
 8011ae8:	08026200 	.word	0x08026200
 8011aec:	2000be48 	.word	0x2000be48
 8011af0:	2000be44 	.word	0x2000be44
 8011af4:	2000be5c 	.word	0x2000be5c
 8011af8:	2000be54 	.word	0x2000be54
 8011afc:	2000be50 	.word	0x2000be50

08011b00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d106      	bne.n	8011b1c <tcp_close_shutdown_fin+0x1c>
 8011b0e:	4b2e      	ldr	r3, [pc, #184]	; (8011bc8 <tcp_close_shutdown_fin+0xc8>)
 8011b10:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011b14:	492d      	ldr	r1, [pc, #180]	; (8011bcc <tcp_close_shutdown_fin+0xcc>)
 8011b16:	482e      	ldr	r0, [pc, #184]	; (8011bd0 <tcp_close_shutdown_fin+0xd0>)
 8011b18:	f009 ff08 	bl	801b92c <printf>

  switch (pcb->state) {
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	7d1b      	ldrb	r3, [r3, #20]
 8011b20:	2b07      	cmp	r3, #7
 8011b22:	d020      	beq.n	8011b66 <tcp_close_shutdown_fin+0x66>
 8011b24:	2b07      	cmp	r3, #7
 8011b26:	dc2b      	bgt.n	8011b80 <tcp_close_shutdown_fin+0x80>
 8011b28:	2b03      	cmp	r3, #3
 8011b2a:	d002      	beq.n	8011b32 <tcp_close_shutdown_fin+0x32>
 8011b2c:	2b04      	cmp	r3, #4
 8011b2e:	d00d      	beq.n	8011b4c <tcp_close_shutdown_fin+0x4c>
 8011b30:	e026      	b.n	8011b80 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f004 fe3c 	bl	80167b0 <tcp_send_fin>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d11f      	bne.n	8011b84 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2205      	movs	r2, #5
 8011b48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b4a:	e01b      	b.n	8011b84 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f004 fe2f 	bl	80167b0 <tcp_send_fin>
 8011b52:	4603      	mov	r3, r0
 8011b54:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d114      	bne.n	8011b88 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2205      	movs	r2, #5
 8011b62:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b64:	e010      	b.n	8011b88 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f004 fe22 	bl	80167b0 <tcp_send_fin>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d109      	bne.n	8011b8c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2209      	movs	r2, #9
 8011b7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b7e:	e005      	b.n	8011b8c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011b80:	2300      	movs	r3, #0
 8011b82:	e01c      	b.n	8011bbe <tcp_close_shutdown_fin+0xbe>
      break;
 8011b84:	bf00      	nop
 8011b86:	e002      	b.n	8011b8e <tcp_close_shutdown_fin+0x8e>
      break;
 8011b88:	bf00      	nop
 8011b8a:	e000      	b.n	8011b8e <tcp_close_shutdown_fin+0x8e>
      break;
 8011b8c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d103      	bne.n	8011b9e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f004 ff48 	bl	8016a2c <tcp_output>
 8011b9c:	e00d      	b.n	8011bba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba6:	d108      	bne.n	8011bba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	8b5b      	ldrh	r3, [r3, #26]
 8011bac:	f043 0308 	orr.w	r3, r3, #8
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	e001      	b.n	8011bbe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	0802610c 	.word	0x0802610c
 8011bcc:	080261bc 	.word	0x080261bc
 8011bd0:	08026150 	.word	0x08026150

08011bd4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d109      	bne.n	8011bf6 <tcp_close+0x22>
 8011be2:	4b0f      	ldr	r3, [pc, #60]	; (8011c20 <tcp_close+0x4c>)
 8011be4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011be8:	490e      	ldr	r1, [pc, #56]	; (8011c24 <tcp_close+0x50>)
 8011bea:	480f      	ldr	r0, [pc, #60]	; (8011c28 <tcp_close+0x54>)
 8011bec:	f009 fe9e 	bl	801b92c <printf>
 8011bf0:	f06f 030f 	mvn.w	r3, #15
 8011bf4:	e00f      	b.n	8011c16 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	7d1b      	ldrb	r3, [r3, #20]
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	d006      	beq.n	8011c0c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	8b5b      	ldrh	r3, [r3, #26]
 8011c02:	f043 0310 	orr.w	r3, r3, #16
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011c0c:	2101      	movs	r1, #1
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7ff fe94 	bl	801193c <tcp_close_shutdown>
 8011c14:	4603      	mov	r3, r0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3708      	adds	r7, #8
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	0802610c 	.word	0x0802610c
 8011c24:	0802621c 	.word	0x0802621c
 8011c28:	08026150 	.word	0x08026150

08011c2c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d109      	bne.n	8011c52 <tcp_shutdown+0x26>
 8011c3e:	4b26      	ldr	r3, [pc, #152]	; (8011cd8 <tcp_shutdown+0xac>)
 8011c40:	f240 2207 	movw	r2, #519	; 0x207
 8011c44:	4925      	ldr	r1, [pc, #148]	; (8011cdc <tcp_shutdown+0xb0>)
 8011c46:	4826      	ldr	r0, [pc, #152]	; (8011ce0 <tcp_shutdown+0xb4>)
 8011c48:	f009 fe70 	bl	801b92c <printf>
 8011c4c:	f06f 030f 	mvn.w	r3, #15
 8011c50:	e03d      	b.n	8011cce <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	7d1b      	ldrb	r3, [r3, #20]
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d102      	bne.n	8011c60 <tcp_shutdown+0x34>
    return ERR_CONN;
 8011c5a:	f06f 030a 	mvn.w	r3, #10
 8011c5e:	e036      	b.n	8011cce <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d01b      	beq.n	8011c9e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	8b5b      	ldrh	r3, [r3, #26]
 8011c6a:	f043 0310 	orr.w	r3, r3, #16
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d005      	beq.n	8011c86 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011c7a:	2101      	movs	r1, #1
 8011c7c:	68f8      	ldr	r0, [r7, #12]
 8011c7e:	f7ff fe5d 	bl	801193c <tcp_close_shutdown>
 8011c82:	4603      	mov	r3, r0
 8011c84:	e023      	b.n	8011cce <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d007      	beq.n	8011c9e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7ff fae4 	bl	8011260 <pbuf_free>
      pcb->refused_data = NULL;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d013      	beq.n	8011ccc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	7d1b      	ldrb	r3, [r3, #20]
 8011ca8:	2b04      	cmp	r3, #4
 8011caa:	dc02      	bgt.n	8011cb2 <tcp_shutdown+0x86>
 8011cac:	2b03      	cmp	r3, #3
 8011cae:	da02      	bge.n	8011cb6 <tcp_shutdown+0x8a>
 8011cb0:	e009      	b.n	8011cc6 <tcp_shutdown+0x9a>
 8011cb2:	2b07      	cmp	r3, #7
 8011cb4:	d107      	bne.n	8011cc6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	b2db      	uxtb	r3, r3
 8011cba:	4619      	mov	r1, r3
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	f7ff fe3d 	bl	801193c <tcp_close_shutdown>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	e003      	b.n	8011cce <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011cc6:	f06f 030a 	mvn.w	r3, #10
 8011cca:	e000      	b.n	8011cce <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011ccc:	2300      	movs	r3, #0
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	0802610c 	.word	0x0802610c
 8011cdc:	08026234 	.word	0x08026234
 8011ce0:	08026150 	.word	0x08026150

08011ce4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b08e      	sub	sp, #56	; 0x38
 8011ce8:	af04      	add	r7, sp, #16
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d107      	bne.n	8011d04 <tcp_abandon+0x20>
 8011cf4:	4b52      	ldr	r3, [pc, #328]	; (8011e40 <tcp_abandon+0x15c>)
 8011cf6:	f240 223d 	movw	r2, #573	; 0x23d
 8011cfa:	4952      	ldr	r1, [pc, #328]	; (8011e44 <tcp_abandon+0x160>)
 8011cfc:	4852      	ldr	r0, [pc, #328]	; (8011e48 <tcp_abandon+0x164>)
 8011cfe:	f009 fe15 	bl	801b92c <printf>
 8011d02:	e099      	b.n	8011e38 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	7d1b      	ldrb	r3, [r3, #20]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	d106      	bne.n	8011d1a <tcp_abandon+0x36>
 8011d0c:	4b4c      	ldr	r3, [pc, #304]	; (8011e40 <tcp_abandon+0x15c>)
 8011d0e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011d12:	494e      	ldr	r1, [pc, #312]	; (8011e4c <tcp_abandon+0x168>)
 8011d14:	484c      	ldr	r0, [pc, #304]	; (8011e48 <tcp_abandon+0x164>)
 8011d16:	f009 fe09 	bl	801b92c <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	7d1b      	ldrb	r3, [r3, #20]
 8011d1e:	2b0a      	cmp	r3, #10
 8011d20:	d107      	bne.n	8011d32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011d22:	6879      	ldr	r1, [r7, #4]
 8011d24:	484a      	ldr	r0, [pc, #296]	; (8011e50 <tcp_abandon+0x16c>)
 8011d26:	f001 fa69 	bl	80131fc <tcp_pcb_remove>
    tcp_free(pcb);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f7ff fd54 	bl	80117d8 <tcp_free>
 8011d30:	e082      	b.n	8011e38 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011d32:	2300      	movs	r3, #0
 8011d34:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011d36:	2300      	movs	r3, #0
 8011d38:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	691b      	ldr	r3, [r3, #16]
 8011d52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	7d1b      	ldrb	r3, [r3, #20]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d126      	bne.n	8011daa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	8adb      	ldrh	r3, [r3, #22]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d02e      	beq.n	8011dc2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d64:	4b3b      	ldr	r3, [pc, #236]	; (8011e54 <tcp_abandon+0x170>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	687a      	ldr	r2, [r7, #4]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d105      	bne.n	8011d7a <tcp_abandon+0x96>
 8011d6e:	4b39      	ldr	r3, [pc, #228]	; (8011e54 <tcp_abandon+0x170>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	4a37      	ldr	r2, [pc, #220]	; (8011e54 <tcp_abandon+0x170>)
 8011d76:	6013      	str	r3, [r2, #0]
 8011d78:	e013      	b.n	8011da2 <tcp_abandon+0xbe>
 8011d7a:	4b36      	ldr	r3, [pc, #216]	; (8011e54 <tcp_abandon+0x170>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	61fb      	str	r3, [r7, #28]
 8011d80:	e00c      	b.n	8011d9c <tcp_abandon+0xb8>
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d104      	bne.n	8011d96 <tcp_abandon+0xb2>
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	68da      	ldr	r2, [r3, #12]
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	60da      	str	r2, [r3, #12]
 8011d94:	e005      	b.n	8011da2 <tcp_abandon+0xbe>
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	61fb      	str	r3, [r7, #28]
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1ef      	bne.n	8011d82 <tcp_abandon+0x9e>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2200      	movs	r2, #0
 8011da6:	60da      	str	r2, [r3, #12]
 8011da8:	e00b      	b.n	8011dc2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	8adb      	ldrh	r3, [r3, #22]
 8011db2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011db4:	6879      	ldr	r1, [r7, #4]
 8011db6:	4828      	ldr	r0, [pc, #160]	; (8011e58 <tcp_abandon+0x174>)
 8011db8:	f001 fa20 	bl	80131fc <tcp_pcb_remove>
 8011dbc:	4b27      	ldr	r3, [pc, #156]	; (8011e5c <tcp_abandon+0x178>)
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d004      	beq.n	8011dd4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f000 fed6 	bl	8012b80 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d004      	beq.n	8011de6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de0:	4618      	mov	r0, r3
 8011de2:	f000 fecd 	bl	8012b80 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d004      	beq.n	8011df8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011df2:	4618      	mov	r0, r3
 8011df4:	f000 fec4 	bl	8012b80 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d00e      	beq.n	8011e1c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011dfe:	6879      	ldr	r1, [r7, #4]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	3304      	adds	r3, #4
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	8b12      	ldrh	r2, [r2, #24]
 8011e08:	9202      	str	r2, [sp, #8]
 8011e0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e0c:	9201      	str	r2, [sp, #4]
 8011e0e:	9300      	str	r3, [sp, #0]
 8011e10:	460b      	mov	r3, r1
 8011e12:	697a      	ldr	r2, [r7, #20]
 8011e14:	69b9      	ldr	r1, [r7, #24]
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f005 fbbc 	bl	8017594 <tcp_rst>
    }
    last_state = pcb->state;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	7d1b      	ldrb	r3, [r3, #20]
 8011e20:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f7ff fcd8 	bl	80117d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d004      	beq.n	8011e38 <tcp_abandon+0x154>
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	f06f 010c 	mvn.w	r1, #12
 8011e34:	68f8      	ldr	r0, [r7, #12]
 8011e36:	4798      	blx	r3
  }
}
 8011e38:	3728      	adds	r7, #40	; 0x28
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	0802610c 	.word	0x0802610c
 8011e44:	08026250 	.word	0x08026250
 8011e48:	08026150 	.word	0x08026150
 8011e4c:	0802626c 	.word	0x0802626c
 8011e50:	2000be58 	.word	0x2000be58
 8011e54:	2000be54 	.word	0x2000be54
 8011e58:	2000be48 	.word	0x2000be48
 8011e5c:	2000be44 	.word	0x2000be44

08011e60 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011e68:	2101      	movs	r1, #1
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f7ff ff3a 	bl	8011ce4 <tcp_abandon>
}
 8011e70:	bf00      	nop
 8011e72:	3708      	adds	r7, #8
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b088      	sub	sp, #32
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	4613      	mov	r3, r2
 8011e84:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011e86:	2304      	movs	r3, #4
 8011e88:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d101      	bne.n	8011e94 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011e90:	4b3e      	ldr	r3, [pc, #248]	; (8011f8c <tcp_bind+0x114>)
 8011e92:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d109      	bne.n	8011eae <tcp_bind+0x36>
 8011e9a:	4b3d      	ldr	r3, [pc, #244]	; (8011f90 <tcp_bind+0x118>)
 8011e9c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011ea0:	493c      	ldr	r1, [pc, #240]	; (8011f94 <tcp_bind+0x11c>)
 8011ea2:	483d      	ldr	r0, [pc, #244]	; (8011f98 <tcp_bind+0x120>)
 8011ea4:	f009 fd42 	bl	801b92c <printf>
 8011ea8:	f06f 030f 	mvn.w	r3, #15
 8011eac:	e06a      	b.n	8011f84 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	7d1b      	ldrb	r3, [r3, #20]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d009      	beq.n	8011eca <tcp_bind+0x52>
 8011eb6:	4b36      	ldr	r3, [pc, #216]	; (8011f90 <tcp_bind+0x118>)
 8011eb8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011ebc:	4937      	ldr	r1, [pc, #220]	; (8011f9c <tcp_bind+0x124>)
 8011ebe:	4836      	ldr	r0, [pc, #216]	; (8011f98 <tcp_bind+0x120>)
 8011ec0:	f009 fd34 	bl	801b92c <printf>
 8011ec4:	f06f 0305 	mvn.w	r3, #5
 8011ec8:	e05c      	b.n	8011f84 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011eca:	88fb      	ldrh	r3, [r7, #6]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d109      	bne.n	8011ee4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8011ed0:	f000 f9f0 	bl	80122b4 <tcp_new_port>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011ed8:	88fb      	ldrh	r3, [r7, #6]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d135      	bne.n	8011f4a <tcp_bind+0xd2>
      return ERR_BUF;
 8011ede:	f06f 0301 	mvn.w	r3, #1
 8011ee2:	e04f      	b.n	8011f84 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	61fb      	str	r3, [r7, #28]
 8011ee8:	e02b      	b.n	8011f42 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011eea:	4a2d      	ldr	r2, [pc, #180]	; (8011fa0 <tcp_bind+0x128>)
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	61bb      	str	r3, [r7, #24]
 8011ef6:	e01e      	b.n	8011f36 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	8adb      	ldrh	r3, [r3, #22]
 8011efc:	88fa      	ldrh	r2, [r7, #6]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d116      	bne.n	8011f30 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011f02:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d010      	beq.n	8011f2a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00c      	beq.n	8011f2a <tcp_bind+0xb2>
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d009      	beq.n	8011f2a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d005      	beq.n	8011f2a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	681a      	ldr	r2, [r3, #0]
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d102      	bne.n	8011f30 <tcp_bind+0xb8>
              return ERR_USE;
 8011f2a:	f06f 0307 	mvn.w	r3, #7
 8011f2e:	e029      	b.n	8011f84 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011f30:	69bb      	ldr	r3, [r7, #24]
 8011f32:	68db      	ldr	r3, [r3, #12]
 8011f34:	61bb      	str	r3, [r7, #24]
 8011f36:	69bb      	ldr	r3, [r7, #24]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1dd      	bne.n	8011ef8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8011f3c:	69fb      	ldr	r3, [r7, #28]
 8011f3e:	3301      	adds	r3, #1
 8011f40:	61fb      	str	r3, [r7, #28]
 8011f42:	69fa      	ldr	r2, [r7, #28]
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	dbcf      	blt.n	8011eea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d00c      	beq.n	8011f6a <tcp_bind+0xf2>
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d008      	beq.n	8011f6a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d002      	beq.n	8011f64 <tcp_bind+0xec>
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	e000      	b.n	8011f66 <tcp_bind+0xee>
 8011f64:	2300      	movs	r3, #0
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	88fa      	ldrh	r2, [r7, #6]
 8011f6e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011f70:	4b0c      	ldr	r3, [pc, #48]	; (8011fa4 <tcp_bind+0x12c>)
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	60da      	str	r2, [r3, #12]
 8011f78:	4a0a      	ldr	r2, [pc, #40]	; (8011fa4 <tcp_bind+0x12c>)
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6013      	str	r3, [r2, #0]
 8011f7e:	f005 fccb 	bl	8017918 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011f82:	2300      	movs	r3, #0
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3720      	adds	r7, #32
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}
 8011f8c:	08029094 	.word	0x08029094
 8011f90:	0802610c 	.word	0x0802610c
 8011f94:	080262a0 	.word	0x080262a0
 8011f98:	08026150 	.word	0x08026150
 8011f9c:	080262b8 	.word	0x080262b8
 8011fa0:	0802906c 	.word	0x0802906c
 8011fa4:	2000be54 	.word	0x2000be54

08011fa8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	60b9      	str	r1, [r7, #8]
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d106      	bne.n	8011fca <tcp_accept_null+0x22>
 8011fbc:	4b07      	ldr	r3, [pc, #28]	; (8011fdc <tcp_accept_null+0x34>)
 8011fbe:	f240 320f 	movw	r2, #783	; 0x30f
 8011fc2:	4907      	ldr	r1, [pc, #28]	; (8011fe0 <tcp_accept_null+0x38>)
 8011fc4:	4807      	ldr	r0, [pc, #28]	; (8011fe4 <tcp_accept_null+0x3c>)
 8011fc6:	f009 fcb1 	bl	801b92c <printf>

  tcp_abort(pcb);
 8011fca:	68b8      	ldr	r0, [r7, #8]
 8011fcc:	f7ff ff48 	bl	8011e60 <tcp_abort>

  return ERR_ABRT;
 8011fd0:	f06f 030c 	mvn.w	r3, #12
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3710      	adds	r7, #16
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	0802610c 	.word	0x0802610c
 8011fe0:	080262e0 	.word	0x080262e0
 8011fe4:	08026150 	.word	0x08026150

08011fe8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8011ff4:	78fb      	ldrb	r3, [r7, #3]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 f806 	bl	801200c <tcp_listen_with_backlog_and_err>
 8012000:	4603      	mov	r3, r0
}
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
	...

0801200c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b088      	sub	sp, #32
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	460b      	mov	r3, r1
 8012016:	607a      	str	r2, [r7, #4]
 8012018:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801201a:	2300      	movs	r3, #0
 801201c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d109      	bne.n	8012038 <tcp_listen_with_backlog_and_err+0x2c>
 8012024:	4b47      	ldr	r3, [pc, #284]	; (8012144 <tcp_listen_with_backlog_and_err+0x138>)
 8012026:	f240 3259 	movw	r2, #857	; 0x359
 801202a:	4947      	ldr	r1, [pc, #284]	; (8012148 <tcp_listen_with_backlog_and_err+0x13c>)
 801202c:	4847      	ldr	r0, [pc, #284]	; (801214c <tcp_listen_with_backlog_and_err+0x140>)
 801202e:	f009 fc7d 	bl	801b92c <printf>
 8012032:	23f0      	movs	r3, #240	; 0xf0
 8012034:	76fb      	strb	r3, [r7, #27]
 8012036:	e079      	b.n	801212c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	7d1b      	ldrb	r3, [r3, #20]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d009      	beq.n	8012054 <tcp_listen_with_backlog_and_err+0x48>
 8012040:	4b40      	ldr	r3, [pc, #256]	; (8012144 <tcp_listen_with_backlog_and_err+0x138>)
 8012042:	f240 325a 	movw	r2, #858	; 0x35a
 8012046:	4942      	ldr	r1, [pc, #264]	; (8012150 <tcp_listen_with_backlog_and_err+0x144>)
 8012048:	4840      	ldr	r0, [pc, #256]	; (801214c <tcp_listen_with_backlog_and_err+0x140>)
 801204a:	f009 fc6f 	bl	801b92c <printf>
 801204e:	23f1      	movs	r3, #241	; 0xf1
 8012050:	76fb      	strb	r3, [r7, #27]
 8012052:	e06b      	b.n	801212c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	7d1b      	ldrb	r3, [r3, #20]
 8012058:	2b01      	cmp	r3, #1
 801205a:	d104      	bne.n	8012066 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012060:	23f7      	movs	r3, #247	; 0xf7
 8012062:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012064:	e062      	b.n	801212c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8012066:	2002      	movs	r0, #2
 8012068:	f7fe fa2a 	bl	80104c0 <memp_malloc>
 801206c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d102      	bne.n	801207a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8012074:	23ff      	movs	r3, #255	; 0xff
 8012076:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012078:	e058      	b.n	801212c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	691a      	ldr	r2, [r3, #16]
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	8ada      	ldrh	r2, [r3, #22]
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	2201      	movs	r2, #1
 801208e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	7d5a      	ldrb	r2, [r3, #21]
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	7a5a      	ldrb	r2, [r3, #9]
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	2200      	movs	r2, #0
 80120a4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	7ada      	ldrb	r2, [r3, #11]
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	7a9a      	ldrb	r2, [r3, #10]
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	69fb      	ldr	r3, [r7, #28]
 80120bc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	8adb      	ldrh	r3, [r3, #22]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d021      	beq.n	801210a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80120c6:	4b23      	ldr	r3, [pc, #140]	; (8012154 <tcp_listen_with_backlog_and_err+0x148>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	68fa      	ldr	r2, [r7, #12]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d105      	bne.n	80120dc <tcp_listen_with_backlog_and_err+0xd0>
 80120d0:	4b20      	ldr	r3, [pc, #128]	; (8012154 <tcp_listen_with_backlog_and_err+0x148>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	4a1f      	ldr	r2, [pc, #124]	; (8012154 <tcp_listen_with_backlog_and_err+0x148>)
 80120d8:	6013      	str	r3, [r2, #0]
 80120da:	e013      	b.n	8012104 <tcp_listen_with_backlog_and_err+0xf8>
 80120dc:	4b1d      	ldr	r3, [pc, #116]	; (8012154 <tcp_listen_with_backlog_and_err+0x148>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	617b      	str	r3, [r7, #20]
 80120e2:	e00c      	b.n	80120fe <tcp_listen_with_backlog_and_err+0xf2>
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	68fa      	ldr	r2, [r7, #12]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d104      	bne.n	80120f8 <tcp_listen_with_backlog_and_err+0xec>
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	68da      	ldr	r2, [r3, #12]
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	60da      	str	r2, [r3, #12]
 80120f6:	e005      	b.n	8012104 <tcp_listen_with_backlog_and_err+0xf8>
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	617b      	str	r3, [r7, #20]
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1ef      	bne.n	80120e4 <tcp_listen_with_backlog_and_err+0xd8>
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2200      	movs	r2, #0
 8012108:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801210a:	68f8      	ldr	r0, [r7, #12]
 801210c:	f7ff fb64 	bl	80117d8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	4a11      	ldr	r2, [pc, #68]	; (8012158 <tcp_listen_with_backlog_and_err+0x14c>)
 8012114:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8012116:	4b11      	ldr	r3, [pc, #68]	; (801215c <tcp_listen_with_backlog_and_err+0x150>)
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	69fb      	ldr	r3, [r7, #28]
 801211c:	60da      	str	r2, [r3, #12]
 801211e:	4a0f      	ldr	r2, [pc, #60]	; (801215c <tcp_listen_with_backlog_and_err+0x150>)
 8012120:	69fb      	ldr	r3, [r7, #28]
 8012122:	6013      	str	r3, [r2, #0]
 8012124:	f005 fbf8 	bl	8017918 <tcp_timer_needed>
  res = ERR_OK;
 8012128:	2300      	movs	r3, #0
 801212a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d002      	beq.n	8012138 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	7efa      	ldrb	r2, [r7, #27]
 8012136:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012138:	69fb      	ldr	r3, [r7, #28]
}
 801213a:	4618      	mov	r0, r3
 801213c:	3720      	adds	r7, #32
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	0802610c 	.word	0x0802610c
 8012148:	08026300 	.word	0x08026300
 801214c:	08026150 	.word	0x08026150
 8012150:	08026330 	.word	0x08026330
 8012154:	2000be54 	.word	0x2000be54
 8012158:	08011fa9 	.word	0x08011fa9
 801215c:	2000be50 	.word	0x2000be50

08012160 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d106      	bne.n	801217c <tcp_update_rcv_ann_wnd+0x1c>
 801216e:	4b25      	ldr	r3, [pc, #148]	; (8012204 <tcp_update_rcv_ann_wnd+0xa4>)
 8012170:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012174:	4924      	ldr	r1, [pc, #144]	; (8012208 <tcp_update_rcv_ann_wnd+0xa8>)
 8012176:	4825      	ldr	r0, [pc, #148]	; (801220c <tcp_update_rcv_ann_wnd+0xac>)
 8012178:	f009 fbd8 	bl	801b92c <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012184:	4413      	add	r3, r2
 8012186:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012190:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012194:	bf28      	it	cs
 8012196:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801219a:	b292      	uxth	r2, r2
 801219c:	4413      	add	r3, r2
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	1ad3      	subs	r3, r2, r3
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	db08      	blt.n	80121b8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b2:	68fa      	ldr	r2, [r7, #12]
 80121b4:	1ad3      	subs	r3, r2, r3
 80121b6:	e020      	b.n	80121fa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	dd03      	ble.n	80121ce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2200      	movs	r2, #0
 80121ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80121cc:	e014      	b.n	80121f8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d6:	1ad3      	subs	r3, r2, r3
 80121d8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121e0:	d306      	bcc.n	80121f0 <tcp_update_rcv_ann_wnd+0x90>
 80121e2:	4b08      	ldr	r3, [pc, #32]	; (8012204 <tcp_update_rcv_ann_wnd+0xa4>)
 80121e4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80121e8:	4909      	ldr	r1, [pc, #36]	; (8012210 <tcp_update_rcv_ann_wnd+0xb0>)
 80121ea:	4808      	ldr	r0, [pc, #32]	; (801220c <tcp_update_rcv_ann_wnd+0xac>)
 80121ec:	f009 fb9e 	bl	801b92c <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80121f8:	2300      	movs	r3, #0
  }
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	0802610c 	.word	0x0802610c
 8012208:	08026368 	.word	0x08026368
 801220c:	08026150 	.word	0x08026150
 8012210:	0802638c 	.word	0x0802638c

08012214 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	460b      	mov	r3, r1
 801221e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d107      	bne.n	8012236 <tcp_recved+0x22>
 8012226:	4b1f      	ldr	r3, [pc, #124]	; (80122a4 <tcp_recved+0x90>)
 8012228:	f240 32cf 	movw	r2, #975	; 0x3cf
 801222c:	491e      	ldr	r1, [pc, #120]	; (80122a8 <tcp_recved+0x94>)
 801222e:	481f      	ldr	r0, [pc, #124]	; (80122ac <tcp_recved+0x98>)
 8012230:	f009 fb7c 	bl	801b92c <printf>
 8012234:	e032      	b.n	801229c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	7d1b      	ldrb	r3, [r3, #20]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d106      	bne.n	801224c <tcp_recved+0x38>
 801223e:	4b19      	ldr	r3, [pc, #100]	; (80122a4 <tcp_recved+0x90>)
 8012240:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012244:	491a      	ldr	r1, [pc, #104]	; (80122b0 <tcp_recved+0x9c>)
 8012246:	4819      	ldr	r0, [pc, #100]	; (80122ac <tcp_recved+0x98>)
 8012248:	f009 fb70 	bl	801b92c <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012250:	887b      	ldrh	r3, [r7, #2]
 8012252:	4413      	add	r3, r2
 8012254:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012256:	89fb      	ldrh	r3, [r7, #14]
 8012258:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801225c:	d804      	bhi.n	8012268 <tcp_recved+0x54>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012262:	89fa      	ldrh	r2, [r7, #14]
 8012264:	429a      	cmp	r2, r3
 8012266:	d204      	bcs.n	8012272 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801226e:	851a      	strh	r2, [r3, #40]	; 0x28
 8012270:	e002      	b.n	8012278 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	89fa      	ldrh	r2, [r7, #14]
 8012276:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f7ff ff71 	bl	8012160 <tcp_update_rcv_ann_wnd>
 801227e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012286:	d309      	bcc.n	801229c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	8b5b      	ldrh	r3, [r3, #26]
 801228c:	f043 0302 	orr.w	r3, r3, #2
 8012290:	b29a      	uxth	r2, r3
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f004 fbc8 	bl	8016a2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	0802610c 	.word	0x0802610c
 80122a8:	080263a8 	.word	0x080263a8
 80122ac:	08026150 	.word	0x08026150
 80122b0:	080263c0 	.word	0x080263c0

080122b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b083      	sub	sp, #12
 80122b8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80122ba:	2300      	movs	r3, #0
 80122bc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80122be:	4b1e      	ldr	r3, [pc, #120]	; (8012338 <tcp_new_port+0x84>)
 80122c0:	881b      	ldrh	r3, [r3, #0]
 80122c2:	3301      	adds	r3, #1
 80122c4:	b29a      	uxth	r2, r3
 80122c6:	4b1c      	ldr	r3, [pc, #112]	; (8012338 <tcp_new_port+0x84>)
 80122c8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80122ca:	4b1b      	ldr	r3, [pc, #108]	; (8012338 <tcp_new_port+0x84>)
 80122cc:	881b      	ldrh	r3, [r3, #0]
 80122ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d103      	bne.n	80122de <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80122d6:	4b18      	ldr	r3, [pc, #96]	; (8012338 <tcp_new_port+0x84>)
 80122d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80122dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80122de:	2300      	movs	r3, #0
 80122e0:	71fb      	strb	r3, [r7, #7]
 80122e2:	e01e      	b.n	8012322 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80122e4:	79fb      	ldrb	r3, [r7, #7]
 80122e6:	4a15      	ldr	r2, [pc, #84]	; (801233c <tcp_new_port+0x88>)
 80122e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	603b      	str	r3, [r7, #0]
 80122f0:	e011      	b.n	8012316 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	8ada      	ldrh	r2, [r3, #22]
 80122f6:	4b10      	ldr	r3, [pc, #64]	; (8012338 <tcp_new_port+0x84>)
 80122f8:	881b      	ldrh	r3, [r3, #0]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d108      	bne.n	8012310 <tcp_new_port+0x5c>
        n++;
 80122fe:	88bb      	ldrh	r3, [r7, #4]
 8012300:	3301      	adds	r3, #1
 8012302:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012304:	88bb      	ldrh	r3, [r7, #4]
 8012306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801230a:	d3d8      	bcc.n	80122be <tcp_new_port+0xa>
          return 0;
 801230c:	2300      	movs	r3, #0
 801230e:	e00d      	b.n	801232c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	603b      	str	r3, [r7, #0]
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d1ea      	bne.n	80122f2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801231c:	79fb      	ldrb	r3, [r7, #7]
 801231e:	3301      	adds	r3, #1
 8012320:	71fb      	strb	r3, [r7, #7]
 8012322:	79fb      	ldrb	r3, [r7, #7]
 8012324:	2b03      	cmp	r3, #3
 8012326:	d9dd      	bls.n	80122e4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012328:	4b03      	ldr	r3, [pc, #12]	; (8012338 <tcp_new_port+0x84>)
 801232a:	881b      	ldrh	r3, [r3, #0]
}
 801232c:	4618      	mov	r0, r3
 801232e:	370c      	adds	r7, #12
 8012330:	46bd      	mov	sp, r7
 8012332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012336:	4770      	bx	lr
 8012338:	2000002c 	.word	0x2000002c
 801233c:	0802906c 	.word	0x0802906c

08012340 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012340:	b5b0      	push	{r4, r5, r7, lr}
 8012342:	b090      	sub	sp, #64	; 0x40
 8012344:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012346:	2300      	movs	r3, #0
 8012348:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801234c:	4b94      	ldr	r3, [pc, #592]	; (80125a0 <tcp_slowtmr+0x260>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	3301      	adds	r3, #1
 8012352:	4a93      	ldr	r2, [pc, #588]	; (80125a0 <tcp_slowtmr+0x260>)
 8012354:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012356:	4b93      	ldr	r3, [pc, #588]	; (80125a4 <tcp_slowtmr+0x264>)
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	3301      	adds	r3, #1
 801235c:	b2da      	uxtb	r2, r3
 801235e:	4b91      	ldr	r3, [pc, #580]	; (80125a4 <tcp_slowtmr+0x264>)
 8012360:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012362:	2300      	movs	r3, #0
 8012364:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012366:	4b90      	ldr	r3, [pc, #576]	; (80125a8 <tcp_slowtmr+0x268>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801236c:	e29d      	b.n	80128aa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012370:	7d1b      	ldrb	r3, [r3, #20]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d106      	bne.n	8012384 <tcp_slowtmr+0x44>
 8012376:	4b8d      	ldr	r3, [pc, #564]	; (80125ac <tcp_slowtmr+0x26c>)
 8012378:	f240 42be 	movw	r2, #1214	; 0x4be
 801237c:	498c      	ldr	r1, [pc, #560]	; (80125b0 <tcp_slowtmr+0x270>)
 801237e:	488d      	ldr	r0, [pc, #564]	; (80125b4 <tcp_slowtmr+0x274>)
 8012380:	f009 fad4 	bl	801b92c <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012386:	7d1b      	ldrb	r3, [r3, #20]
 8012388:	2b01      	cmp	r3, #1
 801238a:	d106      	bne.n	801239a <tcp_slowtmr+0x5a>
 801238c:	4b87      	ldr	r3, [pc, #540]	; (80125ac <tcp_slowtmr+0x26c>)
 801238e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012392:	4989      	ldr	r1, [pc, #548]	; (80125b8 <tcp_slowtmr+0x278>)
 8012394:	4887      	ldr	r0, [pc, #540]	; (80125b4 <tcp_slowtmr+0x274>)
 8012396:	f009 fac9 	bl	801b92c <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239c:	7d1b      	ldrb	r3, [r3, #20]
 801239e:	2b0a      	cmp	r3, #10
 80123a0:	d106      	bne.n	80123b0 <tcp_slowtmr+0x70>
 80123a2:	4b82      	ldr	r3, [pc, #520]	; (80125ac <tcp_slowtmr+0x26c>)
 80123a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80123a8:	4984      	ldr	r1, [pc, #528]	; (80125bc <tcp_slowtmr+0x27c>)
 80123aa:	4882      	ldr	r0, [pc, #520]	; (80125b4 <tcp_slowtmr+0x274>)
 80123ac:	f009 fabe 	bl	801b92c <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80123b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b2:	7f9a      	ldrb	r2, [r3, #30]
 80123b4:	4b7b      	ldr	r3, [pc, #492]	; (80125a4 <tcp_slowtmr+0x264>)
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d105      	bne.n	80123c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80123bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80123c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80123c6:	e270      	b.n	80128aa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80123c8:	4b76      	ldr	r3, [pc, #472]	; (80125a4 <tcp_slowtmr+0x264>)
 80123ca:	781a      	ldrb	r2, [r3, #0]
 80123cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80123d0:	2300      	movs	r3, #0
 80123d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80123dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123de:	7d1b      	ldrb	r3, [r3, #20]
 80123e0:	2b02      	cmp	r3, #2
 80123e2:	d10a      	bne.n	80123fa <tcp_slowtmr+0xba>
 80123e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80123ea:	2b05      	cmp	r3, #5
 80123ec:	d905      	bls.n	80123fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 80123ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123f2:	3301      	adds	r3, #1
 80123f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123f8:	e11e      	b.n	8012638 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80123fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012400:	2b0b      	cmp	r3, #11
 8012402:	d905      	bls.n	8012410 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012408:	3301      	adds	r3, #1
 801240a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801240e:	e113      	b.n	8012638 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012412:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012416:	2b00      	cmp	r3, #0
 8012418:	d075      	beq.n	8012506 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801241e:	2b00      	cmp	r3, #0
 8012420:	d006      	beq.n	8012430 <tcp_slowtmr+0xf0>
 8012422:	4b62      	ldr	r3, [pc, #392]	; (80125ac <tcp_slowtmr+0x26c>)
 8012424:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012428:	4965      	ldr	r1, [pc, #404]	; (80125c0 <tcp_slowtmr+0x280>)
 801242a:	4862      	ldr	r0, [pc, #392]	; (80125b4 <tcp_slowtmr+0x274>)
 801242c:	f009 fa7e 	bl	801b92c <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012434:	2b00      	cmp	r3, #0
 8012436:	d106      	bne.n	8012446 <tcp_slowtmr+0x106>
 8012438:	4b5c      	ldr	r3, [pc, #368]	; (80125ac <tcp_slowtmr+0x26c>)
 801243a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801243e:	4961      	ldr	r1, [pc, #388]	; (80125c4 <tcp_slowtmr+0x284>)
 8012440:	485c      	ldr	r0, [pc, #368]	; (80125b4 <tcp_slowtmr+0x274>)
 8012442:	f009 fa73 	bl	801b92c <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012448:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801244c:	2b0b      	cmp	r3, #11
 801244e:	d905      	bls.n	801245c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012454:	3301      	adds	r3, #1
 8012456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801245a:	e0ed      	b.n	8012638 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012462:	3b01      	subs	r3, #1
 8012464:	4a58      	ldr	r2, [pc, #352]	; (80125c8 <tcp_slowtmr+0x288>)
 8012466:	5cd3      	ldrb	r3, [r2, r3]
 8012468:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012470:	7c7a      	ldrb	r2, [r7, #17]
 8012472:	429a      	cmp	r2, r3
 8012474:	d907      	bls.n	8012486 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012478:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801247c:	3301      	adds	r3, #1
 801247e:	b2da      	uxtb	r2, r3
 8012480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012482:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012488:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801248c:	7c7a      	ldrb	r2, [r7, #17]
 801248e:	429a      	cmp	r2, r3
 8012490:	f200 80d2 	bhi.w	8012638 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012494:	2301      	movs	r3, #1
 8012496:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d108      	bne.n	80124b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80124a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124a4:	f005 f96a 	bl	801777c <tcp_zero_window_probe>
 80124a8:	4603      	mov	r3, r0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d014      	beq.n	80124d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80124ae:	2300      	movs	r3, #0
 80124b0:	623b      	str	r3, [r7, #32]
 80124b2:	e011      	b.n	80124d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80124b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124ba:	4619      	mov	r1, r3
 80124bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124be:	f004 f82f 	bl	8016520 <tcp_split_unsent_seg>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d107      	bne.n	80124d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80124c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124ca:	f004 faaf 	bl	8016a2c <tcp_output>
 80124ce:	4603      	mov	r3, r0
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d101      	bne.n	80124d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80124d4:	2300      	movs	r3, #0
 80124d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80124d8:	6a3b      	ldr	r3, [r7, #32]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	f000 80ac 	beq.w	8012638 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80124e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e2:	2200      	movs	r2, #0
 80124e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80124e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80124ee:	2b06      	cmp	r3, #6
 80124f0:	f200 80a2 	bhi.w	8012638 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80124f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80124fa:	3301      	adds	r3, #1
 80124fc:	b2da      	uxtb	r2, r3
 80124fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012500:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012504:	e098      	b.n	8012638 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012508:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801250c:	2b00      	cmp	r3, #0
 801250e:	db0f      	blt.n	8012530 <tcp_slowtmr+0x1f0>
 8012510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012512:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012516:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801251a:	4293      	cmp	r3, r2
 801251c:	d008      	beq.n	8012530 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012520:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012524:	b29b      	uxth	r3, r3
 8012526:	3301      	adds	r3, #1
 8012528:	b29b      	uxth	r3, r3
 801252a:	b21a      	sxth	r2, r3
 801252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012532:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012538:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801253c:	429a      	cmp	r2, r3
 801253e:	db7b      	blt.n	8012638 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012542:	f004 fd65 	bl	8017010 <tcp_rexmit_rto_prepare>
 8012546:	4603      	mov	r3, r0
 8012548:	2b00      	cmp	r3, #0
 801254a:	d007      	beq.n	801255c <tcp_slowtmr+0x21c>
 801254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012550:	2b00      	cmp	r3, #0
 8012552:	d171      	bne.n	8012638 <tcp_slowtmr+0x2f8>
 8012554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012558:	2b00      	cmp	r3, #0
 801255a:	d06d      	beq.n	8012638 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255e:	7d1b      	ldrb	r3, [r3, #20]
 8012560:	2b02      	cmp	r3, #2
 8012562:	d03a      	beq.n	80125da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801256a:	2b0c      	cmp	r3, #12
 801256c:	bf28      	it	cs
 801256e:	230c      	movcs	r3, #12
 8012570:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012574:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012578:	10db      	asrs	r3, r3, #3
 801257a:	b21b      	sxth	r3, r3
 801257c:	461a      	mov	r2, r3
 801257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012580:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012584:	4413      	add	r3, r2
 8012586:	7efa      	ldrb	r2, [r7, #27]
 8012588:	4910      	ldr	r1, [pc, #64]	; (80125cc <tcp_slowtmr+0x28c>)
 801258a:	5c8a      	ldrb	r2, [r1, r2]
 801258c:	4093      	lsls	r3, r2
 801258e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012596:	4293      	cmp	r3, r2
 8012598:	dc1a      	bgt.n	80125d0 <tcp_slowtmr+0x290>
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	b21a      	sxth	r2, r3
 801259e:	e019      	b.n	80125d4 <tcp_slowtmr+0x294>
 80125a0:	2000be4c 	.word	0x2000be4c
 80125a4:	20004f36 	.word	0x20004f36
 80125a8:	2000be48 	.word	0x2000be48
 80125ac:	0802610c 	.word	0x0802610c
 80125b0:	08026450 	.word	0x08026450
 80125b4:	08026150 	.word	0x08026150
 80125b8:	0802647c 	.word	0x0802647c
 80125bc:	080264a8 	.word	0x080264a8
 80125c0:	080264d8 	.word	0x080264d8
 80125c4:	0802650c 	.word	0x0802650c
 80125c8:	08029064 	.word	0x08029064
 80125cc:	08029054 	.word	0x08029054
 80125d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80125d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80125da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125dc:	2200      	movs	r2, #0
 80125de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80125e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80125ec:	4293      	cmp	r3, r2
 80125ee:	bf28      	it	cs
 80125f0:	4613      	movcs	r3, r2
 80125f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80125f4:	8a7b      	ldrh	r3, [r7, #18]
 80125f6:	085b      	lsrs	r3, r3, #1
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012602:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801260a:	005b      	lsls	r3, r3, #1
 801260c:	b29b      	uxth	r3, r3
 801260e:	429a      	cmp	r2, r3
 8012610:	d206      	bcs.n	8012620 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012616:	005b      	lsls	r3, r3, #1
 8012618:	b29a      	uxth	r2, r3
 801261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012622:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262c:	2200      	movs	r2, #0
 801262e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012634:	f004 fd5c 	bl	80170f0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801263a:	7d1b      	ldrb	r3, [r3, #20]
 801263c:	2b06      	cmp	r3, #6
 801263e:	d111      	bne.n	8012664 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012642:	8b5b      	ldrh	r3, [r3, #26]
 8012644:	f003 0310 	and.w	r3, r3, #16
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00b      	beq.n	8012664 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801264c:	4b9c      	ldr	r3, [pc, #624]	; (80128c0 <tcp_slowtmr+0x580>)
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012652:	6a1b      	ldr	r3, [r3, #32]
 8012654:	1ad3      	subs	r3, r2, r3
 8012656:	2b28      	cmp	r3, #40	; 0x28
 8012658:	d904      	bls.n	8012664 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801265a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801265e:	3301      	adds	r3, #1
 8012660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012666:	7a5b      	ldrb	r3, [r3, #9]
 8012668:	f003 0308 	and.w	r3, r3, #8
 801266c:	2b00      	cmp	r3, #0
 801266e:	d04a      	beq.n	8012706 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012674:	2b04      	cmp	r3, #4
 8012676:	d003      	beq.n	8012680 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801267c:	2b07      	cmp	r3, #7
 801267e:	d142      	bne.n	8012706 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012680:	4b8f      	ldr	r3, [pc, #572]	; (80128c0 <tcp_slowtmr+0x580>)
 8012682:	681a      	ldr	r2, [r3, #0]
 8012684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012686:	6a1b      	ldr	r3, [r3, #32]
 8012688:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012690:	4b8c      	ldr	r3, [pc, #560]	; (80128c4 <tcp_slowtmr+0x584>)
 8012692:	440b      	add	r3, r1
 8012694:	498c      	ldr	r1, [pc, #560]	; (80128c8 <tcp_slowtmr+0x588>)
 8012696:	fba1 1303 	umull	r1, r3, r1, r3
 801269a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801269c:	429a      	cmp	r2, r3
 801269e:	d90a      	bls.n	80126b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80126a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126a4:	3301      	adds	r3, #1
 80126a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80126aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80126ae:	3301      	adds	r3, #1
 80126b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80126b4:	e027      	b.n	8012706 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126b6:	4b82      	ldr	r3, [pc, #520]	; (80128c0 <tcp_slowtmr+0x580>)
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126bc:	6a1b      	ldr	r3, [r3, #32]
 80126be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80126c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80126c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80126cc:	4618      	mov	r0, r3
 80126ce:	4b7f      	ldr	r3, [pc, #508]	; (80128cc <tcp_slowtmr+0x58c>)
 80126d0:	fb03 f300 	mul.w	r3, r3, r0
 80126d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80126d6:	497c      	ldr	r1, [pc, #496]	; (80128c8 <tcp_slowtmr+0x588>)
 80126d8:	fba1 1303 	umull	r1, r3, r1, r3
 80126dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126de:	429a      	cmp	r2, r3
 80126e0:	d911      	bls.n	8012706 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80126e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126e4:	f005 f80a 	bl	80176fc <tcp_keepalive>
 80126e8:	4603      	mov	r3, r0
 80126ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80126ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d107      	bne.n	8012706 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80126f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80126fc:	3301      	adds	r3, #1
 80126fe:	b2da      	uxtb	r2, r3
 8012700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012702:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801270a:	2b00      	cmp	r3, #0
 801270c:	d011      	beq.n	8012732 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801270e:	4b6c      	ldr	r3, [pc, #432]	; (80128c0 <tcp_slowtmr+0x580>)
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012714:	6a1b      	ldr	r3, [r3, #32]
 8012716:	1ad2      	subs	r2, r2, r3
 8012718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801271e:	4619      	mov	r1, r3
 8012720:	460b      	mov	r3, r1
 8012722:	005b      	lsls	r3, r3, #1
 8012724:	440b      	add	r3, r1
 8012726:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012728:	429a      	cmp	r2, r3
 801272a:	d302      	bcc.n	8012732 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801272c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801272e:	f000 fec9 	bl	80134c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012734:	7d1b      	ldrb	r3, [r3, #20]
 8012736:	2b03      	cmp	r3, #3
 8012738:	d10b      	bne.n	8012752 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801273a:	4b61      	ldr	r3, [pc, #388]	; (80128c0 <tcp_slowtmr+0x580>)
 801273c:	681a      	ldr	r2, [r3, #0]
 801273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012740:	6a1b      	ldr	r3, [r3, #32]
 8012742:	1ad3      	subs	r3, r2, r3
 8012744:	2b28      	cmp	r3, #40	; 0x28
 8012746:	d904      	bls.n	8012752 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801274c:	3301      	adds	r3, #1
 801274e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012754:	7d1b      	ldrb	r3, [r3, #20]
 8012756:	2b09      	cmp	r3, #9
 8012758:	d10b      	bne.n	8012772 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801275a:	4b59      	ldr	r3, [pc, #356]	; (80128c0 <tcp_slowtmr+0x580>)
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012760:	6a1b      	ldr	r3, [r3, #32]
 8012762:	1ad3      	subs	r3, r2, r3
 8012764:	2bf0      	cmp	r3, #240	; 0xf0
 8012766:	d904      	bls.n	8012772 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8012768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801276c:	3301      	adds	r3, #1
 801276e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012776:	2b00      	cmp	r3, #0
 8012778:	d060      	beq.n	801283c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012780:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012784:	f000 fcea 	bl	801315c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278a:	2b00      	cmp	r3, #0
 801278c:	d010      	beq.n	80127b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801278e:	4b50      	ldr	r3, [pc, #320]	; (80128d0 <tcp_slowtmr+0x590>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012794:	429a      	cmp	r2, r3
 8012796:	d106      	bne.n	80127a6 <tcp_slowtmr+0x466>
 8012798:	4b4e      	ldr	r3, [pc, #312]	; (80128d4 <tcp_slowtmr+0x594>)
 801279a:	f240 526d 	movw	r2, #1389	; 0x56d
 801279e:	494e      	ldr	r1, [pc, #312]	; (80128d8 <tcp_slowtmr+0x598>)
 80127a0:	484e      	ldr	r0, [pc, #312]	; (80128dc <tcp_slowtmr+0x59c>)
 80127a2:	f009 f8c3 	bl	801b92c <printf>
        prev->next = pcb->next;
 80127a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a8:	68da      	ldr	r2, [r3, #12]
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	60da      	str	r2, [r3, #12]
 80127ae:	e00f      	b.n	80127d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80127b0:	4b47      	ldr	r3, [pc, #284]	; (80128d0 <tcp_slowtmr+0x590>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d006      	beq.n	80127c8 <tcp_slowtmr+0x488>
 80127ba:	4b46      	ldr	r3, [pc, #280]	; (80128d4 <tcp_slowtmr+0x594>)
 80127bc:	f240 5271 	movw	r2, #1393	; 0x571
 80127c0:	4947      	ldr	r1, [pc, #284]	; (80128e0 <tcp_slowtmr+0x5a0>)
 80127c2:	4846      	ldr	r0, [pc, #280]	; (80128dc <tcp_slowtmr+0x59c>)
 80127c4:	f009 f8b2 	bl	801b92c <printf>
        tcp_active_pcbs = pcb->next;
 80127c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	4a40      	ldr	r2, [pc, #256]	; (80128d0 <tcp_slowtmr+0x590>)
 80127ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80127d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d013      	beq.n	8012800 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80127d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80127dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80127e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80127e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e4:	3304      	adds	r3, #4
 80127e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127e8:	8ad2      	ldrh	r2, [r2, #22]
 80127ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127ec:	8b09      	ldrh	r1, [r1, #24]
 80127ee:	9102      	str	r1, [sp, #8]
 80127f0:	9201      	str	r2, [sp, #4]
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	462b      	mov	r3, r5
 80127f6:	4622      	mov	r2, r4
 80127f8:	4601      	mov	r1, r0
 80127fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127fc:	f004 feca 	bl	8017594 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012802:	691b      	ldr	r3, [r3, #16]
 8012804:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	7d1b      	ldrb	r3, [r3, #20]
 801280a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012812:	68db      	ldr	r3, [r3, #12]
 8012814:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012816:	6838      	ldr	r0, [r7, #0]
 8012818:	f7fe ffde 	bl	80117d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801281c:	4b31      	ldr	r3, [pc, #196]	; (80128e4 <tcp_slowtmr+0x5a4>)
 801281e:	2200      	movs	r2, #0
 8012820:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d004      	beq.n	8012832 <tcp_slowtmr+0x4f2>
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f06f 010c 	mvn.w	r1, #12
 801282e:	68b8      	ldr	r0, [r7, #8]
 8012830:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012832:	4b2c      	ldr	r3, [pc, #176]	; (80128e4 <tcp_slowtmr+0x5a4>)
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d037      	beq.n	80128aa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801283a:	e592      	b.n	8012362 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012848:	7f1b      	ldrb	r3, [r3, #28]
 801284a:	3301      	adds	r3, #1
 801284c:	b2da      	uxtb	r2, r3
 801284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012850:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012854:	7f1a      	ldrb	r2, [r3, #28]
 8012856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012858:	7f5b      	ldrb	r3, [r3, #29]
 801285a:	429a      	cmp	r2, r3
 801285c:	d325      	bcc.n	80128aa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012860:	2200      	movs	r2, #0
 8012862:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012864:	4b1f      	ldr	r3, [pc, #124]	; (80128e4 <tcp_slowtmr+0x5a4>)
 8012866:	2200      	movs	r2, #0
 8012868:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00b      	beq.n	801288c <tcp_slowtmr+0x54c>
 8012874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801287a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801287c:	6912      	ldr	r2, [r2, #16]
 801287e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012880:	4610      	mov	r0, r2
 8012882:	4798      	blx	r3
 8012884:	4603      	mov	r3, r0
 8012886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801288a:	e002      	b.n	8012892 <tcp_slowtmr+0x552>
 801288c:	2300      	movs	r3, #0
 801288e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012892:	4b14      	ldr	r3, [pc, #80]	; (80128e4 <tcp_slowtmr+0x5a4>)
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d000      	beq.n	801289c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801289a:	e562      	b.n	8012362 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801289c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d102      	bne.n	80128aa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80128a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128a6:	f004 f8c1 	bl	8016a2c <tcp_output>
  while (pcb != NULL) {
 80128aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	f47f ad5e 	bne.w	801236e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80128b2:	2300      	movs	r3, #0
 80128b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80128b6:	4b0c      	ldr	r3, [pc, #48]	; (80128e8 <tcp_slowtmr+0x5a8>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80128bc:	e069      	b.n	8012992 <tcp_slowtmr+0x652>
 80128be:	bf00      	nop
 80128c0:	2000be4c 	.word	0x2000be4c
 80128c4:	000a4cb8 	.word	0x000a4cb8
 80128c8:	10624dd3 	.word	0x10624dd3
 80128cc:	000124f8 	.word	0x000124f8
 80128d0:	2000be48 	.word	0x2000be48
 80128d4:	0802610c 	.word	0x0802610c
 80128d8:	08026544 	.word	0x08026544
 80128dc:	08026150 	.word	0x08026150
 80128e0:	08026570 	.word	0x08026570
 80128e4:	2000be44 	.word	0x2000be44
 80128e8:	2000be58 	.word	0x2000be58
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80128ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ee:	7d1b      	ldrb	r3, [r3, #20]
 80128f0:	2b0a      	cmp	r3, #10
 80128f2:	d006      	beq.n	8012902 <tcp_slowtmr+0x5c2>
 80128f4:	4b2b      	ldr	r3, [pc, #172]	; (80129a4 <tcp_slowtmr+0x664>)
 80128f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80128fa:	492b      	ldr	r1, [pc, #172]	; (80129a8 <tcp_slowtmr+0x668>)
 80128fc:	482b      	ldr	r0, [pc, #172]	; (80129ac <tcp_slowtmr+0x66c>)
 80128fe:	f009 f815 	bl	801b92c <printf>
    pcb_remove = 0;
 8012902:	2300      	movs	r3, #0
 8012904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012908:	4b29      	ldr	r3, [pc, #164]	; (80129b0 <tcp_slowtmr+0x670>)
 801290a:	681a      	ldr	r2, [r3, #0]
 801290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290e:	6a1b      	ldr	r3, [r3, #32]
 8012910:	1ad3      	subs	r3, r2, r3
 8012912:	2bf0      	cmp	r3, #240	; 0xf0
 8012914:	d904      	bls.n	8012920 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801291a:	3301      	adds	r3, #1
 801291c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012924:	2b00      	cmp	r3, #0
 8012926:	d02f      	beq.n	8012988 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801292a:	f000 fc17 	bl	801315c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012930:	2b00      	cmp	r3, #0
 8012932:	d010      	beq.n	8012956 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012934:	4b1f      	ldr	r3, [pc, #124]	; (80129b4 <tcp_slowtmr+0x674>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801293a:	429a      	cmp	r2, r3
 801293c:	d106      	bne.n	801294c <tcp_slowtmr+0x60c>
 801293e:	4b19      	ldr	r3, [pc, #100]	; (80129a4 <tcp_slowtmr+0x664>)
 8012940:	f240 52af 	movw	r2, #1455	; 0x5af
 8012944:	491c      	ldr	r1, [pc, #112]	; (80129b8 <tcp_slowtmr+0x678>)
 8012946:	4819      	ldr	r0, [pc, #100]	; (80129ac <tcp_slowtmr+0x66c>)
 8012948:	f008 fff0 	bl	801b92c <printf>
        prev->next = pcb->next;
 801294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294e:	68da      	ldr	r2, [r3, #12]
 8012950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012952:	60da      	str	r2, [r3, #12]
 8012954:	e00f      	b.n	8012976 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012956:	4b17      	ldr	r3, [pc, #92]	; (80129b4 <tcp_slowtmr+0x674>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801295c:	429a      	cmp	r2, r3
 801295e:	d006      	beq.n	801296e <tcp_slowtmr+0x62e>
 8012960:	4b10      	ldr	r3, [pc, #64]	; (80129a4 <tcp_slowtmr+0x664>)
 8012962:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012966:	4915      	ldr	r1, [pc, #84]	; (80129bc <tcp_slowtmr+0x67c>)
 8012968:	4810      	ldr	r0, [pc, #64]	; (80129ac <tcp_slowtmr+0x66c>)
 801296a:	f008 ffdf 	bl	801b92c <printf>
        tcp_tw_pcbs = pcb->next;
 801296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012970:	68db      	ldr	r3, [r3, #12]
 8012972:	4a10      	ldr	r2, [pc, #64]	; (80129b4 <tcp_slowtmr+0x674>)
 8012974:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012978:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801297c:	68db      	ldr	r3, [r3, #12]
 801297e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012980:	69f8      	ldr	r0, [r7, #28]
 8012982:	f7fe ff29 	bl	80117d8 <tcp_free>
 8012986:	e004      	b.n	8012992 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012994:	2b00      	cmp	r3, #0
 8012996:	d1a9      	bne.n	80128ec <tcp_slowtmr+0x5ac>
    }
  }
}
 8012998:	bf00      	nop
 801299a:	bf00      	nop
 801299c:	3730      	adds	r7, #48	; 0x30
 801299e:	46bd      	mov	sp, r7
 80129a0:	bdb0      	pop	{r4, r5, r7, pc}
 80129a2:	bf00      	nop
 80129a4:	0802610c 	.word	0x0802610c
 80129a8:	0802659c 	.word	0x0802659c
 80129ac:	08026150 	.word	0x08026150
 80129b0:	2000be4c 	.word	0x2000be4c
 80129b4:	2000be58 	.word	0x2000be58
 80129b8:	080265cc 	.word	0x080265cc
 80129bc:	080265f4 	.word	0x080265f4

080129c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80129c6:	4b2d      	ldr	r3, [pc, #180]	; (8012a7c <tcp_fasttmr+0xbc>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	3301      	adds	r3, #1
 80129cc:	b2da      	uxtb	r2, r3
 80129ce:	4b2b      	ldr	r3, [pc, #172]	; (8012a7c <tcp_fasttmr+0xbc>)
 80129d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80129d2:	4b2b      	ldr	r3, [pc, #172]	; (8012a80 <tcp_fasttmr+0xc0>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80129d8:	e048      	b.n	8012a6c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	7f9a      	ldrb	r2, [r3, #30]
 80129de:	4b27      	ldr	r3, [pc, #156]	; (8012a7c <tcp_fasttmr+0xbc>)
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d03f      	beq.n	8012a66 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80129e6:	4b25      	ldr	r3, [pc, #148]	; (8012a7c <tcp_fasttmr+0xbc>)
 80129e8:	781a      	ldrb	r2, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	8b5b      	ldrh	r3, [r3, #26]
 80129f2:	f003 0301 	and.w	r3, r3, #1
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d010      	beq.n	8012a1c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	8b5b      	ldrh	r3, [r3, #26]
 80129fe:	f043 0302 	orr.w	r3, r3, #2
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f004 f80f 	bl	8016a2c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	8b5b      	ldrh	r3, [r3, #26]
 8012a12:	f023 0303 	bic.w	r3, r3, #3
 8012a16:	b29a      	uxth	r2, r3
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	8b5b      	ldrh	r3, [r3, #26]
 8012a20:	f003 0308 	and.w	r3, r3, #8
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d009      	beq.n	8012a3c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	8b5b      	ldrh	r3, [r3, #26]
 8012a2c:	f023 0308 	bic.w	r3, r3, #8
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f7ff f862 	bl	8011b00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d00a      	beq.n	8012a60 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012a4a:	4b0e      	ldr	r3, [pc, #56]	; (8012a84 <tcp_fasttmr+0xc4>)
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f000 f819 	bl	8012a88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012a56:	4b0b      	ldr	r3, [pc, #44]	; (8012a84 <tcp_fasttmr+0xc4>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d000      	beq.n	8012a60 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012a5e:	e7b8      	b.n	80129d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	607b      	str	r3, [r7, #4]
 8012a64:	e002      	b.n	8012a6c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d1b3      	bne.n	80129da <tcp_fasttmr+0x1a>
    }
  }
}
 8012a72:	bf00      	nop
 8012a74:	bf00      	nop
 8012a76:	3708      	adds	r7, #8
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	20004f36 	.word	0x20004f36
 8012a80:	2000be48 	.word	0x2000be48
 8012a84:	2000be44 	.word	0x2000be44

08012a88 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012a88:	b590      	push	{r4, r7, lr}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d109      	bne.n	8012aaa <tcp_process_refused_data+0x22>
 8012a96:	4b37      	ldr	r3, [pc, #220]	; (8012b74 <tcp_process_refused_data+0xec>)
 8012a98:	f240 6209 	movw	r2, #1545	; 0x609
 8012a9c:	4936      	ldr	r1, [pc, #216]	; (8012b78 <tcp_process_refused_data+0xf0>)
 8012a9e:	4837      	ldr	r0, [pc, #220]	; (8012b7c <tcp_process_refused_data+0xf4>)
 8012aa0:	f008 ff44 	bl	801b92c <printf>
 8012aa4:	f06f 030f 	mvn.w	r3, #15
 8012aa8:	e060      	b.n	8012b6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012aae:	7b5b      	ldrb	r3, [r3, #13]
 8012ab0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ab6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2200      	movs	r2, #0
 8012abc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d00b      	beq.n	8012ae0 <tcp_process_refused_data+0x58>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6918      	ldr	r0, [r3, #16]
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	68ba      	ldr	r2, [r7, #8]
 8012ad6:	6879      	ldr	r1, [r7, #4]
 8012ad8:	47a0      	blx	r4
 8012ada:	4603      	mov	r3, r0
 8012adc:	73fb      	strb	r3, [r7, #15]
 8012ade:	e007      	b.n	8012af0 <tcp_process_refused_data+0x68>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	68ba      	ldr	r2, [r7, #8]
 8012ae4:	6879      	ldr	r1, [r7, #4]
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	f000 f8c2 	bl	8012c70 <tcp_recv_null>
 8012aec:	4603      	mov	r3, r0
 8012aee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d12a      	bne.n	8012b4e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012af8:	7bbb      	ldrb	r3, [r7, #14]
 8012afa:	f003 0320 	and.w	r3, r3, #32
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d033      	beq.n	8012b6a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012b0a:	d005      	beq.n	8012b18 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b10:	3301      	adds	r3, #1
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d00b      	beq.n	8012b3a <tcp_process_refused_data+0xb2>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6918      	ldr	r0, [r3, #16]
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	2200      	movs	r2, #0
 8012b30:	6879      	ldr	r1, [r7, #4]
 8012b32:	47a0      	blx	r4
 8012b34:	4603      	mov	r3, r0
 8012b36:	73fb      	strb	r3, [r7, #15]
 8012b38:	e001      	b.n	8012b3e <tcp_process_refused_data+0xb6>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b42:	f113 0f0d 	cmn.w	r3, #13
 8012b46:	d110      	bne.n	8012b6a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012b48:	f06f 030c 	mvn.w	r3, #12
 8012b4c:	e00e      	b.n	8012b6c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b52:	f113 0f0d 	cmn.w	r3, #13
 8012b56:	d102      	bne.n	8012b5e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012b58:	f06f 030c 	mvn.w	r3, #12
 8012b5c:	e006      	b.n	8012b6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	68ba      	ldr	r2, [r7, #8]
 8012b62:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012b64:	f06f 0304 	mvn.w	r3, #4
 8012b68:	e000      	b.n	8012b6c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012b6a:	2300      	movs	r3, #0
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3714      	adds	r7, #20
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd90      	pop	{r4, r7, pc}
 8012b74:	0802610c 	.word	0x0802610c
 8012b78:	0802661c 	.word	0x0802661c
 8012b7c:	08026150 	.word	0x08026150

08012b80 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012b88:	e007      	b.n	8012b9a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f000 f80a 	bl	8012baa <tcp_seg_free>
    seg = next;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d1f4      	bne.n	8012b8a <tcp_segs_free+0xa>
  }
}
 8012ba0:	bf00      	nop
 8012ba2:	bf00      	nop
 8012ba4:	3710      	adds	r7, #16
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}

08012baa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012baa:	b580      	push	{r7, lr}
 8012bac:	b082      	sub	sp, #8
 8012bae:	af00      	add	r7, sp, #0
 8012bb0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d00c      	beq.n	8012bd2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d004      	beq.n	8012bca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fe fb4b 	bl	8011260 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012bca:	6879      	ldr	r1, [r7, #4]
 8012bcc:	2003      	movs	r0, #3
 8012bce:	f7fd fcc9 	bl	8010564 <memp_free>
  }
}
 8012bd2:	bf00      	nop
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
	...

08012bdc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	460b      	mov	r3, r1
 8012be6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d107      	bne.n	8012bfe <tcp_setprio+0x22>
 8012bee:	4b07      	ldr	r3, [pc, #28]	; (8012c0c <tcp_setprio+0x30>)
 8012bf0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8012bf4:	4906      	ldr	r1, [pc, #24]	; (8012c10 <tcp_setprio+0x34>)
 8012bf6:	4807      	ldr	r0, [pc, #28]	; (8012c14 <tcp_setprio+0x38>)
 8012bf8:	f008 fe98 	bl	801b92c <printf>
 8012bfc:	e002      	b.n	8012c04 <tcp_setprio+0x28>

  pcb->prio = prio;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	78fa      	ldrb	r2, [r7, #3]
 8012c02:	755a      	strb	r2, [r3, #21]
}
 8012c04:	3708      	adds	r7, #8
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	0802610c 	.word	0x0802610c
 8012c10:	08026644 	.word	0x08026644
 8012c14:	08026150 	.word	0x08026150

08012c18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b084      	sub	sp, #16
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d106      	bne.n	8012c34 <tcp_seg_copy+0x1c>
 8012c26:	4b0f      	ldr	r3, [pc, #60]	; (8012c64 <tcp_seg_copy+0x4c>)
 8012c28:	f240 6282 	movw	r2, #1666	; 0x682
 8012c2c:	490e      	ldr	r1, [pc, #56]	; (8012c68 <tcp_seg_copy+0x50>)
 8012c2e:	480f      	ldr	r0, [pc, #60]	; (8012c6c <tcp_seg_copy+0x54>)
 8012c30:	f008 fe7c 	bl	801b92c <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012c34:	2003      	movs	r0, #3
 8012c36:	f7fd fc43 	bl	80104c0 <memp_malloc>
 8012c3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d101      	bne.n	8012c46 <tcp_seg_copy+0x2e>
    return NULL;
 8012c42:	2300      	movs	r3, #0
 8012c44:	e00a      	b.n	8012c5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012c46:	2210      	movs	r2, #16
 8012c48:	6879      	ldr	r1, [r7, #4]
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f008 fbc0 	bl	801b3d0 <memcpy>
  pbuf_ref(cseg->p);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7fe fba9 	bl	80113ac <pbuf_ref>
  return cseg;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	0802610c 	.word	0x0802610c
 8012c68:	08026660 	.word	0x08026660
 8012c6c:	08026150 	.word	0x08026150

08012c70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	60f8      	str	r0, [r7, #12]
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	607a      	str	r2, [r7, #4]
 8012c7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d109      	bne.n	8012c98 <tcp_recv_null+0x28>
 8012c84:	4b12      	ldr	r3, [pc, #72]	; (8012cd0 <tcp_recv_null+0x60>)
 8012c86:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012c8a:	4912      	ldr	r1, [pc, #72]	; (8012cd4 <tcp_recv_null+0x64>)
 8012c8c:	4812      	ldr	r0, [pc, #72]	; (8012cd8 <tcp_recv_null+0x68>)
 8012c8e:	f008 fe4d 	bl	801b92c <printf>
 8012c92:	f06f 030f 	mvn.w	r3, #15
 8012c96:	e016      	b.n	8012cc6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d009      	beq.n	8012cb2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	891b      	ldrh	r3, [r3, #8]
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	68b8      	ldr	r0, [r7, #8]
 8012ca6:	f7ff fab5 	bl	8012214 <tcp_recved>
    pbuf_free(p);
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f7fe fad8 	bl	8011260 <pbuf_free>
 8012cb0:	e008      	b.n	8012cc4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d104      	bne.n	8012cc4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012cba:	68b8      	ldr	r0, [r7, #8]
 8012cbc:	f7fe ff8a 	bl	8011bd4 <tcp_close>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	e000      	b.n	8012cc6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3710      	adds	r7, #16
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	0802610c 	.word	0x0802610c
 8012cd4:	0802667c 	.word	0x0802667c
 8012cd8:	08026150 	.word	0x08026150

08012cdc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b086      	sub	sp, #24
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	db01      	blt.n	8012cf2 <tcp_kill_prio+0x16>
 8012cee:	79fb      	ldrb	r3, [r7, #7]
 8012cf0:	e000      	b.n	8012cf4 <tcp_kill_prio+0x18>
 8012cf2:	237f      	movs	r3, #127	; 0x7f
 8012cf4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012cf6:	7afb      	ldrb	r3, [r7, #11]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d034      	beq.n	8012d66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012cfc:	7afb      	ldrb	r3, [r7, #11]
 8012cfe:	3b01      	subs	r3, #1
 8012d00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012d02:	2300      	movs	r3, #0
 8012d04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012d06:	2300      	movs	r3, #0
 8012d08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d0a:	4b19      	ldr	r3, [pc, #100]	; (8012d70 <tcp_kill_prio+0x94>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	617b      	str	r3, [r7, #20]
 8012d10:	e01f      	b.n	8012d52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	7d5b      	ldrb	r3, [r3, #21]
 8012d16:	7afa      	ldrb	r2, [r7, #11]
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d80c      	bhi.n	8012d36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012d20:	7afa      	ldrb	r2, [r7, #11]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d112      	bne.n	8012d4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012d26:	4b13      	ldr	r3, [pc, #76]	; (8012d74 <tcp_kill_prio+0x98>)
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	6a1b      	ldr	r3, [r3, #32]
 8012d2e:	1ad3      	subs	r3, r2, r3
 8012d30:	68fa      	ldr	r2, [r7, #12]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d80a      	bhi.n	8012d4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012d36:	4b0f      	ldr	r3, [pc, #60]	; (8012d74 <tcp_kill_prio+0x98>)
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	6a1b      	ldr	r3, [r3, #32]
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	7d5b      	ldrb	r3, [r3, #21]
 8012d4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	617b      	str	r3, [r7, #20]
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d1dc      	bne.n	8012d12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d004      	beq.n	8012d68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012d5e:	6938      	ldr	r0, [r7, #16]
 8012d60:	f7ff f87e 	bl	8011e60 <tcp_abort>
 8012d64:	e000      	b.n	8012d68 <tcp_kill_prio+0x8c>
    return;
 8012d66:	bf00      	nop
  }
}
 8012d68:	3718      	adds	r7, #24
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	2000be48 	.word	0x2000be48
 8012d74:	2000be4c 	.word	0x2000be4c

08012d78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	4603      	mov	r3, r0
 8012d80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012d82:	79fb      	ldrb	r3, [r7, #7]
 8012d84:	2b08      	cmp	r3, #8
 8012d86:	d009      	beq.n	8012d9c <tcp_kill_state+0x24>
 8012d88:	79fb      	ldrb	r3, [r7, #7]
 8012d8a:	2b09      	cmp	r3, #9
 8012d8c:	d006      	beq.n	8012d9c <tcp_kill_state+0x24>
 8012d8e:	4b1a      	ldr	r3, [pc, #104]	; (8012df8 <tcp_kill_state+0x80>)
 8012d90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012d94:	4919      	ldr	r1, [pc, #100]	; (8012dfc <tcp_kill_state+0x84>)
 8012d96:	481a      	ldr	r0, [pc, #104]	; (8012e00 <tcp_kill_state+0x88>)
 8012d98:	f008 fdc8 	bl	801b92c <printf>

  inactivity = 0;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012da0:	2300      	movs	r3, #0
 8012da2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012da4:	4b17      	ldr	r3, [pc, #92]	; (8012e04 <tcp_kill_state+0x8c>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	617b      	str	r3, [r7, #20]
 8012daa:	e017      	b.n	8012ddc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	7d1b      	ldrb	r3, [r3, #20]
 8012db0:	79fa      	ldrb	r2, [r7, #7]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d10f      	bne.n	8012dd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012db6:	4b14      	ldr	r3, [pc, #80]	; (8012e08 <tcp_kill_state+0x90>)
 8012db8:	681a      	ldr	r2, [r3, #0]
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	6a1b      	ldr	r3, [r3, #32]
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	68fa      	ldr	r2, [r7, #12]
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d807      	bhi.n	8012dd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012dc6:	4b10      	ldr	r3, [pc, #64]	; (8012e08 <tcp_kill_state+0x90>)
 8012dc8:	681a      	ldr	r2, [r3, #0]
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	6a1b      	ldr	r3, [r3, #32]
 8012dce:	1ad3      	subs	r3, r2, r3
 8012dd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	617b      	str	r3, [r7, #20]
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d1e4      	bne.n	8012dac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d003      	beq.n	8012df0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012de8:	2100      	movs	r1, #0
 8012dea:	6938      	ldr	r0, [r7, #16]
 8012dec:	f7fe ff7a 	bl	8011ce4 <tcp_abandon>
  }
}
 8012df0:	bf00      	nop
 8012df2:	3718      	adds	r7, #24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	0802610c 	.word	0x0802610c
 8012dfc:	08026698 	.word	0x08026698
 8012e00:	08026150 	.word	0x08026150
 8012e04:	2000be48 	.word	0x2000be48
 8012e08:	2000be4c 	.word	0x2000be4c

08012e0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012e12:	2300      	movs	r3, #0
 8012e14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012e16:	2300      	movs	r3, #0
 8012e18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e1a:	4b12      	ldr	r3, [pc, #72]	; (8012e64 <tcp_kill_timewait+0x58>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	60fb      	str	r3, [r7, #12]
 8012e20:	e012      	b.n	8012e48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012e22:	4b11      	ldr	r3, [pc, #68]	; (8012e68 <tcp_kill_timewait+0x5c>)
 8012e24:	681a      	ldr	r2, [r3, #0]
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	6a1b      	ldr	r3, [r3, #32]
 8012e2a:	1ad3      	subs	r3, r2, r3
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d807      	bhi.n	8012e42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012e32:	4b0d      	ldr	r3, [pc, #52]	; (8012e68 <tcp_kill_timewait+0x5c>)
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	6a1b      	ldr	r3, [r3, #32]
 8012e3a:	1ad3      	subs	r3, r2, r3
 8012e3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	68db      	ldr	r3, [r3, #12]
 8012e46:	60fb      	str	r3, [r7, #12]
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d1e9      	bne.n	8012e22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d002      	beq.n	8012e5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012e54:	68b8      	ldr	r0, [r7, #8]
 8012e56:	f7ff f803 	bl	8011e60 <tcp_abort>
  }
}
 8012e5a:	bf00      	nop
 8012e5c:	3710      	adds	r7, #16
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	2000be58 	.word	0x2000be58
 8012e68:	2000be4c 	.word	0x2000be4c

08012e6c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012e72:	4b10      	ldr	r3, [pc, #64]	; (8012eb4 <tcp_handle_closepend+0x48>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012e78:	e014      	b.n	8012ea4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	8b5b      	ldrh	r3, [r3, #26]
 8012e84:	f003 0308 	and.w	r3, r3, #8
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d009      	beq.n	8012ea0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	8b5b      	ldrh	r3, [r3, #26]
 8012e90:	f023 0308 	bic.w	r3, r3, #8
 8012e94:	b29a      	uxth	r2, r3
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f7fe fe30 	bl	8011b00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d1e7      	bne.n	8012e7a <tcp_handle_closepend+0xe>
  }
}
 8012eaa:	bf00      	nop
 8012eac:	bf00      	nop
 8012eae:	3708      	adds	r7, #8
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	2000be48 	.word	0x2000be48

08012eb8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ec2:	2001      	movs	r0, #1
 8012ec4:	f7fd fafc 	bl	80104c0 <memp_malloc>
 8012ec8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d126      	bne.n	8012f1e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012ed0:	f7ff ffcc 	bl	8012e6c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012ed4:	f7ff ff9a 	bl	8012e0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ed8:	2001      	movs	r0, #1
 8012eda:	f7fd faf1 	bl	80104c0 <memp_malloc>
 8012ede:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d11b      	bne.n	8012f1e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012ee6:	2009      	movs	r0, #9
 8012ee8:	f7ff ff46 	bl	8012d78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012eec:	2001      	movs	r0, #1
 8012eee:	f7fd fae7 	bl	80104c0 <memp_malloc>
 8012ef2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d111      	bne.n	8012f1e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012efa:	2008      	movs	r0, #8
 8012efc:	f7ff ff3c 	bl	8012d78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012f00:	2001      	movs	r0, #1
 8012f02:	f7fd fadd 	bl	80104c0 <memp_malloc>
 8012f06:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d107      	bne.n	8012f1e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012f0e:	79fb      	ldrb	r3, [r7, #7]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7ff fee3 	bl	8012cdc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012f16:	2001      	movs	r0, #1
 8012f18:	f7fd fad2 	bl	80104c0 <memp_malloc>
 8012f1c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d03f      	beq.n	8012fa4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012f24:	229c      	movs	r2, #156	; 0x9c
 8012f26:	2100      	movs	r1, #0
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f008 fa79 	bl	801b420 <memset>
    pcb->prio = prio;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	79fa      	ldrb	r2, [r7, #7]
 8012f32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012f3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012f44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	22ff      	movs	r2, #255	; 0xff
 8012f52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012f5a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2206      	movs	r2, #6
 8012f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2206      	movs	r2, #6
 8012f68:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f70:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2201      	movs	r2, #1
 8012f76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012f7a:	4b0d      	ldr	r3, [pc, #52]	; (8012fb0 <tcp_alloc+0xf8>)
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012f82:	4b0c      	ldr	r3, [pc, #48]	; (8012fb4 <tcp_alloc+0xfc>)
 8012f84:	781a      	ldrb	r2, [r3, #0]
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012f90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	4a08      	ldr	r2, [pc, #32]	; (8012fb8 <tcp_alloc+0x100>)
 8012f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	4a07      	ldr	r2, [pc, #28]	; (8012fbc <tcp_alloc+0x104>)
 8012fa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3710      	adds	r7, #16
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	2000be4c 	.word	0x2000be4c
 8012fb4:	20004f36 	.word	0x20004f36
 8012fb8:	08012c71 	.word	0x08012c71
 8012fbc:	006ddd00 	.word	0x006ddd00

08012fc0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012fca:	2040      	movs	r0, #64	; 0x40
 8012fcc:	f7ff ff74 	bl	8012eb8 <tcp_alloc>
 8012fd0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3710      	adds	r7, #16
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}

08012fdc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012fdc:	b480      	push	{r7}
 8012fde:	b083      	sub	sp, #12
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d002      	beq.n	8012ff2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	683a      	ldr	r2, [r7, #0]
 8012ff0:	611a      	str	r2, [r3, #16]
  }
}
 8012ff2:	bf00      	nop
 8012ff4:	370c      	adds	r7, #12
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffc:	4770      	bx	lr
	...

08013000 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d00e      	beq.n	801302e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	7d1b      	ldrb	r3, [r3, #20]
 8013014:	2b01      	cmp	r3, #1
 8013016:	d106      	bne.n	8013026 <tcp_recv+0x26>
 8013018:	4b07      	ldr	r3, [pc, #28]	; (8013038 <tcp_recv+0x38>)
 801301a:	f240 72df 	movw	r2, #2015	; 0x7df
 801301e:	4907      	ldr	r1, [pc, #28]	; (801303c <tcp_recv+0x3c>)
 8013020:	4807      	ldr	r0, [pc, #28]	; (8013040 <tcp_recv+0x40>)
 8013022:	f008 fc83 	bl	801b92c <printf>
    pcb->recv = recv;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	683a      	ldr	r2, [r7, #0]
 801302a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801302e:	bf00      	nop
 8013030:	3708      	adds	r7, #8
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	0802610c 	.word	0x0802610c
 801303c:	080266a8 	.word	0x080266a8
 8013040:	08026150 	.word	0x08026150

08013044 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d00e      	beq.n	8013072 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	7d1b      	ldrb	r3, [r3, #20]
 8013058:	2b01      	cmp	r3, #1
 801305a:	d106      	bne.n	801306a <tcp_sent+0x26>
 801305c:	4b07      	ldr	r3, [pc, #28]	; (801307c <tcp_sent+0x38>)
 801305e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013062:	4907      	ldr	r1, [pc, #28]	; (8013080 <tcp_sent+0x3c>)
 8013064:	4807      	ldr	r0, [pc, #28]	; (8013084 <tcp_sent+0x40>)
 8013066:	f008 fc61 	bl	801b92c <printf>
    pcb->sent = sent;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	683a      	ldr	r2, [r7, #0]
 801306e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013072:	bf00      	nop
 8013074:	3708      	adds	r7, #8
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	0802610c 	.word	0x0802610c
 8013080:	080266d0 	.word	0x080266d0
 8013084:	08026150 	.word	0x08026150

08013088 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d00e      	beq.n	80130b6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	7d1b      	ldrb	r3, [r3, #20]
 801309c:	2b01      	cmp	r3, #1
 801309e:	d106      	bne.n	80130ae <tcp_err+0x26>
 80130a0:	4b07      	ldr	r3, [pc, #28]	; (80130c0 <tcp_err+0x38>)
 80130a2:	f640 020d 	movw	r2, #2061	; 0x80d
 80130a6:	4907      	ldr	r1, [pc, #28]	; (80130c4 <tcp_err+0x3c>)
 80130a8:	4807      	ldr	r0, [pc, #28]	; (80130c8 <tcp_err+0x40>)
 80130aa:	f008 fc3f 	bl	801b92c <printf>
    pcb->errf = err;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	683a      	ldr	r2, [r7, #0]
 80130b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80130b6:	bf00      	nop
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	0802610c 	.word	0x0802610c
 80130c4:	080266f8 	.word	0x080266f8
 80130c8:	08026150 	.word	0x08026150

080130cc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d008      	beq.n	80130ee <tcp_accept+0x22>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	7d1b      	ldrb	r3, [r3, #20]
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	d104      	bne.n	80130ee <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	683a      	ldr	r2, [r7, #0]
 80130ec:	619a      	str	r2, [r3, #24]
  }
}
 80130ee:	bf00      	nop
 80130f0:	3714      	adds	r7, #20
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
	...

080130fc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	4613      	mov	r3, r2
 8013108:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d107      	bne.n	8013120 <tcp_poll+0x24>
 8013110:	4b0e      	ldr	r3, [pc, #56]	; (801314c <tcp_poll+0x50>)
 8013112:	f640 023d 	movw	r2, #2109	; 0x83d
 8013116:	490e      	ldr	r1, [pc, #56]	; (8013150 <tcp_poll+0x54>)
 8013118:	480e      	ldr	r0, [pc, #56]	; (8013154 <tcp_poll+0x58>)
 801311a:	f008 fc07 	bl	801b92c <printf>
 801311e:	e011      	b.n	8013144 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	7d1b      	ldrb	r3, [r3, #20]
 8013124:	2b01      	cmp	r3, #1
 8013126:	d106      	bne.n	8013136 <tcp_poll+0x3a>
 8013128:	4b08      	ldr	r3, [pc, #32]	; (801314c <tcp_poll+0x50>)
 801312a:	f640 023e 	movw	r2, #2110	; 0x83e
 801312e:	490a      	ldr	r1, [pc, #40]	; (8013158 <tcp_poll+0x5c>)
 8013130:	4808      	ldr	r0, [pc, #32]	; (8013154 <tcp_poll+0x58>)
 8013132:	f008 fbfb 	bl	801b92c <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	68ba      	ldr	r2, [r7, #8]
 801313a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	79fa      	ldrb	r2, [r7, #7]
 8013142:	775a      	strb	r2, [r3, #29]
}
 8013144:	3710      	adds	r7, #16
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
 801314a:	bf00      	nop
 801314c:	0802610c 	.word	0x0802610c
 8013150:	08026720 	.word	0x08026720
 8013154:	08026150 	.word	0x08026150
 8013158:	08026738 	.word	0x08026738

0801315c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d107      	bne.n	801317a <tcp_pcb_purge+0x1e>
 801316a:	4b21      	ldr	r3, [pc, #132]	; (80131f0 <tcp_pcb_purge+0x94>)
 801316c:	f640 0251 	movw	r2, #2129	; 0x851
 8013170:	4920      	ldr	r1, [pc, #128]	; (80131f4 <tcp_pcb_purge+0x98>)
 8013172:	4821      	ldr	r0, [pc, #132]	; (80131f8 <tcp_pcb_purge+0x9c>)
 8013174:	f008 fbda 	bl	801b92c <printf>
 8013178:	e037      	b.n	80131ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	7d1b      	ldrb	r3, [r3, #20]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d033      	beq.n	80131ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013186:	2b0a      	cmp	r3, #10
 8013188:	d02f      	beq.n	80131ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801318e:	2b01      	cmp	r3, #1
 8013190:	d02b      	beq.n	80131ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013196:	2b00      	cmp	r3, #0
 8013198:	d007      	beq.n	80131aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fe f85e 	bl	8011260 <pbuf_free>
      pcb->refused_data = NULL;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d002      	beq.n	80131b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f000 f986 	bl	80134c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7ff fcdb 	bl	8012b80 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7ff fcd6 	bl	8012b80 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2200      	movs	r2, #0
 80131d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2200      	movs	r2, #0
 80131e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80131ea:	3708      	adds	r7, #8
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}
 80131f0:	0802610c 	.word	0x0802610c
 80131f4:	08026758 	.word	0x08026758
 80131f8:	08026150 	.word	0x08026150

080131fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b084      	sub	sp, #16
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d106      	bne.n	801321a <tcp_pcb_remove+0x1e>
 801320c:	4b3e      	ldr	r3, [pc, #248]	; (8013308 <tcp_pcb_remove+0x10c>)
 801320e:	f640 0283 	movw	r2, #2179	; 0x883
 8013212:	493e      	ldr	r1, [pc, #248]	; (801330c <tcp_pcb_remove+0x110>)
 8013214:	483e      	ldr	r0, [pc, #248]	; (8013310 <tcp_pcb_remove+0x114>)
 8013216:	f008 fb89 	bl	801b92c <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d106      	bne.n	801322e <tcp_pcb_remove+0x32>
 8013220:	4b39      	ldr	r3, [pc, #228]	; (8013308 <tcp_pcb_remove+0x10c>)
 8013222:	f640 0284 	movw	r2, #2180	; 0x884
 8013226:	493b      	ldr	r1, [pc, #236]	; (8013314 <tcp_pcb_remove+0x118>)
 8013228:	4839      	ldr	r0, [pc, #228]	; (8013310 <tcp_pcb_remove+0x114>)
 801322a:	f008 fb7f 	bl	801b92c <printf>

  TCP_RMV(pcblist, pcb);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	683a      	ldr	r2, [r7, #0]
 8013234:	429a      	cmp	r2, r3
 8013236:	d105      	bne.n	8013244 <tcp_pcb_remove+0x48>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	68da      	ldr	r2, [r3, #12]
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	601a      	str	r2, [r3, #0]
 8013242:	e013      	b.n	801326c <tcp_pcb_remove+0x70>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	60fb      	str	r3, [r7, #12]
 801324a:	e00c      	b.n	8013266 <tcp_pcb_remove+0x6a>
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	683a      	ldr	r2, [r7, #0]
 8013252:	429a      	cmp	r2, r3
 8013254:	d104      	bne.n	8013260 <tcp_pcb_remove+0x64>
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	68da      	ldr	r2, [r3, #12]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	60da      	str	r2, [r3, #12]
 801325e:	e005      	b.n	801326c <tcp_pcb_remove+0x70>
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	68db      	ldr	r3, [r3, #12]
 8013264:	60fb      	str	r3, [r7, #12]
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d1ef      	bne.n	801324c <tcp_pcb_remove+0x50>
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	2200      	movs	r2, #0
 8013270:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013272:	6838      	ldr	r0, [r7, #0]
 8013274:	f7ff ff72 	bl	801315c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	7d1b      	ldrb	r3, [r3, #20]
 801327c:	2b0a      	cmp	r3, #10
 801327e:	d013      	beq.n	80132a8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013284:	2b01      	cmp	r3, #1
 8013286:	d00f      	beq.n	80132a8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	8b5b      	ldrh	r3, [r3, #26]
 801328c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013290:	2b00      	cmp	r3, #0
 8013292:	d009      	beq.n	80132a8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	8b5b      	ldrh	r3, [r3, #26]
 8013298:	f043 0302 	orr.w	r3, r3, #2
 801329c:	b29a      	uxth	r2, r3
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80132a2:	6838      	ldr	r0, [r7, #0]
 80132a4:	f003 fbc2 	bl	8016a2c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	7d1b      	ldrb	r3, [r3, #20]
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	d020      	beq.n	80132f2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d006      	beq.n	80132c6 <tcp_pcb_remove+0xca>
 80132b8:	4b13      	ldr	r3, [pc, #76]	; (8013308 <tcp_pcb_remove+0x10c>)
 80132ba:	f640 0293 	movw	r2, #2195	; 0x893
 80132be:	4916      	ldr	r1, [pc, #88]	; (8013318 <tcp_pcb_remove+0x11c>)
 80132c0:	4813      	ldr	r0, [pc, #76]	; (8013310 <tcp_pcb_remove+0x114>)
 80132c2:	f008 fb33 	bl	801b92c <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d006      	beq.n	80132dc <tcp_pcb_remove+0xe0>
 80132ce:	4b0e      	ldr	r3, [pc, #56]	; (8013308 <tcp_pcb_remove+0x10c>)
 80132d0:	f640 0294 	movw	r2, #2196	; 0x894
 80132d4:	4911      	ldr	r1, [pc, #68]	; (801331c <tcp_pcb_remove+0x120>)
 80132d6:	480e      	ldr	r0, [pc, #56]	; (8013310 <tcp_pcb_remove+0x114>)
 80132d8:	f008 fb28 	bl	801b92c <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d006      	beq.n	80132f2 <tcp_pcb_remove+0xf6>
 80132e4:	4b08      	ldr	r3, [pc, #32]	; (8013308 <tcp_pcb_remove+0x10c>)
 80132e6:	f640 0296 	movw	r2, #2198	; 0x896
 80132ea:	490d      	ldr	r1, [pc, #52]	; (8013320 <tcp_pcb_remove+0x124>)
 80132ec:	4808      	ldr	r0, [pc, #32]	; (8013310 <tcp_pcb_remove+0x114>)
 80132ee:	f008 fb1d 	bl	801b92c <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	2200      	movs	r2, #0
 80132f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	2200      	movs	r2, #0
 80132fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80132fe:	bf00      	nop
 8013300:	3710      	adds	r7, #16
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	0802610c 	.word	0x0802610c
 801330c:	08026774 	.word	0x08026774
 8013310:	08026150 	.word	0x08026150
 8013314:	08026790 	.word	0x08026790
 8013318:	080267b0 	.word	0x080267b0
 801331c:	080267c8 	.word	0x080267c8
 8013320:	080267e4 	.word	0x080267e4

08013324 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d106      	bne.n	8013340 <tcp_next_iss+0x1c>
 8013332:	4b0a      	ldr	r3, [pc, #40]	; (801335c <tcp_next_iss+0x38>)
 8013334:	f640 02af 	movw	r2, #2223	; 0x8af
 8013338:	4909      	ldr	r1, [pc, #36]	; (8013360 <tcp_next_iss+0x3c>)
 801333a:	480a      	ldr	r0, [pc, #40]	; (8013364 <tcp_next_iss+0x40>)
 801333c:	f008 faf6 	bl	801b92c <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013340:	4b09      	ldr	r3, [pc, #36]	; (8013368 <tcp_next_iss+0x44>)
 8013342:	681a      	ldr	r2, [r3, #0]
 8013344:	4b09      	ldr	r3, [pc, #36]	; (801336c <tcp_next_iss+0x48>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4413      	add	r3, r2
 801334a:	4a07      	ldr	r2, [pc, #28]	; (8013368 <tcp_next_iss+0x44>)
 801334c:	6013      	str	r3, [r2, #0]
  return iss;
 801334e:	4b06      	ldr	r3, [pc, #24]	; (8013368 <tcp_next_iss+0x44>)
 8013350:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013352:	4618      	mov	r0, r3
 8013354:	3708      	adds	r7, #8
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	0802610c 	.word	0x0802610c
 8013360:	080267fc 	.word	0x080267fc
 8013364:	08026150 	.word	0x08026150
 8013368:	20000030 	.word	0x20000030
 801336c:	2000be4c 	.word	0x2000be4c

08013370 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b086      	sub	sp, #24
 8013374:	af00      	add	r7, sp, #0
 8013376:	4603      	mov	r3, r0
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d106      	bne.n	8013392 <tcp_eff_send_mss_netif+0x22>
 8013384:	4b14      	ldr	r3, [pc, #80]	; (80133d8 <tcp_eff_send_mss_netif+0x68>)
 8013386:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801338a:	4914      	ldr	r1, [pc, #80]	; (80133dc <tcp_eff_send_mss_netif+0x6c>)
 801338c:	4814      	ldr	r0, [pc, #80]	; (80133e0 <tcp_eff_send_mss_netif+0x70>)
 801338e:	f008 facd 	bl	801b92c <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d101      	bne.n	801339c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013398:	89fb      	ldrh	r3, [r7, #14]
 801339a:	e019      	b.n	80133d0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	8c1b      	ldrh	r3, [r3, #32]
 80133a0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80133a2:	8afb      	ldrh	r3, [r7, #22]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d012      	beq.n	80133ce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80133a8:	2328      	movs	r3, #40	; 0x28
 80133aa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80133ac:	8afa      	ldrh	r2, [r7, #22]
 80133ae:	8abb      	ldrh	r3, [r7, #20]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d904      	bls.n	80133be <tcp_eff_send_mss_netif+0x4e>
 80133b4:	8afa      	ldrh	r2, [r7, #22]
 80133b6:	8abb      	ldrh	r3, [r7, #20]
 80133b8:	1ad3      	subs	r3, r2, r3
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	e000      	b.n	80133c0 <tcp_eff_send_mss_netif+0x50>
 80133be:	2300      	movs	r3, #0
 80133c0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80133c2:	8a7a      	ldrh	r2, [r7, #18]
 80133c4:	89fb      	ldrh	r3, [r7, #14]
 80133c6:	4293      	cmp	r3, r2
 80133c8:	bf28      	it	cs
 80133ca:	4613      	movcs	r3, r2
 80133cc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80133ce:	89fb      	ldrh	r3, [r7, #14]
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3718      	adds	r7, #24
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	0802610c 	.word	0x0802610c
 80133dc:	08026818 	.word	0x08026818
 80133e0:	08026150 	.word	0x08026150

080133e4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d119      	bne.n	801342c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80133f8:	4b10      	ldr	r3, [pc, #64]	; (801343c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80133fa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80133fe:	4910      	ldr	r1, [pc, #64]	; (8013440 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013400:	4810      	ldr	r0, [pc, #64]	; (8013444 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013402:	f008 fa93 	bl	801b92c <printf>

  while (pcb != NULL) {
 8013406:	e011      	b.n	801342c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	681a      	ldr	r2, [r3, #0]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	429a      	cmp	r2, r3
 8013412:	d108      	bne.n	8013426 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f7fe fd20 	bl	8011e60 <tcp_abort>
      pcb = next;
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	60fb      	str	r3, [r7, #12]
 8013424:	e002      	b.n	801342c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d1ea      	bne.n	8013408 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013432:	bf00      	nop
 8013434:	bf00      	nop
 8013436:	3710      	adds	r7, #16
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}
 801343c:	0802610c 	.word	0x0802610c
 8013440:	08026840 	.word	0x08026840
 8013444:	08026150 	.word	0x08026150

08013448 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d02a      	beq.n	80134ae <tcp_netif_ip_addr_changed+0x66>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d026      	beq.n	80134ae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013460:	4b15      	ldr	r3, [pc, #84]	; (80134b8 <tcp_netif_ip_addr_changed+0x70>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	4619      	mov	r1, r3
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f7ff ffbc 	bl	80133e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801346c:	4b13      	ldr	r3, [pc, #76]	; (80134bc <tcp_netif_ip_addr_changed+0x74>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4619      	mov	r1, r3
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f7ff ffb6 	bl	80133e4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d017      	beq.n	80134ae <tcp_netif_ip_addr_changed+0x66>
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d013      	beq.n	80134ae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013486:	4b0e      	ldr	r3, [pc, #56]	; (80134c0 <tcp_netif_ip_addr_changed+0x78>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	60fb      	str	r3, [r7, #12]
 801348c:	e00c      	b.n	80134a8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	429a      	cmp	r2, r3
 8013498:	d103      	bne.n	80134a2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	681a      	ldr	r2, [r3, #0]
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	60fb      	str	r3, [r7, #12]
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d1ef      	bne.n	801348e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80134ae:	bf00      	nop
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	2000be48 	.word	0x2000be48
 80134bc:	2000be54 	.word	0x2000be54
 80134c0:	2000be50 	.word	0x2000be50

080134c4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d007      	beq.n	80134e4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134d8:	4618      	mov	r0, r3
 80134da:	f7ff fb51 	bl	8012b80 <tcp_segs_free>
    pcb->ooseq = NULL;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2200      	movs	r2, #0
 80134e2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80134e4:	bf00      	nop
 80134e6:	3708      	adds	r7, #8
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80134ec:	b590      	push	{r4, r7, lr}
 80134ee:	b08d      	sub	sp, #52	; 0x34
 80134f0:	af04      	add	r7, sp, #16
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d105      	bne.n	8013508 <tcp_input+0x1c>
 80134fc:	4b9b      	ldr	r3, [pc, #620]	; (801376c <tcp_input+0x280>)
 80134fe:	2283      	movs	r2, #131	; 0x83
 8013500:	499b      	ldr	r1, [pc, #620]	; (8013770 <tcp_input+0x284>)
 8013502:	489c      	ldr	r0, [pc, #624]	; (8013774 <tcp_input+0x288>)
 8013504:	f008 fa12 	bl	801b92c <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	685b      	ldr	r3, [r3, #4]
 801350c:	4a9a      	ldr	r2, [pc, #616]	; (8013778 <tcp_input+0x28c>)
 801350e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	895b      	ldrh	r3, [r3, #10]
 8013514:	2b13      	cmp	r3, #19
 8013516:	f240 83c4 	bls.w	8013ca2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801351a:	4b98      	ldr	r3, [pc, #608]	; (801377c <tcp_input+0x290>)
 801351c:	695b      	ldr	r3, [r3, #20]
 801351e:	4a97      	ldr	r2, [pc, #604]	; (801377c <tcp_input+0x290>)
 8013520:	6812      	ldr	r2, [r2, #0]
 8013522:	4611      	mov	r1, r2
 8013524:	4618      	mov	r0, r3
 8013526:	f006 fbcb 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	f040 83ba 	bne.w	8013ca6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013532:	4b92      	ldr	r3, [pc, #584]	; (801377c <tcp_input+0x290>)
 8013534:	695b      	ldr	r3, [r3, #20]
 8013536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801353a:	2be0      	cmp	r3, #224	; 0xe0
 801353c:	f000 83b3 	beq.w	8013ca6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013540:	4b8d      	ldr	r3, [pc, #564]	; (8013778 <tcp_input+0x28c>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	899b      	ldrh	r3, [r3, #12]
 8013546:	b29b      	uxth	r3, r3
 8013548:	4618      	mov	r0, r3
 801354a:	f7fc facd 	bl	800fae8 <lwip_htons>
 801354e:	4603      	mov	r3, r0
 8013550:	0b1b      	lsrs	r3, r3, #12
 8013552:	b29b      	uxth	r3, r3
 8013554:	b2db      	uxtb	r3, r3
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801355a:	7cbb      	ldrb	r3, [r7, #18]
 801355c:	2b13      	cmp	r3, #19
 801355e:	f240 83a4 	bls.w	8013caa <tcp_input+0x7be>
 8013562:	7cbb      	ldrb	r3, [r7, #18]
 8013564:	b29a      	uxth	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	891b      	ldrh	r3, [r3, #8]
 801356a:	429a      	cmp	r2, r3
 801356c:	f200 839d 	bhi.w	8013caa <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013570:	7cbb      	ldrb	r3, [r7, #18]
 8013572:	b29b      	uxth	r3, r3
 8013574:	3b14      	subs	r3, #20
 8013576:	b29a      	uxth	r2, r3
 8013578:	4b81      	ldr	r3, [pc, #516]	; (8013780 <tcp_input+0x294>)
 801357a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801357c:	4b81      	ldr	r3, [pc, #516]	; (8013784 <tcp_input+0x298>)
 801357e:	2200      	movs	r2, #0
 8013580:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	895a      	ldrh	r2, [r3, #10]
 8013586:	7cbb      	ldrb	r3, [r7, #18]
 8013588:	b29b      	uxth	r3, r3
 801358a:	429a      	cmp	r2, r3
 801358c:	d309      	bcc.n	80135a2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801358e:	4b7c      	ldr	r3, [pc, #496]	; (8013780 <tcp_input+0x294>)
 8013590:	881a      	ldrh	r2, [r3, #0]
 8013592:	4b7d      	ldr	r3, [pc, #500]	; (8013788 <tcp_input+0x29c>)
 8013594:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013596:	7cbb      	ldrb	r3, [r7, #18]
 8013598:	4619      	mov	r1, r3
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f7fd fdda 	bl	8011154 <pbuf_remove_header>
 80135a0:	e04e      	b.n	8013640 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d105      	bne.n	80135b6 <tcp_input+0xca>
 80135aa:	4b70      	ldr	r3, [pc, #448]	; (801376c <tcp_input+0x280>)
 80135ac:	22c2      	movs	r2, #194	; 0xc2
 80135ae:	4977      	ldr	r1, [pc, #476]	; (801378c <tcp_input+0x2a0>)
 80135b0:	4870      	ldr	r0, [pc, #448]	; (8013774 <tcp_input+0x288>)
 80135b2:	f008 f9bb 	bl	801b92c <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80135b6:	2114      	movs	r1, #20
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7fd fdcb 	bl	8011154 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	895a      	ldrh	r2, [r3, #10]
 80135c2:	4b71      	ldr	r3, [pc, #452]	; (8013788 <tcp_input+0x29c>)
 80135c4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80135c6:	4b6e      	ldr	r3, [pc, #440]	; (8013780 <tcp_input+0x294>)
 80135c8:	881a      	ldrh	r2, [r3, #0]
 80135ca:	4b6f      	ldr	r3, [pc, #444]	; (8013788 <tcp_input+0x29c>)
 80135cc:	881b      	ldrh	r3, [r3, #0]
 80135ce:	1ad3      	subs	r3, r2, r3
 80135d0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80135d2:	4b6d      	ldr	r3, [pc, #436]	; (8013788 <tcp_input+0x29c>)
 80135d4:	881b      	ldrh	r3, [r3, #0]
 80135d6:	4619      	mov	r1, r3
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7fd fdbb 	bl	8011154 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	895b      	ldrh	r3, [r3, #10]
 80135e4:	8a3a      	ldrh	r2, [r7, #16]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	f200 8361 	bhi.w	8013cae <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	4a64      	ldr	r2, [pc, #400]	; (8013784 <tcp_input+0x298>)
 80135f4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	8a3a      	ldrh	r2, [r7, #16]
 80135fc:	4611      	mov	r1, r2
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fd fda8 	bl	8011154 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	891a      	ldrh	r2, [r3, #8]
 8013608:	8a3b      	ldrh	r3, [r7, #16]
 801360a:	1ad3      	subs	r3, r2, r3
 801360c:	b29a      	uxth	r2, r3
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	895b      	ldrh	r3, [r3, #10]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d005      	beq.n	8013626 <tcp_input+0x13a>
 801361a:	4b54      	ldr	r3, [pc, #336]	; (801376c <tcp_input+0x280>)
 801361c:	22df      	movs	r2, #223	; 0xdf
 801361e:	495c      	ldr	r1, [pc, #368]	; (8013790 <tcp_input+0x2a4>)
 8013620:	4854      	ldr	r0, [pc, #336]	; (8013774 <tcp_input+0x288>)
 8013622:	f008 f983 	bl	801b92c <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	891a      	ldrh	r2, [r3, #8]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	891b      	ldrh	r3, [r3, #8]
 8013630:	429a      	cmp	r2, r3
 8013632:	d005      	beq.n	8013640 <tcp_input+0x154>
 8013634:	4b4d      	ldr	r3, [pc, #308]	; (801376c <tcp_input+0x280>)
 8013636:	22e0      	movs	r2, #224	; 0xe0
 8013638:	4956      	ldr	r1, [pc, #344]	; (8013794 <tcp_input+0x2a8>)
 801363a:	484e      	ldr	r0, [pc, #312]	; (8013774 <tcp_input+0x288>)
 801363c:	f008 f976 	bl	801b92c <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013640:	4b4d      	ldr	r3, [pc, #308]	; (8013778 <tcp_input+0x28c>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	881b      	ldrh	r3, [r3, #0]
 8013646:	b29b      	uxth	r3, r3
 8013648:	4a4b      	ldr	r2, [pc, #300]	; (8013778 <tcp_input+0x28c>)
 801364a:	6814      	ldr	r4, [r2, #0]
 801364c:	4618      	mov	r0, r3
 801364e:	f7fc fa4b 	bl	800fae8 <lwip_htons>
 8013652:	4603      	mov	r3, r0
 8013654:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013656:	4b48      	ldr	r3, [pc, #288]	; (8013778 <tcp_input+0x28c>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	885b      	ldrh	r3, [r3, #2]
 801365c:	b29b      	uxth	r3, r3
 801365e:	4a46      	ldr	r2, [pc, #280]	; (8013778 <tcp_input+0x28c>)
 8013660:	6814      	ldr	r4, [r2, #0]
 8013662:	4618      	mov	r0, r3
 8013664:	f7fc fa40 	bl	800fae8 <lwip_htons>
 8013668:	4603      	mov	r3, r0
 801366a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801366c:	4b42      	ldr	r3, [pc, #264]	; (8013778 <tcp_input+0x28c>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	4a41      	ldr	r2, [pc, #260]	; (8013778 <tcp_input+0x28c>)
 8013674:	6814      	ldr	r4, [r2, #0]
 8013676:	4618      	mov	r0, r3
 8013678:	f7fc fa4b 	bl	800fb12 <lwip_htonl>
 801367c:	4603      	mov	r3, r0
 801367e:	6063      	str	r3, [r4, #4]
 8013680:	6863      	ldr	r3, [r4, #4]
 8013682:	4a45      	ldr	r2, [pc, #276]	; (8013798 <tcp_input+0x2ac>)
 8013684:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013686:	4b3c      	ldr	r3, [pc, #240]	; (8013778 <tcp_input+0x28c>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	689b      	ldr	r3, [r3, #8]
 801368c:	4a3a      	ldr	r2, [pc, #232]	; (8013778 <tcp_input+0x28c>)
 801368e:	6814      	ldr	r4, [r2, #0]
 8013690:	4618      	mov	r0, r3
 8013692:	f7fc fa3e 	bl	800fb12 <lwip_htonl>
 8013696:	4603      	mov	r3, r0
 8013698:	60a3      	str	r3, [r4, #8]
 801369a:	68a3      	ldr	r3, [r4, #8]
 801369c:	4a3f      	ldr	r2, [pc, #252]	; (801379c <tcp_input+0x2b0>)
 801369e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80136a0:	4b35      	ldr	r3, [pc, #212]	; (8013778 <tcp_input+0x28c>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	89db      	ldrh	r3, [r3, #14]
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	4a33      	ldr	r2, [pc, #204]	; (8013778 <tcp_input+0x28c>)
 80136aa:	6814      	ldr	r4, [r2, #0]
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7fc fa1b 	bl	800fae8 <lwip_htons>
 80136b2:	4603      	mov	r3, r0
 80136b4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80136b6:	4b30      	ldr	r3, [pc, #192]	; (8013778 <tcp_input+0x28c>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	899b      	ldrh	r3, [r3, #12]
 80136bc:	b29b      	uxth	r3, r3
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fc fa12 	bl	800fae8 <lwip_htons>
 80136c4:	4603      	mov	r3, r0
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136cc:	b2da      	uxtb	r2, r3
 80136ce:	4b34      	ldr	r3, [pc, #208]	; (80137a0 <tcp_input+0x2b4>)
 80136d0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	891a      	ldrh	r2, [r3, #8]
 80136d6:	4b33      	ldr	r3, [pc, #204]	; (80137a4 <tcp_input+0x2b8>)
 80136d8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80136da:	4b31      	ldr	r3, [pc, #196]	; (80137a0 <tcp_input+0x2b4>)
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	f003 0303 	and.w	r3, r3, #3
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d00c      	beq.n	8013700 <tcp_input+0x214>
    tcplen++;
 80136e6:	4b2f      	ldr	r3, [pc, #188]	; (80137a4 <tcp_input+0x2b8>)
 80136e8:	881b      	ldrh	r3, [r3, #0]
 80136ea:	3301      	adds	r3, #1
 80136ec:	b29a      	uxth	r2, r3
 80136ee:	4b2d      	ldr	r3, [pc, #180]	; (80137a4 <tcp_input+0x2b8>)
 80136f0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	891a      	ldrh	r2, [r3, #8]
 80136f6:	4b2b      	ldr	r3, [pc, #172]	; (80137a4 <tcp_input+0x2b8>)
 80136f8:	881b      	ldrh	r3, [r3, #0]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	f200 82d9 	bhi.w	8013cb2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013700:	2300      	movs	r3, #0
 8013702:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013704:	4b28      	ldr	r3, [pc, #160]	; (80137a8 <tcp_input+0x2bc>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	61fb      	str	r3, [r7, #28]
 801370a:	e09d      	b.n	8013848 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	7d1b      	ldrb	r3, [r3, #20]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d105      	bne.n	8013720 <tcp_input+0x234>
 8013714:	4b15      	ldr	r3, [pc, #84]	; (801376c <tcp_input+0x280>)
 8013716:	22fb      	movs	r2, #251	; 0xfb
 8013718:	4924      	ldr	r1, [pc, #144]	; (80137ac <tcp_input+0x2c0>)
 801371a:	4816      	ldr	r0, [pc, #88]	; (8013774 <tcp_input+0x288>)
 801371c:	f008 f906 	bl	801b92c <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013720:	69fb      	ldr	r3, [r7, #28]
 8013722:	7d1b      	ldrb	r3, [r3, #20]
 8013724:	2b0a      	cmp	r3, #10
 8013726:	d105      	bne.n	8013734 <tcp_input+0x248>
 8013728:	4b10      	ldr	r3, [pc, #64]	; (801376c <tcp_input+0x280>)
 801372a:	22fc      	movs	r2, #252	; 0xfc
 801372c:	4920      	ldr	r1, [pc, #128]	; (80137b0 <tcp_input+0x2c4>)
 801372e:	4811      	ldr	r0, [pc, #68]	; (8013774 <tcp_input+0x288>)
 8013730:	f008 f8fc 	bl	801b92c <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	7d1b      	ldrb	r3, [r3, #20]
 8013738:	2b01      	cmp	r3, #1
 801373a:	d105      	bne.n	8013748 <tcp_input+0x25c>
 801373c:	4b0b      	ldr	r3, [pc, #44]	; (801376c <tcp_input+0x280>)
 801373e:	22fd      	movs	r2, #253	; 0xfd
 8013740:	491c      	ldr	r1, [pc, #112]	; (80137b4 <tcp_input+0x2c8>)
 8013742:	480c      	ldr	r0, [pc, #48]	; (8013774 <tcp_input+0x288>)
 8013744:	f008 f8f2 	bl	801b92c <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	7a1b      	ldrb	r3, [r3, #8]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d033      	beq.n	80137b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	7a1a      	ldrb	r2, [r3, #8]
 8013754:	4b09      	ldr	r3, [pc, #36]	; (801377c <tcp_input+0x290>)
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801375c:	3301      	adds	r3, #1
 801375e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013760:	429a      	cmp	r2, r3
 8013762:	d029      	beq.n	80137b8 <tcp_input+0x2cc>
      prev = pcb;
 8013764:	69fb      	ldr	r3, [r7, #28]
 8013766:	61bb      	str	r3, [r7, #24]
      continue;
 8013768:	e06b      	b.n	8013842 <tcp_input+0x356>
 801376a:	bf00      	nop
 801376c:	08026874 	.word	0x08026874
 8013770:	080268a8 	.word	0x080268a8
 8013774:	080268c0 	.word	0x080268c0
 8013778:	20004f48 	.word	0x20004f48
 801377c:	20008734 	.word	0x20008734
 8013780:	20004f4c 	.word	0x20004f4c
 8013784:	20004f50 	.word	0x20004f50
 8013788:	20004f4e 	.word	0x20004f4e
 801378c:	080268e8 	.word	0x080268e8
 8013790:	080268f8 	.word	0x080268f8
 8013794:	08026904 	.word	0x08026904
 8013798:	20004f58 	.word	0x20004f58
 801379c:	20004f5c 	.word	0x20004f5c
 80137a0:	20004f64 	.word	0x20004f64
 80137a4:	20004f62 	.word	0x20004f62
 80137a8:	2000be48 	.word	0x2000be48
 80137ac:	08026924 	.word	0x08026924
 80137b0:	0802694c 	.word	0x0802694c
 80137b4:	08026978 	.word	0x08026978
    }

    if (pcb->remote_port == tcphdr->src &&
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	8b1a      	ldrh	r2, [r3, #24]
 80137bc:	4b94      	ldr	r3, [pc, #592]	; (8013a10 <tcp_input+0x524>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d13a      	bne.n	801383e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	8ada      	ldrh	r2, [r3, #22]
 80137cc:	4b90      	ldr	r3, [pc, #576]	; (8013a10 <tcp_input+0x524>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	885b      	ldrh	r3, [r3, #2]
 80137d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d132      	bne.n	801383e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	685a      	ldr	r2, [r3, #4]
 80137dc:	4b8d      	ldr	r3, [pc, #564]	; (8013a14 <tcp_input+0x528>)
 80137de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d12c      	bne.n	801383e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	4b8a      	ldr	r3, [pc, #552]	; (8013a14 <tcp_input+0x528>)
 80137ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d126      	bne.n	801383e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	69fa      	ldr	r2, [r7, #28]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d106      	bne.n	8013808 <tcp_input+0x31c>
 80137fa:	4b87      	ldr	r3, [pc, #540]	; (8013a18 <tcp_input+0x52c>)
 80137fc:	f240 120d 	movw	r2, #269	; 0x10d
 8013800:	4986      	ldr	r1, [pc, #536]	; (8013a1c <tcp_input+0x530>)
 8013802:	4887      	ldr	r0, [pc, #540]	; (8013a20 <tcp_input+0x534>)
 8013804:	f008 f892 	bl	801b92c <printf>
      if (prev != NULL) {
 8013808:	69bb      	ldr	r3, [r7, #24]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d00a      	beq.n	8013824 <tcp_input+0x338>
        prev->next = pcb->next;
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	68da      	ldr	r2, [r3, #12]
 8013812:	69bb      	ldr	r3, [r7, #24]
 8013814:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013816:	4b83      	ldr	r3, [pc, #524]	; (8013a24 <tcp_input+0x538>)
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801381e:	4a81      	ldr	r2, [pc, #516]	; (8013a24 <tcp_input+0x538>)
 8013820:	69fb      	ldr	r3, [r7, #28]
 8013822:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	69fa      	ldr	r2, [r7, #28]
 801382a:	429a      	cmp	r2, r3
 801382c:	d111      	bne.n	8013852 <tcp_input+0x366>
 801382e:	4b7a      	ldr	r3, [pc, #488]	; (8013a18 <tcp_input+0x52c>)
 8013830:	f240 1215 	movw	r2, #277	; 0x115
 8013834:	497c      	ldr	r1, [pc, #496]	; (8013a28 <tcp_input+0x53c>)
 8013836:	487a      	ldr	r0, [pc, #488]	; (8013a20 <tcp_input+0x534>)
 8013838:	f008 f878 	bl	801b92c <printf>
      break;
 801383c:	e009      	b.n	8013852 <tcp_input+0x366>
    }
    prev = pcb;
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	61fb      	str	r3, [r7, #28]
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	2b00      	cmp	r3, #0
 801384c:	f47f af5e 	bne.w	801370c <tcp_input+0x220>
 8013850:	e000      	b.n	8013854 <tcp_input+0x368>
      break;
 8013852:	bf00      	nop
  }

  if (pcb == NULL) {
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	2b00      	cmp	r3, #0
 8013858:	f040 8095 	bne.w	8013986 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801385c:	4b73      	ldr	r3, [pc, #460]	; (8013a2c <tcp_input+0x540>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	61fb      	str	r3, [r7, #28]
 8013862:	e03f      	b.n	80138e4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013864:	69fb      	ldr	r3, [r7, #28]
 8013866:	7d1b      	ldrb	r3, [r3, #20]
 8013868:	2b0a      	cmp	r3, #10
 801386a:	d006      	beq.n	801387a <tcp_input+0x38e>
 801386c:	4b6a      	ldr	r3, [pc, #424]	; (8013a18 <tcp_input+0x52c>)
 801386e:	f240 121f 	movw	r2, #287	; 0x11f
 8013872:	496f      	ldr	r1, [pc, #444]	; (8013a30 <tcp_input+0x544>)
 8013874:	486a      	ldr	r0, [pc, #424]	; (8013a20 <tcp_input+0x534>)
 8013876:	f008 f859 	bl	801b92c <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801387a:	69fb      	ldr	r3, [r7, #28]
 801387c:	7a1b      	ldrb	r3, [r3, #8]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d009      	beq.n	8013896 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	7a1a      	ldrb	r2, [r3, #8]
 8013886:	4b63      	ldr	r3, [pc, #396]	; (8013a14 <tcp_input+0x528>)
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801388e:	3301      	adds	r3, #1
 8013890:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013892:	429a      	cmp	r2, r3
 8013894:	d122      	bne.n	80138dc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	8b1a      	ldrh	r2, [r3, #24]
 801389a:	4b5d      	ldr	r3, [pc, #372]	; (8013a10 <tcp_input+0x524>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	881b      	ldrh	r3, [r3, #0]
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d11b      	bne.n	80138de <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80138a6:	69fb      	ldr	r3, [r7, #28]
 80138a8:	8ada      	ldrh	r2, [r3, #22]
 80138aa:	4b59      	ldr	r3, [pc, #356]	; (8013a10 <tcp_input+0x524>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	885b      	ldrh	r3, [r3, #2]
 80138b0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d113      	bne.n	80138de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	685a      	ldr	r2, [r3, #4]
 80138ba:	4b56      	ldr	r3, [pc, #344]	; (8013a14 <tcp_input+0x528>)
 80138bc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80138be:	429a      	cmp	r2, r3
 80138c0:	d10d      	bne.n	80138de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	681a      	ldr	r2, [r3, #0]
 80138c6:	4b53      	ldr	r3, [pc, #332]	; (8013a14 <tcp_input+0x528>)
 80138c8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d107      	bne.n	80138de <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80138ce:	69f8      	ldr	r0, [r7, #28]
 80138d0:	f000 fb54 	bl	8013f7c <tcp_timewait_input>
        }
        pbuf_free(p);
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7fd fcc3 	bl	8011260 <pbuf_free>
        return;
 80138da:	e1f0      	b.n	8013cbe <tcp_input+0x7d2>
        continue;
 80138dc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80138de:	69fb      	ldr	r3, [r7, #28]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	61fb      	str	r3, [r7, #28]
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d1bc      	bne.n	8013864 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80138ea:	2300      	movs	r3, #0
 80138ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80138ee:	4b51      	ldr	r3, [pc, #324]	; (8013a34 <tcp_input+0x548>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	617b      	str	r3, [r7, #20]
 80138f4:	e02a      	b.n	801394c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	7a1b      	ldrb	r3, [r3, #8]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00c      	beq.n	8013918 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	7a1a      	ldrb	r2, [r3, #8]
 8013902:	4b44      	ldr	r3, [pc, #272]	; (8013a14 <tcp_input+0x528>)
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801390a:	3301      	adds	r3, #1
 801390c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801390e:	429a      	cmp	r2, r3
 8013910:	d002      	beq.n	8013918 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	61bb      	str	r3, [r7, #24]
        continue;
 8013916:	e016      	b.n	8013946 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	8ada      	ldrh	r2, [r3, #22]
 801391c:	4b3c      	ldr	r3, [pc, #240]	; (8013a10 <tcp_input+0x524>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	885b      	ldrh	r3, [r3, #2]
 8013922:	b29b      	uxth	r3, r3
 8013924:	429a      	cmp	r2, r3
 8013926:	d10c      	bne.n	8013942 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	681a      	ldr	r2, [r3, #0]
 801392c:	4b39      	ldr	r3, [pc, #228]	; (8013a14 <tcp_input+0x528>)
 801392e:	695b      	ldr	r3, [r3, #20]
 8013930:	429a      	cmp	r2, r3
 8013932:	d00f      	beq.n	8013954 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d00d      	beq.n	8013956 <tcp_input+0x46a>
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d009      	beq.n	8013956 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	68db      	ldr	r3, [r3, #12]
 801394a:	617b      	str	r3, [r7, #20]
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d1d1      	bne.n	80138f6 <tcp_input+0x40a>
 8013952:	e000      	b.n	8013956 <tcp_input+0x46a>
            break;
 8013954:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d014      	beq.n	8013986 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00a      	beq.n	8013978 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	68da      	ldr	r2, [r3, #12]
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801396a:	4b32      	ldr	r3, [pc, #200]	; (8013a34 <tcp_input+0x548>)
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013972:	4a30      	ldr	r2, [pc, #192]	; (8013a34 <tcp_input+0x548>)
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013978:	6978      	ldr	r0, [r7, #20]
 801397a:	f000 fa01 	bl	8013d80 <tcp_listen_input>
      }
      pbuf_free(p);
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f7fd fc6e 	bl	8011260 <pbuf_free>
      return;
 8013984:	e19b      	b.n	8013cbe <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013986:	69fb      	ldr	r3, [r7, #28]
 8013988:	2b00      	cmp	r3, #0
 801398a:	f000 8160 	beq.w	8013c4e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801398e:	4b2a      	ldr	r3, [pc, #168]	; (8013a38 <tcp_input+0x54c>)
 8013990:	2200      	movs	r2, #0
 8013992:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	891a      	ldrh	r2, [r3, #8]
 8013998:	4b27      	ldr	r3, [pc, #156]	; (8013a38 <tcp_input+0x54c>)
 801399a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801399c:	4a26      	ldr	r2, [pc, #152]	; (8013a38 <tcp_input+0x54c>)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80139a2:	4b1b      	ldr	r3, [pc, #108]	; (8013a10 <tcp_input+0x524>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	4a24      	ldr	r2, [pc, #144]	; (8013a38 <tcp_input+0x54c>)
 80139a8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80139aa:	4b24      	ldr	r3, [pc, #144]	; (8013a3c <tcp_input+0x550>)
 80139ac:	2200      	movs	r2, #0
 80139ae:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80139b0:	4b23      	ldr	r3, [pc, #140]	; (8013a40 <tcp_input+0x554>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80139b6:	4b23      	ldr	r3, [pc, #140]	; (8013a44 <tcp_input+0x558>)
 80139b8:	2200      	movs	r2, #0
 80139ba:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80139bc:	4b22      	ldr	r3, [pc, #136]	; (8013a48 <tcp_input+0x55c>)
 80139be:	781b      	ldrb	r3, [r3, #0]
 80139c0:	f003 0308 	and.w	r3, r3, #8
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d006      	beq.n	80139d6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	7b5b      	ldrb	r3, [r3, #13]
 80139cc:	f043 0301 	orr.w	r3, r3, #1
 80139d0:	b2da      	uxtb	r2, r3
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d038      	beq.n	8013a50 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80139de:	69f8      	ldr	r0, [r7, #28]
 80139e0:	f7ff f852 	bl	8012a88 <tcp_process_refused_data>
 80139e4:	4603      	mov	r3, r0
 80139e6:	f113 0f0d 	cmn.w	r3, #13
 80139ea:	d007      	beq.n	80139fc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d02d      	beq.n	8013a50 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80139f4:	4b15      	ldr	r3, [pc, #84]	; (8013a4c <tcp_input+0x560>)
 80139f6:	881b      	ldrh	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d029      	beq.n	8013a50 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f040 8104 	bne.w	8013c0e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013a06:	69f8      	ldr	r0, [r7, #28]
 8013a08:	f003 fe16 	bl	8017638 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013a0c:	e0ff      	b.n	8013c0e <tcp_input+0x722>
 8013a0e:	bf00      	nop
 8013a10:	20004f48 	.word	0x20004f48
 8013a14:	20008734 	.word	0x20008734
 8013a18:	08026874 	.word	0x08026874
 8013a1c:	080269a0 	.word	0x080269a0
 8013a20:	080268c0 	.word	0x080268c0
 8013a24:	2000be48 	.word	0x2000be48
 8013a28:	080269cc 	.word	0x080269cc
 8013a2c:	2000be58 	.word	0x2000be58
 8013a30:	080269f8 	.word	0x080269f8
 8013a34:	2000be50 	.word	0x2000be50
 8013a38:	20004f38 	.word	0x20004f38
 8013a3c:	20004f68 	.word	0x20004f68
 8013a40:	20004f65 	.word	0x20004f65
 8013a44:	20004f60 	.word	0x20004f60
 8013a48:	20004f64 	.word	0x20004f64
 8013a4c:	20004f62 	.word	0x20004f62
      }
    }
    tcp_input_pcb = pcb;
 8013a50:	4a9c      	ldr	r2, [pc, #624]	; (8013cc4 <tcp_input+0x7d8>)
 8013a52:	69fb      	ldr	r3, [r7, #28]
 8013a54:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013a56:	69f8      	ldr	r0, [r7, #28]
 8013a58:	f000 fb0a 	bl	8014070 <tcp_process>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013a60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a64:	f113 0f0d 	cmn.w	r3, #13
 8013a68:	f000 80d3 	beq.w	8013c12 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013a6c:	4b96      	ldr	r3, [pc, #600]	; (8013cc8 <tcp_input+0x7dc>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	f003 0308 	and.w	r3, r3, #8
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d015      	beq.n	8013aa4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d008      	beq.n	8013a94 <tcp_input+0x5a8>
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a88:	69fa      	ldr	r2, [r7, #28]
 8013a8a:	6912      	ldr	r2, [r2, #16]
 8013a8c:	f06f 010d 	mvn.w	r1, #13
 8013a90:	4610      	mov	r0, r2
 8013a92:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013a94:	69f9      	ldr	r1, [r7, #28]
 8013a96:	488d      	ldr	r0, [pc, #564]	; (8013ccc <tcp_input+0x7e0>)
 8013a98:	f7ff fbb0 	bl	80131fc <tcp_pcb_remove>
        tcp_free(pcb);
 8013a9c:	69f8      	ldr	r0, [r7, #28]
 8013a9e:	f7fd fe9b 	bl	80117d8 <tcp_free>
 8013aa2:	e0c1      	b.n	8013c28 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013aa8:	4b89      	ldr	r3, [pc, #548]	; (8013cd0 <tcp_input+0x7e4>)
 8013aaa:	881b      	ldrh	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d01d      	beq.n	8013aec <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013ab0:	4b87      	ldr	r3, [pc, #540]	; (8013cd0 <tcp_input+0x7e4>)
 8013ab2:	881b      	ldrh	r3, [r3, #0]
 8013ab4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d00a      	beq.n	8013ad6 <tcp_input+0x5ea>
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ac6:	69fa      	ldr	r2, [r7, #28]
 8013ac8:	6910      	ldr	r0, [r2, #16]
 8013aca:	89fa      	ldrh	r2, [r7, #14]
 8013acc:	69f9      	ldr	r1, [r7, #28]
 8013ace:	4798      	blx	r3
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	74fb      	strb	r3, [r7, #19]
 8013ad4:	e001      	b.n	8013ada <tcp_input+0x5ee>
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013ada:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ade:	f113 0f0d 	cmn.w	r3, #13
 8013ae2:	f000 8098 	beq.w	8013c16 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013ae6:	4b7a      	ldr	r3, [pc, #488]	; (8013cd0 <tcp_input+0x7e4>)
 8013ae8:	2200      	movs	r2, #0
 8013aea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013aec:	69f8      	ldr	r0, [r7, #28]
 8013aee:	f000 f907 	bl	8013d00 <tcp_input_delayed_close>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f040 8090 	bne.w	8013c1a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013afa:	4b76      	ldr	r3, [pc, #472]	; (8013cd4 <tcp_input+0x7e8>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d041      	beq.n	8013b86 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013b02:	69fb      	ldr	r3, [r7, #28]
 8013b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d006      	beq.n	8013b18 <tcp_input+0x62c>
 8013b0a:	4b73      	ldr	r3, [pc, #460]	; (8013cd8 <tcp_input+0x7ec>)
 8013b0c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013b10:	4972      	ldr	r1, [pc, #456]	; (8013cdc <tcp_input+0x7f0>)
 8013b12:	4873      	ldr	r0, [pc, #460]	; (8013ce0 <tcp_input+0x7f4>)
 8013b14:	f007 ff0a 	bl	801b92c <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	8b5b      	ldrh	r3, [r3, #26]
 8013b1c:	f003 0310 	and.w	r3, r3, #16
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d008      	beq.n	8013b36 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013b24:	4b6b      	ldr	r3, [pc, #428]	; (8013cd4 <tcp_input+0x7e8>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7fd fb99 	bl	8011260 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013b2e:	69f8      	ldr	r0, [r7, #28]
 8013b30:	f7fe f996 	bl	8011e60 <tcp_abort>
            goto aborted;
 8013b34:	e078      	b.n	8013c28 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d00c      	beq.n	8013b5a <tcp_input+0x66e>
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	6918      	ldr	r0, [r3, #16]
 8013b4a:	4b62      	ldr	r3, [pc, #392]	; (8013cd4 <tcp_input+0x7e8>)
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	2300      	movs	r3, #0
 8013b50:	69f9      	ldr	r1, [r7, #28]
 8013b52:	47a0      	blx	r4
 8013b54:	4603      	mov	r3, r0
 8013b56:	74fb      	strb	r3, [r7, #19]
 8013b58:	e008      	b.n	8013b6c <tcp_input+0x680>
 8013b5a:	4b5e      	ldr	r3, [pc, #376]	; (8013cd4 <tcp_input+0x7e8>)
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	2300      	movs	r3, #0
 8013b60:	69f9      	ldr	r1, [r7, #28]
 8013b62:	2000      	movs	r0, #0
 8013b64:	f7ff f884 	bl	8012c70 <tcp_recv_null>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013b6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b70:	f113 0f0d 	cmn.w	r3, #13
 8013b74:	d053      	beq.n	8013c1e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013b76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d003      	beq.n	8013b86 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013b7e:	4b55      	ldr	r3, [pc, #340]	; (8013cd4 <tcp_input+0x7e8>)
 8013b80:	681a      	ldr	r2, [r3, #0]
 8013b82:	69fb      	ldr	r3, [r7, #28]
 8013b84:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013b86:	4b50      	ldr	r3, [pc, #320]	; (8013cc8 <tcp_input+0x7dc>)
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	f003 0320 	and.w	r3, r3, #32
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d030      	beq.n	8013bf4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8013b92:	69fb      	ldr	r3, [r7, #28]
 8013b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d009      	beq.n	8013bae <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b9e:	7b5a      	ldrb	r2, [r3, #13]
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ba4:	f042 0220 	orr.w	r2, r2, #32
 8013ba8:	b2d2      	uxtb	r2, r2
 8013baa:	735a      	strb	r2, [r3, #13]
 8013bac:	e022      	b.n	8013bf4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013bb6:	d005      	beq.n	8013bc4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013bb8:	69fb      	ldr	r3, [r7, #28]
 8013bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d00b      	beq.n	8013be6 <tcp_input+0x6fa>
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	6918      	ldr	r0, [r3, #16]
 8013bd8:	2300      	movs	r3, #0
 8013bda:	2200      	movs	r2, #0
 8013bdc:	69f9      	ldr	r1, [r7, #28]
 8013bde:	47a0      	blx	r4
 8013be0:	4603      	mov	r3, r0
 8013be2:	74fb      	strb	r3, [r7, #19]
 8013be4:	e001      	b.n	8013bea <tcp_input+0x6fe>
 8013be6:	2300      	movs	r3, #0
 8013be8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013bea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013bee:	f113 0f0d 	cmn.w	r3, #13
 8013bf2:	d016      	beq.n	8013c22 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013bf4:	4b33      	ldr	r3, [pc, #204]	; (8013cc4 <tcp_input+0x7d8>)
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013bfa:	69f8      	ldr	r0, [r7, #28]
 8013bfc:	f000 f880 	bl	8013d00 <tcp_input_delayed_close>
 8013c00:	4603      	mov	r3, r0
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d10f      	bne.n	8013c26 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013c06:	69f8      	ldr	r0, [r7, #28]
 8013c08:	f002 ff10 	bl	8016a2c <tcp_output>
 8013c0c:	e00c      	b.n	8013c28 <tcp_input+0x73c>
        goto aborted;
 8013c0e:	bf00      	nop
 8013c10:	e00a      	b.n	8013c28 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013c12:	bf00      	nop
 8013c14:	e008      	b.n	8013c28 <tcp_input+0x73c>
              goto aborted;
 8013c16:	bf00      	nop
 8013c18:	e006      	b.n	8013c28 <tcp_input+0x73c>
          goto aborted;
 8013c1a:	bf00      	nop
 8013c1c:	e004      	b.n	8013c28 <tcp_input+0x73c>
            goto aborted;
 8013c1e:	bf00      	nop
 8013c20:	e002      	b.n	8013c28 <tcp_input+0x73c>
              goto aborted;
 8013c22:	bf00      	nop
 8013c24:	e000      	b.n	8013c28 <tcp_input+0x73c>
          goto aborted;
 8013c26:	bf00      	nop
    tcp_input_pcb = NULL;
 8013c28:	4b26      	ldr	r3, [pc, #152]	; (8013cc4 <tcp_input+0x7d8>)
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013c2e:	4b29      	ldr	r3, [pc, #164]	; (8013cd4 <tcp_input+0x7e8>)
 8013c30:	2200      	movs	r2, #0
 8013c32:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013c34:	4b2b      	ldr	r3, [pc, #172]	; (8013ce4 <tcp_input+0x7f8>)
 8013c36:	685b      	ldr	r3, [r3, #4]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d03f      	beq.n	8013cbc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8013c3c:	4b29      	ldr	r3, [pc, #164]	; (8013ce4 <tcp_input+0x7f8>)
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7fd fb0d 	bl	8011260 <pbuf_free>
      inseg.p = NULL;
 8013c46:	4b27      	ldr	r3, [pc, #156]	; (8013ce4 <tcp_input+0x7f8>)
 8013c48:	2200      	movs	r2, #0
 8013c4a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013c4c:	e036      	b.n	8013cbc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013c4e:	4b26      	ldr	r3, [pc, #152]	; (8013ce8 <tcp_input+0x7fc>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	899b      	ldrh	r3, [r3, #12]
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7fb ff46 	bl	800fae8 <lwip_htons>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	f003 0304 	and.w	r3, r3, #4
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d118      	bne.n	8013c9a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c68:	4b20      	ldr	r3, [pc, #128]	; (8013cec <tcp_input+0x800>)
 8013c6a:	6819      	ldr	r1, [r3, #0]
 8013c6c:	4b20      	ldr	r3, [pc, #128]	; (8013cf0 <tcp_input+0x804>)
 8013c6e:	881b      	ldrh	r3, [r3, #0]
 8013c70:	461a      	mov	r2, r3
 8013c72:	4b20      	ldr	r3, [pc, #128]	; (8013cf4 <tcp_input+0x808>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c78:	4b1b      	ldr	r3, [pc, #108]	; (8013ce8 <tcp_input+0x7fc>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c7c:	885b      	ldrh	r3, [r3, #2]
 8013c7e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c80:	4a19      	ldr	r2, [pc, #100]	; (8013ce8 <tcp_input+0x7fc>)
 8013c82:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c84:	8812      	ldrh	r2, [r2, #0]
 8013c86:	b292      	uxth	r2, r2
 8013c88:	9202      	str	r2, [sp, #8]
 8013c8a:	9301      	str	r3, [sp, #4]
 8013c8c:	4b1a      	ldr	r3, [pc, #104]	; (8013cf8 <tcp_input+0x80c>)
 8013c8e:	9300      	str	r3, [sp, #0]
 8013c90:	4b1a      	ldr	r3, [pc, #104]	; (8013cfc <tcp_input+0x810>)
 8013c92:	4602      	mov	r2, r0
 8013c94:	2000      	movs	r0, #0
 8013c96:	f003 fc7d 	bl	8017594 <tcp_rst>
    pbuf_free(p);
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f7fd fae0 	bl	8011260 <pbuf_free>
  return;
 8013ca0:	e00c      	b.n	8013cbc <tcp_input+0x7d0>
    goto dropped;
 8013ca2:	bf00      	nop
 8013ca4:	e006      	b.n	8013cb4 <tcp_input+0x7c8>
    goto dropped;
 8013ca6:	bf00      	nop
 8013ca8:	e004      	b.n	8013cb4 <tcp_input+0x7c8>
    goto dropped;
 8013caa:	bf00      	nop
 8013cac:	e002      	b.n	8013cb4 <tcp_input+0x7c8>
      goto dropped;
 8013cae:	bf00      	nop
 8013cb0:	e000      	b.n	8013cb4 <tcp_input+0x7c8>
      goto dropped;
 8013cb2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f7fd fad3 	bl	8011260 <pbuf_free>
 8013cba:	e000      	b.n	8013cbe <tcp_input+0x7d2>
  return;
 8013cbc:	bf00      	nop
}
 8013cbe:	3724      	adds	r7, #36	; 0x24
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd90      	pop	{r4, r7, pc}
 8013cc4:	2000be5c 	.word	0x2000be5c
 8013cc8:	20004f65 	.word	0x20004f65
 8013ccc:	2000be48 	.word	0x2000be48
 8013cd0:	20004f60 	.word	0x20004f60
 8013cd4:	20004f68 	.word	0x20004f68
 8013cd8:	08026874 	.word	0x08026874
 8013cdc:	08026a28 	.word	0x08026a28
 8013ce0:	080268c0 	.word	0x080268c0
 8013ce4:	20004f38 	.word	0x20004f38
 8013ce8:	20004f48 	.word	0x20004f48
 8013cec:	20004f5c 	.word	0x20004f5c
 8013cf0:	20004f62 	.word	0x20004f62
 8013cf4:	20004f58 	.word	0x20004f58
 8013cf8:	20008744 	.word	0x20008744
 8013cfc:	20008748 	.word	0x20008748

08013d00 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d106      	bne.n	8013d1c <tcp_input_delayed_close+0x1c>
 8013d0e:	4b17      	ldr	r3, [pc, #92]	; (8013d6c <tcp_input_delayed_close+0x6c>)
 8013d10:	f240 225a 	movw	r2, #602	; 0x25a
 8013d14:	4916      	ldr	r1, [pc, #88]	; (8013d70 <tcp_input_delayed_close+0x70>)
 8013d16:	4817      	ldr	r0, [pc, #92]	; (8013d74 <tcp_input_delayed_close+0x74>)
 8013d18:	f007 fe08 	bl	801b92c <printf>

  if (recv_flags & TF_CLOSED) {
 8013d1c:	4b16      	ldr	r3, [pc, #88]	; (8013d78 <tcp_input_delayed_close+0x78>)
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	f003 0310 	and.w	r3, r3, #16
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d01c      	beq.n	8013d62 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	8b5b      	ldrh	r3, [r3, #26]
 8013d2c:	f003 0310 	and.w	r3, r3, #16
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d10d      	bne.n	8013d50 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d008      	beq.n	8013d50 <tcp_input_delayed_close+0x50>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	6912      	ldr	r2, [r2, #16]
 8013d48:	f06f 010e 	mvn.w	r1, #14
 8013d4c:	4610      	mov	r0, r2
 8013d4e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013d50:	6879      	ldr	r1, [r7, #4]
 8013d52:	480a      	ldr	r0, [pc, #40]	; (8013d7c <tcp_input_delayed_close+0x7c>)
 8013d54:	f7ff fa52 	bl	80131fc <tcp_pcb_remove>
    tcp_free(pcb);
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f7fd fd3d 	bl	80117d8 <tcp_free>
    return 1;
 8013d5e:	2301      	movs	r3, #1
 8013d60:	e000      	b.n	8013d64 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013d62:	2300      	movs	r3, #0
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	08026874 	.word	0x08026874
 8013d70:	08026a44 	.word	0x08026a44
 8013d74:	080268c0 	.word	0x080268c0
 8013d78:	20004f65 	.word	0x20004f65
 8013d7c:	2000be48 	.word	0x2000be48

08013d80 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013d80:	b590      	push	{r4, r7, lr}
 8013d82:	b08b      	sub	sp, #44	; 0x2c
 8013d84:	af04      	add	r7, sp, #16
 8013d86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013d88:	4b6f      	ldr	r3, [pc, #444]	; (8013f48 <tcp_listen_input+0x1c8>)
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	f003 0304 	and.w	r3, r3, #4
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	f040 80d2 	bne.w	8013f3a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d106      	bne.n	8013daa <tcp_listen_input+0x2a>
 8013d9c:	4b6b      	ldr	r3, [pc, #428]	; (8013f4c <tcp_listen_input+0x1cc>)
 8013d9e:	f240 2281 	movw	r2, #641	; 0x281
 8013da2:	496b      	ldr	r1, [pc, #428]	; (8013f50 <tcp_listen_input+0x1d0>)
 8013da4:	486b      	ldr	r0, [pc, #428]	; (8013f54 <tcp_listen_input+0x1d4>)
 8013da6:	f007 fdc1 	bl	801b92c <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013daa:	4b67      	ldr	r3, [pc, #412]	; (8013f48 <tcp_listen_input+0x1c8>)
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	f003 0310 	and.w	r3, r3, #16
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d019      	beq.n	8013dea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013db6:	4b68      	ldr	r3, [pc, #416]	; (8013f58 <tcp_listen_input+0x1d8>)
 8013db8:	6819      	ldr	r1, [r3, #0]
 8013dba:	4b68      	ldr	r3, [pc, #416]	; (8013f5c <tcp_listen_input+0x1dc>)
 8013dbc:	881b      	ldrh	r3, [r3, #0]
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	4b67      	ldr	r3, [pc, #412]	; (8013f60 <tcp_listen_input+0x1e0>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013dc6:	4b67      	ldr	r3, [pc, #412]	; (8013f64 <tcp_listen_input+0x1e4>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dca:	885b      	ldrh	r3, [r3, #2]
 8013dcc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013dce:	4a65      	ldr	r2, [pc, #404]	; (8013f64 <tcp_listen_input+0x1e4>)
 8013dd0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dd2:	8812      	ldrh	r2, [r2, #0]
 8013dd4:	b292      	uxth	r2, r2
 8013dd6:	9202      	str	r2, [sp, #8]
 8013dd8:	9301      	str	r3, [sp, #4]
 8013dda:	4b63      	ldr	r3, [pc, #396]	; (8013f68 <tcp_listen_input+0x1e8>)
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	4b63      	ldr	r3, [pc, #396]	; (8013f6c <tcp_listen_input+0x1ec>)
 8013de0:	4602      	mov	r2, r0
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f003 fbd6 	bl	8017594 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013de8:	e0a9      	b.n	8013f3e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013dea:	4b57      	ldr	r3, [pc, #348]	; (8013f48 <tcp_listen_input+0x1c8>)
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	f003 0302 	and.w	r3, r3, #2
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	f000 80a3 	beq.w	8013f3e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	7d5b      	ldrb	r3, [r3, #21]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7ff f85b 	bl	8012eb8 <tcp_alloc>
 8013e02:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d111      	bne.n	8013e2e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	699b      	ldr	r3, [r3, #24]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d00a      	beq.n	8013e28 <tcp_listen_input+0xa8>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	699b      	ldr	r3, [r3, #24]
 8013e16:	687a      	ldr	r2, [r7, #4]
 8013e18:	6910      	ldr	r0, [r2, #16]
 8013e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e1e:	2100      	movs	r1, #0
 8013e20:	4798      	blx	r3
 8013e22:	4603      	mov	r3, r0
 8013e24:	73bb      	strb	r3, [r7, #14]
      return;
 8013e26:	e08b      	b.n	8013f40 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013e28:	23f0      	movs	r3, #240	; 0xf0
 8013e2a:	73bb      	strb	r3, [r7, #14]
      return;
 8013e2c:	e088      	b.n	8013f40 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013e2e:	4b50      	ldr	r3, [pc, #320]	; (8013f70 <tcp_listen_input+0x1f0>)
 8013e30:	695a      	ldr	r2, [r3, #20]
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013e36:	4b4e      	ldr	r3, [pc, #312]	; (8013f70 <tcp_listen_input+0x1f0>)
 8013e38:	691a      	ldr	r2, [r3, #16]
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8ada      	ldrh	r2, [r3, #22]
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013e46:	4b47      	ldr	r3, [pc, #284]	; (8013f64 <tcp_listen_input+0x1e4>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	881b      	ldrh	r3, [r3, #0]
 8013e4c:	b29a      	uxth	r2, r3
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	2203      	movs	r2, #3
 8013e56:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013e58:	4b41      	ldr	r3, [pc, #260]	; (8013f60 <tcp_listen_input+0x1e0>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	1c5a      	adds	r2, r3, #1
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013e6a:	6978      	ldr	r0, [r7, #20]
 8013e6c:	f7ff fa5a 	bl	8013324 <tcp_next_iss>
 8013e70:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	693a      	ldr	r2, [r7, #16]
 8013e76:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	693a      	ldr	r2, [r7, #16]
 8013e7c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	693a      	ldr	r2, [r7, #16]
 8013e82:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	693a      	ldr	r2, [r7, #16]
 8013e88:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013e8a:	4b35      	ldr	r3, [pc, #212]	; (8013f60 <tcp_listen_input+0x1e0>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	1e5a      	subs	r2, r3, #1
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	691a      	ldr	r2, [r3, #16]
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	687a      	ldr	r2, [r7, #4]
 8013ea0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	7a5b      	ldrb	r3, [r3, #9]
 8013ea6:	f003 030c 	and.w	r3, r3, #12
 8013eaa:	b2da      	uxtb	r2, r3
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	7a1a      	ldrb	r2, [r3, #8]
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013eb8:	4b2e      	ldr	r3, [pc, #184]	; (8013f74 <tcp_listen_input+0x1f4>)
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	60da      	str	r2, [r3, #12]
 8013ec0:	4a2c      	ldr	r2, [pc, #176]	; (8013f74 <tcp_listen_input+0x1f4>)
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	6013      	str	r3, [r2, #0]
 8013ec6:	f003 fd27 	bl	8017918 <tcp_timer_needed>
 8013eca:	4b2b      	ldr	r3, [pc, #172]	; (8013f78 <tcp_listen_input+0x1f8>)
 8013ecc:	2201      	movs	r2, #1
 8013ece:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013ed0:	6978      	ldr	r0, [r7, #20]
 8013ed2:	f001 fd8d 	bl	80159f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013ed6:	4b23      	ldr	r3, [pc, #140]	; (8013f64 <tcp_listen_input+0x1e4>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	89db      	ldrh	r3, [r3, #14]
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	3304      	adds	r3, #4
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f005 fc4b 	bl	8019794 <ip4_route>
 8013efe:	4601      	mov	r1, r0
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	3304      	adds	r3, #4
 8013f04:	461a      	mov	r2, r3
 8013f06:	4620      	mov	r0, r4
 8013f08:	f7ff fa32 	bl	8013370 <tcp_eff_send_mss_netif>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	461a      	mov	r2, r3
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013f14:	2112      	movs	r1, #18
 8013f16:	6978      	ldr	r0, [r7, #20]
 8013f18:	f002 fc9a 	bl	8016850 <tcp_enqueue_flags>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d004      	beq.n	8013f32 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013f28:	2100      	movs	r1, #0
 8013f2a:	6978      	ldr	r0, [r7, #20]
 8013f2c:	f7fd feda 	bl	8011ce4 <tcp_abandon>
      return;
 8013f30:	e006      	b.n	8013f40 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013f32:	6978      	ldr	r0, [r7, #20]
 8013f34:	f002 fd7a 	bl	8016a2c <tcp_output>
  return;
 8013f38:	e001      	b.n	8013f3e <tcp_listen_input+0x1be>
    return;
 8013f3a:	bf00      	nop
 8013f3c:	e000      	b.n	8013f40 <tcp_listen_input+0x1c0>
  return;
 8013f3e:	bf00      	nop
}
 8013f40:	371c      	adds	r7, #28
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd90      	pop	{r4, r7, pc}
 8013f46:	bf00      	nop
 8013f48:	20004f64 	.word	0x20004f64
 8013f4c:	08026874 	.word	0x08026874
 8013f50:	08026a6c 	.word	0x08026a6c
 8013f54:	080268c0 	.word	0x080268c0
 8013f58:	20004f5c 	.word	0x20004f5c
 8013f5c:	20004f62 	.word	0x20004f62
 8013f60:	20004f58 	.word	0x20004f58
 8013f64:	20004f48 	.word	0x20004f48
 8013f68:	20008744 	.word	0x20008744
 8013f6c:	20008748 	.word	0x20008748
 8013f70:	20008734 	.word	0x20008734
 8013f74:	2000be48 	.word	0x2000be48
 8013f78:	2000be44 	.word	0x2000be44

08013f7c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b086      	sub	sp, #24
 8013f80:	af04      	add	r7, sp, #16
 8013f82:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013f84:	4b2f      	ldr	r3, [pc, #188]	; (8014044 <tcp_timewait_input+0xc8>)
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	f003 0304 	and.w	r3, r3, #4
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d153      	bne.n	8014038 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d106      	bne.n	8013fa4 <tcp_timewait_input+0x28>
 8013f96:	4b2c      	ldr	r3, [pc, #176]	; (8014048 <tcp_timewait_input+0xcc>)
 8013f98:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013f9c:	492b      	ldr	r1, [pc, #172]	; (801404c <tcp_timewait_input+0xd0>)
 8013f9e:	482c      	ldr	r0, [pc, #176]	; (8014050 <tcp_timewait_input+0xd4>)
 8013fa0:	f007 fcc4 	bl	801b92c <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013fa4:	4b27      	ldr	r3, [pc, #156]	; (8014044 <tcp_timewait_input+0xc8>)
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	f003 0302 	and.w	r3, r3, #2
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d02a      	beq.n	8014006 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013fb0:	4b28      	ldr	r3, [pc, #160]	; (8014054 <tcp_timewait_input+0xd8>)
 8013fb2:	681a      	ldr	r2, [r3, #0]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fb8:	1ad3      	subs	r3, r2, r3
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	db2d      	blt.n	801401a <tcp_timewait_input+0x9e>
 8013fbe:	4b25      	ldr	r3, [pc, #148]	; (8014054 <tcp_timewait_input+0xd8>)
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fc6:	6879      	ldr	r1, [r7, #4]
 8013fc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013fca:	440b      	add	r3, r1
 8013fcc:	1ad3      	subs	r3, r2, r3
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	dc23      	bgt.n	801401a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fd2:	4b21      	ldr	r3, [pc, #132]	; (8014058 <tcp_timewait_input+0xdc>)
 8013fd4:	6819      	ldr	r1, [r3, #0]
 8013fd6:	4b21      	ldr	r3, [pc, #132]	; (801405c <tcp_timewait_input+0xe0>)
 8013fd8:	881b      	ldrh	r3, [r3, #0]
 8013fda:	461a      	mov	r2, r3
 8013fdc:	4b1d      	ldr	r3, [pc, #116]	; (8014054 <tcp_timewait_input+0xd8>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fe2:	4b1f      	ldr	r3, [pc, #124]	; (8014060 <tcp_timewait_input+0xe4>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fe6:	885b      	ldrh	r3, [r3, #2]
 8013fe8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fea:	4a1d      	ldr	r2, [pc, #116]	; (8014060 <tcp_timewait_input+0xe4>)
 8013fec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fee:	8812      	ldrh	r2, [r2, #0]
 8013ff0:	b292      	uxth	r2, r2
 8013ff2:	9202      	str	r2, [sp, #8]
 8013ff4:	9301      	str	r3, [sp, #4]
 8013ff6:	4b1b      	ldr	r3, [pc, #108]	; (8014064 <tcp_timewait_input+0xe8>)
 8013ff8:	9300      	str	r3, [sp, #0]
 8013ffa:	4b1b      	ldr	r3, [pc, #108]	; (8014068 <tcp_timewait_input+0xec>)
 8013ffc:	4602      	mov	r2, r0
 8013ffe:	6878      	ldr	r0, [r7, #4]
 8014000:	f003 fac8 	bl	8017594 <tcp_rst>
      return;
 8014004:	e01b      	b.n	801403e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014006:	4b0f      	ldr	r3, [pc, #60]	; (8014044 <tcp_timewait_input+0xc8>)
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	f003 0301 	and.w	r3, r3, #1
 801400e:	2b00      	cmp	r3, #0
 8014010:	d003      	beq.n	801401a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014012:	4b16      	ldr	r3, [pc, #88]	; (801406c <tcp_timewait_input+0xf0>)
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801401a:	4b10      	ldr	r3, [pc, #64]	; (801405c <tcp_timewait_input+0xe0>)
 801401c:	881b      	ldrh	r3, [r3, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d00c      	beq.n	801403c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	8b5b      	ldrh	r3, [r3, #26]
 8014026:	f043 0302 	orr.w	r3, r3, #2
 801402a:	b29a      	uxth	r2, r3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f002 fcfb 	bl	8016a2c <tcp_output>
  }
  return;
 8014036:	e001      	b.n	801403c <tcp_timewait_input+0xc0>
    return;
 8014038:	bf00      	nop
 801403a:	e000      	b.n	801403e <tcp_timewait_input+0xc2>
  return;
 801403c:	bf00      	nop
}
 801403e:	3708      	adds	r7, #8
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}
 8014044:	20004f64 	.word	0x20004f64
 8014048:	08026874 	.word	0x08026874
 801404c:	08026a8c 	.word	0x08026a8c
 8014050:	080268c0 	.word	0x080268c0
 8014054:	20004f58 	.word	0x20004f58
 8014058:	20004f5c 	.word	0x20004f5c
 801405c:	20004f62 	.word	0x20004f62
 8014060:	20004f48 	.word	0x20004f48
 8014064:	20008744 	.word	0x20008744
 8014068:	20008748 	.word	0x20008748
 801406c:	2000be4c 	.word	0x2000be4c

08014070 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014070:	b590      	push	{r4, r7, lr}
 8014072:	b08d      	sub	sp, #52	; 0x34
 8014074:	af04      	add	r7, sp, #16
 8014076:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014078:	2300      	movs	r3, #0
 801407a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801407c:	2300      	movs	r3, #0
 801407e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d106      	bne.n	8014094 <tcp_process+0x24>
 8014086:	4ba5      	ldr	r3, [pc, #660]	; (801431c <tcp_process+0x2ac>)
 8014088:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801408c:	49a4      	ldr	r1, [pc, #656]	; (8014320 <tcp_process+0x2b0>)
 801408e:	48a5      	ldr	r0, [pc, #660]	; (8014324 <tcp_process+0x2b4>)
 8014090:	f007 fc4c 	bl	801b92c <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014094:	4ba4      	ldr	r3, [pc, #656]	; (8014328 <tcp_process+0x2b8>)
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	f003 0304 	and.w	r3, r3, #4
 801409c:	2b00      	cmp	r3, #0
 801409e:	d04e      	beq.n	801413e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	7d1b      	ldrb	r3, [r3, #20]
 80140a4:	2b02      	cmp	r3, #2
 80140a6:	d108      	bne.n	80140ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140ac:	4b9f      	ldr	r3, [pc, #636]	; (801432c <tcp_process+0x2bc>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d123      	bne.n	80140fc <tcp_process+0x8c>
        acceptable = 1;
 80140b4:	2301      	movs	r3, #1
 80140b6:	76fb      	strb	r3, [r7, #27]
 80140b8:	e020      	b.n	80140fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140be:	4b9c      	ldr	r3, [pc, #624]	; (8014330 <tcp_process+0x2c0>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d102      	bne.n	80140cc <tcp_process+0x5c>
        acceptable = 1;
 80140c6:	2301      	movs	r3, #1
 80140c8:	76fb      	strb	r3, [r7, #27]
 80140ca:	e017      	b.n	80140fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80140cc:	4b98      	ldr	r3, [pc, #608]	; (8014330 <tcp_process+0x2c0>)
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	db10      	blt.n	80140fc <tcp_process+0x8c>
 80140da:	4b95      	ldr	r3, [pc, #596]	; (8014330 <tcp_process+0x2c0>)
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140e2:	6879      	ldr	r1, [r7, #4]
 80140e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80140e6:	440b      	add	r3, r1
 80140e8:	1ad3      	subs	r3, r2, r3
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	dc06      	bgt.n	80140fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	8b5b      	ldrh	r3, [r3, #26]
 80140f2:	f043 0302 	orr.w	r3, r3, #2
 80140f6:	b29a      	uxth	r2, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80140fc:	7efb      	ldrb	r3, [r7, #27]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d01b      	beq.n	801413a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	7d1b      	ldrb	r3, [r3, #20]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d106      	bne.n	8014118 <tcp_process+0xa8>
 801410a:	4b84      	ldr	r3, [pc, #528]	; (801431c <tcp_process+0x2ac>)
 801410c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014110:	4988      	ldr	r1, [pc, #544]	; (8014334 <tcp_process+0x2c4>)
 8014112:	4884      	ldr	r0, [pc, #528]	; (8014324 <tcp_process+0x2b4>)
 8014114:	f007 fc0a 	bl	801b92c <printf>
      recv_flags |= TF_RESET;
 8014118:	4b87      	ldr	r3, [pc, #540]	; (8014338 <tcp_process+0x2c8>)
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	f043 0308 	orr.w	r3, r3, #8
 8014120:	b2da      	uxtb	r2, r3
 8014122:	4b85      	ldr	r3, [pc, #532]	; (8014338 <tcp_process+0x2c8>)
 8014124:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	8b5b      	ldrh	r3, [r3, #26]
 801412a:	f023 0301 	bic.w	r3, r3, #1
 801412e:	b29a      	uxth	r2, r3
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014134:	f06f 030d 	mvn.w	r3, #13
 8014138:	e37a      	b.n	8014830 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801413a:	2300      	movs	r3, #0
 801413c:	e378      	b.n	8014830 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801413e:	4b7a      	ldr	r3, [pc, #488]	; (8014328 <tcp_process+0x2b8>)
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	f003 0302 	and.w	r3, r3, #2
 8014146:	2b00      	cmp	r3, #0
 8014148:	d010      	beq.n	801416c <tcp_process+0xfc>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	7d1b      	ldrb	r3, [r3, #20]
 801414e:	2b02      	cmp	r3, #2
 8014150:	d00c      	beq.n	801416c <tcp_process+0xfc>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	7d1b      	ldrb	r3, [r3, #20]
 8014156:	2b03      	cmp	r3, #3
 8014158:	d008      	beq.n	801416c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	8b5b      	ldrh	r3, [r3, #26]
 801415e:	f043 0302 	orr.w	r3, r3, #2
 8014162:	b29a      	uxth	r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014168:	2300      	movs	r3, #0
 801416a:	e361      	b.n	8014830 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	8b5b      	ldrh	r3, [r3, #26]
 8014170:	f003 0310 	and.w	r3, r3, #16
 8014174:	2b00      	cmp	r3, #0
 8014176:	d103      	bne.n	8014180 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014178:	4b70      	ldr	r3, [pc, #448]	; (801433c <tcp_process+0x2cc>)
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2200      	movs	r2, #0
 8014184:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2200      	movs	r2, #0
 801418c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f001 fc2d 	bl	80159f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	7d1b      	ldrb	r3, [r3, #20]
 801419a:	3b02      	subs	r3, #2
 801419c:	2b07      	cmp	r3, #7
 801419e:	f200 8337 	bhi.w	8014810 <tcp_process+0x7a0>
 80141a2:	a201      	add	r2, pc, #4	; (adr r2, 80141a8 <tcp_process+0x138>)
 80141a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141a8:	080141c9 	.word	0x080141c9
 80141ac:	080143f9 	.word	0x080143f9
 80141b0:	08014571 	.word	0x08014571
 80141b4:	0801459b 	.word	0x0801459b
 80141b8:	080146bf 	.word	0x080146bf
 80141bc:	08014571 	.word	0x08014571
 80141c0:	0801474b 	.word	0x0801474b
 80141c4:	080147db 	.word	0x080147db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80141c8:	4b57      	ldr	r3, [pc, #348]	; (8014328 <tcp_process+0x2b8>)
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	f003 0310 	and.w	r3, r3, #16
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	f000 80e4 	beq.w	801439e <tcp_process+0x32e>
 80141d6:	4b54      	ldr	r3, [pc, #336]	; (8014328 <tcp_process+0x2b8>)
 80141d8:	781b      	ldrb	r3, [r3, #0]
 80141da:	f003 0302 	and.w	r3, r3, #2
 80141de:	2b00      	cmp	r3, #0
 80141e0:	f000 80dd 	beq.w	801439e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141e8:	1c5a      	adds	r2, r3, #1
 80141ea:	4b50      	ldr	r3, [pc, #320]	; (801432c <tcp_process+0x2bc>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	429a      	cmp	r2, r3
 80141f0:	f040 80d5 	bne.w	801439e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80141f4:	4b4e      	ldr	r3, [pc, #312]	; (8014330 <tcp_process+0x2c0>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	1c5a      	adds	r2, r3, #1
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014206:	4b49      	ldr	r3, [pc, #292]	; (801432c <tcp_process+0x2bc>)
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801420e:	4b4c      	ldr	r3, [pc, #304]	; (8014340 <tcp_process+0x2d0>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	89db      	ldrh	r3, [r3, #14]
 8014214:	b29a      	uxth	r2, r3
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014228:	4b41      	ldr	r3, [pc, #260]	; (8014330 <tcp_process+0x2c0>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	1e5a      	subs	r2, r3, #1
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	2204      	movs	r2, #4
 8014236:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	3304      	adds	r3, #4
 8014240:	4618      	mov	r0, r3
 8014242:	f005 faa7 	bl	8019794 <ip4_route>
 8014246:	4601      	mov	r1, r0
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	3304      	adds	r3, #4
 801424c:	461a      	mov	r2, r3
 801424e:	4620      	mov	r0, r4
 8014250:	f7ff f88e 	bl	8013370 <tcp_eff_send_mss_netif>
 8014254:	4603      	mov	r3, r0
 8014256:	461a      	mov	r2, r3
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014260:	009a      	lsls	r2, r3, #2
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014266:	005b      	lsls	r3, r3, #1
 8014268:	f241 111c 	movw	r1, #4380	; 0x111c
 801426c:	428b      	cmp	r3, r1
 801426e:	bf38      	it	cc
 8014270:	460b      	movcc	r3, r1
 8014272:	429a      	cmp	r2, r3
 8014274:	d204      	bcs.n	8014280 <tcp_process+0x210>
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801427a:	009b      	lsls	r3, r3, #2
 801427c:	b29b      	uxth	r3, r3
 801427e:	e00d      	b.n	801429c <tcp_process+0x22c>
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014284:	005b      	lsls	r3, r3, #1
 8014286:	f241 121c 	movw	r2, #4380	; 0x111c
 801428a:	4293      	cmp	r3, r2
 801428c:	d904      	bls.n	8014298 <tcp_process+0x228>
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014292:	005b      	lsls	r3, r3, #1
 8014294:	b29b      	uxth	r3, r3
 8014296:	e001      	b.n	801429c <tcp_process+0x22c>
 8014298:	f241 131c 	movw	r3, #4380	; 0x111c
 801429c:	687a      	ldr	r2, [r7, #4]
 801429e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d106      	bne.n	80142ba <tcp_process+0x24a>
 80142ac:	4b1b      	ldr	r3, [pc, #108]	; (801431c <tcp_process+0x2ac>)
 80142ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80142b2:	4924      	ldr	r1, [pc, #144]	; (8014344 <tcp_process+0x2d4>)
 80142b4:	481b      	ldr	r0, [pc, #108]	; (8014324 <tcp_process+0x2b4>)
 80142b6:	f007 fb39 	bl	801b92c <printf>
        --pcb->snd_queuelen;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80142c0:	3b01      	subs	r3, #1
 80142c2:	b29a      	uxth	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d111      	bne.n	80142fa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d106      	bne.n	80142f0 <tcp_process+0x280>
 80142e2:	4b0e      	ldr	r3, [pc, #56]	; (801431c <tcp_process+0x2ac>)
 80142e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80142e8:	4917      	ldr	r1, [pc, #92]	; (8014348 <tcp_process+0x2d8>)
 80142ea:	480e      	ldr	r0, [pc, #56]	; (8014324 <tcp_process+0x2b4>)
 80142ec:	f007 fb1e 	bl	801b92c <printf>
          pcb->unsent = rseg->next;
 80142f0:	69fb      	ldr	r3, [r7, #28]
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80142f8:	e003      	b.n	8014302 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80142fa:	69fb      	ldr	r3, [r7, #28]
 80142fc:	681a      	ldr	r2, [r3, #0]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014302:	69f8      	ldr	r0, [r7, #28]
 8014304:	f7fe fc51 	bl	8012baa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801430c:	2b00      	cmp	r3, #0
 801430e:	d11d      	bne.n	801434c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014316:	861a      	strh	r2, [r3, #48]	; 0x30
 8014318:	e01f      	b.n	801435a <tcp_process+0x2ea>
 801431a:	bf00      	nop
 801431c:	08026874 	.word	0x08026874
 8014320:	08026aac 	.word	0x08026aac
 8014324:	080268c0 	.word	0x080268c0
 8014328:	20004f64 	.word	0x20004f64
 801432c:	20004f5c 	.word	0x20004f5c
 8014330:	20004f58 	.word	0x20004f58
 8014334:	08026ac8 	.word	0x08026ac8
 8014338:	20004f65 	.word	0x20004f65
 801433c:	2000be4c 	.word	0x2000be4c
 8014340:	20004f48 	.word	0x20004f48
 8014344:	08026ae8 	.word	0x08026ae8
 8014348:	08026b00 	.word	0x08026b00
        } else {
          pcb->rtime = 0;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2200      	movs	r2, #0
 8014350:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2200      	movs	r2, #0
 8014356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014360:	2b00      	cmp	r3, #0
 8014362:	d00a      	beq.n	801437a <tcp_process+0x30a>
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801436a:	687a      	ldr	r2, [r7, #4]
 801436c:	6910      	ldr	r0, [r2, #16]
 801436e:	2200      	movs	r2, #0
 8014370:	6879      	ldr	r1, [r7, #4]
 8014372:	4798      	blx	r3
 8014374:	4603      	mov	r3, r0
 8014376:	76bb      	strb	r3, [r7, #26]
 8014378:	e001      	b.n	801437e <tcp_process+0x30e>
 801437a:	2300      	movs	r3, #0
 801437c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801437e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014382:	f113 0f0d 	cmn.w	r3, #13
 8014386:	d102      	bne.n	801438e <tcp_process+0x31e>
          return ERR_ABRT;
 8014388:	f06f 030c 	mvn.w	r3, #12
 801438c:	e250      	b.n	8014830 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	8b5b      	ldrh	r3, [r3, #26]
 8014392:	f043 0302 	orr.w	r3, r3, #2
 8014396:	b29a      	uxth	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801439c:	e23a      	b.n	8014814 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801439e:	4b9d      	ldr	r3, [pc, #628]	; (8014614 <tcp_process+0x5a4>)
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	f003 0310 	and.w	r3, r3, #16
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	f000 8234 	beq.w	8014814 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143ac:	4b9a      	ldr	r3, [pc, #616]	; (8014618 <tcp_process+0x5a8>)
 80143ae:	6819      	ldr	r1, [r3, #0]
 80143b0:	4b9a      	ldr	r3, [pc, #616]	; (801461c <tcp_process+0x5ac>)
 80143b2:	881b      	ldrh	r3, [r3, #0]
 80143b4:	461a      	mov	r2, r3
 80143b6:	4b9a      	ldr	r3, [pc, #616]	; (8014620 <tcp_process+0x5b0>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80143bc:	4b99      	ldr	r3, [pc, #612]	; (8014624 <tcp_process+0x5b4>)
 80143be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143c0:	885b      	ldrh	r3, [r3, #2]
 80143c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80143c4:	4a97      	ldr	r2, [pc, #604]	; (8014624 <tcp_process+0x5b4>)
 80143c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143c8:	8812      	ldrh	r2, [r2, #0]
 80143ca:	b292      	uxth	r2, r2
 80143cc:	9202      	str	r2, [sp, #8]
 80143ce:	9301      	str	r3, [sp, #4]
 80143d0:	4b95      	ldr	r3, [pc, #596]	; (8014628 <tcp_process+0x5b8>)
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	4b95      	ldr	r3, [pc, #596]	; (801462c <tcp_process+0x5bc>)
 80143d6:	4602      	mov	r2, r0
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f003 f8db 	bl	8017594 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143e4:	2b05      	cmp	r3, #5
 80143e6:	f200 8215 	bhi.w	8014814 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2200      	movs	r2, #0
 80143ee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f002 fea5 	bl	8017140 <tcp_rexmit_rto>
      break;
 80143f6:	e20d      	b.n	8014814 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80143f8:	4b86      	ldr	r3, [pc, #536]	; (8014614 <tcp_process+0x5a4>)
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	f003 0310 	and.w	r3, r3, #16
 8014400:	2b00      	cmp	r3, #0
 8014402:	f000 80a1 	beq.w	8014548 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014406:	4b84      	ldr	r3, [pc, #528]	; (8014618 <tcp_process+0x5a8>)
 8014408:	681a      	ldr	r2, [r3, #0]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801440e:	1ad3      	subs	r3, r2, r3
 8014410:	3b01      	subs	r3, #1
 8014412:	2b00      	cmp	r3, #0
 8014414:	db7e      	blt.n	8014514 <tcp_process+0x4a4>
 8014416:	4b80      	ldr	r3, [pc, #512]	; (8014618 <tcp_process+0x5a8>)
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801441e:	1ad3      	subs	r3, r2, r3
 8014420:	2b00      	cmp	r3, #0
 8014422:	dc77      	bgt.n	8014514 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2204      	movs	r2, #4
 8014428:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801442e:	2b00      	cmp	r3, #0
 8014430:	d102      	bne.n	8014438 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014432:	23fa      	movs	r3, #250	; 0xfa
 8014434:	76bb      	strb	r3, [r7, #26]
 8014436:	e01d      	b.n	8014474 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801443c:	699b      	ldr	r3, [r3, #24]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d106      	bne.n	8014450 <tcp_process+0x3e0>
 8014442:	4b7b      	ldr	r3, [pc, #492]	; (8014630 <tcp_process+0x5c0>)
 8014444:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014448:	497a      	ldr	r1, [pc, #488]	; (8014634 <tcp_process+0x5c4>)
 801444a:	487b      	ldr	r0, [pc, #492]	; (8014638 <tcp_process+0x5c8>)
 801444c:	f007 fa6e 	bl	801b92c <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014454:	699b      	ldr	r3, [r3, #24]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d00a      	beq.n	8014470 <tcp_process+0x400>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801445e:	699b      	ldr	r3, [r3, #24]
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	6910      	ldr	r0, [r2, #16]
 8014464:	2200      	movs	r2, #0
 8014466:	6879      	ldr	r1, [r7, #4]
 8014468:	4798      	blx	r3
 801446a:	4603      	mov	r3, r0
 801446c:	76bb      	strb	r3, [r7, #26]
 801446e:	e001      	b.n	8014474 <tcp_process+0x404>
 8014470:	23f0      	movs	r3, #240	; 0xf0
 8014472:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014474:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d00a      	beq.n	8014492 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801447c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014480:	f113 0f0d 	cmn.w	r3, #13
 8014484:	d002      	beq.n	801448c <tcp_process+0x41c>
              tcp_abort(pcb);
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f7fd fcea 	bl	8011e60 <tcp_abort>
            }
            return ERR_ABRT;
 801448c:	f06f 030c 	mvn.w	r3, #12
 8014490:	e1ce      	b.n	8014830 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 fae0 	bl	8014a58 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014498:	4b68      	ldr	r3, [pc, #416]	; (801463c <tcp_process+0x5cc>)
 801449a:	881b      	ldrh	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d005      	beq.n	80144ac <tcp_process+0x43c>
            recv_acked--;
 80144a0:	4b66      	ldr	r3, [pc, #408]	; (801463c <tcp_process+0x5cc>)
 80144a2:	881b      	ldrh	r3, [r3, #0]
 80144a4:	3b01      	subs	r3, #1
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	4b64      	ldr	r3, [pc, #400]	; (801463c <tcp_process+0x5cc>)
 80144aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144b0:	009a      	lsls	r2, r3, #2
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	f241 111c 	movw	r1, #4380	; 0x111c
 80144bc:	428b      	cmp	r3, r1
 80144be:	bf38      	it	cc
 80144c0:	460b      	movcc	r3, r1
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d204      	bcs.n	80144d0 <tcp_process+0x460>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	e00d      	b.n	80144ec <tcp_process+0x47c>
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144d4:	005b      	lsls	r3, r3, #1
 80144d6:	f241 121c 	movw	r2, #4380	; 0x111c
 80144da:	4293      	cmp	r3, r2
 80144dc:	d904      	bls.n	80144e8 <tcp_process+0x478>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	e001      	b.n	80144ec <tcp_process+0x47c>
 80144e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80144f2:	4b53      	ldr	r3, [pc, #332]	; (8014640 <tcp_process+0x5d0>)
 80144f4:	781b      	ldrb	r3, [r3, #0]
 80144f6:	f003 0320 	and.w	r3, r3, #32
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d037      	beq.n	801456e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	8b5b      	ldrh	r3, [r3, #26]
 8014502:	f043 0302 	orr.w	r3, r3, #2
 8014506:	b29a      	uxth	r2, r3
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2207      	movs	r2, #7
 8014510:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014512:	e02c      	b.n	801456e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014514:	4b40      	ldr	r3, [pc, #256]	; (8014618 <tcp_process+0x5a8>)
 8014516:	6819      	ldr	r1, [r3, #0]
 8014518:	4b40      	ldr	r3, [pc, #256]	; (801461c <tcp_process+0x5ac>)
 801451a:	881b      	ldrh	r3, [r3, #0]
 801451c:	461a      	mov	r2, r3
 801451e:	4b40      	ldr	r3, [pc, #256]	; (8014620 <tcp_process+0x5b0>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014524:	4b3f      	ldr	r3, [pc, #252]	; (8014624 <tcp_process+0x5b4>)
 8014526:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014528:	885b      	ldrh	r3, [r3, #2]
 801452a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801452c:	4a3d      	ldr	r2, [pc, #244]	; (8014624 <tcp_process+0x5b4>)
 801452e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014530:	8812      	ldrh	r2, [r2, #0]
 8014532:	b292      	uxth	r2, r2
 8014534:	9202      	str	r2, [sp, #8]
 8014536:	9301      	str	r3, [sp, #4]
 8014538:	4b3b      	ldr	r3, [pc, #236]	; (8014628 <tcp_process+0x5b8>)
 801453a:	9300      	str	r3, [sp, #0]
 801453c:	4b3b      	ldr	r3, [pc, #236]	; (801462c <tcp_process+0x5bc>)
 801453e:	4602      	mov	r2, r0
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f003 f827 	bl	8017594 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014546:	e167      	b.n	8014818 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014548:	4b32      	ldr	r3, [pc, #200]	; (8014614 <tcp_process+0x5a4>)
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	f003 0302 	and.w	r3, r3, #2
 8014550:	2b00      	cmp	r3, #0
 8014552:	f000 8161 	beq.w	8014818 <tcp_process+0x7a8>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801455a:	1e5a      	subs	r2, r3, #1
 801455c:	4b30      	ldr	r3, [pc, #192]	; (8014620 <tcp_process+0x5b0>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	429a      	cmp	r2, r3
 8014562:	f040 8159 	bne.w	8014818 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f002 fe0c 	bl	8017184 <tcp_rexmit>
      break;
 801456c:	e154      	b.n	8014818 <tcp_process+0x7a8>
 801456e:	e153      	b.n	8014818 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f000 fa71 	bl	8014a58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014576:	4b32      	ldr	r3, [pc, #200]	; (8014640 <tcp_process+0x5d0>)
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	f003 0320 	and.w	r3, r3, #32
 801457e:	2b00      	cmp	r3, #0
 8014580:	f000 814c 	beq.w	801481c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	8b5b      	ldrh	r3, [r3, #26]
 8014588:	f043 0302 	orr.w	r3, r3, #2
 801458c:	b29a      	uxth	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2207      	movs	r2, #7
 8014596:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014598:	e140      	b.n	801481c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f000 fa5c 	bl	8014a58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80145a0:	4b27      	ldr	r3, [pc, #156]	; (8014640 <tcp_process+0x5d0>)
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	f003 0320 	and.w	r3, r3, #32
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d071      	beq.n	8014690 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80145ac:	4b19      	ldr	r3, [pc, #100]	; (8014614 <tcp_process+0x5a4>)
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	f003 0310 	and.w	r3, r3, #16
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d060      	beq.n	801467a <tcp_process+0x60a>
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80145bc:	4b16      	ldr	r3, [pc, #88]	; (8014618 <tcp_process+0x5a8>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d15a      	bne.n	801467a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d156      	bne.n	801467a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	8b5b      	ldrh	r3, [r3, #26]
 80145d0:	f043 0302 	orr.w	r3, r3, #2
 80145d4:	b29a      	uxth	r2, r3
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f7fe fdbe 	bl	801315c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80145e0:	4b18      	ldr	r3, [pc, #96]	; (8014644 <tcp_process+0x5d4>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d105      	bne.n	80145f6 <tcp_process+0x586>
 80145ea:	4b16      	ldr	r3, [pc, #88]	; (8014644 <tcp_process+0x5d4>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	68db      	ldr	r3, [r3, #12]
 80145f0:	4a14      	ldr	r2, [pc, #80]	; (8014644 <tcp_process+0x5d4>)
 80145f2:	6013      	str	r3, [r2, #0]
 80145f4:	e02e      	b.n	8014654 <tcp_process+0x5e4>
 80145f6:	4b13      	ldr	r3, [pc, #76]	; (8014644 <tcp_process+0x5d4>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	617b      	str	r3, [r7, #20]
 80145fc:	e027      	b.n	801464e <tcp_process+0x5de>
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	687a      	ldr	r2, [r7, #4]
 8014604:	429a      	cmp	r2, r3
 8014606:	d11f      	bne.n	8014648 <tcp_process+0x5d8>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68da      	ldr	r2, [r3, #12]
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	60da      	str	r2, [r3, #12]
 8014610:	e020      	b.n	8014654 <tcp_process+0x5e4>
 8014612:	bf00      	nop
 8014614:	20004f64 	.word	0x20004f64
 8014618:	20004f5c 	.word	0x20004f5c
 801461c:	20004f62 	.word	0x20004f62
 8014620:	20004f58 	.word	0x20004f58
 8014624:	20004f48 	.word	0x20004f48
 8014628:	20008744 	.word	0x20008744
 801462c:	20008748 	.word	0x20008748
 8014630:	08026874 	.word	0x08026874
 8014634:	08026b14 	.word	0x08026b14
 8014638:	080268c0 	.word	0x080268c0
 801463c:	20004f60 	.word	0x20004f60
 8014640:	20004f65 	.word	0x20004f65
 8014644:	2000be48 	.word	0x2000be48
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	68db      	ldr	r3, [r3, #12]
 801464c:	617b      	str	r3, [r7, #20]
 801464e:	697b      	ldr	r3, [r7, #20]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d1d4      	bne.n	80145fe <tcp_process+0x58e>
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2200      	movs	r2, #0
 8014658:	60da      	str	r2, [r3, #12]
 801465a:	4b77      	ldr	r3, [pc, #476]	; (8014838 <tcp_process+0x7c8>)
 801465c:	2201      	movs	r2, #1
 801465e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	220a      	movs	r2, #10
 8014664:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014666:	4b75      	ldr	r3, [pc, #468]	; (801483c <tcp_process+0x7cc>)
 8014668:	681a      	ldr	r2, [r3, #0]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	60da      	str	r2, [r3, #12]
 801466e:	4a73      	ldr	r2, [pc, #460]	; (801483c <tcp_process+0x7cc>)
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6013      	str	r3, [r2, #0]
 8014674:	f003 f950 	bl	8017918 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014678:	e0d2      	b.n	8014820 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	8b5b      	ldrh	r3, [r3, #26]
 801467e:	f043 0302 	orr.w	r3, r3, #2
 8014682:	b29a      	uxth	r2, r3
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2208      	movs	r2, #8
 801468c:	751a      	strb	r2, [r3, #20]
      break;
 801468e:	e0c7      	b.n	8014820 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014690:	4b6b      	ldr	r3, [pc, #428]	; (8014840 <tcp_process+0x7d0>)
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	f003 0310 	and.w	r3, r3, #16
 8014698:	2b00      	cmp	r3, #0
 801469a:	f000 80c1 	beq.w	8014820 <tcp_process+0x7b0>
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80146a2:	4b68      	ldr	r3, [pc, #416]	; (8014844 <tcp_process+0x7d4>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	f040 80ba 	bne.w	8014820 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	f040 80b5 	bne.w	8014820 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2206      	movs	r2, #6
 80146ba:	751a      	strb	r2, [r3, #20]
      break;
 80146bc:	e0b0      	b.n	8014820 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f000 f9ca 	bl	8014a58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80146c4:	4b60      	ldr	r3, [pc, #384]	; (8014848 <tcp_process+0x7d8>)
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	f003 0320 	and.w	r3, r3, #32
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	f000 80a9 	beq.w	8014824 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	8b5b      	ldrh	r3, [r3, #26]
 80146d6:	f043 0302 	orr.w	r3, r3, #2
 80146da:	b29a      	uxth	r2, r3
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7fe fd3b 	bl	801315c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80146e6:	4b59      	ldr	r3, [pc, #356]	; (801484c <tcp_process+0x7dc>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	687a      	ldr	r2, [r7, #4]
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d105      	bne.n	80146fc <tcp_process+0x68c>
 80146f0:	4b56      	ldr	r3, [pc, #344]	; (801484c <tcp_process+0x7dc>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	4a55      	ldr	r2, [pc, #340]	; (801484c <tcp_process+0x7dc>)
 80146f8:	6013      	str	r3, [r2, #0]
 80146fa:	e013      	b.n	8014724 <tcp_process+0x6b4>
 80146fc:	4b53      	ldr	r3, [pc, #332]	; (801484c <tcp_process+0x7dc>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	613b      	str	r3, [r7, #16]
 8014702:	e00c      	b.n	801471e <tcp_process+0x6ae>
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	429a      	cmp	r2, r3
 801470c:	d104      	bne.n	8014718 <tcp_process+0x6a8>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	68da      	ldr	r2, [r3, #12]
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	60da      	str	r2, [r3, #12]
 8014716:	e005      	b.n	8014724 <tcp_process+0x6b4>
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	68db      	ldr	r3, [r3, #12]
 801471c:	613b      	str	r3, [r7, #16]
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d1ef      	bne.n	8014704 <tcp_process+0x694>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	60da      	str	r2, [r3, #12]
 801472a:	4b43      	ldr	r3, [pc, #268]	; (8014838 <tcp_process+0x7c8>)
 801472c:	2201      	movs	r2, #1
 801472e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	220a      	movs	r2, #10
 8014734:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014736:	4b41      	ldr	r3, [pc, #260]	; (801483c <tcp_process+0x7cc>)
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	60da      	str	r2, [r3, #12]
 801473e:	4a3f      	ldr	r2, [pc, #252]	; (801483c <tcp_process+0x7cc>)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6013      	str	r3, [r2, #0]
 8014744:	f003 f8e8 	bl	8017918 <tcp_timer_needed>
      }
      break;
 8014748:	e06c      	b.n	8014824 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f000 f984 	bl	8014a58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014750:	4b3b      	ldr	r3, [pc, #236]	; (8014840 <tcp_process+0x7d0>)
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	f003 0310 	and.w	r3, r3, #16
 8014758:	2b00      	cmp	r3, #0
 801475a:	d065      	beq.n	8014828 <tcp_process+0x7b8>
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014760:	4b38      	ldr	r3, [pc, #224]	; (8014844 <tcp_process+0x7d4>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	429a      	cmp	r2, r3
 8014766:	d15f      	bne.n	8014828 <tcp_process+0x7b8>
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801476c:	2b00      	cmp	r3, #0
 801476e:	d15b      	bne.n	8014828 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7fe fcf3 	bl	801315c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014776:	4b35      	ldr	r3, [pc, #212]	; (801484c <tcp_process+0x7dc>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	687a      	ldr	r2, [r7, #4]
 801477c:	429a      	cmp	r2, r3
 801477e:	d105      	bne.n	801478c <tcp_process+0x71c>
 8014780:	4b32      	ldr	r3, [pc, #200]	; (801484c <tcp_process+0x7dc>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	4a31      	ldr	r2, [pc, #196]	; (801484c <tcp_process+0x7dc>)
 8014788:	6013      	str	r3, [r2, #0]
 801478a:	e013      	b.n	80147b4 <tcp_process+0x744>
 801478c:	4b2f      	ldr	r3, [pc, #188]	; (801484c <tcp_process+0x7dc>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	60fb      	str	r3, [r7, #12]
 8014792:	e00c      	b.n	80147ae <tcp_process+0x73e>
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	687a      	ldr	r2, [r7, #4]
 801479a:	429a      	cmp	r2, r3
 801479c:	d104      	bne.n	80147a8 <tcp_process+0x738>
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	68da      	ldr	r2, [r3, #12]
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	60da      	str	r2, [r3, #12]
 80147a6:	e005      	b.n	80147b4 <tcp_process+0x744>
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	60fb      	str	r3, [r7, #12]
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d1ef      	bne.n	8014794 <tcp_process+0x724>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2200      	movs	r2, #0
 80147b8:	60da      	str	r2, [r3, #12]
 80147ba:	4b1f      	ldr	r3, [pc, #124]	; (8014838 <tcp_process+0x7c8>)
 80147bc:	2201      	movs	r2, #1
 80147be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	220a      	movs	r2, #10
 80147c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80147c6:	4b1d      	ldr	r3, [pc, #116]	; (801483c <tcp_process+0x7cc>)
 80147c8:	681a      	ldr	r2, [r3, #0]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	60da      	str	r2, [r3, #12]
 80147ce:	4a1b      	ldr	r2, [pc, #108]	; (801483c <tcp_process+0x7cc>)
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6013      	str	r3, [r2, #0]
 80147d4:	f003 f8a0 	bl	8017918 <tcp_timer_needed>
      }
      break;
 80147d8:	e026      	b.n	8014828 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f000 f93c 	bl	8014a58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80147e0:	4b17      	ldr	r3, [pc, #92]	; (8014840 <tcp_process+0x7d0>)
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	f003 0310 	and.w	r3, r3, #16
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d01f      	beq.n	801482c <tcp_process+0x7bc>
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80147f0:	4b14      	ldr	r3, [pc, #80]	; (8014844 <tcp_process+0x7d4>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d119      	bne.n	801482c <tcp_process+0x7bc>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d115      	bne.n	801482c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014800:	4b11      	ldr	r3, [pc, #68]	; (8014848 <tcp_process+0x7d8>)
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	f043 0310 	orr.w	r3, r3, #16
 8014808:	b2da      	uxtb	r2, r3
 801480a:	4b0f      	ldr	r3, [pc, #60]	; (8014848 <tcp_process+0x7d8>)
 801480c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801480e:	e00d      	b.n	801482c <tcp_process+0x7bc>
    default:
      break;
 8014810:	bf00      	nop
 8014812:	e00c      	b.n	801482e <tcp_process+0x7be>
      break;
 8014814:	bf00      	nop
 8014816:	e00a      	b.n	801482e <tcp_process+0x7be>
      break;
 8014818:	bf00      	nop
 801481a:	e008      	b.n	801482e <tcp_process+0x7be>
      break;
 801481c:	bf00      	nop
 801481e:	e006      	b.n	801482e <tcp_process+0x7be>
      break;
 8014820:	bf00      	nop
 8014822:	e004      	b.n	801482e <tcp_process+0x7be>
      break;
 8014824:	bf00      	nop
 8014826:	e002      	b.n	801482e <tcp_process+0x7be>
      break;
 8014828:	bf00      	nop
 801482a:	e000      	b.n	801482e <tcp_process+0x7be>
      break;
 801482c:	bf00      	nop
  }
  return ERR_OK;
 801482e:	2300      	movs	r3, #0
}
 8014830:	4618      	mov	r0, r3
 8014832:	3724      	adds	r7, #36	; 0x24
 8014834:	46bd      	mov	sp, r7
 8014836:	bd90      	pop	{r4, r7, pc}
 8014838:	2000be44 	.word	0x2000be44
 801483c:	2000be58 	.word	0x2000be58
 8014840:	20004f64 	.word	0x20004f64
 8014844:	20004f5c 	.word	0x20004f5c
 8014848:	20004f65 	.word	0x20004f65
 801484c:	2000be48 	.word	0x2000be48

08014850 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014850:	b590      	push	{r4, r7, lr}
 8014852:	b085      	sub	sp, #20
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d106      	bne.n	801486e <tcp_oos_insert_segment+0x1e>
 8014860:	4b3b      	ldr	r3, [pc, #236]	; (8014950 <tcp_oos_insert_segment+0x100>)
 8014862:	f240 421f 	movw	r2, #1055	; 0x41f
 8014866:	493b      	ldr	r1, [pc, #236]	; (8014954 <tcp_oos_insert_segment+0x104>)
 8014868:	483b      	ldr	r0, [pc, #236]	; (8014958 <tcp_oos_insert_segment+0x108>)
 801486a:	f007 f85f 	bl	801b92c <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	68db      	ldr	r3, [r3, #12]
 8014872:	899b      	ldrh	r3, [r3, #12]
 8014874:	b29b      	uxth	r3, r3
 8014876:	4618      	mov	r0, r3
 8014878:	f7fb f936 	bl	800fae8 <lwip_htons>
 801487c:	4603      	mov	r3, r0
 801487e:	b2db      	uxtb	r3, r3
 8014880:	f003 0301 	and.w	r3, r3, #1
 8014884:	2b00      	cmp	r3, #0
 8014886:	d028      	beq.n	80148da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014888:	6838      	ldr	r0, [r7, #0]
 801488a:	f7fe f979 	bl	8012b80 <tcp_segs_free>
    next = NULL;
 801488e:	2300      	movs	r3, #0
 8014890:	603b      	str	r3, [r7, #0]
 8014892:	e056      	b.n	8014942 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	899b      	ldrh	r3, [r3, #12]
 801489a:	b29b      	uxth	r3, r3
 801489c:	4618      	mov	r0, r3
 801489e:	f7fb f923 	bl	800fae8 <lwip_htons>
 80148a2:	4603      	mov	r3, r0
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	f003 0301 	and.w	r3, r3, #1
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d00d      	beq.n	80148ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	899b      	ldrh	r3, [r3, #12]
 80148b4:	b29c      	uxth	r4, r3
 80148b6:	2001      	movs	r0, #1
 80148b8:	f7fb f916 	bl	800fae8 <lwip_htons>
 80148bc:	4603      	mov	r3, r0
 80148be:	461a      	mov	r2, r3
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	68db      	ldr	r3, [r3, #12]
 80148c4:	4322      	orrs	r2, r4
 80148c6:	b292      	uxth	r2, r2
 80148c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80148d4:	68f8      	ldr	r0, [r7, #12]
 80148d6:	f7fe f968 	bl	8012baa <tcp_seg_free>
    while (next &&
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d00e      	beq.n	80148fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	891b      	ldrh	r3, [r3, #8]
 80148e4:	461a      	mov	r2, r3
 80148e6:	4b1d      	ldr	r3, [pc, #116]	; (801495c <tcp_oos_insert_segment+0x10c>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	441a      	add	r2, r3
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	6839      	ldr	r1, [r7, #0]
 80148f4:	8909      	ldrh	r1, [r1, #8]
 80148f6:	440b      	add	r3, r1
 80148f8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	daca      	bge.n	8014894 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d01e      	beq.n	8014942 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	891b      	ldrh	r3, [r3, #8]
 8014908:	461a      	mov	r2, r3
 801490a:	4b14      	ldr	r3, [pc, #80]	; (801495c <tcp_oos_insert_segment+0x10c>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	441a      	add	r2, r3
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	68db      	ldr	r3, [r3, #12]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014918:	2b00      	cmp	r3, #0
 801491a:	dd12      	ble.n	8014942 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	685b      	ldr	r3, [r3, #4]
 8014922:	b29a      	uxth	r2, r3
 8014924:	4b0d      	ldr	r3, [pc, #52]	; (801495c <tcp_oos_insert_segment+0x10c>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	b29b      	uxth	r3, r3
 801492a:	1ad3      	subs	r3, r2, r3
 801492c:	b29a      	uxth	r2, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	685a      	ldr	r2, [r3, #4]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	891b      	ldrh	r3, [r3, #8]
 801493a:	4619      	mov	r1, r3
 801493c:	4610      	mov	r0, r2
 801493e:	f7fc fb09 	bl	8010f54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	683a      	ldr	r2, [r7, #0]
 8014946:	601a      	str	r2, [r3, #0]
}
 8014948:	bf00      	nop
 801494a:	3714      	adds	r7, #20
 801494c:	46bd      	mov	sp, r7
 801494e:	bd90      	pop	{r4, r7, pc}
 8014950:	08026874 	.word	0x08026874
 8014954:	08026b34 	.word	0x08026b34
 8014958:	080268c0 	.word	0x080268c0
 801495c:	20004f58 	.word	0x20004f58

08014960 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014960:	b5b0      	push	{r4, r5, r7, lr}
 8014962:	b086      	sub	sp, #24
 8014964:	af00      	add	r7, sp, #0
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	60b9      	str	r1, [r7, #8]
 801496a:	607a      	str	r2, [r7, #4]
 801496c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801496e:	e03e      	b.n	80149ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	4618      	mov	r0, r3
 8014980:	f7fc fcfc 	bl	801137c <pbuf_clen>
 8014984:	4603      	mov	r3, r0
 8014986:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801498e:	8a7a      	ldrh	r2, [r7, #18]
 8014990:	429a      	cmp	r2, r3
 8014992:	d906      	bls.n	80149a2 <tcp_free_acked_segments+0x42>
 8014994:	4b2a      	ldr	r3, [pc, #168]	; (8014a40 <tcp_free_acked_segments+0xe0>)
 8014996:	f240 4257 	movw	r2, #1111	; 0x457
 801499a:	492a      	ldr	r1, [pc, #168]	; (8014a44 <tcp_free_acked_segments+0xe4>)
 801499c:	482a      	ldr	r0, [pc, #168]	; (8014a48 <tcp_free_acked_segments+0xe8>)
 801499e:	f006 ffc5 	bl	801b92c <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80149a8:	8a7b      	ldrh	r3, [r7, #18]
 80149aa:	1ad3      	subs	r3, r2, r3
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	891a      	ldrh	r2, [r3, #8]
 80149b8:	4b24      	ldr	r3, [pc, #144]	; (8014a4c <tcp_free_acked_segments+0xec>)
 80149ba:	881b      	ldrh	r3, [r3, #0]
 80149bc:	4413      	add	r3, r2
 80149be:	b29a      	uxth	r2, r3
 80149c0:	4b22      	ldr	r3, [pc, #136]	; (8014a4c <tcp_free_acked_segments+0xec>)
 80149c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80149c4:	6978      	ldr	r0, [r7, #20]
 80149c6:	f7fe f8f0 	bl	8012baa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d00c      	beq.n	80149ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d109      	bne.n	80149ee <tcp_free_acked_segments+0x8e>
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d106      	bne.n	80149ee <tcp_free_acked_segments+0x8e>
 80149e0:	4b17      	ldr	r3, [pc, #92]	; (8014a40 <tcp_free_acked_segments+0xe0>)
 80149e2:	f240 4261 	movw	r2, #1121	; 0x461
 80149e6:	491a      	ldr	r1, [pc, #104]	; (8014a50 <tcp_free_acked_segments+0xf0>)
 80149e8:	4817      	ldr	r0, [pc, #92]	; (8014a48 <tcp_free_acked_segments+0xe8>)
 80149ea:	f006 ff9f 	bl	801b92c <printf>
  while (seg_list != NULL &&
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d020      	beq.n	8014a36 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fb f889 	bl	800fb12 <lwip_htonl>
 8014a00:	4604      	mov	r4, r0
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	891b      	ldrh	r3, [r3, #8]
 8014a06:	461d      	mov	r5, r3
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	899b      	ldrh	r3, [r3, #12]
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7fb f869 	bl	800fae8 <lwip_htons>
 8014a16:	4603      	mov	r3, r0
 8014a18:	b2db      	uxtb	r3, r3
 8014a1a:	f003 0303 	and.w	r3, r3, #3
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d001      	beq.n	8014a26 <tcp_free_acked_segments+0xc6>
 8014a22:	2301      	movs	r3, #1
 8014a24:	e000      	b.n	8014a28 <tcp_free_acked_segments+0xc8>
 8014a26:	2300      	movs	r3, #0
 8014a28:	442b      	add	r3, r5
 8014a2a:	18e2      	adds	r2, r4, r3
 8014a2c:	4b09      	ldr	r3, [pc, #36]	; (8014a54 <tcp_free_acked_segments+0xf4>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	dd9c      	ble.n	8014970 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014a36:	68bb      	ldr	r3, [r7, #8]
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3718      	adds	r7, #24
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8014a40:	08026874 	.word	0x08026874
 8014a44:	08026b5c 	.word	0x08026b5c
 8014a48:	080268c0 	.word	0x080268c0
 8014a4c:	20004f60 	.word	0x20004f60
 8014a50:	08026b84 	.word	0x08026b84
 8014a54:	20004f5c 	.word	0x20004f5c

08014a58 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014a58:	b5b0      	push	{r4, r5, r7, lr}
 8014a5a:	b094      	sub	sp, #80	; 0x50
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014a60:	2300      	movs	r3, #0
 8014a62:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d106      	bne.n	8014a78 <tcp_receive+0x20>
 8014a6a:	4ba6      	ldr	r3, [pc, #664]	; (8014d04 <tcp_receive+0x2ac>)
 8014a6c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014a70:	49a5      	ldr	r1, [pc, #660]	; (8014d08 <tcp_receive+0x2b0>)
 8014a72:	48a6      	ldr	r0, [pc, #664]	; (8014d0c <tcp_receive+0x2b4>)
 8014a74:	f006 ff5a 	bl	801b92c <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	7d1b      	ldrb	r3, [r3, #20]
 8014a7c:	2b03      	cmp	r3, #3
 8014a7e:	d806      	bhi.n	8014a8e <tcp_receive+0x36>
 8014a80:	4ba0      	ldr	r3, [pc, #640]	; (8014d04 <tcp_receive+0x2ac>)
 8014a82:	f240 427c 	movw	r2, #1148	; 0x47c
 8014a86:	49a2      	ldr	r1, [pc, #648]	; (8014d10 <tcp_receive+0x2b8>)
 8014a88:	48a0      	ldr	r0, [pc, #640]	; (8014d0c <tcp_receive+0x2b4>)
 8014a8a:	f006 ff4f 	bl	801b92c <printf>

  if (flags & TCP_ACK) {
 8014a8e:	4ba1      	ldr	r3, [pc, #644]	; (8014d14 <tcp_receive+0x2bc>)
 8014a90:	781b      	ldrb	r3, [r3, #0]
 8014a92:	f003 0310 	and.w	r3, r3, #16
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	f000 8263 	beq.w	8014f62 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014aa8:	4413      	add	r3, r2
 8014aaa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014ab0:	4b99      	ldr	r3, [pc, #612]	; (8014d18 <tcp_receive+0x2c0>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	db1b      	blt.n	8014af2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014abe:	4b96      	ldr	r3, [pc, #600]	; (8014d18 <tcp_receive+0x2c0>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d106      	bne.n	8014ad4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014aca:	4b94      	ldr	r3, [pc, #592]	; (8014d1c <tcp_receive+0x2c4>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	1ad3      	subs	r3, r2, r3
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	db0e      	blt.n	8014af2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014ad8:	4b90      	ldr	r3, [pc, #576]	; (8014d1c <tcp_receive+0x2c4>)
 8014ada:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014adc:	429a      	cmp	r2, r3
 8014ade:	d125      	bne.n	8014b2c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014ae0:	4b8f      	ldr	r3, [pc, #572]	; (8014d20 <tcp_receive+0x2c8>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	89db      	ldrh	r3, [r3, #14]
 8014ae6:	b29a      	uxth	r2, r3
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d91c      	bls.n	8014b2c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014af2:	4b8b      	ldr	r3, [pc, #556]	; (8014d20 <tcp_receive+0x2c8>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	89db      	ldrh	r3, [r3, #14]
 8014af8:	b29a      	uxth	r2, r3
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d205      	bcs.n	8014b1c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014b1c:	4b7e      	ldr	r3, [pc, #504]	; (8014d18 <tcp_receive+0x2c0>)
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014b24:	4b7d      	ldr	r3, [pc, #500]	; (8014d1c <tcp_receive+0x2c4>)
 8014b26:	681a      	ldr	r2, [r3, #0]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014b2c:	4b7b      	ldr	r3, [pc, #492]	; (8014d1c <tcp_receive+0x2c4>)
 8014b2e:	681a      	ldr	r2, [r3, #0]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b34:	1ad3      	subs	r3, r2, r3
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	dc58      	bgt.n	8014bec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014b3a:	4b7a      	ldr	r3, [pc, #488]	; (8014d24 <tcp_receive+0x2cc>)
 8014b3c:	881b      	ldrh	r3, [r3, #0]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d14b      	bne.n	8014bda <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014b4c:	4413      	add	r3, r2
 8014b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d142      	bne.n	8014bda <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	db3d      	blt.n	8014bda <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b62:	4b6e      	ldr	r3, [pc, #440]	; (8014d1c <tcp_receive+0x2c4>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d137      	bne.n	8014bda <tcp_receive+0x182>
              found_dupack = 1;
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b74:	2bff      	cmp	r3, #255	; 0xff
 8014b76:	d007      	beq.n	8014b88 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b7e:	3301      	adds	r3, #1
 8014b80:	b2da      	uxtb	r2, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b8e:	2b03      	cmp	r3, #3
 8014b90:	d91b      	bls.n	8014bca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b9c:	4413      	add	r3, r2
 8014b9e:	b29a      	uxth	r2, r3
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d30a      	bcc.n	8014bc0 <tcp_receive+0x168>
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bb4:	4413      	add	r3, r2
 8014bb6:	b29a      	uxth	r2, r3
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014bbe:	e004      	b.n	8014bca <tcp_receive+0x172>
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014bc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014bd0:	2b02      	cmp	r3, #2
 8014bd2:	d902      	bls.n	8014bda <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f002 fb41 	bl	801725c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	f040 8160 	bne.w	8014ea2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2200      	movs	r2, #0
 8014be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014bea:	e15a      	b.n	8014ea2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014bec:	4b4b      	ldr	r3, [pc, #300]	; (8014d1c <tcp_receive+0x2c4>)
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bf4:	1ad3      	subs	r3, r2, r3
 8014bf6:	3b01      	subs	r3, #1
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f2c0 814d 	blt.w	8014e98 <tcp_receive+0x440>
 8014bfe:	4b47      	ldr	r3, [pc, #284]	; (8014d1c <tcp_receive+0x2c4>)
 8014c00:	681a      	ldr	r2, [r3, #0]
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c06:	1ad3      	subs	r3, r2, r3
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	f300 8145 	bgt.w	8014e98 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	8b5b      	ldrh	r3, [r3, #26]
 8014c12:	f003 0304 	and.w	r3, r3, #4
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d010      	beq.n	8014c3c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	8b5b      	ldrh	r3, [r3, #26]
 8014c1e:	f023 0304 	bic.w	r3, r3, #4
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2200      	movs	r2, #0
 8014c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014c4a:	10db      	asrs	r3, r3, #3
 8014c4c:	b21b      	sxth	r3, r3
 8014c4e:	b29a      	uxth	r2, r3
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	4413      	add	r3, r2
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	b21a      	sxth	r2, r3
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014c64:	4b2d      	ldr	r3, [pc, #180]	; (8014d1c <tcp_receive+0x2c4>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	b29a      	uxth	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	1ad3      	subs	r3, r2, r3
 8014c72:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2200      	movs	r2, #0
 8014c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014c7c:	4b27      	ldr	r3, [pc, #156]	; (8014d1c <tcp_receive+0x2c4>)
 8014c7e:	681a      	ldr	r2, [r3, #0]
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	7d1b      	ldrb	r3, [r3, #20]
 8014c88:	2b03      	cmp	r3, #3
 8014c8a:	f240 8096 	bls.w	8014dba <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d244      	bcs.n	8014d28 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	8b5b      	ldrh	r3, [r3, #26]
 8014ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <tcp_receive+0x256>
 8014caa:	2301      	movs	r3, #1
 8014cac:	e000      	b.n	8014cb0 <tcp_receive+0x258>
 8014cae:	2302      	movs	r3, #2
 8014cb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014cb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014cbe:	fb12 f303 	smulbb	r3, r2, r3
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	bf28      	it	cs
 8014cca:	4613      	movcs	r3, r2
 8014ccc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014cd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014cd6:	4413      	add	r3, r2
 8014cd8:	b29a      	uxth	r2, r3
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d309      	bcc.n	8014cf8 <tcp_receive+0x2a0>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014cea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014cec:	4413      	add	r3, r2
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014cf6:	e060      	b.n	8014dba <tcp_receive+0x362>
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014d02:	e05a      	b.n	8014dba <tcp_receive+0x362>
 8014d04:	08026874 	.word	0x08026874
 8014d08:	08026ba4 	.word	0x08026ba4
 8014d0c:	080268c0 	.word	0x080268c0
 8014d10:	08026bc0 	.word	0x08026bc0
 8014d14:	20004f64 	.word	0x20004f64
 8014d18:	20004f58 	.word	0x20004f58
 8014d1c:	20004f5c 	.word	0x20004f5c
 8014d20:	20004f48 	.word	0x20004f48
 8014d24:	20004f62 	.word	0x20004f62
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014d30:	4413      	add	r3, r2
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d309      	bcc.n	8014d52 <tcp_receive+0x2fa>
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014d46:	4413      	add	r3, r2
 8014d48:	b29a      	uxth	r2, r3
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014d50:	e004      	b.n	8014d5c <tcp_receive+0x304>
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d326      	bcc.n	8014dba <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d78:	1ad3      	subs	r3, r2, r3
 8014d7a:	b29a      	uxth	r2, r3
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d8c:	4413      	add	r3, r2
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d30a      	bcc.n	8014db0 <tcp_receive+0x358>
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014da4:	4413      	add	r3, r2
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014dae:	e004      	b.n	8014dba <tcp_receive+0x362>
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014db6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dc2:	4a98      	ldr	r2, [pc, #608]	; (8015024 <tcp_receive+0x5cc>)
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f7ff fdcb 	bl	8014960 <tcp_free_acked_segments>
 8014dca:	4602      	mov	r2, r0
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dd8:	4a93      	ldr	r2, [pc, #588]	; (8015028 <tcp_receive+0x5d0>)
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f7ff fdc0 	bl	8014960 <tcp_free_acked_segments>
 8014de0:	4602      	mov	r2, r0
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d104      	bne.n	8014df8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014df4:	861a      	strh	r2, [r3, #48]	; 0x30
 8014df6:	e002      	b.n	8014dfe <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2200      	movs	r2, #0
 8014e02:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d103      	bne.n	8014e14 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014e1a:	4b84      	ldr	r3, [pc, #528]	; (801502c <tcp_receive+0x5d4>)
 8014e1c:	881b      	ldrh	r3, [r3, #0]
 8014e1e:	4413      	add	r3, r2
 8014e20:	b29a      	uxth	r2, r3
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	8b5b      	ldrh	r3, [r3, #26]
 8014e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d035      	beq.n	8014ea0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d118      	bne.n	8014e6e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d00c      	beq.n	8014e5e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e4c:	68db      	ldr	r3, [r3, #12]
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7fa fe5e 	bl	800fb12 <lwip_htonl>
 8014e56:	4603      	mov	r3, r0
 8014e58:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	dc20      	bgt.n	8014ea0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	8b5b      	ldrh	r3, [r3, #26]
 8014e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e66:	b29a      	uxth	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e6c:	e018      	b.n	8014ea0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7fa fe49 	bl	800fb12 <lwip_htonl>
 8014e80:	4603      	mov	r3, r0
 8014e82:	1ae3      	subs	r3, r4, r3
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	dc0b      	bgt.n	8014ea0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	8b5b      	ldrh	r3, [r3, #26]
 8014e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e90:	b29a      	uxth	r2, r3
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e96:	e003      	b.n	8014ea0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f002 fbcd 	bl	8017638 <tcp_send_empty_ack>
 8014e9e:	e000      	b.n	8014ea2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014ea0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d05b      	beq.n	8014f62 <tcp_receive+0x50a>
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014eae:	4b60      	ldr	r3, [pc, #384]	; (8015030 <tcp_receive+0x5d8>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	1ad3      	subs	r3, r2, r3
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	da54      	bge.n	8014f62 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014eb8:	4b5e      	ldr	r3, [pc, #376]	; (8015034 <tcp_receive+0x5dc>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	1ad3      	subs	r3, r2, r3
 8014ec6:	b29b      	uxth	r3, r3
 8014ec8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014ecc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014ed6:	10db      	asrs	r3, r3, #3
 8014ed8:	b21b      	sxth	r3, r3
 8014eda:	b29b      	uxth	r3, r3
 8014edc:	1ad3      	subs	r3, r2, r3
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014eea:	b29a      	uxth	r2, r3
 8014eec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014ef0:	4413      	add	r3, r2
 8014ef2:	b29b      	uxth	r3, r3
 8014ef4:	b21a      	sxth	r2, r3
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014efa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	da05      	bge.n	8014f0e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8014f02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014f06:	425b      	negs	r3, r3
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014f0e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f18:	109b      	asrs	r3, r3, #2
 8014f1a:	b21b      	sxth	r3, r3
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	1ad3      	subs	r3, r2, r3
 8014f20:	b29b      	uxth	r3, r3
 8014f22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f2c:	b29a      	uxth	r2, r3
 8014f2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014f32:	4413      	add	r3, r2
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	b21a      	sxth	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f42:	10db      	asrs	r3, r3, #3
 8014f44:	b21b      	sxth	r3, r3
 8014f46:	b29a      	uxth	r2, r3
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	4413      	add	r3, r2
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	b21a      	sxth	r2, r3
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014f62:	4b35      	ldr	r3, [pc, #212]	; (8015038 <tcp_receive+0x5e0>)
 8014f64:	881b      	ldrh	r3, [r3, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	f000 84e1 	beq.w	801592e <tcp_receive+0xed6>
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	7d1b      	ldrb	r3, [r3, #20]
 8014f70:	2b06      	cmp	r3, #6
 8014f72:	f200 84dc 	bhi.w	801592e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f7a:	4b30      	ldr	r3, [pc, #192]	; (801503c <tcp_receive+0x5e4>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	3b01      	subs	r3, #1
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	f2c0 808e 	blt.w	80150a4 <tcp_receive+0x64c>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f8c:	4b2a      	ldr	r3, [pc, #168]	; (8015038 <tcp_receive+0x5e0>)
 8014f8e:	881b      	ldrh	r3, [r3, #0]
 8014f90:	4619      	mov	r1, r3
 8014f92:	4b2a      	ldr	r3, [pc, #168]	; (801503c <tcp_receive+0x5e4>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	440b      	add	r3, r1
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	3301      	adds	r3, #1
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f300 8081 	bgt.w	80150a4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014fa2:	4b27      	ldr	r3, [pc, #156]	; (8015040 <tcp_receive+0x5e8>)
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014fac:	4b23      	ldr	r3, [pc, #140]	; (801503c <tcp_receive+0x5e4>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	1ad3      	subs	r3, r2, r3
 8014fb2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014fb4:	4b22      	ldr	r3, [pc, #136]	; (8015040 <tcp_receive+0x5e8>)
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d106      	bne.n	8014fca <tcp_receive+0x572>
 8014fbc:	4b21      	ldr	r3, [pc, #132]	; (8015044 <tcp_receive+0x5ec>)
 8014fbe:	f240 5294 	movw	r2, #1428	; 0x594
 8014fc2:	4921      	ldr	r1, [pc, #132]	; (8015048 <tcp_receive+0x5f0>)
 8014fc4:	4821      	ldr	r0, [pc, #132]	; (801504c <tcp_receive+0x5f4>)
 8014fc6:	f006 fcb1 	bl	801b92c <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fcc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014fd0:	4293      	cmp	r3, r2
 8014fd2:	d906      	bls.n	8014fe2 <tcp_receive+0x58a>
 8014fd4:	4b1b      	ldr	r3, [pc, #108]	; (8015044 <tcp_receive+0x5ec>)
 8014fd6:	f240 5295 	movw	r2, #1429	; 0x595
 8014fda:	491d      	ldr	r1, [pc, #116]	; (8015050 <tcp_receive+0x5f8>)
 8014fdc:	481b      	ldr	r0, [pc, #108]	; (801504c <tcp_receive+0x5f4>)
 8014fde:	f006 fca5 	bl	801b92c <printf>
      off = (u16_t)off32;
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014fe8:	4b15      	ldr	r3, [pc, #84]	; (8015040 <tcp_receive+0x5e8>)
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	891b      	ldrh	r3, [r3, #8]
 8014fee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d906      	bls.n	8015004 <tcp_receive+0x5ac>
 8014ff6:	4b13      	ldr	r3, [pc, #76]	; (8015044 <tcp_receive+0x5ec>)
 8014ff8:	f240 5297 	movw	r2, #1431	; 0x597
 8014ffc:	4915      	ldr	r1, [pc, #84]	; (8015054 <tcp_receive+0x5fc>)
 8014ffe:	4813      	ldr	r0, [pc, #76]	; (801504c <tcp_receive+0x5f4>)
 8015000:	f006 fc94 	bl	801b92c <printf>
      inseg.len -= off;
 8015004:	4b0e      	ldr	r3, [pc, #56]	; (8015040 <tcp_receive+0x5e8>)
 8015006:	891a      	ldrh	r2, [r3, #8]
 8015008:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801500c:	1ad3      	subs	r3, r2, r3
 801500e:	b29a      	uxth	r2, r3
 8015010:	4b0b      	ldr	r3, [pc, #44]	; (8015040 <tcp_receive+0x5e8>)
 8015012:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015014:	4b0a      	ldr	r3, [pc, #40]	; (8015040 <tcp_receive+0x5e8>)
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	891a      	ldrh	r2, [r3, #8]
 801501a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801501e:	1ad3      	subs	r3, r2, r3
 8015020:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015022:	e029      	b.n	8015078 <tcp_receive+0x620>
 8015024:	08026bdc 	.word	0x08026bdc
 8015028:	08026be4 	.word	0x08026be4
 801502c:	20004f60 	.word	0x20004f60
 8015030:	20004f5c 	.word	0x20004f5c
 8015034:	2000be4c 	.word	0x2000be4c
 8015038:	20004f62 	.word	0x20004f62
 801503c:	20004f58 	.word	0x20004f58
 8015040:	20004f38 	.word	0x20004f38
 8015044:	08026874 	.word	0x08026874
 8015048:	08026bec 	.word	0x08026bec
 801504c:	080268c0 	.word	0x080268c0
 8015050:	08026bfc 	.word	0x08026bfc
 8015054:	08026c0c 	.word	0x08026c0c
        off -= p->len;
 8015058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801505a:	895b      	ldrh	r3, [r3, #10]
 801505c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015060:	1ad3      	subs	r3, r2, r3
 8015062:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015068:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801506a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801506c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801506e:	2200      	movs	r2, #0
 8015070:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801507a:	895b      	ldrh	r3, [r3, #10]
 801507c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015080:	429a      	cmp	r2, r3
 8015082:	d8e9      	bhi.n	8015058 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015084:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015088:	4619      	mov	r1, r3
 801508a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801508c:	f7fc f862 	bl	8011154 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015094:	4a91      	ldr	r2, [pc, #580]	; (80152dc <tcp_receive+0x884>)
 8015096:	6013      	str	r3, [r2, #0]
 8015098:	4b91      	ldr	r3, [pc, #580]	; (80152e0 <tcp_receive+0x888>)
 801509a:	68db      	ldr	r3, [r3, #12]
 801509c:	4a8f      	ldr	r2, [pc, #572]	; (80152dc <tcp_receive+0x884>)
 801509e:	6812      	ldr	r2, [r2, #0]
 80150a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80150a2:	e00d      	b.n	80150c0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80150a4:	4b8d      	ldr	r3, [pc, #564]	; (80152dc <tcp_receive+0x884>)
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ac:	1ad3      	subs	r3, r2, r3
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	da06      	bge.n	80150c0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	8b5b      	ldrh	r3, [r3, #26]
 80150b6:	f043 0302 	orr.w	r3, r3, #2
 80150ba:	b29a      	uxth	r2, r3
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80150c0:	4b86      	ldr	r3, [pc, #536]	; (80152dc <tcp_receive+0x884>)
 80150c2:	681a      	ldr	r2, [r3, #0]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f2c0 842a 	blt.w	8015924 <tcp_receive+0xecc>
 80150d0:	4b82      	ldr	r3, [pc, #520]	; (80152dc <tcp_receive+0x884>)
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d8:	6879      	ldr	r1, [r7, #4]
 80150da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80150dc:	440b      	add	r3, r1
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	3301      	adds	r3, #1
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	f300 841e 	bgt.w	8015924 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150ec:	4b7b      	ldr	r3, [pc, #492]	; (80152dc <tcp_receive+0x884>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	429a      	cmp	r2, r3
 80150f2:	f040 829a 	bne.w	801562a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80150f6:	4b7a      	ldr	r3, [pc, #488]	; (80152e0 <tcp_receive+0x888>)
 80150f8:	891c      	ldrh	r4, [r3, #8]
 80150fa:	4b79      	ldr	r3, [pc, #484]	; (80152e0 <tcp_receive+0x888>)
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	899b      	ldrh	r3, [r3, #12]
 8015100:	b29b      	uxth	r3, r3
 8015102:	4618      	mov	r0, r3
 8015104:	f7fa fcf0 	bl	800fae8 <lwip_htons>
 8015108:	4603      	mov	r3, r0
 801510a:	b2db      	uxtb	r3, r3
 801510c:	f003 0303 	and.w	r3, r3, #3
 8015110:	2b00      	cmp	r3, #0
 8015112:	d001      	beq.n	8015118 <tcp_receive+0x6c0>
 8015114:	2301      	movs	r3, #1
 8015116:	e000      	b.n	801511a <tcp_receive+0x6c2>
 8015118:	2300      	movs	r3, #0
 801511a:	4423      	add	r3, r4
 801511c:	b29a      	uxth	r2, r3
 801511e:	4b71      	ldr	r3, [pc, #452]	; (80152e4 <tcp_receive+0x88c>)
 8015120:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015126:	4b6f      	ldr	r3, [pc, #444]	; (80152e4 <tcp_receive+0x88c>)
 8015128:	881b      	ldrh	r3, [r3, #0]
 801512a:	429a      	cmp	r2, r3
 801512c:	d275      	bcs.n	801521a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801512e:	4b6c      	ldr	r3, [pc, #432]	; (80152e0 <tcp_receive+0x888>)
 8015130:	68db      	ldr	r3, [r3, #12]
 8015132:	899b      	ldrh	r3, [r3, #12]
 8015134:	b29b      	uxth	r3, r3
 8015136:	4618      	mov	r0, r3
 8015138:	f7fa fcd6 	bl	800fae8 <lwip_htons>
 801513c:	4603      	mov	r3, r0
 801513e:	b2db      	uxtb	r3, r3
 8015140:	f003 0301 	and.w	r3, r3, #1
 8015144:	2b00      	cmp	r3, #0
 8015146:	d01f      	beq.n	8015188 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015148:	4b65      	ldr	r3, [pc, #404]	; (80152e0 <tcp_receive+0x888>)
 801514a:	68db      	ldr	r3, [r3, #12]
 801514c:	899b      	ldrh	r3, [r3, #12]
 801514e:	b29b      	uxth	r3, r3
 8015150:	b21b      	sxth	r3, r3
 8015152:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015156:	b21c      	sxth	r4, r3
 8015158:	4b61      	ldr	r3, [pc, #388]	; (80152e0 <tcp_receive+0x888>)
 801515a:	68db      	ldr	r3, [r3, #12]
 801515c:	899b      	ldrh	r3, [r3, #12]
 801515e:	b29b      	uxth	r3, r3
 8015160:	4618      	mov	r0, r3
 8015162:	f7fa fcc1 	bl	800fae8 <lwip_htons>
 8015166:	4603      	mov	r3, r0
 8015168:	b2db      	uxtb	r3, r3
 801516a:	b29b      	uxth	r3, r3
 801516c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015170:	b29b      	uxth	r3, r3
 8015172:	4618      	mov	r0, r3
 8015174:	f7fa fcb8 	bl	800fae8 <lwip_htons>
 8015178:	4603      	mov	r3, r0
 801517a:	b21b      	sxth	r3, r3
 801517c:	4323      	orrs	r3, r4
 801517e:	b21a      	sxth	r2, r3
 8015180:	4b57      	ldr	r3, [pc, #348]	; (80152e0 <tcp_receive+0x888>)
 8015182:	68db      	ldr	r3, [r3, #12]
 8015184:	b292      	uxth	r2, r2
 8015186:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801518c:	4b54      	ldr	r3, [pc, #336]	; (80152e0 <tcp_receive+0x888>)
 801518e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015190:	4b53      	ldr	r3, [pc, #332]	; (80152e0 <tcp_receive+0x888>)
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	899b      	ldrh	r3, [r3, #12]
 8015196:	b29b      	uxth	r3, r3
 8015198:	4618      	mov	r0, r3
 801519a:	f7fa fca5 	bl	800fae8 <lwip_htons>
 801519e:	4603      	mov	r3, r0
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	f003 0302 	and.w	r3, r3, #2
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d005      	beq.n	80151b6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80151aa:	4b4d      	ldr	r3, [pc, #308]	; (80152e0 <tcp_receive+0x888>)
 80151ac:	891b      	ldrh	r3, [r3, #8]
 80151ae:	3b01      	subs	r3, #1
 80151b0:	b29a      	uxth	r2, r3
 80151b2:	4b4b      	ldr	r3, [pc, #300]	; (80152e0 <tcp_receive+0x888>)
 80151b4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80151b6:	4b4a      	ldr	r3, [pc, #296]	; (80152e0 <tcp_receive+0x888>)
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	4a49      	ldr	r2, [pc, #292]	; (80152e0 <tcp_receive+0x888>)
 80151bc:	8912      	ldrh	r2, [r2, #8]
 80151be:	4611      	mov	r1, r2
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7fb fec7 	bl	8010f54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80151c6:	4b46      	ldr	r3, [pc, #280]	; (80152e0 <tcp_receive+0x888>)
 80151c8:	891c      	ldrh	r4, [r3, #8]
 80151ca:	4b45      	ldr	r3, [pc, #276]	; (80152e0 <tcp_receive+0x888>)
 80151cc:	68db      	ldr	r3, [r3, #12]
 80151ce:	899b      	ldrh	r3, [r3, #12]
 80151d0:	b29b      	uxth	r3, r3
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7fa fc88 	bl	800fae8 <lwip_htons>
 80151d8:	4603      	mov	r3, r0
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	f003 0303 	and.w	r3, r3, #3
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d001      	beq.n	80151e8 <tcp_receive+0x790>
 80151e4:	2301      	movs	r3, #1
 80151e6:	e000      	b.n	80151ea <tcp_receive+0x792>
 80151e8:	2300      	movs	r3, #0
 80151ea:	4423      	add	r3, r4
 80151ec:	b29a      	uxth	r2, r3
 80151ee:	4b3d      	ldr	r3, [pc, #244]	; (80152e4 <tcp_receive+0x88c>)
 80151f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80151f2:	4b3c      	ldr	r3, [pc, #240]	; (80152e4 <tcp_receive+0x88c>)
 80151f4:	881b      	ldrh	r3, [r3, #0]
 80151f6:	461a      	mov	r2, r3
 80151f8:	4b38      	ldr	r3, [pc, #224]	; (80152dc <tcp_receive+0x884>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	441a      	add	r2, r3
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015202:	6879      	ldr	r1, [r7, #4]
 8015204:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015206:	440b      	add	r3, r1
 8015208:	429a      	cmp	r2, r3
 801520a:	d006      	beq.n	801521a <tcp_receive+0x7c2>
 801520c:	4b36      	ldr	r3, [pc, #216]	; (80152e8 <tcp_receive+0x890>)
 801520e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015212:	4936      	ldr	r1, [pc, #216]	; (80152ec <tcp_receive+0x894>)
 8015214:	4836      	ldr	r0, [pc, #216]	; (80152f0 <tcp_receive+0x898>)
 8015216:	f006 fb89 	bl	801b92c <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801521e:	2b00      	cmp	r3, #0
 8015220:	f000 80e7 	beq.w	80153f2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015224:	4b2e      	ldr	r3, [pc, #184]	; (80152e0 <tcp_receive+0x888>)
 8015226:	68db      	ldr	r3, [r3, #12]
 8015228:	899b      	ldrh	r3, [r3, #12]
 801522a:	b29b      	uxth	r3, r3
 801522c:	4618      	mov	r0, r3
 801522e:	f7fa fc5b 	bl	800fae8 <lwip_htons>
 8015232:	4603      	mov	r3, r0
 8015234:	b2db      	uxtb	r3, r3
 8015236:	f003 0301 	and.w	r3, r3, #1
 801523a:	2b00      	cmp	r3, #0
 801523c:	d010      	beq.n	8015260 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801523e:	e00a      	b.n	8015256 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015244:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f7fd fcaa 	bl	8012baa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801525a:	2b00      	cmp	r3, #0
 801525c:	d1f0      	bne.n	8015240 <tcp_receive+0x7e8>
 801525e:	e0c8      	b.n	80153f2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015264:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015266:	e052      	b.n	801530e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801526a:	68db      	ldr	r3, [r3, #12]
 801526c:	899b      	ldrh	r3, [r3, #12]
 801526e:	b29b      	uxth	r3, r3
 8015270:	4618      	mov	r0, r3
 8015272:	f7fa fc39 	bl	800fae8 <lwip_htons>
 8015276:	4603      	mov	r3, r0
 8015278:	b2db      	uxtb	r3, r3
 801527a:	f003 0301 	and.w	r3, r3, #1
 801527e:	2b00      	cmp	r3, #0
 8015280:	d03d      	beq.n	80152fe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015282:	4b17      	ldr	r3, [pc, #92]	; (80152e0 <tcp_receive+0x888>)
 8015284:	68db      	ldr	r3, [r3, #12]
 8015286:	899b      	ldrh	r3, [r3, #12]
 8015288:	b29b      	uxth	r3, r3
 801528a:	4618      	mov	r0, r3
 801528c:	f7fa fc2c 	bl	800fae8 <lwip_htons>
 8015290:	4603      	mov	r3, r0
 8015292:	b2db      	uxtb	r3, r3
 8015294:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015298:	2b00      	cmp	r3, #0
 801529a:	d130      	bne.n	80152fe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801529c:	4b10      	ldr	r3, [pc, #64]	; (80152e0 <tcp_receive+0x888>)
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	899b      	ldrh	r3, [r3, #12]
 80152a2:	b29c      	uxth	r4, r3
 80152a4:	2001      	movs	r0, #1
 80152a6:	f7fa fc1f 	bl	800fae8 <lwip_htons>
 80152aa:	4603      	mov	r3, r0
 80152ac:	461a      	mov	r2, r3
 80152ae:	4b0c      	ldr	r3, [pc, #48]	; (80152e0 <tcp_receive+0x888>)
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	4322      	orrs	r2, r4
 80152b4:	b292      	uxth	r2, r2
 80152b6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80152b8:	4b09      	ldr	r3, [pc, #36]	; (80152e0 <tcp_receive+0x888>)
 80152ba:	891c      	ldrh	r4, [r3, #8]
 80152bc:	4b08      	ldr	r3, [pc, #32]	; (80152e0 <tcp_receive+0x888>)
 80152be:	68db      	ldr	r3, [r3, #12]
 80152c0:	899b      	ldrh	r3, [r3, #12]
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7fa fc0f 	bl	800fae8 <lwip_htons>
 80152ca:	4603      	mov	r3, r0
 80152cc:	b2db      	uxtb	r3, r3
 80152ce:	f003 0303 	and.w	r3, r3, #3
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d00e      	beq.n	80152f4 <tcp_receive+0x89c>
 80152d6:	2301      	movs	r3, #1
 80152d8:	e00d      	b.n	80152f6 <tcp_receive+0x89e>
 80152da:	bf00      	nop
 80152dc:	20004f58 	.word	0x20004f58
 80152e0:	20004f38 	.word	0x20004f38
 80152e4:	20004f62 	.word	0x20004f62
 80152e8:	08026874 	.word	0x08026874
 80152ec:	08026c1c 	.word	0x08026c1c
 80152f0:	080268c0 	.word	0x080268c0
 80152f4:	2300      	movs	r3, #0
 80152f6:	4423      	add	r3, r4
 80152f8:	b29a      	uxth	r2, r3
 80152fa:	4b98      	ldr	r3, [pc, #608]	; (801555c <tcp_receive+0xb04>)
 80152fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80152fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015300:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015308:	6938      	ldr	r0, [r7, #16]
 801530a:	f7fd fc4e 	bl	8012baa <tcp_seg_free>
            while (next &&
 801530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015310:	2b00      	cmp	r3, #0
 8015312:	d00e      	beq.n	8015332 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015314:	4b91      	ldr	r3, [pc, #580]	; (801555c <tcp_receive+0xb04>)
 8015316:	881b      	ldrh	r3, [r3, #0]
 8015318:	461a      	mov	r2, r3
 801531a:	4b91      	ldr	r3, [pc, #580]	; (8015560 <tcp_receive+0xb08>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	441a      	add	r2, r3
 8015320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015322:	68db      	ldr	r3, [r3, #12]
 8015324:	685b      	ldr	r3, [r3, #4]
 8015326:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015328:	8909      	ldrh	r1, [r1, #8]
 801532a:	440b      	add	r3, r1
 801532c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801532e:	2b00      	cmp	r3, #0
 8015330:	da9a      	bge.n	8015268 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015334:	2b00      	cmp	r3, #0
 8015336:	d059      	beq.n	80153ec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015338:	4b88      	ldr	r3, [pc, #544]	; (801555c <tcp_receive+0xb04>)
 801533a:	881b      	ldrh	r3, [r3, #0]
 801533c:	461a      	mov	r2, r3
 801533e:	4b88      	ldr	r3, [pc, #544]	; (8015560 <tcp_receive+0xb08>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	441a      	add	r2, r3
 8015344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015346:	68db      	ldr	r3, [r3, #12]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801534c:	2b00      	cmp	r3, #0
 801534e:	dd4d      	ble.n	80153ec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015352:	68db      	ldr	r3, [r3, #12]
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	b29a      	uxth	r2, r3
 8015358:	4b81      	ldr	r3, [pc, #516]	; (8015560 <tcp_receive+0xb08>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	b29b      	uxth	r3, r3
 801535e:	1ad3      	subs	r3, r2, r3
 8015360:	b29a      	uxth	r2, r3
 8015362:	4b80      	ldr	r3, [pc, #512]	; (8015564 <tcp_receive+0xb0c>)
 8015364:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015366:	4b7f      	ldr	r3, [pc, #508]	; (8015564 <tcp_receive+0xb0c>)
 8015368:	68db      	ldr	r3, [r3, #12]
 801536a:	899b      	ldrh	r3, [r3, #12]
 801536c:	b29b      	uxth	r3, r3
 801536e:	4618      	mov	r0, r3
 8015370:	f7fa fbba 	bl	800fae8 <lwip_htons>
 8015374:	4603      	mov	r3, r0
 8015376:	b2db      	uxtb	r3, r3
 8015378:	f003 0302 	and.w	r3, r3, #2
 801537c:	2b00      	cmp	r3, #0
 801537e:	d005      	beq.n	801538c <tcp_receive+0x934>
                inseg.len -= 1;
 8015380:	4b78      	ldr	r3, [pc, #480]	; (8015564 <tcp_receive+0xb0c>)
 8015382:	891b      	ldrh	r3, [r3, #8]
 8015384:	3b01      	subs	r3, #1
 8015386:	b29a      	uxth	r2, r3
 8015388:	4b76      	ldr	r3, [pc, #472]	; (8015564 <tcp_receive+0xb0c>)
 801538a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801538c:	4b75      	ldr	r3, [pc, #468]	; (8015564 <tcp_receive+0xb0c>)
 801538e:	685b      	ldr	r3, [r3, #4]
 8015390:	4a74      	ldr	r2, [pc, #464]	; (8015564 <tcp_receive+0xb0c>)
 8015392:	8912      	ldrh	r2, [r2, #8]
 8015394:	4611      	mov	r1, r2
 8015396:	4618      	mov	r0, r3
 8015398:	f7fb fddc 	bl	8010f54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801539c:	4b71      	ldr	r3, [pc, #452]	; (8015564 <tcp_receive+0xb0c>)
 801539e:	891c      	ldrh	r4, [r3, #8]
 80153a0:	4b70      	ldr	r3, [pc, #448]	; (8015564 <tcp_receive+0xb0c>)
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	899b      	ldrh	r3, [r3, #12]
 80153a6:	b29b      	uxth	r3, r3
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7fa fb9d 	bl	800fae8 <lwip_htons>
 80153ae:	4603      	mov	r3, r0
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	f003 0303 	and.w	r3, r3, #3
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d001      	beq.n	80153be <tcp_receive+0x966>
 80153ba:	2301      	movs	r3, #1
 80153bc:	e000      	b.n	80153c0 <tcp_receive+0x968>
 80153be:	2300      	movs	r3, #0
 80153c0:	4423      	add	r3, r4
 80153c2:	b29a      	uxth	r2, r3
 80153c4:	4b65      	ldr	r3, [pc, #404]	; (801555c <tcp_receive+0xb04>)
 80153c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80153c8:	4b64      	ldr	r3, [pc, #400]	; (801555c <tcp_receive+0xb04>)
 80153ca:	881b      	ldrh	r3, [r3, #0]
 80153cc:	461a      	mov	r2, r3
 80153ce:	4b64      	ldr	r3, [pc, #400]	; (8015560 <tcp_receive+0xb08>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	441a      	add	r2, r3
 80153d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153d6:	68db      	ldr	r3, [r3, #12]
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	429a      	cmp	r2, r3
 80153dc:	d006      	beq.n	80153ec <tcp_receive+0x994>
 80153de:	4b62      	ldr	r3, [pc, #392]	; (8015568 <tcp_receive+0xb10>)
 80153e0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80153e4:	4961      	ldr	r1, [pc, #388]	; (801556c <tcp_receive+0xb14>)
 80153e6:	4862      	ldr	r0, [pc, #392]	; (8015570 <tcp_receive+0xb18>)
 80153e8:	f006 faa0 	bl	801b92c <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80153f0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80153f2:	4b5a      	ldr	r3, [pc, #360]	; (801555c <tcp_receive+0xb04>)
 80153f4:	881b      	ldrh	r3, [r3, #0]
 80153f6:	461a      	mov	r2, r3
 80153f8:	4b59      	ldr	r3, [pc, #356]	; (8015560 <tcp_receive+0xb08>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	441a      	add	r2, r3
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015406:	4b55      	ldr	r3, [pc, #340]	; (801555c <tcp_receive+0xb04>)
 8015408:	881b      	ldrh	r3, [r3, #0]
 801540a:	429a      	cmp	r2, r3
 801540c:	d206      	bcs.n	801541c <tcp_receive+0x9c4>
 801540e:	4b56      	ldr	r3, [pc, #344]	; (8015568 <tcp_receive+0xb10>)
 8015410:	f240 6207 	movw	r2, #1543	; 0x607
 8015414:	4957      	ldr	r1, [pc, #348]	; (8015574 <tcp_receive+0xb1c>)
 8015416:	4856      	ldr	r0, [pc, #344]	; (8015570 <tcp_receive+0xb18>)
 8015418:	f006 fa88 	bl	801b92c <printf>
        pcb->rcv_wnd -= tcplen;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015420:	4b4e      	ldr	r3, [pc, #312]	; (801555c <tcp_receive+0xb04>)
 8015422:	881b      	ldrh	r3, [r3, #0]
 8015424:	1ad3      	subs	r3, r2, r3
 8015426:	b29a      	uxth	r2, r3
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f7fc fe97 	bl	8012160 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015432:	4b4c      	ldr	r3, [pc, #304]	; (8015564 <tcp_receive+0xb0c>)
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	891b      	ldrh	r3, [r3, #8]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d006      	beq.n	801544a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801543c:	4b49      	ldr	r3, [pc, #292]	; (8015564 <tcp_receive+0xb0c>)
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	4a4d      	ldr	r2, [pc, #308]	; (8015578 <tcp_receive+0xb20>)
 8015442:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015444:	4b47      	ldr	r3, [pc, #284]	; (8015564 <tcp_receive+0xb0c>)
 8015446:	2200      	movs	r2, #0
 8015448:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801544a:	4b46      	ldr	r3, [pc, #280]	; (8015564 <tcp_receive+0xb0c>)
 801544c:	68db      	ldr	r3, [r3, #12]
 801544e:	899b      	ldrh	r3, [r3, #12]
 8015450:	b29b      	uxth	r3, r3
 8015452:	4618      	mov	r0, r3
 8015454:	f7fa fb48 	bl	800fae8 <lwip_htons>
 8015458:	4603      	mov	r3, r0
 801545a:	b2db      	uxtb	r3, r3
 801545c:	f003 0301 	and.w	r3, r3, #1
 8015460:	2b00      	cmp	r3, #0
 8015462:	f000 80b8 	beq.w	80155d6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015466:	4b45      	ldr	r3, [pc, #276]	; (801557c <tcp_receive+0xb24>)
 8015468:	781b      	ldrb	r3, [r3, #0]
 801546a:	f043 0320 	orr.w	r3, r3, #32
 801546e:	b2da      	uxtb	r2, r3
 8015470:	4b42      	ldr	r3, [pc, #264]	; (801557c <tcp_receive+0xb24>)
 8015472:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015474:	e0af      	b.n	80155d6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801547a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015480:	68db      	ldr	r3, [r3, #12]
 8015482:	685b      	ldr	r3, [r3, #4]
 8015484:	4a36      	ldr	r2, [pc, #216]	; (8015560 <tcp_receive+0xb08>)
 8015486:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	891b      	ldrh	r3, [r3, #8]
 801548c:	461c      	mov	r4, r3
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	68db      	ldr	r3, [r3, #12]
 8015492:	899b      	ldrh	r3, [r3, #12]
 8015494:	b29b      	uxth	r3, r3
 8015496:	4618      	mov	r0, r3
 8015498:	f7fa fb26 	bl	800fae8 <lwip_htons>
 801549c:	4603      	mov	r3, r0
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	f003 0303 	and.w	r3, r3, #3
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d001      	beq.n	80154ac <tcp_receive+0xa54>
 80154a8:	2301      	movs	r3, #1
 80154aa:	e000      	b.n	80154ae <tcp_receive+0xa56>
 80154ac:	2300      	movs	r3, #0
 80154ae:	191a      	adds	r2, r3, r4
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b4:	441a      	add	r2, r3
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154be:	461c      	mov	r4, r3
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	891b      	ldrh	r3, [r3, #8]
 80154c4:	461d      	mov	r5, r3
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	68db      	ldr	r3, [r3, #12]
 80154ca:	899b      	ldrh	r3, [r3, #12]
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7fa fb0a 	bl	800fae8 <lwip_htons>
 80154d4:	4603      	mov	r3, r0
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	f003 0303 	and.w	r3, r3, #3
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d001      	beq.n	80154e4 <tcp_receive+0xa8c>
 80154e0:	2301      	movs	r3, #1
 80154e2:	e000      	b.n	80154e6 <tcp_receive+0xa8e>
 80154e4:	2300      	movs	r3, #0
 80154e6:	442b      	add	r3, r5
 80154e8:	429c      	cmp	r4, r3
 80154ea:	d206      	bcs.n	80154fa <tcp_receive+0xaa2>
 80154ec:	4b1e      	ldr	r3, [pc, #120]	; (8015568 <tcp_receive+0xb10>)
 80154ee:	f240 622b 	movw	r2, #1579	; 0x62b
 80154f2:	4923      	ldr	r1, [pc, #140]	; (8015580 <tcp_receive+0xb28>)
 80154f4:	481e      	ldr	r0, [pc, #120]	; (8015570 <tcp_receive+0xb18>)
 80154f6:	f006 fa19 	bl	801b92c <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	891b      	ldrh	r3, [r3, #8]
 80154fe:	461c      	mov	r4, r3
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	68db      	ldr	r3, [r3, #12]
 8015504:	899b      	ldrh	r3, [r3, #12]
 8015506:	b29b      	uxth	r3, r3
 8015508:	4618      	mov	r0, r3
 801550a:	f7fa faed 	bl	800fae8 <lwip_htons>
 801550e:	4603      	mov	r3, r0
 8015510:	b2db      	uxtb	r3, r3
 8015512:	f003 0303 	and.w	r3, r3, #3
 8015516:	2b00      	cmp	r3, #0
 8015518:	d001      	beq.n	801551e <tcp_receive+0xac6>
 801551a:	2301      	movs	r3, #1
 801551c:	e000      	b.n	8015520 <tcp_receive+0xac8>
 801551e:	2300      	movs	r3, #0
 8015520:	1919      	adds	r1, r3, r4
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015526:	b28b      	uxth	r3, r1
 8015528:	1ad3      	subs	r3, r2, r3
 801552a:	b29a      	uxth	r2, r3
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f7fc fe15 	bl	8012160 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	891b      	ldrh	r3, [r3, #8]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d028      	beq.n	8015592 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015540:	4b0d      	ldr	r3, [pc, #52]	; (8015578 <tcp_receive+0xb20>)
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d01d      	beq.n	8015584 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015548:	4b0b      	ldr	r3, [pc, #44]	; (8015578 <tcp_receive+0xb20>)
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	4619      	mov	r1, r3
 8015552:	4610      	mov	r0, r2
 8015554:	f7fb ff52 	bl	80113fc <pbuf_cat>
 8015558:	e018      	b.n	801558c <tcp_receive+0xb34>
 801555a:	bf00      	nop
 801555c:	20004f62 	.word	0x20004f62
 8015560:	20004f58 	.word	0x20004f58
 8015564:	20004f38 	.word	0x20004f38
 8015568:	08026874 	.word	0x08026874
 801556c:	08026c54 	.word	0x08026c54
 8015570:	080268c0 	.word	0x080268c0
 8015574:	08026c90 	.word	0x08026c90
 8015578:	20004f68 	.word	0x20004f68
 801557c:	20004f65 	.word	0x20004f65
 8015580:	08026cb0 	.word	0x08026cb0
            } else {
              recv_data = cseg->p;
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	4a70      	ldr	r2, [pc, #448]	; (801574c <tcp_receive+0xcf4>)
 801558a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	2200      	movs	r2, #0
 8015590:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	68db      	ldr	r3, [r3, #12]
 8015596:	899b      	ldrh	r3, [r3, #12]
 8015598:	b29b      	uxth	r3, r3
 801559a:	4618      	mov	r0, r3
 801559c:	f7fa faa4 	bl	800fae8 <lwip_htons>
 80155a0:	4603      	mov	r3, r0
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	f003 0301 	and.w	r3, r3, #1
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d00d      	beq.n	80155c8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80155ac:	4b68      	ldr	r3, [pc, #416]	; (8015750 <tcp_receive+0xcf8>)
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	f043 0320 	orr.w	r3, r3, #32
 80155b4:	b2da      	uxtb	r2, r3
 80155b6:	4b66      	ldr	r3, [pc, #408]	; (8015750 <tcp_receive+0xcf8>)
 80155b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	7d1b      	ldrb	r3, [r3, #20]
 80155be:	2b04      	cmp	r3, #4
 80155c0:	d102      	bne.n	80155c8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2207      	movs	r2, #7
 80155c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80155c8:	68bb      	ldr	r3, [r7, #8]
 80155ca:	681a      	ldr	r2, [r3, #0]
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80155d0:	68b8      	ldr	r0, [r7, #8]
 80155d2:	f7fd faea 	bl	8012baa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d008      	beq.n	80155f0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155e2:	68db      	ldr	r3, [r3, #12]
 80155e4:	685a      	ldr	r2, [r3, #4]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80155ea:	429a      	cmp	r2, r3
 80155ec:	f43f af43 	beq.w	8015476 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	8b5b      	ldrh	r3, [r3, #26]
 80155f4:	f003 0301 	and.w	r3, r3, #1
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d00e      	beq.n	801561a <tcp_receive+0xbc2>
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	8b5b      	ldrh	r3, [r3, #26]
 8015600:	f023 0301 	bic.w	r3, r3, #1
 8015604:	b29a      	uxth	r2, r3
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	835a      	strh	r2, [r3, #26]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	8b5b      	ldrh	r3, [r3, #26]
 801560e:	f043 0302 	orr.w	r3, r3, #2
 8015612:	b29a      	uxth	r2, r3
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015618:	e188      	b.n	801592c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	8b5b      	ldrh	r3, [r3, #26]
 801561e:	f043 0301 	orr.w	r3, r3, #1
 8015622:	b29a      	uxth	r2, r3
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015628:	e180      	b.n	801592c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801562e:	2b00      	cmp	r3, #0
 8015630:	d106      	bne.n	8015640 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015632:	4848      	ldr	r0, [pc, #288]	; (8015754 <tcp_receive+0xcfc>)
 8015634:	f7fd faf0 	bl	8012c18 <tcp_seg_copy>
 8015638:	4602      	mov	r2, r0
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	675a      	str	r2, [r3, #116]	; 0x74
 801563e:	e16d      	b.n	801591c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015640:	2300      	movs	r3, #0
 8015642:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015648:	63bb      	str	r3, [r7, #56]	; 0x38
 801564a:	e157      	b.n	80158fc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801564e:	68db      	ldr	r3, [r3, #12]
 8015650:	685a      	ldr	r2, [r3, #4]
 8015652:	4b41      	ldr	r3, [pc, #260]	; (8015758 <tcp_receive+0xd00>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	429a      	cmp	r2, r3
 8015658:	d11d      	bne.n	8015696 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801565a:	4b3e      	ldr	r3, [pc, #248]	; (8015754 <tcp_receive+0xcfc>)
 801565c:	891a      	ldrh	r2, [r3, #8]
 801565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015660:	891b      	ldrh	r3, [r3, #8]
 8015662:	429a      	cmp	r2, r3
 8015664:	f240 814f 	bls.w	8015906 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015668:	483a      	ldr	r0, [pc, #232]	; (8015754 <tcp_receive+0xcfc>)
 801566a:	f7fd fad5 	bl	8012c18 <tcp_seg_copy>
 801566e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	2b00      	cmp	r3, #0
 8015674:	f000 8149 	beq.w	801590a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8015678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801567a:	2b00      	cmp	r3, #0
 801567c:	d003      	beq.n	8015686 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015680:	697a      	ldr	r2, [r7, #20]
 8015682:	601a      	str	r2, [r3, #0]
 8015684:	e002      	b.n	801568c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	697a      	ldr	r2, [r7, #20]
 801568a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801568c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801568e:	6978      	ldr	r0, [r7, #20]
 8015690:	f7ff f8de 	bl	8014850 <tcp_oos_insert_segment>
                }
                break;
 8015694:	e139      	b.n	801590a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015698:	2b00      	cmp	r3, #0
 801569a:	d117      	bne.n	80156cc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801569c:	4b2e      	ldr	r3, [pc, #184]	; (8015758 <tcp_receive+0xd00>)
 801569e:	681a      	ldr	r2, [r3, #0]
 80156a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a2:	68db      	ldr	r3, [r3, #12]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	1ad3      	subs	r3, r2, r3
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	da57      	bge.n	801575c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80156ac:	4829      	ldr	r0, [pc, #164]	; (8015754 <tcp_receive+0xcfc>)
 80156ae:	f7fd fab3 	bl	8012c18 <tcp_seg_copy>
 80156b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80156b4:	69bb      	ldr	r3, [r7, #24]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	f000 8129 	beq.w	801590e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	69ba      	ldr	r2, [r7, #24]
 80156c0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80156c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80156c4:	69b8      	ldr	r0, [r7, #24]
 80156c6:	f7ff f8c3 	bl	8014850 <tcp_oos_insert_segment>
                  }
                  break;
 80156ca:	e120      	b.n	801590e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80156cc:	4b22      	ldr	r3, [pc, #136]	; (8015758 <tcp_receive+0xd00>)
 80156ce:	681a      	ldr	r2, [r3, #0]
 80156d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156d2:	68db      	ldr	r3, [r3, #12]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	1ad3      	subs	r3, r2, r3
 80156d8:	3b01      	subs	r3, #1
 80156da:	2b00      	cmp	r3, #0
 80156dc:	db3e      	blt.n	801575c <tcp_receive+0xd04>
 80156de:	4b1e      	ldr	r3, [pc, #120]	; (8015758 <tcp_receive+0xd00>)
 80156e0:	681a      	ldr	r2, [r3, #0]
 80156e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156e4:	68db      	ldr	r3, [r3, #12]
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	1ad3      	subs	r3, r2, r3
 80156ea:	3301      	adds	r3, #1
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	dc35      	bgt.n	801575c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80156f0:	4818      	ldr	r0, [pc, #96]	; (8015754 <tcp_receive+0xcfc>)
 80156f2:	f7fd fa91 	bl	8012c18 <tcp_seg_copy>
 80156f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	f000 8109 	beq.w	8015912 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015708:	8912      	ldrh	r2, [r2, #8]
 801570a:	441a      	add	r2, r3
 801570c:	4b12      	ldr	r3, [pc, #72]	; (8015758 <tcp_receive+0xd00>)
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	1ad3      	subs	r3, r2, r3
 8015712:	2b00      	cmp	r3, #0
 8015714:	dd12      	ble.n	801573c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015716:	4b10      	ldr	r3, [pc, #64]	; (8015758 <tcp_receive+0xd00>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	b29a      	uxth	r2, r3
 801571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	b29b      	uxth	r3, r3
 8015724:	1ad3      	subs	r3, r2, r3
 8015726:	b29a      	uxth	r2, r3
 8015728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801572a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801572e:	685a      	ldr	r2, [r3, #4]
 8015730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015732:	891b      	ldrh	r3, [r3, #8]
 8015734:	4619      	mov	r1, r3
 8015736:	4610      	mov	r0, r2
 8015738:	f7fb fc0c 	bl	8010f54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801573e:	69fa      	ldr	r2, [r7, #28]
 8015740:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015742:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015744:	69f8      	ldr	r0, [r7, #28]
 8015746:	f7ff f883 	bl	8014850 <tcp_oos_insert_segment>
                  }
                  break;
 801574a:	e0e2      	b.n	8015912 <tcp_receive+0xeba>
 801574c:	20004f68 	.word	0x20004f68
 8015750:	20004f65 	.word	0x20004f65
 8015754:	20004f38 	.word	0x20004f38
 8015758:	20004f58 	.word	0x20004f58
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801575e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	2b00      	cmp	r3, #0
 8015766:	f040 80c6 	bne.w	80158f6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801576a:	4b80      	ldr	r3, [pc, #512]	; (801596c <tcp_receive+0xf14>)
 801576c:	681a      	ldr	r2, [r3, #0]
 801576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015770:	68db      	ldr	r3, [r3, #12]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015776:	2b00      	cmp	r3, #0
 8015778:	f340 80bd 	ble.w	80158f6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801577e:	68db      	ldr	r3, [r3, #12]
 8015780:	899b      	ldrh	r3, [r3, #12]
 8015782:	b29b      	uxth	r3, r3
 8015784:	4618      	mov	r0, r3
 8015786:	f7fa f9af 	bl	800fae8 <lwip_htons>
 801578a:	4603      	mov	r3, r0
 801578c:	b2db      	uxtb	r3, r3
 801578e:	f003 0301 	and.w	r3, r3, #1
 8015792:	2b00      	cmp	r3, #0
 8015794:	f040 80bf 	bne.w	8015916 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015798:	4875      	ldr	r0, [pc, #468]	; (8015970 <tcp_receive+0xf18>)
 801579a:	f7fd fa3d 	bl	8012c18 <tcp_seg_copy>
 801579e:	4602      	mov	r2, r0
 80157a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80157a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	f000 80b6 	beq.w	801591a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80157ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b0:	68db      	ldr	r3, [r3, #12]
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80157b6:	8912      	ldrh	r2, [r2, #8]
 80157b8:	441a      	add	r2, r3
 80157ba:	4b6c      	ldr	r3, [pc, #432]	; (801596c <tcp_receive+0xf14>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	1ad3      	subs	r3, r2, r3
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	dd12      	ble.n	80157ea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80157c4:	4b69      	ldr	r3, [pc, #420]	; (801596c <tcp_receive+0xf14>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	b29a      	uxth	r2, r3
 80157ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157cc:	68db      	ldr	r3, [r3, #12]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	b29b      	uxth	r3, r3
 80157d2:	1ad3      	subs	r3, r2, r3
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80157da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157dc:	685a      	ldr	r2, [r3, #4]
 80157de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157e0:	891b      	ldrh	r3, [r3, #8]
 80157e2:	4619      	mov	r1, r3
 80157e4:	4610      	mov	r0, r2
 80157e6:	f7fb fbb5 	bl	8010f54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80157ea:	4b62      	ldr	r3, [pc, #392]	; (8015974 <tcp_receive+0xf1c>)
 80157ec:	881b      	ldrh	r3, [r3, #0]
 80157ee:	461a      	mov	r2, r3
 80157f0:	4b5e      	ldr	r3, [pc, #376]	; (801596c <tcp_receive+0xf14>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	441a      	add	r2, r3
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157fa:	6879      	ldr	r1, [r7, #4]
 80157fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80157fe:	440b      	add	r3, r1
 8015800:	1ad3      	subs	r3, r2, r3
 8015802:	2b00      	cmp	r3, #0
 8015804:	f340 8089 	ble.w	801591a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	68db      	ldr	r3, [r3, #12]
 801580e:	899b      	ldrh	r3, [r3, #12]
 8015810:	b29b      	uxth	r3, r3
 8015812:	4618      	mov	r0, r3
 8015814:	f7fa f968 	bl	800fae8 <lwip_htons>
 8015818:	4603      	mov	r3, r0
 801581a:	b2db      	uxtb	r3, r3
 801581c:	f003 0301 	and.w	r3, r3, #1
 8015820:	2b00      	cmp	r3, #0
 8015822:	d022      	beq.n	801586a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	68db      	ldr	r3, [r3, #12]
 801582a:	899b      	ldrh	r3, [r3, #12]
 801582c:	b29b      	uxth	r3, r3
 801582e:	b21b      	sxth	r3, r3
 8015830:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015834:	b21c      	sxth	r4, r3
 8015836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	68db      	ldr	r3, [r3, #12]
 801583c:	899b      	ldrh	r3, [r3, #12]
 801583e:	b29b      	uxth	r3, r3
 8015840:	4618      	mov	r0, r3
 8015842:	f7fa f951 	bl	800fae8 <lwip_htons>
 8015846:	4603      	mov	r3, r0
 8015848:	b2db      	uxtb	r3, r3
 801584a:	b29b      	uxth	r3, r3
 801584c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015850:	b29b      	uxth	r3, r3
 8015852:	4618      	mov	r0, r3
 8015854:	f7fa f948 	bl	800fae8 <lwip_htons>
 8015858:	4603      	mov	r3, r0
 801585a:	b21b      	sxth	r3, r3
 801585c:	4323      	orrs	r3, r4
 801585e:	b21a      	sxth	r2, r3
 8015860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	68db      	ldr	r3, [r3, #12]
 8015866:	b292      	uxth	r2, r2
 8015868:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586e:	b29a      	uxth	r2, r3
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015874:	4413      	add	r3, r2
 8015876:	b299      	uxth	r1, r3
 8015878:	4b3c      	ldr	r3, [pc, #240]	; (801596c <tcp_receive+0xf14>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	b29a      	uxth	r2, r3
 801587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	1a8a      	subs	r2, r1, r2
 8015884:	b292      	uxth	r2, r2
 8015886:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	685a      	ldr	r2, [r3, #4]
 801588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	891b      	ldrh	r3, [r3, #8]
 8015894:	4619      	mov	r1, r3
 8015896:	4610      	mov	r0, r2
 8015898:	f7fb fb5c 	bl	8010f54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	891c      	ldrh	r4, [r3, #8]
 80158a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	899b      	ldrh	r3, [r3, #12]
 80158aa:	b29b      	uxth	r3, r3
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7fa f91b 	bl	800fae8 <lwip_htons>
 80158b2:	4603      	mov	r3, r0
 80158b4:	b2db      	uxtb	r3, r3
 80158b6:	f003 0303 	and.w	r3, r3, #3
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d001      	beq.n	80158c2 <tcp_receive+0xe6a>
 80158be:	2301      	movs	r3, #1
 80158c0:	e000      	b.n	80158c4 <tcp_receive+0xe6c>
 80158c2:	2300      	movs	r3, #0
 80158c4:	4423      	add	r3, r4
 80158c6:	b29a      	uxth	r2, r3
 80158c8:	4b2a      	ldr	r3, [pc, #168]	; (8015974 <tcp_receive+0xf1c>)
 80158ca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80158cc:	4b29      	ldr	r3, [pc, #164]	; (8015974 <tcp_receive+0xf1c>)
 80158ce:	881b      	ldrh	r3, [r3, #0]
 80158d0:	461a      	mov	r2, r3
 80158d2:	4b26      	ldr	r3, [pc, #152]	; (801596c <tcp_receive+0xf14>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	441a      	add	r2, r3
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158dc:	6879      	ldr	r1, [r7, #4]
 80158de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80158e0:	440b      	add	r3, r1
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d019      	beq.n	801591a <tcp_receive+0xec2>
 80158e6:	4b24      	ldr	r3, [pc, #144]	; (8015978 <tcp_receive+0xf20>)
 80158e8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80158ec:	4923      	ldr	r1, [pc, #140]	; (801597c <tcp_receive+0xf24>)
 80158ee:	4824      	ldr	r0, [pc, #144]	; (8015980 <tcp_receive+0xf28>)
 80158f0:	f006 f81c 	bl	801b92c <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80158f4:	e011      	b.n	801591a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80158f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80158fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f47f aea4 	bne.w	801564c <tcp_receive+0xbf4>
 8015904:	e00a      	b.n	801591c <tcp_receive+0xec4>
                break;
 8015906:	bf00      	nop
 8015908:	e008      	b.n	801591c <tcp_receive+0xec4>
                break;
 801590a:	bf00      	nop
 801590c:	e006      	b.n	801591c <tcp_receive+0xec4>
                  break;
 801590e:	bf00      	nop
 8015910:	e004      	b.n	801591c <tcp_receive+0xec4>
                  break;
 8015912:	bf00      	nop
 8015914:	e002      	b.n	801591c <tcp_receive+0xec4>
                  break;
 8015916:	bf00      	nop
 8015918:	e000      	b.n	801591c <tcp_receive+0xec4>
                break;
 801591a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f001 fe8b 	bl	8017638 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015922:	e003      	b.n	801592c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f001 fe87 	bl	8017638 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801592a:	e01a      	b.n	8015962 <tcp_receive+0xf0a>
 801592c:	e019      	b.n	8015962 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801592e:	4b0f      	ldr	r3, [pc, #60]	; (801596c <tcp_receive+0xf14>)
 8015930:	681a      	ldr	r2, [r3, #0]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015936:	1ad3      	subs	r3, r2, r3
 8015938:	2b00      	cmp	r3, #0
 801593a:	db0a      	blt.n	8015952 <tcp_receive+0xefa>
 801593c:	4b0b      	ldr	r3, [pc, #44]	; (801596c <tcp_receive+0xf14>)
 801593e:	681a      	ldr	r2, [r3, #0]
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015944:	6879      	ldr	r1, [r7, #4]
 8015946:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015948:	440b      	add	r3, r1
 801594a:	1ad3      	subs	r3, r2, r3
 801594c:	3301      	adds	r3, #1
 801594e:	2b00      	cmp	r3, #0
 8015950:	dd07      	ble.n	8015962 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	8b5b      	ldrh	r3, [r3, #26]
 8015956:	f043 0302 	orr.w	r3, r3, #2
 801595a:	b29a      	uxth	r2, r3
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015960:	e7ff      	b.n	8015962 <tcp_receive+0xf0a>
 8015962:	bf00      	nop
 8015964:	3750      	adds	r7, #80	; 0x50
 8015966:	46bd      	mov	sp, r7
 8015968:	bdb0      	pop	{r4, r5, r7, pc}
 801596a:	bf00      	nop
 801596c:	20004f58 	.word	0x20004f58
 8015970:	20004f38 	.word	0x20004f38
 8015974:	20004f62 	.word	0x20004f62
 8015978:	08026874 	.word	0x08026874
 801597c:	08026c1c 	.word	0x08026c1c
 8015980:	080268c0 	.word	0x080268c0

08015984 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015984:	b480      	push	{r7}
 8015986:	b083      	sub	sp, #12
 8015988:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801598a:	4b15      	ldr	r3, [pc, #84]	; (80159e0 <tcp_get_next_optbyte+0x5c>)
 801598c:	881b      	ldrh	r3, [r3, #0]
 801598e:	1c5a      	adds	r2, r3, #1
 8015990:	b291      	uxth	r1, r2
 8015992:	4a13      	ldr	r2, [pc, #76]	; (80159e0 <tcp_get_next_optbyte+0x5c>)
 8015994:	8011      	strh	r1, [r2, #0]
 8015996:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015998:	4b12      	ldr	r3, [pc, #72]	; (80159e4 <tcp_get_next_optbyte+0x60>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d004      	beq.n	80159aa <tcp_get_next_optbyte+0x26>
 80159a0:	4b11      	ldr	r3, [pc, #68]	; (80159e8 <tcp_get_next_optbyte+0x64>)
 80159a2:	881b      	ldrh	r3, [r3, #0]
 80159a4:	88fa      	ldrh	r2, [r7, #6]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d208      	bcs.n	80159bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80159aa:	4b10      	ldr	r3, [pc, #64]	; (80159ec <tcp_get_next_optbyte+0x68>)
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	3314      	adds	r3, #20
 80159b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80159b2:	88fb      	ldrh	r3, [r7, #6]
 80159b4:	683a      	ldr	r2, [r7, #0]
 80159b6:	4413      	add	r3, r2
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	e00b      	b.n	80159d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80159bc:	88fb      	ldrh	r3, [r7, #6]
 80159be:	b2da      	uxtb	r2, r3
 80159c0:	4b09      	ldr	r3, [pc, #36]	; (80159e8 <tcp_get_next_optbyte+0x64>)
 80159c2:	881b      	ldrh	r3, [r3, #0]
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	1ad3      	subs	r3, r2, r3
 80159c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80159ca:	4b06      	ldr	r3, [pc, #24]	; (80159e4 <tcp_get_next_optbyte+0x60>)
 80159cc:	681a      	ldr	r2, [r3, #0]
 80159ce:	797b      	ldrb	r3, [r7, #5]
 80159d0:	4413      	add	r3, r2
 80159d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	370c      	adds	r7, #12
 80159d8:	46bd      	mov	sp, r7
 80159da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159de:	4770      	bx	lr
 80159e0:	20004f54 	.word	0x20004f54
 80159e4:	20004f50 	.word	0x20004f50
 80159e8:	20004f4e 	.word	0x20004f4e
 80159ec:	20004f48 	.word	0x20004f48

080159f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b084      	sub	sp, #16
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d106      	bne.n	8015a0c <tcp_parseopt+0x1c>
 80159fe:	4b32      	ldr	r3, [pc, #200]	; (8015ac8 <tcp_parseopt+0xd8>)
 8015a00:	f240 727d 	movw	r2, #1917	; 0x77d
 8015a04:	4931      	ldr	r1, [pc, #196]	; (8015acc <tcp_parseopt+0xdc>)
 8015a06:	4832      	ldr	r0, [pc, #200]	; (8015ad0 <tcp_parseopt+0xe0>)
 8015a08:	f005 ff90 	bl	801b92c <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015a0c:	4b31      	ldr	r3, [pc, #196]	; (8015ad4 <tcp_parseopt+0xe4>)
 8015a0e:	881b      	ldrh	r3, [r3, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d055      	beq.n	8015ac0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015a14:	4b30      	ldr	r3, [pc, #192]	; (8015ad8 <tcp_parseopt+0xe8>)
 8015a16:	2200      	movs	r2, #0
 8015a18:	801a      	strh	r2, [r3, #0]
 8015a1a:	e045      	b.n	8015aa8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015a1c:	f7ff ffb2 	bl	8015984 <tcp_get_next_optbyte>
 8015a20:	4603      	mov	r3, r0
 8015a22:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015a24:	7bfb      	ldrb	r3, [r7, #15]
 8015a26:	2b02      	cmp	r3, #2
 8015a28:	d006      	beq.n	8015a38 <tcp_parseopt+0x48>
 8015a2a:	2b02      	cmp	r3, #2
 8015a2c:	dc2b      	bgt.n	8015a86 <tcp_parseopt+0x96>
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d041      	beq.n	8015ab6 <tcp_parseopt+0xc6>
 8015a32:	2b01      	cmp	r3, #1
 8015a34:	d127      	bne.n	8015a86 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015a36:	e037      	b.n	8015aa8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015a38:	f7ff ffa4 	bl	8015984 <tcp_get_next_optbyte>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	2b04      	cmp	r3, #4
 8015a40:	d13b      	bne.n	8015aba <tcp_parseopt+0xca>
 8015a42:	4b25      	ldr	r3, [pc, #148]	; (8015ad8 <tcp_parseopt+0xe8>)
 8015a44:	881b      	ldrh	r3, [r3, #0]
 8015a46:	3301      	adds	r3, #1
 8015a48:	4a22      	ldr	r2, [pc, #136]	; (8015ad4 <tcp_parseopt+0xe4>)
 8015a4a:	8812      	ldrh	r2, [r2, #0]
 8015a4c:	4293      	cmp	r3, r2
 8015a4e:	da34      	bge.n	8015aba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015a50:	f7ff ff98 	bl	8015984 <tcp_get_next_optbyte>
 8015a54:	4603      	mov	r3, r0
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	021b      	lsls	r3, r3, #8
 8015a5a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015a5c:	f7ff ff92 	bl	8015984 <tcp_get_next_optbyte>
 8015a60:	4603      	mov	r3, r0
 8015a62:	b29a      	uxth	r2, r3
 8015a64:	89bb      	ldrh	r3, [r7, #12]
 8015a66:	4313      	orrs	r3, r2
 8015a68:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015a6a:	89bb      	ldrh	r3, [r7, #12]
 8015a6c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015a70:	d804      	bhi.n	8015a7c <tcp_parseopt+0x8c>
 8015a72:	89bb      	ldrh	r3, [r7, #12]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d001      	beq.n	8015a7c <tcp_parseopt+0x8c>
 8015a78:	89ba      	ldrh	r2, [r7, #12]
 8015a7a:	e001      	b.n	8015a80 <tcp_parseopt+0x90>
 8015a7c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015a84:	e010      	b.n	8015aa8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015a86:	f7ff ff7d 	bl	8015984 <tcp_get_next_optbyte>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015a8e:	7afb      	ldrb	r3, [r7, #11]
 8015a90:	2b01      	cmp	r3, #1
 8015a92:	d914      	bls.n	8015abe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015a94:	7afb      	ldrb	r3, [r7, #11]
 8015a96:	b29a      	uxth	r2, r3
 8015a98:	4b0f      	ldr	r3, [pc, #60]	; (8015ad8 <tcp_parseopt+0xe8>)
 8015a9a:	881b      	ldrh	r3, [r3, #0]
 8015a9c:	4413      	add	r3, r2
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	3b02      	subs	r3, #2
 8015aa2:	b29a      	uxth	r2, r3
 8015aa4:	4b0c      	ldr	r3, [pc, #48]	; (8015ad8 <tcp_parseopt+0xe8>)
 8015aa6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015aa8:	4b0b      	ldr	r3, [pc, #44]	; (8015ad8 <tcp_parseopt+0xe8>)
 8015aaa:	881a      	ldrh	r2, [r3, #0]
 8015aac:	4b09      	ldr	r3, [pc, #36]	; (8015ad4 <tcp_parseopt+0xe4>)
 8015aae:	881b      	ldrh	r3, [r3, #0]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d3b3      	bcc.n	8015a1c <tcp_parseopt+0x2c>
 8015ab4:	e004      	b.n	8015ac0 <tcp_parseopt+0xd0>
          return;
 8015ab6:	bf00      	nop
 8015ab8:	e002      	b.n	8015ac0 <tcp_parseopt+0xd0>
            return;
 8015aba:	bf00      	nop
 8015abc:	e000      	b.n	8015ac0 <tcp_parseopt+0xd0>
            return;
 8015abe:	bf00      	nop
      }
    }
  }
}
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	08026874 	.word	0x08026874
 8015acc:	08026cd8 	.word	0x08026cd8
 8015ad0:	080268c0 	.word	0x080268c0
 8015ad4:	20004f4c 	.word	0x20004f4c
 8015ad8:	20004f54 	.word	0x20004f54

08015adc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015adc:	b480      	push	{r7}
 8015ade:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015ae0:	4b05      	ldr	r3, [pc, #20]	; (8015af8 <tcp_trigger_input_pcb_close+0x1c>)
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	f043 0310 	orr.w	r3, r3, #16
 8015ae8:	b2da      	uxtb	r2, r3
 8015aea:	4b03      	ldr	r3, [pc, #12]	; (8015af8 <tcp_trigger_input_pcb_close+0x1c>)
 8015aec:	701a      	strb	r2, [r3, #0]
}
 8015aee:	bf00      	nop
 8015af0:	46bd      	mov	sp, r7
 8015af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af6:	4770      	bx	lr
 8015af8:	20004f65 	.word	0x20004f65

08015afc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b084      	sub	sp, #16
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	60b9      	str	r1, [r7, #8]
 8015b06:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d00a      	beq.n	8015b24 <tcp_route+0x28>
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	7a1b      	ldrb	r3, [r3, #8]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d006      	beq.n	8015b24 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	7a1b      	ldrb	r3, [r3, #8]
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7fb f812 	bl	8010b44 <netif_get_by_index>
 8015b20:	4603      	mov	r3, r0
 8015b22:	e003      	b.n	8015b2c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f003 fe35 	bl	8019794 <ip4_route>
 8015b2a:	4603      	mov	r3, r0
  }
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3710      	adds	r7, #16
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}

08015b34 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015b34:	b590      	push	{r4, r7, lr}
 8015b36:	b087      	sub	sp, #28
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	60f8      	str	r0, [r7, #12]
 8015b3c:	60b9      	str	r1, [r7, #8]
 8015b3e:	603b      	str	r3, [r7, #0]
 8015b40:	4613      	mov	r3, r2
 8015b42:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d105      	bne.n	8015b56 <tcp_create_segment+0x22>
 8015b4a:	4b44      	ldr	r3, [pc, #272]	; (8015c5c <tcp_create_segment+0x128>)
 8015b4c:	22a3      	movs	r2, #163	; 0xa3
 8015b4e:	4944      	ldr	r1, [pc, #272]	; (8015c60 <tcp_create_segment+0x12c>)
 8015b50:	4844      	ldr	r0, [pc, #272]	; (8015c64 <tcp_create_segment+0x130>)
 8015b52:	f005 feeb 	bl	801b92c <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d105      	bne.n	8015b68 <tcp_create_segment+0x34>
 8015b5c:	4b3f      	ldr	r3, [pc, #252]	; (8015c5c <tcp_create_segment+0x128>)
 8015b5e:	22a4      	movs	r2, #164	; 0xa4
 8015b60:	4941      	ldr	r1, [pc, #260]	; (8015c68 <tcp_create_segment+0x134>)
 8015b62:	4840      	ldr	r0, [pc, #256]	; (8015c64 <tcp_create_segment+0x130>)
 8015b64:	f005 fee2 	bl	801b92c <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015b68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015b6c:	009b      	lsls	r3, r3, #2
 8015b6e:	b2db      	uxtb	r3, r3
 8015b70:	f003 0304 	and.w	r3, r3, #4
 8015b74:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015b76:	2003      	movs	r0, #3
 8015b78:	f7fa fca2 	bl	80104c0 <memp_malloc>
 8015b7c:	6138      	str	r0, [r7, #16]
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d104      	bne.n	8015b8e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015b84:	68b8      	ldr	r0, [r7, #8]
 8015b86:	f7fb fb6b 	bl	8011260 <pbuf_free>
    return NULL;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	e061      	b.n	8015c52 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015b94:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	68ba      	ldr	r2, [r7, #8]
 8015ba0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	891a      	ldrh	r2, [r3, #8]
 8015ba6:	7dfb      	ldrb	r3, [r7, #23]
 8015ba8:	b29b      	uxth	r3, r3
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d205      	bcs.n	8015bba <tcp_create_segment+0x86>
 8015bae:	4b2b      	ldr	r3, [pc, #172]	; (8015c5c <tcp_create_segment+0x128>)
 8015bb0:	22b0      	movs	r2, #176	; 0xb0
 8015bb2:	492e      	ldr	r1, [pc, #184]	; (8015c6c <tcp_create_segment+0x138>)
 8015bb4:	482b      	ldr	r0, [pc, #172]	; (8015c64 <tcp_create_segment+0x130>)
 8015bb6:	f005 feb9 	bl	801b92c <printf>
  seg->len = p->tot_len - optlen;
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	891a      	ldrh	r2, [r3, #8]
 8015bbe:	7dfb      	ldrb	r3, [r7, #23]
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	1ad3      	subs	r3, r2, r3
 8015bc4:	b29a      	uxth	r2, r3
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015bca:	2114      	movs	r1, #20
 8015bcc:	68b8      	ldr	r0, [r7, #8]
 8015bce:	f7fb fab1 	bl	8011134 <pbuf_add_header>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d004      	beq.n	8015be2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015bd8:	6938      	ldr	r0, [r7, #16]
 8015bda:	f7fc ffe6 	bl	8012baa <tcp_seg_free>
    return NULL;
 8015bde:	2300      	movs	r3, #0
 8015be0:	e037      	b.n	8015c52 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	685a      	ldr	r2, [r3, #4]
 8015be8:	693b      	ldr	r3, [r7, #16]
 8015bea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	8ada      	ldrh	r2, [r3, #22]
 8015bf0:	693b      	ldr	r3, [r7, #16]
 8015bf2:	68dc      	ldr	r4, [r3, #12]
 8015bf4:	4610      	mov	r0, r2
 8015bf6:	f7f9 ff77 	bl	800fae8 <lwip_htons>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	8b1a      	ldrh	r2, [r3, #24]
 8015c02:	693b      	ldr	r3, [r7, #16]
 8015c04:	68dc      	ldr	r4, [r3, #12]
 8015c06:	4610      	mov	r0, r2
 8015c08:	f7f9 ff6e 	bl	800fae8 <lwip_htons>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	68dc      	ldr	r4, [r3, #12]
 8015c14:	6838      	ldr	r0, [r7, #0]
 8015c16:	f7f9 ff7c 	bl	800fb12 <lwip_htonl>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015c1e:	7dfb      	ldrb	r3, [r7, #23]
 8015c20:	089b      	lsrs	r3, r3, #2
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	b29b      	uxth	r3, r3
 8015c26:	3305      	adds	r3, #5
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	031b      	lsls	r3, r3, #12
 8015c2c:	b29a      	uxth	r2, r3
 8015c2e:	79fb      	ldrb	r3, [r7, #7]
 8015c30:	b29b      	uxth	r3, r3
 8015c32:	4313      	orrs	r3, r2
 8015c34:	b29a      	uxth	r2, r3
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	68dc      	ldr	r4, [r3, #12]
 8015c3a:	4610      	mov	r0, r2
 8015c3c:	f7f9 ff54 	bl	800fae8 <lwip_htons>
 8015c40:	4603      	mov	r3, r0
 8015c42:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	68db      	ldr	r3, [r3, #12]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	749a      	strb	r2, [r3, #18]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015c50:	693b      	ldr	r3, [r7, #16]
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	371c      	adds	r7, #28
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd90      	pop	{r4, r7, pc}
 8015c5a:	bf00      	nop
 8015c5c:	08026cf4 	.word	0x08026cf4
 8015c60:	08026d28 	.word	0x08026d28
 8015c64:	08026d48 	.word	0x08026d48
 8015c68:	08026d70 	.word	0x08026d70
 8015c6c:	08026d94 	.word	0x08026d94

08015c70 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b086      	sub	sp, #24
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	607b      	str	r3, [r7, #4]
 8015c78:	4603      	mov	r3, r0
 8015c7a:	73fb      	strb	r3, [r7, #15]
 8015c7c:	460b      	mov	r3, r1
 8015c7e:	81bb      	strh	r3, [r7, #12]
 8015c80:	4613      	mov	r3, r2
 8015c82:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015c84:	89bb      	ldrh	r3, [r7, #12]
 8015c86:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d105      	bne.n	8015c9a <tcp_pbuf_prealloc+0x2a>
 8015c8e:	4b30      	ldr	r3, [pc, #192]	; (8015d50 <tcp_pbuf_prealloc+0xe0>)
 8015c90:	22e8      	movs	r2, #232	; 0xe8
 8015c92:	4930      	ldr	r1, [pc, #192]	; (8015d54 <tcp_pbuf_prealloc+0xe4>)
 8015c94:	4830      	ldr	r0, [pc, #192]	; (8015d58 <tcp_pbuf_prealloc+0xe8>)
 8015c96:	f005 fe49 	bl	801b92c <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015c9a:	6a3b      	ldr	r3, [r7, #32]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d105      	bne.n	8015cac <tcp_pbuf_prealloc+0x3c>
 8015ca0:	4b2b      	ldr	r3, [pc, #172]	; (8015d50 <tcp_pbuf_prealloc+0xe0>)
 8015ca2:	22e9      	movs	r2, #233	; 0xe9
 8015ca4:	492d      	ldr	r1, [pc, #180]	; (8015d5c <tcp_pbuf_prealloc+0xec>)
 8015ca6:	482c      	ldr	r0, [pc, #176]	; (8015d58 <tcp_pbuf_prealloc+0xe8>)
 8015ca8:	f005 fe40 	bl	801b92c <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015cac:	89ba      	ldrh	r2, [r7, #12]
 8015cae:	897b      	ldrh	r3, [r7, #10]
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	d221      	bcs.n	8015cf8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015cb8:	f003 0302 	and.w	r3, r3, #2
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d111      	bne.n	8015ce4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015cc0:	6a3b      	ldr	r3, [r7, #32]
 8015cc2:	8b5b      	ldrh	r3, [r3, #26]
 8015cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d115      	bne.n	8015cf8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d007      	beq.n	8015ce4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015cd4:	6a3b      	ldr	r3, [r7, #32]
 8015cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d103      	bne.n	8015ce4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015cdc:	6a3b      	ldr	r3, [r7, #32]
 8015cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d009      	beq.n	8015cf8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015ce4:	89bb      	ldrh	r3, [r7, #12]
 8015ce6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015cea:	f023 0203 	bic.w	r2, r3, #3
 8015cee:	897b      	ldrh	r3, [r7, #10]
 8015cf0:	4293      	cmp	r3, r2
 8015cf2:	bf28      	it	cs
 8015cf4:	4613      	movcs	r3, r2
 8015cf6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015cf8:	8af9      	ldrh	r1, [r7, #22]
 8015cfa:	7bfb      	ldrb	r3, [r7, #15]
 8015cfc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7fa ffc9 	bl	8010c98 <pbuf_alloc>
 8015d06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d101      	bne.n	8015d12 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	e019      	b.n	8015d46 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015d12:	693b      	ldr	r3, [r7, #16]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d006      	beq.n	8015d28 <tcp_pbuf_prealloc+0xb8>
 8015d1a:	4b0d      	ldr	r3, [pc, #52]	; (8015d50 <tcp_pbuf_prealloc+0xe0>)
 8015d1c:	f240 120b 	movw	r2, #267	; 0x10b
 8015d20:	490f      	ldr	r1, [pc, #60]	; (8015d60 <tcp_pbuf_prealloc+0xf0>)
 8015d22:	480d      	ldr	r0, [pc, #52]	; (8015d58 <tcp_pbuf_prealloc+0xe8>)
 8015d24:	f005 fe02 	bl	801b92c <printf>
  *oversize = p->len - length;
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	895a      	ldrh	r2, [r3, #10]
 8015d2c:	89bb      	ldrh	r3, [r7, #12]
 8015d2e:	1ad3      	subs	r3, r2, r3
 8015d30:	b29a      	uxth	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	89ba      	ldrh	r2, [r7, #12]
 8015d3a:	811a      	strh	r2, [r3, #8]
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	891a      	ldrh	r2, [r3, #8]
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	815a      	strh	r2, [r3, #10]
  return p;
 8015d44:	693b      	ldr	r3, [r7, #16]
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3718      	adds	r7, #24
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	08026cf4 	.word	0x08026cf4
 8015d54:	08026dac 	.word	0x08026dac
 8015d58:	08026d48 	.word	0x08026d48
 8015d5c:	08026dd0 	.word	0x08026dd0
 8015d60:	08026df0 	.word	0x08026df0

08015d64 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b082      	sub	sp, #8
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	460b      	mov	r3, r1
 8015d6e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d106      	bne.n	8015d84 <tcp_write_checks+0x20>
 8015d76:	4b33      	ldr	r3, [pc, #204]	; (8015e44 <tcp_write_checks+0xe0>)
 8015d78:	f240 1233 	movw	r2, #307	; 0x133
 8015d7c:	4932      	ldr	r1, [pc, #200]	; (8015e48 <tcp_write_checks+0xe4>)
 8015d7e:	4833      	ldr	r0, [pc, #204]	; (8015e4c <tcp_write_checks+0xe8>)
 8015d80:	f005 fdd4 	bl	801b92c <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	7d1b      	ldrb	r3, [r3, #20]
 8015d88:	2b04      	cmp	r3, #4
 8015d8a:	d00e      	beq.n	8015daa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015d90:	2b07      	cmp	r3, #7
 8015d92:	d00a      	beq.n	8015daa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015d98:	2b02      	cmp	r3, #2
 8015d9a:	d006      	beq.n	8015daa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015da0:	2b03      	cmp	r3, #3
 8015da2:	d002      	beq.n	8015daa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015da4:	f06f 030a 	mvn.w	r3, #10
 8015da8:	e048      	b.n	8015e3c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015daa:	887b      	ldrh	r3, [r7, #2]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d101      	bne.n	8015db4 <tcp_write_checks+0x50>
    return ERR_OK;
 8015db0:	2300      	movs	r3, #0
 8015db2:	e043      	b.n	8015e3c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015dba:	887a      	ldrh	r2, [r7, #2]
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d909      	bls.n	8015dd4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	8b5b      	ldrh	r3, [r3, #26]
 8015dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dc8:	b29a      	uxth	r2, r3
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015dce:	f04f 33ff 	mov.w	r3, #4294967295
 8015dd2:	e033      	b.n	8015e3c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015dda:	2b08      	cmp	r3, #8
 8015ddc:	d909      	bls.n	8015df2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	8b5b      	ldrh	r3, [r3, #26]
 8015de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015de6:	b29a      	uxth	r2, r3
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015dec:	f04f 33ff 	mov.w	r3, #4294967295
 8015df0:	e024      	b.n	8015e3c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d00f      	beq.n	8015e1c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d11a      	bne.n	8015e3a <tcp_write_checks+0xd6>
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d116      	bne.n	8015e3a <tcp_write_checks+0xd6>
 8015e0c:	4b0d      	ldr	r3, [pc, #52]	; (8015e44 <tcp_write_checks+0xe0>)
 8015e0e:	f240 1255 	movw	r2, #341	; 0x155
 8015e12:	490f      	ldr	r1, [pc, #60]	; (8015e50 <tcp_write_checks+0xec>)
 8015e14:	480d      	ldr	r0, [pc, #52]	; (8015e4c <tcp_write_checks+0xe8>)
 8015e16:	f005 fd89 	bl	801b92c <printf>
 8015e1a:	e00e      	b.n	8015e3a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d103      	bne.n	8015e2c <tcp_write_checks+0xc8>
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d006      	beq.n	8015e3a <tcp_write_checks+0xd6>
 8015e2c:	4b05      	ldr	r3, [pc, #20]	; (8015e44 <tcp_write_checks+0xe0>)
 8015e2e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015e32:	4908      	ldr	r1, [pc, #32]	; (8015e54 <tcp_write_checks+0xf0>)
 8015e34:	4805      	ldr	r0, [pc, #20]	; (8015e4c <tcp_write_checks+0xe8>)
 8015e36:	f005 fd79 	bl	801b92c <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015e3a:	2300      	movs	r3, #0
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3708      	adds	r7, #8
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	08026cf4 	.word	0x08026cf4
 8015e48:	08026e04 	.word	0x08026e04
 8015e4c:	08026d48 	.word	0x08026d48
 8015e50:	08026e24 	.word	0x08026e24
 8015e54:	08026e60 	.word	0x08026e60

08015e58 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015e58:	b590      	push	{r4, r7, lr}
 8015e5a:	b09b      	sub	sp, #108	; 0x6c
 8015e5c:	af04      	add	r7, sp, #16
 8015e5e:	60f8      	str	r0, [r7, #12]
 8015e60:	60b9      	str	r1, [r7, #8]
 8015e62:	4611      	mov	r1, r2
 8015e64:	461a      	mov	r2, r3
 8015e66:	460b      	mov	r3, r1
 8015e68:	80fb      	strh	r3, [r7, #6]
 8015e6a:	4613      	mov	r3, r2
 8015e6c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015e72:	2300      	movs	r3, #0
 8015e74:	653b      	str	r3, [r7, #80]	; 0x50
 8015e76:	2300      	movs	r3, #0
 8015e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8015e7e:	2300      	movs	r3, #0
 8015e80:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015e82:	2300      	movs	r3, #0
 8015e84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015e92:	2300      	movs	r3, #0
 8015e94:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015e96:	2300      	movs	r3, #0
 8015e98:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d109      	bne.n	8015eb4 <tcp_write+0x5c>
 8015ea0:	4ba4      	ldr	r3, [pc, #656]	; (8016134 <tcp_write+0x2dc>)
 8015ea2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015ea6:	49a4      	ldr	r1, [pc, #656]	; (8016138 <tcp_write+0x2e0>)
 8015ea8:	48a4      	ldr	r0, [pc, #656]	; (801613c <tcp_write+0x2e4>)
 8015eaa:	f005 fd3f 	bl	801b92c <printf>
 8015eae:	f06f 030f 	mvn.w	r3, #15
 8015eb2:	e32a      	b.n	801650a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015eba:	085b      	lsrs	r3, r3, #1
 8015ebc:	b29a      	uxth	r2, r3
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ec2:	4293      	cmp	r3, r2
 8015ec4:	bf28      	it	cs
 8015ec6:	4613      	movcs	r3, r2
 8015ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d102      	bne.n	8015ed6 <tcp_write+0x7e>
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ed4:	e000      	b.n	8015ed8 <tcp_write+0x80>
 8015ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ed8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d109      	bne.n	8015ef4 <tcp_write+0x9c>
 8015ee0:	4b94      	ldr	r3, [pc, #592]	; (8016134 <tcp_write+0x2dc>)
 8015ee2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015ee6:	4996      	ldr	r1, [pc, #600]	; (8016140 <tcp_write+0x2e8>)
 8015ee8:	4894      	ldr	r0, [pc, #592]	; (801613c <tcp_write+0x2e4>)
 8015eea:	f005 fd1f 	bl	801b92c <printf>
 8015eee:	f06f 030f 	mvn.w	r3, #15
 8015ef2:	e30a      	b.n	801650a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015ef4:	88fb      	ldrh	r3, [r7, #6]
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	68f8      	ldr	r0, [r7, #12]
 8015efa:	f7ff ff33 	bl	8015d64 <tcp_write_checks>
 8015efe:	4603      	mov	r3, r0
 8015f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015f04:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d002      	beq.n	8015f12 <tcp_write+0xba>
    return err;
 8015f0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015f10:	e2fb      	b.n	801650a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	f000 80f6 	beq.w	8016118 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f30:	653b      	str	r3, [r7, #80]	; 0x50
 8015f32:	e002      	b.n	8015f3a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1f8      	bne.n	8015f34 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f44:	7a9b      	ldrb	r3, [r3, #10]
 8015f46:	009b      	lsls	r3, r3, #2
 8015f48:	b29b      	uxth	r3, r3
 8015f4a:	f003 0304 	and.w	r3, r3, #4
 8015f4e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015f50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f54:	891b      	ldrh	r3, [r3, #8]
 8015f56:	4619      	mov	r1, r3
 8015f58:	8c3b      	ldrh	r3, [r7, #32]
 8015f5a:	440b      	add	r3, r1
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	da06      	bge.n	8015f6e <tcp_write+0x116>
 8015f60:	4b74      	ldr	r3, [pc, #464]	; (8016134 <tcp_write+0x2dc>)
 8015f62:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015f66:	4977      	ldr	r1, [pc, #476]	; (8016144 <tcp_write+0x2ec>)
 8015f68:	4874      	ldr	r0, [pc, #464]	; (801613c <tcp_write+0x2e4>)
 8015f6a:	f005 fcdf 	bl	801b92c <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f70:	891a      	ldrh	r2, [r3, #8]
 8015f72:	8c3b      	ldrh	r3, [r7, #32]
 8015f74:	4413      	add	r3, r2
 8015f76:	b29b      	uxth	r3, r3
 8015f78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015f7a:	1ad3      	subs	r3, r2, r3
 8015f7c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015f84:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015f86:	8a7b      	ldrh	r3, [r7, #18]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d026      	beq.n	8015fda <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015f8c:	8a7b      	ldrh	r3, [r7, #18]
 8015f8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d206      	bcs.n	8015fa2 <tcp_write+0x14a>
 8015f94:	4b67      	ldr	r3, [pc, #412]	; (8016134 <tcp_write+0x2dc>)
 8015f96:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8015f9a:	496b      	ldr	r1, [pc, #428]	; (8016148 <tcp_write+0x2f0>)
 8015f9c:	4867      	ldr	r0, [pc, #412]	; (801613c <tcp_write+0x2e4>)
 8015f9e:	f005 fcc5 	bl	801b92c <printf>
      seg = last_unsent;
 8015fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015fa6:	8a7b      	ldrh	r3, [r7, #18]
 8015fa8:	88fa      	ldrh	r2, [r7, #6]
 8015faa:	4293      	cmp	r3, r2
 8015fac:	bf28      	it	cs
 8015fae:	4613      	movcs	r3, r2
 8015fb0:	b29b      	uxth	r3, r3
 8015fb2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015fb4:	4293      	cmp	r3, r2
 8015fb6:	bf28      	it	cs
 8015fb8:	4613      	movcs	r3, r2
 8015fba:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015fbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015fc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fc2:	4413      	add	r3, r2
 8015fc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015fc8:	8a7a      	ldrh	r2, [r7, #18]
 8015fca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fcc:	1ad3      	subs	r3, r2, r3
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015fd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015fd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fd6:	1ad3      	subs	r3, r2, r3
 8015fd8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015fda:	8a7b      	ldrh	r3, [r7, #18]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d00b      	beq.n	8015ff8 <tcp_write+0x1a0>
 8015fe0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015fe4:	88fb      	ldrh	r3, [r7, #6]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d006      	beq.n	8015ff8 <tcp_write+0x1a0>
 8015fea:	4b52      	ldr	r3, [pc, #328]	; (8016134 <tcp_write+0x2dc>)
 8015fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015ff0:	4956      	ldr	r1, [pc, #344]	; (801614c <tcp_write+0x2f4>)
 8015ff2:	4852      	ldr	r0, [pc, #328]	; (801613c <tcp_write+0x2e4>)
 8015ff4:	f005 fc9a 	bl	801b92c <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015ff8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ffc:	88fb      	ldrh	r3, [r7, #6]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	f080 8167 	bcs.w	80162d2 <tcp_write+0x47a>
 8016004:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016006:	2b00      	cmp	r3, #0
 8016008:	f000 8163 	beq.w	80162d2 <tcp_write+0x47a>
 801600c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801600e:	891b      	ldrh	r3, [r3, #8]
 8016010:	2b00      	cmp	r3, #0
 8016012:	f000 815e 	beq.w	80162d2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016016:	88fa      	ldrh	r2, [r7, #6]
 8016018:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801601c:	1ad2      	subs	r2, r2, r3
 801601e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016020:	4293      	cmp	r3, r2
 8016022:	bfa8      	it	ge
 8016024:	4613      	movge	r3, r2
 8016026:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801602a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801602c:	797b      	ldrb	r3, [r7, #5]
 801602e:	f003 0301 	and.w	r3, r3, #1
 8016032:	2b00      	cmp	r3, #0
 8016034:	d027      	beq.n	8016086 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016036:	f107 0012 	add.w	r0, r7, #18
 801603a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801603c:	8bf9      	ldrh	r1, [r7, #30]
 801603e:	2301      	movs	r3, #1
 8016040:	9302      	str	r3, [sp, #8]
 8016042:	797b      	ldrb	r3, [r7, #5]
 8016044:	9301      	str	r3, [sp, #4]
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	9300      	str	r3, [sp, #0]
 801604a:	4603      	mov	r3, r0
 801604c:	2000      	movs	r0, #0
 801604e:	f7ff fe0f 	bl	8015c70 <tcp_pbuf_prealloc>
 8016052:	6578      	str	r0, [r7, #84]	; 0x54
 8016054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016056:	2b00      	cmp	r3, #0
 8016058:	f000 8225 	beq.w	80164a6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801605c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801605e:	6858      	ldr	r0, [r3, #4]
 8016060:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	4413      	add	r3, r2
 8016068:	8bfa      	ldrh	r2, [r7, #30]
 801606a:	4619      	mov	r1, r3
 801606c:	f005 f9b0 	bl	801b3d0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016070:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016072:	f7fb f983 	bl	801137c <pbuf_clen>
 8016076:	4603      	mov	r3, r0
 8016078:	461a      	mov	r2, r3
 801607a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801607e:	4413      	add	r3, r2
 8016080:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016084:	e041      	b.n	801610a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	637b      	str	r3, [r7, #52]	; 0x34
 801608c:	e002      	b.n	8016094 <tcp_write+0x23c>
 801608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	637b      	str	r3, [r7, #52]	; 0x34
 8016094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d1f8      	bne.n	801608e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801609c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801609e:	7b1b      	ldrb	r3, [r3, #12]
 80160a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d115      	bne.n	80160d4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80160a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160ae:	8952      	ldrh	r2, [r2, #10]
 80160b0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80160b2:	68ba      	ldr	r2, [r7, #8]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d10d      	bne.n	80160d4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80160b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d006      	beq.n	80160ce <tcp_write+0x276>
 80160c0:	4b1c      	ldr	r3, [pc, #112]	; (8016134 <tcp_write+0x2dc>)
 80160c2:	f240 2231 	movw	r2, #561	; 0x231
 80160c6:	4922      	ldr	r1, [pc, #136]	; (8016150 <tcp_write+0x2f8>)
 80160c8:	481c      	ldr	r0, [pc, #112]	; (801613c <tcp_write+0x2e4>)
 80160ca:	f005 fc2f 	bl	801b92c <printf>
          extendlen = seglen;
 80160ce:	8bfb      	ldrh	r3, [r7, #30]
 80160d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80160d2:	e01a      	b.n	801610a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80160d4:	8bfb      	ldrh	r3, [r7, #30]
 80160d6:	2201      	movs	r2, #1
 80160d8:	4619      	mov	r1, r3
 80160da:	2000      	movs	r0, #0
 80160dc:	f7fa fddc 	bl	8010c98 <pbuf_alloc>
 80160e0:	6578      	str	r0, [r7, #84]	; 0x54
 80160e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	f000 81e0 	beq.w	80164aa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80160ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160ee:	68ba      	ldr	r2, [r7, #8]
 80160f0:	441a      	add	r2, r3
 80160f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160f4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80160f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80160f8:	f7fb f940 	bl	801137c <pbuf_clen>
 80160fc:	4603      	mov	r3, r0
 80160fe:	461a      	mov	r2, r3
 8016100:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016104:	4413      	add	r3, r2
 8016106:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801610a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801610e:	8bfb      	ldrh	r3, [r7, #30]
 8016110:	4413      	add	r3, r2
 8016112:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016116:	e0dc      	b.n	80162d2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801611e:	2b00      	cmp	r3, #0
 8016120:	f000 80d7 	beq.w	80162d2 <tcp_write+0x47a>
 8016124:	4b03      	ldr	r3, [pc, #12]	; (8016134 <tcp_write+0x2dc>)
 8016126:	f240 224a 	movw	r2, #586	; 0x24a
 801612a:	490a      	ldr	r1, [pc, #40]	; (8016154 <tcp_write+0x2fc>)
 801612c:	4803      	ldr	r0, [pc, #12]	; (801613c <tcp_write+0x2e4>)
 801612e:	f005 fbfd 	bl	801b92c <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016132:	e0ce      	b.n	80162d2 <tcp_write+0x47a>
 8016134:	08026cf4 	.word	0x08026cf4
 8016138:	08026e94 	.word	0x08026e94
 801613c:	08026d48 	.word	0x08026d48
 8016140:	08026eac 	.word	0x08026eac
 8016144:	08026ee0 	.word	0x08026ee0
 8016148:	08026ef8 	.word	0x08026ef8
 801614c:	08026f18 	.word	0x08026f18
 8016150:	08026f38 	.word	0x08026f38
 8016154:	08026f64 	.word	0x08026f64
    struct pbuf *p;
    u16_t left = len - pos;
 8016158:	88fa      	ldrh	r2, [r7, #6]
 801615a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801615e:	1ad3      	subs	r3, r2, r3
 8016160:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016162:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016166:	b29b      	uxth	r3, r3
 8016168:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801616e:	8b7a      	ldrh	r2, [r7, #26]
 8016170:	8bbb      	ldrh	r3, [r7, #28]
 8016172:	4293      	cmp	r3, r2
 8016174:	bf28      	it	cs
 8016176:	4613      	movcs	r3, r2
 8016178:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801617a:	797b      	ldrb	r3, [r7, #5]
 801617c:	f003 0301 	and.w	r3, r3, #1
 8016180:	2b00      	cmp	r3, #0
 8016182:	d036      	beq.n	80161f2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016184:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016188:	b29a      	uxth	r2, r3
 801618a:	8b3b      	ldrh	r3, [r7, #24]
 801618c:	4413      	add	r3, r2
 801618e:	b299      	uxth	r1, r3
 8016190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016192:	2b00      	cmp	r3, #0
 8016194:	bf0c      	ite	eq
 8016196:	2301      	moveq	r3, #1
 8016198:	2300      	movne	r3, #0
 801619a:	b2db      	uxtb	r3, r3
 801619c:	f107 0012 	add.w	r0, r7, #18
 80161a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80161a2:	9302      	str	r3, [sp, #8]
 80161a4:	797b      	ldrb	r3, [r7, #5]
 80161a6:	9301      	str	r3, [sp, #4]
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	9300      	str	r3, [sp, #0]
 80161ac:	4603      	mov	r3, r0
 80161ae:	2036      	movs	r0, #54	; 0x36
 80161b0:	f7ff fd5e 	bl	8015c70 <tcp_pbuf_prealloc>
 80161b4:	6338      	str	r0, [r7, #48]	; 0x30
 80161b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	f000 8178 	beq.w	80164ae <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80161be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c0:	895b      	ldrh	r3, [r3, #10]
 80161c2:	8b3a      	ldrh	r2, [r7, #24]
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d906      	bls.n	80161d6 <tcp_write+0x37e>
 80161c8:	4b8c      	ldr	r3, [pc, #560]	; (80163fc <tcp_write+0x5a4>)
 80161ca:	f240 2266 	movw	r2, #614	; 0x266
 80161ce:	498c      	ldr	r1, [pc, #560]	; (8016400 <tcp_write+0x5a8>)
 80161d0:	488c      	ldr	r0, [pc, #560]	; (8016404 <tcp_write+0x5ac>)
 80161d2:	f005 fbab 	bl	801b92c <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80161d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d8:	685a      	ldr	r2, [r3, #4]
 80161da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80161de:	18d0      	adds	r0, r2, r3
 80161e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161e4:	68ba      	ldr	r2, [r7, #8]
 80161e6:	4413      	add	r3, r2
 80161e8:	8b3a      	ldrh	r2, [r7, #24]
 80161ea:	4619      	mov	r1, r3
 80161ec:	f005 f8f0 	bl	801b3d0 <memcpy>
 80161f0:	e02f      	b.n	8016252 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80161f2:	8a7b      	ldrh	r3, [r7, #18]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d006      	beq.n	8016206 <tcp_write+0x3ae>
 80161f8:	4b80      	ldr	r3, [pc, #512]	; (80163fc <tcp_write+0x5a4>)
 80161fa:	f240 2271 	movw	r2, #625	; 0x271
 80161fe:	4982      	ldr	r1, [pc, #520]	; (8016408 <tcp_write+0x5b0>)
 8016200:	4880      	ldr	r0, [pc, #512]	; (8016404 <tcp_write+0x5ac>)
 8016202:	f005 fb93 	bl	801b92c <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016206:	8b3b      	ldrh	r3, [r7, #24]
 8016208:	2201      	movs	r2, #1
 801620a:	4619      	mov	r1, r3
 801620c:	2036      	movs	r0, #54	; 0x36
 801620e:	f7fa fd43 	bl	8010c98 <pbuf_alloc>
 8016212:	6178      	str	r0, [r7, #20]
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	2b00      	cmp	r3, #0
 8016218:	f000 814b 	beq.w	80164b2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801621c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016220:	68ba      	ldr	r2, [r7, #8]
 8016222:	441a      	add	r2, r3
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016228:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801622c:	b29b      	uxth	r3, r3
 801622e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016232:	4619      	mov	r1, r3
 8016234:	2036      	movs	r0, #54	; 0x36
 8016236:	f7fa fd2f 	bl	8010c98 <pbuf_alloc>
 801623a:	6338      	str	r0, [r7, #48]	; 0x30
 801623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623e:	2b00      	cmp	r3, #0
 8016240:	d103      	bne.n	801624a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016242:	6978      	ldr	r0, [r7, #20]
 8016244:	f7fb f80c 	bl	8011260 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016248:	e136      	b.n	80164b8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801624a:	6979      	ldr	r1, [r7, #20]
 801624c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801624e:	f7fb f8d5 	bl	80113fc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016254:	f7fb f892 	bl	801137c <pbuf_clen>
 8016258:	4603      	mov	r3, r0
 801625a:	461a      	mov	r2, r3
 801625c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016260:	4413      	add	r3, r2
 8016262:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801626a:	2b09      	cmp	r3, #9
 801626c:	d903      	bls.n	8016276 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801626e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016270:	f7fa fff6 	bl	8011260 <pbuf_free>
      goto memerr;
 8016274:	e120      	b.n	80164b8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801627a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801627e:	441a      	add	r2, r3
 8016280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016284:	9300      	str	r3, [sp, #0]
 8016286:	4613      	mov	r3, r2
 8016288:	2200      	movs	r2, #0
 801628a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f7ff fc51 	bl	8015b34 <tcp_create_segment>
 8016292:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016296:	2b00      	cmp	r3, #0
 8016298:	f000 810d 	beq.w	80164b6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801629c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d102      	bne.n	80162a8 <tcp_write+0x450>
      queue = seg;
 80162a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162a4:	647b      	str	r3, [r7, #68]	; 0x44
 80162a6:	e00c      	b.n	80162c2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80162a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d106      	bne.n	80162bc <tcp_write+0x464>
 80162ae:	4b53      	ldr	r3, [pc, #332]	; (80163fc <tcp_write+0x5a4>)
 80162b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80162b4:	4955      	ldr	r1, [pc, #340]	; (801640c <tcp_write+0x5b4>)
 80162b6:	4853      	ldr	r0, [pc, #332]	; (8016404 <tcp_write+0x5ac>)
 80162b8:	f005 fb38 	bl	801b92c <printf>
      prev_seg->next = seg;
 80162bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80162c0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80162c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162c4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80162c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162ca:	8b3b      	ldrh	r3, [r7, #24]
 80162cc:	4413      	add	r3, r2
 80162ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80162d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162d6:	88fb      	ldrh	r3, [r7, #6]
 80162d8:	429a      	cmp	r2, r3
 80162da:	f4ff af3d 	bcc.w	8016158 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80162de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d02c      	beq.n	801633e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80162e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162ea:	e01e      	b.n	801632a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80162ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ee:	891a      	ldrh	r2, [r3, #8]
 80162f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162f2:	4413      	add	r3, r2
 80162f4:	b29a      	uxth	r2, r3
 80162f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80162fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d110      	bne.n	8016324 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016308:	8952      	ldrh	r2, [r2, #10]
 801630a:	4413      	add	r3, r2
 801630c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801630e:	68b9      	ldr	r1, [r7, #8]
 8016310:	4618      	mov	r0, r3
 8016312:	f005 f85d 	bl	801b3d0 <memcpy>
        p->len += oversize_used;
 8016316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016318:	895a      	ldrh	r2, [r3, #10]
 801631a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801631c:	4413      	add	r3, r2
 801631e:	b29a      	uxth	r2, r3
 8016320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016322:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	62fb      	str	r3, [r7, #44]	; 0x2c
 801632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632c:	2b00      	cmp	r3, #0
 801632e:	d1dd      	bne.n	80162ec <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016332:	891a      	ldrh	r2, [r3, #8]
 8016334:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016336:	4413      	add	r3, r2
 8016338:	b29a      	uxth	r2, r3
 801633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801633c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801633e:	8a7a      	ldrh	r2, [r7, #18]
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016348:	2b00      	cmp	r3, #0
 801634a:	d018      	beq.n	801637e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801634c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801634e:	2b00      	cmp	r3, #0
 8016350:	d106      	bne.n	8016360 <tcp_write+0x508>
 8016352:	4b2a      	ldr	r3, [pc, #168]	; (80163fc <tcp_write+0x5a4>)
 8016354:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016358:	492d      	ldr	r1, [pc, #180]	; (8016410 <tcp_write+0x5b8>)
 801635a:	482a      	ldr	r0, [pc, #168]	; (8016404 <tcp_write+0x5ac>)
 801635c:	f005 fae6 	bl	801b92c <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016366:	4618      	mov	r0, r3
 8016368:	f7fb f848 	bl	80113fc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801636c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801636e:	891a      	ldrh	r2, [r3, #8]
 8016370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016372:	891b      	ldrh	r3, [r3, #8]
 8016374:	4413      	add	r3, r2
 8016376:	b29a      	uxth	r2, r3
 8016378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801637a:	811a      	strh	r2, [r3, #8]
 801637c:	e037      	b.n	80163ee <tcp_write+0x596>
  } else if (extendlen > 0) {
 801637e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016380:	2b00      	cmp	r3, #0
 8016382:	d034      	beq.n	80163ee <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016386:	2b00      	cmp	r3, #0
 8016388:	d003      	beq.n	8016392 <tcp_write+0x53a>
 801638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d106      	bne.n	80163a0 <tcp_write+0x548>
 8016392:	4b1a      	ldr	r3, [pc, #104]	; (80163fc <tcp_write+0x5a4>)
 8016394:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016398:	491e      	ldr	r1, [pc, #120]	; (8016414 <tcp_write+0x5bc>)
 801639a:	481a      	ldr	r0, [pc, #104]	; (8016404 <tcp_write+0x5ac>)
 801639c:	f005 fac6 	bl	801b92c <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80163a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80163a6:	e009      	b.n	80163bc <tcp_write+0x564>
      p->tot_len += extendlen;
 80163a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163aa:	891a      	ldrh	r2, [r3, #8]
 80163ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163ae:	4413      	add	r3, r2
 80163b0:	b29a      	uxth	r2, r3
 80163b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80163b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80163bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d1f1      	bne.n	80163a8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80163c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c6:	891a      	ldrh	r2, [r3, #8]
 80163c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163ca:	4413      	add	r3, r2
 80163cc:	b29a      	uxth	r2, r3
 80163ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80163d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d4:	895a      	ldrh	r2, [r3, #10]
 80163d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163d8:	4413      	add	r3, r2
 80163da:	b29a      	uxth	r2, r3
 80163dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163de:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80163e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163e2:	891a      	ldrh	r2, [r3, #8]
 80163e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163e6:	4413      	add	r3, r2
 80163e8:	b29a      	uxth	r2, r3
 80163ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163ec:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80163ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d111      	bne.n	8016418 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80163f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80163fa:	e010      	b.n	801641e <tcp_write+0x5c6>
 80163fc:	08026cf4 	.word	0x08026cf4
 8016400:	08026f94 	.word	0x08026f94
 8016404:	08026d48 	.word	0x08026d48
 8016408:	08026fd4 	.word	0x08026fd4
 801640c:	08026fe4 	.word	0x08026fe4
 8016410:	08026ff8 	.word	0x08026ff8
 8016414:	08027030 	.word	0x08027030
  } else {
    last_unsent->next = queue;
 8016418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801641a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801641c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016422:	88fb      	ldrh	r3, [r7, #6]
 8016424:	441a      	add	r2, r3
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016430:	88fb      	ldrh	r3, [r7, #6]
 8016432:	1ad3      	subs	r3, r2, r3
 8016434:	b29a      	uxth	r2, r3
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016442:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801644c:	2b00      	cmp	r3, #0
 801644e:	d00e      	beq.n	801646e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016454:	2b00      	cmp	r3, #0
 8016456:	d10a      	bne.n	801646e <tcp_write+0x616>
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801645c:	2b00      	cmp	r3, #0
 801645e:	d106      	bne.n	801646e <tcp_write+0x616>
 8016460:	4b2c      	ldr	r3, [pc, #176]	; (8016514 <tcp_write+0x6bc>)
 8016462:	f240 3212 	movw	r2, #786	; 0x312
 8016466:	492c      	ldr	r1, [pc, #176]	; (8016518 <tcp_write+0x6c0>)
 8016468:	482c      	ldr	r0, [pc, #176]	; (801651c <tcp_write+0x6c4>)
 801646a:	f005 fa5f 	bl	801b92c <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801646e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016470:	2b00      	cmp	r3, #0
 8016472:	d016      	beq.n	80164a2 <tcp_write+0x64a>
 8016474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016476:	68db      	ldr	r3, [r3, #12]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d012      	beq.n	80164a2 <tcp_write+0x64a>
 801647c:	797b      	ldrb	r3, [r7, #5]
 801647e:	f003 0302 	and.w	r3, r3, #2
 8016482:	2b00      	cmp	r3, #0
 8016484:	d10d      	bne.n	80164a2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016488:	68db      	ldr	r3, [r3, #12]
 801648a:	899b      	ldrh	r3, [r3, #12]
 801648c:	b29c      	uxth	r4, r3
 801648e:	2008      	movs	r0, #8
 8016490:	f7f9 fb2a 	bl	800fae8 <lwip_htons>
 8016494:	4603      	mov	r3, r0
 8016496:	461a      	mov	r2, r3
 8016498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801649a:	68db      	ldr	r3, [r3, #12]
 801649c:	4322      	orrs	r2, r4
 801649e:	b292      	uxth	r2, r2
 80164a0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80164a2:	2300      	movs	r3, #0
 80164a4:	e031      	b.n	801650a <tcp_write+0x6b2>
          goto memerr;
 80164a6:	bf00      	nop
 80164a8:	e006      	b.n	80164b8 <tcp_write+0x660>
            goto memerr;
 80164aa:	bf00      	nop
 80164ac:	e004      	b.n	80164b8 <tcp_write+0x660>
        goto memerr;
 80164ae:	bf00      	nop
 80164b0:	e002      	b.n	80164b8 <tcp_write+0x660>
        goto memerr;
 80164b2:	bf00      	nop
 80164b4:	e000      	b.n	80164b8 <tcp_write+0x660>
      goto memerr;
 80164b6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	8b5b      	ldrh	r3, [r3, #26]
 80164bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164c0:	b29a      	uxth	r2, r3
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80164c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d002      	beq.n	80164d2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80164cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80164ce:	f7fa fec7 	bl	8011260 <pbuf_free>
  }
  if (queue != NULL) {
 80164d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d002      	beq.n	80164de <tcp_write+0x686>
    tcp_segs_free(queue);
 80164d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80164da:	f7fc fb51 	bl	8012b80 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d00e      	beq.n	8016506 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d10a      	bne.n	8016506 <tcp_write+0x6ae>
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d106      	bne.n	8016506 <tcp_write+0x6ae>
 80164f8:	4b06      	ldr	r3, [pc, #24]	; (8016514 <tcp_write+0x6bc>)
 80164fa:	f240 3227 	movw	r2, #807	; 0x327
 80164fe:	4906      	ldr	r1, [pc, #24]	; (8016518 <tcp_write+0x6c0>)
 8016500:	4806      	ldr	r0, [pc, #24]	; (801651c <tcp_write+0x6c4>)
 8016502:	f005 fa13 	bl	801b92c <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8016506:	f04f 33ff 	mov.w	r3, #4294967295
}
 801650a:	4618      	mov	r0, r3
 801650c:	375c      	adds	r7, #92	; 0x5c
 801650e:	46bd      	mov	sp, r7
 8016510:	bd90      	pop	{r4, r7, pc}
 8016512:	bf00      	nop
 8016514:	08026cf4 	.word	0x08026cf4
 8016518:	08027068 	.word	0x08027068
 801651c:	08026d48 	.word	0x08026d48

08016520 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016520:	b590      	push	{r4, r7, lr}
 8016522:	b08b      	sub	sp, #44	; 0x2c
 8016524:	af02      	add	r7, sp, #8
 8016526:	6078      	str	r0, [r7, #4]
 8016528:	460b      	mov	r3, r1
 801652a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801652c:	2300      	movs	r3, #0
 801652e:	61fb      	str	r3, [r7, #28]
 8016530:	2300      	movs	r3, #0
 8016532:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016534:	2300      	movs	r3, #0
 8016536:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d106      	bne.n	801654c <tcp_split_unsent_seg+0x2c>
 801653e:	4b95      	ldr	r3, [pc, #596]	; (8016794 <tcp_split_unsent_seg+0x274>)
 8016540:	f240 324b 	movw	r2, #843	; 0x34b
 8016544:	4994      	ldr	r1, [pc, #592]	; (8016798 <tcp_split_unsent_seg+0x278>)
 8016546:	4895      	ldr	r0, [pc, #596]	; (801679c <tcp_split_unsent_seg+0x27c>)
 8016548:	f005 f9f0 	bl	801b92c <printf>

  useg = pcb->unsent;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016550:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d102      	bne.n	801655e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016558:	f04f 33ff 	mov.w	r3, #4294967295
 801655c:	e116      	b.n	801678c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801655e:	887b      	ldrh	r3, [r7, #2]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d109      	bne.n	8016578 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016564:	4b8b      	ldr	r3, [pc, #556]	; (8016794 <tcp_split_unsent_seg+0x274>)
 8016566:	f240 3253 	movw	r2, #851	; 0x353
 801656a:	498d      	ldr	r1, [pc, #564]	; (80167a0 <tcp_split_unsent_seg+0x280>)
 801656c:	488b      	ldr	r0, [pc, #556]	; (801679c <tcp_split_unsent_seg+0x27c>)
 801656e:	f005 f9dd 	bl	801b92c <printf>
    return ERR_VAL;
 8016572:	f06f 0305 	mvn.w	r3, #5
 8016576:	e109      	b.n	801678c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	891b      	ldrh	r3, [r3, #8]
 801657c:	887a      	ldrh	r2, [r7, #2]
 801657e:	429a      	cmp	r2, r3
 8016580:	d301      	bcc.n	8016586 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016582:	2300      	movs	r3, #0
 8016584:	e102      	b.n	801678c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801658a:	887a      	ldrh	r2, [r7, #2]
 801658c:	429a      	cmp	r2, r3
 801658e:	d906      	bls.n	801659e <tcp_split_unsent_seg+0x7e>
 8016590:	4b80      	ldr	r3, [pc, #512]	; (8016794 <tcp_split_unsent_seg+0x274>)
 8016592:	f240 325b 	movw	r2, #859	; 0x35b
 8016596:	4983      	ldr	r1, [pc, #524]	; (80167a4 <tcp_split_unsent_seg+0x284>)
 8016598:	4880      	ldr	r0, [pc, #512]	; (801679c <tcp_split_unsent_seg+0x27c>)
 801659a:	f005 f9c7 	bl	801b92c <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	891b      	ldrh	r3, [r3, #8]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d106      	bne.n	80165b4 <tcp_split_unsent_seg+0x94>
 80165a6:	4b7b      	ldr	r3, [pc, #492]	; (8016794 <tcp_split_unsent_seg+0x274>)
 80165a8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80165ac:	497e      	ldr	r1, [pc, #504]	; (80167a8 <tcp_split_unsent_seg+0x288>)
 80165ae:	487b      	ldr	r0, [pc, #492]	; (801679c <tcp_split_unsent_seg+0x27c>)
 80165b0:	f005 f9bc 	bl	801b92c <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	7a9b      	ldrb	r3, [r3, #10]
 80165b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80165ba:	7bfb      	ldrb	r3, [r7, #15]
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	f003 0304 	and.w	r3, r3, #4
 80165c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	891a      	ldrh	r2, [r3, #8]
 80165ca:	887b      	ldrh	r3, [r7, #2]
 80165cc:	1ad3      	subs	r3, r2, r3
 80165ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80165d0:	7bbb      	ldrb	r3, [r7, #14]
 80165d2:	b29a      	uxth	r2, r3
 80165d4:	89bb      	ldrh	r3, [r7, #12]
 80165d6:	4413      	add	r3, r2
 80165d8:	b29b      	uxth	r3, r3
 80165da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165de:	4619      	mov	r1, r3
 80165e0:	2036      	movs	r0, #54	; 0x36
 80165e2:	f7fa fb59 	bl	8010c98 <pbuf_alloc>
 80165e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	f000 80b7 	beq.w	801675e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	685b      	ldr	r3, [r3, #4]
 80165f4:	891a      	ldrh	r2, [r3, #8]
 80165f6:	697b      	ldr	r3, [r7, #20]
 80165f8:	891b      	ldrh	r3, [r3, #8]
 80165fa:	1ad3      	subs	r3, r2, r3
 80165fc:	b29a      	uxth	r2, r3
 80165fe:	887b      	ldrh	r3, [r7, #2]
 8016600:	4413      	add	r3, r2
 8016602:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016604:	697b      	ldr	r3, [r7, #20]
 8016606:	6858      	ldr	r0, [r3, #4]
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	685a      	ldr	r2, [r3, #4]
 801660c:	7bbb      	ldrb	r3, [r7, #14]
 801660e:	18d1      	adds	r1, r2, r3
 8016610:	897b      	ldrh	r3, [r7, #10]
 8016612:	89ba      	ldrh	r2, [r7, #12]
 8016614:	f7fb f82a 	bl	801166c <pbuf_copy_partial>
 8016618:	4603      	mov	r3, r0
 801661a:	461a      	mov	r2, r3
 801661c:	89bb      	ldrh	r3, [r7, #12]
 801661e:	4293      	cmp	r3, r2
 8016620:	f040 809f 	bne.w	8016762 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	68db      	ldr	r3, [r3, #12]
 8016628:	899b      	ldrh	r3, [r3, #12]
 801662a:	b29b      	uxth	r3, r3
 801662c:	4618      	mov	r0, r3
 801662e:	f7f9 fa5b 	bl	800fae8 <lwip_htons>
 8016632:	4603      	mov	r3, r0
 8016634:	b2db      	uxtb	r3, r3
 8016636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801663a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801663c:	2300      	movs	r3, #0
 801663e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016640:	7efb      	ldrb	r3, [r7, #27]
 8016642:	f003 0308 	and.w	r3, r3, #8
 8016646:	2b00      	cmp	r3, #0
 8016648:	d007      	beq.n	801665a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801664a:	7efb      	ldrb	r3, [r7, #27]
 801664c:	f023 0308 	bic.w	r3, r3, #8
 8016650:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016652:	7ebb      	ldrb	r3, [r7, #26]
 8016654:	f043 0308 	orr.w	r3, r3, #8
 8016658:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801665a:	7efb      	ldrb	r3, [r7, #27]
 801665c:	f003 0301 	and.w	r3, r3, #1
 8016660:	2b00      	cmp	r3, #0
 8016662:	d007      	beq.n	8016674 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016664:	7efb      	ldrb	r3, [r7, #27]
 8016666:	f023 0301 	bic.w	r3, r3, #1
 801666a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801666c:	7ebb      	ldrb	r3, [r7, #26]
 801666e:	f043 0301 	orr.w	r3, r3, #1
 8016672:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	68db      	ldr	r3, [r3, #12]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	4618      	mov	r0, r3
 801667c:	f7f9 fa49 	bl	800fb12 <lwip_htonl>
 8016680:	4602      	mov	r2, r0
 8016682:	887b      	ldrh	r3, [r7, #2]
 8016684:	18d1      	adds	r1, r2, r3
 8016686:	7eba      	ldrb	r2, [r7, #26]
 8016688:	7bfb      	ldrb	r3, [r7, #15]
 801668a:	9300      	str	r3, [sp, #0]
 801668c:	460b      	mov	r3, r1
 801668e:	6939      	ldr	r1, [r7, #16]
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f7ff fa4f 	bl	8015b34 <tcp_create_segment>
 8016696:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016698:	69fb      	ldr	r3, [r7, #28]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d063      	beq.n	8016766 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7fa fe6a 	bl	801137c <pbuf_clen>
 80166a8:	4603      	mov	r3, r0
 80166aa:	461a      	mov	r2, r3
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166b2:	1a9b      	subs	r3, r3, r2
 80166b4:	b29a      	uxth	r2, r3
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	6858      	ldr	r0, [r3, #4]
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	891a      	ldrh	r2, [r3, #8]
 80166c6:	89bb      	ldrh	r3, [r7, #12]
 80166c8:	1ad3      	subs	r3, r2, r3
 80166ca:	b29b      	uxth	r3, r3
 80166cc:	4619      	mov	r1, r3
 80166ce:	f7fa fc41 	bl	8010f54 <pbuf_realloc>
  useg->len -= remainder;
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	891a      	ldrh	r2, [r3, #8]
 80166d6:	89bb      	ldrh	r3, [r7, #12]
 80166d8:	1ad3      	subs	r3, r2, r3
 80166da:	b29a      	uxth	r2, r3
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80166e0:	697b      	ldr	r3, [r7, #20]
 80166e2:	68db      	ldr	r3, [r3, #12]
 80166e4:	899b      	ldrh	r3, [r3, #12]
 80166e6:	b29c      	uxth	r4, r3
 80166e8:	7efb      	ldrb	r3, [r7, #27]
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7f9 f9fb 	bl	800fae8 <lwip_htons>
 80166f2:	4603      	mov	r3, r0
 80166f4:	461a      	mov	r2, r3
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	68db      	ldr	r3, [r3, #12]
 80166fa:	4322      	orrs	r2, r4
 80166fc:	b292      	uxth	r2, r2
 80166fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	685b      	ldr	r3, [r3, #4]
 8016704:	4618      	mov	r0, r3
 8016706:	f7fa fe39 	bl	801137c <pbuf_clen>
 801670a:	4603      	mov	r3, r0
 801670c:	461a      	mov	r2, r3
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016714:	4413      	add	r3, r2
 8016716:	b29a      	uxth	r2, r3
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801671e:	69fb      	ldr	r3, [r7, #28]
 8016720:	685b      	ldr	r3, [r3, #4]
 8016722:	4618      	mov	r0, r3
 8016724:	f7fa fe2a 	bl	801137c <pbuf_clen>
 8016728:	4603      	mov	r3, r0
 801672a:	461a      	mov	r2, r3
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016732:	4413      	add	r3, r2
 8016734:	b29a      	uxth	r2, r3
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	681a      	ldr	r2, [r3, #0]
 8016740:	69fb      	ldr	r3, [r7, #28]
 8016742:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016744:	697b      	ldr	r3, [r7, #20]
 8016746:	69fa      	ldr	r2, [r7, #28]
 8016748:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801674a:	69fb      	ldr	r3, [r7, #28]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d103      	bne.n	801675a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	2200      	movs	r2, #0
 8016756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801675a:	2300      	movs	r3, #0
 801675c:	e016      	b.n	801678c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801675e:	bf00      	nop
 8016760:	e002      	b.n	8016768 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016762:	bf00      	nop
 8016764:	e000      	b.n	8016768 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016766:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d006      	beq.n	801677c <tcp_split_unsent_seg+0x25c>
 801676e:	4b09      	ldr	r3, [pc, #36]	; (8016794 <tcp_split_unsent_seg+0x274>)
 8016770:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016774:	490d      	ldr	r1, [pc, #52]	; (80167ac <tcp_split_unsent_seg+0x28c>)
 8016776:	4809      	ldr	r0, [pc, #36]	; (801679c <tcp_split_unsent_seg+0x27c>)
 8016778:	f005 f8d8 	bl	801b92c <printf>
  if (p != NULL) {
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d002      	beq.n	8016788 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016782:	6938      	ldr	r0, [r7, #16]
 8016784:	f7fa fd6c 	bl	8011260 <pbuf_free>
  }

  return ERR_MEM;
 8016788:	f04f 33ff 	mov.w	r3, #4294967295
}
 801678c:	4618      	mov	r0, r3
 801678e:	3724      	adds	r7, #36	; 0x24
 8016790:	46bd      	mov	sp, r7
 8016792:	bd90      	pop	{r4, r7, pc}
 8016794:	08026cf4 	.word	0x08026cf4
 8016798:	08027088 	.word	0x08027088
 801679c:	08026d48 	.word	0x08026d48
 80167a0:	080270ac 	.word	0x080270ac
 80167a4:	080270d0 	.word	0x080270d0
 80167a8:	080270e0 	.word	0x080270e0
 80167ac:	080270f0 	.word	0x080270f0

080167b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80167b0:	b590      	push	{r4, r7, lr}
 80167b2:	b085      	sub	sp, #20
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d106      	bne.n	80167cc <tcp_send_fin+0x1c>
 80167be:	4b21      	ldr	r3, [pc, #132]	; (8016844 <tcp_send_fin+0x94>)
 80167c0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80167c4:	4920      	ldr	r1, [pc, #128]	; (8016848 <tcp_send_fin+0x98>)
 80167c6:	4821      	ldr	r0, [pc, #132]	; (801684c <tcp_send_fin+0x9c>)
 80167c8:	f005 f8b0 	bl	801b92c <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d02e      	beq.n	8016832 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167d8:	60fb      	str	r3, [r7, #12]
 80167da:	e002      	b.n	80167e2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d1f8      	bne.n	80167dc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	68db      	ldr	r3, [r3, #12]
 80167ee:	899b      	ldrh	r3, [r3, #12]
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	4618      	mov	r0, r3
 80167f4:	f7f9 f978 	bl	800fae8 <lwip_htons>
 80167f8:	4603      	mov	r3, r0
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	f003 0307 	and.w	r3, r3, #7
 8016800:	2b00      	cmp	r3, #0
 8016802:	d116      	bne.n	8016832 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	68db      	ldr	r3, [r3, #12]
 8016808:	899b      	ldrh	r3, [r3, #12]
 801680a:	b29c      	uxth	r4, r3
 801680c:	2001      	movs	r0, #1
 801680e:	f7f9 f96b 	bl	800fae8 <lwip_htons>
 8016812:	4603      	mov	r3, r0
 8016814:	461a      	mov	r2, r3
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	68db      	ldr	r3, [r3, #12]
 801681a:	4322      	orrs	r2, r4
 801681c:	b292      	uxth	r2, r2
 801681e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	8b5b      	ldrh	r3, [r3, #26]
 8016824:	f043 0320 	orr.w	r3, r3, #32
 8016828:	b29a      	uxth	r2, r3
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801682e:	2300      	movs	r3, #0
 8016830:	e004      	b.n	801683c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016832:	2101      	movs	r1, #1
 8016834:	6878      	ldr	r0, [r7, #4]
 8016836:	f000 f80b 	bl	8016850 <tcp_enqueue_flags>
 801683a:	4603      	mov	r3, r0
}
 801683c:	4618      	mov	r0, r3
 801683e:	3714      	adds	r7, #20
 8016840:	46bd      	mov	sp, r7
 8016842:	bd90      	pop	{r4, r7, pc}
 8016844:	08026cf4 	.word	0x08026cf4
 8016848:	080270fc 	.word	0x080270fc
 801684c:	08026d48 	.word	0x08026d48

08016850 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08a      	sub	sp, #40	; 0x28
 8016854:	af02      	add	r7, sp, #8
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	460b      	mov	r3, r1
 801685a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801685c:	2300      	movs	r3, #0
 801685e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016860:	2300      	movs	r3, #0
 8016862:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016864:	78fb      	ldrb	r3, [r7, #3]
 8016866:	f003 0303 	and.w	r3, r3, #3
 801686a:	2b00      	cmp	r3, #0
 801686c:	d106      	bne.n	801687c <tcp_enqueue_flags+0x2c>
 801686e:	4b67      	ldr	r3, [pc, #412]	; (8016a0c <tcp_enqueue_flags+0x1bc>)
 8016870:	f240 4211 	movw	r2, #1041	; 0x411
 8016874:	4966      	ldr	r1, [pc, #408]	; (8016a10 <tcp_enqueue_flags+0x1c0>)
 8016876:	4867      	ldr	r0, [pc, #412]	; (8016a14 <tcp_enqueue_flags+0x1c4>)
 8016878:	f005 f858 	bl	801b92c <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d106      	bne.n	8016890 <tcp_enqueue_flags+0x40>
 8016882:	4b62      	ldr	r3, [pc, #392]	; (8016a0c <tcp_enqueue_flags+0x1bc>)
 8016884:	f240 4213 	movw	r2, #1043	; 0x413
 8016888:	4963      	ldr	r1, [pc, #396]	; (8016a18 <tcp_enqueue_flags+0x1c8>)
 801688a:	4862      	ldr	r0, [pc, #392]	; (8016a14 <tcp_enqueue_flags+0x1c4>)
 801688c:	f005 f84e 	bl	801b92c <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016890:	78fb      	ldrb	r3, [r7, #3]
 8016892:	f003 0302 	and.w	r3, r3, #2
 8016896:	2b00      	cmp	r3, #0
 8016898:	d001      	beq.n	801689e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801689a:	2301      	movs	r3, #1
 801689c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801689e:	7ffb      	ldrb	r3, [r7, #31]
 80168a0:	009b      	lsls	r3, r3, #2
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	f003 0304 	and.w	r3, r3, #4
 80168a8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80168aa:	7dfb      	ldrb	r3, [r7, #23]
 80168ac:	b29b      	uxth	r3, r3
 80168ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80168b2:	4619      	mov	r1, r3
 80168b4:	2036      	movs	r0, #54	; 0x36
 80168b6:	f7fa f9ef 	bl	8010c98 <pbuf_alloc>
 80168ba:	6138      	str	r0, [r7, #16]
 80168bc:	693b      	ldr	r3, [r7, #16]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d109      	bne.n	80168d6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	8b5b      	ldrh	r3, [r3, #26]
 80168c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168ca:	b29a      	uxth	r2, r3
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80168d0:	f04f 33ff 	mov.w	r3, #4294967295
 80168d4:	e095      	b.n	8016a02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80168d6:	693b      	ldr	r3, [r7, #16]
 80168d8:	895a      	ldrh	r2, [r3, #10]
 80168da:	7dfb      	ldrb	r3, [r7, #23]
 80168dc:	b29b      	uxth	r3, r3
 80168de:	429a      	cmp	r2, r3
 80168e0:	d206      	bcs.n	80168f0 <tcp_enqueue_flags+0xa0>
 80168e2:	4b4a      	ldr	r3, [pc, #296]	; (8016a0c <tcp_enqueue_flags+0x1bc>)
 80168e4:	f240 4239 	movw	r2, #1081	; 0x439
 80168e8:	494c      	ldr	r1, [pc, #304]	; (8016a1c <tcp_enqueue_flags+0x1cc>)
 80168ea:	484a      	ldr	r0, [pc, #296]	; (8016a14 <tcp_enqueue_flags+0x1c4>)
 80168ec:	f005 f81e 	bl	801b92c <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80168f4:	78fa      	ldrb	r2, [r7, #3]
 80168f6:	7ffb      	ldrb	r3, [r7, #31]
 80168f8:	9300      	str	r3, [sp, #0]
 80168fa:	460b      	mov	r3, r1
 80168fc:	6939      	ldr	r1, [r7, #16]
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f7ff f918 	bl	8015b34 <tcp_create_segment>
 8016904:	60f8      	str	r0, [r7, #12]
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d109      	bne.n	8016920 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	8b5b      	ldrh	r3, [r3, #26]
 8016910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016914:	b29a      	uxth	r2, r3
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801691a:	f04f 33ff 	mov.w	r3, #4294967295
 801691e:	e070      	b.n	8016a02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	68db      	ldr	r3, [r3, #12]
 8016924:	f003 0303 	and.w	r3, r3, #3
 8016928:	2b00      	cmp	r3, #0
 801692a:	d006      	beq.n	801693a <tcp_enqueue_flags+0xea>
 801692c:	4b37      	ldr	r3, [pc, #220]	; (8016a0c <tcp_enqueue_flags+0x1bc>)
 801692e:	f240 4242 	movw	r2, #1090	; 0x442
 8016932:	493b      	ldr	r1, [pc, #236]	; (8016a20 <tcp_enqueue_flags+0x1d0>)
 8016934:	4837      	ldr	r0, [pc, #220]	; (8016a14 <tcp_enqueue_flags+0x1c4>)
 8016936:	f004 fff9 	bl	801b92c <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	891b      	ldrh	r3, [r3, #8]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d006      	beq.n	8016950 <tcp_enqueue_flags+0x100>
 8016942:	4b32      	ldr	r3, [pc, #200]	; (8016a0c <tcp_enqueue_flags+0x1bc>)
 8016944:	f240 4243 	movw	r2, #1091	; 0x443
 8016948:	4936      	ldr	r1, [pc, #216]	; (8016a24 <tcp_enqueue_flags+0x1d4>)
 801694a:	4832      	ldr	r0, [pc, #200]	; (8016a14 <tcp_enqueue_flags+0x1c4>)
 801694c:	f004 ffee 	bl	801b92c <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016954:	2b00      	cmp	r3, #0
 8016956:	d103      	bne.n	8016960 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	68fa      	ldr	r2, [r7, #12]
 801695c:	66da      	str	r2, [r3, #108]	; 0x6c
 801695e:	e00d      	b.n	801697c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016964:	61bb      	str	r3, [r7, #24]
 8016966:	e002      	b.n	801696e <tcp_enqueue_flags+0x11e>
 8016968:	69bb      	ldr	r3, [r7, #24]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	61bb      	str	r3, [r7, #24]
 801696e:	69bb      	ldr	r3, [r7, #24]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d1f8      	bne.n	8016968 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016976:	69bb      	ldr	r3, [r7, #24]
 8016978:	68fa      	ldr	r2, [r7, #12]
 801697a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2200      	movs	r2, #0
 8016980:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016984:	78fb      	ldrb	r3, [r7, #3]
 8016986:	f003 0302 	and.w	r3, r3, #2
 801698a:	2b00      	cmp	r3, #0
 801698c:	d104      	bne.n	8016998 <tcp_enqueue_flags+0x148>
 801698e:	78fb      	ldrb	r3, [r7, #3]
 8016990:	f003 0301 	and.w	r3, r3, #1
 8016994:	2b00      	cmp	r3, #0
 8016996:	d004      	beq.n	80169a2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801699c:	1c5a      	adds	r2, r3, #1
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80169a2:	78fb      	ldrb	r3, [r7, #3]
 80169a4:	f003 0301 	and.w	r3, r3, #1
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d006      	beq.n	80169ba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	8b5b      	ldrh	r3, [r3, #26]
 80169b0:	f043 0320 	orr.w	r3, r3, #32
 80169b4:	b29a      	uxth	r2, r3
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	4618      	mov	r0, r3
 80169c0:	f7fa fcdc 	bl	801137c <pbuf_clen>
 80169c4:	4603      	mov	r3, r0
 80169c6:	461a      	mov	r2, r3
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80169ce:	4413      	add	r3, r2
 80169d0:	b29a      	uxth	r2, r3
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d00e      	beq.n	8016a00 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d10a      	bne.n	8016a00 <tcp_enqueue_flags+0x1b0>
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d106      	bne.n	8016a00 <tcp_enqueue_flags+0x1b0>
 80169f2:	4b06      	ldr	r3, [pc, #24]	; (8016a0c <tcp_enqueue_flags+0x1bc>)
 80169f4:	f240 4265 	movw	r2, #1125	; 0x465
 80169f8:	490b      	ldr	r1, [pc, #44]	; (8016a28 <tcp_enqueue_flags+0x1d8>)
 80169fa:	4806      	ldr	r0, [pc, #24]	; (8016a14 <tcp_enqueue_flags+0x1c4>)
 80169fc:	f004 ff96 	bl	801b92c <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016a00:	2300      	movs	r3, #0
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3720      	adds	r7, #32
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	08026cf4 	.word	0x08026cf4
 8016a10:	08027118 	.word	0x08027118
 8016a14:	08026d48 	.word	0x08026d48
 8016a18:	08027170 	.word	0x08027170
 8016a1c:	08027190 	.word	0x08027190
 8016a20:	080271cc 	.word	0x080271cc
 8016a24:	080271e4 	.word	0x080271e4
 8016a28:	08027210 	.word	0x08027210

08016a2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016a2c:	b5b0      	push	{r4, r5, r7, lr}
 8016a2e:	b08a      	sub	sp, #40	; 0x28
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d106      	bne.n	8016a48 <tcp_output+0x1c>
 8016a3a:	4b9e      	ldr	r3, [pc, #632]	; (8016cb4 <tcp_output+0x288>)
 8016a3c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016a40:	499d      	ldr	r1, [pc, #628]	; (8016cb8 <tcp_output+0x28c>)
 8016a42:	489e      	ldr	r0, [pc, #632]	; (8016cbc <tcp_output+0x290>)
 8016a44:	f004 ff72 	bl	801b92c <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	7d1b      	ldrb	r3, [r3, #20]
 8016a4c:	2b01      	cmp	r3, #1
 8016a4e:	d106      	bne.n	8016a5e <tcp_output+0x32>
 8016a50:	4b98      	ldr	r3, [pc, #608]	; (8016cb4 <tcp_output+0x288>)
 8016a52:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016a56:	499a      	ldr	r1, [pc, #616]	; (8016cc0 <tcp_output+0x294>)
 8016a58:	4898      	ldr	r0, [pc, #608]	; (8016cbc <tcp_output+0x290>)
 8016a5a:	f004 ff67 	bl	801b92c <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016a5e:	4b99      	ldr	r3, [pc, #612]	; (8016cc4 <tcp_output+0x298>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	687a      	ldr	r2, [r7, #4]
 8016a64:	429a      	cmp	r2, r3
 8016a66:	d101      	bne.n	8016a6c <tcp_output+0x40>
    return ERR_OK;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	e1ce      	b.n	8016e0a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016a78:	4293      	cmp	r3, r2
 8016a7a:	bf28      	it	cs
 8016a7c:	4613      	movcs	r3, r2
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a86:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d10b      	bne.n	8016aa6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	8b5b      	ldrh	r3, [r3, #26]
 8016a92:	f003 0302 	and.w	r3, r3, #2
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	f000 81aa 	beq.w	8016df0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f000 fdcb 	bl	8017638 <tcp_send_empty_ack>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	e1b1      	b.n	8016e0a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016aa6:	6879      	ldr	r1, [r7, #4]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	3304      	adds	r3, #4
 8016aac:	461a      	mov	r2, r3
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f7ff f824 	bl	8015afc <tcp_route>
 8016ab4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d102      	bne.n	8016ac2 <tcp_output+0x96>
    return ERR_RTE;
 8016abc:	f06f 0303 	mvn.w	r3, #3
 8016ac0:	e1a3      	b.n	8016e0a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d003      	beq.n	8016ad0 <tcp_output+0xa4>
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d111      	bne.n	8016af4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d002      	beq.n	8016adc <tcp_output+0xb0>
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	3304      	adds	r3, #4
 8016ada:	e000      	b.n	8016ade <tcp_output+0xb2>
 8016adc:	2300      	movs	r3, #0
 8016ade:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d102      	bne.n	8016aec <tcp_output+0xc0>
      return ERR_RTE;
 8016ae6:	f06f 0303 	mvn.w	r3, #3
 8016aea:	e18e      	b.n	8016e0a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016aec:	693b      	ldr	r3, [r7, #16]
 8016aee:	681a      	ldr	r2, [r3, #0]
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af6:	68db      	ldr	r3, [r3, #12]
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7f9 f809 	bl	800fb12 <lwip_htonl>
 8016b00:	4602      	mov	r2, r0
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b06:	1ad3      	subs	r3, r2, r3
 8016b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b0a:	8912      	ldrh	r2, [r2, #8]
 8016b0c:	4413      	add	r3, r2
 8016b0e:	69ba      	ldr	r2, [r7, #24]
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d227      	bcs.n	8016b64 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016b1a:	461a      	mov	r2, r3
 8016b1c:	69bb      	ldr	r3, [r7, #24]
 8016b1e:	4293      	cmp	r3, r2
 8016b20:	d114      	bne.n	8016b4c <tcp_output+0x120>
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d110      	bne.n	8016b4c <tcp_output+0x120>
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d10b      	bne.n	8016b4c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2200      	movs	r2, #0
 8016b38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2201      	movs	r2, #1
 8016b40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2200      	movs	r2, #0
 8016b48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	8b5b      	ldrh	r3, [r3, #26]
 8016b50:	f003 0302 	and.w	r3, r3, #2
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	f000 814d 	beq.w	8016df4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f000 fd6c 	bl	8017638 <tcp_send_empty_ack>
 8016b60:	4603      	mov	r3, r0
 8016b62:	e152      	b.n	8016e0a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2200      	movs	r2, #0
 8016b68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b70:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016b72:	6a3b      	ldr	r3, [r7, #32]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	f000 811c 	beq.w	8016db2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016b7a:	e002      	b.n	8016b82 <tcp_output+0x156>
 8016b7c:	6a3b      	ldr	r3, [r7, #32]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	623b      	str	r3, [r7, #32]
 8016b82:	6a3b      	ldr	r3, [r7, #32]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d1f8      	bne.n	8016b7c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016b8a:	e112      	b.n	8016db2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	899b      	ldrh	r3, [r3, #12]
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7f8 ffa7 	bl	800fae8 <lwip_htons>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	b2db      	uxtb	r3, r3
 8016b9e:	f003 0304 	and.w	r3, r3, #4
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d006      	beq.n	8016bb4 <tcp_output+0x188>
 8016ba6:	4b43      	ldr	r3, [pc, #268]	; (8016cb4 <tcp_output+0x288>)
 8016ba8:	f240 5236 	movw	r2, #1334	; 0x536
 8016bac:	4946      	ldr	r1, [pc, #280]	; (8016cc8 <tcp_output+0x29c>)
 8016bae:	4843      	ldr	r0, [pc, #268]	; (8016cbc <tcp_output+0x290>)
 8016bb0:	f004 febc 	bl	801b92c <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d01f      	beq.n	8016bfc <tcp_output+0x1d0>
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	8b5b      	ldrh	r3, [r3, #26]
 8016bc0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d119      	bne.n	8016bfc <tcp_output+0x1d0>
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d00b      	beq.n	8016be8 <tcp_output+0x1bc>
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d110      	bne.n	8016bfc <tcp_output+0x1d0>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bde:	891a      	ldrh	r2, [r3, #8]
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d209      	bcs.n	8016bfc <tcp_output+0x1d0>
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d004      	beq.n	8016bfc <tcp_output+0x1d0>
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bf8:	2b08      	cmp	r3, #8
 8016bfa:	d901      	bls.n	8016c00 <tcp_output+0x1d4>
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	e000      	b.n	8016c02 <tcp_output+0x1d6>
 8016c00:	2300      	movs	r3, #0
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d106      	bne.n	8016c14 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	8b5b      	ldrh	r3, [r3, #26]
 8016c0a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f000 80e4 	beq.w	8016ddc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	7d1b      	ldrb	r3, [r3, #20]
 8016c18:	2b02      	cmp	r3, #2
 8016c1a:	d00d      	beq.n	8016c38 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1e:	68db      	ldr	r3, [r3, #12]
 8016c20:	899b      	ldrh	r3, [r3, #12]
 8016c22:	b29c      	uxth	r4, r3
 8016c24:	2010      	movs	r0, #16
 8016c26:	f7f8 ff5f 	bl	800fae8 <lwip_htons>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	461a      	mov	r2, r3
 8016c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c30:	68db      	ldr	r3, [r3, #12]
 8016c32:	4322      	orrs	r2, r4
 8016c34:	b292      	uxth	r2, r2
 8016c36:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016c38:	697a      	ldr	r2, [r7, #20]
 8016c3a:	6879      	ldr	r1, [r7, #4]
 8016c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c3e:	f000 f909 	bl	8016e54 <tcp_output_segment>
 8016c42:	4603      	mov	r3, r0
 8016c44:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d009      	beq.n	8016c62 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	8b5b      	ldrh	r3, [r3, #26]
 8016c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c56:	b29a      	uxth	r2, r3
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	835a      	strh	r2, [r3, #26]
      return err;
 8016c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c60:	e0d3      	b.n	8016e0a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	7d1b      	ldrb	r3, [r3, #20]
 8016c6e:	2b02      	cmp	r3, #2
 8016c70:	d006      	beq.n	8016c80 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	8b5b      	ldrh	r3, [r3, #26]
 8016c76:	f023 0303 	bic.w	r3, r3, #3
 8016c7a:	b29a      	uxth	r2, r3
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c82:	68db      	ldr	r3, [r3, #12]
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7f8 ff43 	bl	800fb12 <lwip_htonl>
 8016c8c:	4604      	mov	r4, r0
 8016c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c90:	891b      	ldrh	r3, [r3, #8]
 8016c92:	461d      	mov	r5, r3
 8016c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c96:	68db      	ldr	r3, [r3, #12]
 8016c98:	899b      	ldrh	r3, [r3, #12]
 8016c9a:	b29b      	uxth	r3, r3
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	f7f8 ff23 	bl	800fae8 <lwip_htons>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	b2db      	uxtb	r3, r3
 8016ca6:	f003 0303 	and.w	r3, r3, #3
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d00e      	beq.n	8016ccc <tcp_output+0x2a0>
 8016cae:	2301      	movs	r3, #1
 8016cb0:	e00d      	b.n	8016cce <tcp_output+0x2a2>
 8016cb2:	bf00      	nop
 8016cb4:	08026cf4 	.word	0x08026cf4
 8016cb8:	08027238 	.word	0x08027238
 8016cbc:	08026d48 	.word	0x08026d48
 8016cc0:	08027250 	.word	0x08027250
 8016cc4:	2000be5c 	.word	0x2000be5c
 8016cc8:	08027278 	.word	0x08027278
 8016ccc:	2300      	movs	r3, #0
 8016cce:	442b      	add	r3, r5
 8016cd0:	4423      	add	r3, r4
 8016cd2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016cd8:	68bb      	ldr	r3, [r7, #8]
 8016cda:	1ad3      	subs	r3, r2, r3
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	da02      	bge.n	8016ce6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	68ba      	ldr	r2, [r7, #8]
 8016ce4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce8:	891b      	ldrh	r3, [r3, #8]
 8016cea:	461c      	mov	r4, r3
 8016cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cee:	68db      	ldr	r3, [r3, #12]
 8016cf0:	899b      	ldrh	r3, [r3, #12]
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7f8 fef7 	bl	800fae8 <lwip_htons>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	f003 0303 	and.w	r3, r3, #3
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d001      	beq.n	8016d0a <tcp_output+0x2de>
 8016d06:	2301      	movs	r3, #1
 8016d08:	e000      	b.n	8016d0c <tcp_output+0x2e0>
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	4423      	add	r3, r4
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d049      	beq.n	8016da6 <tcp_output+0x37a>
      seg->next = NULL;
 8016d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d14:	2200      	movs	r2, #0
 8016d16:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d105      	bne.n	8016d2c <tcp_output+0x300>
        pcb->unacked = seg;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d24:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d28:	623b      	str	r3, [r7, #32]
 8016d2a:	e03f      	b.n	8016dac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2e:	68db      	ldr	r3, [r3, #12]
 8016d30:	685b      	ldr	r3, [r3, #4]
 8016d32:	4618      	mov	r0, r3
 8016d34:	f7f8 feed 	bl	800fb12 <lwip_htonl>
 8016d38:	4604      	mov	r4, r0
 8016d3a:	6a3b      	ldr	r3, [r7, #32]
 8016d3c:	68db      	ldr	r3, [r3, #12]
 8016d3e:	685b      	ldr	r3, [r3, #4]
 8016d40:	4618      	mov	r0, r3
 8016d42:	f7f8 fee6 	bl	800fb12 <lwip_htonl>
 8016d46:	4603      	mov	r3, r0
 8016d48:	1ae3      	subs	r3, r4, r3
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	da24      	bge.n	8016d98 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	3370      	adds	r3, #112	; 0x70
 8016d52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016d54:	e002      	b.n	8016d5c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016d56:	69fb      	ldr	r3, [r7, #28]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016d5c:	69fb      	ldr	r3, [r7, #28]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d011      	beq.n	8016d88 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	68db      	ldr	r3, [r3, #12]
 8016d6a:	685b      	ldr	r3, [r3, #4]
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f8 fed0 	bl	800fb12 <lwip_htonl>
 8016d72:	4604      	mov	r4, r0
 8016d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d76:	68db      	ldr	r3, [r3, #12]
 8016d78:	685b      	ldr	r3, [r3, #4]
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f7f8 fec9 	bl	800fb12 <lwip_htonl>
 8016d80:	4603      	mov	r3, r0
 8016d82:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	dbe6      	blt.n	8016d56 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016d88:	69fb      	ldr	r3, [r7, #28]
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016d90:	69fb      	ldr	r3, [r7, #28]
 8016d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d94:	601a      	str	r2, [r3, #0]
 8016d96:	e009      	b.n	8016dac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016d98:	6a3b      	ldr	r3, [r7, #32]
 8016d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d9c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016d9e:	6a3b      	ldr	r3, [r7, #32]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	623b      	str	r3, [r7, #32]
 8016da4:	e002      	b.n	8016dac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016da8:	f7fb feff 	bl	8012baa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016db0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d012      	beq.n	8016dde <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dba:	68db      	ldr	r3, [r3, #12]
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7f8 fea7 	bl	800fb12 <lwip_htonl>
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dca:	1ad3      	subs	r3, r2, r3
 8016dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016dce:	8912      	ldrh	r2, [r2, #8]
 8016dd0:	4413      	add	r3, r2
  while (seg != NULL &&
 8016dd2:	69ba      	ldr	r2, [r7, #24]
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	f4bf aed9 	bcs.w	8016b8c <tcp_output+0x160>
 8016dda:	e000      	b.n	8016dde <tcp_output+0x3b2>
      break;
 8016ddc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d108      	bne.n	8016df8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	2200      	movs	r2, #0
 8016dea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016dee:	e004      	b.n	8016dfa <tcp_output+0x3ce>
    goto output_done;
 8016df0:	bf00      	nop
 8016df2:	e002      	b.n	8016dfa <tcp_output+0x3ce>
    goto output_done;
 8016df4:	bf00      	nop
 8016df6:	e000      	b.n	8016dfa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016df8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	8b5b      	ldrh	r3, [r3, #26]
 8016dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016e02:	b29a      	uxth	r2, r3
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016e08:	2300      	movs	r3, #0
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3728      	adds	r7, #40	; 0x28
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bdb0      	pop	{r4, r5, r7, pc}
 8016e12:	bf00      	nop

08016e14 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b082      	sub	sp, #8
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d106      	bne.n	8016e30 <tcp_output_segment_busy+0x1c>
 8016e22:	4b09      	ldr	r3, [pc, #36]	; (8016e48 <tcp_output_segment_busy+0x34>)
 8016e24:	f240 529a 	movw	r2, #1434	; 0x59a
 8016e28:	4908      	ldr	r1, [pc, #32]	; (8016e4c <tcp_output_segment_busy+0x38>)
 8016e2a:	4809      	ldr	r0, [pc, #36]	; (8016e50 <tcp_output_segment_busy+0x3c>)
 8016e2c:	f004 fd7e 	bl	801b92c <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	685b      	ldr	r3, [r3, #4]
 8016e34:	7b9b      	ldrb	r3, [r3, #14]
 8016e36:	2b01      	cmp	r3, #1
 8016e38:	d001      	beq.n	8016e3e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	e000      	b.n	8016e40 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016e3e:	2300      	movs	r3, #0
}
 8016e40:	4618      	mov	r0, r3
 8016e42:	3708      	adds	r7, #8
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd80      	pop	{r7, pc}
 8016e48:	08026cf4 	.word	0x08026cf4
 8016e4c:	08027290 	.word	0x08027290
 8016e50:	08026d48 	.word	0x08026d48

08016e54 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016e54:	b5b0      	push	{r4, r5, r7, lr}
 8016e56:	b08c      	sub	sp, #48	; 0x30
 8016e58:	af04      	add	r7, sp, #16
 8016e5a:	60f8      	str	r0, [r7, #12]
 8016e5c:	60b9      	str	r1, [r7, #8]
 8016e5e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d106      	bne.n	8016e74 <tcp_output_segment+0x20>
 8016e66:	4b63      	ldr	r3, [pc, #396]	; (8016ff4 <tcp_output_segment+0x1a0>)
 8016e68:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016e6c:	4962      	ldr	r1, [pc, #392]	; (8016ff8 <tcp_output_segment+0x1a4>)
 8016e6e:	4863      	ldr	r0, [pc, #396]	; (8016ffc <tcp_output_segment+0x1a8>)
 8016e70:	f004 fd5c 	bl	801b92c <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d106      	bne.n	8016e88 <tcp_output_segment+0x34>
 8016e7a:	4b5e      	ldr	r3, [pc, #376]	; (8016ff4 <tcp_output_segment+0x1a0>)
 8016e7c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016e80:	495f      	ldr	r1, [pc, #380]	; (8017000 <tcp_output_segment+0x1ac>)
 8016e82:	485e      	ldr	r0, [pc, #376]	; (8016ffc <tcp_output_segment+0x1a8>)
 8016e84:	f004 fd52 	bl	801b92c <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d106      	bne.n	8016e9c <tcp_output_segment+0x48>
 8016e8e:	4b59      	ldr	r3, [pc, #356]	; (8016ff4 <tcp_output_segment+0x1a0>)
 8016e90:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016e94:	495b      	ldr	r1, [pc, #364]	; (8017004 <tcp_output_segment+0x1b0>)
 8016e96:	4859      	ldr	r0, [pc, #356]	; (8016ffc <tcp_output_segment+0x1a8>)
 8016e98:	f004 fd48 	bl	801b92c <printf>

  if (tcp_output_segment_busy(seg)) {
 8016e9c:	68f8      	ldr	r0, [r7, #12]
 8016e9e:	f7ff ffb9 	bl	8016e14 <tcp_output_segment_busy>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d001      	beq.n	8016eac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	e09f      	b.n	8016fec <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	68dc      	ldr	r4, [r3, #12]
 8016eb4:	4610      	mov	r0, r2
 8016eb6:	f7f8 fe2c 	bl	800fb12 <lwip_htonl>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	68dc      	ldr	r4, [r3, #12]
 8016ec6:	4610      	mov	r0, r2
 8016ec8:	f7f8 fe0e 	bl	800fae8 <lwip_htons>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ed4:	68ba      	ldr	r2, [r7, #8]
 8016ed6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016ed8:	441a      	add	r2, r3
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	68db      	ldr	r3, [r3, #12]
 8016ee2:	3314      	adds	r3, #20
 8016ee4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	7a9b      	ldrb	r3, [r3, #10]
 8016eea:	f003 0301 	and.w	r3, r3, #1
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d015      	beq.n	8016f1e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016ef2:	68bb      	ldr	r3, [r7, #8]
 8016ef4:	3304      	adds	r3, #4
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	6879      	ldr	r1, [r7, #4]
 8016efa:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016efe:	f7fc fa37 	bl	8013370 <tcp_eff_send_mss_netif>
 8016f02:	4603      	mov	r3, r0
 8016f04:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016f06:	8b7b      	ldrh	r3, [r7, #26]
 8016f08:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f7f8 fe00 	bl	800fb12 <lwip_htonl>
 8016f12:	4602      	mov	r2, r0
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016f18:	69fb      	ldr	r3, [r7, #28]
 8016f1a:	3304      	adds	r3, #4
 8016f1c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	da02      	bge.n	8016f2e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016f2e:	68bb      	ldr	r3, [r7, #8]
 8016f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d10c      	bne.n	8016f50 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016f36:	4b34      	ldr	r3, [pc, #208]	; (8017008 <tcp_output_segment+0x1b4>)
 8016f38:	681a      	ldr	r2, [r3, #0]
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	68db      	ldr	r3, [r3, #12]
 8016f42:	685b      	ldr	r3, [r3, #4]
 8016f44:	4618      	mov	r0, r3
 8016f46:	f7f8 fde4 	bl	800fb12 <lwip_htonl>
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	68da      	ldr	r2, [r3, #12]
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	685b      	ldr	r3, [r3, #4]
 8016f5a:	1ad3      	subs	r3, r2, r3
 8016f5c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	685b      	ldr	r3, [r3, #4]
 8016f62:	8959      	ldrh	r1, [r3, #10]
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	8b3a      	ldrh	r2, [r7, #24]
 8016f6a:	1a8a      	subs	r2, r1, r2
 8016f6c:	b292      	uxth	r2, r2
 8016f6e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	685b      	ldr	r3, [r3, #4]
 8016f74:	8919      	ldrh	r1, [r3, #8]
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	8b3a      	ldrh	r2, [r7, #24]
 8016f7c:	1a8a      	subs	r2, r1, r2
 8016f7e:	b292      	uxth	r2, r2
 8016f80:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	685b      	ldr	r3, [r3, #4]
 8016f86:	68fa      	ldr	r2, [r7, #12]
 8016f88:	68d2      	ldr	r2, [r2, #12]
 8016f8a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	68db      	ldr	r3, [r3, #12]
 8016f90:	2200      	movs	r2, #0
 8016f92:	741a      	strb	r2, [r3, #16]
 8016f94:	2200      	movs	r2, #0
 8016f96:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	68db      	ldr	r3, [r3, #12]
 8016f9c:	f103 0214 	add.w	r2, r3, #20
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	7a9b      	ldrb	r3, [r3, #10]
 8016fa4:	009b      	lsls	r3, r3, #2
 8016fa6:	f003 0304 	and.w	r3, r3, #4
 8016faa:	4413      	add	r3, r2
 8016fac:	69fa      	ldr	r2, [r7, #28]
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d006      	beq.n	8016fc0 <tcp_output_segment+0x16c>
 8016fb2:	4b10      	ldr	r3, [pc, #64]	; (8016ff4 <tcp_output_segment+0x1a0>)
 8016fb4:	f240 621c 	movw	r2, #1564	; 0x61c
 8016fb8:	4914      	ldr	r1, [pc, #80]	; (801700c <tcp_output_segment+0x1b8>)
 8016fba:	4810      	ldr	r0, [pc, #64]	; (8016ffc <tcp_output_segment+0x1a8>)
 8016fbc:	f004 fcb6 	bl	801b92c <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	6858      	ldr	r0, [r3, #4]
 8016fc4:	68b9      	ldr	r1, [r7, #8]
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	1d1c      	adds	r4, r3, #4
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	7add      	ldrb	r5, [r3, #11]
 8016fce:	68bb      	ldr	r3, [r7, #8]
 8016fd0:	7a9b      	ldrb	r3, [r3, #10]
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	9202      	str	r2, [sp, #8]
 8016fd6:	2206      	movs	r2, #6
 8016fd8:	9201      	str	r2, [sp, #4]
 8016fda:	9300      	str	r3, [sp, #0]
 8016fdc:	462b      	mov	r3, r5
 8016fde:	4622      	mov	r2, r4
 8016fe0:	f002 fd96 	bl	8019b10 <ip4_output_if>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3720      	adds	r7, #32
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8016ff4:	08026cf4 	.word	0x08026cf4
 8016ff8:	080272b8 	.word	0x080272b8
 8016ffc:	08026d48 	.word	0x08026d48
 8017000:	080272d8 	.word	0x080272d8
 8017004:	080272f8 	.word	0x080272f8
 8017008:	2000be4c 	.word	0x2000be4c
 801700c:	0802731c 	.word	0x0802731c

08017010 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017010:	b5b0      	push	{r4, r5, r7, lr}
 8017012:	b084      	sub	sp, #16
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d106      	bne.n	801702c <tcp_rexmit_rto_prepare+0x1c>
 801701e:	4b31      	ldr	r3, [pc, #196]	; (80170e4 <tcp_rexmit_rto_prepare+0xd4>)
 8017020:	f240 6263 	movw	r2, #1635	; 0x663
 8017024:	4930      	ldr	r1, [pc, #192]	; (80170e8 <tcp_rexmit_rto_prepare+0xd8>)
 8017026:	4831      	ldr	r0, [pc, #196]	; (80170ec <tcp_rexmit_rto_prepare+0xdc>)
 8017028:	f004 fc80 	bl	801b92c <printf>

  if (pcb->unacked == NULL) {
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017030:	2b00      	cmp	r3, #0
 8017032:	d102      	bne.n	801703a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017034:	f06f 0305 	mvn.w	r3, #5
 8017038:	e050      	b.n	80170dc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801703e:	60fb      	str	r3, [r7, #12]
 8017040:	e00b      	b.n	801705a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017042:	68f8      	ldr	r0, [r7, #12]
 8017044:	f7ff fee6 	bl	8016e14 <tcp_output_segment_busy>
 8017048:	4603      	mov	r3, r0
 801704a:	2b00      	cmp	r3, #0
 801704c:	d002      	beq.n	8017054 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801704e:	f06f 0305 	mvn.w	r3, #5
 8017052:	e043      	b.n	80170dc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	60fb      	str	r3, [r7, #12]
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d1ef      	bne.n	8017042 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017062:	68f8      	ldr	r0, [r7, #12]
 8017064:	f7ff fed6 	bl	8016e14 <tcp_output_segment_busy>
 8017068:	4603      	mov	r3, r0
 801706a:	2b00      	cmp	r3, #0
 801706c:	d002      	beq.n	8017074 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801706e:	f06f 0305 	mvn.w	r3, #5
 8017072:	e033      	b.n	80170dc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2200      	movs	r2, #0
 8017088:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	8b5b      	ldrh	r3, [r3, #26]
 801708e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017092:	b29a      	uxth	r2, r3
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	68db      	ldr	r3, [r3, #12]
 801709c:	685b      	ldr	r3, [r3, #4]
 801709e:	4618      	mov	r0, r3
 80170a0:	f7f8 fd37 	bl	800fb12 <lwip_htonl>
 80170a4:	4604      	mov	r4, r0
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	891b      	ldrh	r3, [r3, #8]
 80170aa:	461d      	mov	r5, r3
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	68db      	ldr	r3, [r3, #12]
 80170b0:	899b      	ldrh	r3, [r3, #12]
 80170b2:	b29b      	uxth	r3, r3
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7f8 fd17 	bl	800fae8 <lwip_htons>
 80170ba:	4603      	mov	r3, r0
 80170bc:	b2db      	uxtb	r3, r3
 80170be:	f003 0303 	and.w	r3, r3, #3
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d001      	beq.n	80170ca <tcp_rexmit_rto_prepare+0xba>
 80170c6:	2301      	movs	r3, #1
 80170c8:	e000      	b.n	80170cc <tcp_rexmit_rto_prepare+0xbc>
 80170ca:	2300      	movs	r3, #0
 80170cc:	442b      	add	r3, r5
 80170ce:	18e2      	adds	r2, r4, r3
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2200      	movs	r2, #0
 80170d8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80170da:	2300      	movs	r3, #0
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3710      	adds	r7, #16
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bdb0      	pop	{r4, r5, r7, pc}
 80170e4:	08026cf4 	.word	0x08026cf4
 80170e8:	08027330 	.word	0x08027330
 80170ec:	08026d48 	.word	0x08026d48

080170f0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b082      	sub	sp, #8
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d106      	bne.n	801710c <tcp_rexmit_rto_commit+0x1c>
 80170fe:	4b0d      	ldr	r3, [pc, #52]	; (8017134 <tcp_rexmit_rto_commit+0x44>)
 8017100:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017104:	490c      	ldr	r1, [pc, #48]	; (8017138 <tcp_rexmit_rto_commit+0x48>)
 8017106:	480d      	ldr	r0, [pc, #52]	; (801713c <tcp_rexmit_rto_commit+0x4c>)
 8017108:	f004 fc10 	bl	801b92c <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017112:	2bff      	cmp	r3, #255	; 0xff
 8017114:	d007      	beq.n	8017126 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801711c:	3301      	adds	r3, #1
 801711e:	b2da      	uxtb	r2, r3
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f7ff fc80 	bl	8016a2c <tcp_output>
}
 801712c:	bf00      	nop
 801712e:	3708      	adds	r7, #8
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}
 8017134:	08026cf4 	.word	0x08026cf4
 8017138:	08027354 	.word	0x08027354
 801713c:	08026d48 	.word	0x08026d48

08017140 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b082      	sub	sp, #8
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d106      	bne.n	801715c <tcp_rexmit_rto+0x1c>
 801714e:	4b0a      	ldr	r3, [pc, #40]	; (8017178 <tcp_rexmit_rto+0x38>)
 8017150:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017154:	4909      	ldr	r1, [pc, #36]	; (801717c <tcp_rexmit_rto+0x3c>)
 8017156:	480a      	ldr	r0, [pc, #40]	; (8017180 <tcp_rexmit_rto+0x40>)
 8017158:	f004 fbe8 	bl	801b92c <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f7ff ff57 	bl	8017010 <tcp_rexmit_rto_prepare>
 8017162:	4603      	mov	r3, r0
 8017164:	2b00      	cmp	r3, #0
 8017166:	d102      	bne.n	801716e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f7ff ffc1 	bl	80170f0 <tcp_rexmit_rto_commit>
  }
}
 801716e:	bf00      	nop
 8017170:	3708      	adds	r7, #8
 8017172:	46bd      	mov	sp, r7
 8017174:	bd80      	pop	{r7, pc}
 8017176:	bf00      	nop
 8017178:	08026cf4 	.word	0x08026cf4
 801717c:	08027378 	.word	0x08027378
 8017180:	08026d48 	.word	0x08026d48

08017184 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017184:	b590      	push	{r4, r7, lr}
 8017186:	b085      	sub	sp, #20
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d106      	bne.n	80171a0 <tcp_rexmit+0x1c>
 8017192:	4b2f      	ldr	r3, [pc, #188]	; (8017250 <tcp_rexmit+0xcc>)
 8017194:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017198:	492e      	ldr	r1, [pc, #184]	; (8017254 <tcp_rexmit+0xd0>)
 801719a:	482f      	ldr	r0, [pc, #188]	; (8017258 <tcp_rexmit+0xd4>)
 801719c:	f004 fbc6 	bl	801b92c <printf>

  if (pcb->unacked == NULL) {
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d102      	bne.n	80171ae <tcp_rexmit+0x2a>
    return ERR_VAL;
 80171a8:	f06f 0305 	mvn.w	r3, #5
 80171ac:	e04c      	b.n	8017248 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171b2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80171b4:	68b8      	ldr	r0, [r7, #8]
 80171b6:	f7ff fe2d 	bl	8016e14 <tcp_output_segment_busy>
 80171ba:	4603      	mov	r3, r0
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d002      	beq.n	80171c6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80171c0:	f06f 0305 	mvn.w	r3, #5
 80171c4:	e040      	b.n	8017248 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	681a      	ldr	r2, [r3, #0]
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	336c      	adds	r3, #108	; 0x6c
 80171d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80171d4:	e002      	b.n	80171dc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d011      	beq.n	8017208 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	68db      	ldr	r3, [r3, #12]
 80171ea:	685b      	ldr	r3, [r3, #4]
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7f8 fc90 	bl	800fb12 <lwip_htonl>
 80171f2:	4604      	mov	r4, r0
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	68db      	ldr	r3, [r3, #12]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	4618      	mov	r0, r3
 80171fc:	f7f8 fc89 	bl	800fb12 <lwip_htonl>
 8017200:	4603      	mov	r3, r0
 8017202:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017204:	2b00      	cmp	r3, #0
 8017206:	dbe6      	blt.n	80171d6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	681a      	ldr	r2, [r3, #0]
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	68ba      	ldr	r2, [r7, #8]
 8017214:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017216:	68bb      	ldr	r3, [r7, #8]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d103      	bne.n	8017226 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	2200      	movs	r2, #0
 8017222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801722c:	2bff      	cmp	r3, #255	; 0xff
 801722e:	d007      	beq.n	8017240 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017236:	3301      	adds	r3, #1
 8017238:	b2da      	uxtb	r2, r3
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2200      	movs	r2, #0
 8017244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017246:	2300      	movs	r3, #0
}
 8017248:	4618      	mov	r0, r3
 801724a:	3714      	adds	r7, #20
 801724c:	46bd      	mov	sp, r7
 801724e:	bd90      	pop	{r4, r7, pc}
 8017250:	08026cf4 	.word	0x08026cf4
 8017254:	08027394 	.word	0x08027394
 8017258:	08026d48 	.word	0x08026d48

0801725c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801725c:	b580      	push	{r7, lr}
 801725e:	b082      	sub	sp, #8
 8017260:	af00      	add	r7, sp, #0
 8017262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d106      	bne.n	8017278 <tcp_rexmit_fast+0x1c>
 801726a:	4b2a      	ldr	r3, [pc, #168]	; (8017314 <tcp_rexmit_fast+0xb8>)
 801726c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017270:	4929      	ldr	r1, [pc, #164]	; (8017318 <tcp_rexmit_fast+0xbc>)
 8017272:	482a      	ldr	r0, [pc, #168]	; (801731c <tcp_rexmit_fast+0xc0>)
 8017274:	f004 fb5a 	bl	801b92c <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801727c:	2b00      	cmp	r3, #0
 801727e:	d045      	beq.n	801730c <tcp_rexmit_fast+0xb0>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	8b5b      	ldrh	r3, [r3, #26]
 8017284:	f003 0304 	and.w	r3, r3, #4
 8017288:	2b00      	cmp	r3, #0
 801728a:	d13f      	bne.n	801730c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f7ff ff79 	bl	8017184 <tcp_rexmit>
 8017292:	4603      	mov	r3, r0
 8017294:	2b00      	cmp	r3, #0
 8017296:	d139      	bne.n	801730c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80172a4:	4293      	cmp	r3, r2
 80172a6:	bf28      	it	cs
 80172a8:	4613      	movcs	r3, r2
 80172aa:	b29b      	uxth	r3, r3
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	da00      	bge.n	80172b2 <tcp_rexmit_fast+0x56>
 80172b0:	3301      	adds	r3, #1
 80172b2:	105b      	asrs	r3, r3, #1
 80172b4:	b29a      	uxth	r2, r3
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80172c2:	461a      	mov	r2, r3
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80172c8:	005b      	lsls	r3, r3, #1
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d206      	bcs.n	80172dc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80172d2:	005b      	lsls	r3, r3, #1
 80172d4:	b29a      	uxth	r2, r3
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80172e6:	4619      	mov	r1, r3
 80172e8:	0049      	lsls	r1, r1, #1
 80172ea:	440b      	add	r3, r1
 80172ec:	b29b      	uxth	r3, r3
 80172ee:	4413      	add	r3, r2
 80172f0:	b29a      	uxth	r2, r3
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	8b5b      	ldrh	r3, [r3, #26]
 80172fc:	f043 0304 	orr.w	r3, r3, #4
 8017300:	b29a      	uxth	r2, r3
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	2200      	movs	r2, #0
 801730a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801730c:	bf00      	nop
 801730e:	3708      	adds	r7, #8
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}
 8017314:	08026cf4 	.word	0x08026cf4
 8017318:	080273ac 	.word	0x080273ac
 801731c:	08026d48 	.word	0x08026d48

08017320 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b086      	sub	sp, #24
 8017324:	af00      	add	r7, sp, #0
 8017326:	60f8      	str	r0, [r7, #12]
 8017328:	607b      	str	r3, [r7, #4]
 801732a:	460b      	mov	r3, r1
 801732c:	817b      	strh	r3, [r7, #10]
 801732e:	4613      	mov	r3, r2
 8017330:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017332:	897a      	ldrh	r2, [r7, #10]
 8017334:	893b      	ldrh	r3, [r7, #8]
 8017336:	4413      	add	r3, r2
 8017338:	b29b      	uxth	r3, r3
 801733a:	3314      	adds	r3, #20
 801733c:	b29b      	uxth	r3, r3
 801733e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017342:	4619      	mov	r1, r3
 8017344:	2022      	movs	r0, #34	; 0x22
 8017346:	f7f9 fca7 	bl	8010c98 <pbuf_alloc>
 801734a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d04d      	beq.n	80173ee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017352:	897b      	ldrh	r3, [r7, #10]
 8017354:	3313      	adds	r3, #19
 8017356:	697a      	ldr	r2, [r7, #20]
 8017358:	8952      	ldrh	r2, [r2, #10]
 801735a:	4293      	cmp	r3, r2
 801735c:	db06      	blt.n	801736c <tcp_output_alloc_header_common+0x4c>
 801735e:	4b26      	ldr	r3, [pc, #152]	; (80173f8 <tcp_output_alloc_header_common+0xd8>)
 8017360:	f240 7223 	movw	r2, #1827	; 0x723
 8017364:	4925      	ldr	r1, [pc, #148]	; (80173fc <tcp_output_alloc_header_common+0xdc>)
 8017366:	4826      	ldr	r0, [pc, #152]	; (8017400 <tcp_output_alloc_header_common+0xe0>)
 8017368:	f004 fae0 	bl	801b92c <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017372:	8c3b      	ldrh	r3, [r7, #32]
 8017374:	4618      	mov	r0, r3
 8017376:	f7f8 fbb7 	bl	800fae8 <lwip_htons>
 801737a:	4603      	mov	r3, r0
 801737c:	461a      	mov	r2, r3
 801737e:	693b      	ldr	r3, [r7, #16]
 8017380:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017384:	4618      	mov	r0, r3
 8017386:	f7f8 fbaf 	bl	800fae8 <lwip_htons>
 801738a:	4603      	mov	r3, r0
 801738c:	461a      	mov	r2, r3
 801738e:	693b      	ldr	r3, [r7, #16]
 8017390:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	687a      	ldr	r2, [r7, #4]
 8017396:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017398:	68f8      	ldr	r0, [r7, #12]
 801739a:	f7f8 fbba 	bl	800fb12 <lwip_htonl>
 801739e:	4602      	mov	r2, r0
 80173a0:	693b      	ldr	r3, [r7, #16]
 80173a2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80173a4:	897b      	ldrh	r3, [r7, #10]
 80173a6:	089b      	lsrs	r3, r3, #2
 80173a8:	b29b      	uxth	r3, r3
 80173aa:	3305      	adds	r3, #5
 80173ac:	b29b      	uxth	r3, r3
 80173ae:	031b      	lsls	r3, r3, #12
 80173b0:	b29a      	uxth	r2, r3
 80173b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80173b6:	b29b      	uxth	r3, r3
 80173b8:	4313      	orrs	r3, r2
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	4618      	mov	r0, r3
 80173be:	f7f8 fb93 	bl	800fae8 <lwip_htons>
 80173c2:	4603      	mov	r3, r0
 80173c4:	461a      	mov	r2, r3
 80173c6:	693b      	ldr	r3, [r7, #16]
 80173c8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80173ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80173cc:	4618      	mov	r0, r3
 80173ce:	f7f8 fb8b 	bl	800fae8 <lwip_htons>
 80173d2:	4603      	mov	r3, r0
 80173d4:	461a      	mov	r2, r3
 80173d6:	693b      	ldr	r3, [r7, #16]
 80173d8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80173da:	693b      	ldr	r3, [r7, #16]
 80173dc:	2200      	movs	r2, #0
 80173de:	741a      	strb	r2, [r3, #16]
 80173e0:	2200      	movs	r2, #0
 80173e2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80173e4:	693b      	ldr	r3, [r7, #16]
 80173e6:	2200      	movs	r2, #0
 80173e8:	749a      	strb	r2, [r3, #18]
 80173ea:	2200      	movs	r2, #0
 80173ec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80173ee:	697b      	ldr	r3, [r7, #20]
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3718      	adds	r7, #24
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	08026cf4 	.word	0x08026cf4
 80173fc:	080273cc 	.word	0x080273cc
 8017400:	08026d48 	.word	0x08026d48

08017404 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017404:	b5b0      	push	{r4, r5, r7, lr}
 8017406:	b08a      	sub	sp, #40	; 0x28
 8017408:	af04      	add	r7, sp, #16
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	607b      	str	r3, [r7, #4]
 801740e:	460b      	mov	r3, r1
 8017410:	817b      	strh	r3, [r7, #10]
 8017412:	4613      	mov	r3, r2
 8017414:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d106      	bne.n	801742a <tcp_output_alloc_header+0x26>
 801741c:	4b15      	ldr	r3, [pc, #84]	; (8017474 <tcp_output_alloc_header+0x70>)
 801741e:	f240 7242 	movw	r2, #1858	; 0x742
 8017422:	4915      	ldr	r1, [pc, #84]	; (8017478 <tcp_output_alloc_header+0x74>)
 8017424:	4815      	ldr	r0, [pc, #84]	; (801747c <tcp_output_alloc_header+0x78>)
 8017426:	f004 fa81 	bl	801b92c <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	8adb      	ldrh	r3, [r3, #22]
 8017432:	68fa      	ldr	r2, [r7, #12]
 8017434:	8b12      	ldrh	r2, [r2, #24]
 8017436:	68f9      	ldr	r1, [r7, #12]
 8017438:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801743a:	893d      	ldrh	r5, [r7, #8]
 801743c:	897c      	ldrh	r4, [r7, #10]
 801743e:	9103      	str	r1, [sp, #12]
 8017440:	2110      	movs	r1, #16
 8017442:	9102      	str	r1, [sp, #8]
 8017444:	9201      	str	r2, [sp, #4]
 8017446:	9300      	str	r3, [sp, #0]
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	462a      	mov	r2, r5
 801744c:	4621      	mov	r1, r4
 801744e:	f7ff ff67 	bl	8017320 <tcp_output_alloc_header_common>
 8017452:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017454:	697b      	ldr	r3, [r7, #20]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d006      	beq.n	8017468 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017462:	441a      	add	r2, r3
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017468:	697b      	ldr	r3, [r7, #20]
}
 801746a:	4618      	mov	r0, r3
 801746c:	3718      	adds	r7, #24
 801746e:	46bd      	mov	sp, r7
 8017470:	bdb0      	pop	{r4, r5, r7, pc}
 8017472:	bf00      	nop
 8017474:	08026cf4 	.word	0x08026cf4
 8017478:	080273fc 	.word	0x080273fc
 801747c:	08026d48 	.word	0x08026d48

08017480 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b088      	sub	sp, #32
 8017484:	af00      	add	r7, sp, #0
 8017486:	60f8      	str	r0, [r7, #12]
 8017488:	60b9      	str	r1, [r7, #8]
 801748a:	4611      	mov	r1, r2
 801748c:	461a      	mov	r2, r3
 801748e:	460b      	mov	r3, r1
 8017490:	71fb      	strb	r3, [r7, #7]
 8017492:	4613      	mov	r3, r2
 8017494:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017496:	2300      	movs	r3, #0
 8017498:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801749a:	68bb      	ldr	r3, [r7, #8]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d106      	bne.n	80174ae <tcp_output_fill_options+0x2e>
 80174a0:	4b13      	ldr	r3, [pc, #76]	; (80174f0 <tcp_output_fill_options+0x70>)
 80174a2:	f240 7256 	movw	r2, #1878	; 0x756
 80174a6:	4913      	ldr	r1, [pc, #76]	; (80174f4 <tcp_output_fill_options+0x74>)
 80174a8:	4813      	ldr	r0, [pc, #76]	; (80174f8 <tcp_output_fill_options+0x78>)
 80174aa:	f004 fa3f 	bl	801b92c <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80174ae:	68bb      	ldr	r3, [r7, #8]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80174b4:	69bb      	ldr	r3, [r7, #24]
 80174b6:	3314      	adds	r3, #20
 80174b8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80174ba:	69bb      	ldr	r3, [r7, #24]
 80174bc:	f103 0214 	add.w	r2, r3, #20
 80174c0:	8bfb      	ldrh	r3, [r7, #30]
 80174c2:	009b      	lsls	r3, r3, #2
 80174c4:	4619      	mov	r1, r3
 80174c6:	79fb      	ldrb	r3, [r7, #7]
 80174c8:	009b      	lsls	r3, r3, #2
 80174ca:	f003 0304 	and.w	r3, r3, #4
 80174ce:	440b      	add	r3, r1
 80174d0:	4413      	add	r3, r2
 80174d2:	697a      	ldr	r2, [r7, #20]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d006      	beq.n	80174e6 <tcp_output_fill_options+0x66>
 80174d8:	4b05      	ldr	r3, [pc, #20]	; (80174f0 <tcp_output_fill_options+0x70>)
 80174da:	f240 7275 	movw	r2, #1909	; 0x775
 80174de:	4907      	ldr	r1, [pc, #28]	; (80174fc <tcp_output_fill_options+0x7c>)
 80174e0:	4805      	ldr	r0, [pc, #20]	; (80174f8 <tcp_output_fill_options+0x78>)
 80174e2:	f004 fa23 	bl	801b92c <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80174e6:	bf00      	nop
 80174e8:	3720      	adds	r7, #32
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}
 80174ee:	bf00      	nop
 80174f0:	08026cf4 	.word	0x08026cf4
 80174f4:	08027424 	.word	0x08027424
 80174f8:	08026d48 	.word	0x08026d48
 80174fc:	0802731c 	.word	0x0802731c

08017500 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b08a      	sub	sp, #40	; 0x28
 8017504:	af04      	add	r7, sp, #16
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801750e:	68bb      	ldr	r3, [r7, #8]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d106      	bne.n	8017522 <tcp_output_control_segment+0x22>
 8017514:	4b1c      	ldr	r3, [pc, #112]	; (8017588 <tcp_output_control_segment+0x88>)
 8017516:	f240 7287 	movw	r2, #1927	; 0x787
 801751a:	491c      	ldr	r1, [pc, #112]	; (801758c <tcp_output_control_segment+0x8c>)
 801751c:	481c      	ldr	r0, [pc, #112]	; (8017590 <tcp_output_control_segment+0x90>)
 801751e:	f004 fa05 	bl	801b92c <printf>

  netif = tcp_route(pcb, src, dst);
 8017522:	683a      	ldr	r2, [r7, #0]
 8017524:	6879      	ldr	r1, [r7, #4]
 8017526:	68f8      	ldr	r0, [r7, #12]
 8017528:	f7fe fae8 	bl	8015afc <tcp_route>
 801752c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d102      	bne.n	801753a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017534:	23fc      	movs	r3, #252	; 0xfc
 8017536:	75fb      	strb	r3, [r7, #23]
 8017538:	e01c      	b.n	8017574 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d006      	beq.n	801754e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	7adb      	ldrb	r3, [r3, #11]
 8017544:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	7a9b      	ldrb	r3, [r3, #10]
 801754a:	757b      	strb	r3, [r7, #21]
 801754c:	e003      	b.n	8017556 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801754e:	23ff      	movs	r3, #255	; 0xff
 8017550:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017552:	2300      	movs	r3, #0
 8017554:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017556:	7dba      	ldrb	r2, [r7, #22]
 8017558:	693b      	ldr	r3, [r7, #16]
 801755a:	9302      	str	r3, [sp, #8]
 801755c:	2306      	movs	r3, #6
 801755e:	9301      	str	r3, [sp, #4]
 8017560:	7d7b      	ldrb	r3, [r7, #21]
 8017562:	9300      	str	r3, [sp, #0]
 8017564:	4613      	mov	r3, r2
 8017566:	683a      	ldr	r2, [r7, #0]
 8017568:	6879      	ldr	r1, [r7, #4]
 801756a:	68b8      	ldr	r0, [r7, #8]
 801756c:	f002 fad0 	bl	8019b10 <ip4_output_if>
 8017570:	4603      	mov	r3, r0
 8017572:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017574:	68b8      	ldr	r0, [r7, #8]
 8017576:	f7f9 fe73 	bl	8011260 <pbuf_free>
  return err;
 801757a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801757e:	4618      	mov	r0, r3
 8017580:	3718      	adds	r7, #24
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}
 8017586:	bf00      	nop
 8017588:	08026cf4 	.word	0x08026cf4
 801758c:	0802744c 	.word	0x0802744c
 8017590:	08026d48 	.word	0x08026d48

08017594 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017594:	b590      	push	{r4, r7, lr}
 8017596:	b08b      	sub	sp, #44	; 0x2c
 8017598:	af04      	add	r7, sp, #16
 801759a:	60f8      	str	r0, [r7, #12]
 801759c:	60b9      	str	r1, [r7, #8]
 801759e:	607a      	str	r2, [r7, #4]
 80175a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d106      	bne.n	80175b6 <tcp_rst+0x22>
 80175a8:	4b1f      	ldr	r3, [pc, #124]	; (8017628 <tcp_rst+0x94>)
 80175aa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80175ae:	491f      	ldr	r1, [pc, #124]	; (801762c <tcp_rst+0x98>)
 80175b0:	481f      	ldr	r0, [pc, #124]	; (8017630 <tcp_rst+0x9c>)
 80175b2:	f004 f9bb 	bl	801b92c <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80175b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d106      	bne.n	80175ca <tcp_rst+0x36>
 80175bc:	4b1a      	ldr	r3, [pc, #104]	; (8017628 <tcp_rst+0x94>)
 80175be:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80175c2:	491c      	ldr	r1, [pc, #112]	; (8017634 <tcp_rst+0xa0>)
 80175c4:	481a      	ldr	r0, [pc, #104]	; (8017630 <tcp_rst+0x9c>)
 80175c6:	f004 f9b1 	bl	801b92c <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80175ca:	2300      	movs	r3, #0
 80175cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80175ce:	f246 0308 	movw	r3, #24584	; 0x6008
 80175d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80175d4:	7dfb      	ldrb	r3, [r7, #23]
 80175d6:	b29c      	uxth	r4, r3
 80175d8:	68b8      	ldr	r0, [r7, #8]
 80175da:	f7f8 fa9a 	bl	800fb12 <lwip_htonl>
 80175de:	4602      	mov	r2, r0
 80175e0:	8abb      	ldrh	r3, [r7, #20]
 80175e2:	9303      	str	r3, [sp, #12]
 80175e4:	2314      	movs	r3, #20
 80175e6:	9302      	str	r3, [sp, #8]
 80175e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80175ea:	9301      	str	r3, [sp, #4]
 80175ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80175ee:	9300      	str	r3, [sp, #0]
 80175f0:	4613      	mov	r3, r2
 80175f2:	2200      	movs	r2, #0
 80175f4:	4621      	mov	r1, r4
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7ff fe92 	bl	8017320 <tcp_output_alloc_header_common>
 80175fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80175fe:	693b      	ldr	r3, [r7, #16]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d00c      	beq.n	801761e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017604:	7dfb      	ldrb	r3, [r7, #23]
 8017606:	2200      	movs	r2, #0
 8017608:	6939      	ldr	r1, [r7, #16]
 801760a:	68f8      	ldr	r0, [r7, #12]
 801760c:	f7ff ff38 	bl	8017480 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017612:	683a      	ldr	r2, [r7, #0]
 8017614:	6939      	ldr	r1, [r7, #16]
 8017616:	68f8      	ldr	r0, [r7, #12]
 8017618:	f7ff ff72 	bl	8017500 <tcp_output_control_segment>
 801761c:	e000      	b.n	8017620 <tcp_rst+0x8c>
    return;
 801761e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017620:	371c      	adds	r7, #28
 8017622:	46bd      	mov	sp, r7
 8017624:	bd90      	pop	{r4, r7, pc}
 8017626:	bf00      	nop
 8017628:	08026cf4 	.word	0x08026cf4
 801762c:	08027478 	.word	0x08027478
 8017630:	08026d48 	.word	0x08026d48
 8017634:	08027494 	.word	0x08027494

08017638 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017638:	b590      	push	{r4, r7, lr}
 801763a:	b087      	sub	sp, #28
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017640:	2300      	movs	r3, #0
 8017642:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017644:	2300      	movs	r3, #0
 8017646:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d106      	bne.n	801765c <tcp_send_empty_ack+0x24>
 801764e:	4b28      	ldr	r3, [pc, #160]	; (80176f0 <tcp_send_empty_ack+0xb8>)
 8017650:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017654:	4927      	ldr	r1, [pc, #156]	; (80176f4 <tcp_send_empty_ack+0xbc>)
 8017656:	4828      	ldr	r0, [pc, #160]	; (80176f8 <tcp_send_empty_ack+0xc0>)
 8017658:	f004 f968 	bl	801b92c <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801765c:	7dfb      	ldrb	r3, [r7, #23]
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	b2db      	uxtb	r3, r3
 8017662:	f003 0304 	and.w	r3, r3, #4
 8017666:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017668:	7d7b      	ldrb	r3, [r7, #21]
 801766a:	b29c      	uxth	r4, r3
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017670:	4618      	mov	r0, r3
 8017672:	f7f8 fa4e 	bl	800fb12 <lwip_htonl>
 8017676:	4603      	mov	r3, r0
 8017678:	2200      	movs	r2, #0
 801767a:	4621      	mov	r1, r4
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f7ff fec1 	bl	8017404 <tcp_output_alloc_header>
 8017682:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d109      	bne.n	801769e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	8b5b      	ldrh	r3, [r3, #26]
 801768e:	f043 0303 	orr.w	r3, r3, #3
 8017692:	b29a      	uxth	r2, r3
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017698:	f06f 0301 	mvn.w	r3, #1
 801769c:	e023      	b.n	80176e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801769e:	7dbb      	ldrb	r3, [r7, #22]
 80176a0:	7dfa      	ldrb	r2, [r7, #23]
 80176a2:	6939      	ldr	r1, [r7, #16]
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7ff feeb 	bl	8017480 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	3304      	adds	r3, #4
 80176b0:	6939      	ldr	r1, [r7, #16]
 80176b2:	6878      	ldr	r0, [r7, #4]
 80176b4:	f7ff ff24 	bl	8017500 <tcp_output_control_segment>
 80176b8:	4603      	mov	r3, r0
 80176ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80176bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d007      	beq.n	80176d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	8b5b      	ldrh	r3, [r3, #26]
 80176c8:	f043 0303 	orr.w	r3, r3, #3
 80176cc:	b29a      	uxth	r2, r3
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	835a      	strh	r2, [r3, #26]
 80176d2:	e006      	b.n	80176e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	8b5b      	ldrh	r3, [r3, #26]
 80176d8:	f023 0303 	bic.w	r3, r3, #3
 80176dc:	b29a      	uxth	r2, r3
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80176e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	371c      	adds	r7, #28
 80176ea:	46bd      	mov	sp, r7
 80176ec:	bd90      	pop	{r4, r7, pc}
 80176ee:	bf00      	nop
 80176f0:	08026cf4 	.word	0x08026cf4
 80176f4:	080274b0 	.word	0x080274b0
 80176f8:	08026d48 	.word	0x08026d48

080176fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80176fc:	b590      	push	{r4, r7, lr}
 80176fe:	b087      	sub	sp, #28
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017704:	2300      	movs	r3, #0
 8017706:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d106      	bne.n	801771c <tcp_keepalive+0x20>
 801770e:	4b18      	ldr	r3, [pc, #96]	; (8017770 <tcp_keepalive+0x74>)
 8017710:	f640 0224 	movw	r2, #2084	; 0x824
 8017714:	4917      	ldr	r1, [pc, #92]	; (8017774 <tcp_keepalive+0x78>)
 8017716:	4818      	ldr	r0, [pc, #96]	; (8017778 <tcp_keepalive+0x7c>)
 8017718:	f004 f908 	bl	801b92c <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801771c:	7dfb      	ldrb	r3, [r7, #23]
 801771e:	b29c      	uxth	r4, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017724:	3b01      	subs	r3, #1
 8017726:	4618      	mov	r0, r3
 8017728:	f7f8 f9f3 	bl	800fb12 <lwip_htonl>
 801772c:	4603      	mov	r3, r0
 801772e:	2200      	movs	r2, #0
 8017730:	4621      	mov	r1, r4
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	f7ff fe66 	bl	8017404 <tcp_output_alloc_header>
 8017738:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d102      	bne.n	8017746 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017740:	f04f 33ff 	mov.w	r3, #4294967295
 8017744:	e010      	b.n	8017768 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017746:	7dfb      	ldrb	r3, [r7, #23]
 8017748:	2200      	movs	r2, #0
 801774a:	6939      	ldr	r1, [r7, #16]
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f7ff fe97 	bl	8017480 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017752:	687a      	ldr	r2, [r7, #4]
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	3304      	adds	r3, #4
 8017758:	6939      	ldr	r1, [r7, #16]
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f7ff fed0 	bl	8017500 <tcp_output_control_segment>
 8017760:	4603      	mov	r3, r0
 8017762:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017764:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017768:	4618      	mov	r0, r3
 801776a:	371c      	adds	r7, #28
 801776c:	46bd      	mov	sp, r7
 801776e:	bd90      	pop	{r4, r7, pc}
 8017770:	08026cf4 	.word	0x08026cf4
 8017774:	080274d0 	.word	0x080274d0
 8017778:	08026d48 	.word	0x08026d48

0801777c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801777c:	b590      	push	{r4, r7, lr}
 801777e:	b08b      	sub	sp, #44	; 0x2c
 8017780:	af00      	add	r7, sp, #0
 8017782:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017784:	2300      	movs	r3, #0
 8017786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d106      	bne.n	801779e <tcp_zero_window_probe+0x22>
 8017790:	4b4c      	ldr	r3, [pc, #304]	; (80178c4 <tcp_zero_window_probe+0x148>)
 8017792:	f640 024f 	movw	r2, #2127	; 0x84f
 8017796:	494c      	ldr	r1, [pc, #304]	; (80178c8 <tcp_zero_window_probe+0x14c>)
 8017798:	484c      	ldr	r0, [pc, #304]	; (80178cc <tcp_zero_window_probe+0x150>)
 801779a:	f004 f8c7 	bl	801b92c <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80177a4:	6a3b      	ldr	r3, [r7, #32]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d101      	bne.n	80177ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80177aa:	2300      	movs	r3, #0
 80177ac:	e086      	b.n	80178bc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80177b4:	2bff      	cmp	r3, #255	; 0xff
 80177b6:	d007      	beq.n	80177c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80177be:	3301      	adds	r3, #1
 80177c0:	b2da      	uxtb	r2, r3
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80177c8:	6a3b      	ldr	r3, [r7, #32]
 80177ca:	68db      	ldr	r3, [r3, #12]
 80177cc:	899b      	ldrh	r3, [r3, #12]
 80177ce:	b29b      	uxth	r3, r3
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7f8 f989 	bl	800fae8 <lwip_htons>
 80177d6:	4603      	mov	r3, r0
 80177d8:	b2db      	uxtb	r3, r3
 80177da:	f003 0301 	and.w	r3, r3, #1
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d005      	beq.n	80177ee <tcp_zero_window_probe+0x72>
 80177e2:	6a3b      	ldr	r3, [r7, #32]
 80177e4:	891b      	ldrh	r3, [r3, #8]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d101      	bne.n	80177ee <tcp_zero_window_probe+0x72>
 80177ea:	2301      	movs	r3, #1
 80177ec:	e000      	b.n	80177f0 <tcp_zero_window_probe+0x74>
 80177ee:	2300      	movs	r3, #0
 80177f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80177f2:	7ffb      	ldrb	r3, [r7, #31]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	bf0c      	ite	eq
 80177f8:	2301      	moveq	r3, #1
 80177fa:	2300      	movne	r3, #0
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017804:	b299      	uxth	r1, r3
 8017806:	6a3b      	ldr	r3, [r7, #32]
 8017808:	68db      	ldr	r3, [r3, #12]
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	8bba      	ldrh	r2, [r7, #28]
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	f7ff fdf8 	bl	8017404 <tcp_output_alloc_header>
 8017814:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017816:	69bb      	ldr	r3, [r7, #24]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d102      	bne.n	8017822 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801781c:	f04f 33ff 	mov.w	r3, #4294967295
 8017820:	e04c      	b.n	80178bc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017822:	69bb      	ldr	r3, [r7, #24]
 8017824:	685b      	ldr	r3, [r3, #4]
 8017826:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017828:	7ffb      	ldrb	r3, [r7, #31]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d011      	beq.n	8017852 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	899b      	ldrh	r3, [r3, #12]
 8017832:	b29b      	uxth	r3, r3
 8017834:	b21b      	sxth	r3, r3
 8017836:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801783a:	b21c      	sxth	r4, r3
 801783c:	2011      	movs	r0, #17
 801783e:	f7f8 f953 	bl	800fae8 <lwip_htons>
 8017842:	4603      	mov	r3, r0
 8017844:	b21b      	sxth	r3, r3
 8017846:	4323      	orrs	r3, r4
 8017848:	b21b      	sxth	r3, r3
 801784a:	b29a      	uxth	r2, r3
 801784c:	697b      	ldr	r3, [r7, #20]
 801784e:	819a      	strh	r2, [r3, #12]
 8017850:	e010      	b.n	8017874 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017852:	69bb      	ldr	r3, [r7, #24]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	3314      	adds	r3, #20
 8017858:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801785a:	6a3b      	ldr	r3, [r7, #32]
 801785c:	6858      	ldr	r0, [r3, #4]
 801785e:	6a3b      	ldr	r3, [r7, #32]
 8017860:	685b      	ldr	r3, [r3, #4]
 8017862:	891a      	ldrh	r2, [r3, #8]
 8017864:	6a3b      	ldr	r3, [r7, #32]
 8017866:	891b      	ldrh	r3, [r3, #8]
 8017868:	1ad3      	subs	r3, r2, r3
 801786a:	b29b      	uxth	r3, r3
 801786c:	2201      	movs	r2, #1
 801786e:	6939      	ldr	r1, [r7, #16]
 8017870:	f7f9 fefc 	bl	801166c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017874:	6a3b      	ldr	r3, [r7, #32]
 8017876:	68db      	ldr	r3, [r3, #12]
 8017878:	685b      	ldr	r3, [r3, #4]
 801787a:	4618      	mov	r0, r3
 801787c:	f7f8 f949 	bl	800fb12 <lwip_htonl>
 8017880:	4603      	mov	r3, r0
 8017882:	3301      	adds	r3, #1
 8017884:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	1ad3      	subs	r3, r2, r3
 801788e:	2b00      	cmp	r3, #0
 8017890:	da02      	bge.n	8017898 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	68fa      	ldr	r2, [r7, #12]
 8017896:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801789c:	2200      	movs	r2, #0
 801789e:	69b9      	ldr	r1, [r7, #24]
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	f7ff fded 	bl	8017480 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80178a6:	687a      	ldr	r2, [r7, #4]
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	3304      	adds	r3, #4
 80178ac:	69b9      	ldr	r1, [r7, #24]
 80178ae:	6878      	ldr	r0, [r7, #4]
 80178b0:	f7ff fe26 	bl	8017500 <tcp_output_control_segment>
 80178b4:	4603      	mov	r3, r0
 80178b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80178b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80178bc:	4618      	mov	r0, r3
 80178be:	372c      	adds	r7, #44	; 0x2c
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd90      	pop	{r4, r7, pc}
 80178c4:	08026cf4 	.word	0x08026cf4
 80178c8:	080274ec 	.word	0x080274ec
 80178cc:	08026d48 	.word	0x08026d48

080178d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b082      	sub	sp, #8
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80178d8:	f7f9 ffb6 	bl	8011848 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80178dc:	4b0a      	ldr	r3, [pc, #40]	; (8017908 <tcpip_tcp_timer+0x38>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d103      	bne.n	80178ec <tcpip_tcp_timer+0x1c>
 80178e4:	4b09      	ldr	r3, [pc, #36]	; (801790c <tcpip_tcp_timer+0x3c>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d005      	beq.n	80178f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80178ec:	2200      	movs	r2, #0
 80178ee:	4908      	ldr	r1, [pc, #32]	; (8017910 <tcpip_tcp_timer+0x40>)
 80178f0:	20fa      	movs	r0, #250	; 0xfa
 80178f2:	f000 f8f3 	bl	8017adc <sys_timeout>
 80178f6:	e003      	b.n	8017900 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80178f8:	4b06      	ldr	r3, [pc, #24]	; (8017914 <tcpip_tcp_timer+0x44>)
 80178fa:	2200      	movs	r2, #0
 80178fc:	601a      	str	r2, [r3, #0]
  }
}
 80178fe:	bf00      	nop
 8017900:	bf00      	nop
 8017902:	3708      	adds	r7, #8
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}
 8017908:	2000be48 	.word	0x2000be48
 801790c:	2000be58 	.word	0x2000be58
 8017910:	080178d1 	.word	0x080178d1
 8017914:	20004f74 	.word	0x20004f74

08017918 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801791c:	4b0a      	ldr	r3, [pc, #40]	; (8017948 <tcp_timer_needed+0x30>)
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d10f      	bne.n	8017944 <tcp_timer_needed+0x2c>
 8017924:	4b09      	ldr	r3, [pc, #36]	; (801794c <tcp_timer_needed+0x34>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d103      	bne.n	8017934 <tcp_timer_needed+0x1c>
 801792c:	4b08      	ldr	r3, [pc, #32]	; (8017950 <tcp_timer_needed+0x38>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d007      	beq.n	8017944 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017934:	4b04      	ldr	r3, [pc, #16]	; (8017948 <tcp_timer_needed+0x30>)
 8017936:	2201      	movs	r2, #1
 8017938:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801793a:	2200      	movs	r2, #0
 801793c:	4905      	ldr	r1, [pc, #20]	; (8017954 <tcp_timer_needed+0x3c>)
 801793e:	20fa      	movs	r0, #250	; 0xfa
 8017940:	f000 f8cc 	bl	8017adc <sys_timeout>
  }
}
 8017944:	bf00      	nop
 8017946:	bd80      	pop	{r7, pc}
 8017948:	20004f74 	.word	0x20004f74
 801794c:	2000be48 	.word	0x2000be48
 8017950:	2000be58 	.word	0x2000be58
 8017954:	080178d1 	.word	0x080178d1

08017958 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b086      	sub	sp, #24
 801795c:	af00      	add	r7, sp, #0
 801795e:	60f8      	str	r0, [r7, #12]
 8017960:	60b9      	str	r1, [r7, #8]
 8017962:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017964:	200a      	movs	r0, #10
 8017966:	f7f8 fdab 	bl	80104c0 <memp_malloc>
 801796a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801796c:	693b      	ldr	r3, [r7, #16]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d109      	bne.n	8017986 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d151      	bne.n	8017a1c <sys_timeout_abs+0xc4>
 8017978:	4b2a      	ldr	r3, [pc, #168]	; (8017a24 <sys_timeout_abs+0xcc>)
 801797a:	22be      	movs	r2, #190	; 0xbe
 801797c:	492a      	ldr	r1, [pc, #168]	; (8017a28 <sys_timeout_abs+0xd0>)
 801797e:	482b      	ldr	r0, [pc, #172]	; (8017a2c <sys_timeout_abs+0xd4>)
 8017980:	f003 ffd4 	bl	801b92c <printf>
    return;
 8017984:	e04a      	b.n	8017a1c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017986:	693b      	ldr	r3, [r7, #16]
 8017988:	2200      	movs	r2, #0
 801798a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801798c:	693b      	ldr	r3, [r7, #16]
 801798e:	68ba      	ldr	r2, [r7, #8]
 8017990:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017992:	693b      	ldr	r3, [r7, #16]
 8017994:	687a      	ldr	r2, [r7, #4]
 8017996:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017998:	693b      	ldr	r3, [r7, #16]
 801799a:	68fa      	ldr	r2, [r7, #12]
 801799c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801799e:	4b24      	ldr	r3, [pc, #144]	; (8017a30 <sys_timeout_abs+0xd8>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d103      	bne.n	80179ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80179a6:	4a22      	ldr	r2, [pc, #136]	; (8017a30 <sys_timeout_abs+0xd8>)
 80179a8:	693b      	ldr	r3, [r7, #16]
 80179aa:	6013      	str	r3, [r2, #0]
    return;
 80179ac:	e037      	b.n	8017a1e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	685a      	ldr	r2, [r3, #4]
 80179b2:	4b1f      	ldr	r3, [pc, #124]	; (8017a30 <sys_timeout_abs+0xd8>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	685b      	ldr	r3, [r3, #4]
 80179b8:	1ad3      	subs	r3, r2, r3
 80179ba:	0fdb      	lsrs	r3, r3, #31
 80179bc:	f003 0301 	and.w	r3, r3, #1
 80179c0:	b2db      	uxtb	r3, r3
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d007      	beq.n	80179d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80179c6:	4b1a      	ldr	r3, [pc, #104]	; (8017a30 <sys_timeout_abs+0xd8>)
 80179c8:	681a      	ldr	r2, [r3, #0]
 80179ca:	693b      	ldr	r3, [r7, #16]
 80179cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80179ce:	4a18      	ldr	r2, [pc, #96]	; (8017a30 <sys_timeout_abs+0xd8>)
 80179d0:	693b      	ldr	r3, [r7, #16]
 80179d2:	6013      	str	r3, [r2, #0]
 80179d4:	e023      	b.n	8017a1e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80179d6:	4b16      	ldr	r3, [pc, #88]	; (8017a30 <sys_timeout_abs+0xd8>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	617b      	str	r3, [r7, #20]
 80179dc:	e01a      	b.n	8017a14 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d00b      	beq.n	80179fe <sys_timeout_abs+0xa6>
 80179e6:	693b      	ldr	r3, [r7, #16]
 80179e8:	685a      	ldr	r2, [r3, #4]
 80179ea:	697b      	ldr	r3, [r7, #20]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	685b      	ldr	r3, [r3, #4]
 80179f0:	1ad3      	subs	r3, r2, r3
 80179f2:	0fdb      	lsrs	r3, r3, #31
 80179f4:	f003 0301 	and.w	r3, r3, #1
 80179f8:	b2db      	uxtb	r3, r3
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d007      	beq.n	8017a0e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80179fe:	697b      	ldr	r3, [r7, #20]
 8017a00:	681a      	ldr	r2, [r3, #0]
 8017a02:	693b      	ldr	r3, [r7, #16]
 8017a04:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	693a      	ldr	r2, [r7, #16]
 8017a0a:	601a      	str	r2, [r3, #0]
        break;
 8017a0c:	e007      	b.n	8017a1e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	617b      	str	r3, [r7, #20]
 8017a14:	697b      	ldr	r3, [r7, #20]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d1e1      	bne.n	80179de <sys_timeout_abs+0x86>
 8017a1a:	e000      	b.n	8017a1e <sys_timeout_abs+0xc6>
    return;
 8017a1c:	bf00      	nop
      }
    }
  }
}
 8017a1e:	3718      	adds	r7, #24
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}
 8017a24:	08027510 	.word	0x08027510
 8017a28:	08027544 	.word	0x08027544
 8017a2c:	08027584 	.word	0x08027584
 8017a30:	20004f6c 	.word	0x20004f6c

08017a34 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b086      	sub	sp, #24
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017a40:	697b      	ldr	r3, [r7, #20]
 8017a42:	685b      	ldr	r3, [r3, #4]
 8017a44:	4798      	blx	r3

  now = sys_now();
 8017a46:	f7f2 f871 	bl	8009b2c <sys_now>
 8017a4a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017a4c:	697b      	ldr	r3, [r7, #20]
 8017a4e:	681a      	ldr	r2, [r3, #0]
 8017a50:	4b0f      	ldr	r3, [pc, #60]	; (8017a90 <lwip_cyclic_timer+0x5c>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	4413      	add	r3, r2
 8017a56:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017a58:	68fa      	ldr	r2, [r7, #12]
 8017a5a:	693b      	ldr	r3, [r7, #16]
 8017a5c:	1ad3      	subs	r3, r2, r3
 8017a5e:	0fdb      	lsrs	r3, r3, #31
 8017a60:	f003 0301 	and.w	r3, r3, #1
 8017a64:	b2db      	uxtb	r3, r3
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d009      	beq.n	8017a7e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017a6a:	697b      	ldr	r3, [r7, #20]
 8017a6c:	681a      	ldr	r2, [r3, #0]
 8017a6e:	693b      	ldr	r3, [r7, #16]
 8017a70:	4413      	add	r3, r2
 8017a72:	687a      	ldr	r2, [r7, #4]
 8017a74:	4907      	ldr	r1, [pc, #28]	; (8017a94 <lwip_cyclic_timer+0x60>)
 8017a76:	4618      	mov	r0, r3
 8017a78:	f7ff ff6e 	bl	8017958 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017a7c:	e004      	b.n	8017a88 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017a7e:	687a      	ldr	r2, [r7, #4]
 8017a80:	4904      	ldr	r1, [pc, #16]	; (8017a94 <lwip_cyclic_timer+0x60>)
 8017a82:	68f8      	ldr	r0, [r7, #12]
 8017a84:	f7ff ff68 	bl	8017958 <sys_timeout_abs>
}
 8017a88:	bf00      	nop
 8017a8a:	3718      	adds	r7, #24
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}
 8017a90:	20004f70 	.word	0x20004f70
 8017a94:	08017a35 	.word	0x08017a35

08017a98 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017a9e:	2301      	movs	r3, #1
 8017aa0:	607b      	str	r3, [r7, #4]
 8017aa2:	e00e      	b.n	8017ac2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017aa4:	4a0b      	ldr	r2, [pc, #44]	; (8017ad4 <sys_timeouts_init+0x3c>)
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	00db      	lsls	r3, r3, #3
 8017ab0:	4a08      	ldr	r2, [pc, #32]	; (8017ad4 <sys_timeouts_init+0x3c>)
 8017ab2:	4413      	add	r3, r2
 8017ab4:	461a      	mov	r2, r3
 8017ab6:	4908      	ldr	r1, [pc, #32]	; (8017ad8 <sys_timeouts_init+0x40>)
 8017ab8:	f000 f810 	bl	8017adc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	3301      	adds	r3, #1
 8017ac0:	607b      	str	r3, [r7, #4]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2b02      	cmp	r3, #2
 8017ac6:	d9ed      	bls.n	8017aa4 <sys_timeouts_init+0xc>
  }
}
 8017ac8:	bf00      	nop
 8017aca:	bf00      	nop
 8017acc:	3708      	adds	r7, #8
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}
 8017ad2:	bf00      	nop
 8017ad4:	0802907c 	.word	0x0802907c
 8017ad8:	08017a35 	.word	0x08017a35

08017adc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b086      	sub	sp, #24
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	60f8      	str	r0, [r7, #12]
 8017ae4:	60b9      	str	r1, [r7, #8]
 8017ae6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017aee:	d306      	bcc.n	8017afe <sys_timeout+0x22>
 8017af0:	4b0a      	ldr	r3, [pc, #40]	; (8017b1c <sys_timeout+0x40>)
 8017af2:	f240 1229 	movw	r2, #297	; 0x129
 8017af6:	490a      	ldr	r1, [pc, #40]	; (8017b20 <sys_timeout+0x44>)
 8017af8:	480a      	ldr	r0, [pc, #40]	; (8017b24 <sys_timeout+0x48>)
 8017afa:	f003 ff17 	bl	801b92c <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017afe:	f7f2 f815 	bl	8009b2c <sys_now>
 8017b02:	4602      	mov	r2, r0
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	4413      	add	r3, r2
 8017b08:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017b0a:	687a      	ldr	r2, [r7, #4]
 8017b0c:	68b9      	ldr	r1, [r7, #8]
 8017b0e:	6978      	ldr	r0, [r7, #20]
 8017b10:	f7ff ff22 	bl	8017958 <sys_timeout_abs>
#endif
}
 8017b14:	bf00      	nop
 8017b16:	3718      	adds	r7, #24
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	bd80      	pop	{r7, pc}
 8017b1c:	08027510 	.word	0x08027510
 8017b20:	080275ac 	.word	0x080275ac
 8017b24:	08027584 	.word	0x08027584

08017b28 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b084      	sub	sp, #16
 8017b2c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017b2e:	f7f1 fffd 	bl	8009b2c <sys_now>
 8017b32:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017b34:	4b17      	ldr	r3, [pc, #92]	; (8017b94 <sys_check_timeouts+0x6c>)
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017b3a:	68bb      	ldr	r3, [r7, #8]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d022      	beq.n	8017b86 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017b40:	68bb      	ldr	r3, [r7, #8]
 8017b42:	685b      	ldr	r3, [r3, #4]
 8017b44:	68fa      	ldr	r2, [r7, #12]
 8017b46:	1ad3      	subs	r3, r2, r3
 8017b48:	0fdb      	lsrs	r3, r3, #31
 8017b4a:	f003 0301 	and.w	r3, r3, #1
 8017b4e:	b2db      	uxtb	r3, r3
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d11a      	bne.n	8017b8a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	4a0e      	ldr	r2, [pc, #56]	; (8017b94 <sys_check_timeouts+0x6c>)
 8017b5a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	689b      	ldr	r3, [r3, #8]
 8017b60:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017b62:	68bb      	ldr	r3, [r7, #8]
 8017b64:	68db      	ldr	r3, [r3, #12]
 8017b66:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017b68:	68bb      	ldr	r3, [r7, #8]
 8017b6a:	685b      	ldr	r3, [r3, #4]
 8017b6c:	4a0a      	ldr	r2, [pc, #40]	; (8017b98 <sys_check_timeouts+0x70>)
 8017b6e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017b70:	68b9      	ldr	r1, [r7, #8]
 8017b72:	200a      	movs	r0, #10
 8017b74:	f7f8 fcf6 	bl	8010564 <memp_free>
    if (handler != NULL) {
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d0da      	beq.n	8017b34 <sys_check_timeouts+0xc>
      handler(arg);
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	6838      	ldr	r0, [r7, #0]
 8017b82:	4798      	blx	r3
  do {
 8017b84:	e7d6      	b.n	8017b34 <sys_check_timeouts+0xc>
      return;
 8017b86:	bf00      	nop
 8017b88:	e000      	b.n	8017b8c <sys_check_timeouts+0x64>
      return;
 8017b8a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017b8c:	3710      	adds	r7, #16
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	20004f6c 	.word	0x20004f6c
 8017b98:	20004f70 	.word	0x20004f70

08017b9c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017ba2:	4b16      	ldr	r3, [pc, #88]	; (8017bfc <sys_timeouts_sleeptime+0x60>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d102      	bne.n	8017bb0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017baa:	f04f 33ff 	mov.w	r3, #4294967295
 8017bae:	e020      	b.n	8017bf2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017bb0:	f7f1 ffbc 	bl	8009b2c <sys_now>
 8017bb4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017bb6:	4b11      	ldr	r3, [pc, #68]	; (8017bfc <sys_timeouts_sleeptime+0x60>)
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	685a      	ldr	r2, [r3, #4]
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	1ad3      	subs	r3, r2, r3
 8017bc0:	0fdb      	lsrs	r3, r3, #31
 8017bc2:	f003 0301 	and.w	r3, r3, #1
 8017bc6:	b2db      	uxtb	r3, r3
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d001      	beq.n	8017bd0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	e010      	b.n	8017bf2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017bd0:	4b0a      	ldr	r3, [pc, #40]	; (8017bfc <sys_timeouts_sleeptime+0x60>)
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	685a      	ldr	r2, [r3, #4]
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	1ad3      	subs	r3, r2, r3
 8017bda:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	da06      	bge.n	8017bf0 <sys_timeouts_sleeptime+0x54>
 8017be2:	4b07      	ldr	r3, [pc, #28]	; (8017c00 <sys_timeouts_sleeptime+0x64>)
 8017be4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017be8:	4906      	ldr	r1, [pc, #24]	; (8017c04 <sys_timeouts_sleeptime+0x68>)
 8017bea:	4807      	ldr	r0, [pc, #28]	; (8017c08 <sys_timeouts_sleeptime+0x6c>)
 8017bec:	f003 fe9e 	bl	801b92c <printf>
    return ret;
 8017bf0:	683b      	ldr	r3, [r7, #0]
  }
}
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	3708      	adds	r7, #8
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd80      	pop	{r7, pc}
 8017bfa:	bf00      	nop
 8017bfc:	20004f6c 	.word	0x20004f6c
 8017c00:	08027510 	.word	0x08027510
 8017c04:	080275e4 	.word	0x080275e4
 8017c08:	08027584 	.word	0x08027584

08017c0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017c10:	f003 fe9e 	bl	801b950 <rand>
 8017c14:	4603      	mov	r3, r0
 8017c16:	b29b      	uxth	r3, r3
 8017c18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017c1c:	b29b      	uxth	r3, r3
 8017c1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017c22:	b29a      	uxth	r2, r3
 8017c24:	4b01      	ldr	r3, [pc, #4]	; (8017c2c <udp_init+0x20>)
 8017c26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017c28:	bf00      	nop
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	20000034 	.word	0x20000034

08017c30 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017c30:	b480      	push	{r7}
 8017c32:	b083      	sub	sp, #12
 8017c34:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017c36:	2300      	movs	r3, #0
 8017c38:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017c3a:	4b17      	ldr	r3, [pc, #92]	; (8017c98 <udp_new_port+0x68>)
 8017c3c:	881b      	ldrh	r3, [r3, #0]
 8017c3e:	1c5a      	adds	r2, r3, #1
 8017c40:	b291      	uxth	r1, r2
 8017c42:	4a15      	ldr	r2, [pc, #84]	; (8017c98 <udp_new_port+0x68>)
 8017c44:	8011      	strh	r1, [r2, #0]
 8017c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c4a:	4293      	cmp	r3, r2
 8017c4c:	d103      	bne.n	8017c56 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017c4e:	4b12      	ldr	r3, [pc, #72]	; (8017c98 <udp_new_port+0x68>)
 8017c50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017c54:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c56:	4b11      	ldr	r3, [pc, #68]	; (8017c9c <udp_new_port+0x6c>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	603b      	str	r3, [r7, #0]
 8017c5c:	e011      	b.n	8017c82 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	8a5a      	ldrh	r2, [r3, #18]
 8017c62:	4b0d      	ldr	r3, [pc, #52]	; (8017c98 <udp_new_port+0x68>)
 8017c64:	881b      	ldrh	r3, [r3, #0]
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d108      	bne.n	8017c7c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017c6a:	88fb      	ldrh	r3, [r7, #6]
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	80fb      	strh	r3, [r7, #6]
 8017c70:	88fb      	ldrh	r3, [r7, #6]
 8017c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017c76:	d3e0      	bcc.n	8017c3a <udp_new_port+0xa>
        return 0;
 8017c78:	2300      	movs	r3, #0
 8017c7a:	e007      	b.n	8017c8c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c7c:	683b      	ldr	r3, [r7, #0]
 8017c7e:	68db      	ldr	r3, [r3, #12]
 8017c80:	603b      	str	r3, [r7, #0]
 8017c82:	683b      	ldr	r3, [r7, #0]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d1ea      	bne.n	8017c5e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017c88:	4b03      	ldr	r3, [pc, #12]	; (8017c98 <udp_new_port+0x68>)
 8017c8a:	881b      	ldrh	r3, [r3, #0]
}
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	370c      	adds	r7, #12
 8017c90:	46bd      	mov	sp, r7
 8017c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c96:	4770      	bx	lr
 8017c98:	20000034 	.word	0x20000034
 8017c9c:	2000be60 	.word	0x2000be60

08017ca0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b084      	sub	sp, #16
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	60f8      	str	r0, [r7, #12]
 8017ca8:	60b9      	str	r1, [r7, #8]
 8017caa:	4613      	mov	r3, r2
 8017cac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d105      	bne.n	8017cc0 <udp_input_local_match+0x20>
 8017cb4:	4b27      	ldr	r3, [pc, #156]	; (8017d54 <udp_input_local_match+0xb4>)
 8017cb6:	2287      	movs	r2, #135	; 0x87
 8017cb8:	4927      	ldr	r1, [pc, #156]	; (8017d58 <udp_input_local_match+0xb8>)
 8017cba:	4828      	ldr	r0, [pc, #160]	; (8017d5c <udp_input_local_match+0xbc>)
 8017cbc:	f003 fe36 	bl	801b92c <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d105      	bne.n	8017cd2 <udp_input_local_match+0x32>
 8017cc6:	4b23      	ldr	r3, [pc, #140]	; (8017d54 <udp_input_local_match+0xb4>)
 8017cc8:	2288      	movs	r2, #136	; 0x88
 8017cca:	4925      	ldr	r1, [pc, #148]	; (8017d60 <udp_input_local_match+0xc0>)
 8017ccc:	4823      	ldr	r0, [pc, #140]	; (8017d5c <udp_input_local_match+0xbc>)
 8017cce:	f003 fe2d 	bl	801b92c <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	7a1b      	ldrb	r3, [r3, #8]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d00b      	beq.n	8017cf2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	7a1a      	ldrb	r2, [r3, #8]
 8017cde:	4b21      	ldr	r3, [pc, #132]	; (8017d64 <udp_input_local_match+0xc4>)
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017ce6:	3301      	adds	r3, #1
 8017ce8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d001      	beq.n	8017cf2 <udp_input_local_match+0x52>
    return 0;
 8017cee:	2300      	movs	r3, #0
 8017cf0:	e02b      	b.n	8017d4a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017cf2:	79fb      	ldrb	r3, [r7, #7]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d018      	beq.n	8017d2a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d013      	beq.n	8017d26 <udp_input_local_match+0x86>
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d00f      	beq.n	8017d26 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017d06:	4b17      	ldr	r3, [pc, #92]	; (8017d64 <udp_input_local_match+0xc4>)
 8017d08:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d0e:	d00a      	beq.n	8017d26 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	681a      	ldr	r2, [r3, #0]
 8017d14:	4b13      	ldr	r3, [pc, #76]	; (8017d64 <udp_input_local_match+0xc4>)
 8017d16:	695b      	ldr	r3, [r3, #20]
 8017d18:	405a      	eors	r2, r3
 8017d1a:	68bb      	ldr	r3, [r7, #8]
 8017d1c:	3308      	adds	r3, #8
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d110      	bne.n	8017d48 <udp_input_local_match+0xa8>
          return 1;
 8017d26:	2301      	movs	r3, #1
 8017d28:	e00f      	b.n	8017d4a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d009      	beq.n	8017d44 <udp_input_local_match+0xa4>
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d005      	beq.n	8017d44 <udp_input_local_match+0xa4>
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681a      	ldr	r2, [r3, #0]
 8017d3c:	4b09      	ldr	r3, [pc, #36]	; (8017d64 <udp_input_local_match+0xc4>)
 8017d3e:	695b      	ldr	r3, [r3, #20]
 8017d40:	429a      	cmp	r2, r3
 8017d42:	d101      	bne.n	8017d48 <udp_input_local_match+0xa8>
        return 1;
 8017d44:	2301      	movs	r3, #1
 8017d46:	e000      	b.n	8017d4a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017d48:	2300      	movs	r3, #0
}
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	3710      	adds	r7, #16
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	080275f8 	.word	0x080275f8
 8017d58:	08027628 	.word	0x08027628
 8017d5c:	0802764c 	.word	0x0802764c
 8017d60:	08027674 	.word	0x08027674
 8017d64:	20008734 	.word	0x20008734

08017d68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017d68:	b590      	push	{r4, r7, lr}
 8017d6a:	b08d      	sub	sp, #52	; 0x34
 8017d6c:	af02      	add	r7, sp, #8
 8017d6e:	6078      	str	r0, [r7, #4]
 8017d70:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017d72:	2300      	movs	r3, #0
 8017d74:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d105      	bne.n	8017d88 <udp_input+0x20>
 8017d7c:	4b7c      	ldr	r3, [pc, #496]	; (8017f70 <udp_input+0x208>)
 8017d7e:	22cf      	movs	r2, #207	; 0xcf
 8017d80:	497c      	ldr	r1, [pc, #496]	; (8017f74 <udp_input+0x20c>)
 8017d82:	487d      	ldr	r0, [pc, #500]	; (8017f78 <udp_input+0x210>)
 8017d84:	f003 fdd2 	bl	801b92c <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017d88:	683b      	ldr	r3, [r7, #0]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d105      	bne.n	8017d9a <udp_input+0x32>
 8017d8e:	4b78      	ldr	r3, [pc, #480]	; (8017f70 <udp_input+0x208>)
 8017d90:	22d0      	movs	r2, #208	; 0xd0
 8017d92:	497a      	ldr	r1, [pc, #488]	; (8017f7c <udp_input+0x214>)
 8017d94:	4878      	ldr	r0, [pc, #480]	; (8017f78 <udp_input+0x210>)
 8017d96:	f003 fdc9 	bl	801b92c <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	895b      	ldrh	r3, [r3, #10]
 8017d9e:	2b07      	cmp	r3, #7
 8017da0:	d803      	bhi.n	8017daa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017da2:	6878      	ldr	r0, [r7, #4]
 8017da4:	f7f9 fa5c 	bl	8011260 <pbuf_free>
    goto end;
 8017da8:	e0de      	b.n	8017f68 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	685b      	ldr	r3, [r3, #4]
 8017dae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017db0:	4b73      	ldr	r3, [pc, #460]	; (8017f80 <udp_input+0x218>)
 8017db2:	695b      	ldr	r3, [r3, #20]
 8017db4:	4a72      	ldr	r2, [pc, #456]	; (8017f80 <udp_input+0x218>)
 8017db6:	6812      	ldr	r2, [r2, #0]
 8017db8:	4611      	mov	r1, r2
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f001 ff80 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017dc4:	697b      	ldr	r3, [r7, #20]
 8017dc6:	881b      	ldrh	r3, [r3, #0]
 8017dc8:	b29b      	uxth	r3, r3
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7f7 fe8c 	bl	800fae8 <lwip_htons>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017dd4:	697b      	ldr	r3, [r7, #20]
 8017dd6:	885b      	ldrh	r3, [r3, #2]
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f7f7 fe84 	bl	800fae8 <lwip_htons>
 8017de0:	4603      	mov	r3, r0
 8017de2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017de4:	2300      	movs	r3, #0
 8017de6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017de8:	2300      	movs	r3, #0
 8017dea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017dec:	2300      	movs	r3, #0
 8017dee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017df0:	4b64      	ldr	r3, [pc, #400]	; (8017f84 <udp_input+0x21c>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	627b      	str	r3, [r7, #36]	; 0x24
 8017df6:	e054      	b.n	8017ea2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	8a5b      	ldrh	r3, [r3, #18]
 8017dfc:	89fa      	ldrh	r2, [r7, #14]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d14a      	bne.n	8017e98 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017e02:	7cfb      	ldrb	r3, [r7, #19]
 8017e04:	461a      	mov	r2, r3
 8017e06:	6839      	ldr	r1, [r7, #0]
 8017e08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e0a:	f7ff ff49 	bl	8017ca0 <udp_input_local_match>
 8017e0e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d041      	beq.n	8017e98 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e16:	7c1b      	ldrb	r3, [r3, #16]
 8017e18:	f003 0304 	and.w	r3, r3, #4
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d11d      	bne.n	8017e5c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017e20:	69fb      	ldr	r3, [r7, #28]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d102      	bne.n	8017e2c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e28:	61fb      	str	r3, [r7, #28]
 8017e2a:	e017      	b.n	8017e5c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017e2c:	7cfb      	ldrb	r3, [r7, #19]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d014      	beq.n	8017e5c <udp_input+0xf4>
 8017e32:	4b53      	ldr	r3, [pc, #332]	; (8017f80 <udp_input+0x218>)
 8017e34:	695b      	ldr	r3, [r3, #20]
 8017e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e3a:	d10f      	bne.n	8017e5c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017e3c:	69fb      	ldr	r3, [r7, #28]
 8017e3e:	681a      	ldr	r2, [r3, #0]
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	3304      	adds	r3, #4
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d008      	beq.n	8017e5c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4c:	681a      	ldr	r2, [r3, #0]
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	3304      	adds	r3, #4
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d101      	bne.n	8017e5c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5e:	8a9b      	ldrh	r3, [r3, #20]
 8017e60:	8a3a      	ldrh	r2, [r7, #16]
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d118      	bne.n	8017e98 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e68:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d005      	beq.n	8017e7a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e70:	685a      	ldr	r2, [r3, #4]
 8017e72:	4b43      	ldr	r3, [pc, #268]	; (8017f80 <udp_input+0x218>)
 8017e74:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017e76:	429a      	cmp	r2, r3
 8017e78:	d10e      	bne.n	8017e98 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017e7a:	6a3b      	ldr	r3, [r7, #32]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d014      	beq.n	8017eaa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e82:	68da      	ldr	r2, [r3, #12]
 8017e84:	6a3b      	ldr	r3, [r7, #32]
 8017e86:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017e88:	4b3e      	ldr	r3, [pc, #248]	; (8017f84 <udp_input+0x21c>)
 8017e8a:	681a      	ldr	r2, [r3, #0]
 8017e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017e90:	4a3c      	ldr	r2, [pc, #240]	; (8017f84 <udp_input+0x21c>)
 8017e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e94:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017e96:	e008      	b.n	8017eaa <udp_input+0x142>
      }
    }

    prev = pcb;
 8017e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9e:	68db      	ldr	r3, [r3, #12]
 8017ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8017ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d1a7      	bne.n	8017df8 <udp_input+0x90>
 8017ea8:	e000      	b.n	8017eac <udp_input+0x144>
        break;
 8017eaa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d101      	bne.n	8017eb6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d002      	beq.n	8017ec2 <udp_input+0x15a>
    for_us = 1;
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	76fb      	strb	r3, [r7, #27]
 8017ec0:	e00a      	b.n	8017ed8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017ec2:	683b      	ldr	r3, [r7, #0]
 8017ec4:	3304      	adds	r3, #4
 8017ec6:	681a      	ldr	r2, [r3, #0]
 8017ec8:	4b2d      	ldr	r3, [pc, #180]	; (8017f80 <udp_input+0x218>)
 8017eca:	695b      	ldr	r3, [r3, #20]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	bf0c      	ite	eq
 8017ed0:	2301      	moveq	r3, #1
 8017ed2:	2300      	movne	r3, #0
 8017ed4:	b2db      	uxtb	r3, r3
 8017ed6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017ed8:	7efb      	ldrb	r3, [r7, #27]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d041      	beq.n	8017f62 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017ede:	2108      	movs	r1, #8
 8017ee0:	6878      	ldr	r0, [r7, #4]
 8017ee2:	f7f9 f937 	bl	8011154 <pbuf_remove_header>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d00a      	beq.n	8017f02 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017eec:	4b20      	ldr	r3, [pc, #128]	; (8017f70 <udp_input+0x208>)
 8017eee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017ef2:	4925      	ldr	r1, [pc, #148]	; (8017f88 <udp_input+0x220>)
 8017ef4:	4820      	ldr	r0, [pc, #128]	; (8017f78 <udp_input+0x210>)
 8017ef6:	f003 fd19 	bl	801b92c <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017efa:	6878      	ldr	r0, [r7, #4]
 8017efc:	f7f9 f9b0 	bl	8011260 <pbuf_free>
      goto end;
 8017f00:	e032      	b.n	8017f68 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d012      	beq.n	8017f2e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f0a:	699b      	ldr	r3, [r3, #24]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d00a      	beq.n	8017f26 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f12:	699c      	ldr	r4, [r3, #24]
 8017f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f16:	69d8      	ldr	r0, [r3, #28]
 8017f18:	8a3b      	ldrh	r3, [r7, #16]
 8017f1a:	9300      	str	r3, [sp, #0]
 8017f1c:	4b1b      	ldr	r3, [pc, #108]	; (8017f8c <udp_input+0x224>)
 8017f1e:	687a      	ldr	r2, [r7, #4]
 8017f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017f22:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017f24:	e021      	b.n	8017f6a <udp_input+0x202>
        pbuf_free(p);
 8017f26:	6878      	ldr	r0, [r7, #4]
 8017f28:	f7f9 f99a 	bl	8011260 <pbuf_free>
        goto end;
 8017f2c:	e01c      	b.n	8017f68 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017f2e:	7cfb      	ldrb	r3, [r7, #19]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d112      	bne.n	8017f5a <udp_input+0x1f2>
 8017f34:	4b12      	ldr	r3, [pc, #72]	; (8017f80 <udp_input+0x218>)
 8017f36:	695b      	ldr	r3, [r3, #20]
 8017f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f3c:	2be0      	cmp	r3, #224	; 0xe0
 8017f3e:	d00c      	beq.n	8017f5a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017f40:	4b0f      	ldr	r3, [pc, #60]	; (8017f80 <udp_input+0x218>)
 8017f42:	899b      	ldrh	r3, [r3, #12]
 8017f44:	3308      	adds	r3, #8
 8017f46:	b29b      	uxth	r3, r3
 8017f48:	b21b      	sxth	r3, r3
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	6878      	ldr	r0, [r7, #4]
 8017f4e:	f7f9 f974 	bl	801123a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017f52:	2103      	movs	r1, #3
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f001 fb93 	bl	8019680 <icmp_dest_unreach>
      pbuf_free(p);
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f7f9 f980 	bl	8011260 <pbuf_free>
  return;
 8017f60:	e003      	b.n	8017f6a <udp_input+0x202>
    pbuf_free(p);
 8017f62:	6878      	ldr	r0, [r7, #4]
 8017f64:	f7f9 f97c 	bl	8011260 <pbuf_free>
  return;
 8017f68:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017f6a:	372c      	adds	r7, #44	; 0x2c
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd90      	pop	{r4, r7, pc}
 8017f70:	080275f8 	.word	0x080275f8
 8017f74:	0802769c 	.word	0x0802769c
 8017f78:	0802764c 	.word	0x0802764c
 8017f7c:	080276b4 	.word	0x080276b4
 8017f80:	20008734 	.word	0x20008734
 8017f84:	2000be60 	.word	0x2000be60
 8017f88:	080276d0 	.word	0x080276d0
 8017f8c:	20008744 	.word	0x20008744

08017f90 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b082      	sub	sp, #8
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
 8017f98:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d109      	bne.n	8017fb4 <udp_send+0x24>
 8017fa0:	4b11      	ldr	r3, [pc, #68]	; (8017fe8 <udp_send+0x58>)
 8017fa2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017fa6:	4911      	ldr	r1, [pc, #68]	; (8017fec <udp_send+0x5c>)
 8017fa8:	4811      	ldr	r0, [pc, #68]	; (8017ff0 <udp_send+0x60>)
 8017faa:	f003 fcbf 	bl	801b92c <printf>
 8017fae:	f06f 030f 	mvn.w	r3, #15
 8017fb2:	e015      	b.n	8017fe0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d109      	bne.n	8017fce <udp_send+0x3e>
 8017fba:	4b0b      	ldr	r3, [pc, #44]	; (8017fe8 <udp_send+0x58>)
 8017fbc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017fc0:	490c      	ldr	r1, [pc, #48]	; (8017ff4 <udp_send+0x64>)
 8017fc2:	480b      	ldr	r0, [pc, #44]	; (8017ff0 <udp_send+0x60>)
 8017fc4:	f003 fcb2 	bl	801b92c <printf>
 8017fc8:	f06f 030f 	mvn.w	r3, #15
 8017fcc:	e008      	b.n	8017fe0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	1d1a      	adds	r2, r3, #4
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	8a9b      	ldrh	r3, [r3, #20]
 8017fd6:	6839      	ldr	r1, [r7, #0]
 8017fd8:	6878      	ldr	r0, [r7, #4]
 8017fda:	f000 f80d 	bl	8017ff8 <udp_sendto>
 8017fde:	4603      	mov	r3, r0
}
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	3708      	adds	r7, #8
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bd80      	pop	{r7, pc}
 8017fe8:	080275f8 	.word	0x080275f8
 8017fec:	080276ec 	.word	0x080276ec
 8017ff0:	0802764c 	.word	0x0802764c
 8017ff4:	08027704 	.word	0x08027704

08017ff8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b088      	sub	sp, #32
 8017ffc:	af02      	add	r7, sp, #8
 8017ffe:	60f8      	str	r0, [r7, #12]
 8018000:	60b9      	str	r1, [r7, #8]
 8018002:	607a      	str	r2, [r7, #4]
 8018004:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d109      	bne.n	8018020 <udp_sendto+0x28>
 801800c:	4b23      	ldr	r3, [pc, #140]	; (801809c <udp_sendto+0xa4>)
 801800e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018012:	4923      	ldr	r1, [pc, #140]	; (80180a0 <udp_sendto+0xa8>)
 8018014:	4823      	ldr	r0, [pc, #140]	; (80180a4 <udp_sendto+0xac>)
 8018016:	f003 fc89 	bl	801b92c <printf>
 801801a:	f06f 030f 	mvn.w	r3, #15
 801801e:	e038      	b.n	8018092 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018020:	68bb      	ldr	r3, [r7, #8]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d109      	bne.n	801803a <udp_sendto+0x42>
 8018026:	4b1d      	ldr	r3, [pc, #116]	; (801809c <udp_sendto+0xa4>)
 8018028:	f240 2219 	movw	r2, #537	; 0x219
 801802c:	491e      	ldr	r1, [pc, #120]	; (80180a8 <udp_sendto+0xb0>)
 801802e:	481d      	ldr	r0, [pc, #116]	; (80180a4 <udp_sendto+0xac>)
 8018030:	f003 fc7c 	bl	801b92c <printf>
 8018034:	f06f 030f 	mvn.w	r3, #15
 8018038:	e02b      	b.n	8018092 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d109      	bne.n	8018054 <udp_sendto+0x5c>
 8018040:	4b16      	ldr	r3, [pc, #88]	; (801809c <udp_sendto+0xa4>)
 8018042:	f240 221a 	movw	r2, #538	; 0x21a
 8018046:	4919      	ldr	r1, [pc, #100]	; (80180ac <udp_sendto+0xb4>)
 8018048:	4816      	ldr	r0, [pc, #88]	; (80180a4 <udp_sendto+0xac>)
 801804a:	f003 fc6f 	bl	801b92c <printf>
 801804e:	f06f 030f 	mvn.w	r3, #15
 8018052:	e01e      	b.n	8018092 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	7a1b      	ldrb	r3, [r3, #8]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d006      	beq.n	801806a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	7a1b      	ldrb	r3, [r3, #8]
 8018060:	4618      	mov	r0, r3
 8018062:	f7f8 fd6f 	bl	8010b44 <netif_get_by_index>
 8018066:	6178      	str	r0, [r7, #20]
 8018068:	e003      	b.n	8018072 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f001 fb92 	bl	8019794 <ip4_route>
 8018070:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018072:	697b      	ldr	r3, [r7, #20]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d102      	bne.n	801807e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018078:	f06f 0303 	mvn.w	r3, #3
 801807c:	e009      	b.n	8018092 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801807e:	887a      	ldrh	r2, [r7, #2]
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	9300      	str	r3, [sp, #0]
 8018084:	4613      	mov	r3, r2
 8018086:	687a      	ldr	r2, [r7, #4]
 8018088:	68b9      	ldr	r1, [r7, #8]
 801808a:	68f8      	ldr	r0, [r7, #12]
 801808c:	f000 f810 	bl	80180b0 <udp_sendto_if>
 8018090:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018092:	4618      	mov	r0, r3
 8018094:	3718      	adds	r7, #24
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop
 801809c:	080275f8 	.word	0x080275f8
 80180a0:	0802771c 	.word	0x0802771c
 80180a4:	0802764c 	.word	0x0802764c
 80180a8:	08027734 	.word	0x08027734
 80180ac:	08027750 	.word	0x08027750

080180b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b088      	sub	sp, #32
 80180b4:	af02      	add	r7, sp, #8
 80180b6:	60f8      	str	r0, [r7, #12]
 80180b8:	60b9      	str	r1, [r7, #8]
 80180ba:	607a      	str	r2, [r7, #4]
 80180bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d109      	bne.n	80180d8 <udp_sendto_if+0x28>
 80180c4:	4b2e      	ldr	r3, [pc, #184]	; (8018180 <udp_sendto_if+0xd0>)
 80180c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180ca:	492e      	ldr	r1, [pc, #184]	; (8018184 <udp_sendto_if+0xd4>)
 80180cc:	482e      	ldr	r0, [pc, #184]	; (8018188 <udp_sendto_if+0xd8>)
 80180ce:	f003 fc2d 	bl	801b92c <printf>
 80180d2:	f06f 030f 	mvn.w	r3, #15
 80180d6:	e04f      	b.n	8018178 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d109      	bne.n	80180f2 <udp_sendto_if+0x42>
 80180de:	4b28      	ldr	r3, [pc, #160]	; (8018180 <udp_sendto_if+0xd0>)
 80180e0:	f240 2281 	movw	r2, #641	; 0x281
 80180e4:	4929      	ldr	r1, [pc, #164]	; (801818c <udp_sendto_if+0xdc>)
 80180e6:	4828      	ldr	r0, [pc, #160]	; (8018188 <udp_sendto_if+0xd8>)
 80180e8:	f003 fc20 	bl	801b92c <printf>
 80180ec:	f06f 030f 	mvn.w	r3, #15
 80180f0:	e042      	b.n	8018178 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d109      	bne.n	801810c <udp_sendto_if+0x5c>
 80180f8:	4b21      	ldr	r3, [pc, #132]	; (8018180 <udp_sendto_if+0xd0>)
 80180fa:	f240 2282 	movw	r2, #642	; 0x282
 80180fe:	4924      	ldr	r1, [pc, #144]	; (8018190 <udp_sendto_if+0xe0>)
 8018100:	4821      	ldr	r0, [pc, #132]	; (8018188 <udp_sendto_if+0xd8>)
 8018102:	f003 fc13 	bl	801b92c <printf>
 8018106:	f06f 030f 	mvn.w	r3, #15
 801810a:	e035      	b.n	8018178 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801810c:	6a3b      	ldr	r3, [r7, #32]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d109      	bne.n	8018126 <udp_sendto_if+0x76>
 8018112:	4b1b      	ldr	r3, [pc, #108]	; (8018180 <udp_sendto_if+0xd0>)
 8018114:	f240 2283 	movw	r2, #643	; 0x283
 8018118:	491e      	ldr	r1, [pc, #120]	; (8018194 <udp_sendto_if+0xe4>)
 801811a:	481b      	ldr	r0, [pc, #108]	; (8018188 <udp_sendto_if+0xd8>)
 801811c:	f003 fc06 	bl	801b92c <printf>
 8018120:	f06f 030f 	mvn.w	r3, #15
 8018124:	e028      	b.n	8018178 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d009      	beq.n	8018140 <udp_sendto_if+0x90>
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d005      	beq.n	8018140 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801813c:	2be0      	cmp	r3, #224	; 0xe0
 801813e:	d103      	bne.n	8018148 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018140:	6a3b      	ldr	r3, [r7, #32]
 8018142:	3304      	adds	r3, #4
 8018144:	617b      	str	r3, [r7, #20]
 8018146:	e00b      	b.n	8018160 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	681a      	ldr	r2, [r3, #0]
 801814c:	6a3b      	ldr	r3, [r7, #32]
 801814e:	3304      	adds	r3, #4
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	429a      	cmp	r2, r3
 8018154:	d002      	beq.n	801815c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018156:	f06f 0303 	mvn.w	r3, #3
 801815a:	e00d      	b.n	8018178 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018160:	887a      	ldrh	r2, [r7, #2]
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	9301      	str	r3, [sp, #4]
 8018166:	6a3b      	ldr	r3, [r7, #32]
 8018168:	9300      	str	r3, [sp, #0]
 801816a:	4613      	mov	r3, r2
 801816c:	687a      	ldr	r2, [r7, #4]
 801816e:	68b9      	ldr	r1, [r7, #8]
 8018170:	68f8      	ldr	r0, [r7, #12]
 8018172:	f000 f811 	bl	8018198 <udp_sendto_if_src>
 8018176:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018178:	4618      	mov	r0, r3
 801817a:	3718      	adds	r7, #24
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}
 8018180:	080275f8 	.word	0x080275f8
 8018184:	0802776c 	.word	0x0802776c
 8018188:	0802764c 	.word	0x0802764c
 801818c:	08027788 	.word	0x08027788
 8018190:	080277a4 	.word	0x080277a4
 8018194:	080277c4 	.word	0x080277c4

08018198 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b08c      	sub	sp, #48	; 0x30
 801819c:	af04      	add	r7, sp, #16
 801819e:	60f8      	str	r0, [r7, #12]
 80181a0:	60b9      	str	r1, [r7, #8]
 80181a2:	607a      	str	r2, [r7, #4]
 80181a4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d109      	bne.n	80181c0 <udp_sendto_if_src+0x28>
 80181ac:	4b65      	ldr	r3, [pc, #404]	; (8018344 <udp_sendto_if_src+0x1ac>)
 80181ae:	f240 22d1 	movw	r2, #721	; 0x2d1
 80181b2:	4965      	ldr	r1, [pc, #404]	; (8018348 <udp_sendto_if_src+0x1b0>)
 80181b4:	4865      	ldr	r0, [pc, #404]	; (801834c <udp_sendto_if_src+0x1b4>)
 80181b6:	f003 fbb9 	bl	801b92c <printf>
 80181ba:	f06f 030f 	mvn.w	r3, #15
 80181be:	e0bc      	b.n	801833a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d109      	bne.n	80181da <udp_sendto_if_src+0x42>
 80181c6:	4b5f      	ldr	r3, [pc, #380]	; (8018344 <udp_sendto_if_src+0x1ac>)
 80181c8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80181cc:	4960      	ldr	r1, [pc, #384]	; (8018350 <udp_sendto_if_src+0x1b8>)
 80181ce:	485f      	ldr	r0, [pc, #380]	; (801834c <udp_sendto_if_src+0x1b4>)
 80181d0:	f003 fbac 	bl	801b92c <printf>
 80181d4:	f06f 030f 	mvn.w	r3, #15
 80181d8:	e0af      	b.n	801833a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d109      	bne.n	80181f4 <udp_sendto_if_src+0x5c>
 80181e0:	4b58      	ldr	r3, [pc, #352]	; (8018344 <udp_sendto_if_src+0x1ac>)
 80181e2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80181e6:	495b      	ldr	r1, [pc, #364]	; (8018354 <udp_sendto_if_src+0x1bc>)
 80181e8:	4858      	ldr	r0, [pc, #352]	; (801834c <udp_sendto_if_src+0x1b4>)
 80181ea:	f003 fb9f 	bl	801b92c <printf>
 80181ee:	f06f 030f 	mvn.w	r3, #15
 80181f2:	e0a2      	b.n	801833a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80181f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d109      	bne.n	801820e <udp_sendto_if_src+0x76>
 80181fa:	4b52      	ldr	r3, [pc, #328]	; (8018344 <udp_sendto_if_src+0x1ac>)
 80181fc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8018200:	4955      	ldr	r1, [pc, #340]	; (8018358 <udp_sendto_if_src+0x1c0>)
 8018202:	4852      	ldr	r0, [pc, #328]	; (801834c <udp_sendto_if_src+0x1b4>)
 8018204:	f003 fb92 	bl	801b92c <printf>
 8018208:	f06f 030f 	mvn.w	r3, #15
 801820c:	e095      	b.n	801833a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018210:	2b00      	cmp	r3, #0
 8018212:	d109      	bne.n	8018228 <udp_sendto_if_src+0x90>
 8018214:	4b4b      	ldr	r3, [pc, #300]	; (8018344 <udp_sendto_if_src+0x1ac>)
 8018216:	f240 22d5 	movw	r2, #725	; 0x2d5
 801821a:	4950      	ldr	r1, [pc, #320]	; (801835c <udp_sendto_if_src+0x1c4>)
 801821c:	484b      	ldr	r0, [pc, #300]	; (801834c <udp_sendto_if_src+0x1b4>)
 801821e:	f003 fb85 	bl	801b92c <printf>
 8018222:	f06f 030f 	mvn.w	r3, #15
 8018226:	e088      	b.n	801833a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	8a5b      	ldrh	r3, [r3, #18]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d10f      	bne.n	8018250 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018230:	68f9      	ldr	r1, [r7, #12]
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	8a5b      	ldrh	r3, [r3, #18]
 8018236:	461a      	mov	r2, r3
 8018238:	68f8      	ldr	r0, [r7, #12]
 801823a:	f000 f893 	bl	8018364 <udp_bind>
 801823e:	4603      	mov	r3, r0
 8018240:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8018242:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d002      	beq.n	8018250 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801824a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801824e:	e074      	b.n	801833a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018250:	68bb      	ldr	r3, [r7, #8]
 8018252:	891b      	ldrh	r3, [r3, #8]
 8018254:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018258:	4293      	cmp	r3, r2
 801825a:	d902      	bls.n	8018262 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801825c:	f04f 33ff 	mov.w	r3, #4294967295
 8018260:	e06b      	b.n	801833a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018262:	2108      	movs	r1, #8
 8018264:	68b8      	ldr	r0, [r7, #8]
 8018266:	f7f8 ff65 	bl	8011134 <pbuf_add_header>
 801826a:	4603      	mov	r3, r0
 801826c:	2b00      	cmp	r3, #0
 801826e:	d015      	beq.n	801829c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018270:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018274:	2108      	movs	r1, #8
 8018276:	2022      	movs	r0, #34	; 0x22
 8018278:	f7f8 fd0e 	bl	8010c98 <pbuf_alloc>
 801827c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801827e:	69fb      	ldr	r3, [r7, #28]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d102      	bne.n	801828a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018284:	f04f 33ff 	mov.w	r3, #4294967295
 8018288:	e057      	b.n	801833a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801828a:	68bb      	ldr	r3, [r7, #8]
 801828c:	891b      	ldrh	r3, [r3, #8]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d006      	beq.n	80182a0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018292:	68b9      	ldr	r1, [r7, #8]
 8018294:	69f8      	ldr	r0, [r7, #28]
 8018296:	f7f9 f907 	bl	80114a8 <pbuf_chain>
 801829a:	e001      	b.n	80182a0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80182a0:	69fb      	ldr	r3, [r7, #28]
 80182a2:	895b      	ldrh	r3, [r3, #10]
 80182a4:	2b07      	cmp	r3, #7
 80182a6:	d806      	bhi.n	80182b6 <udp_sendto_if_src+0x11e>
 80182a8:	4b26      	ldr	r3, [pc, #152]	; (8018344 <udp_sendto_if_src+0x1ac>)
 80182aa:	f240 320d 	movw	r2, #781	; 0x30d
 80182ae:	492c      	ldr	r1, [pc, #176]	; (8018360 <udp_sendto_if_src+0x1c8>)
 80182b0:	4826      	ldr	r0, [pc, #152]	; (801834c <udp_sendto_if_src+0x1b4>)
 80182b2:	f003 fb3b 	bl	801b92c <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	685b      	ldr	r3, [r3, #4]
 80182ba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	8a5b      	ldrh	r3, [r3, #18]
 80182c0:	4618      	mov	r0, r3
 80182c2:	f7f7 fc11 	bl	800fae8 <lwip_htons>
 80182c6:	4603      	mov	r3, r0
 80182c8:	461a      	mov	r2, r3
 80182ca:	697b      	ldr	r3, [r7, #20]
 80182cc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80182ce:	887b      	ldrh	r3, [r7, #2]
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7f7 fc09 	bl	800fae8 <lwip_htons>
 80182d6:	4603      	mov	r3, r0
 80182d8:	461a      	mov	r2, r3
 80182da:	697b      	ldr	r3, [r7, #20]
 80182dc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	2200      	movs	r2, #0
 80182e2:	719a      	strb	r2, [r3, #6]
 80182e4:	2200      	movs	r2, #0
 80182e6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80182e8:	69fb      	ldr	r3, [r7, #28]
 80182ea:	891b      	ldrh	r3, [r3, #8]
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7f7 fbfb 	bl	800fae8 <lwip_htons>
 80182f2:	4603      	mov	r3, r0
 80182f4:	461a      	mov	r2, r3
 80182f6:	697b      	ldr	r3, [r7, #20]
 80182f8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80182fa:	2311      	movs	r3, #17
 80182fc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	7adb      	ldrb	r3, [r3, #11]
 8018302:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	7a9b      	ldrb	r3, [r3, #10]
 8018308:	7cb9      	ldrb	r1, [r7, #18]
 801830a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801830c:	9202      	str	r2, [sp, #8]
 801830e:	7cfa      	ldrb	r2, [r7, #19]
 8018310:	9201      	str	r2, [sp, #4]
 8018312:	9300      	str	r3, [sp, #0]
 8018314:	460b      	mov	r3, r1
 8018316:	687a      	ldr	r2, [r7, #4]
 8018318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801831a:	69f8      	ldr	r0, [r7, #28]
 801831c:	f001 fc22 	bl	8019b64 <ip4_output_if_src>
 8018320:	4603      	mov	r3, r0
 8018322:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018324:	69fa      	ldr	r2, [r7, #28]
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	429a      	cmp	r2, r3
 801832a:	d004      	beq.n	8018336 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801832c:	69f8      	ldr	r0, [r7, #28]
 801832e:	f7f8 ff97 	bl	8011260 <pbuf_free>
    q = NULL;
 8018332:	2300      	movs	r3, #0
 8018334:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018336:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801833a:	4618      	mov	r0, r3
 801833c:	3720      	adds	r7, #32
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}
 8018342:	bf00      	nop
 8018344:	080275f8 	.word	0x080275f8
 8018348:	080277e4 	.word	0x080277e4
 801834c:	0802764c 	.word	0x0802764c
 8018350:	08027804 	.word	0x08027804
 8018354:	08027824 	.word	0x08027824
 8018358:	08027848 	.word	0x08027848
 801835c:	0802786c 	.word	0x0802786c
 8018360:	08027890 	.word	0x08027890

08018364 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b086      	sub	sp, #24
 8018368:	af00      	add	r7, sp, #0
 801836a:	60f8      	str	r0, [r7, #12]
 801836c:	60b9      	str	r1, [r7, #8]
 801836e:	4613      	mov	r3, r2
 8018370:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018372:	68bb      	ldr	r3, [r7, #8]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d101      	bne.n	801837c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018378:	4b39      	ldr	r3, [pc, #228]	; (8018460 <udp_bind+0xfc>)
 801837a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d109      	bne.n	8018396 <udp_bind+0x32>
 8018382:	4b38      	ldr	r3, [pc, #224]	; (8018464 <udp_bind+0x100>)
 8018384:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018388:	4937      	ldr	r1, [pc, #220]	; (8018468 <udp_bind+0x104>)
 801838a:	4838      	ldr	r0, [pc, #224]	; (801846c <udp_bind+0x108>)
 801838c:	f003 face 	bl	801b92c <printf>
 8018390:	f06f 030f 	mvn.w	r3, #15
 8018394:	e060      	b.n	8018458 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018396:	2300      	movs	r3, #0
 8018398:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801839a:	4b35      	ldr	r3, [pc, #212]	; (8018470 <udp_bind+0x10c>)
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	617b      	str	r3, [r7, #20]
 80183a0:	e009      	b.n	80183b6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80183a2:	68fa      	ldr	r2, [r7, #12]
 80183a4:	697b      	ldr	r3, [r7, #20]
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d102      	bne.n	80183b0 <udp_bind+0x4c>
      rebind = 1;
 80183aa:	2301      	movs	r3, #1
 80183ac:	74fb      	strb	r3, [r7, #19]
      break;
 80183ae:	e005      	b.n	80183bc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80183b0:	697b      	ldr	r3, [r7, #20]
 80183b2:	68db      	ldr	r3, [r3, #12]
 80183b4:	617b      	str	r3, [r7, #20]
 80183b6:	697b      	ldr	r3, [r7, #20]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d1f2      	bne.n	80183a2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80183bc:	88fb      	ldrh	r3, [r7, #6]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d109      	bne.n	80183d6 <udp_bind+0x72>
    port = udp_new_port();
 80183c2:	f7ff fc35 	bl	8017c30 <udp_new_port>
 80183c6:	4603      	mov	r3, r0
 80183c8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80183ca:	88fb      	ldrh	r3, [r7, #6]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d12c      	bne.n	801842a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80183d0:	f06f 0307 	mvn.w	r3, #7
 80183d4:	e040      	b.n	8018458 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80183d6:	4b26      	ldr	r3, [pc, #152]	; (8018470 <udp_bind+0x10c>)
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	617b      	str	r3, [r7, #20]
 80183dc:	e022      	b.n	8018424 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80183de:	68fa      	ldr	r2, [r7, #12]
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d01b      	beq.n	801841e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80183e6:	697b      	ldr	r3, [r7, #20]
 80183e8:	8a5b      	ldrh	r3, [r3, #18]
 80183ea:	88fa      	ldrh	r2, [r7, #6]
 80183ec:	429a      	cmp	r2, r3
 80183ee:	d116      	bne.n	801841e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	681a      	ldr	r2, [r3, #0]
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d00d      	beq.n	8018418 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80183fc:	68bb      	ldr	r3, [r7, #8]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d00a      	beq.n	8018418 <udp_bind+0xb4>
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d006      	beq.n	8018418 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801840a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801840c:	2b00      	cmp	r3, #0
 801840e:	d003      	beq.n	8018418 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018410:	697b      	ldr	r3, [r7, #20]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d102      	bne.n	801841e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018418:	f06f 0307 	mvn.w	r3, #7
 801841c:	e01c      	b.n	8018458 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	68db      	ldr	r3, [r3, #12]
 8018422:	617b      	str	r3, [r7, #20]
 8018424:	697b      	ldr	r3, [r7, #20]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d1d9      	bne.n	80183de <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d002      	beq.n	8018436 <udp_bind+0xd2>
 8018430:	68bb      	ldr	r3, [r7, #8]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	e000      	b.n	8018438 <udp_bind+0xd4>
 8018436:	2300      	movs	r3, #0
 8018438:	68fa      	ldr	r2, [r7, #12]
 801843a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	88fa      	ldrh	r2, [r7, #6]
 8018440:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018442:	7cfb      	ldrb	r3, [r7, #19]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d106      	bne.n	8018456 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018448:	4b09      	ldr	r3, [pc, #36]	; (8018470 <udp_bind+0x10c>)
 801844a:	681a      	ldr	r2, [r3, #0]
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018450:	4a07      	ldr	r2, [pc, #28]	; (8018470 <udp_bind+0x10c>)
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018456:	2300      	movs	r3, #0
}
 8018458:	4618      	mov	r0, r3
 801845a:	3718      	adds	r7, #24
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}
 8018460:	08029094 	.word	0x08029094
 8018464:	080275f8 	.word	0x080275f8
 8018468:	080278c0 	.word	0x080278c0
 801846c:	0802764c 	.word	0x0802764c
 8018470:	2000be60 	.word	0x2000be60

08018474 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b084      	sub	sp, #16
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	60b9      	str	r1, [r7, #8]
 801847e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d107      	bne.n	8018496 <udp_recv+0x22>
 8018486:	4b08      	ldr	r3, [pc, #32]	; (80184a8 <udp_recv+0x34>)
 8018488:	f240 428a 	movw	r2, #1162	; 0x48a
 801848c:	4907      	ldr	r1, [pc, #28]	; (80184ac <udp_recv+0x38>)
 801848e:	4808      	ldr	r0, [pc, #32]	; (80184b0 <udp_recv+0x3c>)
 8018490:	f003 fa4c 	bl	801b92c <printf>
 8018494:	e005      	b.n	80184a2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	68ba      	ldr	r2, [r7, #8]
 801849a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	687a      	ldr	r2, [r7, #4]
 80184a0:	61da      	str	r2, [r3, #28]
}
 80184a2:	3710      	adds	r7, #16
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	080275f8 	.word	0x080275f8
 80184ac:	0802792c 	.word	0x0802792c
 80184b0:	0802764c 	.word	0x0802764c

080184b4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b084      	sub	sp, #16
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d107      	bne.n	80184d2 <udp_remove+0x1e>
 80184c2:	4b19      	ldr	r3, [pc, #100]	; (8018528 <udp_remove+0x74>)
 80184c4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80184c8:	4918      	ldr	r1, [pc, #96]	; (801852c <udp_remove+0x78>)
 80184ca:	4819      	ldr	r0, [pc, #100]	; (8018530 <udp_remove+0x7c>)
 80184cc:	f003 fa2e 	bl	801b92c <printf>
 80184d0:	e026      	b.n	8018520 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80184d2:	4b18      	ldr	r3, [pc, #96]	; (8018534 <udp_remove+0x80>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	687a      	ldr	r2, [r7, #4]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d105      	bne.n	80184e8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80184dc:	4b15      	ldr	r3, [pc, #84]	; (8018534 <udp_remove+0x80>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	68db      	ldr	r3, [r3, #12]
 80184e2:	4a14      	ldr	r2, [pc, #80]	; (8018534 <udp_remove+0x80>)
 80184e4:	6013      	str	r3, [r2, #0]
 80184e6:	e017      	b.n	8018518 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80184e8:	4b12      	ldr	r3, [pc, #72]	; (8018534 <udp_remove+0x80>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	60fb      	str	r3, [r7, #12]
 80184ee:	e010      	b.n	8018512 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d009      	beq.n	801850c <udp_remove+0x58>
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	68db      	ldr	r3, [r3, #12]
 80184fc:	687a      	ldr	r2, [r7, #4]
 80184fe:	429a      	cmp	r2, r3
 8018500:	d104      	bne.n	801850c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	68da      	ldr	r2, [r3, #12]
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	60da      	str	r2, [r3, #12]
        break;
 801850a:	e005      	b.n	8018518 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	68db      	ldr	r3, [r3, #12]
 8018510:	60fb      	str	r3, [r7, #12]
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d1eb      	bne.n	80184f0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018518:	6879      	ldr	r1, [r7, #4]
 801851a:	2000      	movs	r0, #0
 801851c:	f7f8 f822 	bl	8010564 <memp_free>
}
 8018520:	3710      	adds	r7, #16
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}
 8018526:	bf00      	nop
 8018528:	080275f8 	.word	0x080275f8
 801852c:	08027944 	.word	0x08027944
 8018530:	0802764c 	.word	0x0802764c
 8018534:	2000be60 	.word	0x2000be60

08018538 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801853e:	2000      	movs	r0, #0
 8018540:	f7f7 ffbe 	bl	80104c0 <memp_malloc>
 8018544:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d007      	beq.n	801855c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801854c:	2220      	movs	r2, #32
 801854e:	2100      	movs	r1, #0
 8018550:	6878      	ldr	r0, [r7, #4]
 8018552:	f002 ff65 	bl	801b420 <memset>
    pcb->ttl = UDP_TTL;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	22ff      	movs	r2, #255	; 0xff
 801855a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801855c:	687b      	ldr	r3, [r7, #4]
}
 801855e:	4618      	mov	r0, r3
 8018560:	3708      	adds	r7, #8
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}

08018566 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018566:	b580      	push	{r7, lr}
 8018568:	b084      	sub	sp, #16
 801856a:	af00      	add	r7, sp, #0
 801856c:	4603      	mov	r3, r0
 801856e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018570:	f7ff ffe2 	bl	8018538 <udp_new>
 8018574:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018576:	68fb      	ldr	r3, [r7, #12]
}
 8018578:	4618      	mov	r0, r3
 801857a:	3710      	adds	r7, #16
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}

08018580 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018580:	b480      	push	{r7}
 8018582:	b085      	sub	sp, #20
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
 8018588:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d01e      	beq.n	80185ce <udp_netif_ip_addr_changed+0x4e>
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d01a      	beq.n	80185ce <udp_netif_ip_addr_changed+0x4e>
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d017      	beq.n	80185ce <udp_netif_ip_addr_changed+0x4e>
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d013      	beq.n	80185ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80185a6:	4b0d      	ldr	r3, [pc, #52]	; (80185dc <udp_netif_ip_addr_changed+0x5c>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	60fb      	str	r3, [r7, #12]
 80185ac:	e00c      	b.n	80185c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	681a      	ldr	r2, [r3, #0]
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	429a      	cmp	r2, r3
 80185b8:	d103      	bne.n	80185c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80185ba:	683b      	ldr	r3, [r7, #0]
 80185bc:	681a      	ldr	r2, [r3, #0]
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	68db      	ldr	r3, [r3, #12]
 80185c6:	60fb      	str	r3, [r7, #12]
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d1ef      	bne.n	80185ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80185ce:	bf00      	nop
 80185d0:	3714      	adds	r7, #20
 80185d2:	46bd      	mov	sp, r7
 80185d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d8:	4770      	bx	lr
 80185da:	bf00      	nop
 80185dc:	2000be60 	.word	0x2000be60

080185e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b082      	sub	sp, #8
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80185e8:	4915      	ldr	r1, [pc, #84]	; (8018640 <etharp_free_entry+0x60>)
 80185ea:	687a      	ldr	r2, [r7, #4]
 80185ec:	4613      	mov	r3, r2
 80185ee:	005b      	lsls	r3, r3, #1
 80185f0:	4413      	add	r3, r2
 80185f2:	00db      	lsls	r3, r3, #3
 80185f4:	440b      	add	r3, r1
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d013      	beq.n	8018624 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80185fc:	4910      	ldr	r1, [pc, #64]	; (8018640 <etharp_free_entry+0x60>)
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	4613      	mov	r3, r2
 8018602:	005b      	lsls	r3, r3, #1
 8018604:	4413      	add	r3, r2
 8018606:	00db      	lsls	r3, r3, #3
 8018608:	440b      	add	r3, r1
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	4618      	mov	r0, r3
 801860e:	f7f8 fe27 	bl	8011260 <pbuf_free>
    arp_table[i].q = NULL;
 8018612:	490b      	ldr	r1, [pc, #44]	; (8018640 <etharp_free_entry+0x60>)
 8018614:	687a      	ldr	r2, [r7, #4]
 8018616:	4613      	mov	r3, r2
 8018618:	005b      	lsls	r3, r3, #1
 801861a:	4413      	add	r3, r2
 801861c:	00db      	lsls	r3, r3, #3
 801861e:	440b      	add	r3, r1
 8018620:	2200      	movs	r2, #0
 8018622:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018624:	4906      	ldr	r1, [pc, #24]	; (8018640 <etharp_free_entry+0x60>)
 8018626:	687a      	ldr	r2, [r7, #4]
 8018628:	4613      	mov	r3, r2
 801862a:	005b      	lsls	r3, r3, #1
 801862c:	4413      	add	r3, r2
 801862e:	00db      	lsls	r3, r3, #3
 8018630:	440b      	add	r3, r1
 8018632:	3314      	adds	r3, #20
 8018634:	2200      	movs	r2, #0
 8018636:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018638:	bf00      	nop
 801863a:	3708      	adds	r7, #8
 801863c:	46bd      	mov	sp, r7
 801863e:	bd80      	pop	{r7, pc}
 8018640:	20004f78 	.word	0x20004f78

08018644 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b082      	sub	sp, #8
 8018648:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801864a:	2300      	movs	r3, #0
 801864c:	607b      	str	r3, [r7, #4]
 801864e:	e096      	b.n	801877e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018650:	494f      	ldr	r1, [pc, #316]	; (8018790 <etharp_tmr+0x14c>)
 8018652:	687a      	ldr	r2, [r7, #4]
 8018654:	4613      	mov	r3, r2
 8018656:	005b      	lsls	r3, r3, #1
 8018658:	4413      	add	r3, r2
 801865a:	00db      	lsls	r3, r3, #3
 801865c:	440b      	add	r3, r1
 801865e:	3314      	adds	r3, #20
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018664:	78fb      	ldrb	r3, [r7, #3]
 8018666:	2b00      	cmp	r3, #0
 8018668:	f000 8086 	beq.w	8018778 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801866c:	4948      	ldr	r1, [pc, #288]	; (8018790 <etharp_tmr+0x14c>)
 801866e:	687a      	ldr	r2, [r7, #4]
 8018670:	4613      	mov	r3, r2
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	4413      	add	r3, r2
 8018676:	00db      	lsls	r3, r3, #3
 8018678:	440b      	add	r3, r1
 801867a:	3312      	adds	r3, #18
 801867c:	881b      	ldrh	r3, [r3, #0]
 801867e:	3301      	adds	r3, #1
 8018680:	b298      	uxth	r0, r3
 8018682:	4943      	ldr	r1, [pc, #268]	; (8018790 <etharp_tmr+0x14c>)
 8018684:	687a      	ldr	r2, [r7, #4]
 8018686:	4613      	mov	r3, r2
 8018688:	005b      	lsls	r3, r3, #1
 801868a:	4413      	add	r3, r2
 801868c:	00db      	lsls	r3, r3, #3
 801868e:	440b      	add	r3, r1
 8018690:	3312      	adds	r3, #18
 8018692:	4602      	mov	r2, r0
 8018694:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018696:	493e      	ldr	r1, [pc, #248]	; (8018790 <etharp_tmr+0x14c>)
 8018698:	687a      	ldr	r2, [r7, #4]
 801869a:	4613      	mov	r3, r2
 801869c:	005b      	lsls	r3, r3, #1
 801869e:	4413      	add	r3, r2
 80186a0:	00db      	lsls	r3, r3, #3
 80186a2:	440b      	add	r3, r1
 80186a4:	3312      	adds	r3, #18
 80186a6:	881b      	ldrh	r3, [r3, #0]
 80186a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80186ac:	d215      	bcs.n	80186da <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80186ae:	4938      	ldr	r1, [pc, #224]	; (8018790 <etharp_tmr+0x14c>)
 80186b0:	687a      	ldr	r2, [r7, #4]
 80186b2:	4613      	mov	r3, r2
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	4413      	add	r3, r2
 80186b8:	00db      	lsls	r3, r3, #3
 80186ba:	440b      	add	r3, r1
 80186bc:	3314      	adds	r3, #20
 80186be:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80186c0:	2b01      	cmp	r3, #1
 80186c2:	d10e      	bne.n	80186e2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80186c4:	4932      	ldr	r1, [pc, #200]	; (8018790 <etharp_tmr+0x14c>)
 80186c6:	687a      	ldr	r2, [r7, #4]
 80186c8:	4613      	mov	r3, r2
 80186ca:	005b      	lsls	r3, r3, #1
 80186cc:	4413      	add	r3, r2
 80186ce:	00db      	lsls	r3, r3, #3
 80186d0:	440b      	add	r3, r1
 80186d2:	3312      	adds	r3, #18
 80186d4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80186d6:	2b04      	cmp	r3, #4
 80186d8:	d903      	bls.n	80186e2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80186da:	6878      	ldr	r0, [r7, #4]
 80186dc:	f7ff ff80 	bl	80185e0 <etharp_free_entry>
 80186e0:	e04a      	b.n	8018778 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80186e2:	492b      	ldr	r1, [pc, #172]	; (8018790 <etharp_tmr+0x14c>)
 80186e4:	687a      	ldr	r2, [r7, #4]
 80186e6:	4613      	mov	r3, r2
 80186e8:	005b      	lsls	r3, r3, #1
 80186ea:	4413      	add	r3, r2
 80186ec:	00db      	lsls	r3, r3, #3
 80186ee:	440b      	add	r3, r1
 80186f0:	3314      	adds	r3, #20
 80186f2:	781b      	ldrb	r3, [r3, #0]
 80186f4:	2b03      	cmp	r3, #3
 80186f6:	d10a      	bne.n	801870e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80186f8:	4925      	ldr	r1, [pc, #148]	; (8018790 <etharp_tmr+0x14c>)
 80186fa:	687a      	ldr	r2, [r7, #4]
 80186fc:	4613      	mov	r3, r2
 80186fe:	005b      	lsls	r3, r3, #1
 8018700:	4413      	add	r3, r2
 8018702:	00db      	lsls	r3, r3, #3
 8018704:	440b      	add	r3, r1
 8018706:	3314      	adds	r3, #20
 8018708:	2204      	movs	r2, #4
 801870a:	701a      	strb	r2, [r3, #0]
 801870c:	e034      	b.n	8018778 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801870e:	4920      	ldr	r1, [pc, #128]	; (8018790 <etharp_tmr+0x14c>)
 8018710:	687a      	ldr	r2, [r7, #4]
 8018712:	4613      	mov	r3, r2
 8018714:	005b      	lsls	r3, r3, #1
 8018716:	4413      	add	r3, r2
 8018718:	00db      	lsls	r3, r3, #3
 801871a:	440b      	add	r3, r1
 801871c:	3314      	adds	r3, #20
 801871e:	781b      	ldrb	r3, [r3, #0]
 8018720:	2b04      	cmp	r3, #4
 8018722:	d10a      	bne.n	801873a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018724:	491a      	ldr	r1, [pc, #104]	; (8018790 <etharp_tmr+0x14c>)
 8018726:	687a      	ldr	r2, [r7, #4]
 8018728:	4613      	mov	r3, r2
 801872a:	005b      	lsls	r3, r3, #1
 801872c:	4413      	add	r3, r2
 801872e:	00db      	lsls	r3, r3, #3
 8018730:	440b      	add	r3, r1
 8018732:	3314      	adds	r3, #20
 8018734:	2202      	movs	r2, #2
 8018736:	701a      	strb	r2, [r3, #0]
 8018738:	e01e      	b.n	8018778 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801873a:	4915      	ldr	r1, [pc, #84]	; (8018790 <etharp_tmr+0x14c>)
 801873c:	687a      	ldr	r2, [r7, #4]
 801873e:	4613      	mov	r3, r2
 8018740:	005b      	lsls	r3, r3, #1
 8018742:	4413      	add	r3, r2
 8018744:	00db      	lsls	r3, r3, #3
 8018746:	440b      	add	r3, r1
 8018748:	3314      	adds	r3, #20
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	2b01      	cmp	r3, #1
 801874e:	d113      	bne.n	8018778 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018750:	490f      	ldr	r1, [pc, #60]	; (8018790 <etharp_tmr+0x14c>)
 8018752:	687a      	ldr	r2, [r7, #4]
 8018754:	4613      	mov	r3, r2
 8018756:	005b      	lsls	r3, r3, #1
 8018758:	4413      	add	r3, r2
 801875a:	00db      	lsls	r3, r3, #3
 801875c:	440b      	add	r3, r1
 801875e:	3308      	adds	r3, #8
 8018760:	6818      	ldr	r0, [r3, #0]
 8018762:	687a      	ldr	r2, [r7, #4]
 8018764:	4613      	mov	r3, r2
 8018766:	005b      	lsls	r3, r3, #1
 8018768:	4413      	add	r3, r2
 801876a:	00db      	lsls	r3, r3, #3
 801876c:	4a08      	ldr	r2, [pc, #32]	; (8018790 <etharp_tmr+0x14c>)
 801876e:	4413      	add	r3, r2
 8018770:	3304      	adds	r3, #4
 8018772:	4619      	mov	r1, r3
 8018774:	f000 fe6e 	bl	8019454 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	3301      	adds	r3, #1
 801877c:	607b      	str	r3, [r7, #4]
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	2b09      	cmp	r3, #9
 8018782:	f77f af65 	ble.w	8018650 <etharp_tmr+0xc>
      }
    }
  }
}
 8018786:	bf00      	nop
 8018788:	bf00      	nop
 801878a:	3708      	adds	r7, #8
 801878c:	46bd      	mov	sp, r7
 801878e:	bd80      	pop	{r7, pc}
 8018790:	20004f78 	.word	0x20004f78

08018794 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b08a      	sub	sp, #40	; 0x28
 8018798:	af00      	add	r7, sp, #0
 801879a:	60f8      	str	r0, [r7, #12]
 801879c:	460b      	mov	r3, r1
 801879e:	607a      	str	r2, [r7, #4]
 80187a0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80187a2:	230a      	movs	r3, #10
 80187a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80187a6:	230a      	movs	r3, #10
 80187a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80187aa:	230a      	movs	r3, #10
 80187ac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80187ae:	2300      	movs	r3, #0
 80187b0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80187b2:	230a      	movs	r3, #10
 80187b4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80187b6:	2300      	movs	r3, #0
 80187b8:	83bb      	strh	r3, [r7, #28]
 80187ba:	2300      	movs	r3, #0
 80187bc:	837b      	strh	r3, [r7, #26]
 80187be:	2300      	movs	r3, #0
 80187c0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80187c2:	2300      	movs	r3, #0
 80187c4:	843b      	strh	r3, [r7, #32]
 80187c6:	e0ae      	b.n	8018926 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80187c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187cc:	49a6      	ldr	r1, [pc, #664]	; (8018a68 <etharp_find_entry+0x2d4>)
 80187ce:	4613      	mov	r3, r2
 80187d0:	005b      	lsls	r3, r3, #1
 80187d2:	4413      	add	r3, r2
 80187d4:	00db      	lsls	r3, r3, #3
 80187d6:	440b      	add	r3, r1
 80187d8:	3314      	adds	r3, #20
 80187da:	781b      	ldrb	r3, [r3, #0]
 80187dc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80187de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80187e2:	2b0a      	cmp	r3, #10
 80187e4:	d105      	bne.n	80187f2 <etharp_find_entry+0x5e>
 80187e6:	7dfb      	ldrb	r3, [r7, #23]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d102      	bne.n	80187f2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80187ec:	8c3b      	ldrh	r3, [r7, #32]
 80187ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80187f0:	e095      	b.n	801891e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80187f2:	7dfb      	ldrb	r3, [r7, #23]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	f000 8092 	beq.w	801891e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80187fa:	7dfb      	ldrb	r3, [r7, #23]
 80187fc:	2b01      	cmp	r3, #1
 80187fe:	d009      	beq.n	8018814 <etharp_find_entry+0x80>
 8018800:	7dfb      	ldrb	r3, [r7, #23]
 8018802:	2b01      	cmp	r3, #1
 8018804:	d806      	bhi.n	8018814 <etharp_find_entry+0x80>
 8018806:	4b99      	ldr	r3, [pc, #612]	; (8018a6c <etharp_find_entry+0x2d8>)
 8018808:	f240 1223 	movw	r2, #291	; 0x123
 801880c:	4998      	ldr	r1, [pc, #608]	; (8018a70 <etharp_find_entry+0x2dc>)
 801880e:	4899      	ldr	r0, [pc, #612]	; (8018a74 <etharp_find_entry+0x2e0>)
 8018810:	f003 f88c 	bl	801b92c <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d020      	beq.n	801885c <etharp_find_entry+0xc8>
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	6819      	ldr	r1, [r3, #0]
 801881e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018822:	4891      	ldr	r0, [pc, #580]	; (8018a68 <etharp_find_entry+0x2d4>)
 8018824:	4613      	mov	r3, r2
 8018826:	005b      	lsls	r3, r3, #1
 8018828:	4413      	add	r3, r2
 801882a:	00db      	lsls	r3, r3, #3
 801882c:	4403      	add	r3, r0
 801882e:	3304      	adds	r3, #4
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	4299      	cmp	r1, r3
 8018834:	d112      	bne.n	801885c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d00c      	beq.n	8018856 <etharp_find_entry+0xc2>
 801883c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018840:	4989      	ldr	r1, [pc, #548]	; (8018a68 <etharp_find_entry+0x2d4>)
 8018842:	4613      	mov	r3, r2
 8018844:	005b      	lsls	r3, r3, #1
 8018846:	4413      	add	r3, r2
 8018848:	00db      	lsls	r3, r3, #3
 801884a:	440b      	add	r3, r1
 801884c:	3308      	adds	r3, #8
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	687a      	ldr	r2, [r7, #4]
 8018852:	429a      	cmp	r2, r3
 8018854:	d102      	bne.n	801885c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018856:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801885a:	e100      	b.n	8018a5e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801885c:	7dfb      	ldrb	r3, [r7, #23]
 801885e:	2b01      	cmp	r3, #1
 8018860:	d140      	bne.n	80188e4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018866:	4980      	ldr	r1, [pc, #512]	; (8018a68 <etharp_find_entry+0x2d4>)
 8018868:	4613      	mov	r3, r2
 801886a:	005b      	lsls	r3, r3, #1
 801886c:	4413      	add	r3, r2
 801886e:	00db      	lsls	r3, r3, #3
 8018870:	440b      	add	r3, r1
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d01a      	beq.n	80188ae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801887c:	497a      	ldr	r1, [pc, #488]	; (8018a68 <etharp_find_entry+0x2d4>)
 801887e:	4613      	mov	r3, r2
 8018880:	005b      	lsls	r3, r3, #1
 8018882:	4413      	add	r3, r2
 8018884:	00db      	lsls	r3, r3, #3
 8018886:	440b      	add	r3, r1
 8018888:	3312      	adds	r3, #18
 801888a:	881b      	ldrh	r3, [r3, #0]
 801888c:	8bba      	ldrh	r2, [r7, #28]
 801888e:	429a      	cmp	r2, r3
 8018890:	d845      	bhi.n	801891e <etharp_find_entry+0x18a>
            old_queue = i;
 8018892:	8c3b      	ldrh	r3, [r7, #32]
 8018894:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801889a:	4973      	ldr	r1, [pc, #460]	; (8018a68 <etharp_find_entry+0x2d4>)
 801889c:	4613      	mov	r3, r2
 801889e:	005b      	lsls	r3, r3, #1
 80188a0:	4413      	add	r3, r2
 80188a2:	00db      	lsls	r3, r3, #3
 80188a4:	440b      	add	r3, r1
 80188a6:	3312      	adds	r3, #18
 80188a8:	881b      	ldrh	r3, [r3, #0]
 80188aa:	83bb      	strh	r3, [r7, #28]
 80188ac:	e037      	b.n	801891e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80188ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188b2:	496d      	ldr	r1, [pc, #436]	; (8018a68 <etharp_find_entry+0x2d4>)
 80188b4:	4613      	mov	r3, r2
 80188b6:	005b      	lsls	r3, r3, #1
 80188b8:	4413      	add	r3, r2
 80188ba:	00db      	lsls	r3, r3, #3
 80188bc:	440b      	add	r3, r1
 80188be:	3312      	adds	r3, #18
 80188c0:	881b      	ldrh	r3, [r3, #0]
 80188c2:	8b7a      	ldrh	r2, [r7, #26]
 80188c4:	429a      	cmp	r2, r3
 80188c6:	d82a      	bhi.n	801891e <etharp_find_entry+0x18a>
            old_pending = i;
 80188c8:	8c3b      	ldrh	r3, [r7, #32]
 80188ca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80188cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188d0:	4965      	ldr	r1, [pc, #404]	; (8018a68 <etharp_find_entry+0x2d4>)
 80188d2:	4613      	mov	r3, r2
 80188d4:	005b      	lsls	r3, r3, #1
 80188d6:	4413      	add	r3, r2
 80188d8:	00db      	lsls	r3, r3, #3
 80188da:	440b      	add	r3, r1
 80188dc:	3312      	adds	r3, #18
 80188de:	881b      	ldrh	r3, [r3, #0]
 80188e0:	837b      	strh	r3, [r7, #26]
 80188e2:	e01c      	b.n	801891e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80188e4:	7dfb      	ldrb	r3, [r7, #23]
 80188e6:	2b01      	cmp	r3, #1
 80188e8:	d919      	bls.n	801891e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80188ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188ee:	495e      	ldr	r1, [pc, #376]	; (8018a68 <etharp_find_entry+0x2d4>)
 80188f0:	4613      	mov	r3, r2
 80188f2:	005b      	lsls	r3, r3, #1
 80188f4:	4413      	add	r3, r2
 80188f6:	00db      	lsls	r3, r3, #3
 80188f8:	440b      	add	r3, r1
 80188fa:	3312      	adds	r3, #18
 80188fc:	881b      	ldrh	r3, [r3, #0]
 80188fe:	8b3a      	ldrh	r2, [r7, #24]
 8018900:	429a      	cmp	r2, r3
 8018902:	d80c      	bhi.n	801891e <etharp_find_entry+0x18a>
            old_stable = i;
 8018904:	8c3b      	ldrh	r3, [r7, #32]
 8018906:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018908:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801890c:	4956      	ldr	r1, [pc, #344]	; (8018a68 <etharp_find_entry+0x2d4>)
 801890e:	4613      	mov	r3, r2
 8018910:	005b      	lsls	r3, r3, #1
 8018912:	4413      	add	r3, r2
 8018914:	00db      	lsls	r3, r3, #3
 8018916:	440b      	add	r3, r1
 8018918:	3312      	adds	r3, #18
 801891a:	881b      	ldrh	r3, [r3, #0]
 801891c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801891e:	8c3b      	ldrh	r3, [r7, #32]
 8018920:	3301      	adds	r3, #1
 8018922:	b29b      	uxth	r3, r3
 8018924:	843b      	strh	r3, [r7, #32]
 8018926:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801892a:	2b09      	cmp	r3, #9
 801892c:	f77f af4c 	ble.w	80187c8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018930:	7afb      	ldrb	r3, [r7, #11]
 8018932:	f003 0302 	and.w	r3, r3, #2
 8018936:	2b00      	cmp	r3, #0
 8018938:	d108      	bne.n	801894c <etharp_find_entry+0x1b8>
 801893a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801893e:	2b0a      	cmp	r3, #10
 8018940:	d107      	bne.n	8018952 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018942:	7afb      	ldrb	r3, [r7, #11]
 8018944:	f003 0301 	and.w	r3, r3, #1
 8018948:	2b00      	cmp	r3, #0
 801894a:	d102      	bne.n	8018952 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801894c:	f04f 33ff 	mov.w	r3, #4294967295
 8018950:	e085      	b.n	8018a5e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018952:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018956:	2b09      	cmp	r3, #9
 8018958:	dc02      	bgt.n	8018960 <etharp_find_entry+0x1cc>
    i = empty;
 801895a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801895c:	843b      	strh	r3, [r7, #32]
 801895e:	e039      	b.n	80189d4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018960:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018964:	2b09      	cmp	r3, #9
 8018966:	dc14      	bgt.n	8018992 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801896a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801896c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018970:	493d      	ldr	r1, [pc, #244]	; (8018a68 <etharp_find_entry+0x2d4>)
 8018972:	4613      	mov	r3, r2
 8018974:	005b      	lsls	r3, r3, #1
 8018976:	4413      	add	r3, r2
 8018978:	00db      	lsls	r3, r3, #3
 801897a:	440b      	add	r3, r1
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d018      	beq.n	80189b4 <etharp_find_entry+0x220>
 8018982:	4b3a      	ldr	r3, [pc, #232]	; (8018a6c <etharp_find_entry+0x2d8>)
 8018984:	f240 126d 	movw	r2, #365	; 0x16d
 8018988:	493b      	ldr	r1, [pc, #236]	; (8018a78 <etharp_find_entry+0x2e4>)
 801898a:	483a      	ldr	r0, [pc, #232]	; (8018a74 <etharp_find_entry+0x2e0>)
 801898c:	f002 ffce 	bl	801b92c <printf>
 8018990:	e010      	b.n	80189b4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018992:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018996:	2b09      	cmp	r3, #9
 8018998:	dc02      	bgt.n	80189a0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801899a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801899c:	843b      	strh	r3, [r7, #32]
 801899e:	e009      	b.n	80189b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80189a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80189a4:	2b09      	cmp	r3, #9
 80189a6:	dc02      	bgt.n	80189ae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80189a8:	8bfb      	ldrh	r3, [r7, #30]
 80189aa:	843b      	strh	r3, [r7, #32]
 80189ac:	e002      	b.n	80189b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80189ae:	f04f 33ff 	mov.w	r3, #4294967295
 80189b2:	e054      	b.n	8018a5e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80189b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80189b8:	2b09      	cmp	r3, #9
 80189ba:	dd06      	ble.n	80189ca <etharp_find_entry+0x236>
 80189bc:	4b2b      	ldr	r3, [pc, #172]	; (8018a6c <etharp_find_entry+0x2d8>)
 80189be:	f240 127f 	movw	r2, #383	; 0x17f
 80189c2:	492e      	ldr	r1, [pc, #184]	; (8018a7c <etharp_find_entry+0x2e8>)
 80189c4:	482b      	ldr	r0, [pc, #172]	; (8018a74 <etharp_find_entry+0x2e0>)
 80189c6:	f002 ffb1 	bl	801b92c <printf>
    etharp_free_entry(i);
 80189ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80189ce:	4618      	mov	r0, r3
 80189d0:	f7ff fe06 	bl	80185e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80189d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80189d8:	2b09      	cmp	r3, #9
 80189da:	dd06      	ble.n	80189ea <etharp_find_entry+0x256>
 80189dc:	4b23      	ldr	r3, [pc, #140]	; (8018a6c <etharp_find_entry+0x2d8>)
 80189de:	f240 1283 	movw	r2, #387	; 0x183
 80189e2:	4926      	ldr	r1, [pc, #152]	; (8018a7c <etharp_find_entry+0x2e8>)
 80189e4:	4823      	ldr	r0, [pc, #140]	; (8018a74 <etharp_find_entry+0x2e0>)
 80189e6:	f002 ffa1 	bl	801b92c <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80189ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80189ee:	491e      	ldr	r1, [pc, #120]	; (8018a68 <etharp_find_entry+0x2d4>)
 80189f0:	4613      	mov	r3, r2
 80189f2:	005b      	lsls	r3, r3, #1
 80189f4:	4413      	add	r3, r2
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	440b      	add	r3, r1
 80189fa:	3314      	adds	r3, #20
 80189fc:	781b      	ldrb	r3, [r3, #0]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d006      	beq.n	8018a10 <etharp_find_entry+0x27c>
 8018a02:	4b1a      	ldr	r3, [pc, #104]	; (8018a6c <etharp_find_entry+0x2d8>)
 8018a04:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018a08:	491d      	ldr	r1, [pc, #116]	; (8018a80 <etharp_find_entry+0x2ec>)
 8018a0a:	481a      	ldr	r0, [pc, #104]	; (8018a74 <etharp_find_entry+0x2e0>)
 8018a0c:	f002 ff8e 	bl	801b92c <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d00b      	beq.n	8018a2e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	6819      	ldr	r1, [r3, #0]
 8018a1e:	4812      	ldr	r0, [pc, #72]	; (8018a68 <etharp_find_entry+0x2d4>)
 8018a20:	4613      	mov	r3, r2
 8018a22:	005b      	lsls	r3, r3, #1
 8018a24:	4413      	add	r3, r2
 8018a26:	00db      	lsls	r3, r3, #3
 8018a28:	4403      	add	r3, r0
 8018a2a:	3304      	adds	r3, #4
 8018a2c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018a2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a32:	490d      	ldr	r1, [pc, #52]	; (8018a68 <etharp_find_entry+0x2d4>)
 8018a34:	4613      	mov	r3, r2
 8018a36:	005b      	lsls	r3, r3, #1
 8018a38:	4413      	add	r3, r2
 8018a3a:	00db      	lsls	r3, r3, #3
 8018a3c:	440b      	add	r3, r1
 8018a3e:	3312      	adds	r3, #18
 8018a40:	2200      	movs	r2, #0
 8018a42:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018a44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a48:	4907      	ldr	r1, [pc, #28]	; (8018a68 <etharp_find_entry+0x2d4>)
 8018a4a:	4613      	mov	r3, r2
 8018a4c:	005b      	lsls	r3, r3, #1
 8018a4e:	4413      	add	r3, r2
 8018a50:	00db      	lsls	r3, r3, #3
 8018a52:	440b      	add	r3, r1
 8018a54:	3308      	adds	r3, #8
 8018a56:	687a      	ldr	r2, [r7, #4]
 8018a58:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018a5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3728      	adds	r7, #40	; 0x28
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop
 8018a68:	20004f78 	.word	0x20004f78
 8018a6c:	0802795c 	.word	0x0802795c
 8018a70:	08027994 	.word	0x08027994
 8018a74:	080279d4 	.word	0x080279d4
 8018a78:	080279fc 	.word	0x080279fc
 8018a7c:	08027a14 	.word	0x08027a14
 8018a80:	08027a28 	.word	0x08027a28

08018a84 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b088      	sub	sp, #32
 8018a88:	af02      	add	r7, sp, #8
 8018a8a:	60f8      	str	r0, [r7, #12]
 8018a8c:	60b9      	str	r1, [r7, #8]
 8018a8e:	607a      	str	r2, [r7, #4]
 8018a90:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a98:	2b06      	cmp	r3, #6
 8018a9a:	d006      	beq.n	8018aaa <etharp_update_arp_entry+0x26>
 8018a9c:	4b48      	ldr	r3, [pc, #288]	; (8018bc0 <etharp_update_arp_entry+0x13c>)
 8018a9e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018aa2:	4948      	ldr	r1, [pc, #288]	; (8018bc4 <etharp_update_arp_entry+0x140>)
 8018aa4:	4848      	ldr	r0, [pc, #288]	; (8018bc8 <etharp_update_arp_entry+0x144>)
 8018aa6:	f002 ff41 	bl	801b92c <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018aaa:	68bb      	ldr	r3, [r7, #8]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d012      	beq.n	8018ad6 <etharp_update_arp_entry+0x52>
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d00e      	beq.n	8018ad6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	68f9      	ldr	r1, [r7, #12]
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f001 f8fe 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 8018ac4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d105      	bne.n	8018ad6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018aca:	68bb      	ldr	r3, [r7, #8]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ad2:	2be0      	cmp	r3, #224	; 0xe0
 8018ad4:	d102      	bne.n	8018adc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018ad6:	f06f 030f 	mvn.w	r3, #15
 8018ada:	e06c      	b.n	8018bb6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018adc:	78fb      	ldrb	r3, [r7, #3]
 8018ade:	68fa      	ldr	r2, [r7, #12]
 8018ae0:	4619      	mov	r1, r3
 8018ae2:	68b8      	ldr	r0, [r7, #8]
 8018ae4:	f7ff fe56 	bl	8018794 <etharp_find_entry>
 8018ae8:	4603      	mov	r3, r0
 8018aea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018aec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	da02      	bge.n	8018afa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018af4:	8afb      	ldrh	r3, [r7, #22]
 8018af6:	b25b      	sxtb	r3, r3
 8018af8:	e05d      	b.n	8018bb6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018afe:	4933      	ldr	r1, [pc, #204]	; (8018bcc <etharp_update_arp_entry+0x148>)
 8018b00:	4613      	mov	r3, r2
 8018b02:	005b      	lsls	r3, r3, #1
 8018b04:	4413      	add	r3, r2
 8018b06:	00db      	lsls	r3, r3, #3
 8018b08:	440b      	add	r3, r1
 8018b0a:	3314      	adds	r3, #20
 8018b0c:	2202      	movs	r2, #2
 8018b0e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018b10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b14:	492d      	ldr	r1, [pc, #180]	; (8018bcc <etharp_update_arp_entry+0x148>)
 8018b16:	4613      	mov	r3, r2
 8018b18:	005b      	lsls	r3, r3, #1
 8018b1a:	4413      	add	r3, r2
 8018b1c:	00db      	lsls	r3, r3, #3
 8018b1e:	440b      	add	r3, r1
 8018b20:	3308      	adds	r3, #8
 8018b22:	68fa      	ldr	r2, [r7, #12]
 8018b24:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018b26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b2a:	4613      	mov	r3, r2
 8018b2c:	005b      	lsls	r3, r3, #1
 8018b2e:	4413      	add	r3, r2
 8018b30:	00db      	lsls	r3, r3, #3
 8018b32:	3308      	adds	r3, #8
 8018b34:	4a25      	ldr	r2, [pc, #148]	; (8018bcc <etharp_update_arp_entry+0x148>)
 8018b36:	4413      	add	r3, r2
 8018b38:	3304      	adds	r3, #4
 8018b3a:	2206      	movs	r2, #6
 8018b3c:	6879      	ldr	r1, [r7, #4]
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f002 fc46 	bl	801b3d0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018b44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b48:	4920      	ldr	r1, [pc, #128]	; (8018bcc <etharp_update_arp_entry+0x148>)
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	005b      	lsls	r3, r3, #1
 8018b4e:	4413      	add	r3, r2
 8018b50:	00db      	lsls	r3, r3, #3
 8018b52:	440b      	add	r3, r1
 8018b54:	3312      	adds	r3, #18
 8018b56:	2200      	movs	r2, #0
 8018b58:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018b5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b5e:	491b      	ldr	r1, [pc, #108]	; (8018bcc <etharp_update_arp_entry+0x148>)
 8018b60:	4613      	mov	r3, r2
 8018b62:	005b      	lsls	r3, r3, #1
 8018b64:	4413      	add	r3, r2
 8018b66:	00db      	lsls	r3, r3, #3
 8018b68:	440b      	add	r3, r1
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d021      	beq.n	8018bb4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018b70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b74:	4915      	ldr	r1, [pc, #84]	; (8018bcc <etharp_update_arp_entry+0x148>)
 8018b76:	4613      	mov	r3, r2
 8018b78:	005b      	lsls	r3, r3, #1
 8018b7a:	4413      	add	r3, r2
 8018b7c:	00db      	lsls	r3, r3, #3
 8018b7e:	440b      	add	r3, r1
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018b84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b88:	4910      	ldr	r1, [pc, #64]	; (8018bcc <etharp_update_arp_entry+0x148>)
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	005b      	lsls	r3, r3, #1
 8018b8e:	4413      	add	r3, r2
 8018b90:	00db      	lsls	r3, r3, #3
 8018b92:	440b      	add	r3, r1
 8018b94:	2200      	movs	r2, #0
 8018b96:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8018b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018ba2:	9300      	str	r3, [sp, #0]
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6939      	ldr	r1, [r7, #16]
 8018ba8:	68f8      	ldr	r0, [r7, #12]
 8018baa:	f002 f8bb 	bl	801ad24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018bae:	6938      	ldr	r0, [r7, #16]
 8018bb0:	f7f8 fb56 	bl	8011260 <pbuf_free>
  }
  return ERR_OK;
 8018bb4:	2300      	movs	r3, #0
}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	3718      	adds	r7, #24
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}
 8018bbe:	bf00      	nop
 8018bc0:	0802795c 	.word	0x0802795c
 8018bc4:	08027a54 	.word	0x08027a54
 8018bc8:	080279d4 	.word	0x080279d4
 8018bcc:	20004f78 	.word	0x20004f78

08018bd0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b084      	sub	sp, #16
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018bd8:	2300      	movs	r3, #0
 8018bda:	60fb      	str	r3, [r7, #12]
 8018bdc:	e01e      	b.n	8018c1c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018bde:	4913      	ldr	r1, [pc, #76]	; (8018c2c <etharp_cleanup_netif+0x5c>)
 8018be0:	68fa      	ldr	r2, [r7, #12]
 8018be2:	4613      	mov	r3, r2
 8018be4:	005b      	lsls	r3, r3, #1
 8018be6:	4413      	add	r3, r2
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	440b      	add	r3, r1
 8018bec:	3314      	adds	r3, #20
 8018bee:	781b      	ldrb	r3, [r3, #0]
 8018bf0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018bf2:	7afb      	ldrb	r3, [r7, #11]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d00e      	beq.n	8018c16 <etharp_cleanup_netif+0x46>
 8018bf8:	490c      	ldr	r1, [pc, #48]	; (8018c2c <etharp_cleanup_netif+0x5c>)
 8018bfa:	68fa      	ldr	r2, [r7, #12]
 8018bfc:	4613      	mov	r3, r2
 8018bfe:	005b      	lsls	r3, r3, #1
 8018c00:	4413      	add	r3, r2
 8018c02:	00db      	lsls	r3, r3, #3
 8018c04:	440b      	add	r3, r1
 8018c06:	3308      	adds	r3, #8
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	687a      	ldr	r2, [r7, #4]
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d102      	bne.n	8018c16 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018c10:	68f8      	ldr	r0, [r7, #12]
 8018c12:	f7ff fce5 	bl	80185e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	3301      	adds	r3, #1
 8018c1a:	60fb      	str	r3, [r7, #12]
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	2b09      	cmp	r3, #9
 8018c20:	dddd      	ble.n	8018bde <etharp_cleanup_netif+0xe>
    }
  }
}
 8018c22:	bf00      	nop
 8018c24:	bf00      	nop
 8018c26:	3710      	adds	r7, #16
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}
 8018c2c:	20004f78 	.word	0x20004f78

08018c30 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018c30:	b5b0      	push	{r4, r5, r7, lr}
 8018c32:	b08a      	sub	sp, #40	; 0x28
 8018c34:	af04      	add	r7, sp, #16
 8018c36:	6078      	str	r0, [r7, #4]
 8018c38:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d107      	bne.n	8018c50 <etharp_input+0x20>
 8018c40:	4b3d      	ldr	r3, [pc, #244]	; (8018d38 <etharp_input+0x108>)
 8018c42:	f240 228a 	movw	r2, #650	; 0x28a
 8018c46:	493d      	ldr	r1, [pc, #244]	; (8018d3c <etharp_input+0x10c>)
 8018c48:	483d      	ldr	r0, [pc, #244]	; (8018d40 <etharp_input+0x110>)
 8018c4a:	f002 fe6f 	bl	801b92c <printf>
 8018c4e:	e06f      	b.n	8018d30 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	685b      	ldr	r3, [r3, #4]
 8018c54:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018c56:	693b      	ldr	r3, [r7, #16]
 8018c58:	881b      	ldrh	r3, [r3, #0]
 8018c5a:	b29b      	uxth	r3, r3
 8018c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c60:	d10c      	bne.n	8018c7c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018c62:	693b      	ldr	r3, [r7, #16]
 8018c64:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018c66:	2b06      	cmp	r3, #6
 8018c68:	d108      	bne.n	8018c7c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018c6a:	693b      	ldr	r3, [r7, #16]
 8018c6c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018c6e:	2b04      	cmp	r3, #4
 8018c70:	d104      	bne.n	8018c7c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018c72:	693b      	ldr	r3, [r7, #16]
 8018c74:	885b      	ldrh	r3, [r3, #2]
 8018c76:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018c78:	2b08      	cmp	r3, #8
 8018c7a:	d003      	beq.n	8018c84 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018c7c:	6878      	ldr	r0, [r7, #4]
 8018c7e:	f7f8 faef 	bl	8011260 <pbuf_free>
    return;
 8018c82:	e055      	b.n	8018d30 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018c84:	693b      	ldr	r3, [r7, #16]
 8018c86:	330e      	adds	r3, #14
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018c8c:	693b      	ldr	r3, [r7, #16]
 8018c8e:	3318      	adds	r3, #24
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018c94:	683b      	ldr	r3, [r7, #0]
 8018c96:	3304      	adds	r3, #4
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d102      	bne.n	8018ca4 <etharp_input+0x74>
    for_us = 0;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	75fb      	strb	r3, [r7, #23]
 8018ca2:	e009      	b.n	8018cb8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018ca4:	68ba      	ldr	r2, [r7, #8]
 8018ca6:	683b      	ldr	r3, [r7, #0]
 8018ca8:	3304      	adds	r3, #4
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	429a      	cmp	r2, r3
 8018cae:	bf0c      	ite	eq
 8018cb0:	2301      	moveq	r3, #1
 8018cb2:	2300      	movne	r3, #0
 8018cb4:	b2db      	uxtb	r3, r3
 8018cb6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018cb8:	693b      	ldr	r3, [r7, #16]
 8018cba:	f103 0208 	add.w	r2, r3, #8
 8018cbe:	7dfb      	ldrb	r3, [r7, #23]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d001      	beq.n	8018cc8 <etharp_input+0x98>
 8018cc4:	2301      	movs	r3, #1
 8018cc6:	e000      	b.n	8018cca <etharp_input+0x9a>
 8018cc8:	2302      	movs	r3, #2
 8018cca:	f107 010c 	add.w	r1, r7, #12
 8018cce:	6838      	ldr	r0, [r7, #0]
 8018cd0:	f7ff fed8 	bl	8018a84 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	88db      	ldrh	r3, [r3, #6]
 8018cd8:	b29b      	uxth	r3, r3
 8018cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018cde:	d003      	beq.n	8018ce8 <etharp_input+0xb8>
 8018ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ce4:	d01e      	beq.n	8018d24 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018ce6:	e020      	b.n	8018d2a <etharp_input+0xfa>
      if (for_us) {
 8018ce8:	7dfb      	ldrb	r3, [r7, #23]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d01c      	beq.n	8018d28 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8018cf4:	693b      	ldr	r3, [r7, #16]
 8018cf6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018cfa:	683b      	ldr	r3, [r7, #0]
 8018cfc:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8018d00:	683b      	ldr	r3, [r7, #0]
 8018d02:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018d04:	693a      	ldr	r2, [r7, #16]
 8018d06:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018d08:	2102      	movs	r1, #2
 8018d0a:	9103      	str	r1, [sp, #12]
 8018d0c:	f107 010c 	add.w	r1, r7, #12
 8018d10:	9102      	str	r1, [sp, #8]
 8018d12:	9201      	str	r2, [sp, #4]
 8018d14:	9300      	str	r3, [sp, #0]
 8018d16:	462b      	mov	r3, r5
 8018d18:	4622      	mov	r2, r4
 8018d1a:	4601      	mov	r1, r0
 8018d1c:	6838      	ldr	r0, [r7, #0]
 8018d1e:	f000 faeb 	bl	80192f8 <etharp_raw>
      break;
 8018d22:	e001      	b.n	8018d28 <etharp_input+0xf8>
      break;
 8018d24:	bf00      	nop
 8018d26:	e000      	b.n	8018d2a <etharp_input+0xfa>
      break;
 8018d28:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	f7f8 fa98 	bl	8011260 <pbuf_free>
}
 8018d30:	3718      	adds	r7, #24
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bdb0      	pop	{r4, r5, r7, pc}
 8018d36:	bf00      	nop
 8018d38:	0802795c 	.word	0x0802795c
 8018d3c:	08027aac 	.word	0x08027aac
 8018d40:	080279d4 	.word	0x080279d4

08018d44 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b086      	sub	sp, #24
 8018d48:	af02      	add	r7, sp, #8
 8018d4a:	60f8      	str	r0, [r7, #12]
 8018d4c:	60b9      	str	r1, [r7, #8]
 8018d4e:	4613      	mov	r3, r2
 8018d50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018d52:	79fa      	ldrb	r2, [r7, #7]
 8018d54:	4944      	ldr	r1, [pc, #272]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018d56:	4613      	mov	r3, r2
 8018d58:	005b      	lsls	r3, r3, #1
 8018d5a:	4413      	add	r3, r2
 8018d5c:	00db      	lsls	r3, r3, #3
 8018d5e:	440b      	add	r3, r1
 8018d60:	3314      	adds	r3, #20
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	2b01      	cmp	r3, #1
 8018d66:	d806      	bhi.n	8018d76 <etharp_output_to_arp_index+0x32>
 8018d68:	4b40      	ldr	r3, [pc, #256]	; (8018e6c <etharp_output_to_arp_index+0x128>)
 8018d6a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018d6e:	4940      	ldr	r1, [pc, #256]	; (8018e70 <etharp_output_to_arp_index+0x12c>)
 8018d70:	4840      	ldr	r0, [pc, #256]	; (8018e74 <etharp_output_to_arp_index+0x130>)
 8018d72:	f002 fddb 	bl	801b92c <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018d76:	79fa      	ldrb	r2, [r7, #7]
 8018d78:	493b      	ldr	r1, [pc, #236]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018d7a:	4613      	mov	r3, r2
 8018d7c:	005b      	lsls	r3, r3, #1
 8018d7e:	4413      	add	r3, r2
 8018d80:	00db      	lsls	r3, r3, #3
 8018d82:	440b      	add	r3, r1
 8018d84:	3314      	adds	r3, #20
 8018d86:	781b      	ldrb	r3, [r3, #0]
 8018d88:	2b02      	cmp	r3, #2
 8018d8a:	d153      	bne.n	8018e34 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018d8c:	79fa      	ldrb	r2, [r7, #7]
 8018d8e:	4936      	ldr	r1, [pc, #216]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018d90:	4613      	mov	r3, r2
 8018d92:	005b      	lsls	r3, r3, #1
 8018d94:	4413      	add	r3, r2
 8018d96:	00db      	lsls	r3, r3, #3
 8018d98:	440b      	add	r3, r1
 8018d9a:	3312      	adds	r3, #18
 8018d9c:	881b      	ldrh	r3, [r3, #0]
 8018d9e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018da2:	d919      	bls.n	8018dd8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018da4:	79fa      	ldrb	r2, [r7, #7]
 8018da6:	4613      	mov	r3, r2
 8018da8:	005b      	lsls	r3, r3, #1
 8018daa:	4413      	add	r3, r2
 8018dac:	00db      	lsls	r3, r3, #3
 8018dae:	4a2e      	ldr	r2, [pc, #184]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018db0:	4413      	add	r3, r2
 8018db2:	3304      	adds	r3, #4
 8018db4:	4619      	mov	r1, r3
 8018db6:	68f8      	ldr	r0, [r7, #12]
 8018db8:	f000 fb4c 	bl	8019454 <etharp_request>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d138      	bne.n	8018e34 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018dc2:	79fa      	ldrb	r2, [r7, #7]
 8018dc4:	4928      	ldr	r1, [pc, #160]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	005b      	lsls	r3, r3, #1
 8018dca:	4413      	add	r3, r2
 8018dcc:	00db      	lsls	r3, r3, #3
 8018dce:	440b      	add	r3, r1
 8018dd0:	3314      	adds	r3, #20
 8018dd2:	2203      	movs	r2, #3
 8018dd4:	701a      	strb	r2, [r3, #0]
 8018dd6:	e02d      	b.n	8018e34 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018dd8:	79fa      	ldrb	r2, [r7, #7]
 8018dda:	4923      	ldr	r1, [pc, #140]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018ddc:	4613      	mov	r3, r2
 8018dde:	005b      	lsls	r3, r3, #1
 8018de0:	4413      	add	r3, r2
 8018de2:	00db      	lsls	r3, r3, #3
 8018de4:	440b      	add	r3, r1
 8018de6:	3312      	adds	r3, #18
 8018de8:	881b      	ldrh	r3, [r3, #0]
 8018dea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018dee:	d321      	bcc.n	8018e34 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018df0:	79fa      	ldrb	r2, [r7, #7]
 8018df2:	4613      	mov	r3, r2
 8018df4:	005b      	lsls	r3, r3, #1
 8018df6:	4413      	add	r3, r2
 8018df8:	00db      	lsls	r3, r3, #3
 8018dfa:	4a1b      	ldr	r2, [pc, #108]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018dfc:	4413      	add	r3, r2
 8018dfe:	1d19      	adds	r1, r3, #4
 8018e00:	79fa      	ldrb	r2, [r7, #7]
 8018e02:	4613      	mov	r3, r2
 8018e04:	005b      	lsls	r3, r3, #1
 8018e06:	4413      	add	r3, r2
 8018e08:	00db      	lsls	r3, r3, #3
 8018e0a:	3308      	adds	r3, #8
 8018e0c:	4a16      	ldr	r2, [pc, #88]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018e0e:	4413      	add	r3, r2
 8018e10:	3304      	adds	r3, #4
 8018e12:	461a      	mov	r2, r3
 8018e14:	68f8      	ldr	r0, [r7, #12]
 8018e16:	f000 fafb 	bl	8019410 <etharp_request_dst>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d109      	bne.n	8018e34 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018e20:	79fa      	ldrb	r2, [r7, #7]
 8018e22:	4911      	ldr	r1, [pc, #68]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018e24:	4613      	mov	r3, r2
 8018e26:	005b      	lsls	r3, r3, #1
 8018e28:	4413      	add	r3, r2
 8018e2a:	00db      	lsls	r3, r3, #3
 8018e2c:	440b      	add	r3, r1
 8018e2e:	3314      	adds	r3, #20
 8018e30:	2203      	movs	r2, #3
 8018e32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8018e3a:	79fa      	ldrb	r2, [r7, #7]
 8018e3c:	4613      	mov	r3, r2
 8018e3e:	005b      	lsls	r3, r3, #1
 8018e40:	4413      	add	r3, r2
 8018e42:	00db      	lsls	r3, r3, #3
 8018e44:	3308      	adds	r3, #8
 8018e46:	4a08      	ldr	r2, [pc, #32]	; (8018e68 <etharp_output_to_arp_index+0x124>)
 8018e48:	4413      	add	r3, r2
 8018e4a:	3304      	adds	r3, #4
 8018e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018e50:	9200      	str	r2, [sp, #0]
 8018e52:	460a      	mov	r2, r1
 8018e54:	68b9      	ldr	r1, [r7, #8]
 8018e56:	68f8      	ldr	r0, [r7, #12]
 8018e58:	f001 ff64 	bl	801ad24 <ethernet_output>
 8018e5c:	4603      	mov	r3, r0
}
 8018e5e:	4618      	mov	r0, r3
 8018e60:	3710      	adds	r7, #16
 8018e62:	46bd      	mov	sp, r7
 8018e64:	bd80      	pop	{r7, pc}
 8018e66:	bf00      	nop
 8018e68:	20004f78 	.word	0x20004f78
 8018e6c:	0802795c 	.word	0x0802795c
 8018e70:	08027acc 	.word	0x08027acc
 8018e74:	080279d4 	.word	0x080279d4

08018e78 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b08a      	sub	sp, #40	; 0x28
 8018e7c:	af02      	add	r7, sp, #8
 8018e7e:	60f8      	str	r0, [r7, #12]
 8018e80:	60b9      	str	r1, [r7, #8]
 8018e82:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d106      	bne.n	8018e9c <etharp_output+0x24>
 8018e8e:	4b73      	ldr	r3, [pc, #460]	; (801905c <etharp_output+0x1e4>)
 8018e90:	f240 321e 	movw	r2, #798	; 0x31e
 8018e94:	4972      	ldr	r1, [pc, #456]	; (8019060 <etharp_output+0x1e8>)
 8018e96:	4873      	ldr	r0, [pc, #460]	; (8019064 <etharp_output+0x1ec>)
 8018e98:	f002 fd48 	bl	801b92c <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018e9c:	68bb      	ldr	r3, [r7, #8]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d106      	bne.n	8018eb0 <etharp_output+0x38>
 8018ea2:	4b6e      	ldr	r3, [pc, #440]	; (801905c <etharp_output+0x1e4>)
 8018ea4:	f240 321f 	movw	r2, #799	; 0x31f
 8018ea8:	496f      	ldr	r1, [pc, #444]	; (8019068 <etharp_output+0x1f0>)
 8018eaa:	486e      	ldr	r0, [pc, #440]	; (8019064 <etharp_output+0x1ec>)
 8018eac:	f002 fd3e 	bl	801b92c <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d106      	bne.n	8018ec4 <etharp_output+0x4c>
 8018eb6:	4b69      	ldr	r3, [pc, #420]	; (801905c <etharp_output+0x1e4>)
 8018eb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018ebc:	496b      	ldr	r1, [pc, #428]	; (801906c <etharp_output+0x1f4>)
 8018ebe:	4869      	ldr	r0, [pc, #420]	; (8019064 <etharp_output+0x1ec>)
 8018ec0:	f002 fd34 	bl	801b92c <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	68f9      	ldr	r1, [r7, #12]
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f000 fef8 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d002      	beq.n	8018edc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018ed6:	4b66      	ldr	r3, [pc, #408]	; (8019070 <etharp_output+0x1f8>)
 8018ed8:	61fb      	str	r3, [r7, #28]
 8018eda:	e0af      	b.n	801903c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ee4:	2be0      	cmp	r3, #224	; 0xe0
 8018ee6:	d118      	bne.n	8018f1a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018ee8:	2301      	movs	r3, #1
 8018eea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018eec:	2300      	movs	r3, #0
 8018eee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018ef0:	235e      	movs	r3, #94	; 0x5e
 8018ef2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	3301      	adds	r3, #1
 8018ef8:	781b      	ldrb	r3, [r3, #0]
 8018efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018efe:	b2db      	uxtb	r3, r3
 8018f00:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	3302      	adds	r3, #2
 8018f06:	781b      	ldrb	r3, [r3, #0]
 8018f08:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	3303      	adds	r3, #3
 8018f0e:	781b      	ldrb	r3, [r3, #0]
 8018f10:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018f12:	f107 0310 	add.w	r3, r7, #16
 8018f16:	61fb      	str	r3, [r7, #28]
 8018f18:	e090      	b.n	801903c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	681a      	ldr	r2, [r3, #0]
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	3304      	adds	r3, #4
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	405a      	eors	r2, r3
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	3308      	adds	r3, #8
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	4013      	ands	r3, r2
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d012      	beq.n	8018f58 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018f38:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018f3c:	4293      	cmp	r3, r2
 8018f3e:	d00b      	beq.n	8018f58 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	330c      	adds	r3, #12
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d003      	beq.n	8018f52 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	330c      	adds	r3, #12
 8018f4e:	61bb      	str	r3, [r7, #24]
 8018f50:	e002      	b.n	8018f58 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018f52:	f06f 0303 	mvn.w	r3, #3
 8018f56:	e07d      	b.n	8019054 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018f58:	4b46      	ldr	r3, [pc, #280]	; (8019074 <etharp_output+0x1fc>)
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	4619      	mov	r1, r3
 8018f5e:	4a46      	ldr	r2, [pc, #280]	; (8019078 <etharp_output+0x200>)
 8018f60:	460b      	mov	r3, r1
 8018f62:	005b      	lsls	r3, r3, #1
 8018f64:	440b      	add	r3, r1
 8018f66:	00db      	lsls	r3, r3, #3
 8018f68:	4413      	add	r3, r2
 8018f6a:	3314      	adds	r3, #20
 8018f6c:	781b      	ldrb	r3, [r3, #0]
 8018f6e:	2b01      	cmp	r3, #1
 8018f70:	d925      	bls.n	8018fbe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018f72:	4b40      	ldr	r3, [pc, #256]	; (8019074 <etharp_output+0x1fc>)
 8018f74:	781b      	ldrb	r3, [r3, #0]
 8018f76:	4619      	mov	r1, r3
 8018f78:	4a3f      	ldr	r2, [pc, #252]	; (8019078 <etharp_output+0x200>)
 8018f7a:	460b      	mov	r3, r1
 8018f7c:	005b      	lsls	r3, r3, #1
 8018f7e:	440b      	add	r3, r1
 8018f80:	00db      	lsls	r3, r3, #3
 8018f82:	4413      	add	r3, r2
 8018f84:	3308      	adds	r3, #8
 8018f86:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018f88:	68fa      	ldr	r2, [r7, #12]
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	d117      	bne.n	8018fbe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018f8e:	69bb      	ldr	r3, [r7, #24]
 8018f90:	681a      	ldr	r2, [r3, #0]
 8018f92:	4b38      	ldr	r3, [pc, #224]	; (8019074 <etharp_output+0x1fc>)
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	4618      	mov	r0, r3
 8018f98:	4937      	ldr	r1, [pc, #220]	; (8019078 <etharp_output+0x200>)
 8018f9a:	4603      	mov	r3, r0
 8018f9c:	005b      	lsls	r3, r3, #1
 8018f9e:	4403      	add	r3, r0
 8018fa0:	00db      	lsls	r3, r3, #3
 8018fa2:	440b      	add	r3, r1
 8018fa4:	3304      	adds	r3, #4
 8018fa6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018fa8:	429a      	cmp	r2, r3
 8018faa:	d108      	bne.n	8018fbe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018fac:	4b31      	ldr	r3, [pc, #196]	; (8019074 <etharp_output+0x1fc>)
 8018fae:	781b      	ldrb	r3, [r3, #0]
 8018fb0:	461a      	mov	r2, r3
 8018fb2:	68b9      	ldr	r1, [r7, #8]
 8018fb4:	68f8      	ldr	r0, [r7, #12]
 8018fb6:	f7ff fec5 	bl	8018d44 <etharp_output_to_arp_index>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	e04a      	b.n	8019054 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	75fb      	strb	r3, [r7, #23]
 8018fc2:	e031      	b.n	8019028 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018fc4:	7dfa      	ldrb	r2, [r7, #23]
 8018fc6:	492c      	ldr	r1, [pc, #176]	; (8019078 <etharp_output+0x200>)
 8018fc8:	4613      	mov	r3, r2
 8018fca:	005b      	lsls	r3, r3, #1
 8018fcc:	4413      	add	r3, r2
 8018fce:	00db      	lsls	r3, r3, #3
 8018fd0:	440b      	add	r3, r1
 8018fd2:	3314      	adds	r3, #20
 8018fd4:	781b      	ldrb	r3, [r3, #0]
 8018fd6:	2b01      	cmp	r3, #1
 8018fd8:	d923      	bls.n	8019022 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018fda:	7dfa      	ldrb	r2, [r7, #23]
 8018fdc:	4926      	ldr	r1, [pc, #152]	; (8019078 <etharp_output+0x200>)
 8018fde:	4613      	mov	r3, r2
 8018fe0:	005b      	lsls	r3, r3, #1
 8018fe2:	4413      	add	r3, r2
 8018fe4:	00db      	lsls	r3, r3, #3
 8018fe6:	440b      	add	r3, r1
 8018fe8:	3308      	adds	r3, #8
 8018fea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018fec:	68fa      	ldr	r2, [r7, #12]
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d117      	bne.n	8019022 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018ff2:	69bb      	ldr	r3, [r7, #24]
 8018ff4:	6819      	ldr	r1, [r3, #0]
 8018ff6:	7dfa      	ldrb	r2, [r7, #23]
 8018ff8:	481f      	ldr	r0, [pc, #124]	; (8019078 <etharp_output+0x200>)
 8018ffa:	4613      	mov	r3, r2
 8018ffc:	005b      	lsls	r3, r3, #1
 8018ffe:	4413      	add	r3, r2
 8019000:	00db      	lsls	r3, r3, #3
 8019002:	4403      	add	r3, r0
 8019004:	3304      	adds	r3, #4
 8019006:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019008:	4299      	cmp	r1, r3
 801900a:	d10a      	bne.n	8019022 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801900c:	4a19      	ldr	r2, [pc, #100]	; (8019074 <etharp_output+0x1fc>)
 801900e:	7dfb      	ldrb	r3, [r7, #23]
 8019010:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019012:	7dfb      	ldrb	r3, [r7, #23]
 8019014:	461a      	mov	r2, r3
 8019016:	68b9      	ldr	r1, [r7, #8]
 8019018:	68f8      	ldr	r0, [r7, #12]
 801901a:	f7ff fe93 	bl	8018d44 <etharp_output_to_arp_index>
 801901e:	4603      	mov	r3, r0
 8019020:	e018      	b.n	8019054 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019022:	7dfb      	ldrb	r3, [r7, #23]
 8019024:	3301      	adds	r3, #1
 8019026:	75fb      	strb	r3, [r7, #23]
 8019028:	7dfb      	ldrb	r3, [r7, #23]
 801902a:	2b09      	cmp	r3, #9
 801902c:	d9ca      	bls.n	8018fc4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801902e:	68ba      	ldr	r2, [r7, #8]
 8019030:	69b9      	ldr	r1, [r7, #24]
 8019032:	68f8      	ldr	r0, [r7, #12]
 8019034:	f000 f822 	bl	801907c <etharp_query>
 8019038:	4603      	mov	r3, r0
 801903a:	e00b      	b.n	8019054 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8019042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019046:	9300      	str	r3, [sp, #0]
 8019048:	69fb      	ldr	r3, [r7, #28]
 801904a:	68b9      	ldr	r1, [r7, #8]
 801904c:	68f8      	ldr	r0, [r7, #12]
 801904e:	f001 fe69 	bl	801ad24 <ethernet_output>
 8019052:	4603      	mov	r3, r0
}
 8019054:	4618      	mov	r0, r3
 8019056:	3720      	adds	r7, #32
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}
 801905c:	0802795c 	.word	0x0802795c
 8019060:	08027aac 	.word	0x08027aac
 8019064:	080279d4 	.word	0x080279d4
 8019068:	08027afc 	.word	0x08027afc
 801906c:	08027a9c 	.word	0x08027a9c
 8019070:	08029098 	.word	0x08029098
 8019074:	20005068 	.word	0x20005068
 8019078:	20004f78 	.word	0x20004f78

0801907c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b08c      	sub	sp, #48	; 0x30
 8019080:	af02      	add	r7, sp, #8
 8019082:	60f8      	str	r0, [r7, #12]
 8019084:	60b9      	str	r1, [r7, #8]
 8019086:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	3322      	adds	r3, #34	; 0x22
 801908c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801908e:	23ff      	movs	r3, #255	; 0xff
 8019090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019094:	2300      	movs	r3, #0
 8019096:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019098:	68bb      	ldr	r3, [r7, #8]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	68f9      	ldr	r1, [r7, #12]
 801909e:	4618      	mov	r0, r3
 80190a0:	f000 fe0e 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 80190a4:	4603      	mov	r3, r0
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d10c      	bne.n	80190c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80190b2:	2be0      	cmp	r3, #224	; 0xe0
 80190b4:	d006      	beq.n	80190c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80190b6:	68bb      	ldr	r3, [r7, #8]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d003      	beq.n	80190c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80190bc:	68bb      	ldr	r3, [r7, #8]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d102      	bne.n	80190ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80190c4:	f06f 030f 	mvn.w	r3, #15
 80190c8:	e101      	b.n	80192ce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80190ca:	68fa      	ldr	r2, [r7, #12]
 80190cc:	2101      	movs	r1, #1
 80190ce:	68b8      	ldr	r0, [r7, #8]
 80190d0:	f7ff fb60 	bl	8018794 <etharp_find_entry>
 80190d4:	4603      	mov	r3, r0
 80190d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80190d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	da02      	bge.n	80190e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80190e0:	8a7b      	ldrh	r3, [r7, #18]
 80190e2:	b25b      	sxtb	r3, r3
 80190e4:	e0f3      	b.n	80192ce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80190e6:	8a7b      	ldrh	r3, [r7, #18]
 80190e8:	2b7e      	cmp	r3, #126	; 0x7e
 80190ea:	d906      	bls.n	80190fa <etharp_query+0x7e>
 80190ec:	4b7a      	ldr	r3, [pc, #488]	; (80192d8 <etharp_query+0x25c>)
 80190ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 80190f2:	497a      	ldr	r1, [pc, #488]	; (80192dc <etharp_query+0x260>)
 80190f4:	487a      	ldr	r0, [pc, #488]	; (80192e0 <etharp_query+0x264>)
 80190f6:	f002 fc19 	bl	801b92c <printf>
  i = (netif_addr_idx_t)i_err;
 80190fa:	8a7b      	ldrh	r3, [r7, #18]
 80190fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80190fe:	7c7a      	ldrb	r2, [r7, #17]
 8019100:	4978      	ldr	r1, [pc, #480]	; (80192e4 <etharp_query+0x268>)
 8019102:	4613      	mov	r3, r2
 8019104:	005b      	lsls	r3, r3, #1
 8019106:	4413      	add	r3, r2
 8019108:	00db      	lsls	r3, r3, #3
 801910a:	440b      	add	r3, r1
 801910c:	3314      	adds	r3, #20
 801910e:	781b      	ldrb	r3, [r3, #0]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d115      	bne.n	8019140 <etharp_query+0xc4>
    is_new_entry = 1;
 8019114:	2301      	movs	r3, #1
 8019116:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019118:	7c7a      	ldrb	r2, [r7, #17]
 801911a:	4972      	ldr	r1, [pc, #456]	; (80192e4 <etharp_query+0x268>)
 801911c:	4613      	mov	r3, r2
 801911e:	005b      	lsls	r3, r3, #1
 8019120:	4413      	add	r3, r2
 8019122:	00db      	lsls	r3, r3, #3
 8019124:	440b      	add	r3, r1
 8019126:	3314      	adds	r3, #20
 8019128:	2201      	movs	r2, #1
 801912a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801912c:	7c7a      	ldrb	r2, [r7, #17]
 801912e:	496d      	ldr	r1, [pc, #436]	; (80192e4 <etharp_query+0x268>)
 8019130:	4613      	mov	r3, r2
 8019132:	005b      	lsls	r3, r3, #1
 8019134:	4413      	add	r3, r2
 8019136:	00db      	lsls	r3, r3, #3
 8019138:	440b      	add	r3, r1
 801913a:	3308      	adds	r3, #8
 801913c:	68fa      	ldr	r2, [r7, #12]
 801913e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019140:	7c7a      	ldrb	r2, [r7, #17]
 8019142:	4968      	ldr	r1, [pc, #416]	; (80192e4 <etharp_query+0x268>)
 8019144:	4613      	mov	r3, r2
 8019146:	005b      	lsls	r3, r3, #1
 8019148:	4413      	add	r3, r2
 801914a:	00db      	lsls	r3, r3, #3
 801914c:	440b      	add	r3, r1
 801914e:	3314      	adds	r3, #20
 8019150:	781b      	ldrb	r3, [r3, #0]
 8019152:	2b01      	cmp	r3, #1
 8019154:	d011      	beq.n	801917a <etharp_query+0xfe>
 8019156:	7c7a      	ldrb	r2, [r7, #17]
 8019158:	4962      	ldr	r1, [pc, #392]	; (80192e4 <etharp_query+0x268>)
 801915a:	4613      	mov	r3, r2
 801915c:	005b      	lsls	r3, r3, #1
 801915e:	4413      	add	r3, r2
 8019160:	00db      	lsls	r3, r3, #3
 8019162:	440b      	add	r3, r1
 8019164:	3314      	adds	r3, #20
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	2b01      	cmp	r3, #1
 801916a:	d806      	bhi.n	801917a <etharp_query+0xfe>
 801916c:	4b5a      	ldr	r3, [pc, #360]	; (80192d8 <etharp_query+0x25c>)
 801916e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019172:	495d      	ldr	r1, [pc, #372]	; (80192e8 <etharp_query+0x26c>)
 8019174:	485a      	ldr	r0, [pc, #360]	; (80192e0 <etharp_query+0x264>)
 8019176:	f002 fbd9 	bl	801b92c <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801917a:	6a3b      	ldr	r3, [r7, #32]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d102      	bne.n	8019186 <etharp_query+0x10a>
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d10c      	bne.n	80191a0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019186:	68b9      	ldr	r1, [r7, #8]
 8019188:	68f8      	ldr	r0, [r7, #12]
 801918a:	f000 f963 	bl	8019454 <etharp_request>
 801918e:	4603      	mov	r3, r0
 8019190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d102      	bne.n	80191a0 <etharp_query+0x124>
      return result;
 801919a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801919e:	e096      	b.n	80192ce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d106      	bne.n	80191b4 <etharp_query+0x138>
 80191a6:	4b4c      	ldr	r3, [pc, #304]	; (80192d8 <etharp_query+0x25c>)
 80191a8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80191ac:	494f      	ldr	r1, [pc, #316]	; (80192ec <etharp_query+0x270>)
 80191ae:	484c      	ldr	r0, [pc, #304]	; (80192e0 <etharp_query+0x264>)
 80191b0:	f002 fbbc 	bl	801b92c <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80191b4:	7c7a      	ldrb	r2, [r7, #17]
 80191b6:	494b      	ldr	r1, [pc, #300]	; (80192e4 <etharp_query+0x268>)
 80191b8:	4613      	mov	r3, r2
 80191ba:	005b      	lsls	r3, r3, #1
 80191bc:	4413      	add	r3, r2
 80191be:	00db      	lsls	r3, r3, #3
 80191c0:	440b      	add	r3, r1
 80191c2:	3314      	adds	r3, #20
 80191c4:	781b      	ldrb	r3, [r3, #0]
 80191c6:	2b01      	cmp	r3, #1
 80191c8:	d917      	bls.n	80191fa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80191ca:	4a49      	ldr	r2, [pc, #292]	; (80192f0 <etharp_query+0x274>)
 80191cc:	7c7b      	ldrb	r3, [r7, #17]
 80191ce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80191d0:	7c7a      	ldrb	r2, [r7, #17]
 80191d2:	4613      	mov	r3, r2
 80191d4:	005b      	lsls	r3, r3, #1
 80191d6:	4413      	add	r3, r2
 80191d8:	00db      	lsls	r3, r3, #3
 80191da:	3308      	adds	r3, #8
 80191dc:	4a41      	ldr	r2, [pc, #260]	; (80192e4 <etharp_query+0x268>)
 80191de:	4413      	add	r3, r2
 80191e0:	3304      	adds	r3, #4
 80191e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80191e6:	9200      	str	r2, [sp, #0]
 80191e8:	697a      	ldr	r2, [r7, #20]
 80191ea:	6879      	ldr	r1, [r7, #4]
 80191ec:	68f8      	ldr	r0, [r7, #12]
 80191ee:	f001 fd99 	bl	801ad24 <ethernet_output>
 80191f2:	4603      	mov	r3, r0
 80191f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80191f8:	e067      	b.n	80192ca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80191fa:	7c7a      	ldrb	r2, [r7, #17]
 80191fc:	4939      	ldr	r1, [pc, #228]	; (80192e4 <etharp_query+0x268>)
 80191fe:	4613      	mov	r3, r2
 8019200:	005b      	lsls	r3, r3, #1
 8019202:	4413      	add	r3, r2
 8019204:	00db      	lsls	r3, r3, #3
 8019206:	440b      	add	r3, r1
 8019208:	3314      	adds	r3, #20
 801920a:	781b      	ldrb	r3, [r3, #0]
 801920c:	2b01      	cmp	r3, #1
 801920e:	d15c      	bne.n	80192ca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019210:	2300      	movs	r3, #0
 8019212:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019218:	e01c      	b.n	8019254 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801921a:	69fb      	ldr	r3, [r7, #28]
 801921c:	895a      	ldrh	r2, [r3, #10]
 801921e:	69fb      	ldr	r3, [r7, #28]
 8019220:	891b      	ldrh	r3, [r3, #8]
 8019222:	429a      	cmp	r2, r3
 8019224:	d10a      	bne.n	801923c <etharp_query+0x1c0>
 8019226:	69fb      	ldr	r3, [r7, #28]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d006      	beq.n	801923c <etharp_query+0x1c0>
 801922e:	4b2a      	ldr	r3, [pc, #168]	; (80192d8 <etharp_query+0x25c>)
 8019230:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019234:	492f      	ldr	r1, [pc, #188]	; (80192f4 <etharp_query+0x278>)
 8019236:	482a      	ldr	r0, [pc, #168]	; (80192e0 <etharp_query+0x264>)
 8019238:	f002 fb78 	bl	801b92c <printf>
      if (PBUF_NEEDS_COPY(p)) {
 801923c:	69fb      	ldr	r3, [r7, #28]
 801923e:	7b1b      	ldrb	r3, [r3, #12]
 8019240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019244:	2b00      	cmp	r3, #0
 8019246:	d002      	beq.n	801924e <etharp_query+0x1d2>
        copy_needed = 1;
 8019248:	2301      	movs	r3, #1
 801924a:	61bb      	str	r3, [r7, #24]
        break;
 801924c:	e005      	b.n	801925a <etharp_query+0x1de>
      }
      p = p->next;
 801924e:	69fb      	ldr	r3, [r7, #28]
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019254:	69fb      	ldr	r3, [r7, #28]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d1df      	bne.n	801921a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801925a:	69bb      	ldr	r3, [r7, #24]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d007      	beq.n	8019270 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019260:	687a      	ldr	r2, [r7, #4]
 8019262:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019266:	200e      	movs	r0, #14
 8019268:	f7f8 fa72 	bl	8011750 <pbuf_clone>
 801926c:	61f8      	str	r0, [r7, #28]
 801926e:	e004      	b.n	801927a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019274:	69f8      	ldr	r0, [r7, #28]
 8019276:	f7f8 f899 	bl	80113ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801927a:	69fb      	ldr	r3, [r7, #28]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d021      	beq.n	80192c4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019280:	7c7a      	ldrb	r2, [r7, #17]
 8019282:	4918      	ldr	r1, [pc, #96]	; (80192e4 <etharp_query+0x268>)
 8019284:	4613      	mov	r3, r2
 8019286:	005b      	lsls	r3, r3, #1
 8019288:	4413      	add	r3, r2
 801928a:	00db      	lsls	r3, r3, #3
 801928c:	440b      	add	r3, r1
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d00a      	beq.n	80192aa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019294:	7c7a      	ldrb	r2, [r7, #17]
 8019296:	4913      	ldr	r1, [pc, #76]	; (80192e4 <etharp_query+0x268>)
 8019298:	4613      	mov	r3, r2
 801929a:	005b      	lsls	r3, r3, #1
 801929c:	4413      	add	r3, r2
 801929e:	00db      	lsls	r3, r3, #3
 80192a0:	440b      	add	r3, r1
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	4618      	mov	r0, r3
 80192a6:	f7f7 ffdb 	bl	8011260 <pbuf_free>
      }
      arp_table[i].q = p;
 80192aa:	7c7a      	ldrb	r2, [r7, #17]
 80192ac:	490d      	ldr	r1, [pc, #52]	; (80192e4 <etharp_query+0x268>)
 80192ae:	4613      	mov	r3, r2
 80192b0:	005b      	lsls	r3, r3, #1
 80192b2:	4413      	add	r3, r2
 80192b4:	00db      	lsls	r3, r3, #3
 80192b6:	440b      	add	r3, r1
 80192b8:	69fa      	ldr	r2, [r7, #28]
 80192ba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80192bc:	2300      	movs	r3, #0
 80192be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80192c2:	e002      	b.n	80192ca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80192c4:	23ff      	movs	r3, #255	; 0xff
 80192c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80192ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	3728      	adds	r7, #40	; 0x28
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}
 80192d6:	bf00      	nop
 80192d8:	0802795c 	.word	0x0802795c
 80192dc:	08027b08 	.word	0x08027b08
 80192e0:	080279d4 	.word	0x080279d4
 80192e4:	20004f78 	.word	0x20004f78
 80192e8:	08027b18 	.word	0x08027b18
 80192ec:	08027afc 	.word	0x08027afc
 80192f0:	20005068 	.word	0x20005068
 80192f4:	08027b40 	.word	0x08027b40

080192f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b08a      	sub	sp, #40	; 0x28
 80192fc:	af02      	add	r7, sp, #8
 80192fe:	60f8      	str	r0, [r7, #12]
 8019300:	60b9      	str	r1, [r7, #8]
 8019302:	607a      	str	r2, [r7, #4]
 8019304:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019306:	2300      	movs	r3, #0
 8019308:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d106      	bne.n	801931e <etharp_raw+0x26>
 8019310:	4b3a      	ldr	r3, [pc, #232]	; (80193fc <etharp_raw+0x104>)
 8019312:	f240 4257 	movw	r2, #1111	; 0x457
 8019316:	493a      	ldr	r1, [pc, #232]	; (8019400 <etharp_raw+0x108>)
 8019318:	483a      	ldr	r0, [pc, #232]	; (8019404 <etharp_raw+0x10c>)
 801931a:	f002 fb07 	bl	801b92c <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801931e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019322:	211c      	movs	r1, #28
 8019324:	200e      	movs	r0, #14
 8019326:	f7f7 fcb7 	bl	8010c98 <pbuf_alloc>
 801932a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801932c:	69bb      	ldr	r3, [r7, #24]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d102      	bne.n	8019338 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019332:	f04f 33ff 	mov.w	r3, #4294967295
 8019336:	e05d      	b.n	80193f4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019338:	69bb      	ldr	r3, [r7, #24]
 801933a:	895b      	ldrh	r3, [r3, #10]
 801933c:	2b1b      	cmp	r3, #27
 801933e:	d806      	bhi.n	801934e <etharp_raw+0x56>
 8019340:	4b2e      	ldr	r3, [pc, #184]	; (80193fc <etharp_raw+0x104>)
 8019342:	f240 4262 	movw	r2, #1122	; 0x462
 8019346:	4930      	ldr	r1, [pc, #192]	; (8019408 <etharp_raw+0x110>)
 8019348:	482e      	ldr	r0, [pc, #184]	; (8019404 <etharp_raw+0x10c>)
 801934a:	f002 faef 	bl	801b92c <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801934e:	69bb      	ldr	r3, [r7, #24]
 8019350:	685b      	ldr	r3, [r3, #4]
 8019352:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019354:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019356:	4618      	mov	r0, r3
 8019358:	f7f6 fbc6 	bl	800fae8 <lwip_htons>
 801935c:	4603      	mov	r3, r0
 801935e:	461a      	mov	r2, r3
 8019360:	697b      	ldr	r3, [r7, #20]
 8019362:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801936a:	2b06      	cmp	r3, #6
 801936c:	d006      	beq.n	801937c <etharp_raw+0x84>
 801936e:	4b23      	ldr	r3, [pc, #140]	; (80193fc <etharp_raw+0x104>)
 8019370:	f240 4269 	movw	r2, #1129	; 0x469
 8019374:	4925      	ldr	r1, [pc, #148]	; (801940c <etharp_raw+0x114>)
 8019376:	4823      	ldr	r0, [pc, #140]	; (8019404 <etharp_raw+0x10c>)
 8019378:	f002 fad8 	bl	801b92c <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801937c:	697b      	ldr	r3, [r7, #20]
 801937e:	3308      	adds	r3, #8
 8019380:	2206      	movs	r2, #6
 8019382:	6839      	ldr	r1, [r7, #0]
 8019384:	4618      	mov	r0, r3
 8019386:	f002 f823 	bl	801b3d0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801938a:	697b      	ldr	r3, [r7, #20]
 801938c:	3312      	adds	r3, #18
 801938e:	2206      	movs	r2, #6
 8019390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019392:	4618      	mov	r0, r3
 8019394:	f002 f81c 	bl	801b3d0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	330e      	adds	r3, #14
 801939c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801939e:	6812      	ldr	r2, [r2, #0]
 80193a0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80193a2:	697b      	ldr	r3, [r7, #20]
 80193a4:	3318      	adds	r3, #24
 80193a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193a8:	6812      	ldr	r2, [r2, #0]
 80193aa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80193ac:	697b      	ldr	r3, [r7, #20]
 80193ae:	2200      	movs	r2, #0
 80193b0:	701a      	strb	r2, [r3, #0]
 80193b2:	2200      	movs	r2, #0
 80193b4:	f042 0201 	orr.w	r2, r2, #1
 80193b8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80193ba:	697b      	ldr	r3, [r7, #20]
 80193bc:	2200      	movs	r2, #0
 80193be:	f042 0208 	orr.w	r2, r2, #8
 80193c2:	709a      	strb	r2, [r3, #2]
 80193c4:	2200      	movs	r2, #0
 80193c6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80193c8:	697b      	ldr	r3, [r7, #20]
 80193ca:	2206      	movs	r2, #6
 80193cc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80193ce:	697b      	ldr	r3, [r7, #20]
 80193d0:	2204      	movs	r2, #4
 80193d2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80193d4:	f640 0306 	movw	r3, #2054	; 0x806
 80193d8:	9300      	str	r3, [sp, #0]
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	68ba      	ldr	r2, [r7, #8]
 80193de:	69b9      	ldr	r1, [r7, #24]
 80193e0:	68f8      	ldr	r0, [r7, #12]
 80193e2:	f001 fc9f 	bl	801ad24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80193e6:	69b8      	ldr	r0, [r7, #24]
 80193e8:	f7f7 ff3a 	bl	8011260 <pbuf_free>
  p = NULL;
 80193ec:	2300      	movs	r3, #0
 80193ee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80193f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80193f4:	4618      	mov	r0, r3
 80193f6:	3720      	adds	r7, #32
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}
 80193fc:	0802795c 	.word	0x0802795c
 8019400:	08027aac 	.word	0x08027aac
 8019404:	080279d4 	.word	0x080279d4
 8019408:	08027b5c 	.word	0x08027b5c
 801940c:	08027b90 	.word	0x08027b90

08019410 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b088      	sub	sp, #32
 8019414:	af04      	add	r7, sp, #16
 8019416:	60f8      	str	r0, [r7, #12]
 8019418:	60b9      	str	r1, [r7, #8]
 801941a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801942c:	2201      	movs	r2, #1
 801942e:	9203      	str	r2, [sp, #12]
 8019430:	68ba      	ldr	r2, [r7, #8]
 8019432:	9202      	str	r2, [sp, #8]
 8019434:	4a06      	ldr	r2, [pc, #24]	; (8019450 <etharp_request_dst+0x40>)
 8019436:	9201      	str	r2, [sp, #4]
 8019438:	9300      	str	r3, [sp, #0]
 801943a:	4603      	mov	r3, r0
 801943c:	687a      	ldr	r2, [r7, #4]
 801943e:	68f8      	ldr	r0, [r7, #12]
 8019440:	f7ff ff5a 	bl	80192f8 <etharp_raw>
 8019444:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019446:	4618      	mov	r0, r3
 8019448:	3710      	adds	r7, #16
 801944a:	46bd      	mov	sp, r7
 801944c:	bd80      	pop	{r7, pc}
 801944e:	bf00      	nop
 8019450:	080290a0 	.word	0x080290a0

08019454 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b082      	sub	sp, #8
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
 801945c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801945e:	4a05      	ldr	r2, [pc, #20]	; (8019474 <etharp_request+0x20>)
 8019460:	6839      	ldr	r1, [r7, #0]
 8019462:	6878      	ldr	r0, [r7, #4]
 8019464:	f7ff ffd4 	bl	8019410 <etharp_request_dst>
 8019468:	4603      	mov	r3, r0
}
 801946a:	4618      	mov	r0, r3
 801946c:	3708      	adds	r7, #8
 801946e:	46bd      	mov	sp, r7
 8019470:	bd80      	pop	{r7, pc}
 8019472:	bf00      	nop
 8019474:	08029098 	.word	0x08029098

08019478 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b08e      	sub	sp, #56	; 0x38
 801947c:	af04      	add	r7, sp, #16
 801947e:	6078      	str	r0, [r7, #4]
 8019480:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019482:	4b79      	ldr	r3, [pc, #484]	; (8019668 <icmp_input+0x1f0>)
 8019484:	689b      	ldr	r3, [r3, #8]
 8019486:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801948a:	781b      	ldrb	r3, [r3, #0]
 801948c:	f003 030f 	and.w	r3, r3, #15
 8019490:	b2db      	uxtb	r3, r3
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	b2db      	uxtb	r3, r3
 8019496:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801949a:	2b13      	cmp	r3, #19
 801949c:	f240 80cd 	bls.w	801963a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	895b      	ldrh	r3, [r3, #10]
 80194a4:	2b03      	cmp	r3, #3
 80194a6:	f240 80ca 	bls.w	801963e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	685b      	ldr	r3, [r3, #4]
 80194ae:	781b      	ldrb	r3, [r3, #0]
 80194b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80194b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	f000 80b7 	beq.w	801962c <icmp_input+0x1b4>
 80194be:	2b08      	cmp	r3, #8
 80194c0:	f040 80b7 	bne.w	8019632 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80194c4:	4b69      	ldr	r3, [pc, #420]	; (801966c <icmp_input+0x1f4>)
 80194c6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80194c8:	4b67      	ldr	r3, [pc, #412]	; (8019668 <icmp_input+0x1f0>)
 80194ca:	695b      	ldr	r3, [r3, #20]
 80194cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80194d0:	2be0      	cmp	r3, #224	; 0xe0
 80194d2:	f000 80bb 	beq.w	801964c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80194d6:	4b64      	ldr	r3, [pc, #400]	; (8019668 <icmp_input+0x1f0>)
 80194d8:	695b      	ldr	r3, [r3, #20]
 80194da:	4a63      	ldr	r2, [pc, #396]	; (8019668 <icmp_input+0x1f0>)
 80194dc:	6812      	ldr	r2, [r2, #0]
 80194de:	4611      	mov	r1, r2
 80194e0:	4618      	mov	r0, r3
 80194e2:	f000 fbed 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 80194e6:	4603      	mov	r3, r0
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	f040 80b1 	bne.w	8019650 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	891b      	ldrh	r3, [r3, #8]
 80194f2:	2b07      	cmp	r3, #7
 80194f4:	f240 80a5 	bls.w	8019642 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80194f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80194fa:	330e      	adds	r3, #14
 80194fc:	4619      	mov	r1, r3
 80194fe:	6878      	ldr	r0, [r7, #4]
 8019500:	f7f7 fe18 	bl	8011134 <pbuf_add_header>
 8019504:	4603      	mov	r3, r0
 8019506:	2b00      	cmp	r3, #0
 8019508:	d04b      	beq.n	80195a2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	891a      	ldrh	r2, [r3, #8]
 801950e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019510:	4413      	add	r3, r2
 8019512:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	891b      	ldrh	r3, [r3, #8]
 8019518:	8b7a      	ldrh	r2, [r7, #26]
 801951a:	429a      	cmp	r2, r3
 801951c:	f0c0 809a 	bcc.w	8019654 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019520:	8b7b      	ldrh	r3, [r7, #26]
 8019522:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019526:	4619      	mov	r1, r3
 8019528:	200e      	movs	r0, #14
 801952a:	f7f7 fbb5 	bl	8010c98 <pbuf_alloc>
 801952e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019530:	697b      	ldr	r3, [r7, #20]
 8019532:	2b00      	cmp	r3, #0
 8019534:	f000 8090 	beq.w	8019658 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019538:	697b      	ldr	r3, [r7, #20]
 801953a:	895b      	ldrh	r3, [r3, #10]
 801953c:	461a      	mov	r2, r3
 801953e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019540:	3308      	adds	r3, #8
 8019542:	429a      	cmp	r2, r3
 8019544:	d203      	bcs.n	801954e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019546:	6978      	ldr	r0, [r7, #20]
 8019548:	f7f7 fe8a 	bl	8011260 <pbuf_free>
          goto icmperr;
 801954c:	e085      	b.n	801965a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801954e:	697b      	ldr	r3, [r7, #20]
 8019550:	685b      	ldr	r3, [r3, #4]
 8019552:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019556:	4618      	mov	r0, r3
 8019558:	f001 ff3a 	bl	801b3d0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801955c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801955e:	4619      	mov	r1, r3
 8019560:	6978      	ldr	r0, [r7, #20]
 8019562:	f7f7 fdf7 	bl	8011154 <pbuf_remove_header>
 8019566:	4603      	mov	r3, r0
 8019568:	2b00      	cmp	r3, #0
 801956a:	d009      	beq.n	8019580 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801956c:	4b40      	ldr	r3, [pc, #256]	; (8019670 <icmp_input+0x1f8>)
 801956e:	22b6      	movs	r2, #182	; 0xb6
 8019570:	4940      	ldr	r1, [pc, #256]	; (8019674 <icmp_input+0x1fc>)
 8019572:	4841      	ldr	r0, [pc, #260]	; (8019678 <icmp_input+0x200>)
 8019574:	f002 f9da 	bl	801b92c <printf>
          pbuf_free(r);
 8019578:	6978      	ldr	r0, [r7, #20]
 801957a:	f7f7 fe71 	bl	8011260 <pbuf_free>
          goto icmperr;
 801957e:	e06c      	b.n	801965a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019580:	6879      	ldr	r1, [r7, #4]
 8019582:	6978      	ldr	r0, [r7, #20]
 8019584:	f7f7 ffa0 	bl	80114c8 <pbuf_copy>
 8019588:	4603      	mov	r3, r0
 801958a:	2b00      	cmp	r3, #0
 801958c:	d003      	beq.n	8019596 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801958e:	6978      	ldr	r0, [r7, #20]
 8019590:	f7f7 fe66 	bl	8011260 <pbuf_free>
          goto icmperr;
 8019594:	e061      	b.n	801965a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019596:	6878      	ldr	r0, [r7, #4]
 8019598:	f7f7 fe62 	bl	8011260 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801959c:	697b      	ldr	r3, [r7, #20]
 801959e:	607b      	str	r3, [r7, #4]
 80195a0:	e00f      	b.n	80195c2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80195a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80195a4:	330e      	adds	r3, #14
 80195a6:	4619      	mov	r1, r3
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	f7f7 fdd3 	bl	8011154 <pbuf_remove_header>
 80195ae:	4603      	mov	r3, r0
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d006      	beq.n	80195c2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80195b4:	4b2e      	ldr	r3, [pc, #184]	; (8019670 <icmp_input+0x1f8>)
 80195b6:	22c7      	movs	r2, #199	; 0xc7
 80195b8:	4930      	ldr	r1, [pc, #192]	; (801967c <icmp_input+0x204>)
 80195ba:	482f      	ldr	r0, [pc, #188]	; (8019678 <icmp_input+0x200>)
 80195bc:	f002 f9b6 	bl	801b92c <printf>
          goto icmperr;
 80195c0:	e04b      	b.n	801965a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	685b      	ldr	r3, [r3, #4]
 80195c6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80195c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80195ca:	4619      	mov	r1, r3
 80195cc:	6878      	ldr	r0, [r7, #4]
 80195ce:	f7f7 fdb1 	bl	8011134 <pbuf_add_header>
 80195d2:	4603      	mov	r3, r0
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d12b      	bne.n	8019630 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	685b      	ldr	r3, [r3, #4]
 80195dc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80195de:	69fb      	ldr	r3, [r7, #28]
 80195e0:	681a      	ldr	r2, [r3, #0]
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80195e6:	4b20      	ldr	r3, [pc, #128]	; (8019668 <icmp_input+0x1f0>)
 80195e8:	691a      	ldr	r2, [r3, #16]
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	2200      	movs	r2, #0
 80195f2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80195f4:	693b      	ldr	r3, [r7, #16]
 80195f6:	2200      	movs	r2, #0
 80195f8:	709a      	strb	r2, [r3, #2]
 80195fa:	2200      	movs	r2, #0
 80195fc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	22ff      	movs	r2, #255	; 0xff
 8019602:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	2200      	movs	r2, #0
 8019608:	729a      	strb	r2, [r3, #10]
 801960a:	2200      	movs	r2, #0
 801960c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801960e:	683b      	ldr	r3, [r7, #0]
 8019610:	9302      	str	r3, [sp, #8]
 8019612:	2301      	movs	r3, #1
 8019614:	9301      	str	r3, [sp, #4]
 8019616:	2300      	movs	r3, #0
 8019618:	9300      	str	r3, [sp, #0]
 801961a:	23ff      	movs	r3, #255	; 0xff
 801961c:	2200      	movs	r2, #0
 801961e:	69f9      	ldr	r1, [r7, #28]
 8019620:	6878      	ldr	r0, [r7, #4]
 8019622:	f000 fa75 	bl	8019b10 <ip4_output_if>
 8019626:	4603      	mov	r3, r0
 8019628:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801962a:	e001      	b.n	8019630 <icmp_input+0x1b8>
      break;
 801962c:	bf00      	nop
 801962e:	e000      	b.n	8019632 <icmp_input+0x1ba>
      break;
 8019630:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019632:	6878      	ldr	r0, [r7, #4]
 8019634:	f7f7 fe14 	bl	8011260 <pbuf_free>
  return;
 8019638:	e013      	b.n	8019662 <icmp_input+0x1ea>
    goto lenerr;
 801963a:	bf00      	nop
 801963c:	e002      	b.n	8019644 <icmp_input+0x1cc>
    goto lenerr;
 801963e:	bf00      	nop
 8019640:	e000      	b.n	8019644 <icmp_input+0x1cc>
        goto lenerr;
 8019642:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019644:	6878      	ldr	r0, [r7, #4]
 8019646:	f7f7 fe0b 	bl	8011260 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801964a:	e00a      	b.n	8019662 <icmp_input+0x1ea>
        goto icmperr;
 801964c:	bf00      	nop
 801964e:	e004      	b.n	801965a <icmp_input+0x1e2>
        goto icmperr;
 8019650:	bf00      	nop
 8019652:	e002      	b.n	801965a <icmp_input+0x1e2>
          goto icmperr;
 8019654:	bf00      	nop
 8019656:	e000      	b.n	801965a <icmp_input+0x1e2>
          goto icmperr;
 8019658:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f7f7 fe00 	bl	8011260 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019660:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019662:	3728      	adds	r7, #40	; 0x28
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}
 8019668:	20008734 	.word	0x20008734
 801966c:	20008748 	.word	0x20008748
 8019670:	08027bd4 	.word	0x08027bd4
 8019674:	08027c0c 	.word	0x08027c0c
 8019678:	08027c44 	.word	0x08027c44
 801967c:	08027c6c 	.word	0x08027c6c

08019680 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b082      	sub	sp, #8
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
 8019688:	460b      	mov	r3, r1
 801968a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801968c:	78fb      	ldrb	r3, [r7, #3]
 801968e:	461a      	mov	r2, r3
 8019690:	2103      	movs	r1, #3
 8019692:	6878      	ldr	r0, [r7, #4]
 8019694:	f000 f814 	bl	80196c0 <icmp_send_response>
}
 8019698:	bf00      	nop
 801969a:	3708      	adds	r7, #8
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}

080196a0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b082      	sub	sp, #8
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
 80196a8:	460b      	mov	r3, r1
 80196aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80196ac:	78fb      	ldrb	r3, [r7, #3]
 80196ae:	461a      	mov	r2, r3
 80196b0:	210b      	movs	r1, #11
 80196b2:	6878      	ldr	r0, [r7, #4]
 80196b4:	f000 f804 	bl	80196c0 <icmp_send_response>
}
 80196b8:	bf00      	nop
 80196ba:	3708      	adds	r7, #8
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}

080196c0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b08c      	sub	sp, #48	; 0x30
 80196c4:	af04      	add	r7, sp, #16
 80196c6:	6078      	str	r0, [r7, #4]
 80196c8:	460b      	mov	r3, r1
 80196ca:	70fb      	strb	r3, [r7, #3]
 80196cc:	4613      	mov	r3, r2
 80196ce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80196d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80196d4:	2124      	movs	r1, #36	; 0x24
 80196d6:	2022      	movs	r0, #34	; 0x22
 80196d8:	f7f7 fade 	bl	8010c98 <pbuf_alloc>
 80196dc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80196de:	69fb      	ldr	r3, [r7, #28]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d04c      	beq.n	801977e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80196e4:	69fb      	ldr	r3, [r7, #28]
 80196e6:	895b      	ldrh	r3, [r3, #10]
 80196e8:	2b23      	cmp	r3, #35	; 0x23
 80196ea:	d806      	bhi.n	80196fa <icmp_send_response+0x3a>
 80196ec:	4b26      	ldr	r3, [pc, #152]	; (8019788 <icmp_send_response+0xc8>)
 80196ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80196f2:	4926      	ldr	r1, [pc, #152]	; (801978c <icmp_send_response+0xcc>)
 80196f4:	4826      	ldr	r0, [pc, #152]	; (8019790 <icmp_send_response+0xd0>)
 80196f6:	f002 f919 	bl	801b92c <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	685b      	ldr	r3, [r3, #4]
 80196fe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019700:	69fb      	ldr	r3, [r7, #28]
 8019702:	685b      	ldr	r3, [r3, #4]
 8019704:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	78fa      	ldrb	r2, [r7, #3]
 801970a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	78ba      	ldrb	r2, [r7, #2]
 8019710:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019712:	697b      	ldr	r3, [r7, #20]
 8019714:	2200      	movs	r2, #0
 8019716:	711a      	strb	r2, [r3, #4]
 8019718:	2200      	movs	r2, #0
 801971a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	2200      	movs	r2, #0
 8019720:	719a      	strb	r2, [r3, #6]
 8019722:	2200      	movs	r2, #0
 8019724:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019726:	69fb      	ldr	r3, [r7, #28]
 8019728:	685b      	ldr	r3, [r3, #4]
 801972a:	f103 0008 	add.w	r0, r3, #8
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	221c      	movs	r2, #28
 8019734:	4619      	mov	r1, r3
 8019736:	f001 fe4b 	bl	801b3d0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801973a:	69bb      	ldr	r3, [r7, #24]
 801973c:	68db      	ldr	r3, [r3, #12]
 801973e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019740:	f107 030c 	add.w	r3, r7, #12
 8019744:	4618      	mov	r0, r3
 8019746:	f000 f825 	bl	8019794 <ip4_route>
 801974a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801974c:	693b      	ldr	r3, [r7, #16]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d011      	beq.n	8019776 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019752:	697b      	ldr	r3, [r7, #20]
 8019754:	2200      	movs	r2, #0
 8019756:	709a      	strb	r2, [r3, #2]
 8019758:	2200      	movs	r2, #0
 801975a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801975c:	f107 020c 	add.w	r2, r7, #12
 8019760:	693b      	ldr	r3, [r7, #16]
 8019762:	9302      	str	r3, [sp, #8]
 8019764:	2301      	movs	r3, #1
 8019766:	9301      	str	r3, [sp, #4]
 8019768:	2300      	movs	r3, #0
 801976a:	9300      	str	r3, [sp, #0]
 801976c:	23ff      	movs	r3, #255	; 0xff
 801976e:	2100      	movs	r1, #0
 8019770:	69f8      	ldr	r0, [r7, #28]
 8019772:	f000 f9cd 	bl	8019b10 <ip4_output_if>
  }
  pbuf_free(q);
 8019776:	69f8      	ldr	r0, [r7, #28]
 8019778:	f7f7 fd72 	bl	8011260 <pbuf_free>
 801977c:	e000      	b.n	8019780 <icmp_send_response+0xc0>
    return;
 801977e:	bf00      	nop
}
 8019780:	3720      	adds	r7, #32
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}
 8019786:	bf00      	nop
 8019788:	08027bd4 	.word	0x08027bd4
 801978c:	08027ca0 	.word	0x08027ca0
 8019790:	08027c44 	.word	0x08027c44

08019794 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019794:	b480      	push	{r7}
 8019796:	b085      	sub	sp, #20
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801979c:	4b33      	ldr	r3, [pc, #204]	; (801986c <ip4_route+0xd8>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	60fb      	str	r3, [r7, #12]
 80197a2:	e036      	b.n	8019812 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197aa:	f003 0301 	and.w	r3, r3, #1
 80197ae:	b2db      	uxtb	r3, r3
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d02b      	beq.n	801980c <ip4_route+0x78>
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197ba:	089b      	lsrs	r3, r3, #2
 80197bc:	f003 0301 	and.w	r3, r3, #1
 80197c0:	b2db      	uxtb	r3, r3
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d022      	beq.n	801980c <ip4_route+0x78>
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	3304      	adds	r3, #4
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d01d      	beq.n	801980c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681a      	ldr	r2, [r3, #0]
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	3304      	adds	r3, #4
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	405a      	eors	r2, r3
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	3308      	adds	r3, #8
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	4013      	ands	r3, r2
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d101      	bne.n	80197ec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	e038      	b.n	801985e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197f2:	f003 0302 	and.w	r3, r3, #2
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d108      	bne.n	801980c <ip4_route+0x78>
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	681a      	ldr	r2, [r3, #0]
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	330c      	adds	r3, #12
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	429a      	cmp	r2, r3
 8019806:	d101      	bne.n	801980c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	e028      	b.n	801985e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	60fb      	str	r3, [r7, #12]
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d1c5      	bne.n	80197a4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019818:	4b15      	ldr	r3, [pc, #84]	; (8019870 <ip4_route+0xdc>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d01a      	beq.n	8019856 <ip4_route+0xc2>
 8019820:	4b13      	ldr	r3, [pc, #76]	; (8019870 <ip4_route+0xdc>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019828:	f003 0301 	and.w	r3, r3, #1
 801982c:	2b00      	cmp	r3, #0
 801982e:	d012      	beq.n	8019856 <ip4_route+0xc2>
 8019830:	4b0f      	ldr	r3, [pc, #60]	; (8019870 <ip4_route+0xdc>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019838:	f003 0304 	and.w	r3, r3, #4
 801983c:	2b00      	cmp	r3, #0
 801983e:	d00a      	beq.n	8019856 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019840:	4b0b      	ldr	r3, [pc, #44]	; (8019870 <ip4_route+0xdc>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	3304      	adds	r3, #4
 8019846:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019848:	2b00      	cmp	r3, #0
 801984a:	d004      	beq.n	8019856 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	b2db      	uxtb	r3, r3
 8019852:	2b7f      	cmp	r3, #127	; 0x7f
 8019854:	d101      	bne.n	801985a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019856:	2300      	movs	r3, #0
 8019858:	e001      	b.n	801985e <ip4_route+0xca>
  }

  return netif_default;
 801985a:	4b05      	ldr	r3, [pc, #20]	; (8019870 <ip4_route+0xdc>)
 801985c:	681b      	ldr	r3, [r3, #0]
}
 801985e:	4618      	mov	r0, r3
 8019860:	3714      	adds	r7, #20
 8019862:	46bd      	mov	sp, r7
 8019864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019868:	4770      	bx	lr
 801986a:	bf00      	nop
 801986c:	2000be38 	.word	0x2000be38
 8019870:	2000be3c 	.word	0x2000be3c

08019874 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b082      	sub	sp, #8
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019882:	f003 0301 	and.w	r3, r3, #1
 8019886:	b2db      	uxtb	r3, r3
 8019888:	2b00      	cmp	r3, #0
 801988a:	d016      	beq.n	80198ba <ip4_input_accept+0x46>
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	3304      	adds	r3, #4
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d011      	beq.n	80198ba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019896:	4b0b      	ldr	r3, [pc, #44]	; (80198c4 <ip4_input_accept+0x50>)
 8019898:	695a      	ldr	r2, [r3, #20]
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	3304      	adds	r3, #4
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	429a      	cmp	r2, r3
 80198a2:	d008      	beq.n	80198b6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80198a4:	4b07      	ldr	r3, [pc, #28]	; (80198c4 <ip4_input_accept+0x50>)
 80198a6:	695b      	ldr	r3, [r3, #20]
 80198a8:	6879      	ldr	r1, [r7, #4]
 80198aa:	4618      	mov	r0, r3
 80198ac:	f000 fa08 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 80198b0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d001      	beq.n	80198ba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80198b6:	2301      	movs	r3, #1
 80198b8:	e000      	b.n	80198bc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80198ba:	2300      	movs	r3, #0
}
 80198bc:	4618      	mov	r0, r3
 80198be:	3708      	adds	r7, #8
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	20008734 	.word	0x20008734

080198c8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b086      	sub	sp, #24
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	6078      	str	r0, [r7, #4]
 80198d0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	685b      	ldr	r3, [r3, #4]
 80198d6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80198d8:	697b      	ldr	r3, [r7, #20]
 80198da:	781b      	ldrb	r3, [r3, #0]
 80198dc:	091b      	lsrs	r3, r3, #4
 80198de:	b2db      	uxtb	r3, r3
 80198e0:	2b04      	cmp	r3, #4
 80198e2:	d004      	beq.n	80198ee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80198e4:	6878      	ldr	r0, [r7, #4]
 80198e6:	f7f7 fcbb 	bl	8011260 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80198ea:	2300      	movs	r3, #0
 80198ec:	e107      	b.n	8019afe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80198ee:	697b      	ldr	r3, [r7, #20]
 80198f0:	781b      	ldrb	r3, [r3, #0]
 80198f2:	f003 030f 	and.w	r3, r3, #15
 80198f6:	b2db      	uxtb	r3, r3
 80198f8:	009b      	lsls	r3, r3, #2
 80198fa:	b2db      	uxtb	r3, r3
 80198fc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	885b      	ldrh	r3, [r3, #2]
 8019902:	b29b      	uxth	r3, r3
 8019904:	4618      	mov	r0, r3
 8019906:	f7f6 f8ef 	bl	800fae8 <lwip_htons>
 801990a:	4603      	mov	r3, r0
 801990c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	891b      	ldrh	r3, [r3, #8]
 8019912:	89ba      	ldrh	r2, [r7, #12]
 8019914:	429a      	cmp	r2, r3
 8019916:	d204      	bcs.n	8019922 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019918:	89bb      	ldrh	r3, [r7, #12]
 801991a:	4619      	mov	r1, r3
 801991c:	6878      	ldr	r0, [r7, #4]
 801991e:	f7f7 fb19 	bl	8010f54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	895b      	ldrh	r3, [r3, #10]
 8019926:	89fa      	ldrh	r2, [r7, #14]
 8019928:	429a      	cmp	r2, r3
 801992a:	d807      	bhi.n	801993c <ip4_input+0x74>
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	891b      	ldrh	r3, [r3, #8]
 8019930:	89ba      	ldrh	r2, [r7, #12]
 8019932:	429a      	cmp	r2, r3
 8019934:	d802      	bhi.n	801993c <ip4_input+0x74>
 8019936:	89fb      	ldrh	r3, [r7, #14]
 8019938:	2b13      	cmp	r3, #19
 801993a:	d804      	bhi.n	8019946 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801993c:	6878      	ldr	r0, [r7, #4]
 801993e:	f7f7 fc8f 	bl	8011260 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019942:	2300      	movs	r3, #0
 8019944:	e0db      	b.n	8019afe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019946:	697b      	ldr	r3, [r7, #20]
 8019948:	691b      	ldr	r3, [r3, #16]
 801994a:	4a6f      	ldr	r2, [pc, #444]	; (8019b08 <ip4_input+0x240>)
 801994c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801994e:	697b      	ldr	r3, [r7, #20]
 8019950:	68db      	ldr	r3, [r3, #12]
 8019952:	4a6d      	ldr	r2, [pc, #436]	; (8019b08 <ip4_input+0x240>)
 8019954:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019956:	4b6c      	ldr	r3, [pc, #432]	; (8019b08 <ip4_input+0x240>)
 8019958:	695b      	ldr	r3, [r3, #20]
 801995a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801995e:	2be0      	cmp	r3, #224	; 0xe0
 8019960:	d112      	bne.n	8019988 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019968:	f003 0301 	and.w	r3, r3, #1
 801996c:	b2db      	uxtb	r3, r3
 801996e:	2b00      	cmp	r3, #0
 8019970:	d007      	beq.n	8019982 <ip4_input+0xba>
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	3304      	adds	r3, #4
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d002      	beq.n	8019982 <ip4_input+0xba>
      netif = inp;
 801997c:	683b      	ldr	r3, [r7, #0]
 801997e:	613b      	str	r3, [r7, #16]
 8019980:	e02a      	b.n	80199d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019982:	2300      	movs	r3, #0
 8019984:	613b      	str	r3, [r7, #16]
 8019986:	e027      	b.n	80199d8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019988:	6838      	ldr	r0, [r7, #0]
 801998a:	f7ff ff73 	bl	8019874 <ip4_input_accept>
 801998e:	4603      	mov	r3, r0
 8019990:	2b00      	cmp	r3, #0
 8019992:	d002      	beq.n	801999a <ip4_input+0xd2>
      netif = inp;
 8019994:	683b      	ldr	r3, [r7, #0]
 8019996:	613b      	str	r3, [r7, #16]
 8019998:	e01e      	b.n	80199d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801999a:	2300      	movs	r3, #0
 801999c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801999e:	4b5a      	ldr	r3, [pc, #360]	; (8019b08 <ip4_input+0x240>)
 80199a0:	695b      	ldr	r3, [r3, #20]
 80199a2:	b2db      	uxtb	r3, r3
 80199a4:	2b7f      	cmp	r3, #127	; 0x7f
 80199a6:	d017      	beq.n	80199d8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80199a8:	4b58      	ldr	r3, [pc, #352]	; (8019b0c <ip4_input+0x244>)
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	613b      	str	r3, [r7, #16]
 80199ae:	e00e      	b.n	80199ce <ip4_input+0x106>
          if (netif == inp) {
 80199b0:	693a      	ldr	r2, [r7, #16]
 80199b2:	683b      	ldr	r3, [r7, #0]
 80199b4:	429a      	cmp	r2, r3
 80199b6:	d006      	beq.n	80199c6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80199b8:	6938      	ldr	r0, [r7, #16]
 80199ba:	f7ff ff5b 	bl	8019874 <ip4_input_accept>
 80199be:	4603      	mov	r3, r0
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d108      	bne.n	80199d6 <ip4_input+0x10e>
 80199c4:	e000      	b.n	80199c8 <ip4_input+0x100>
            continue;
 80199c6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80199c8:	693b      	ldr	r3, [r7, #16]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	613b      	str	r3, [r7, #16]
 80199ce:	693b      	ldr	r3, [r7, #16]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d1ed      	bne.n	80199b0 <ip4_input+0xe8>
 80199d4:	e000      	b.n	80199d8 <ip4_input+0x110>
            break;
 80199d6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80199d8:	4b4b      	ldr	r3, [pc, #300]	; (8019b08 <ip4_input+0x240>)
 80199da:	691b      	ldr	r3, [r3, #16]
 80199dc:	6839      	ldr	r1, [r7, #0]
 80199de:	4618      	mov	r0, r3
 80199e0:	f000 f96e 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 80199e4:	4603      	mov	r3, r0
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d105      	bne.n	80199f6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80199ea:	4b47      	ldr	r3, [pc, #284]	; (8019b08 <ip4_input+0x240>)
 80199ec:	691b      	ldr	r3, [r3, #16]
 80199ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80199f2:	2be0      	cmp	r3, #224	; 0xe0
 80199f4:	d104      	bne.n	8019a00 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80199f6:	6878      	ldr	r0, [r7, #4]
 80199f8:	f7f7 fc32 	bl	8011260 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80199fc:	2300      	movs	r3, #0
 80199fe:	e07e      	b.n	8019afe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019a00:	693b      	ldr	r3, [r7, #16]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d104      	bne.n	8019a10 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019a06:	6878      	ldr	r0, [r7, #4]
 8019a08:	f7f7 fc2a 	bl	8011260 <pbuf_free>
    return ERR_OK;
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	e076      	b.n	8019afe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019a10:	697b      	ldr	r3, [r7, #20]
 8019a12:	88db      	ldrh	r3, [r3, #6]
 8019a14:	b29b      	uxth	r3, r3
 8019a16:	461a      	mov	r2, r3
 8019a18:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019a1c:	4013      	ands	r3, r2
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d00b      	beq.n	8019a3a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019a22:	6878      	ldr	r0, [r7, #4]
 8019a24:	f000 fdbc 	bl	801a5a0 <ip4_reass>
 8019a28:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d101      	bne.n	8019a34 <ip4_input+0x16c>
      return ERR_OK;
 8019a30:	2300      	movs	r3, #0
 8019a32:	e064      	b.n	8019afe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	685b      	ldr	r3, [r3, #4]
 8019a38:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019a3a:	4a33      	ldr	r2, [pc, #204]	; (8019b08 <ip4_input+0x240>)
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019a40:	4a31      	ldr	r2, [pc, #196]	; (8019b08 <ip4_input+0x240>)
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019a46:	4a30      	ldr	r2, [pc, #192]	; (8019b08 <ip4_input+0x240>)
 8019a48:	697b      	ldr	r3, [r7, #20]
 8019a4a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019a4c:	697b      	ldr	r3, [r7, #20]
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	f003 030f 	and.w	r3, r3, #15
 8019a54:	b2db      	uxtb	r3, r3
 8019a56:	009b      	lsls	r3, r3, #2
 8019a58:	b2db      	uxtb	r3, r3
 8019a5a:	b29a      	uxth	r2, r3
 8019a5c:	4b2a      	ldr	r3, [pc, #168]	; (8019b08 <ip4_input+0x240>)
 8019a5e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019a60:	89fb      	ldrh	r3, [r7, #14]
 8019a62:	4619      	mov	r1, r3
 8019a64:	6878      	ldr	r0, [r7, #4]
 8019a66:	f7f7 fb75 	bl	8011154 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019a6a:	697b      	ldr	r3, [r7, #20]
 8019a6c:	7a5b      	ldrb	r3, [r3, #9]
 8019a6e:	2b11      	cmp	r3, #17
 8019a70:	d006      	beq.n	8019a80 <ip4_input+0x1b8>
 8019a72:	2b11      	cmp	r3, #17
 8019a74:	dc13      	bgt.n	8019a9e <ip4_input+0x1d6>
 8019a76:	2b01      	cmp	r3, #1
 8019a78:	d00c      	beq.n	8019a94 <ip4_input+0x1cc>
 8019a7a:	2b06      	cmp	r3, #6
 8019a7c:	d005      	beq.n	8019a8a <ip4_input+0x1c2>
 8019a7e:	e00e      	b.n	8019a9e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019a80:	6839      	ldr	r1, [r7, #0]
 8019a82:	6878      	ldr	r0, [r7, #4]
 8019a84:	f7fe f970 	bl	8017d68 <udp_input>
        break;
 8019a88:	e026      	b.n	8019ad8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019a8a:	6839      	ldr	r1, [r7, #0]
 8019a8c:	6878      	ldr	r0, [r7, #4]
 8019a8e:	f7f9 fd2d 	bl	80134ec <tcp_input>
        break;
 8019a92:	e021      	b.n	8019ad8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019a94:	6839      	ldr	r1, [r7, #0]
 8019a96:	6878      	ldr	r0, [r7, #4]
 8019a98:	f7ff fcee 	bl	8019478 <icmp_input>
        break;
 8019a9c:	e01c      	b.n	8019ad8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019a9e:	4b1a      	ldr	r3, [pc, #104]	; (8019b08 <ip4_input+0x240>)
 8019aa0:	695b      	ldr	r3, [r3, #20]
 8019aa2:	6939      	ldr	r1, [r7, #16]
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f000 f90b 	bl	8019cc0 <ip4_addr_isbroadcast_u32>
 8019aaa:	4603      	mov	r3, r0
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d10f      	bne.n	8019ad0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019ab0:	4b15      	ldr	r3, [pc, #84]	; (8019b08 <ip4_input+0x240>)
 8019ab2:	695b      	ldr	r3, [r3, #20]
 8019ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019ab8:	2be0      	cmp	r3, #224	; 0xe0
 8019aba:	d009      	beq.n	8019ad0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019ac0:	4619      	mov	r1, r3
 8019ac2:	6878      	ldr	r0, [r7, #4]
 8019ac4:	f7f7 fbb9 	bl	801123a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019ac8:	2102      	movs	r1, #2
 8019aca:	6878      	ldr	r0, [r7, #4]
 8019acc:	f7ff fdd8 	bl	8019680 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019ad0:	6878      	ldr	r0, [r7, #4]
 8019ad2:	f7f7 fbc5 	bl	8011260 <pbuf_free>
        break;
 8019ad6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019ad8:	4b0b      	ldr	r3, [pc, #44]	; (8019b08 <ip4_input+0x240>)
 8019ada:	2200      	movs	r2, #0
 8019adc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019ade:	4b0a      	ldr	r3, [pc, #40]	; (8019b08 <ip4_input+0x240>)
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019ae4:	4b08      	ldr	r3, [pc, #32]	; (8019b08 <ip4_input+0x240>)
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019aea:	4b07      	ldr	r3, [pc, #28]	; (8019b08 <ip4_input+0x240>)
 8019aec:	2200      	movs	r2, #0
 8019aee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019af0:	4b05      	ldr	r3, [pc, #20]	; (8019b08 <ip4_input+0x240>)
 8019af2:	2200      	movs	r2, #0
 8019af4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019af6:	4b04      	ldr	r3, [pc, #16]	; (8019b08 <ip4_input+0x240>)
 8019af8:	2200      	movs	r2, #0
 8019afa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019afc:	2300      	movs	r3, #0
}
 8019afe:	4618      	mov	r0, r3
 8019b00:	3718      	adds	r7, #24
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bd80      	pop	{r7, pc}
 8019b06:	bf00      	nop
 8019b08:	20008734 	.word	0x20008734
 8019b0c:	2000be38 	.word	0x2000be38

08019b10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b08a      	sub	sp, #40	; 0x28
 8019b14:	af04      	add	r7, sp, #16
 8019b16:	60f8      	str	r0, [r7, #12]
 8019b18:	60b9      	str	r1, [r7, #8]
 8019b1a:	607a      	str	r2, [r7, #4]
 8019b1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d009      	beq.n	8019b3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019b28:	68bb      	ldr	r3, [r7, #8]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d003      	beq.n	8019b36 <ip4_output_if+0x26>
 8019b2e:	68bb      	ldr	r3, [r7, #8]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d102      	bne.n	8019b3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b38:	3304      	adds	r3, #4
 8019b3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019b3c:	78fa      	ldrb	r2, [r7, #3]
 8019b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b40:	9302      	str	r3, [sp, #8]
 8019b42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b46:	9301      	str	r3, [sp, #4]
 8019b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019b4c:	9300      	str	r3, [sp, #0]
 8019b4e:	4613      	mov	r3, r2
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	6979      	ldr	r1, [r7, #20]
 8019b54:	68f8      	ldr	r0, [r7, #12]
 8019b56:	f000 f805 	bl	8019b64 <ip4_output_if_src>
 8019b5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	3718      	adds	r7, #24
 8019b60:	46bd      	mov	sp, r7
 8019b62:	bd80      	pop	{r7, pc}

08019b64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b088      	sub	sp, #32
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	60f8      	str	r0, [r7, #12]
 8019b6c:	60b9      	str	r1, [r7, #8]
 8019b6e:	607a      	str	r2, [r7, #4]
 8019b70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	7b9b      	ldrb	r3, [r3, #14]
 8019b76:	2b01      	cmp	r3, #1
 8019b78:	d006      	beq.n	8019b88 <ip4_output_if_src+0x24>
 8019b7a:	4b4b      	ldr	r3, [pc, #300]	; (8019ca8 <ip4_output_if_src+0x144>)
 8019b7c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019b80:	494a      	ldr	r1, [pc, #296]	; (8019cac <ip4_output_if_src+0x148>)
 8019b82:	484b      	ldr	r0, [pc, #300]	; (8019cb0 <ip4_output_if_src+0x14c>)
 8019b84:	f001 fed2 	bl	801b92c <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d060      	beq.n	8019c50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019b8e:	2314      	movs	r3, #20
 8019b90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019b92:	2114      	movs	r1, #20
 8019b94:	68f8      	ldr	r0, [r7, #12]
 8019b96:	f7f7 facd 	bl	8011134 <pbuf_add_header>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d002      	beq.n	8019ba6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019ba0:	f06f 0301 	mvn.w	r3, #1
 8019ba4:	e07c      	b.n	8019ca0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	685b      	ldr	r3, [r3, #4]
 8019baa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	895b      	ldrh	r3, [r3, #10]
 8019bb0:	2b13      	cmp	r3, #19
 8019bb2:	d806      	bhi.n	8019bc2 <ip4_output_if_src+0x5e>
 8019bb4:	4b3c      	ldr	r3, [pc, #240]	; (8019ca8 <ip4_output_if_src+0x144>)
 8019bb6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019bba:	493e      	ldr	r1, [pc, #248]	; (8019cb4 <ip4_output_if_src+0x150>)
 8019bbc:	483c      	ldr	r0, [pc, #240]	; (8019cb0 <ip4_output_if_src+0x14c>)
 8019bbe:	f001 feb5 	bl	801b92c <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019bc2:	69fb      	ldr	r3, [r7, #28]
 8019bc4:	78fa      	ldrb	r2, [r7, #3]
 8019bc6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019bc8:	69fb      	ldr	r3, [r7, #28]
 8019bca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019bce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	681a      	ldr	r2, [r3, #0]
 8019bd4:	69fb      	ldr	r3, [r7, #28]
 8019bd6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019bd8:	8b7b      	ldrh	r3, [r7, #26]
 8019bda:	089b      	lsrs	r3, r3, #2
 8019bdc:	b29b      	uxth	r3, r3
 8019bde:	b2db      	uxtb	r3, r3
 8019be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019be4:	b2da      	uxtb	r2, r3
 8019be6:	69fb      	ldr	r3, [r7, #28]
 8019be8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019bea:	69fb      	ldr	r3, [r7, #28]
 8019bec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019bf0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	891b      	ldrh	r3, [r3, #8]
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	f7f5 ff76 	bl	800fae8 <lwip_htons>
 8019bfc:	4603      	mov	r3, r0
 8019bfe:	461a      	mov	r2, r3
 8019c00:	69fb      	ldr	r3, [r7, #28]
 8019c02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019c04:	69fb      	ldr	r3, [r7, #28]
 8019c06:	2200      	movs	r2, #0
 8019c08:	719a      	strb	r2, [r3, #6]
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019c0e:	4b2a      	ldr	r3, [pc, #168]	; (8019cb8 <ip4_output_if_src+0x154>)
 8019c10:	881b      	ldrh	r3, [r3, #0]
 8019c12:	4618      	mov	r0, r3
 8019c14:	f7f5 ff68 	bl	800fae8 <lwip_htons>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	461a      	mov	r2, r3
 8019c1c:	69fb      	ldr	r3, [r7, #28]
 8019c1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019c20:	4b25      	ldr	r3, [pc, #148]	; (8019cb8 <ip4_output_if_src+0x154>)
 8019c22:	881b      	ldrh	r3, [r3, #0]
 8019c24:	3301      	adds	r3, #1
 8019c26:	b29a      	uxth	r2, r3
 8019c28:	4b23      	ldr	r3, [pc, #140]	; (8019cb8 <ip4_output_if_src+0x154>)
 8019c2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019c2c:	68bb      	ldr	r3, [r7, #8]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d104      	bne.n	8019c3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019c32:	4b22      	ldr	r3, [pc, #136]	; (8019cbc <ip4_output_if_src+0x158>)
 8019c34:	681a      	ldr	r2, [r3, #0]
 8019c36:	69fb      	ldr	r3, [r7, #28]
 8019c38:	60da      	str	r2, [r3, #12]
 8019c3a:	e003      	b.n	8019c44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	681a      	ldr	r2, [r3, #0]
 8019c40:	69fb      	ldr	r3, [r7, #28]
 8019c42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019c44:	69fb      	ldr	r3, [r7, #28]
 8019c46:	2200      	movs	r2, #0
 8019c48:	729a      	strb	r2, [r3, #10]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	72da      	strb	r2, [r3, #11]
 8019c4e:	e00f      	b.n	8019c70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	895b      	ldrh	r3, [r3, #10]
 8019c54:	2b13      	cmp	r3, #19
 8019c56:	d802      	bhi.n	8019c5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019c58:	f06f 0301 	mvn.w	r3, #1
 8019c5c:	e020      	b.n	8019ca0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	685b      	ldr	r3, [r3, #4]
 8019c62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019c64:	69fb      	ldr	r3, [r7, #28]
 8019c66:	691b      	ldr	r3, [r3, #16]
 8019c68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019c6a:	f107 0314 	add.w	r3, r7, #20
 8019c6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c72:	8c1b      	ldrh	r3, [r3, #32]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d00c      	beq.n	8019c92 <ip4_output_if_src+0x12e>
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	891a      	ldrh	r2, [r3, #8]
 8019c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c7e:	8c1b      	ldrh	r3, [r3, #32]
 8019c80:	429a      	cmp	r2, r3
 8019c82:	d906      	bls.n	8019c92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019c84:	687a      	ldr	r2, [r7, #4]
 8019c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019c88:	68f8      	ldr	r0, [r7, #12]
 8019c8a:	f000 fe77 	bl	801a97c <ip4_frag>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	e006      	b.n	8019ca0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c94:	695b      	ldr	r3, [r3, #20]
 8019c96:	687a      	ldr	r2, [r7, #4]
 8019c98:	68f9      	ldr	r1, [r7, #12]
 8019c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c9c:	4798      	blx	r3
 8019c9e:	4603      	mov	r3, r0
}
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	3720      	adds	r7, #32
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	bd80      	pop	{r7, pc}
 8019ca8:	08027ccc 	.word	0x08027ccc
 8019cac:	08027d00 	.word	0x08027d00
 8019cb0:	08027d0c 	.word	0x08027d0c
 8019cb4:	08027d34 	.word	0x08027d34
 8019cb8:	2000506a 	.word	0x2000506a
 8019cbc:	08029094 	.word	0x08029094

08019cc0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019cc0:	b480      	push	{r7}
 8019cc2:	b085      	sub	sp, #20
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
 8019cc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cd4:	d002      	beq.n	8019cdc <ip4_addr_isbroadcast_u32+0x1c>
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d101      	bne.n	8019ce0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019cdc:	2301      	movs	r3, #1
 8019cde:	e02a      	b.n	8019d36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019ce6:	f003 0302 	and.w	r3, r3, #2
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d101      	bne.n	8019cf2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019cee:	2300      	movs	r3, #0
 8019cf0:	e021      	b.n	8019d36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	3304      	adds	r3, #4
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	687a      	ldr	r2, [r7, #4]
 8019cfa:	429a      	cmp	r2, r3
 8019cfc:	d101      	bne.n	8019d02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019cfe:	2300      	movs	r3, #0
 8019d00:	e019      	b.n	8019d36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019d02:	68fa      	ldr	r2, [r7, #12]
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	3304      	adds	r3, #4
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	405a      	eors	r2, r3
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	3308      	adds	r3, #8
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	4013      	ands	r3, r2
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d10d      	bne.n	8019d34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	3308      	adds	r3, #8
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	43da      	mvns	r2, r3
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	3308      	adds	r3, #8
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d101      	bne.n	8019d34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019d30:	2301      	movs	r3, #1
 8019d32:	e000      	b.n	8019d36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019d34:	2300      	movs	r3, #0
  }
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	3714      	adds	r7, #20
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d40:	4770      	bx	lr
	...

08019d44 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b08a      	sub	sp, #40	; 0x28
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
 8019d4c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8019d4e:	f107 030c 	add.w	r3, r7, #12
 8019d52:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	781b      	ldrb	r3, [r3, #0]
 8019d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8019d5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d60:	3301      	adds	r3, #1
 8019d62:	4a89      	ldr	r2, [pc, #548]	; (8019f88 <ip4addr_aton+0x244>)
 8019d64:	4413      	add	r3, r2
 8019d66:	781b      	ldrb	r3, [r3, #0]
 8019d68:	f003 0304 	and.w	r3, r3, #4
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d101      	bne.n	8019d74 <ip4addr_aton+0x30>
      return 0;
 8019d70:	2300      	movs	r3, #0
 8019d72:	e105      	b.n	8019f80 <ip4addr_aton+0x23c>
    }
    val = 0;
 8019d74:	2300      	movs	r3, #0
 8019d76:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8019d78:	230a      	movs	r3, #10
 8019d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8019d7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d82:	2b30      	cmp	r3, #48	; 0x30
 8019d84:	d11c      	bne.n	8019dc0 <ip4addr_aton+0x7c>
      c = *++cp;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	3301      	adds	r3, #1
 8019d8a:	607b      	str	r3, [r7, #4]
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	781b      	ldrb	r3, [r3, #0]
 8019d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8019d94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d98:	2b78      	cmp	r3, #120	; 0x78
 8019d9a:	d003      	beq.n	8019da4 <ip4addr_aton+0x60>
 8019d9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019da0:	2b58      	cmp	r3, #88	; 0x58
 8019da2:	d10a      	bne.n	8019dba <ip4addr_aton+0x76>
        base = 16;
 8019da4:	2310      	movs	r3, #16
 8019da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	3301      	adds	r3, #1
 8019dae:	607b      	str	r3, [r7, #4]
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	781b      	ldrb	r3, [r3, #0]
 8019db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019db8:	e002      	b.n	8019dc0 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8019dba:	2308      	movs	r3, #8
 8019dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8019dc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019dc4:	3301      	adds	r3, #1
 8019dc6:	4a70      	ldr	r2, [pc, #448]	; (8019f88 <ip4addr_aton+0x244>)
 8019dc8:	4413      	add	r3, r2
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	f003 0304 	and.w	r3, r3, #4
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d011      	beq.n	8019df8 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8019dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dda:	fb02 f203 	mul.w	r2, r2, r3
 8019dde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019de2:	4413      	add	r3, r2
 8019de4:	3b30      	subs	r3, #48	; 0x30
 8019de6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	3301      	adds	r3, #1
 8019dec:	607b      	str	r3, [r7, #4]
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	781b      	ldrb	r3, [r3, #0]
 8019df2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019df6:	e7e3      	b.n	8019dc0 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8019df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019dfc:	2b10      	cmp	r3, #16
 8019dfe:	d127      	bne.n	8019e50 <ip4addr_aton+0x10c>
 8019e00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e04:	3301      	adds	r3, #1
 8019e06:	4a60      	ldr	r2, [pc, #384]	; (8019f88 <ip4addr_aton+0x244>)
 8019e08:	4413      	add	r3, r2
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d01d      	beq.n	8019e50 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8019e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e16:	011b      	lsls	r3, r3, #4
 8019e18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019e1c:	f102 010a 	add.w	r1, r2, #10
 8019e20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019e24:	3201      	adds	r2, #1
 8019e26:	4858      	ldr	r0, [pc, #352]	; (8019f88 <ip4addr_aton+0x244>)
 8019e28:	4402      	add	r2, r0
 8019e2a:	7812      	ldrb	r2, [r2, #0]
 8019e2c:	f002 0203 	and.w	r2, r2, #3
 8019e30:	2a02      	cmp	r2, #2
 8019e32:	d101      	bne.n	8019e38 <ip4addr_aton+0xf4>
 8019e34:	2261      	movs	r2, #97	; 0x61
 8019e36:	e000      	b.n	8019e3a <ip4addr_aton+0xf6>
 8019e38:	2241      	movs	r2, #65	; 0x41
 8019e3a:	1a8a      	subs	r2, r1, r2
 8019e3c:	4313      	orrs	r3, r2
 8019e3e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	3301      	adds	r3, #1
 8019e44:	607b      	str	r3, [r7, #4]
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	781b      	ldrb	r3, [r3, #0]
 8019e4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8019e4e:	e7b7      	b.n	8019dc0 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8019e50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e54:	2b2e      	cmp	r3, #46	; 0x2e
 8019e56:	d114      	bne.n	8019e82 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8019e58:	f107 030c 	add.w	r3, r7, #12
 8019e5c:	330c      	adds	r3, #12
 8019e5e:	69fa      	ldr	r2, [r7, #28]
 8019e60:	429a      	cmp	r2, r3
 8019e62:	d301      	bcc.n	8019e68 <ip4addr_aton+0x124>
        return 0;
 8019e64:	2300      	movs	r3, #0
 8019e66:	e08b      	b.n	8019f80 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8019e68:	69fb      	ldr	r3, [r7, #28]
 8019e6a:	1d1a      	adds	r2, r3, #4
 8019e6c:	61fa      	str	r2, [r7, #28]
 8019e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e70:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	3301      	adds	r3, #1
 8019e76:	607b      	str	r3, [r7, #4]
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	781b      	ldrb	r3, [r3, #0]
 8019e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8019e80:	e76c      	b.n	8019d5c <ip4addr_aton+0x18>
    } else {
      break;
 8019e82:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8019e84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d00b      	beq.n	8019ea4 <ip4addr_aton+0x160>
 8019e8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e90:	3301      	adds	r3, #1
 8019e92:	4a3d      	ldr	r2, [pc, #244]	; (8019f88 <ip4addr_aton+0x244>)
 8019e94:	4413      	add	r3, r2
 8019e96:	781b      	ldrb	r3, [r3, #0]
 8019e98:	f003 0308 	and.w	r3, r3, #8
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d101      	bne.n	8019ea4 <ip4addr_aton+0x160>
    return 0;
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	e06d      	b.n	8019f80 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8019ea4:	f107 030c 	add.w	r3, r7, #12
 8019ea8:	69fa      	ldr	r2, [r7, #28]
 8019eaa:	1ad3      	subs	r3, r2, r3
 8019eac:	109b      	asrs	r3, r3, #2
 8019eae:	3301      	adds	r3, #1
 8019eb0:	2b04      	cmp	r3, #4
 8019eb2:	d853      	bhi.n	8019f5c <ip4addr_aton+0x218>
 8019eb4:	a201      	add	r2, pc, #4	; (adr r2, 8019ebc <ip4addr_aton+0x178>)
 8019eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019eba:	bf00      	nop
 8019ebc:	08019ed1 	.word	0x08019ed1
 8019ec0:	08019f6b 	.word	0x08019f6b
 8019ec4:	08019ed5 	.word	0x08019ed5
 8019ec8:	08019ef7 	.word	0x08019ef7
 8019ecc:	08019f25 	.word	0x08019f25

    case 0:
      return 0;       /* initial nondigit */
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	e055      	b.n	8019f80 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8019ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019eda:	d301      	bcc.n	8019ee0 <ip4addr_aton+0x19c>
        return 0;
 8019edc:	2300      	movs	r3, #0
 8019ede:	e04f      	b.n	8019f80 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	2bff      	cmp	r3, #255	; 0xff
 8019ee4:	d901      	bls.n	8019eea <ip4addr_aton+0x1a6>
        return 0;
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	e04a      	b.n	8019f80 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	061b      	lsls	r3, r3, #24
 8019eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ef0:	4313      	orrs	r3, r2
 8019ef2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019ef4:	e03a      	b.n	8019f6c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8019ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019efc:	d301      	bcc.n	8019f02 <ip4addr_aton+0x1be>
        return 0;
 8019efe:	2300      	movs	r3, #0
 8019f00:	e03e      	b.n	8019f80 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	2bff      	cmp	r3, #255	; 0xff
 8019f06:	d802      	bhi.n	8019f0e <ip4addr_aton+0x1ca>
 8019f08:	693b      	ldr	r3, [r7, #16]
 8019f0a:	2bff      	cmp	r3, #255	; 0xff
 8019f0c:	d901      	bls.n	8019f12 <ip4addr_aton+0x1ce>
        return 0;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	e036      	b.n	8019f80 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	061a      	lsls	r2, r3, #24
 8019f16:	693b      	ldr	r3, [r7, #16]
 8019f18:	041b      	lsls	r3, r3, #16
 8019f1a:	4313      	orrs	r3, r2
 8019f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f1e:	4313      	orrs	r3, r2
 8019f20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019f22:	e023      	b.n	8019f6c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8019f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f26:	2bff      	cmp	r3, #255	; 0xff
 8019f28:	d901      	bls.n	8019f2e <ip4addr_aton+0x1ea>
        return 0;
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	e028      	b.n	8019f80 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	2bff      	cmp	r3, #255	; 0xff
 8019f32:	d805      	bhi.n	8019f40 <ip4addr_aton+0x1fc>
 8019f34:	693b      	ldr	r3, [r7, #16]
 8019f36:	2bff      	cmp	r3, #255	; 0xff
 8019f38:	d802      	bhi.n	8019f40 <ip4addr_aton+0x1fc>
 8019f3a:	697b      	ldr	r3, [r7, #20]
 8019f3c:	2bff      	cmp	r3, #255	; 0xff
 8019f3e:	d901      	bls.n	8019f44 <ip4addr_aton+0x200>
        return 0;
 8019f40:	2300      	movs	r3, #0
 8019f42:	e01d      	b.n	8019f80 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	061a      	lsls	r2, r3, #24
 8019f48:	693b      	ldr	r3, [r7, #16]
 8019f4a:	041b      	lsls	r3, r3, #16
 8019f4c:	431a      	orrs	r2, r3
 8019f4e:	697b      	ldr	r3, [r7, #20]
 8019f50:	021b      	lsls	r3, r3, #8
 8019f52:	4313      	orrs	r3, r2
 8019f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f56:	4313      	orrs	r3, r2
 8019f58:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019f5a:	e007      	b.n	8019f6c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8019f5c:	4b0b      	ldr	r3, [pc, #44]	; (8019f8c <ip4addr_aton+0x248>)
 8019f5e:	22f9      	movs	r2, #249	; 0xf9
 8019f60:	490b      	ldr	r1, [pc, #44]	; (8019f90 <ip4addr_aton+0x24c>)
 8019f62:	480c      	ldr	r0, [pc, #48]	; (8019f94 <ip4addr_aton+0x250>)
 8019f64:	f001 fce2 	bl	801b92c <printf>
      break;
 8019f68:	e000      	b.n	8019f6c <ip4addr_aton+0x228>
      break;
 8019f6a:	bf00      	nop
  }
  if (addr) {
 8019f6c:	683b      	ldr	r3, [r7, #0]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d005      	beq.n	8019f7e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8019f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f74:	f7f5 fdcd 	bl	800fb12 <lwip_htonl>
 8019f78:	4602      	mov	r2, r0
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8019f7e:	2301      	movs	r3, #1
}
 8019f80:	4618      	mov	r0, r3
 8019f82:	3728      	adds	r7, #40	; 0x28
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}
 8019f88:	080290b0 	.word	0x080290b0
 8019f8c:	08027d64 	.word	0x08027d64
 8019f90:	08027da0 	.word	0x08027da0
 8019f94:	08027dac 	.word	0x08027dac

08019f98 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b084      	sub	sp, #16
 8019f9c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019fa2:	4b12      	ldr	r3, [pc, #72]	; (8019fec <ip_reass_tmr+0x54>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019fa8:	e018      	b.n	8019fdc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	7fdb      	ldrb	r3, [r3, #31]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d00b      	beq.n	8019fca <ip_reass_tmr+0x32>
      r->timer--;
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	7fdb      	ldrb	r3, [r3, #31]
 8019fb6:	3b01      	subs	r3, #1
 8019fb8:	b2da      	uxtb	r2, r3
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	60fb      	str	r3, [r7, #12]
 8019fc8:	e008      	b.n	8019fdc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019fd4:	68b9      	ldr	r1, [r7, #8]
 8019fd6:	6878      	ldr	r0, [r7, #4]
 8019fd8:	f000 f80a 	bl	8019ff0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d1e3      	bne.n	8019faa <ip_reass_tmr+0x12>
    }
  }
}
 8019fe2:	bf00      	nop
 8019fe4:	bf00      	nop
 8019fe6:	3710      	adds	r7, #16
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}
 8019fec:	2000506c 	.word	0x2000506c

08019ff0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b088      	sub	sp, #32
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019ffe:	683a      	ldr	r2, [r7, #0]
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	429a      	cmp	r2, r3
 801a004:	d105      	bne.n	801a012 <ip_reass_free_complete_datagram+0x22>
 801a006:	4b45      	ldr	r3, [pc, #276]	; (801a11c <ip_reass_free_complete_datagram+0x12c>)
 801a008:	22ab      	movs	r2, #171	; 0xab
 801a00a:	4945      	ldr	r1, [pc, #276]	; (801a120 <ip_reass_free_complete_datagram+0x130>)
 801a00c:	4845      	ldr	r0, [pc, #276]	; (801a124 <ip_reass_free_complete_datagram+0x134>)
 801a00e:	f001 fc8d 	bl	801b92c <printf>
  if (prev != NULL) {
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d00a      	beq.n	801a02e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a018:	683b      	ldr	r3, [r7, #0]
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	687a      	ldr	r2, [r7, #4]
 801a01e:	429a      	cmp	r2, r3
 801a020:	d005      	beq.n	801a02e <ip_reass_free_complete_datagram+0x3e>
 801a022:	4b3e      	ldr	r3, [pc, #248]	; (801a11c <ip_reass_free_complete_datagram+0x12c>)
 801a024:	22ad      	movs	r2, #173	; 0xad
 801a026:	4940      	ldr	r1, [pc, #256]	; (801a128 <ip_reass_free_complete_datagram+0x138>)
 801a028:	483e      	ldr	r0, [pc, #248]	; (801a124 <ip_reass_free_complete_datagram+0x134>)
 801a02a:	f001 fc7f 	bl	801b92c <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	685b      	ldr	r3, [r3, #4]
 801a032:	685b      	ldr	r3, [r3, #4]
 801a034:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a036:	697b      	ldr	r3, [r7, #20]
 801a038:	889b      	ldrh	r3, [r3, #4]
 801a03a:	b29b      	uxth	r3, r3
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d12a      	bne.n	801a096 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	685b      	ldr	r3, [r3, #4]
 801a044:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a046:	697b      	ldr	r3, [r7, #20]
 801a048:	681a      	ldr	r2, [r3, #0]
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a04e:	69bb      	ldr	r3, [r7, #24]
 801a050:	6858      	ldr	r0, [r3, #4]
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	3308      	adds	r3, #8
 801a056:	2214      	movs	r2, #20
 801a058:	4619      	mov	r1, r3
 801a05a:	f001 f9b9 	bl	801b3d0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a05e:	2101      	movs	r1, #1
 801a060:	69b8      	ldr	r0, [r7, #24]
 801a062:	f7ff fb1d 	bl	80196a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a066:	69b8      	ldr	r0, [r7, #24]
 801a068:	f7f7 f988 	bl	801137c <pbuf_clen>
 801a06c:	4603      	mov	r3, r0
 801a06e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a070:	8bfa      	ldrh	r2, [r7, #30]
 801a072:	8a7b      	ldrh	r3, [r7, #18]
 801a074:	4413      	add	r3, r2
 801a076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a07a:	db05      	blt.n	801a088 <ip_reass_free_complete_datagram+0x98>
 801a07c:	4b27      	ldr	r3, [pc, #156]	; (801a11c <ip_reass_free_complete_datagram+0x12c>)
 801a07e:	22bc      	movs	r2, #188	; 0xbc
 801a080:	492a      	ldr	r1, [pc, #168]	; (801a12c <ip_reass_free_complete_datagram+0x13c>)
 801a082:	4828      	ldr	r0, [pc, #160]	; (801a124 <ip_reass_free_complete_datagram+0x134>)
 801a084:	f001 fc52 	bl	801b92c <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a088:	8bfa      	ldrh	r2, [r7, #30]
 801a08a:	8a7b      	ldrh	r3, [r7, #18]
 801a08c:	4413      	add	r3, r2
 801a08e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a090:	69b8      	ldr	r0, [r7, #24]
 801a092:	f7f7 f8e5 	bl	8011260 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	685b      	ldr	r3, [r3, #4]
 801a09a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a09c:	e01f      	b.n	801a0de <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a09e:	69bb      	ldr	r3, [r7, #24]
 801a0a0:	685b      	ldr	r3, [r3, #4]
 801a0a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a0a4:	69bb      	ldr	r3, [r7, #24]
 801a0a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a0a8:	697b      	ldr	r3, [r7, #20]
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a0ae:	68f8      	ldr	r0, [r7, #12]
 801a0b0:	f7f7 f964 	bl	801137c <pbuf_clen>
 801a0b4:	4603      	mov	r3, r0
 801a0b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a0b8:	8bfa      	ldrh	r2, [r7, #30]
 801a0ba:	8a7b      	ldrh	r3, [r7, #18]
 801a0bc:	4413      	add	r3, r2
 801a0be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a0c2:	db05      	blt.n	801a0d0 <ip_reass_free_complete_datagram+0xe0>
 801a0c4:	4b15      	ldr	r3, [pc, #84]	; (801a11c <ip_reass_free_complete_datagram+0x12c>)
 801a0c6:	22cc      	movs	r2, #204	; 0xcc
 801a0c8:	4918      	ldr	r1, [pc, #96]	; (801a12c <ip_reass_free_complete_datagram+0x13c>)
 801a0ca:	4816      	ldr	r0, [pc, #88]	; (801a124 <ip_reass_free_complete_datagram+0x134>)
 801a0cc:	f001 fc2e 	bl	801b92c <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a0d0:	8bfa      	ldrh	r2, [r7, #30]
 801a0d2:	8a7b      	ldrh	r3, [r7, #18]
 801a0d4:	4413      	add	r3, r2
 801a0d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a0d8:	68f8      	ldr	r0, [r7, #12]
 801a0da:	f7f7 f8c1 	bl	8011260 <pbuf_free>
  while (p != NULL) {
 801a0de:	69bb      	ldr	r3, [r7, #24]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d1dc      	bne.n	801a09e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a0e4:	6839      	ldr	r1, [r7, #0]
 801a0e6:	6878      	ldr	r0, [r7, #4]
 801a0e8:	f000 f8c2 	bl	801a270 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a0ec:	4b10      	ldr	r3, [pc, #64]	; (801a130 <ip_reass_free_complete_datagram+0x140>)
 801a0ee:	881b      	ldrh	r3, [r3, #0]
 801a0f0:	8bfa      	ldrh	r2, [r7, #30]
 801a0f2:	429a      	cmp	r2, r3
 801a0f4:	d905      	bls.n	801a102 <ip_reass_free_complete_datagram+0x112>
 801a0f6:	4b09      	ldr	r3, [pc, #36]	; (801a11c <ip_reass_free_complete_datagram+0x12c>)
 801a0f8:	22d2      	movs	r2, #210	; 0xd2
 801a0fa:	490e      	ldr	r1, [pc, #56]	; (801a134 <ip_reass_free_complete_datagram+0x144>)
 801a0fc:	4809      	ldr	r0, [pc, #36]	; (801a124 <ip_reass_free_complete_datagram+0x134>)
 801a0fe:	f001 fc15 	bl	801b92c <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a102:	4b0b      	ldr	r3, [pc, #44]	; (801a130 <ip_reass_free_complete_datagram+0x140>)
 801a104:	881a      	ldrh	r2, [r3, #0]
 801a106:	8bfb      	ldrh	r3, [r7, #30]
 801a108:	1ad3      	subs	r3, r2, r3
 801a10a:	b29a      	uxth	r2, r3
 801a10c:	4b08      	ldr	r3, [pc, #32]	; (801a130 <ip_reass_free_complete_datagram+0x140>)
 801a10e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a110:	8bfb      	ldrh	r3, [r7, #30]
}
 801a112:	4618      	mov	r0, r3
 801a114:	3720      	adds	r7, #32
 801a116:	46bd      	mov	sp, r7
 801a118:	bd80      	pop	{r7, pc}
 801a11a:	bf00      	nop
 801a11c:	08027dd4 	.word	0x08027dd4
 801a120:	08027e10 	.word	0x08027e10
 801a124:	08027e1c 	.word	0x08027e1c
 801a128:	08027e44 	.word	0x08027e44
 801a12c:	08027e58 	.word	0x08027e58
 801a130:	20005070 	.word	0x20005070
 801a134:	08027e78 	.word	0x08027e78

0801a138 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a138:	b580      	push	{r7, lr}
 801a13a:	b08a      	sub	sp, #40	; 0x28
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	6078      	str	r0, [r7, #4]
 801a140:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a142:	2300      	movs	r3, #0
 801a144:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a146:	2300      	movs	r3, #0
 801a148:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a14a:	2300      	movs	r3, #0
 801a14c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a14e:	2300      	movs	r3, #0
 801a150:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a152:	2300      	movs	r3, #0
 801a154:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a156:	4b28      	ldr	r3, [pc, #160]	; (801a1f8 <ip_reass_remove_oldest_datagram+0xc0>)
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a15c:	e030      	b.n	801a1c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a160:	695a      	ldr	r2, [r3, #20]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	68db      	ldr	r3, [r3, #12]
 801a166:	429a      	cmp	r2, r3
 801a168:	d10c      	bne.n	801a184 <ip_reass_remove_oldest_datagram+0x4c>
 801a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a16c:	699a      	ldr	r2, [r3, #24]
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	691b      	ldr	r3, [r3, #16]
 801a172:	429a      	cmp	r2, r3
 801a174:	d106      	bne.n	801a184 <ip_reass_remove_oldest_datagram+0x4c>
 801a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a178:	899a      	ldrh	r2, [r3, #12]
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	889b      	ldrh	r3, [r3, #4]
 801a17e:	b29b      	uxth	r3, r3
 801a180:	429a      	cmp	r2, r3
 801a182:	d014      	beq.n	801a1ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a184:	693b      	ldr	r3, [r7, #16]
 801a186:	3301      	adds	r3, #1
 801a188:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a18a:	6a3b      	ldr	r3, [r7, #32]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d104      	bne.n	801a19a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a192:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a194:	69fb      	ldr	r3, [r7, #28]
 801a196:	61bb      	str	r3, [r7, #24]
 801a198:	e009      	b.n	801a1ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a19c:	7fda      	ldrb	r2, [r3, #31]
 801a19e:	6a3b      	ldr	r3, [r7, #32]
 801a1a0:	7fdb      	ldrb	r3, [r3, #31]
 801a1a2:	429a      	cmp	r2, r3
 801a1a4:	d803      	bhi.n	801a1ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a1aa:	69fb      	ldr	r3, [r7, #28]
 801a1ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d001      	beq.n	801a1ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d1cb      	bne.n	801a15e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a1c6:	6a3b      	ldr	r3, [r7, #32]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d008      	beq.n	801a1de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a1cc:	69b9      	ldr	r1, [r7, #24]
 801a1ce:	6a38      	ldr	r0, [r7, #32]
 801a1d0:	f7ff ff0e 	bl	8019ff0 <ip_reass_free_complete_datagram>
 801a1d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a1d6:	697a      	ldr	r2, [r7, #20]
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	4413      	add	r3, r2
 801a1dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a1de:	697a      	ldr	r2, [r7, #20]
 801a1e0:	683b      	ldr	r3, [r7, #0]
 801a1e2:	429a      	cmp	r2, r3
 801a1e4:	da02      	bge.n	801a1ec <ip_reass_remove_oldest_datagram+0xb4>
 801a1e6:	693b      	ldr	r3, [r7, #16]
 801a1e8:	2b01      	cmp	r3, #1
 801a1ea:	dcac      	bgt.n	801a146 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a1ec:	697b      	ldr	r3, [r7, #20]
}
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	3728      	adds	r7, #40	; 0x28
 801a1f2:	46bd      	mov	sp, r7
 801a1f4:	bd80      	pop	{r7, pc}
 801a1f6:	bf00      	nop
 801a1f8:	2000506c 	.word	0x2000506c

0801a1fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b084      	sub	sp, #16
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a206:	2004      	movs	r0, #4
 801a208:	f7f6 f95a 	bl	80104c0 <memp_malloc>
 801a20c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d110      	bne.n	801a236 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a214:	6839      	ldr	r1, [r7, #0]
 801a216:	6878      	ldr	r0, [r7, #4]
 801a218:	f7ff ff8e 	bl	801a138 <ip_reass_remove_oldest_datagram>
 801a21c:	4602      	mov	r2, r0
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	4293      	cmp	r3, r2
 801a222:	dc03      	bgt.n	801a22c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a224:	2004      	movs	r0, #4
 801a226:	f7f6 f94b 	bl	80104c0 <memp_malloc>
 801a22a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d101      	bne.n	801a236 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a232:	2300      	movs	r3, #0
 801a234:	e016      	b.n	801a264 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a236:	2220      	movs	r2, #32
 801a238:	2100      	movs	r1, #0
 801a23a:	68f8      	ldr	r0, [r7, #12]
 801a23c:	f001 f8f0 	bl	801b420 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	220f      	movs	r2, #15
 801a244:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a246:	4b09      	ldr	r3, [pc, #36]	; (801a26c <ip_reass_enqueue_new_datagram+0x70>)
 801a248:	681a      	ldr	r2, [r3, #0]
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a24e:	4a07      	ldr	r2, [pc, #28]	; (801a26c <ip_reass_enqueue_new_datagram+0x70>)
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	3308      	adds	r3, #8
 801a258:	2214      	movs	r2, #20
 801a25a:	6879      	ldr	r1, [r7, #4]
 801a25c:	4618      	mov	r0, r3
 801a25e:	f001 f8b7 	bl	801b3d0 <memcpy>
  return ipr;
 801a262:	68fb      	ldr	r3, [r7, #12]
}
 801a264:	4618      	mov	r0, r3
 801a266:	3710      	adds	r7, #16
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd80      	pop	{r7, pc}
 801a26c:	2000506c 	.word	0x2000506c

0801a270 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b082      	sub	sp, #8
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
 801a278:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a27a:	4b10      	ldr	r3, [pc, #64]	; (801a2bc <ip_reass_dequeue_datagram+0x4c>)
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	687a      	ldr	r2, [r7, #4]
 801a280:	429a      	cmp	r2, r3
 801a282:	d104      	bne.n	801a28e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	4a0c      	ldr	r2, [pc, #48]	; (801a2bc <ip_reass_dequeue_datagram+0x4c>)
 801a28a:	6013      	str	r3, [r2, #0]
 801a28c:	e00d      	b.n	801a2aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d106      	bne.n	801a2a2 <ip_reass_dequeue_datagram+0x32>
 801a294:	4b0a      	ldr	r3, [pc, #40]	; (801a2c0 <ip_reass_dequeue_datagram+0x50>)
 801a296:	f240 1245 	movw	r2, #325	; 0x145
 801a29a:	490a      	ldr	r1, [pc, #40]	; (801a2c4 <ip_reass_dequeue_datagram+0x54>)
 801a29c:	480a      	ldr	r0, [pc, #40]	; (801a2c8 <ip_reass_dequeue_datagram+0x58>)
 801a29e:	f001 fb45 	bl	801b92c <printf>
    prev->next = ipr->next;
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681a      	ldr	r2, [r3, #0]
 801a2a6:	683b      	ldr	r3, [r7, #0]
 801a2a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a2aa:	6879      	ldr	r1, [r7, #4]
 801a2ac:	2004      	movs	r0, #4
 801a2ae:	f7f6 f959 	bl	8010564 <memp_free>
}
 801a2b2:	bf00      	nop
 801a2b4:	3708      	adds	r7, #8
 801a2b6:	46bd      	mov	sp, r7
 801a2b8:	bd80      	pop	{r7, pc}
 801a2ba:	bf00      	nop
 801a2bc:	2000506c 	.word	0x2000506c
 801a2c0:	08027dd4 	.word	0x08027dd4
 801a2c4:	08027e9c 	.word	0x08027e9c
 801a2c8:	08027e1c 	.word	0x08027e1c

0801a2cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b08c      	sub	sp, #48	; 0x30
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	60f8      	str	r0, [r7, #12]
 801a2d4:	60b9      	str	r1, [r7, #8]
 801a2d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a2dc:	2301      	movs	r3, #1
 801a2de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a2e0:	68bb      	ldr	r3, [r7, #8]
 801a2e2:	685b      	ldr	r3, [r3, #4]
 801a2e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a2e6:	69fb      	ldr	r3, [r7, #28]
 801a2e8:	885b      	ldrh	r3, [r3, #2]
 801a2ea:	b29b      	uxth	r3, r3
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f7f5 fbfb 	bl	800fae8 <lwip_htons>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a2f6:	69fb      	ldr	r3, [r7, #28]
 801a2f8:	781b      	ldrb	r3, [r3, #0]
 801a2fa:	f003 030f 	and.w	r3, r3, #15
 801a2fe:	b2db      	uxtb	r3, r3
 801a300:	009b      	lsls	r3, r3, #2
 801a302:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a304:	7e7b      	ldrb	r3, [r7, #25]
 801a306:	b29b      	uxth	r3, r3
 801a308:	8b7a      	ldrh	r2, [r7, #26]
 801a30a:	429a      	cmp	r2, r3
 801a30c:	d202      	bcs.n	801a314 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a30e:	f04f 33ff 	mov.w	r3, #4294967295
 801a312:	e135      	b.n	801a580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a314:	7e7b      	ldrb	r3, [r7, #25]
 801a316:	b29b      	uxth	r3, r3
 801a318:	8b7a      	ldrh	r2, [r7, #26]
 801a31a:	1ad3      	subs	r3, r2, r3
 801a31c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a31e:	69fb      	ldr	r3, [r7, #28]
 801a320:	88db      	ldrh	r3, [r3, #6]
 801a322:	b29b      	uxth	r3, r3
 801a324:	4618      	mov	r0, r3
 801a326:	f7f5 fbdf 	bl	800fae8 <lwip_htons>
 801a32a:	4603      	mov	r3, r0
 801a32c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a330:	b29b      	uxth	r3, r3
 801a332:	00db      	lsls	r3, r3, #3
 801a334:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a336:	68bb      	ldr	r3, [r7, #8]
 801a338:	685b      	ldr	r3, [r3, #4]
 801a33a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a33e:	2200      	movs	r2, #0
 801a340:	701a      	strb	r2, [r3, #0]
 801a342:	2200      	movs	r2, #0
 801a344:	705a      	strb	r2, [r3, #1]
 801a346:	2200      	movs	r2, #0
 801a348:	709a      	strb	r2, [r3, #2]
 801a34a:	2200      	movs	r2, #0
 801a34c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a350:	8afa      	ldrh	r2, [r7, #22]
 801a352:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a354:	8afa      	ldrh	r2, [r7, #22]
 801a356:	8b7b      	ldrh	r3, [r7, #26]
 801a358:	4413      	add	r3, r2
 801a35a:	b29a      	uxth	r2, r3
 801a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a35e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a362:	88db      	ldrh	r3, [r3, #6]
 801a364:	b29b      	uxth	r3, r3
 801a366:	8afa      	ldrh	r2, [r7, #22]
 801a368:	429a      	cmp	r2, r3
 801a36a:	d902      	bls.n	801a372 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a36c:	f04f 33ff 	mov.w	r3, #4294967295
 801a370:	e106      	b.n	801a580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	685b      	ldr	r3, [r3, #4]
 801a376:	627b      	str	r3, [r7, #36]	; 0x24
 801a378:	e068      	b.n	801a44c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37c:	685b      	ldr	r3, [r3, #4]
 801a37e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a382:	889b      	ldrh	r3, [r3, #4]
 801a384:	b29a      	uxth	r2, r3
 801a386:	693b      	ldr	r3, [r7, #16]
 801a388:	889b      	ldrh	r3, [r3, #4]
 801a38a:	b29b      	uxth	r3, r3
 801a38c:	429a      	cmp	r2, r3
 801a38e:	d235      	bcs.n	801a3fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a394:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d020      	beq.n	801a3de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39e:	889b      	ldrh	r3, [r3, #4]
 801a3a0:	b29a      	uxth	r2, r3
 801a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3a4:	88db      	ldrh	r3, [r3, #6]
 801a3a6:	b29b      	uxth	r3, r3
 801a3a8:	429a      	cmp	r2, r3
 801a3aa:	d307      	bcc.n	801a3bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ae:	88db      	ldrh	r3, [r3, #6]
 801a3b0:	b29a      	uxth	r2, r3
 801a3b2:	693b      	ldr	r3, [r7, #16]
 801a3b4:	889b      	ldrh	r3, [r3, #4]
 801a3b6:	b29b      	uxth	r3, r3
 801a3b8:	429a      	cmp	r2, r3
 801a3ba:	d902      	bls.n	801a3c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a3c0:	e0de      	b.n	801a580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3c4:	68ba      	ldr	r2, [r7, #8]
 801a3c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3ca:	88db      	ldrh	r3, [r3, #6]
 801a3cc:	b29a      	uxth	r2, r3
 801a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3d0:	889b      	ldrh	r3, [r3, #4]
 801a3d2:	b29b      	uxth	r3, r3
 801a3d4:	429a      	cmp	r2, r3
 801a3d6:	d03d      	beq.n	801a454 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a3d8:	2300      	movs	r3, #0
 801a3da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a3dc:	e03a      	b.n	801a454 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e0:	88db      	ldrh	r3, [r3, #6]
 801a3e2:	b29a      	uxth	r2, r3
 801a3e4:	693b      	ldr	r3, [r7, #16]
 801a3e6:	889b      	ldrh	r3, [r3, #4]
 801a3e8:	b29b      	uxth	r3, r3
 801a3ea:	429a      	cmp	r2, r3
 801a3ec:	d902      	bls.n	801a3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f2:	e0c5      	b.n	801a580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	68ba      	ldr	r2, [r7, #8]
 801a3f8:	605a      	str	r2, [r3, #4]
      break;
 801a3fa:	e02b      	b.n	801a454 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3fe:	889b      	ldrh	r3, [r3, #4]
 801a400:	b29a      	uxth	r2, r3
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	889b      	ldrh	r3, [r3, #4]
 801a406:	b29b      	uxth	r3, r3
 801a408:	429a      	cmp	r2, r3
 801a40a:	d102      	bne.n	801a412 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a40c:	f04f 33ff 	mov.w	r3, #4294967295
 801a410:	e0b6      	b.n	801a580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a414:	889b      	ldrh	r3, [r3, #4]
 801a416:	b29a      	uxth	r2, r3
 801a418:	693b      	ldr	r3, [r7, #16]
 801a41a:	88db      	ldrh	r3, [r3, #6]
 801a41c:	b29b      	uxth	r3, r3
 801a41e:	429a      	cmp	r2, r3
 801a420:	d202      	bcs.n	801a428 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a422:	f04f 33ff 	mov.w	r3, #4294967295
 801a426:	e0ab      	b.n	801a580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d009      	beq.n	801a442 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a430:	88db      	ldrh	r3, [r3, #6]
 801a432:	b29a      	uxth	r2, r3
 801a434:	693b      	ldr	r3, [r7, #16]
 801a436:	889b      	ldrh	r3, [r3, #4]
 801a438:	b29b      	uxth	r3, r3
 801a43a:	429a      	cmp	r2, r3
 801a43c:	d001      	beq.n	801a442 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a43e:	2300      	movs	r3, #0
 801a440:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a442:	693b      	ldr	r3, [r7, #16]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a448:	693b      	ldr	r3, [r7, #16]
 801a44a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d193      	bne.n	801a37a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a452:	e000      	b.n	801a456 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a454:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d12d      	bne.n	801a4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d01c      	beq.n	801a49c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a464:	88db      	ldrh	r3, [r3, #6]
 801a466:	b29a      	uxth	r2, r3
 801a468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a46a:	889b      	ldrh	r3, [r3, #4]
 801a46c:	b29b      	uxth	r3, r3
 801a46e:	429a      	cmp	r2, r3
 801a470:	d906      	bls.n	801a480 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a472:	4b45      	ldr	r3, [pc, #276]	; (801a588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a474:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a478:	4944      	ldr	r1, [pc, #272]	; (801a58c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a47a:	4845      	ldr	r0, [pc, #276]	; (801a590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a47c:	f001 fa56 	bl	801b92c <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a482:	68ba      	ldr	r2, [r7, #8]
 801a484:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a488:	88db      	ldrh	r3, [r3, #6]
 801a48a:	b29a      	uxth	r2, r3
 801a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a48e:	889b      	ldrh	r3, [r3, #4]
 801a490:	b29b      	uxth	r3, r3
 801a492:	429a      	cmp	r2, r3
 801a494:	d010      	beq.n	801a4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a496:	2300      	movs	r3, #0
 801a498:	623b      	str	r3, [r7, #32]
 801a49a:	e00d      	b.n	801a4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	685b      	ldr	r3, [r3, #4]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d006      	beq.n	801a4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a4a4:	4b38      	ldr	r3, [pc, #224]	; (801a588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a4a6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a4aa:	493a      	ldr	r1, [pc, #232]	; (801a594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a4ac:	4838      	ldr	r0, [pc, #224]	; (801a590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a4ae:	f001 fa3d 	bl	801b92c <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	68ba      	ldr	r2, [r7, #8]
 801a4b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d105      	bne.n	801a4ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	7f9b      	ldrb	r3, [r3, #30]
 801a4c2:	f003 0301 	and.w	r3, r3, #1
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d059      	beq.n	801a57e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a4ca:	6a3b      	ldr	r3, [r7, #32]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d04f      	beq.n	801a570 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	685b      	ldr	r3, [r3, #4]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d006      	beq.n	801a4e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	685b      	ldr	r3, [r3, #4]
 801a4dc:	685b      	ldr	r3, [r3, #4]
 801a4de:	889b      	ldrh	r3, [r3, #4]
 801a4e0:	b29b      	uxth	r3, r3
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d002      	beq.n	801a4ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	623b      	str	r3, [r7, #32]
 801a4ea:	e041      	b.n	801a570 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a4f6:	e012      	b.n	801a51e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4fa:	685b      	ldr	r3, [r3, #4]
 801a4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a500:	88db      	ldrh	r3, [r3, #6]
 801a502:	b29a      	uxth	r2, r3
 801a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a506:	889b      	ldrh	r3, [r3, #4]
 801a508:	b29b      	uxth	r3, r3
 801a50a:	429a      	cmp	r2, r3
 801a50c:	d002      	beq.n	801a514 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a50e:	2300      	movs	r3, #0
 801a510:	623b      	str	r3, [r7, #32]
            break;
 801a512:	e007      	b.n	801a524 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a516:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a520:	2b00      	cmp	r3, #0
 801a522:	d1e9      	bne.n	801a4f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a524:	6a3b      	ldr	r3, [r7, #32]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d022      	beq.n	801a570 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	685b      	ldr	r3, [r3, #4]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d106      	bne.n	801a540 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a532:	4b15      	ldr	r3, [pc, #84]	; (801a588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a534:	f240 12df 	movw	r2, #479	; 0x1df
 801a538:	4917      	ldr	r1, [pc, #92]	; (801a598 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a53a:	4815      	ldr	r0, [pc, #84]	; (801a590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a53c:	f001 f9f6 	bl	801b92c <printf>
          LWIP_ASSERT("sanity check",
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	685b      	ldr	r3, [r3, #4]
 801a544:	685b      	ldr	r3, [r3, #4]
 801a546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a548:	429a      	cmp	r2, r3
 801a54a:	d106      	bne.n	801a55a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a54c:	4b0e      	ldr	r3, [pc, #56]	; (801a588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a54e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a552:	4911      	ldr	r1, [pc, #68]	; (801a598 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a554:	480e      	ldr	r0, [pc, #56]	; (801a590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a556:	f001 f9e9 	bl	801b92c <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d006      	beq.n	801a570 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a562:	4b09      	ldr	r3, [pc, #36]	; (801a588 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a564:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a568:	490c      	ldr	r1, [pc, #48]	; (801a59c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a56a:	4809      	ldr	r0, [pc, #36]	; (801a590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a56c:	f001 f9de 	bl	801b92c <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a570:	6a3b      	ldr	r3, [r7, #32]
 801a572:	2b00      	cmp	r3, #0
 801a574:	bf14      	ite	ne
 801a576:	2301      	movne	r3, #1
 801a578:	2300      	moveq	r3, #0
 801a57a:	b2db      	uxtb	r3, r3
 801a57c:	e000      	b.n	801a580 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a57e:	2300      	movs	r3, #0
}
 801a580:	4618      	mov	r0, r3
 801a582:	3730      	adds	r7, #48	; 0x30
 801a584:	46bd      	mov	sp, r7
 801a586:	bd80      	pop	{r7, pc}
 801a588:	08027dd4 	.word	0x08027dd4
 801a58c:	08027eb8 	.word	0x08027eb8
 801a590:	08027e1c 	.word	0x08027e1c
 801a594:	08027ed8 	.word	0x08027ed8
 801a598:	08027f10 	.word	0x08027f10
 801a59c:	08027f20 	.word	0x08027f20

0801a5a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b08e      	sub	sp, #56	; 0x38
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	685b      	ldr	r3, [r3, #4]
 801a5ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5b0:	781b      	ldrb	r3, [r3, #0]
 801a5b2:	f003 030f 	and.w	r3, r3, #15
 801a5b6:	b2db      	uxtb	r3, r3
 801a5b8:	009b      	lsls	r3, r3, #2
 801a5ba:	b2db      	uxtb	r3, r3
 801a5bc:	2b14      	cmp	r3, #20
 801a5be:	f040 8167 	bne.w	801a890 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5c4:	88db      	ldrh	r3, [r3, #6]
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f7f5 fa8d 	bl	800fae8 <lwip_htons>
 801a5ce:	4603      	mov	r3, r0
 801a5d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a5d4:	b29b      	uxth	r3, r3
 801a5d6:	00db      	lsls	r3, r3, #3
 801a5d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5dc:	885b      	ldrh	r3, [r3, #2]
 801a5de:	b29b      	uxth	r3, r3
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	f7f5 fa81 	bl	800fae8 <lwip_htons>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5ec:	781b      	ldrb	r3, [r3, #0]
 801a5ee:	f003 030f 	and.w	r3, r3, #15
 801a5f2:	b2db      	uxtb	r3, r3
 801a5f4:	009b      	lsls	r3, r3, #2
 801a5f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a5fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a5fe:	b29b      	uxth	r3, r3
 801a600:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a602:	429a      	cmp	r2, r3
 801a604:	f0c0 8146 	bcc.w	801a894 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a60c:	b29b      	uxth	r3, r3
 801a60e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a610:	1ad3      	subs	r3, r2, r3
 801a612:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a614:	6878      	ldr	r0, [r7, #4]
 801a616:	f7f6 feb1 	bl	801137c <pbuf_clen>
 801a61a:	4603      	mov	r3, r0
 801a61c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a61e:	4b9f      	ldr	r3, [pc, #636]	; (801a89c <ip4_reass+0x2fc>)
 801a620:	881b      	ldrh	r3, [r3, #0]
 801a622:	461a      	mov	r2, r3
 801a624:	8c3b      	ldrh	r3, [r7, #32]
 801a626:	4413      	add	r3, r2
 801a628:	2b0a      	cmp	r3, #10
 801a62a:	dd10      	ble.n	801a64e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a62c:	8c3b      	ldrh	r3, [r7, #32]
 801a62e:	4619      	mov	r1, r3
 801a630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a632:	f7ff fd81 	bl	801a138 <ip_reass_remove_oldest_datagram>
 801a636:	4603      	mov	r3, r0
 801a638:	2b00      	cmp	r3, #0
 801a63a:	f000 812d 	beq.w	801a898 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a63e:	4b97      	ldr	r3, [pc, #604]	; (801a89c <ip4_reass+0x2fc>)
 801a640:	881b      	ldrh	r3, [r3, #0]
 801a642:	461a      	mov	r2, r3
 801a644:	8c3b      	ldrh	r3, [r7, #32]
 801a646:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a648:	2b0a      	cmp	r3, #10
 801a64a:	f300 8125 	bgt.w	801a898 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a64e:	4b94      	ldr	r3, [pc, #592]	; (801a8a0 <ip4_reass+0x300>)
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	633b      	str	r3, [r7, #48]	; 0x30
 801a654:	e015      	b.n	801a682 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a658:	695a      	ldr	r2, [r3, #20]
 801a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a65c:	68db      	ldr	r3, [r3, #12]
 801a65e:	429a      	cmp	r2, r3
 801a660:	d10c      	bne.n	801a67c <ip4_reass+0xdc>
 801a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a664:	699a      	ldr	r2, [r3, #24]
 801a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a668:	691b      	ldr	r3, [r3, #16]
 801a66a:	429a      	cmp	r2, r3
 801a66c:	d106      	bne.n	801a67c <ip4_reass+0xdc>
 801a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a670:	899a      	ldrh	r2, [r3, #12]
 801a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a674:	889b      	ldrh	r3, [r3, #4]
 801a676:	b29b      	uxth	r3, r3
 801a678:	429a      	cmp	r2, r3
 801a67a:	d006      	beq.n	801a68a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	633b      	str	r3, [r7, #48]	; 0x30
 801a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a684:	2b00      	cmp	r3, #0
 801a686:	d1e6      	bne.n	801a656 <ip4_reass+0xb6>
 801a688:	e000      	b.n	801a68c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a68a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d109      	bne.n	801a6a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a692:	8c3b      	ldrh	r3, [r7, #32]
 801a694:	4619      	mov	r1, r3
 801a696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a698:	f7ff fdb0 	bl	801a1fc <ip_reass_enqueue_new_datagram>
 801a69c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d11c      	bne.n	801a6de <ip4_reass+0x13e>
      goto nullreturn;
 801a6a4:	e109      	b.n	801a8ba <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6a8:	88db      	ldrh	r3, [r3, #6]
 801a6aa:	b29b      	uxth	r3, r3
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	f7f5 fa1b 	bl	800fae8 <lwip_htons>
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d110      	bne.n	801a6de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6be:	89db      	ldrh	r3, [r3, #14]
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	f7f5 fa11 	bl	800fae8 <lwip_htons>
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d006      	beq.n	801a6de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6d2:	3308      	adds	r3, #8
 801a6d4:	2214      	movs	r2, #20
 801a6d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a6d8:	4618      	mov	r0, r3
 801a6da:	f000 fe79 	bl	801b3d0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6e0:	88db      	ldrh	r3, [r3, #6]
 801a6e2:	b29b      	uxth	r3, r3
 801a6e4:	f003 0320 	and.w	r3, r3, #32
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	bf0c      	ite	eq
 801a6ec:	2301      	moveq	r3, #1
 801a6ee:	2300      	movne	r3, #0
 801a6f0:	b2db      	uxtb	r3, r3
 801a6f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a6f4:	69fb      	ldr	r3, [r7, #28]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d00e      	beq.n	801a718 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a6fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a6fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a6fe:	4413      	add	r3, r2
 801a700:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a702:	8b7a      	ldrh	r2, [r7, #26]
 801a704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a706:	429a      	cmp	r2, r3
 801a708:	f0c0 80a0 	bcc.w	801a84c <ip4_reass+0x2ac>
 801a70c:	8b7b      	ldrh	r3, [r7, #26]
 801a70e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a712:	4293      	cmp	r3, r2
 801a714:	f200 809a 	bhi.w	801a84c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a718:	69fa      	ldr	r2, [r7, #28]
 801a71a:	6879      	ldr	r1, [r7, #4]
 801a71c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a71e:	f7ff fdd5 	bl	801a2cc <ip_reass_chain_frag_into_datagram_and_validate>
 801a722:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a724:	697b      	ldr	r3, [r7, #20]
 801a726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a72a:	f000 8091 	beq.w	801a850 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a72e:	4b5b      	ldr	r3, [pc, #364]	; (801a89c <ip4_reass+0x2fc>)
 801a730:	881a      	ldrh	r2, [r3, #0]
 801a732:	8c3b      	ldrh	r3, [r7, #32]
 801a734:	4413      	add	r3, r2
 801a736:	b29a      	uxth	r2, r3
 801a738:	4b58      	ldr	r3, [pc, #352]	; (801a89c <ip4_reass+0x2fc>)
 801a73a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a73c:	69fb      	ldr	r3, [r7, #28]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d00d      	beq.n	801a75e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a742:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a746:	4413      	add	r3, r2
 801a748:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a74c:	8a7a      	ldrh	r2, [r7, #18]
 801a74e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a752:	7f9b      	ldrb	r3, [r3, #30]
 801a754:	f043 0301 	orr.w	r3, r3, #1
 801a758:	b2da      	uxtb	r2, r3
 801a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a75c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a75e:	697b      	ldr	r3, [r7, #20]
 801a760:	2b01      	cmp	r3, #1
 801a762:	d171      	bne.n	801a848 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a766:	8b9b      	ldrh	r3, [r3, #28]
 801a768:	3314      	adds	r3, #20
 801a76a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a76e:	685b      	ldr	r3, [r3, #4]
 801a770:	685b      	ldr	r3, [r3, #4]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a778:	685b      	ldr	r3, [r3, #4]
 801a77a:	685b      	ldr	r3, [r3, #4]
 801a77c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a780:	3308      	adds	r3, #8
 801a782:	2214      	movs	r2, #20
 801a784:	4619      	mov	r1, r3
 801a786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a788:	f000 fe22 	bl	801b3d0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a78c:	8a3b      	ldrh	r3, [r7, #16]
 801a78e:	4618      	mov	r0, r3
 801a790:	f7f5 f9aa 	bl	800fae8 <lwip_htons>
 801a794:	4603      	mov	r3, r0
 801a796:	461a      	mov	r2, r3
 801a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a79a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a79e:	2200      	movs	r2, #0
 801a7a0:	719a      	strb	r2, [r3, #6]
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	729a      	strb	r2, [r3, #10]
 801a7ac:	2200      	movs	r2, #0
 801a7ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7b2:	685b      	ldr	r3, [r3, #4]
 801a7b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a7b6:	e00d      	b.n	801a7d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7ba:	685b      	ldr	r3, [r3, #4]
 801a7bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a7be:	2114      	movs	r1, #20
 801a7c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a7c2:	f7f6 fcc7 	bl	8011154 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a7c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a7c8:	6878      	ldr	r0, [r7, #4]
 801a7ca:	f7f6 fe17 	bl	80113fc <pbuf_cat>
      r = iprh->next_pbuf;
 801a7ce:	68fb      	ldr	r3, [r7, #12]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d1ee      	bne.n	801a7b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a7da:	4b31      	ldr	r3, [pc, #196]	; (801a8a0 <ip4_reass+0x300>)
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	d102      	bne.n	801a7ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7e8:	e010      	b.n	801a80c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a7ea:	4b2d      	ldr	r3, [pc, #180]	; (801a8a0 <ip4_reass+0x300>)
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7f0:	e007      	b.n	801a802 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	d006      	beq.n	801a80a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a804:	2b00      	cmp	r3, #0
 801a806:	d1f4      	bne.n	801a7f2 <ip4_reass+0x252>
 801a808:	e000      	b.n	801a80c <ip4_reass+0x26c>
          break;
 801a80a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a80c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a80e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a810:	f7ff fd2e 	bl	801a270 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a814:	6878      	ldr	r0, [r7, #4]
 801a816:	f7f6 fdb1 	bl	801137c <pbuf_clen>
 801a81a:	4603      	mov	r3, r0
 801a81c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a81e:	4b1f      	ldr	r3, [pc, #124]	; (801a89c <ip4_reass+0x2fc>)
 801a820:	881b      	ldrh	r3, [r3, #0]
 801a822:	8c3a      	ldrh	r2, [r7, #32]
 801a824:	429a      	cmp	r2, r3
 801a826:	d906      	bls.n	801a836 <ip4_reass+0x296>
 801a828:	4b1e      	ldr	r3, [pc, #120]	; (801a8a4 <ip4_reass+0x304>)
 801a82a:	f240 229b 	movw	r2, #667	; 0x29b
 801a82e:	491e      	ldr	r1, [pc, #120]	; (801a8a8 <ip4_reass+0x308>)
 801a830:	481e      	ldr	r0, [pc, #120]	; (801a8ac <ip4_reass+0x30c>)
 801a832:	f001 f87b 	bl	801b92c <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a836:	4b19      	ldr	r3, [pc, #100]	; (801a89c <ip4_reass+0x2fc>)
 801a838:	881a      	ldrh	r2, [r3, #0]
 801a83a:	8c3b      	ldrh	r3, [r7, #32]
 801a83c:	1ad3      	subs	r3, r2, r3
 801a83e:	b29a      	uxth	r2, r3
 801a840:	4b16      	ldr	r3, [pc, #88]	; (801a89c <ip4_reass+0x2fc>)
 801a842:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	e03c      	b.n	801a8c2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a848:	2300      	movs	r3, #0
 801a84a:	e03a      	b.n	801a8c2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801a84c:	bf00      	nop
 801a84e:	e000      	b.n	801a852 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801a850:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a854:	2b00      	cmp	r3, #0
 801a856:	d106      	bne.n	801a866 <ip4_reass+0x2c6>
 801a858:	4b12      	ldr	r3, [pc, #72]	; (801a8a4 <ip4_reass+0x304>)
 801a85a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a85e:	4914      	ldr	r1, [pc, #80]	; (801a8b0 <ip4_reass+0x310>)
 801a860:	4812      	ldr	r0, [pc, #72]	; (801a8ac <ip4_reass+0x30c>)
 801a862:	f001 f863 	bl	801b92c <printf>
  if (ipr->p == NULL) {
 801a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d124      	bne.n	801a8b8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a86e:	4b0c      	ldr	r3, [pc, #48]	; (801a8a0 <ip4_reass+0x300>)
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a874:	429a      	cmp	r2, r3
 801a876:	d006      	beq.n	801a886 <ip4_reass+0x2e6>
 801a878:	4b0a      	ldr	r3, [pc, #40]	; (801a8a4 <ip4_reass+0x304>)
 801a87a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a87e:	490d      	ldr	r1, [pc, #52]	; (801a8b4 <ip4_reass+0x314>)
 801a880:	480a      	ldr	r0, [pc, #40]	; (801a8ac <ip4_reass+0x30c>)
 801a882:	f001 f853 	bl	801b92c <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a886:	2100      	movs	r1, #0
 801a888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a88a:	f7ff fcf1 	bl	801a270 <ip_reass_dequeue_datagram>
 801a88e:	e014      	b.n	801a8ba <ip4_reass+0x31a>
    goto nullreturn;
 801a890:	bf00      	nop
 801a892:	e012      	b.n	801a8ba <ip4_reass+0x31a>
    goto nullreturn;
 801a894:	bf00      	nop
 801a896:	e010      	b.n	801a8ba <ip4_reass+0x31a>
      goto nullreturn;
 801a898:	bf00      	nop
 801a89a:	e00e      	b.n	801a8ba <ip4_reass+0x31a>
 801a89c:	20005070 	.word	0x20005070
 801a8a0:	2000506c 	.word	0x2000506c
 801a8a4:	08027dd4 	.word	0x08027dd4
 801a8a8:	08027f44 	.word	0x08027f44
 801a8ac:	08027e1c 	.word	0x08027e1c
 801a8b0:	08027f60 	.word	0x08027f60
 801a8b4:	08027f6c 	.word	0x08027f6c
  }

nullreturn:
 801a8b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a8ba:	6878      	ldr	r0, [r7, #4]
 801a8bc:	f7f6 fcd0 	bl	8011260 <pbuf_free>
  return NULL;
 801a8c0:	2300      	movs	r3, #0
}
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	3738      	adds	r7, #56	; 0x38
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	bd80      	pop	{r7, pc}
 801a8ca:	bf00      	nop

0801a8cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a8cc:	b580      	push	{r7, lr}
 801a8ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a8d0:	2005      	movs	r0, #5
 801a8d2:	f7f5 fdf5 	bl	80104c0 <memp_malloc>
 801a8d6:	4603      	mov	r3, r0
}
 801a8d8:	4618      	mov	r0, r3
 801a8da:	bd80      	pop	{r7, pc}

0801a8dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b082      	sub	sp, #8
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d106      	bne.n	801a8f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a8ea:	4b07      	ldr	r3, [pc, #28]	; (801a908 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a8ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a8f0:	4906      	ldr	r1, [pc, #24]	; (801a90c <ip_frag_free_pbuf_custom_ref+0x30>)
 801a8f2:	4807      	ldr	r0, [pc, #28]	; (801a910 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a8f4:	f001 f81a 	bl	801b92c <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a8f8:	6879      	ldr	r1, [r7, #4]
 801a8fa:	2005      	movs	r0, #5
 801a8fc:	f7f5 fe32 	bl	8010564 <memp_free>
}
 801a900:	bf00      	nop
 801a902:	3708      	adds	r7, #8
 801a904:	46bd      	mov	sp, r7
 801a906:	bd80      	pop	{r7, pc}
 801a908:	08027dd4 	.word	0x08027dd4
 801a90c:	08027f8c 	.word	0x08027f8c
 801a910:	08027e1c 	.word	0x08027e1c

0801a914 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b084      	sub	sp, #16
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d106      	bne.n	801a934 <ipfrag_free_pbuf_custom+0x20>
 801a926:	4b11      	ldr	r3, [pc, #68]	; (801a96c <ipfrag_free_pbuf_custom+0x58>)
 801a928:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a92c:	4910      	ldr	r1, [pc, #64]	; (801a970 <ipfrag_free_pbuf_custom+0x5c>)
 801a92e:	4811      	ldr	r0, [pc, #68]	; (801a974 <ipfrag_free_pbuf_custom+0x60>)
 801a930:	f000 fffc 	bl	801b92c <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a934:	68fa      	ldr	r2, [r7, #12]
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	429a      	cmp	r2, r3
 801a93a:	d006      	beq.n	801a94a <ipfrag_free_pbuf_custom+0x36>
 801a93c:	4b0b      	ldr	r3, [pc, #44]	; (801a96c <ipfrag_free_pbuf_custom+0x58>)
 801a93e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a942:	490d      	ldr	r1, [pc, #52]	; (801a978 <ipfrag_free_pbuf_custom+0x64>)
 801a944:	480b      	ldr	r0, [pc, #44]	; (801a974 <ipfrag_free_pbuf_custom+0x60>)
 801a946:	f000 fff1 	bl	801b92c <printf>
  if (pcr->original != NULL) {
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	695b      	ldr	r3, [r3, #20]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d004      	beq.n	801a95c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	695b      	ldr	r3, [r3, #20]
 801a956:	4618      	mov	r0, r3
 801a958:	f7f6 fc82 	bl	8011260 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a95c:	68f8      	ldr	r0, [r7, #12]
 801a95e:	f7ff ffbd 	bl	801a8dc <ip_frag_free_pbuf_custom_ref>
}
 801a962:	bf00      	nop
 801a964:	3710      	adds	r7, #16
 801a966:	46bd      	mov	sp, r7
 801a968:	bd80      	pop	{r7, pc}
 801a96a:	bf00      	nop
 801a96c:	08027dd4 	.word	0x08027dd4
 801a970:	08027f98 	.word	0x08027f98
 801a974:	08027e1c 	.word	0x08027e1c
 801a978:	08027fa4 	.word	0x08027fa4

0801a97c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b094      	sub	sp, #80	; 0x50
 801a980:	af02      	add	r7, sp, #8
 801a982:	60f8      	str	r0, [r7, #12]
 801a984:	60b9      	str	r1, [r7, #8]
 801a986:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a988:	2300      	movs	r3, #0
 801a98a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a98e:	68bb      	ldr	r3, [r7, #8]
 801a990:	8c1b      	ldrh	r3, [r3, #32]
 801a992:	3b14      	subs	r3, #20
 801a994:	2b00      	cmp	r3, #0
 801a996:	da00      	bge.n	801a99a <ip4_frag+0x1e>
 801a998:	3307      	adds	r3, #7
 801a99a:	10db      	asrs	r3, r3, #3
 801a99c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a99e:	2314      	movs	r3, #20
 801a9a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	685b      	ldr	r3, [r3, #4]
 801a9a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ae:	781b      	ldrb	r3, [r3, #0]
 801a9b0:	f003 030f 	and.w	r3, r3, #15
 801a9b4:	b2db      	uxtb	r3, r3
 801a9b6:	009b      	lsls	r3, r3, #2
 801a9b8:	b2db      	uxtb	r3, r3
 801a9ba:	2b14      	cmp	r3, #20
 801a9bc:	d002      	beq.n	801a9c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a9be:	f06f 0305 	mvn.w	r3, #5
 801a9c2:	e110      	b.n	801abe6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	895b      	ldrh	r3, [r3, #10]
 801a9c8:	2b13      	cmp	r3, #19
 801a9ca:	d809      	bhi.n	801a9e0 <ip4_frag+0x64>
 801a9cc:	4b88      	ldr	r3, [pc, #544]	; (801abf0 <ip4_frag+0x274>)
 801a9ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a9d2:	4988      	ldr	r1, [pc, #544]	; (801abf4 <ip4_frag+0x278>)
 801a9d4:	4888      	ldr	r0, [pc, #544]	; (801abf8 <ip4_frag+0x27c>)
 801a9d6:	f000 ffa9 	bl	801b92c <printf>
 801a9da:	f06f 0305 	mvn.w	r3, #5
 801a9de:	e102      	b.n	801abe6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9e2:	88db      	ldrh	r3, [r3, #6]
 801a9e4:	b29b      	uxth	r3, r3
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	f7f5 f87e 	bl	800fae8 <lwip_htons>
 801a9ec:	4603      	mov	r3, r0
 801a9ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a9f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a9f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a9f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a9fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a9fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801aa00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	891b      	ldrh	r3, [r3, #8]
 801aa06:	3b14      	subs	r3, #20
 801aa08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801aa0c:	e0e1      	b.n	801abd2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801aa0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801aa10:	00db      	lsls	r3, r3, #3
 801aa12:	b29b      	uxth	r3, r3
 801aa14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aa18:	4293      	cmp	r3, r2
 801aa1a:	bf28      	it	cs
 801aa1c:	4613      	movcs	r3, r2
 801aa1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801aa20:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa24:	2114      	movs	r1, #20
 801aa26:	200e      	movs	r0, #14
 801aa28:	f7f6 f936 	bl	8010c98 <pbuf_alloc>
 801aa2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	f000 80d5 	beq.w	801abe0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa38:	895b      	ldrh	r3, [r3, #10]
 801aa3a:	2b13      	cmp	r3, #19
 801aa3c:	d806      	bhi.n	801aa4c <ip4_frag+0xd0>
 801aa3e:	4b6c      	ldr	r3, [pc, #432]	; (801abf0 <ip4_frag+0x274>)
 801aa40:	f44f 7249 	mov.w	r2, #804	; 0x324
 801aa44:	496d      	ldr	r1, [pc, #436]	; (801abfc <ip4_frag+0x280>)
 801aa46:	486c      	ldr	r0, [pc, #432]	; (801abf8 <ip4_frag+0x27c>)
 801aa48:	f000 ff70 	bl	801b92c <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa4e:	685b      	ldr	r3, [r3, #4]
 801aa50:	2214      	movs	r2, #20
 801aa52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801aa54:	4618      	mov	r0, r3
 801aa56:	f000 fcbb 	bl	801b3d0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa5c:	685b      	ldr	r3, [r3, #4]
 801aa5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801aa60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aa62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801aa66:	e064      	b.n	801ab32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	895a      	ldrh	r2, [r3, #10]
 801aa6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa6e:	1ad3      	subs	r3, r2, r3
 801aa70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	895b      	ldrh	r3, [r3, #10]
 801aa76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801aa78:	429a      	cmp	r2, r3
 801aa7a:	d906      	bls.n	801aa8a <ip4_frag+0x10e>
 801aa7c:	4b5c      	ldr	r3, [pc, #368]	; (801abf0 <ip4_frag+0x274>)
 801aa7e:	f240 322d 	movw	r2, #813	; 0x32d
 801aa82:	495f      	ldr	r1, [pc, #380]	; (801ac00 <ip4_frag+0x284>)
 801aa84:	485c      	ldr	r0, [pc, #368]	; (801abf8 <ip4_frag+0x27c>)
 801aa86:	f000 ff51 	bl	801b92c <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801aa8a:	8bfa      	ldrh	r2, [r7, #30]
 801aa8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801aa90:	4293      	cmp	r3, r2
 801aa92:	bf28      	it	cs
 801aa94:	4613      	movcs	r3, r2
 801aa96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801aa9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d105      	bne.n	801aaae <ip4_frag+0x132>
        poff = 0;
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	60fb      	str	r3, [r7, #12]
        continue;
 801aaac:	e041      	b.n	801ab32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801aaae:	f7ff ff0d 	bl	801a8cc <ip_frag_alloc_pbuf_custom_ref>
 801aab2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801aab4:	69bb      	ldr	r3, [r7, #24]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d103      	bne.n	801aac2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801aaba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aabc:	f7f6 fbd0 	bl	8011260 <pbuf_free>
        goto memerr;
 801aac0:	e08f      	b.n	801abe2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801aac2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801aac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aaca:	4413      	add	r3, r2
 801aacc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801aad0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801aad4:	9201      	str	r2, [sp, #4]
 801aad6:	9300      	str	r3, [sp, #0]
 801aad8:	4603      	mov	r3, r0
 801aada:	2241      	movs	r2, #65	; 0x41
 801aadc:	2000      	movs	r0, #0
 801aade:	f7f6 fa05 	bl	8010eec <pbuf_alloced_custom>
 801aae2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801aae4:	697b      	ldr	r3, [r7, #20]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d106      	bne.n	801aaf8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801aaea:	69b8      	ldr	r0, [r7, #24]
 801aaec:	f7ff fef6 	bl	801a8dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801aaf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aaf2:	f7f6 fbb5 	bl	8011260 <pbuf_free>
        goto memerr;
 801aaf6:	e074      	b.n	801abe2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801aaf8:	68f8      	ldr	r0, [r7, #12]
 801aafa:	f7f6 fc57 	bl	80113ac <pbuf_ref>
      pcr->original = p;
 801aafe:	69bb      	ldr	r3, [r7, #24]
 801ab00:	68fa      	ldr	r2, [r7, #12]
 801ab02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ab04:	69bb      	ldr	r3, [r7, #24]
 801ab06:	4a3f      	ldr	r2, [pc, #252]	; (801ac04 <ip4_frag+0x288>)
 801ab08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ab0a:	6979      	ldr	r1, [r7, #20]
 801ab0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ab0e:	f7f6 fc75 	bl	80113fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ab12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ab16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ab1a:	1ad3      	subs	r3, r2, r3
 801ab1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ab20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d004      	beq.n	801ab32 <ip4_frag+0x1b6>
        poff = 0;
 801ab28:	2300      	movs	r3, #0
 801ab2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ab32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d196      	bne.n	801aa68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ab3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ab3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ab40:	4413      	add	r3, r2
 801ab42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ab44:	68bb      	ldr	r3, [r7, #8]
 801ab46:	8c1b      	ldrh	r3, [r3, #32]
 801ab48:	f1a3 0213 	sub.w	r2, r3, #19
 801ab4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ab50:	429a      	cmp	r2, r3
 801ab52:	bfcc      	ite	gt
 801ab54:	2301      	movgt	r3, #1
 801ab56:	2300      	movle	r3, #0
 801ab58:	b2db      	uxtb	r3, r3
 801ab5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ab5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ab60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ab64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ab66:	6a3b      	ldr	r3, [r7, #32]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d002      	beq.n	801ab72 <ip4_frag+0x1f6>
 801ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d003      	beq.n	801ab7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ab72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ab78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ab7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	f7f4 ffb3 	bl	800fae8 <lwip_htons>
 801ab82:	4603      	mov	r3, r0
 801ab84:	461a      	mov	r2, r3
 801ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ab8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ab8c:	3314      	adds	r3, #20
 801ab8e:	b29b      	uxth	r3, r3
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7f4 ffa9 	bl	800fae8 <lwip_htons>
 801ab96:	4603      	mov	r3, r0
 801ab98:	461a      	mov	r2, r3
 801ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aba0:	2200      	movs	r2, #0
 801aba2:	729a      	strb	r2, [r3, #10]
 801aba4:	2200      	movs	r2, #0
 801aba6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801aba8:	68bb      	ldr	r3, [r7, #8]
 801abaa:	695b      	ldr	r3, [r3, #20]
 801abac:	687a      	ldr	r2, [r7, #4]
 801abae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801abb0:	68b8      	ldr	r0, [r7, #8]
 801abb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801abb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801abb6:	f7f6 fb53 	bl	8011260 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801abba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801abbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801abc0:	1ad3      	subs	r3, r2, r3
 801abc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801abc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801abca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801abcc:	4413      	add	r3, r2
 801abce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801abd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	f47f af19 	bne.w	801aa0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801abdc:	2300      	movs	r3, #0
 801abde:	e002      	b.n	801abe6 <ip4_frag+0x26a>
      goto memerr;
 801abe0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801abe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801abe6:	4618      	mov	r0, r3
 801abe8:	3748      	adds	r7, #72	; 0x48
 801abea:	46bd      	mov	sp, r7
 801abec:	bd80      	pop	{r7, pc}
 801abee:	bf00      	nop
 801abf0:	08027dd4 	.word	0x08027dd4
 801abf4:	08027fb0 	.word	0x08027fb0
 801abf8:	08027e1c 	.word	0x08027e1c
 801abfc:	08027fcc 	.word	0x08027fcc
 801ac00:	08027fec 	.word	0x08027fec
 801ac04:	0801a915 	.word	0x0801a915

0801ac08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b086      	sub	sp, #24
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	6078      	str	r0, [r7, #4]
 801ac10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ac12:	230e      	movs	r3, #14
 801ac14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	895b      	ldrh	r3, [r3, #10]
 801ac1a:	2b0e      	cmp	r3, #14
 801ac1c:	d96e      	bls.n	801acfc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	7bdb      	ldrb	r3, [r3, #15]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d106      	bne.n	801ac34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ac26:	683b      	ldr	r3, [r7, #0]
 801ac28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ac2c:	3301      	adds	r3, #1
 801ac2e:	b2da      	uxtb	r2, r3
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	685b      	ldr	r3, [r3, #4]
 801ac38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ac3a:	693b      	ldr	r3, [r7, #16]
 801ac3c:	7b1a      	ldrb	r2, [r3, #12]
 801ac3e:	7b5b      	ldrb	r3, [r3, #13]
 801ac40:	021b      	lsls	r3, r3, #8
 801ac42:	4313      	orrs	r3, r2
 801ac44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ac46:	693b      	ldr	r3, [r7, #16]
 801ac48:	781b      	ldrb	r3, [r3, #0]
 801ac4a:	f003 0301 	and.w	r3, r3, #1
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d023      	beq.n	801ac9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ac52:	693b      	ldr	r3, [r7, #16]
 801ac54:	781b      	ldrb	r3, [r3, #0]
 801ac56:	2b01      	cmp	r3, #1
 801ac58:	d10f      	bne.n	801ac7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	785b      	ldrb	r3, [r3, #1]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d11b      	bne.n	801ac9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ac62:	693b      	ldr	r3, [r7, #16]
 801ac64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ac66:	2b5e      	cmp	r3, #94	; 0x5e
 801ac68:	d117      	bne.n	801ac9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	7b5b      	ldrb	r3, [r3, #13]
 801ac6e:	f043 0310 	orr.w	r3, r3, #16
 801ac72:	b2da      	uxtb	r2, r3
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	735a      	strb	r2, [r3, #13]
 801ac78:	e00f      	b.n	801ac9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ac7a:	693b      	ldr	r3, [r7, #16]
 801ac7c:	2206      	movs	r2, #6
 801ac7e:	4928      	ldr	r1, [pc, #160]	; (801ad20 <ethernet_input+0x118>)
 801ac80:	4618      	mov	r0, r3
 801ac82:	f000 fb97 	bl	801b3b4 <memcmp>
 801ac86:	4603      	mov	r3, r0
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d106      	bne.n	801ac9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	7b5b      	ldrb	r3, [r3, #13]
 801ac90:	f043 0308 	orr.w	r3, r3, #8
 801ac94:	b2da      	uxtb	r2, r3
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ac9a:	89fb      	ldrh	r3, [r7, #14]
 801ac9c:	2b08      	cmp	r3, #8
 801ac9e:	d003      	beq.n	801aca8 <ethernet_input+0xa0>
 801aca0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801aca4:	d014      	beq.n	801acd0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801aca6:	e032      	b.n	801ad0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aca8:	683b      	ldr	r3, [r7, #0]
 801acaa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801acae:	f003 0308 	and.w	r3, r3, #8
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d024      	beq.n	801ad00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801acb6:	8afb      	ldrh	r3, [r7, #22]
 801acb8:	4619      	mov	r1, r3
 801acba:	6878      	ldr	r0, [r7, #4]
 801acbc:	f7f6 fa4a 	bl	8011154 <pbuf_remove_header>
 801acc0:	4603      	mov	r3, r0
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d11e      	bne.n	801ad04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801acc6:	6839      	ldr	r1, [r7, #0]
 801acc8:	6878      	ldr	r0, [r7, #4]
 801acca:	f7fe fdfd 	bl	80198c8 <ip4_input>
      break;
 801acce:	e013      	b.n	801acf8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801acd0:	683b      	ldr	r3, [r7, #0]
 801acd2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801acd6:	f003 0308 	and.w	r3, r3, #8
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d014      	beq.n	801ad08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801acde:	8afb      	ldrh	r3, [r7, #22]
 801ace0:	4619      	mov	r1, r3
 801ace2:	6878      	ldr	r0, [r7, #4]
 801ace4:	f7f6 fa36 	bl	8011154 <pbuf_remove_header>
 801ace8:	4603      	mov	r3, r0
 801acea:	2b00      	cmp	r3, #0
 801acec:	d10e      	bne.n	801ad0c <ethernet_input+0x104>
        etharp_input(p, netif);
 801acee:	6839      	ldr	r1, [r7, #0]
 801acf0:	6878      	ldr	r0, [r7, #4]
 801acf2:	f7fd ff9d 	bl	8018c30 <etharp_input>
      break;
 801acf6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801acf8:	2300      	movs	r3, #0
 801acfa:	e00c      	b.n	801ad16 <ethernet_input+0x10e>
    goto free_and_return;
 801acfc:	bf00      	nop
 801acfe:	e006      	b.n	801ad0e <ethernet_input+0x106>
        goto free_and_return;
 801ad00:	bf00      	nop
 801ad02:	e004      	b.n	801ad0e <ethernet_input+0x106>
        goto free_and_return;
 801ad04:	bf00      	nop
 801ad06:	e002      	b.n	801ad0e <ethernet_input+0x106>
        goto free_and_return;
 801ad08:	bf00      	nop
 801ad0a:	e000      	b.n	801ad0e <ethernet_input+0x106>
        goto free_and_return;
 801ad0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ad0e:	6878      	ldr	r0, [r7, #4]
 801ad10:	f7f6 faa6 	bl	8011260 <pbuf_free>
  return ERR_OK;
 801ad14:	2300      	movs	r3, #0
}
 801ad16:	4618      	mov	r0, r3
 801ad18:	3718      	adds	r7, #24
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	bd80      	pop	{r7, pc}
 801ad1e:	bf00      	nop
 801ad20:	08029098 	.word	0x08029098

0801ad24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ad24:	b580      	push	{r7, lr}
 801ad26:	b086      	sub	sp, #24
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	60f8      	str	r0, [r7, #12]
 801ad2c:	60b9      	str	r1, [r7, #8]
 801ad2e:	607a      	str	r2, [r7, #4]
 801ad30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ad32:	8c3b      	ldrh	r3, [r7, #32]
 801ad34:	4618      	mov	r0, r3
 801ad36:	f7f4 fed7 	bl	800fae8 <lwip_htons>
 801ad3a:	4603      	mov	r3, r0
 801ad3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ad3e:	210e      	movs	r1, #14
 801ad40:	68b8      	ldr	r0, [r7, #8]
 801ad42:	f7f6 f9f7 	bl	8011134 <pbuf_add_header>
 801ad46:	4603      	mov	r3, r0
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d125      	bne.n	801ad98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ad4c:	68bb      	ldr	r3, [r7, #8]
 801ad4e:	685b      	ldr	r3, [r3, #4]
 801ad50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ad52:	693b      	ldr	r3, [r7, #16]
 801ad54:	8afa      	ldrh	r2, [r7, #22]
 801ad56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ad58:	693b      	ldr	r3, [r7, #16]
 801ad5a:	2206      	movs	r2, #6
 801ad5c:	6839      	ldr	r1, [r7, #0]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f000 fb36 	bl	801b3d0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ad64:	693b      	ldr	r3, [r7, #16]
 801ad66:	3306      	adds	r3, #6
 801ad68:	2206      	movs	r2, #6
 801ad6a:	6879      	ldr	r1, [r7, #4]
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	f000 fb2f 	bl	801b3d0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad78:	2b06      	cmp	r3, #6
 801ad7a:	d006      	beq.n	801ad8a <ethernet_output+0x66>
 801ad7c:	4b0a      	ldr	r3, [pc, #40]	; (801ada8 <ethernet_output+0x84>)
 801ad7e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ad82:	490a      	ldr	r1, [pc, #40]	; (801adac <ethernet_output+0x88>)
 801ad84:	480a      	ldr	r0, [pc, #40]	; (801adb0 <ethernet_output+0x8c>)
 801ad86:	f000 fdd1 	bl	801b92c <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	699b      	ldr	r3, [r3, #24]
 801ad8e:	68b9      	ldr	r1, [r7, #8]
 801ad90:	68f8      	ldr	r0, [r7, #12]
 801ad92:	4798      	blx	r3
 801ad94:	4603      	mov	r3, r0
 801ad96:	e002      	b.n	801ad9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ad98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ad9a:	f06f 0301 	mvn.w	r3, #1
}
 801ad9e:	4618      	mov	r0, r3
 801ada0:	3718      	adds	r7, #24
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bd80      	pop	{r7, pc}
 801ada6:	bf00      	nop
 801ada8:	08027ffc 	.word	0x08027ffc
 801adac:	08028034 	.word	0x08028034
 801adb0:	08028068 	.word	0x08028068

0801adb4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b086      	sub	sp, #24
 801adb8:	af00      	add	r7, sp, #0
 801adba:	6078      	str	r0, [r7, #4]
 801adbc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801adbe:	683b      	ldr	r3, [r7, #0]
 801adc0:	60bb      	str	r3, [r7, #8]
 801adc2:	2304      	movs	r3, #4
 801adc4:	60fb      	str	r3, [r7, #12]
 801adc6:	2300      	movs	r3, #0
 801adc8:	613b      	str	r3, [r7, #16]
 801adca:	2300      	movs	r3, #0
 801adcc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801adce:	f107 0308 	add.w	r3, r7, #8
 801add2:	2100      	movs	r1, #0
 801add4:	4618      	mov	r0, r3
 801add6:	f7ef f8a2 	bl	8009f1e <osMessageCreate>
 801adda:	4602      	mov	r2, r0
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d102      	bne.n	801adee <sys_mbox_new+0x3a>
    return ERR_MEM;
 801ade8:	f04f 33ff 	mov.w	r3, #4294967295
 801adec:	e000      	b.n	801adf0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801adee:	2300      	movs	r3, #0
}
 801adf0:	4618      	mov	r0, r3
 801adf2:	3718      	adds	r7, #24
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bd80      	pop	{r7, pc}

0801adf8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7ef f967 	bl	800a0d8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	4618      	mov	r0, r3
 801ae10:	f7ef f978 	bl	800a104 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ae14:	bf00      	nop
 801ae16:	3708      	adds	r7, #8
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	bd80      	pop	{r7, pc}

0801ae1c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b084      	sub	sp, #16
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]
 801ae24:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	6839      	ldr	r1, [r7, #0]
 801ae2c:	2200      	movs	r2, #0
 801ae2e:	4618      	mov	r0, r3
 801ae30:	f7ef f89e 	bl	8009f70 <osMessagePut>
 801ae34:	4603      	mov	r3, r0
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d102      	bne.n	801ae40 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ae3a:	2300      	movs	r3, #0
 801ae3c:	73fb      	strb	r3, [r7, #15]
 801ae3e:	e001      	b.n	801ae44 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ae40:	23ff      	movs	r3, #255	; 0xff
 801ae42:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ae44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ae48:	4618      	mov	r0, r3
 801ae4a:	3710      	adds	r7, #16
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	bd80      	pop	{r7, pc}

0801ae50 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b08c      	sub	sp, #48	; 0x30
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	61f8      	str	r0, [r7, #28]
 801ae58:	61b9      	str	r1, [r7, #24]
 801ae5a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ae5c:	f7ee fe9e 	bl	8009b9c <osKernelSysTick>
 801ae60:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ae62:	697b      	ldr	r3, [r7, #20]
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d017      	beq.n	801ae98 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ae68:	69fb      	ldr	r3, [r7, #28]
 801ae6a:	6819      	ldr	r1, [r3, #0]
 801ae6c:	f107 0320 	add.w	r3, r7, #32
 801ae70:	697a      	ldr	r2, [r7, #20]
 801ae72:	4618      	mov	r0, r3
 801ae74:	f7ef f8bc 	bl	8009ff0 <osMessageGet>

    if(event.status == osEventMessage)
 801ae78:	6a3b      	ldr	r3, [r7, #32]
 801ae7a:	2b10      	cmp	r3, #16
 801ae7c:	d109      	bne.n	801ae92 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae80:	461a      	mov	r2, r3
 801ae82:	69bb      	ldr	r3, [r7, #24]
 801ae84:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ae86:	f7ee fe89 	bl	8009b9c <osKernelSysTick>
 801ae8a:	4602      	mov	r2, r0
 801ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae8e:	1ad3      	subs	r3, r2, r3
 801ae90:	e019      	b.n	801aec6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ae92:	f04f 33ff 	mov.w	r3, #4294967295
 801ae96:	e016      	b.n	801aec6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ae98:	69fb      	ldr	r3, [r7, #28]
 801ae9a:	6819      	ldr	r1, [r3, #0]
 801ae9c:	463b      	mov	r3, r7
 801ae9e:	f04f 32ff 	mov.w	r2, #4294967295
 801aea2:	4618      	mov	r0, r3
 801aea4:	f7ef f8a4 	bl	8009ff0 <osMessageGet>
 801aea8:	f107 0320 	add.w	r3, r7, #32
 801aeac:	463a      	mov	r2, r7
 801aeae:	ca07      	ldmia	r2, {r0, r1, r2}
 801aeb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeb6:	461a      	mov	r2, r3
 801aeb8:	69bb      	ldr	r3, [r7, #24]
 801aeba:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801aebc:	f7ee fe6e 	bl	8009b9c <osKernelSysTick>
 801aec0:	4602      	mov	r2, r0
 801aec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aec4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801aec6:	4618      	mov	r0, r3
 801aec8:	3730      	adds	r7, #48	; 0x30
 801aeca:	46bd      	mov	sp, r7
 801aecc:	bd80      	pop	{r7, pc}

0801aece <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801aece:	b580      	push	{r7, lr}
 801aed0:	b086      	sub	sp, #24
 801aed2:	af00      	add	r7, sp, #0
 801aed4:	6078      	str	r0, [r7, #4]
 801aed6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	6819      	ldr	r1, [r3, #0]
 801aedc:	f107 030c 	add.w	r3, r7, #12
 801aee0:	2200      	movs	r2, #0
 801aee2:	4618      	mov	r0, r3
 801aee4:	f7ef f884 	bl	8009ff0 <osMessageGet>

  if(event.status == osEventMessage)
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	2b10      	cmp	r3, #16
 801aeec:	d105      	bne.n	801aefa <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801aeee:	693b      	ldr	r3, [r7, #16]
 801aef0:	461a      	mov	r2, r3
 801aef2:	683b      	ldr	r3, [r7, #0]
 801aef4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801aef6:	2300      	movs	r3, #0
 801aef8:	e001      	b.n	801aefe <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801aefa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801aefe:	4618      	mov	r0, r3
 801af00:	3718      	adds	r7, #24
 801af02:	46bd      	mov	sp, r7
 801af04:	bd80      	pop	{r7, pc}

0801af06 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801af06:	b480      	push	{r7}
 801af08:	b083      	sub	sp, #12
 801af0a:	af00      	add	r7, sp, #0
 801af0c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d101      	bne.n	801af1a <sys_mbox_valid+0x14>
    return 0;
 801af16:	2300      	movs	r3, #0
 801af18:	e000      	b.n	801af1c <sys_mbox_valid+0x16>
  else
    return 1;
 801af1a:	2301      	movs	r3, #1
}
 801af1c:	4618      	mov	r0, r3
 801af1e:	370c      	adds	r7, #12
 801af20:	46bd      	mov	sp, r7
 801af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af26:	4770      	bx	lr

0801af28 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801af28:	b480      	push	{r7}
 801af2a:	b083      	sub	sp, #12
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	2200      	movs	r2, #0
 801af34:	601a      	str	r2, [r3, #0]
}
 801af36:	bf00      	nop
 801af38:	370c      	adds	r7, #12
 801af3a:	46bd      	mov	sp, r7
 801af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af40:	4770      	bx	lr

0801af42 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801af42:	b580      	push	{r7, lr}
 801af44:	b084      	sub	sp, #16
 801af46:	af00      	add	r7, sp, #0
 801af48:	6078      	str	r0, [r7, #4]
 801af4a:	460b      	mov	r3, r1
 801af4c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801af4e:	2300      	movs	r3, #0
 801af50:	60bb      	str	r3, [r7, #8]
 801af52:	2300      	movs	r3, #0
 801af54:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801af56:	f107 0308 	add.w	r3, r7, #8
 801af5a:	2101      	movs	r1, #1
 801af5c:	4618      	mov	r0, r3
 801af5e:	f7ee ff15 	bl	8009d8c <osSemaphoreCreate>
 801af62:	4602      	mov	r2, r0
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d102      	bne.n	801af76 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801af70:	f04f 33ff 	mov.w	r3, #4294967295
 801af74:	e009      	b.n	801af8a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801af76:	78fb      	ldrb	r3, [r7, #3]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d105      	bne.n	801af88 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	2100      	movs	r1, #0
 801af82:	4618      	mov	r0, r3
 801af84:	f7ee ff34 	bl	8009df0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801af88:	2300      	movs	r3, #0
}
 801af8a:	4618      	mov	r0, r3
 801af8c:	3710      	adds	r7, #16
 801af8e:	46bd      	mov	sp, r7
 801af90:	bd80      	pop	{r7, pc}

0801af92 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801af92:	b580      	push	{r7, lr}
 801af94:	b084      	sub	sp, #16
 801af96:	af00      	add	r7, sp, #0
 801af98:	6078      	str	r0, [r7, #4]
 801af9a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801af9c:	f7ee fdfe 	bl	8009b9c <osKernelSysTick>
 801afa0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801afa2:	683b      	ldr	r3, [r7, #0]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d011      	beq.n	801afcc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	6839      	ldr	r1, [r7, #0]
 801afae:	4618      	mov	r0, r3
 801afb0:	f7ee ff1e 	bl	8009df0 <osSemaphoreWait>
 801afb4:	4603      	mov	r3, r0
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d105      	bne.n	801afc6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801afba:	f7ee fdef 	bl	8009b9c <osKernelSysTick>
 801afbe:	4602      	mov	r2, r0
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	1ad3      	subs	r3, r2, r3
 801afc4:	e012      	b.n	801afec <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801afc6:	f04f 33ff 	mov.w	r3, #4294967295
 801afca:	e00f      	b.n	801afec <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801afcc:	bf00      	nop
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	f04f 31ff 	mov.w	r1, #4294967295
 801afd6:	4618      	mov	r0, r3
 801afd8:	f7ee ff0a 	bl	8009df0 <osSemaphoreWait>
 801afdc:	4603      	mov	r3, r0
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d1f5      	bne.n	801afce <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801afe2:	f7ee fddb 	bl	8009b9c <osKernelSysTick>
 801afe6:	4602      	mov	r2, r0
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801afec:	4618      	mov	r0, r3
 801afee:	3710      	adds	r7, #16
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}

0801aff4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b082      	sub	sp, #8
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	4618      	mov	r0, r3
 801b002:	f7ee ff43 	bl	8009e8c <osSemaphoreRelease>
}
 801b006:	bf00      	nop
 801b008:	3708      	adds	r7, #8
 801b00a:	46bd      	mov	sp, r7
 801b00c:	bd80      	pop	{r7, pc}

0801b00e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b00e:	b580      	push	{r7, lr}
 801b010:	b082      	sub	sp, #8
 801b012:	af00      	add	r7, sp, #0
 801b014:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	4618      	mov	r0, r3
 801b01c:	f7ee ff6c 	bl	8009ef8 <osSemaphoreDelete>
}
 801b020:	bf00      	nop
 801b022:	3708      	adds	r7, #8
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}

0801b028 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b028:	b480      	push	{r7}
 801b02a:	b083      	sub	sp, #12
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d101      	bne.n	801b03c <sys_sem_valid+0x14>
    return 0;
 801b038:	2300      	movs	r3, #0
 801b03a:	e000      	b.n	801b03e <sys_sem_valid+0x16>
  else
    return 1;
 801b03c:	2301      	movs	r3, #1
}
 801b03e:	4618      	mov	r0, r3
 801b040:	370c      	adds	r7, #12
 801b042:	46bd      	mov	sp, r7
 801b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b048:	4770      	bx	lr

0801b04a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b04a:	b480      	push	{r7}
 801b04c:	b083      	sub	sp, #12
 801b04e:	af00      	add	r7, sp, #0
 801b050:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2200      	movs	r2, #0
 801b056:	601a      	str	r2, [r3, #0]
}
 801b058:	bf00      	nop
 801b05a:	370c      	adds	r7, #12
 801b05c:	46bd      	mov	sp, r7
 801b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b062:	4770      	bx	lr

0801b064 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b068:	4803      	ldr	r0, [pc, #12]	; (801b078 <sys_init+0x14>)
 801b06a:	f7ee fdf3 	bl	8009c54 <osMutexCreate>
 801b06e:	4603      	mov	r3, r0
 801b070:	4a02      	ldr	r2, [pc, #8]	; (801b07c <sys_init+0x18>)
 801b072:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801b074:	bf00      	nop
 801b076:	bd80      	pop	{r7, pc}
 801b078:	080290a8 	.word	0x080290a8
 801b07c:	2000be68 	.word	0x2000be68

0801b080 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b080:	b580      	push	{r7, lr}
 801b082:	b084      	sub	sp, #16
 801b084:	af00      	add	r7, sp, #0
 801b086:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801b088:	2300      	movs	r3, #0
 801b08a:	60bb      	str	r3, [r7, #8]
 801b08c:	2300      	movs	r3, #0
 801b08e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b090:	f107 0308 	add.w	r3, r7, #8
 801b094:	4618      	mov	r0, r3
 801b096:	f7ee fddd 	bl	8009c54 <osMutexCreate>
 801b09a:	4602      	mov	r2, r0
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d102      	bne.n	801b0ae <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b0a8:	f04f 33ff 	mov.w	r3, #4294967295
 801b0ac:	e000      	b.n	801b0b0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b0ae:	2300      	movs	r3, #0
}
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	3710      	adds	r7, #16
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd80      	pop	{r7, pc}

0801b0b8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b082      	sub	sp, #8
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	f04f 31ff 	mov.w	r1, #4294967295
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7ee fddb 	bl	8009c84 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801b0ce:	bf00      	nop
 801b0d0:	3708      	adds	r7, #8
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bd80      	pop	{r7, pc}

0801b0d6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b0d6:	b580      	push	{r7, lr}
 801b0d8:	b082      	sub	sp, #8
 801b0da:	af00      	add	r7, sp, #0
 801b0dc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	f7ee fe1c 	bl	8009d20 <osMutexRelease>
}
 801b0e8:	bf00      	nop
 801b0ea:	3708      	adds	r7, #8
 801b0ec:	46bd      	mov	sp, r7
 801b0ee:	bd80      	pop	{r7, pc}

0801b0f0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b08c      	sub	sp, #48	; 0x30
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	60f8      	str	r0, [r7, #12]
 801b0f8:	60b9      	str	r1, [r7, #8]
 801b0fa:	607a      	str	r2, [r7, #4]
 801b0fc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b0fe:	f107 0314 	add.w	r3, r7, #20
 801b102:	2200      	movs	r2, #0
 801b104:	601a      	str	r2, [r3, #0]
 801b106:	605a      	str	r2, [r3, #4]
 801b108:	609a      	str	r2, [r3, #8]
 801b10a:	60da      	str	r2, [r3, #12]
 801b10c:	611a      	str	r2, [r3, #16]
 801b10e:	615a      	str	r2, [r3, #20]
 801b110:	619a      	str	r2, [r3, #24]
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	617b      	str	r3, [r7, #20]
 801b116:	68bb      	ldr	r3, [r7, #8]
 801b118:	61bb      	str	r3, [r7, #24]
 801b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b11c:	b21b      	sxth	r3, r3
 801b11e:	83bb      	strh	r3, [r7, #28]
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b124:	f107 0314 	add.w	r3, r7, #20
 801b128:	6879      	ldr	r1, [r7, #4]
 801b12a:	4618      	mov	r0, r3
 801b12c:	f7ee fd46 	bl	8009bbc <osThreadCreate>
 801b130:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b132:	4618      	mov	r0, r3
 801b134:	3730      	adds	r7, #48	; 0x30
 801b136:	46bd      	mov	sp, r7
 801b138:	bd80      	pop	{r7, pc}
	...

0801b13c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b140:	4b04      	ldr	r3, [pc, #16]	; (801b154 <sys_arch_protect+0x18>)
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	f04f 31ff 	mov.w	r1, #4294967295
 801b148:	4618      	mov	r0, r3
 801b14a:	f7ee fd9b 	bl	8009c84 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b14e:	2301      	movs	r3, #1
}
 801b150:	4618      	mov	r0, r3
 801b152:	bd80      	pop	{r7, pc}
 801b154:	2000be68 	.word	0x2000be68

0801b158 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b160:	4b04      	ldr	r3, [pc, #16]	; (801b174 <sys_arch_unprotect+0x1c>)
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	4618      	mov	r0, r3
 801b166:	f7ee fddb 	bl	8009d20 <osMutexRelease>
}
 801b16a:	bf00      	nop
 801b16c:	3708      	adds	r7, #8
 801b16e:	46bd      	mov	sp, r7
 801b170:	bd80      	pop	{r7, pc}
 801b172:	bf00      	nop
 801b174:	2000be68 	.word	0x2000be68

0801b178 <atoi>:
 801b178:	220a      	movs	r2, #10
 801b17a:	2100      	movs	r1, #0
 801b17c:	f000 bd12 	b.w	801bba4 <strtol>

0801b180 <__libc_init_array>:
 801b180:	b570      	push	{r4, r5, r6, lr}
 801b182:	4d0d      	ldr	r5, [pc, #52]	; (801b1b8 <__libc_init_array+0x38>)
 801b184:	4c0d      	ldr	r4, [pc, #52]	; (801b1bc <__libc_init_array+0x3c>)
 801b186:	1b64      	subs	r4, r4, r5
 801b188:	10a4      	asrs	r4, r4, #2
 801b18a:	2600      	movs	r6, #0
 801b18c:	42a6      	cmp	r6, r4
 801b18e:	d109      	bne.n	801b1a4 <__libc_init_array+0x24>
 801b190:	4d0b      	ldr	r5, [pc, #44]	; (801b1c0 <__libc_init_array+0x40>)
 801b192:	4c0c      	ldr	r4, [pc, #48]	; (801b1c4 <__libc_init_array+0x44>)
 801b194:	f009 fa0e 	bl	80245b4 <_init>
 801b198:	1b64      	subs	r4, r4, r5
 801b19a:	10a4      	asrs	r4, r4, #2
 801b19c:	2600      	movs	r6, #0
 801b19e:	42a6      	cmp	r6, r4
 801b1a0:	d105      	bne.n	801b1ae <__libc_init_array+0x2e>
 801b1a2:	bd70      	pop	{r4, r5, r6, pc}
 801b1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1a8:	4798      	blx	r3
 801b1aa:	3601      	adds	r6, #1
 801b1ac:	e7ee      	b.n	801b18c <__libc_init_array+0xc>
 801b1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1b2:	4798      	blx	r3
 801b1b4:	3601      	adds	r6, #1
 801b1b6:	e7f2      	b.n	801b19e <__libc_init_array+0x1e>
 801b1b8:	080295d8 	.word	0x080295d8
 801b1bc:	080295d8 	.word	0x080295d8
 801b1c0:	080295d8 	.word	0x080295d8
 801b1c4:	080295e0 	.word	0x080295e0

0801b1c8 <localtime_r>:
 801b1c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b1cc:	4607      	mov	r7, r0
 801b1ce:	9101      	str	r1, [sp, #4]
 801b1d0:	f004 fd10 	bl	801fbf4 <__gettzinfo>
 801b1d4:	9901      	ldr	r1, [sp, #4]
 801b1d6:	4680      	mov	r8, r0
 801b1d8:	4638      	mov	r0, r7
 801b1da:	f004 fd0f 	bl	801fbfc <gmtime_r>
 801b1de:	6943      	ldr	r3, [r0, #20]
 801b1e0:	079a      	lsls	r2, r3, #30
 801b1e2:	4604      	mov	r4, r0
 801b1e4:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801b1e8:	d105      	bne.n	801b1f6 <localtime_r+0x2e>
 801b1ea:	2264      	movs	r2, #100	; 0x64
 801b1ec:	fb96 f3f2 	sdiv	r3, r6, r2
 801b1f0:	fb02 6313 	mls	r3, r2, r3, r6
 801b1f4:	bb7b      	cbnz	r3, 801b256 <localtime_r+0x8e>
 801b1f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801b1fa:	fb96 f5f3 	sdiv	r5, r6, r3
 801b1fe:	fb03 6515 	mls	r5, r3, r5, r6
 801b202:	fab5 f585 	clz	r5, r5
 801b206:	096d      	lsrs	r5, r5, #5
 801b208:	4b68      	ldr	r3, [pc, #416]	; (801b3ac <localtime_r+0x1e4>)
 801b20a:	2230      	movs	r2, #48	; 0x30
 801b20c:	fb02 3505 	mla	r5, r2, r5, r3
 801b210:	f001 ff5a 	bl	801d0c8 <__tz_lock>
 801b214:	f001 ff64 	bl	801d0e0 <_tzset_unlocked>
 801b218:	4b65      	ldr	r3, [pc, #404]	; (801b3b0 <localtime_r+0x1e8>)
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	b353      	cbz	r3, 801b274 <localtime_r+0xac>
 801b21e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b222:	42b3      	cmp	r3, r6
 801b224:	d119      	bne.n	801b25a <localtime_r+0x92>
 801b226:	f8d8 1000 	ldr.w	r1, [r8]
 801b22a:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b22e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801b232:	b9d1      	cbnz	r1, 801b26a <localtime_r+0xa2>
 801b234:	4296      	cmp	r6, r2
 801b236:	eb77 0303 	sbcs.w	r3, r7, r3
 801b23a:	da23      	bge.n	801b284 <localtime_r+0xbc>
 801b23c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b240:	4296      	cmp	r6, r2
 801b242:	eb77 0303 	sbcs.w	r3, r7, r3
 801b246:	bfb4      	ite	lt
 801b248:	2301      	movlt	r3, #1
 801b24a:	2300      	movge	r3, #0
 801b24c:	6223      	str	r3, [r4, #32]
 801b24e:	db1b      	blt.n	801b288 <localtime_r+0xc0>
 801b250:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801b254:	e01a      	b.n	801b28c <localtime_r+0xc4>
 801b256:	2501      	movs	r5, #1
 801b258:	e7d6      	b.n	801b208 <localtime_r+0x40>
 801b25a:	4630      	mov	r0, r6
 801b25c:	f001 fe8c 	bl	801cf78 <__tzcalc_limits>
 801b260:	2800      	cmp	r0, #0
 801b262:	d1e0      	bne.n	801b226 <localtime_r+0x5e>
 801b264:	f04f 33ff 	mov.w	r3, #4294967295
 801b268:	e004      	b.n	801b274 <localtime_r+0xac>
 801b26a:	4296      	cmp	r6, r2
 801b26c:	eb77 0303 	sbcs.w	r3, r7, r3
 801b270:	da02      	bge.n	801b278 <localtime_r+0xb0>
 801b272:	2300      	movs	r3, #0
 801b274:	6223      	str	r3, [r4, #32]
 801b276:	e7eb      	b.n	801b250 <localtime_r+0x88>
 801b278:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b27c:	4296      	cmp	r6, r2
 801b27e:	eb77 0303 	sbcs.w	r3, r7, r3
 801b282:	daf6      	bge.n	801b272 <localtime_r+0xaa>
 801b284:	2301      	movs	r3, #1
 801b286:	6223      	str	r3, [r4, #32]
 801b288:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801b28c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801b290:	203c      	movs	r0, #60	; 0x3c
 801b292:	fb91 f6f3 	sdiv	r6, r1, r3
 801b296:	fb03 1316 	mls	r3, r3, r6, r1
 801b29a:	6861      	ldr	r1, [r4, #4]
 801b29c:	fb93 f2f0 	sdiv	r2, r3, r0
 801b2a0:	fb00 3012 	mls	r0, r0, r2, r3
 801b2a4:	6823      	ldr	r3, [r4, #0]
 801b2a6:	1a89      	subs	r1, r1, r2
 801b2a8:	68a2      	ldr	r2, [r4, #8]
 801b2aa:	6061      	str	r1, [r4, #4]
 801b2ac:	1a1b      	subs	r3, r3, r0
 801b2ae:	1b92      	subs	r2, r2, r6
 801b2b0:	2b3b      	cmp	r3, #59	; 0x3b
 801b2b2:	6023      	str	r3, [r4, #0]
 801b2b4:	60a2      	str	r2, [r4, #8]
 801b2b6:	dd35      	ble.n	801b324 <localtime_r+0x15c>
 801b2b8:	3101      	adds	r1, #1
 801b2ba:	6061      	str	r1, [r4, #4]
 801b2bc:	3b3c      	subs	r3, #60	; 0x3c
 801b2be:	6023      	str	r3, [r4, #0]
 801b2c0:	6863      	ldr	r3, [r4, #4]
 801b2c2:	2b3b      	cmp	r3, #59	; 0x3b
 801b2c4:	dd34      	ble.n	801b330 <localtime_r+0x168>
 801b2c6:	3201      	adds	r2, #1
 801b2c8:	60a2      	str	r2, [r4, #8]
 801b2ca:	3b3c      	subs	r3, #60	; 0x3c
 801b2cc:	6063      	str	r3, [r4, #4]
 801b2ce:	68a3      	ldr	r3, [r4, #8]
 801b2d0:	2b17      	cmp	r3, #23
 801b2d2:	dd33      	ble.n	801b33c <localtime_r+0x174>
 801b2d4:	69e2      	ldr	r2, [r4, #28]
 801b2d6:	3201      	adds	r2, #1
 801b2d8:	61e2      	str	r2, [r4, #28]
 801b2da:	69a2      	ldr	r2, [r4, #24]
 801b2dc:	3201      	adds	r2, #1
 801b2de:	2a06      	cmp	r2, #6
 801b2e0:	bfc8      	it	gt
 801b2e2:	2200      	movgt	r2, #0
 801b2e4:	61a2      	str	r2, [r4, #24]
 801b2e6:	68e2      	ldr	r2, [r4, #12]
 801b2e8:	3b18      	subs	r3, #24
 801b2ea:	3201      	adds	r2, #1
 801b2ec:	60a3      	str	r3, [r4, #8]
 801b2ee:	6923      	ldr	r3, [r4, #16]
 801b2f0:	60e2      	str	r2, [r4, #12]
 801b2f2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801b2f6:	428a      	cmp	r2, r1
 801b2f8:	dd0e      	ble.n	801b318 <localtime_r+0x150>
 801b2fa:	2b0b      	cmp	r3, #11
 801b2fc:	eba2 0201 	sub.w	r2, r2, r1
 801b300:	60e2      	str	r2, [r4, #12]
 801b302:	f103 0201 	add.w	r2, r3, #1
 801b306:	bf09      	itett	eq
 801b308:	6963      	ldreq	r3, [r4, #20]
 801b30a:	6122      	strne	r2, [r4, #16]
 801b30c:	2200      	moveq	r2, #0
 801b30e:	3301      	addeq	r3, #1
 801b310:	bf02      	ittt	eq
 801b312:	6122      	streq	r2, [r4, #16]
 801b314:	6163      	streq	r3, [r4, #20]
 801b316:	61e2      	streq	r2, [r4, #28]
 801b318:	f001 fedc 	bl	801d0d4 <__tz_unlock>
 801b31c:	4620      	mov	r0, r4
 801b31e:	b002      	add	sp, #8
 801b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b324:	2b00      	cmp	r3, #0
 801b326:	dacb      	bge.n	801b2c0 <localtime_r+0xf8>
 801b328:	3901      	subs	r1, #1
 801b32a:	6061      	str	r1, [r4, #4]
 801b32c:	333c      	adds	r3, #60	; 0x3c
 801b32e:	e7c6      	b.n	801b2be <localtime_r+0xf6>
 801b330:	2b00      	cmp	r3, #0
 801b332:	dacc      	bge.n	801b2ce <localtime_r+0x106>
 801b334:	3a01      	subs	r2, #1
 801b336:	60a2      	str	r2, [r4, #8]
 801b338:	333c      	adds	r3, #60	; 0x3c
 801b33a:	e7c7      	b.n	801b2cc <localtime_r+0x104>
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	daeb      	bge.n	801b318 <localtime_r+0x150>
 801b340:	69e2      	ldr	r2, [r4, #28]
 801b342:	3a01      	subs	r2, #1
 801b344:	61e2      	str	r2, [r4, #28]
 801b346:	69a2      	ldr	r2, [r4, #24]
 801b348:	3a01      	subs	r2, #1
 801b34a:	bf48      	it	mi
 801b34c:	2206      	movmi	r2, #6
 801b34e:	61a2      	str	r2, [r4, #24]
 801b350:	68e2      	ldr	r2, [r4, #12]
 801b352:	3318      	adds	r3, #24
 801b354:	3a01      	subs	r2, #1
 801b356:	60e2      	str	r2, [r4, #12]
 801b358:	60a3      	str	r3, [r4, #8]
 801b35a:	2a00      	cmp	r2, #0
 801b35c:	d1dc      	bne.n	801b318 <localtime_r+0x150>
 801b35e:	6923      	ldr	r3, [r4, #16]
 801b360:	3b01      	subs	r3, #1
 801b362:	d405      	bmi.n	801b370 <localtime_r+0x1a8>
 801b364:	6123      	str	r3, [r4, #16]
 801b366:	6923      	ldr	r3, [r4, #16]
 801b368:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b36c:	60e3      	str	r3, [r4, #12]
 801b36e:	e7d3      	b.n	801b318 <localtime_r+0x150>
 801b370:	230b      	movs	r3, #11
 801b372:	6123      	str	r3, [r4, #16]
 801b374:	6963      	ldr	r3, [r4, #20]
 801b376:	1e5a      	subs	r2, r3, #1
 801b378:	6162      	str	r2, [r4, #20]
 801b37a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801b37e:	0793      	lsls	r3, r2, #30
 801b380:	d105      	bne.n	801b38e <localtime_r+0x1c6>
 801b382:	2164      	movs	r1, #100	; 0x64
 801b384:	fb92 f3f1 	sdiv	r3, r2, r1
 801b388:	fb01 2313 	mls	r3, r1, r3, r2
 801b38c:	b963      	cbnz	r3, 801b3a8 <localtime_r+0x1e0>
 801b38e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b392:	fb92 f3f1 	sdiv	r3, r2, r1
 801b396:	fb01 2313 	mls	r3, r1, r3, r2
 801b39a:	fab3 f383 	clz	r3, r3
 801b39e:	095b      	lsrs	r3, r3, #5
 801b3a0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801b3a4:	61e3      	str	r3, [r4, #28]
 801b3a6:	e7de      	b.n	801b366 <localtime_r+0x19e>
 801b3a8:	2301      	movs	r3, #1
 801b3aa:	e7f9      	b.n	801b3a0 <localtime_r+0x1d8>
 801b3ac:	08029218 	.word	0x08029218
 801b3b0:	2000508c 	.word	0x2000508c

0801b3b4 <memcmp>:
 801b3b4:	b530      	push	{r4, r5, lr}
 801b3b6:	3901      	subs	r1, #1
 801b3b8:	2400      	movs	r4, #0
 801b3ba:	42a2      	cmp	r2, r4
 801b3bc:	d101      	bne.n	801b3c2 <memcmp+0xe>
 801b3be:	2000      	movs	r0, #0
 801b3c0:	e005      	b.n	801b3ce <memcmp+0x1a>
 801b3c2:	5d03      	ldrb	r3, [r0, r4]
 801b3c4:	3401      	adds	r4, #1
 801b3c6:	5d0d      	ldrb	r5, [r1, r4]
 801b3c8:	42ab      	cmp	r3, r5
 801b3ca:	d0f6      	beq.n	801b3ba <memcmp+0x6>
 801b3cc:	1b58      	subs	r0, r3, r5
 801b3ce:	bd30      	pop	{r4, r5, pc}

0801b3d0 <memcpy>:
 801b3d0:	440a      	add	r2, r1
 801b3d2:	4291      	cmp	r1, r2
 801b3d4:	f100 33ff 	add.w	r3, r0, #4294967295
 801b3d8:	d100      	bne.n	801b3dc <memcpy+0xc>
 801b3da:	4770      	bx	lr
 801b3dc:	b510      	push	{r4, lr}
 801b3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b3e6:	4291      	cmp	r1, r2
 801b3e8:	d1f9      	bne.n	801b3de <memcpy+0xe>
 801b3ea:	bd10      	pop	{r4, pc}

0801b3ec <memmove>:
 801b3ec:	4288      	cmp	r0, r1
 801b3ee:	b510      	push	{r4, lr}
 801b3f0:	eb01 0402 	add.w	r4, r1, r2
 801b3f4:	d902      	bls.n	801b3fc <memmove+0x10>
 801b3f6:	4284      	cmp	r4, r0
 801b3f8:	4623      	mov	r3, r4
 801b3fa:	d807      	bhi.n	801b40c <memmove+0x20>
 801b3fc:	1e43      	subs	r3, r0, #1
 801b3fe:	42a1      	cmp	r1, r4
 801b400:	d008      	beq.n	801b414 <memmove+0x28>
 801b402:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b406:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b40a:	e7f8      	b.n	801b3fe <memmove+0x12>
 801b40c:	4402      	add	r2, r0
 801b40e:	4601      	mov	r1, r0
 801b410:	428a      	cmp	r2, r1
 801b412:	d100      	bne.n	801b416 <memmove+0x2a>
 801b414:	bd10      	pop	{r4, pc}
 801b416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b41a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b41e:	e7f7      	b.n	801b410 <memmove+0x24>

0801b420 <memset>:
 801b420:	4402      	add	r2, r0
 801b422:	4603      	mov	r3, r0
 801b424:	4293      	cmp	r3, r2
 801b426:	d100      	bne.n	801b42a <memset+0xa>
 801b428:	4770      	bx	lr
 801b42a:	f803 1b01 	strb.w	r1, [r3], #1
 801b42e:	e7f9      	b.n	801b424 <memset+0x4>

0801b430 <validate_structure>:
 801b430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b432:	6801      	ldr	r1, [r0, #0]
 801b434:	293b      	cmp	r1, #59	; 0x3b
 801b436:	4604      	mov	r4, r0
 801b438:	d911      	bls.n	801b45e <validate_structure+0x2e>
 801b43a:	223c      	movs	r2, #60	; 0x3c
 801b43c:	4668      	mov	r0, sp
 801b43e:	f003 fab1 	bl	801e9a4 <div>
 801b442:	9a01      	ldr	r2, [sp, #4]
 801b444:	6863      	ldr	r3, [r4, #4]
 801b446:	9900      	ldr	r1, [sp, #0]
 801b448:	2a00      	cmp	r2, #0
 801b44a:	440b      	add	r3, r1
 801b44c:	6063      	str	r3, [r4, #4]
 801b44e:	bfbb      	ittet	lt
 801b450:	323c      	addlt	r2, #60	; 0x3c
 801b452:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b456:	6022      	strge	r2, [r4, #0]
 801b458:	6022      	strlt	r2, [r4, #0]
 801b45a:	bfb8      	it	lt
 801b45c:	6063      	strlt	r3, [r4, #4]
 801b45e:	6861      	ldr	r1, [r4, #4]
 801b460:	293b      	cmp	r1, #59	; 0x3b
 801b462:	d911      	bls.n	801b488 <validate_structure+0x58>
 801b464:	223c      	movs	r2, #60	; 0x3c
 801b466:	4668      	mov	r0, sp
 801b468:	f003 fa9c 	bl	801e9a4 <div>
 801b46c:	9a01      	ldr	r2, [sp, #4]
 801b46e:	68a3      	ldr	r3, [r4, #8]
 801b470:	9900      	ldr	r1, [sp, #0]
 801b472:	2a00      	cmp	r2, #0
 801b474:	440b      	add	r3, r1
 801b476:	60a3      	str	r3, [r4, #8]
 801b478:	bfbb      	ittet	lt
 801b47a:	323c      	addlt	r2, #60	; 0x3c
 801b47c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b480:	6062      	strge	r2, [r4, #4]
 801b482:	6062      	strlt	r2, [r4, #4]
 801b484:	bfb8      	it	lt
 801b486:	60a3      	strlt	r3, [r4, #8]
 801b488:	68a1      	ldr	r1, [r4, #8]
 801b48a:	2917      	cmp	r1, #23
 801b48c:	d911      	bls.n	801b4b2 <validate_structure+0x82>
 801b48e:	2218      	movs	r2, #24
 801b490:	4668      	mov	r0, sp
 801b492:	f003 fa87 	bl	801e9a4 <div>
 801b496:	9a01      	ldr	r2, [sp, #4]
 801b498:	68e3      	ldr	r3, [r4, #12]
 801b49a:	9900      	ldr	r1, [sp, #0]
 801b49c:	2a00      	cmp	r2, #0
 801b49e:	440b      	add	r3, r1
 801b4a0:	60e3      	str	r3, [r4, #12]
 801b4a2:	bfbb      	ittet	lt
 801b4a4:	3218      	addlt	r2, #24
 801b4a6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b4aa:	60a2      	strge	r2, [r4, #8]
 801b4ac:	60a2      	strlt	r2, [r4, #8]
 801b4ae:	bfb8      	it	lt
 801b4b0:	60e3      	strlt	r3, [r4, #12]
 801b4b2:	6921      	ldr	r1, [r4, #16]
 801b4b4:	290b      	cmp	r1, #11
 801b4b6:	d911      	bls.n	801b4dc <validate_structure+0xac>
 801b4b8:	220c      	movs	r2, #12
 801b4ba:	4668      	mov	r0, sp
 801b4bc:	f003 fa72 	bl	801e9a4 <div>
 801b4c0:	9a01      	ldr	r2, [sp, #4]
 801b4c2:	6963      	ldr	r3, [r4, #20]
 801b4c4:	9900      	ldr	r1, [sp, #0]
 801b4c6:	2a00      	cmp	r2, #0
 801b4c8:	440b      	add	r3, r1
 801b4ca:	6163      	str	r3, [r4, #20]
 801b4cc:	bfbb      	ittet	lt
 801b4ce:	320c      	addlt	r2, #12
 801b4d0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b4d4:	6122      	strge	r2, [r4, #16]
 801b4d6:	6122      	strlt	r2, [r4, #16]
 801b4d8:	bfb8      	it	lt
 801b4da:	6163      	strlt	r3, [r4, #20]
 801b4dc:	6963      	ldr	r3, [r4, #20]
 801b4de:	0799      	lsls	r1, r3, #30
 801b4e0:	d120      	bne.n	801b524 <validate_structure+0xf4>
 801b4e2:	2164      	movs	r1, #100	; 0x64
 801b4e4:	fb93 f2f1 	sdiv	r2, r3, r1
 801b4e8:	fb01 3212 	mls	r2, r1, r2, r3
 801b4ec:	b9e2      	cbnz	r2, 801b528 <validate_structure+0xf8>
 801b4ee:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801b4f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b4f6:	fb93 f2f1 	sdiv	r2, r3, r1
 801b4fa:	fb01 3312 	mls	r3, r1, r2, r3
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	bf14      	ite	ne
 801b502:	231c      	movne	r3, #28
 801b504:	231d      	moveq	r3, #29
 801b506:	68e2      	ldr	r2, [r4, #12]
 801b508:	2a00      	cmp	r2, #0
 801b50a:	dc0f      	bgt.n	801b52c <validate_structure+0xfc>
 801b50c:	4f33      	ldr	r7, [pc, #204]	; (801b5dc <validate_structure+0x1ac>)
 801b50e:	260b      	movs	r6, #11
 801b510:	2064      	movs	r0, #100	; 0x64
 801b512:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801b516:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801b51a:	f1bc 0f00 	cmp.w	ip, #0
 801b51e:	dd31      	ble.n	801b584 <validate_structure+0x154>
 801b520:	b003      	add	sp, #12
 801b522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b524:	231c      	movs	r3, #28
 801b526:	e7ee      	b.n	801b506 <validate_structure+0xd6>
 801b528:	231d      	movs	r3, #29
 801b52a:	e7ec      	b.n	801b506 <validate_structure+0xd6>
 801b52c:	4f2b      	ldr	r7, [pc, #172]	; (801b5dc <validate_structure+0x1ac>)
 801b52e:	f04f 0c00 	mov.w	ip, #0
 801b532:	2564      	movs	r5, #100	; 0x64
 801b534:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801b538:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801b53c:	2a01      	cmp	r2, #1
 801b53e:	bf14      	ite	ne
 801b540:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801b544:	4618      	moveq	r0, r3
 801b546:	4281      	cmp	r1, r0
 801b548:	ddea      	ble.n	801b520 <validate_structure+0xf0>
 801b54a:	3201      	adds	r2, #1
 801b54c:	1a09      	subs	r1, r1, r0
 801b54e:	2a0c      	cmp	r2, #12
 801b550:	60e1      	str	r1, [r4, #12]
 801b552:	6122      	str	r2, [r4, #16]
 801b554:	d1f0      	bne.n	801b538 <validate_structure+0x108>
 801b556:	6963      	ldr	r3, [r4, #20]
 801b558:	1c5a      	adds	r2, r3, #1
 801b55a:	0791      	lsls	r1, r2, #30
 801b55c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801b560:	d137      	bne.n	801b5d2 <validate_structure+0x1a2>
 801b562:	fb92 f1f5 	sdiv	r1, r2, r5
 801b566:	fb05 2211 	mls	r2, r5, r1, r2
 801b56a:	2a00      	cmp	r2, #0
 801b56c:	d133      	bne.n	801b5d6 <validate_structure+0x1a6>
 801b56e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801b572:	fb93 f2f6 	sdiv	r2, r3, r6
 801b576:	fb06 3312 	mls	r3, r6, r2, r3
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	bf14      	ite	ne
 801b57e:	231c      	movne	r3, #28
 801b580:	231d      	moveq	r3, #29
 801b582:	e7d9      	b.n	801b538 <validate_structure+0x108>
 801b584:	6921      	ldr	r1, [r4, #16]
 801b586:	3901      	subs	r1, #1
 801b588:	6121      	str	r1, [r4, #16]
 801b58a:	3101      	adds	r1, #1
 801b58c:	d114      	bne.n	801b5b8 <validate_structure+0x188>
 801b58e:	6963      	ldr	r3, [r4, #20]
 801b590:	1e59      	subs	r1, r3, #1
 801b592:	078a      	lsls	r2, r1, #30
 801b594:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801b598:	d117      	bne.n	801b5ca <validate_structure+0x19a>
 801b59a:	fb91 f2f0 	sdiv	r2, r1, r0
 801b59e:	fb00 1112 	mls	r1, r0, r2, r1
 801b5a2:	b9a1      	cbnz	r1, 801b5ce <validate_structure+0x19e>
 801b5a4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801b5a8:	fb93 f2f5 	sdiv	r2, r3, r5
 801b5ac:	fb05 3312 	mls	r3, r5, r2, r3
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	bf14      	ite	ne
 801b5b4:	231c      	movne	r3, #28
 801b5b6:	231d      	moveq	r3, #29
 801b5b8:	6922      	ldr	r2, [r4, #16]
 801b5ba:	2a01      	cmp	r2, #1
 801b5bc:	bf14      	ite	ne
 801b5be:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801b5c2:	461a      	moveq	r2, r3
 801b5c4:	4462      	add	r2, ip
 801b5c6:	60e2      	str	r2, [r4, #12]
 801b5c8:	e7a5      	b.n	801b516 <validate_structure+0xe6>
 801b5ca:	231c      	movs	r3, #28
 801b5cc:	e7f4      	b.n	801b5b8 <validate_structure+0x188>
 801b5ce:	231d      	movs	r3, #29
 801b5d0:	e7f2      	b.n	801b5b8 <validate_structure+0x188>
 801b5d2:	231c      	movs	r3, #28
 801b5d4:	e7b0      	b.n	801b538 <validate_structure+0x108>
 801b5d6:	231d      	movs	r3, #29
 801b5d8:	e7ae      	b.n	801b538 <validate_structure+0x108>
 801b5da:	bf00      	nop
 801b5dc:	080291b8 	.word	0x080291b8

0801b5e0 <mktime>:
 801b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5e4:	b08b      	sub	sp, #44	; 0x2c
 801b5e6:	4605      	mov	r5, r0
 801b5e8:	f004 fb04 	bl	801fbf4 <__gettzinfo>
 801b5ec:	4607      	mov	r7, r0
 801b5ee:	4628      	mov	r0, r5
 801b5f0:	f7ff ff1e 	bl	801b430 <validate_structure>
 801b5f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b5f8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801b5fc:	68a8      	ldr	r0, [r5, #8]
 801b5fe:	696e      	ldr	r6, [r5, #20]
 801b600:	fb0a 2303 	mla	r3, sl, r3, r2
 801b604:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801b608:	fb0a 3a00 	mla	sl, sl, r0, r3
 801b60c:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801b610:	4ac3      	ldr	r2, [pc, #780]	; (801b920 <mktime+0x340>)
 801b612:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b616:	3c01      	subs	r4, #1
 801b618:	2b01      	cmp	r3, #1
 801b61a:	4414      	add	r4, r2
 801b61c:	dd11      	ble.n	801b642 <mktime+0x62>
 801b61e:	07b1      	lsls	r1, r6, #30
 801b620:	d10f      	bne.n	801b642 <mktime+0x62>
 801b622:	2264      	movs	r2, #100	; 0x64
 801b624:	fb96 f3f2 	sdiv	r3, r6, r2
 801b628:	fb02 6313 	mls	r3, r2, r3, r6
 801b62c:	b943      	cbnz	r3, 801b640 <mktime+0x60>
 801b62e:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b632:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b636:	fb91 f3f2 	sdiv	r3, r1, r2
 801b63a:	fb02 1313 	mls	r3, r2, r3, r1
 801b63e:	b903      	cbnz	r3, 801b642 <mktime+0x62>
 801b640:	3401      	adds	r4, #1
 801b642:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801b646:	3310      	adds	r3, #16
 801b648:	f644 6220 	movw	r2, #20000	; 0x4e20
 801b64c:	4293      	cmp	r3, r2
 801b64e:	61ec      	str	r4, [r5, #28]
 801b650:	f200 8161 	bhi.w	801b916 <mktime+0x336>
 801b654:	2e46      	cmp	r6, #70	; 0x46
 801b656:	dd77      	ble.n	801b748 <mktime+0x168>
 801b658:	2346      	movs	r3, #70	; 0x46
 801b65a:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b65e:	2164      	movs	r1, #100	; 0x64
 801b660:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b664:	079a      	lsls	r2, r3, #30
 801b666:	d169      	bne.n	801b73c <mktime+0x15c>
 801b668:	fb93 f2f1 	sdiv	r2, r3, r1
 801b66c:	fb01 3212 	mls	r2, r1, r2, r3
 801b670:	2a00      	cmp	r2, #0
 801b672:	d166      	bne.n	801b742 <mktime+0x162>
 801b674:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b678:	fb9c f2f0 	sdiv	r2, ip, r0
 801b67c:	fb00 c212 	mls	r2, r0, r2, ip
 801b680:	2a00      	cmp	r2, #0
 801b682:	bf14      	ite	ne
 801b684:	4672      	movne	r2, lr
 801b686:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b68a:	3301      	adds	r3, #1
 801b68c:	429e      	cmp	r6, r3
 801b68e:	4414      	add	r4, r2
 801b690:	d1e8      	bne.n	801b664 <mktime+0x84>
 801b692:	4ba4      	ldr	r3, [pc, #656]	; (801b924 <mktime+0x344>)
 801b694:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801b698:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801b69c:	f001 fd14 	bl	801d0c8 <__tz_lock>
 801b6a0:	f001 fd1e 	bl	801d0e0 <_tzset_unlocked>
 801b6a4:	4ba0      	ldr	r3, [pc, #640]	; (801b928 <mktime+0x348>)
 801b6a6:	f8d3 9000 	ldr.w	r9, [r3]
 801b6aa:	f1b9 0f00 	cmp.w	r9, #0
 801b6ae:	d03f      	beq.n	801b730 <mktime+0x150>
 801b6b0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801b6b4:	6968      	ldr	r0, [r5, #20]
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	f1b9 0f01 	cmp.w	r9, #1
 801b6bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801b6c0:	46c8      	mov	r8, r9
 801b6c2:	bfa8      	it	ge
 801b6c4:	f04f 0801 	movge.w	r8, #1
 801b6c8:	4283      	cmp	r3, r0
 801b6ca:	d17f      	bne.n	801b7cc <mktime+0x1ec>
 801b6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b6ce:	4619      	mov	r1, r3
 801b6d0:	17da      	asrs	r2, r3, #31
 801b6d2:	e9cd 1200 	strd	r1, r2, [sp]
 801b6d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801b6da:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b6e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b6e4:	1a80      	subs	r0, r0, r2
 801b6e6:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801b6ea:	4582      	cmp	sl, r0
 801b6ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b6f0:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b6f4:	da71      	bge.n	801b7da <mktime+0x1fa>
 801b6f6:	9800      	ldr	r0, [sp, #0]
 801b6f8:	6a39      	ldr	r1, [r7, #32]
 801b6fa:	1a09      	subs	r1, r1, r0
 801b6fc:	9104      	str	r1, [sp, #16]
 801b6fe:	9801      	ldr	r0, [sp, #4]
 801b700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b702:	eb61 0100 	sbc.w	r1, r1, r0
 801b706:	9105      	str	r1, [sp, #20]
 801b708:	6839      	ldr	r1, [r7, #0]
 801b70a:	2900      	cmp	r1, #0
 801b70c:	d075      	beq.n	801b7fa <mktime+0x21a>
 801b70e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b712:	4582      	cmp	sl, r0
 801b714:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b718:	db05      	blt.n	801b726 <mktime+0x146>
 801b71a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b71e:	4582      	cmp	sl, r0
 801b720:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b724:	db6f      	blt.n	801b806 <mktime+0x226>
 801b726:	f1b9 0f00 	cmp.w	r9, #0
 801b72a:	f04f 0900 	mov.w	r9, #0
 801b72e:	da6f      	bge.n	801b810 <mktime+0x230>
 801b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b732:	eb1a 0a03 	adds.w	sl, sl, r3
 801b736:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b73a:	e0ae      	b.n	801b89a <mktime+0x2ba>
 801b73c:	f240 126d 	movw	r2, #365	; 0x16d
 801b740:	e7a3      	b.n	801b68a <mktime+0xaa>
 801b742:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b746:	e7a0      	b.n	801b68a <mktime+0xaa>
 801b748:	d0a3      	beq.n	801b692 <mktime+0xb2>
 801b74a:	2345      	movs	r3, #69	; 0x45
 801b74c:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b750:	2164      	movs	r1, #100	; 0x64
 801b752:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b756:	e012      	b.n	801b77e <mktime+0x19e>
 801b758:	bb62      	cbnz	r2, 801b7b4 <mktime+0x1d4>
 801b75a:	fb93 f2f1 	sdiv	r2, r3, r1
 801b75e:	fb01 3212 	mls	r2, r1, r2, r3
 801b762:	bb52      	cbnz	r2, 801b7ba <mktime+0x1da>
 801b764:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b768:	fb9c f2f0 	sdiv	r2, ip, r0
 801b76c:	fb00 c212 	mls	r2, r0, r2, ip
 801b770:	2a00      	cmp	r2, #0
 801b772:	bf14      	ite	ne
 801b774:	4672      	movne	r2, lr
 801b776:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b77a:	1aa4      	subs	r4, r4, r2
 801b77c:	3b01      	subs	r3, #1
 801b77e:	429e      	cmp	r6, r3
 801b780:	f003 0203 	and.w	r2, r3, #3
 801b784:	dbe8      	blt.n	801b758 <mktime+0x178>
 801b786:	b9da      	cbnz	r2, 801b7c0 <mktime+0x1e0>
 801b788:	2264      	movs	r2, #100	; 0x64
 801b78a:	fb96 f3f2 	sdiv	r3, r6, r2
 801b78e:	fb02 6313 	mls	r3, r2, r3, r6
 801b792:	b9c3      	cbnz	r3, 801b7c6 <mktime+0x1e6>
 801b794:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b798:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b79c:	fb91 f3f2 	sdiv	r3, r1, r2
 801b7a0:	fb02 1313 	mls	r3, r2, r3, r1
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	f240 136d 	movw	r3, #365	; 0x16d
 801b7aa:	bf08      	it	eq
 801b7ac:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801b7b0:	1ae4      	subs	r4, r4, r3
 801b7b2:	e76e      	b.n	801b692 <mktime+0xb2>
 801b7b4:	f240 126d 	movw	r2, #365	; 0x16d
 801b7b8:	e7df      	b.n	801b77a <mktime+0x19a>
 801b7ba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b7be:	e7dc      	b.n	801b77a <mktime+0x19a>
 801b7c0:	f240 136d 	movw	r3, #365	; 0x16d
 801b7c4:	e7f4      	b.n	801b7b0 <mktime+0x1d0>
 801b7c6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801b7ca:	e7f1      	b.n	801b7b0 <mktime+0x1d0>
 801b7cc:	f001 fbd4 	bl	801cf78 <__tzcalc_limits>
 801b7d0:	2800      	cmp	r0, #0
 801b7d2:	f47f af7b 	bne.w	801b6cc <mktime+0xec>
 801b7d6:	46c1      	mov	r9, r8
 801b7d8:	e054      	b.n	801b884 <mktime+0x2a4>
 801b7da:	9800      	ldr	r0, [sp, #0]
 801b7dc:	9902      	ldr	r1, [sp, #8]
 801b7de:	1a09      	subs	r1, r1, r0
 801b7e0:	9108      	str	r1, [sp, #32]
 801b7e2:	9801      	ldr	r0, [sp, #4]
 801b7e4:	9903      	ldr	r1, [sp, #12]
 801b7e6:	eb61 0100 	sbc.w	r1, r1, r0
 801b7ea:	9109      	str	r1, [sp, #36]	; 0x24
 801b7ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b7f0:	4582      	cmp	sl, r0
 801b7f2:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b7f6:	dbee      	blt.n	801b7d6 <mktime+0x1f6>
 801b7f8:	e77d      	b.n	801b6f6 <mktime+0x116>
 801b7fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b7fe:	4582      	cmp	sl, r0
 801b800:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b804:	db89      	blt.n	801b71a <mktime+0x13a>
 801b806:	f1b9 0f00 	cmp.w	r9, #0
 801b80a:	db3f      	blt.n	801b88c <mktime+0x2ac>
 801b80c:	f04f 0901 	mov.w	r9, #1
 801b810:	ea88 0809 	eor.w	r8, r8, r9
 801b814:	f1b8 0f01 	cmp.w	r8, #1
 801b818:	d134      	bne.n	801b884 <mktime+0x2a4>
 801b81a:	f1b9 0f00 	cmp.w	r9, #0
 801b81e:	d04f      	beq.n	801b8c0 <mktime+0x2e0>
 801b820:	1ad3      	subs	r3, r2, r3
 801b822:	682a      	ldr	r2, [r5, #0]
 801b824:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801b828:	441a      	add	r2, r3
 801b82a:	eb1a 0a03 	adds.w	sl, sl, r3
 801b82e:	602a      	str	r2, [r5, #0]
 801b830:	4628      	mov	r0, r5
 801b832:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b836:	f7ff fdfb 	bl	801b430 <validate_structure>
 801b83a:	68ea      	ldr	r2, [r5, #12]
 801b83c:	ebb2 0208 	subs.w	r2, r2, r8
 801b840:	d020      	beq.n	801b884 <mktime+0x2a4>
 801b842:	2a01      	cmp	r2, #1
 801b844:	dc3e      	bgt.n	801b8c4 <mktime+0x2e4>
 801b846:	1c90      	adds	r0, r2, #2
 801b848:	bfd8      	it	le
 801b84a:	2201      	movle	r2, #1
 801b84c:	69eb      	ldr	r3, [r5, #28]
 801b84e:	18d3      	adds	r3, r2, r3
 801b850:	4414      	add	r4, r2
 801b852:	d540      	bpl.n	801b8d6 <mktime+0x2f6>
 801b854:	1e72      	subs	r2, r6, #1
 801b856:	0791      	lsls	r1, r2, #30
 801b858:	d137      	bne.n	801b8ca <mktime+0x2ea>
 801b85a:	2164      	movs	r1, #100	; 0x64
 801b85c:	fb92 f3f1 	sdiv	r3, r2, r1
 801b860:	fb01 2313 	mls	r3, r1, r3, r2
 801b864:	bba3      	cbnz	r3, 801b8d0 <mktime+0x2f0>
 801b866:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801b86a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b86e:	fb96 f3f2 	sdiv	r3, r6, r2
 801b872:	fb02 6613 	mls	r6, r2, r3, r6
 801b876:	2e00      	cmp	r6, #0
 801b878:	f240 136d 	movw	r3, #365	; 0x16d
 801b87c:	bf18      	it	ne
 801b87e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801b882:	61eb      	str	r3, [r5, #28]
 801b884:	f1b9 0f01 	cmp.w	r9, #1
 801b888:	f47f af52 	bne.w	801b730 <mktime+0x150>
 801b88c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b88e:	eb1a 0a03 	adds.w	sl, sl, r3
 801b892:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b896:	f04f 0901 	mov.w	r9, #1
 801b89a:	f001 fc1b 	bl	801d0d4 <__tz_unlock>
 801b89e:	3404      	adds	r4, #4
 801b8a0:	2307      	movs	r3, #7
 801b8a2:	fb94 f3f3 	sdiv	r3, r4, r3
 801b8a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801b8aa:	1ae4      	subs	r4, r4, r3
 801b8ac:	bf48      	it	mi
 801b8ae:	3407      	addmi	r4, #7
 801b8b0:	f8c5 9020 	str.w	r9, [r5, #32]
 801b8b4:	61ac      	str	r4, [r5, #24]
 801b8b6:	4650      	mov	r0, sl
 801b8b8:	4659      	mov	r1, fp
 801b8ba:	b00b      	add	sp, #44	; 0x2c
 801b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8c0:	1a9b      	subs	r3, r3, r2
 801b8c2:	e7ae      	b.n	801b822 <mktime+0x242>
 801b8c4:	f04f 32ff 	mov.w	r2, #4294967295
 801b8c8:	e7c0      	b.n	801b84c <mktime+0x26c>
 801b8ca:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801b8ce:	e7d8      	b.n	801b882 <mktime+0x2a2>
 801b8d0:	f240 136d 	movw	r3, #365	; 0x16d
 801b8d4:	e7d5      	b.n	801b882 <mktime+0x2a2>
 801b8d6:	07b2      	lsls	r2, r6, #30
 801b8d8:	d117      	bne.n	801b90a <mktime+0x32a>
 801b8da:	2164      	movs	r1, #100	; 0x64
 801b8dc:	fb96 f2f1 	sdiv	r2, r6, r1
 801b8e0:	fb01 6212 	mls	r2, r1, r2, r6
 801b8e4:	b9a2      	cbnz	r2, 801b910 <mktime+0x330>
 801b8e6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801b8ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b8ee:	fb96 f2f1 	sdiv	r2, r6, r1
 801b8f2:	fb01 6612 	mls	r6, r1, r2, r6
 801b8f6:	2e00      	cmp	r6, #0
 801b8f8:	f240 126d 	movw	r2, #365	; 0x16d
 801b8fc:	bf08      	it	eq
 801b8fe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b902:	4293      	cmp	r3, r2
 801b904:	bfa8      	it	ge
 801b906:	1a9b      	subge	r3, r3, r2
 801b908:	e7bb      	b.n	801b882 <mktime+0x2a2>
 801b90a:	f240 126d 	movw	r2, #365	; 0x16d
 801b90e:	e7f8      	b.n	801b902 <mktime+0x322>
 801b910:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b914:	e7f5      	b.n	801b902 <mktime+0x322>
 801b916:	f04f 3aff 	mov.w	sl, #4294967295
 801b91a:	f04f 3bff 	mov.w	fp, #4294967295
 801b91e:	e7ca      	b.n	801b8b6 <mktime+0x2d6>
 801b920:	080291e8 	.word	0x080291e8
 801b924:	00015180 	.word	0x00015180
 801b928:	2000508c 	.word	0x2000508c

0801b92c <printf>:
 801b92c:	b40f      	push	{r0, r1, r2, r3}
 801b92e:	b507      	push	{r0, r1, r2, lr}
 801b930:	4906      	ldr	r1, [pc, #24]	; (801b94c <printf+0x20>)
 801b932:	ab04      	add	r3, sp, #16
 801b934:	6808      	ldr	r0, [r1, #0]
 801b936:	f853 2b04 	ldr.w	r2, [r3], #4
 801b93a:	6881      	ldr	r1, [r0, #8]
 801b93c:	9301      	str	r3, [sp, #4]
 801b93e:	f001 fd53 	bl	801d3e8 <_vfprintf_r>
 801b942:	b003      	add	sp, #12
 801b944:	f85d eb04 	ldr.w	lr, [sp], #4
 801b948:	b004      	add	sp, #16
 801b94a:	4770      	bx	lr
 801b94c:	20000038 	.word	0x20000038

0801b950 <rand>:
 801b950:	4b0b      	ldr	r3, [pc, #44]	; (801b980 <rand+0x30>)
 801b952:	480c      	ldr	r0, [pc, #48]	; (801b984 <rand+0x34>)
 801b954:	6819      	ldr	r1, [r3, #0]
 801b956:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 801b95a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 801b95e:	b510      	push	{r4, lr}
 801b960:	4c09      	ldr	r4, [pc, #36]	; (801b988 <rand+0x38>)
 801b962:	4350      	muls	r0, r2
 801b964:	fb04 0003 	mla	r0, r4, r3, r0
 801b968:	fba2 3404 	umull	r3, r4, r2, r4
 801b96c:	1c5a      	adds	r2, r3, #1
 801b96e:	4404      	add	r4, r0
 801b970:	f144 0000 	adc.w	r0, r4, #0
 801b974:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 801b978:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b97c:	bd10      	pop	{r4, pc}
 801b97e:	bf00      	nop
 801b980:	20000038 	.word	0x20000038
 801b984:	5851f42d 	.word	0x5851f42d
 801b988:	4c957f2d 	.word	0x4c957f2d

0801b98c <snprintf>:
 801b98c:	b40c      	push	{r2, r3}
 801b98e:	b530      	push	{r4, r5, lr}
 801b990:	4b17      	ldr	r3, [pc, #92]	; (801b9f0 <snprintf+0x64>)
 801b992:	1e0c      	subs	r4, r1, #0
 801b994:	681d      	ldr	r5, [r3, #0]
 801b996:	b09d      	sub	sp, #116	; 0x74
 801b998:	da08      	bge.n	801b9ac <snprintf+0x20>
 801b99a:	238b      	movs	r3, #139	; 0x8b
 801b99c:	602b      	str	r3, [r5, #0]
 801b99e:	f04f 30ff 	mov.w	r0, #4294967295
 801b9a2:	b01d      	add	sp, #116	; 0x74
 801b9a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b9a8:	b002      	add	sp, #8
 801b9aa:	4770      	bx	lr
 801b9ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b9b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b9b4:	bf14      	ite	ne
 801b9b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b9ba:	4623      	moveq	r3, r4
 801b9bc:	9304      	str	r3, [sp, #16]
 801b9be:	9307      	str	r3, [sp, #28]
 801b9c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b9c4:	9002      	str	r0, [sp, #8]
 801b9c6:	9006      	str	r0, [sp, #24]
 801b9c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b9cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b9ce:	ab21      	add	r3, sp, #132	; 0x84
 801b9d0:	a902      	add	r1, sp, #8
 801b9d2:	4628      	mov	r0, r5
 801b9d4:	9301      	str	r3, [sp, #4]
 801b9d6:	f000 f8ef 	bl	801bbb8 <_svfprintf_r>
 801b9da:	1c43      	adds	r3, r0, #1
 801b9dc:	bfbc      	itt	lt
 801b9de:	238b      	movlt	r3, #139	; 0x8b
 801b9e0:	602b      	strlt	r3, [r5, #0]
 801b9e2:	2c00      	cmp	r4, #0
 801b9e4:	d0dd      	beq.n	801b9a2 <snprintf+0x16>
 801b9e6:	9b02      	ldr	r3, [sp, #8]
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	701a      	strb	r2, [r3, #0]
 801b9ec:	e7d9      	b.n	801b9a2 <snprintf+0x16>
 801b9ee:	bf00      	nop
 801b9f0:	20000038 	.word	0x20000038

0801b9f4 <sprintf>:
 801b9f4:	b40e      	push	{r1, r2, r3}
 801b9f6:	b500      	push	{lr}
 801b9f8:	b09c      	sub	sp, #112	; 0x70
 801b9fa:	ab1d      	add	r3, sp, #116	; 0x74
 801b9fc:	9002      	str	r0, [sp, #8]
 801b9fe:	9006      	str	r0, [sp, #24]
 801ba00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ba04:	4809      	ldr	r0, [pc, #36]	; (801ba2c <sprintf+0x38>)
 801ba06:	9107      	str	r1, [sp, #28]
 801ba08:	9104      	str	r1, [sp, #16]
 801ba0a:	4909      	ldr	r1, [pc, #36]	; (801ba30 <sprintf+0x3c>)
 801ba0c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba10:	9105      	str	r1, [sp, #20]
 801ba12:	6800      	ldr	r0, [r0, #0]
 801ba14:	9301      	str	r3, [sp, #4]
 801ba16:	a902      	add	r1, sp, #8
 801ba18:	f000 f8ce 	bl	801bbb8 <_svfprintf_r>
 801ba1c:	9b02      	ldr	r3, [sp, #8]
 801ba1e:	2200      	movs	r2, #0
 801ba20:	701a      	strb	r2, [r3, #0]
 801ba22:	b01c      	add	sp, #112	; 0x70
 801ba24:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba28:	b003      	add	sp, #12
 801ba2a:	4770      	bx	lr
 801ba2c:	20000038 	.word	0x20000038
 801ba30:	ffff0208 	.word	0xffff0208

0801ba34 <strchr>:
 801ba34:	b2c9      	uxtb	r1, r1
 801ba36:	4603      	mov	r3, r0
 801ba38:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba3c:	b11a      	cbz	r2, 801ba46 <strchr+0x12>
 801ba3e:	428a      	cmp	r2, r1
 801ba40:	d1f9      	bne.n	801ba36 <strchr+0x2>
 801ba42:	4618      	mov	r0, r3
 801ba44:	4770      	bx	lr
 801ba46:	2900      	cmp	r1, #0
 801ba48:	bf18      	it	ne
 801ba4a:	2300      	movne	r3, #0
 801ba4c:	e7f9      	b.n	801ba42 <strchr+0xe>

0801ba4e <strncmp>:
 801ba4e:	b510      	push	{r4, lr}
 801ba50:	b16a      	cbz	r2, 801ba6e <strncmp+0x20>
 801ba52:	3901      	subs	r1, #1
 801ba54:	1884      	adds	r4, r0, r2
 801ba56:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ba5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ba5e:	4293      	cmp	r3, r2
 801ba60:	d103      	bne.n	801ba6a <strncmp+0x1c>
 801ba62:	42a0      	cmp	r0, r4
 801ba64:	d001      	beq.n	801ba6a <strncmp+0x1c>
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d1f5      	bne.n	801ba56 <strncmp+0x8>
 801ba6a:	1a98      	subs	r0, r3, r2
 801ba6c:	bd10      	pop	{r4, pc}
 801ba6e:	4610      	mov	r0, r2
 801ba70:	e7fc      	b.n	801ba6c <strncmp+0x1e>

0801ba72 <strncpy>:
 801ba72:	b510      	push	{r4, lr}
 801ba74:	3901      	subs	r1, #1
 801ba76:	4603      	mov	r3, r0
 801ba78:	b132      	cbz	r2, 801ba88 <strncpy+0x16>
 801ba7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ba7e:	f803 4b01 	strb.w	r4, [r3], #1
 801ba82:	3a01      	subs	r2, #1
 801ba84:	2c00      	cmp	r4, #0
 801ba86:	d1f7      	bne.n	801ba78 <strncpy+0x6>
 801ba88:	441a      	add	r2, r3
 801ba8a:	2100      	movs	r1, #0
 801ba8c:	4293      	cmp	r3, r2
 801ba8e:	d100      	bne.n	801ba92 <strncpy+0x20>
 801ba90:	bd10      	pop	{r4, pc}
 801ba92:	f803 1b01 	strb.w	r1, [r3], #1
 801ba96:	e7f9      	b.n	801ba8c <strncpy+0x1a>

0801ba98 <_strtol_l.isra.0>:
 801ba98:	2b01      	cmp	r3, #1
 801ba9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba9e:	d001      	beq.n	801baa4 <_strtol_l.isra.0+0xc>
 801baa0:	2b24      	cmp	r3, #36	; 0x24
 801baa2:	d906      	bls.n	801bab2 <_strtol_l.isra.0+0x1a>
 801baa4:	f003 fdf4 	bl	801f690 <__errno>
 801baa8:	2316      	movs	r3, #22
 801baaa:	6003      	str	r3, [r0, #0]
 801baac:	2000      	movs	r0, #0
 801baae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bab2:	4f3a      	ldr	r7, [pc, #232]	; (801bb9c <_strtol_l.isra.0+0x104>)
 801bab4:	468e      	mov	lr, r1
 801bab6:	4676      	mov	r6, lr
 801bab8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801babc:	5de5      	ldrb	r5, [r4, r7]
 801babe:	f015 0508 	ands.w	r5, r5, #8
 801bac2:	d1f8      	bne.n	801bab6 <_strtol_l.isra.0+0x1e>
 801bac4:	2c2d      	cmp	r4, #45	; 0x2d
 801bac6:	d134      	bne.n	801bb32 <_strtol_l.isra.0+0x9a>
 801bac8:	f89e 4000 	ldrb.w	r4, [lr]
 801bacc:	f04f 0801 	mov.w	r8, #1
 801bad0:	f106 0e02 	add.w	lr, r6, #2
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d05c      	beq.n	801bb92 <_strtol_l.isra.0+0xfa>
 801bad8:	2b10      	cmp	r3, #16
 801bada:	d10c      	bne.n	801baf6 <_strtol_l.isra.0+0x5e>
 801badc:	2c30      	cmp	r4, #48	; 0x30
 801bade:	d10a      	bne.n	801baf6 <_strtol_l.isra.0+0x5e>
 801bae0:	f89e 4000 	ldrb.w	r4, [lr]
 801bae4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801bae8:	2c58      	cmp	r4, #88	; 0x58
 801baea:	d14d      	bne.n	801bb88 <_strtol_l.isra.0+0xf0>
 801baec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801baf0:	2310      	movs	r3, #16
 801baf2:	f10e 0e02 	add.w	lr, lr, #2
 801baf6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801bafa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bafe:	2600      	movs	r6, #0
 801bb00:	fbbc f9f3 	udiv	r9, ip, r3
 801bb04:	4635      	mov	r5, r6
 801bb06:	fb03 ca19 	mls	sl, r3, r9, ip
 801bb0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801bb0e:	2f09      	cmp	r7, #9
 801bb10:	d818      	bhi.n	801bb44 <_strtol_l.isra.0+0xac>
 801bb12:	463c      	mov	r4, r7
 801bb14:	42a3      	cmp	r3, r4
 801bb16:	dd24      	ble.n	801bb62 <_strtol_l.isra.0+0xca>
 801bb18:	2e00      	cmp	r6, #0
 801bb1a:	db1f      	blt.n	801bb5c <_strtol_l.isra.0+0xc4>
 801bb1c:	45a9      	cmp	r9, r5
 801bb1e:	d31d      	bcc.n	801bb5c <_strtol_l.isra.0+0xc4>
 801bb20:	d101      	bne.n	801bb26 <_strtol_l.isra.0+0x8e>
 801bb22:	45a2      	cmp	sl, r4
 801bb24:	db1a      	blt.n	801bb5c <_strtol_l.isra.0+0xc4>
 801bb26:	fb05 4503 	mla	r5, r5, r3, r4
 801bb2a:	2601      	movs	r6, #1
 801bb2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bb30:	e7eb      	b.n	801bb0a <_strtol_l.isra.0+0x72>
 801bb32:	2c2b      	cmp	r4, #43	; 0x2b
 801bb34:	bf08      	it	eq
 801bb36:	f89e 4000 	ldrbeq.w	r4, [lr]
 801bb3a:	46a8      	mov	r8, r5
 801bb3c:	bf08      	it	eq
 801bb3e:	f106 0e02 	addeq.w	lr, r6, #2
 801bb42:	e7c7      	b.n	801bad4 <_strtol_l.isra.0+0x3c>
 801bb44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801bb48:	2f19      	cmp	r7, #25
 801bb4a:	d801      	bhi.n	801bb50 <_strtol_l.isra.0+0xb8>
 801bb4c:	3c37      	subs	r4, #55	; 0x37
 801bb4e:	e7e1      	b.n	801bb14 <_strtol_l.isra.0+0x7c>
 801bb50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801bb54:	2f19      	cmp	r7, #25
 801bb56:	d804      	bhi.n	801bb62 <_strtol_l.isra.0+0xca>
 801bb58:	3c57      	subs	r4, #87	; 0x57
 801bb5a:	e7db      	b.n	801bb14 <_strtol_l.isra.0+0x7c>
 801bb5c:	f04f 36ff 	mov.w	r6, #4294967295
 801bb60:	e7e4      	b.n	801bb2c <_strtol_l.isra.0+0x94>
 801bb62:	2e00      	cmp	r6, #0
 801bb64:	da05      	bge.n	801bb72 <_strtol_l.isra.0+0xda>
 801bb66:	2322      	movs	r3, #34	; 0x22
 801bb68:	6003      	str	r3, [r0, #0]
 801bb6a:	4665      	mov	r5, ip
 801bb6c:	b942      	cbnz	r2, 801bb80 <_strtol_l.isra.0+0xe8>
 801bb6e:	4628      	mov	r0, r5
 801bb70:	e79d      	b.n	801baae <_strtol_l.isra.0+0x16>
 801bb72:	f1b8 0f00 	cmp.w	r8, #0
 801bb76:	d000      	beq.n	801bb7a <_strtol_l.isra.0+0xe2>
 801bb78:	426d      	negs	r5, r5
 801bb7a:	2a00      	cmp	r2, #0
 801bb7c:	d0f7      	beq.n	801bb6e <_strtol_l.isra.0+0xd6>
 801bb7e:	b10e      	cbz	r6, 801bb84 <_strtol_l.isra.0+0xec>
 801bb80:	f10e 31ff 	add.w	r1, lr, #4294967295
 801bb84:	6011      	str	r1, [r2, #0]
 801bb86:	e7f2      	b.n	801bb6e <_strtol_l.isra.0+0xd6>
 801bb88:	2430      	movs	r4, #48	; 0x30
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d1b3      	bne.n	801baf6 <_strtol_l.isra.0+0x5e>
 801bb8e:	2308      	movs	r3, #8
 801bb90:	e7b1      	b.n	801baf6 <_strtol_l.isra.0+0x5e>
 801bb92:	2c30      	cmp	r4, #48	; 0x30
 801bb94:	d0a4      	beq.n	801bae0 <_strtol_l.isra.0+0x48>
 801bb96:	230a      	movs	r3, #10
 801bb98:	e7ad      	b.n	801baf6 <_strtol_l.isra.0+0x5e>
 801bb9a:	bf00      	nop
 801bb9c:	080290b1 	.word	0x080290b1

0801bba0 <_strtol_r>:
 801bba0:	f7ff bf7a 	b.w	801ba98 <_strtol_l.isra.0>

0801bba4 <strtol>:
 801bba4:	4613      	mov	r3, r2
 801bba6:	460a      	mov	r2, r1
 801bba8:	4601      	mov	r1, r0
 801bbaa:	4802      	ldr	r0, [pc, #8]	; (801bbb4 <strtol+0x10>)
 801bbac:	6800      	ldr	r0, [r0, #0]
 801bbae:	f7ff bf73 	b.w	801ba98 <_strtol_l.isra.0>
 801bbb2:	bf00      	nop
 801bbb4:	20000038 	.word	0x20000038

0801bbb8 <_svfprintf_r>:
 801bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbbc:	ed2d 8b04 	vpush	{d8-d9}
 801bbc0:	b0cf      	sub	sp, #316	; 0x13c
 801bbc2:	4689      	mov	r9, r1
 801bbc4:	4693      	mov	fp, r2
 801bbc6:	461e      	mov	r6, r3
 801bbc8:	4682      	mov	sl, r0
 801bbca:	f004 f8c7 	bl	801fd5c <_localeconv_r>
 801bbce:	6803      	ldr	r3, [r0, #0]
 801bbd0:	9313      	str	r3, [sp, #76]	; 0x4c
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f7e4 fb26 	bl	8000224 <strlen>
 801bbd8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bbdc:	900e      	str	r0, [sp, #56]	; 0x38
 801bbde:	0618      	lsls	r0, r3, #24
 801bbe0:	d51a      	bpl.n	801bc18 <_svfprintf_r+0x60>
 801bbe2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bbe6:	b9bb      	cbnz	r3, 801bc18 <_svfprintf_r+0x60>
 801bbe8:	2140      	movs	r1, #64	; 0x40
 801bbea:	4650      	mov	r0, sl
 801bbec:	f004 f93c 	bl	801fe68 <_malloc_r>
 801bbf0:	f8c9 0000 	str.w	r0, [r9]
 801bbf4:	f8c9 0010 	str.w	r0, [r9, #16]
 801bbf8:	b958      	cbnz	r0, 801bc12 <_svfprintf_r+0x5a>
 801bbfa:	230c      	movs	r3, #12
 801bbfc:	f8ca 3000 	str.w	r3, [sl]
 801bc00:	f04f 33ff 	mov.w	r3, #4294967295
 801bc04:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bc08:	b04f      	add	sp, #316	; 0x13c
 801bc0a:	ecbd 8b04 	vpop	{d8-d9}
 801bc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc12:	2340      	movs	r3, #64	; 0x40
 801bc14:	f8c9 3014 	str.w	r3, [r9, #20]
 801bc18:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801be68 <_svfprintf_r+0x2b0>
 801bc1c:	2500      	movs	r5, #0
 801bc1e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801bc22:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801bc26:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801bc2a:	ac25      	add	r4, sp, #148	; 0x94
 801bc2c:	9422      	str	r4, [sp, #136]	; 0x88
 801bc2e:	9505      	str	r5, [sp, #20]
 801bc30:	950a      	str	r5, [sp, #40]	; 0x28
 801bc32:	9512      	str	r5, [sp, #72]	; 0x48
 801bc34:	9514      	str	r5, [sp, #80]	; 0x50
 801bc36:	950f      	str	r5, [sp, #60]	; 0x3c
 801bc38:	465b      	mov	r3, fp
 801bc3a:	461d      	mov	r5, r3
 801bc3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc40:	b10a      	cbz	r2, 801bc46 <_svfprintf_r+0x8e>
 801bc42:	2a25      	cmp	r2, #37	; 0x25
 801bc44:	d1f9      	bne.n	801bc3a <_svfprintf_r+0x82>
 801bc46:	ebb5 070b 	subs.w	r7, r5, fp
 801bc4a:	d00d      	beq.n	801bc68 <_svfprintf_r+0xb0>
 801bc4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc4e:	443b      	add	r3, r7
 801bc50:	9324      	str	r3, [sp, #144]	; 0x90
 801bc52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bc54:	3301      	adds	r3, #1
 801bc56:	2b07      	cmp	r3, #7
 801bc58:	e9c4 b700 	strd	fp, r7, [r4]
 801bc5c:	9323      	str	r3, [sp, #140]	; 0x8c
 801bc5e:	dc79      	bgt.n	801bd54 <_svfprintf_r+0x19c>
 801bc60:	3408      	adds	r4, #8
 801bc62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc64:	443b      	add	r3, r7
 801bc66:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc68:	782b      	ldrb	r3, [r5, #0]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	f001 8140 	beq.w	801cef0 <_svfprintf_r+0x1338>
 801bc70:	2300      	movs	r3, #0
 801bc72:	f04f 32ff 	mov.w	r2, #4294967295
 801bc76:	3501      	adds	r5, #1
 801bc78:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bc7c:	9204      	str	r2, [sp, #16]
 801bc7e:	9310      	str	r3, [sp, #64]	; 0x40
 801bc80:	4698      	mov	r8, r3
 801bc82:	270a      	movs	r7, #10
 801bc84:	212b      	movs	r1, #43	; 0x2b
 801bc86:	462a      	mov	r2, r5
 801bc88:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bc8c:	9307      	str	r3, [sp, #28]
 801bc8e:	920b      	str	r2, [sp, #44]	; 0x2c
 801bc90:	9b07      	ldr	r3, [sp, #28]
 801bc92:	3b20      	subs	r3, #32
 801bc94:	2b5a      	cmp	r3, #90	; 0x5a
 801bc96:	f200 85b4 	bhi.w	801c802 <_svfprintf_r+0xc4a>
 801bc9a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801bc9e:	007e      	.short	0x007e
 801bca0:	05b205b2 	.word	0x05b205b2
 801bca4:	05b20086 	.word	0x05b20086
 801bca8:	05b205b2 	.word	0x05b205b2
 801bcac:	05b20065 	.word	0x05b20065
 801bcb0:	008905b2 	.word	0x008905b2
 801bcb4:	05b20093 	.word	0x05b20093
 801bcb8:	00960090 	.word	0x00960090
 801bcbc:	00b305b2 	.word	0x00b305b2
 801bcc0:	00b600b6 	.word	0x00b600b6
 801bcc4:	00b600b6 	.word	0x00b600b6
 801bcc8:	00b600b6 	.word	0x00b600b6
 801bccc:	00b600b6 	.word	0x00b600b6
 801bcd0:	05b200b6 	.word	0x05b200b6
 801bcd4:	05b205b2 	.word	0x05b205b2
 801bcd8:	05b205b2 	.word	0x05b205b2
 801bcdc:	05b205b2 	.word	0x05b205b2
 801bce0:	05b20127 	.word	0x05b20127
 801bce4:	00fc00e9 	.word	0x00fc00e9
 801bce8:	01270127 	.word	0x01270127
 801bcec:	05b20127 	.word	0x05b20127
 801bcf0:	05b205b2 	.word	0x05b205b2
 801bcf4:	00c605b2 	.word	0x00c605b2
 801bcf8:	05b205b2 	.word	0x05b205b2
 801bcfc:	05b20492 	.word	0x05b20492
 801bd00:	05b205b2 	.word	0x05b205b2
 801bd04:	05b204d9 	.word	0x05b204d9
 801bd08:	05b204fa 	.word	0x05b204fa
 801bd0c:	051905b2 	.word	0x051905b2
 801bd10:	05b205b2 	.word	0x05b205b2
 801bd14:	05b205b2 	.word	0x05b205b2
 801bd18:	05b205b2 	.word	0x05b205b2
 801bd1c:	05b205b2 	.word	0x05b205b2
 801bd20:	05b20127 	.word	0x05b20127
 801bd24:	00fe00e9 	.word	0x00fe00e9
 801bd28:	01270127 	.word	0x01270127
 801bd2c:	00c90127 	.word	0x00c90127
 801bd30:	00dd00fe 	.word	0x00dd00fe
 801bd34:	00d605b2 	.word	0x00d605b2
 801bd38:	046f05b2 	.word	0x046f05b2
 801bd3c:	04c80494 	.word	0x04c80494
 801bd40:	05b200dd 	.word	0x05b200dd
 801bd44:	007c04d9 	.word	0x007c04d9
 801bd48:	05b204fc 	.word	0x05b204fc
 801bd4c:	053605b2 	.word	0x053605b2
 801bd50:	007c05b2 	.word	0x007c05b2
 801bd54:	aa22      	add	r2, sp, #136	; 0x88
 801bd56:	4649      	mov	r1, r9
 801bd58:	4650      	mov	r0, sl
 801bd5a:	f004 ff4d 	bl	8020bf8 <__ssprint_r>
 801bd5e:	2800      	cmp	r0, #0
 801bd60:	f040 8132 	bne.w	801bfc8 <_svfprintf_r+0x410>
 801bd64:	ac25      	add	r4, sp, #148	; 0x94
 801bd66:	e77c      	b.n	801bc62 <_svfprintf_r+0xaa>
 801bd68:	4650      	mov	r0, sl
 801bd6a:	f003 fff7 	bl	801fd5c <_localeconv_r>
 801bd6e:	6843      	ldr	r3, [r0, #4]
 801bd70:	9314      	str	r3, [sp, #80]	; 0x50
 801bd72:	4618      	mov	r0, r3
 801bd74:	f7e4 fa56 	bl	8000224 <strlen>
 801bd78:	9012      	str	r0, [sp, #72]	; 0x48
 801bd7a:	4650      	mov	r0, sl
 801bd7c:	f003 ffee 	bl	801fd5c <_localeconv_r>
 801bd80:	6883      	ldr	r3, [r0, #8]
 801bd82:	930a      	str	r3, [sp, #40]	; 0x28
 801bd84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bd86:	212b      	movs	r1, #43	; 0x2b
 801bd88:	b12b      	cbz	r3, 801bd96 <_svfprintf_r+0x1de>
 801bd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd8c:	b11b      	cbz	r3, 801bd96 <_svfprintf_r+0x1de>
 801bd8e:	781b      	ldrb	r3, [r3, #0]
 801bd90:	b10b      	cbz	r3, 801bd96 <_svfprintf_r+0x1de>
 801bd92:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801bd96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801bd98:	e775      	b.n	801bc86 <_svfprintf_r+0xce>
 801bd9a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d1f9      	bne.n	801bd96 <_svfprintf_r+0x1de>
 801bda2:	2320      	movs	r3, #32
 801bda4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bda8:	e7f5      	b.n	801bd96 <_svfprintf_r+0x1de>
 801bdaa:	f048 0801 	orr.w	r8, r8, #1
 801bdae:	e7f2      	b.n	801bd96 <_svfprintf_r+0x1de>
 801bdb0:	f856 3b04 	ldr.w	r3, [r6], #4
 801bdb4:	9310      	str	r3, [sp, #64]	; 0x40
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	daed      	bge.n	801bd96 <_svfprintf_r+0x1de>
 801bdba:	425b      	negs	r3, r3
 801bdbc:	9310      	str	r3, [sp, #64]	; 0x40
 801bdbe:	f048 0804 	orr.w	r8, r8, #4
 801bdc2:	e7e8      	b.n	801bd96 <_svfprintf_r+0x1de>
 801bdc4:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801bdc8:	e7e5      	b.n	801bd96 <_svfprintf_r+0x1de>
 801bdca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bdcc:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bdd0:	9307      	str	r3, [sp, #28]
 801bdd2:	2b2a      	cmp	r3, #42	; 0x2a
 801bdd4:	d113      	bne.n	801bdfe <_svfprintf_r+0x246>
 801bdd6:	f856 0b04 	ldr.w	r0, [r6], #4
 801bdda:	920b      	str	r2, [sp, #44]	; 0x2c
 801bddc:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801bde0:	9304      	str	r3, [sp, #16]
 801bde2:	e7d8      	b.n	801bd96 <_svfprintf_r+0x1de>
 801bde4:	9804      	ldr	r0, [sp, #16]
 801bde6:	fb07 3300 	mla	r3, r7, r0, r3
 801bdea:	9304      	str	r3, [sp, #16]
 801bdec:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bdf0:	9307      	str	r3, [sp, #28]
 801bdf2:	9b07      	ldr	r3, [sp, #28]
 801bdf4:	3b30      	subs	r3, #48	; 0x30
 801bdf6:	2b09      	cmp	r3, #9
 801bdf8:	d9f4      	bls.n	801bde4 <_svfprintf_r+0x22c>
 801bdfa:	920b      	str	r2, [sp, #44]	; 0x2c
 801bdfc:	e748      	b.n	801bc90 <_svfprintf_r+0xd8>
 801bdfe:	2300      	movs	r3, #0
 801be00:	9304      	str	r3, [sp, #16]
 801be02:	e7f6      	b.n	801bdf2 <_svfprintf_r+0x23a>
 801be04:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801be08:	e7c5      	b.n	801bd96 <_svfprintf_r+0x1de>
 801be0a:	2300      	movs	r3, #0
 801be0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801be0e:	9310      	str	r3, [sp, #64]	; 0x40
 801be10:	9b07      	ldr	r3, [sp, #28]
 801be12:	9810      	ldr	r0, [sp, #64]	; 0x40
 801be14:	3b30      	subs	r3, #48	; 0x30
 801be16:	fb07 3300 	mla	r3, r7, r0, r3
 801be1a:	9310      	str	r3, [sp, #64]	; 0x40
 801be1c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801be20:	9307      	str	r3, [sp, #28]
 801be22:	3b30      	subs	r3, #48	; 0x30
 801be24:	2b09      	cmp	r3, #9
 801be26:	d9f3      	bls.n	801be10 <_svfprintf_r+0x258>
 801be28:	e7e7      	b.n	801bdfa <_svfprintf_r+0x242>
 801be2a:	f048 0808 	orr.w	r8, r8, #8
 801be2e:	e7b2      	b.n	801bd96 <_svfprintf_r+0x1de>
 801be30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be32:	781b      	ldrb	r3, [r3, #0]
 801be34:	2b68      	cmp	r3, #104	; 0x68
 801be36:	bf01      	itttt	eq
 801be38:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801be3a:	3301      	addeq	r3, #1
 801be3c:	930b      	streq	r3, [sp, #44]	; 0x2c
 801be3e:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801be42:	bf18      	it	ne
 801be44:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801be48:	e7a5      	b.n	801bd96 <_svfprintf_r+0x1de>
 801be4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be4c:	781b      	ldrb	r3, [r3, #0]
 801be4e:	2b6c      	cmp	r3, #108	; 0x6c
 801be50:	d105      	bne.n	801be5e <_svfprintf_r+0x2a6>
 801be52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be54:	3301      	adds	r3, #1
 801be56:	930b      	str	r3, [sp, #44]	; 0x2c
 801be58:	f048 0820 	orr.w	r8, r8, #32
 801be5c:	e79b      	b.n	801bd96 <_svfprintf_r+0x1de>
 801be5e:	f048 0810 	orr.w	r8, r8, #16
 801be62:	e798      	b.n	801bd96 <_svfprintf_r+0x1de>
 801be64:	f3af 8000 	nop.w
	...
 801be70:	4632      	mov	r2, r6
 801be72:	2000      	movs	r0, #0
 801be74:	f852 3b04 	ldr.w	r3, [r2], #4
 801be78:	9206      	str	r2, [sp, #24]
 801be7a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801be7e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801be82:	2301      	movs	r3, #1
 801be84:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801be88:	9003      	str	r0, [sp, #12]
 801be8a:	9304      	str	r3, [sp, #16]
 801be8c:	4606      	mov	r6, r0
 801be8e:	4605      	mov	r5, r0
 801be90:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801be94:	e1b8      	b.n	801c208 <_svfprintf_r+0x650>
 801be96:	f048 0810 	orr.w	r8, r8, #16
 801be9a:	f018 0f20 	tst.w	r8, #32
 801be9e:	d012      	beq.n	801bec6 <_svfprintf_r+0x30e>
 801bea0:	3607      	adds	r6, #7
 801bea2:	f026 0307 	bic.w	r3, r6, #7
 801bea6:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801beaa:	9306      	str	r3, [sp, #24]
 801beac:	2e00      	cmp	r6, #0
 801beae:	f177 0300 	sbcs.w	r3, r7, #0
 801beb2:	da06      	bge.n	801bec2 <_svfprintf_r+0x30a>
 801beb4:	4276      	negs	r6, r6
 801beb6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801beba:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801bebe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bec2:	2301      	movs	r3, #1
 801bec4:	e38e      	b.n	801c5e4 <_svfprintf_r+0xa2c>
 801bec6:	1d33      	adds	r3, r6, #4
 801bec8:	f018 0f10 	tst.w	r8, #16
 801becc:	9306      	str	r3, [sp, #24]
 801bece:	d002      	beq.n	801bed6 <_svfprintf_r+0x31e>
 801bed0:	6836      	ldr	r6, [r6, #0]
 801bed2:	17f7      	asrs	r7, r6, #31
 801bed4:	e7ea      	b.n	801beac <_svfprintf_r+0x2f4>
 801bed6:	f018 0f40 	tst.w	r8, #64	; 0x40
 801beda:	6836      	ldr	r6, [r6, #0]
 801bedc:	d001      	beq.n	801bee2 <_svfprintf_r+0x32a>
 801bede:	b236      	sxth	r6, r6
 801bee0:	e7f7      	b.n	801bed2 <_svfprintf_r+0x31a>
 801bee2:	f418 7f00 	tst.w	r8, #512	; 0x200
 801bee6:	bf18      	it	ne
 801bee8:	b276      	sxtbne	r6, r6
 801beea:	e7f2      	b.n	801bed2 <_svfprintf_r+0x31a>
 801beec:	3607      	adds	r6, #7
 801beee:	f026 0307 	bic.w	r3, r6, #7
 801bef2:	ecb3 7b02 	vldmia	r3!, {d7}
 801bef6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801befa:	9306      	str	r3, [sp, #24]
 801befc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801befe:	ee09 3a10 	vmov	s18, r3
 801bf02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bf08:	ee09 3a90 	vmov	s19, r3
 801bf0c:	f04f 32ff 	mov.w	r2, #4294967295
 801bf10:	4b3a      	ldr	r3, [pc, #232]	; (801bffc <_svfprintf_r+0x444>)
 801bf12:	ec51 0b19 	vmov	r0, r1, d9
 801bf16:	f7e4 fe39 	bl	8000b8c <__aeabi_dcmpun>
 801bf1a:	bb10      	cbnz	r0, 801bf62 <_svfprintf_r+0x3aa>
 801bf1c:	4b37      	ldr	r3, [pc, #220]	; (801bffc <_svfprintf_r+0x444>)
 801bf1e:	ec51 0b19 	vmov	r0, r1, d9
 801bf22:	f04f 32ff 	mov.w	r2, #4294967295
 801bf26:	f7e4 fe13 	bl	8000b50 <__aeabi_dcmple>
 801bf2a:	b9d0      	cbnz	r0, 801bf62 <_svfprintf_r+0x3aa>
 801bf2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bf30:	2200      	movs	r2, #0
 801bf32:	2300      	movs	r3, #0
 801bf34:	f7e4 fe02 	bl	8000b3c <__aeabi_dcmplt>
 801bf38:	b110      	cbz	r0, 801bf40 <_svfprintf_r+0x388>
 801bf3a:	232d      	movs	r3, #45	; 0x2d
 801bf3c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bf40:	4a2f      	ldr	r2, [pc, #188]	; (801c000 <_svfprintf_r+0x448>)
 801bf42:	4830      	ldr	r0, [pc, #192]	; (801c004 <_svfprintf_r+0x44c>)
 801bf44:	9b07      	ldr	r3, [sp, #28]
 801bf46:	2100      	movs	r1, #0
 801bf48:	2b47      	cmp	r3, #71	; 0x47
 801bf4a:	bfd4      	ite	le
 801bf4c:	4693      	movle	fp, r2
 801bf4e:	4683      	movgt	fp, r0
 801bf50:	2303      	movs	r3, #3
 801bf52:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801bf56:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801bf5a:	2600      	movs	r6, #0
 801bf5c:	4633      	mov	r3, r6
 801bf5e:	f001 b802 	b.w	801cf66 <_svfprintf_r+0x13ae>
 801bf62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801bf66:	4610      	mov	r0, r2
 801bf68:	4619      	mov	r1, r3
 801bf6a:	f7e4 fe0f 	bl	8000b8c <__aeabi_dcmpun>
 801bf6e:	b140      	cbz	r0, 801bf82 <_svfprintf_r+0x3ca>
 801bf70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf72:	4a25      	ldr	r2, [pc, #148]	; (801c008 <_svfprintf_r+0x450>)
 801bf74:	4825      	ldr	r0, [pc, #148]	; (801c00c <_svfprintf_r+0x454>)
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	bfbc      	itt	lt
 801bf7a:	232d      	movlt	r3, #45	; 0x2d
 801bf7c:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801bf80:	e7e0      	b.n	801bf44 <_svfprintf_r+0x38c>
 801bf82:	9b07      	ldr	r3, [sp, #28]
 801bf84:	f023 0320 	bic.w	r3, r3, #32
 801bf88:	2b41      	cmp	r3, #65	; 0x41
 801bf8a:	9308      	str	r3, [sp, #32]
 801bf8c:	d125      	bne.n	801bfda <_svfprintf_r+0x422>
 801bf8e:	2330      	movs	r3, #48	; 0x30
 801bf90:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801bf94:	9b07      	ldr	r3, [sp, #28]
 801bf96:	2b61      	cmp	r3, #97	; 0x61
 801bf98:	bf0c      	ite	eq
 801bf9a:	2378      	moveq	r3, #120	; 0x78
 801bf9c:	2358      	movne	r3, #88	; 0x58
 801bf9e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801bfa2:	9b04      	ldr	r3, [sp, #16]
 801bfa4:	2b63      	cmp	r3, #99	; 0x63
 801bfa6:	f048 0802 	orr.w	r8, r8, #2
 801bfaa:	dd31      	ble.n	801c010 <_svfprintf_r+0x458>
 801bfac:	1c59      	adds	r1, r3, #1
 801bfae:	4650      	mov	r0, sl
 801bfb0:	f003 ff5a 	bl	801fe68 <_malloc_r>
 801bfb4:	4683      	mov	fp, r0
 801bfb6:	2800      	cmp	r0, #0
 801bfb8:	f040 81fe 	bne.w	801c3b8 <_svfprintf_r+0x800>
 801bfbc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bfc4:	f8a9 300c 	strh.w	r3, [r9, #12]
 801bfc8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bfcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 801bfd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bfd2:	bf18      	it	ne
 801bfd4:	f04f 33ff 	movne.w	r3, #4294967295
 801bfd8:	e614      	b.n	801bc04 <_svfprintf_r+0x4c>
 801bfda:	9b04      	ldr	r3, [sp, #16]
 801bfdc:	3301      	adds	r3, #1
 801bfde:	f000 81ed 	beq.w	801c3bc <_svfprintf_r+0x804>
 801bfe2:	9b08      	ldr	r3, [sp, #32]
 801bfe4:	2b47      	cmp	r3, #71	; 0x47
 801bfe6:	f040 81ec 	bne.w	801c3c2 <_svfprintf_r+0x80a>
 801bfea:	9b04      	ldr	r3, [sp, #16]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	f040 81e8 	bne.w	801c3c2 <_svfprintf_r+0x80a>
 801bff2:	9303      	str	r3, [sp, #12]
 801bff4:	2301      	movs	r3, #1
 801bff6:	9304      	str	r3, [sp, #16]
 801bff8:	e00d      	b.n	801c016 <_svfprintf_r+0x45e>
 801bffa:	bf00      	nop
 801bffc:	7fefffff 	.word	0x7fefffff
 801c000:	08029278 	.word	0x08029278
 801c004:	0802927c 	.word	0x0802927c
 801c008:	08029280 	.word	0x08029280
 801c00c:	08029284 	.word	0x08029284
 801c010:	9003      	str	r0, [sp, #12]
 801c012:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801c016:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801c01a:	9311      	str	r3, [sp, #68]	; 0x44
 801c01c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c01e:	2b00      	cmp	r3, #0
 801c020:	f280 81d1 	bge.w	801c3c6 <_svfprintf_r+0x80e>
 801c024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c026:	ee08 3a10 	vmov	s16, r3
 801c02a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c02c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c030:	ee08 3a90 	vmov	s17, r3
 801c034:	232d      	movs	r3, #45	; 0x2d
 801c036:	9318      	str	r3, [sp, #96]	; 0x60
 801c038:	9b08      	ldr	r3, [sp, #32]
 801c03a:	2b41      	cmp	r3, #65	; 0x41
 801c03c:	f040 81e1 	bne.w	801c402 <_svfprintf_r+0x84a>
 801c040:	eeb0 0a48 	vmov.f32	s0, s16
 801c044:	eef0 0a68 	vmov.f32	s1, s17
 801c048:	a81c      	add	r0, sp, #112	; 0x70
 801c04a:	f004 fc8b 	bl	8020964 <frexp>
 801c04e:	2200      	movs	r2, #0
 801c050:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801c054:	ec51 0b10 	vmov	r0, r1, d0
 801c058:	f7e4 fafe 	bl	8000658 <__aeabi_dmul>
 801c05c:	2200      	movs	r2, #0
 801c05e:	2300      	movs	r3, #0
 801c060:	4606      	mov	r6, r0
 801c062:	460f      	mov	r7, r1
 801c064:	f7e4 fd60 	bl	8000b28 <__aeabi_dcmpeq>
 801c068:	b108      	cbz	r0, 801c06e <_svfprintf_r+0x4b6>
 801c06a:	2301      	movs	r3, #1
 801c06c:	931c      	str	r3, [sp, #112]	; 0x70
 801c06e:	4bb4      	ldr	r3, [pc, #720]	; (801c340 <_svfprintf_r+0x788>)
 801c070:	4ab4      	ldr	r2, [pc, #720]	; (801c344 <_svfprintf_r+0x78c>)
 801c072:	9907      	ldr	r1, [sp, #28]
 801c074:	2961      	cmp	r1, #97	; 0x61
 801c076:	bf18      	it	ne
 801c078:	461a      	movne	r2, r3
 801c07a:	9b04      	ldr	r3, [sp, #16]
 801c07c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c07e:	3b01      	subs	r3, #1
 801c080:	9305      	str	r3, [sp, #20]
 801c082:	465d      	mov	r5, fp
 801c084:	4bb0      	ldr	r3, [pc, #704]	; (801c348 <_svfprintf_r+0x790>)
 801c086:	2200      	movs	r2, #0
 801c088:	4630      	mov	r0, r6
 801c08a:	4639      	mov	r1, r7
 801c08c:	f7e4 fae4 	bl	8000658 <__aeabi_dmul>
 801c090:	460f      	mov	r7, r1
 801c092:	4606      	mov	r6, r0
 801c094:	f7e4 fd90 	bl	8000bb8 <__aeabi_d2iz>
 801c098:	9019      	str	r0, [sp, #100]	; 0x64
 801c09a:	f7e4 fa73 	bl	8000584 <__aeabi_i2d>
 801c09e:	4602      	mov	r2, r0
 801c0a0:	460b      	mov	r3, r1
 801c0a2:	4630      	mov	r0, r6
 801c0a4:	4639      	mov	r1, r7
 801c0a6:	f7e4 f91f 	bl	80002e8 <__aeabi_dsub>
 801c0aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c0ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c0ae:	5c9b      	ldrb	r3, [r3, r2]
 801c0b0:	f805 3b01 	strb.w	r3, [r5], #1
 801c0b4:	9b05      	ldr	r3, [sp, #20]
 801c0b6:	9309      	str	r3, [sp, #36]	; 0x24
 801c0b8:	1c5a      	adds	r2, r3, #1
 801c0ba:	4606      	mov	r6, r0
 801c0bc:	460f      	mov	r7, r1
 801c0be:	d007      	beq.n	801c0d0 <_svfprintf_r+0x518>
 801c0c0:	3b01      	subs	r3, #1
 801c0c2:	9305      	str	r3, [sp, #20]
 801c0c4:	2200      	movs	r2, #0
 801c0c6:	2300      	movs	r3, #0
 801c0c8:	f7e4 fd2e 	bl	8000b28 <__aeabi_dcmpeq>
 801c0cc:	2800      	cmp	r0, #0
 801c0ce:	d0d9      	beq.n	801c084 <_svfprintf_r+0x4cc>
 801c0d0:	4b9e      	ldr	r3, [pc, #632]	; (801c34c <_svfprintf_r+0x794>)
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	4630      	mov	r0, r6
 801c0d6:	4639      	mov	r1, r7
 801c0d8:	f7e4 fd4e 	bl	8000b78 <__aeabi_dcmpgt>
 801c0dc:	b960      	cbnz	r0, 801c0f8 <_svfprintf_r+0x540>
 801c0de:	4b9b      	ldr	r3, [pc, #620]	; (801c34c <_svfprintf_r+0x794>)
 801c0e0:	2200      	movs	r2, #0
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	4639      	mov	r1, r7
 801c0e6:	f7e4 fd1f 	bl	8000b28 <__aeabi_dcmpeq>
 801c0ea:	2800      	cmp	r0, #0
 801c0ec:	f000 8184 	beq.w	801c3f8 <_svfprintf_r+0x840>
 801c0f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c0f2:	07df      	lsls	r7, r3, #31
 801c0f4:	f140 8180 	bpl.w	801c3f8 <_svfprintf_r+0x840>
 801c0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c0fa:	9520      	str	r5, [sp, #128]	; 0x80
 801c0fc:	7bd9      	ldrb	r1, [r3, #15]
 801c0fe:	2030      	movs	r0, #48	; 0x30
 801c100:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c102:	1e53      	subs	r3, r2, #1
 801c104:	9320      	str	r3, [sp, #128]	; 0x80
 801c106:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801c10a:	428b      	cmp	r3, r1
 801c10c:	f000 8163 	beq.w	801c3d6 <_svfprintf_r+0x81e>
 801c110:	2b39      	cmp	r3, #57	; 0x39
 801c112:	bf0b      	itete	eq
 801c114:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801c116:	3301      	addne	r3, #1
 801c118:	7a9b      	ldrbeq	r3, [r3, #10]
 801c11a:	b2db      	uxtbne	r3, r3
 801c11c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c120:	eba5 030b 	sub.w	r3, r5, fp
 801c124:	9305      	str	r3, [sp, #20]
 801c126:	9b08      	ldr	r3, [sp, #32]
 801c128:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c12a:	2b47      	cmp	r3, #71	; 0x47
 801c12c:	f040 81b1 	bne.w	801c492 <_svfprintf_r+0x8da>
 801c130:	1cee      	adds	r6, r5, #3
 801c132:	db03      	blt.n	801c13c <_svfprintf_r+0x584>
 801c134:	9b04      	ldr	r3, [sp, #16]
 801c136:	42ab      	cmp	r3, r5
 801c138:	f280 81d6 	bge.w	801c4e8 <_svfprintf_r+0x930>
 801c13c:	9b07      	ldr	r3, [sp, #28]
 801c13e:	3b02      	subs	r3, #2
 801c140:	9307      	str	r3, [sp, #28]
 801c142:	9907      	ldr	r1, [sp, #28]
 801c144:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801c148:	f021 0120 	bic.w	r1, r1, #32
 801c14c:	2941      	cmp	r1, #65	; 0x41
 801c14e:	bf08      	it	eq
 801c150:	320f      	addeq	r2, #15
 801c152:	f105 33ff 	add.w	r3, r5, #4294967295
 801c156:	bf06      	itte	eq
 801c158:	b2d2      	uxtbeq	r2, r2
 801c15a:	2101      	moveq	r1, #1
 801c15c:	2100      	movne	r1, #0
 801c15e:	2b00      	cmp	r3, #0
 801c160:	931c      	str	r3, [sp, #112]	; 0x70
 801c162:	bfb8      	it	lt
 801c164:	f1c5 0301 	rsblt	r3, r5, #1
 801c168:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801c16c:	bfb4      	ite	lt
 801c16e:	222d      	movlt	r2, #45	; 0x2d
 801c170:	222b      	movge	r2, #43	; 0x2b
 801c172:	2b09      	cmp	r3, #9
 801c174:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801c178:	f340 81a4 	ble.w	801c4c4 <_svfprintf_r+0x90c>
 801c17c:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801c180:	260a      	movs	r6, #10
 801c182:	4611      	mov	r1, r2
 801c184:	fb93 f5f6 	sdiv	r5, r3, r6
 801c188:	fb06 3015 	mls	r0, r6, r5, r3
 801c18c:	3030      	adds	r0, #48	; 0x30
 801c18e:	f801 0c01 	strb.w	r0, [r1, #-1]
 801c192:	4618      	mov	r0, r3
 801c194:	2863      	cmp	r0, #99	; 0x63
 801c196:	f102 32ff 	add.w	r2, r2, #4294967295
 801c19a:	462b      	mov	r3, r5
 801c19c:	dcf1      	bgt.n	801c182 <_svfprintf_r+0x5ca>
 801c19e:	3330      	adds	r3, #48	; 0x30
 801c1a0:	1e88      	subs	r0, r1, #2
 801c1a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c1a6:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801c1aa:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	42ab      	cmp	r3, r5
 801c1b2:	f0c0 8182 	bcc.w	801c4ba <_svfprintf_r+0x902>
 801c1b6:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801c1ba:	1a52      	subs	r2, r2, r1
 801c1bc:	42a8      	cmp	r0, r5
 801c1be:	bf88      	it	hi
 801c1c0:	2200      	movhi	r2, #0
 801c1c2:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801c1c6:	441a      	add	r2, r3
 801c1c8:	ab1e      	add	r3, sp, #120	; 0x78
 801c1ca:	1ad3      	subs	r3, r2, r3
 801c1cc:	9a05      	ldr	r2, [sp, #20]
 801c1ce:	9315      	str	r3, [sp, #84]	; 0x54
 801c1d0:	2a01      	cmp	r2, #1
 801c1d2:	4413      	add	r3, r2
 801c1d4:	9304      	str	r3, [sp, #16]
 801c1d6:	dc02      	bgt.n	801c1de <_svfprintf_r+0x626>
 801c1d8:	f018 0f01 	tst.w	r8, #1
 801c1dc:	d003      	beq.n	801c1e6 <_svfprintf_r+0x62e>
 801c1de:	9b04      	ldr	r3, [sp, #16]
 801c1e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c1e2:	4413      	add	r3, r2
 801c1e4:	9304      	str	r3, [sp, #16]
 801c1e6:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801c1ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c1ee:	9311      	str	r3, [sp, #68]	; 0x44
 801c1f0:	2300      	movs	r3, #0
 801c1f2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c1f6:	461d      	mov	r5, r3
 801c1f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c1fa:	b113      	cbz	r3, 801c202 <_svfprintf_r+0x64a>
 801c1fc:	232d      	movs	r3, #45	; 0x2d
 801c1fe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801c202:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801c206:	2600      	movs	r6, #0
 801c208:	9b04      	ldr	r3, [sp, #16]
 801c20a:	42b3      	cmp	r3, r6
 801c20c:	bfb8      	it	lt
 801c20e:	4633      	movlt	r3, r6
 801c210:	9311      	str	r3, [sp, #68]	; 0x44
 801c212:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c216:	b113      	cbz	r3, 801c21e <_svfprintf_r+0x666>
 801c218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c21a:	3301      	adds	r3, #1
 801c21c:	9311      	str	r3, [sp, #68]	; 0x44
 801c21e:	f018 0302 	ands.w	r3, r8, #2
 801c222:	9317      	str	r3, [sp, #92]	; 0x5c
 801c224:	bf1e      	ittt	ne
 801c226:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801c228:	3302      	addne	r3, #2
 801c22a:	9311      	strne	r3, [sp, #68]	; 0x44
 801c22c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801c230:	9318      	str	r3, [sp, #96]	; 0x60
 801c232:	d11f      	bne.n	801c274 <_svfprintf_r+0x6bc>
 801c234:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c238:	1a9f      	subs	r7, r3, r2
 801c23a:	2f00      	cmp	r7, #0
 801c23c:	dd1a      	ble.n	801c274 <_svfprintf_r+0x6bc>
 801c23e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c242:	4843      	ldr	r0, [pc, #268]	; (801c350 <_svfprintf_r+0x798>)
 801c244:	6020      	str	r0, [r4, #0]
 801c246:	2f10      	cmp	r7, #16
 801c248:	f103 0301 	add.w	r3, r3, #1
 801c24c:	f104 0108 	add.w	r1, r4, #8
 801c250:	f300 82e6 	bgt.w	801c820 <_svfprintf_r+0xc68>
 801c254:	6067      	str	r7, [r4, #4]
 801c256:	2b07      	cmp	r3, #7
 801c258:	4417      	add	r7, r2
 801c25a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801c25e:	f340 82f2 	ble.w	801c846 <_svfprintf_r+0xc8e>
 801c262:	aa22      	add	r2, sp, #136	; 0x88
 801c264:	4649      	mov	r1, r9
 801c266:	4650      	mov	r0, sl
 801c268:	f004 fcc6 	bl	8020bf8 <__ssprint_r>
 801c26c:	2800      	cmp	r0, #0
 801c26e:	f040 861d 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c272:	ac25      	add	r4, sp, #148	; 0x94
 801c274:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c278:	b173      	cbz	r3, 801c298 <_svfprintf_r+0x6e0>
 801c27a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801c27e:	6023      	str	r3, [r4, #0]
 801c280:	2301      	movs	r3, #1
 801c282:	6063      	str	r3, [r4, #4]
 801c284:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c286:	3301      	adds	r3, #1
 801c288:	9324      	str	r3, [sp, #144]	; 0x90
 801c28a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c28c:	3301      	adds	r3, #1
 801c28e:	2b07      	cmp	r3, #7
 801c290:	9323      	str	r3, [sp, #140]	; 0x8c
 801c292:	f300 82da 	bgt.w	801c84a <_svfprintf_r+0xc92>
 801c296:	3408      	adds	r4, #8
 801c298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c29a:	b16b      	cbz	r3, 801c2b8 <_svfprintf_r+0x700>
 801c29c:	ab1b      	add	r3, sp, #108	; 0x6c
 801c29e:	6023      	str	r3, [r4, #0]
 801c2a0:	2302      	movs	r3, #2
 801c2a2:	6063      	str	r3, [r4, #4]
 801c2a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c2a6:	3302      	adds	r3, #2
 801c2a8:	9324      	str	r3, [sp, #144]	; 0x90
 801c2aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c2ac:	3301      	adds	r3, #1
 801c2ae:	2b07      	cmp	r3, #7
 801c2b0:	9323      	str	r3, [sp, #140]	; 0x8c
 801c2b2:	f300 82d4 	bgt.w	801c85e <_svfprintf_r+0xca6>
 801c2b6:	3408      	adds	r4, #8
 801c2b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c2ba:	2b80      	cmp	r3, #128	; 0x80
 801c2bc:	d11f      	bne.n	801c2fe <_svfprintf_r+0x746>
 801c2be:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c2c2:	1a9f      	subs	r7, r3, r2
 801c2c4:	2f00      	cmp	r7, #0
 801c2c6:	dd1a      	ble.n	801c2fe <_svfprintf_r+0x746>
 801c2c8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c2cc:	4821      	ldr	r0, [pc, #132]	; (801c354 <_svfprintf_r+0x79c>)
 801c2ce:	6020      	str	r0, [r4, #0]
 801c2d0:	2f10      	cmp	r7, #16
 801c2d2:	f103 0301 	add.w	r3, r3, #1
 801c2d6:	f104 0108 	add.w	r1, r4, #8
 801c2da:	f300 82ca 	bgt.w	801c872 <_svfprintf_r+0xcba>
 801c2de:	6067      	str	r7, [r4, #4]
 801c2e0:	2b07      	cmp	r3, #7
 801c2e2:	4417      	add	r7, r2
 801c2e4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801c2e8:	f340 82d6 	ble.w	801c898 <_svfprintf_r+0xce0>
 801c2ec:	aa22      	add	r2, sp, #136	; 0x88
 801c2ee:	4649      	mov	r1, r9
 801c2f0:	4650      	mov	r0, sl
 801c2f2:	f004 fc81 	bl	8020bf8 <__ssprint_r>
 801c2f6:	2800      	cmp	r0, #0
 801c2f8:	f040 85d8 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c2fc:	ac25      	add	r4, sp, #148	; 0x94
 801c2fe:	9b04      	ldr	r3, [sp, #16]
 801c300:	1af6      	subs	r6, r6, r3
 801c302:	2e00      	cmp	r6, #0
 801c304:	dd28      	ble.n	801c358 <_svfprintf_r+0x7a0>
 801c306:	4f13      	ldr	r7, [pc, #76]	; (801c354 <_svfprintf_r+0x79c>)
 801c308:	6027      	str	r7, [r4, #0]
 801c30a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c30e:	2e10      	cmp	r6, #16
 801c310:	f103 0301 	add.w	r3, r3, #1
 801c314:	f104 0108 	add.w	r1, r4, #8
 801c318:	f300 82c0 	bgt.w	801c89c <_svfprintf_r+0xce4>
 801c31c:	6066      	str	r6, [r4, #4]
 801c31e:	2b07      	cmp	r3, #7
 801c320:	4416      	add	r6, r2
 801c322:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801c326:	f340 82cc 	ble.w	801c8c2 <_svfprintf_r+0xd0a>
 801c32a:	aa22      	add	r2, sp, #136	; 0x88
 801c32c:	4649      	mov	r1, r9
 801c32e:	4650      	mov	r0, sl
 801c330:	f004 fc62 	bl	8020bf8 <__ssprint_r>
 801c334:	2800      	cmp	r0, #0
 801c336:	f040 85b9 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c33a:	ac25      	add	r4, sp, #148	; 0x94
 801c33c:	e00c      	b.n	801c358 <_svfprintf_r+0x7a0>
 801c33e:	bf00      	nop
 801c340:	08029299 	.word	0x08029299
 801c344:	08029288 	.word	0x08029288
 801c348:	40300000 	.word	0x40300000
 801c34c:	3fe00000 	.word	0x3fe00000
 801c350:	080292ac 	.word	0x080292ac
 801c354:	080292bc 	.word	0x080292bc
 801c358:	f418 7f80 	tst.w	r8, #256	; 0x100
 801c35c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801c35e:	f040 82b7 	bne.w	801c8d0 <_svfprintf_r+0xd18>
 801c362:	9b04      	ldr	r3, [sp, #16]
 801c364:	f8c4 b000 	str.w	fp, [r4]
 801c368:	441e      	add	r6, r3
 801c36a:	6063      	str	r3, [r4, #4]
 801c36c:	9624      	str	r6, [sp, #144]	; 0x90
 801c36e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c370:	3301      	adds	r3, #1
 801c372:	2b07      	cmp	r3, #7
 801c374:	9323      	str	r3, [sp, #140]	; 0x8c
 801c376:	f300 82f0 	bgt.w	801c95a <_svfprintf_r+0xda2>
 801c37a:	3408      	adds	r4, #8
 801c37c:	f018 0f04 	tst.w	r8, #4
 801c380:	f040 8576 	bne.w	801ce70 <_svfprintf_r+0x12b8>
 801c384:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c388:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c38a:	428a      	cmp	r2, r1
 801c38c:	bfac      	ite	ge
 801c38e:	189b      	addge	r3, r3, r2
 801c390:	185b      	addlt	r3, r3, r1
 801c392:	930f      	str	r3, [sp, #60]	; 0x3c
 801c394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c396:	b13b      	cbz	r3, 801c3a8 <_svfprintf_r+0x7f0>
 801c398:	aa22      	add	r2, sp, #136	; 0x88
 801c39a:	4649      	mov	r1, r9
 801c39c:	4650      	mov	r0, sl
 801c39e:	f004 fc2b 	bl	8020bf8 <__ssprint_r>
 801c3a2:	2800      	cmp	r0, #0
 801c3a4:	f040 8582 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	9323      	str	r3, [sp, #140]	; 0x8c
 801c3ac:	9b03      	ldr	r3, [sp, #12]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	f040 8598 	bne.w	801cee4 <_svfprintf_r+0x132c>
 801c3b4:	ac25      	add	r4, sp, #148	; 0x94
 801c3b6:	e0ed      	b.n	801c594 <_svfprintf_r+0x9dc>
 801c3b8:	9003      	str	r0, [sp, #12]
 801c3ba:	e62c      	b.n	801c016 <_svfprintf_r+0x45e>
 801c3bc:	9003      	str	r0, [sp, #12]
 801c3be:	2306      	movs	r3, #6
 801c3c0:	e619      	b.n	801bff6 <_svfprintf_r+0x43e>
 801c3c2:	9003      	str	r0, [sp, #12]
 801c3c4:	e627      	b.n	801c016 <_svfprintf_r+0x45e>
 801c3c6:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	eeb0 8a47 	vmov.f32	s16, s14
 801c3d0:	eef0 8a67 	vmov.f32	s17, s15
 801c3d4:	e62f      	b.n	801c036 <_svfprintf_r+0x47e>
 801c3d6:	f802 0c01 	strb.w	r0, [r2, #-1]
 801c3da:	e691      	b.n	801c100 <_svfprintf_r+0x548>
 801c3dc:	f803 0b01 	strb.w	r0, [r3], #1
 801c3e0:	1aca      	subs	r2, r1, r3
 801c3e2:	2a00      	cmp	r2, #0
 801c3e4:	dafa      	bge.n	801c3dc <_svfprintf_r+0x824>
 801c3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3ea:	3201      	adds	r2, #1
 801c3ec:	f103 0301 	add.w	r3, r3, #1
 801c3f0:	bfb8      	it	lt
 801c3f2:	2300      	movlt	r3, #0
 801c3f4:	441d      	add	r5, r3
 801c3f6:	e693      	b.n	801c120 <_svfprintf_r+0x568>
 801c3f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3fa:	462b      	mov	r3, r5
 801c3fc:	18a9      	adds	r1, r5, r2
 801c3fe:	2030      	movs	r0, #48	; 0x30
 801c400:	e7ee      	b.n	801c3e0 <_svfprintf_r+0x828>
 801c402:	9b08      	ldr	r3, [sp, #32]
 801c404:	2b46      	cmp	r3, #70	; 0x46
 801c406:	d005      	beq.n	801c414 <_svfprintf_r+0x85c>
 801c408:	2b45      	cmp	r3, #69	; 0x45
 801c40a:	d11b      	bne.n	801c444 <_svfprintf_r+0x88c>
 801c40c:	9b04      	ldr	r3, [sp, #16]
 801c40e:	1c5d      	adds	r5, r3, #1
 801c410:	2102      	movs	r1, #2
 801c412:	e001      	b.n	801c418 <_svfprintf_r+0x860>
 801c414:	9d04      	ldr	r5, [sp, #16]
 801c416:	2103      	movs	r1, #3
 801c418:	ab20      	add	r3, sp, #128	; 0x80
 801c41a:	9301      	str	r3, [sp, #4]
 801c41c:	ab1d      	add	r3, sp, #116	; 0x74
 801c41e:	9300      	str	r3, [sp, #0]
 801c420:	462a      	mov	r2, r5
 801c422:	ab1c      	add	r3, sp, #112	; 0x70
 801c424:	4650      	mov	r0, sl
 801c426:	eeb0 0a48 	vmov.f32	s0, s16
 801c42a:	eef0 0a68 	vmov.f32	s1, s17
 801c42e:	f002 fb5b 	bl	801eae8 <_dtoa_r>
 801c432:	9b08      	ldr	r3, [sp, #32]
 801c434:	2b47      	cmp	r3, #71	; 0x47
 801c436:	4683      	mov	fp, r0
 801c438:	d106      	bne.n	801c448 <_svfprintf_r+0x890>
 801c43a:	f018 0f01 	tst.w	r8, #1
 801c43e:	d103      	bne.n	801c448 <_svfprintf_r+0x890>
 801c440:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c442:	e66d      	b.n	801c120 <_svfprintf_r+0x568>
 801c444:	9d04      	ldr	r5, [sp, #16]
 801c446:	e7e3      	b.n	801c410 <_svfprintf_r+0x858>
 801c448:	9b08      	ldr	r3, [sp, #32]
 801c44a:	2b46      	cmp	r3, #70	; 0x46
 801c44c:	eb0b 0605 	add.w	r6, fp, r5
 801c450:	d10f      	bne.n	801c472 <_svfprintf_r+0x8ba>
 801c452:	f89b 3000 	ldrb.w	r3, [fp]
 801c456:	2b30      	cmp	r3, #48	; 0x30
 801c458:	d109      	bne.n	801c46e <_svfprintf_r+0x8b6>
 801c45a:	ec51 0b18 	vmov	r0, r1, d8
 801c45e:	2200      	movs	r2, #0
 801c460:	2300      	movs	r3, #0
 801c462:	f7e4 fb61 	bl	8000b28 <__aeabi_dcmpeq>
 801c466:	b910      	cbnz	r0, 801c46e <_svfprintf_r+0x8b6>
 801c468:	f1c5 0501 	rsb	r5, r5, #1
 801c46c:	951c      	str	r5, [sp, #112]	; 0x70
 801c46e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c470:	441e      	add	r6, r3
 801c472:	ec51 0b18 	vmov	r0, r1, d8
 801c476:	2200      	movs	r2, #0
 801c478:	2300      	movs	r3, #0
 801c47a:	f7e4 fb55 	bl	8000b28 <__aeabi_dcmpeq>
 801c47e:	b100      	cbz	r0, 801c482 <_svfprintf_r+0x8ca>
 801c480:	9620      	str	r6, [sp, #128]	; 0x80
 801c482:	2230      	movs	r2, #48	; 0x30
 801c484:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c486:	429e      	cmp	r6, r3
 801c488:	d9da      	bls.n	801c440 <_svfprintf_r+0x888>
 801c48a:	1c59      	adds	r1, r3, #1
 801c48c:	9120      	str	r1, [sp, #128]	; 0x80
 801c48e:	701a      	strb	r2, [r3, #0]
 801c490:	e7f8      	b.n	801c484 <_svfprintf_r+0x8cc>
 801c492:	9b08      	ldr	r3, [sp, #32]
 801c494:	2b46      	cmp	r3, #70	; 0x46
 801c496:	f47f ae54 	bne.w	801c142 <_svfprintf_r+0x58a>
 801c49a:	9a04      	ldr	r2, [sp, #16]
 801c49c:	f008 0301 	and.w	r3, r8, #1
 801c4a0:	2d00      	cmp	r5, #0
 801c4a2:	ea43 0302 	orr.w	r3, r3, r2
 801c4a6:	dd1a      	ble.n	801c4de <_svfprintf_r+0x926>
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d034      	beq.n	801c516 <_svfprintf_r+0x95e>
 801c4ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4ae:	18eb      	adds	r3, r5, r3
 801c4b0:	441a      	add	r2, r3
 801c4b2:	9204      	str	r2, [sp, #16]
 801c4b4:	2366      	movs	r3, #102	; 0x66
 801c4b6:	9307      	str	r3, [sp, #28]
 801c4b8:	e033      	b.n	801c522 <_svfprintf_r+0x96a>
 801c4ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c4be:	f802 6b01 	strb.w	r6, [r2], #1
 801c4c2:	e675      	b.n	801c1b0 <_svfprintf_r+0x5f8>
 801c4c4:	b941      	cbnz	r1, 801c4d8 <_svfprintf_r+0x920>
 801c4c6:	2230      	movs	r2, #48	; 0x30
 801c4c8:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801c4cc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801c4d0:	3330      	adds	r3, #48	; 0x30
 801c4d2:	f802 3b01 	strb.w	r3, [r2], #1
 801c4d6:	e677      	b.n	801c1c8 <_svfprintf_r+0x610>
 801c4d8:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801c4dc:	e7f8      	b.n	801c4d0 <_svfprintf_r+0x918>
 801c4de:	b1e3      	cbz	r3, 801c51a <_svfprintf_r+0x962>
 801c4e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4e2:	9a04      	ldr	r2, [sp, #16]
 801c4e4:	3301      	adds	r3, #1
 801c4e6:	e7e3      	b.n	801c4b0 <_svfprintf_r+0x8f8>
 801c4e8:	9b05      	ldr	r3, [sp, #20]
 801c4ea:	429d      	cmp	r5, r3
 801c4ec:	db07      	blt.n	801c4fe <_svfprintf_r+0x946>
 801c4ee:	f018 0f01 	tst.w	r8, #1
 801c4f2:	d02d      	beq.n	801c550 <_svfprintf_r+0x998>
 801c4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4f6:	18eb      	adds	r3, r5, r3
 801c4f8:	9304      	str	r3, [sp, #16]
 801c4fa:	2367      	movs	r3, #103	; 0x67
 801c4fc:	e7db      	b.n	801c4b6 <_svfprintf_r+0x8fe>
 801c4fe:	9b05      	ldr	r3, [sp, #20]
 801c500:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c502:	2d00      	cmp	r5, #0
 801c504:	4413      	add	r3, r2
 801c506:	9304      	str	r3, [sp, #16]
 801c508:	dcf7      	bgt.n	801c4fa <_svfprintf_r+0x942>
 801c50a:	9a04      	ldr	r2, [sp, #16]
 801c50c:	f1c5 0301 	rsb	r3, r5, #1
 801c510:	441a      	add	r2, r3
 801c512:	4613      	mov	r3, r2
 801c514:	e7f0      	b.n	801c4f8 <_svfprintf_r+0x940>
 801c516:	9504      	str	r5, [sp, #16]
 801c518:	e7cc      	b.n	801c4b4 <_svfprintf_r+0x8fc>
 801c51a:	2366      	movs	r3, #102	; 0x66
 801c51c:	9307      	str	r3, [sp, #28]
 801c51e:	2301      	movs	r3, #1
 801c520:	9304      	str	r3, [sp, #16]
 801c522:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801c526:	9309      	str	r3, [sp, #36]	; 0x24
 801c528:	d025      	beq.n	801c576 <_svfprintf_r+0x9be>
 801c52a:	2300      	movs	r3, #0
 801c52c:	2d00      	cmp	r5, #0
 801c52e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c532:	f77f ae61 	ble.w	801c1f8 <_svfprintf_r+0x640>
 801c536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c538:	781b      	ldrb	r3, [r3, #0]
 801c53a:	2bff      	cmp	r3, #255	; 0xff
 801c53c:	d10a      	bne.n	801c554 <_svfprintf_r+0x99c>
 801c53e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c542:	9904      	ldr	r1, [sp, #16]
 801c544:	4413      	add	r3, r2
 801c546:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c548:	fb02 1303 	mla	r3, r2, r3, r1
 801c54c:	9304      	str	r3, [sp, #16]
 801c54e:	e653      	b.n	801c1f8 <_svfprintf_r+0x640>
 801c550:	9504      	str	r5, [sp, #16]
 801c552:	e7d2      	b.n	801c4fa <_svfprintf_r+0x942>
 801c554:	42ab      	cmp	r3, r5
 801c556:	daf2      	bge.n	801c53e <_svfprintf_r+0x986>
 801c558:	1aed      	subs	r5, r5, r3
 801c55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c55c:	785b      	ldrb	r3, [r3, #1]
 801c55e:	b133      	cbz	r3, 801c56e <_svfprintf_r+0x9b6>
 801c560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c562:	3301      	adds	r3, #1
 801c564:	9309      	str	r3, [sp, #36]	; 0x24
 801c566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c568:	3301      	adds	r3, #1
 801c56a:	930a      	str	r3, [sp, #40]	; 0x28
 801c56c:	e7e3      	b.n	801c536 <_svfprintf_r+0x97e>
 801c56e:	9b08      	ldr	r3, [sp, #32]
 801c570:	3301      	adds	r3, #1
 801c572:	9308      	str	r3, [sp, #32]
 801c574:	e7df      	b.n	801c536 <_svfprintf_r+0x97e>
 801c576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c578:	9308      	str	r3, [sp, #32]
 801c57a:	e63d      	b.n	801c1f8 <_svfprintf_r+0x640>
 801c57c:	4632      	mov	r2, r6
 801c57e:	f018 0f20 	tst.w	r8, #32
 801c582:	f852 3b04 	ldr.w	r3, [r2], #4
 801c586:	9206      	str	r2, [sp, #24]
 801c588:	d009      	beq.n	801c59e <_svfprintf_r+0x9e6>
 801c58a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c58c:	4610      	mov	r0, r2
 801c58e:	17d1      	asrs	r1, r2, #31
 801c590:	e9c3 0100 	strd	r0, r1, [r3]
 801c594:	9e06      	ldr	r6, [sp, #24]
 801c596:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801c59a:	f7ff bb4d 	b.w	801bc38 <_svfprintf_r+0x80>
 801c59e:	f018 0f10 	tst.w	r8, #16
 801c5a2:	d002      	beq.n	801c5aa <_svfprintf_r+0x9f2>
 801c5a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c5a6:	601a      	str	r2, [r3, #0]
 801c5a8:	e7f4      	b.n	801c594 <_svfprintf_r+0x9dc>
 801c5aa:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c5ae:	d002      	beq.n	801c5b6 <_svfprintf_r+0x9fe>
 801c5b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c5b2:	801a      	strh	r2, [r3, #0]
 801c5b4:	e7ee      	b.n	801c594 <_svfprintf_r+0x9dc>
 801c5b6:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c5ba:	d0f3      	beq.n	801c5a4 <_svfprintf_r+0x9ec>
 801c5bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c5be:	701a      	strb	r2, [r3, #0]
 801c5c0:	e7e8      	b.n	801c594 <_svfprintf_r+0x9dc>
 801c5c2:	f048 0810 	orr.w	r8, r8, #16
 801c5c6:	f018 0f20 	tst.w	r8, #32
 801c5ca:	d01e      	beq.n	801c60a <_svfprintf_r+0xa52>
 801c5cc:	3607      	adds	r6, #7
 801c5ce:	f026 0307 	bic.w	r3, r6, #7
 801c5d2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c5d6:	9306      	str	r3, [sp, #24]
 801c5d8:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801c5dc:	2300      	movs	r3, #0
 801c5de:	2200      	movs	r2, #0
 801c5e0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801c5e4:	9a04      	ldr	r2, [sp, #16]
 801c5e6:	3201      	adds	r2, #1
 801c5e8:	f000 848d 	beq.w	801cf06 <_svfprintf_r+0x134e>
 801c5ec:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801c5f0:	9203      	str	r2, [sp, #12]
 801c5f2:	ea56 0207 	orrs.w	r2, r6, r7
 801c5f6:	f040 848c 	bne.w	801cf12 <_svfprintf_r+0x135a>
 801c5fa:	9a04      	ldr	r2, [sp, #16]
 801c5fc:	2a00      	cmp	r2, #0
 801c5fe:	f000 80f5 	beq.w	801c7ec <_svfprintf_r+0xc34>
 801c602:	2b01      	cmp	r3, #1
 801c604:	f040 8488 	bne.w	801cf18 <_svfprintf_r+0x1360>
 801c608:	e097      	b.n	801c73a <_svfprintf_r+0xb82>
 801c60a:	1d33      	adds	r3, r6, #4
 801c60c:	f018 0f10 	tst.w	r8, #16
 801c610:	9306      	str	r3, [sp, #24]
 801c612:	d001      	beq.n	801c618 <_svfprintf_r+0xa60>
 801c614:	6836      	ldr	r6, [r6, #0]
 801c616:	e003      	b.n	801c620 <_svfprintf_r+0xa68>
 801c618:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c61c:	d002      	beq.n	801c624 <_svfprintf_r+0xa6c>
 801c61e:	8836      	ldrh	r6, [r6, #0]
 801c620:	2700      	movs	r7, #0
 801c622:	e7d9      	b.n	801c5d8 <_svfprintf_r+0xa20>
 801c624:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c628:	d0f4      	beq.n	801c614 <_svfprintf_r+0xa5c>
 801c62a:	7836      	ldrb	r6, [r6, #0]
 801c62c:	e7f8      	b.n	801c620 <_svfprintf_r+0xa68>
 801c62e:	4633      	mov	r3, r6
 801c630:	2278      	movs	r2, #120	; 0x78
 801c632:	f853 6b04 	ldr.w	r6, [r3], #4
 801c636:	9306      	str	r3, [sp, #24]
 801c638:	f647 0330 	movw	r3, #30768	; 0x7830
 801c63c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801c640:	4ba1      	ldr	r3, [pc, #644]	; (801c8c8 <_svfprintf_r+0xd10>)
 801c642:	9316      	str	r3, [sp, #88]	; 0x58
 801c644:	2700      	movs	r7, #0
 801c646:	f048 0802 	orr.w	r8, r8, #2
 801c64a:	2302      	movs	r3, #2
 801c64c:	9207      	str	r2, [sp, #28]
 801c64e:	e7c6      	b.n	801c5de <_svfprintf_r+0xa26>
 801c650:	4633      	mov	r3, r6
 801c652:	2500      	movs	r5, #0
 801c654:	f853 bb04 	ldr.w	fp, [r3], #4
 801c658:	9306      	str	r3, [sp, #24]
 801c65a:	9b04      	ldr	r3, [sp, #16]
 801c65c:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801c660:	1c59      	adds	r1, r3, #1
 801c662:	d010      	beq.n	801c686 <_svfprintf_r+0xace>
 801c664:	461a      	mov	r2, r3
 801c666:	4629      	mov	r1, r5
 801c668:	4658      	mov	r0, fp
 801c66a:	f7e3 fde9 	bl	8000240 <memchr>
 801c66e:	9003      	str	r0, [sp, #12]
 801c670:	2800      	cmp	r0, #0
 801c672:	f000 80d2 	beq.w	801c81a <_svfprintf_r+0xc62>
 801c676:	eba0 030b 	sub.w	r3, r0, fp
 801c67a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801c67e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801c682:	462e      	mov	r6, r5
 801c684:	e5c0      	b.n	801c208 <_svfprintf_r+0x650>
 801c686:	4658      	mov	r0, fp
 801c688:	f7e3 fdcc 	bl	8000224 <strlen>
 801c68c:	e9cd 5003 	strd	r5, r0, [sp, #12]
 801c690:	e463      	b.n	801bf5a <_svfprintf_r+0x3a2>
 801c692:	f048 0810 	orr.w	r8, r8, #16
 801c696:	f018 0f20 	tst.w	r8, #32
 801c69a:	d007      	beq.n	801c6ac <_svfprintf_r+0xaf4>
 801c69c:	3607      	adds	r6, #7
 801c69e:	f026 0307 	bic.w	r3, r6, #7
 801c6a2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c6a6:	9306      	str	r3, [sp, #24]
 801c6a8:	2301      	movs	r3, #1
 801c6aa:	e798      	b.n	801c5de <_svfprintf_r+0xa26>
 801c6ac:	1d33      	adds	r3, r6, #4
 801c6ae:	f018 0f10 	tst.w	r8, #16
 801c6b2:	9306      	str	r3, [sp, #24]
 801c6b4:	d001      	beq.n	801c6ba <_svfprintf_r+0xb02>
 801c6b6:	6836      	ldr	r6, [r6, #0]
 801c6b8:	e003      	b.n	801c6c2 <_svfprintf_r+0xb0a>
 801c6ba:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c6be:	d002      	beq.n	801c6c6 <_svfprintf_r+0xb0e>
 801c6c0:	8836      	ldrh	r6, [r6, #0]
 801c6c2:	2700      	movs	r7, #0
 801c6c4:	e7f0      	b.n	801c6a8 <_svfprintf_r+0xaf0>
 801c6c6:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c6ca:	d0f4      	beq.n	801c6b6 <_svfprintf_r+0xafe>
 801c6cc:	7836      	ldrb	r6, [r6, #0]
 801c6ce:	e7f8      	b.n	801c6c2 <_svfprintf_r+0xb0a>
 801c6d0:	4b7e      	ldr	r3, [pc, #504]	; (801c8cc <_svfprintf_r+0xd14>)
 801c6d2:	9316      	str	r3, [sp, #88]	; 0x58
 801c6d4:	f018 0f20 	tst.w	r8, #32
 801c6d8:	d019      	beq.n	801c70e <_svfprintf_r+0xb56>
 801c6da:	3607      	adds	r6, #7
 801c6dc:	f026 0307 	bic.w	r3, r6, #7
 801c6e0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c6e4:	9306      	str	r3, [sp, #24]
 801c6e6:	f018 0f01 	tst.w	r8, #1
 801c6ea:	d00a      	beq.n	801c702 <_svfprintf_r+0xb4a>
 801c6ec:	ea56 0307 	orrs.w	r3, r6, r7
 801c6f0:	d007      	beq.n	801c702 <_svfprintf_r+0xb4a>
 801c6f2:	2330      	movs	r3, #48	; 0x30
 801c6f4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801c6f8:	9b07      	ldr	r3, [sp, #28]
 801c6fa:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801c6fe:	f048 0802 	orr.w	r8, r8, #2
 801c702:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801c706:	2302      	movs	r3, #2
 801c708:	e769      	b.n	801c5de <_svfprintf_r+0xa26>
 801c70a:	4b6f      	ldr	r3, [pc, #444]	; (801c8c8 <_svfprintf_r+0xd10>)
 801c70c:	e7e1      	b.n	801c6d2 <_svfprintf_r+0xb1a>
 801c70e:	1d33      	adds	r3, r6, #4
 801c710:	f018 0f10 	tst.w	r8, #16
 801c714:	9306      	str	r3, [sp, #24]
 801c716:	d001      	beq.n	801c71c <_svfprintf_r+0xb64>
 801c718:	6836      	ldr	r6, [r6, #0]
 801c71a:	e003      	b.n	801c724 <_svfprintf_r+0xb6c>
 801c71c:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c720:	d002      	beq.n	801c728 <_svfprintf_r+0xb70>
 801c722:	8836      	ldrh	r6, [r6, #0]
 801c724:	2700      	movs	r7, #0
 801c726:	e7de      	b.n	801c6e6 <_svfprintf_r+0xb2e>
 801c728:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c72c:	d0f4      	beq.n	801c718 <_svfprintf_r+0xb60>
 801c72e:	7836      	ldrb	r6, [r6, #0]
 801c730:	e7f8      	b.n	801c724 <_svfprintf_r+0xb6c>
 801c732:	2f00      	cmp	r7, #0
 801c734:	bf08      	it	eq
 801c736:	2e0a      	cmpeq	r6, #10
 801c738:	d206      	bcs.n	801c748 <_svfprintf_r+0xb90>
 801c73a:	3630      	adds	r6, #48	; 0x30
 801c73c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801c740:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 801c744:	f000 bc06 	b.w	801cf54 <_svfprintf_r+0x139c>
 801c748:	2300      	movs	r3, #0
 801c74a:	9305      	str	r3, [sp, #20]
 801c74c:	9b03      	ldr	r3, [sp, #12]
 801c74e:	ad4e      	add	r5, sp, #312	; 0x138
 801c750:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801c754:	220a      	movs	r2, #10
 801c756:	2300      	movs	r3, #0
 801c758:	4630      	mov	r0, r6
 801c75a:	4639      	mov	r1, r7
 801c75c:	f7e4 faa4 	bl	8000ca8 <__aeabi_uldivmod>
 801c760:	9b05      	ldr	r3, [sp, #20]
 801c762:	3230      	adds	r2, #48	; 0x30
 801c764:	3301      	adds	r3, #1
 801c766:	f105 3bff 	add.w	fp, r5, #4294967295
 801c76a:	f805 2c01 	strb.w	r2, [r5, #-1]
 801c76e:	9305      	str	r3, [sp, #20]
 801c770:	f1b8 0f00 	cmp.w	r8, #0
 801c774:	d019      	beq.n	801c7aa <_svfprintf_r+0xbf2>
 801c776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c778:	9a05      	ldr	r2, [sp, #20]
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	429a      	cmp	r2, r3
 801c77e:	d114      	bne.n	801c7aa <_svfprintf_r+0xbf2>
 801c780:	2aff      	cmp	r2, #255	; 0xff
 801c782:	d012      	beq.n	801c7aa <_svfprintf_r+0xbf2>
 801c784:	2f00      	cmp	r7, #0
 801c786:	bf08      	it	eq
 801c788:	2e0a      	cmpeq	r6, #10
 801c78a:	d30e      	bcc.n	801c7aa <_svfprintf_r+0xbf2>
 801c78c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c78e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c790:	ebab 0b03 	sub.w	fp, fp, r3
 801c794:	461a      	mov	r2, r3
 801c796:	4658      	mov	r0, fp
 801c798:	f7ff f96b 	bl	801ba72 <strncpy>
 801c79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c79e:	785d      	ldrb	r5, [r3, #1]
 801c7a0:	b195      	cbz	r5, 801c7c8 <_svfprintf_r+0xc10>
 801c7a2:	3301      	adds	r3, #1
 801c7a4:	930a      	str	r3, [sp, #40]	; 0x28
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	9305      	str	r3, [sp, #20]
 801c7aa:	220a      	movs	r2, #10
 801c7ac:	2300      	movs	r3, #0
 801c7ae:	4630      	mov	r0, r6
 801c7b0:	4639      	mov	r1, r7
 801c7b2:	f7e4 fa79 	bl	8000ca8 <__aeabi_uldivmod>
 801c7b6:	2f00      	cmp	r7, #0
 801c7b8:	bf08      	it	eq
 801c7ba:	2e0a      	cmpeq	r6, #10
 801c7bc:	f0c0 83ca 	bcc.w	801cf54 <_svfprintf_r+0x139c>
 801c7c0:	4606      	mov	r6, r0
 801c7c2:	460f      	mov	r7, r1
 801c7c4:	465d      	mov	r5, fp
 801c7c6:	e7c5      	b.n	801c754 <_svfprintf_r+0xb9c>
 801c7c8:	9505      	str	r5, [sp, #20]
 801c7ca:	e7ee      	b.n	801c7aa <_svfprintf_r+0xbf2>
 801c7cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c7ce:	f006 030f 	and.w	r3, r6, #15
 801c7d2:	5cd3      	ldrb	r3, [r2, r3]
 801c7d4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801c7d8:	0933      	lsrs	r3, r6, #4
 801c7da:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801c7de:	093a      	lsrs	r2, r7, #4
 801c7e0:	461e      	mov	r6, r3
 801c7e2:	4617      	mov	r7, r2
 801c7e4:	ea56 0307 	orrs.w	r3, r6, r7
 801c7e8:	d1f0      	bne.n	801c7cc <_svfprintf_r+0xc14>
 801c7ea:	e3b3      	b.n	801cf54 <_svfprintf_r+0x139c>
 801c7ec:	b933      	cbnz	r3, 801c7fc <_svfprintf_r+0xc44>
 801c7ee:	f018 0f01 	tst.w	r8, #1
 801c7f2:	d003      	beq.n	801c7fc <_svfprintf_r+0xc44>
 801c7f4:	2330      	movs	r3, #48	; 0x30
 801c7f6:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801c7fa:	e7a1      	b.n	801c740 <_svfprintf_r+0xb88>
 801c7fc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801c800:	e3a8      	b.n	801cf54 <_svfprintf_r+0x139c>
 801c802:	9b07      	ldr	r3, [sp, #28]
 801c804:	2b00      	cmp	r3, #0
 801c806:	f000 8373 	beq.w	801cef0 <_svfprintf_r+0x1338>
 801c80a:	2000      	movs	r0, #0
 801c80c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801c810:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801c814:	9606      	str	r6, [sp, #24]
 801c816:	f7ff bb34 	b.w	801be82 <_svfprintf_r+0x2ca>
 801c81a:	9e03      	ldr	r6, [sp, #12]
 801c81c:	f7ff bb9e 	b.w	801bf5c <_svfprintf_r+0x3a4>
 801c820:	2010      	movs	r0, #16
 801c822:	4402      	add	r2, r0
 801c824:	2b07      	cmp	r3, #7
 801c826:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c82a:	6060      	str	r0, [r4, #4]
 801c82c:	dd08      	ble.n	801c840 <_svfprintf_r+0xc88>
 801c82e:	aa22      	add	r2, sp, #136	; 0x88
 801c830:	4649      	mov	r1, r9
 801c832:	4650      	mov	r0, sl
 801c834:	f004 f9e0 	bl	8020bf8 <__ssprint_r>
 801c838:	2800      	cmp	r0, #0
 801c83a:	f040 8337 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c83e:	a925      	add	r1, sp, #148	; 0x94
 801c840:	3f10      	subs	r7, #16
 801c842:	460c      	mov	r4, r1
 801c844:	e4fb      	b.n	801c23e <_svfprintf_r+0x686>
 801c846:	460c      	mov	r4, r1
 801c848:	e514      	b.n	801c274 <_svfprintf_r+0x6bc>
 801c84a:	aa22      	add	r2, sp, #136	; 0x88
 801c84c:	4649      	mov	r1, r9
 801c84e:	4650      	mov	r0, sl
 801c850:	f004 f9d2 	bl	8020bf8 <__ssprint_r>
 801c854:	2800      	cmp	r0, #0
 801c856:	f040 8329 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c85a:	ac25      	add	r4, sp, #148	; 0x94
 801c85c:	e51c      	b.n	801c298 <_svfprintf_r+0x6e0>
 801c85e:	aa22      	add	r2, sp, #136	; 0x88
 801c860:	4649      	mov	r1, r9
 801c862:	4650      	mov	r0, sl
 801c864:	f004 f9c8 	bl	8020bf8 <__ssprint_r>
 801c868:	2800      	cmp	r0, #0
 801c86a:	f040 831f 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c86e:	ac25      	add	r4, sp, #148	; 0x94
 801c870:	e522      	b.n	801c2b8 <_svfprintf_r+0x700>
 801c872:	2010      	movs	r0, #16
 801c874:	4402      	add	r2, r0
 801c876:	2b07      	cmp	r3, #7
 801c878:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c87c:	6060      	str	r0, [r4, #4]
 801c87e:	dd08      	ble.n	801c892 <_svfprintf_r+0xcda>
 801c880:	aa22      	add	r2, sp, #136	; 0x88
 801c882:	4649      	mov	r1, r9
 801c884:	4650      	mov	r0, sl
 801c886:	f004 f9b7 	bl	8020bf8 <__ssprint_r>
 801c88a:	2800      	cmp	r0, #0
 801c88c:	f040 830e 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c890:	a925      	add	r1, sp, #148	; 0x94
 801c892:	3f10      	subs	r7, #16
 801c894:	460c      	mov	r4, r1
 801c896:	e517      	b.n	801c2c8 <_svfprintf_r+0x710>
 801c898:	460c      	mov	r4, r1
 801c89a:	e530      	b.n	801c2fe <_svfprintf_r+0x746>
 801c89c:	2010      	movs	r0, #16
 801c89e:	4402      	add	r2, r0
 801c8a0:	2b07      	cmp	r3, #7
 801c8a2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c8a6:	6060      	str	r0, [r4, #4]
 801c8a8:	dd08      	ble.n	801c8bc <_svfprintf_r+0xd04>
 801c8aa:	aa22      	add	r2, sp, #136	; 0x88
 801c8ac:	4649      	mov	r1, r9
 801c8ae:	4650      	mov	r0, sl
 801c8b0:	f004 f9a2 	bl	8020bf8 <__ssprint_r>
 801c8b4:	2800      	cmp	r0, #0
 801c8b6:	f040 82f9 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c8ba:	a925      	add	r1, sp, #148	; 0x94
 801c8bc:	3e10      	subs	r6, #16
 801c8be:	460c      	mov	r4, r1
 801c8c0:	e522      	b.n	801c308 <_svfprintf_r+0x750>
 801c8c2:	460c      	mov	r4, r1
 801c8c4:	e548      	b.n	801c358 <_svfprintf_r+0x7a0>
 801c8c6:	bf00      	nop
 801c8c8:	08029288 	.word	0x08029288
 801c8cc:	08029299 	.word	0x08029299
 801c8d0:	9b07      	ldr	r3, [sp, #28]
 801c8d2:	2b65      	cmp	r3, #101	; 0x65
 801c8d4:	f340 8232 	ble.w	801cd3c <_svfprintf_r+0x1184>
 801c8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c8dc:	2200      	movs	r2, #0
 801c8de:	2300      	movs	r3, #0
 801c8e0:	f7e4 f922 	bl	8000b28 <__aeabi_dcmpeq>
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	d068      	beq.n	801c9ba <_svfprintf_r+0xe02>
 801c8e8:	4b6d      	ldr	r3, [pc, #436]	; (801caa0 <_svfprintf_r+0xee8>)
 801c8ea:	6023      	str	r3, [r4, #0]
 801c8ec:	2301      	movs	r3, #1
 801c8ee:	441e      	add	r6, r3
 801c8f0:	6063      	str	r3, [r4, #4]
 801c8f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c8f4:	9624      	str	r6, [sp, #144]	; 0x90
 801c8f6:	3301      	adds	r3, #1
 801c8f8:	2b07      	cmp	r3, #7
 801c8fa:	9323      	str	r3, [sp, #140]	; 0x8c
 801c8fc:	dc37      	bgt.n	801c96e <_svfprintf_r+0xdb6>
 801c8fe:	3408      	adds	r4, #8
 801c900:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c902:	9a05      	ldr	r2, [sp, #20]
 801c904:	4293      	cmp	r3, r2
 801c906:	db03      	blt.n	801c910 <_svfprintf_r+0xd58>
 801c908:	f018 0f01 	tst.w	r8, #1
 801c90c:	f43f ad36 	beq.w	801c37c <_svfprintf_r+0x7c4>
 801c910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c912:	6023      	str	r3, [r4, #0]
 801c914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c918:	6063      	str	r3, [r4, #4]
 801c91a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c91c:	4413      	add	r3, r2
 801c91e:	9324      	str	r3, [sp, #144]	; 0x90
 801c920:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c922:	3301      	adds	r3, #1
 801c924:	2b07      	cmp	r3, #7
 801c926:	9323      	str	r3, [sp, #140]	; 0x8c
 801c928:	dc2b      	bgt.n	801c982 <_svfprintf_r+0xdca>
 801c92a:	3408      	adds	r4, #8
 801c92c:	9b05      	ldr	r3, [sp, #20]
 801c92e:	1e5d      	subs	r5, r3, #1
 801c930:	2d00      	cmp	r5, #0
 801c932:	f77f ad23 	ble.w	801c37c <_svfprintf_r+0x7c4>
 801c936:	4e5b      	ldr	r6, [pc, #364]	; (801caa4 <_svfprintf_r+0xeec>)
 801c938:	2710      	movs	r7, #16
 801c93a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c93e:	2d10      	cmp	r5, #16
 801c940:	f103 0301 	add.w	r3, r3, #1
 801c944:	f104 0108 	add.w	r1, r4, #8
 801c948:	6026      	str	r6, [r4, #0]
 801c94a:	dc24      	bgt.n	801c996 <_svfprintf_r+0xdde>
 801c94c:	6065      	str	r5, [r4, #4]
 801c94e:	2b07      	cmp	r3, #7
 801c950:	4415      	add	r5, r2
 801c952:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801c956:	f340 8288 	ble.w	801ce6a <_svfprintf_r+0x12b2>
 801c95a:	aa22      	add	r2, sp, #136	; 0x88
 801c95c:	4649      	mov	r1, r9
 801c95e:	4650      	mov	r0, sl
 801c960:	f004 f94a 	bl	8020bf8 <__ssprint_r>
 801c964:	2800      	cmp	r0, #0
 801c966:	f040 82a1 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c96a:	ac25      	add	r4, sp, #148	; 0x94
 801c96c:	e506      	b.n	801c37c <_svfprintf_r+0x7c4>
 801c96e:	aa22      	add	r2, sp, #136	; 0x88
 801c970:	4649      	mov	r1, r9
 801c972:	4650      	mov	r0, sl
 801c974:	f004 f940 	bl	8020bf8 <__ssprint_r>
 801c978:	2800      	cmp	r0, #0
 801c97a:	f040 8297 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c97e:	ac25      	add	r4, sp, #148	; 0x94
 801c980:	e7be      	b.n	801c900 <_svfprintf_r+0xd48>
 801c982:	aa22      	add	r2, sp, #136	; 0x88
 801c984:	4649      	mov	r1, r9
 801c986:	4650      	mov	r0, sl
 801c988:	f004 f936 	bl	8020bf8 <__ssprint_r>
 801c98c:	2800      	cmp	r0, #0
 801c98e:	f040 828d 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c992:	ac25      	add	r4, sp, #148	; 0x94
 801c994:	e7ca      	b.n	801c92c <_svfprintf_r+0xd74>
 801c996:	3210      	adds	r2, #16
 801c998:	2b07      	cmp	r3, #7
 801c99a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c99e:	6067      	str	r7, [r4, #4]
 801c9a0:	dd08      	ble.n	801c9b4 <_svfprintf_r+0xdfc>
 801c9a2:	aa22      	add	r2, sp, #136	; 0x88
 801c9a4:	4649      	mov	r1, r9
 801c9a6:	4650      	mov	r0, sl
 801c9a8:	f004 f926 	bl	8020bf8 <__ssprint_r>
 801c9ac:	2800      	cmp	r0, #0
 801c9ae:	f040 827d 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801c9b2:	a925      	add	r1, sp, #148	; 0x94
 801c9b4:	3d10      	subs	r5, #16
 801c9b6:	460c      	mov	r4, r1
 801c9b8:	e7bf      	b.n	801c93a <_svfprintf_r+0xd82>
 801c9ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	dc73      	bgt.n	801caa8 <_svfprintf_r+0xef0>
 801c9c0:	4b37      	ldr	r3, [pc, #220]	; (801caa0 <_svfprintf_r+0xee8>)
 801c9c2:	6023      	str	r3, [r4, #0]
 801c9c4:	2301      	movs	r3, #1
 801c9c6:	441e      	add	r6, r3
 801c9c8:	6063      	str	r3, [r4, #4]
 801c9ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c9cc:	9624      	str	r6, [sp, #144]	; 0x90
 801c9ce:	3301      	adds	r3, #1
 801c9d0:	2b07      	cmp	r3, #7
 801c9d2:	9323      	str	r3, [sp, #140]	; 0x8c
 801c9d4:	dc3d      	bgt.n	801ca52 <_svfprintf_r+0xe9a>
 801c9d6:	3408      	adds	r4, #8
 801c9d8:	9905      	ldr	r1, [sp, #20]
 801c9da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c9dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c9de:	430a      	orrs	r2, r1
 801c9e0:	f008 0101 	and.w	r1, r8, #1
 801c9e4:	430a      	orrs	r2, r1
 801c9e6:	f43f acc9 	beq.w	801c37c <_svfprintf_r+0x7c4>
 801c9ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9ec:	6022      	str	r2, [r4, #0]
 801c9ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c9f0:	6062      	str	r2, [r4, #4]
 801c9f2:	4413      	add	r3, r2
 801c9f4:	9324      	str	r3, [sp, #144]	; 0x90
 801c9f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c9f8:	3301      	adds	r3, #1
 801c9fa:	2b07      	cmp	r3, #7
 801c9fc:	9323      	str	r3, [sp, #140]	; 0x8c
 801c9fe:	dc32      	bgt.n	801ca66 <_svfprintf_r+0xeae>
 801ca00:	3408      	adds	r4, #8
 801ca02:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ca04:	2d00      	cmp	r5, #0
 801ca06:	da1b      	bge.n	801ca40 <_svfprintf_r+0xe88>
 801ca08:	4e26      	ldr	r6, [pc, #152]	; (801caa4 <_svfprintf_r+0xeec>)
 801ca0a:	426d      	negs	r5, r5
 801ca0c:	4623      	mov	r3, r4
 801ca0e:	2710      	movs	r7, #16
 801ca10:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801ca14:	2d10      	cmp	r5, #16
 801ca16:	f102 0201 	add.w	r2, r2, #1
 801ca1a:	f104 0408 	add.w	r4, r4, #8
 801ca1e:	601e      	str	r6, [r3, #0]
 801ca20:	dc2b      	bgt.n	801ca7a <_svfprintf_r+0xec2>
 801ca22:	605d      	str	r5, [r3, #4]
 801ca24:	2a07      	cmp	r2, #7
 801ca26:	440d      	add	r5, r1
 801ca28:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801ca2c:	dd08      	ble.n	801ca40 <_svfprintf_r+0xe88>
 801ca2e:	aa22      	add	r2, sp, #136	; 0x88
 801ca30:	4649      	mov	r1, r9
 801ca32:	4650      	mov	r0, sl
 801ca34:	f004 f8e0 	bl	8020bf8 <__ssprint_r>
 801ca38:	2800      	cmp	r0, #0
 801ca3a:	f040 8237 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801ca3e:	ac25      	add	r4, sp, #148	; 0x94
 801ca40:	9b05      	ldr	r3, [sp, #20]
 801ca42:	9a05      	ldr	r2, [sp, #20]
 801ca44:	6063      	str	r3, [r4, #4]
 801ca46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ca48:	f8c4 b000 	str.w	fp, [r4]
 801ca4c:	4413      	add	r3, r2
 801ca4e:	9324      	str	r3, [sp, #144]	; 0x90
 801ca50:	e48d      	b.n	801c36e <_svfprintf_r+0x7b6>
 801ca52:	aa22      	add	r2, sp, #136	; 0x88
 801ca54:	4649      	mov	r1, r9
 801ca56:	4650      	mov	r0, sl
 801ca58:	f004 f8ce 	bl	8020bf8 <__ssprint_r>
 801ca5c:	2800      	cmp	r0, #0
 801ca5e:	f040 8225 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801ca62:	ac25      	add	r4, sp, #148	; 0x94
 801ca64:	e7b8      	b.n	801c9d8 <_svfprintf_r+0xe20>
 801ca66:	aa22      	add	r2, sp, #136	; 0x88
 801ca68:	4649      	mov	r1, r9
 801ca6a:	4650      	mov	r0, sl
 801ca6c:	f004 f8c4 	bl	8020bf8 <__ssprint_r>
 801ca70:	2800      	cmp	r0, #0
 801ca72:	f040 821b 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801ca76:	ac25      	add	r4, sp, #148	; 0x94
 801ca78:	e7c3      	b.n	801ca02 <_svfprintf_r+0xe4a>
 801ca7a:	3110      	adds	r1, #16
 801ca7c:	2a07      	cmp	r2, #7
 801ca7e:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801ca82:	605f      	str	r7, [r3, #4]
 801ca84:	dd08      	ble.n	801ca98 <_svfprintf_r+0xee0>
 801ca86:	aa22      	add	r2, sp, #136	; 0x88
 801ca88:	4649      	mov	r1, r9
 801ca8a:	4650      	mov	r0, sl
 801ca8c:	f004 f8b4 	bl	8020bf8 <__ssprint_r>
 801ca90:	2800      	cmp	r0, #0
 801ca92:	f040 820b 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801ca96:	ac25      	add	r4, sp, #148	; 0x94
 801ca98:	3d10      	subs	r5, #16
 801ca9a:	4623      	mov	r3, r4
 801ca9c:	e7b8      	b.n	801ca10 <_svfprintf_r+0xe58>
 801ca9e:	bf00      	nop
 801caa0:	080292aa 	.word	0x080292aa
 801caa4:	080292bc 	.word	0x080292bc
 801caa8:	9b05      	ldr	r3, [sp, #20]
 801caaa:	42ab      	cmp	r3, r5
 801caac:	bfa8      	it	ge
 801caae:	462b      	movge	r3, r5
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	461f      	mov	r7, r3
 801cab4:	dd0a      	ble.n	801cacc <_svfprintf_r+0xf14>
 801cab6:	441e      	add	r6, r3
 801cab8:	e9c4 b300 	strd	fp, r3, [r4]
 801cabc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cabe:	9624      	str	r6, [sp, #144]	; 0x90
 801cac0:	3301      	adds	r3, #1
 801cac2:	2b07      	cmp	r3, #7
 801cac4:	9323      	str	r3, [sp, #140]	; 0x8c
 801cac6:	f300 8086 	bgt.w	801cbd6 <_svfprintf_r+0x101e>
 801caca:	3408      	adds	r4, #8
 801cacc:	2f00      	cmp	r7, #0
 801cace:	bfac      	ite	ge
 801cad0:	1bee      	subge	r6, r5, r7
 801cad2:	462e      	movlt	r6, r5
 801cad4:	2e00      	cmp	r6, #0
 801cad6:	dd19      	ble.n	801cb0c <_svfprintf_r+0xf54>
 801cad8:	4f97      	ldr	r7, [pc, #604]	; (801cd38 <_svfprintf_r+0x1180>)
 801cada:	6027      	str	r7, [r4, #0]
 801cadc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801cae0:	2e10      	cmp	r6, #16
 801cae2:	f103 0301 	add.w	r3, r3, #1
 801cae6:	f104 0108 	add.w	r1, r4, #8
 801caea:	dc7e      	bgt.n	801cbea <_svfprintf_r+0x1032>
 801caec:	6066      	str	r6, [r4, #4]
 801caee:	2b07      	cmp	r3, #7
 801caf0:	4416      	add	r6, r2
 801caf2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801caf6:	f340 808b 	ble.w	801cc10 <_svfprintf_r+0x1058>
 801cafa:	aa22      	add	r2, sp, #136	; 0x88
 801cafc:	4649      	mov	r1, r9
 801cafe:	4650      	mov	r0, sl
 801cb00:	f004 f87a 	bl	8020bf8 <__ssprint_r>
 801cb04:	2800      	cmp	r0, #0
 801cb06:	f040 81d1 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cb0a:	ac25      	add	r4, sp, #148	; 0x94
 801cb0c:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801cb10:	445d      	add	r5, fp
 801cb12:	d00b      	beq.n	801cb2c <_svfprintf_r+0xf74>
 801cb14:	4e88      	ldr	r6, [pc, #544]	; (801cd38 <_svfprintf_r+0x1180>)
 801cb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d17b      	bne.n	801cc14 <_svfprintf_r+0x105c>
 801cb1c:	9b08      	ldr	r3, [sp, #32]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d17b      	bne.n	801cc1a <_svfprintf_r+0x1062>
 801cb22:	9b05      	ldr	r3, [sp, #20]
 801cb24:	445b      	add	r3, fp
 801cb26:	429d      	cmp	r5, r3
 801cb28:	bf28      	it	cs
 801cb2a:	461d      	movcs	r5, r3
 801cb2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb2e:	9a05      	ldr	r2, [sp, #20]
 801cb30:	4293      	cmp	r3, r2
 801cb32:	db02      	blt.n	801cb3a <_svfprintf_r+0xf82>
 801cb34:	f018 0f01 	tst.w	r8, #1
 801cb38:	d00e      	beq.n	801cb58 <_svfprintf_r+0xfa0>
 801cb3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cb3c:	6023      	str	r3, [r4, #0]
 801cb3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb42:	6063      	str	r3, [r4, #4]
 801cb44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb46:	4413      	add	r3, r2
 801cb48:	9324      	str	r3, [sp, #144]	; 0x90
 801cb4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cb4c:	3301      	adds	r3, #1
 801cb4e:	2b07      	cmp	r3, #7
 801cb50:	9323      	str	r3, [sp, #140]	; 0x8c
 801cb52:	f300 80dd 	bgt.w	801cd10 <_svfprintf_r+0x1158>
 801cb56:	3408      	adds	r4, #8
 801cb58:	9b05      	ldr	r3, [sp, #20]
 801cb5a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801cb5c:	eb0b 0203 	add.w	r2, fp, r3
 801cb60:	1b9e      	subs	r6, r3, r6
 801cb62:	1b52      	subs	r2, r2, r5
 801cb64:	4296      	cmp	r6, r2
 801cb66:	bfa8      	it	ge
 801cb68:	4616      	movge	r6, r2
 801cb6a:	2e00      	cmp	r6, #0
 801cb6c:	dd0b      	ble.n	801cb86 <_svfprintf_r+0xfce>
 801cb6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb70:	4433      	add	r3, r6
 801cb72:	9324      	str	r3, [sp, #144]	; 0x90
 801cb74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cb76:	3301      	adds	r3, #1
 801cb78:	2b07      	cmp	r3, #7
 801cb7a:	e9c4 5600 	strd	r5, r6, [r4]
 801cb7e:	9323      	str	r3, [sp, #140]	; 0x8c
 801cb80:	f300 80d0 	bgt.w	801cd24 <_svfprintf_r+0x116c>
 801cb84:	3408      	adds	r4, #8
 801cb86:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801cb88:	9b05      	ldr	r3, [sp, #20]
 801cb8a:	2e00      	cmp	r6, #0
 801cb8c:	eba3 0505 	sub.w	r5, r3, r5
 801cb90:	bfa8      	it	ge
 801cb92:	1bad      	subge	r5, r5, r6
 801cb94:	2d00      	cmp	r5, #0
 801cb96:	f77f abf1 	ble.w	801c37c <_svfprintf_r+0x7c4>
 801cb9a:	4e67      	ldr	r6, [pc, #412]	; (801cd38 <_svfprintf_r+0x1180>)
 801cb9c:	2710      	movs	r7, #16
 801cb9e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801cba2:	2d10      	cmp	r5, #16
 801cba4:	f103 0301 	add.w	r3, r3, #1
 801cba8:	f104 0108 	add.w	r1, r4, #8
 801cbac:	6026      	str	r6, [r4, #0]
 801cbae:	f77f aecd 	ble.w	801c94c <_svfprintf_r+0xd94>
 801cbb2:	3210      	adds	r2, #16
 801cbb4:	2b07      	cmp	r3, #7
 801cbb6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cbba:	6067      	str	r7, [r4, #4]
 801cbbc:	dd08      	ble.n	801cbd0 <_svfprintf_r+0x1018>
 801cbbe:	aa22      	add	r2, sp, #136	; 0x88
 801cbc0:	4649      	mov	r1, r9
 801cbc2:	4650      	mov	r0, sl
 801cbc4:	f004 f818 	bl	8020bf8 <__ssprint_r>
 801cbc8:	2800      	cmp	r0, #0
 801cbca:	f040 816f 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cbce:	a925      	add	r1, sp, #148	; 0x94
 801cbd0:	3d10      	subs	r5, #16
 801cbd2:	460c      	mov	r4, r1
 801cbd4:	e7e3      	b.n	801cb9e <_svfprintf_r+0xfe6>
 801cbd6:	aa22      	add	r2, sp, #136	; 0x88
 801cbd8:	4649      	mov	r1, r9
 801cbda:	4650      	mov	r0, sl
 801cbdc:	f004 f80c 	bl	8020bf8 <__ssprint_r>
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	f040 8163 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cbe6:	ac25      	add	r4, sp, #148	; 0x94
 801cbe8:	e770      	b.n	801cacc <_svfprintf_r+0xf14>
 801cbea:	2010      	movs	r0, #16
 801cbec:	4402      	add	r2, r0
 801cbee:	2b07      	cmp	r3, #7
 801cbf0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cbf4:	6060      	str	r0, [r4, #4]
 801cbf6:	dd08      	ble.n	801cc0a <_svfprintf_r+0x1052>
 801cbf8:	aa22      	add	r2, sp, #136	; 0x88
 801cbfa:	4649      	mov	r1, r9
 801cbfc:	4650      	mov	r0, sl
 801cbfe:	f003 fffb 	bl	8020bf8 <__ssprint_r>
 801cc02:	2800      	cmp	r0, #0
 801cc04:	f040 8152 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cc08:	a925      	add	r1, sp, #148	; 0x94
 801cc0a:	3e10      	subs	r6, #16
 801cc0c:	460c      	mov	r4, r1
 801cc0e:	e764      	b.n	801cada <_svfprintf_r+0xf22>
 801cc10:	460c      	mov	r4, r1
 801cc12:	e77b      	b.n	801cb0c <_svfprintf_r+0xf54>
 801cc14:	9b08      	ldr	r3, [sp, #32]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d04a      	beq.n	801ccb0 <_svfprintf_r+0x10f8>
 801cc1a:	9b08      	ldr	r3, [sp, #32]
 801cc1c:	3b01      	subs	r3, #1
 801cc1e:	9308      	str	r3, [sp, #32]
 801cc20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cc22:	6023      	str	r3, [r4, #0]
 801cc24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cc26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc28:	6063      	str	r3, [r4, #4]
 801cc2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc2c:	4413      	add	r3, r2
 801cc2e:	9324      	str	r3, [sp, #144]	; 0x90
 801cc30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc32:	3301      	adds	r3, #1
 801cc34:	2b07      	cmp	r3, #7
 801cc36:	9323      	str	r3, [sp, #140]	; 0x8c
 801cc38:	dc41      	bgt.n	801ccbe <_svfprintf_r+0x1106>
 801cc3a:	3408      	adds	r4, #8
 801cc3c:	9b05      	ldr	r3, [sp, #20]
 801cc3e:	445b      	add	r3, fp
 801cc40:	1b5a      	subs	r2, r3, r5
 801cc42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc44:	781b      	ldrb	r3, [r3, #0]
 801cc46:	4293      	cmp	r3, r2
 801cc48:	bfa8      	it	ge
 801cc4a:	4613      	movge	r3, r2
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	461f      	mov	r7, r3
 801cc50:	dd0a      	ble.n	801cc68 <_svfprintf_r+0x10b0>
 801cc52:	e9c4 5300 	strd	r5, r3, [r4]
 801cc56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc58:	443b      	add	r3, r7
 801cc5a:	9324      	str	r3, [sp, #144]	; 0x90
 801cc5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc5e:	3301      	adds	r3, #1
 801cc60:	2b07      	cmp	r3, #7
 801cc62:	9323      	str	r3, [sp, #140]	; 0x8c
 801cc64:	dc35      	bgt.n	801ccd2 <_svfprintf_r+0x111a>
 801cc66:	3408      	adds	r4, #8
 801cc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc6a:	781b      	ldrb	r3, [r3, #0]
 801cc6c:	2f00      	cmp	r7, #0
 801cc6e:	bfac      	ite	ge
 801cc70:	1bdf      	subge	r7, r3, r7
 801cc72:	461f      	movlt	r7, r3
 801cc74:	2f00      	cmp	r7, #0
 801cc76:	dd17      	ble.n	801cca8 <_svfprintf_r+0x10f0>
 801cc78:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801cc7c:	2f10      	cmp	r7, #16
 801cc7e:	f102 0201 	add.w	r2, r2, #1
 801cc82:	f104 0108 	add.w	r1, r4, #8
 801cc86:	6026      	str	r6, [r4, #0]
 801cc88:	dc2d      	bgt.n	801cce6 <_svfprintf_r+0x112e>
 801cc8a:	443b      	add	r3, r7
 801cc8c:	2a07      	cmp	r2, #7
 801cc8e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801cc92:	6067      	str	r7, [r4, #4]
 801cc94:	dd3a      	ble.n	801cd0c <_svfprintf_r+0x1154>
 801cc96:	aa22      	add	r2, sp, #136	; 0x88
 801cc98:	4649      	mov	r1, r9
 801cc9a:	4650      	mov	r0, sl
 801cc9c:	f003 ffac 	bl	8020bf8 <__ssprint_r>
 801cca0:	2800      	cmp	r0, #0
 801cca2:	f040 8103 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cca6:	ac25      	add	r4, sp, #148	; 0x94
 801cca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccaa:	781b      	ldrb	r3, [r3, #0]
 801ccac:	441d      	add	r5, r3
 801ccae:	e732      	b.n	801cb16 <_svfprintf_r+0xf5e>
 801ccb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccb2:	3b01      	subs	r3, #1
 801ccb4:	930a      	str	r3, [sp, #40]	; 0x28
 801ccb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccb8:	3b01      	subs	r3, #1
 801ccba:	9309      	str	r3, [sp, #36]	; 0x24
 801ccbc:	e7b0      	b.n	801cc20 <_svfprintf_r+0x1068>
 801ccbe:	aa22      	add	r2, sp, #136	; 0x88
 801ccc0:	4649      	mov	r1, r9
 801ccc2:	4650      	mov	r0, sl
 801ccc4:	f003 ff98 	bl	8020bf8 <__ssprint_r>
 801ccc8:	2800      	cmp	r0, #0
 801ccca:	f040 80ef 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801ccce:	ac25      	add	r4, sp, #148	; 0x94
 801ccd0:	e7b4      	b.n	801cc3c <_svfprintf_r+0x1084>
 801ccd2:	aa22      	add	r2, sp, #136	; 0x88
 801ccd4:	4649      	mov	r1, r9
 801ccd6:	4650      	mov	r0, sl
 801ccd8:	f003 ff8e 	bl	8020bf8 <__ssprint_r>
 801ccdc:	2800      	cmp	r0, #0
 801ccde:	f040 80e5 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cce2:	ac25      	add	r4, sp, #148	; 0x94
 801cce4:	e7c0      	b.n	801cc68 <_svfprintf_r+0x10b0>
 801cce6:	2010      	movs	r0, #16
 801cce8:	4403      	add	r3, r0
 801ccea:	2a07      	cmp	r2, #7
 801ccec:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801ccf0:	6060      	str	r0, [r4, #4]
 801ccf2:	dd08      	ble.n	801cd06 <_svfprintf_r+0x114e>
 801ccf4:	aa22      	add	r2, sp, #136	; 0x88
 801ccf6:	4649      	mov	r1, r9
 801ccf8:	4650      	mov	r0, sl
 801ccfa:	f003 ff7d 	bl	8020bf8 <__ssprint_r>
 801ccfe:	2800      	cmp	r0, #0
 801cd00:	f040 80d4 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cd04:	a925      	add	r1, sp, #148	; 0x94
 801cd06:	3f10      	subs	r7, #16
 801cd08:	460c      	mov	r4, r1
 801cd0a:	e7b5      	b.n	801cc78 <_svfprintf_r+0x10c0>
 801cd0c:	460c      	mov	r4, r1
 801cd0e:	e7cb      	b.n	801cca8 <_svfprintf_r+0x10f0>
 801cd10:	aa22      	add	r2, sp, #136	; 0x88
 801cd12:	4649      	mov	r1, r9
 801cd14:	4650      	mov	r0, sl
 801cd16:	f003 ff6f 	bl	8020bf8 <__ssprint_r>
 801cd1a:	2800      	cmp	r0, #0
 801cd1c:	f040 80c6 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cd20:	ac25      	add	r4, sp, #148	; 0x94
 801cd22:	e719      	b.n	801cb58 <_svfprintf_r+0xfa0>
 801cd24:	aa22      	add	r2, sp, #136	; 0x88
 801cd26:	4649      	mov	r1, r9
 801cd28:	4650      	mov	r0, sl
 801cd2a:	f003 ff65 	bl	8020bf8 <__ssprint_r>
 801cd2e:	2800      	cmp	r0, #0
 801cd30:	f040 80bc 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cd34:	ac25      	add	r4, sp, #148	; 0x94
 801cd36:	e726      	b.n	801cb86 <_svfprintf_r+0xfce>
 801cd38:	080292bc 	.word	0x080292bc
 801cd3c:	9a05      	ldr	r2, [sp, #20]
 801cd3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd40:	2a01      	cmp	r2, #1
 801cd42:	f106 0601 	add.w	r6, r6, #1
 801cd46:	f103 0301 	add.w	r3, r3, #1
 801cd4a:	f104 0508 	add.w	r5, r4, #8
 801cd4e:	dc02      	bgt.n	801cd56 <_svfprintf_r+0x119e>
 801cd50:	f018 0f01 	tst.w	r8, #1
 801cd54:	d07e      	beq.n	801ce54 <_svfprintf_r+0x129c>
 801cd56:	2201      	movs	r2, #1
 801cd58:	2b07      	cmp	r3, #7
 801cd5a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801cd5e:	f8c4 b000 	str.w	fp, [r4]
 801cd62:	6062      	str	r2, [r4, #4]
 801cd64:	dd08      	ble.n	801cd78 <_svfprintf_r+0x11c0>
 801cd66:	aa22      	add	r2, sp, #136	; 0x88
 801cd68:	4649      	mov	r1, r9
 801cd6a:	4650      	mov	r0, sl
 801cd6c:	f003 ff44 	bl	8020bf8 <__ssprint_r>
 801cd70:	2800      	cmp	r0, #0
 801cd72:	f040 809b 	bne.w	801ceac <_svfprintf_r+0x12f4>
 801cd76:	ad25      	add	r5, sp, #148	; 0x94
 801cd78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd7a:	602b      	str	r3, [r5, #0]
 801cd7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd80:	606b      	str	r3, [r5, #4]
 801cd82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd84:	4413      	add	r3, r2
 801cd86:	9324      	str	r3, [sp, #144]	; 0x90
 801cd88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd8a:	3301      	adds	r3, #1
 801cd8c:	2b07      	cmp	r3, #7
 801cd8e:	9323      	str	r3, [sp, #140]	; 0x8c
 801cd90:	dc32      	bgt.n	801cdf8 <_svfprintf_r+0x1240>
 801cd92:	3508      	adds	r5, #8
 801cd94:	9b05      	ldr	r3, [sp, #20]
 801cd96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cd9a:	1e5c      	subs	r4, r3, #1
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	2300      	movs	r3, #0
 801cda0:	f7e3 fec2 	bl	8000b28 <__aeabi_dcmpeq>
 801cda4:	2800      	cmp	r0, #0
 801cda6:	d130      	bne.n	801ce0a <_svfprintf_r+0x1252>
 801cda8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801cdaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cdac:	9a05      	ldr	r2, [sp, #20]
 801cdae:	3101      	adds	r1, #1
 801cdb0:	3b01      	subs	r3, #1
 801cdb2:	f10b 0001 	add.w	r0, fp, #1
 801cdb6:	4413      	add	r3, r2
 801cdb8:	2907      	cmp	r1, #7
 801cdba:	e9c5 0400 	strd	r0, r4, [r5]
 801cdbe:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801cdc2:	dd50      	ble.n	801ce66 <_svfprintf_r+0x12ae>
 801cdc4:	aa22      	add	r2, sp, #136	; 0x88
 801cdc6:	4649      	mov	r1, r9
 801cdc8:	4650      	mov	r0, sl
 801cdca:	f003 ff15 	bl	8020bf8 <__ssprint_r>
 801cdce:	2800      	cmp	r0, #0
 801cdd0:	d16c      	bne.n	801ceac <_svfprintf_r+0x12f4>
 801cdd2:	ad25      	add	r5, sp, #148	; 0x94
 801cdd4:	ab1e      	add	r3, sp, #120	; 0x78
 801cdd6:	602b      	str	r3, [r5, #0]
 801cdd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cdda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cddc:	606b      	str	r3, [r5, #4]
 801cdde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cde0:	4413      	add	r3, r2
 801cde2:	9324      	str	r3, [sp, #144]	; 0x90
 801cde4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cde6:	3301      	adds	r3, #1
 801cde8:	2b07      	cmp	r3, #7
 801cdea:	9323      	str	r3, [sp, #140]	; 0x8c
 801cdec:	f73f adb5 	bgt.w	801c95a <_svfprintf_r+0xda2>
 801cdf0:	f105 0408 	add.w	r4, r5, #8
 801cdf4:	f7ff bac2 	b.w	801c37c <_svfprintf_r+0x7c4>
 801cdf8:	aa22      	add	r2, sp, #136	; 0x88
 801cdfa:	4649      	mov	r1, r9
 801cdfc:	4650      	mov	r0, sl
 801cdfe:	f003 fefb 	bl	8020bf8 <__ssprint_r>
 801ce02:	2800      	cmp	r0, #0
 801ce04:	d152      	bne.n	801ceac <_svfprintf_r+0x12f4>
 801ce06:	ad25      	add	r5, sp, #148	; 0x94
 801ce08:	e7c4      	b.n	801cd94 <_svfprintf_r+0x11dc>
 801ce0a:	2c00      	cmp	r4, #0
 801ce0c:	dde2      	ble.n	801cdd4 <_svfprintf_r+0x121c>
 801ce0e:	4e58      	ldr	r6, [pc, #352]	; (801cf70 <_svfprintf_r+0x13b8>)
 801ce10:	2710      	movs	r7, #16
 801ce12:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ce16:	2c10      	cmp	r4, #16
 801ce18:	f103 0301 	add.w	r3, r3, #1
 801ce1c:	f105 0108 	add.w	r1, r5, #8
 801ce20:	602e      	str	r6, [r5, #0]
 801ce22:	dc07      	bgt.n	801ce34 <_svfprintf_r+0x127c>
 801ce24:	606c      	str	r4, [r5, #4]
 801ce26:	2b07      	cmp	r3, #7
 801ce28:	4414      	add	r4, r2
 801ce2a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801ce2e:	dcc9      	bgt.n	801cdc4 <_svfprintf_r+0x120c>
 801ce30:	460d      	mov	r5, r1
 801ce32:	e7cf      	b.n	801cdd4 <_svfprintf_r+0x121c>
 801ce34:	3210      	adds	r2, #16
 801ce36:	2b07      	cmp	r3, #7
 801ce38:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ce3c:	606f      	str	r7, [r5, #4]
 801ce3e:	dd06      	ble.n	801ce4e <_svfprintf_r+0x1296>
 801ce40:	aa22      	add	r2, sp, #136	; 0x88
 801ce42:	4649      	mov	r1, r9
 801ce44:	4650      	mov	r0, sl
 801ce46:	f003 fed7 	bl	8020bf8 <__ssprint_r>
 801ce4a:	bb78      	cbnz	r0, 801ceac <_svfprintf_r+0x12f4>
 801ce4c:	a925      	add	r1, sp, #148	; 0x94
 801ce4e:	3c10      	subs	r4, #16
 801ce50:	460d      	mov	r5, r1
 801ce52:	e7de      	b.n	801ce12 <_svfprintf_r+0x125a>
 801ce54:	2201      	movs	r2, #1
 801ce56:	2b07      	cmp	r3, #7
 801ce58:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801ce5c:	f8c4 b000 	str.w	fp, [r4]
 801ce60:	6062      	str	r2, [r4, #4]
 801ce62:	ddb7      	ble.n	801cdd4 <_svfprintf_r+0x121c>
 801ce64:	e7ae      	b.n	801cdc4 <_svfprintf_r+0x120c>
 801ce66:	3508      	adds	r5, #8
 801ce68:	e7b4      	b.n	801cdd4 <_svfprintf_r+0x121c>
 801ce6a:	460c      	mov	r4, r1
 801ce6c:	f7ff ba86 	b.w	801c37c <_svfprintf_r+0x7c4>
 801ce70:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801ce74:	1a9d      	subs	r5, r3, r2
 801ce76:	2d00      	cmp	r5, #0
 801ce78:	f77f aa84 	ble.w	801c384 <_svfprintf_r+0x7cc>
 801ce7c:	4e3d      	ldr	r6, [pc, #244]	; (801cf74 <_svfprintf_r+0x13bc>)
 801ce7e:	2710      	movs	r7, #16
 801ce80:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ce84:	2d10      	cmp	r5, #16
 801ce86:	f103 0301 	add.w	r3, r3, #1
 801ce8a:	6026      	str	r6, [r4, #0]
 801ce8c:	dc18      	bgt.n	801cec0 <_svfprintf_r+0x1308>
 801ce8e:	6065      	str	r5, [r4, #4]
 801ce90:	2b07      	cmp	r3, #7
 801ce92:	4415      	add	r5, r2
 801ce94:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801ce98:	f77f aa74 	ble.w	801c384 <_svfprintf_r+0x7cc>
 801ce9c:	aa22      	add	r2, sp, #136	; 0x88
 801ce9e:	4649      	mov	r1, r9
 801cea0:	4650      	mov	r0, sl
 801cea2:	f003 fea9 	bl	8020bf8 <__ssprint_r>
 801cea6:	2800      	cmp	r0, #0
 801cea8:	f43f aa6c 	beq.w	801c384 <_svfprintf_r+0x7cc>
 801ceac:	9b03      	ldr	r3, [sp, #12]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	f43f a88a 	beq.w	801bfc8 <_svfprintf_r+0x410>
 801ceb4:	4619      	mov	r1, r3
 801ceb6:	4650      	mov	r0, sl
 801ceb8:	f002 fd7a 	bl	801f9b0 <_free_r>
 801cebc:	f7ff b884 	b.w	801bfc8 <_svfprintf_r+0x410>
 801cec0:	3210      	adds	r2, #16
 801cec2:	2b07      	cmp	r3, #7
 801cec4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cec8:	6067      	str	r7, [r4, #4]
 801ceca:	dc02      	bgt.n	801ced2 <_svfprintf_r+0x131a>
 801cecc:	3408      	adds	r4, #8
 801cece:	3d10      	subs	r5, #16
 801ced0:	e7d6      	b.n	801ce80 <_svfprintf_r+0x12c8>
 801ced2:	aa22      	add	r2, sp, #136	; 0x88
 801ced4:	4649      	mov	r1, r9
 801ced6:	4650      	mov	r0, sl
 801ced8:	f003 fe8e 	bl	8020bf8 <__ssprint_r>
 801cedc:	2800      	cmp	r0, #0
 801cede:	d1e5      	bne.n	801ceac <_svfprintf_r+0x12f4>
 801cee0:	ac25      	add	r4, sp, #148	; 0x94
 801cee2:	e7f4      	b.n	801cece <_svfprintf_r+0x1316>
 801cee4:	9903      	ldr	r1, [sp, #12]
 801cee6:	4650      	mov	r0, sl
 801cee8:	f002 fd62 	bl	801f9b0 <_free_r>
 801ceec:	f7ff ba62 	b.w	801c3b4 <_svfprintf_r+0x7fc>
 801cef0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	f43f a868 	beq.w	801bfc8 <_svfprintf_r+0x410>
 801cef8:	aa22      	add	r2, sp, #136	; 0x88
 801cefa:	4649      	mov	r1, r9
 801cefc:	4650      	mov	r0, sl
 801cefe:	f003 fe7b 	bl	8020bf8 <__ssprint_r>
 801cf02:	f7ff b861 	b.w	801bfc8 <_svfprintf_r+0x410>
 801cf06:	ea56 0207 	orrs.w	r2, r6, r7
 801cf0a:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf0e:	f43f ab78 	beq.w	801c602 <_svfprintf_r+0xa4a>
 801cf12:	2b01      	cmp	r3, #1
 801cf14:	f43f ac0d 	beq.w	801c732 <_svfprintf_r+0xb7a>
 801cf18:	2b02      	cmp	r3, #2
 801cf1a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801cf1e:	f43f ac55 	beq.w	801c7cc <_svfprintf_r+0xc14>
 801cf22:	08f2      	lsrs	r2, r6, #3
 801cf24:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801cf28:	08f8      	lsrs	r0, r7, #3
 801cf2a:	f006 0307 	and.w	r3, r6, #7
 801cf2e:	4607      	mov	r7, r0
 801cf30:	4616      	mov	r6, r2
 801cf32:	3330      	adds	r3, #48	; 0x30
 801cf34:	ea56 0207 	orrs.w	r2, r6, r7
 801cf38:	4659      	mov	r1, fp
 801cf3a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801cf3e:	d1f0      	bne.n	801cf22 <_svfprintf_r+0x136a>
 801cf40:	9a03      	ldr	r2, [sp, #12]
 801cf42:	07d2      	lsls	r2, r2, #31
 801cf44:	d506      	bpl.n	801cf54 <_svfprintf_r+0x139c>
 801cf46:	2b30      	cmp	r3, #48	; 0x30
 801cf48:	d004      	beq.n	801cf54 <_svfprintf_r+0x139c>
 801cf4a:	2330      	movs	r3, #48	; 0x30
 801cf4c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801cf50:	f1a1 0b02 	sub.w	fp, r1, #2
 801cf54:	ab4e      	add	r3, sp, #312	; 0x138
 801cf56:	eba3 030b 	sub.w	r3, r3, fp
 801cf5a:	9e04      	ldr	r6, [sp, #16]
 801cf5c:	9304      	str	r3, [sp, #16]
 801cf5e:	2300      	movs	r3, #0
 801cf60:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801cf64:	9303      	str	r3, [sp, #12]
 801cf66:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801cf6a:	461d      	mov	r5, r3
 801cf6c:	f7ff b94c 	b.w	801c208 <_svfprintf_r+0x650>
 801cf70:	080292bc 	.word	0x080292bc
 801cf74:	080292ac 	.word	0x080292ac

0801cf78 <__tzcalc_limits>:
 801cf78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf7c:	4680      	mov	r8, r0
 801cf7e:	f002 fe39 	bl	801fbf4 <__gettzinfo>
 801cf82:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801cf86:	4598      	cmp	r8, r3
 801cf88:	f340 8098 	ble.w	801d0bc <__tzcalc_limits+0x144>
 801cf8c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801cf90:	4443      	add	r3, r8
 801cf92:	109b      	asrs	r3, r3, #2
 801cf94:	f240 126d 	movw	r2, #365	; 0x16d
 801cf98:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801cf9c:	fb02 3505 	mla	r5, r2, r5, r3
 801cfa0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801cfa4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801cfa8:	fb93 f3f2 	sdiv	r3, r3, r2
 801cfac:	441d      	add	r5, r3
 801cfae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801cfb2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801cfb6:	fb98 f7f3 	sdiv	r7, r8, r3
 801cfba:	fb03 8717 	mls	r7, r3, r7, r8
 801cfbe:	4442      	add	r2, r8
 801cfc0:	fab7 fc87 	clz	ip, r7
 801cfc4:	fbb2 f2f3 	udiv	r2, r2, r3
 801cfc8:	f008 0303 	and.w	r3, r8, #3
 801cfcc:	4415      	add	r5, r2
 801cfce:	2264      	movs	r2, #100	; 0x64
 801cfd0:	f8c0 8004 	str.w	r8, [r0, #4]
 801cfd4:	fb98 f6f2 	sdiv	r6, r8, r2
 801cfd8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cfdc:	fb02 8616 	mls	r6, r2, r6, r8
 801cfe0:	4604      	mov	r4, r0
 801cfe2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801cfe6:	9300      	str	r3, [sp, #0]
 801cfe8:	f04f 0e07 	mov.w	lr, #7
 801cfec:	7a22      	ldrb	r2, [r4, #8]
 801cfee:	6963      	ldr	r3, [r4, #20]
 801cff0:	2a4a      	cmp	r2, #74	; 0x4a
 801cff2:	d128      	bne.n	801d046 <__tzcalc_limits+0xce>
 801cff4:	9900      	ldr	r1, [sp, #0]
 801cff6:	18ea      	adds	r2, r5, r3
 801cff8:	b901      	cbnz	r1, 801cffc <__tzcalc_limits+0x84>
 801cffa:	b906      	cbnz	r6, 801cffe <__tzcalc_limits+0x86>
 801cffc:	bb0f      	cbnz	r7, 801d042 <__tzcalc_limits+0xca>
 801cffe:	2b3b      	cmp	r3, #59	; 0x3b
 801d000:	bfd4      	ite	le
 801d002:	2300      	movle	r3, #0
 801d004:	2301      	movgt	r3, #1
 801d006:	4413      	add	r3, r2
 801d008:	1e5a      	subs	r2, r3, #1
 801d00a:	69a3      	ldr	r3, [r4, #24]
 801d00c:	492c      	ldr	r1, [pc, #176]	; (801d0c0 <__tzcalc_limits+0x148>)
 801d00e:	fb01 3202 	mla	r2, r1, r2, r3
 801d012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d014:	4413      	add	r3, r2
 801d016:	461a      	mov	r2, r3
 801d018:	17db      	asrs	r3, r3, #31
 801d01a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801d01e:	3428      	adds	r4, #40	; 0x28
 801d020:	45a3      	cmp	fp, r4
 801d022:	d1e3      	bne.n	801cfec <__tzcalc_limits+0x74>
 801d024:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801d028:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801d02c:	4294      	cmp	r4, r2
 801d02e:	eb75 0303 	sbcs.w	r3, r5, r3
 801d032:	bfb4      	ite	lt
 801d034:	2301      	movlt	r3, #1
 801d036:	2300      	movge	r3, #0
 801d038:	6003      	str	r3, [r0, #0]
 801d03a:	2001      	movs	r0, #1
 801d03c:	b003      	add	sp, #12
 801d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d042:	2300      	movs	r3, #0
 801d044:	e7df      	b.n	801d006 <__tzcalc_limits+0x8e>
 801d046:	2a44      	cmp	r2, #68	; 0x44
 801d048:	d101      	bne.n	801d04e <__tzcalc_limits+0xd6>
 801d04a:	18ea      	adds	r2, r5, r3
 801d04c:	e7dd      	b.n	801d00a <__tzcalc_limits+0x92>
 801d04e:	9a00      	ldr	r2, [sp, #0]
 801d050:	bb72      	cbnz	r2, 801d0b0 <__tzcalc_limits+0x138>
 801d052:	2e00      	cmp	r6, #0
 801d054:	bf0c      	ite	eq
 801d056:	46e0      	moveq	r8, ip
 801d058:	f04f 0801 	movne.w	r8, #1
 801d05c:	4919      	ldr	r1, [pc, #100]	; (801d0c4 <__tzcalc_limits+0x14c>)
 801d05e:	68e2      	ldr	r2, [r4, #12]
 801d060:	9201      	str	r2, [sp, #4]
 801d062:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801d066:	fb0a 1808 	mla	r8, sl, r8, r1
 801d06a:	462a      	mov	r2, r5
 801d06c:	f04f 0900 	mov.w	r9, #0
 801d070:	f1a8 0804 	sub.w	r8, r8, #4
 801d074:	9901      	ldr	r1, [sp, #4]
 801d076:	f109 0901 	add.w	r9, r9, #1
 801d07a:	4549      	cmp	r1, r9
 801d07c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801d080:	dc18      	bgt.n	801d0b4 <__tzcalc_limits+0x13c>
 801d082:	f102 0804 	add.w	r8, r2, #4
 801d086:	fb98 f9fe 	sdiv	r9, r8, lr
 801d08a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801d08e:	eba8 0909 	sub.w	r9, r8, r9
 801d092:	ebb3 0909 	subs.w	r9, r3, r9
 801d096:	6923      	ldr	r3, [r4, #16]
 801d098:	f103 33ff 	add.w	r3, r3, #4294967295
 801d09c:	bf48      	it	mi
 801d09e:	f109 0907 	addmi.w	r9, r9, #7
 801d0a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801d0a6:	444b      	add	r3, r9
 801d0a8:	4553      	cmp	r3, sl
 801d0aa:	da05      	bge.n	801d0b8 <__tzcalc_limits+0x140>
 801d0ac:	441a      	add	r2, r3
 801d0ae:	e7ac      	b.n	801d00a <__tzcalc_limits+0x92>
 801d0b0:	46e0      	mov	r8, ip
 801d0b2:	e7d3      	b.n	801d05c <__tzcalc_limits+0xe4>
 801d0b4:	4452      	add	r2, sl
 801d0b6:	e7dd      	b.n	801d074 <__tzcalc_limits+0xfc>
 801d0b8:	3b07      	subs	r3, #7
 801d0ba:	e7f5      	b.n	801d0a8 <__tzcalc_limits+0x130>
 801d0bc:	2000      	movs	r0, #0
 801d0be:	e7bd      	b.n	801d03c <__tzcalc_limits+0xc4>
 801d0c0:	00015180 	.word	0x00015180
 801d0c4:	08029218 	.word	0x08029218

0801d0c8 <__tz_lock>:
 801d0c8:	4801      	ldr	r0, [pc, #4]	; (801d0d0 <__tz_lock+0x8>)
 801d0ca:	f002 be4d 	b.w	801fd68 <__retarget_lock_acquire>
 801d0ce:	bf00      	nop
 801d0d0:	2000be73 	.word	0x2000be73

0801d0d4 <__tz_unlock>:
 801d0d4:	4801      	ldr	r0, [pc, #4]	; (801d0dc <__tz_unlock+0x8>)
 801d0d6:	f002 be49 	b.w	801fd6c <__retarget_lock_release>
 801d0da:	bf00      	nop
 801d0dc:	2000be73 	.word	0x2000be73

0801d0e0 <_tzset_unlocked>:
 801d0e0:	4b01      	ldr	r3, [pc, #4]	; (801d0e8 <_tzset_unlocked+0x8>)
 801d0e2:	6818      	ldr	r0, [r3, #0]
 801d0e4:	f000 b802 	b.w	801d0ec <_tzset_unlocked_r>
 801d0e8:	20000038 	.word	0x20000038

0801d0ec <_tzset_unlocked_r>:
 801d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0f0:	b08d      	sub	sp, #52	; 0x34
 801d0f2:	4607      	mov	r7, r0
 801d0f4:	f002 fd7e 	bl	801fbf4 <__gettzinfo>
 801d0f8:	49ae      	ldr	r1, [pc, #696]	; (801d3b4 <_tzset_unlocked_r+0x2c8>)
 801d0fa:	4eaf      	ldr	r6, [pc, #700]	; (801d3b8 <_tzset_unlocked_r+0x2cc>)
 801d0fc:	4605      	mov	r5, r0
 801d0fe:	4638      	mov	r0, r7
 801d100:	f002 fd70 	bl	801fbe4 <_getenv_r>
 801d104:	4604      	mov	r4, r0
 801d106:	b970      	cbnz	r0, 801d126 <_tzset_unlocked_r+0x3a>
 801d108:	4bac      	ldr	r3, [pc, #688]	; (801d3bc <_tzset_unlocked_r+0x2d0>)
 801d10a:	4aad      	ldr	r2, [pc, #692]	; (801d3c0 <_tzset_unlocked_r+0x2d4>)
 801d10c:	6018      	str	r0, [r3, #0]
 801d10e:	4bad      	ldr	r3, [pc, #692]	; (801d3c4 <_tzset_unlocked_r+0x2d8>)
 801d110:	6018      	str	r0, [r3, #0]
 801d112:	4bad      	ldr	r3, [pc, #692]	; (801d3c8 <_tzset_unlocked_r+0x2dc>)
 801d114:	6830      	ldr	r0, [r6, #0]
 801d116:	e9c3 2200 	strd	r2, r2, [r3]
 801d11a:	f002 fe9d 	bl	801fe58 <free>
 801d11e:	6034      	str	r4, [r6, #0]
 801d120:	b00d      	add	sp, #52	; 0x34
 801d122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d126:	6831      	ldr	r1, [r6, #0]
 801d128:	2900      	cmp	r1, #0
 801d12a:	d15f      	bne.n	801d1ec <_tzset_unlocked_r+0x100>
 801d12c:	6830      	ldr	r0, [r6, #0]
 801d12e:	f002 fe93 	bl	801fe58 <free>
 801d132:	4620      	mov	r0, r4
 801d134:	f7e3 f876 	bl	8000224 <strlen>
 801d138:	1c41      	adds	r1, r0, #1
 801d13a:	4638      	mov	r0, r7
 801d13c:	f002 fe94 	bl	801fe68 <_malloc_r>
 801d140:	6030      	str	r0, [r6, #0]
 801d142:	2800      	cmp	r0, #0
 801d144:	d157      	bne.n	801d1f6 <_tzset_unlocked_r+0x10a>
 801d146:	7823      	ldrb	r3, [r4, #0]
 801d148:	4aa0      	ldr	r2, [pc, #640]	; (801d3cc <_tzset_unlocked_r+0x2e0>)
 801d14a:	49a1      	ldr	r1, [pc, #644]	; (801d3d0 <_tzset_unlocked_r+0x2e4>)
 801d14c:	2b3a      	cmp	r3, #58	; 0x3a
 801d14e:	bf08      	it	eq
 801d150:	3401      	addeq	r4, #1
 801d152:	ae0a      	add	r6, sp, #40	; 0x28
 801d154:	4633      	mov	r3, r6
 801d156:	4620      	mov	r0, r4
 801d158:	f003 fc4c 	bl	80209f4 <siscanf>
 801d15c:	2800      	cmp	r0, #0
 801d15e:	dddf      	ble.n	801d120 <_tzset_unlocked_r+0x34>
 801d160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d162:	18e7      	adds	r7, r4, r3
 801d164:	5ce3      	ldrb	r3, [r4, r3]
 801d166:	2b2d      	cmp	r3, #45	; 0x2d
 801d168:	d149      	bne.n	801d1fe <_tzset_unlocked_r+0x112>
 801d16a:	3701      	adds	r7, #1
 801d16c:	f04f 34ff 	mov.w	r4, #4294967295
 801d170:	f10d 0a20 	add.w	sl, sp, #32
 801d174:	f10d 0b1e 	add.w	fp, sp, #30
 801d178:	f04f 0800 	mov.w	r8, #0
 801d17c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801d180:	4994      	ldr	r1, [pc, #592]	; (801d3d4 <_tzset_unlocked_r+0x2e8>)
 801d182:	9603      	str	r6, [sp, #12]
 801d184:	f8cd b000 	str.w	fp, [sp]
 801d188:	4633      	mov	r3, r6
 801d18a:	aa07      	add	r2, sp, #28
 801d18c:	4638      	mov	r0, r7
 801d18e:	f8ad 801e 	strh.w	r8, [sp, #30]
 801d192:	f8ad 8020 	strh.w	r8, [sp, #32]
 801d196:	f003 fc2d 	bl	80209f4 <siscanf>
 801d19a:	4540      	cmp	r0, r8
 801d19c:	ddc0      	ble.n	801d120 <_tzset_unlocked_r+0x34>
 801d19e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d1a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d1a6:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801d3e0 <_tzset_unlocked_r+0x2f4>
 801d1aa:	213c      	movs	r1, #60	; 0x3c
 801d1ac:	fb01 2203 	mla	r2, r1, r3, r2
 801d1b0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d1b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d1b8:	fb01 2303 	mla	r3, r1, r3, r2
 801d1bc:	435c      	muls	r4, r3
 801d1be:	62ac      	str	r4, [r5, #40]	; 0x28
 801d1c0:	4c81      	ldr	r4, [pc, #516]	; (801d3c8 <_tzset_unlocked_r+0x2dc>)
 801d1c2:	4b82      	ldr	r3, [pc, #520]	; (801d3cc <_tzset_unlocked_r+0x2e0>)
 801d1c4:	6023      	str	r3, [r4, #0]
 801d1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1c8:	4981      	ldr	r1, [pc, #516]	; (801d3d0 <_tzset_unlocked_r+0x2e4>)
 801d1ca:	441f      	add	r7, r3
 801d1cc:	464a      	mov	r2, r9
 801d1ce:	4633      	mov	r3, r6
 801d1d0:	4638      	mov	r0, r7
 801d1d2:	f003 fc0f 	bl	80209f4 <siscanf>
 801d1d6:	4540      	cmp	r0, r8
 801d1d8:	dc16      	bgt.n	801d208 <_tzset_unlocked_r+0x11c>
 801d1da:	6823      	ldr	r3, [r4, #0]
 801d1dc:	6063      	str	r3, [r4, #4]
 801d1de:	4b77      	ldr	r3, [pc, #476]	; (801d3bc <_tzset_unlocked_r+0x2d0>)
 801d1e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d1e2:	601a      	str	r2, [r3, #0]
 801d1e4:	4b77      	ldr	r3, [pc, #476]	; (801d3c4 <_tzset_unlocked_r+0x2d8>)
 801d1e6:	f8c3 8000 	str.w	r8, [r3]
 801d1ea:	e799      	b.n	801d120 <_tzset_unlocked_r+0x34>
 801d1ec:	f7e3 f810 	bl	8000210 <strcmp>
 801d1f0:	2800      	cmp	r0, #0
 801d1f2:	d19b      	bne.n	801d12c <_tzset_unlocked_r+0x40>
 801d1f4:	e794      	b.n	801d120 <_tzset_unlocked_r+0x34>
 801d1f6:	4621      	mov	r1, r4
 801d1f8:	f003 fc6d 	bl	8020ad6 <strcpy>
 801d1fc:	e7a3      	b.n	801d146 <_tzset_unlocked_r+0x5a>
 801d1fe:	2b2b      	cmp	r3, #43	; 0x2b
 801d200:	bf08      	it	eq
 801d202:	3701      	addeq	r7, #1
 801d204:	2401      	movs	r4, #1
 801d206:	e7b3      	b.n	801d170 <_tzset_unlocked_r+0x84>
 801d208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d20a:	f8c4 9004 	str.w	r9, [r4, #4]
 801d20e:	18fc      	adds	r4, r7, r3
 801d210:	5cfb      	ldrb	r3, [r7, r3]
 801d212:	2b2d      	cmp	r3, #45	; 0x2d
 801d214:	f040 808b 	bne.w	801d32e <_tzset_unlocked_r+0x242>
 801d218:	3401      	adds	r4, #1
 801d21a:	f04f 37ff 	mov.w	r7, #4294967295
 801d21e:	2300      	movs	r3, #0
 801d220:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d224:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d228:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d22c:	930a      	str	r3, [sp, #40]	; 0x28
 801d22e:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d232:	e9cd b600 	strd	fp, r6, [sp]
 801d236:	4967      	ldr	r1, [pc, #412]	; (801d3d4 <_tzset_unlocked_r+0x2e8>)
 801d238:	4633      	mov	r3, r6
 801d23a:	aa07      	add	r2, sp, #28
 801d23c:	4620      	mov	r0, r4
 801d23e:	f003 fbd9 	bl	80209f4 <siscanf>
 801d242:	2800      	cmp	r0, #0
 801d244:	dc78      	bgt.n	801d338 <_tzset_unlocked_r+0x24c>
 801d246:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801d248:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801d24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d24e:	652f      	str	r7, [r5, #80]	; 0x50
 801d250:	441c      	add	r4, r3
 801d252:	462f      	mov	r7, r5
 801d254:	f04f 0900 	mov.w	r9, #0
 801d258:	7823      	ldrb	r3, [r4, #0]
 801d25a:	2b2c      	cmp	r3, #44	; 0x2c
 801d25c:	bf08      	it	eq
 801d25e:	3401      	addeq	r4, #1
 801d260:	f894 8000 	ldrb.w	r8, [r4]
 801d264:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801d268:	d178      	bne.n	801d35c <_tzset_unlocked_r+0x270>
 801d26a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801d26e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801d272:	ab09      	add	r3, sp, #36	; 0x24
 801d274:	9300      	str	r3, [sp, #0]
 801d276:	4958      	ldr	r1, [pc, #352]	; (801d3d8 <_tzset_unlocked_r+0x2ec>)
 801d278:	9603      	str	r6, [sp, #12]
 801d27a:	4633      	mov	r3, r6
 801d27c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801d280:	4620      	mov	r0, r4
 801d282:	f003 fbb7 	bl	80209f4 <siscanf>
 801d286:	2803      	cmp	r0, #3
 801d288:	f47f af4a 	bne.w	801d120 <_tzset_unlocked_r+0x34>
 801d28c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d290:	1e4b      	subs	r3, r1, #1
 801d292:	2b0b      	cmp	r3, #11
 801d294:	f63f af44 	bhi.w	801d120 <_tzset_unlocked_r+0x34>
 801d298:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d29c:	1e53      	subs	r3, r2, #1
 801d29e:	2b04      	cmp	r3, #4
 801d2a0:	f63f af3e 	bhi.w	801d120 <_tzset_unlocked_r+0x34>
 801d2a4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d2a8:	2b06      	cmp	r3, #6
 801d2aa:	f63f af39 	bhi.w	801d120 <_tzset_unlocked_r+0x34>
 801d2ae:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801d2b2:	f887 8008 	strb.w	r8, [r7, #8]
 801d2b6:	617b      	str	r3, [r7, #20]
 801d2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2ba:	eb04 0803 	add.w	r8, r4, r3
 801d2be:	2302      	movs	r3, #2
 801d2c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d2ca:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d2ce:	930a      	str	r3, [sp, #40]	; 0x28
 801d2d0:	f898 3000 	ldrb.w	r3, [r8]
 801d2d4:	2b2f      	cmp	r3, #47	; 0x2f
 801d2d6:	d109      	bne.n	801d2ec <_tzset_unlocked_r+0x200>
 801d2d8:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d2dc:	e9cd b600 	strd	fp, r6, [sp]
 801d2e0:	493e      	ldr	r1, [pc, #248]	; (801d3dc <_tzset_unlocked_r+0x2f0>)
 801d2e2:	4633      	mov	r3, r6
 801d2e4:	aa07      	add	r2, sp, #28
 801d2e6:	4640      	mov	r0, r8
 801d2e8:	f003 fb84 	bl	80209f4 <siscanf>
 801d2ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d2f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d2f4:	213c      	movs	r1, #60	; 0x3c
 801d2f6:	fb01 2203 	mla	r2, r1, r3, r2
 801d2fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d2fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d302:	fb01 2303 	mla	r3, r1, r3, r2
 801d306:	61bb      	str	r3, [r7, #24]
 801d308:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d30a:	3728      	adds	r7, #40	; 0x28
 801d30c:	4444      	add	r4, r8
 801d30e:	f1b9 0f00 	cmp.w	r9, #0
 801d312:	d020      	beq.n	801d356 <_tzset_unlocked_r+0x26a>
 801d314:	6868      	ldr	r0, [r5, #4]
 801d316:	f7ff fe2f 	bl	801cf78 <__tzcalc_limits>
 801d31a:	4b28      	ldr	r3, [pc, #160]	; (801d3bc <_tzset_unlocked_r+0x2d0>)
 801d31c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d31e:	601a      	str	r2, [r3, #0]
 801d320:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801d322:	1a9b      	subs	r3, r3, r2
 801d324:	4a27      	ldr	r2, [pc, #156]	; (801d3c4 <_tzset_unlocked_r+0x2d8>)
 801d326:	bf18      	it	ne
 801d328:	2301      	movne	r3, #1
 801d32a:	6013      	str	r3, [r2, #0]
 801d32c:	e6f8      	b.n	801d120 <_tzset_unlocked_r+0x34>
 801d32e:	2b2b      	cmp	r3, #43	; 0x2b
 801d330:	bf08      	it	eq
 801d332:	3401      	addeq	r4, #1
 801d334:	2701      	movs	r7, #1
 801d336:	e772      	b.n	801d21e <_tzset_unlocked_r+0x132>
 801d338:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d33c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d340:	213c      	movs	r1, #60	; 0x3c
 801d342:	fb01 2203 	mla	r2, r1, r3, r2
 801d346:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d34a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d34e:	fb01 2303 	mla	r3, r1, r3, r2
 801d352:	435f      	muls	r7, r3
 801d354:	e77a      	b.n	801d24c <_tzset_unlocked_r+0x160>
 801d356:	f04f 0901 	mov.w	r9, #1
 801d35a:	e77d      	b.n	801d258 <_tzset_unlocked_r+0x16c>
 801d35c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801d360:	bf06      	itte	eq
 801d362:	3401      	addeq	r4, #1
 801d364:	4643      	moveq	r3, r8
 801d366:	2344      	movne	r3, #68	; 0x44
 801d368:	220a      	movs	r2, #10
 801d36a:	a90b      	add	r1, sp, #44	; 0x2c
 801d36c:	4620      	mov	r0, r4
 801d36e:	9305      	str	r3, [sp, #20]
 801d370:	f003 fc38 	bl	8020be4 <strtoul>
 801d374:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801d378:	9b05      	ldr	r3, [sp, #20]
 801d37a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801d37e:	45a0      	cmp	r8, r4
 801d380:	d114      	bne.n	801d3ac <_tzset_unlocked_r+0x2c0>
 801d382:	234d      	movs	r3, #77	; 0x4d
 801d384:	f1b9 0f00 	cmp.w	r9, #0
 801d388:	d107      	bne.n	801d39a <_tzset_unlocked_r+0x2ae>
 801d38a:	722b      	strb	r3, [r5, #8]
 801d38c:	2103      	movs	r1, #3
 801d38e:	2302      	movs	r3, #2
 801d390:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801d394:	f8c5 9014 	str.w	r9, [r5, #20]
 801d398:	e791      	b.n	801d2be <_tzset_unlocked_r+0x1d2>
 801d39a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801d39e:	220b      	movs	r2, #11
 801d3a0:	2301      	movs	r3, #1
 801d3a2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d3aa:	e788      	b.n	801d2be <_tzset_unlocked_r+0x1d2>
 801d3ac:	b280      	uxth	r0, r0
 801d3ae:	723b      	strb	r3, [r7, #8]
 801d3b0:	6178      	str	r0, [r7, #20]
 801d3b2:	e784      	b.n	801d2be <_tzset_unlocked_r+0x1d2>
 801d3b4:	080292cc 	.word	0x080292cc
 801d3b8:	20005088 	.word	0x20005088
 801d3bc:	20005090 	.word	0x20005090
 801d3c0:	080292cf 	.word	0x080292cf
 801d3c4:	2000508c 	.word	0x2000508c
 801d3c8:	20000468 	.word	0x20000468
 801d3cc:	2000507d 	.word	0x2000507d
 801d3d0:	080292d3 	.word	0x080292d3
 801d3d4:	080292f6 	.word	0x080292f6
 801d3d8:	080292e2 	.word	0x080292e2
 801d3dc:	080292f5 	.word	0x080292f5
 801d3e0:	20005072 	.word	0x20005072
 801d3e4:	00000000 	.word	0x00000000

0801d3e8 <_vfprintf_r>:
 801d3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3ec:	ed2d 8b04 	vpush	{d8-d9}
 801d3f0:	b0cf      	sub	sp, #316	; 0x13c
 801d3f2:	4689      	mov	r9, r1
 801d3f4:	9203      	str	r2, [sp, #12]
 801d3f6:	461c      	mov	r4, r3
 801d3f8:	461e      	mov	r6, r3
 801d3fa:	4682      	mov	sl, r0
 801d3fc:	f002 fcae 	bl	801fd5c <_localeconv_r>
 801d400:	6803      	ldr	r3, [r0, #0]
 801d402:	9313      	str	r3, [sp, #76]	; 0x4c
 801d404:	4618      	mov	r0, r3
 801d406:	f7e2 ff0d 	bl	8000224 <strlen>
 801d40a:	900e      	str	r0, [sp, #56]	; 0x38
 801d40c:	f1ba 0f00 	cmp.w	sl, #0
 801d410:	d005      	beq.n	801d41e <_vfprintf_r+0x36>
 801d412:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801d416:	b913      	cbnz	r3, 801d41e <_vfprintf_r+0x36>
 801d418:	4650      	mov	r0, sl
 801d41a:	f002 fa39 	bl	801f890 <__sinit>
 801d41e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d422:	07d8      	lsls	r0, r3, #31
 801d424:	d407      	bmi.n	801d436 <_vfprintf_r+0x4e>
 801d426:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d42a:	0599      	lsls	r1, r3, #22
 801d42c:	d403      	bmi.n	801d436 <_vfprintf_r+0x4e>
 801d42e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d432:	f002 fc9a 	bl	801fd6a <__retarget_lock_acquire_recursive>
 801d436:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 801d43a:	049a      	lsls	r2, r3, #18
 801d43c:	d409      	bmi.n	801d452 <_vfprintf_r+0x6a>
 801d43e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d442:	f8a9 300c 	strh.w	r3, [r9, #12]
 801d446:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d44a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d44e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801d452:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d456:	071f      	lsls	r7, r3, #28
 801d458:	d502      	bpl.n	801d460 <_vfprintf_r+0x78>
 801d45a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d45e:	b9d3      	cbnz	r3, 801d496 <_vfprintf_r+0xae>
 801d460:	4649      	mov	r1, r9
 801d462:	4650      	mov	r0, sl
 801d464:	f001 fa36 	bl	801e8d4 <__swsetup_r>
 801d468:	b1a8      	cbz	r0, 801d496 <_vfprintf_r+0xae>
 801d46a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d46e:	07dd      	lsls	r5, r3, #31
 801d470:	d508      	bpl.n	801d484 <_vfprintf_r+0x9c>
 801d472:	f04f 33ff 	mov.w	r3, #4294967295
 801d476:	930f      	str	r3, [sp, #60]	; 0x3c
 801d478:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d47a:	b04f      	add	sp, #316	; 0x13c
 801d47c:	ecbd 8b04 	vpop	{d8-d9}
 801d480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d484:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d488:	059c      	lsls	r4, r3, #22
 801d48a:	d4f2      	bmi.n	801d472 <_vfprintf_r+0x8a>
 801d48c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d490:	f002 fc6d 	bl	801fd6e <__retarget_lock_release_recursive>
 801d494:	e7ed      	b.n	801d472 <_vfprintf_r+0x8a>
 801d496:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d49a:	f003 021a 	and.w	r2, r3, #26
 801d49e:	2a0a      	cmp	r2, #10
 801d4a0:	d115      	bne.n	801d4ce <_vfprintf_r+0xe6>
 801d4a2:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801d4a6:	2a00      	cmp	r2, #0
 801d4a8:	db11      	blt.n	801d4ce <_vfprintf_r+0xe6>
 801d4aa:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 801d4ae:	07d0      	lsls	r0, r2, #31
 801d4b0:	d405      	bmi.n	801d4be <_vfprintf_r+0xd6>
 801d4b2:	0599      	lsls	r1, r3, #22
 801d4b4:	d403      	bmi.n	801d4be <_vfprintf_r+0xd6>
 801d4b6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d4ba:	f002 fc58 	bl	801fd6e <__retarget_lock_release_recursive>
 801d4be:	9a03      	ldr	r2, [sp, #12]
 801d4c0:	4623      	mov	r3, r4
 801d4c2:	4649      	mov	r1, r9
 801d4c4:	4650      	mov	r0, sl
 801d4c6:	f001 f9c5 	bl	801e854 <__sbprintf>
 801d4ca:	900f      	str	r0, [sp, #60]	; 0x3c
 801d4cc:	e7d4      	b.n	801d478 <_vfprintf_r+0x90>
 801d4ce:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 801d738 <_vfprintf_r+0x350>
 801d4d2:	2500      	movs	r5, #0
 801d4d4:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801d4d8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d4dc:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801d4e0:	ac25      	add	r4, sp, #148	; 0x94
 801d4e2:	9422      	str	r4, [sp, #136]	; 0x88
 801d4e4:	9505      	str	r5, [sp, #20]
 801d4e6:	950a      	str	r5, [sp, #40]	; 0x28
 801d4e8:	9512      	str	r5, [sp, #72]	; 0x48
 801d4ea:	9514      	str	r5, [sp, #80]	; 0x50
 801d4ec:	950f      	str	r5, [sp, #60]	; 0x3c
 801d4ee:	9b03      	ldr	r3, [sp, #12]
 801d4f0:	461d      	mov	r5, r3
 801d4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4f6:	b10a      	cbz	r2, 801d4fc <_vfprintf_r+0x114>
 801d4f8:	2a25      	cmp	r2, #37	; 0x25
 801d4fa:	d1f9      	bne.n	801d4f0 <_vfprintf_r+0x108>
 801d4fc:	9b03      	ldr	r3, [sp, #12]
 801d4fe:	1aef      	subs	r7, r5, r3
 801d500:	d00d      	beq.n	801d51e <_vfprintf_r+0x136>
 801d502:	e9c4 3700 	strd	r3, r7, [r4]
 801d506:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d508:	443b      	add	r3, r7
 801d50a:	9324      	str	r3, [sp, #144]	; 0x90
 801d50c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d50e:	3301      	adds	r3, #1
 801d510:	2b07      	cmp	r3, #7
 801d512:	9323      	str	r3, [sp, #140]	; 0x8c
 801d514:	dc79      	bgt.n	801d60a <_vfprintf_r+0x222>
 801d516:	3408      	adds	r4, #8
 801d518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d51a:	443b      	add	r3, r7
 801d51c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d51e:	782b      	ldrb	r3, [r5, #0]
 801d520:	2b00      	cmp	r3, #0
 801d522:	f001 8156 	beq.w	801e7d2 <_vfprintf_r+0x13ea>
 801d526:	2300      	movs	r3, #0
 801d528:	3501      	adds	r5, #1
 801d52a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d52e:	f04f 38ff 	mov.w	r8, #4294967295
 801d532:	9310      	str	r3, [sp, #64]	; 0x40
 801d534:	469b      	mov	fp, r3
 801d536:	270a      	movs	r7, #10
 801d538:	212b      	movs	r1, #43	; 0x2b
 801d53a:	462a      	mov	r2, r5
 801d53c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d540:	9307      	str	r3, [sp, #28]
 801d542:	4613      	mov	r3, r2
 801d544:	930b      	str	r3, [sp, #44]	; 0x2c
 801d546:	9b07      	ldr	r3, [sp, #28]
 801d548:	3b20      	subs	r3, #32
 801d54a:	2b5a      	cmp	r3, #90	; 0x5a
 801d54c:	f200 85c0 	bhi.w	801e0d0 <_vfprintf_r+0xce8>
 801d550:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d554:	05be007e 	.word	0x05be007e
 801d558:	008605be 	.word	0x008605be
 801d55c:	05be05be 	.word	0x05be05be
 801d560:	006505be 	.word	0x006505be
 801d564:	05be05be 	.word	0x05be05be
 801d568:	00930089 	.word	0x00930089
 801d56c:	009005be 	.word	0x009005be
 801d570:	05be0096 	.word	0x05be0096
 801d574:	00b200af 	.word	0x00b200af
 801d578:	00b200b2 	.word	0x00b200b2
 801d57c:	00b200b2 	.word	0x00b200b2
 801d580:	00b200b2 	.word	0x00b200b2
 801d584:	00b200b2 	.word	0x00b200b2
 801d588:	05be05be 	.word	0x05be05be
 801d58c:	05be05be 	.word	0x05be05be
 801d590:	05be05be 	.word	0x05be05be
 801d594:	012105be 	.word	0x012105be
 801d598:	00df05be 	.word	0x00df05be
 801d59c:	012100f6 	.word	0x012100f6
 801d5a0:	01210121 	.word	0x01210121
 801d5a4:	05be05be 	.word	0x05be05be
 801d5a8:	05be05be 	.word	0x05be05be
 801d5ac:	05be00c2 	.word	0x05be00c2
 801d5b0:	049005be 	.word	0x049005be
 801d5b4:	05be05be 	.word	0x05be05be
 801d5b8:	04d705be 	.word	0x04d705be
 801d5bc:	04fb05be 	.word	0x04fb05be
 801d5c0:	05be05be 	.word	0x05be05be
 801d5c4:	05be051a 	.word	0x05be051a
 801d5c8:	05be05be 	.word	0x05be05be
 801d5cc:	05be05be 	.word	0x05be05be
 801d5d0:	05be05be 	.word	0x05be05be
 801d5d4:	012105be 	.word	0x012105be
 801d5d8:	00df05be 	.word	0x00df05be
 801d5dc:	012100f8 	.word	0x012100f8
 801d5e0:	01210121 	.word	0x01210121
 801d5e4:	00f800c5 	.word	0x00f800c5
 801d5e8:	05be00d9 	.word	0x05be00d9
 801d5ec:	05be00d2 	.word	0x05be00d2
 801d5f0:	0492046d 	.word	0x0492046d
 801d5f4:	00d904c6 	.word	0x00d904c6
 801d5f8:	04d705be 	.word	0x04d705be
 801d5fc:	04fd007c 	.word	0x04fd007c
 801d600:	05be05be 	.word	0x05be05be
 801d604:	05be0537 	.word	0x05be0537
 801d608:	007c      	.short	0x007c
 801d60a:	aa22      	add	r2, sp, #136	; 0x88
 801d60c:	4649      	mov	r1, r9
 801d60e:	4650      	mov	r0, sl
 801d610:	f004 fbeb 	bl	8021dea <__sprint_r>
 801d614:	2800      	cmp	r0, #0
 801d616:	f040 8130 	bne.w	801d87a <_vfprintf_r+0x492>
 801d61a:	ac25      	add	r4, sp, #148	; 0x94
 801d61c:	e77c      	b.n	801d518 <_vfprintf_r+0x130>
 801d61e:	4650      	mov	r0, sl
 801d620:	f002 fb9c 	bl	801fd5c <_localeconv_r>
 801d624:	6843      	ldr	r3, [r0, #4]
 801d626:	9314      	str	r3, [sp, #80]	; 0x50
 801d628:	4618      	mov	r0, r3
 801d62a:	f7e2 fdfb 	bl	8000224 <strlen>
 801d62e:	9012      	str	r0, [sp, #72]	; 0x48
 801d630:	4650      	mov	r0, sl
 801d632:	f002 fb93 	bl	801fd5c <_localeconv_r>
 801d636:	6883      	ldr	r3, [r0, #8]
 801d638:	930a      	str	r3, [sp, #40]	; 0x28
 801d63a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d63c:	212b      	movs	r1, #43	; 0x2b
 801d63e:	b12b      	cbz	r3, 801d64c <_vfprintf_r+0x264>
 801d640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d642:	b11b      	cbz	r3, 801d64c <_vfprintf_r+0x264>
 801d644:	781b      	ldrb	r3, [r3, #0]
 801d646:	b10b      	cbz	r3, 801d64c <_vfprintf_r+0x264>
 801d648:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801d64c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d64e:	e774      	b.n	801d53a <_vfprintf_r+0x152>
 801d650:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d654:	2b00      	cmp	r3, #0
 801d656:	d1f9      	bne.n	801d64c <_vfprintf_r+0x264>
 801d658:	2320      	movs	r3, #32
 801d65a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d65e:	e7f5      	b.n	801d64c <_vfprintf_r+0x264>
 801d660:	f04b 0b01 	orr.w	fp, fp, #1
 801d664:	e7f2      	b.n	801d64c <_vfprintf_r+0x264>
 801d666:	f856 3b04 	ldr.w	r3, [r6], #4
 801d66a:	9310      	str	r3, [sp, #64]	; 0x40
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	daed      	bge.n	801d64c <_vfprintf_r+0x264>
 801d670:	425b      	negs	r3, r3
 801d672:	9310      	str	r3, [sp, #64]	; 0x40
 801d674:	f04b 0b04 	orr.w	fp, fp, #4
 801d678:	e7e8      	b.n	801d64c <_vfprintf_r+0x264>
 801d67a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801d67e:	e7e5      	b.n	801d64c <_vfprintf_r+0x264>
 801d680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d682:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d686:	9207      	str	r2, [sp, #28]
 801d688:	2a2a      	cmp	r2, #42	; 0x2a
 801d68a:	d10f      	bne.n	801d6ac <_vfprintf_r+0x2c4>
 801d68c:	f856 0b04 	ldr.w	r0, [r6], #4
 801d690:	930b      	str	r3, [sp, #44]	; 0x2c
 801d692:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 801d696:	e7d9      	b.n	801d64c <_vfprintf_r+0x264>
 801d698:	fb07 2808 	mla	r8, r7, r8, r2
 801d69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d6a0:	9207      	str	r2, [sp, #28]
 801d6a2:	9a07      	ldr	r2, [sp, #28]
 801d6a4:	3a30      	subs	r2, #48	; 0x30
 801d6a6:	2a09      	cmp	r2, #9
 801d6a8:	d9f6      	bls.n	801d698 <_vfprintf_r+0x2b0>
 801d6aa:	e74b      	b.n	801d544 <_vfprintf_r+0x15c>
 801d6ac:	f04f 0800 	mov.w	r8, #0
 801d6b0:	e7f7      	b.n	801d6a2 <_vfprintf_r+0x2ba>
 801d6b2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801d6b6:	e7c9      	b.n	801d64c <_vfprintf_r+0x264>
 801d6b8:	2200      	movs	r2, #0
 801d6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6bc:	9210      	str	r2, [sp, #64]	; 0x40
 801d6be:	9a07      	ldr	r2, [sp, #28]
 801d6c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d6c2:	3a30      	subs	r2, #48	; 0x30
 801d6c4:	fb07 2200 	mla	r2, r7, r0, r2
 801d6c8:	9210      	str	r2, [sp, #64]	; 0x40
 801d6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d6ce:	9207      	str	r2, [sp, #28]
 801d6d0:	3a30      	subs	r2, #48	; 0x30
 801d6d2:	2a09      	cmp	r2, #9
 801d6d4:	d9f3      	bls.n	801d6be <_vfprintf_r+0x2d6>
 801d6d6:	e735      	b.n	801d544 <_vfprintf_r+0x15c>
 801d6d8:	f04b 0b08 	orr.w	fp, fp, #8
 801d6dc:	e7b6      	b.n	801d64c <_vfprintf_r+0x264>
 801d6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6e0:	781b      	ldrb	r3, [r3, #0]
 801d6e2:	2b68      	cmp	r3, #104	; 0x68
 801d6e4:	bf01      	itttt	eq
 801d6e6:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801d6e8:	3301      	addeq	r3, #1
 801d6ea:	930b      	streq	r3, [sp, #44]	; 0x2c
 801d6ec:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801d6f0:	bf18      	it	ne
 801d6f2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801d6f6:	e7a9      	b.n	801d64c <_vfprintf_r+0x264>
 801d6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6fa:	781b      	ldrb	r3, [r3, #0]
 801d6fc:	2b6c      	cmp	r3, #108	; 0x6c
 801d6fe:	d105      	bne.n	801d70c <_vfprintf_r+0x324>
 801d700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d702:	3301      	adds	r3, #1
 801d704:	930b      	str	r3, [sp, #44]	; 0x2c
 801d706:	f04b 0b20 	orr.w	fp, fp, #32
 801d70a:	e79f      	b.n	801d64c <_vfprintf_r+0x264>
 801d70c:	f04b 0b10 	orr.w	fp, fp, #16
 801d710:	e79c      	b.n	801d64c <_vfprintf_r+0x264>
 801d712:	4632      	mov	r2, r6
 801d714:	2000      	movs	r0, #0
 801d716:	f852 3b04 	ldr.w	r3, [r2], #4
 801d71a:	9206      	str	r2, [sp, #24]
 801d71c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801d720:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801d724:	ab35      	add	r3, sp, #212	; 0xd4
 801d726:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801d72a:	9004      	str	r0, [sp, #16]
 801d72c:	f04f 0801 	mov.w	r8, #1
 801d730:	4606      	mov	r6, r0
 801d732:	4605      	mov	r5, r0
 801d734:	9303      	str	r3, [sp, #12]
 801d736:	e1c3      	b.n	801dac0 <_vfprintf_r+0x6d8>
	...
 801d740:	f04b 0b10 	orr.w	fp, fp, #16
 801d744:	f01b 0f20 	tst.w	fp, #32
 801d748:	d012      	beq.n	801d770 <_vfprintf_r+0x388>
 801d74a:	3607      	adds	r6, #7
 801d74c:	f026 0307 	bic.w	r3, r6, #7
 801d750:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801d754:	9306      	str	r3, [sp, #24]
 801d756:	2e00      	cmp	r6, #0
 801d758:	f177 0300 	sbcs.w	r3, r7, #0
 801d75c:	da06      	bge.n	801d76c <_vfprintf_r+0x384>
 801d75e:	4276      	negs	r6, r6
 801d760:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801d764:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801d768:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d76c:	2301      	movs	r3, #1
 801d76e:	e392      	b.n	801de96 <_vfprintf_r+0xaae>
 801d770:	1d33      	adds	r3, r6, #4
 801d772:	f01b 0f10 	tst.w	fp, #16
 801d776:	9306      	str	r3, [sp, #24]
 801d778:	d002      	beq.n	801d780 <_vfprintf_r+0x398>
 801d77a:	6836      	ldr	r6, [r6, #0]
 801d77c:	17f7      	asrs	r7, r6, #31
 801d77e:	e7ea      	b.n	801d756 <_vfprintf_r+0x36e>
 801d780:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801d784:	6836      	ldr	r6, [r6, #0]
 801d786:	d001      	beq.n	801d78c <_vfprintf_r+0x3a4>
 801d788:	b236      	sxth	r6, r6
 801d78a:	e7f7      	b.n	801d77c <_vfprintf_r+0x394>
 801d78c:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801d790:	bf18      	it	ne
 801d792:	b276      	sxtbne	r6, r6
 801d794:	e7f2      	b.n	801d77c <_vfprintf_r+0x394>
 801d796:	3607      	adds	r6, #7
 801d798:	f026 0307 	bic.w	r3, r6, #7
 801d79c:	ecb3 7b02 	vldmia	r3!, {d7}
 801d7a0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d7a4:	9306      	str	r3, [sp, #24]
 801d7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d7a8:	ee09 3a10 	vmov	s18, r3
 801d7ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d7b2:	ee09 3a90 	vmov	s19, r3
 801d7b6:	f04f 32ff 	mov.w	r2, #4294967295
 801d7ba:	4b39      	ldr	r3, [pc, #228]	; (801d8a0 <_vfprintf_r+0x4b8>)
 801d7bc:	ec51 0b19 	vmov	r0, r1, d9
 801d7c0:	f7e3 f9e4 	bl	8000b8c <__aeabi_dcmpun>
 801d7c4:	bb20      	cbnz	r0, 801d810 <_vfprintf_r+0x428>
 801d7c6:	4b36      	ldr	r3, [pc, #216]	; (801d8a0 <_vfprintf_r+0x4b8>)
 801d7c8:	ec51 0b19 	vmov	r0, r1, d9
 801d7cc:	f04f 32ff 	mov.w	r2, #4294967295
 801d7d0:	f7e3 f9be 	bl	8000b50 <__aeabi_dcmple>
 801d7d4:	b9e0      	cbnz	r0, 801d810 <_vfprintf_r+0x428>
 801d7d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d7da:	2200      	movs	r2, #0
 801d7dc:	2300      	movs	r3, #0
 801d7de:	f7e3 f9ad 	bl	8000b3c <__aeabi_dcmplt>
 801d7e2:	b110      	cbz	r0, 801d7ea <_vfprintf_r+0x402>
 801d7e4:	232d      	movs	r3, #45	; 0x2d
 801d7e6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d7ea:	4a2e      	ldr	r2, [pc, #184]	; (801d8a4 <_vfprintf_r+0x4bc>)
 801d7ec:	482e      	ldr	r0, [pc, #184]	; (801d8a8 <_vfprintf_r+0x4c0>)
 801d7ee:	9907      	ldr	r1, [sp, #28]
 801d7f0:	4613      	mov	r3, r2
 801d7f2:	2947      	cmp	r1, #71	; 0x47
 801d7f4:	bfc8      	it	gt
 801d7f6:	4603      	movgt	r3, r0
 801d7f8:	9303      	str	r3, [sp, #12]
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801d800:	9304      	str	r3, [sp, #16]
 801d802:	f04f 0803 	mov.w	r8, #3
 801d806:	461e      	mov	r6, r3
 801d808:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d80c:	461d      	mov	r5, r3
 801d80e:	e157      	b.n	801dac0 <_vfprintf_r+0x6d8>
 801d810:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d814:	4610      	mov	r0, r2
 801d816:	4619      	mov	r1, r3
 801d818:	f7e3 f9b8 	bl	8000b8c <__aeabi_dcmpun>
 801d81c:	b140      	cbz	r0, 801d830 <_vfprintf_r+0x448>
 801d81e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d820:	4a22      	ldr	r2, [pc, #136]	; (801d8ac <_vfprintf_r+0x4c4>)
 801d822:	4823      	ldr	r0, [pc, #140]	; (801d8b0 <_vfprintf_r+0x4c8>)
 801d824:	2b00      	cmp	r3, #0
 801d826:	bfbc      	itt	lt
 801d828:	232d      	movlt	r3, #45	; 0x2d
 801d82a:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801d82e:	e7de      	b.n	801d7ee <_vfprintf_r+0x406>
 801d830:	9b07      	ldr	r3, [sp, #28]
 801d832:	f023 0320 	bic.w	r3, r3, #32
 801d836:	2b41      	cmp	r3, #65	; 0x41
 801d838:	9308      	str	r3, [sp, #32]
 801d83a:	d13b      	bne.n	801d8b4 <_vfprintf_r+0x4cc>
 801d83c:	2330      	movs	r3, #48	; 0x30
 801d83e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801d842:	9b07      	ldr	r3, [sp, #28]
 801d844:	2b61      	cmp	r3, #97	; 0x61
 801d846:	bf0c      	ite	eq
 801d848:	2378      	moveq	r3, #120	; 0x78
 801d84a:	2358      	movne	r3, #88	; 0x58
 801d84c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 801d850:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801d854:	f04b 0b02 	orr.w	fp, fp, #2
 801d858:	f340 8209 	ble.w	801dc6e <_vfprintf_r+0x886>
 801d85c:	f108 0101 	add.w	r1, r8, #1
 801d860:	4650      	mov	r0, sl
 801d862:	f002 fb01 	bl	801fe68 <_malloc_r>
 801d866:	9003      	str	r0, [sp, #12]
 801d868:	2800      	cmp	r0, #0
 801d86a:	f040 8204 	bne.w	801dc76 <_vfprintf_r+0x88e>
 801d86e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d876:	f8a9 300c 	strh.w	r3, [r9, #12]
 801d87a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d87e:	07d9      	lsls	r1, r3, #31
 801d880:	d407      	bmi.n	801d892 <_vfprintf_r+0x4aa>
 801d882:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d886:	059a      	lsls	r2, r3, #22
 801d888:	d403      	bmi.n	801d892 <_vfprintf_r+0x4aa>
 801d88a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d88e:	f002 fa6e 	bl	801fd6e <__retarget_lock_release_recursive>
 801d892:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d896:	065b      	lsls	r3, r3, #25
 801d898:	f57f adee 	bpl.w	801d478 <_vfprintf_r+0x90>
 801d89c:	e5e9      	b.n	801d472 <_vfprintf_r+0x8a>
 801d89e:	bf00      	nop
 801d8a0:	7fefffff 	.word	0x7fefffff
 801d8a4:	08029278 	.word	0x08029278
 801d8a8:	0802927c 	.word	0x0802927c
 801d8ac:	08029280 	.word	0x08029280
 801d8b0:	08029284 	.word	0x08029284
 801d8b4:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d8b8:	f000 81e0 	beq.w	801dc7c <_vfprintf_r+0x894>
 801d8bc:	9b08      	ldr	r3, [sp, #32]
 801d8be:	2b47      	cmp	r3, #71	; 0x47
 801d8c0:	f040 81e0 	bne.w	801dc84 <_vfprintf_r+0x89c>
 801d8c4:	f1b8 0f00 	cmp.w	r8, #0
 801d8c8:	f040 81dc 	bne.w	801dc84 <_vfprintf_r+0x89c>
 801d8cc:	f8cd 8010 	str.w	r8, [sp, #16]
 801d8d0:	f04f 0801 	mov.w	r8, #1
 801d8d4:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801d8d8:	9311      	str	r3, [sp, #68]	; 0x44
 801d8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	f280 81d3 	bge.w	801dc88 <_vfprintf_r+0x8a0>
 801d8e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8e4:	ee08 3a10 	vmov	s16, r3
 801d8e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d8ee:	ee08 3a90 	vmov	s17, r3
 801d8f2:	232d      	movs	r3, #45	; 0x2d
 801d8f4:	9318      	str	r3, [sp, #96]	; 0x60
 801d8f6:	9b08      	ldr	r3, [sp, #32]
 801d8f8:	2b41      	cmp	r3, #65	; 0x41
 801d8fa:	f040 81e3 	bne.w	801dcc4 <_vfprintf_r+0x8dc>
 801d8fe:	eeb0 0a48 	vmov.f32	s0, s16
 801d902:	eef0 0a68 	vmov.f32	s1, s17
 801d906:	a81c      	add	r0, sp, #112	; 0x70
 801d908:	f003 f82c 	bl	8020964 <frexp>
 801d90c:	2200      	movs	r2, #0
 801d90e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801d912:	ec51 0b10 	vmov	r0, r1, d0
 801d916:	f7e2 fe9f 	bl	8000658 <__aeabi_dmul>
 801d91a:	2200      	movs	r2, #0
 801d91c:	2300      	movs	r3, #0
 801d91e:	4606      	mov	r6, r0
 801d920:	460f      	mov	r7, r1
 801d922:	f7e3 f901 	bl	8000b28 <__aeabi_dcmpeq>
 801d926:	b108      	cbz	r0, 801d92c <_vfprintf_r+0x544>
 801d928:	2301      	movs	r3, #1
 801d92a:	931c      	str	r3, [sp, #112]	; 0x70
 801d92c:	4bb7      	ldr	r3, [pc, #732]	; (801dc0c <_vfprintf_r+0x824>)
 801d92e:	4ab8      	ldr	r2, [pc, #736]	; (801dc10 <_vfprintf_r+0x828>)
 801d930:	9907      	ldr	r1, [sp, #28]
 801d932:	9d03      	ldr	r5, [sp, #12]
 801d934:	2961      	cmp	r1, #97	; 0x61
 801d936:	bf18      	it	ne
 801d938:	461a      	movne	r2, r3
 801d93a:	f108 33ff 	add.w	r3, r8, #4294967295
 801d93e:	9217      	str	r2, [sp, #92]	; 0x5c
 801d940:	9305      	str	r3, [sp, #20]
 801d942:	4bb4      	ldr	r3, [pc, #720]	; (801dc14 <_vfprintf_r+0x82c>)
 801d944:	2200      	movs	r2, #0
 801d946:	4630      	mov	r0, r6
 801d948:	4639      	mov	r1, r7
 801d94a:	f7e2 fe85 	bl	8000658 <__aeabi_dmul>
 801d94e:	460f      	mov	r7, r1
 801d950:	4606      	mov	r6, r0
 801d952:	f7e3 f931 	bl	8000bb8 <__aeabi_d2iz>
 801d956:	9019      	str	r0, [sp, #100]	; 0x64
 801d958:	f7e2 fe14 	bl	8000584 <__aeabi_i2d>
 801d95c:	4602      	mov	r2, r0
 801d95e:	460b      	mov	r3, r1
 801d960:	4630      	mov	r0, r6
 801d962:	4639      	mov	r1, r7
 801d964:	f7e2 fcc0 	bl	80002e8 <__aeabi_dsub>
 801d968:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d96a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d96c:	5c9b      	ldrb	r3, [r3, r2]
 801d96e:	f805 3b01 	strb.w	r3, [r5], #1
 801d972:	9b05      	ldr	r3, [sp, #20]
 801d974:	9309      	str	r3, [sp, #36]	; 0x24
 801d976:	1c5a      	adds	r2, r3, #1
 801d978:	4606      	mov	r6, r0
 801d97a:	460f      	mov	r7, r1
 801d97c:	d007      	beq.n	801d98e <_vfprintf_r+0x5a6>
 801d97e:	3b01      	subs	r3, #1
 801d980:	9305      	str	r3, [sp, #20]
 801d982:	2200      	movs	r2, #0
 801d984:	2300      	movs	r3, #0
 801d986:	f7e3 f8cf 	bl	8000b28 <__aeabi_dcmpeq>
 801d98a:	2800      	cmp	r0, #0
 801d98c:	d0d9      	beq.n	801d942 <_vfprintf_r+0x55a>
 801d98e:	4ba2      	ldr	r3, [pc, #648]	; (801dc18 <_vfprintf_r+0x830>)
 801d990:	2200      	movs	r2, #0
 801d992:	4630      	mov	r0, r6
 801d994:	4639      	mov	r1, r7
 801d996:	f7e3 f8ef 	bl	8000b78 <__aeabi_dcmpgt>
 801d99a:	b960      	cbnz	r0, 801d9b6 <_vfprintf_r+0x5ce>
 801d99c:	4b9e      	ldr	r3, [pc, #632]	; (801dc18 <_vfprintf_r+0x830>)
 801d99e:	2200      	movs	r2, #0
 801d9a0:	4630      	mov	r0, r6
 801d9a2:	4639      	mov	r1, r7
 801d9a4:	f7e3 f8c0 	bl	8000b28 <__aeabi_dcmpeq>
 801d9a8:	2800      	cmp	r0, #0
 801d9aa:	f000 8186 	beq.w	801dcba <_vfprintf_r+0x8d2>
 801d9ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d9b0:	07df      	lsls	r7, r3, #31
 801d9b2:	f140 8182 	bpl.w	801dcba <_vfprintf_r+0x8d2>
 801d9b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d9b8:	9520      	str	r5, [sp, #128]	; 0x80
 801d9ba:	7bd9      	ldrb	r1, [r3, #15]
 801d9bc:	2030      	movs	r0, #48	; 0x30
 801d9be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d9c0:	1e53      	subs	r3, r2, #1
 801d9c2:	9320      	str	r3, [sp, #128]	; 0x80
 801d9c4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801d9c8:	428b      	cmp	r3, r1
 801d9ca:	f000 8165 	beq.w	801dc98 <_vfprintf_r+0x8b0>
 801d9ce:	2b39      	cmp	r3, #57	; 0x39
 801d9d0:	bf0b      	itete	eq
 801d9d2:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801d9d4:	3301      	addne	r3, #1
 801d9d6:	7a9b      	ldrbeq	r3, [r3, #10]
 801d9d8:	b2db      	uxtbne	r3, r3
 801d9da:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d9de:	9b03      	ldr	r3, [sp, #12]
 801d9e0:	1aeb      	subs	r3, r5, r3
 801d9e2:	9305      	str	r3, [sp, #20]
 801d9e4:	9b08      	ldr	r3, [sp, #32]
 801d9e6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d9e8:	2b47      	cmp	r3, #71	; 0x47
 801d9ea:	f040 81b3 	bne.w	801dd54 <_vfprintf_r+0x96c>
 801d9ee:	1cee      	adds	r6, r5, #3
 801d9f0:	db02      	blt.n	801d9f8 <_vfprintf_r+0x610>
 801d9f2:	4545      	cmp	r5, r8
 801d9f4:	f340 81d5 	ble.w	801dda2 <_vfprintf_r+0x9ba>
 801d9f8:	9b07      	ldr	r3, [sp, #28]
 801d9fa:	3b02      	subs	r3, #2
 801d9fc:	9307      	str	r3, [sp, #28]
 801d9fe:	9907      	ldr	r1, [sp, #28]
 801da00:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801da04:	f021 0120 	bic.w	r1, r1, #32
 801da08:	2941      	cmp	r1, #65	; 0x41
 801da0a:	bf08      	it	eq
 801da0c:	320f      	addeq	r2, #15
 801da0e:	f105 33ff 	add.w	r3, r5, #4294967295
 801da12:	bf06      	itte	eq
 801da14:	b2d2      	uxtbeq	r2, r2
 801da16:	2101      	moveq	r1, #1
 801da18:	2100      	movne	r1, #0
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	931c      	str	r3, [sp, #112]	; 0x70
 801da1e:	bfb8      	it	lt
 801da20:	f1c5 0301 	rsblt	r3, r5, #1
 801da24:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801da28:	bfb4      	ite	lt
 801da2a:	222d      	movlt	r2, #45	; 0x2d
 801da2c:	222b      	movge	r2, #43	; 0x2b
 801da2e:	2b09      	cmp	r3, #9
 801da30:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801da34:	f340 81a4 	ble.w	801dd80 <_vfprintf_r+0x998>
 801da38:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801da3c:	260a      	movs	r6, #10
 801da3e:	4611      	mov	r1, r2
 801da40:	fb93 f5f6 	sdiv	r5, r3, r6
 801da44:	fb06 3015 	mls	r0, r6, r5, r3
 801da48:	3030      	adds	r0, #48	; 0x30
 801da4a:	f801 0c01 	strb.w	r0, [r1, #-1]
 801da4e:	4618      	mov	r0, r3
 801da50:	2863      	cmp	r0, #99	; 0x63
 801da52:	f102 32ff 	add.w	r2, r2, #4294967295
 801da56:	462b      	mov	r3, r5
 801da58:	dcf1      	bgt.n	801da3e <_vfprintf_r+0x656>
 801da5a:	3330      	adds	r3, #48	; 0x30
 801da5c:	1e88      	subs	r0, r1, #2
 801da5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801da62:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801da66:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801da6a:	4603      	mov	r3, r0
 801da6c:	42ab      	cmp	r3, r5
 801da6e:	f0c0 8182 	bcc.w	801dd76 <_vfprintf_r+0x98e>
 801da72:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801da76:	1a52      	subs	r2, r2, r1
 801da78:	42a8      	cmp	r0, r5
 801da7a:	bf88      	it	hi
 801da7c:	2200      	movhi	r2, #0
 801da7e:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801da82:	441a      	add	r2, r3
 801da84:	ab1e      	add	r3, sp, #120	; 0x78
 801da86:	1ad3      	subs	r3, r2, r3
 801da88:	9a05      	ldr	r2, [sp, #20]
 801da8a:	9315      	str	r3, [sp, #84]	; 0x54
 801da8c:	2a01      	cmp	r2, #1
 801da8e:	eb03 0802 	add.w	r8, r3, r2
 801da92:	dc02      	bgt.n	801da9a <_vfprintf_r+0x6b2>
 801da94:	f01b 0f01 	tst.w	fp, #1
 801da98:	d001      	beq.n	801da9e <_vfprintf_r+0x6b6>
 801da9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801da9c:	4498      	add	r8, r3
 801da9e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801daa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801daa6:	9311      	str	r3, [sp, #68]	; 0x44
 801daa8:	2300      	movs	r3, #0
 801daaa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801daae:	461d      	mov	r5, r3
 801dab0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dab2:	b113      	cbz	r3, 801daba <_vfprintf_r+0x6d2>
 801dab4:	232d      	movs	r3, #45	; 0x2d
 801dab6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801daba:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801dabe:	2600      	movs	r6, #0
 801dac0:	4546      	cmp	r6, r8
 801dac2:	4633      	mov	r3, r6
 801dac4:	bfb8      	it	lt
 801dac6:	4643      	movlt	r3, r8
 801dac8:	9311      	str	r3, [sp, #68]	; 0x44
 801daca:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801dace:	b113      	cbz	r3, 801dad6 <_vfprintf_r+0x6ee>
 801dad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dad2:	3301      	adds	r3, #1
 801dad4:	9311      	str	r3, [sp, #68]	; 0x44
 801dad6:	f01b 0302 	ands.w	r3, fp, #2
 801dada:	9317      	str	r3, [sp, #92]	; 0x5c
 801dadc:	bf1e      	ittt	ne
 801dade:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801dae0:	3302      	addne	r3, #2
 801dae2:	9311      	strne	r3, [sp, #68]	; 0x44
 801dae4:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801dae8:	9318      	str	r3, [sp, #96]	; 0x60
 801daea:	d11f      	bne.n	801db2c <_vfprintf_r+0x744>
 801daec:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801daf0:	1a9f      	subs	r7, r3, r2
 801daf2:	2f00      	cmp	r7, #0
 801daf4:	dd1a      	ble.n	801db2c <_vfprintf_r+0x744>
 801daf6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801dafa:	4848      	ldr	r0, [pc, #288]	; (801dc1c <_vfprintf_r+0x834>)
 801dafc:	6020      	str	r0, [r4, #0]
 801dafe:	2f10      	cmp	r7, #16
 801db00:	f103 0301 	add.w	r3, r3, #1
 801db04:	f104 0108 	add.w	r1, r4, #8
 801db08:	f300 82f0 	bgt.w	801e0ec <_vfprintf_r+0xd04>
 801db0c:	6067      	str	r7, [r4, #4]
 801db0e:	2b07      	cmp	r3, #7
 801db10:	4417      	add	r7, r2
 801db12:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801db16:	f340 82fc 	ble.w	801e112 <_vfprintf_r+0xd2a>
 801db1a:	aa22      	add	r2, sp, #136	; 0x88
 801db1c:	4649      	mov	r1, r9
 801db1e:	4650      	mov	r0, sl
 801db20:	f004 f963 	bl	8021dea <__sprint_r>
 801db24:	2800      	cmp	r0, #0
 801db26:	f040 8632 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801db2a:	ac25      	add	r4, sp, #148	; 0x94
 801db2c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801db30:	b173      	cbz	r3, 801db50 <_vfprintf_r+0x768>
 801db32:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801db36:	6023      	str	r3, [r4, #0]
 801db38:	2301      	movs	r3, #1
 801db3a:	6063      	str	r3, [r4, #4]
 801db3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801db3e:	3301      	adds	r3, #1
 801db40:	9324      	str	r3, [sp, #144]	; 0x90
 801db42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801db44:	3301      	adds	r3, #1
 801db46:	2b07      	cmp	r3, #7
 801db48:	9323      	str	r3, [sp, #140]	; 0x8c
 801db4a:	f300 82e4 	bgt.w	801e116 <_vfprintf_r+0xd2e>
 801db4e:	3408      	adds	r4, #8
 801db50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801db52:	b16b      	cbz	r3, 801db70 <_vfprintf_r+0x788>
 801db54:	ab1b      	add	r3, sp, #108	; 0x6c
 801db56:	6023      	str	r3, [r4, #0]
 801db58:	2302      	movs	r3, #2
 801db5a:	6063      	str	r3, [r4, #4]
 801db5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801db5e:	3302      	adds	r3, #2
 801db60:	9324      	str	r3, [sp, #144]	; 0x90
 801db62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801db64:	3301      	adds	r3, #1
 801db66:	2b07      	cmp	r3, #7
 801db68:	9323      	str	r3, [sp, #140]	; 0x8c
 801db6a:	f300 82de 	bgt.w	801e12a <_vfprintf_r+0xd42>
 801db6e:	3408      	adds	r4, #8
 801db70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801db72:	2b80      	cmp	r3, #128	; 0x80
 801db74:	d11f      	bne.n	801dbb6 <_vfprintf_r+0x7ce>
 801db76:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801db7a:	1a9f      	subs	r7, r3, r2
 801db7c:	2f00      	cmp	r7, #0
 801db7e:	dd1a      	ble.n	801dbb6 <_vfprintf_r+0x7ce>
 801db80:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801db84:	4826      	ldr	r0, [pc, #152]	; (801dc20 <_vfprintf_r+0x838>)
 801db86:	6020      	str	r0, [r4, #0]
 801db88:	2f10      	cmp	r7, #16
 801db8a:	f103 0301 	add.w	r3, r3, #1
 801db8e:	f104 0108 	add.w	r1, r4, #8
 801db92:	f300 82d4 	bgt.w	801e13e <_vfprintf_r+0xd56>
 801db96:	6067      	str	r7, [r4, #4]
 801db98:	2b07      	cmp	r3, #7
 801db9a:	4417      	add	r7, r2
 801db9c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801dba0:	f340 82e0 	ble.w	801e164 <_vfprintf_r+0xd7c>
 801dba4:	aa22      	add	r2, sp, #136	; 0x88
 801dba6:	4649      	mov	r1, r9
 801dba8:	4650      	mov	r0, sl
 801dbaa:	f004 f91e 	bl	8021dea <__sprint_r>
 801dbae:	2800      	cmp	r0, #0
 801dbb0:	f040 85ed 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801dbb4:	ac25      	add	r4, sp, #148	; 0x94
 801dbb6:	eba6 0608 	sub.w	r6, r6, r8
 801dbba:	2e00      	cmp	r6, #0
 801dbbc:	dd1a      	ble.n	801dbf4 <_vfprintf_r+0x80c>
 801dbbe:	4f18      	ldr	r7, [pc, #96]	; (801dc20 <_vfprintf_r+0x838>)
 801dbc0:	6027      	str	r7, [r4, #0]
 801dbc2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801dbc6:	2e10      	cmp	r6, #16
 801dbc8:	f103 0301 	add.w	r3, r3, #1
 801dbcc:	f104 0108 	add.w	r1, r4, #8
 801dbd0:	f300 82ca 	bgt.w	801e168 <_vfprintf_r+0xd80>
 801dbd4:	6066      	str	r6, [r4, #4]
 801dbd6:	2b07      	cmp	r3, #7
 801dbd8:	4416      	add	r6, r2
 801dbda:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801dbde:	f340 82d6 	ble.w	801e18e <_vfprintf_r+0xda6>
 801dbe2:	aa22      	add	r2, sp, #136	; 0x88
 801dbe4:	4649      	mov	r1, r9
 801dbe6:	4650      	mov	r0, sl
 801dbe8:	f004 f8ff 	bl	8021dea <__sprint_r>
 801dbec:	2800      	cmp	r0, #0
 801dbee:	f040 85ce 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801dbf2:	ac25      	add	r4, sp, #148	; 0x94
 801dbf4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801dbf8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801dbfa:	f040 82cf 	bne.w	801e19c <_vfprintf_r+0xdb4>
 801dbfe:	9b03      	ldr	r3, [sp, #12]
 801dc00:	e9c4 3800 	strd	r3, r8, [r4]
 801dc04:	4446      	add	r6, r8
 801dc06:	9624      	str	r6, [sp, #144]	; 0x90
 801dc08:	e00c      	b.n	801dc24 <_vfprintf_r+0x83c>
 801dc0a:	bf00      	nop
 801dc0c:	08029299 	.word	0x08029299
 801dc10:	08029288 	.word	0x08029288
 801dc14:	40300000 	.word	0x40300000
 801dc18:	3fe00000 	.word	0x3fe00000
 801dc1c:	08029308 	.word	0x08029308
 801dc20:	08029318 	.word	0x08029318
 801dc24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801dc26:	3301      	adds	r3, #1
 801dc28:	2b07      	cmp	r3, #7
 801dc2a:	9323      	str	r3, [sp, #140]	; 0x8c
 801dc2c:	f300 82fb 	bgt.w	801e226 <_vfprintf_r+0xe3e>
 801dc30:	3408      	adds	r4, #8
 801dc32:	f01b 0f04 	tst.w	fp, #4
 801dc36:	f040 858c 	bne.w	801e752 <_vfprintf_r+0x136a>
 801dc3a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801dc3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dc40:	428a      	cmp	r2, r1
 801dc42:	bfac      	ite	ge
 801dc44:	189b      	addge	r3, r3, r2
 801dc46:	185b      	addlt	r3, r3, r1
 801dc48:	930f      	str	r3, [sp, #60]	; 0x3c
 801dc4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dc4c:	b13b      	cbz	r3, 801dc5e <_vfprintf_r+0x876>
 801dc4e:	aa22      	add	r2, sp, #136	; 0x88
 801dc50:	4649      	mov	r1, r9
 801dc52:	4650      	mov	r0, sl
 801dc54:	f004 f8c9 	bl	8021dea <__sprint_r>
 801dc58:	2800      	cmp	r0, #0
 801dc5a:	f040 8598 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801dc5e:	2300      	movs	r3, #0
 801dc60:	9323      	str	r3, [sp, #140]	; 0x8c
 801dc62:	9b04      	ldr	r3, [sp, #16]
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	f040 85ae 	bne.w	801e7c6 <_vfprintf_r+0x13de>
 801dc6a:	ac25      	add	r4, sp, #148	; 0x94
 801dc6c:	e0eb      	b.n	801de46 <_vfprintf_r+0xa5e>
 801dc6e:	ab35      	add	r3, sp, #212	; 0xd4
 801dc70:	9004      	str	r0, [sp, #16]
 801dc72:	9303      	str	r3, [sp, #12]
 801dc74:	e62e      	b.n	801d8d4 <_vfprintf_r+0x4ec>
 801dc76:	9b03      	ldr	r3, [sp, #12]
 801dc78:	9304      	str	r3, [sp, #16]
 801dc7a:	e62b      	b.n	801d8d4 <_vfprintf_r+0x4ec>
 801dc7c:	9004      	str	r0, [sp, #16]
 801dc7e:	f04f 0806 	mov.w	r8, #6
 801dc82:	e627      	b.n	801d8d4 <_vfprintf_r+0x4ec>
 801dc84:	9004      	str	r0, [sp, #16]
 801dc86:	e625      	b.n	801d8d4 <_vfprintf_r+0x4ec>
 801dc88:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801dc8c:	2300      	movs	r3, #0
 801dc8e:	eeb0 8a47 	vmov.f32	s16, s14
 801dc92:	eef0 8a67 	vmov.f32	s17, s15
 801dc96:	e62d      	b.n	801d8f4 <_vfprintf_r+0x50c>
 801dc98:	f802 0c01 	strb.w	r0, [r2, #-1]
 801dc9c:	e68f      	b.n	801d9be <_vfprintf_r+0x5d6>
 801dc9e:	f803 0b01 	strb.w	r0, [r3], #1
 801dca2:	1aca      	subs	r2, r1, r3
 801dca4:	2a00      	cmp	r2, #0
 801dca6:	dafa      	bge.n	801dc9e <_vfprintf_r+0x8b6>
 801dca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcac:	3201      	adds	r2, #1
 801dcae:	f103 0301 	add.w	r3, r3, #1
 801dcb2:	bfb8      	it	lt
 801dcb4:	2300      	movlt	r3, #0
 801dcb6:	441d      	add	r5, r3
 801dcb8:	e691      	b.n	801d9de <_vfprintf_r+0x5f6>
 801dcba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dcbc:	462b      	mov	r3, r5
 801dcbe:	18a9      	adds	r1, r5, r2
 801dcc0:	2030      	movs	r0, #48	; 0x30
 801dcc2:	e7ee      	b.n	801dca2 <_vfprintf_r+0x8ba>
 801dcc4:	9b08      	ldr	r3, [sp, #32]
 801dcc6:	2b46      	cmp	r3, #70	; 0x46
 801dcc8:	d005      	beq.n	801dcd6 <_vfprintf_r+0x8ee>
 801dcca:	2b45      	cmp	r3, #69	; 0x45
 801dccc:	d11b      	bne.n	801dd06 <_vfprintf_r+0x91e>
 801dcce:	f108 0501 	add.w	r5, r8, #1
 801dcd2:	2102      	movs	r1, #2
 801dcd4:	e001      	b.n	801dcda <_vfprintf_r+0x8f2>
 801dcd6:	4645      	mov	r5, r8
 801dcd8:	2103      	movs	r1, #3
 801dcda:	ab20      	add	r3, sp, #128	; 0x80
 801dcdc:	9301      	str	r3, [sp, #4]
 801dcde:	ab1d      	add	r3, sp, #116	; 0x74
 801dce0:	9300      	str	r3, [sp, #0]
 801dce2:	462a      	mov	r2, r5
 801dce4:	ab1c      	add	r3, sp, #112	; 0x70
 801dce6:	4650      	mov	r0, sl
 801dce8:	eeb0 0a48 	vmov.f32	s0, s16
 801dcec:	eef0 0a68 	vmov.f32	s1, s17
 801dcf0:	f000 fefa 	bl	801eae8 <_dtoa_r>
 801dcf4:	9b08      	ldr	r3, [sp, #32]
 801dcf6:	9003      	str	r0, [sp, #12]
 801dcf8:	2b47      	cmp	r3, #71	; 0x47
 801dcfa:	d106      	bne.n	801dd0a <_vfprintf_r+0x922>
 801dcfc:	f01b 0f01 	tst.w	fp, #1
 801dd00:	d103      	bne.n	801dd0a <_vfprintf_r+0x922>
 801dd02:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801dd04:	e66b      	b.n	801d9de <_vfprintf_r+0x5f6>
 801dd06:	4645      	mov	r5, r8
 801dd08:	e7e3      	b.n	801dcd2 <_vfprintf_r+0x8ea>
 801dd0a:	9b03      	ldr	r3, [sp, #12]
 801dd0c:	195e      	adds	r6, r3, r5
 801dd0e:	9b08      	ldr	r3, [sp, #32]
 801dd10:	2b46      	cmp	r3, #70	; 0x46
 801dd12:	d10f      	bne.n	801dd34 <_vfprintf_r+0x94c>
 801dd14:	9b03      	ldr	r3, [sp, #12]
 801dd16:	781b      	ldrb	r3, [r3, #0]
 801dd18:	2b30      	cmp	r3, #48	; 0x30
 801dd1a:	d109      	bne.n	801dd30 <_vfprintf_r+0x948>
 801dd1c:	ec51 0b18 	vmov	r0, r1, d8
 801dd20:	2200      	movs	r2, #0
 801dd22:	2300      	movs	r3, #0
 801dd24:	f7e2 ff00 	bl	8000b28 <__aeabi_dcmpeq>
 801dd28:	b910      	cbnz	r0, 801dd30 <_vfprintf_r+0x948>
 801dd2a:	f1c5 0501 	rsb	r5, r5, #1
 801dd2e:	951c      	str	r5, [sp, #112]	; 0x70
 801dd30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dd32:	441e      	add	r6, r3
 801dd34:	ec51 0b18 	vmov	r0, r1, d8
 801dd38:	2200      	movs	r2, #0
 801dd3a:	2300      	movs	r3, #0
 801dd3c:	f7e2 fef4 	bl	8000b28 <__aeabi_dcmpeq>
 801dd40:	b100      	cbz	r0, 801dd44 <_vfprintf_r+0x95c>
 801dd42:	9620      	str	r6, [sp, #128]	; 0x80
 801dd44:	2230      	movs	r2, #48	; 0x30
 801dd46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dd48:	429e      	cmp	r6, r3
 801dd4a:	d9da      	bls.n	801dd02 <_vfprintf_r+0x91a>
 801dd4c:	1c59      	adds	r1, r3, #1
 801dd4e:	9120      	str	r1, [sp, #128]	; 0x80
 801dd50:	701a      	strb	r2, [r3, #0]
 801dd52:	e7f8      	b.n	801dd46 <_vfprintf_r+0x95e>
 801dd54:	9b08      	ldr	r3, [sp, #32]
 801dd56:	2b46      	cmp	r3, #70	; 0x46
 801dd58:	f47f ae51 	bne.w	801d9fe <_vfprintf_r+0x616>
 801dd5c:	f00b 0301 	and.w	r3, fp, #1
 801dd60:	2d00      	cmp	r5, #0
 801dd62:	ea43 0308 	orr.w	r3, r3, r8
 801dd66:	dd18      	ble.n	801dd9a <_vfprintf_r+0x9b2>
 801dd68:	b383      	cbz	r3, 801ddcc <_vfprintf_r+0x9e4>
 801dd6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd6c:	18eb      	adds	r3, r5, r3
 801dd6e:	4498      	add	r8, r3
 801dd70:	2366      	movs	r3, #102	; 0x66
 801dd72:	9307      	str	r3, [sp, #28]
 801dd74:	e030      	b.n	801ddd8 <_vfprintf_r+0x9f0>
 801dd76:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dd7a:	f802 6b01 	strb.w	r6, [r2], #1
 801dd7e:	e675      	b.n	801da6c <_vfprintf_r+0x684>
 801dd80:	b941      	cbnz	r1, 801dd94 <_vfprintf_r+0x9ac>
 801dd82:	2230      	movs	r2, #48	; 0x30
 801dd84:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801dd88:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801dd8c:	3330      	adds	r3, #48	; 0x30
 801dd8e:	f802 3b01 	strb.w	r3, [r2], #1
 801dd92:	e677      	b.n	801da84 <_vfprintf_r+0x69c>
 801dd94:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801dd98:	e7f8      	b.n	801dd8c <_vfprintf_r+0x9a4>
 801dd9a:	b1cb      	cbz	r3, 801ddd0 <_vfprintf_r+0x9e8>
 801dd9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd9e:	3301      	adds	r3, #1
 801dda0:	e7e5      	b.n	801dd6e <_vfprintf_r+0x986>
 801dda2:	9b05      	ldr	r3, [sp, #20]
 801dda4:	429d      	cmp	r5, r3
 801dda6:	db07      	blt.n	801ddb8 <_vfprintf_r+0x9d0>
 801dda8:	f01b 0f01 	tst.w	fp, #1
 801ddac:	d029      	beq.n	801de02 <_vfprintf_r+0xa1a>
 801ddae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddb0:	eb05 0803 	add.w	r8, r5, r3
 801ddb4:	2367      	movs	r3, #103	; 0x67
 801ddb6:	e7dc      	b.n	801dd72 <_vfprintf_r+0x98a>
 801ddb8:	9b05      	ldr	r3, [sp, #20]
 801ddba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ddbc:	2d00      	cmp	r5, #0
 801ddbe:	eb03 0802 	add.w	r8, r3, r2
 801ddc2:	dcf7      	bgt.n	801ddb4 <_vfprintf_r+0x9cc>
 801ddc4:	f1c5 0301 	rsb	r3, r5, #1
 801ddc8:	4498      	add	r8, r3
 801ddca:	e7f3      	b.n	801ddb4 <_vfprintf_r+0x9cc>
 801ddcc:	46a8      	mov	r8, r5
 801ddce:	e7cf      	b.n	801dd70 <_vfprintf_r+0x988>
 801ddd0:	2366      	movs	r3, #102	; 0x66
 801ddd2:	9307      	str	r3, [sp, #28]
 801ddd4:	f04f 0801 	mov.w	r8, #1
 801ddd8:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801dddc:	9309      	str	r3, [sp, #36]	; 0x24
 801ddde:	d023      	beq.n	801de28 <_vfprintf_r+0xa40>
 801dde0:	2300      	movs	r3, #0
 801dde2:	2d00      	cmp	r5, #0
 801dde4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801dde8:	f77f ae62 	ble.w	801dab0 <_vfprintf_r+0x6c8>
 801ddec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddee:	781b      	ldrb	r3, [r3, #0]
 801ddf0:	2bff      	cmp	r3, #255	; 0xff
 801ddf2:	d108      	bne.n	801de06 <_vfprintf_r+0xa1e>
 801ddf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ddf8:	4413      	add	r3, r2
 801ddfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ddfc:	fb02 8803 	mla	r8, r2, r3, r8
 801de00:	e656      	b.n	801dab0 <_vfprintf_r+0x6c8>
 801de02:	46a8      	mov	r8, r5
 801de04:	e7d6      	b.n	801ddb4 <_vfprintf_r+0x9cc>
 801de06:	42ab      	cmp	r3, r5
 801de08:	daf4      	bge.n	801ddf4 <_vfprintf_r+0xa0c>
 801de0a:	1aed      	subs	r5, r5, r3
 801de0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de0e:	785b      	ldrb	r3, [r3, #1]
 801de10:	b133      	cbz	r3, 801de20 <_vfprintf_r+0xa38>
 801de12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de14:	3301      	adds	r3, #1
 801de16:	9309      	str	r3, [sp, #36]	; 0x24
 801de18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de1a:	3301      	adds	r3, #1
 801de1c:	930a      	str	r3, [sp, #40]	; 0x28
 801de1e:	e7e5      	b.n	801ddec <_vfprintf_r+0xa04>
 801de20:	9b08      	ldr	r3, [sp, #32]
 801de22:	3301      	adds	r3, #1
 801de24:	9308      	str	r3, [sp, #32]
 801de26:	e7e1      	b.n	801ddec <_vfprintf_r+0xa04>
 801de28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de2a:	9308      	str	r3, [sp, #32]
 801de2c:	e640      	b.n	801dab0 <_vfprintf_r+0x6c8>
 801de2e:	4632      	mov	r2, r6
 801de30:	f01b 0f20 	tst.w	fp, #32
 801de34:	f852 3b04 	ldr.w	r3, [r2], #4
 801de38:	9206      	str	r2, [sp, #24]
 801de3a:	d009      	beq.n	801de50 <_vfprintf_r+0xa68>
 801de3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de3e:	4610      	mov	r0, r2
 801de40:	17d1      	asrs	r1, r2, #31
 801de42:	e9c3 0100 	strd	r0, r1, [r3]
 801de46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de48:	9e06      	ldr	r6, [sp, #24]
 801de4a:	9303      	str	r3, [sp, #12]
 801de4c:	f7ff bb4f 	b.w	801d4ee <_vfprintf_r+0x106>
 801de50:	f01b 0f10 	tst.w	fp, #16
 801de54:	d002      	beq.n	801de5c <_vfprintf_r+0xa74>
 801de56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de58:	601a      	str	r2, [r3, #0]
 801de5a:	e7f4      	b.n	801de46 <_vfprintf_r+0xa5e>
 801de5c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801de60:	d002      	beq.n	801de68 <_vfprintf_r+0xa80>
 801de62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de64:	801a      	strh	r2, [r3, #0]
 801de66:	e7ee      	b.n	801de46 <_vfprintf_r+0xa5e>
 801de68:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801de6c:	d0f3      	beq.n	801de56 <_vfprintf_r+0xa6e>
 801de6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de70:	701a      	strb	r2, [r3, #0]
 801de72:	e7e8      	b.n	801de46 <_vfprintf_r+0xa5e>
 801de74:	f04b 0b10 	orr.w	fp, fp, #16
 801de78:	f01b 0f20 	tst.w	fp, #32
 801de7c:	d01e      	beq.n	801debc <_vfprintf_r+0xad4>
 801de7e:	3607      	adds	r6, #7
 801de80:	f026 0307 	bic.w	r3, r6, #7
 801de84:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801de88:	9306      	str	r3, [sp, #24]
 801de8a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801de8e:	2300      	movs	r3, #0
 801de90:	2200      	movs	r2, #0
 801de92:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801de96:	f1b8 3fff 	cmp.w	r8, #4294967295
 801de9a:	f000 84a9 	beq.w	801e7f0 <_vfprintf_r+0x1408>
 801de9e:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 801dea2:	9204      	str	r2, [sp, #16]
 801dea4:	ea56 0207 	orrs.w	r2, r6, r7
 801dea8:	f040 84a8 	bne.w	801e7fc <_vfprintf_r+0x1414>
 801deac:	f1b8 0f00 	cmp.w	r8, #0
 801deb0:	f000 8104 	beq.w	801e0bc <_vfprintf_r+0xcd4>
 801deb4:	2b01      	cmp	r3, #1
 801deb6:	f040 84a4 	bne.w	801e802 <_vfprintf_r+0x141a>
 801deba:	e09a      	b.n	801dff2 <_vfprintf_r+0xc0a>
 801debc:	1d33      	adds	r3, r6, #4
 801debe:	f01b 0f10 	tst.w	fp, #16
 801dec2:	9306      	str	r3, [sp, #24]
 801dec4:	d001      	beq.n	801deca <_vfprintf_r+0xae2>
 801dec6:	6836      	ldr	r6, [r6, #0]
 801dec8:	e003      	b.n	801ded2 <_vfprintf_r+0xaea>
 801deca:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801dece:	d002      	beq.n	801ded6 <_vfprintf_r+0xaee>
 801ded0:	8836      	ldrh	r6, [r6, #0]
 801ded2:	2700      	movs	r7, #0
 801ded4:	e7d9      	b.n	801de8a <_vfprintf_r+0xaa2>
 801ded6:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801deda:	d0f4      	beq.n	801dec6 <_vfprintf_r+0xade>
 801dedc:	7836      	ldrb	r6, [r6, #0]
 801dede:	e7f8      	b.n	801ded2 <_vfprintf_r+0xaea>
 801dee0:	4633      	mov	r3, r6
 801dee2:	2278      	movs	r2, #120	; 0x78
 801dee4:	f853 6b04 	ldr.w	r6, [r3], #4
 801dee8:	9306      	str	r3, [sp, #24]
 801deea:	f647 0330 	movw	r3, #30768	; 0x7830
 801deee:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801def2:	4ba8      	ldr	r3, [pc, #672]	; (801e194 <_vfprintf_r+0xdac>)
 801def4:	9316      	str	r3, [sp, #88]	; 0x58
 801def6:	2700      	movs	r7, #0
 801def8:	f04b 0b02 	orr.w	fp, fp, #2
 801defc:	2302      	movs	r3, #2
 801defe:	9207      	str	r2, [sp, #28]
 801df00:	e7c6      	b.n	801de90 <_vfprintf_r+0xaa8>
 801df02:	4632      	mov	r2, r6
 801df04:	2500      	movs	r5, #0
 801df06:	f852 3b04 	ldr.w	r3, [r2], #4
 801df0a:	9303      	str	r3, [sp, #12]
 801df0c:	f1b8 3fff 	cmp.w	r8, #4294967295
 801df10:	9206      	str	r2, [sp, #24]
 801df12:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801df16:	d010      	beq.n	801df3a <_vfprintf_r+0xb52>
 801df18:	9803      	ldr	r0, [sp, #12]
 801df1a:	4642      	mov	r2, r8
 801df1c:	4629      	mov	r1, r5
 801df1e:	f7e2 f98f 	bl	8000240 <memchr>
 801df22:	9004      	str	r0, [sp, #16]
 801df24:	2800      	cmp	r0, #0
 801df26:	f000 80df 	beq.w	801e0e8 <_vfprintf_r+0xd00>
 801df2a:	9a03      	ldr	r2, [sp, #12]
 801df2c:	9504      	str	r5, [sp, #16]
 801df2e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801df32:	eba0 0802 	sub.w	r8, r0, r2
 801df36:	462e      	mov	r6, r5
 801df38:	e5c2      	b.n	801dac0 <_vfprintf_r+0x6d8>
 801df3a:	9803      	ldr	r0, [sp, #12]
 801df3c:	f7e2 f972 	bl	8000224 <strlen>
 801df40:	462e      	mov	r6, r5
 801df42:	4680      	mov	r8, r0
 801df44:	9504      	str	r5, [sp, #16]
 801df46:	4633      	mov	r3, r6
 801df48:	e45e      	b.n	801d808 <_vfprintf_r+0x420>
 801df4a:	f04b 0b10 	orr.w	fp, fp, #16
 801df4e:	f01b 0f20 	tst.w	fp, #32
 801df52:	d007      	beq.n	801df64 <_vfprintf_r+0xb7c>
 801df54:	3607      	adds	r6, #7
 801df56:	f026 0307 	bic.w	r3, r6, #7
 801df5a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801df5e:	9306      	str	r3, [sp, #24]
 801df60:	2301      	movs	r3, #1
 801df62:	e795      	b.n	801de90 <_vfprintf_r+0xaa8>
 801df64:	1d33      	adds	r3, r6, #4
 801df66:	f01b 0f10 	tst.w	fp, #16
 801df6a:	9306      	str	r3, [sp, #24]
 801df6c:	d001      	beq.n	801df72 <_vfprintf_r+0xb8a>
 801df6e:	6836      	ldr	r6, [r6, #0]
 801df70:	e003      	b.n	801df7a <_vfprintf_r+0xb92>
 801df72:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801df76:	d002      	beq.n	801df7e <_vfprintf_r+0xb96>
 801df78:	8836      	ldrh	r6, [r6, #0]
 801df7a:	2700      	movs	r7, #0
 801df7c:	e7f0      	b.n	801df60 <_vfprintf_r+0xb78>
 801df7e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801df82:	d0f4      	beq.n	801df6e <_vfprintf_r+0xb86>
 801df84:	7836      	ldrb	r6, [r6, #0]
 801df86:	e7f8      	b.n	801df7a <_vfprintf_r+0xb92>
 801df88:	4b83      	ldr	r3, [pc, #524]	; (801e198 <_vfprintf_r+0xdb0>)
 801df8a:	9316      	str	r3, [sp, #88]	; 0x58
 801df8c:	f01b 0f20 	tst.w	fp, #32
 801df90:	d019      	beq.n	801dfc6 <_vfprintf_r+0xbde>
 801df92:	3607      	adds	r6, #7
 801df94:	f026 0307 	bic.w	r3, r6, #7
 801df98:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801df9c:	9306      	str	r3, [sp, #24]
 801df9e:	f01b 0f01 	tst.w	fp, #1
 801dfa2:	d00a      	beq.n	801dfba <_vfprintf_r+0xbd2>
 801dfa4:	ea56 0307 	orrs.w	r3, r6, r7
 801dfa8:	d007      	beq.n	801dfba <_vfprintf_r+0xbd2>
 801dfaa:	2330      	movs	r3, #48	; 0x30
 801dfac:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801dfb0:	9b07      	ldr	r3, [sp, #28]
 801dfb2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801dfb6:	f04b 0b02 	orr.w	fp, fp, #2
 801dfba:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801dfbe:	2302      	movs	r3, #2
 801dfc0:	e766      	b.n	801de90 <_vfprintf_r+0xaa8>
 801dfc2:	4b74      	ldr	r3, [pc, #464]	; (801e194 <_vfprintf_r+0xdac>)
 801dfc4:	e7e1      	b.n	801df8a <_vfprintf_r+0xba2>
 801dfc6:	1d33      	adds	r3, r6, #4
 801dfc8:	f01b 0f10 	tst.w	fp, #16
 801dfcc:	9306      	str	r3, [sp, #24]
 801dfce:	d001      	beq.n	801dfd4 <_vfprintf_r+0xbec>
 801dfd0:	6836      	ldr	r6, [r6, #0]
 801dfd2:	e003      	b.n	801dfdc <_vfprintf_r+0xbf4>
 801dfd4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801dfd8:	d002      	beq.n	801dfe0 <_vfprintf_r+0xbf8>
 801dfda:	8836      	ldrh	r6, [r6, #0]
 801dfdc:	2700      	movs	r7, #0
 801dfde:	e7de      	b.n	801df9e <_vfprintf_r+0xbb6>
 801dfe0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801dfe4:	d0f4      	beq.n	801dfd0 <_vfprintf_r+0xbe8>
 801dfe6:	7836      	ldrb	r6, [r6, #0]
 801dfe8:	e7f8      	b.n	801dfdc <_vfprintf_r+0xbf4>
 801dfea:	2f00      	cmp	r7, #0
 801dfec:	bf08      	it	eq
 801dfee:	2e0a      	cmpeq	r6, #10
 801dff0:	d206      	bcs.n	801e000 <_vfprintf_r+0xc18>
 801dff2:	3630      	adds	r6, #48	; 0x30
 801dff4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801dff8:	f20d 1337 	addw	r3, sp, #311	; 0x137
 801dffc:	f000 bc23 	b.w	801e846 <_vfprintf_r+0x145e>
 801e000:	2300      	movs	r3, #0
 801e002:	9305      	str	r3, [sp, #20]
 801e004:	9b04      	ldr	r3, [sp, #16]
 801e006:	ad4e      	add	r5, sp, #312	; 0x138
 801e008:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 801e00c:	1e6b      	subs	r3, r5, #1
 801e00e:	9303      	str	r3, [sp, #12]
 801e010:	220a      	movs	r2, #10
 801e012:	2300      	movs	r3, #0
 801e014:	4630      	mov	r0, r6
 801e016:	4639      	mov	r1, r7
 801e018:	f7e2 fe46 	bl	8000ca8 <__aeabi_uldivmod>
 801e01c:	9b05      	ldr	r3, [sp, #20]
 801e01e:	3230      	adds	r2, #48	; 0x30
 801e020:	3301      	adds	r3, #1
 801e022:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e026:	9305      	str	r3, [sp, #20]
 801e028:	f1bb 0f00 	cmp.w	fp, #0
 801e02c:	d019      	beq.n	801e062 <_vfprintf_r+0xc7a>
 801e02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e030:	9a05      	ldr	r2, [sp, #20]
 801e032:	781b      	ldrb	r3, [r3, #0]
 801e034:	429a      	cmp	r2, r3
 801e036:	d114      	bne.n	801e062 <_vfprintf_r+0xc7a>
 801e038:	2aff      	cmp	r2, #255	; 0xff
 801e03a:	d012      	beq.n	801e062 <_vfprintf_r+0xc7a>
 801e03c:	2f00      	cmp	r7, #0
 801e03e:	bf08      	it	eq
 801e040:	2e0a      	cmpeq	r6, #10
 801e042:	d30e      	bcc.n	801e062 <_vfprintf_r+0xc7a>
 801e044:	9b03      	ldr	r3, [sp, #12]
 801e046:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e048:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e04a:	1a9b      	subs	r3, r3, r2
 801e04c:	4618      	mov	r0, r3
 801e04e:	9303      	str	r3, [sp, #12]
 801e050:	f7fd fd0f 	bl	801ba72 <strncpy>
 801e054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e056:	785d      	ldrb	r5, [r3, #1]
 801e058:	b1e5      	cbz	r5, 801e094 <_vfprintf_r+0xcac>
 801e05a:	3301      	adds	r3, #1
 801e05c:	930a      	str	r3, [sp, #40]	; 0x28
 801e05e:	2300      	movs	r3, #0
 801e060:	9305      	str	r3, [sp, #20]
 801e062:	220a      	movs	r2, #10
 801e064:	2300      	movs	r3, #0
 801e066:	4630      	mov	r0, r6
 801e068:	4639      	mov	r1, r7
 801e06a:	f7e2 fe1d 	bl	8000ca8 <__aeabi_uldivmod>
 801e06e:	2f00      	cmp	r7, #0
 801e070:	bf08      	it	eq
 801e072:	2e0a      	cmpeq	r6, #10
 801e074:	d20a      	bcs.n	801e08c <_vfprintf_r+0xca4>
 801e076:	9b03      	ldr	r3, [sp, #12]
 801e078:	f8dd b010 	ldr.w	fp, [sp, #16]
 801e07c:	aa4e      	add	r2, sp, #312	; 0x138
 801e07e:	4646      	mov	r6, r8
 801e080:	eba2 0803 	sub.w	r8, r2, r3
 801e084:	2300      	movs	r3, #0
 801e086:	9304      	str	r3, [sp, #16]
 801e088:	f7ff bbbe 	b.w	801d808 <_vfprintf_r+0x420>
 801e08c:	9d03      	ldr	r5, [sp, #12]
 801e08e:	4606      	mov	r6, r0
 801e090:	460f      	mov	r7, r1
 801e092:	e7bb      	b.n	801e00c <_vfprintf_r+0xc24>
 801e094:	9505      	str	r5, [sp, #20]
 801e096:	e7e4      	b.n	801e062 <_vfprintf_r+0xc7a>
 801e098:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e09a:	f006 030f 	and.w	r3, r6, #15
 801e09e:	5cd3      	ldrb	r3, [r2, r3]
 801e0a0:	9a03      	ldr	r2, [sp, #12]
 801e0a2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801e0a6:	0933      	lsrs	r3, r6, #4
 801e0a8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801e0ac:	9203      	str	r2, [sp, #12]
 801e0ae:	093a      	lsrs	r2, r7, #4
 801e0b0:	461e      	mov	r6, r3
 801e0b2:	4617      	mov	r7, r2
 801e0b4:	ea56 0307 	orrs.w	r3, r6, r7
 801e0b8:	d1ee      	bne.n	801e098 <_vfprintf_r+0xcb0>
 801e0ba:	e7dc      	b.n	801e076 <_vfprintf_r+0xc8e>
 801e0bc:	b933      	cbnz	r3, 801e0cc <_vfprintf_r+0xce4>
 801e0be:	f01b 0f01 	tst.w	fp, #1
 801e0c2:	d003      	beq.n	801e0cc <_vfprintf_r+0xce4>
 801e0c4:	2330      	movs	r3, #48	; 0x30
 801e0c6:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801e0ca:	e795      	b.n	801dff8 <_vfprintf_r+0xc10>
 801e0cc:	ab4e      	add	r3, sp, #312	; 0x138
 801e0ce:	e3ba      	b.n	801e846 <_vfprintf_r+0x145e>
 801e0d0:	9b07      	ldr	r3, [sp, #28]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	f000 837d 	beq.w	801e7d2 <_vfprintf_r+0x13ea>
 801e0d8:	2000      	movs	r0, #0
 801e0da:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801e0de:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801e0e2:	9606      	str	r6, [sp, #24]
 801e0e4:	f7ff bb1e 	b.w	801d724 <_vfprintf_r+0x33c>
 801e0e8:	9e04      	ldr	r6, [sp, #16]
 801e0ea:	e72c      	b.n	801df46 <_vfprintf_r+0xb5e>
 801e0ec:	2010      	movs	r0, #16
 801e0ee:	4402      	add	r2, r0
 801e0f0:	2b07      	cmp	r3, #7
 801e0f2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e0f6:	6060      	str	r0, [r4, #4]
 801e0f8:	dd08      	ble.n	801e10c <_vfprintf_r+0xd24>
 801e0fa:	aa22      	add	r2, sp, #136	; 0x88
 801e0fc:	4649      	mov	r1, r9
 801e0fe:	4650      	mov	r0, sl
 801e100:	f003 fe73 	bl	8021dea <__sprint_r>
 801e104:	2800      	cmp	r0, #0
 801e106:	f040 8342 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e10a:	a925      	add	r1, sp, #148	; 0x94
 801e10c:	3f10      	subs	r7, #16
 801e10e:	460c      	mov	r4, r1
 801e110:	e4f1      	b.n	801daf6 <_vfprintf_r+0x70e>
 801e112:	460c      	mov	r4, r1
 801e114:	e50a      	b.n	801db2c <_vfprintf_r+0x744>
 801e116:	aa22      	add	r2, sp, #136	; 0x88
 801e118:	4649      	mov	r1, r9
 801e11a:	4650      	mov	r0, sl
 801e11c:	f003 fe65 	bl	8021dea <__sprint_r>
 801e120:	2800      	cmp	r0, #0
 801e122:	f040 8334 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e126:	ac25      	add	r4, sp, #148	; 0x94
 801e128:	e512      	b.n	801db50 <_vfprintf_r+0x768>
 801e12a:	aa22      	add	r2, sp, #136	; 0x88
 801e12c:	4649      	mov	r1, r9
 801e12e:	4650      	mov	r0, sl
 801e130:	f003 fe5b 	bl	8021dea <__sprint_r>
 801e134:	2800      	cmp	r0, #0
 801e136:	f040 832a 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e13a:	ac25      	add	r4, sp, #148	; 0x94
 801e13c:	e518      	b.n	801db70 <_vfprintf_r+0x788>
 801e13e:	2010      	movs	r0, #16
 801e140:	4402      	add	r2, r0
 801e142:	2b07      	cmp	r3, #7
 801e144:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e148:	6060      	str	r0, [r4, #4]
 801e14a:	dd08      	ble.n	801e15e <_vfprintf_r+0xd76>
 801e14c:	aa22      	add	r2, sp, #136	; 0x88
 801e14e:	4649      	mov	r1, r9
 801e150:	4650      	mov	r0, sl
 801e152:	f003 fe4a 	bl	8021dea <__sprint_r>
 801e156:	2800      	cmp	r0, #0
 801e158:	f040 8319 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e15c:	a925      	add	r1, sp, #148	; 0x94
 801e15e:	3f10      	subs	r7, #16
 801e160:	460c      	mov	r4, r1
 801e162:	e50d      	b.n	801db80 <_vfprintf_r+0x798>
 801e164:	460c      	mov	r4, r1
 801e166:	e526      	b.n	801dbb6 <_vfprintf_r+0x7ce>
 801e168:	2010      	movs	r0, #16
 801e16a:	4402      	add	r2, r0
 801e16c:	2b07      	cmp	r3, #7
 801e16e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e172:	6060      	str	r0, [r4, #4]
 801e174:	dd08      	ble.n	801e188 <_vfprintf_r+0xda0>
 801e176:	aa22      	add	r2, sp, #136	; 0x88
 801e178:	4649      	mov	r1, r9
 801e17a:	4650      	mov	r0, sl
 801e17c:	f003 fe35 	bl	8021dea <__sprint_r>
 801e180:	2800      	cmp	r0, #0
 801e182:	f040 8304 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e186:	a925      	add	r1, sp, #148	; 0x94
 801e188:	3e10      	subs	r6, #16
 801e18a:	460c      	mov	r4, r1
 801e18c:	e518      	b.n	801dbc0 <_vfprintf_r+0x7d8>
 801e18e:	460c      	mov	r4, r1
 801e190:	e530      	b.n	801dbf4 <_vfprintf_r+0x80c>
 801e192:	bf00      	nop
 801e194:	08029288 	.word	0x08029288
 801e198:	08029299 	.word	0x08029299
 801e19c:	9b07      	ldr	r3, [sp, #28]
 801e19e:	2b65      	cmp	r3, #101	; 0x65
 801e1a0:	f340 8242 	ble.w	801e628 <_vfprintf_r+0x1240>
 801e1a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e1a8:	2200      	movs	r2, #0
 801e1aa:	2300      	movs	r3, #0
 801e1ac:	f7e2 fcbc 	bl	8000b28 <__aeabi_dcmpeq>
 801e1b0:	2800      	cmp	r0, #0
 801e1b2:	d068      	beq.n	801e286 <_vfprintf_r+0xe9e>
 801e1b4:	4b6d      	ldr	r3, [pc, #436]	; (801e36c <_vfprintf_r+0xf84>)
 801e1b6:	6023      	str	r3, [r4, #0]
 801e1b8:	2301      	movs	r3, #1
 801e1ba:	441e      	add	r6, r3
 801e1bc:	6063      	str	r3, [r4, #4]
 801e1be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e1c0:	9624      	str	r6, [sp, #144]	; 0x90
 801e1c2:	3301      	adds	r3, #1
 801e1c4:	2b07      	cmp	r3, #7
 801e1c6:	9323      	str	r3, [sp, #140]	; 0x8c
 801e1c8:	dc37      	bgt.n	801e23a <_vfprintf_r+0xe52>
 801e1ca:	3408      	adds	r4, #8
 801e1cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e1ce:	9a05      	ldr	r2, [sp, #20]
 801e1d0:	4293      	cmp	r3, r2
 801e1d2:	db03      	blt.n	801e1dc <_vfprintf_r+0xdf4>
 801e1d4:	f01b 0f01 	tst.w	fp, #1
 801e1d8:	f43f ad2b 	beq.w	801dc32 <_vfprintf_r+0x84a>
 801e1dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e1de:	6023      	str	r3, [r4, #0]
 801e1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e1e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1e4:	6063      	str	r3, [r4, #4]
 801e1e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e1e8:	4413      	add	r3, r2
 801e1ea:	9324      	str	r3, [sp, #144]	; 0x90
 801e1ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e1ee:	3301      	adds	r3, #1
 801e1f0:	2b07      	cmp	r3, #7
 801e1f2:	9323      	str	r3, [sp, #140]	; 0x8c
 801e1f4:	dc2b      	bgt.n	801e24e <_vfprintf_r+0xe66>
 801e1f6:	3408      	adds	r4, #8
 801e1f8:	9b05      	ldr	r3, [sp, #20]
 801e1fa:	1e5d      	subs	r5, r3, #1
 801e1fc:	2d00      	cmp	r5, #0
 801e1fe:	f77f ad18 	ble.w	801dc32 <_vfprintf_r+0x84a>
 801e202:	4e5b      	ldr	r6, [pc, #364]	; (801e370 <_vfprintf_r+0xf88>)
 801e204:	2710      	movs	r7, #16
 801e206:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e20a:	2d10      	cmp	r5, #16
 801e20c:	f103 0301 	add.w	r3, r3, #1
 801e210:	f104 0108 	add.w	r1, r4, #8
 801e214:	6026      	str	r6, [r4, #0]
 801e216:	dc24      	bgt.n	801e262 <_vfprintf_r+0xe7a>
 801e218:	6065      	str	r5, [r4, #4]
 801e21a:	2b07      	cmp	r3, #7
 801e21c:	4415      	add	r5, r2
 801e21e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801e222:	f340 8293 	ble.w	801e74c <_vfprintf_r+0x1364>
 801e226:	aa22      	add	r2, sp, #136	; 0x88
 801e228:	4649      	mov	r1, r9
 801e22a:	4650      	mov	r0, sl
 801e22c:	f003 fddd 	bl	8021dea <__sprint_r>
 801e230:	2800      	cmp	r0, #0
 801e232:	f040 82ac 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e236:	ac25      	add	r4, sp, #148	; 0x94
 801e238:	e4fb      	b.n	801dc32 <_vfprintf_r+0x84a>
 801e23a:	aa22      	add	r2, sp, #136	; 0x88
 801e23c:	4649      	mov	r1, r9
 801e23e:	4650      	mov	r0, sl
 801e240:	f003 fdd3 	bl	8021dea <__sprint_r>
 801e244:	2800      	cmp	r0, #0
 801e246:	f040 82a2 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e24a:	ac25      	add	r4, sp, #148	; 0x94
 801e24c:	e7be      	b.n	801e1cc <_vfprintf_r+0xde4>
 801e24e:	aa22      	add	r2, sp, #136	; 0x88
 801e250:	4649      	mov	r1, r9
 801e252:	4650      	mov	r0, sl
 801e254:	f003 fdc9 	bl	8021dea <__sprint_r>
 801e258:	2800      	cmp	r0, #0
 801e25a:	f040 8298 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e25e:	ac25      	add	r4, sp, #148	; 0x94
 801e260:	e7ca      	b.n	801e1f8 <_vfprintf_r+0xe10>
 801e262:	3210      	adds	r2, #16
 801e264:	2b07      	cmp	r3, #7
 801e266:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e26a:	6067      	str	r7, [r4, #4]
 801e26c:	dd08      	ble.n	801e280 <_vfprintf_r+0xe98>
 801e26e:	aa22      	add	r2, sp, #136	; 0x88
 801e270:	4649      	mov	r1, r9
 801e272:	4650      	mov	r0, sl
 801e274:	f003 fdb9 	bl	8021dea <__sprint_r>
 801e278:	2800      	cmp	r0, #0
 801e27a:	f040 8288 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e27e:	a925      	add	r1, sp, #148	; 0x94
 801e280:	3d10      	subs	r5, #16
 801e282:	460c      	mov	r4, r1
 801e284:	e7bf      	b.n	801e206 <_vfprintf_r+0xe1e>
 801e286:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e288:	2b00      	cmp	r3, #0
 801e28a:	dc73      	bgt.n	801e374 <_vfprintf_r+0xf8c>
 801e28c:	4b37      	ldr	r3, [pc, #220]	; (801e36c <_vfprintf_r+0xf84>)
 801e28e:	6023      	str	r3, [r4, #0]
 801e290:	2301      	movs	r3, #1
 801e292:	441e      	add	r6, r3
 801e294:	6063      	str	r3, [r4, #4]
 801e296:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e298:	9624      	str	r6, [sp, #144]	; 0x90
 801e29a:	3301      	adds	r3, #1
 801e29c:	2b07      	cmp	r3, #7
 801e29e:	9323      	str	r3, [sp, #140]	; 0x8c
 801e2a0:	dc3d      	bgt.n	801e31e <_vfprintf_r+0xf36>
 801e2a2:	3408      	adds	r4, #8
 801e2a4:	9905      	ldr	r1, [sp, #20]
 801e2a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e2a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e2aa:	430a      	orrs	r2, r1
 801e2ac:	f00b 0101 	and.w	r1, fp, #1
 801e2b0:	430a      	orrs	r2, r1
 801e2b2:	f43f acbe 	beq.w	801dc32 <_vfprintf_r+0x84a>
 801e2b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e2b8:	6022      	str	r2, [r4, #0]
 801e2ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e2bc:	6062      	str	r2, [r4, #4]
 801e2be:	4413      	add	r3, r2
 801e2c0:	9324      	str	r3, [sp, #144]	; 0x90
 801e2c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e2c4:	3301      	adds	r3, #1
 801e2c6:	2b07      	cmp	r3, #7
 801e2c8:	9323      	str	r3, [sp, #140]	; 0x8c
 801e2ca:	dc32      	bgt.n	801e332 <_vfprintf_r+0xf4a>
 801e2cc:	3408      	adds	r4, #8
 801e2ce:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e2d0:	2d00      	cmp	r5, #0
 801e2d2:	da1b      	bge.n	801e30c <_vfprintf_r+0xf24>
 801e2d4:	4e26      	ldr	r6, [pc, #152]	; (801e370 <_vfprintf_r+0xf88>)
 801e2d6:	426d      	negs	r5, r5
 801e2d8:	4623      	mov	r3, r4
 801e2da:	2710      	movs	r7, #16
 801e2dc:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801e2e0:	2d10      	cmp	r5, #16
 801e2e2:	f102 0201 	add.w	r2, r2, #1
 801e2e6:	f104 0408 	add.w	r4, r4, #8
 801e2ea:	601e      	str	r6, [r3, #0]
 801e2ec:	dc2b      	bgt.n	801e346 <_vfprintf_r+0xf5e>
 801e2ee:	605d      	str	r5, [r3, #4]
 801e2f0:	2a07      	cmp	r2, #7
 801e2f2:	440d      	add	r5, r1
 801e2f4:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801e2f8:	dd08      	ble.n	801e30c <_vfprintf_r+0xf24>
 801e2fa:	aa22      	add	r2, sp, #136	; 0x88
 801e2fc:	4649      	mov	r1, r9
 801e2fe:	4650      	mov	r0, sl
 801e300:	f003 fd73 	bl	8021dea <__sprint_r>
 801e304:	2800      	cmp	r0, #0
 801e306:	f040 8242 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e30a:	ac25      	add	r4, sp, #148	; 0x94
 801e30c:	9b03      	ldr	r3, [sp, #12]
 801e30e:	6023      	str	r3, [r4, #0]
 801e310:	9b05      	ldr	r3, [sp, #20]
 801e312:	9a05      	ldr	r2, [sp, #20]
 801e314:	6063      	str	r3, [r4, #4]
 801e316:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e318:	4413      	add	r3, r2
 801e31a:	9324      	str	r3, [sp, #144]	; 0x90
 801e31c:	e482      	b.n	801dc24 <_vfprintf_r+0x83c>
 801e31e:	aa22      	add	r2, sp, #136	; 0x88
 801e320:	4649      	mov	r1, r9
 801e322:	4650      	mov	r0, sl
 801e324:	f003 fd61 	bl	8021dea <__sprint_r>
 801e328:	2800      	cmp	r0, #0
 801e32a:	f040 8230 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e32e:	ac25      	add	r4, sp, #148	; 0x94
 801e330:	e7b8      	b.n	801e2a4 <_vfprintf_r+0xebc>
 801e332:	aa22      	add	r2, sp, #136	; 0x88
 801e334:	4649      	mov	r1, r9
 801e336:	4650      	mov	r0, sl
 801e338:	f003 fd57 	bl	8021dea <__sprint_r>
 801e33c:	2800      	cmp	r0, #0
 801e33e:	f040 8226 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e342:	ac25      	add	r4, sp, #148	; 0x94
 801e344:	e7c3      	b.n	801e2ce <_vfprintf_r+0xee6>
 801e346:	3110      	adds	r1, #16
 801e348:	2a07      	cmp	r2, #7
 801e34a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801e34e:	605f      	str	r7, [r3, #4]
 801e350:	dd08      	ble.n	801e364 <_vfprintf_r+0xf7c>
 801e352:	aa22      	add	r2, sp, #136	; 0x88
 801e354:	4649      	mov	r1, r9
 801e356:	4650      	mov	r0, sl
 801e358:	f003 fd47 	bl	8021dea <__sprint_r>
 801e35c:	2800      	cmp	r0, #0
 801e35e:	f040 8216 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e362:	ac25      	add	r4, sp, #148	; 0x94
 801e364:	3d10      	subs	r5, #16
 801e366:	4623      	mov	r3, r4
 801e368:	e7b8      	b.n	801e2dc <_vfprintf_r+0xef4>
 801e36a:	bf00      	nop
 801e36c:	080292aa 	.word	0x080292aa
 801e370:	08029318 	.word	0x08029318
 801e374:	9b05      	ldr	r3, [sp, #20]
 801e376:	42ab      	cmp	r3, r5
 801e378:	bfa8      	it	ge
 801e37a:	462b      	movge	r3, r5
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	461f      	mov	r7, r3
 801e380:	dd0b      	ble.n	801e39a <_vfprintf_r+0xfb2>
 801e382:	9b03      	ldr	r3, [sp, #12]
 801e384:	e9c4 3700 	strd	r3, r7, [r4]
 801e388:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e38a:	3301      	adds	r3, #1
 801e38c:	443e      	add	r6, r7
 801e38e:	2b07      	cmp	r3, #7
 801e390:	9624      	str	r6, [sp, #144]	; 0x90
 801e392:	9323      	str	r3, [sp, #140]	; 0x8c
 801e394:	f300 808c 	bgt.w	801e4b0 <_vfprintf_r+0x10c8>
 801e398:	3408      	adds	r4, #8
 801e39a:	2f00      	cmp	r7, #0
 801e39c:	bfac      	ite	ge
 801e39e:	1bee      	subge	r6, r5, r7
 801e3a0:	462e      	movlt	r6, r5
 801e3a2:	2e00      	cmp	r6, #0
 801e3a4:	dd1c      	ble.n	801e3e0 <_vfprintf_r+0xff8>
 801e3a6:	4f9f      	ldr	r7, [pc, #636]	; (801e624 <_vfprintf_r+0x123c>)
 801e3a8:	f04f 0810 	mov.w	r8, #16
 801e3ac:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e3b0:	2e10      	cmp	r6, #16
 801e3b2:	f103 0301 	add.w	r3, r3, #1
 801e3b6:	f104 0108 	add.w	r1, r4, #8
 801e3ba:	6027      	str	r7, [r4, #0]
 801e3bc:	f300 8082 	bgt.w	801e4c4 <_vfprintf_r+0x10dc>
 801e3c0:	6066      	str	r6, [r4, #4]
 801e3c2:	2b07      	cmp	r3, #7
 801e3c4:	4416      	add	r6, r2
 801e3c6:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e3ca:	f340 808e 	ble.w	801e4ea <_vfprintf_r+0x1102>
 801e3ce:	aa22      	add	r2, sp, #136	; 0x88
 801e3d0:	4649      	mov	r1, r9
 801e3d2:	4650      	mov	r0, sl
 801e3d4:	f003 fd09 	bl	8021dea <__sprint_r>
 801e3d8:	2800      	cmp	r0, #0
 801e3da:	f040 81d8 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e3de:	ac25      	add	r4, sp, #148	; 0x94
 801e3e0:	9b03      	ldr	r3, [sp, #12]
 801e3e2:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801e3e6:	441d      	add	r5, r3
 801e3e8:	d00d      	beq.n	801e406 <_vfprintf_r+0x101e>
 801e3ea:	4e8e      	ldr	r6, [pc, #568]	; (801e624 <_vfprintf_r+0x123c>)
 801e3ec:	2710      	movs	r7, #16
 801e3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d17c      	bne.n	801e4ee <_vfprintf_r+0x1106>
 801e3f4:	9b08      	ldr	r3, [sp, #32]
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d17c      	bne.n	801e4f4 <_vfprintf_r+0x110c>
 801e3fa:	9b03      	ldr	r3, [sp, #12]
 801e3fc:	9a05      	ldr	r2, [sp, #20]
 801e3fe:	4413      	add	r3, r2
 801e400:	429d      	cmp	r5, r3
 801e402:	bf28      	it	cs
 801e404:	461d      	movcs	r5, r3
 801e406:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e408:	9a05      	ldr	r2, [sp, #20]
 801e40a:	4293      	cmp	r3, r2
 801e40c:	db02      	blt.n	801e414 <_vfprintf_r+0x102c>
 801e40e:	f01b 0f01 	tst.w	fp, #1
 801e412:	d00e      	beq.n	801e432 <_vfprintf_r+0x104a>
 801e414:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e416:	6023      	str	r3, [r4, #0]
 801e418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e41a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e41c:	6063      	str	r3, [r4, #4]
 801e41e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e420:	4413      	add	r3, r2
 801e422:	9324      	str	r3, [sp, #144]	; 0x90
 801e424:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e426:	3301      	adds	r3, #1
 801e428:	2b07      	cmp	r3, #7
 801e42a:	9323      	str	r3, [sp, #140]	; 0x8c
 801e42c:	f300 80e5 	bgt.w	801e5fa <_vfprintf_r+0x1212>
 801e430:	3408      	adds	r4, #8
 801e432:	9905      	ldr	r1, [sp, #20]
 801e434:	9b03      	ldr	r3, [sp, #12]
 801e436:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801e438:	440b      	add	r3, r1
 801e43a:	1b8e      	subs	r6, r1, r6
 801e43c:	1b5a      	subs	r2, r3, r5
 801e43e:	4296      	cmp	r6, r2
 801e440:	bfa8      	it	ge
 801e442:	4616      	movge	r6, r2
 801e444:	2e00      	cmp	r6, #0
 801e446:	dd0b      	ble.n	801e460 <_vfprintf_r+0x1078>
 801e448:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e44a:	4433      	add	r3, r6
 801e44c:	9324      	str	r3, [sp, #144]	; 0x90
 801e44e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e450:	3301      	adds	r3, #1
 801e452:	2b07      	cmp	r3, #7
 801e454:	e9c4 5600 	strd	r5, r6, [r4]
 801e458:	9323      	str	r3, [sp, #140]	; 0x8c
 801e45a:	f300 80d8 	bgt.w	801e60e <_vfprintf_r+0x1226>
 801e45e:	3408      	adds	r4, #8
 801e460:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e462:	9b05      	ldr	r3, [sp, #20]
 801e464:	2e00      	cmp	r6, #0
 801e466:	eba3 0505 	sub.w	r5, r3, r5
 801e46a:	bfa8      	it	ge
 801e46c:	1bad      	subge	r5, r5, r6
 801e46e:	2d00      	cmp	r5, #0
 801e470:	f77f abdf 	ble.w	801dc32 <_vfprintf_r+0x84a>
 801e474:	4e6b      	ldr	r6, [pc, #428]	; (801e624 <_vfprintf_r+0x123c>)
 801e476:	2710      	movs	r7, #16
 801e478:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e47c:	2d10      	cmp	r5, #16
 801e47e:	f103 0301 	add.w	r3, r3, #1
 801e482:	f104 0108 	add.w	r1, r4, #8
 801e486:	6026      	str	r6, [r4, #0]
 801e488:	f77f aec6 	ble.w	801e218 <_vfprintf_r+0xe30>
 801e48c:	3210      	adds	r2, #16
 801e48e:	2b07      	cmp	r3, #7
 801e490:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e494:	6067      	str	r7, [r4, #4]
 801e496:	dd08      	ble.n	801e4aa <_vfprintf_r+0x10c2>
 801e498:	aa22      	add	r2, sp, #136	; 0x88
 801e49a:	4649      	mov	r1, r9
 801e49c:	4650      	mov	r0, sl
 801e49e:	f003 fca4 	bl	8021dea <__sprint_r>
 801e4a2:	2800      	cmp	r0, #0
 801e4a4:	f040 8173 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e4a8:	a925      	add	r1, sp, #148	; 0x94
 801e4aa:	3d10      	subs	r5, #16
 801e4ac:	460c      	mov	r4, r1
 801e4ae:	e7e3      	b.n	801e478 <_vfprintf_r+0x1090>
 801e4b0:	aa22      	add	r2, sp, #136	; 0x88
 801e4b2:	4649      	mov	r1, r9
 801e4b4:	4650      	mov	r0, sl
 801e4b6:	f003 fc98 	bl	8021dea <__sprint_r>
 801e4ba:	2800      	cmp	r0, #0
 801e4bc:	f040 8167 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e4c0:	ac25      	add	r4, sp, #148	; 0x94
 801e4c2:	e76a      	b.n	801e39a <_vfprintf_r+0xfb2>
 801e4c4:	3210      	adds	r2, #16
 801e4c6:	2b07      	cmp	r3, #7
 801e4c8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e4cc:	f8c4 8004 	str.w	r8, [r4, #4]
 801e4d0:	dd08      	ble.n	801e4e4 <_vfprintf_r+0x10fc>
 801e4d2:	aa22      	add	r2, sp, #136	; 0x88
 801e4d4:	4649      	mov	r1, r9
 801e4d6:	4650      	mov	r0, sl
 801e4d8:	f003 fc87 	bl	8021dea <__sprint_r>
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	f040 8156 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e4e2:	a925      	add	r1, sp, #148	; 0x94
 801e4e4:	3e10      	subs	r6, #16
 801e4e6:	460c      	mov	r4, r1
 801e4e8:	e760      	b.n	801e3ac <_vfprintf_r+0xfc4>
 801e4ea:	460c      	mov	r4, r1
 801e4ec:	e778      	b.n	801e3e0 <_vfprintf_r+0xff8>
 801e4ee:	9b08      	ldr	r3, [sp, #32]
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d052      	beq.n	801e59a <_vfprintf_r+0x11b2>
 801e4f4:	9b08      	ldr	r3, [sp, #32]
 801e4f6:	3b01      	subs	r3, #1
 801e4f8:	9308      	str	r3, [sp, #32]
 801e4fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e4fc:	6023      	str	r3, [r4, #0]
 801e4fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e502:	6063      	str	r3, [r4, #4]
 801e504:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e506:	4413      	add	r3, r2
 801e508:	9324      	str	r3, [sp, #144]	; 0x90
 801e50a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e50c:	3301      	adds	r3, #1
 801e50e:	2b07      	cmp	r3, #7
 801e510:	9323      	str	r3, [sp, #140]	; 0x8c
 801e512:	dc49      	bgt.n	801e5a8 <_vfprintf_r+0x11c0>
 801e514:	3408      	adds	r4, #8
 801e516:	9b03      	ldr	r3, [sp, #12]
 801e518:	9a05      	ldr	r2, [sp, #20]
 801e51a:	eb03 0802 	add.w	r8, r3, r2
 801e51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e520:	781b      	ldrb	r3, [r3, #0]
 801e522:	eba8 0805 	sub.w	r8, r8, r5
 801e526:	4598      	cmp	r8, r3
 801e528:	bfa8      	it	ge
 801e52a:	4698      	movge	r8, r3
 801e52c:	f1b8 0f00 	cmp.w	r8, #0
 801e530:	dd0a      	ble.n	801e548 <_vfprintf_r+0x1160>
 801e532:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e534:	4443      	add	r3, r8
 801e536:	9324      	str	r3, [sp, #144]	; 0x90
 801e538:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e53a:	3301      	adds	r3, #1
 801e53c:	2b07      	cmp	r3, #7
 801e53e:	e9c4 5800 	strd	r5, r8, [r4]
 801e542:	9323      	str	r3, [sp, #140]	; 0x8c
 801e544:	dc3a      	bgt.n	801e5bc <_vfprintf_r+0x11d4>
 801e546:	3408      	adds	r4, #8
 801e548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e54a:	781b      	ldrb	r3, [r3, #0]
 801e54c:	f1b8 0f00 	cmp.w	r8, #0
 801e550:	bfac      	ite	ge
 801e552:	eba3 0808 	subge.w	r8, r3, r8
 801e556:	4698      	movlt	r8, r3
 801e558:	f1b8 0f00 	cmp.w	r8, #0
 801e55c:	dd19      	ble.n	801e592 <_vfprintf_r+0x11aa>
 801e55e:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801e562:	f1b8 0f10 	cmp.w	r8, #16
 801e566:	f102 0201 	add.w	r2, r2, #1
 801e56a:	f104 0108 	add.w	r1, r4, #8
 801e56e:	6026      	str	r6, [r4, #0]
 801e570:	dc2e      	bgt.n	801e5d0 <_vfprintf_r+0x11e8>
 801e572:	4443      	add	r3, r8
 801e574:	2a07      	cmp	r2, #7
 801e576:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e57a:	f8c4 8004 	str.w	r8, [r4, #4]
 801e57e:	dd3a      	ble.n	801e5f6 <_vfprintf_r+0x120e>
 801e580:	aa22      	add	r2, sp, #136	; 0x88
 801e582:	4649      	mov	r1, r9
 801e584:	4650      	mov	r0, sl
 801e586:	f003 fc30 	bl	8021dea <__sprint_r>
 801e58a:	2800      	cmp	r0, #0
 801e58c:	f040 80ff 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e590:	ac25      	add	r4, sp, #148	; 0x94
 801e592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e594:	781b      	ldrb	r3, [r3, #0]
 801e596:	441d      	add	r5, r3
 801e598:	e729      	b.n	801e3ee <_vfprintf_r+0x1006>
 801e59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e59c:	3b01      	subs	r3, #1
 801e59e:	930a      	str	r3, [sp, #40]	; 0x28
 801e5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5a2:	3b01      	subs	r3, #1
 801e5a4:	9309      	str	r3, [sp, #36]	; 0x24
 801e5a6:	e7a8      	b.n	801e4fa <_vfprintf_r+0x1112>
 801e5a8:	aa22      	add	r2, sp, #136	; 0x88
 801e5aa:	4649      	mov	r1, r9
 801e5ac:	4650      	mov	r0, sl
 801e5ae:	f003 fc1c 	bl	8021dea <__sprint_r>
 801e5b2:	2800      	cmp	r0, #0
 801e5b4:	f040 80eb 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e5b8:	ac25      	add	r4, sp, #148	; 0x94
 801e5ba:	e7ac      	b.n	801e516 <_vfprintf_r+0x112e>
 801e5bc:	aa22      	add	r2, sp, #136	; 0x88
 801e5be:	4649      	mov	r1, r9
 801e5c0:	4650      	mov	r0, sl
 801e5c2:	f003 fc12 	bl	8021dea <__sprint_r>
 801e5c6:	2800      	cmp	r0, #0
 801e5c8:	f040 80e1 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e5cc:	ac25      	add	r4, sp, #148	; 0x94
 801e5ce:	e7bb      	b.n	801e548 <_vfprintf_r+0x1160>
 801e5d0:	3310      	adds	r3, #16
 801e5d2:	2a07      	cmp	r2, #7
 801e5d4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e5d8:	6067      	str	r7, [r4, #4]
 801e5da:	dd08      	ble.n	801e5ee <_vfprintf_r+0x1206>
 801e5dc:	aa22      	add	r2, sp, #136	; 0x88
 801e5de:	4649      	mov	r1, r9
 801e5e0:	4650      	mov	r0, sl
 801e5e2:	f003 fc02 	bl	8021dea <__sprint_r>
 801e5e6:	2800      	cmp	r0, #0
 801e5e8:	f040 80d1 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e5ec:	a925      	add	r1, sp, #148	; 0x94
 801e5ee:	f1a8 0810 	sub.w	r8, r8, #16
 801e5f2:	460c      	mov	r4, r1
 801e5f4:	e7b3      	b.n	801e55e <_vfprintf_r+0x1176>
 801e5f6:	460c      	mov	r4, r1
 801e5f8:	e7cb      	b.n	801e592 <_vfprintf_r+0x11aa>
 801e5fa:	aa22      	add	r2, sp, #136	; 0x88
 801e5fc:	4649      	mov	r1, r9
 801e5fe:	4650      	mov	r0, sl
 801e600:	f003 fbf3 	bl	8021dea <__sprint_r>
 801e604:	2800      	cmp	r0, #0
 801e606:	f040 80c2 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e60a:	ac25      	add	r4, sp, #148	; 0x94
 801e60c:	e711      	b.n	801e432 <_vfprintf_r+0x104a>
 801e60e:	aa22      	add	r2, sp, #136	; 0x88
 801e610:	4649      	mov	r1, r9
 801e612:	4650      	mov	r0, sl
 801e614:	f003 fbe9 	bl	8021dea <__sprint_r>
 801e618:	2800      	cmp	r0, #0
 801e61a:	f040 80b8 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e61e:	ac25      	add	r4, sp, #148	; 0x94
 801e620:	e71e      	b.n	801e460 <_vfprintf_r+0x1078>
 801e622:	bf00      	nop
 801e624:	08029318 	.word	0x08029318
 801e628:	9a05      	ldr	r2, [sp, #20]
 801e62a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e62c:	2a01      	cmp	r2, #1
 801e62e:	9a03      	ldr	r2, [sp, #12]
 801e630:	6022      	str	r2, [r4, #0]
 801e632:	f106 0601 	add.w	r6, r6, #1
 801e636:	f103 0301 	add.w	r3, r3, #1
 801e63a:	f04f 0201 	mov.w	r2, #1
 801e63e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e642:	f104 0508 	add.w	r5, r4, #8
 801e646:	6062      	str	r2, [r4, #4]
 801e648:	dc02      	bgt.n	801e650 <_vfprintf_r+0x1268>
 801e64a:	f01b 0f01 	tst.w	fp, #1
 801e64e:	d078      	beq.n	801e742 <_vfprintf_r+0x135a>
 801e650:	2b07      	cmp	r3, #7
 801e652:	dd08      	ble.n	801e666 <_vfprintf_r+0x127e>
 801e654:	aa22      	add	r2, sp, #136	; 0x88
 801e656:	4649      	mov	r1, r9
 801e658:	4650      	mov	r0, sl
 801e65a:	f003 fbc6 	bl	8021dea <__sprint_r>
 801e65e:	2800      	cmp	r0, #0
 801e660:	f040 8095 	bne.w	801e78e <_vfprintf_r+0x13a6>
 801e664:	ad25      	add	r5, sp, #148	; 0x94
 801e666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e668:	602b      	str	r3, [r5, #0]
 801e66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e66c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e66e:	606b      	str	r3, [r5, #4]
 801e670:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e672:	4413      	add	r3, r2
 801e674:	9324      	str	r3, [sp, #144]	; 0x90
 801e676:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e678:	3301      	adds	r3, #1
 801e67a:	2b07      	cmp	r3, #7
 801e67c:	9323      	str	r3, [sp, #140]	; 0x8c
 801e67e:	dc32      	bgt.n	801e6e6 <_vfprintf_r+0x12fe>
 801e680:	3508      	adds	r5, #8
 801e682:	9b05      	ldr	r3, [sp, #20]
 801e684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e688:	1e5c      	subs	r4, r3, #1
 801e68a:	2200      	movs	r2, #0
 801e68c:	2300      	movs	r3, #0
 801e68e:	f7e2 fa4b 	bl	8000b28 <__aeabi_dcmpeq>
 801e692:	2800      	cmp	r0, #0
 801e694:	d130      	bne.n	801e6f8 <_vfprintf_r+0x1310>
 801e696:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e698:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e69a:	9803      	ldr	r0, [sp, #12]
 801e69c:	9a05      	ldr	r2, [sp, #20]
 801e69e:	3101      	adds	r1, #1
 801e6a0:	3b01      	subs	r3, #1
 801e6a2:	3001      	adds	r0, #1
 801e6a4:	4413      	add	r3, r2
 801e6a6:	2907      	cmp	r1, #7
 801e6a8:	e9c5 0400 	strd	r0, r4, [r5]
 801e6ac:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801e6b0:	dd4a      	ble.n	801e748 <_vfprintf_r+0x1360>
 801e6b2:	aa22      	add	r2, sp, #136	; 0x88
 801e6b4:	4649      	mov	r1, r9
 801e6b6:	4650      	mov	r0, sl
 801e6b8:	f003 fb97 	bl	8021dea <__sprint_r>
 801e6bc:	2800      	cmp	r0, #0
 801e6be:	d166      	bne.n	801e78e <_vfprintf_r+0x13a6>
 801e6c0:	ad25      	add	r5, sp, #148	; 0x94
 801e6c2:	ab1e      	add	r3, sp, #120	; 0x78
 801e6c4:	602b      	str	r3, [r5, #0]
 801e6c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e6c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e6ca:	606b      	str	r3, [r5, #4]
 801e6cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e6ce:	4413      	add	r3, r2
 801e6d0:	9324      	str	r3, [sp, #144]	; 0x90
 801e6d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e6d4:	3301      	adds	r3, #1
 801e6d6:	2b07      	cmp	r3, #7
 801e6d8:	9323      	str	r3, [sp, #140]	; 0x8c
 801e6da:	f73f ada4 	bgt.w	801e226 <_vfprintf_r+0xe3e>
 801e6de:	f105 0408 	add.w	r4, r5, #8
 801e6e2:	f7ff baa6 	b.w	801dc32 <_vfprintf_r+0x84a>
 801e6e6:	aa22      	add	r2, sp, #136	; 0x88
 801e6e8:	4649      	mov	r1, r9
 801e6ea:	4650      	mov	r0, sl
 801e6ec:	f003 fb7d 	bl	8021dea <__sprint_r>
 801e6f0:	2800      	cmp	r0, #0
 801e6f2:	d14c      	bne.n	801e78e <_vfprintf_r+0x13a6>
 801e6f4:	ad25      	add	r5, sp, #148	; 0x94
 801e6f6:	e7c4      	b.n	801e682 <_vfprintf_r+0x129a>
 801e6f8:	2c00      	cmp	r4, #0
 801e6fa:	dde2      	ble.n	801e6c2 <_vfprintf_r+0x12da>
 801e6fc:	4e53      	ldr	r6, [pc, #332]	; (801e84c <_vfprintf_r+0x1464>)
 801e6fe:	2710      	movs	r7, #16
 801e700:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e704:	2c10      	cmp	r4, #16
 801e706:	f103 0301 	add.w	r3, r3, #1
 801e70a:	f105 0108 	add.w	r1, r5, #8
 801e70e:	602e      	str	r6, [r5, #0]
 801e710:	dc07      	bgt.n	801e722 <_vfprintf_r+0x133a>
 801e712:	606c      	str	r4, [r5, #4]
 801e714:	2b07      	cmp	r3, #7
 801e716:	4414      	add	r4, r2
 801e718:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801e71c:	dcc9      	bgt.n	801e6b2 <_vfprintf_r+0x12ca>
 801e71e:	460d      	mov	r5, r1
 801e720:	e7cf      	b.n	801e6c2 <_vfprintf_r+0x12da>
 801e722:	3210      	adds	r2, #16
 801e724:	2b07      	cmp	r3, #7
 801e726:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e72a:	606f      	str	r7, [r5, #4]
 801e72c:	dd06      	ble.n	801e73c <_vfprintf_r+0x1354>
 801e72e:	aa22      	add	r2, sp, #136	; 0x88
 801e730:	4649      	mov	r1, r9
 801e732:	4650      	mov	r0, sl
 801e734:	f003 fb59 	bl	8021dea <__sprint_r>
 801e738:	bb48      	cbnz	r0, 801e78e <_vfprintf_r+0x13a6>
 801e73a:	a925      	add	r1, sp, #148	; 0x94
 801e73c:	3c10      	subs	r4, #16
 801e73e:	460d      	mov	r5, r1
 801e740:	e7de      	b.n	801e700 <_vfprintf_r+0x1318>
 801e742:	2b07      	cmp	r3, #7
 801e744:	ddbd      	ble.n	801e6c2 <_vfprintf_r+0x12da>
 801e746:	e7b4      	b.n	801e6b2 <_vfprintf_r+0x12ca>
 801e748:	3508      	adds	r5, #8
 801e74a:	e7ba      	b.n	801e6c2 <_vfprintf_r+0x12da>
 801e74c:	460c      	mov	r4, r1
 801e74e:	f7ff ba70 	b.w	801dc32 <_vfprintf_r+0x84a>
 801e752:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801e756:	1a9d      	subs	r5, r3, r2
 801e758:	2d00      	cmp	r5, #0
 801e75a:	f77f aa6e 	ble.w	801dc3a <_vfprintf_r+0x852>
 801e75e:	4e3c      	ldr	r6, [pc, #240]	; (801e850 <_vfprintf_r+0x1468>)
 801e760:	2710      	movs	r7, #16
 801e762:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e766:	2d10      	cmp	r5, #16
 801e768:	f103 0301 	add.w	r3, r3, #1
 801e76c:	6026      	str	r6, [r4, #0]
 801e76e:	dc18      	bgt.n	801e7a2 <_vfprintf_r+0x13ba>
 801e770:	6065      	str	r5, [r4, #4]
 801e772:	2b07      	cmp	r3, #7
 801e774:	4415      	add	r5, r2
 801e776:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801e77a:	f77f aa5e 	ble.w	801dc3a <_vfprintf_r+0x852>
 801e77e:	aa22      	add	r2, sp, #136	; 0x88
 801e780:	4649      	mov	r1, r9
 801e782:	4650      	mov	r0, sl
 801e784:	f003 fb31 	bl	8021dea <__sprint_r>
 801e788:	2800      	cmp	r0, #0
 801e78a:	f43f aa56 	beq.w	801dc3a <_vfprintf_r+0x852>
 801e78e:	9b04      	ldr	r3, [sp, #16]
 801e790:	2b00      	cmp	r3, #0
 801e792:	f43f a872 	beq.w	801d87a <_vfprintf_r+0x492>
 801e796:	4619      	mov	r1, r3
 801e798:	4650      	mov	r0, sl
 801e79a:	f001 f909 	bl	801f9b0 <_free_r>
 801e79e:	f7ff b86c 	b.w	801d87a <_vfprintf_r+0x492>
 801e7a2:	3210      	adds	r2, #16
 801e7a4:	2b07      	cmp	r3, #7
 801e7a6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e7aa:	6067      	str	r7, [r4, #4]
 801e7ac:	dc02      	bgt.n	801e7b4 <_vfprintf_r+0x13cc>
 801e7ae:	3408      	adds	r4, #8
 801e7b0:	3d10      	subs	r5, #16
 801e7b2:	e7d6      	b.n	801e762 <_vfprintf_r+0x137a>
 801e7b4:	aa22      	add	r2, sp, #136	; 0x88
 801e7b6:	4649      	mov	r1, r9
 801e7b8:	4650      	mov	r0, sl
 801e7ba:	f003 fb16 	bl	8021dea <__sprint_r>
 801e7be:	2800      	cmp	r0, #0
 801e7c0:	d1e5      	bne.n	801e78e <_vfprintf_r+0x13a6>
 801e7c2:	ac25      	add	r4, sp, #148	; 0x94
 801e7c4:	e7f4      	b.n	801e7b0 <_vfprintf_r+0x13c8>
 801e7c6:	9904      	ldr	r1, [sp, #16]
 801e7c8:	4650      	mov	r0, sl
 801e7ca:	f001 f8f1 	bl	801f9b0 <_free_r>
 801e7ce:	f7ff ba4c 	b.w	801dc6a <_vfprintf_r+0x882>
 801e7d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e7d4:	b91b      	cbnz	r3, 801e7de <_vfprintf_r+0x13f6>
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	9323      	str	r3, [sp, #140]	; 0x8c
 801e7da:	f7ff b84e 	b.w	801d87a <_vfprintf_r+0x492>
 801e7de:	aa22      	add	r2, sp, #136	; 0x88
 801e7e0:	4649      	mov	r1, r9
 801e7e2:	4650      	mov	r0, sl
 801e7e4:	f003 fb01 	bl	8021dea <__sprint_r>
 801e7e8:	2800      	cmp	r0, #0
 801e7ea:	d0f4      	beq.n	801e7d6 <_vfprintf_r+0x13ee>
 801e7ec:	f7ff b845 	b.w	801d87a <_vfprintf_r+0x492>
 801e7f0:	ea56 0207 	orrs.w	r2, r6, r7
 801e7f4:	f8cd b010 	str.w	fp, [sp, #16]
 801e7f8:	f43f ab5c 	beq.w	801deb4 <_vfprintf_r+0xacc>
 801e7fc:	2b01      	cmp	r3, #1
 801e7fe:	f43f abf4 	beq.w	801dfea <_vfprintf_r+0xc02>
 801e802:	2b02      	cmp	r3, #2
 801e804:	ab4e      	add	r3, sp, #312	; 0x138
 801e806:	9303      	str	r3, [sp, #12]
 801e808:	f43f ac46 	beq.w	801e098 <_vfprintf_r+0xcb0>
 801e80c:	9903      	ldr	r1, [sp, #12]
 801e80e:	f006 0307 	and.w	r3, r6, #7
 801e812:	460a      	mov	r2, r1
 801e814:	3330      	adds	r3, #48	; 0x30
 801e816:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801e81a:	9203      	str	r2, [sp, #12]
 801e81c:	08f2      	lsrs	r2, r6, #3
 801e81e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801e822:	08f8      	lsrs	r0, r7, #3
 801e824:	4616      	mov	r6, r2
 801e826:	4607      	mov	r7, r0
 801e828:	ea56 0207 	orrs.w	r2, r6, r7
 801e82c:	d1ee      	bne.n	801e80c <_vfprintf_r+0x1424>
 801e82e:	9a04      	ldr	r2, [sp, #16]
 801e830:	07d0      	lsls	r0, r2, #31
 801e832:	f57f ac20 	bpl.w	801e076 <_vfprintf_r+0xc8e>
 801e836:	2b30      	cmp	r3, #48	; 0x30
 801e838:	f43f ac1d 	beq.w	801e076 <_vfprintf_r+0xc8e>
 801e83c:	9a03      	ldr	r2, [sp, #12]
 801e83e:	2330      	movs	r3, #48	; 0x30
 801e840:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e844:	1e8b      	subs	r3, r1, #2
 801e846:	9303      	str	r3, [sp, #12]
 801e848:	e415      	b.n	801e076 <_vfprintf_r+0xc8e>
 801e84a:	bf00      	nop
 801e84c:	08029318 	.word	0x08029318
 801e850:	08029308 	.word	0x08029308

0801e854 <__sbprintf>:
 801e854:	b570      	push	{r4, r5, r6, lr}
 801e856:	460c      	mov	r4, r1
 801e858:	8989      	ldrh	r1, [r1, #12]
 801e85a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801e85e:	f021 0102 	bic.w	r1, r1, #2
 801e862:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e866:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801e868:	911b      	str	r1, [sp, #108]	; 0x6c
 801e86a:	89e1      	ldrh	r1, [r4, #14]
 801e86c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e870:	69e1      	ldr	r1, [r4, #28]
 801e872:	9109      	str	r1, [sp, #36]	; 0x24
 801e874:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e876:	910b      	str	r1, [sp, #44]	; 0x2c
 801e878:	a91c      	add	r1, sp, #112	; 0x70
 801e87a:	9102      	str	r1, [sp, #8]
 801e87c:	9106      	str	r1, [sp, #24]
 801e87e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e882:	4606      	mov	r6, r0
 801e884:	9104      	str	r1, [sp, #16]
 801e886:	9107      	str	r1, [sp, #28]
 801e888:	a818      	add	r0, sp, #96	; 0x60
 801e88a:	2100      	movs	r1, #0
 801e88c:	e9cd 3200 	strd	r3, r2, [sp]
 801e890:	9108      	str	r1, [sp, #32]
 801e892:	f001 fa67 	bl	801fd64 <__retarget_lock_init_recursive>
 801e896:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e89a:	a902      	add	r1, sp, #8
 801e89c:	4630      	mov	r0, r6
 801e89e:	f7fe fda3 	bl	801d3e8 <_vfprintf_r>
 801e8a2:	1e05      	subs	r5, r0, #0
 801e8a4:	db07      	blt.n	801e8b6 <__sbprintf+0x62>
 801e8a6:	a902      	add	r1, sp, #8
 801e8a8:	4630      	mov	r0, r6
 801e8aa:	f000 ff85 	bl	801f7b8 <_fflush_r>
 801e8ae:	2800      	cmp	r0, #0
 801e8b0:	bf18      	it	ne
 801e8b2:	f04f 35ff 	movne.w	r5, #4294967295
 801e8b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801e8ba:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e8bc:	065b      	lsls	r3, r3, #25
 801e8be:	bf42      	ittt	mi
 801e8c0:	89a3      	ldrhmi	r3, [r4, #12]
 801e8c2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801e8c6:	81a3      	strhmi	r3, [r4, #12]
 801e8c8:	f001 fa4d 	bl	801fd66 <__retarget_lock_close_recursive>
 801e8cc:	4628      	mov	r0, r5
 801e8ce:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801e8d2:	bd70      	pop	{r4, r5, r6, pc}

0801e8d4 <__swsetup_r>:
 801e8d4:	b538      	push	{r3, r4, r5, lr}
 801e8d6:	4b2a      	ldr	r3, [pc, #168]	; (801e980 <__swsetup_r+0xac>)
 801e8d8:	4605      	mov	r5, r0
 801e8da:	6818      	ldr	r0, [r3, #0]
 801e8dc:	460c      	mov	r4, r1
 801e8de:	b118      	cbz	r0, 801e8e8 <__swsetup_r+0x14>
 801e8e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e8e2:	b90b      	cbnz	r3, 801e8e8 <__swsetup_r+0x14>
 801e8e4:	f000 ffd4 	bl	801f890 <__sinit>
 801e8e8:	89a3      	ldrh	r3, [r4, #12]
 801e8ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e8ee:	0718      	lsls	r0, r3, #28
 801e8f0:	d422      	bmi.n	801e938 <__swsetup_r+0x64>
 801e8f2:	06d9      	lsls	r1, r3, #27
 801e8f4:	d407      	bmi.n	801e906 <__swsetup_r+0x32>
 801e8f6:	2309      	movs	r3, #9
 801e8f8:	602b      	str	r3, [r5, #0]
 801e8fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e8fe:	81a3      	strh	r3, [r4, #12]
 801e900:	f04f 30ff 	mov.w	r0, #4294967295
 801e904:	e034      	b.n	801e970 <__swsetup_r+0x9c>
 801e906:	0758      	lsls	r0, r3, #29
 801e908:	d512      	bpl.n	801e930 <__swsetup_r+0x5c>
 801e90a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e90c:	b141      	cbz	r1, 801e920 <__swsetup_r+0x4c>
 801e90e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801e912:	4299      	cmp	r1, r3
 801e914:	d002      	beq.n	801e91c <__swsetup_r+0x48>
 801e916:	4628      	mov	r0, r5
 801e918:	f001 f84a 	bl	801f9b0 <_free_r>
 801e91c:	2300      	movs	r3, #0
 801e91e:	6323      	str	r3, [r4, #48]	; 0x30
 801e920:	89a3      	ldrh	r3, [r4, #12]
 801e922:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e926:	81a3      	strh	r3, [r4, #12]
 801e928:	2300      	movs	r3, #0
 801e92a:	6063      	str	r3, [r4, #4]
 801e92c:	6923      	ldr	r3, [r4, #16]
 801e92e:	6023      	str	r3, [r4, #0]
 801e930:	89a3      	ldrh	r3, [r4, #12]
 801e932:	f043 0308 	orr.w	r3, r3, #8
 801e936:	81a3      	strh	r3, [r4, #12]
 801e938:	6923      	ldr	r3, [r4, #16]
 801e93a:	b94b      	cbnz	r3, 801e950 <__swsetup_r+0x7c>
 801e93c:	89a3      	ldrh	r3, [r4, #12]
 801e93e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e946:	d003      	beq.n	801e950 <__swsetup_r+0x7c>
 801e948:	4621      	mov	r1, r4
 801e94a:	4628      	mov	r0, r5
 801e94c:	f001 fa3c 	bl	801fdc8 <__smakebuf_r>
 801e950:	89a0      	ldrh	r0, [r4, #12]
 801e952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e956:	f010 0301 	ands.w	r3, r0, #1
 801e95a:	d00a      	beq.n	801e972 <__swsetup_r+0x9e>
 801e95c:	2300      	movs	r3, #0
 801e95e:	60a3      	str	r3, [r4, #8]
 801e960:	6963      	ldr	r3, [r4, #20]
 801e962:	425b      	negs	r3, r3
 801e964:	61a3      	str	r3, [r4, #24]
 801e966:	6923      	ldr	r3, [r4, #16]
 801e968:	b943      	cbnz	r3, 801e97c <__swsetup_r+0xa8>
 801e96a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e96e:	d1c4      	bne.n	801e8fa <__swsetup_r+0x26>
 801e970:	bd38      	pop	{r3, r4, r5, pc}
 801e972:	0781      	lsls	r1, r0, #30
 801e974:	bf58      	it	pl
 801e976:	6963      	ldrpl	r3, [r4, #20]
 801e978:	60a3      	str	r3, [r4, #8]
 801e97a:	e7f4      	b.n	801e966 <__swsetup_r+0x92>
 801e97c:	2000      	movs	r0, #0
 801e97e:	e7f7      	b.n	801e970 <__swsetup_r+0x9c>
 801e980:	20000038 	.word	0x20000038

0801e984 <register_fini>:
 801e984:	4b02      	ldr	r3, [pc, #8]	; (801e990 <register_fini+0xc>)
 801e986:	b113      	cbz	r3, 801e98e <register_fini+0xa>
 801e988:	4802      	ldr	r0, [pc, #8]	; (801e994 <register_fini+0x10>)
 801e98a:	f000 b805 	b.w	801e998 <atexit>
 801e98e:	4770      	bx	lr
 801e990:	00000000 	.word	0x00000000
 801e994:	0801f8e1 	.word	0x0801f8e1

0801e998 <atexit>:
 801e998:	2300      	movs	r3, #0
 801e99a:	4601      	mov	r1, r0
 801e99c:	461a      	mov	r2, r3
 801e99e:	4618      	mov	r0, r3
 801e9a0:	f003 bf30 	b.w	8022804 <__register_exitproc>

0801e9a4 <div>:
 801e9a4:	2900      	cmp	r1, #0
 801e9a6:	b510      	push	{r4, lr}
 801e9a8:	fb91 f4f2 	sdiv	r4, r1, r2
 801e9ac:	fb02 1314 	mls	r3, r2, r4, r1
 801e9b0:	db06      	blt.n	801e9c0 <div+0x1c>
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	da01      	bge.n	801e9ba <div+0x16>
 801e9b6:	3401      	adds	r4, #1
 801e9b8:	1a9b      	subs	r3, r3, r2
 801e9ba:	e9c0 4300 	strd	r4, r3, [r0]
 801e9be:	bd10      	pop	{r4, pc}
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	bfc4      	itt	gt
 801e9c4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801e9c8:	189b      	addgt	r3, r3, r2
 801e9ca:	e7f6      	b.n	801e9ba <div+0x16>

0801e9cc <quorem>:
 801e9cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9d0:	6903      	ldr	r3, [r0, #16]
 801e9d2:	690c      	ldr	r4, [r1, #16]
 801e9d4:	42a3      	cmp	r3, r4
 801e9d6:	4607      	mov	r7, r0
 801e9d8:	f2c0 8081 	blt.w	801eade <quorem+0x112>
 801e9dc:	3c01      	subs	r4, #1
 801e9de:	f101 0814 	add.w	r8, r1, #20
 801e9e2:	f100 0514 	add.w	r5, r0, #20
 801e9e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e9ea:	9301      	str	r3, [sp, #4]
 801e9ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e9f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e9f4:	3301      	adds	r3, #1
 801e9f6:	429a      	cmp	r2, r3
 801e9f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e9fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ea00:	fbb2 f6f3 	udiv	r6, r2, r3
 801ea04:	d331      	bcc.n	801ea6a <quorem+0x9e>
 801ea06:	f04f 0e00 	mov.w	lr, #0
 801ea0a:	4640      	mov	r0, r8
 801ea0c:	46ac      	mov	ip, r5
 801ea0e:	46f2      	mov	sl, lr
 801ea10:	f850 2b04 	ldr.w	r2, [r0], #4
 801ea14:	b293      	uxth	r3, r2
 801ea16:	fb06 e303 	mla	r3, r6, r3, lr
 801ea1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ea1e:	b29b      	uxth	r3, r3
 801ea20:	ebaa 0303 	sub.w	r3, sl, r3
 801ea24:	0c12      	lsrs	r2, r2, #16
 801ea26:	f8dc a000 	ldr.w	sl, [ip]
 801ea2a:	fb06 e202 	mla	r2, r6, r2, lr
 801ea2e:	fa13 f38a 	uxtah	r3, r3, sl
 801ea32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ea36:	fa1f fa82 	uxth.w	sl, r2
 801ea3a:	f8dc 2000 	ldr.w	r2, [ip]
 801ea3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ea42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ea46:	b29b      	uxth	r3, r3
 801ea48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ea4c:	4581      	cmp	r9, r0
 801ea4e:	f84c 3b04 	str.w	r3, [ip], #4
 801ea52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ea56:	d2db      	bcs.n	801ea10 <quorem+0x44>
 801ea58:	f855 300b 	ldr.w	r3, [r5, fp]
 801ea5c:	b92b      	cbnz	r3, 801ea6a <quorem+0x9e>
 801ea5e:	9b01      	ldr	r3, [sp, #4]
 801ea60:	3b04      	subs	r3, #4
 801ea62:	429d      	cmp	r5, r3
 801ea64:	461a      	mov	r2, r3
 801ea66:	d32e      	bcc.n	801eac6 <quorem+0xfa>
 801ea68:	613c      	str	r4, [r7, #16]
 801ea6a:	4638      	mov	r0, r7
 801ea6c:	f001 fe7a 	bl	8020764 <__mcmp>
 801ea70:	2800      	cmp	r0, #0
 801ea72:	db24      	blt.n	801eabe <quorem+0xf2>
 801ea74:	3601      	adds	r6, #1
 801ea76:	4628      	mov	r0, r5
 801ea78:	f04f 0c00 	mov.w	ip, #0
 801ea7c:	f858 2b04 	ldr.w	r2, [r8], #4
 801ea80:	f8d0 e000 	ldr.w	lr, [r0]
 801ea84:	b293      	uxth	r3, r2
 801ea86:	ebac 0303 	sub.w	r3, ip, r3
 801ea8a:	0c12      	lsrs	r2, r2, #16
 801ea8c:	fa13 f38e 	uxtah	r3, r3, lr
 801ea90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ea94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ea98:	b29b      	uxth	r3, r3
 801ea9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ea9e:	45c1      	cmp	r9, r8
 801eaa0:	f840 3b04 	str.w	r3, [r0], #4
 801eaa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801eaa8:	d2e8      	bcs.n	801ea7c <quorem+0xb0>
 801eaaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eaae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801eab2:	b922      	cbnz	r2, 801eabe <quorem+0xf2>
 801eab4:	3b04      	subs	r3, #4
 801eab6:	429d      	cmp	r5, r3
 801eab8:	461a      	mov	r2, r3
 801eaba:	d30a      	bcc.n	801ead2 <quorem+0x106>
 801eabc:	613c      	str	r4, [r7, #16]
 801eabe:	4630      	mov	r0, r6
 801eac0:	b003      	add	sp, #12
 801eac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eac6:	6812      	ldr	r2, [r2, #0]
 801eac8:	3b04      	subs	r3, #4
 801eaca:	2a00      	cmp	r2, #0
 801eacc:	d1cc      	bne.n	801ea68 <quorem+0x9c>
 801eace:	3c01      	subs	r4, #1
 801ead0:	e7c7      	b.n	801ea62 <quorem+0x96>
 801ead2:	6812      	ldr	r2, [r2, #0]
 801ead4:	3b04      	subs	r3, #4
 801ead6:	2a00      	cmp	r2, #0
 801ead8:	d1f0      	bne.n	801eabc <quorem+0xf0>
 801eada:	3c01      	subs	r4, #1
 801eadc:	e7eb      	b.n	801eab6 <quorem+0xea>
 801eade:	2000      	movs	r0, #0
 801eae0:	e7ee      	b.n	801eac0 <quorem+0xf4>
 801eae2:	0000      	movs	r0, r0
 801eae4:	0000      	movs	r0, r0
	...

0801eae8 <_dtoa_r>:
 801eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaec:	ed2d 8b02 	vpush	{d8}
 801eaf0:	b095      	sub	sp, #84	; 0x54
 801eaf2:	ec57 6b10 	vmov	r6, r7, d0
 801eaf6:	9105      	str	r1, [sp, #20]
 801eaf8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801eafa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801eafc:	9209      	str	r2, [sp, #36]	; 0x24
 801eafe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801eb02:	4604      	mov	r4, r0
 801eb04:	930f      	str	r3, [sp, #60]	; 0x3c
 801eb06:	b141      	cbz	r1, 801eb1a <_dtoa_r+0x32>
 801eb08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801eb0a:	604a      	str	r2, [r1, #4]
 801eb0c:	2301      	movs	r3, #1
 801eb0e:	4093      	lsls	r3, r2
 801eb10:	608b      	str	r3, [r1, #8]
 801eb12:	f001 fc1c 	bl	802034e <_Bfree>
 801eb16:	2300      	movs	r3, #0
 801eb18:	6423      	str	r3, [r4, #64]	; 0x40
 801eb1a:	1e3b      	subs	r3, r7, #0
 801eb1c:	bfb9      	ittee	lt
 801eb1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801eb22:	9303      	strlt	r3, [sp, #12]
 801eb24:	2300      	movge	r3, #0
 801eb26:	602b      	strge	r3, [r5, #0]
 801eb28:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801eb2c:	4ba2      	ldr	r3, [pc, #648]	; (801edb8 <_dtoa_r+0x2d0>)
 801eb2e:	bfbc      	itt	lt
 801eb30:	2201      	movlt	r2, #1
 801eb32:	602a      	strlt	r2, [r5, #0]
 801eb34:	ea33 0309 	bics.w	r3, r3, r9
 801eb38:	d11b      	bne.n	801eb72 <_dtoa_r+0x8a>
 801eb3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb3c:	f242 730f 	movw	r3, #9999	; 0x270f
 801eb40:	6013      	str	r3, [r2, #0]
 801eb42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801eb46:	4333      	orrs	r3, r6
 801eb48:	f000 8578 	beq.w	801f63c <_dtoa_r+0xb54>
 801eb4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eb4e:	b90b      	cbnz	r3, 801eb54 <_dtoa_r+0x6c>
 801eb50:	4b9a      	ldr	r3, [pc, #616]	; (801edbc <_dtoa_r+0x2d4>)
 801eb52:	e024      	b.n	801eb9e <_dtoa_r+0xb6>
 801eb54:	4b99      	ldr	r3, [pc, #612]	; (801edbc <_dtoa_r+0x2d4>)
 801eb56:	9300      	str	r3, [sp, #0]
 801eb58:	3303      	adds	r3, #3
 801eb5a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801eb5c:	6013      	str	r3, [r2, #0]
 801eb5e:	9800      	ldr	r0, [sp, #0]
 801eb60:	b015      	add	sp, #84	; 0x54
 801eb62:	ecbd 8b02 	vpop	{d8}
 801eb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb6a:	4b95      	ldr	r3, [pc, #596]	; (801edc0 <_dtoa_r+0x2d8>)
 801eb6c:	9300      	str	r3, [sp, #0]
 801eb6e:	3308      	adds	r3, #8
 801eb70:	e7f3      	b.n	801eb5a <_dtoa_r+0x72>
 801eb72:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eb76:	2200      	movs	r2, #0
 801eb78:	ec51 0b17 	vmov	r0, r1, d7
 801eb7c:	2300      	movs	r3, #0
 801eb7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801eb82:	f7e1 ffd1 	bl	8000b28 <__aeabi_dcmpeq>
 801eb86:	4680      	mov	r8, r0
 801eb88:	b158      	cbz	r0, 801eba2 <_dtoa_r+0xba>
 801eb8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb8c:	2301      	movs	r3, #1
 801eb8e:	6013      	str	r3, [r2, #0]
 801eb90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	f000 854f 	beq.w	801f636 <_dtoa_r+0xb4e>
 801eb98:	488a      	ldr	r0, [pc, #552]	; (801edc4 <_dtoa_r+0x2dc>)
 801eb9a:	6018      	str	r0, [r3, #0]
 801eb9c:	1e43      	subs	r3, r0, #1
 801eb9e:	9300      	str	r3, [sp, #0]
 801eba0:	e7dd      	b.n	801eb5e <_dtoa_r+0x76>
 801eba2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801eba6:	aa12      	add	r2, sp, #72	; 0x48
 801eba8:	a913      	add	r1, sp, #76	; 0x4c
 801ebaa:	4620      	mov	r0, r4
 801ebac:	f001 fe7e 	bl	80208ac <__d2b>
 801ebb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ebb4:	4683      	mov	fp, r0
 801ebb6:	2d00      	cmp	r5, #0
 801ebb8:	d07c      	beq.n	801ecb4 <_dtoa_r+0x1cc>
 801ebba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebbc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ebc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ebc4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ebc8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ebcc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ebd0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ebd4:	4b7c      	ldr	r3, [pc, #496]	; (801edc8 <_dtoa_r+0x2e0>)
 801ebd6:	2200      	movs	r2, #0
 801ebd8:	4630      	mov	r0, r6
 801ebda:	4639      	mov	r1, r7
 801ebdc:	f7e1 fb84 	bl	80002e8 <__aeabi_dsub>
 801ebe0:	a36f      	add	r3, pc, #444	; (adr r3, 801eda0 <_dtoa_r+0x2b8>)
 801ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebe6:	f7e1 fd37 	bl	8000658 <__aeabi_dmul>
 801ebea:	a36f      	add	r3, pc, #444	; (adr r3, 801eda8 <_dtoa_r+0x2c0>)
 801ebec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebf0:	f7e1 fb7c 	bl	80002ec <__adddf3>
 801ebf4:	4606      	mov	r6, r0
 801ebf6:	4628      	mov	r0, r5
 801ebf8:	460f      	mov	r7, r1
 801ebfa:	f7e1 fcc3 	bl	8000584 <__aeabi_i2d>
 801ebfe:	a36c      	add	r3, pc, #432	; (adr r3, 801edb0 <_dtoa_r+0x2c8>)
 801ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec04:	f7e1 fd28 	bl	8000658 <__aeabi_dmul>
 801ec08:	4602      	mov	r2, r0
 801ec0a:	460b      	mov	r3, r1
 801ec0c:	4630      	mov	r0, r6
 801ec0e:	4639      	mov	r1, r7
 801ec10:	f7e1 fb6c 	bl	80002ec <__adddf3>
 801ec14:	4606      	mov	r6, r0
 801ec16:	460f      	mov	r7, r1
 801ec18:	f7e1 ffce 	bl	8000bb8 <__aeabi_d2iz>
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	4682      	mov	sl, r0
 801ec20:	2300      	movs	r3, #0
 801ec22:	4630      	mov	r0, r6
 801ec24:	4639      	mov	r1, r7
 801ec26:	f7e1 ff89 	bl	8000b3c <__aeabi_dcmplt>
 801ec2a:	b148      	cbz	r0, 801ec40 <_dtoa_r+0x158>
 801ec2c:	4650      	mov	r0, sl
 801ec2e:	f7e1 fca9 	bl	8000584 <__aeabi_i2d>
 801ec32:	4632      	mov	r2, r6
 801ec34:	463b      	mov	r3, r7
 801ec36:	f7e1 ff77 	bl	8000b28 <__aeabi_dcmpeq>
 801ec3a:	b908      	cbnz	r0, 801ec40 <_dtoa_r+0x158>
 801ec3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec40:	f1ba 0f16 	cmp.w	sl, #22
 801ec44:	d854      	bhi.n	801ecf0 <_dtoa_r+0x208>
 801ec46:	4b61      	ldr	r3, [pc, #388]	; (801edcc <_dtoa_r+0x2e4>)
 801ec48:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ec54:	f7e1 ff72 	bl	8000b3c <__aeabi_dcmplt>
 801ec58:	2800      	cmp	r0, #0
 801ec5a:	d04b      	beq.n	801ecf4 <_dtoa_r+0x20c>
 801ec5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec60:	2300      	movs	r3, #0
 801ec62:	930e      	str	r3, [sp, #56]	; 0x38
 801ec64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ec66:	1b5d      	subs	r5, r3, r5
 801ec68:	1e6b      	subs	r3, r5, #1
 801ec6a:	9304      	str	r3, [sp, #16]
 801ec6c:	bf43      	ittte	mi
 801ec6e:	2300      	movmi	r3, #0
 801ec70:	f1c5 0801 	rsbmi	r8, r5, #1
 801ec74:	9304      	strmi	r3, [sp, #16]
 801ec76:	f04f 0800 	movpl.w	r8, #0
 801ec7a:	f1ba 0f00 	cmp.w	sl, #0
 801ec7e:	db3b      	blt.n	801ecf8 <_dtoa_r+0x210>
 801ec80:	9b04      	ldr	r3, [sp, #16]
 801ec82:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ec86:	4453      	add	r3, sl
 801ec88:	9304      	str	r3, [sp, #16]
 801ec8a:	2300      	movs	r3, #0
 801ec8c:	9306      	str	r3, [sp, #24]
 801ec8e:	9b05      	ldr	r3, [sp, #20]
 801ec90:	2b09      	cmp	r3, #9
 801ec92:	d86a      	bhi.n	801ed6a <_dtoa_r+0x282>
 801ec94:	2b05      	cmp	r3, #5
 801ec96:	bfc4      	itt	gt
 801ec98:	3b04      	subgt	r3, #4
 801ec9a:	9305      	strgt	r3, [sp, #20]
 801ec9c:	9b05      	ldr	r3, [sp, #20]
 801ec9e:	f1a3 0302 	sub.w	r3, r3, #2
 801eca2:	bfcc      	ite	gt
 801eca4:	2500      	movgt	r5, #0
 801eca6:	2501      	movle	r5, #1
 801eca8:	2b03      	cmp	r3, #3
 801ecaa:	d86a      	bhi.n	801ed82 <_dtoa_r+0x29a>
 801ecac:	e8df f003 	tbb	[pc, r3]
 801ecb0:	5b4d4f2c 	.word	0x5b4d4f2c
 801ecb4:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801ecb8:	441d      	add	r5, r3
 801ecba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ecbe:	2b20      	cmp	r3, #32
 801ecc0:	bfc1      	itttt	gt
 801ecc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ecc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ecca:	fa09 f303 	lslgt.w	r3, r9, r3
 801ecce:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ecd2:	bfda      	itte	le
 801ecd4:	f1c3 0320 	rsble	r3, r3, #32
 801ecd8:	fa06 f003 	lslle.w	r0, r6, r3
 801ecdc:	4318      	orrgt	r0, r3
 801ecde:	f7e1 fc41 	bl	8000564 <__aeabi_ui2d>
 801ece2:	2301      	movs	r3, #1
 801ece4:	4606      	mov	r6, r0
 801ece6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ecea:	3d01      	subs	r5, #1
 801ecec:	9310      	str	r3, [sp, #64]	; 0x40
 801ecee:	e771      	b.n	801ebd4 <_dtoa_r+0xec>
 801ecf0:	2301      	movs	r3, #1
 801ecf2:	e7b6      	b.n	801ec62 <_dtoa_r+0x17a>
 801ecf4:	900e      	str	r0, [sp, #56]	; 0x38
 801ecf6:	e7b5      	b.n	801ec64 <_dtoa_r+0x17c>
 801ecf8:	f1ca 0300 	rsb	r3, sl, #0
 801ecfc:	9306      	str	r3, [sp, #24]
 801ecfe:	2300      	movs	r3, #0
 801ed00:	eba8 080a 	sub.w	r8, r8, sl
 801ed04:	930d      	str	r3, [sp, #52]	; 0x34
 801ed06:	e7c2      	b.n	801ec8e <_dtoa_r+0x1a6>
 801ed08:	2300      	movs	r3, #0
 801ed0a:	9308      	str	r3, [sp, #32]
 801ed0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	dc3a      	bgt.n	801ed88 <_dtoa_r+0x2a0>
 801ed12:	f04f 0901 	mov.w	r9, #1
 801ed16:	f8cd 9004 	str.w	r9, [sp, #4]
 801ed1a:	464b      	mov	r3, r9
 801ed1c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ed20:	2200      	movs	r2, #0
 801ed22:	6462      	str	r2, [r4, #68]	; 0x44
 801ed24:	2204      	movs	r2, #4
 801ed26:	f102 0014 	add.w	r0, r2, #20
 801ed2a:	4298      	cmp	r0, r3
 801ed2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801ed2e:	d931      	bls.n	801ed94 <_dtoa_r+0x2ac>
 801ed30:	4620      	mov	r0, r4
 801ed32:	f001 fae7 	bl	8020304 <_Balloc>
 801ed36:	9000      	str	r0, [sp, #0]
 801ed38:	2800      	cmp	r0, #0
 801ed3a:	d14d      	bne.n	801edd8 <_dtoa_r+0x2f0>
 801ed3c:	4b24      	ldr	r3, [pc, #144]	; (801edd0 <_dtoa_r+0x2e8>)
 801ed3e:	4602      	mov	r2, r0
 801ed40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ed44:	4823      	ldr	r0, [pc, #140]	; (801edd4 <_dtoa_r+0x2ec>)
 801ed46:	f003 fd9d 	bl	8022884 <__assert_func>
 801ed4a:	2301      	movs	r3, #1
 801ed4c:	e7dd      	b.n	801ed0a <_dtoa_r+0x222>
 801ed4e:	2300      	movs	r3, #0
 801ed50:	9308      	str	r3, [sp, #32]
 801ed52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed54:	eb0a 0903 	add.w	r9, sl, r3
 801ed58:	f109 0301 	add.w	r3, r9, #1
 801ed5c:	2b01      	cmp	r3, #1
 801ed5e:	9301      	str	r3, [sp, #4]
 801ed60:	bfb8      	it	lt
 801ed62:	2301      	movlt	r3, #1
 801ed64:	e7dc      	b.n	801ed20 <_dtoa_r+0x238>
 801ed66:	2301      	movs	r3, #1
 801ed68:	e7f2      	b.n	801ed50 <_dtoa_r+0x268>
 801ed6a:	2501      	movs	r5, #1
 801ed6c:	2300      	movs	r3, #0
 801ed6e:	9305      	str	r3, [sp, #20]
 801ed70:	9508      	str	r5, [sp, #32]
 801ed72:	f04f 39ff 	mov.w	r9, #4294967295
 801ed76:	2200      	movs	r2, #0
 801ed78:	f8cd 9004 	str.w	r9, [sp, #4]
 801ed7c:	2312      	movs	r3, #18
 801ed7e:	9209      	str	r2, [sp, #36]	; 0x24
 801ed80:	e7ce      	b.n	801ed20 <_dtoa_r+0x238>
 801ed82:	2301      	movs	r3, #1
 801ed84:	9308      	str	r3, [sp, #32]
 801ed86:	e7f4      	b.n	801ed72 <_dtoa_r+0x28a>
 801ed88:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ed8c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ed90:	464b      	mov	r3, r9
 801ed92:	e7c5      	b.n	801ed20 <_dtoa_r+0x238>
 801ed94:	3101      	adds	r1, #1
 801ed96:	6461      	str	r1, [r4, #68]	; 0x44
 801ed98:	0052      	lsls	r2, r2, #1
 801ed9a:	e7c4      	b.n	801ed26 <_dtoa_r+0x23e>
 801ed9c:	f3af 8000 	nop.w
 801eda0:	636f4361 	.word	0x636f4361
 801eda4:	3fd287a7 	.word	0x3fd287a7
 801eda8:	8b60c8b3 	.word	0x8b60c8b3
 801edac:	3fc68a28 	.word	0x3fc68a28
 801edb0:	509f79fb 	.word	0x509f79fb
 801edb4:	3fd34413 	.word	0x3fd34413
 801edb8:	7ff00000 	.word	0x7ff00000
 801edbc:	08029328 	.word	0x08029328
 801edc0:	0802932c 	.word	0x0802932c
 801edc4:	080292ab 	.word	0x080292ab
 801edc8:	3ff80000 	.word	0x3ff80000
 801edcc:	08029430 	.word	0x08029430
 801edd0:	08029335 	.word	0x08029335
 801edd4:	08029346 	.word	0x08029346
 801edd8:	9b00      	ldr	r3, [sp, #0]
 801edda:	6423      	str	r3, [r4, #64]	; 0x40
 801eddc:	9b01      	ldr	r3, [sp, #4]
 801edde:	2b0e      	cmp	r3, #14
 801ede0:	f200 80ad 	bhi.w	801ef3e <_dtoa_r+0x456>
 801ede4:	2d00      	cmp	r5, #0
 801ede6:	f000 80aa 	beq.w	801ef3e <_dtoa_r+0x456>
 801edea:	f1ba 0f00 	cmp.w	sl, #0
 801edee:	dd36      	ble.n	801ee5e <_dtoa_r+0x376>
 801edf0:	4ac2      	ldr	r2, [pc, #776]	; (801f0fc <_dtoa_r+0x614>)
 801edf2:	f00a 030f 	and.w	r3, sl, #15
 801edf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801edfa:	ed93 7b00 	vldr	d7, [r3]
 801edfe:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801ee02:	ea4f 172a 	mov.w	r7, sl, asr #4
 801ee06:	eeb0 8a47 	vmov.f32	s16, s14
 801ee0a:	eef0 8a67 	vmov.f32	s17, s15
 801ee0e:	d016      	beq.n	801ee3e <_dtoa_r+0x356>
 801ee10:	4bbb      	ldr	r3, [pc, #748]	; (801f100 <_dtoa_r+0x618>)
 801ee12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ee16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ee1a:	f7e1 fd47 	bl	80008ac <__aeabi_ddiv>
 801ee1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee22:	f007 070f 	and.w	r7, r7, #15
 801ee26:	2503      	movs	r5, #3
 801ee28:	4eb5      	ldr	r6, [pc, #724]	; (801f100 <_dtoa_r+0x618>)
 801ee2a:	b957      	cbnz	r7, 801ee42 <_dtoa_r+0x35a>
 801ee2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee30:	ec53 2b18 	vmov	r2, r3, d8
 801ee34:	f7e1 fd3a 	bl	80008ac <__aeabi_ddiv>
 801ee38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee3c:	e029      	b.n	801ee92 <_dtoa_r+0x3aa>
 801ee3e:	2502      	movs	r5, #2
 801ee40:	e7f2      	b.n	801ee28 <_dtoa_r+0x340>
 801ee42:	07f9      	lsls	r1, r7, #31
 801ee44:	d508      	bpl.n	801ee58 <_dtoa_r+0x370>
 801ee46:	ec51 0b18 	vmov	r0, r1, d8
 801ee4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ee4e:	f7e1 fc03 	bl	8000658 <__aeabi_dmul>
 801ee52:	ec41 0b18 	vmov	d8, r0, r1
 801ee56:	3501      	adds	r5, #1
 801ee58:	107f      	asrs	r7, r7, #1
 801ee5a:	3608      	adds	r6, #8
 801ee5c:	e7e5      	b.n	801ee2a <_dtoa_r+0x342>
 801ee5e:	f000 80a6 	beq.w	801efae <_dtoa_r+0x4c6>
 801ee62:	f1ca 0600 	rsb	r6, sl, #0
 801ee66:	4ba5      	ldr	r3, [pc, #660]	; (801f0fc <_dtoa_r+0x614>)
 801ee68:	4fa5      	ldr	r7, [pc, #660]	; (801f100 <_dtoa_r+0x618>)
 801ee6a:	f006 020f 	and.w	r2, r6, #15
 801ee6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ee7a:	f7e1 fbed 	bl	8000658 <__aeabi_dmul>
 801ee7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee82:	1136      	asrs	r6, r6, #4
 801ee84:	2300      	movs	r3, #0
 801ee86:	2502      	movs	r5, #2
 801ee88:	2e00      	cmp	r6, #0
 801ee8a:	f040 8085 	bne.w	801ef98 <_dtoa_r+0x4b0>
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d1d2      	bne.n	801ee38 <_dtoa_r+0x350>
 801ee92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee94:	2b00      	cmp	r3, #0
 801ee96:	f000 808c 	beq.w	801efb2 <_dtoa_r+0x4ca>
 801ee9a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ee9e:	4b99      	ldr	r3, [pc, #612]	; (801f104 <_dtoa_r+0x61c>)
 801eea0:	2200      	movs	r2, #0
 801eea2:	4630      	mov	r0, r6
 801eea4:	4639      	mov	r1, r7
 801eea6:	f7e1 fe49 	bl	8000b3c <__aeabi_dcmplt>
 801eeaa:	2800      	cmp	r0, #0
 801eeac:	f000 8081 	beq.w	801efb2 <_dtoa_r+0x4ca>
 801eeb0:	9b01      	ldr	r3, [sp, #4]
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d07d      	beq.n	801efb2 <_dtoa_r+0x4ca>
 801eeb6:	f1b9 0f00 	cmp.w	r9, #0
 801eeba:	dd3c      	ble.n	801ef36 <_dtoa_r+0x44e>
 801eebc:	f10a 33ff 	add.w	r3, sl, #4294967295
 801eec0:	9307      	str	r3, [sp, #28]
 801eec2:	2200      	movs	r2, #0
 801eec4:	4b90      	ldr	r3, [pc, #576]	; (801f108 <_dtoa_r+0x620>)
 801eec6:	4630      	mov	r0, r6
 801eec8:	4639      	mov	r1, r7
 801eeca:	f7e1 fbc5 	bl	8000658 <__aeabi_dmul>
 801eece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eed2:	3501      	adds	r5, #1
 801eed4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801eed8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801eedc:	4628      	mov	r0, r5
 801eede:	f7e1 fb51 	bl	8000584 <__aeabi_i2d>
 801eee2:	4632      	mov	r2, r6
 801eee4:	463b      	mov	r3, r7
 801eee6:	f7e1 fbb7 	bl	8000658 <__aeabi_dmul>
 801eeea:	4b88      	ldr	r3, [pc, #544]	; (801f10c <_dtoa_r+0x624>)
 801eeec:	2200      	movs	r2, #0
 801eeee:	f7e1 f9fd 	bl	80002ec <__adddf3>
 801eef2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801eef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eefa:	9303      	str	r3, [sp, #12]
 801eefc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d15c      	bne.n	801efbc <_dtoa_r+0x4d4>
 801ef02:	4b83      	ldr	r3, [pc, #524]	; (801f110 <_dtoa_r+0x628>)
 801ef04:	2200      	movs	r2, #0
 801ef06:	4630      	mov	r0, r6
 801ef08:	4639      	mov	r1, r7
 801ef0a:	f7e1 f9ed 	bl	80002e8 <__aeabi_dsub>
 801ef0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ef12:	4606      	mov	r6, r0
 801ef14:	460f      	mov	r7, r1
 801ef16:	f7e1 fe2f 	bl	8000b78 <__aeabi_dcmpgt>
 801ef1a:	2800      	cmp	r0, #0
 801ef1c:	f040 8295 	bne.w	801f44a <_dtoa_r+0x962>
 801ef20:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ef24:	4630      	mov	r0, r6
 801ef26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ef2a:	4639      	mov	r1, r7
 801ef2c:	f7e1 fe06 	bl	8000b3c <__aeabi_dcmplt>
 801ef30:	2800      	cmp	r0, #0
 801ef32:	f040 8287 	bne.w	801f444 <_dtoa_r+0x95c>
 801ef36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ef3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ef3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	f2c0 8157 	blt.w	801f1f4 <_dtoa_r+0x70c>
 801ef46:	f1ba 0f0e 	cmp.w	sl, #14
 801ef4a:	f300 8153 	bgt.w	801f1f4 <_dtoa_r+0x70c>
 801ef4e:	4b6b      	ldr	r3, [pc, #428]	; (801f0fc <_dtoa_r+0x614>)
 801ef50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ef54:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ef58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	f280 80e2 	bge.w	801f124 <_dtoa_r+0x63c>
 801ef60:	9b01      	ldr	r3, [sp, #4]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	f300 80de 	bgt.w	801f124 <_dtoa_r+0x63c>
 801ef68:	f040 826c 	bne.w	801f444 <_dtoa_r+0x95c>
 801ef6c:	4b68      	ldr	r3, [pc, #416]	; (801f110 <_dtoa_r+0x628>)
 801ef6e:	2200      	movs	r2, #0
 801ef70:	4640      	mov	r0, r8
 801ef72:	4649      	mov	r1, r9
 801ef74:	f7e1 fb70 	bl	8000658 <__aeabi_dmul>
 801ef78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ef7c:	f7e1 fdf2 	bl	8000b64 <__aeabi_dcmpge>
 801ef80:	9e01      	ldr	r6, [sp, #4]
 801ef82:	4637      	mov	r7, r6
 801ef84:	2800      	cmp	r0, #0
 801ef86:	f040 8242 	bne.w	801f40e <_dtoa_r+0x926>
 801ef8a:	9d00      	ldr	r5, [sp, #0]
 801ef8c:	2331      	movs	r3, #49	; 0x31
 801ef8e:	f805 3b01 	strb.w	r3, [r5], #1
 801ef92:	f10a 0a01 	add.w	sl, sl, #1
 801ef96:	e23e      	b.n	801f416 <_dtoa_r+0x92e>
 801ef98:	07f2      	lsls	r2, r6, #31
 801ef9a:	d505      	bpl.n	801efa8 <_dtoa_r+0x4c0>
 801ef9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801efa0:	f7e1 fb5a 	bl	8000658 <__aeabi_dmul>
 801efa4:	3501      	adds	r5, #1
 801efa6:	2301      	movs	r3, #1
 801efa8:	1076      	asrs	r6, r6, #1
 801efaa:	3708      	adds	r7, #8
 801efac:	e76c      	b.n	801ee88 <_dtoa_r+0x3a0>
 801efae:	2502      	movs	r5, #2
 801efb0:	e76f      	b.n	801ee92 <_dtoa_r+0x3aa>
 801efb2:	9b01      	ldr	r3, [sp, #4]
 801efb4:	f8cd a01c 	str.w	sl, [sp, #28]
 801efb8:	930c      	str	r3, [sp, #48]	; 0x30
 801efba:	e78d      	b.n	801eed8 <_dtoa_r+0x3f0>
 801efbc:	9900      	ldr	r1, [sp, #0]
 801efbe:	980c      	ldr	r0, [sp, #48]	; 0x30
 801efc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801efc2:	4b4e      	ldr	r3, [pc, #312]	; (801f0fc <_dtoa_r+0x614>)
 801efc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801efc8:	4401      	add	r1, r0
 801efca:	9102      	str	r1, [sp, #8]
 801efcc:	9908      	ldr	r1, [sp, #32]
 801efce:	eeb0 8a47 	vmov.f32	s16, s14
 801efd2:	eef0 8a67 	vmov.f32	s17, s15
 801efd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801efda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801efde:	2900      	cmp	r1, #0
 801efe0:	d045      	beq.n	801f06e <_dtoa_r+0x586>
 801efe2:	494c      	ldr	r1, [pc, #304]	; (801f114 <_dtoa_r+0x62c>)
 801efe4:	2000      	movs	r0, #0
 801efe6:	f7e1 fc61 	bl	80008ac <__aeabi_ddiv>
 801efea:	ec53 2b18 	vmov	r2, r3, d8
 801efee:	f7e1 f97b 	bl	80002e8 <__aeabi_dsub>
 801eff2:	9d00      	ldr	r5, [sp, #0]
 801eff4:	ec41 0b18 	vmov	d8, r0, r1
 801eff8:	4639      	mov	r1, r7
 801effa:	4630      	mov	r0, r6
 801effc:	f7e1 fddc 	bl	8000bb8 <__aeabi_d2iz>
 801f000:	900c      	str	r0, [sp, #48]	; 0x30
 801f002:	f7e1 fabf 	bl	8000584 <__aeabi_i2d>
 801f006:	4602      	mov	r2, r0
 801f008:	460b      	mov	r3, r1
 801f00a:	4630      	mov	r0, r6
 801f00c:	4639      	mov	r1, r7
 801f00e:	f7e1 f96b 	bl	80002e8 <__aeabi_dsub>
 801f012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f014:	3330      	adds	r3, #48	; 0x30
 801f016:	f805 3b01 	strb.w	r3, [r5], #1
 801f01a:	ec53 2b18 	vmov	r2, r3, d8
 801f01e:	4606      	mov	r6, r0
 801f020:	460f      	mov	r7, r1
 801f022:	f7e1 fd8b 	bl	8000b3c <__aeabi_dcmplt>
 801f026:	2800      	cmp	r0, #0
 801f028:	d165      	bne.n	801f0f6 <_dtoa_r+0x60e>
 801f02a:	4632      	mov	r2, r6
 801f02c:	463b      	mov	r3, r7
 801f02e:	4935      	ldr	r1, [pc, #212]	; (801f104 <_dtoa_r+0x61c>)
 801f030:	2000      	movs	r0, #0
 801f032:	f7e1 f959 	bl	80002e8 <__aeabi_dsub>
 801f036:	ec53 2b18 	vmov	r2, r3, d8
 801f03a:	f7e1 fd7f 	bl	8000b3c <__aeabi_dcmplt>
 801f03e:	2800      	cmp	r0, #0
 801f040:	f040 80b8 	bne.w	801f1b4 <_dtoa_r+0x6cc>
 801f044:	9b02      	ldr	r3, [sp, #8]
 801f046:	429d      	cmp	r5, r3
 801f048:	f43f af75 	beq.w	801ef36 <_dtoa_r+0x44e>
 801f04c:	4b2e      	ldr	r3, [pc, #184]	; (801f108 <_dtoa_r+0x620>)
 801f04e:	ec51 0b18 	vmov	r0, r1, d8
 801f052:	2200      	movs	r2, #0
 801f054:	f7e1 fb00 	bl	8000658 <__aeabi_dmul>
 801f058:	4b2b      	ldr	r3, [pc, #172]	; (801f108 <_dtoa_r+0x620>)
 801f05a:	ec41 0b18 	vmov	d8, r0, r1
 801f05e:	2200      	movs	r2, #0
 801f060:	4630      	mov	r0, r6
 801f062:	4639      	mov	r1, r7
 801f064:	f7e1 faf8 	bl	8000658 <__aeabi_dmul>
 801f068:	4606      	mov	r6, r0
 801f06a:	460f      	mov	r7, r1
 801f06c:	e7c4      	b.n	801eff8 <_dtoa_r+0x510>
 801f06e:	ec51 0b17 	vmov	r0, r1, d7
 801f072:	f7e1 faf1 	bl	8000658 <__aeabi_dmul>
 801f076:	9b02      	ldr	r3, [sp, #8]
 801f078:	9d00      	ldr	r5, [sp, #0]
 801f07a:	930c      	str	r3, [sp, #48]	; 0x30
 801f07c:	ec41 0b18 	vmov	d8, r0, r1
 801f080:	4639      	mov	r1, r7
 801f082:	4630      	mov	r0, r6
 801f084:	f7e1 fd98 	bl	8000bb8 <__aeabi_d2iz>
 801f088:	9011      	str	r0, [sp, #68]	; 0x44
 801f08a:	f7e1 fa7b 	bl	8000584 <__aeabi_i2d>
 801f08e:	4602      	mov	r2, r0
 801f090:	460b      	mov	r3, r1
 801f092:	4630      	mov	r0, r6
 801f094:	4639      	mov	r1, r7
 801f096:	f7e1 f927 	bl	80002e8 <__aeabi_dsub>
 801f09a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f09c:	3330      	adds	r3, #48	; 0x30
 801f09e:	f805 3b01 	strb.w	r3, [r5], #1
 801f0a2:	9b02      	ldr	r3, [sp, #8]
 801f0a4:	429d      	cmp	r5, r3
 801f0a6:	4606      	mov	r6, r0
 801f0a8:	460f      	mov	r7, r1
 801f0aa:	f04f 0200 	mov.w	r2, #0
 801f0ae:	d133      	bne.n	801f118 <_dtoa_r+0x630>
 801f0b0:	4b18      	ldr	r3, [pc, #96]	; (801f114 <_dtoa_r+0x62c>)
 801f0b2:	ec51 0b18 	vmov	r0, r1, d8
 801f0b6:	f7e1 f919 	bl	80002ec <__adddf3>
 801f0ba:	4602      	mov	r2, r0
 801f0bc:	460b      	mov	r3, r1
 801f0be:	4630      	mov	r0, r6
 801f0c0:	4639      	mov	r1, r7
 801f0c2:	f7e1 fd59 	bl	8000b78 <__aeabi_dcmpgt>
 801f0c6:	2800      	cmp	r0, #0
 801f0c8:	d174      	bne.n	801f1b4 <_dtoa_r+0x6cc>
 801f0ca:	ec53 2b18 	vmov	r2, r3, d8
 801f0ce:	4911      	ldr	r1, [pc, #68]	; (801f114 <_dtoa_r+0x62c>)
 801f0d0:	2000      	movs	r0, #0
 801f0d2:	f7e1 f909 	bl	80002e8 <__aeabi_dsub>
 801f0d6:	4602      	mov	r2, r0
 801f0d8:	460b      	mov	r3, r1
 801f0da:	4630      	mov	r0, r6
 801f0dc:	4639      	mov	r1, r7
 801f0de:	f7e1 fd2d 	bl	8000b3c <__aeabi_dcmplt>
 801f0e2:	2800      	cmp	r0, #0
 801f0e4:	f43f af27 	beq.w	801ef36 <_dtoa_r+0x44e>
 801f0e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f0ea:	1e6b      	subs	r3, r5, #1
 801f0ec:	930c      	str	r3, [sp, #48]	; 0x30
 801f0ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f0f2:	2b30      	cmp	r3, #48	; 0x30
 801f0f4:	d0f8      	beq.n	801f0e8 <_dtoa_r+0x600>
 801f0f6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f0fa:	e049      	b.n	801f190 <_dtoa_r+0x6a8>
 801f0fc:	08029430 	.word	0x08029430
 801f100:	08029408 	.word	0x08029408
 801f104:	3ff00000 	.word	0x3ff00000
 801f108:	40240000 	.word	0x40240000
 801f10c:	401c0000 	.word	0x401c0000
 801f110:	40140000 	.word	0x40140000
 801f114:	3fe00000 	.word	0x3fe00000
 801f118:	4baf      	ldr	r3, [pc, #700]	; (801f3d8 <_dtoa_r+0x8f0>)
 801f11a:	f7e1 fa9d 	bl	8000658 <__aeabi_dmul>
 801f11e:	4606      	mov	r6, r0
 801f120:	460f      	mov	r7, r1
 801f122:	e7ad      	b.n	801f080 <_dtoa_r+0x598>
 801f124:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f128:	9d00      	ldr	r5, [sp, #0]
 801f12a:	4642      	mov	r2, r8
 801f12c:	464b      	mov	r3, r9
 801f12e:	4630      	mov	r0, r6
 801f130:	4639      	mov	r1, r7
 801f132:	f7e1 fbbb 	bl	80008ac <__aeabi_ddiv>
 801f136:	f7e1 fd3f 	bl	8000bb8 <__aeabi_d2iz>
 801f13a:	9002      	str	r0, [sp, #8]
 801f13c:	f7e1 fa22 	bl	8000584 <__aeabi_i2d>
 801f140:	4642      	mov	r2, r8
 801f142:	464b      	mov	r3, r9
 801f144:	f7e1 fa88 	bl	8000658 <__aeabi_dmul>
 801f148:	4602      	mov	r2, r0
 801f14a:	460b      	mov	r3, r1
 801f14c:	4630      	mov	r0, r6
 801f14e:	4639      	mov	r1, r7
 801f150:	f7e1 f8ca 	bl	80002e8 <__aeabi_dsub>
 801f154:	9e02      	ldr	r6, [sp, #8]
 801f156:	9f01      	ldr	r7, [sp, #4]
 801f158:	3630      	adds	r6, #48	; 0x30
 801f15a:	f805 6b01 	strb.w	r6, [r5], #1
 801f15e:	9e00      	ldr	r6, [sp, #0]
 801f160:	1bae      	subs	r6, r5, r6
 801f162:	42b7      	cmp	r7, r6
 801f164:	4602      	mov	r2, r0
 801f166:	460b      	mov	r3, r1
 801f168:	d137      	bne.n	801f1da <_dtoa_r+0x6f2>
 801f16a:	f7e1 f8bf 	bl	80002ec <__adddf3>
 801f16e:	4642      	mov	r2, r8
 801f170:	464b      	mov	r3, r9
 801f172:	4606      	mov	r6, r0
 801f174:	460f      	mov	r7, r1
 801f176:	f7e1 fcff 	bl	8000b78 <__aeabi_dcmpgt>
 801f17a:	b9c8      	cbnz	r0, 801f1b0 <_dtoa_r+0x6c8>
 801f17c:	4642      	mov	r2, r8
 801f17e:	464b      	mov	r3, r9
 801f180:	4630      	mov	r0, r6
 801f182:	4639      	mov	r1, r7
 801f184:	f7e1 fcd0 	bl	8000b28 <__aeabi_dcmpeq>
 801f188:	b110      	cbz	r0, 801f190 <_dtoa_r+0x6a8>
 801f18a:	9b02      	ldr	r3, [sp, #8]
 801f18c:	07d9      	lsls	r1, r3, #31
 801f18e:	d40f      	bmi.n	801f1b0 <_dtoa_r+0x6c8>
 801f190:	4620      	mov	r0, r4
 801f192:	4659      	mov	r1, fp
 801f194:	f001 f8db 	bl	802034e <_Bfree>
 801f198:	2300      	movs	r3, #0
 801f19a:	702b      	strb	r3, [r5, #0]
 801f19c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f19e:	f10a 0001 	add.w	r0, sl, #1
 801f1a2:	6018      	str	r0, [r3, #0]
 801f1a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	f43f acd9 	beq.w	801eb5e <_dtoa_r+0x76>
 801f1ac:	601d      	str	r5, [r3, #0]
 801f1ae:	e4d6      	b.n	801eb5e <_dtoa_r+0x76>
 801f1b0:	f8cd a01c 	str.w	sl, [sp, #28]
 801f1b4:	462b      	mov	r3, r5
 801f1b6:	461d      	mov	r5, r3
 801f1b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f1bc:	2a39      	cmp	r2, #57	; 0x39
 801f1be:	d108      	bne.n	801f1d2 <_dtoa_r+0x6ea>
 801f1c0:	9a00      	ldr	r2, [sp, #0]
 801f1c2:	429a      	cmp	r2, r3
 801f1c4:	d1f7      	bne.n	801f1b6 <_dtoa_r+0x6ce>
 801f1c6:	9a07      	ldr	r2, [sp, #28]
 801f1c8:	9900      	ldr	r1, [sp, #0]
 801f1ca:	3201      	adds	r2, #1
 801f1cc:	9207      	str	r2, [sp, #28]
 801f1ce:	2230      	movs	r2, #48	; 0x30
 801f1d0:	700a      	strb	r2, [r1, #0]
 801f1d2:	781a      	ldrb	r2, [r3, #0]
 801f1d4:	3201      	adds	r2, #1
 801f1d6:	701a      	strb	r2, [r3, #0]
 801f1d8:	e78d      	b.n	801f0f6 <_dtoa_r+0x60e>
 801f1da:	4b7f      	ldr	r3, [pc, #508]	; (801f3d8 <_dtoa_r+0x8f0>)
 801f1dc:	2200      	movs	r2, #0
 801f1de:	f7e1 fa3b 	bl	8000658 <__aeabi_dmul>
 801f1e2:	2200      	movs	r2, #0
 801f1e4:	2300      	movs	r3, #0
 801f1e6:	4606      	mov	r6, r0
 801f1e8:	460f      	mov	r7, r1
 801f1ea:	f7e1 fc9d 	bl	8000b28 <__aeabi_dcmpeq>
 801f1ee:	2800      	cmp	r0, #0
 801f1f0:	d09b      	beq.n	801f12a <_dtoa_r+0x642>
 801f1f2:	e7cd      	b.n	801f190 <_dtoa_r+0x6a8>
 801f1f4:	9a08      	ldr	r2, [sp, #32]
 801f1f6:	2a00      	cmp	r2, #0
 801f1f8:	f000 80c4 	beq.w	801f384 <_dtoa_r+0x89c>
 801f1fc:	9a05      	ldr	r2, [sp, #20]
 801f1fe:	2a01      	cmp	r2, #1
 801f200:	f300 80a8 	bgt.w	801f354 <_dtoa_r+0x86c>
 801f204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f206:	2a00      	cmp	r2, #0
 801f208:	f000 80a0 	beq.w	801f34c <_dtoa_r+0x864>
 801f20c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f210:	9e06      	ldr	r6, [sp, #24]
 801f212:	4645      	mov	r5, r8
 801f214:	9a04      	ldr	r2, [sp, #16]
 801f216:	2101      	movs	r1, #1
 801f218:	441a      	add	r2, r3
 801f21a:	4620      	mov	r0, r4
 801f21c:	4498      	add	r8, r3
 801f21e:	9204      	str	r2, [sp, #16]
 801f220:	f001 f938 	bl	8020494 <__i2b>
 801f224:	4607      	mov	r7, r0
 801f226:	2d00      	cmp	r5, #0
 801f228:	dd0b      	ble.n	801f242 <_dtoa_r+0x75a>
 801f22a:	9b04      	ldr	r3, [sp, #16]
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	dd08      	ble.n	801f242 <_dtoa_r+0x75a>
 801f230:	42ab      	cmp	r3, r5
 801f232:	9a04      	ldr	r2, [sp, #16]
 801f234:	bfa8      	it	ge
 801f236:	462b      	movge	r3, r5
 801f238:	eba8 0803 	sub.w	r8, r8, r3
 801f23c:	1aed      	subs	r5, r5, r3
 801f23e:	1ad3      	subs	r3, r2, r3
 801f240:	9304      	str	r3, [sp, #16]
 801f242:	9b06      	ldr	r3, [sp, #24]
 801f244:	b1fb      	cbz	r3, 801f286 <_dtoa_r+0x79e>
 801f246:	9b08      	ldr	r3, [sp, #32]
 801f248:	2b00      	cmp	r3, #0
 801f24a:	f000 809f 	beq.w	801f38c <_dtoa_r+0x8a4>
 801f24e:	2e00      	cmp	r6, #0
 801f250:	dd11      	ble.n	801f276 <_dtoa_r+0x78e>
 801f252:	4639      	mov	r1, r7
 801f254:	4632      	mov	r2, r6
 801f256:	4620      	mov	r0, r4
 801f258:	f001 f9d8 	bl	802060c <__pow5mult>
 801f25c:	465a      	mov	r2, fp
 801f25e:	4601      	mov	r1, r0
 801f260:	4607      	mov	r7, r0
 801f262:	4620      	mov	r0, r4
 801f264:	f001 f92c 	bl	80204c0 <__multiply>
 801f268:	4659      	mov	r1, fp
 801f26a:	9007      	str	r0, [sp, #28]
 801f26c:	4620      	mov	r0, r4
 801f26e:	f001 f86e 	bl	802034e <_Bfree>
 801f272:	9b07      	ldr	r3, [sp, #28]
 801f274:	469b      	mov	fp, r3
 801f276:	9b06      	ldr	r3, [sp, #24]
 801f278:	1b9a      	subs	r2, r3, r6
 801f27a:	d004      	beq.n	801f286 <_dtoa_r+0x79e>
 801f27c:	4659      	mov	r1, fp
 801f27e:	4620      	mov	r0, r4
 801f280:	f001 f9c4 	bl	802060c <__pow5mult>
 801f284:	4683      	mov	fp, r0
 801f286:	2101      	movs	r1, #1
 801f288:	4620      	mov	r0, r4
 801f28a:	f001 f903 	bl	8020494 <__i2b>
 801f28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f290:	2b00      	cmp	r3, #0
 801f292:	4606      	mov	r6, r0
 801f294:	dd7c      	ble.n	801f390 <_dtoa_r+0x8a8>
 801f296:	461a      	mov	r2, r3
 801f298:	4601      	mov	r1, r0
 801f29a:	4620      	mov	r0, r4
 801f29c:	f001 f9b6 	bl	802060c <__pow5mult>
 801f2a0:	9b05      	ldr	r3, [sp, #20]
 801f2a2:	2b01      	cmp	r3, #1
 801f2a4:	4606      	mov	r6, r0
 801f2a6:	dd76      	ble.n	801f396 <_dtoa_r+0x8ae>
 801f2a8:	2300      	movs	r3, #0
 801f2aa:	9306      	str	r3, [sp, #24]
 801f2ac:	6933      	ldr	r3, [r6, #16]
 801f2ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f2b2:	6918      	ldr	r0, [r3, #16]
 801f2b4:	f001 f89e 	bl	80203f4 <__hi0bits>
 801f2b8:	f1c0 0020 	rsb	r0, r0, #32
 801f2bc:	9b04      	ldr	r3, [sp, #16]
 801f2be:	4418      	add	r0, r3
 801f2c0:	f010 001f 	ands.w	r0, r0, #31
 801f2c4:	f000 8086 	beq.w	801f3d4 <_dtoa_r+0x8ec>
 801f2c8:	f1c0 0320 	rsb	r3, r0, #32
 801f2cc:	2b04      	cmp	r3, #4
 801f2ce:	dd7f      	ble.n	801f3d0 <_dtoa_r+0x8e8>
 801f2d0:	f1c0 001c 	rsb	r0, r0, #28
 801f2d4:	9b04      	ldr	r3, [sp, #16]
 801f2d6:	4403      	add	r3, r0
 801f2d8:	4480      	add	r8, r0
 801f2da:	4405      	add	r5, r0
 801f2dc:	9304      	str	r3, [sp, #16]
 801f2de:	f1b8 0f00 	cmp.w	r8, #0
 801f2e2:	dd05      	ble.n	801f2f0 <_dtoa_r+0x808>
 801f2e4:	4659      	mov	r1, fp
 801f2e6:	4642      	mov	r2, r8
 801f2e8:	4620      	mov	r0, r4
 801f2ea:	f001 f9cf 	bl	802068c <__lshift>
 801f2ee:	4683      	mov	fp, r0
 801f2f0:	9b04      	ldr	r3, [sp, #16]
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	dd05      	ble.n	801f302 <_dtoa_r+0x81a>
 801f2f6:	4631      	mov	r1, r6
 801f2f8:	461a      	mov	r2, r3
 801f2fa:	4620      	mov	r0, r4
 801f2fc:	f001 f9c6 	bl	802068c <__lshift>
 801f300:	4606      	mov	r6, r0
 801f302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f304:	2b00      	cmp	r3, #0
 801f306:	d069      	beq.n	801f3dc <_dtoa_r+0x8f4>
 801f308:	4631      	mov	r1, r6
 801f30a:	4658      	mov	r0, fp
 801f30c:	f001 fa2a 	bl	8020764 <__mcmp>
 801f310:	2800      	cmp	r0, #0
 801f312:	da63      	bge.n	801f3dc <_dtoa_r+0x8f4>
 801f314:	2300      	movs	r3, #0
 801f316:	4659      	mov	r1, fp
 801f318:	220a      	movs	r2, #10
 801f31a:	4620      	mov	r0, r4
 801f31c:	f001 f820 	bl	8020360 <__multadd>
 801f320:	9b08      	ldr	r3, [sp, #32]
 801f322:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f326:	4683      	mov	fp, r0
 801f328:	2b00      	cmp	r3, #0
 801f32a:	f000 818e 	beq.w	801f64a <_dtoa_r+0xb62>
 801f32e:	4639      	mov	r1, r7
 801f330:	2300      	movs	r3, #0
 801f332:	220a      	movs	r2, #10
 801f334:	4620      	mov	r0, r4
 801f336:	f001 f813 	bl	8020360 <__multadd>
 801f33a:	f1b9 0f00 	cmp.w	r9, #0
 801f33e:	4607      	mov	r7, r0
 801f340:	f300 808e 	bgt.w	801f460 <_dtoa_r+0x978>
 801f344:	9b05      	ldr	r3, [sp, #20]
 801f346:	2b02      	cmp	r3, #2
 801f348:	dc50      	bgt.n	801f3ec <_dtoa_r+0x904>
 801f34a:	e089      	b.n	801f460 <_dtoa_r+0x978>
 801f34c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f34e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f352:	e75d      	b.n	801f210 <_dtoa_r+0x728>
 801f354:	9b01      	ldr	r3, [sp, #4]
 801f356:	1e5e      	subs	r6, r3, #1
 801f358:	9b06      	ldr	r3, [sp, #24]
 801f35a:	42b3      	cmp	r3, r6
 801f35c:	bfbf      	itttt	lt
 801f35e:	9b06      	ldrlt	r3, [sp, #24]
 801f360:	9606      	strlt	r6, [sp, #24]
 801f362:	1af2      	sublt	r2, r6, r3
 801f364:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f366:	bfb6      	itet	lt
 801f368:	189b      	addlt	r3, r3, r2
 801f36a:	1b9e      	subge	r6, r3, r6
 801f36c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f36e:	9b01      	ldr	r3, [sp, #4]
 801f370:	bfb8      	it	lt
 801f372:	2600      	movlt	r6, #0
 801f374:	2b00      	cmp	r3, #0
 801f376:	bfb5      	itete	lt
 801f378:	eba8 0503 	sublt.w	r5, r8, r3
 801f37c:	9b01      	ldrge	r3, [sp, #4]
 801f37e:	2300      	movlt	r3, #0
 801f380:	4645      	movge	r5, r8
 801f382:	e747      	b.n	801f214 <_dtoa_r+0x72c>
 801f384:	9e06      	ldr	r6, [sp, #24]
 801f386:	9f08      	ldr	r7, [sp, #32]
 801f388:	4645      	mov	r5, r8
 801f38a:	e74c      	b.n	801f226 <_dtoa_r+0x73e>
 801f38c:	9a06      	ldr	r2, [sp, #24]
 801f38e:	e775      	b.n	801f27c <_dtoa_r+0x794>
 801f390:	9b05      	ldr	r3, [sp, #20]
 801f392:	2b01      	cmp	r3, #1
 801f394:	dc18      	bgt.n	801f3c8 <_dtoa_r+0x8e0>
 801f396:	9b02      	ldr	r3, [sp, #8]
 801f398:	b9b3      	cbnz	r3, 801f3c8 <_dtoa_r+0x8e0>
 801f39a:	9b03      	ldr	r3, [sp, #12]
 801f39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f3a0:	b9a3      	cbnz	r3, 801f3cc <_dtoa_r+0x8e4>
 801f3a2:	9b03      	ldr	r3, [sp, #12]
 801f3a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f3a8:	0d1b      	lsrs	r3, r3, #20
 801f3aa:	051b      	lsls	r3, r3, #20
 801f3ac:	b12b      	cbz	r3, 801f3ba <_dtoa_r+0x8d2>
 801f3ae:	9b04      	ldr	r3, [sp, #16]
 801f3b0:	3301      	adds	r3, #1
 801f3b2:	9304      	str	r3, [sp, #16]
 801f3b4:	f108 0801 	add.w	r8, r8, #1
 801f3b8:	2301      	movs	r3, #1
 801f3ba:	9306      	str	r3, [sp, #24]
 801f3bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	f47f af74 	bne.w	801f2ac <_dtoa_r+0x7c4>
 801f3c4:	2001      	movs	r0, #1
 801f3c6:	e779      	b.n	801f2bc <_dtoa_r+0x7d4>
 801f3c8:	2300      	movs	r3, #0
 801f3ca:	e7f6      	b.n	801f3ba <_dtoa_r+0x8d2>
 801f3cc:	9b02      	ldr	r3, [sp, #8]
 801f3ce:	e7f4      	b.n	801f3ba <_dtoa_r+0x8d2>
 801f3d0:	d085      	beq.n	801f2de <_dtoa_r+0x7f6>
 801f3d2:	4618      	mov	r0, r3
 801f3d4:	301c      	adds	r0, #28
 801f3d6:	e77d      	b.n	801f2d4 <_dtoa_r+0x7ec>
 801f3d8:	40240000 	.word	0x40240000
 801f3dc:	9b01      	ldr	r3, [sp, #4]
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	dc38      	bgt.n	801f454 <_dtoa_r+0x96c>
 801f3e2:	9b05      	ldr	r3, [sp, #20]
 801f3e4:	2b02      	cmp	r3, #2
 801f3e6:	dd35      	ble.n	801f454 <_dtoa_r+0x96c>
 801f3e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f3ec:	f1b9 0f00 	cmp.w	r9, #0
 801f3f0:	d10d      	bne.n	801f40e <_dtoa_r+0x926>
 801f3f2:	4631      	mov	r1, r6
 801f3f4:	464b      	mov	r3, r9
 801f3f6:	2205      	movs	r2, #5
 801f3f8:	4620      	mov	r0, r4
 801f3fa:	f000 ffb1 	bl	8020360 <__multadd>
 801f3fe:	4601      	mov	r1, r0
 801f400:	4606      	mov	r6, r0
 801f402:	4658      	mov	r0, fp
 801f404:	f001 f9ae 	bl	8020764 <__mcmp>
 801f408:	2800      	cmp	r0, #0
 801f40a:	f73f adbe 	bgt.w	801ef8a <_dtoa_r+0x4a2>
 801f40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f410:	9d00      	ldr	r5, [sp, #0]
 801f412:	ea6f 0a03 	mvn.w	sl, r3
 801f416:	f04f 0800 	mov.w	r8, #0
 801f41a:	4631      	mov	r1, r6
 801f41c:	4620      	mov	r0, r4
 801f41e:	f000 ff96 	bl	802034e <_Bfree>
 801f422:	2f00      	cmp	r7, #0
 801f424:	f43f aeb4 	beq.w	801f190 <_dtoa_r+0x6a8>
 801f428:	f1b8 0f00 	cmp.w	r8, #0
 801f42c:	d005      	beq.n	801f43a <_dtoa_r+0x952>
 801f42e:	45b8      	cmp	r8, r7
 801f430:	d003      	beq.n	801f43a <_dtoa_r+0x952>
 801f432:	4641      	mov	r1, r8
 801f434:	4620      	mov	r0, r4
 801f436:	f000 ff8a 	bl	802034e <_Bfree>
 801f43a:	4639      	mov	r1, r7
 801f43c:	4620      	mov	r0, r4
 801f43e:	f000 ff86 	bl	802034e <_Bfree>
 801f442:	e6a5      	b.n	801f190 <_dtoa_r+0x6a8>
 801f444:	2600      	movs	r6, #0
 801f446:	4637      	mov	r7, r6
 801f448:	e7e1      	b.n	801f40e <_dtoa_r+0x926>
 801f44a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f44c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f450:	4637      	mov	r7, r6
 801f452:	e59a      	b.n	801ef8a <_dtoa_r+0x4a2>
 801f454:	9b08      	ldr	r3, [sp, #32]
 801f456:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	f000 80fc 	beq.w	801f658 <_dtoa_r+0xb70>
 801f460:	2d00      	cmp	r5, #0
 801f462:	dd05      	ble.n	801f470 <_dtoa_r+0x988>
 801f464:	4639      	mov	r1, r7
 801f466:	462a      	mov	r2, r5
 801f468:	4620      	mov	r0, r4
 801f46a:	f001 f90f 	bl	802068c <__lshift>
 801f46e:	4607      	mov	r7, r0
 801f470:	9b06      	ldr	r3, [sp, #24]
 801f472:	2b00      	cmp	r3, #0
 801f474:	d05b      	beq.n	801f52e <_dtoa_r+0xa46>
 801f476:	6879      	ldr	r1, [r7, #4]
 801f478:	4620      	mov	r0, r4
 801f47a:	f000 ff43 	bl	8020304 <_Balloc>
 801f47e:	4605      	mov	r5, r0
 801f480:	b920      	cbnz	r0, 801f48c <_dtoa_r+0x9a4>
 801f482:	4b80      	ldr	r3, [pc, #512]	; (801f684 <_dtoa_r+0xb9c>)
 801f484:	4602      	mov	r2, r0
 801f486:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f48a:	e45b      	b.n	801ed44 <_dtoa_r+0x25c>
 801f48c:	693a      	ldr	r2, [r7, #16]
 801f48e:	3202      	adds	r2, #2
 801f490:	0092      	lsls	r2, r2, #2
 801f492:	f107 010c 	add.w	r1, r7, #12
 801f496:	300c      	adds	r0, #12
 801f498:	f7fb ff9a 	bl	801b3d0 <memcpy>
 801f49c:	2201      	movs	r2, #1
 801f49e:	4629      	mov	r1, r5
 801f4a0:	4620      	mov	r0, r4
 801f4a2:	f001 f8f3 	bl	802068c <__lshift>
 801f4a6:	9b00      	ldr	r3, [sp, #0]
 801f4a8:	3301      	adds	r3, #1
 801f4aa:	9301      	str	r3, [sp, #4]
 801f4ac:	9b00      	ldr	r3, [sp, #0]
 801f4ae:	444b      	add	r3, r9
 801f4b0:	9307      	str	r3, [sp, #28]
 801f4b2:	9b02      	ldr	r3, [sp, #8]
 801f4b4:	f003 0301 	and.w	r3, r3, #1
 801f4b8:	46b8      	mov	r8, r7
 801f4ba:	9306      	str	r3, [sp, #24]
 801f4bc:	4607      	mov	r7, r0
 801f4be:	9b01      	ldr	r3, [sp, #4]
 801f4c0:	4631      	mov	r1, r6
 801f4c2:	3b01      	subs	r3, #1
 801f4c4:	4658      	mov	r0, fp
 801f4c6:	9302      	str	r3, [sp, #8]
 801f4c8:	f7ff fa80 	bl	801e9cc <quorem>
 801f4cc:	4603      	mov	r3, r0
 801f4ce:	3330      	adds	r3, #48	; 0x30
 801f4d0:	9004      	str	r0, [sp, #16]
 801f4d2:	4641      	mov	r1, r8
 801f4d4:	4658      	mov	r0, fp
 801f4d6:	9308      	str	r3, [sp, #32]
 801f4d8:	f001 f944 	bl	8020764 <__mcmp>
 801f4dc:	463a      	mov	r2, r7
 801f4de:	4681      	mov	r9, r0
 801f4e0:	4631      	mov	r1, r6
 801f4e2:	4620      	mov	r0, r4
 801f4e4:	f001 f95a 	bl	802079c <__mdiff>
 801f4e8:	68c2      	ldr	r2, [r0, #12]
 801f4ea:	9b08      	ldr	r3, [sp, #32]
 801f4ec:	4605      	mov	r5, r0
 801f4ee:	bb02      	cbnz	r2, 801f532 <_dtoa_r+0xa4a>
 801f4f0:	4601      	mov	r1, r0
 801f4f2:	4658      	mov	r0, fp
 801f4f4:	f001 f936 	bl	8020764 <__mcmp>
 801f4f8:	9b08      	ldr	r3, [sp, #32]
 801f4fa:	4602      	mov	r2, r0
 801f4fc:	4629      	mov	r1, r5
 801f4fe:	4620      	mov	r0, r4
 801f500:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f504:	f000 ff23 	bl	802034e <_Bfree>
 801f508:	9b05      	ldr	r3, [sp, #20]
 801f50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f50c:	9d01      	ldr	r5, [sp, #4]
 801f50e:	ea43 0102 	orr.w	r1, r3, r2
 801f512:	9b06      	ldr	r3, [sp, #24]
 801f514:	430b      	orrs	r3, r1
 801f516:	9b08      	ldr	r3, [sp, #32]
 801f518:	d10d      	bne.n	801f536 <_dtoa_r+0xa4e>
 801f51a:	2b39      	cmp	r3, #57	; 0x39
 801f51c:	d029      	beq.n	801f572 <_dtoa_r+0xa8a>
 801f51e:	f1b9 0f00 	cmp.w	r9, #0
 801f522:	dd01      	ble.n	801f528 <_dtoa_r+0xa40>
 801f524:	9b04      	ldr	r3, [sp, #16]
 801f526:	3331      	adds	r3, #49	; 0x31
 801f528:	9a02      	ldr	r2, [sp, #8]
 801f52a:	7013      	strb	r3, [r2, #0]
 801f52c:	e775      	b.n	801f41a <_dtoa_r+0x932>
 801f52e:	4638      	mov	r0, r7
 801f530:	e7b9      	b.n	801f4a6 <_dtoa_r+0x9be>
 801f532:	2201      	movs	r2, #1
 801f534:	e7e2      	b.n	801f4fc <_dtoa_r+0xa14>
 801f536:	f1b9 0f00 	cmp.w	r9, #0
 801f53a:	db06      	blt.n	801f54a <_dtoa_r+0xa62>
 801f53c:	9905      	ldr	r1, [sp, #20]
 801f53e:	ea41 0909 	orr.w	r9, r1, r9
 801f542:	9906      	ldr	r1, [sp, #24]
 801f544:	ea59 0101 	orrs.w	r1, r9, r1
 801f548:	d120      	bne.n	801f58c <_dtoa_r+0xaa4>
 801f54a:	2a00      	cmp	r2, #0
 801f54c:	ddec      	ble.n	801f528 <_dtoa_r+0xa40>
 801f54e:	4659      	mov	r1, fp
 801f550:	2201      	movs	r2, #1
 801f552:	4620      	mov	r0, r4
 801f554:	9301      	str	r3, [sp, #4]
 801f556:	f001 f899 	bl	802068c <__lshift>
 801f55a:	4631      	mov	r1, r6
 801f55c:	4683      	mov	fp, r0
 801f55e:	f001 f901 	bl	8020764 <__mcmp>
 801f562:	2800      	cmp	r0, #0
 801f564:	9b01      	ldr	r3, [sp, #4]
 801f566:	dc02      	bgt.n	801f56e <_dtoa_r+0xa86>
 801f568:	d1de      	bne.n	801f528 <_dtoa_r+0xa40>
 801f56a:	07da      	lsls	r2, r3, #31
 801f56c:	d5dc      	bpl.n	801f528 <_dtoa_r+0xa40>
 801f56e:	2b39      	cmp	r3, #57	; 0x39
 801f570:	d1d8      	bne.n	801f524 <_dtoa_r+0xa3c>
 801f572:	9a02      	ldr	r2, [sp, #8]
 801f574:	2339      	movs	r3, #57	; 0x39
 801f576:	7013      	strb	r3, [r2, #0]
 801f578:	462b      	mov	r3, r5
 801f57a:	461d      	mov	r5, r3
 801f57c:	3b01      	subs	r3, #1
 801f57e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f582:	2a39      	cmp	r2, #57	; 0x39
 801f584:	d050      	beq.n	801f628 <_dtoa_r+0xb40>
 801f586:	3201      	adds	r2, #1
 801f588:	701a      	strb	r2, [r3, #0]
 801f58a:	e746      	b.n	801f41a <_dtoa_r+0x932>
 801f58c:	2a00      	cmp	r2, #0
 801f58e:	dd03      	ble.n	801f598 <_dtoa_r+0xab0>
 801f590:	2b39      	cmp	r3, #57	; 0x39
 801f592:	d0ee      	beq.n	801f572 <_dtoa_r+0xa8a>
 801f594:	3301      	adds	r3, #1
 801f596:	e7c7      	b.n	801f528 <_dtoa_r+0xa40>
 801f598:	9a01      	ldr	r2, [sp, #4]
 801f59a:	9907      	ldr	r1, [sp, #28]
 801f59c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f5a0:	428a      	cmp	r2, r1
 801f5a2:	d02a      	beq.n	801f5fa <_dtoa_r+0xb12>
 801f5a4:	4659      	mov	r1, fp
 801f5a6:	2300      	movs	r3, #0
 801f5a8:	220a      	movs	r2, #10
 801f5aa:	4620      	mov	r0, r4
 801f5ac:	f000 fed8 	bl	8020360 <__multadd>
 801f5b0:	45b8      	cmp	r8, r7
 801f5b2:	4683      	mov	fp, r0
 801f5b4:	f04f 0300 	mov.w	r3, #0
 801f5b8:	f04f 020a 	mov.w	r2, #10
 801f5bc:	4641      	mov	r1, r8
 801f5be:	4620      	mov	r0, r4
 801f5c0:	d107      	bne.n	801f5d2 <_dtoa_r+0xaea>
 801f5c2:	f000 fecd 	bl	8020360 <__multadd>
 801f5c6:	4680      	mov	r8, r0
 801f5c8:	4607      	mov	r7, r0
 801f5ca:	9b01      	ldr	r3, [sp, #4]
 801f5cc:	3301      	adds	r3, #1
 801f5ce:	9301      	str	r3, [sp, #4]
 801f5d0:	e775      	b.n	801f4be <_dtoa_r+0x9d6>
 801f5d2:	f000 fec5 	bl	8020360 <__multadd>
 801f5d6:	4639      	mov	r1, r7
 801f5d8:	4680      	mov	r8, r0
 801f5da:	2300      	movs	r3, #0
 801f5dc:	220a      	movs	r2, #10
 801f5de:	4620      	mov	r0, r4
 801f5e0:	f000 febe 	bl	8020360 <__multadd>
 801f5e4:	4607      	mov	r7, r0
 801f5e6:	e7f0      	b.n	801f5ca <_dtoa_r+0xae2>
 801f5e8:	f1b9 0f00 	cmp.w	r9, #0
 801f5ec:	9a00      	ldr	r2, [sp, #0]
 801f5ee:	bfcc      	ite	gt
 801f5f0:	464d      	movgt	r5, r9
 801f5f2:	2501      	movle	r5, #1
 801f5f4:	4415      	add	r5, r2
 801f5f6:	f04f 0800 	mov.w	r8, #0
 801f5fa:	4659      	mov	r1, fp
 801f5fc:	2201      	movs	r2, #1
 801f5fe:	4620      	mov	r0, r4
 801f600:	9301      	str	r3, [sp, #4]
 801f602:	f001 f843 	bl	802068c <__lshift>
 801f606:	4631      	mov	r1, r6
 801f608:	4683      	mov	fp, r0
 801f60a:	f001 f8ab 	bl	8020764 <__mcmp>
 801f60e:	2800      	cmp	r0, #0
 801f610:	dcb2      	bgt.n	801f578 <_dtoa_r+0xa90>
 801f612:	d102      	bne.n	801f61a <_dtoa_r+0xb32>
 801f614:	9b01      	ldr	r3, [sp, #4]
 801f616:	07db      	lsls	r3, r3, #31
 801f618:	d4ae      	bmi.n	801f578 <_dtoa_r+0xa90>
 801f61a:	462b      	mov	r3, r5
 801f61c:	461d      	mov	r5, r3
 801f61e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f622:	2a30      	cmp	r2, #48	; 0x30
 801f624:	d0fa      	beq.n	801f61c <_dtoa_r+0xb34>
 801f626:	e6f8      	b.n	801f41a <_dtoa_r+0x932>
 801f628:	9a00      	ldr	r2, [sp, #0]
 801f62a:	429a      	cmp	r2, r3
 801f62c:	d1a5      	bne.n	801f57a <_dtoa_r+0xa92>
 801f62e:	f10a 0a01 	add.w	sl, sl, #1
 801f632:	2331      	movs	r3, #49	; 0x31
 801f634:	e779      	b.n	801f52a <_dtoa_r+0xa42>
 801f636:	4b14      	ldr	r3, [pc, #80]	; (801f688 <_dtoa_r+0xba0>)
 801f638:	f7ff bab1 	b.w	801eb9e <_dtoa_r+0xb6>
 801f63c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f63e:	2b00      	cmp	r3, #0
 801f640:	f47f aa93 	bne.w	801eb6a <_dtoa_r+0x82>
 801f644:	4b11      	ldr	r3, [pc, #68]	; (801f68c <_dtoa_r+0xba4>)
 801f646:	f7ff baaa 	b.w	801eb9e <_dtoa_r+0xb6>
 801f64a:	f1b9 0f00 	cmp.w	r9, #0
 801f64e:	dc03      	bgt.n	801f658 <_dtoa_r+0xb70>
 801f650:	9b05      	ldr	r3, [sp, #20]
 801f652:	2b02      	cmp	r3, #2
 801f654:	f73f aeca 	bgt.w	801f3ec <_dtoa_r+0x904>
 801f658:	9d00      	ldr	r5, [sp, #0]
 801f65a:	4631      	mov	r1, r6
 801f65c:	4658      	mov	r0, fp
 801f65e:	f7ff f9b5 	bl	801e9cc <quorem>
 801f662:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f666:	f805 3b01 	strb.w	r3, [r5], #1
 801f66a:	9a00      	ldr	r2, [sp, #0]
 801f66c:	1aaa      	subs	r2, r5, r2
 801f66e:	4591      	cmp	r9, r2
 801f670:	ddba      	ble.n	801f5e8 <_dtoa_r+0xb00>
 801f672:	4659      	mov	r1, fp
 801f674:	2300      	movs	r3, #0
 801f676:	220a      	movs	r2, #10
 801f678:	4620      	mov	r0, r4
 801f67a:	f000 fe71 	bl	8020360 <__multadd>
 801f67e:	4683      	mov	fp, r0
 801f680:	e7eb      	b.n	801f65a <_dtoa_r+0xb72>
 801f682:	bf00      	nop
 801f684:	08029335 	.word	0x08029335
 801f688:	080292aa 	.word	0x080292aa
 801f68c:	0802932c 	.word	0x0802932c

0801f690 <__errno>:
 801f690:	4b01      	ldr	r3, [pc, #4]	; (801f698 <__errno+0x8>)
 801f692:	6818      	ldr	r0, [r3, #0]
 801f694:	4770      	bx	lr
 801f696:	bf00      	nop
 801f698:	20000038 	.word	0x20000038

0801f69c <__sflush_r>:
 801f69c:	898b      	ldrh	r3, [r1, #12]
 801f69e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6a6:	4605      	mov	r5, r0
 801f6a8:	0718      	lsls	r0, r3, #28
 801f6aa:	460c      	mov	r4, r1
 801f6ac:	d45f      	bmi.n	801f76e <__sflush_r+0xd2>
 801f6ae:	684b      	ldr	r3, [r1, #4]
 801f6b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	818a      	strh	r2, [r1, #12]
 801f6b8:	dc05      	bgt.n	801f6c6 <__sflush_r+0x2a>
 801f6ba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	dc02      	bgt.n	801f6c6 <__sflush_r+0x2a>
 801f6c0:	2000      	movs	r0, #0
 801f6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f6c8:	2e00      	cmp	r6, #0
 801f6ca:	d0f9      	beq.n	801f6c0 <__sflush_r+0x24>
 801f6cc:	2300      	movs	r3, #0
 801f6ce:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f6d2:	682f      	ldr	r7, [r5, #0]
 801f6d4:	602b      	str	r3, [r5, #0]
 801f6d6:	d036      	beq.n	801f746 <__sflush_r+0xaa>
 801f6d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f6da:	89a3      	ldrh	r3, [r4, #12]
 801f6dc:	075a      	lsls	r2, r3, #29
 801f6de:	d505      	bpl.n	801f6ec <__sflush_r+0x50>
 801f6e0:	6863      	ldr	r3, [r4, #4]
 801f6e2:	1ac0      	subs	r0, r0, r3
 801f6e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f6e6:	b10b      	cbz	r3, 801f6ec <__sflush_r+0x50>
 801f6e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f6ea:	1ac0      	subs	r0, r0, r3
 801f6ec:	2300      	movs	r3, #0
 801f6ee:	4602      	mov	r2, r0
 801f6f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f6f2:	69e1      	ldr	r1, [r4, #28]
 801f6f4:	4628      	mov	r0, r5
 801f6f6:	47b0      	blx	r6
 801f6f8:	1c43      	adds	r3, r0, #1
 801f6fa:	89a3      	ldrh	r3, [r4, #12]
 801f6fc:	d106      	bne.n	801f70c <__sflush_r+0x70>
 801f6fe:	6829      	ldr	r1, [r5, #0]
 801f700:	291d      	cmp	r1, #29
 801f702:	d830      	bhi.n	801f766 <__sflush_r+0xca>
 801f704:	4a2b      	ldr	r2, [pc, #172]	; (801f7b4 <__sflush_r+0x118>)
 801f706:	40ca      	lsrs	r2, r1
 801f708:	07d6      	lsls	r6, r2, #31
 801f70a:	d52c      	bpl.n	801f766 <__sflush_r+0xca>
 801f70c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f710:	b21b      	sxth	r3, r3
 801f712:	2200      	movs	r2, #0
 801f714:	6062      	str	r2, [r4, #4]
 801f716:	04d9      	lsls	r1, r3, #19
 801f718:	6922      	ldr	r2, [r4, #16]
 801f71a:	81a3      	strh	r3, [r4, #12]
 801f71c:	6022      	str	r2, [r4, #0]
 801f71e:	d504      	bpl.n	801f72a <__sflush_r+0x8e>
 801f720:	1c42      	adds	r2, r0, #1
 801f722:	d101      	bne.n	801f728 <__sflush_r+0x8c>
 801f724:	682b      	ldr	r3, [r5, #0]
 801f726:	b903      	cbnz	r3, 801f72a <__sflush_r+0x8e>
 801f728:	6520      	str	r0, [r4, #80]	; 0x50
 801f72a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f72c:	602f      	str	r7, [r5, #0]
 801f72e:	2900      	cmp	r1, #0
 801f730:	d0c6      	beq.n	801f6c0 <__sflush_r+0x24>
 801f732:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801f736:	4299      	cmp	r1, r3
 801f738:	d002      	beq.n	801f740 <__sflush_r+0xa4>
 801f73a:	4628      	mov	r0, r5
 801f73c:	f000 f938 	bl	801f9b0 <_free_r>
 801f740:	2000      	movs	r0, #0
 801f742:	6320      	str	r0, [r4, #48]	; 0x30
 801f744:	e7bd      	b.n	801f6c2 <__sflush_r+0x26>
 801f746:	69e1      	ldr	r1, [r4, #28]
 801f748:	2301      	movs	r3, #1
 801f74a:	4628      	mov	r0, r5
 801f74c:	47b0      	blx	r6
 801f74e:	1c41      	adds	r1, r0, #1
 801f750:	d1c3      	bne.n	801f6da <__sflush_r+0x3e>
 801f752:	682b      	ldr	r3, [r5, #0]
 801f754:	2b00      	cmp	r3, #0
 801f756:	d0c0      	beq.n	801f6da <__sflush_r+0x3e>
 801f758:	2b1d      	cmp	r3, #29
 801f75a:	d001      	beq.n	801f760 <__sflush_r+0xc4>
 801f75c:	2b16      	cmp	r3, #22
 801f75e:	d101      	bne.n	801f764 <__sflush_r+0xc8>
 801f760:	602f      	str	r7, [r5, #0]
 801f762:	e7ad      	b.n	801f6c0 <__sflush_r+0x24>
 801f764:	89a3      	ldrh	r3, [r4, #12]
 801f766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f76a:	81a3      	strh	r3, [r4, #12]
 801f76c:	e7a9      	b.n	801f6c2 <__sflush_r+0x26>
 801f76e:	690f      	ldr	r7, [r1, #16]
 801f770:	2f00      	cmp	r7, #0
 801f772:	d0a5      	beq.n	801f6c0 <__sflush_r+0x24>
 801f774:	079b      	lsls	r3, r3, #30
 801f776:	680e      	ldr	r6, [r1, #0]
 801f778:	bf08      	it	eq
 801f77a:	694b      	ldreq	r3, [r1, #20]
 801f77c:	600f      	str	r7, [r1, #0]
 801f77e:	bf18      	it	ne
 801f780:	2300      	movne	r3, #0
 801f782:	eba6 0807 	sub.w	r8, r6, r7
 801f786:	608b      	str	r3, [r1, #8]
 801f788:	f1b8 0f00 	cmp.w	r8, #0
 801f78c:	dd98      	ble.n	801f6c0 <__sflush_r+0x24>
 801f78e:	69e1      	ldr	r1, [r4, #28]
 801f790:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f792:	4643      	mov	r3, r8
 801f794:	463a      	mov	r2, r7
 801f796:	4628      	mov	r0, r5
 801f798:	47b0      	blx	r6
 801f79a:	2800      	cmp	r0, #0
 801f79c:	dc06      	bgt.n	801f7ac <__sflush_r+0x110>
 801f79e:	89a3      	ldrh	r3, [r4, #12]
 801f7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f7a4:	81a3      	strh	r3, [r4, #12]
 801f7a6:	f04f 30ff 	mov.w	r0, #4294967295
 801f7aa:	e78a      	b.n	801f6c2 <__sflush_r+0x26>
 801f7ac:	4407      	add	r7, r0
 801f7ae:	eba8 0800 	sub.w	r8, r8, r0
 801f7b2:	e7e9      	b.n	801f788 <__sflush_r+0xec>
 801f7b4:	20400001 	.word	0x20400001

0801f7b8 <_fflush_r>:
 801f7b8:	b538      	push	{r3, r4, r5, lr}
 801f7ba:	460c      	mov	r4, r1
 801f7bc:	4605      	mov	r5, r0
 801f7be:	b118      	cbz	r0, 801f7c8 <_fflush_r+0x10>
 801f7c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801f7c2:	b90b      	cbnz	r3, 801f7c8 <_fflush_r+0x10>
 801f7c4:	f000 f864 	bl	801f890 <__sinit>
 801f7c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f7cc:	b1bb      	cbz	r3, 801f7fe <_fflush_r+0x46>
 801f7ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f7d0:	07d0      	lsls	r0, r2, #31
 801f7d2:	d404      	bmi.n	801f7de <_fflush_r+0x26>
 801f7d4:	0599      	lsls	r1, r3, #22
 801f7d6:	d402      	bmi.n	801f7de <_fflush_r+0x26>
 801f7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7da:	f000 fac6 	bl	801fd6a <__retarget_lock_acquire_recursive>
 801f7de:	4628      	mov	r0, r5
 801f7e0:	4621      	mov	r1, r4
 801f7e2:	f7ff ff5b 	bl	801f69c <__sflush_r>
 801f7e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f7e8:	07da      	lsls	r2, r3, #31
 801f7ea:	4605      	mov	r5, r0
 801f7ec:	d405      	bmi.n	801f7fa <_fflush_r+0x42>
 801f7ee:	89a3      	ldrh	r3, [r4, #12]
 801f7f0:	059b      	lsls	r3, r3, #22
 801f7f2:	d402      	bmi.n	801f7fa <_fflush_r+0x42>
 801f7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7f6:	f000 faba 	bl	801fd6e <__retarget_lock_release_recursive>
 801f7fa:	4628      	mov	r0, r5
 801f7fc:	bd38      	pop	{r3, r4, r5, pc}
 801f7fe:	461d      	mov	r5, r3
 801f800:	e7fb      	b.n	801f7fa <_fflush_r+0x42>
	...

0801f804 <std>:
 801f804:	2300      	movs	r3, #0
 801f806:	b510      	push	{r4, lr}
 801f808:	4604      	mov	r4, r0
 801f80a:	e9c0 3300 	strd	r3, r3, [r0]
 801f80e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f812:	6083      	str	r3, [r0, #8]
 801f814:	8181      	strh	r1, [r0, #12]
 801f816:	6643      	str	r3, [r0, #100]	; 0x64
 801f818:	81c2      	strh	r2, [r0, #14]
 801f81a:	6183      	str	r3, [r0, #24]
 801f81c:	4619      	mov	r1, r3
 801f81e:	2208      	movs	r2, #8
 801f820:	305c      	adds	r0, #92	; 0x5c
 801f822:	f7fb fdfd 	bl	801b420 <memset>
 801f826:	4b07      	ldr	r3, [pc, #28]	; (801f844 <std+0x40>)
 801f828:	6223      	str	r3, [r4, #32]
 801f82a:	4b07      	ldr	r3, [pc, #28]	; (801f848 <std+0x44>)
 801f82c:	6263      	str	r3, [r4, #36]	; 0x24
 801f82e:	4b07      	ldr	r3, [pc, #28]	; (801f84c <std+0x48>)
 801f830:	62a3      	str	r3, [r4, #40]	; 0x28
 801f832:	4b07      	ldr	r3, [pc, #28]	; (801f850 <std+0x4c>)
 801f834:	61e4      	str	r4, [r4, #28]
 801f836:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f838:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f840:	f000 ba90 	b.w	801fd64 <__retarget_lock_init_recursive>
 801f844:	08020a4d 	.word	0x08020a4d
 801f848:	08020a73 	.word	0x08020a73
 801f84c:	08020aab 	.word	0x08020aab
 801f850:	08020acf 	.word	0x08020acf

0801f854 <_cleanup_r>:
 801f854:	4901      	ldr	r1, [pc, #4]	; (801f85c <_cleanup_r+0x8>)
 801f856:	f000 b96b 	b.w	801fb30 <_fwalk_reent>
 801f85a:	bf00      	nop
 801f85c:	08022955 	.word	0x08022955

0801f860 <__sfp_lock_acquire>:
 801f860:	4801      	ldr	r0, [pc, #4]	; (801f868 <__sfp_lock_acquire+0x8>)
 801f862:	f000 ba82 	b.w	801fd6a <__retarget_lock_acquire_recursive>
 801f866:	bf00      	nop
 801f868:	2000be74 	.word	0x2000be74

0801f86c <__sfp_lock_release>:
 801f86c:	4801      	ldr	r0, [pc, #4]	; (801f874 <__sfp_lock_release+0x8>)
 801f86e:	f000 ba7e 	b.w	801fd6e <__retarget_lock_release_recursive>
 801f872:	bf00      	nop
 801f874:	2000be74 	.word	0x2000be74

0801f878 <__sinit_lock_acquire>:
 801f878:	4801      	ldr	r0, [pc, #4]	; (801f880 <__sinit_lock_acquire+0x8>)
 801f87a:	f000 ba76 	b.w	801fd6a <__retarget_lock_acquire_recursive>
 801f87e:	bf00      	nop
 801f880:	2000be6f 	.word	0x2000be6f

0801f884 <__sinit_lock_release>:
 801f884:	4801      	ldr	r0, [pc, #4]	; (801f88c <__sinit_lock_release+0x8>)
 801f886:	f000 ba72 	b.w	801fd6e <__retarget_lock_release_recursive>
 801f88a:	bf00      	nop
 801f88c:	2000be6f 	.word	0x2000be6f

0801f890 <__sinit>:
 801f890:	b510      	push	{r4, lr}
 801f892:	4604      	mov	r4, r0
 801f894:	f7ff fff0 	bl	801f878 <__sinit_lock_acquire>
 801f898:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801f89a:	b11a      	cbz	r2, 801f8a4 <__sinit+0x14>
 801f89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f8a0:	f7ff bff0 	b.w	801f884 <__sinit_lock_release>
 801f8a4:	4b0d      	ldr	r3, [pc, #52]	; (801f8dc <__sinit+0x4c>)
 801f8a6:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f8a8:	2303      	movs	r3, #3
 801f8aa:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801f8ae:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801f8b2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801f8b6:	6860      	ldr	r0, [r4, #4]
 801f8b8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801f8bc:	2104      	movs	r1, #4
 801f8be:	f7ff ffa1 	bl	801f804 <std>
 801f8c2:	68a0      	ldr	r0, [r4, #8]
 801f8c4:	2201      	movs	r2, #1
 801f8c6:	2109      	movs	r1, #9
 801f8c8:	f7ff ff9c 	bl	801f804 <std>
 801f8cc:	68e0      	ldr	r0, [r4, #12]
 801f8ce:	2202      	movs	r2, #2
 801f8d0:	2112      	movs	r1, #18
 801f8d2:	f7ff ff97 	bl	801f804 <std>
 801f8d6:	2301      	movs	r3, #1
 801f8d8:	63a3      	str	r3, [r4, #56]	; 0x38
 801f8da:	e7df      	b.n	801f89c <__sinit+0xc>
 801f8dc:	0801f855 	.word	0x0801f855

0801f8e0 <__libc_fini_array>:
 801f8e0:	b538      	push	{r3, r4, r5, lr}
 801f8e2:	4d07      	ldr	r5, [pc, #28]	; (801f900 <__libc_fini_array+0x20>)
 801f8e4:	4c07      	ldr	r4, [pc, #28]	; (801f904 <__libc_fini_array+0x24>)
 801f8e6:	1b64      	subs	r4, r4, r5
 801f8e8:	10a4      	asrs	r4, r4, #2
 801f8ea:	b91c      	cbnz	r4, 801f8f4 <__libc_fini_array+0x14>
 801f8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f8f0:	f004 be66 	b.w	80245c0 <_fini>
 801f8f4:	3c01      	subs	r4, #1
 801f8f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801f8fa:	4798      	blx	r3
 801f8fc:	e7f5      	b.n	801f8ea <__libc_fini_array+0xa>
 801f8fe:	bf00      	nop
 801f900:	080295e0 	.word	0x080295e0
 801f904:	080295e4 	.word	0x080295e4

0801f908 <_malloc_trim_r>:
 801f908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f90c:	4606      	mov	r6, r0
 801f90e:	2008      	movs	r0, #8
 801f910:	460c      	mov	r4, r1
 801f912:	f002 fa23 	bl	8021d5c <sysconf>
 801f916:	4f23      	ldr	r7, [pc, #140]	; (801f9a4 <_malloc_trim_r+0x9c>)
 801f918:	4680      	mov	r8, r0
 801f91a:	4630      	mov	r0, r6
 801f91c:	f000 fce6 	bl	80202ec <__malloc_lock>
 801f920:	68bb      	ldr	r3, [r7, #8]
 801f922:	685d      	ldr	r5, [r3, #4]
 801f924:	f025 0503 	bic.w	r5, r5, #3
 801f928:	1b2c      	subs	r4, r5, r4
 801f92a:	3c11      	subs	r4, #17
 801f92c:	4444      	add	r4, r8
 801f92e:	fbb4 f4f8 	udiv	r4, r4, r8
 801f932:	3c01      	subs	r4, #1
 801f934:	fb08 f404 	mul.w	r4, r8, r4
 801f938:	45a0      	cmp	r8, r4
 801f93a:	dd05      	ble.n	801f948 <_malloc_trim_r+0x40>
 801f93c:	4630      	mov	r0, r6
 801f93e:	f000 fcdb 	bl	80202f8 <__malloc_unlock>
 801f942:	2000      	movs	r0, #0
 801f944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f948:	2100      	movs	r1, #0
 801f94a:	4630      	mov	r0, r6
 801f94c:	f001 f842 	bl	80209d4 <_sbrk_r>
 801f950:	68bb      	ldr	r3, [r7, #8]
 801f952:	442b      	add	r3, r5
 801f954:	4298      	cmp	r0, r3
 801f956:	d1f1      	bne.n	801f93c <_malloc_trim_r+0x34>
 801f958:	4261      	negs	r1, r4
 801f95a:	4630      	mov	r0, r6
 801f95c:	f001 f83a 	bl	80209d4 <_sbrk_r>
 801f960:	3001      	adds	r0, #1
 801f962:	d110      	bne.n	801f986 <_malloc_trim_r+0x7e>
 801f964:	2100      	movs	r1, #0
 801f966:	4630      	mov	r0, r6
 801f968:	f001 f834 	bl	80209d4 <_sbrk_r>
 801f96c:	68ba      	ldr	r2, [r7, #8]
 801f96e:	1a83      	subs	r3, r0, r2
 801f970:	2b0f      	cmp	r3, #15
 801f972:	dde3      	ble.n	801f93c <_malloc_trim_r+0x34>
 801f974:	490c      	ldr	r1, [pc, #48]	; (801f9a8 <_malloc_trim_r+0xa0>)
 801f976:	6809      	ldr	r1, [r1, #0]
 801f978:	1a40      	subs	r0, r0, r1
 801f97a:	490c      	ldr	r1, [pc, #48]	; (801f9ac <_malloc_trim_r+0xa4>)
 801f97c:	f043 0301 	orr.w	r3, r3, #1
 801f980:	6008      	str	r0, [r1, #0]
 801f982:	6053      	str	r3, [r2, #4]
 801f984:	e7da      	b.n	801f93c <_malloc_trim_r+0x34>
 801f986:	68bb      	ldr	r3, [r7, #8]
 801f988:	4a08      	ldr	r2, [pc, #32]	; (801f9ac <_malloc_trim_r+0xa4>)
 801f98a:	1b2d      	subs	r5, r5, r4
 801f98c:	f045 0501 	orr.w	r5, r5, #1
 801f990:	605d      	str	r5, [r3, #4]
 801f992:	6813      	ldr	r3, [r2, #0]
 801f994:	4630      	mov	r0, r6
 801f996:	1b1c      	subs	r4, r3, r4
 801f998:	6014      	str	r4, [r2, #0]
 801f99a:	f000 fcad 	bl	80202f8 <__malloc_unlock>
 801f99e:	2001      	movs	r0, #1
 801f9a0:	e7d0      	b.n	801f944 <_malloc_trim_r+0x3c>
 801f9a2:	bf00      	nop
 801f9a4:	200004d0 	.word	0x200004d0
 801f9a8:	200008d8 	.word	0x200008d8
 801f9ac:	20005094 	.word	0x20005094

0801f9b0 <_free_r>:
 801f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9b2:	4605      	mov	r5, r0
 801f9b4:	460f      	mov	r7, r1
 801f9b6:	2900      	cmp	r1, #0
 801f9b8:	f000 80b1 	beq.w	801fb1e <_free_r+0x16e>
 801f9bc:	f000 fc96 	bl	80202ec <__malloc_lock>
 801f9c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801f9c4:	4856      	ldr	r0, [pc, #344]	; (801fb20 <_free_r+0x170>)
 801f9c6:	f022 0401 	bic.w	r4, r2, #1
 801f9ca:	f1a7 0308 	sub.w	r3, r7, #8
 801f9ce:	eb03 0c04 	add.w	ip, r3, r4
 801f9d2:	6881      	ldr	r1, [r0, #8]
 801f9d4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801f9d8:	4561      	cmp	r1, ip
 801f9da:	f026 0603 	bic.w	r6, r6, #3
 801f9de:	f002 0201 	and.w	r2, r2, #1
 801f9e2:	d11b      	bne.n	801fa1c <_free_r+0x6c>
 801f9e4:	4434      	add	r4, r6
 801f9e6:	b93a      	cbnz	r2, 801f9f8 <_free_r+0x48>
 801f9e8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801f9ec:	1a9b      	subs	r3, r3, r2
 801f9ee:	4414      	add	r4, r2
 801f9f0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801f9f4:	60ca      	str	r2, [r1, #12]
 801f9f6:	6091      	str	r1, [r2, #8]
 801f9f8:	f044 0201 	orr.w	r2, r4, #1
 801f9fc:	605a      	str	r2, [r3, #4]
 801f9fe:	6083      	str	r3, [r0, #8]
 801fa00:	4b48      	ldr	r3, [pc, #288]	; (801fb24 <_free_r+0x174>)
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	42a3      	cmp	r3, r4
 801fa06:	d804      	bhi.n	801fa12 <_free_r+0x62>
 801fa08:	4b47      	ldr	r3, [pc, #284]	; (801fb28 <_free_r+0x178>)
 801fa0a:	4628      	mov	r0, r5
 801fa0c:	6819      	ldr	r1, [r3, #0]
 801fa0e:	f7ff ff7b 	bl	801f908 <_malloc_trim_r>
 801fa12:	4628      	mov	r0, r5
 801fa14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fa18:	f000 bc6e 	b.w	80202f8 <__malloc_unlock>
 801fa1c:	f8cc 6004 	str.w	r6, [ip, #4]
 801fa20:	2a00      	cmp	r2, #0
 801fa22:	d138      	bne.n	801fa96 <_free_r+0xe6>
 801fa24:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801fa28:	1a5b      	subs	r3, r3, r1
 801fa2a:	440c      	add	r4, r1
 801fa2c:	6899      	ldr	r1, [r3, #8]
 801fa2e:	f100 0708 	add.w	r7, r0, #8
 801fa32:	42b9      	cmp	r1, r7
 801fa34:	d031      	beq.n	801fa9a <_free_r+0xea>
 801fa36:	68df      	ldr	r7, [r3, #12]
 801fa38:	60cf      	str	r7, [r1, #12]
 801fa3a:	60b9      	str	r1, [r7, #8]
 801fa3c:	eb0c 0106 	add.w	r1, ip, r6
 801fa40:	6849      	ldr	r1, [r1, #4]
 801fa42:	07c9      	lsls	r1, r1, #31
 801fa44:	d40b      	bmi.n	801fa5e <_free_r+0xae>
 801fa46:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801fa4a:	4434      	add	r4, r6
 801fa4c:	bb3a      	cbnz	r2, 801fa9e <_free_r+0xee>
 801fa4e:	4e37      	ldr	r6, [pc, #220]	; (801fb2c <_free_r+0x17c>)
 801fa50:	42b1      	cmp	r1, r6
 801fa52:	d124      	bne.n	801fa9e <_free_r+0xee>
 801fa54:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fa58:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801fa5c:	2201      	movs	r2, #1
 801fa5e:	f044 0101 	orr.w	r1, r4, #1
 801fa62:	6059      	str	r1, [r3, #4]
 801fa64:	511c      	str	r4, [r3, r4]
 801fa66:	2a00      	cmp	r2, #0
 801fa68:	d1d3      	bne.n	801fa12 <_free_r+0x62>
 801fa6a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801fa6e:	d21b      	bcs.n	801faa8 <_free_r+0xf8>
 801fa70:	0961      	lsrs	r1, r4, #5
 801fa72:	08e2      	lsrs	r2, r4, #3
 801fa74:	2401      	movs	r4, #1
 801fa76:	408c      	lsls	r4, r1
 801fa78:	6841      	ldr	r1, [r0, #4]
 801fa7a:	3201      	adds	r2, #1
 801fa7c:	430c      	orrs	r4, r1
 801fa7e:	6044      	str	r4, [r0, #4]
 801fa80:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801fa84:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801fa88:	3908      	subs	r1, #8
 801fa8a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801fa8e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801fa92:	60e3      	str	r3, [r4, #12]
 801fa94:	e7bd      	b.n	801fa12 <_free_r+0x62>
 801fa96:	2200      	movs	r2, #0
 801fa98:	e7d0      	b.n	801fa3c <_free_r+0x8c>
 801fa9a:	2201      	movs	r2, #1
 801fa9c:	e7ce      	b.n	801fa3c <_free_r+0x8c>
 801fa9e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801faa2:	60ce      	str	r6, [r1, #12]
 801faa4:	60b1      	str	r1, [r6, #8]
 801faa6:	e7da      	b.n	801fa5e <_free_r+0xae>
 801faa8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801faac:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801fab0:	d214      	bcs.n	801fadc <_free_r+0x12c>
 801fab2:	09a2      	lsrs	r2, r4, #6
 801fab4:	3238      	adds	r2, #56	; 0x38
 801fab6:	1c51      	adds	r1, r2, #1
 801fab8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801fabc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801fac0:	428e      	cmp	r6, r1
 801fac2:	d125      	bne.n	801fb10 <_free_r+0x160>
 801fac4:	2401      	movs	r4, #1
 801fac6:	1092      	asrs	r2, r2, #2
 801fac8:	fa04 f202 	lsl.w	r2, r4, r2
 801facc:	6844      	ldr	r4, [r0, #4]
 801face:	4322      	orrs	r2, r4
 801fad0:	6042      	str	r2, [r0, #4]
 801fad2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801fad6:	60b3      	str	r3, [r6, #8]
 801fad8:	60cb      	str	r3, [r1, #12]
 801fada:	e79a      	b.n	801fa12 <_free_r+0x62>
 801fadc:	2a14      	cmp	r2, #20
 801fade:	d801      	bhi.n	801fae4 <_free_r+0x134>
 801fae0:	325b      	adds	r2, #91	; 0x5b
 801fae2:	e7e8      	b.n	801fab6 <_free_r+0x106>
 801fae4:	2a54      	cmp	r2, #84	; 0x54
 801fae6:	d802      	bhi.n	801faee <_free_r+0x13e>
 801fae8:	0b22      	lsrs	r2, r4, #12
 801faea:	326e      	adds	r2, #110	; 0x6e
 801faec:	e7e3      	b.n	801fab6 <_free_r+0x106>
 801faee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801faf2:	d802      	bhi.n	801fafa <_free_r+0x14a>
 801faf4:	0be2      	lsrs	r2, r4, #15
 801faf6:	3277      	adds	r2, #119	; 0x77
 801faf8:	e7dd      	b.n	801fab6 <_free_r+0x106>
 801fafa:	f240 5154 	movw	r1, #1364	; 0x554
 801fafe:	428a      	cmp	r2, r1
 801fb00:	bf9a      	itte	ls
 801fb02:	0ca2      	lsrls	r2, r4, #18
 801fb04:	327c      	addls	r2, #124	; 0x7c
 801fb06:	227e      	movhi	r2, #126	; 0x7e
 801fb08:	e7d5      	b.n	801fab6 <_free_r+0x106>
 801fb0a:	6889      	ldr	r1, [r1, #8]
 801fb0c:	428e      	cmp	r6, r1
 801fb0e:	d004      	beq.n	801fb1a <_free_r+0x16a>
 801fb10:	684a      	ldr	r2, [r1, #4]
 801fb12:	f022 0203 	bic.w	r2, r2, #3
 801fb16:	42a2      	cmp	r2, r4
 801fb18:	d8f7      	bhi.n	801fb0a <_free_r+0x15a>
 801fb1a:	68ce      	ldr	r6, [r1, #12]
 801fb1c:	e7d9      	b.n	801fad2 <_free_r+0x122>
 801fb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb20:	200004d0 	.word	0x200004d0
 801fb24:	200008dc 	.word	0x200008dc
 801fb28:	200050c4 	.word	0x200050c4
 801fb2c:	200004d8 	.word	0x200004d8

0801fb30 <_fwalk_reent>:
 801fb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb34:	4606      	mov	r6, r0
 801fb36:	4688      	mov	r8, r1
 801fb38:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801fb3c:	2700      	movs	r7, #0
 801fb3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fb42:	f1b9 0901 	subs.w	r9, r9, #1
 801fb46:	d505      	bpl.n	801fb54 <_fwalk_reent+0x24>
 801fb48:	6824      	ldr	r4, [r4, #0]
 801fb4a:	2c00      	cmp	r4, #0
 801fb4c:	d1f7      	bne.n	801fb3e <_fwalk_reent+0xe>
 801fb4e:	4638      	mov	r0, r7
 801fb50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb54:	89ab      	ldrh	r3, [r5, #12]
 801fb56:	2b01      	cmp	r3, #1
 801fb58:	d907      	bls.n	801fb6a <_fwalk_reent+0x3a>
 801fb5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fb5e:	3301      	adds	r3, #1
 801fb60:	d003      	beq.n	801fb6a <_fwalk_reent+0x3a>
 801fb62:	4629      	mov	r1, r5
 801fb64:	4630      	mov	r0, r6
 801fb66:	47c0      	blx	r8
 801fb68:	4307      	orrs	r7, r0
 801fb6a:	3568      	adds	r5, #104	; 0x68
 801fb6c:	e7e9      	b.n	801fb42 <_fwalk_reent+0x12>
	...

0801fb70 <_findenv_r>:
 801fb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb74:	4607      	mov	r7, r0
 801fb76:	4689      	mov	r9, r1
 801fb78:	4616      	mov	r6, r2
 801fb7a:	f002 fedf 	bl	802293c <__env_lock>
 801fb7e:	4b18      	ldr	r3, [pc, #96]	; (801fbe0 <_findenv_r+0x70>)
 801fb80:	681c      	ldr	r4, [r3, #0]
 801fb82:	469a      	mov	sl, r3
 801fb84:	b134      	cbz	r4, 801fb94 <_findenv_r+0x24>
 801fb86:	464b      	mov	r3, r9
 801fb88:	4698      	mov	r8, r3
 801fb8a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801fb8e:	b139      	cbz	r1, 801fba0 <_findenv_r+0x30>
 801fb90:	293d      	cmp	r1, #61	; 0x3d
 801fb92:	d1f9      	bne.n	801fb88 <_findenv_r+0x18>
 801fb94:	4638      	mov	r0, r7
 801fb96:	f002 fed7 	bl	8022948 <__env_unlock>
 801fb9a:	2000      	movs	r0, #0
 801fb9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fba0:	eba8 0809 	sub.w	r8, r8, r9
 801fba4:	46a3      	mov	fp, r4
 801fba6:	f854 0b04 	ldr.w	r0, [r4], #4
 801fbaa:	2800      	cmp	r0, #0
 801fbac:	d0f2      	beq.n	801fb94 <_findenv_r+0x24>
 801fbae:	4642      	mov	r2, r8
 801fbb0:	4649      	mov	r1, r9
 801fbb2:	f7fb ff4c 	bl	801ba4e <strncmp>
 801fbb6:	2800      	cmp	r0, #0
 801fbb8:	d1f4      	bne.n	801fba4 <_findenv_r+0x34>
 801fbba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801fbbe:	eb03 0508 	add.w	r5, r3, r8
 801fbc2:	f813 3008 	ldrb.w	r3, [r3, r8]
 801fbc6:	2b3d      	cmp	r3, #61	; 0x3d
 801fbc8:	d1ec      	bne.n	801fba4 <_findenv_r+0x34>
 801fbca:	f8da 3000 	ldr.w	r3, [sl]
 801fbce:	ebab 0303 	sub.w	r3, fp, r3
 801fbd2:	109b      	asrs	r3, r3, #2
 801fbd4:	4638      	mov	r0, r7
 801fbd6:	6033      	str	r3, [r6, #0]
 801fbd8:	f002 feb6 	bl	8022948 <__env_unlock>
 801fbdc:	1c68      	adds	r0, r5, #1
 801fbde:	e7dd      	b.n	801fb9c <_findenv_r+0x2c>
 801fbe0:	20000018 	.word	0x20000018

0801fbe4 <_getenv_r>:
 801fbe4:	b507      	push	{r0, r1, r2, lr}
 801fbe6:	aa01      	add	r2, sp, #4
 801fbe8:	f7ff ffc2 	bl	801fb70 <_findenv_r>
 801fbec:	b003      	add	sp, #12
 801fbee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801fbf4 <__gettzinfo>:
 801fbf4:	4800      	ldr	r0, [pc, #0]	; (801fbf8 <__gettzinfo+0x4>)
 801fbf6:	4770      	bx	lr
 801fbf8:	20000478 	.word	0x20000478

0801fbfc <gmtime_r>:
 801fbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc00:	e9d0 6700 	ldrd	r6, r7, [r0]
 801fc04:	460c      	mov	r4, r1
 801fc06:	4a51      	ldr	r2, [pc, #324]	; (801fd4c <gmtime_r+0x150>)
 801fc08:	2300      	movs	r3, #0
 801fc0a:	4630      	mov	r0, r6
 801fc0c:	4639      	mov	r1, r7
 801fc0e:	f7e0 fffb 	bl	8000c08 <__aeabi_ldivmod>
 801fc12:	4639      	mov	r1, r7
 801fc14:	4605      	mov	r5, r0
 801fc16:	4a4d      	ldr	r2, [pc, #308]	; (801fd4c <gmtime_r+0x150>)
 801fc18:	4630      	mov	r0, r6
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	f7e0 fff4 	bl	8000c08 <__aeabi_ldivmod>
 801fc20:	2a00      	cmp	r2, #0
 801fc22:	bfbc      	itt	lt
 801fc24:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801fc28:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801fc2c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fc30:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801fc34:	fbb2 f3f1 	udiv	r3, r2, r1
 801fc38:	fb01 2213 	mls	r2, r1, r3, r2
 801fc3c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801fc40:	bfac      	ite	ge
 801fc42:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801fc46:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801fc4a:	60a3      	str	r3, [r4, #8]
 801fc4c:	fbb2 f3f1 	udiv	r3, r2, r1
 801fc50:	fb01 2213 	mls	r2, r1, r3, r2
 801fc54:	6063      	str	r3, [r4, #4]
 801fc56:	6022      	str	r2, [r4, #0]
 801fc58:	1cc3      	adds	r3, r0, #3
 801fc5a:	2207      	movs	r2, #7
 801fc5c:	fb93 f2f2 	sdiv	r2, r3, r2
 801fc60:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801fc64:	1a9b      	subs	r3, r3, r2
 801fc66:	bf48      	it	mi
 801fc68:	3307      	addmi	r3, #7
 801fc6a:	2800      	cmp	r0, #0
 801fc6c:	61a3      	str	r3, [r4, #24]
 801fc6e:	bfb8      	it	lt
 801fc70:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801fc74:	4936      	ldr	r1, [pc, #216]	; (801fd50 <gmtime_r+0x154>)
 801fc76:	bfae      	itee	ge
 801fc78:	fb90 f1f1 	sdivge	r1, r0, r1
 801fc7c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801fc80:	fb93 f1f1 	sdivlt	r1, r3, r1
 801fc84:	4b33      	ldr	r3, [pc, #204]	; (801fd54 <gmtime_r+0x158>)
 801fc86:	fb03 0001 	mla	r0, r3, r1, r0
 801fc8a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801fc8e:	fbb0 f2f2 	udiv	r2, r0, r2
 801fc92:	4402      	add	r2, r0
 801fc94:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801fc98:	fbb0 f3fc 	udiv	r3, r0, ip
 801fc9c:	1ad2      	subs	r2, r2, r3
 801fc9e:	f240 176d 	movw	r7, #365	; 0x16d
 801fca2:	4b2d      	ldr	r3, [pc, #180]	; (801fd58 <gmtime_r+0x15c>)
 801fca4:	fbb0 f3f3 	udiv	r3, r0, r3
 801fca8:	2664      	movs	r6, #100	; 0x64
 801fcaa:	1ad3      	subs	r3, r2, r3
 801fcac:	fbb3 f5f7 	udiv	r5, r3, r7
 801fcb0:	fbb3 f3fc 	udiv	r3, r3, ip
 801fcb4:	fbb5 f2f6 	udiv	r2, r5, r6
 801fcb8:	1ad3      	subs	r3, r2, r3
 801fcba:	4403      	add	r3, r0
 801fcbc:	fb07 3315 	mls	r3, r7, r5, r3
 801fcc0:	2099      	movs	r0, #153	; 0x99
 801fcc2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801fcc6:	f10c 0c02 	add.w	ip, ip, #2
 801fcca:	f103 0e01 	add.w	lr, r3, #1
 801fcce:	fbbc f7f0 	udiv	r7, ip, r0
 801fcd2:	4378      	muls	r0, r7
 801fcd4:	3002      	adds	r0, #2
 801fcd6:	f04f 0805 	mov.w	r8, #5
 801fcda:	fbb0 f0f8 	udiv	r0, r0, r8
 801fcde:	ebae 0000 	sub.w	r0, lr, r0
 801fce2:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801fce6:	45f4      	cmp	ip, lr
 801fce8:	bf94      	ite	ls
 801fcea:	f04f 0c02 	movls.w	ip, #2
 801fcee:	f06f 0c09 	mvnhi.w	ip, #9
 801fcf2:	4467      	add	r7, ip
 801fcf4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801fcf8:	fb0c 5101 	mla	r1, ip, r1, r5
 801fcfc:	2f01      	cmp	r7, #1
 801fcfe:	bf98      	it	ls
 801fd00:	3101      	addls	r1, #1
 801fd02:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801fd06:	d30c      	bcc.n	801fd22 <gmtime_r+0x126>
 801fd08:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801fd0c:	61e3      	str	r3, [r4, #28]
 801fd0e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801fd12:	2300      	movs	r3, #0
 801fd14:	60e0      	str	r0, [r4, #12]
 801fd16:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801fd1a:	6223      	str	r3, [r4, #32]
 801fd1c:	4620      	mov	r0, r4
 801fd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd22:	f015 0f03 	tst.w	r5, #3
 801fd26:	d102      	bne.n	801fd2e <gmtime_r+0x132>
 801fd28:	fb06 5212 	mls	r2, r6, r2, r5
 801fd2c:	b95a      	cbnz	r2, 801fd46 <gmtime_r+0x14a>
 801fd2e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801fd32:	fbb5 f2f6 	udiv	r2, r5, r6
 801fd36:	fb06 5212 	mls	r2, r6, r2, r5
 801fd3a:	fab2 f282 	clz	r2, r2
 801fd3e:	0952      	lsrs	r2, r2, #5
 801fd40:	333b      	adds	r3, #59	; 0x3b
 801fd42:	4413      	add	r3, r2
 801fd44:	e7e2      	b.n	801fd0c <gmtime_r+0x110>
 801fd46:	2201      	movs	r2, #1
 801fd48:	e7fa      	b.n	801fd40 <gmtime_r+0x144>
 801fd4a:	bf00      	nop
 801fd4c:	00015180 	.word	0x00015180
 801fd50:	00023ab1 	.word	0x00023ab1
 801fd54:	fffdc54f 	.word	0xfffdc54f
 801fd58:	00023ab0 	.word	0x00023ab0

0801fd5c <_localeconv_r>:
 801fd5c:	4800      	ldr	r0, [pc, #0]	; (801fd60 <_localeconv_r+0x4>)
 801fd5e:	4770      	bx	lr
 801fd60:	200009d0 	.word	0x200009d0

0801fd64 <__retarget_lock_init_recursive>:
 801fd64:	4770      	bx	lr

0801fd66 <__retarget_lock_close_recursive>:
 801fd66:	4770      	bx	lr

0801fd68 <__retarget_lock_acquire>:
 801fd68:	4770      	bx	lr

0801fd6a <__retarget_lock_acquire_recursive>:
 801fd6a:	4770      	bx	lr

0801fd6c <__retarget_lock_release>:
 801fd6c:	4770      	bx	lr

0801fd6e <__retarget_lock_release_recursive>:
 801fd6e:	4770      	bx	lr

0801fd70 <__swhatbuf_r>:
 801fd70:	b570      	push	{r4, r5, r6, lr}
 801fd72:	460e      	mov	r6, r1
 801fd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd78:	2900      	cmp	r1, #0
 801fd7a:	b096      	sub	sp, #88	; 0x58
 801fd7c:	4614      	mov	r4, r2
 801fd7e:	461d      	mov	r5, r3
 801fd80:	da09      	bge.n	801fd96 <__swhatbuf_r+0x26>
 801fd82:	89b3      	ldrh	r3, [r6, #12]
 801fd84:	2200      	movs	r2, #0
 801fd86:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801fd8a:	602a      	str	r2, [r5, #0]
 801fd8c:	d116      	bne.n	801fdbc <__swhatbuf_r+0x4c>
 801fd8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fd92:	6023      	str	r3, [r4, #0]
 801fd94:	e015      	b.n	801fdc2 <__swhatbuf_r+0x52>
 801fd96:	466a      	mov	r2, sp
 801fd98:	f002 feb2 	bl	8022b00 <_fstat_r>
 801fd9c:	2800      	cmp	r0, #0
 801fd9e:	dbf0      	blt.n	801fd82 <__swhatbuf_r+0x12>
 801fda0:	9a01      	ldr	r2, [sp, #4]
 801fda2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fda6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fdaa:	425a      	negs	r2, r3
 801fdac:	415a      	adcs	r2, r3
 801fdae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fdb2:	602a      	str	r2, [r5, #0]
 801fdb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801fdb8:	6023      	str	r3, [r4, #0]
 801fdba:	e002      	b.n	801fdc2 <__swhatbuf_r+0x52>
 801fdbc:	2340      	movs	r3, #64	; 0x40
 801fdbe:	6023      	str	r3, [r4, #0]
 801fdc0:	4610      	mov	r0, r2
 801fdc2:	b016      	add	sp, #88	; 0x58
 801fdc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801fdc8 <__smakebuf_r>:
 801fdc8:	898b      	ldrh	r3, [r1, #12]
 801fdca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fdcc:	079d      	lsls	r5, r3, #30
 801fdce:	4606      	mov	r6, r0
 801fdd0:	460c      	mov	r4, r1
 801fdd2:	d507      	bpl.n	801fde4 <__smakebuf_r+0x1c>
 801fdd4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801fdd8:	6023      	str	r3, [r4, #0]
 801fdda:	6123      	str	r3, [r4, #16]
 801fddc:	2301      	movs	r3, #1
 801fdde:	6163      	str	r3, [r4, #20]
 801fde0:	b002      	add	sp, #8
 801fde2:	bd70      	pop	{r4, r5, r6, pc}
 801fde4:	ab01      	add	r3, sp, #4
 801fde6:	466a      	mov	r2, sp
 801fde8:	f7ff ffc2 	bl	801fd70 <__swhatbuf_r>
 801fdec:	9900      	ldr	r1, [sp, #0]
 801fdee:	4605      	mov	r5, r0
 801fdf0:	4630      	mov	r0, r6
 801fdf2:	f000 f839 	bl	801fe68 <_malloc_r>
 801fdf6:	b948      	cbnz	r0, 801fe0c <__smakebuf_r+0x44>
 801fdf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fdfc:	059a      	lsls	r2, r3, #22
 801fdfe:	d4ef      	bmi.n	801fde0 <__smakebuf_r+0x18>
 801fe00:	f023 0303 	bic.w	r3, r3, #3
 801fe04:	f043 0302 	orr.w	r3, r3, #2
 801fe08:	81a3      	strh	r3, [r4, #12]
 801fe0a:	e7e3      	b.n	801fdd4 <__smakebuf_r+0xc>
 801fe0c:	4b0d      	ldr	r3, [pc, #52]	; (801fe44 <__smakebuf_r+0x7c>)
 801fe0e:	63f3      	str	r3, [r6, #60]	; 0x3c
 801fe10:	89a3      	ldrh	r3, [r4, #12]
 801fe12:	6020      	str	r0, [r4, #0]
 801fe14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fe18:	81a3      	strh	r3, [r4, #12]
 801fe1a:	9b00      	ldr	r3, [sp, #0]
 801fe1c:	6163      	str	r3, [r4, #20]
 801fe1e:	9b01      	ldr	r3, [sp, #4]
 801fe20:	6120      	str	r0, [r4, #16]
 801fe22:	b15b      	cbz	r3, 801fe3c <__smakebuf_r+0x74>
 801fe24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fe28:	4630      	mov	r0, r6
 801fe2a:	f002 ffc5 	bl	8022db8 <_isatty_r>
 801fe2e:	b128      	cbz	r0, 801fe3c <__smakebuf_r+0x74>
 801fe30:	89a3      	ldrh	r3, [r4, #12]
 801fe32:	f023 0303 	bic.w	r3, r3, #3
 801fe36:	f043 0301 	orr.w	r3, r3, #1
 801fe3a:	81a3      	strh	r3, [r4, #12]
 801fe3c:	89a0      	ldrh	r0, [r4, #12]
 801fe3e:	4305      	orrs	r5, r0
 801fe40:	81a5      	strh	r5, [r4, #12]
 801fe42:	e7cd      	b.n	801fde0 <__smakebuf_r+0x18>
 801fe44:	0801f855 	.word	0x0801f855

0801fe48 <malloc>:
 801fe48:	4b02      	ldr	r3, [pc, #8]	; (801fe54 <malloc+0xc>)
 801fe4a:	4601      	mov	r1, r0
 801fe4c:	6818      	ldr	r0, [r3, #0]
 801fe4e:	f000 b80b 	b.w	801fe68 <_malloc_r>
 801fe52:	bf00      	nop
 801fe54:	20000038 	.word	0x20000038

0801fe58 <free>:
 801fe58:	4b02      	ldr	r3, [pc, #8]	; (801fe64 <free+0xc>)
 801fe5a:	4601      	mov	r1, r0
 801fe5c:	6818      	ldr	r0, [r3, #0]
 801fe5e:	f7ff bda7 	b.w	801f9b0 <_free_r>
 801fe62:	bf00      	nop
 801fe64:	20000038 	.word	0x20000038

0801fe68 <_malloc_r>:
 801fe68:	f101 030b 	add.w	r3, r1, #11
 801fe6c:	2b16      	cmp	r3, #22
 801fe6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe72:	4605      	mov	r5, r0
 801fe74:	d906      	bls.n	801fe84 <_malloc_r+0x1c>
 801fe76:	f033 0707 	bics.w	r7, r3, #7
 801fe7a:	d504      	bpl.n	801fe86 <_malloc_r+0x1e>
 801fe7c:	230c      	movs	r3, #12
 801fe7e:	602b      	str	r3, [r5, #0]
 801fe80:	2400      	movs	r4, #0
 801fe82:	e1ae      	b.n	80201e2 <_malloc_r+0x37a>
 801fe84:	2710      	movs	r7, #16
 801fe86:	42b9      	cmp	r1, r7
 801fe88:	d8f8      	bhi.n	801fe7c <_malloc_r+0x14>
 801fe8a:	4628      	mov	r0, r5
 801fe8c:	f000 fa2e 	bl	80202ec <__malloc_lock>
 801fe90:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801fe94:	4ec3      	ldr	r6, [pc, #780]	; (80201a4 <_malloc_r+0x33c>)
 801fe96:	d238      	bcs.n	801ff0a <_malloc_r+0xa2>
 801fe98:	f107 0208 	add.w	r2, r7, #8
 801fe9c:	4432      	add	r2, r6
 801fe9e:	f1a2 0108 	sub.w	r1, r2, #8
 801fea2:	6854      	ldr	r4, [r2, #4]
 801fea4:	428c      	cmp	r4, r1
 801fea6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801feaa:	d102      	bne.n	801feb2 <_malloc_r+0x4a>
 801feac:	68d4      	ldr	r4, [r2, #12]
 801feae:	42a2      	cmp	r2, r4
 801feb0:	d010      	beq.n	801fed4 <_malloc_r+0x6c>
 801feb2:	6863      	ldr	r3, [r4, #4]
 801feb4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801feb8:	f023 0303 	bic.w	r3, r3, #3
 801febc:	60ca      	str	r2, [r1, #12]
 801febe:	4423      	add	r3, r4
 801fec0:	6091      	str	r1, [r2, #8]
 801fec2:	685a      	ldr	r2, [r3, #4]
 801fec4:	f042 0201 	orr.w	r2, r2, #1
 801fec8:	605a      	str	r2, [r3, #4]
 801feca:	4628      	mov	r0, r5
 801fecc:	f000 fa14 	bl	80202f8 <__malloc_unlock>
 801fed0:	3408      	adds	r4, #8
 801fed2:	e186      	b.n	80201e2 <_malloc_r+0x37a>
 801fed4:	3302      	adds	r3, #2
 801fed6:	4ab4      	ldr	r2, [pc, #720]	; (80201a8 <_malloc_r+0x340>)
 801fed8:	6934      	ldr	r4, [r6, #16]
 801feda:	4294      	cmp	r4, r2
 801fedc:	4611      	mov	r1, r2
 801fede:	d077      	beq.n	801ffd0 <_malloc_r+0x168>
 801fee0:	6860      	ldr	r0, [r4, #4]
 801fee2:	f020 0c03 	bic.w	ip, r0, #3
 801fee6:	ebac 0007 	sub.w	r0, ip, r7
 801feea:	280f      	cmp	r0, #15
 801feec:	dd48      	ble.n	801ff80 <_malloc_r+0x118>
 801feee:	19e1      	adds	r1, r4, r7
 801fef0:	f040 0301 	orr.w	r3, r0, #1
 801fef4:	f047 0701 	orr.w	r7, r7, #1
 801fef8:	6067      	str	r7, [r4, #4]
 801fefa:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801fefe:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801ff02:	604b      	str	r3, [r1, #4]
 801ff04:	f844 000c 	str.w	r0, [r4, ip]
 801ff08:	e7df      	b.n	801feca <_malloc_r+0x62>
 801ff0a:	0a7b      	lsrs	r3, r7, #9
 801ff0c:	d02a      	beq.n	801ff64 <_malloc_r+0xfc>
 801ff0e:	2b04      	cmp	r3, #4
 801ff10:	d812      	bhi.n	801ff38 <_malloc_r+0xd0>
 801ff12:	09bb      	lsrs	r3, r7, #6
 801ff14:	3338      	adds	r3, #56	; 0x38
 801ff16:	1c5a      	adds	r2, r3, #1
 801ff18:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801ff1c:	f1a2 0c08 	sub.w	ip, r2, #8
 801ff20:	6854      	ldr	r4, [r2, #4]
 801ff22:	4564      	cmp	r4, ip
 801ff24:	d006      	beq.n	801ff34 <_malloc_r+0xcc>
 801ff26:	6862      	ldr	r2, [r4, #4]
 801ff28:	f022 0203 	bic.w	r2, r2, #3
 801ff2c:	1bd0      	subs	r0, r2, r7
 801ff2e:	280f      	cmp	r0, #15
 801ff30:	dd1c      	ble.n	801ff6c <_malloc_r+0x104>
 801ff32:	3b01      	subs	r3, #1
 801ff34:	3301      	adds	r3, #1
 801ff36:	e7ce      	b.n	801fed6 <_malloc_r+0x6e>
 801ff38:	2b14      	cmp	r3, #20
 801ff3a:	d801      	bhi.n	801ff40 <_malloc_r+0xd8>
 801ff3c:	335b      	adds	r3, #91	; 0x5b
 801ff3e:	e7ea      	b.n	801ff16 <_malloc_r+0xae>
 801ff40:	2b54      	cmp	r3, #84	; 0x54
 801ff42:	d802      	bhi.n	801ff4a <_malloc_r+0xe2>
 801ff44:	0b3b      	lsrs	r3, r7, #12
 801ff46:	336e      	adds	r3, #110	; 0x6e
 801ff48:	e7e5      	b.n	801ff16 <_malloc_r+0xae>
 801ff4a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801ff4e:	d802      	bhi.n	801ff56 <_malloc_r+0xee>
 801ff50:	0bfb      	lsrs	r3, r7, #15
 801ff52:	3377      	adds	r3, #119	; 0x77
 801ff54:	e7df      	b.n	801ff16 <_malloc_r+0xae>
 801ff56:	f240 5254 	movw	r2, #1364	; 0x554
 801ff5a:	4293      	cmp	r3, r2
 801ff5c:	d804      	bhi.n	801ff68 <_malloc_r+0x100>
 801ff5e:	0cbb      	lsrs	r3, r7, #18
 801ff60:	337c      	adds	r3, #124	; 0x7c
 801ff62:	e7d8      	b.n	801ff16 <_malloc_r+0xae>
 801ff64:	233f      	movs	r3, #63	; 0x3f
 801ff66:	e7d6      	b.n	801ff16 <_malloc_r+0xae>
 801ff68:	237e      	movs	r3, #126	; 0x7e
 801ff6a:	e7d4      	b.n	801ff16 <_malloc_r+0xae>
 801ff6c:	2800      	cmp	r0, #0
 801ff6e:	68e1      	ldr	r1, [r4, #12]
 801ff70:	db04      	blt.n	801ff7c <_malloc_r+0x114>
 801ff72:	68a3      	ldr	r3, [r4, #8]
 801ff74:	60d9      	str	r1, [r3, #12]
 801ff76:	608b      	str	r3, [r1, #8]
 801ff78:	18a3      	adds	r3, r4, r2
 801ff7a:	e7a2      	b.n	801fec2 <_malloc_r+0x5a>
 801ff7c:	460c      	mov	r4, r1
 801ff7e:	e7d0      	b.n	801ff22 <_malloc_r+0xba>
 801ff80:	2800      	cmp	r0, #0
 801ff82:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801ff86:	db07      	blt.n	801ff98 <_malloc_r+0x130>
 801ff88:	44a4      	add	ip, r4
 801ff8a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ff8e:	f043 0301 	orr.w	r3, r3, #1
 801ff92:	f8cc 3004 	str.w	r3, [ip, #4]
 801ff96:	e798      	b.n	801feca <_malloc_r+0x62>
 801ff98:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801ff9c:	6870      	ldr	r0, [r6, #4]
 801ff9e:	f080 809e 	bcs.w	80200de <_malloc_r+0x276>
 801ffa2:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801ffa6:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801ffaa:	f04f 0c01 	mov.w	ip, #1
 801ffae:	3201      	adds	r2, #1
 801ffb0:	fa0c fc0e 	lsl.w	ip, ip, lr
 801ffb4:	ea4c 0000 	orr.w	r0, ip, r0
 801ffb8:	6070      	str	r0, [r6, #4]
 801ffba:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801ffbe:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801ffc2:	3808      	subs	r0, #8
 801ffc4:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801ffc8:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801ffcc:	f8cc 400c 	str.w	r4, [ip, #12]
 801ffd0:	2001      	movs	r0, #1
 801ffd2:	109a      	asrs	r2, r3, #2
 801ffd4:	fa00 f202 	lsl.w	r2, r0, r2
 801ffd8:	6870      	ldr	r0, [r6, #4]
 801ffda:	4290      	cmp	r0, r2
 801ffdc:	d326      	bcc.n	802002c <_malloc_r+0x1c4>
 801ffde:	4210      	tst	r0, r2
 801ffe0:	d106      	bne.n	801fff0 <_malloc_r+0x188>
 801ffe2:	f023 0303 	bic.w	r3, r3, #3
 801ffe6:	0052      	lsls	r2, r2, #1
 801ffe8:	4210      	tst	r0, r2
 801ffea:	f103 0304 	add.w	r3, r3, #4
 801ffee:	d0fa      	beq.n	801ffe6 <_malloc_r+0x17e>
 801fff0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801fff4:	46c1      	mov	r9, r8
 801fff6:	469e      	mov	lr, r3
 801fff8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801fffc:	454c      	cmp	r4, r9
 801fffe:	f040 80b3 	bne.w	8020168 <_malloc_r+0x300>
 8020002:	f10e 0e01 	add.w	lr, lr, #1
 8020006:	f01e 0f03 	tst.w	lr, #3
 802000a:	f109 0908 	add.w	r9, r9, #8
 802000e:	d1f3      	bne.n	801fff8 <_malloc_r+0x190>
 8020010:	0798      	lsls	r0, r3, #30
 8020012:	f040 80ec 	bne.w	80201ee <_malloc_r+0x386>
 8020016:	6873      	ldr	r3, [r6, #4]
 8020018:	ea23 0302 	bic.w	r3, r3, r2
 802001c:	6073      	str	r3, [r6, #4]
 802001e:	6870      	ldr	r0, [r6, #4]
 8020020:	0052      	lsls	r2, r2, #1
 8020022:	4290      	cmp	r0, r2
 8020024:	d302      	bcc.n	802002c <_malloc_r+0x1c4>
 8020026:	2a00      	cmp	r2, #0
 8020028:	f040 80ee 	bne.w	8020208 <_malloc_r+0x3a0>
 802002c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8020030:	f8db 1004 	ldr.w	r1, [fp, #4]
 8020034:	f021 0903 	bic.w	r9, r1, #3
 8020038:	45b9      	cmp	r9, r7
 802003a:	d304      	bcc.n	8020046 <_malloc_r+0x1de>
 802003c:	eba9 0207 	sub.w	r2, r9, r7
 8020040:	2a0f      	cmp	r2, #15
 8020042:	f300 8149 	bgt.w	80202d8 <_malloc_r+0x470>
 8020046:	4a59      	ldr	r2, [pc, #356]	; (80201ac <_malloc_r+0x344>)
 8020048:	6811      	ldr	r1, [r2, #0]
 802004a:	3110      	adds	r1, #16
 802004c:	eb0b 0309 	add.w	r3, fp, r9
 8020050:	4439      	add	r1, r7
 8020052:	2008      	movs	r0, #8
 8020054:	9301      	str	r3, [sp, #4]
 8020056:	9100      	str	r1, [sp, #0]
 8020058:	f001 fe80 	bl	8021d5c <sysconf>
 802005c:	4a54      	ldr	r2, [pc, #336]	; (80201b0 <_malloc_r+0x348>)
 802005e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8020062:	4680      	mov	r8, r0
 8020064:	6810      	ldr	r0, [r2, #0]
 8020066:	3001      	adds	r0, #1
 8020068:	bf1f      	itttt	ne
 802006a:	f101 31ff 	addne.w	r1, r1, #4294967295
 802006e:	4441      	addne	r1, r8
 8020070:	f1c8 0000 	rsbne	r0, r8, #0
 8020074:	4001      	andne	r1, r0
 8020076:	4628      	mov	r0, r5
 8020078:	e9cd 1300 	strd	r1, r3, [sp]
 802007c:	f000 fcaa 	bl	80209d4 <_sbrk_r>
 8020080:	1c42      	adds	r2, r0, #1
 8020082:	4604      	mov	r4, r0
 8020084:	f000 80fc 	beq.w	8020280 <_malloc_r+0x418>
 8020088:	9b01      	ldr	r3, [sp, #4]
 802008a:	9900      	ldr	r1, [sp, #0]
 802008c:	4a48      	ldr	r2, [pc, #288]	; (80201b0 <_malloc_r+0x348>)
 802008e:	4283      	cmp	r3, r0
 8020090:	d902      	bls.n	8020098 <_malloc_r+0x230>
 8020092:	45b3      	cmp	fp, r6
 8020094:	f040 80f4 	bne.w	8020280 <_malloc_r+0x418>
 8020098:	f8df a120 	ldr.w	sl, [pc, #288]	; 80201bc <_malloc_r+0x354>
 802009c:	f8da 0000 	ldr.w	r0, [sl]
 80200a0:	42a3      	cmp	r3, r4
 80200a2:	eb00 0e01 	add.w	lr, r0, r1
 80200a6:	f8ca e000 	str.w	lr, [sl]
 80200aa:	f108 3cff 	add.w	ip, r8, #4294967295
 80200ae:	f040 80ad 	bne.w	802020c <_malloc_r+0x3a4>
 80200b2:	ea13 0f0c 	tst.w	r3, ip
 80200b6:	f040 80a9 	bne.w	802020c <_malloc_r+0x3a4>
 80200ba:	68b3      	ldr	r3, [r6, #8]
 80200bc:	4449      	add	r1, r9
 80200be:	f041 0101 	orr.w	r1, r1, #1
 80200c2:	6059      	str	r1, [r3, #4]
 80200c4:	4a3b      	ldr	r2, [pc, #236]	; (80201b4 <_malloc_r+0x34c>)
 80200c6:	f8da 3000 	ldr.w	r3, [sl]
 80200ca:	6811      	ldr	r1, [r2, #0]
 80200cc:	428b      	cmp	r3, r1
 80200ce:	bf88      	it	hi
 80200d0:	6013      	strhi	r3, [r2, #0]
 80200d2:	4a39      	ldr	r2, [pc, #228]	; (80201b8 <_malloc_r+0x350>)
 80200d4:	6811      	ldr	r1, [r2, #0]
 80200d6:	428b      	cmp	r3, r1
 80200d8:	bf88      	it	hi
 80200da:	6013      	strhi	r3, [r2, #0]
 80200dc:	e0d0      	b.n	8020280 <_malloc_r+0x418>
 80200de:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80200e2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80200e6:	d218      	bcs.n	802011a <_malloc_r+0x2b2>
 80200e8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80200ec:	3238      	adds	r2, #56	; 0x38
 80200ee:	f102 0e01 	add.w	lr, r2, #1
 80200f2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80200f6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80200fa:	45f0      	cmp	r8, lr
 80200fc:	d12b      	bne.n	8020156 <_malloc_r+0x2ee>
 80200fe:	1092      	asrs	r2, r2, #2
 8020100:	f04f 0c01 	mov.w	ip, #1
 8020104:	fa0c f202 	lsl.w	r2, ip, r2
 8020108:	4310      	orrs	r0, r2
 802010a:	6070      	str	r0, [r6, #4]
 802010c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8020110:	f8c8 4008 	str.w	r4, [r8, #8]
 8020114:	f8ce 400c 	str.w	r4, [lr, #12]
 8020118:	e75a      	b.n	801ffd0 <_malloc_r+0x168>
 802011a:	2a14      	cmp	r2, #20
 802011c:	d801      	bhi.n	8020122 <_malloc_r+0x2ba>
 802011e:	325b      	adds	r2, #91	; 0x5b
 8020120:	e7e5      	b.n	80200ee <_malloc_r+0x286>
 8020122:	2a54      	cmp	r2, #84	; 0x54
 8020124:	d803      	bhi.n	802012e <_malloc_r+0x2c6>
 8020126:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802012a:	326e      	adds	r2, #110	; 0x6e
 802012c:	e7df      	b.n	80200ee <_malloc_r+0x286>
 802012e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8020132:	d803      	bhi.n	802013c <_malloc_r+0x2d4>
 8020134:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8020138:	3277      	adds	r2, #119	; 0x77
 802013a:	e7d8      	b.n	80200ee <_malloc_r+0x286>
 802013c:	f240 5e54 	movw	lr, #1364	; 0x554
 8020140:	4572      	cmp	r2, lr
 8020142:	bf9a      	itte	ls
 8020144:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8020148:	327c      	addls	r2, #124	; 0x7c
 802014a:	227e      	movhi	r2, #126	; 0x7e
 802014c:	e7cf      	b.n	80200ee <_malloc_r+0x286>
 802014e:	f8de e008 	ldr.w	lr, [lr, #8]
 8020152:	45f0      	cmp	r8, lr
 8020154:	d005      	beq.n	8020162 <_malloc_r+0x2fa>
 8020156:	f8de 2004 	ldr.w	r2, [lr, #4]
 802015a:	f022 0203 	bic.w	r2, r2, #3
 802015e:	4562      	cmp	r2, ip
 8020160:	d8f5      	bhi.n	802014e <_malloc_r+0x2e6>
 8020162:	f8de 800c 	ldr.w	r8, [lr, #12]
 8020166:	e7d1      	b.n	802010c <_malloc_r+0x2a4>
 8020168:	6860      	ldr	r0, [r4, #4]
 802016a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802016e:	f020 0003 	bic.w	r0, r0, #3
 8020172:	eba0 0a07 	sub.w	sl, r0, r7
 8020176:	f1ba 0f0f 	cmp.w	sl, #15
 802017a:	dd21      	ble.n	80201c0 <_malloc_r+0x358>
 802017c:	68a3      	ldr	r3, [r4, #8]
 802017e:	19e2      	adds	r2, r4, r7
 8020180:	f047 0701 	orr.w	r7, r7, #1
 8020184:	6067      	str	r7, [r4, #4]
 8020186:	f8c3 c00c 	str.w	ip, [r3, #12]
 802018a:	f8cc 3008 	str.w	r3, [ip, #8]
 802018e:	f04a 0301 	orr.w	r3, sl, #1
 8020192:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8020196:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802019a:	6053      	str	r3, [r2, #4]
 802019c:	f844 a000 	str.w	sl, [r4, r0]
 80201a0:	e693      	b.n	801feca <_malloc_r+0x62>
 80201a2:	bf00      	nop
 80201a4:	200004d0 	.word	0x200004d0
 80201a8:	200004d8 	.word	0x200004d8
 80201ac:	200050c4 	.word	0x200050c4
 80201b0:	200008d8 	.word	0x200008d8
 80201b4:	200050bc 	.word	0x200050bc
 80201b8:	200050c0 	.word	0x200050c0
 80201bc:	20005094 	.word	0x20005094
 80201c0:	f1ba 0f00 	cmp.w	sl, #0
 80201c4:	db11      	blt.n	80201ea <_malloc_r+0x382>
 80201c6:	4420      	add	r0, r4
 80201c8:	6843      	ldr	r3, [r0, #4]
 80201ca:	f043 0301 	orr.w	r3, r3, #1
 80201ce:	6043      	str	r3, [r0, #4]
 80201d0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80201d4:	4628      	mov	r0, r5
 80201d6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80201da:	f8cc 3008 	str.w	r3, [ip, #8]
 80201de:	f000 f88b 	bl	80202f8 <__malloc_unlock>
 80201e2:	4620      	mov	r0, r4
 80201e4:	b003      	add	sp, #12
 80201e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ea:	4664      	mov	r4, ip
 80201ec:	e706      	b.n	801fffc <_malloc_r+0x194>
 80201ee:	f858 0908 	ldr.w	r0, [r8], #-8
 80201f2:	4540      	cmp	r0, r8
 80201f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80201f8:	f43f af0a 	beq.w	8020010 <_malloc_r+0x1a8>
 80201fc:	e70f      	b.n	802001e <_malloc_r+0x1b6>
 80201fe:	3304      	adds	r3, #4
 8020200:	0052      	lsls	r2, r2, #1
 8020202:	4210      	tst	r0, r2
 8020204:	d0fb      	beq.n	80201fe <_malloc_r+0x396>
 8020206:	e6f3      	b.n	801fff0 <_malloc_r+0x188>
 8020208:	4673      	mov	r3, lr
 802020a:	e7fa      	b.n	8020202 <_malloc_r+0x39a>
 802020c:	6810      	ldr	r0, [r2, #0]
 802020e:	3001      	adds	r0, #1
 8020210:	bf1b      	ittet	ne
 8020212:	1ae3      	subne	r3, r4, r3
 8020214:	4473      	addne	r3, lr
 8020216:	6014      	streq	r4, [r2, #0]
 8020218:	f8ca 3000 	strne.w	r3, [sl]
 802021c:	f014 0307 	ands.w	r3, r4, #7
 8020220:	bf1a      	itte	ne
 8020222:	f1c3 0008 	rsbne	r0, r3, #8
 8020226:	1824      	addne	r4, r4, r0
 8020228:	4618      	moveq	r0, r3
 802022a:	1862      	adds	r2, r4, r1
 802022c:	ea02 010c 	and.w	r1, r2, ip
 8020230:	4480      	add	r8, r0
 8020232:	eba8 0801 	sub.w	r8, r8, r1
 8020236:	ea08 080c 	and.w	r8, r8, ip
 802023a:	4641      	mov	r1, r8
 802023c:	4628      	mov	r0, r5
 802023e:	9301      	str	r3, [sp, #4]
 8020240:	9200      	str	r2, [sp, #0]
 8020242:	f000 fbc7 	bl	80209d4 <_sbrk_r>
 8020246:	1c43      	adds	r3, r0, #1
 8020248:	e9dd 2300 	ldrd	r2, r3, [sp]
 802024c:	d105      	bne.n	802025a <_malloc_r+0x3f2>
 802024e:	b32b      	cbz	r3, 802029c <_malloc_r+0x434>
 8020250:	f1a3 0008 	sub.w	r0, r3, #8
 8020254:	4410      	add	r0, r2
 8020256:	f04f 0800 	mov.w	r8, #0
 802025a:	f8da 2000 	ldr.w	r2, [sl]
 802025e:	60b4      	str	r4, [r6, #8]
 8020260:	1b00      	subs	r0, r0, r4
 8020262:	4440      	add	r0, r8
 8020264:	4442      	add	r2, r8
 8020266:	f040 0001 	orr.w	r0, r0, #1
 802026a:	45b3      	cmp	fp, r6
 802026c:	f8ca 2000 	str.w	r2, [sl]
 8020270:	6060      	str	r0, [r4, #4]
 8020272:	f43f af27 	beq.w	80200c4 <_malloc_r+0x25c>
 8020276:	f1b9 0f0f 	cmp.w	r9, #15
 802027a:	d812      	bhi.n	80202a2 <_malloc_r+0x43a>
 802027c:	2301      	movs	r3, #1
 802027e:	6063      	str	r3, [r4, #4]
 8020280:	68b3      	ldr	r3, [r6, #8]
 8020282:	685b      	ldr	r3, [r3, #4]
 8020284:	f023 0303 	bic.w	r3, r3, #3
 8020288:	42bb      	cmp	r3, r7
 802028a:	eba3 0207 	sub.w	r2, r3, r7
 802028e:	d301      	bcc.n	8020294 <_malloc_r+0x42c>
 8020290:	2a0f      	cmp	r2, #15
 8020292:	dc21      	bgt.n	80202d8 <_malloc_r+0x470>
 8020294:	4628      	mov	r0, r5
 8020296:	f000 f82f 	bl	80202f8 <__malloc_unlock>
 802029a:	e5f1      	b.n	801fe80 <_malloc_r+0x18>
 802029c:	4610      	mov	r0, r2
 802029e:	4698      	mov	r8, r3
 80202a0:	e7db      	b.n	802025a <_malloc_r+0x3f2>
 80202a2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80202a6:	f1a9 090c 	sub.w	r9, r9, #12
 80202aa:	f029 0907 	bic.w	r9, r9, #7
 80202ae:	f003 0301 	and.w	r3, r3, #1
 80202b2:	ea43 0309 	orr.w	r3, r3, r9
 80202b6:	f8cb 3004 	str.w	r3, [fp, #4]
 80202ba:	2205      	movs	r2, #5
 80202bc:	eb0b 0309 	add.w	r3, fp, r9
 80202c0:	f1b9 0f0f 	cmp.w	r9, #15
 80202c4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80202c8:	f67f aefc 	bls.w	80200c4 <_malloc_r+0x25c>
 80202cc:	f10b 0108 	add.w	r1, fp, #8
 80202d0:	4628      	mov	r0, r5
 80202d2:	f7ff fb6d 	bl	801f9b0 <_free_r>
 80202d6:	e6f5      	b.n	80200c4 <_malloc_r+0x25c>
 80202d8:	68b4      	ldr	r4, [r6, #8]
 80202da:	f047 0301 	orr.w	r3, r7, #1
 80202de:	4427      	add	r7, r4
 80202e0:	f042 0201 	orr.w	r2, r2, #1
 80202e4:	6063      	str	r3, [r4, #4]
 80202e6:	60b7      	str	r7, [r6, #8]
 80202e8:	607a      	str	r2, [r7, #4]
 80202ea:	e5ee      	b.n	801feca <_malloc_r+0x62>

080202ec <__malloc_lock>:
 80202ec:	4801      	ldr	r0, [pc, #4]	; (80202f4 <__malloc_lock+0x8>)
 80202ee:	f7ff bd3c 	b.w	801fd6a <__retarget_lock_acquire_recursive>
 80202f2:	bf00      	nop
 80202f4:	2000be70 	.word	0x2000be70

080202f8 <__malloc_unlock>:
 80202f8:	4801      	ldr	r0, [pc, #4]	; (8020300 <__malloc_unlock+0x8>)
 80202fa:	f7ff bd38 	b.w	801fd6e <__retarget_lock_release_recursive>
 80202fe:	bf00      	nop
 8020300:	2000be70 	.word	0x2000be70

08020304 <_Balloc>:
 8020304:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8020306:	b570      	push	{r4, r5, r6, lr}
 8020308:	4605      	mov	r5, r0
 802030a:	460c      	mov	r4, r1
 802030c:	b17b      	cbz	r3, 802032e <_Balloc+0x2a>
 802030e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020310:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020314:	b9a0      	cbnz	r0, 8020340 <_Balloc+0x3c>
 8020316:	2101      	movs	r1, #1
 8020318:	fa01 f604 	lsl.w	r6, r1, r4
 802031c:	1d72      	adds	r2, r6, #5
 802031e:	0092      	lsls	r2, r2, #2
 8020320:	4628      	mov	r0, r5
 8020322:	f002 facd 	bl	80228c0 <_calloc_r>
 8020326:	b148      	cbz	r0, 802033c <_Balloc+0x38>
 8020328:	e9c0 4601 	strd	r4, r6, [r0, #4]
 802032c:	e00b      	b.n	8020346 <_Balloc+0x42>
 802032e:	2221      	movs	r2, #33	; 0x21
 8020330:	2104      	movs	r1, #4
 8020332:	f002 fac5 	bl	80228c0 <_calloc_r>
 8020336:	64e8      	str	r0, [r5, #76]	; 0x4c
 8020338:	2800      	cmp	r0, #0
 802033a:	d1e8      	bne.n	802030e <_Balloc+0xa>
 802033c:	2000      	movs	r0, #0
 802033e:	bd70      	pop	{r4, r5, r6, pc}
 8020340:	6802      	ldr	r2, [r0, #0]
 8020342:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8020346:	2300      	movs	r3, #0
 8020348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802034c:	e7f7      	b.n	802033e <_Balloc+0x3a>

0802034e <_Bfree>:
 802034e:	b131      	cbz	r1, 802035e <_Bfree+0x10>
 8020350:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8020352:	684a      	ldr	r2, [r1, #4]
 8020354:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020358:	6008      	str	r0, [r1, #0]
 802035a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802035e:	4770      	bx	lr

08020360 <__multadd>:
 8020360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020364:	690e      	ldr	r6, [r1, #16]
 8020366:	4607      	mov	r7, r0
 8020368:	4698      	mov	r8, r3
 802036a:	460c      	mov	r4, r1
 802036c:	f101 0014 	add.w	r0, r1, #20
 8020370:	2300      	movs	r3, #0
 8020372:	6805      	ldr	r5, [r0, #0]
 8020374:	b2a9      	uxth	r1, r5
 8020376:	fb02 8101 	mla	r1, r2, r1, r8
 802037a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802037e:	0c2d      	lsrs	r5, r5, #16
 8020380:	fb02 c505 	mla	r5, r2, r5, ip
 8020384:	b289      	uxth	r1, r1
 8020386:	3301      	adds	r3, #1
 8020388:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802038c:	429e      	cmp	r6, r3
 802038e:	f840 1b04 	str.w	r1, [r0], #4
 8020392:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020396:	dcec      	bgt.n	8020372 <__multadd+0x12>
 8020398:	f1b8 0f00 	cmp.w	r8, #0
 802039c:	d022      	beq.n	80203e4 <__multadd+0x84>
 802039e:	68a3      	ldr	r3, [r4, #8]
 80203a0:	42b3      	cmp	r3, r6
 80203a2:	dc19      	bgt.n	80203d8 <__multadd+0x78>
 80203a4:	6861      	ldr	r1, [r4, #4]
 80203a6:	4638      	mov	r0, r7
 80203a8:	3101      	adds	r1, #1
 80203aa:	f7ff ffab 	bl	8020304 <_Balloc>
 80203ae:	4605      	mov	r5, r0
 80203b0:	b928      	cbnz	r0, 80203be <__multadd+0x5e>
 80203b2:	4602      	mov	r2, r0
 80203b4:	4b0d      	ldr	r3, [pc, #52]	; (80203ec <__multadd+0x8c>)
 80203b6:	480e      	ldr	r0, [pc, #56]	; (80203f0 <__multadd+0x90>)
 80203b8:	21b5      	movs	r1, #181	; 0xb5
 80203ba:	f002 fa63 	bl	8022884 <__assert_func>
 80203be:	6922      	ldr	r2, [r4, #16]
 80203c0:	3202      	adds	r2, #2
 80203c2:	f104 010c 	add.w	r1, r4, #12
 80203c6:	0092      	lsls	r2, r2, #2
 80203c8:	300c      	adds	r0, #12
 80203ca:	f7fb f801 	bl	801b3d0 <memcpy>
 80203ce:	4621      	mov	r1, r4
 80203d0:	4638      	mov	r0, r7
 80203d2:	f7ff ffbc 	bl	802034e <_Bfree>
 80203d6:	462c      	mov	r4, r5
 80203d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80203dc:	3601      	adds	r6, #1
 80203de:	f8c3 8014 	str.w	r8, [r3, #20]
 80203e2:	6126      	str	r6, [r4, #16]
 80203e4:	4620      	mov	r0, r4
 80203e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203ea:	bf00      	nop
 80203ec:	08029335 	.word	0x08029335
 80203f0:	080293a5 	.word	0x080293a5

080203f4 <__hi0bits>:
 80203f4:	0c03      	lsrs	r3, r0, #16
 80203f6:	041b      	lsls	r3, r3, #16
 80203f8:	b9d3      	cbnz	r3, 8020430 <__hi0bits+0x3c>
 80203fa:	0400      	lsls	r0, r0, #16
 80203fc:	2310      	movs	r3, #16
 80203fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020402:	bf04      	itt	eq
 8020404:	0200      	lsleq	r0, r0, #8
 8020406:	3308      	addeq	r3, #8
 8020408:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802040c:	bf04      	itt	eq
 802040e:	0100      	lsleq	r0, r0, #4
 8020410:	3304      	addeq	r3, #4
 8020412:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020416:	bf04      	itt	eq
 8020418:	0080      	lsleq	r0, r0, #2
 802041a:	3302      	addeq	r3, #2
 802041c:	2800      	cmp	r0, #0
 802041e:	db05      	blt.n	802042c <__hi0bits+0x38>
 8020420:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020424:	f103 0301 	add.w	r3, r3, #1
 8020428:	bf08      	it	eq
 802042a:	2320      	moveq	r3, #32
 802042c:	4618      	mov	r0, r3
 802042e:	4770      	bx	lr
 8020430:	2300      	movs	r3, #0
 8020432:	e7e4      	b.n	80203fe <__hi0bits+0xa>

08020434 <__lo0bits>:
 8020434:	6803      	ldr	r3, [r0, #0]
 8020436:	f013 0207 	ands.w	r2, r3, #7
 802043a:	4601      	mov	r1, r0
 802043c:	d00b      	beq.n	8020456 <__lo0bits+0x22>
 802043e:	07da      	lsls	r2, r3, #31
 8020440:	d424      	bmi.n	802048c <__lo0bits+0x58>
 8020442:	0798      	lsls	r0, r3, #30
 8020444:	bf49      	itett	mi
 8020446:	085b      	lsrmi	r3, r3, #1
 8020448:	089b      	lsrpl	r3, r3, #2
 802044a:	2001      	movmi	r0, #1
 802044c:	600b      	strmi	r3, [r1, #0]
 802044e:	bf5c      	itt	pl
 8020450:	600b      	strpl	r3, [r1, #0]
 8020452:	2002      	movpl	r0, #2
 8020454:	4770      	bx	lr
 8020456:	b298      	uxth	r0, r3
 8020458:	b9b0      	cbnz	r0, 8020488 <__lo0bits+0x54>
 802045a:	0c1b      	lsrs	r3, r3, #16
 802045c:	2010      	movs	r0, #16
 802045e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020462:	bf04      	itt	eq
 8020464:	0a1b      	lsreq	r3, r3, #8
 8020466:	3008      	addeq	r0, #8
 8020468:	071a      	lsls	r2, r3, #28
 802046a:	bf04      	itt	eq
 802046c:	091b      	lsreq	r3, r3, #4
 802046e:	3004      	addeq	r0, #4
 8020470:	079a      	lsls	r2, r3, #30
 8020472:	bf04      	itt	eq
 8020474:	089b      	lsreq	r3, r3, #2
 8020476:	3002      	addeq	r0, #2
 8020478:	07da      	lsls	r2, r3, #31
 802047a:	d403      	bmi.n	8020484 <__lo0bits+0x50>
 802047c:	085b      	lsrs	r3, r3, #1
 802047e:	f100 0001 	add.w	r0, r0, #1
 8020482:	d005      	beq.n	8020490 <__lo0bits+0x5c>
 8020484:	600b      	str	r3, [r1, #0]
 8020486:	4770      	bx	lr
 8020488:	4610      	mov	r0, r2
 802048a:	e7e8      	b.n	802045e <__lo0bits+0x2a>
 802048c:	2000      	movs	r0, #0
 802048e:	4770      	bx	lr
 8020490:	2020      	movs	r0, #32
 8020492:	4770      	bx	lr

08020494 <__i2b>:
 8020494:	b510      	push	{r4, lr}
 8020496:	460c      	mov	r4, r1
 8020498:	2101      	movs	r1, #1
 802049a:	f7ff ff33 	bl	8020304 <_Balloc>
 802049e:	4602      	mov	r2, r0
 80204a0:	b928      	cbnz	r0, 80204ae <__i2b+0x1a>
 80204a2:	4b05      	ldr	r3, [pc, #20]	; (80204b8 <__i2b+0x24>)
 80204a4:	4805      	ldr	r0, [pc, #20]	; (80204bc <__i2b+0x28>)
 80204a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80204aa:	f002 f9eb 	bl	8022884 <__assert_func>
 80204ae:	2301      	movs	r3, #1
 80204b0:	6144      	str	r4, [r0, #20]
 80204b2:	6103      	str	r3, [r0, #16]
 80204b4:	bd10      	pop	{r4, pc}
 80204b6:	bf00      	nop
 80204b8:	08029335 	.word	0x08029335
 80204bc:	080293a5 	.word	0x080293a5

080204c0 <__multiply>:
 80204c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204c4:	4614      	mov	r4, r2
 80204c6:	690a      	ldr	r2, [r1, #16]
 80204c8:	6923      	ldr	r3, [r4, #16]
 80204ca:	429a      	cmp	r2, r3
 80204cc:	bfb8      	it	lt
 80204ce:	460b      	movlt	r3, r1
 80204d0:	460d      	mov	r5, r1
 80204d2:	bfbc      	itt	lt
 80204d4:	4625      	movlt	r5, r4
 80204d6:	461c      	movlt	r4, r3
 80204d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80204dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80204e0:	68ab      	ldr	r3, [r5, #8]
 80204e2:	6869      	ldr	r1, [r5, #4]
 80204e4:	eb0a 0709 	add.w	r7, sl, r9
 80204e8:	42bb      	cmp	r3, r7
 80204ea:	b085      	sub	sp, #20
 80204ec:	bfb8      	it	lt
 80204ee:	3101      	addlt	r1, #1
 80204f0:	f7ff ff08 	bl	8020304 <_Balloc>
 80204f4:	b930      	cbnz	r0, 8020504 <__multiply+0x44>
 80204f6:	4602      	mov	r2, r0
 80204f8:	4b42      	ldr	r3, [pc, #264]	; (8020604 <__multiply+0x144>)
 80204fa:	4843      	ldr	r0, [pc, #268]	; (8020608 <__multiply+0x148>)
 80204fc:	f240 115d 	movw	r1, #349	; 0x15d
 8020500:	f002 f9c0 	bl	8022884 <__assert_func>
 8020504:	f100 0614 	add.w	r6, r0, #20
 8020508:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802050c:	4633      	mov	r3, r6
 802050e:	2200      	movs	r2, #0
 8020510:	4543      	cmp	r3, r8
 8020512:	d31e      	bcc.n	8020552 <__multiply+0x92>
 8020514:	f105 0c14 	add.w	ip, r5, #20
 8020518:	f104 0314 	add.w	r3, r4, #20
 802051c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020520:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020524:	9202      	str	r2, [sp, #8]
 8020526:	ebac 0205 	sub.w	r2, ip, r5
 802052a:	3a15      	subs	r2, #21
 802052c:	f022 0203 	bic.w	r2, r2, #3
 8020530:	3204      	adds	r2, #4
 8020532:	f105 0115 	add.w	r1, r5, #21
 8020536:	458c      	cmp	ip, r1
 8020538:	bf38      	it	cc
 802053a:	2204      	movcc	r2, #4
 802053c:	9201      	str	r2, [sp, #4]
 802053e:	9a02      	ldr	r2, [sp, #8]
 8020540:	9303      	str	r3, [sp, #12]
 8020542:	429a      	cmp	r2, r3
 8020544:	d808      	bhi.n	8020558 <__multiply+0x98>
 8020546:	2f00      	cmp	r7, #0
 8020548:	dc55      	bgt.n	80205f6 <__multiply+0x136>
 802054a:	6107      	str	r7, [r0, #16]
 802054c:	b005      	add	sp, #20
 802054e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020552:	f843 2b04 	str.w	r2, [r3], #4
 8020556:	e7db      	b.n	8020510 <__multiply+0x50>
 8020558:	f8b3 a000 	ldrh.w	sl, [r3]
 802055c:	f1ba 0f00 	cmp.w	sl, #0
 8020560:	d020      	beq.n	80205a4 <__multiply+0xe4>
 8020562:	f105 0e14 	add.w	lr, r5, #20
 8020566:	46b1      	mov	r9, r6
 8020568:	2200      	movs	r2, #0
 802056a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802056e:	f8d9 b000 	ldr.w	fp, [r9]
 8020572:	b2a1      	uxth	r1, r4
 8020574:	fa1f fb8b 	uxth.w	fp, fp
 8020578:	fb0a b101 	mla	r1, sl, r1, fp
 802057c:	4411      	add	r1, r2
 802057e:	f8d9 2000 	ldr.w	r2, [r9]
 8020582:	0c24      	lsrs	r4, r4, #16
 8020584:	0c12      	lsrs	r2, r2, #16
 8020586:	fb0a 2404 	mla	r4, sl, r4, r2
 802058a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802058e:	b289      	uxth	r1, r1
 8020590:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020594:	45f4      	cmp	ip, lr
 8020596:	f849 1b04 	str.w	r1, [r9], #4
 802059a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802059e:	d8e4      	bhi.n	802056a <__multiply+0xaa>
 80205a0:	9901      	ldr	r1, [sp, #4]
 80205a2:	5072      	str	r2, [r6, r1]
 80205a4:	9a03      	ldr	r2, [sp, #12]
 80205a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80205aa:	3304      	adds	r3, #4
 80205ac:	f1b9 0f00 	cmp.w	r9, #0
 80205b0:	d01f      	beq.n	80205f2 <__multiply+0x132>
 80205b2:	6834      	ldr	r4, [r6, #0]
 80205b4:	f105 0114 	add.w	r1, r5, #20
 80205b8:	46b6      	mov	lr, r6
 80205ba:	f04f 0a00 	mov.w	sl, #0
 80205be:	880a      	ldrh	r2, [r1, #0]
 80205c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80205c4:	fb09 b202 	mla	r2, r9, r2, fp
 80205c8:	4492      	add	sl, r2
 80205ca:	b2a4      	uxth	r4, r4
 80205cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80205d0:	f84e 4b04 	str.w	r4, [lr], #4
 80205d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80205d8:	f8be 2000 	ldrh.w	r2, [lr]
 80205dc:	0c24      	lsrs	r4, r4, #16
 80205de:	fb09 2404 	mla	r4, r9, r4, r2
 80205e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80205e6:	458c      	cmp	ip, r1
 80205e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80205ec:	d8e7      	bhi.n	80205be <__multiply+0xfe>
 80205ee:	9a01      	ldr	r2, [sp, #4]
 80205f0:	50b4      	str	r4, [r6, r2]
 80205f2:	3604      	adds	r6, #4
 80205f4:	e7a3      	b.n	802053e <__multiply+0x7e>
 80205f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	d1a5      	bne.n	802054a <__multiply+0x8a>
 80205fe:	3f01      	subs	r7, #1
 8020600:	e7a1      	b.n	8020546 <__multiply+0x86>
 8020602:	bf00      	nop
 8020604:	08029335 	.word	0x08029335
 8020608:	080293a5 	.word	0x080293a5

0802060c <__pow5mult>:
 802060c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020610:	4615      	mov	r5, r2
 8020612:	f012 0203 	ands.w	r2, r2, #3
 8020616:	4606      	mov	r6, r0
 8020618:	460f      	mov	r7, r1
 802061a:	d007      	beq.n	802062c <__pow5mult+0x20>
 802061c:	4c1a      	ldr	r4, [pc, #104]	; (8020688 <__pow5mult+0x7c>)
 802061e:	3a01      	subs	r2, #1
 8020620:	2300      	movs	r3, #0
 8020622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020626:	f7ff fe9b 	bl	8020360 <__multadd>
 802062a:	4607      	mov	r7, r0
 802062c:	10ad      	asrs	r5, r5, #2
 802062e:	d027      	beq.n	8020680 <__pow5mult+0x74>
 8020630:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8020632:	b944      	cbnz	r4, 8020646 <__pow5mult+0x3a>
 8020634:	f240 2171 	movw	r1, #625	; 0x271
 8020638:	4630      	mov	r0, r6
 802063a:	f7ff ff2b 	bl	8020494 <__i2b>
 802063e:	2300      	movs	r3, #0
 8020640:	64b0      	str	r0, [r6, #72]	; 0x48
 8020642:	4604      	mov	r4, r0
 8020644:	6003      	str	r3, [r0, #0]
 8020646:	f04f 0900 	mov.w	r9, #0
 802064a:	07eb      	lsls	r3, r5, #31
 802064c:	d50a      	bpl.n	8020664 <__pow5mult+0x58>
 802064e:	4639      	mov	r1, r7
 8020650:	4622      	mov	r2, r4
 8020652:	4630      	mov	r0, r6
 8020654:	f7ff ff34 	bl	80204c0 <__multiply>
 8020658:	4639      	mov	r1, r7
 802065a:	4680      	mov	r8, r0
 802065c:	4630      	mov	r0, r6
 802065e:	f7ff fe76 	bl	802034e <_Bfree>
 8020662:	4647      	mov	r7, r8
 8020664:	106d      	asrs	r5, r5, #1
 8020666:	d00b      	beq.n	8020680 <__pow5mult+0x74>
 8020668:	6820      	ldr	r0, [r4, #0]
 802066a:	b938      	cbnz	r0, 802067c <__pow5mult+0x70>
 802066c:	4622      	mov	r2, r4
 802066e:	4621      	mov	r1, r4
 8020670:	4630      	mov	r0, r6
 8020672:	f7ff ff25 	bl	80204c0 <__multiply>
 8020676:	6020      	str	r0, [r4, #0]
 8020678:	f8c0 9000 	str.w	r9, [r0]
 802067c:	4604      	mov	r4, r0
 802067e:	e7e4      	b.n	802064a <__pow5mult+0x3e>
 8020680:	4638      	mov	r0, r7
 8020682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020686:	bf00      	nop
 8020688:	080294f8 	.word	0x080294f8

0802068c <__lshift>:
 802068c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020690:	460c      	mov	r4, r1
 8020692:	6849      	ldr	r1, [r1, #4]
 8020694:	6923      	ldr	r3, [r4, #16]
 8020696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802069a:	68a3      	ldr	r3, [r4, #8]
 802069c:	4607      	mov	r7, r0
 802069e:	4691      	mov	r9, r2
 80206a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80206a4:	f108 0601 	add.w	r6, r8, #1
 80206a8:	42b3      	cmp	r3, r6
 80206aa:	db0b      	blt.n	80206c4 <__lshift+0x38>
 80206ac:	4638      	mov	r0, r7
 80206ae:	f7ff fe29 	bl	8020304 <_Balloc>
 80206b2:	4605      	mov	r5, r0
 80206b4:	b948      	cbnz	r0, 80206ca <__lshift+0x3e>
 80206b6:	4602      	mov	r2, r0
 80206b8:	4b28      	ldr	r3, [pc, #160]	; (802075c <__lshift+0xd0>)
 80206ba:	4829      	ldr	r0, [pc, #164]	; (8020760 <__lshift+0xd4>)
 80206bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80206c0:	f002 f8e0 	bl	8022884 <__assert_func>
 80206c4:	3101      	adds	r1, #1
 80206c6:	005b      	lsls	r3, r3, #1
 80206c8:	e7ee      	b.n	80206a8 <__lshift+0x1c>
 80206ca:	2300      	movs	r3, #0
 80206cc:	f100 0114 	add.w	r1, r0, #20
 80206d0:	f100 0210 	add.w	r2, r0, #16
 80206d4:	4618      	mov	r0, r3
 80206d6:	4553      	cmp	r3, sl
 80206d8:	db33      	blt.n	8020742 <__lshift+0xb6>
 80206da:	6920      	ldr	r0, [r4, #16]
 80206dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80206e0:	f104 0314 	add.w	r3, r4, #20
 80206e4:	f019 091f 	ands.w	r9, r9, #31
 80206e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80206ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80206f0:	d02b      	beq.n	802074a <__lshift+0xbe>
 80206f2:	f1c9 0e20 	rsb	lr, r9, #32
 80206f6:	468a      	mov	sl, r1
 80206f8:	2200      	movs	r2, #0
 80206fa:	6818      	ldr	r0, [r3, #0]
 80206fc:	fa00 f009 	lsl.w	r0, r0, r9
 8020700:	4302      	orrs	r2, r0
 8020702:	f84a 2b04 	str.w	r2, [sl], #4
 8020706:	f853 2b04 	ldr.w	r2, [r3], #4
 802070a:	459c      	cmp	ip, r3
 802070c:	fa22 f20e 	lsr.w	r2, r2, lr
 8020710:	d8f3      	bhi.n	80206fa <__lshift+0x6e>
 8020712:	ebac 0304 	sub.w	r3, ip, r4
 8020716:	3b15      	subs	r3, #21
 8020718:	f023 0303 	bic.w	r3, r3, #3
 802071c:	3304      	adds	r3, #4
 802071e:	f104 0015 	add.w	r0, r4, #21
 8020722:	4584      	cmp	ip, r0
 8020724:	bf38      	it	cc
 8020726:	2304      	movcc	r3, #4
 8020728:	50ca      	str	r2, [r1, r3]
 802072a:	b10a      	cbz	r2, 8020730 <__lshift+0xa4>
 802072c:	f108 0602 	add.w	r6, r8, #2
 8020730:	3e01      	subs	r6, #1
 8020732:	4638      	mov	r0, r7
 8020734:	612e      	str	r6, [r5, #16]
 8020736:	4621      	mov	r1, r4
 8020738:	f7ff fe09 	bl	802034e <_Bfree>
 802073c:	4628      	mov	r0, r5
 802073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020742:	f842 0f04 	str.w	r0, [r2, #4]!
 8020746:	3301      	adds	r3, #1
 8020748:	e7c5      	b.n	80206d6 <__lshift+0x4a>
 802074a:	3904      	subs	r1, #4
 802074c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020750:	f841 2f04 	str.w	r2, [r1, #4]!
 8020754:	459c      	cmp	ip, r3
 8020756:	d8f9      	bhi.n	802074c <__lshift+0xc0>
 8020758:	e7ea      	b.n	8020730 <__lshift+0xa4>
 802075a:	bf00      	nop
 802075c:	08029335 	.word	0x08029335
 8020760:	080293a5 	.word	0x080293a5

08020764 <__mcmp>:
 8020764:	b530      	push	{r4, r5, lr}
 8020766:	6902      	ldr	r2, [r0, #16]
 8020768:	690c      	ldr	r4, [r1, #16]
 802076a:	1b12      	subs	r2, r2, r4
 802076c:	d10e      	bne.n	802078c <__mcmp+0x28>
 802076e:	f100 0314 	add.w	r3, r0, #20
 8020772:	3114      	adds	r1, #20
 8020774:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020778:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802077c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020780:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020784:	42a5      	cmp	r5, r4
 8020786:	d003      	beq.n	8020790 <__mcmp+0x2c>
 8020788:	d305      	bcc.n	8020796 <__mcmp+0x32>
 802078a:	2201      	movs	r2, #1
 802078c:	4610      	mov	r0, r2
 802078e:	bd30      	pop	{r4, r5, pc}
 8020790:	4283      	cmp	r3, r0
 8020792:	d3f3      	bcc.n	802077c <__mcmp+0x18>
 8020794:	e7fa      	b.n	802078c <__mcmp+0x28>
 8020796:	f04f 32ff 	mov.w	r2, #4294967295
 802079a:	e7f7      	b.n	802078c <__mcmp+0x28>

0802079c <__mdiff>:
 802079c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207a0:	460c      	mov	r4, r1
 80207a2:	4606      	mov	r6, r0
 80207a4:	4611      	mov	r1, r2
 80207a6:	4620      	mov	r0, r4
 80207a8:	4617      	mov	r7, r2
 80207aa:	f7ff ffdb 	bl	8020764 <__mcmp>
 80207ae:	1e05      	subs	r5, r0, #0
 80207b0:	d110      	bne.n	80207d4 <__mdiff+0x38>
 80207b2:	4629      	mov	r1, r5
 80207b4:	4630      	mov	r0, r6
 80207b6:	f7ff fda5 	bl	8020304 <_Balloc>
 80207ba:	b930      	cbnz	r0, 80207ca <__mdiff+0x2e>
 80207bc:	4b39      	ldr	r3, [pc, #228]	; (80208a4 <__mdiff+0x108>)
 80207be:	4602      	mov	r2, r0
 80207c0:	f240 2132 	movw	r1, #562	; 0x232
 80207c4:	4838      	ldr	r0, [pc, #224]	; (80208a8 <__mdiff+0x10c>)
 80207c6:	f002 f85d 	bl	8022884 <__assert_func>
 80207ca:	2301      	movs	r3, #1
 80207cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80207d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207d4:	bfa4      	itt	ge
 80207d6:	463b      	movge	r3, r7
 80207d8:	4627      	movge	r7, r4
 80207da:	4630      	mov	r0, r6
 80207dc:	6879      	ldr	r1, [r7, #4]
 80207de:	bfa6      	itte	ge
 80207e0:	461c      	movge	r4, r3
 80207e2:	2500      	movge	r5, #0
 80207e4:	2501      	movlt	r5, #1
 80207e6:	f7ff fd8d 	bl	8020304 <_Balloc>
 80207ea:	b920      	cbnz	r0, 80207f6 <__mdiff+0x5a>
 80207ec:	4b2d      	ldr	r3, [pc, #180]	; (80208a4 <__mdiff+0x108>)
 80207ee:	4602      	mov	r2, r0
 80207f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80207f4:	e7e6      	b.n	80207c4 <__mdiff+0x28>
 80207f6:	693e      	ldr	r6, [r7, #16]
 80207f8:	60c5      	str	r5, [r0, #12]
 80207fa:	6925      	ldr	r5, [r4, #16]
 80207fc:	f107 0114 	add.w	r1, r7, #20
 8020800:	f104 0914 	add.w	r9, r4, #20
 8020804:	f100 0e14 	add.w	lr, r0, #20
 8020808:	f107 0210 	add.w	r2, r7, #16
 802080c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020810:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020814:	46f2      	mov	sl, lr
 8020816:	2700      	movs	r7, #0
 8020818:	f859 3b04 	ldr.w	r3, [r9], #4
 802081c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020820:	fa1f f883 	uxth.w	r8, r3
 8020824:	fa17 f78b 	uxtah	r7, r7, fp
 8020828:	0c1b      	lsrs	r3, r3, #16
 802082a:	eba7 0808 	sub.w	r8, r7, r8
 802082e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020832:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020836:	fa1f f888 	uxth.w	r8, r8
 802083a:	141f      	asrs	r7, r3, #16
 802083c:	454d      	cmp	r5, r9
 802083e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020842:	f84a 3b04 	str.w	r3, [sl], #4
 8020846:	d8e7      	bhi.n	8020818 <__mdiff+0x7c>
 8020848:	1b2b      	subs	r3, r5, r4
 802084a:	3b15      	subs	r3, #21
 802084c:	f023 0303 	bic.w	r3, r3, #3
 8020850:	3304      	adds	r3, #4
 8020852:	3415      	adds	r4, #21
 8020854:	42a5      	cmp	r5, r4
 8020856:	bf38      	it	cc
 8020858:	2304      	movcc	r3, #4
 802085a:	4419      	add	r1, r3
 802085c:	4473      	add	r3, lr
 802085e:	469e      	mov	lr, r3
 8020860:	460d      	mov	r5, r1
 8020862:	4565      	cmp	r5, ip
 8020864:	d30e      	bcc.n	8020884 <__mdiff+0xe8>
 8020866:	f10c 0203 	add.w	r2, ip, #3
 802086a:	1a52      	subs	r2, r2, r1
 802086c:	f022 0203 	bic.w	r2, r2, #3
 8020870:	3903      	subs	r1, #3
 8020872:	458c      	cmp	ip, r1
 8020874:	bf38      	it	cc
 8020876:	2200      	movcc	r2, #0
 8020878:	441a      	add	r2, r3
 802087a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802087e:	b17b      	cbz	r3, 80208a0 <__mdiff+0x104>
 8020880:	6106      	str	r6, [r0, #16]
 8020882:	e7a5      	b.n	80207d0 <__mdiff+0x34>
 8020884:	f855 8b04 	ldr.w	r8, [r5], #4
 8020888:	fa17 f488 	uxtah	r4, r7, r8
 802088c:	1422      	asrs	r2, r4, #16
 802088e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020892:	b2a4      	uxth	r4, r4
 8020894:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020898:	f84e 4b04 	str.w	r4, [lr], #4
 802089c:	1417      	asrs	r7, r2, #16
 802089e:	e7e0      	b.n	8020862 <__mdiff+0xc6>
 80208a0:	3e01      	subs	r6, #1
 80208a2:	e7ea      	b.n	802087a <__mdiff+0xde>
 80208a4:	08029335 	.word	0x08029335
 80208a8:	080293a5 	.word	0x080293a5

080208ac <__d2b>:
 80208ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80208b0:	4689      	mov	r9, r1
 80208b2:	2101      	movs	r1, #1
 80208b4:	ec57 6b10 	vmov	r6, r7, d0
 80208b8:	4690      	mov	r8, r2
 80208ba:	f7ff fd23 	bl	8020304 <_Balloc>
 80208be:	4604      	mov	r4, r0
 80208c0:	b930      	cbnz	r0, 80208d0 <__d2b+0x24>
 80208c2:	4602      	mov	r2, r0
 80208c4:	4b25      	ldr	r3, [pc, #148]	; (802095c <__d2b+0xb0>)
 80208c6:	4826      	ldr	r0, [pc, #152]	; (8020960 <__d2b+0xb4>)
 80208c8:	f240 310a 	movw	r1, #778	; 0x30a
 80208cc:	f001 ffda 	bl	8022884 <__assert_func>
 80208d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80208d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80208d8:	bb35      	cbnz	r5, 8020928 <__d2b+0x7c>
 80208da:	2e00      	cmp	r6, #0
 80208dc:	9301      	str	r3, [sp, #4]
 80208de:	d028      	beq.n	8020932 <__d2b+0x86>
 80208e0:	4668      	mov	r0, sp
 80208e2:	9600      	str	r6, [sp, #0]
 80208e4:	f7ff fda6 	bl	8020434 <__lo0bits>
 80208e8:	9900      	ldr	r1, [sp, #0]
 80208ea:	b300      	cbz	r0, 802092e <__d2b+0x82>
 80208ec:	9a01      	ldr	r2, [sp, #4]
 80208ee:	f1c0 0320 	rsb	r3, r0, #32
 80208f2:	fa02 f303 	lsl.w	r3, r2, r3
 80208f6:	430b      	orrs	r3, r1
 80208f8:	40c2      	lsrs	r2, r0
 80208fa:	6163      	str	r3, [r4, #20]
 80208fc:	9201      	str	r2, [sp, #4]
 80208fe:	9b01      	ldr	r3, [sp, #4]
 8020900:	61a3      	str	r3, [r4, #24]
 8020902:	2b00      	cmp	r3, #0
 8020904:	bf14      	ite	ne
 8020906:	2202      	movne	r2, #2
 8020908:	2201      	moveq	r2, #1
 802090a:	6122      	str	r2, [r4, #16]
 802090c:	b1d5      	cbz	r5, 8020944 <__d2b+0x98>
 802090e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020912:	4405      	add	r5, r0
 8020914:	f8c9 5000 	str.w	r5, [r9]
 8020918:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802091c:	f8c8 0000 	str.w	r0, [r8]
 8020920:	4620      	mov	r0, r4
 8020922:	b003      	add	sp, #12
 8020924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802092c:	e7d5      	b.n	80208da <__d2b+0x2e>
 802092e:	6161      	str	r1, [r4, #20]
 8020930:	e7e5      	b.n	80208fe <__d2b+0x52>
 8020932:	a801      	add	r0, sp, #4
 8020934:	f7ff fd7e 	bl	8020434 <__lo0bits>
 8020938:	9b01      	ldr	r3, [sp, #4]
 802093a:	6163      	str	r3, [r4, #20]
 802093c:	2201      	movs	r2, #1
 802093e:	6122      	str	r2, [r4, #16]
 8020940:	3020      	adds	r0, #32
 8020942:	e7e3      	b.n	802090c <__d2b+0x60>
 8020944:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020948:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802094c:	f8c9 0000 	str.w	r0, [r9]
 8020950:	6918      	ldr	r0, [r3, #16]
 8020952:	f7ff fd4f 	bl	80203f4 <__hi0bits>
 8020956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802095a:	e7df      	b.n	802091c <__d2b+0x70>
 802095c:	08029335 	.word	0x08029335
 8020960:	080293a5 	.word	0x080293a5

08020964 <frexp>:
 8020964:	b570      	push	{r4, r5, r6, lr}
 8020966:	2100      	movs	r1, #0
 8020968:	ec55 4b10 	vmov	r4, r5, d0
 802096c:	6001      	str	r1, [r0, #0]
 802096e:	4916      	ldr	r1, [pc, #88]	; (80209c8 <frexp+0x64>)
 8020970:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8020974:	428a      	cmp	r2, r1
 8020976:	4606      	mov	r6, r0
 8020978:	462b      	mov	r3, r5
 802097a:	dc22      	bgt.n	80209c2 <frexp+0x5e>
 802097c:	ee10 1a10 	vmov	r1, s0
 8020980:	4311      	orrs	r1, r2
 8020982:	d01e      	beq.n	80209c2 <frexp+0x5e>
 8020984:	4911      	ldr	r1, [pc, #68]	; (80209cc <frexp+0x68>)
 8020986:	4029      	ands	r1, r5
 8020988:	b969      	cbnz	r1, 80209a6 <frexp+0x42>
 802098a:	4b11      	ldr	r3, [pc, #68]	; (80209d0 <frexp+0x6c>)
 802098c:	2200      	movs	r2, #0
 802098e:	ee10 0a10 	vmov	r0, s0
 8020992:	4629      	mov	r1, r5
 8020994:	f7df fe60 	bl	8000658 <__aeabi_dmul>
 8020998:	460b      	mov	r3, r1
 802099a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802099e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80209a2:	4604      	mov	r4, r0
 80209a4:	6031      	str	r1, [r6, #0]
 80209a6:	6831      	ldr	r1, [r6, #0]
 80209a8:	1512      	asrs	r2, r2, #20
 80209aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80209ae:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80209b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80209b6:	440a      	add	r2, r1
 80209b8:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80209bc:	6032      	str	r2, [r6, #0]
 80209be:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80209c2:	ec45 4b10 	vmov	d0, r4, r5
 80209c6:	bd70      	pop	{r4, r5, r6, pc}
 80209c8:	7fefffff 	.word	0x7fefffff
 80209cc:	7ff00000 	.word	0x7ff00000
 80209d0:	43500000 	.word	0x43500000

080209d4 <_sbrk_r>:
 80209d4:	b538      	push	{r3, r4, r5, lr}
 80209d6:	4d06      	ldr	r5, [pc, #24]	; (80209f0 <_sbrk_r+0x1c>)
 80209d8:	2300      	movs	r3, #0
 80209da:	4604      	mov	r4, r0
 80209dc:	4608      	mov	r0, r1
 80209de:	602b      	str	r3, [r5, #0]
 80209e0:	f7e3 f90e 	bl	8003c00 <_sbrk>
 80209e4:	1c43      	adds	r3, r0, #1
 80209e6:	d102      	bne.n	80209ee <_sbrk_r+0x1a>
 80209e8:	682b      	ldr	r3, [r5, #0]
 80209ea:	b103      	cbz	r3, 80209ee <_sbrk_r+0x1a>
 80209ec:	6023      	str	r3, [r4, #0]
 80209ee:	bd38      	pop	{r3, r4, r5, pc}
 80209f0:	2000be64 	.word	0x2000be64

080209f4 <siscanf>:
 80209f4:	b40e      	push	{r1, r2, r3}
 80209f6:	b510      	push	{r4, lr}
 80209f8:	b09f      	sub	sp, #124	; 0x7c
 80209fa:	ac21      	add	r4, sp, #132	; 0x84
 80209fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020a00:	f854 2b04 	ldr.w	r2, [r4], #4
 8020a04:	9201      	str	r2, [sp, #4]
 8020a06:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020a0a:	9004      	str	r0, [sp, #16]
 8020a0c:	9008      	str	r0, [sp, #32]
 8020a0e:	f7df fc09 	bl	8000224 <strlen>
 8020a12:	4b0c      	ldr	r3, [pc, #48]	; (8020a44 <siscanf+0x50>)
 8020a14:	9005      	str	r0, [sp, #20]
 8020a16:	9009      	str	r0, [sp, #36]	; 0x24
 8020a18:	930c      	str	r3, [sp, #48]	; 0x30
 8020a1a:	480b      	ldr	r0, [pc, #44]	; (8020a48 <siscanf+0x54>)
 8020a1c:	9a01      	ldr	r2, [sp, #4]
 8020a1e:	6800      	ldr	r0, [r0, #0]
 8020a20:	9403      	str	r4, [sp, #12]
 8020a22:	2300      	movs	r3, #0
 8020a24:	9310      	str	r3, [sp, #64]	; 0x40
 8020a26:	9315      	str	r3, [sp, #84]	; 0x54
 8020a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020a2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020a30:	a904      	add	r1, sp, #16
 8020a32:	4623      	mov	r3, r4
 8020a34:	f000 f9ee 	bl	8020e14 <__ssvfiscanf_r>
 8020a38:	b01f      	add	sp, #124	; 0x7c
 8020a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a3e:	b003      	add	sp, #12
 8020a40:	4770      	bx	lr
 8020a42:	bf00      	nop
 8020a44:	08020a6f 	.word	0x08020a6f
 8020a48:	20000038 	.word	0x20000038

08020a4c <__sread>:
 8020a4c:	b510      	push	{r4, lr}
 8020a4e:	460c      	mov	r4, r1
 8020a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a54:	f002 fa12 	bl	8022e7c <_read_r>
 8020a58:	2800      	cmp	r0, #0
 8020a5a:	bfab      	itete	ge
 8020a5c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8020a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8020a60:	181b      	addge	r3, r3, r0
 8020a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020a66:	bfac      	ite	ge
 8020a68:	6523      	strge	r3, [r4, #80]	; 0x50
 8020a6a:	81a3      	strhlt	r3, [r4, #12]
 8020a6c:	bd10      	pop	{r4, pc}

08020a6e <__seofread>:
 8020a6e:	2000      	movs	r0, #0
 8020a70:	4770      	bx	lr

08020a72 <__swrite>:
 8020a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a76:	461f      	mov	r7, r3
 8020a78:	898b      	ldrh	r3, [r1, #12]
 8020a7a:	05db      	lsls	r3, r3, #23
 8020a7c:	4605      	mov	r5, r0
 8020a7e:	460c      	mov	r4, r1
 8020a80:	4616      	mov	r6, r2
 8020a82:	d505      	bpl.n	8020a90 <__swrite+0x1e>
 8020a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a88:	2302      	movs	r3, #2
 8020a8a:	2200      	movs	r2, #0
 8020a8c:	f002 f9b8 	bl	8022e00 <_lseek_r>
 8020a90:	89a3      	ldrh	r3, [r4, #12]
 8020a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020a9a:	81a3      	strh	r3, [r4, #12]
 8020a9c:	4632      	mov	r2, r6
 8020a9e:	463b      	mov	r3, r7
 8020aa0:	4628      	mov	r0, r5
 8020aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020aa6:	f001 be9b 	b.w	80227e0 <_write_r>

08020aaa <__sseek>:
 8020aaa:	b510      	push	{r4, lr}
 8020aac:	460c      	mov	r4, r1
 8020aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ab2:	f002 f9a5 	bl	8022e00 <_lseek_r>
 8020ab6:	1c43      	adds	r3, r0, #1
 8020ab8:	89a3      	ldrh	r3, [r4, #12]
 8020aba:	bf15      	itete	ne
 8020abc:	6520      	strne	r0, [r4, #80]	; 0x50
 8020abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020ac6:	81a3      	strheq	r3, [r4, #12]
 8020ac8:	bf18      	it	ne
 8020aca:	81a3      	strhne	r3, [r4, #12]
 8020acc:	bd10      	pop	{r4, pc}

08020ace <__sclose>:
 8020ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ad2:	f001 bf23 	b.w	802291c <_close_r>

08020ad6 <strcpy>:
 8020ad6:	4603      	mov	r3, r0
 8020ad8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020adc:	f803 2b01 	strb.w	r2, [r3], #1
 8020ae0:	2a00      	cmp	r2, #0
 8020ae2:	d1f9      	bne.n	8020ad8 <strcpy+0x2>
 8020ae4:	4770      	bx	lr
	...

08020ae8 <_strtoul_l.isra.0>:
 8020ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020aec:	4e3b      	ldr	r6, [pc, #236]	; (8020bdc <_strtoul_l.isra.0+0xf4>)
 8020aee:	4686      	mov	lr, r0
 8020af0:	468c      	mov	ip, r1
 8020af2:	4660      	mov	r0, ip
 8020af4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020af8:	5da5      	ldrb	r5, [r4, r6]
 8020afa:	f015 0508 	ands.w	r5, r5, #8
 8020afe:	d1f8      	bne.n	8020af2 <_strtoul_l.isra.0+0xa>
 8020b00:	2c2d      	cmp	r4, #45	; 0x2d
 8020b02:	d134      	bne.n	8020b6e <_strtoul_l.isra.0+0x86>
 8020b04:	f89c 4000 	ldrb.w	r4, [ip]
 8020b08:	f04f 0801 	mov.w	r8, #1
 8020b0c:	f100 0c02 	add.w	ip, r0, #2
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	d05e      	beq.n	8020bd2 <_strtoul_l.isra.0+0xea>
 8020b14:	2b10      	cmp	r3, #16
 8020b16:	d10c      	bne.n	8020b32 <_strtoul_l.isra.0+0x4a>
 8020b18:	2c30      	cmp	r4, #48	; 0x30
 8020b1a:	d10a      	bne.n	8020b32 <_strtoul_l.isra.0+0x4a>
 8020b1c:	f89c 0000 	ldrb.w	r0, [ip]
 8020b20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020b24:	2858      	cmp	r0, #88	; 0x58
 8020b26:	d14f      	bne.n	8020bc8 <_strtoul_l.isra.0+0xe0>
 8020b28:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020b2c:	2310      	movs	r3, #16
 8020b2e:	f10c 0c02 	add.w	ip, ip, #2
 8020b32:	f04f 37ff 	mov.w	r7, #4294967295
 8020b36:	2500      	movs	r5, #0
 8020b38:	fbb7 f7f3 	udiv	r7, r7, r3
 8020b3c:	fb03 f907 	mul.w	r9, r3, r7
 8020b40:	ea6f 0909 	mvn.w	r9, r9
 8020b44:	4628      	mov	r0, r5
 8020b46:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020b4a:	2e09      	cmp	r6, #9
 8020b4c:	d818      	bhi.n	8020b80 <_strtoul_l.isra.0+0x98>
 8020b4e:	4634      	mov	r4, r6
 8020b50:	42a3      	cmp	r3, r4
 8020b52:	dd24      	ble.n	8020b9e <_strtoul_l.isra.0+0xb6>
 8020b54:	2d00      	cmp	r5, #0
 8020b56:	db1f      	blt.n	8020b98 <_strtoul_l.isra.0+0xb0>
 8020b58:	4287      	cmp	r7, r0
 8020b5a:	d31d      	bcc.n	8020b98 <_strtoul_l.isra.0+0xb0>
 8020b5c:	d101      	bne.n	8020b62 <_strtoul_l.isra.0+0x7a>
 8020b5e:	45a1      	cmp	r9, r4
 8020b60:	db1a      	blt.n	8020b98 <_strtoul_l.isra.0+0xb0>
 8020b62:	fb00 4003 	mla	r0, r0, r3, r4
 8020b66:	2501      	movs	r5, #1
 8020b68:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020b6c:	e7eb      	b.n	8020b46 <_strtoul_l.isra.0+0x5e>
 8020b6e:	2c2b      	cmp	r4, #43	; 0x2b
 8020b70:	bf08      	it	eq
 8020b72:	f89c 4000 	ldrbeq.w	r4, [ip]
 8020b76:	46a8      	mov	r8, r5
 8020b78:	bf08      	it	eq
 8020b7a:	f100 0c02 	addeq.w	ip, r0, #2
 8020b7e:	e7c7      	b.n	8020b10 <_strtoul_l.isra.0+0x28>
 8020b80:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020b84:	2e19      	cmp	r6, #25
 8020b86:	d801      	bhi.n	8020b8c <_strtoul_l.isra.0+0xa4>
 8020b88:	3c37      	subs	r4, #55	; 0x37
 8020b8a:	e7e1      	b.n	8020b50 <_strtoul_l.isra.0+0x68>
 8020b8c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020b90:	2e19      	cmp	r6, #25
 8020b92:	d804      	bhi.n	8020b9e <_strtoul_l.isra.0+0xb6>
 8020b94:	3c57      	subs	r4, #87	; 0x57
 8020b96:	e7db      	b.n	8020b50 <_strtoul_l.isra.0+0x68>
 8020b98:	f04f 35ff 	mov.w	r5, #4294967295
 8020b9c:	e7e4      	b.n	8020b68 <_strtoul_l.isra.0+0x80>
 8020b9e:	2d00      	cmp	r5, #0
 8020ba0:	da07      	bge.n	8020bb2 <_strtoul_l.isra.0+0xca>
 8020ba2:	2322      	movs	r3, #34	; 0x22
 8020ba4:	f8ce 3000 	str.w	r3, [lr]
 8020ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8020bac:	b942      	cbnz	r2, 8020bc0 <_strtoul_l.isra.0+0xd8>
 8020bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020bb2:	f1b8 0f00 	cmp.w	r8, #0
 8020bb6:	d000      	beq.n	8020bba <_strtoul_l.isra.0+0xd2>
 8020bb8:	4240      	negs	r0, r0
 8020bba:	2a00      	cmp	r2, #0
 8020bbc:	d0f7      	beq.n	8020bae <_strtoul_l.isra.0+0xc6>
 8020bbe:	b10d      	cbz	r5, 8020bc4 <_strtoul_l.isra.0+0xdc>
 8020bc0:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020bc4:	6011      	str	r1, [r2, #0]
 8020bc6:	e7f2      	b.n	8020bae <_strtoul_l.isra.0+0xc6>
 8020bc8:	2430      	movs	r4, #48	; 0x30
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	d1b1      	bne.n	8020b32 <_strtoul_l.isra.0+0x4a>
 8020bce:	2308      	movs	r3, #8
 8020bd0:	e7af      	b.n	8020b32 <_strtoul_l.isra.0+0x4a>
 8020bd2:	2c30      	cmp	r4, #48	; 0x30
 8020bd4:	d0a2      	beq.n	8020b1c <_strtoul_l.isra.0+0x34>
 8020bd6:	230a      	movs	r3, #10
 8020bd8:	e7ab      	b.n	8020b32 <_strtoul_l.isra.0+0x4a>
 8020bda:	bf00      	nop
 8020bdc:	080290b1 	.word	0x080290b1

08020be0 <_strtoul_r>:
 8020be0:	f7ff bf82 	b.w	8020ae8 <_strtoul_l.isra.0>

08020be4 <strtoul>:
 8020be4:	4613      	mov	r3, r2
 8020be6:	460a      	mov	r2, r1
 8020be8:	4601      	mov	r1, r0
 8020bea:	4802      	ldr	r0, [pc, #8]	; (8020bf4 <strtoul+0x10>)
 8020bec:	6800      	ldr	r0, [r0, #0]
 8020bee:	f7ff bf7b 	b.w	8020ae8 <_strtoul_l.isra.0>
 8020bf2:	bf00      	nop
 8020bf4:	20000038 	.word	0x20000038

08020bf8 <__ssprint_r>:
 8020bf8:	6893      	ldr	r3, [r2, #8]
 8020bfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bfe:	4680      	mov	r8, r0
 8020c00:	460c      	mov	r4, r1
 8020c02:	4617      	mov	r7, r2
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	d061      	beq.n	8020ccc <__ssprint_r+0xd4>
 8020c08:	2300      	movs	r3, #0
 8020c0a:	f8d2 a000 	ldr.w	sl, [r2]
 8020c0e:	9301      	str	r3, [sp, #4]
 8020c10:	469b      	mov	fp, r3
 8020c12:	f1bb 0f00 	cmp.w	fp, #0
 8020c16:	d02b      	beq.n	8020c70 <__ssprint_r+0x78>
 8020c18:	68a6      	ldr	r6, [r4, #8]
 8020c1a:	45b3      	cmp	fp, r6
 8020c1c:	d342      	bcc.n	8020ca4 <__ssprint_r+0xac>
 8020c1e:	89a2      	ldrh	r2, [r4, #12]
 8020c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020c24:	d03e      	beq.n	8020ca4 <__ssprint_r+0xac>
 8020c26:	6825      	ldr	r5, [r4, #0]
 8020c28:	6921      	ldr	r1, [r4, #16]
 8020c2a:	eba5 0901 	sub.w	r9, r5, r1
 8020c2e:	6965      	ldr	r5, [r4, #20]
 8020c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020c34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020c38:	f109 0001 	add.w	r0, r9, #1
 8020c3c:	106d      	asrs	r5, r5, #1
 8020c3e:	4458      	add	r0, fp
 8020c40:	4285      	cmp	r5, r0
 8020c42:	bf38      	it	cc
 8020c44:	4605      	movcc	r5, r0
 8020c46:	0553      	lsls	r3, r2, #21
 8020c48:	d545      	bpl.n	8020cd6 <__ssprint_r+0xde>
 8020c4a:	4629      	mov	r1, r5
 8020c4c:	4640      	mov	r0, r8
 8020c4e:	f7ff f90b 	bl	801fe68 <_malloc_r>
 8020c52:	4606      	mov	r6, r0
 8020c54:	b9a0      	cbnz	r0, 8020c80 <__ssprint_r+0x88>
 8020c56:	230c      	movs	r3, #12
 8020c58:	f8c8 3000 	str.w	r3, [r8]
 8020c5c:	89a3      	ldrh	r3, [r4, #12]
 8020c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020c62:	81a3      	strh	r3, [r4, #12]
 8020c64:	2300      	movs	r3, #0
 8020c66:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8020c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8020c6e:	e02f      	b.n	8020cd0 <__ssprint_r+0xd8>
 8020c70:	f8da 3000 	ldr.w	r3, [sl]
 8020c74:	f8da b004 	ldr.w	fp, [sl, #4]
 8020c78:	9301      	str	r3, [sp, #4]
 8020c7a:	f10a 0a08 	add.w	sl, sl, #8
 8020c7e:	e7c8      	b.n	8020c12 <__ssprint_r+0x1a>
 8020c80:	464a      	mov	r2, r9
 8020c82:	6921      	ldr	r1, [r4, #16]
 8020c84:	f7fa fba4 	bl	801b3d0 <memcpy>
 8020c88:	89a2      	ldrh	r2, [r4, #12]
 8020c8a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8020c8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8020c92:	81a2      	strh	r2, [r4, #12]
 8020c94:	6126      	str	r6, [r4, #16]
 8020c96:	6165      	str	r5, [r4, #20]
 8020c98:	444e      	add	r6, r9
 8020c9a:	eba5 0509 	sub.w	r5, r5, r9
 8020c9e:	6026      	str	r6, [r4, #0]
 8020ca0:	60a5      	str	r5, [r4, #8]
 8020ca2:	465e      	mov	r6, fp
 8020ca4:	455e      	cmp	r6, fp
 8020ca6:	bf28      	it	cs
 8020ca8:	465e      	movcs	r6, fp
 8020caa:	4632      	mov	r2, r6
 8020cac:	9901      	ldr	r1, [sp, #4]
 8020cae:	6820      	ldr	r0, [r4, #0]
 8020cb0:	f7fa fb9c 	bl	801b3ec <memmove>
 8020cb4:	68a2      	ldr	r2, [r4, #8]
 8020cb6:	1b92      	subs	r2, r2, r6
 8020cb8:	60a2      	str	r2, [r4, #8]
 8020cba:	6822      	ldr	r2, [r4, #0]
 8020cbc:	4432      	add	r2, r6
 8020cbe:	6022      	str	r2, [r4, #0]
 8020cc0:	68ba      	ldr	r2, [r7, #8]
 8020cc2:	eba2 030b 	sub.w	r3, r2, fp
 8020cc6:	60bb      	str	r3, [r7, #8]
 8020cc8:	2b00      	cmp	r3, #0
 8020cca:	d1d1      	bne.n	8020c70 <__ssprint_r+0x78>
 8020ccc:	2000      	movs	r0, #0
 8020cce:	6078      	str	r0, [r7, #4]
 8020cd0:	b003      	add	sp, #12
 8020cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cd6:	462a      	mov	r2, r5
 8020cd8:	4640      	mov	r0, r8
 8020cda:	f002 f8e9 	bl	8022eb0 <_realloc_r>
 8020cde:	4606      	mov	r6, r0
 8020ce0:	2800      	cmp	r0, #0
 8020ce2:	d1d7      	bne.n	8020c94 <__ssprint_r+0x9c>
 8020ce4:	6921      	ldr	r1, [r4, #16]
 8020ce6:	4640      	mov	r0, r8
 8020ce8:	f7fe fe62 	bl	801f9b0 <_free_r>
 8020cec:	e7b3      	b.n	8020c56 <__ssprint_r+0x5e>

08020cee <_sungetc_r>:
 8020cee:	b538      	push	{r3, r4, r5, lr}
 8020cf0:	1c4b      	adds	r3, r1, #1
 8020cf2:	4614      	mov	r4, r2
 8020cf4:	d103      	bne.n	8020cfe <_sungetc_r+0x10>
 8020cf6:	f04f 35ff 	mov.w	r5, #4294967295
 8020cfa:	4628      	mov	r0, r5
 8020cfc:	bd38      	pop	{r3, r4, r5, pc}
 8020cfe:	8993      	ldrh	r3, [r2, #12]
 8020d00:	f023 0320 	bic.w	r3, r3, #32
 8020d04:	8193      	strh	r3, [r2, #12]
 8020d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020d08:	6852      	ldr	r2, [r2, #4]
 8020d0a:	b2cd      	uxtb	r5, r1
 8020d0c:	b18b      	cbz	r3, 8020d32 <_sungetc_r+0x44>
 8020d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020d10:	4293      	cmp	r3, r2
 8020d12:	dd08      	ble.n	8020d26 <_sungetc_r+0x38>
 8020d14:	6823      	ldr	r3, [r4, #0]
 8020d16:	1e5a      	subs	r2, r3, #1
 8020d18:	6022      	str	r2, [r4, #0]
 8020d1a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020d1e:	6863      	ldr	r3, [r4, #4]
 8020d20:	3301      	adds	r3, #1
 8020d22:	6063      	str	r3, [r4, #4]
 8020d24:	e7e9      	b.n	8020cfa <_sungetc_r+0xc>
 8020d26:	4621      	mov	r1, r4
 8020d28:	f001 f825 	bl	8021d76 <__submore>
 8020d2c:	2800      	cmp	r0, #0
 8020d2e:	d0f1      	beq.n	8020d14 <_sungetc_r+0x26>
 8020d30:	e7e1      	b.n	8020cf6 <_sungetc_r+0x8>
 8020d32:	6921      	ldr	r1, [r4, #16]
 8020d34:	6823      	ldr	r3, [r4, #0]
 8020d36:	b151      	cbz	r1, 8020d4e <_sungetc_r+0x60>
 8020d38:	4299      	cmp	r1, r3
 8020d3a:	d208      	bcs.n	8020d4e <_sungetc_r+0x60>
 8020d3c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020d40:	42a9      	cmp	r1, r5
 8020d42:	d104      	bne.n	8020d4e <_sungetc_r+0x60>
 8020d44:	3b01      	subs	r3, #1
 8020d46:	3201      	adds	r2, #1
 8020d48:	6023      	str	r3, [r4, #0]
 8020d4a:	6062      	str	r2, [r4, #4]
 8020d4c:	e7d5      	b.n	8020cfa <_sungetc_r+0xc>
 8020d4e:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8020d52:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8020d56:	6323      	str	r3, [r4, #48]	; 0x30
 8020d58:	2303      	movs	r3, #3
 8020d5a:	6363      	str	r3, [r4, #52]	; 0x34
 8020d5c:	4623      	mov	r3, r4
 8020d5e:	f803 5f42 	strb.w	r5, [r3, #66]!
 8020d62:	6023      	str	r3, [r4, #0]
 8020d64:	2301      	movs	r3, #1
 8020d66:	e7dc      	b.n	8020d22 <_sungetc_r+0x34>

08020d68 <__ssrefill_r>:
 8020d68:	b510      	push	{r4, lr}
 8020d6a:	460c      	mov	r4, r1
 8020d6c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8020d6e:	b169      	cbz	r1, 8020d8c <__ssrefill_r+0x24>
 8020d70:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8020d74:	4299      	cmp	r1, r3
 8020d76:	d001      	beq.n	8020d7c <__ssrefill_r+0x14>
 8020d78:	f7fe fe1a 	bl	801f9b0 <_free_r>
 8020d7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020d7e:	6063      	str	r3, [r4, #4]
 8020d80:	2000      	movs	r0, #0
 8020d82:	6320      	str	r0, [r4, #48]	; 0x30
 8020d84:	b113      	cbz	r3, 8020d8c <__ssrefill_r+0x24>
 8020d86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020d88:	6023      	str	r3, [r4, #0]
 8020d8a:	bd10      	pop	{r4, pc}
 8020d8c:	6923      	ldr	r3, [r4, #16]
 8020d8e:	6023      	str	r3, [r4, #0]
 8020d90:	2300      	movs	r3, #0
 8020d92:	6063      	str	r3, [r4, #4]
 8020d94:	89a3      	ldrh	r3, [r4, #12]
 8020d96:	f043 0320 	orr.w	r3, r3, #32
 8020d9a:	81a3      	strh	r3, [r4, #12]
 8020d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8020da0:	e7f3      	b.n	8020d8a <__ssrefill_r+0x22>

08020da2 <_sfread_r>:
 8020da2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020da6:	461f      	mov	r7, r3
 8020da8:	4613      	mov	r3, r2
 8020daa:	437b      	muls	r3, r7
 8020dac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020dae:	4682      	mov	sl, r0
 8020db0:	4688      	mov	r8, r1
 8020db2:	4691      	mov	r9, r2
 8020db4:	d027      	beq.n	8020e06 <_sfread_r+0x64>
 8020db6:	461e      	mov	r6, r3
 8020db8:	e9d4 1500 	ldrd	r1, r5, [r4]
 8020dbc:	42b5      	cmp	r5, r6
 8020dbe:	d30b      	bcc.n	8020dd8 <_sfread_r+0x36>
 8020dc0:	4632      	mov	r2, r6
 8020dc2:	4640      	mov	r0, r8
 8020dc4:	f7fa fb04 	bl	801b3d0 <memcpy>
 8020dc8:	6862      	ldr	r2, [r4, #4]
 8020dca:	1b92      	subs	r2, r2, r6
 8020dcc:	6062      	str	r2, [r4, #4]
 8020dce:	6822      	ldr	r2, [r4, #0]
 8020dd0:	4432      	add	r2, r6
 8020dd2:	6022      	str	r2, [r4, #0]
 8020dd4:	463b      	mov	r3, r7
 8020dd6:	e016      	b.n	8020e06 <_sfread_r+0x64>
 8020dd8:	462a      	mov	r2, r5
 8020dda:	4640      	mov	r0, r8
 8020ddc:	9301      	str	r3, [sp, #4]
 8020dde:	f7fa faf7 	bl	801b3d0 <memcpy>
 8020de2:	6822      	ldr	r2, [r4, #0]
 8020de4:	2300      	movs	r3, #0
 8020de6:	442a      	add	r2, r5
 8020de8:	6063      	str	r3, [r4, #4]
 8020dea:	6022      	str	r2, [r4, #0]
 8020dec:	4621      	mov	r1, r4
 8020dee:	4650      	mov	r0, sl
 8020df0:	f7ff ffba 	bl	8020d68 <__ssrefill_r>
 8020df4:	44a8      	add	r8, r5
 8020df6:	9b01      	ldr	r3, [sp, #4]
 8020df8:	eba6 0b05 	sub.w	fp, r6, r5
 8020dfc:	b138      	cbz	r0, 8020e0e <_sfread_r+0x6c>
 8020dfe:	441d      	add	r5, r3
 8020e00:	1bad      	subs	r5, r5, r6
 8020e02:	fbb5 f3f9 	udiv	r3, r5, r9
 8020e06:	4618      	mov	r0, r3
 8020e08:	b003      	add	sp, #12
 8020e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e0e:	465e      	mov	r6, fp
 8020e10:	e7d2      	b.n	8020db8 <_sfread_r+0x16>
	...

08020e14 <__ssvfiscanf_r>:
 8020e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e18:	ed2d 8b02 	vpush	{d8}
 8020e1c:	b0df      	sub	sp, #380	; 0x17c
 8020e1e:	461e      	mov	r6, r3
 8020e20:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8020e24:	af02      	add	r7, sp, #8
 8020e26:	049d      	lsls	r5, r3, #18
 8020e28:	ee08 0a10 	vmov	s16, r0
 8020e2c:	460c      	mov	r4, r1
 8020e2e:	613a      	str	r2, [r7, #16]
 8020e30:	d406      	bmi.n	8020e40 <__ssvfiscanf_r+0x2c>
 8020e32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020e36:	818b      	strh	r3, [r1, #12]
 8020e38:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8020e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020e3e:	664b      	str	r3, [r1, #100]	; 0x64
 8020e40:	2300      	movs	r3, #0
 8020e42:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8020e46:	617b      	str	r3, [r7, #20]
 8020e48:	469b      	mov	fp, r3
 8020e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8020e4e:	693a      	ldr	r2, [r7, #16]
 8020e50:	f812 3b01 	ldrb.w	r3, [r2], #1
 8020e54:	613a      	str	r2, [r7, #16]
 8020e56:	637b      	str	r3, [r7, #52]	; 0x34
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d035      	beq.n	8020ec8 <__ssvfiscanf_r+0xb4>
 8020e5c:	4a9f      	ldr	r2, [pc, #636]	; (80210dc <__ssvfiscanf_r+0x2c8>)
 8020e5e:	f813 9002 	ldrb.w	r9, [r3, r2]
 8020e62:	f019 0908 	ands.w	r9, r9, #8
 8020e66:	d019      	beq.n	8020e9c <__ssvfiscanf_r+0x88>
 8020e68:	6863      	ldr	r3, [r4, #4]
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	dd0e      	ble.n	8020e8c <__ssvfiscanf_r+0x78>
 8020e6e:	6823      	ldr	r3, [r4, #0]
 8020e70:	499a      	ldr	r1, [pc, #616]	; (80210dc <__ssvfiscanf_r+0x2c8>)
 8020e72:	781a      	ldrb	r2, [r3, #0]
 8020e74:	5c8a      	ldrb	r2, [r1, r2]
 8020e76:	0710      	lsls	r0, r2, #28
 8020e78:	d5e9      	bpl.n	8020e4e <__ssvfiscanf_r+0x3a>
 8020e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020e7c:	3201      	adds	r2, #1
 8020e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020e80:	6862      	ldr	r2, [r4, #4]
 8020e82:	3301      	adds	r3, #1
 8020e84:	3a01      	subs	r2, #1
 8020e86:	6062      	str	r2, [r4, #4]
 8020e88:	6023      	str	r3, [r4, #0]
 8020e8a:	e7ed      	b.n	8020e68 <__ssvfiscanf_r+0x54>
 8020e8c:	ee18 0a10 	vmov	r0, s16
 8020e90:	4621      	mov	r1, r4
 8020e92:	f7ff ff69 	bl	8020d68 <__ssrefill_r>
 8020e96:	2800      	cmp	r0, #0
 8020e98:	d0e9      	beq.n	8020e6e <__ssvfiscanf_r+0x5a>
 8020e9a:	e7d8      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 8020e9c:	2b25      	cmp	r3, #37	; 0x25
 8020e9e:	f040 809f 	bne.w	8020fe0 <__ssvfiscanf_r+0x1cc>
 8020ea2:	693b      	ldr	r3, [r7, #16]
 8020ea4:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 8020ea8:	220a      	movs	r2, #10
 8020eaa:	6939      	ldr	r1, [r7, #16]
 8020eac:	781d      	ldrb	r5, [r3, #0]
 8020eae:	3101      	adds	r1, #1
 8020eb0:	2d7a      	cmp	r5, #122	; 0x7a
 8020eb2:	6139      	str	r1, [r7, #16]
 8020eb4:	d808      	bhi.n	8020ec8 <__ssvfiscanf_r+0xb4>
 8020eb6:	2d42      	cmp	r5, #66	; 0x42
 8020eb8:	d80b      	bhi.n	8020ed2 <__ssvfiscanf_r+0xbe>
 8020eba:	2d2a      	cmp	r5, #42	; 0x2a
 8020ebc:	f000 80b9 	beq.w	8021032 <__ssvfiscanf_r+0x21e>
 8020ec0:	d87e      	bhi.n	8020fc0 <__ssvfiscanf_r+0x1ac>
 8020ec2:	2d25      	cmp	r5, #37	; 0x25
 8020ec4:	f000 808c 	beq.w	8020fe0 <__ssvfiscanf_r+0x1cc>
 8020ec8:	f1bb 0f00 	cmp.w	fp, #0
 8020ecc:	f000 815f 	beq.w	802118e <__ssvfiscanf_r+0x37a>
 8020ed0:	e158      	b.n	8021184 <__ssvfiscanf_r+0x370>
 8020ed2:	3d43      	subs	r5, #67	; 0x43
 8020ed4:	2d37      	cmp	r5, #55	; 0x37
 8020ed6:	d8f7      	bhi.n	8020ec8 <__ssvfiscanf_r+0xb4>
 8020ed8:	a101      	add	r1, pc, #4	; (adr r1, 8020ee0 <__ssvfiscanf_r+0xcc>)
 8020eda:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8020ede:	bf00      	nop
 8020ee0:	080211b3 	.word	0x080211b3
 8020ee4:	080210af 	.word	0x080210af
 8020ee8:	08020ec9 	.word	0x08020ec9
 8020eec:	08020ec9 	.word	0x08020ec9
 8020ef0:	08020ec9 	.word	0x08020ec9
 8020ef4:	08020ec9 	.word	0x08020ec9
 8020ef8:	08020ec9 	.word	0x08020ec9
 8020efc:	08020ec9 	.word	0x08020ec9
 8020f00:	08020ec9 	.word	0x08020ec9
 8020f04:	08021081 	.word	0x08021081
 8020f08:	08020ec9 	.word	0x08020ec9
 8020f0c:	08020ec9 	.word	0x08020ec9
 8020f10:	080210b7 	.word	0x080210b7
 8020f14:	08020ec9 	.word	0x08020ec9
 8020f18:	08020ec9 	.word	0x08020ec9
 8020f1c:	08020ec9 	.word	0x08020ec9
 8020f20:	080210e9 	.word	0x080210e9
 8020f24:	08020ec9 	.word	0x08020ec9
 8020f28:	08020ec9 	.word	0x08020ec9
 8020f2c:	08020ec9 	.word	0x08020ec9
 8020f30:	08020ec9 	.word	0x08020ec9
 8020f34:	080210cf 	.word	0x080210cf
 8020f38:	08020ec9 	.word	0x08020ec9
 8020f3c:	08020ec9 	.word	0x08020ec9
 8020f40:	0802119f 	.word	0x0802119f
 8020f44:	08020ec9 	.word	0x08020ec9
 8020f48:	08020ec9 	.word	0x08020ec9
 8020f4c:	08020ec9 	.word	0x08020ec9
 8020f50:	08020ec9 	.word	0x08020ec9
 8020f54:	08020ec9 	.word	0x08020ec9
 8020f58:	08020ec9 	.word	0x08020ec9
 8020f5c:	08020ec9 	.word	0x08020ec9
 8020f60:	080211b7 	.word	0x080211b7
 8020f64:	080210b3 	.word	0x080210b3
 8020f68:	08020ec9 	.word	0x08020ec9
 8020f6c:	08020ec9 	.word	0x08020ec9
 8020f70:	08020ec9 	.word	0x08020ec9
 8020f74:	08021065 	.word	0x08021065
 8020f78:	0802120b 	.word	0x0802120b
 8020f7c:	08021081 	.word	0x08021081
 8020f80:	08020ec9 	.word	0x08020ec9
 8020f84:	08021047 	.word	0x08021047
 8020f88:	08021091 	.word	0x08021091
 8020f8c:	080211c5 	.word	0x080211c5
 8020f90:	080210bb 	.word	0x080210bb
 8020f94:	080211bf 	.word	0x080211bf
 8020f98:	08020ec9 	.word	0x08020ec9
 8020f9c:	08020ec9 	.word	0x08020ec9
 8020fa0:	080210ed 	.word	0x080210ed
 8020fa4:	08021089 	.word	0x08021089
 8020fa8:	080210c7 	.word	0x080210c7
 8020fac:	08020ec9 	.word	0x08020ec9
 8020fb0:	08020ec9 	.word	0x08020ec9
 8020fb4:	080210cf 	.word	0x080210cf
 8020fb8:	08020ec9 	.word	0x08020ec9
 8020fbc:	08021089 	.word	0x08021089
 8020fc0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8020fc4:	2b09      	cmp	r3, #9
 8020fc6:	f63f af7f 	bhi.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8020fca:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8020fce:	f47f af7b 	bne.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8020fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fd4:	fb02 5503 	mla	r5, r2, r3, r5
 8020fd8:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8020fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8020fde:	e030      	b.n	8021042 <__ssvfiscanf_r+0x22e>
 8020fe0:	6863      	ldr	r3, [r4, #4]
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	dd10      	ble.n	8021008 <__ssvfiscanf_r+0x1f4>
 8020fe6:	6823      	ldr	r3, [r4, #0]
 8020fe8:	693a      	ldr	r2, [r7, #16]
 8020fea:	7819      	ldrb	r1, [r3, #0]
 8020fec:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8020ff0:	4291      	cmp	r1, r2
 8020ff2:	f47f af69 	bne.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8020ff6:	6862      	ldr	r2, [r4, #4]
 8020ff8:	3301      	adds	r3, #1
 8020ffa:	6023      	str	r3, [r4, #0]
 8020ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ffe:	3a01      	subs	r2, #1
 8021000:	6062      	str	r2, [r4, #4]
 8021002:	3301      	adds	r3, #1
 8021004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021006:	e722      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 8021008:	ee18 0a10 	vmov	r0, s16
 802100c:	4621      	mov	r1, r4
 802100e:	f7ff feab 	bl	8020d68 <__ssrefill_r>
 8021012:	2800      	cmp	r0, #0
 8021014:	d0e7      	beq.n	8020fe6 <__ssvfiscanf_r+0x1d2>
 8021016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021018:	b11b      	cbz	r3, 8021022 <__ssvfiscanf_r+0x20e>
 802101a:	89a3      	ldrh	r3, [r4, #12]
 802101c:	065b      	lsls	r3, r3, #25
 802101e:	f57f af53 	bpl.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8021022:	f1bb 0f00 	cmp.w	fp, #0
 8021026:	f040 80a1 	bne.w	802116c <__ssvfiscanf_r+0x358>
 802102a:	f04f 33ff 	mov.w	r3, #4294967295
 802102e:	627b      	str	r3, [r7, #36]	; 0x24
 8021030:	e0ad      	b.n	802118e <__ssvfiscanf_r+0x37a>
 8021032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021034:	ea53 0309 	orrs.w	r3, r3, r9
 8021038:	62bb      	str	r3, [r7, #40]	; 0x28
 802103a:	f47f af45 	bne.w	8020ec8 <__ssvfiscanf_r+0xb4>
 802103e:	f04f 0910 	mov.w	r9, #16
 8021042:	693b      	ldr	r3, [r7, #16]
 8021044:	e731      	b.n	8020eaa <__ssvfiscanf_r+0x96>
 8021046:	f019 0f0f 	tst.w	r9, #15
 802104a:	f47f af3d 	bne.w	8020ec8 <__ssvfiscanf_r+0xb4>
 802104e:	7859      	ldrb	r1, [r3, #1]
 8021050:	296c      	cmp	r1, #108	; 0x6c
 8021052:	d104      	bne.n	802105e <__ssvfiscanf_r+0x24a>
 8021054:	3302      	adds	r3, #2
 8021056:	613b      	str	r3, [r7, #16]
 8021058:	f049 0902 	orr.w	r9, r9, #2
 802105c:	e7f1      	b.n	8021042 <__ssvfiscanf_r+0x22e>
 802105e:	f049 0901 	orr.w	r9, r9, #1
 8021062:	e7ee      	b.n	8021042 <__ssvfiscanf_r+0x22e>
 8021064:	f019 0f0f 	tst.w	r9, #15
 8021068:	f47f af2e 	bne.w	8020ec8 <__ssvfiscanf_r+0xb4>
 802106c:	7859      	ldrb	r1, [r3, #1]
 802106e:	2968      	cmp	r1, #104	; 0x68
 8021070:	bf03      	ittte	eq
 8021072:	3302      	addeq	r3, #2
 8021074:	613b      	streq	r3, [r7, #16]
 8021076:	f049 0908 	orreq.w	r9, r9, #8
 802107a:	f049 0904 	orrne.w	r9, r9, #4
 802107e:	e7e0      	b.n	8021042 <__ssvfiscanf_r+0x22e>
 8021080:	f019 0f0f 	tst.w	r9, #15
 8021084:	d0e8      	beq.n	8021058 <__ssvfiscanf_r+0x244>
 8021086:	e71f      	b.n	8020ec8 <__ssvfiscanf_r+0xb4>
 8021088:	f019 0f0f 	tst.w	r9, #15
 802108c:	d0d9      	beq.n	8021042 <__ssvfiscanf_r+0x22e>
 802108e:	e71b      	b.n	8020ec8 <__ssvfiscanf_r+0xb4>
 8021090:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8021094:	f47f af18 	bne.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8021098:	f1bb 0f00 	cmp.w	fp, #0
 802109c:	d104      	bne.n	80210a8 <__ssvfiscanf_r+0x294>
 802109e:	b082      	sub	sp, #8
 80210a0:	f10d 0b08 	add.w	fp, sp, #8
 80210a4:	e9cb 3300 	strd	r3, r3, [fp]
 80210a8:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80210ac:	e7c9      	b.n	8021042 <__ssvfiscanf_r+0x22e>
 80210ae:	f049 0901 	orr.w	r9, r9, #1
 80210b2:	4b0b      	ldr	r3, [pc, #44]	; (80210e0 <__ssvfiscanf_r+0x2cc>)
 80210b4:	e008      	b.n	80210c8 <__ssvfiscanf_r+0x2b4>
 80210b6:	f049 0901 	orr.w	r9, r9, #1
 80210ba:	4b0a      	ldr	r3, [pc, #40]	; (80210e4 <__ssvfiscanf_r+0x2d0>)
 80210bc:	617b      	str	r3, [r7, #20]
 80210be:	2308      	movs	r3, #8
 80210c0:	61fb      	str	r3, [r7, #28]
 80210c2:	2503      	movs	r5, #3
 80210c4:	e013      	b.n	80210ee <__ssvfiscanf_r+0x2da>
 80210c6:	4b07      	ldr	r3, [pc, #28]	; (80210e4 <__ssvfiscanf_r+0x2d0>)
 80210c8:	617b      	str	r3, [r7, #20]
 80210ca:	230a      	movs	r3, #10
 80210cc:	e7f8      	b.n	80210c0 <__ssvfiscanf_r+0x2ac>
 80210ce:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 80210d2:	4b04      	ldr	r3, [pc, #16]	; (80210e4 <__ssvfiscanf_r+0x2d0>)
 80210d4:	617b      	str	r3, [r7, #20]
 80210d6:	2310      	movs	r3, #16
 80210d8:	e7f2      	b.n	80210c0 <__ssvfiscanf_r+0x2ac>
 80210da:	bf00      	nop
 80210dc:	080290b1 	.word	0x080290b1
 80210e0:	0801bba1 	.word	0x0801bba1
 80210e4:	08020be1 	.word	0x08020be1
 80210e8:	f049 0901 	orr.w	r9, r9, #1
 80210ec:	2502      	movs	r5, #2
 80210ee:	6863      	ldr	r3, [r4, #4]
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	f340 808e 	ble.w	8021212 <__ssvfiscanf_r+0x3fe>
 80210f6:	f019 0f40 	tst.w	r9, #64	; 0x40
 80210fa:	d106      	bne.n	802110a <__ssvfiscanf_r+0x2f6>
 80210fc:	6823      	ldr	r3, [r4, #0]
 80210fe:	49b3      	ldr	r1, [pc, #716]	; (80213cc <__ssvfiscanf_r+0x5b8>)
 8021100:	781a      	ldrb	r2, [r3, #0]
 8021102:	5c52      	ldrb	r2, [r2, r1]
 8021104:	0711      	lsls	r1, r2, #28
 8021106:	f100 808d 	bmi.w	8021224 <__ssvfiscanf_r+0x410>
 802110a:	2d02      	cmp	r5, #2
 802110c:	f000 8394 	beq.w	8021838 <__ssvfiscanf_r+0xa24>
 8021110:	2d03      	cmp	r5, #3
 8021112:	f000 8535 	beq.w	8021b80 <__ssvfiscanf_r+0xd6c>
 8021116:	f009 0310 	and.w	r3, r9, #16
 802111a:	2d01      	cmp	r5, #1
 802111c:	61bb      	str	r3, [r7, #24]
 802111e:	f009 0301 	and.w	r3, r9, #1
 8021122:	f000 81cc 	beq.w	80214be <__ssvfiscanf_r+0x6aa>
 8021126:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8021128:	2d01      	cmp	r5, #1
 802112a:	bf38      	it	cc
 802112c:	2501      	movcc	r5, #1
 802112e:	2b00      	cmp	r3, #0
 8021130:	f000 8150 	beq.w	80213d4 <__ssvfiscanf_r+0x5c0>
 8021134:	69bb      	ldr	r3, [r7, #24]
 8021136:	2b00      	cmp	r3, #0
 8021138:	f040 810d 	bne.w	8021356 <__ssvfiscanf_r+0x542>
 802113c:	4633      	mov	r3, r6
 802113e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021142:	f853 6b04 	ldr.w	r6, [r3], #4
 8021146:	62bb      	str	r3, [r7, #40]	; 0x28
 8021148:	f000 810c 	beq.w	8021364 <__ssvfiscanf_r+0x550>
 802114c:	b146      	cbz	r6, 8021160 <__ssvfiscanf_r+0x34c>
 802114e:	2080      	movs	r0, #128	; 0x80
 8021150:	f7fe fe7a 	bl	801fe48 <malloc>
 8021154:	4680      	mov	r8, r0
 8021156:	2800      	cmp	r0, #0
 8021158:	d178      	bne.n	802124c <__ssvfiscanf_r+0x438>
 802115a:	f04f 33ff 	mov.w	r3, #4294967295
 802115e:	627b      	str	r3, [r7, #36]	; 0x24
 8021160:	f1bb 0f00 	cmp.w	fp, #0
 8021164:	d013      	beq.n	802118e <__ssvfiscanf_r+0x37a>
 8021166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021168:	3301      	adds	r3, #1
 802116a:	d10b      	bne.n	8021184 <__ssvfiscanf_r+0x370>
 802116c:	2400      	movs	r4, #0
 802116e:	4626      	mov	r6, r4
 8021170:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8021174:	f8db 5000 	ldr.w	r5, [fp]
 8021178:	42a3      	cmp	r3, r4
 802117a:	f300 85df 	bgt.w	8021d3c <__ssvfiscanf_r+0xf28>
 802117e:	f04f 33ff 	mov.w	r3, #4294967295
 8021182:	627b      	str	r3, [r7, #36]	; 0x24
 8021184:	f8db 0000 	ldr.w	r0, [fp]
 8021188:	b108      	cbz	r0, 802118e <__ssvfiscanf_r+0x37a>
 802118a:	f7fe fe65 	bl	801fe58 <free>
 802118e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021190:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8021194:	46bd      	mov	sp, r7
 8021196:	ecbd 8b02 	vpop	{d8}
 802119a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802119e:	6939      	ldr	r1, [r7, #16]
 80211a0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80211a4:	f002 f82a 	bl	80231fc <__sccl>
 80211a8:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80211ac:	6138      	str	r0, [r7, #16]
 80211ae:	2501      	movs	r5, #1
 80211b0:	e79d      	b.n	80210ee <__ssvfiscanf_r+0x2da>
 80211b2:	f049 0901 	orr.w	r9, r9, #1
 80211b6:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80211ba:	2500      	movs	r5, #0
 80211bc:	e797      	b.n	80210ee <__ssvfiscanf_r+0x2da>
 80211be:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 80211c2:	e786      	b.n	80210d2 <__ssvfiscanf_r+0x2be>
 80211c4:	f019 0f10 	tst.w	r9, #16
 80211c8:	f47f ae41 	bne.w	8020e4e <__ssvfiscanf_r+0x3a>
 80211cc:	f019 0f08 	tst.w	r9, #8
 80211d0:	f856 1b04 	ldr.w	r1, [r6], #4
 80211d4:	d002      	beq.n	80211dc <__ssvfiscanf_r+0x3c8>
 80211d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211d8:	700b      	strb	r3, [r1, #0]
 80211da:	e638      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 80211dc:	f019 0f04 	tst.w	r9, #4
 80211e0:	d002      	beq.n	80211e8 <__ssvfiscanf_r+0x3d4>
 80211e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211e4:	800b      	strh	r3, [r1, #0]
 80211e6:	e632      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 80211e8:	f019 0f01 	tst.w	r9, #1
 80211ec:	d002      	beq.n	80211f4 <__ssvfiscanf_r+0x3e0>
 80211ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211f0:	600b      	str	r3, [r1, #0]
 80211f2:	e62c      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 80211f4:	f019 0f02 	tst.w	r9, #2
 80211f8:	d0f9      	beq.n	80211ee <__ssvfiscanf_r+0x3da>
 80211fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211fc:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8021200:	461a      	mov	r2, r3
 8021202:	464b      	mov	r3, r9
 8021204:	e9c1 2300 	strd	r2, r3, [r1]
 8021208:	e621      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 802120a:	4b71      	ldr	r3, [pc, #452]	; (80213d0 <__ssvfiscanf_r+0x5bc>)
 802120c:	617b      	str	r3, [r7, #20]
 802120e:	2300      	movs	r3, #0
 8021210:	e756      	b.n	80210c0 <__ssvfiscanf_r+0x2ac>
 8021212:	ee18 0a10 	vmov	r0, s16
 8021216:	4621      	mov	r1, r4
 8021218:	f7ff fda6 	bl	8020d68 <__ssrefill_r>
 802121c:	2800      	cmp	r0, #0
 802121e:	f43f af6a 	beq.w	80210f6 <__ssvfiscanf_r+0x2e2>
 8021222:	e6f8      	b.n	8021016 <__ssvfiscanf_r+0x202>
 8021224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021226:	3201      	adds	r2, #1
 8021228:	62fa      	str	r2, [r7, #44]	; 0x2c
 802122a:	6862      	ldr	r2, [r4, #4]
 802122c:	3a01      	subs	r2, #1
 802122e:	2a00      	cmp	r2, #0
 8021230:	6062      	str	r2, [r4, #4]
 8021232:	dd02      	ble.n	802123a <__ssvfiscanf_r+0x426>
 8021234:	3301      	adds	r3, #1
 8021236:	6023      	str	r3, [r4, #0]
 8021238:	e760      	b.n	80210fc <__ssvfiscanf_r+0x2e8>
 802123a:	ee18 0a10 	vmov	r0, s16
 802123e:	4621      	mov	r1, r4
 8021240:	f7ff fd92 	bl	8020d68 <__ssrefill_r>
 8021244:	2800      	cmp	r0, #0
 8021246:	f43f af59 	beq.w	80210fc <__ssvfiscanf_r+0x2e8>
 802124a:	e6e4      	b.n	8021016 <__ssvfiscanf_r+0x202>
 802124c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021250:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8021254:	6030      	str	r0, [r6, #0]
 8021256:	45ca      	cmp	sl, r9
 8021258:	d313      	bcc.n	8021282 <__ssvfiscanf_r+0x46e>
 802125a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 802125e:	4599      	cmp	r9, r3
 8021260:	f63f af7b 	bhi.w	802115a <__ssvfiscanf_r+0x346>
 8021264:	f109 0908 	add.w	r9, r9, #8
 8021268:	f8db 0000 	ldr.w	r0, [fp]
 802126c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8021270:	f001 fe16 	bl	8022ea0 <realloc>
 8021274:	2800      	cmp	r0, #0
 8021276:	f43f af70 	beq.w	802115a <__ssvfiscanf_r+0x346>
 802127a:	f8cb 0000 	str.w	r0, [fp]
 802127e:	f8ab 9004 	strh.w	r9, [fp, #4]
 8021282:	f8db 3000 	ldr.w	r3, [fp]
 8021286:	f10a 0201 	add.w	r2, sl, #1
 802128a:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 802128e:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021292:	46b2      	mov	sl, r6
 8021294:	f04f 0920 	mov.w	r9, #32
 8021298:	4646      	mov	r6, r8
 802129a:	2200      	movs	r2, #0
 802129c:	60fa      	str	r2, [r7, #12]
 802129e:	f001 fda9 	bl	8022df4 <__locale_mb_cur_max>
 80212a2:	68fa      	ldr	r2, [r7, #12]
 80212a4:	4290      	cmp	r0, r2
 80212a6:	f43f aeb6 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 80212aa:	6821      	ldr	r1, [r4, #0]
 80212ac:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80212b0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80212b4:	f80c 0002 	strb.w	r0, [ip, r2]
 80212b8:	1c53      	adds	r3, r2, #1
 80212ba:	6862      	ldr	r2, [r4, #4]
 80212bc:	3a01      	subs	r2, #1
 80212be:	e9c4 1200 	strd	r1, r2, [r4]
 80212c2:	6a3a      	ldr	r2, [r7, #32]
 80212c4:	2a03      	cmp	r2, #3
 80212c6:	d102      	bne.n	80212ce <__ssvfiscanf_r+0x4ba>
 80212c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80212ca:	2a04      	cmp	r2, #4
 80212cc:	d007      	beq.n	80212de <__ssvfiscanf_r+0x4ca>
 80212ce:	2208      	movs	r2, #8
 80212d0:	2100      	movs	r1, #0
 80212d2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80212d6:	623b      	str	r3, [r7, #32]
 80212d8:	f7fa f8a2 	bl	801b420 <memset>
 80212dc:	6a3b      	ldr	r3, [r7, #32]
 80212de:	60fb      	str	r3, [r7, #12]
 80212e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80212e4:	9200      	str	r2, [sp, #0]
 80212e6:	ee18 0a10 	vmov	r0, s16
 80212ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80212ee:	4631      	mov	r1, r6
 80212f0:	f001 fd98 	bl	8022e24 <_mbrtowc_r>
 80212f4:	1c42      	adds	r2, r0, #1
 80212f6:	6238      	str	r0, [r7, #32]
 80212f8:	f43f ae8d 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 80212fc:	68fb      	ldr	r3, [r7, #12]
 80212fe:	2800      	cmp	r0, #0
 8021300:	d135      	bne.n	802136e <__ssvfiscanf_r+0x55a>
 8021302:	69ba      	ldr	r2, [r7, #24]
 8021304:	b902      	cbnz	r2, 8021308 <__ssvfiscanf_r+0x4f4>
 8021306:	6032      	str	r2, [r6, #0]
 8021308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802130a:	441a      	add	r2, r3
 802130c:	6a3b      	ldr	r3, [r7, #32]
 802130e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8021310:	2b03      	cmp	r3, #3
 8021312:	d102      	bne.n	802131a <__ssvfiscanf_r+0x506>
 8021314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021316:	2b04      	cmp	r3, #4
 8021318:	d000      	beq.n	802131c <__ssvfiscanf_r+0x508>
 802131a:	3d01      	subs	r5, #1
 802131c:	69bb      	ldr	r3, [r7, #24]
 802131e:	b9c3      	cbnz	r3, 8021352 <__ssvfiscanf_r+0x53e>
 8021320:	f1ba 0f00 	cmp.w	sl, #0
 8021324:	d014      	beq.n	8021350 <__ssvfiscanf_r+0x53c>
 8021326:	eba6 0308 	sub.w	r3, r6, r8
 802132a:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802132e:	d80f      	bhi.n	8021350 <__ssvfiscanf_r+0x53c>
 8021330:	4640      	mov	r0, r8
 8021332:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021336:	60fb      	str	r3, [r7, #12]
 8021338:	f001 fdb2 	bl	8022ea0 <realloc>
 802133c:	4680      	mov	r8, r0
 802133e:	2800      	cmp	r0, #0
 8021340:	f43f af0b 	beq.w	802115a <__ssvfiscanf_r+0x346>
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	f8ca 0000 	str.w	r0, [sl]
 802134a:	18c6      	adds	r6, r0, r3
 802134c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021350:	3604      	adds	r6, #4
 8021352:	2200      	movs	r2, #0
 8021354:	e00f      	b.n	8021376 <__ssvfiscanf_r+0x562>
 8021356:	f04f 0900 	mov.w	r9, #0
 802135a:	62be      	str	r6, [r7, #40]	; 0x28
 802135c:	46c8      	mov	r8, r9
 802135e:	46ca      	mov	sl, r9
 8021360:	464e      	mov	r6, r9
 8021362:	e79a      	b.n	802129a <__ssvfiscanf_r+0x486>
 8021364:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8021368:	46c8      	mov	r8, r9
 802136a:	46ca      	mov	sl, r9
 802136c:	e795      	b.n	802129a <__ssvfiscanf_r+0x486>
 802136e:	6a3a      	ldr	r2, [r7, #32]
 8021370:	3202      	adds	r2, #2
 8021372:	d1c9      	bne.n	8021308 <__ssvfiscanf_r+0x4f4>
 8021374:	461a      	mov	r2, r3
 8021376:	6863      	ldr	r3, [r4, #4]
 8021378:	2b00      	cmp	r3, #0
 802137a:	dc14      	bgt.n	80213a6 <__ssvfiscanf_r+0x592>
 802137c:	ee18 0a10 	vmov	r0, s16
 8021380:	4621      	mov	r1, r4
 8021382:	60fa      	str	r2, [r7, #12]
 8021384:	f7ff fcf0 	bl	8020d68 <__ssrefill_r>
 8021388:	68fa      	ldr	r2, [r7, #12]
 802138a:	b160      	cbz	r0, 80213a6 <__ssvfiscanf_r+0x592>
 802138c:	2a00      	cmp	r2, #0
 802138e:	f47f ae42 	bne.w	8021016 <__ssvfiscanf_r+0x202>
 8021392:	f1ba 0f00 	cmp.w	sl, #0
 8021396:	d10a      	bne.n	80213ae <__ssvfiscanf_r+0x59a>
 8021398:	69bb      	ldr	r3, [r7, #24]
 802139a:	b913      	cbnz	r3, 80213a2 <__ssvfiscanf_r+0x58e>
 802139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802139e:	3301      	adds	r3, #1
 80213a0:	627b      	str	r3, [r7, #36]	; 0x24
 80213a2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80213a4:	e553      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 80213a6:	2d00      	cmp	r5, #0
 80213a8:	f47f af78 	bne.w	802129c <__ssvfiscanf_r+0x488>
 80213ac:	e7f1      	b.n	8021392 <__ssvfiscanf_r+0x57e>
 80213ae:	eba6 0108 	sub.w	r1, r6, r8
 80213b2:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80213b6:	d9ef      	bls.n	8021398 <__ssvfiscanf_r+0x584>
 80213b8:	f8da 0000 	ldr.w	r0, [sl]
 80213bc:	f001 fd70 	bl	8022ea0 <realloc>
 80213c0:	2800      	cmp	r0, #0
 80213c2:	d0e9      	beq.n	8021398 <__ssvfiscanf_r+0x584>
 80213c4:	f8ca 0000 	str.w	r0, [sl]
 80213c8:	e7e6      	b.n	8021398 <__ssvfiscanf_r+0x584>
 80213ca:	bf00      	nop
 80213cc:	080290b1 	.word	0x080290b1
 80213d0:	0801bba1 	.word	0x0801bba1
 80213d4:	69ba      	ldr	r2, [r7, #24]
 80213d6:	b1e2      	cbz	r2, 8021412 <__ssvfiscanf_r+0x5fe>
 80213d8:	4698      	mov	r8, r3
 80213da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80213de:	429d      	cmp	r5, r3
 80213e0:	dd11      	ble.n	8021406 <__ssvfiscanf_r+0x5f2>
 80213e2:	4498      	add	r8, r3
 80213e4:	1aed      	subs	r5, r5, r3
 80213e6:	4413      	add	r3, r2
 80213e8:	ee18 0a10 	vmov	r0, s16
 80213ec:	6023      	str	r3, [r4, #0]
 80213ee:	4621      	mov	r1, r4
 80213f0:	f7ff fcba 	bl	8020d68 <__ssrefill_r>
 80213f4:	2800      	cmp	r0, #0
 80213f6:	d0f0      	beq.n	80213da <__ssvfiscanf_r+0x5c6>
 80213f8:	f1b8 0f00 	cmp.w	r8, #0
 80213fc:	f43f ae0b 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 8021400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021402:	4443      	add	r3, r8
 8021404:	e5fe      	b.n	8021004 <__ssvfiscanf_r+0x1f0>
 8021406:	1b5b      	subs	r3, r3, r5
 8021408:	44a8      	add	r8, r5
 802140a:	4415      	add	r5, r2
 802140c:	6063      	str	r3, [r4, #4]
 802140e:	6025      	str	r5, [r4, #0]
 8021410:	e7f6      	b.n	8021400 <__ssvfiscanf_r+0x5ec>
 8021412:	46b0      	mov	r8, r6
 8021414:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8021418:	f858 6b04 	ldr.w	r6, [r8], #4
 802141c:	d02e      	beq.n	802147c <__ssvfiscanf_r+0x668>
 802141e:	2e00      	cmp	r6, #0
 8021420:	f43f ad52 	beq.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8021424:	4628      	mov	r0, r5
 8021426:	f7fe fd0f 	bl	801fe48 <malloc>
 802142a:	62b8      	str	r0, [r7, #40]	; 0x28
 802142c:	2800      	cmp	r0, #0
 802142e:	f43f adf8 	beq.w	8021022 <__ssvfiscanf_r+0x20e>
 8021432:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021436:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 802143a:	6030      	str	r0, [r6, #0]
 802143c:	45ca      	cmp	sl, r9
 802143e:	d313      	bcc.n	8021468 <__ssvfiscanf_r+0x654>
 8021440:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021444:	4599      	cmp	r9, r3
 8021446:	f63f ae91 	bhi.w	802116c <__ssvfiscanf_r+0x358>
 802144a:	f109 0908 	add.w	r9, r9, #8
 802144e:	f8db 0000 	ldr.w	r0, [fp]
 8021452:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8021456:	f001 fd23 	bl	8022ea0 <realloc>
 802145a:	2800      	cmp	r0, #0
 802145c:	f43f ae86 	beq.w	802116c <__ssvfiscanf_r+0x358>
 8021460:	f8cb 0000 	str.w	r0, [fp]
 8021464:	f8ab 9004 	strh.w	r9, [fp, #4]
 8021468:	f8db 3000 	ldr.w	r3, [fp]
 802146c:	f10a 0201 	add.w	r2, sl, #1
 8021470:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8021474:	46b1      	mov	r9, r6
 8021476:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8021478:	f8ab 2006 	strh.w	r2, [fp, #6]
 802147c:	4631      	mov	r1, r6
 802147e:	ee18 0a10 	vmov	r0, s16
 8021482:	9400      	str	r4, [sp, #0]
 8021484:	462b      	mov	r3, r5
 8021486:	2201      	movs	r2, #1
 8021488:	f7ff fc8b 	bl	8020da2 <_sfread_r>
 802148c:	4606      	mov	r6, r0
 802148e:	2800      	cmp	r0, #0
 8021490:	f43f adc1 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 8021494:	f1b9 0f00 	cmp.w	r9, #0
 8021498:	d009      	beq.n	80214ae <__ssvfiscanf_r+0x69a>
 802149a:	4285      	cmp	r5, r0
 802149c:	d907      	bls.n	80214ae <__ssvfiscanf_r+0x69a>
 802149e:	4601      	mov	r1, r0
 80214a0:	f8d9 0000 	ldr.w	r0, [r9]
 80214a4:	f001 fcfc 	bl	8022ea0 <realloc>
 80214a8:	b108      	cbz	r0, 80214ae <__ssvfiscanf_r+0x69a>
 80214aa:	f8c9 0000 	str.w	r0, [r9]
 80214ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214b0:	4433      	add	r3, r6
 80214b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80214b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214b6:	3301      	adds	r3, #1
 80214b8:	627b      	str	r3, [r7, #36]	; 0x24
 80214ba:	4646      	mov	r6, r8
 80214bc:	e4c7      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 80214be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80214c0:	2a00      	cmp	r2, #0
 80214c2:	bf08      	it	eq
 80214c4:	f04f 32ff 	moveq.w	r2, #4294967295
 80214c8:	461d      	mov	r5, r3
 80214ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80214cc:	69bb      	ldr	r3, [r7, #24]
 80214ce:	2d00      	cmp	r5, #0
 80214d0:	f000 8105 	beq.w	80216de <__ssvfiscanf_r+0x8ca>
 80214d4:	2b00      	cmp	r3, #0
 80214d6:	f040 80a5 	bne.w	8021624 <__ssvfiscanf_r+0x810>
 80214da:	4633      	mov	r3, r6
 80214dc:	f019 0f80 	tst.w	r9, #128	; 0x80
 80214e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80214e4:	607b      	str	r3, [r7, #4]
 80214e6:	f000 80a6 	beq.w	8021636 <__ssvfiscanf_r+0x822>
 80214ea:	2d00      	cmp	r5, #0
 80214ec:	f43f ae38 	beq.w	8021160 <__ssvfiscanf_r+0x34c>
 80214f0:	2080      	movs	r0, #128	; 0x80
 80214f2:	f7fe fca9 	bl	801fe48 <malloc>
 80214f6:	4680      	mov	r8, r0
 80214f8:	2800      	cmp	r0, #0
 80214fa:	f43f ae2e 	beq.w	802115a <__ssvfiscanf_r+0x346>
 80214fe:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8021502:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8021506:	6028      	str	r0, [r5, #0]
 8021508:	45b1      	cmp	r9, r6
 802150a:	d311      	bcc.n	8021530 <__ssvfiscanf_r+0x71c>
 802150c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021510:	429e      	cmp	r6, r3
 8021512:	f63f ae22 	bhi.w	802115a <__ssvfiscanf_r+0x346>
 8021516:	3608      	adds	r6, #8
 8021518:	f8db 0000 	ldr.w	r0, [fp]
 802151c:	00b1      	lsls	r1, r6, #2
 802151e:	f001 fcbf 	bl	8022ea0 <realloc>
 8021522:	2800      	cmp	r0, #0
 8021524:	f43f ae19 	beq.w	802115a <__ssvfiscanf_r+0x346>
 8021528:	f8cb 0000 	str.w	r0, [fp]
 802152c:	f8ab 6004 	strh.w	r6, [fp, #4]
 8021530:	f8db 3000 	ldr.w	r3, [fp]
 8021534:	60fd      	str	r5, [r7, #12]
 8021536:	f109 0201 	add.w	r2, r9, #1
 802153a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802153e:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021542:	4645      	mov	r5, r8
 8021544:	f04f 0920 	mov.w	r9, #32
 8021548:	2600      	movs	r6, #0
 802154a:	f001 fc53 	bl	8022df4 <__locale_mb_cur_max>
 802154e:	42b0      	cmp	r0, r6
 8021550:	f43f ad61 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 8021554:	1c73      	adds	r3, r6, #1
 8021556:	60bb      	str	r3, [r7, #8]
 8021558:	6823      	ldr	r3, [r4, #0]
 802155a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802155e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021562:	558a      	strb	r2, [r1, r6]
 8021564:	6862      	ldr	r2, [r4, #4]
 8021566:	3a01      	subs	r2, #1
 8021568:	e9c4 3200 	strd	r3, r2, [r4]
 802156c:	6a3b      	ldr	r3, [r7, #32]
 802156e:	2b03      	cmp	r3, #3
 8021570:	d102      	bne.n	8021578 <__ssvfiscanf_r+0x764>
 8021572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021574:	2b04      	cmp	r3, #4
 8021576:	d005      	beq.n	8021584 <__ssvfiscanf_r+0x770>
 8021578:	2208      	movs	r2, #8
 802157a:	2100      	movs	r1, #0
 802157c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8021580:	f7f9 ff4e 	bl	801b420 <memset>
 8021584:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021588:	9300      	str	r3, [sp, #0]
 802158a:	ee18 0a10 	vmov	r0, s16
 802158e:	68bb      	ldr	r3, [r7, #8]
 8021590:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8021594:	4629      	mov	r1, r5
 8021596:	f001 fc45 	bl	8022e24 <_mbrtowc_r>
 802159a:	4603      	mov	r3, r0
 802159c:	6238      	str	r0, [r7, #32]
 802159e:	1c58      	adds	r0, r3, #1
 80215a0:	f43f ad39 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d14c      	bne.n	8021642 <__ssvfiscanf_r+0x82e>
 80215a8:	602b      	str	r3, [r5, #0]
 80215aa:	682e      	ldr	r6, [r5, #0]
 80215ac:	1c71      	adds	r1, r6, #1
 80215ae:	d059      	beq.n	8021664 <__ssvfiscanf_r+0x850>
 80215b0:	2208      	movs	r2, #8
 80215b2:	2100      	movs	r1, #0
 80215b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80215b8:	f7f9 ff32 	bl	801b420 <memset>
 80215bc:	4b9d      	ldr	r3, [pc, #628]	; (8021834 <__ssvfiscanf_r+0xa20>)
 80215be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80215c2:	603b      	str	r3, [r7, #0]
 80215c4:	4632      	mov	r2, r6
 80215c6:	ee18 0a10 	vmov	r0, s16
 80215ca:	683e      	ldr	r6, [r7, #0]
 80215cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80215d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80215d4:	47b0      	blx	r6
 80215d6:	2801      	cmp	r0, #1
 80215d8:	d146      	bne.n	8021668 <__ssvfiscanf_r+0x854>
 80215da:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 80215de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80215e2:	f813 300a 	ldrb.w	r3, [r3, sl]
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d14b      	bne.n	8021682 <__ssvfiscanf_r+0x86e>
 80215ea:	f107 0648 	add.w	r6, r7, #72	; 0x48
 80215ee:	68bb      	ldr	r3, [r7, #8]
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	d13c      	bne.n	802166e <__ssvfiscanf_r+0x85a>
 80215f4:	69bb      	ldr	r3, [r7, #24]
 80215f6:	b99b      	cbnz	r3, 8021620 <__ssvfiscanf_r+0x80c>
 80215f8:	602b      	str	r3, [r5, #0]
 80215fa:	68fb      	ldr	r3, [r7, #12]
 80215fc:	b16b      	cbz	r3, 802161a <__ssvfiscanf_r+0x806>
 80215fe:	eba5 0108 	sub.w	r1, r5, r8
 8021602:	108b      	asrs	r3, r1, #2
 8021604:	3301      	adds	r3, #1
 8021606:	4599      	cmp	r9, r3
 8021608:	d907      	bls.n	802161a <__ssvfiscanf_r+0x806>
 802160a:	68fb      	ldr	r3, [r7, #12]
 802160c:	3104      	adds	r1, #4
 802160e:	6818      	ldr	r0, [r3, #0]
 8021610:	f001 fc46 	bl	8022ea0 <realloc>
 8021614:	b108      	cbz	r0, 802161a <__ssvfiscanf_r+0x806>
 8021616:	68fb      	ldr	r3, [r7, #12]
 8021618:	6018      	str	r0, [r3, #0]
 802161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802161c:	3301      	adds	r3, #1
 802161e:	627b      	str	r3, [r7, #36]	; 0x24
 8021620:	687e      	ldr	r6, [r7, #4]
 8021622:	e414      	b.n	8020e4e <__ssvfiscanf_r+0x3a>
 8021624:	f04f 0900 	mov.w	r9, #0
 8021628:	607e      	str	r6, [r7, #4]
 802162a:	46c8      	mov	r8, r9
 802162c:	f8c7 900c 	str.w	r9, [r7, #12]
 8021630:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8021634:	e788      	b.n	8021548 <__ssvfiscanf_r+0x734>
 8021636:	f8d7 9018 	ldr.w	r9, [r7, #24]
 802163a:	f8c7 900c 	str.w	r9, [r7, #12]
 802163e:	46c8      	mov	r8, r9
 8021640:	e782      	b.n	8021548 <__ssvfiscanf_r+0x734>
 8021642:	6a3b      	ldr	r3, [r7, #32]
 8021644:	3302      	adds	r3, #2
 8021646:	d1b0      	bne.n	80215aa <__ssvfiscanf_r+0x796>
 8021648:	68be      	ldr	r6, [r7, #8]
 802164a:	6863      	ldr	r3, [r4, #4]
 802164c:	2b00      	cmp	r3, #0
 802164e:	dc41      	bgt.n	80216d4 <__ssvfiscanf_r+0x8c0>
 8021650:	ee18 0a10 	vmov	r0, s16
 8021654:	4621      	mov	r1, r4
 8021656:	f7ff fb87 	bl	8020d68 <__ssrefill_r>
 802165a:	2800      	cmp	r0, #0
 802165c:	d03a      	beq.n	80216d4 <__ssvfiscanf_r+0x8c0>
 802165e:	2e00      	cmp	r6, #0
 8021660:	d0c8      	beq.n	80215f4 <__ssvfiscanf_r+0x7e0>
 8021662:	e4d8      	b.n	8021016 <__ssvfiscanf_r+0x202>
 8021664:	46b2      	mov	sl, r6
 8021666:	e7ba      	b.n	80215de <__ssvfiscanf_r+0x7ca>
 8021668:	f04f 0a00 	mov.w	sl, #0
 802166c:	e7b7      	b.n	80215de <__ssvfiscanf_r+0x7ca>
 802166e:	68bb      	ldr	r3, [r7, #8]
 8021670:	3b01      	subs	r3, #1
 8021672:	ee18 0a10 	vmov	r0, s16
 8021676:	5cf1      	ldrb	r1, [r6, r3]
 8021678:	60bb      	str	r3, [r7, #8]
 802167a:	4622      	mov	r2, r4
 802167c:	f7ff fb37 	bl	8020cee <_sungetc_r>
 8021680:	e7b5      	b.n	80215ee <__ssvfiscanf_r+0x7da>
 8021682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021684:	68ba      	ldr	r2, [r7, #8]
 8021686:	4413      	add	r3, r2
 8021688:	62fb      	str	r3, [r7, #44]	; 0x2c
 802168a:	6a3b      	ldr	r3, [r7, #32]
 802168c:	2b03      	cmp	r3, #3
 802168e:	d102      	bne.n	8021696 <__ssvfiscanf_r+0x882>
 8021690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021692:	2b04      	cmp	r3, #4
 8021694:	d002      	beq.n	802169c <__ssvfiscanf_r+0x888>
 8021696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021698:	3b01      	subs	r3, #1
 802169a:	62bb      	str	r3, [r7, #40]	; 0x28
 802169c:	69bb      	ldr	r3, [r7, #24]
 802169e:	b9bb      	cbnz	r3, 80216d0 <__ssvfiscanf_r+0x8bc>
 80216a0:	68fb      	ldr	r3, [r7, #12]
 80216a2:	3504      	adds	r5, #4
 80216a4:	b1a3      	cbz	r3, 80216d0 <__ssvfiscanf_r+0x8bc>
 80216a6:	eba5 0608 	sub.w	r6, r5, r8
 80216aa:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80216ae:	d80d      	bhi.n	80216cc <__ssvfiscanf_r+0x8b8>
 80216b0:	4640      	mov	r0, r8
 80216b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80216b6:	f001 fbf3 	bl	8022ea0 <realloc>
 80216ba:	4680      	mov	r8, r0
 80216bc:	2800      	cmp	r0, #0
 80216be:	f43f ad4c 	beq.w	802115a <__ssvfiscanf_r+0x346>
 80216c2:	68fb      	ldr	r3, [r7, #12]
 80216c4:	1985      	adds	r5, r0, r6
 80216c6:	6018      	str	r0, [r3, #0]
 80216c8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80216cc:	69be      	ldr	r6, [r7, #24]
 80216ce:	e7bc      	b.n	802164a <__ssvfiscanf_r+0x836>
 80216d0:	2600      	movs	r6, #0
 80216d2:	e7ba      	b.n	802164a <__ssvfiscanf_r+0x836>
 80216d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	f47f af37 	bne.w	802154a <__ssvfiscanf_r+0x736>
 80216dc:	e78a      	b.n	80215f4 <__ssvfiscanf_r+0x7e0>
 80216de:	b1f3      	cbz	r3, 802171e <__ssvfiscanf_r+0x90a>
 80216e0:	f107 0870 	add.w	r8, r7, #112	; 0x70
 80216e4:	6823      	ldr	r3, [r4, #0]
 80216e6:	781a      	ldrb	r2, [r3, #0]
 80216e8:	f818 2002 	ldrb.w	r2, [r8, r2]
 80216ec:	b912      	cbnz	r2, 80216f4 <__ssvfiscanf_r+0x8e0>
 80216ee:	b99d      	cbnz	r5, 8021718 <__ssvfiscanf_r+0x904>
 80216f0:	f7ff bbea 	b.w	8020ec8 <__ssvfiscanf_r+0xb4>
 80216f4:	3301      	adds	r3, #1
 80216f6:	6862      	ldr	r2, [r4, #4]
 80216f8:	6023      	str	r3, [r4, #0]
 80216fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216fc:	3501      	adds	r5, #1
 80216fe:	3a01      	subs	r2, #1
 8021700:	42ab      	cmp	r3, r5
 8021702:	6062      	str	r2, [r4, #4]
 8021704:	d008      	beq.n	8021718 <__ssvfiscanf_r+0x904>
 8021706:	2a00      	cmp	r2, #0
 8021708:	dcec      	bgt.n	80216e4 <__ssvfiscanf_r+0x8d0>
 802170a:	ee18 0a10 	vmov	r0, s16
 802170e:	4621      	mov	r1, r4
 8021710:	f7ff fb2a 	bl	8020d68 <__ssrefill_r>
 8021714:	2800      	cmp	r0, #0
 8021716:	d0e5      	beq.n	80216e4 <__ssvfiscanf_r+0x8d0>
 8021718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802171a:	442b      	add	r3, r5
 802171c:	e472      	b.n	8021004 <__ssvfiscanf_r+0x1f0>
 802171e:	4633      	mov	r3, r6
 8021720:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8021724:	f853 6b04 	ldr.w	r6, [r3], #4
 8021728:	61bb      	str	r3, [r7, #24]
 802172a:	f000 8081 	beq.w	8021830 <__ssvfiscanf_r+0xa1c>
 802172e:	2e00      	cmp	r6, #0
 8021730:	f43f abca 	beq.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8021734:	2020      	movs	r0, #32
 8021736:	f7fe fb87 	bl	801fe48 <malloc>
 802173a:	4680      	mov	r8, r0
 802173c:	2800      	cmp	r0, #0
 802173e:	f43f ac70 	beq.w	8021022 <__ssvfiscanf_r+0x20e>
 8021742:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8021746:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 802174a:	6030      	str	r0, [r6, #0]
 802174c:	45a9      	cmp	r9, r5
 802174e:	d311      	bcc.n	8021774 <__ssvfiscanf_r+0x960>
 8021750:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021754:	429d      	cmp	r5, r3
 8021756:	f63f ad09 	bhi.w	802116c <__ssvfiscanf_r+0x358>
 802175a:	3508      	adds	r5, #8
 802175c:	f8db 0000 	ldr.w	r0, [fp]
 8021760:	00a9      	lsls	r1, r5, #2
 8021762:	f001 fb9d 	bl	8022ea0 <realloc>
 8021766:	2800      	cmp	r0, #0
 8021768:	f43f ad00 	beq.w	802116c <__ssvfiscanf_r+0x358>
 802176c:	f8cb 0000 	str.w	r0, [fp]
 8021770:	f8ab 5004 	strh.w	r5, [fp, #4]
 8021774:	f8db 3000 	ldr.w	r3, [fp]
 8021778:	f109 0201 	add.w	r2, r9, #1
 802177c:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8021780:	46b2      	mov	sl, r6
 8021782:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021786:	4646      	mov	r6, r8
 8021788:	2520      	movs	r5, #32
 802178a:	46b0      	mov	r8, r6
 802178c:	f107 0970 	add.w	r9, r7, #112	; 0x70
 8021790:	6823      	ldr	r3, [r4, #0]
 8021792:	781a      	ldrb	r2, [r3, #0]
 8021794:	f819 2002 	ldrb.w	r2, [r9, r2]
 8021798:	b36a      	cbz	r2, 80217f6 <__ssvfiscanf_r+0x9e2>
 802179a:	6862      	ldr	r2, [r4, #4]
 802179c:	3a01      	subs	r2, #1
 802179e:	6062      	str	r2, [r4, #4]
 80217a0:	1c5a      	adds	r2, r3, #1
 80217a2:	6022      	str	r2, [r4, #0]
 80217a4:	781b      	ldrb	r3, [r3, #0]
 80217a6:	f806 3b01 	strb.w	r3, [r6], #1
 80217aa:	f1ba 0f00 	cmp.w	sl, #0
 80217ae:	d011      	beq.n	80217d4 <__ssvfiscanf_r+0x9c0>
 80217b0:	eba6 0308 	sub.w	r3, r6, r8
 80217b4:	42ab      	cmp	r3, r5
 80217b6:	d30d      	bcc.n	80217d4 <__ssvfiscanf_r+0x9c0>
 80217b8:	006d      	lsls	r5, r5, #1
 80217ba:	4640      	mov	r0, r8
 80217bc:	4629      	mov	r1, r5
 80217be:	60fb      	str	r3, [r7, #12]
 80217c0:	f001 fb6e 	bl	8022ea0 <realloc>
 80217c4:	4680      	mov	r8, r0
 80217c6:	2800      	cmp	r0, #0
 80217c8:	f43f ac2b 	beq.w	8021022 <__ssvfiscanf_r+0x20e>
 80217cc:	68fb      	ldr	r3, [r7, #12]
 80217ce:	f8ca 0000 	str.w	r0, [sl]
 80217d2:	18c6      	adds	r6, r0, r3
 80217d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217d6:	3b01      	subs	r3, #1
 80217d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80217da:	d00c      	beq.n	80217f6 <__ssvfiscanf_r+0x9e2>
 80217dc:	6863      	ldr	r3, [r4, #4]
 80217de:	2b00      	cmp	r3, #0
 80217e0:	dcd6      	bgt.n	8021790 <__ssvfiscanf_r+0x97c>
 80217e2:	ee18 0a10 	vmov	r0, s16
 80217e6:	4621      	mov	r1, r4
 80217e8:	f7ff fabe 	bl	8020d68 <__ssrefill_r>
 80217ec:	2800      	cmp	r0, #0
 80217ee:	d0cf      	beq.n	8021790 <__ssvfiscanf_r+0x97c>
 80217f0:	4546      	cmp	r6, r8
 80217f2:	f43f ac10 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 80217f6:	ebb6 0808 	subs.w	r8, r6, r8
 80217fa:	f43f ab65 	beq.w	8020ec8 <__ssvfiscanf_r+0xb4>
 80217fe:	2300      	movs	r3, #0
 8021800:	7033      	strb	r3, [r6, #0]
 8021802:	f1ba 0f00 	cmp.w	sl, #0
 8021806:	d00a      	beq.n	802181e <__ssvfiscanf_r+0xa0a>
 8021808:	f108 0101 	add.w	r1, r8, #1
 802180c:	428d      	cmp	r5, r1
 802180e:	d906      	bls.n	802181e <__ssvfiscanf_r+0xa0a>
 8021810:	f8da 0000 	ldr.w	r0, [sl]
 8021814:	f001 fb44 	bl	8022ea0 <realloc>
 8021818:	b108      	cbz	r0, 802181e <__ssvfiscanf_r+0xa0a>
 802181a:	f8ca 0000 	str.w	r0, [sl]
 802181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021820:	3301      	adds	r3, #1
 8021822:	627b      	str	r3, [r7, #36]	; 0x24
 8021824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021826:	4443      	add	r3, r8
 8021828:	62fb      	str	r3, [r7, #44]	; 0x2c
 802182a:	69be      	ldr	r6, [r7, #24]
 802182c:	f7ff bb0f 	b.w	8020e4e <__ssvfiscanf_r+0x3a>
 8021830:	46aa      	mov	sl, r5
 8021832:	e7aa      	b.n	802178a <__ssvfiscanf_r+0x976>
 8021834:	200008e0 	.word	0x200008e0
 8021838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802183a:	2b00      	cmp	r3, #0
 802183c:	bf08      	it	eq
 802183e:	f04f 33ff 	moveq.w	r3, #4294967295
 8021842:	f019 0501 	ands.w	r5, r9, #1
 8021846:	62bb      	str	r3, [r7, #40]	; 0x28
 8021848:	f009 0810 	and.w	r8, r9, #16
 802184c:	f000 80f5 	beq.w	8021a3a <__ssvfiscanf_r+0xc26>
 8021850:	f1b8 0f00 	cmp.w	r8, #0
 8021854:	f040 809a 	bne.w	802198c <__ssvfiscanf_r+0xb78>
 8021858:	4633      	mov	r3, r6
 802185a:	f019 0f80 	tst.w	r9, #128	; 0x80
 802185e:	f853 5b04 	ldr.w	r5, [r3], #4
 8021862:	61bb      	str	r3, [r7, #24]
 8021864:	f000 809a 	beq.w	802199c <__ssvfiscanf_r+0xb88>
 8021868:	2d00      	cmp	r5, #0
 802186a:	f43f ac79 	beq.w	8021160 <__ssvfiscanf_r+0x34c>
 802186e:	2080      	movs	r0, #128	; 0x80
 8021870:	f7fe faea 	bl	801fe48 <malloc>
 8021874:	4606      	mov	r6, r0
 8021876:	2800      	cmp	r0, #0
 8021878:	f43f ac6f 	beq.w	802115a <__ssvfiscanf_r+0x346>
 802187c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021880:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8021884:	6028      	str	r0, [r5, #0]
 8021886:	45ca      	cmp	sl, r9
 8021888:	d313      	bcc.n	80218b2 <__ssvfiscanf_r+0xa9e>
 802188a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 802188e:	4599      	cmp	r9, r3
 8021890:	f63f ac63 	bhi.w	802115a <__ssvfiscanf_r+0x346>
 8021894:	f109 0908 	add.w	r9, r9, #8
 8021898:	f8db 0000 	ldr.w	r0, [fp]
 802189c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80218a0:	f001 fafe 	bl	8022ea0 <realloc>
 80218a4:	2800      	cmp	r0, #0
 80218a6:	f43f ac58 	beq.w	802115a <__ssvfiscanf_r+0x346>
 80218aa:	f8cb 0000 	str.w	r0, [fp]
 80218ae:	f8ab 9004 	strh.w	r9, [fp, #4]
 80218b2:	f8db 3000 	ldr.w	r3, [fp]
 80218b6:	f10a 0201 	add.w	r2, sl, #1
 80218ba:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80218be:	f8ab 2006 	strh.w	r2, [fp, #6]
 80218c2:	46aa      	mov	sl, r5
 80218c4:	f04f 0920 	mov.w	r9, #32
 80218c8:	4635      	mov	r5, r6
 80218ca:	2200      	movs	r2, #0
 80218cc:	6823      	ldr	r3, [r4, #0]
 80218ce:	49ab      	ldr	r1, [pc, #684]	; (8021b7c <__ssvfiscanf_r+0xd68>)
 80218d0:	781b      	ldrb	r3, [r3, #0]
 80218d2:	5c5b      	ldrb	r3, [r3, r1]
 80218d4:	0718      	lsls	r0, r3, #28
 80218d6:	d43f      	bmi.n	8021958 <__ssvfiscanf_r+0xb44>
 80218d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218da:	2b00      	cmp	r3, #0
 80218dc:	d03c      	beq.n	8021958 <__ssvfiscanf_r+0xb44>
 80218de:	60fa      	str	r2, [r7, #12]
 80218e0:	f001 fa88 	bl	8022df4 <__locale_mb_cur_max>
 80218e4:	68fa      	ldr	r2, [r7, #12]
 80218e6:	4290      	cmp	r0, r2
 80218e8:	f43f ab95 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 80218ec:	6821      	ldr	r1, [r4, #0]
 80218ee:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80218f2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80218f6:	f80c 0002 	strb.w	r0, [ip, r2]
 80218fa:	1c53      	adds	r3, r2, #1
 80218fc:	6862      	ldr	r2, [r4, #4]
 80218fe:	3a01      	subs	r2, #1
 8021900:	e9c4 1200 	strd	r1, r2, [r4]
 8021904:	6a3a      	ldr	r2, [r7, #32]
 8021906:	2a03      	cmp	r2, #3
 8021908:	d102      	bne.n	8021910 <__ssvfiscanf_r+0xafc>
 802190a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802190c:	2a04      	cmp	r2, #4
 802190e:	d007      	beq.n	8021920 <__ssvfiscanf_r+0xb0c>
 8021910:	2208      	movs	r2, #8
 8021912:	2100      	movs	r1, #0
 8021914:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8021918:	623b      	str	r3, [r7, #32]
 802191a:	f7f9 fd81 	bl	801b420 <memset>
 802191e:	6a3b      	ldr	r3, [r7, #32]
 8021920:	60fb      	str	r3, [r7, #12]
 8021922:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8021926:	9200      	str	r2, [sp, #0]
 8021928:	ee18 0a10 	vmov	r0, s16
 802192c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8021930:	4629      	mov	r1, r5
 8021932:	f001 fa77 	bl	8022e24 <_mbrtowc_r>
 8021936:	1c42      	adds	r2, r0, #1
 8021938:	6238      	str	r0, [r7, #32]
 802193a:	f43f ab6c 	beq.w	8021016 <__ssvfiscanf_r+0x202>
 802193e:	68fb      	ldr	r3, [r7, #12]
 8021940:	bb80      	cbnz	r0, 80219a4 <__ssvfiscanf_r+0xb90>
 8021942:	6028      	str	r0, [r5, #0]
 8021944:	6828      	ldr	r0, [r5, #0]
 8021946:	60fb      	str	r3, [r7, #12]
 8021948:	f001 fa46 	bl	8022dd8 <iswspace>
 802194c:	68fb      	ldr	r3, [r7, #12]
 802194e:	4602      	mov	r2, r0
 8021950:	2800      	cmp	r0, #0
 8021952:	d047      	beq.n	80219e4 <__ssvfiscanf_r+0xbd0>
 8021954:	2b00      	cmp	r3, #0
 8021956:	d139      	bne.n	80219cc <__ssvfiscanf_r+0xbb8>
 8021958:	f1b8 0f00 	cmp.w	r8, #0
 802195c:	f47f af65 	bne.w	802182a <__ssvfiscanf_r+0xa16>
 8021960:	f8c5 8000 	str.w	r8, [r5]
 8021964:	f1ba 0f00 	cmp.w	sl, #0
 8021968:	d00c      	beq.n	8021984 <__ssvfiscanf_r+0xb70>
 802196a:	1ba9      	subs	r1, r5, r6
 802196c:	108b      	asrs	r3, r1, #2
 802196e:	3301      	adds	r3, #1
 8021970:	4599      	cmp	r9, r3
 8021972:	d907      	bls.n	8021984 <__ssvfiscanf_r+0xb70>
 8021974:	f8da 0000 	ldr.w	r0, [sl]
 8021978:	3104      	adds	r1, #4
 802197a:	f001 fa91 	bl	8022ea0 <realloc>
 802197e:	b108      	cbz	r0, 8021984 <__ssvfiscanf_r+0xb70>
 8021980:	f8ca 0000 	str.w	r0, [sl]
 8021984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021986:	3301      	adds	r3, #1
 8021988:	627b      	str	r3, [r7, #36]	; 0x24
 802198a:	e74e      	b.n	802182a <__ssvfiscanf_r+0xa16>
 802198c:	f04f 0900 	mov.w	r9, #0
 8021990:	61be      	str	r6, [r7, #24]
 8021992:	46ca      	mov	sl, r9
 8021994:	464e      	mov	r6, r9
 8021996:	f107 0534 	add.w	r5, r7, #52	; 0x34
 802199a:	e796      	b.n	80218ca <__ssvfiscanf_r+0xab6>
 802199c:	46c1      	mov	r9, r8
 802199e:	4646      	mov	r6, r8
 80219a0:	46c2      	mov	sl, r8
 80219a2:	e792      	b.n	80218ca <__ssvfiscanf_r+0xab6>
 80219a4:	6a3a      	ldr	r2, [r7, #32]
 80219a6:	3202      	adds	r2, #2
 80219a8:	d1cc      	bne.n	8021944 <__ssvfiscanf_r+0xb30>
 80219aa:	461a      	mov	r2, r3
 80219ac:	6863      	ldr	r3, [r4, #4]
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	dc8c      	bgt.n	80218cc <__ssvfiscanf_r+0xab8>
 80219b2:	ee18 0a10 	vmov	r0, s16
 80219b6:	4621      	mov	r1, r4
 80219b8:	60fa      	str	r2, [r7, #12]
 80219ba:	f7ff f9d5 	bl	8020d68 <__ssrefill_r>
 80219be:	68fa      	ldr	r2, [r7, #12]
 80219c0:	2800      	cmp	r0, #0
 80219c2:	d083      	beq.n	80218cc <__ssvfiscanf_r+0xab8>
 80219c4:	2a00      	cmp	r2, #0
 80219c6:	f47f ab26 	bne.w	8021016 <__ssvfiscanf_r+0x202>
 80219ca:	e7c5      	b.n	8021958 <__ssvfiscanf_r+0xb44>
 80219cc:	3b01      	subs	r3, #1
 80219ce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80219d2:	ee18 0a10 	vmov	r0, s16
 80219d6:	5cc9      	ldrb	r1, [r1, r3]
 80219d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80219da:	4622      	mov	r2, r4
 80219dc:	f7ff f987 	bl	8020cee <_sungetc_r>
 80219e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219e2:	e7b7      	b.n	8021954 <__ssvfiscanf_r+0xb40>
 80219e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80219e6:	4419      	add	r1, r3
 80219e8:	6a3b      	ldr	r3, [r7, #32]
 80219ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80219ec:	2b03      	cmp	r3, #3
 80219ee:	d102      	bne.n	80219f6 <__ssvfiscanf_r+0xbe2>
 80219f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80219f2:	2b04      	cmp	r3, #4
 80219f4:	d002      	beq.n	80219fc <__ssvfiscanf_r+0xbe8>
 80219f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219f8:	3b01      	subs	r3, #1
 80219fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80219fc:	f1b8 0f00 	cmp.w	r8, #0
 8021a00:	d1d4      	bne.n	80219ac <__ssvfiscanf_r+0xb98>
 8021a02:	3504      	adds	r5, #4
 8021a04:	f1ba 0f00 	cmp.w	sl, #0
 8021a08:	d015      	beq.n	8021a36 <__ssvfiscanf_r+0xc22>
 8021a0a:	1bab      	subs	r3, r5, r6
 8021a0c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8021a10:	d80f      	bhi.n	8021a32 <__ssvfiscanf_r+0xc1e>
 8021a12:	4630      	mov	r0, r6
 8021a14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021a18:	60fb      	str	r3, [r7, #12]
 8021a1a:	f001 fa41 	bl	8022ea0 <realloc>
 8021a1e:	4606      	mov	r6, r0
 8021a20:	2800      	cmp	r0, #0
 8021a22:	f43f ab9a 	beq.w	802115a <__ssvfiscanf_r+0x346>
 8021a26:	68fb      	ldr	r3, [r7, #12]
 8021a28:	f8ca 0000 	str.w	r0, [sl]
 8021a2c:	18c5      	adds	r5, r0, r3
 8021a2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021a32:	4642      	mov	r2, r8
 8021a34:	e7ba      	b.n	80219ac <__ssvfiscanf_r+0xb98>
 8021a36:	4652      	mov	r2, sl
 8021a38:	e7b8      	b.n	80219ac <__ssvfiscanf_r+0xb98>
 8021a3a:	f1b8 0f00 	cmp.w	r8, #0
 8021a3e:	d01a      	beq.n	8021a76 <__ssvfiscanf_r+0xc62>
 8021a40:	6823      	ldr	r3, [r4, #0]
 8021a42:	494e      	ldr	r1, [pc, #312]	; (8021b7c <__ssvfiscanf_r+0xd68>)
 8021a44:	781a      	ldrb	r2, [r3, #0]
 8021a46:	5c52      	ldrb	r2, [r2, r1]
 8021a48:	0711      	lsls	r1, r2, #28
 8021a4a:	f53f ae65 	bmi.w	8021718 <__ssvfiscanf_r+0x904>
 8021a4e:	3301      	adds	r3, #1
 8021a50:	6862      	ldr	r2, [r4, #4]
 8021a52:	6023      	str	r3, [r4, #0]
 8021a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a56:	3501      	adds	r5, #1
 8021a58:	3a01      	subs	r2, #1
 8021a5a:	42ab      	cmp	r3, r5
 8021a5c:	6062      	str	r2, [r4, #4]
 8021a5e:	f43f ae5b 	beq.w	8021718 <__ssvfiscanf_r+0x904>
 8021a62:	2a00      	cmp	r2, #0
 8021a64:	dcec      	bgt.n	8021a40 <__ssvfiscanf_r+0xc2c>
 8021a66:	ee18 0a10 	vmov	r0, s16
 8021a6a:	4621      	mov	r1, r4
 8021a6c:	f7ff f97c 	bl	8020d68 <__ssrefill_r>
 8021a70:	2800      	cmp	r0, #0
 8021a72:	d0e5      	beq.n	8021a40 <__ssvfiscanf_r+0xc2c>
 8021a74:	e650      	b.n	8021718 <__ssvfiscanf_r+0x904>
 8021a76:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8021a7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8021a7e:	d07b      	beq.n	8021b78 <__ssvfiscanf_r+0xd64>
 8021a80:	2d00      	cmp	r5, #0
 8021a82:	f43f aa21 	beq.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8021a86:	2020      	movs	r0, #32
 8021a88:	f7fe f9de 	bl	801fe48 <malloc>
 8021a8c:	4681      	mov	r9, r0
 8021a8e:	2800      	cmp	r0, #0
 8021a90:	f43f aac7 	beq.w	8021022 <__ssvfiscanf_r+0x20e>
 8021a94:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021a98:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8021a9c:	6028      	str	r0, [r5, #0]
 8021a9e:	45c2      	cmp	sl, r8
 8021aa0:	d313      	bcc.n	8021aca <__ssvfiscanf_r+0xcb6>
 8021aa2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021aa6:	4598      	cmp	r8, r3
 8021aa8:	f63f ab60 	bhi.w	802116c <__ssvfiscanf_r+0x358>
 8021aac:	f108 0808 	add.w	r8, r8, #8
 8021ab0:	f8db 0000 	ldr.w	r0, [fp]
 8021ab4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8021ab8:	f001 f9f2 	bl	8022ea0 <realloc>
 8021abc:	2800      	cmp	r0, #0
 8021abe:	f43f ab55 	beq.w	802116c <__ssvfiscanf_r+0x358>
 8021ac2:	f8cb 0000 	str.w	r0, [fp]
 8021ac6:	f8ab 8004 	strh.w	r8, [fp, #4]
 8021aca:	f8db 3000 	ldr.w	r3, [fp]
 8021ace:	f10a 0201 	add.w	r2, sl, #1
 8021ad2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8021ad6:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021ada:	46aa      	mov	sl, r5
 8021adc:	464d      	mov	r5, r9
 8021ade:	f04f 0920 	mov.w	r9, #32
 8021ae2:	46a8      	mov	r8, r5
 8021ae4:	6823      	ldr	r3, [r4, #0]
 8021ae6:	4925      	ldr	r1, [pc, #148]	; (8021b7c <__ssvfiscanf_r+0xd68>)
 8021ae8:	781a      	ldrb	r2, [r3, #0]
 8021aea:	5c52      	ldrb	r2, [r2, r1]
 8021aec:	0712      	lsls	r2, r2, #28
 8021aee:	d42b      	bmi.n	8021b48 <__ssvfiscanf_r+0xd34>
 8021af0:	6862      	ldr	r2, [r4, #4]
 8021af2:	3a01      	subs	r2, #1
 8021af4:	6062      	str	r2, [r4, #4]
 8021af6:	1c5a      	adds	r2, r3, #1
 8021af8:	6022      	str	r2, [r4, #0]
 8021afa:	781b      	ldrb	r3, [r3, #0]
 8021afc:	f805 3b01 	strb.w	r3, [r5], #1
 8021b00:	f1ba 0f00 	cmp.w	sl, #0
 8021b04:	d012      	beq.n	8021b2c <__ssvfiscanf_r+0xd18>
 8021b06:	eba5 0308 	sub.w	r3, r5, r8
 8021b0a:	454b      	cmp	r3, r9
 8021b0c:	d30e      	bcc.n	8021b2c <__ssvfiscanf_r+0xd18>
 8021b0e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021b12:	4640      	mov	r0, r8
 8021b14:	4649      	mov	r1, r9
 8021b16:	61bb      	str	r3, [r7, #24]
 8021b18:	f001 f9c2 	bl	8022ea0 <realloc>
 8021b1c:	4680      	mov	r8, r0
 8021b1e:	2800      	cmp	r0, #0
 8021b20:	f43f aa7f 	beq.w	8021022 <__ssvfiscanf_r+0x20e>
 8021b24:	69bb      	ldr	r3, [r7, #24]
 8021b26:	f8ca 0000 	str.w	r0, [sl]
 8021b2a:	18c5      	adds	r5, r0, r3
 8021b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b2e:	3b01      	subs	r3, #1
 8021b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8021b32:	d009      	beq.n	8021b48 <__ssvfiscanf_r+0xd34>
 8021b34:	6863      	ldr	r3, [r4, #4]
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	dcd4      	bgt.n	8021ae4 <__ssvfiscanf_r+0xcd0>
 8021b3a:	ee18 0a10 	vmov	r0, s16
 8021b3e:	4621      	mov	r1, r4
 8021b40:	f7ff f912 	bl	8020d68 <__ssrefill_r>
 8021b44:	2800      	cmp	r0, #0
 8021b46:	d0cd      	beq.n	8021ae4 <__ssvfiscanf_r+0xcd0>
 8021b48:	2300      	movs	r3, #0
 8021b4a:	702b      	strb	r3, [r5, #0]
 8021b4c:	eba5 0508 	sub.w	r5, r5, r8
 8021b50:	f1ba 0f00 	cmp.w	sl, #0
 8021b54:	d009      	beq.n	8021b6a <__ssvfiscanf_r+0xd56>
 8021b56:	1c69      	adds	r1, r5, #1
 8021b58:	4589      	cmp	r9, r1
 8021b5a:	d906      	bls.n	8021b6a <__ssvfiscanf_r+0xd56>
 8021b5c:	f8da 0000 	ldr.w	r0, [sl]
 8021b60:	f001 f99e 	bl	8022ea0 <realloc>
 8021b64:	b108      	cbz	r0, 8021b6a <__ssvfiscanf_r+0xd56>
 8021b66:	f8ca 0000 	str.w	r0, [sl]
 8021b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b6c:	442b      	add	r3, r5
 8021b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b72:	3301      	adds	r3, #1
 8021b74:	f7ff b96a 	b.w	8020e4c <__ssvfiscanf_r+0x38>
 8021b78:	46ca      	mov	sl, r9
 8021b7a:	e7b2      	b.n	8021ae2 <__ssvfiscanf_r+0xcce>
 8021b7c:	080290b1 	.word	0x080290b1
 8021b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b82:	3b01      	subs	r3, #1
 8021b84:	2b26      	cmp	r3, #38	; 0x26
 8021b86:	bf81      	itttt	hi
 8021b88:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 8021b8a:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 8021b8e:	2327      	movhi	r3, #39	; 0x27
 8021b90:	62bb      	strhi	r3, [r7, #40]	; 0x28
 8021b92:	bf98      	it	ls
 8021b94:	2500      	movls	r5, #0
 8021b96:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 8021b9a:	f04f 0a00 	mov.w	sl, #0
 8021b9e:	f107 0848 	add.w	r8, r7, #72	; 0x48
 8021ba2:	6822      	ldr	r2, [r4, #0]
 8021ba4:	7813      	ldrb	r3, [r2, #0]
 8021ba6:	2b39      	cmp	r3, #57	; 0x39
 8021ba8:	d80f      	bhi.n	8021bca <__ssvfiscanf_r+0xdb6>
 8021baa:	2b2a      	cmp	r3, #42	; 0x2a
 8021bac:	d91a      	bls.n	8021be4 <__ssvfiscanf_r+0xdd0>
 8021bae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8021bb2:	290e      	cmp	r1, #14
 8021bb4:	d816      	bhi.n	8021be4 <__ssvfiscanf_r+0xdd0>
 8021bb6:	e8df f001 	tbb	[pc, r1]
 8021bba:	1577      	.short	0x1577
 8021bbc:	41151577 	.word	0x41151577
 8021bc0:	67676767 	.word	0x67676767
 8021bc4:	6f676767 	.word	0x6f676767
 8021bc8:	6f          	.byte	0x6f
 8021bc9:	00          	.byte	0x00
 8021bca:	2b66      	cmp	r3, #102	; 0x66
 8021bcc:	d834      	bhi.n	8021c38 <__ssvfiscanf_r+0xe24>
 8021bce:	2b60      	cmp	r3, #96	; 0x60
 8021bd0:	d803      	bhi.n	8021bda <__ssvfiscanf_r+0xdc6>
 8021bd2:	2b46      	cmp	r3, #70	; 0x46
 8021bd4:	d804      	bhi.n	8021be0 <__ssvfiscanf_r+0xdcc>
 8021bd6:	2b40      	cmp	r3, #64	; 0x40
 8021bd8:	d904      	bls.n	8021be4 <__ssvfiscanf_r+0xdd0>
 8021bda:	69f9      	ldr	r1, [r7, #28]
 8021bdc:	290a      	cmp	r1, #10
 8021bde:	e061      	b.n	8021ca4 <__ssvfiscanf_r+0xe90>
 8021be0:	2b58      	cmp	r3, #88	; 0x58
 8021be2:	d067      	beq.n	8021cb4 <__ssvfiscanf_r+0xea0>
 8021be4:	f419 7f80 	tst.w	r9, #256	; 0x100
 8021be8:	d012      	beq.n	8021c10 <__ssvfiscanf_r+0xdfc>
 8021bea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021bee:	4598      	cmp	r8, r3
 8021bf0:	d909      	bls.n	8021c06 <__ssvfiscanf_r+0xdf2>
 8021bf2:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8021bf6:	ee18 0a10 	vmov	r0, s16
 8021bfa:	4622      	mov	r2, r4
 8021bfc:	f7ff f877 	bl	8020cee <_sungetc_r>
 8021c00:	f108 35ff 	add.w	r5, r8, #4294967295
 8021c04:	46a8      	mov	r8, r5
 8021c06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021c0a:	4598      	cmp	r8, r3
 8021c0c:	f43f a95c 	beq.w	8020ec8 <__ssvfiscanf_r+0xb4>
 8021c10:	f019 0210 	ands.w	r2, r9, #16
 8021c14:	d16b      	bne.n	8021cee <__ssvfiscanf_r+0xeda>
 8021c16:	697d      	ldr	r5, [r7, #20]
 8021c18:	69fb      	ldr	r3, [r7, #28]
 8021c1a:	f888 2000 	strb.w	r2, [r8]
 8021c1e:	ee18 0a10 	vmov	r0, s16
 8021c22:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021c26:	47a8      	blx	r5
 8021c28:	f019 0f20 	tst.w	r9, #32
 8021c2c:	f106 0504 	add.w	r5, r6, #4
 8021c30:	d054      	beq.n	8021cdc <__ssvfiscanf_r+0xec8>
 8021c32:	6833      	ldr	r3, [r6, #0]
 8021c34:	6018      	str	r0, [r3, #0]
 8021c36:	e056      	b.n	8021ce6 <__ssvfiscanf_r+0xed2>
 8021c38:	2b78      	cmp	r3, #120	; 0x78
 8021c3a:	e7d2      	b.n	8021be2 <__ssvfiscanf_r+0xdce>
 8021c3c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8021c40:	d00a      	beq.n	8021c58 <__ssvfiscanf_r+0xe44>
 8021c42:	69f9      	ldr	r1, [r7, #28]
 8021c44:	b919      	cbnz	r1, 8021c4e <__ssvfiscanf_r+0xe3a>
 8021c46:	2108      	movs	r1, #8
 8021c48:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8021c4c:	61f9      	str	r1, [r7, #28]
 8021c4e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8021c52:	d004      	beq.n	8021c5e <__ssvfiscanf_r+0xe4a>
 8021c54:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 8021c58:	f808 3b01 	strb.w	r3, [r8], #1
 8021c5c:	e008      	b.n	8021c70 <__ssvfiscanf_r+0xe5c>
 8021c5e:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 8021c62:	b11d      	cbz	r5, 8021c6c <__ssvfiscanf_r+0xe58>
 8021c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c66:	3301      	adds	r3, #1
 8021c68:	3d01      	subs	r5, #1
 8021c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8021c6c:	f10a 0a01 	add.w	sl, sl, #1
 8021c70:	6863      	ldr	r3, [r4, #4]
 8021c72:	3b01      	subs	r3, #1
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	6063      	str	r3, [r4, #4]
 8021c78:	dd28      	ble.n	8021ccc <__ssvfiscanf_r+0xeb8>
 8021c7a:	3201      	adds	r2, #1
 8021c7c:	6022      	str	r2, [r4, #0]
 8021c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c80:	3b01      	subs	r3, #1
 8021c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8021c84:	d18d      	bne.n	8021ba2 <__ssvfiscanf_r+0xd8e>
 8021c86:	e7ad      	b.n	8021be4 <__ssvfiscanf_r+0xdd0>
 8021c88:	69f8      	ldr	r0, [r7, #28]
 8021c8a:	4932      	ldr	r1, [pc, #200]	; (8021d54 <__ssvfiscanf_r+0xf40>)
 8021c8c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8021c90:	61f9      	str	r1, [r7, #28]
 8021c92:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 8021c96:	e7df      	b.n	8021c58 <__ssvfiscanf_r+0xe44>
 8021c98:	69f8      	ldr	r0, [r7, #28]
 8021c9a:	492e      	ldr	r1, [pc, #184]	; (8021d54 <__ssvfiscanf_r+0xf40>)
 8021c9c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8021ca0:	61f9      	str	r1, [r7, #28]
 8021ca2:	2908      	cmp	r1, #8
 8021ca4:	dcf5      	bgt.n	8021c92 <__ssvfiscanf_r+0xe7e>
 8021ca6:	e79d      	b.n	8021be4 <__ssvfiscanf_r+0xdd0>
 8021ca8:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021cac:	d09a      	beq.n	8021be4 <__ssvfiscanf_r+0xdd0>
 8021cae:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 8021cb2:	e7d1      	b.n	8021c58 <__ssvfiscanf_r+0xe44>
 8021cb4:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 8021cb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021cbc:	d192      	bne.n	8021be4 <__ssvfiscanf_r+0xdd0>
 8021cbe:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 8021cc2:	2110      	movs	r1, #16
 8021cc4:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 8021cc8:	61f9      	str	r1, [r7, #28]
 8021cca:	e7c5      	b.n	8021c58 <__ssvfiscanf_r+0xe44>
 8021ccc:	ee18 0a10 	vmov	r0, s16
 8021cd0:	4621      	mov	r1, r4
 8021cd2:	f7ff f849 	bl	8020d68 <__ssrefill_r>
 8021cd6:	2800      	cmp	r0, #0
 8021cd8:	d0d1      	beq.n	8021c7e <__ssvfiscanf_r+0xe6a>
 8021cda:	e783      	b.n	8021be4 <__ssvfiscanf_r+0xdd0>
 8021cdc:	f019 0f08 	tst.w	r9, #8
 8021ce0:	d00e      	beq.n	8021d00 <__ssvfiscanf_r+0xeec>
 8021ce2:	6833      	ldr	r3, [r6, #0]
 8021ce4:	7018      	strb	r0, [r3, #0]
 8021ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ce8:	3301      	adds	r3, #1
 8021cea:	627b      	str	r3, [r7, #36]	; 0x24
 8021cec:	462e      	mov	r6, r5
 8021cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021cf2:	eba8 0803 	sub.w	r8, r8, r3
 8021cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cf8:	44c2      	add	sl, r8
 8021cfa:	4453      	add	r3, sl
 8021cfc:	f7ff b982 	b.w	8021004 <__ssvfiscanf_r+0x1f0>
 8021d00:	f019 0f04 	tst.w	r9, #4
 8021d04:	d002      	beq.n	8021d0c <__ssvfiscanf_r+0xef8>
 8021d06:	6833      	ldr	r3, [r6, #0]
 8021d08:	8018      	strh	r0, [r3, #0]
 8021d0a:	e7ec      	b.n	8021ce6 <__ssvfiscanf_r+0xed2>
 8021d0c:	f019 0201 	ands.w	r2, r9, #1
 8021d10:	d18f      	bne.n	8021c32 <__ssvfiscanf_r+0xe1e>
 8021d12:	f019 0f02 	tst.w	r9, #2
 8021d16:	d08c      	beq.n	8021c32 <__ssvfiscanf_r+0xe1e>
 8021d18:	4b0f      	ldr	r3, [pc, #60]	; (8021d58 <__ssvfiscanf_r+0xf44>)
 8021d1a:	6979      	ldr	r1, [r7, #20]
 8021d1c:	4299      	cmp	r1, r3
 8021d1e:	ee18 0a10 	vmov	r0, s16
 8021d22:	69fb      	ldr	r3, [r7, #28]
 8021d24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021d28:	d105      	bne.n	8021d36 <__ssvfiscanf_r+0xf22>
 8021d2a:	f001 fbd3 	bl	80234d4 <_strtoull_r>
 8021d2e:	6833      	ldr	r3, [r6, #0]
 8021d30:	e9c3 0100 	strd	r0, r1, [r3]
 8021d34:	e7d7      	b.n	8021ce6 <__ssvfiscanf_r+0xed2>
 8021d36:	f001 fb31 	bl	802339c <_strtoll_r>
 8021d3a:	e7f8      	b.n	8021d2e <__ssvfiscanf_r+0xf1a>
 8021d3c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021d40:	6818      	ldr	r0, [r3, #0]
 8021d42:	f7fe f889 	bl	801fe58 <free>
 8021d46:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021d4a:	3401      	adds	r4, #1
 8021d4c:	601e      	str	r6, [r3, #0]
 8021d4e:	f7ff ba0f 	b.w	8021170 <__ssvfiscanf_r+0x35c>
 8021d52:	bf00      	nop
 8021d54:	08029504 	.word	0x08029504
 8021d58:	08020be1 	.word	0x08020be1

08021d5c <sysconf>:
 8021d5c:	2808      	cmp	r0, #8
 8021d5e:	b508      	push	{r3, lr}
 8021d60:	d006      	beq.n	8021d70 <sysconf+0x14>
 8021d62:	f7fd fc95 	bl	801f690 <__errno>
 8021d66:	2316      	movs	r3, #22
 8021d68:	6003      	str	r3, [r0, #0]
 8021d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8021d6e:	bd08      	pop	{r3, pc}
 8021d70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8021d74:	e7fb      	b.n	8021d6e <sysconf+0x12>

08021d76 <__submore>:
 8021d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d7a:	460c      	mov	r4, r1
 8021d7c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8021d7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8021d82:	4299      	cmp	r1, r3
 8021d84:	d11d      	bne.n	8021dc2 <__submore+0x4c>
 8021d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021d8a:	f7fe f86d 	bl	801fe68 <_malloc_r>
 8021d8e:	b918      	cbnz	r0, 8021d98 <__submore+0x22>
 8021d90:	f04f 30ff 	mov.w	r0, #4294967295
 8021d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8021d9e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8021da2:	6320      	str	r0, [r4, #48]	; 0x30
 8021da4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021da8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8021dac:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021db0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8021db4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021db8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021dbc:	6020      	str	r0, [r4, #0]
 8021dbe:	2000      	movs	r0, #0
 8021dc0:	e7e8      	b.n	8021d94 <__submore+0x1e>
 8021dc2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8021dc4:	0077      	lsls	r7, r6, #1
 8021dc6:	463a      	mov	r2, r7
 8021dc8:	f001 f872 	bl	8022eb0 <_realloc_r>
 8021dcc:	4605      	mov	r5, r0
 8021dce:	2800      	cmp	r0, #0
 8021dd0:	d0de      	beq.n	8021d90 <__submore+0x1a>
 8021dd2:	eb00 0806 	add.w	r8, r0, r6
 8021dd6:	4601      	mov	r1, r0
 8021dd8:	4632      	mov	r2, r6
 8021dda:	4640      	mov	r0, r8
 8021ddc:	f7f9 faf8 	bl	801b3d0 <memcpy>
 8021de0:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 8021de4:	f8c4 8000 	str.w	r8, [r4]
 8021de8:	e7e9      	b.n	8021dbe <__submore+0x48>

08021dea <__sprint_r>:
 8021dea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dee:	6893      	ldr	r3, [r2, #8]
 8021df0:	4680      	mov	r8, r0
 8021df2:	460f      	mov	r7, r1
 8021df4:	4614      	mov	r4, r2
 8021df6:	b91b      	cbnz	r3, 8021e00 <__sprint_r+0x16>
 8021df8:	6053      	str	r3, [r2, #4]
 8021dfa:	4618      	mov	r0, r3
 8021dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e00:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8021e02:	049d      	lsls	r5, r3, #18
 8021e04:	d520      	bpl.n	8021e48 <__sprint_r+0x5e>
 8021e06:	6815      	ldr	r5, [r2, #0]
 8021e08:	3508      	adds	r5, #8
 8021e0a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8021e0e:	f04f 0900 	mov.w	r9, #0
 8021e12:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8021e16:	45ca      	cmp	sl, r9
 8021e18:	dc0b      	bgt.n	8021e32 <__sprint_r+0x48>
 8021e1a:	68a3      	ldr	r3, [r4, #8]
 8021e1c:	f026 0003 	bic.w	r0, r6, #3
 8021e20:	1a18      	subs	r0, r3, r0
 8021e22:	60a0      	str	r0, [r4, #8]
 8021e24:	3508      	adds	r5, #8
 8021e26:	2800      	cmp	r0, #0
 8021e28:	d1ef      	bne.n	8021e0a <__sprint_r+0x20>
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8021e30:	e7e4      	b.n	8021dfc <__sprint_r+0x12>
 8021e32:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8021e36:	463a      	mov	r2, r7
 8021e38:	4640      	mov	r0, r8
 8021e3a:	f000 fe36 	bl	8022aaa <_fputwc_r>
 8021e3e:	1c43      	adds	r3, r0, #1
 8021e40:	d0f3      	beq.n	8021e2a <__sprint_r+0x40>
 8021e42:	f109 0901 	add.w	r9, r9, #1
 8021e46:	e7e6      	b.n	8021e16 <__sprint_r+0x2c>
 8021e48:	f000 fe6c 	bl	8022b24 <__sfvwrite_r>
 8021e4c:	e7ed      	b.n	8021e2a <__sprint_r+0x40>
	...

08021e50 <_vfiprintf_r>:
 8021e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e54:	ed2d 8b02 	vpush	{d8}
 8021e58:	b0b9      	sub	sp, #228	; 0xe4
 8021e5a:	460f      	mov	r7, r1
 8021e5c:	9201      	str	r2, [sp, #4]
 8021e5e:	461d      	mov	r5, r3
 8021e60:	461c      	mov	r4, r3
 8021e62:	4681      	mov	r9, r0
 8021e64:	b118      	cbz	r0, 8021e6e <_vfiprintf_r+0x1e>
 8021e66:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8021e68:	b90b      	cbnz	r3, 8021e6e <_vfiprintf_r+0x1e>
 8021e6a:	f7fd fd11 	bl	801f890 <__sinit>
 8021e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021e70:	07d8      	lsls	r0, r3, #31
 8021e72:	d405      	bmi.n	8021e80 <_vfiprintf_r+0x30>
 8021e74:	89bb      	ldrh	r3, [r7, #12]
 8021e76:	0599      	lsls	r1, r3, #22
 8021e78:	d402      	bmi.n	8021e80 <_vfiprintf_r+0x30>
 8021e7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021e7c:	f7fd ff75 	bl	801fd6a <__retarget_lock_acquire_recursive>
 8021e80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8021e84:	049a      	lsls	r2, r3, #18
 8021e86:	d406      	bmi.n	8021e96 <_vfiprintf_r+0x46>
 8021e88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021e8c:	81bb      	strh	r3, [r7, #12]
 8021e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021e94:	667b      	str	r3, [r7, #100]	; 0x64
 8021e96:	89bb      	ldrh	r3, [r7, #12]
 8021e98:	071e      	lsls	r6, r3, #28
 8021e9a:	d501      	bpl.n	8021ea0 <_vfiprintf_r+0x50>
 8021e9c:	693b      	ldr	r3, [r7, #16]
 8021e9e:	b9bb      	cbnz	r3, 8021ed0 <_vfiprintf_r+0x80>
 8021ea0:	4639      	mov	r1, r7
 8021ea2:	4648      	mov	r0, r9
 8021ea4:	f7fc fd16 	bl	801e8d4 <__swsetup_r>
 8021ea8:	b190      	cbz	r0, 8021ed0 <_vfiprintf_r+0x80>
 8021eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021eac:	07d8      	lsls	r0, r3, #31
 8021eae:	d508      	bpl.n	8021ec2 <_vfiprintf_r+0x72>
 8021eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8021eb4:	9302      	str	r3, [sp, #8]
 8021eb6:	9802      	ldr	r0, [sp, #8]
 8021eb8:	b039      	add	sp, #228	; 0xe4
 8021eba:	ecbd 8b02 	vpop	{d8}
 8021ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ec2:	89bb      	ldrh	r3, [r7, #12]
 8021ec4:	0599      	lsls	r1, r3, #22
 8021ec6:	d4f3      	bmi.n	8021eb0 <_vfiprintf_r+0x60>
 8021ec8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021eca:	f7fd ff50 	bl	801fd6e <__retarget_lock_release_recursive>
 8021ece:	e7ef      	b.n	8021eb0 <_vfiprintf_r+0x60>
 8021ed0:	89bb      	ldrh	r3, [r7, #12]
 8021ed2:	f003 021a 	and.w	r2, r3, #26
 8021ed6:	2a0a      	cmp	r2, #10
 8021ed8:	d113      	bne.n	8021f02 <_vfiprintf_r+0xb2>
 8021eda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021ede:	2a00      	cmp	r2, #0
 8021ee0:	db0f      	blt.n	8021f02 <_vfiprintf_r+0xb2>
 8021ee2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021ee4:	07d2      	lsls	r2, r2, #31
 8021ee6:	d404      	bmi.n	8021ef2 <_vfiprintf_r+0xa2>
 8021ee8:	059e      	lsls	r6, r3, #22
 8021eea:	d402      	bmi.n	8021ef2 <_vfiprintf_r+0xa2>
 8021eec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021eee:	f7fd ff3e 	bl	801fd6e <__retarget_lock_release_recursive>
 8021ef2:	9a01      	ldr	r2, [sp, #4]
 8021ef4:	462b      	mov	r3, r5
 8021ef6:	4639      	mov	r1, r7
 8021ef8:	4648      	mov	r0, r9
 8021efa:	f000 fc31 	bl	8022760 <__sbprintf>
 8021efe:	9002      	str	r0, [sp, #8]
 8021f00:	e7d9      	b.n	8021eb6 <_vfiprintf_r+0x66>
 8021f02:	2300      	movs	r3, #0
 8021f04:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8021f08:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021f0c:	ae0f      	add	r6, sp, #60	; 0x3c
 8021f0e:	ee08 3a10 	vmov	s16, r3
 8021f12:	960c      	str	r6, [sp, #48]	; 0x30
 8021f14:	9307      	str	r3, [sp, #28]
 8021f16:	9302      	str	r3, [sp, #8]
 8021f18:	9b01      	ldr	r3, [sp, #4]
 8021f1a:	461d      	mov	r5, r3
 8021f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f20:	b10a      	cbz	r2, 8021f26 <_vfiprintf_r+0xd6>
 8021f22:	2a25      	cmp	r2, #37	; 0x25
 8021f24:	d1f9      	bne.n	8021f1a <_vfiprintf_r+0xca>
 8021f26:	9b01      	ldr	r3, [sp, #4]
 8021f28:	ebb5 0803 	subs.w	r8, r5, r3
 8021f2c:	d00d      	beq.n	8021f4a <_vfiprintf_r+0xfa>
 8021f2e:	e9c6 3800 	strd	r3, r8, [r6]
 8021f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f34:	4443      	add	r3, r8
 8021f36:	930e      	str	r3, [sp, #56]	; 0x38
 8021f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f3a:	3301      	adds	r3, #1
 8021f3c:	2b07      	cmp	r3, #7
 8021f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8021f40:	dc75      	bgt.n	802202e <_vfiprintf_r+0x1de>
 8021f42:	3608      	adds	r6, #8
 8021f44:	9b02      	ldr	r3, [sp, #8]
 8021f46:	4443      	add	r3, r8
 8021f48:	9302      	str	r3, [sp, #8]
 8021f4a:	782b      	ldrb	r3, [r5, #0]
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	f000 83c8 	beq.w	80226e2 <_vfiprintf_r+0x892>
 8021f52:	2300      	movs	r3, #0
 8021f54:	f04f 31ff 	mov.w	r1, #4294967295
 8021f58:	1c6a      	adds	r2, r5, #1
 8021f5a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8021f5e:	9100      	str	r1, [sp, #0]
 8021f60:	9303      	str	r3, [sp, #12]
 8021f62:	469a      	mov	sl, r3
 8021f64:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021f68:	9201      	str	r2, [sp, #4]
 8021f6a:	f1a3 0220 	sub.w	r2, r3, #32
 8021f6e:	2a5a      	cmp	r2, #90	; 0x5a
 8021f70:	f200 8310 	bhi.w	8022594 <_vfiprintf_r+0x744>
 8021f74:	e8df f012 	tbh	[pc, r2, lsl #1]
 8021f78:	030e0099 	.word	0x030e0099
 8021f7c:	00a1030e 	.word	0x00a1030e
 8021f80:	030e030e 	.word	0x030e030e
 8021f84:	0080030e 	.word	0x0080030e
 8021f88:	030e030e 	.word	0x030e030e
 8021f8c:	00ae00a4 	.word	0x00ae00a4
 8021f90:	00ab030e 	.word	0x00ab030e
 8021f94:	030e00b0 	.word	0x030e00b0
 8021f98:	00ce00cb 	.word	0x00ce00cb
 8021f9c:	00ce00ce 	.word	0x00ce00ce
 8021fa0:	00ce00ce 	.word	0x00ce00ce
 8021fa4:	00ce00ce 	.word	0x00ce00ce
 8021fa8:	00ce00ce 	.word	0x00ce00ce
 8021fac:	030e030e 	.word	0x030e030e
 8021fb0:	030e030e 	.word	0x030e030e
 8021fb4:	030e030e 	.word	0x030e030e
 8021fb8:	030e030e 	.word	0x030e030e
 8021fbc:	00f8030e 	.word	0x00f8030e
 8021fc0:	030e0106 	.word	0x030e0106
 8021fc4:	030e030e 	.word	0x030e030e
 8021fc8:	030e030e 	.word	0x030e030e
 8021fcc:	030e030e 	.word	0x030e030e
 8021fd0:	030e030e 	.word	0x030e030e
 8021fd4:	014d030e 	.word	0x014d030e
 8021fd8:	030e030e 	.word	0x030e030e
 8021fdc:	0192030e 	.word	0x0192030e
 8021fe0:	0270030e 	.word	0x0270030e
 8021fe4:	030e030e 	.word	0x030e030e
 8021fe8:	030e028e 	.word	0x030e028e
 8021fec:	030e030e 	.word	0x030e030e
 8021ff0:	030e030e 	.word	0x030e030e
 8021ff4:	030e030e 	.word	0x030e030e
 8021ff8:	030e030e 	.word	0x030e030e
 8021ffc:	00f8030e 	.word	0x00f8030e
 8022000:	030e0108 	.word	0x030e0108
 8022004:	030e030e 	.word	0x030e030e
 8022008:	010800de 	.word	0x010800de
 802200c:	030e00f2 	.word	0x030e00f2
 8022010:	030e00eb 	.word	0x030e00eb
 8022014:	014f0130 	.word	0x014f0130
 8022018:	00f20182 	.word	0x00f20182
 802201c:	0192030e 	.word	0x0192030e
 8022020:	02720097 	.word	0x02720097
 8022024:	030e030e 	.word	0x030e030e
 8022028:	030e0065 	.word	0x030e0065
 802202c:	0097      	.short	0x0097
 802202e:	aa0c      	add	r2, sp, #48	; 0x30
 8022030:	4639      	mov	r1, r7
 8022032:	4648      	mov	r0, r9
 8022034:	f7ff fed9 	bl	8021dea <__sprint_r>
 8022038:	2800      	cmp	r0, #0
 802203a:	f040 8331 	bne.w	80226a0 <_vfiprintf_r+0x850>
 802203e:	ae0f      	add	r6, sp, #60	; 0x3c
 8022040:	e780      	b.n	8021f44 <_vfiprintf_r+0xf4>
 8022042:	4a95      	ldr	r2, [pc, #596]	; (8022298 <_vfiprintf_r+0x448>)
 8022044:	9205      	str	r2, [sp, #20]
 8022046:	f01a 0f20 	tst.w	sl, #32
 802204a:	f000 8225 	beq.w	8022498 <_vfiprintf_r+0x648>
 802204e:	3407      	adds	r4, #7
 8022050:	f024 0b07 	bic.w	fp, r4, #7
 8022054:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022058:	f01a 0f01 	tst.w	sl, #1
 802205c:	d009      	beq.n	8022072 <_vfiprintf_r+0x222>
 802205e:	ea54 0205 	orrs.w	r2, r4, r5
 8022062:	bf1f      	itttt	ne
 8022064:	2230      	movne	r2, #48	; 0x30
 8022066:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 802206a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 802206e:	f04a 0a02 	orrne.w	sl, sl, #2
 8022072:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8022076:	e10d      	b.n	8022294 <_vfiprintf_r+0x444>
 8022078:	4648      	mov	r0, r9
 802207a:	f7fd fe6f 	bl	801fd5c <_localeconv_r>
 802207e:	6843      	ldr	r3, [r0, #4]
 8022080:	4618      	mov	r0, r3
 8022082:	ee08 3a10 	vmov	s16, r3
 8022086:	f7de f8cd 	bl	8000224 <strlen>
 802208a:	9007      	str	r0, [sp, #28]
 802208c:	4648      	mov	r0, r9
 802208e:	f7fd fe65 	bl	801fd5c <_localeconv_r>
 8022092:	6883      	ldr	r3, [r0, #8]
 8022094:	9306      	str	r3, [sp, #24]
 8022096:	9b07      	ldr	r3, [sp, #28]
 8022098:	b12b      	cbz	r3, 80220a6 <_vfiprintf_r+0x256>
 802209a:	9b06      	ldr	r3, [sp, #24]
 802209c:	b11b      	cbz	r3, 80220a6 <_vfiprintf_r+0x256>
 802209e:	781b      	ldrb	r3, [r3, #0]
 80220a0:	b10b      	cbz	r3, 80220a6 <_vfiprintf_r+0x256>
 80220a2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80220a6:	9a01      	ldr	r2, [sp, #4]
 80220a8:	e75c      	b.n	8021f64 <_vfiprintf_r+0x114>
 80220aa:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80220ae:	2b00      	cmp	r3, #0
 80220b0:	d1f9      	bne.n	80220a6 <_vfiprintf_r+0x256>
 80220b2:	2320      	movs	r3, #32
 80220b4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80220b8:	e7f5      	b.n	80220a6 <_vfiprintf_r+0x256>
 80220ba:	f04a 0a01 	orr.w	sl, sl, #1
 80220be:	e7f2      	b.n	80220a6 <_vfiprintf_r+0x256>
 80220c0:	f854 3b04 	ldr.w	r3, [r4], #4
 80220c4:	9303      	str	r3, [sp, #12]
 80220c6:	2b00      	cmp	r3, #0
 80220c8:	daed      	bge.n	80220a6 <_vfiprintf_r+0x256>
 80220ca:	425b      	negs	r3, r3
 80220cc:	9303      	str	r3, [sp, #12]
 80220ce:	f04a 0a04 	orr.w	sl, sl, #4
 80220d2:	e7e8      	b.n	80220a6 <_vfiprintf_r+0x256>
 80220d4:	232b      	movs	r3, #43	; 0x2b
 80220d6:	e7ed      	b.n	80220b4 <_vfiprintf_r+0x264>
 80220d8:	9a01      	ldr	r2, [sp, #4]
 80220da:	f812 3b01 	ldrb.w	r3, [r2], #1
 80220de:	2b2a      	cmp	r3, #42	; 0x2a
 80220e0:	d112      	bne.n	8022108 <_vfiprintf_r+0x2b8>
 80220e2:	f854 0b04 	ldr.w	r0, [r4], #4
 80220e6:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80220ea:	e9cd 3200 	strd	r3, r2, [sp]
 80220ee:	e7da      	b.n	80220a6 <_vfiprintf_r+0x256>
 80220f0:	9b00      	ldr	r3, [sp, #0]
 80220f2:	200a      	movs	r0, #10
 80220f4:	fb00 1303 	mla	r3, r0, r3, r1
 80220f8:	9300      	str	r3, [sp, #0]
 80220fa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80220fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8022102:	2909      	cmp	r1, #9
 8022104:	d9f4      	bls.n	80220f0 <_vfiprintf_r+0x2a0>
 8022106:	e72f      	b.n	8021f68 <_vfiprintf_r+0x118>
 8022108:	2100      	movs	r1, #0
 802210a:	9100      	str	r1, [sp, #0]
 802210c:	e7f7      	b.n	80220fe <_vfiprintf_r+0x2ae>
 802210e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8022112:	e7c8      	b.n	80220a6 <_vfiprintf_r+0x256>
 8022114:	2100      	movs	r1, #0
 8022116:	9a01      	ldr	r2, [sp, #4]
 8022118:	9103      	str	r1, [sp, #12]
 802211a:	9903      	ldr	r1, [sp, #12]
 802211c:	3b30      	subs	r3, #48	; 0x30
 802211e:	200a      	movs	r0, #10
 8022120:	fb00 3301 	mla	r3, r0, r1, r3
 8022124:	9303      	str	r3, [sp, #12]
 8022126:	f812 3b01 	ldrb.w	r3, [r2], #1
 802212a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802212e:	2909      	cmp	r1, #9
 8022130:	d9f3      	bls.n	802211a <_vfiprintf_r+0x2ca>
 8022132:	e719      	b.n	8021f68 <_vfiprintf_r+0x118>
 8022134:	9b01      	ldr	r3, [sp, #4]
 8022136:	781b      	ldrb	r3, [r3, #0]
 8022138:	2b68      	cmp	r3, #104	; 0x68
 802213a:	bf01      	itttt	eq
 802213c:	9b01      	ldreq	r3, [sp, #4]
 802213e:	3301      	addeq	r3, #1
 8022140:	9301      	streq	r3, [sp, #4]
 8022142:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8022146:	bf18      	it	ne
 8022148:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 802214c:	e7ab      	b.n	80220a6 <_vfiprintf_r+0x256>
 802214e:	9b01      	ldr	r3, [sp, #4]
 8022150:	781b      	ldrb	r3, [r3, #0]
 8022152:	2b6c      	cmp	r3, #108	; 0x6c
 8022154:	d105      	bne.n	8022162 <_vfiprintf_r+0x312>
 8022156:	9b01      	ldr	r3, [sp, #4]
 8022158:	3301      	adds	r3, #1
 802215a:	9301      	str	r3, [sp, #4]
 802215c:	f04a 0a20 	orr.w	sl, sl, #32
 8022160:	e7a1      	b.n	80220a6 <_vfiprintf_r+0x256>
 8022162:	f04a 0a10 	orr.w	sl, sl, #16
 8022166:	e79e      	b.n	80220a6 <_vfiprintf_r+0x256>
 8022168:	46a3      	mov	fp, r4
 802216a:	2100      	movs	r1, #0
 802216c:	f85b 3b04 	ldr.w	r3, [fp], #4
 8022170:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8022174:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8022178:	2301      	movs	r3, #1
 802217a:	9300      	str	r3, [sp, #0]
 802217c:	460d      	mov	r5, r1
 802217e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8022182:	e0a0      	b.n	80222c6 <_vfiprintf_r+0x476>
 8022184:	f04a 0a10 	orr.w	sl, sl, #16
 8022188:	f01a 0f20 	tst.w	sl, #32
 802218c:	d011      	beq.n	80221b2 <_vfiprintf_r+0x362>
 802218e:	3407      	adds	r4, #7
 8022190:	f024 0b07 	bic.w	fp, r4, #7
 8022194:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022198:	2c00      	cmp	r4, #0
 802219a:	f175 0300 	sbcs.w	r3, r5, #0
 802219e:	da06      	bge.n	80221ae <_vfiprintf_r+0x35e>
 80221a0:	4264      	negs	r4, r4
 80221a2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80221a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80221aa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80221ae:	2301      	movs	r3, #1
 80221b0:	e03f      	b.n	8022232 <_vfiprintf_r+0x3e2>
 80221b2:	f01a 0f10 	tst.w	sl, #16
 80221b6:	f104 0b04 	add.w	fp, r4, #4
 80221ba:	d002      	beq.n	80221c2 <_vfiprintf_r+0x372>
 80221bc:	6824      	ldr	r4, [r4, #0]
 80221be:	17e5      	asrs	r5, r4, #31
 80221c0:	e7ea      	b.n	8022198 <_vfiprintf_r+0x348>
 80221c2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80221c6:	6824      	ldr	r4, [r4, #0]
 80221c8:	d001      	beq.n	80221ce <_vfiprintf_r+0x37e>
 80221ca:	b224      	sxth	r4, r4
 80221cc:	e7f7      	b.n	80221be <_vfiprintf_r+0x36e>
 80221ce:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80221d2:	bf18      	it	ne
 80221d4:	b264      	sxtbne	r4, r4
 80221d6:	e7f2      	b.n	80221be <_vfiprintf_r+0x36e>
 80221d8:	f01a 0f20 	tst.w	sl, #32
 80221dc:	f854 3b04 	ldr.w	r3, [r4], #4
 80221e0:	d005      	beq.n	80221ee <_vfiprintf_r+0x39e>
 80221e2:	9a02      	ldr	r2, [sp, #8]
 80221e4:	4610      	mov	r0, r2
 80221e6:	17d1      	asrs	r1, r2, #31
 80221e8:	e9c3 0100 	strd	r0, r1, [r3]
 80221ec:	e694      	b.n	8021f18 <_vfiprintf_r+0xc8>
 80221ee:	f01a 0f10 	tst.w	sl, #16
 80221f2:	d002      	beq.n	80221fa <_vfiprintf_r+0x3aa>
 80221f4:	9a02      	ldr	r2, [sp, #8]
 80221f6:	601a      	str	r2, [r3, #0]
 80221f8:	e68e      	b.n	8021f18 <_vfiprintf_r+0xc8>
 80221fa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80221fe:	d002      	beq.n	8022206 <_vfiprintf_r+0x3b6>
 8022200:	9a02      	ldr	r2, [sp, #8]
 8022202:	801a      	strh	r2, [r3, #0]
 8022204:	e688      	b.n	8021f18 <_vfiprintf_r+0xc8>
 8022206:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802220a:	d0f3      	beq.n	80221f4 <_vfiprintf_r+0x3a4>
 802220c:	9a02      	ldr	r2, [sp, #8]
 802220e:	701a      	strb	r2, [r3, #0]
 8022210:	e682      	b.n	8021f18 <_vfiprintf_r+0xc8>
 8022212:	f04a 0a10 	orr.w	sl, sl, #16
 8022216:	f01a 0f20 	tst.w	sl, #32
 802221a:	d01d      	beq.n	8022258 <_vfiprintf_r+0x408>
 802221c:	3407      	adds	r4, #7
 802221e:	f024 0b07 	bic.w	fp, r4, #7
 8022222:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022226:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 802222a:	2300      	movs	r3, #0
 802222c:	2200      	movs	r2, #0
 802222e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8022232:	9a00      	ldr	r2, [sp, #0]
 8022234:	3201      	adds	r2, #1
 8022236:	f000 8261 	beq.w	80226fc <_vfiprintf_r+0x8ac>
 802223a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 802223e:	9204      	str	r2, [sp, #16]
 8022240:	ea54 0205 	orrs.w	r2, r4, r5
 8022244:	f040 8260 	bne.w	8022708 <_vfiprintf_r+0x8b8>
 8022248:	9a00      	ldr	r2, [sp, #0]
 802224a:	2a00      	cmp	r2, #0
 802224c:	f000 8197 	beq.w	802257e <_vfiprintf_r+0x72e>
 8022250:	2b01      	cmp	r3, #1
 8022252:	f040 825c 	bne.w	802270e <_vfiprintf_r+0x8be>
 8022256:	e135      	b.n	80224c4 <_vfiprintf_r+0x674>
 8022258:	f01a 0f10 	tst.w	sl, #16
 802225c:	f104 0b04 	add.w	fp, r4, #4
 8022260:	d001      	beq.n	8022266 <_vfiprintf_r+0x416>
 8022262:	6824      	ldr	r4, [r4, #0]
 8022264:	e003      	b.n	802226e <_vfiprintf_r+0x41e>
 8022266:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802226a:	d002      	beq.n	8022272 <_vfiprintf_r+0x422>
 802226c:	8824      	ldrh	r4, [r4, #0]
 802226e:	2500      	movs	r5, #0
 8022270:	e7d9      	b.n	8022226 <_vfiprintf_r+0x3d6>
 8022272:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022276:	d0f4      	beq.n	8022262 <_vfiprintf_r+0x412>
 8022278:	7824      	ldrb	r4, [r4, #0]
 802227a:	e7f8      	b.n	802226e <_vfiprintf_r+0x41e>
 802227c:	46a3      	mov	fp, r4
 802227e:	f647 0330 	movw	r3, #30768	; 0x7830
 8022282:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022286:	f85b 4b04 	ldr.w	r4, [fp], #4
 802228a:	4b03      	ldr	r3, [pc, #12]	; (8022298 <_vfiprintf_r+0x448>)
 802228c:	9305      	str	r3, [sp, #20]
 802228e:	2500      	movs	r5, #0
 8022290:	f04a 0a02 	orr.w	sl, sl, #2
 8022294:	2302      	movs	r3, #2
 8022296:	e7c9      	b.n	802222c <_vfiprintf_r+0x3dc>
 8022298:	08029288 	.word	0x08029288
 802229c:	9b00      	ldr	r3, [sp, #0]
 802229e:	46a3      	mov	fp, r4
 80222a0:	2500      	movs	r5, #0
 80222a2:	1c5c      	adds	r4, r3, #1
 80222a4:	f85b 8b04 	ldr.w	r8, [fp], #4
 80222a8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80222ac:	f000 80cf 	beq.w	802244e <_vfiprintf_r+0x5fe>
 80222b0:	461a      	mov	r2, r3
 80222b2:	4629      	mov	r1, r5
 80222b4:	4640      	mov	r0, r8
 80222b6:	f7dd ffc3 	bl	8000240 <memchr>
 80222ba:	2800      	cmp	r0, #0
 80222bc:	f000 8174 	beq.w	80225a8 <_vfiprintf_r+0x758>
 80222c0:	eba0 0308 	sub.w	r3, r0, r8
 80222c4:	9300      	str	r3, [sp, #0]
 80222c6:	9b00      	ldr	r3, [sp, #0]
 80222c8:	42ab      	cmp	r3, r5
 80222ca:	bfb8      	it	lt
 80222cc:	462b      	movlt	r3, r5
 80222ce:	9304      	str	r3, [sp, #16]
 80222d0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80222d4:	b113      	cbz	r3, 80222dc <_vfiprintf_r+0x48c>
 80222d6:	9b04      	ldr	r3, [sp, #16]
 80222d8:	3301      	adds	r3, #1
 80222da:	9304      	str	r3, [sp, #16]
 80222dc:	f01a 0302 	ands.w	r3, sl, #2
 80222e0:	9308      	str	r3, [sp, #32]
 80222e2:	bf1e      	ittt	ne
 80222e4:	9b04      	ldrne	r3, [sp, #16]
 80222e6:	3302      	addne	r3, #2
 80222e8:	9304      	strne	r3, [sp, #16]
 80222ea:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80222ee:	9309      	str	r3, [sp, #36]	; 0x24
 80222f0:	d11f      	bne.n	8022332 <_vfiprintf_r+0x4e2>
 80222f2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80222f6:	1a9c      	subs	r4, r3, r2
 80222f8:	2c00      	cmp	r4, #0
 80222fa:	dd1a      	ble.n	8022332 <_vfiprintf_r+0x4e2>
 80222fc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8022300:	48b9      	ldr	r0, [pc, #740]	; (80225e8 <_vfiprintf_r+0x798>)
 8022302:	6030      	str	r0, [r6, #0]
 8022304:	2c10      	cmp	r4, #16
 8022306:	f103 0301 	add.w	r3, r3, #1
 802230a:	f106 0108 	add.w	r1, r6, #8
 802230e:	f300 814d 	bgt.w	80225ac <_vfiprintf_r+0x75c>
 8022312:	6074      	str	r4, [r6, #4]
 8022314:	2b07      	cmp	r3, #7
 8022316:	4414      	add	r4, r2
 8022318:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 802231c:	f340 8158 	ble.w	80225d0 <_vfiprintf_r+0x780>
 8022320:	aa0c      	add	r2, sp, #48	; 0x30
 8022322:	4639      	mov	r1, r7
 8022324:	4648      	mov	r0, r9
 8022326:	f7ff fd60 	bl	8021dea <__sprint_r>
 802232a:	2800      	cmp	r0, #0
 802232c:	f040 81b8 	bne.w	80226a0 <_vfiprintf_r+0x850>
 8022330:	ae0f      	add	r6, sp, #60	; 0x3c
 8022332:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022336:	b173      	cbz	r3, 8022356 <_vfiprintf_r+0x506>
 8022338:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 802233c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802233e:	6032      	str	r2, [r6, #0]
 8022340:	2201      	movs	r2, #1
 8022342:	6072      	str	r2, [r6, #4]
 8022344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022346:	3301      	adds	r3, #1
 8022348:	3201      	adds	r2, #1
 802234a:	2b07      	cmp	r3, #7
 802234c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022350:	f300 8140 	bgt.w	80225d4 <_vfiprintf_r+0x784>
 8022354:	3608      	adds	r6, #8
 8022356:	9b08      	ldr	r3, [sp, #32]
 8022358:	b16b      	cbz	r3, 8022376 <_vfiprintf_r+0x526>
 802235a:	aa0b      	add	r2, sp, #44	; 0x2c
 802235c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802235e:	6032      	str	r2, [r6, #0]
 8022360:	2202      	movs	r2, #2
 8022362:	6072      	str	r2, [r6, #4]
 8022364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022366:	3301      	adds	r3, #1
 8022368:	3202      	adds	r2, #2
 802236a:	2b07      	cmp	r3, #7
 802236c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022370:	f300 8140 	bgt.w	80225f4 <_vfiprintf_r+0x7a4>
 8022374:	3608      	adds	r6, #8
 8022376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022378:	2b80      	cmp	r3, #128	; 0x80
 802237a:	d11f      	bne.n	80223bc <_vfiprintf_r+0x56c>
 802237c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8022380:	1a9c      	subs	r4, r3, r2
 8022382:	2c00      	cmp	r4, #0
 8022384:	dd1a      	ble.n	80223bc <_vfiprintf_r+0x56c>
 8022386:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 802238a:	4898      	ldr	r0, [pc, #608]	; (80225ec <_vfiprintf_r+0x79c>)
 802238c:	6030      	str	r0, [r6, #0]
 802238e:	2c10      	cmp	r4, #16
 8022390:	f103 0301 	add.w	r3, r3, #1
 8022394:	f106 0108 	add.w	r1, r6, #8
 8022398:	f300 8135 	bgt.w	8022606 <_vfiprintf_r+0x7b6>
 802239c:	6074      	str	r4, [r6, #4]
 802239e:	2b07      	cmp	r3, #7
 80223a0:	4414      	add	r4, r2
 80223a2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80223a6:	f340 8140 	ble.w	802262a <_vfiprintf_r+0x7da>
 80223aa:	aa0c      	add	r2, sp, #48	; 0x30
 80223ac:	4639      	mov	r1, r7
 80223ae:	4648      	mov	r0, r9
 80223b0:	f7ff fd1b 	bl	8021dea <__sprint_r>
 80223b4:	2800      	cmp	r0, #0
 80223b6:	f040 8173 	bne.w	80226a0 <_vfiprintf_r+0x850>
 80223ba:	ae0f      	add	r6, sp, #60	; 0x3c
 80223bc:	9b00      	ldr	r3, [sp, #0]
 80223be:	1aec      	subs	r4, r5, r3
 80223c0:	2c00      	cmp	r4, #0
 80223c2:	dd1a      	ble.n	80223fa <_vfiprintf_r+0x5aa>
 80223c4:	4d89      	ldr	r5, [pc, #548]	; (80225ec <_vfiprintf_r+0x79c>)
 80223c6:	6035      	str	r5, [r6, #0]
 80223c8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80223cc:	2c10      	cmp	r4, #16
 80223ce:	f103 0301 	add.w	r3, r3, #1
 80223d2:	f106 0208 	add.w	r2, r6, #8
 80223d6:	f300 812a 	bgt.w	802262e <_vfiprintf_r+0x7de>
 80223da:	6074      	str	r4, [r6, #4]
 80223dc:	2b07      	cmp	r3, #7
 80223de:	440c      	add	r4, r1
 80223e0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80223e4:	f340 8134 	ble.w	8022650 <_vfiprintf_r+0x800>
 80223e8:	aa0c      	add	r2, sp, #48	; 0x30
 80223ea:	4639      	mov	r1, r7
 80223ec:	4648      	mov	r0, r9
 80223ee:	f7ff fcfc 	bl	8021dea <__sprint_r>
 80223f2:	2800      	cmp	r0, #0
 80223f4:	f040 8154 	bne.w	80226a0 <_vfiprintf_r+0x850>
 80223f8:	ae0f      	add	r6, sp, #60	; 0x3c
 80223fa:	9b00      	ldr	r3, [sp, #0]
 80223fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80223fe:	6073      	str	r3, [r6, #4]
 8022400:	4418      	add	r0, r3
 8022402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022404:	f8c6 8000 	str.w	r8, [r6]
 8022408:	3301      	adds	r3, #1
 802240a:	2b07      	cmp	r3, #7
 802240c:	900e      	str	r0, [sp, #56]	; 0x38
 802240e:	930d      	str	r3, [sp, #52]	; 0x34
 8022410:	f300 8120 	bgt.w	8022654 <_vfiprintf_r+0x804>
 8022414:	f106 0308 	add.w	r3, r6, #8
 8022418:	f01a 0f04 	tst.w	sl, #4
 802241c:	f040 8122 	bne.w	8022664 <_vfiprintf_r+0x814>
 8022420:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8022424:	9904      	ldr	r1, [sp, #16]
 8022426:	428a      	cmp	r2, r1
 8022428:	bfac      	ite	ge
 802242a:	189b      	addge	r3, r3, r2
 802242c:	185b      	addlt	r3, r3, r1
 802242e:	9302      	str	r3, [sp, #8]
 8022430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022432:	b13b      	cbz	r3, 8022444 <_vfiprintf_r+0x5f4>
 8022434:	aa0c      	add	r2, sp, #48	; 0x30
 8022436:	4639      	mov	r1, r7
 8022438:	4648      	mov	r0, r9
 802243a:	f7ff fcd6 	bl	8021dea <__sprint_r>
 802243e:	2800      	cmp	r0, #0
 8022440:	f040 812e 	bne.w	80226a0 <_vfiprintf_r+0x850>
 8022444:	2300      	movs	r3, #0
 8022446:	930d      	str	r3, [sp, #52]	; 0x34
 8022448:	465c      	mov	r4, fp
 802244a:	ae0f      	add	r6, sp, #60	; 0x3c
 802244c:	e564      	b.n	8021f18 <_vfiprintf_r+0xc8>
 802244e:	4640      	mov	r0, r8
 8022450:	f7dd fee8 	bl	8000224 <strlen>
 8022454:	9000      	str	r0, [sp, #0]
 8022456:	e736      	b.n	80222c6 <_vfiprintf_r+0x476>
 8022458:	f04a 0a10 	orr.w	sl, sl, #16
 802245c:	f01a 0f20 	tst.w	sl, #32
 8022460:	d006      	beq.n	8022470 <_vfiprintf_r+0x620>
 8022462:	3407      	adds	r4, #7
 8022464:	f024 0b07 	bic.w	fp, r4, #7
 8022468:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 802246c:	2301      	movs	r3, #1
 802246e:	e6dd      	b.n	802222c <_vfiprintf_r+0x3dc>
 8022470:	f01a 0f10 	tst.w	sl, #16
 8022474:	f104 0b04 	add.w	fp, r4, #4
 8022478:	d001      	beq.n	802247e <_vfiprintf_r+0x62e>
 802247a:	6824      	ldr	r4, [r4, #0]
 802247c:	e003      	b.n	8022486 <_vfiprintf_r+0x636>
 802247e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022482:	d002      	beq.n	802248a <_vfiprintf_r+0x63a>
 8022484:	8824      	ldrh	r4, [r4, #0]
 8022486:	2500      	movs	r5, #0
 8022488:	e7f0      	b.n	802246c <_vfiprintf_r+0x61c>
 802248a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802248e:	d0f4      	beq.n	802247a <_vfiprintf_r+0x62a>
 8022490:	7824      	ldrb	r4, [r4, #0]
 8022492:	e7f8      	b.n	8022486 <_vfiprintf_r+0x636>
 8022494:	4a56      	ldr	r2, [pc, #344]	; (80225f0 <_vfiprintf_r+0x7a0>)
 8022496:	e5d5      	b.n	8022044 <_vfiprintf_r+0x1f4>
 8022498:	f01a 0f10 	tst.w	sl, #16
 802249c:	f104 0b04 	add.w	fp, r4, #4
 80224a0:	d001      	beq.n	80224a6 <_vfiprintf_r+0x656>
 80224a2:	6824      	ldr	r4, [r4, #0]
 80224a4:	e003      	b.n	80224ae <_vfiprintf_r+0x65e>
 80224a6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80224aa:	d002      	beq.n	80224b2 <_vfiprintf_r+0x662>
 80224ac:	8824      	ldrh	r4, [r4, #0]
 80224ae:	2500      	movs	r5, #0
 80224b0:	e5d2      	b.n	8022058 <_vfiprintf_r+0x208>
 80224b2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80224b6:	d0f4      	beq.n	80224a2 <_vfiprintf_r+0x652>
 80224b8:	7824      	ldrb	r4, [r4, #0]
 80224ba:	e7f8      	b.n	80224ae <_vfiprintf_r+0x65e>
 80224bc:	2d00      	cmp	r5, #0
 80224be:	bf08      	it	eq
 80224c0:	2c0a      	cmpeq	r4, #10
 80224c2:	d205      	bcs.n	80224d0 <_vfiprintf_r+0x680>
 80224c4:	3430      	adds	r4, #48	; 0x30
 80224c6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80224ca:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80224ce:	e13c      	b.n	802274a <_vfiprintf_r+0x8fa>
 80224d0:	ab38      	add	r3, sp, #224	; 0xe0
 80224d2:	9308      	str	r3, [sp, #32]
 80224d4:	9b04      	ldr	r3, [sp, #16]
 80224d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80224da:	f04f 0a00 	mov.w	sl, #0
 80224de:	9309      	str	r3, [sp, #36]	; 0x24
 80224e0:	9b08      	ldr	r3, [sp, #32]
 80224e2:	220a      	movs	r2, #10
 80224e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80224e8:	4620      	mov	r0, r4
 80224ea:	2300      	movs	r3, #0
 80224ec:	4629      	mov	r1, r5
 80224ee:	f7de fbdb 	bl	8000ca8 <__aeabi_uldivmod>
 80224f2:	9b08      	ldr	r3, [sp, #32]
 80224f4:	3230      	adds	r2, #48	; 0x30
 80224f6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80224fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224fc:	f10a 0a01 	add.w	sl, sl, #1
 8022500:	b1db      	cbz	r3, 802253a <_vfiprintf_r+0x6ea>
 8022502:	9b06      	ldr	r3, [sp, #24]
 8022504:	781b      	ldrb	r3, [r3, #0]
 8022506:	4553      	cmp	r3, sl
 8022508:	d117      	bne.n	802253a <_vfiprintf_r+0x6ea>
 802250a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802250e:	d014      	beq.n	802253a <_vfiprintf_r+0x6ea>
 8022510:	2d00      	cmp	r5, #0
 8022512:	bf08      	it	eq
 8022514:	2c0a      	cmpeq	r4, #10
 8022516:	d310      	bcc.n	802253a <_vfiprintf_r+0x6ea>
 8022518:	9b07      	ldr	r3, [sp, #28]
 802251a:	eba8 0803 	sub.w	r8, r8, r3
 802251e:	461a      	mov	r2, r3
 8022520:	ee18 1a10 	vmov	r1, s16
 8022524:	4640      	mov	r0, r8
 8022526:	f7f9 faa4 	bl	801ba72 <strncpy>
 802252a:	9b06      	ldr	r3, [sp, #24]
 802252c:	785b      	ldrb	r3, [r3, #1]
 802252e:	b1a3      	cbz	r3, 802255a <_vfiprintf_r+0x70a>
 8022530:	9b06      	ldr	r3, [sp, #24]
 8022532:	3301      	adds	r3, #1
 8022534:	9306      	str	r3, [sp, #24]
 8022536:	f04f 0a00 	mov.w	sl, #0
 802253a:	220a      	movs	r2, #10
 802253c:	2300      	movs	r3, #0
 802253e:	4620      	mov	r0, r4
 8022540:	4629      	mov	r1, r5
 8022542:	f7de fbb1 	bl	8000ca8 <__aeabi_uldivmod>
 8022546:	2d00      	cmp	r5, #0
 8022548:	bf08      	it	eq
 802254a:	2c0a      	cmpeq	r4, #10
 802254c:	f0c0 80fd 	bcc.w	802274a <_vfiprintf_r+0x8fa>
 8022550:	4604      	mov	r4, r0
 8022552:	460d      	mov	r5, r1
 8022554:	f8cd 8020 	str.w	r8, [sp, #32]
 8022558:	e7c2      	b.n	80224e0 <_vfiprintf_r+0x690>
 802255a:	469a      	mov	sl, r3
 802255c:	e7ed      	b.n	802253a <_vfiprintf_r+0x6ea>
 802255e:	9a05      	ldr	r2, [sp, #20]
 8022560:	f004 030f 	and.w	r3, r4, #15
 8022564:	5cd3      	ldrb	r3, [r2, r3]
 8022566:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802256a:	0923      	lsrs	r3, r4, #4
 802256c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8022570:	092a      	lsrs	r2, r5, #4
 8022572:	461c      	mov	r4, r3
 8022574:	4615      	mov	r5, r2
 8022576:	ea54 0305 	orrs.w	r3, r4, r5
 802257a:	d1f0      	bne.n	802255e <_vfiprintf_r+0x70e>
 802257c:	e0e5      	b.n	802274a <_vfiprintf_r+0x8fa>
 802257e:	b933      	cbnz	r3, 802258e <_vfiprintf_r+0x73e>
 8022580:	f01a 0f01 	tst.w	sl, #1
 8022584:	d003      	beq.n	802258e <_vfiprintf_r+0x73e>
 8022586:	2330      	movs	r3, #48	; 0x30
 8022588:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 802258c:	e79d      	b.n	80224ca <_vfiprintf_r+0x67a>
 802258e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022592:	e0da      	b.n	802274a <_vfiprintf_r+0x8fa>
 8022594:	2b00      	cmp	r3, #0
 8022596:	f000 80a4 	beq.w	80226e2 <_vfiprintf_r+0x892>
 802259a:	2100      	movs	r1, #0
 802259c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80225a0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80225a4:	46a3      	mov	fp, r4
 80225a6:	e5e7      	b.n	8022178 <_vfiprintf_r+0x328>
 80225a8:	4605      	mov	r5, r0
 80225aa:	e68c      	b.n	80222c6 <_vfiprintf_r+0x476>
 80225ac:	2010      	movs	r0, #16
 80225ae:	4402      	add	r2, r0
 80225b0:	2b07      	cmp	r3, #7
 80225b2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80225b6:	6070      	str	r0, [r6, #4]
 80225b8:	dd07      	ble.n	80225ca <_vfiprintf_r+0x77a>
 80225ba:	aa0c      	add	r2, sp, #48	; 0x30
 80225bc:	4639      	mov	r1, r7
 80225be:	4648      	mov	r0, r9
 80225c0:	f7ff fc13 	bl	8021dea <__sprint_r>
 80225c4:	2800      	cmp	r0, #0
 80225c6:	d16b      	bne.n	80226a0 <_vfiprintf_r+0x850>
 80225c8:	a90f      	add	r1, sp, #60	; 0x3c
 80225ca:	3c10      	subs	r4, #16
 80225cc:	460e      	mov	r6, r1
 80225ce:	e695      	b.n	80222fc <_vfiprintf_r+0x4ac>
 80225d0:	460e      	mov	r6, r1
 80225d2:	e6ae      	b.n	8022332 <_vfiprintf_r+0x4e2>
 80225d4:	aa0c      	add	r2, sp, #48	; 0x30
 80225d6:	4639      	mov	r1, r7
 80225d8:	4648      	mov	r0, r9
 80225da:	f7ff fc06 	bl	8021dea <__sprint_r>
 80225de:	2800      	cmp	r0, #0
 80225e0:	d15e      	bne.n	80226a0 <_vfiprintf_r+0x850>
 80225e2:	ae0f      	add	r6, sp, #60	; 0x3c
 80225e4:	e6b7      	b.n	8022356 <_vfiprintf_r+0x506>
 80225e6:	bf00      	nop
 80225e8:	08029526 	.word	0x08029526
 80225ec:	08029536 	.word	0x08029536
 80225f0:	08029299 	.word	0x08029299
 80225f4:	aa0c      	add	r2, sp, #48	; 0x30
 80225f6:	4639      	mov	r1, r7
 80225f8:	4648      	mov	r0, r9
 80225fa:	f7ff fbf6 	bl	8021dea <__sprint_r>
 80225fe:	2800      	cmp	r0, #0
 8022600:	d14e      	bne.n	80226a0 <_vfiprintf_r+0x850>
 8022602:	ae0f      	add	r6, sp, #60	; 0x3c
 8022604:	e6b7      	b.n	8022376 <_vfiprintf_r+0x526>
 8022606:	2010      	movs	r0, #16
 8022608:	4402      	add	r2, r0
 802260a:	2b07      	cmp	r3, #7
 802260c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022610:	6070      	str	r0, [r6, #4]
 8022612:	dd07      	ble.n	8022624 <_vfiprintf_r+0x7d4>
 8022614:	aa0c      	add	r2, sp, #48	; 0x30
 8022616:	4639      	mov	r1, r7
 8022618:	4648      	mov	r0, r9
 802261a:	f7ff fbe6 	bl	8021dea <__sprint_r>
 802261e:	2800      	cmp	r0, #0
 8022620:	d13e      	bne.n	80226a0 <_vfiprintf_r+0x850>
 8022622:	a90f      	add	r1, sp, #60	; 0x3c
 8022624:	3c10      	subs	r4, #16
 8022626:	460e      	mov	r6, r1
 8022628:	e6ad      	b.n	8022386 <_vfiprintf_r+0x536>
 802262a:	460e      	mov	r6, r1
 802262c:	e6c6      	b.n	80223bc <_vfiprintf_r+0x56c>
 802262e:	2010      	movs	r0, #16
 8022630:	4401      	add	r1, r0
 8022632:	2b07      	cmp	r3, #7
 8022634:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8022638:	6070      	str	r0, [r6, #4]
 802263a:	dd06      	ble.n	802264a <_vfiprintf_r+0x7fa>
 802263c:	aa0c      	add	r2, sp, #48	; 0x30
 802263e:	4639      	mov	r1, r7
 8022640:	4648      	mov	r0, r9
 8022642:	f7ff fbd2 	bl	8021dea <__sprint_r>
 8022646:	bb58      	cbnz	r0, 80226a0 <_vfiprintf_r+0x850>
 8022648:	aa0f      	add	r2, sp, #60	; 0x3c
 802264a:	3c10      	subs	r4, #16
 802264c:	4616      	mov	r6, r2
 802264e:	e6ba      	b.n	80223c6 <_vfiprintf_r+0x576>
 8022650:	4616      	mov	r6, r2
 8022652:	e6d2      	b.n	80223fa <_vfiprintf_r+0x5aa>
 8022654:	aa0c      	add	r2, sp, #48	; 0x30
 8022656:	4639      	mov	r1, r7
 8022658:	4648      	mov	r0, r9
 802265a:	f7ff fbc6 	bl	8021dea <__sprint_r>
 802265e:	b9f8      	cbnz	r0, 80226a0 <_vfiprintf_r+0x850>
 8022660:	ab0f      	add	r3, sp, #60	; 0x3c
 8022662:	e6d9      	b.n	8022418 <_vfiprintf_r+0x5c8>
 8022664:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8022668:	1a54      	subs	r4, r2, r1
 802266a:	2c00      	cmp	r4, #0
 802266c:	f77f aed8 	ble.w	8022420 <_vfiprintf_r+0x5d0>
 8022670:	4d3a      	ldr	r5, [pc, #232]	; (802275c <_vfiprintf_r+0x90c>)
 8022672:	2610      	movs	r6, #16
 8022674:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8022678:	2c10      	cmp	r4, #16
 802267a:	f102 0201 	add.w	r2, r2, #1
 802267e:	601d      	str	r5, [r3, #0]
 8022680:	dc1d      	bgt.n	80226be <_vfiprintf_r+0x86e>
 8022682:	605c      	str	r4, [r3, #4]
 8022684:	2a07      	cmp	r2, #7
 8022686:	440c      	add	r4, r1
 8022688:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 802268c:	f77f aec8 	ble.w	8022420 <_vfiprintf_r+0x5d0>
 8022690:	aa0c      	add	r2, sp, #48	; 0x30
 8022692:	4639      	mov	r1, r7
 8022694:	4648      	mov	r0, r9
 8022696:	f7ff fba8 	bl	8021dea <__sprint_r>
 802269a:	2800      	cmp	r0, #0
 802269c:	f43f aec0 	beq.w	8022420 <_vfiprintf_r+0x5d0>
 80226a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80226a2:	07d9      	lsls	r1, r3, #31
 80226a4:	d405      	bmi.n	80226b2 <_vfiprintf_r+0x862>
 80226a6:	89bb      	ldrh	r3, [r7, #12]
 80226a8:	059a      	lsls	r2, r3, #22
 80226aa:	d402      	bmi.n	80226b2 <_vfiprintf_r+0x862>
 80226ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80226ae:	f7fd fb5e 	bl	801fd6e <__retarget_lock_release_recursive>
 80226b2:	89bb      	ldrh	r3, [r7, #12]
 80226b4:	065b      	lsls	r3, r3, #25
 80226b6:	f57f abfe 	bpl.w	8021eb6 <_vfiprintf_r+0x66>
 80226ba:	f7ff bbf9 	b.w	8021eb0 <_vfiprintf_r+0x60>
 80226be:	3110      	adds	r1, #16
 80226c0:	2a07      	cmp	r2, #7
 80226c2:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80226c6:	605e      	str	r6, [r3, #4]
 80226c8:	dc02      	bgt.n	80226d0 <_vfiprintf_r+0x880>
 80226ca:	3308      	adds	r3, #8
 80226cc:	3c10      	subs	r4, #16
 80226ce:	e7d1      	b.n	8022674 <_vfiprintf_r+0x824>
 80226d0:	aa0c      	add	r2, sp, #48	; 0x30
 80226d2:	4639      	mov	r1, r7
 80226d4:	4648      	mov	r0, r9
 80226d6:	f7ff fb88 	bl	8021dea <__sprint_r>
 80226da:	2800      	cmp	r0, #0
 80226dc:	d1e0      	bne.n	80226a0 <_vfiprintf_r+0x850>
 80226de:	ab0f      	add	r3, sp, #60	; 0x3c
 80226e0:	e7f4      	b.n	80226cc <_vfiprintf_r+0x87c>
 80226e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226e4:	b913      	cbnz	r3, 80226ec <_vfiprintf_r+0x89c>
 80226e6:	2300      	movs	r3, #0
 80226e8:	930d      	str	r3, [sp, #52]	; 0x34
 80226ea:	e7d9      	b.n	80226a0 <_vfiprintf_r+0x850>
 80226ec:	aa0c      	add	r2, sp, #48	; 0x30
 80226ee:	4639      	mov	r1, r7
 80226f0:	4648      	mov	r0, r9
 80226f2:	f7ff fb7a 	bl	8021dea <__sprint_r>
 80226f6:	2800      	cmp	r0, #0
 80226f8:	d0f5      	beq.n	80226e6 <_vfiprintf_r+0x896>
 80226fa:	e7d1      	b.n	80226a0 <_vfiprintf_r+0x850>
 80226fc:	ea54 0205 	orrs.w	r2, r4, r5
 8022700:	f8cd a010 	str.w	sl, [sp, #16]
 8022704:	f43f ada4 	beq.w	8022250 <_vfiprintf_r+0x400>
 8022708:	2b01      	cmp	r3, #1
 802270a:	f43f aed7 	beq.w	80224bc <_vfiprintf_r+0x66c>
 802270e:	2b02      	cmp	r3, #2
 8022710:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022714:	f43f af23 	beq.w	802255e <_vfiprintf_r+0x70e>
 8022718:	08e2      	lsrs	r2, r4, #3
 802271a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 802271e:	08e8      	lsrs	r0, r5, #3
 8022720:	f004 0307 	and.w	r3, r4, #7
 8022724:	4605      	mov	r5, r0
 8022726:	4614      	mov	r4, r2
 8022728:	3330      	adds	r3, #48	; 0x30
 802272a:	ea54 0205 	orrs.w	r2, r4, r5
 802272e:	4641      	mov	r1, r8
 8022730:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8022734:	d1f0      	bne.n	8022718 <_vfiprintf_r+0x8c8>
 8022736:	9a04      	ldr	r2, [sp, #16]
 8022738:	07d0      	lsls	r0, r2, #31
 802273a:	d506      	bpl.n	802274a <_vfiprintf_r+0x8fa>
 802273c:	2b30      	cmp	r3, #48	; 0x30
 802273e:	d004      	beq.n	802274a <_vfiprintf_r+0x8fa>
 8022740:	2330      	movs	r3, #48	; 0x30
 8022742:	f808 3c01 	strb.w	r3, [r8, #-1]
 8022746:	f1a1 0802 	sub.w	r8, r1, #2
 802274a:	ab38      	add	r3, sp, #224	; 0xe0
 802274c:	eba3 0308 	sub.w	r3, r3, r8
 8022750:	9d00      	ldr	r5, [sp, #0]
 8022752:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022756:	9300      	str	r3, [sp, #0]
 8022758:	e5b5      	b.n	80222c6 <_vfiprintf_r+0x476>
 802275a:	bf00      	nop
 802275c:	08029526 	.word	0x08029526

08022760 <__sbprintf>:
 8022760:	b570      	push	{r4, r5, r6, lr}
 8022762:	460c      	mov	r4, r1
 8022764:	8989      	ldrh	r1, [r1, #12]
 8022766:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 802276a:	f021 0102 	bic.w	r1, r1, #2
 802276e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8022772:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8022774:	911b      	str	r1, [sp, #108]	; 0x6c
 8022776:	89e1      	ldrh	r1, [r4, #14]
 8022778:	f8ad 1016 	strh.w	r1, [sp, #22]
 802277c:	69e1      	ldr	r1, [r4, #28]
 802277e:	9109      	str	r1, [sp, #36]	; 0x24
 8022780:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8022782:	910b      	str	r1, [sp, #44]	; 0x2c
 8022784:	a91c      	add	r1, sp, #112	; 0x70
 8022786:	9102      	str	r1, [sp, #8]
 8022788:	9106      	str	r1, [sp, #24]
 802278a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802278e:	4606      	mov	r6, r0
 8022790:	9104      	str	r1, [sp, #16]
 8022792:	9107      	str	r1, [sp, #28]
 8022794:	a818      	add	r0, sp, #96	; 0x60
 8022796:	2100      	movs	r1, #0
 8022798:	e9cd 3200 	strd	r3, r2, [sp]
 802279c:	9108      	str	r1, [sp, #32]
 802279e:	f7fd fae1 	bl	801fd64 <__retarget_lock_init_recursive>
 80227a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80227a6:	a902      	add	r1, sp, #8
 80227a8:	4630      	mov	r0, r6
 80227aa:	f7ff fb51 	bl	8021e50 <_vfiprintf_r>
 80227ae:	1e05      	subs	r5, r0, #0
 80227b0:	db07      	blt.n	80227c2 <__sbprintf+0x62>
 80227b2:	a902      	add	r1, sp, #8
 80227b4:	4630      	mov	r0, r6
 80227b6:	f7fc ffff 	bl	801f7b8 <_fflush_r>
 80227ba:	2800      	cmp	r0, #0
 80227bc:	bf18      	it	ne
 80227be:	f04f 35ff 	movne.w	r5, #4294967295
 80227c2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80227c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80227c8:	065b      	lsls	r3, r3, #25
 80227ca:	bf42      	ittt	mi
 80227cc:	89a3      	ldrhmi	r3, [r4, #12]
 80227ce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80227d2:	81a3      	strhmi	r3, [r4, #12]
 80227d4:	f7fd fac7 	bl	801fd66 <__retarget_lock_close_recursive>
 80227d8:	4628      	mov	r0, r5
 80227da:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80227de:	bd70      	pop	{r4, r5, r6, pc}

080227e0 <_write_r>:
 80227e0:	b538      	push	{r3, r4, r5, lr}
 80227e2:	4d07      	ldr	r5, [pc, #28]	; (8022800 <_write_r+0x20>)
 80227e4:	4604      	mov	r4, r0
 80227e6:	4608      	mov	r0, r1
 80227e8:	4611      	mov	r1, r2
 80227ea:	2200      	movs	r2, #0
 80227ec:	602a      	str	r2, [r5, #0]
 80227ee:	461a      	mov	r2, r3
 80227f0:	f7de fc93 	bl	800111a <_write>
 80227f4:	1c43      	adds	r3, r0, #1
 80227f6:	d102      	bne.n	80227fe <_write_r+0x1e>
 80227f8:	682b      	ldr	r3, [r5, #0]
 80227fa:	b103      	cbz	r3, 80227fe <_write_r+0x1e>
 80227fc:	6023      	str	r3, [r4, #0]
 80227fe:	bd38      	pop	{r3, r4, r5, pc}
 8022800:	2000be64 	.word	0x2000be64

08022804 <__register_exitproc>:
 8022804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022808:	4d1c      	ldr	r5, [pc, #112]	; (802287c <__register_exitproc+0x78>)
 802280a:	4606      	mov	r6, r0
 802280c:	6828      	ldr	r0, [r5, #0]
 802280e:	4698      	mov	r8, r3
 8022810:	460f      	mov	r7, r1
 8022812:	4691      	mov	r9, r2
 8022814:	f7fd faa9 	bl	801fd6a <__retarget_lock_acquire_recursive>
 8022818:	4b19      	ldr	r3, [pc, #100]	; (8022880 <__register_exitproc+0x7c>)
 802281a:	681b      	ldr	r3, [r3, #0]
 802281c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8022820:	4628      	mov	r0, r5
 8022822:	b91c      	cbnz	r4, 802282c <__register_exitproc+0x28>
 8022824:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8022828:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 802282c:	6865      	ldr	r5, [r4, #4]
 802282e:	6800      	ldr	r0, [r0, #0]
 8022830:	2d1f      	cmp	r5, #31
 8022832:	dd05      	ble.n	8022840 <__register_exitproc+0x3c>
 8022834:	f7fd fa9b 	bl	801fd6e <__retarget_lock_release_recursive>
 8022838:	f04f 30ff 	mov.w	r0, #4294967295
 802283c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022840:	b19e      	cbz	r6, 802286a <__register_exitproc+0x66>
 8022842:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8022846:	2201      	movs	r2, #1
 8022848:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 802284c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8022850:	40aa      	lsls	r2, r5
 8022852:	4313      	orrs	r3, r2
 8022854:	2e02      	cmp	r6, #2
 8022856:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 802285a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 802285e:	bf02      	ittt	eq
 8022860:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8022864:	431a      	orreq	r2, r3
 8022866:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 802286a:	1c6b      	adds	r3, r5, #1
 802286c:	3502      	adds	r5, #2
 802286e:	6063      	str	r3, [r4, #4]
 8022870:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8022874:	f7fd fa7b 	bl	801fd6e <__retarget_lock_release_recursive>
 8022878:	2000      	movs	r0, #0
 802287a:	e7df      	b.n	802283c <__register_exitproc+0x38>
 802287c:	20000470 	.word	0x20000470
 8022880:	080291b4 	.word	0x080291b4

08022884 <__assert_func>:
 8022884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022886:	4614      	mov	r4, r2
 8022888:	461a      	mov	r2, r3
 802288a:	4b09      	ldr	r3, [pc, #36]	; (80228b0 <__assert_func+0x2c>)
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	4605      	mov	r5, r0
 8022890:	68d8      	ldr	r0, [r3, #12]
 8022892:	b14c      	cbz	r4, 80228a8 <__assert_func+0x24>
 8022894:	4b07      	ldr	r3, [pc, #28]	; (80228b4 <__assert_func+0x30>)
 8022896:	9100      	str	r1, [sp, #0]
 8022898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802289c:	4906      	ldr	r1, [pc, #24]	; (80228b8 <__assert_func+0x34>)
 802289e:	462b      	mov	r3, r5
 80228a0:	f000 f8b0 	bl	8022a04 <fiprintf>
 80228a4:	f000 fe85 	bl	80235b2 <abort>
 80228a8:	4b04      	ldr	r3, [pc, #16]	; (80228bc <__assert_func+0x38>)
 80228aa:	461c      	mov	r4, r3
 80228ac:	e7f3      	b.n	8022896 <__assert_func+0x12>
 80228ae:	bf00      	nop
 80228b0:	20000038 	.word	0x20000038
 80228b4:	08029546 	.word	0x08029546
 80228b8:	08029553 	.word	0x08029553
 80228bc:	08029581 	.word	0x08029581

080228c0 <_calloc_r>:
 80228c0:	b510      	push	{r4, lr}
 80228c2:	4351      	muls	r1, r2
 80228c4:	f7fd fad0 	bl	801fe68 <_malloc_r>
 80228c8:	4604      	mov	r4, r0
 80228ca:	b198      	cbz	r0, 80228f4 <_calloc_r+0x34>
 80228cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80228d0:	f022 0203 	bic.w	r2, r2, #3
 80228d4:	3a04      	subs	r2, #4
 80228d6:	2a24      	cmp	r2, #36	; 0x24
 80228d8:	d81b      	bhi.n	8022912 <_calloc_r+0x52>
 80228da:	2a13      	cmp	r2, #19
 80228dc:	d917      	bls.n	802290e <_calloc_r+0x4e>
 80228de:	2100      	movs	r1, #0
 80228e0:	2a1b      	cmp	r2, #27
 80228e2:	e9c0 1100 	strd	r1, r1, [r0]
 80228e6:	d807      	bhi.n	80228f8 <_calloc_r+0x38>
 80228e8:	f100 0308 	add.w	r3, r0, #8
 80228ec:	2200      	movs	r2, #0
 80228ee:	e9c3 2200 	strd	r2, r2, [r3]
 80228f2:	609a      	str	r2, [r3, #8]
 80228f4:	4620      	mov	r0, r4
 80228f6:	bd10      	pop	{r4, pc}
 80228f8:	2a24      	cmp	r2, #36	; 0x24
 80228fa:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80228fe:	bf11      	iteee	ne
 8022900:	f100 0310 	addne.w	r3, r0, #16
 8022904:	6101      	streq	r1, [r0, #16]
 8022906:	f100 0318 	addeq.w	r3, r0, #24
 802290a:	6141      	streq	r1, [r0, #20]
 802290c:	e7ee      	b.n	80228ec <_calloc_r+0x2c>
 802290e:	4603      	mov	r3, r0
 8022910:	e7ec      	b.n	80228ec <_calloc_r+0x2c>
 8022912:	2100      	movs	r1, #0
 8022914:	f7f8 fd84 	bl	801b420 <memset>
 8022918:	e7ec      	b.n	80228f4 <_calloc_r+0x34>
	...

0802291c <_close_r>:
 802291c:	b538      	push	{r3, r4, r5, lr}
 802291e:	4d06      	ldr	r5, [pc, #24]	; (8022938 <_close_r+0x1c>)
 8022920:	2300      	movs	r3, #0
 8022922:	4604      	mov	r4, r0
 8022924:	4608      	mov	r0, r1
 8022926:	602b      	str	r3, [r5, #0]
 8022928:	f7e1 f935 	bl	8003b96 <_close>
 802292c:	1c43      	adds	r3, r0, #1
 802292e:	d102      	bne.n	8022936 <_close_r+0x1a>
 8022930:	682b      	ldr	r3, [r5, #0]
 8022932:	b103      	cbz	r3, 8022936 <_close_r+0x1a>
 8022934:	6023      	str	r3, [r4, #0]
 8022936:	bd38      	pop	{r3, r4, r5, pc}
 8022938:	2000be64 	.word	0x2000be64

0802293c <__env_lock>:
 802293c:	4801      	ldr	r0, [pc, #4]	; (8022944 <__env_lock+0x8>)
 802293e:	f7fd ba14 	b.w	801fd6a <__retarget_lock_acquire_recursive>
 8022942:	bf00      	nop
 8022944:	2000be6e 	.word	0x2000be6e

08022948 <__env_unlock>:
 8022948:	4801      	ldr	r0, [pc, #4]	; (8022950 <__env_unlock+0x8>)
 802294a:	f7fd ba10 	b.w	801fd6e <__retarget_lock_release_recursive>
 802294e:	bf00      	nop
 8022950:	2000be6e 	.word	0x2000be6e

08022954 <_fclose_r>:
 8022954:	b570      	push	{r4, r5, r6, lr}
 8022956:	4606      	mov	r6, r0
 8022958:	460c      	mov	r4, r1
 802295a:	b911      	cbnz	r1, 8022962 <_fclose_r+0xe>
 802295c:	2500      	movs	r5, #0
 802295e:	4628      	mov	r0, r5
 8022960:	bd70      	pop	{r4, r5, r6, pc}
 8022962:	b118      	cbz	r0, 802296c <_fclose_r+0x18>
 8022964:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8022966:	b90b      	cbnz	r3, 802296c <_fclose_r+0x18>
 8022968:	f7fc ff92 	bl	801f890 <__sinit>
 802296c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802296e:	07d8      	lsls	r0, r3, #31
 8022970:	d405      	bmi.n	802297e <_fclose_r+0x2a>
 8022972:	89a3      	ldrh	r3, [r4, #12]
 8022974:	0599      	lsls	r1, r3, #22
 8022976:	d402      	bmi.n	802297e <_fclose_r+0x2a>
 8022978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802297a:	f7fd f9f6 	bl	801fd6a <__retarget_lock_acquire_recursive>
 802297e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022982:	b93b      	cbnz	r3, 8022994 <_fclose_r+0x40>
 8022984:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8022986:	f015 0501 	ands.w	r5, r5, #1
 802298a:	d1e7      	bne.n	802295c <_fclose_r+0x8>
 802298c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802298e:	f7fd f9ee 	bl	801fd6e <__retarget_lock_release_recursive>
 8022992:	e7e4      	b.n	802295e <_fclose_r+0xa>
 8022994:	4621      	mov	r1, r4
 8022996:	4630      	mov	r0, r6
 8022998:	f7fc fe80 	bl	801f69c <__sflush_r>
 802299c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802299e:	4605      	mov	r5, r0
 80229a0:	b133      	cbz	r3, 80229b0 <_fclose_r+0x5c>
 80229a2:	69e1      	ldr	r1, [r4, #28]
 80229a4:	4630      	mov	r0, r6
 80229a6:	4798      	blx	r3
 80229a8:	2800      	cmp	r0, #0
 80229aa:	bfb8      	it	lt
 80229ac:	f04f 35ff 	movlt.w	r5, #4294967295
 80229b0:	89a3      	ldrh	r3, [r4, #12]
 80229b2:	061a      	lsls	r2, r3, #24
 80229b4:	d503      	bpl.n	80229be <_fclose_r+0x6a>
 80229b6:	6921      	ldr	r1, [r4, #16]
 80229b8:	4630      	mov	r0, r6
 80229ba:	f7fc fff9 	bl	801f9b0 <_free_r>
 80229be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80229c0:	b141      	cbz	r1, 80229d4 <_fclose_r+0x80>
 80229c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80229c6:	4299      	cmp	r1, r3
 80229c8:	d002      	beq.n	80229d0 <_fclose_r+0x7c>
 80229ca:	4630      	mov	r0, r6
 80229cc:	f7fc fff0 	bl	801f9b0 <_free_r>
 80229d0:	2300      	movs	r3, #0
 80229d2:	6323      	str	r3, [r4, #48]	; 0x30
 80229d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80229d6:	b121      	cbz	r1, 80229e2 <_fclose_r+0x8e>
 80229d8:	4630      	mov	r0, r6
 80229da:	f7fc ffe9 	bl	801f9b0 <_free_r>
 80229de:	2300      	movs	r3, #0
 80229e0:	6463      	str	r3, [r4, #68]	; 0x44
 80229e2:	f7fc ff3d 	bl	801f860 <__sfp_lock_acquire>
 80229e6:	2300      	movs	r3, #0
 80229e8:	81a3      	strh	r3, [r4, #12]
 80229ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80229ec:	07db      	lsls	r3, r3, #31
 80229ee:	d402      	bmi.n	80229f6 <_fclose_r+0xa2>
 80229f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80229f2:	f7fd f9bc 	bl	801fd6e <__retarget_lock_release_recursive>
 80229f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80229f8:	f7fd f9b5 	bl	801fd66 <__retarget_lock_close_recursive>
 80229fc:	f7fc ff36 	bl	801f86c <__sfp_lock_release>
 8022a00:	e7ad      	b.n	802295e <_fclose_r+0xa>
	...

08022a04 <fiprintf>:
 8022a04:	b40e      	push	{r1, r2, r3}
 8022a06:	b503      	push	{r0, r1, lr}
 8022a08:	4601      	mov	r1, r0
 8022a0a:	ab03      	add	r3, sp, #12
 8022a0c:	4805      	ldr	r0, [pc, #20]	; (8022a24 <fiprintf+0x20>)
 8022a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a12:	6800      	ldr	r0, [r0, #0]
 8022a14:	9301      	str	r3, [sp, #4]
 8022a16:	f7ff fa1b 	bl	8021e50 <_vfiprintf_r>
 8022a1a:	b002      	add	sp, #8
 8022a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a20:	b003      	add	sp, #12
 8022a22:	4770      	bx	lr
 8022a24:	20000038 	.word	0x20000038

08022a28 <__fputwc>:
 8022a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022a2c:	4680      	mov	r8, r0
 8022a2e:	460e      	mov	r6, r1
 8022a30:	4615      	mov	r5, r2
 8022a32:	f000 f9df 	bl	8022df4 <__locale_mb_cur_max>
 8022a36:	2801      	cmp	r0, #1
 8022a38:	d11c      	bne.n	8022a74 <__fputwc+0x4c>
 8022a3a:	1e73      	subs	r3, r6, #1
 8022a3c:	2bfe      	cmp	r3, #254	; 0xfe
 8022a3e:	d819      	bhi.n	8022a74 <__fputwc+0x4c>
 8022a40:	f88d 6004 	strb.w	r6, [sp, #4]
 8022a44:	4604      	mov	r4, r0
 8022a46:	2700      	movs	r7, #0
 8022a48:	f10d 0904 	add.w	r9, sp, #4
 8022a4c:	42a7      	cmp	r7, r4
 8022a4e:	d020      	beq.n	8022a92 <__fputwc+0x6a>
 8022a50:	68ab      	ldr	r3, [r5, #8]
 8022a52:	f817 1009 	ldrb.w	r1, [r7, r9]
 8022a56:	3b01      	subs	r3, #1
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	60ab      	str	r3, [r5, #8]
 8022a5c:	da04      	bge.n	8022a68 <__fputwc+0x40>
 8022a5e:	69aa      	ldr	r2, [r5, #24]
 8022a60:	4293      	cmp	r3, r2
 8022a62:	db1a      	blt.n	8022a9a <__fputwc+0x72>
 8022a64:	290a      	cmp	r1, #10
 8022a66:	d018      	beq.n	8022a9a <__fputwc+0x72>
 8022a68:	682b      	ldr	r3, [r5, #0]
 8022a6a:	1c5a      	adds	r2, r3, #1
 8022a6c:	602a      	str	r2, [r5, #0]
 8022a6e:	7019      	strb	r1, [r3, #0]
 8022a70:	3701      	adds	r7, #1
 8022a72:	e7eb      	b.n	8022a4c <__fputwc+0x24>
 8022a74:	4632      	mov	r2, r6
 8022a76:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8022a7a:	a901      	add	r1, sp, #4
 8022a7c:	4640      	mov	r0, r8
 8022a7e:	f000 fd75 	bl	802356c <_wcrtomb_r>
 8022a82:	1c42      	adds	r2, r0, #1
 8022a84:	4604      	mov	r4, r0
 8022a86:	d1de      	bne.n	8022a46 <__fputwc+0x1e>
 8022a88:	89ab      	ldrh	r3, [r5, #12]
 8022a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a8e:	81ab      	strh	r3, [r5, #12]
 8022a90:	4606      	mov	r6, r0
 8022a92:	4630      	mov	r0, r6
 8022a94:	b003      	add	sp, #12
 8022a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022a9a:	462a      	mov	r2, r5
 8022a9c:	4640      	mov	r0, r8
 8022a9e:	f000 fd1b 	bl	80234d8 <__swbuf_r>
 8022aa2:	1c43      	adds	r3, r0, #1
 8022aa4:	d1e4      	bne.n	8022a70 <__fputwc+0x48>
 8022aa6:	4606      	mov	r6, r0
 8022aa8:	e7f3      	b.n	8022a92 <__fputwc+0x6a>

08022aaa <_fputwc_r>:
 8022aaa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8022aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022aae:	4614      	mov	r4, r2
 8022ab0:	07da      	lsls	r2, r3, #31
 8022ab2:	4605      	mov	r5, r0
 8022ab4:	d407      	bmi.n	8022ac6 <_fputwc_r+0x1c>
 8022ab6:	89a3      	ldrh	r3, [r4, #12]
 8022ab8:	059b      	lsls	r3, r3, #22
 8022aba:	d404      	bmi.n	8022ac6 <_fputwc_r+0x1c>
 8022abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022abe:	9101      	str	r1, [sp, #4]
 8022ac0:	f7fd f953 	bl	801fd6a <__retarget_lock_acquire_recursive>
 8022ac4:	9901      	ldr	r1, [sp, #4]
 8022ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022aca:	0498      	lsls	r0, r3, #18
 8022acc:	d406      	bmi.n	8022adc <_fputwc_r+0x32>
 8022ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022ad2:	81a3      	strh	r3, [r4, #12]
 8022ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ad6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022ada:	6663      	str	r3, [r4, #100]	; 0x64
 8022adc:	4622      	mov	r2, r4
 8022ade:	4628      	mov	r0, r5
 8022ae0:	f7ff ffa2 	bl	8022a28 <__fputwc>
 8022ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ae6:	07da      	lsls	r2, r3, #31
 8022ae8:	4605      	mov	r5, r0
 8022aea:	d405      	bmi.n	8022af8 <_fputwc_r+0x4e>
 8022aec:	89a3      	ldrh	r3, [r4, #12]
 8022aee:	059b      	lsls	r3, r3, #22
 8022af0:	d402      	bmi.n	8022af8 <_fputwc_r+0x4e>
 8022af2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022af4:	f7fd f93b 	bl	801fd6e <__retarget_lock_release_recursive>
 8022af8:	4628      	mov	r0, r5
 8022afa:	b003      	add	sp, #12
 8022afc:	bd30      	pop	{r4, r5, pc}
	...

08022b00 <_fstat_r>:
 8022b00:	b538      	push	{r3, r4, r5, lr}
 8022b02:	4d07      	ldr	r5, [pc, #28]	; (8022b20 <_fstat_r+0x20>)
 8022b04:	2300      	movs	r3, #0
 8022b06:	4604      	mov	r4, r0
 8022b08:	4608      	mov	r0, r1
 8022b0a:	4611      	mov	r1, r2
 8022b0c:	602b      	str	r3, [r5, #0]
 8022b0e:	f7e1 f84e 	bl	8003bae <_fstat>
 8022b12:	1c43      	adds	r3, r0, #1
 8022b14:	d102      	bne.n	8022b1c <_fstat_r+0x1c>
 8022b16:	682b      	ldr	r3, [r5, #0]
 8022b18:	b103      	cbz	r3, 8022b1c <_fstat_r+0x1c>
 8022b1a:	6023      	str	r3, [r4, #0]
 8022b1c:	bd38      	pop	{r3, r4, r5, pc}
 8022b1e:	bf00      	nop
 8022b20:	2000be64 	.word	0x2000be64

08022b24 <__sfvwrite_r>:
 8022b24:	6893      	ldr	r3, [r2, #8]
 8022b26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b2a:	4606      	mov	r6, r0
 8022b2c:	460c      	mov	r4, r1
 8022b2e:	4690      	mov	r8, r2
 8022b30:	b91b      	cbnz	r3, 8022b3a <__sfvwrite_r+0x16>
 8022b32:	2000      	movs	r0, #0
 8022b34:	b003      	add	sp, #12
 8022b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b3a:	898b      	ldrh	r3, [r1, #12]
 8022b3c:	0718      	lsls	r0, r3, #28
 8022b3e:	d550      	bpl.n	8022be2 <__sfvwrite_r+0xbe>
 8022b40:	690b      	ldr	r3, [r1, #16]
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	d04d      	beq.n	8022be2 <__sfvwrite_r+0xbe>
 8022b46:	89a3      	ldrh	r3, [r4, #12]
 8022b48:	f8d8 7000 	ldr.w	r7, [r8]
 8022b4c:	f013 0902 	ands.w	r9, r3, #2
 8022b50:	d16c      	bne.n	8022c2c <__sfvwrite_r+0x108>
 8022b52:	f013 0301 	ands.w	r3, r3, #1
 8022b56:	f000 809c 	beq.w	8022c92 <__sfvwrite_r+0x16e>
 8022b5a:	4648      	mov	r0, r9
 8022b5c:	46ca      	mov	sl, r9
 8022b5e:	46cb      	mov	fp, r9
 8022b60:	f1bb 0f00 	cmp.w	fp, #0
 8022b64:	f000 8103 	beq.w	8022d6e <__sfvwrite_r+0x24a>
 8022b68:	b950      	cbnz	r0, 8022b80 <__sfvwrite_r+0x5c>
 8022b6a:	465a      	mov	r2, fp
 8022b6c:	210a      	movs	r1, #10
 8022b6e:	4650      	mov	r0, sl
 8022b70:	f7dd fb66 	bl	8000240 <memchr>
 8022b74:	2800      	cmp	r0, #0
 8022b76:	f000 80ff 	beq.w	8022d78 <__sfvwrite_r+0x254>
 8022b7a:	3001      	adds	r0, #1
 8022b7c:	eba0 090a 	sub.w	r9, r0, sl
 8022b80:	6820      	ldr	r0, [r4, #0]
 8022b82:	6921      	ldr	r1, [r4, #16]
 8022b84:	6963      	ldr	r3, [r4, #20]
 8022b86:	45d9      	cmp	r9, fp
 8022b88:	464a      	mov	r2, r9
 8022b8a:	bf28      	it	cs
 8022b8c:	465a      	movcs	r2, fp
 8022b8e:	4288      	cmp	r0, r1
 8022b90:	f240 80f5 	bls.w	8022d7e <__sfvwrite_r+0x25a>
 8022b94:	68a5      	ldr	r5, [r4, #8]
 8022b96:	441d      	add	r5, r3
 8022b98:	42aa      	cmp	r2, r5
 8022b9a:	f340 80f0 	ble.w	8022d7e <__sfvwrite_r+0x25a>
 8022b9e:	4651      	mov	r1, sl
 8022ba0:	462a      	mov	r2, r5
 8022ba2:	f7f8 fc23 	bl	801b3ec <memmove>
 8022ba6:	6823      	ldr	r3, [r4, #0]
 8022ba8:	442b      	add	r3, r5
 8022baa:	6023      	str	r3, [r4, #0]
 8022bac:	4621      	mov	r1, r4
 8022bae:	4630      	mov	r0, r6
 8022bb0:	f7fc fe02 	bl	801f7b8 <_fflush_r>
 8022bb4:	2800      	cmp	r0, #0
 8022bb6:	d167      	bne.n	8022c88 <__sfvwrite_r+0x164>
 8022bb8:	ebb9 0905 	subs.w	r9, r9, r5
 8022bbc:	f040 80f7 	bne.w	8022dae <__sfvwrite_r+0x28a>
 8022bc0:	4621      	mov	r1, r4
 8022bc2:	4630      	mov	r0, r6
 8022bc4:	f7fc fdf8 	bl	801f7b8 <_fflush_r>
 8022bc8:	2800      	cmp	r0, #0
 8022bca:	d15d      	bne.n	8022c88 <__sfvwrite_r+0x164>
 8022bcc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8022bd0:	44aa      	add	sl, r5
 8022bd2:	ebab 0b05 	sub.w	fp, fp, r5
 8022bd6:	1b55      	subs	r5, r2, r5
 8022bd8:	f8c8 5008 	str.w	r5, [r8, #8]
 8022bdc:	2d00      	cmp	r5, #0
 8022bde:	d1bf      	bne.n	8022b60 <__sfvwrite_r+0x3c>
 8022be0:	e7a7      	b.n	8022b32 <__sfvwrite_r+0xe>
 8022be2:	4621      	mov	r1, r4
 8022be4:	4630      	mov	r0, r6
 8022be6:	f7fb fe75 	bl	801e8d4 <__swsetup_r>
 8022bea:	2800      	cmp	r0, #0
 8022bec:	d0ab      	beq.n	8022b46 <__sfvwrite_r+0x22>
 8022bee:	f04f 30ff 	mov.w	r0, #4294967295
 8022bf2:	e79f      	b.n	8022b34 <__sfvwrite_r+0x10>
 8022bf4:	e9d7 b900 	ldrd	fp, r9, [r7]
 8022bf8:	3708      	adds	r7, #8
 8022bfa:	f1b9 0f00 	cmp.w	r9, #0
 8022bfe:	d0f9      	beq.n	8022bf4 <__sfvwrite_r+0xd0>
 8022c00:	45d1      	cmp	r9, sl
 8022c02:	464b      	mov	r3, r9
 8022c04:	69e1      	ldr	r1, [r4, #28]
 8022c06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022c08:	bf28      	it	cs
 8022c0a:	4653      	movcs	r3, sl
 8022c0c:	465a      	mov	r2, fp
 8022c0e:	4630      	mov	r0, r6
 8022c10:	47a8      	blx	r5
 8022c12:	2800      	cmp	r0, #0
 8022c14:	dd38      	ble.n	8022c88 <__sfvwrite_r+0x164>
 8022c16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022c1a:	4483      	add	fp, r0
 8022c1c:	eba9 0900 	sub.w	r9, r9, r0
 8022c20:	1a18      	subs	r0, r3, r0
 8022c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8022c26:	2800      	cmp	r0, #0
 8022c28:	d1e7      	bne.n	8022bfa <__sfvwrite_r+0xd6>
 8022c2a:	e782      	b.n	8022b32 <__sfvwrite_r+0xe>
 8022c2c:	f04f 0b00 	mov.w	fp, #0
 8022c30:	f8df a180 	ldr.w	sl, [pc, #384]	; 8022db4 <__sfvwrite_r+0x290>
 8022c34:	46d9      	mov	r9, fp
 8022c36:	e7e0      	b.n	8022bfa <__sfvwrite_r+0xd6>
 8022c38:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8022c3c:	3708      	adds	r7, #8
 8022c3e:	f1ba 0f00 	cmp.w	sl, #0
 8022c42:	d0f9      	beq.n	8022c38 <__sfvwrite_r+0x114>
 8022c44:	89a3      	ldrh	r3, [r4, #12]
 8022c46:	68a2      	ldr	r2, [r4, #8]
 8022c48:	6820      	ldr	r0, [r4, #0]
 8022c4a:	0599      	lsls	r1, r3, #22
 8022c4c:	d563      	bpl.n	8022d16 <__sfvwrite_r+0x1f2>
 8022c4e:	4552      	cmp	r2, sl
 8022c50:	d836      	bhi.n	8022cc0 <__sfvwrite_r+0x19c>
 8022c52:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8022c56:	d033      	beq.n	8022cc0 <__sfvwrite_r+0x19c>
 8022c58:	6921      	ldr	r1, [r4, #16]
 8022c5a:	6965      	ldr	r5, [r4, #20]
 8022c5c:	eba0 0b01 	sub.w	fp, r0, r1
 8022c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022c68:	f10b 0201 	add.w	r2, fp, #1
 8022c6c:	106d      	asrs	r5, r5, #1
 8022c6e:	4452      	add	r2, sl
 8022c70:	4295      	cmp	r5, r2
 8022c72:	bf38      	it	cc
 8022c74:	4615      	movcc	r5, r2
 8022c76:	055b      	lsls	r3, r3, #21
 8022c78:	d53d      	bpl.n	8022cf6 <__sfvwrite_r+0x1d2>
 8022c7a:	4629      	mov	r1, r5
 8022c7c:	4630      	mov	r0, r6
 8022c7e:	f7fd f8f3 	bl	801fe68 <_malloc_r>
 8022c82:	b948      	cbnz	r0, 8022c98 <__sfvwrite_r+0x174>
 8022c84:	230c      	movs	r3, #12
 8022c86:	6033      	str	r3, [r6, #0]
 8022c88:	89a3      	ldrh	r3, [r4, #12]
 8022c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c8e:	81a3      	strh	r3, [r4, #12]
 8022c90:	e7ad      	b.n	8022bee <__sfvwrite_r+0xca>
 8022c92:	4699      	mov	r9, r3
 8022c94:	469a      	mov	sl, r3
 8022c96:	e7d2      	b.n	8022c3e <__sfvwrite_r+0x11a>
 8022c98:	465a      	mov	r2, fp
 8022c9a:	6921      	ldr	r1, [r4, #16]
 8022c9c:	9001      	str	r0, [sp, #4]
 8022c9e:	f7f8 fb97 	bl	801b3d0 <memcpy>
 8022ca2:	89a2      	ldrh	r2, [r4, #12]
 8022ca4:	9b01      	ldr	r3, [sp, #4]
 8022ca6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8022caa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022cae:	81a2      	strh	r2, [r4, #12]
 8022cb0:	6123      	str	r3, [r4, #16]
 8022cb2:	6165      	str	r5, [r4, #20]
 8022cb4:	445b      	add	r3, fp
 8022cb6:	eba5 050b 	sub.w	r5, r5, fp
 8022cba:	6023      	str	r3, [r4, #0]
 8022cbc:	4652      	mov	r2, sl
 8022cbe:	60a5      	str	r5, [r4, #8]
 8022cc0:	4552      	cmp	r2, sl
 8022cc2:	bf28      	it	cs
 8022cc4:	4652      	movcs	r2, sl
 8022cc6:	6820      	ldr	r0, [r4, #0]
 8022cc8:	9201      	str	r2, [sp, #4]
 8022cca:	4649      	mov	r1, r9
 8022ccc:	f7f8 fb8e 	bl	801b3ec <memmove>
 8022cd0:	68a3      	ldr	r3, [r4, #8]
 8022cd2:	9a01      	ldr	r2, [sp, #4]
 8022cd4:	1a9b      	subs	r3, r3, r2
 8022cd6:	60a3      	str	r3, [r4, #8]
 8022cd8:	6823      	ldr	r3, [r4, #0]
 8022cda:	441a      	add	r2, r3
 8022cdc:	4655      	mov	r5, sl
 8022cde:	6022      	str	r2, [r4, #0]
 8022ce0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8022ce4:	44a9      	add	r9, r5
 8022ce6:	ebaa 0a05 	sub.w	sl, sl, r5
 8022cea:	1b45      	subs	r5, r0, r5
 8022cec:	f8c8 5008 	str.w	r5, [r8, #8]
 8022cf0:	2d00      	cmp	r5, #0
 8022cf2:	d1a4      	bne.n	8022c3e <__sfvwrite_r+0x11a>
 8022cf4:	e71d      	b.n	8022b32 <__sfvwrite_r+0xe>
 8022cf6:	462a      	mov	r2, r5
 8022cf8:	4630      	mov	r0, r6
 8022cfa:	f000 f8d9 	bl	8022eb0 <_realloc_r>
 8022cfe:	4603      	mov	r3, r0
 8022d00:	2800      	cmp	r0, #0
 8022d02:	d1d5      	bne.n	8022cb0 <__sfvwrite_r+0x18c>
 8022d04:	6921      	ldr	r1, [r4, #16]
 8022d06:	4630      	mov	r0, r6
 8022d08:	f7fc fe52 	bl	801f9b0 <_free_r>
 8022d0c:	89a3      	ldrh	r3, [r4, #12]
 8022d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022d12:	81a3      	strh	r3, [r4, #12]
 8022d14:	e7b6      	b.n	8022c84 <__sfvwrite_r+0x160>
 8022d16:	6923      	ldr	r3, [r4, #16]
 8022d18:	4283      	cmp	r3, r0
 8022d1a:	d302      	bcc.n	8022d22 <__sfvwrite_r+0x1fe>
 8022d1c:	6961      	ldr	r1, [r4, #20]
 8022d1e:	4551      	cmp	r1, sl
 8022d20:	d915      	bls.n	8022d4e <__sfvwrite_r+0x22a>
 8022d22:	4552      	cmp	r2, sl
 8022d24:	bf28      	it	cs
 8022d26:	4652      	movcs	r2, sl
 8022d28:	4649      	mov	r1, r9
 8022d2a:	4615      	mov	r5, r2
 8022d2c:	f7f8 fb5e 	bl	801b3ec <memmove>
 8022d30:	68a3      	ldr	r3, [r4, #8]
 8022d32:	6822      	ldr	r2, [r4, #0]
 8022d34:	1b5b      	subs	r3, r3, r5
 8022d36:	442a      	add	r2, r5
 8022d38:	60a3      	str	r3, [r4, #8]
 8022d3a:	6022      	str	r2, [r4, #0]
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	d1cf      	bne.n	8022ce0 <__sfvwrite_r+0x1bc>
 8022d40:	4621      	mov	r1, r4
 8022d42:	4630      	mov	r0, r6
 8022d44:	f7fc fd38 	bl	801f7b8 <_fflush_r>
 8022d48:	2800      	cmp	r0, #0
 8022d4a:	d0c9      	beq.n	8022ce0 <__sfvwrite_r+0x1bc>
 8022d4c:	e79c      	b.n	8022c88 <__sfvwrite_r+0x164>
 8022d4e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022d52:	459a      	cmp	sl, r3
 8022d54:	bf38      	it	cc
 8022d56:	4653      	movcc	r3, sl
 8022d58:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022d5a:	fb93 f3f1 	sdiv	r3, r3, r1
 8022d5e:	464a      	mov	r2, r9
 8022d60:	434b      	muls	r3, r1
 8022d62:	4630      	mov	r0, r6
 8022d64:	69e1      	ldr	r1, [r4, #28]
 8022d66:	47a8      	blx	r5
 8022d68:	1e05      	subs	r5, r0, #0
 8022d6a:	dcb9      	bgt.n	8022ce0 <__sfvwrite_r+0x1bc>
 8022d6c:	e78c      	b.n	8022c88 <__sfvwrite_r+0x164>
 8022d6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8022d72:	2000      	movs	r0, #0
 8022d74:	3708      	adds	r7, #8
 8022d76:	e6f3      	b.n	8022b60 <__sfvwrite_r+0x3c>
 8022d78:	f10b 0901 	add.w	r9, fp, #1
 8022d7c:	e700      	b.n	8022b80 <__sfvwrite_r+0x5c>
 8022d7e:	4293      	cmp	r3, r2
 8022d80:	dc08      	bgt.n	8022d94 <__sfvwrite_r+0x270>
 8022d82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022d84:	69e1      	ldr	r1, [r4, #28]
 8022d86:	4652      	mov	r2, sl
 8022d88:	4630      	mov	r0, r6
 8022d8a:	47a8      	blx	r5
 8022d8c:	1e05      	subs	r5, r0, #0
 8022d8e:	f73f af13 	bgt.w	8022bb8 <__sfvwrite_r+0x94>
 8022d92:	e779      	b.n	8022c88 <__sfvwrite_r+0x164>
 8022d94:	4651      	mov	r1, sl
 8022d96:	9201      	str	r2, [sp, #4]
 8022d98:	f7f8 fb28 	bl	801b3ec <memmove>
 8022d9c:	9a01      	ldr	r2, [sp, #4]
 8022d9e:	68a3      	ldr	r3, [r4, #8]
 8022da0:	1a9b      	subs	r3, r3, r2
 8022da2:	60a3      	str	r3, [r4, #8]
 8022da4:	6823      	ldr	r3, [r4, #0]
 8022da6:	4413      	add	r3, r2
 8022da8:	6023      	str	r3, [r4, #0]
 8022daa:	4615      	mov	r5, r2
 8022dac:	e704      	b.n	8022bb8 <__sfvwrite_r+0x94>
 8022dae:	2001      	movs	r0, #1
 8022db0:	e70c      	b.n	8022bcc <__sfvwrite_r+0xa8>
 8022db2:	bf00      	nop
 8022db4:	7ffffc00 	.word	0x7ffffc00

08022db8 <_isatty_r>:
 8022db8:	b538      	push	{r3, r4, r5, lr}
 8022dba:	4d06      	ldr	r5, [pc, #24]	; (8022dd4 <_isatty_r+0x1c>)
 8022dbc:	2300      	movs	r3, #0
 8022dbe:	4604      	mov	r4, r0
 8022dc0:	4608      	mov	r0, r1
 8022dc2:	602b      	str	r3, [r5, #0]
 8022dc4:	f7e0 ff03 	bl	8003bce <_isatty>
 8022dc8:	1c43      	adds	r3, r0, #1
 8022dca:	d102      	bne.n	8022dd2 <_isatty_r+0x1a>
 8022dcc:	682b      	ldr	r3, [r5, #0]
 8022dce:	b103      	cbz	r3, 8022dd2 <_isatty_r+0x1a>
 8022dd0:	6023      	str	r3, [r4, #0]
 8022dd2:	bd38      	pop	{r3, r4, r5, pc}
 8022dd4:	2000be64 	.word	0x2000be64

08022dd8 <iswspace>:
 8022dd8:	2100      	movs	r1, #0
 8022dda:	f000 b801 	b.w	8022de0 <iswspace_l>
	...

08022de0 <iswspace_l>:
 8022de0:	28ff      	cmp	r0, #255	; 0xff
 8022de2:	bf9d      	ittte	ls
 8022de4:	4b02      	ldrls	r3, [pc, #8]	; (8022df0 <iswspace_l+0x10>)
 8022de6:	5cc0      	ldrbls	r0, [r0, r3]
 8022de8:	f000 0008 	andls.w	r0, r0, #8
 8022dec:	2000      	movhi	r0, #0
 8022dee:	4770      	bx	lr
 8022df0:	080290b1 	.word	0x080290b1

08022df4 <__locale_mb_cur_max>:
 8022df4:	4b01      	ldr	r3, [pc, #4]	; (8022dfc <__locale_mb_cur_max+0x8>)
 8022df6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8022dfa:	4770      	bx	lr
 8022dfc:	200008e0 	.word	0x200008e0

08022e00 <_lseek_r>:
 8022e00:	b538      	push	{r3, r4, r5, lr}
 8022e02:	4d07      	ldr	r5, [pc, #28]	; (8022e20 <_lseek_r+0x20>)
 8022e04:	4604      	mov	r4, r0
 8022e06:	4608      	mov	r0, r1
 8022e08:	4611      	mov	r1, r2
 8022e0a:	2200      	movs	r2, #0
 8022e0c:	602a      	str	r2, [r5, #0]
 8022e0e:	461a      	mov	r2, r3
 8022e10:	f7e0 fee8 	bl	8003be4 <_lseek>
 8022e14:	1c43      	adds	r3, r0, #1
 8022e16:	d102      	bne.n	8022e1e <_lseek_r+0x1e>
 8022e18:	682b      	ldr	r3, [r5, #0]
 8022e1a:	b103      	cbz	r3, 8022e1e <_lseek_r+0x1e>
 8022e1c:	6023      	str	r3, [r4, #0]
 8022e1e:	bd38      	pop	{r3, r4, r5, pc}
 8022e20:	2000be64 	.word	0x2000be64

08022e24 <_mbrtowc_r>:
 8022e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022e26:	4c0a      	ldr	r4, [pc, #40]	; (8022e50 <_mbrtowc_r+0x2c>)
 8022e28:	9e08      	ldr	r6, [sp, #32]
 8022e2a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8022e2e:	9600      	str	r6, [sp, #0]
 8022e30:	4605      	mov	r5, r0
 8022e32:	4614      	mov	r4, r2
 8022e34:	b912      	cbnz	r2, 8022e3c <_mbrtowc_r+0x18>
 8022e36:	4a07      	ldr	r2, [pc, #28]	; (8022e54 <_mbrtowc_r+0x30>)
 8022e38:	2301      	movs	r3, #1
 8022e3a:	4621      	mov	r1, r4
 8022e3c:	47b8      	blx	r7
 8022e3e:	1c43      	adds	r3, r0, #1
 8022e40:	bf01      	itttt	eq
 8022e42:	2300      	moveq	r3, #0
 8022e44:	6033      	streq	r3, [r6, #0]
 8022e46:	238a      	moveq	r3, #138	; 0x8a
 8022e48:	602b      	streq	r3, [r5, #0]
 8022e4a:	b003      	add	sp, #12
 8022e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e4e:	bf00      	nop
 8022e50:	200008e0 	.word	0x200008e0
 8022e54:	08029581 	.word	0x08029581

08022e58 <__ascii_mbtowc>:
 8022e58:	b082      	sub	sp, #8
 8022e5a:	b901      	cbnz	r1, 8022e5e <__ascii_mbtowc+0x6>
 8022e5c:	a901      	add	r1, sp, #4
 8022e5e:	b142      	cbz	r2, 8022e72 <__ascii_mbtowc+0x1a>
 8022e60:	b14b      	cbz	r3, 8022e76 <__ascii_mbtowc+0x1e>
 8022e62:	7813      	ldrb	r3, [r2, #0]
 8022e64:	600b      	str	r3, [r1, #0]
 8022e66:	7812      	ldrb	r2, [r2, #0]
 8022e68:	1e10      	subs	r0, r2, #0
 8022e6a:	bf18      	it	ne
 8022e6c:	2001      	movne	r0, #1
 8022e6e:	b002      	add	sp, #8
 8022e70:	4770      	bx	lr
 8022e72:	4610      	mov	r0, r2
 8022e74:	e7fb      	b.n	8022e6e <__ascii_mbtowc+0x16>
 8022e76:	f06f 0001 	mvn.w	r0, #1
 8022e7a:	e7f8      	b.n	8022e6e <__ascii_mbtowc+0x16>

08022e7c <_read_r>:
 8022e7c:	b538      	push	{r3, r4, r5, lr}
 8022e7e:	4d07      	ldr	r5, [pc, #28]	; (8022e9c <_read_r+0x20>)
 8022e80:	4604      	mov	r4, r0
 8022e82:	4608      	mov	r0, r1
 8022e84:	4611      	mov	r1, r2
 8022e86:	2200      	movs	r2, #0
 8022e88:	602a      	str	r2, [r5, #0]
 8022e8a:	461a      	mov	r2, r3
 8022e8c:	f7e0 fe66 	bl	8003b5c <_read>
 8022e90:	1c43      	adds	r3, r0, #1
 8022e92:	d102      	bne.n	8022e9a <_read_r+0x1e>
 8022e94:	682b      	ldr	r3, [r5, #0]
 8022e96:	b103      	cbz	r3, 8022e9a <_read_r+0x1e>
 8022e98:	6023      	str	r3, [r4, #0]
 8022e9a:	bd38      	pop	{r3, r4, r5, pc}
 8022e9c:	2000be64 	.word	0x2000be64

08022ea0 <realloc>:
 8022ea0:	4b02      	ldr	r3, [pc, #8]	; (8022eac <realloc+0xc>)
 8022ea2:	460a      	mov	r2, r1
 8022ea4:	4601      	mov	r1, r0
 8022ea6:	6818      	ldr	r0, [r3, #0]
 8022ea8:	f000 b802 	b.w	8022eb0 <_realloc_r>
 8022eac:	20000038 	.word	0x20000038

08022eb0 <_realloc_r>:
 8022eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eb4:	4681      	mov	r9, r0
 8022eb6:	460c      	mov	r4, r1
 8022eb8:	b929      	cbnz	r1, 8022ec6 <_realloc_r+0x16>
 8022eba:	4611      	mov	r1, r2
 8022ebc:	b003      	add	sp, #12
 8022ebe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ec2:	f7fc bfd1 	b.w	801fe68 <_malloc_r>
 8022ec6:	9201      	str	r2, [sp, #4]
 8022ec8:	f7fd fa10 	bl	80202ec <__malloc_lock>
 8022ecc:	9a01      	ldr	r2, [sp, #4]
 8022ece:	f102 080b 	add.w	r8, r2, #11
 8022ed2:	f1b8 0f16 	cmp.w	r8, #22
 8022ed6:	d90b      	bls.n	8022ef0 <_realloc_r+0x40>
 8022ed8:	f038 0807 	bics.w	r8, r8, #7
 8022edc:	d50a      	bpl.n	8022ef4 <_realloc_r+0x44>
 8022ede:	230c      	movs	r3, #12
 8022ee0:	f8c9 3000 	str.w	r3, [r9]
 8022ee4:	f04f 0b00 	mov.w	fp, #0
 8022ee8:	4658      	mov	r0, fp
 8022eea:	b003      	add	sp, #12
 8022eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ef0:	f04f 0810 	mov.w	r8, #16
 8022ef4:	4590      	cmp	r8, r2
 8022ef6:	d3f2      	bcc.n	8022ede <_realloc_r+0x2e>
 8022ef8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8022efc:	f025 0603 	bic.w	r6, r5, #3
 8022f00:	45b0      	cmp	r8, r6
 8022f02:	f1a4 0a08 	sub.w	sl, r4, #8
 8022f06:	f340 8170 	ble.w	80231ea <_realloc_r+0x33a>
 8022f0a:	48a9      	ldr	r0, [pc, #676]	; (80231b0 <_realloc_r+0x300>)
 8022f0c:	9001      	str	r0, [sp, #4]
 8022f0e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8022f12:	eb0a 0306 	add.w	r3, sl, r6
 8022f16:	459c      	cmp	ip, r3
 8022f18:	6859      	ldr	r1, [r3, #4]
 8022f1a:	d005      	beq.n	8022f28 <_realloc_r+0x78>
 8022f1c:	f021 0001 	bic.w	r0, r1, #1
 8022f20:	4418      	add	r0, r3
 8022f22:	6840      	ldr	r0, [r0, #4]
 8022f24:	07c7      	lsls	r7, r0, #31
 8022f26:	d427      	bmi.n	8022f78 <_realloc_r+0xc8>
 8022f28:	f021 0103 	bic.w	r1, r1, #3
 8022f2c:	459c      	cmp	ip, r3
 8022f2e:	eb06 0701 	add.w	r7, r6, r1
 8022f32:	d119      	bne.n	8022f68 <_realloc_r+0xb8>
 8022f34:	f108 0010 	add.w	r0, r8, #16
 8022f38:	42b8      	cmp	r0, r7
 8022f3a:	dc1f      	bgt.n	8022f7c <_realloc_r+0xcc>
 8022f3c:	eb0a 0308 	add.w	r3, sl, r8
 8022f40:	9a01      	ldr	r2, [sp, #4]
 8022f42:	eba7 0708 	sub.w	r7, r7, r8
 8022f46:	f047 0701 	orr.w	r7, r7, #1
 8022f4a:	6093      	str	r3, [r2, #8]
 8022f4c:	605f      	str	r7, [r3, #4]
 8022f4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022f52:	f003 0301 	and.w	r3, r3, #1
 8022f56:	ea43 0308 	orr.w	r3, r3, r8
 8022f5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8022f5e:	4648      	mov	r0, r9
 8022f60:	f7fd f9ca 	bl	80202f8 <__malloc_unlock>
 8022f64:	46a3      	mov	fp, r4
 8022f66:	e7bf      	b.n	8022ee8 <_realloc_r+0x38>
 8022f68:	45b8      	cmp	r8, r7
 8022f6a:	dc07      	bgt.n	8022f7c <_realloc_r+0xcc>
 8022f6c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8022f70:	60da      	str	r2, [r3, #12]
 8022f72:	6093      	str	r3, [r2, #8]
 8022f74:	4655      	mov	r5, sl
 8022f76:	e07f      	b.n	8023078 <_realloc_r+0x1c8>
 8022f78:	2100      	movs	r1, #0
 8022f7a:	460b      	mov	r3, r1
 8022f7c:	07e8      	lsls	r0, r5, #31
 8022f7e:	f100 80e5 	bmi.w	802314c <_realloc_r+0x29c>
 8022f82:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8022f86:	ebaa 0505 	sub.w	r5, sl, r5
 8022f8a:	6868      	ldr	r0, [r5, #4]
 8022f8c:	f020 0003 	bic.w	r0, r0, #3
 8022f90:	eb00 0b06 	add.w	fp, r0, r6
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	f000 80a5 	beq.w	80230e4 <_realloc_r+0x234>
 8022f9a:	459c      	cmp	ip, r3
 8022f9c:	eb01 070b 	add.w	r7, r1, fp
 8022fa0:	d14a      	bne.n	8023038 <_realloc_r+0x188>
 8022fa2:	f108 0310 	add.w	r3, r8, #16
 8022fa6:	42bb      	cmp	r3, r7
 8022fa8:	f300 809c 	bgt.w	80230e4 <_realloc_r+0x234>
 8022fac:	46ab      	mov	fp, r5
 8022fae:	68eb      	ldr	r3, [r5, #12]
 8022fb0:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8022fb4:	60d3      	str	r3, [r2, #12]
 8022fb6:	609a      	str	r2, [r3, #8]
 8022fb8:	1f32      	subs	r2, r6, #4
 8022fba:	2a24      	cmp	r2, #36	; 0x24
 8022fbc:	d837      	bhi.n	802302e <_realloc_r+0x17e>
 8022fbe:	2a13      	cmp	r2, #19
 8022fc0:	d933      	bls.n	802302a <_realloc_r+0x17a>
 8022fc2:	6823      	ldr	r3, [r4, #0]
 8022fc4:	60ab      	str	r3, [r5, #8]
 8022fc6:	6863      	ldr	r3, [r4, #4]
 8022fc8:	60eb      	str	r3, [r5, #12]
 8022fca:	2a1b      	cmp	r2, #27
 8022fcc:	d81b      	bhi.n	8023006 <_realloc_r+0x156>
 8022fce:	3408      	adds	r4, #8
 8022fd0:	f105 0310 	add.w	r3, r5, #16
 8022fd4:	6822      	ldr	r2, [r4, #0]
 8022fd6:	601a      	str	r2, [r3, #0]
 8022fd8:	6862      	ldr	r2, [r4, #4]
 8022fda:	605a      	str	r2, [r3, #4]
 8022fdc:	68a2      	ldr	r2, [r4, #8]
 8022fde:	609a      	str	r2, [r3, #8]
 8022fe0:	eb05 0308 	add.w	r3, r5, r8
 8022fe4:	9a01      	ldr	r2, [sp, #4]
 8022fe6:	eba7 0708 	sub.w	r7, r7, r8
 8022fea:	f047 0701 	orr.w	r7, r7, #1
 8022fee:	6093      	str	r3, [r2, #8]
 8022ff0:	605f      	str	r7, [r3, #4]
 8022ff2:	686b      	ldr	r3, [r5, #4]
 8022ff4:	f003 0301 	and.w	r3, r3, #1
 8022ff8:	ea43 0308 	orr.w	r3, r3, r8
 8022ffc:	606b      	str	r3, [r5, #4]
 8022ffe:	4648      	mov	r0, r9
 8023000:	f7fd f97a 	bl	80202f8 <__malloc_unlock>
 8023004:	e770      	b.n	8022ee8 <_realloc_r+0x38>
 8023006:	68a3      	ldr	r3, [r4, #8]
 8023008:	612b      	str	r3, [r5, #16]
 802300a:	68e3      	ldr	r3, [r4, #12]
 802300c:	616b      	str	r3, [r5, #20]
 802300e:	2a24      	cmp	r2, #36	; 0x24
 8023010:	bf01      	itttt	eq
 8023012:	6923      	ldreq	r3, [r4, #16]
 8023014:	61ab      	streq	r3, [r5, #24]
 8023016:	6962      	ldreq	r2, [r4, #20]
 8023018:	61ea      	streq	r2, [r5, #28]
 802301a:	bf19      	ittee	ne
 802301c:	3410      	addne	r4, #16
 802301e:	f105 0318 	addne.w	r3, r5, #24
 8023022:	f105 0320 	addeq.w	r3, r5, #32
 8023026:	3418      	addeq	r4, #24
 8023028:	e7d4      	b.n	8022fd4 <_realloc_r+0x124>
 802302a:	465b      	mov	r3, fp
 802302c:	e7d2      	b.n	8022fd4 <_realloc_r+0x124>
 802302e:	4621      	mov	r1, r4
 8023030:	4658      	mov	r0, fp
 8023032:	f7f8 f9db 	bl	801b3ec <memmove>
 8023036:	e7d3      	b.n	8022fe0 <_realloc_r+0x130>
 8023038:	45b8      	cmp	r8, r7
 802303a:	dc53      	bgt.n	80230e4 <_realloc_r+0x234>
 802303c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8023040:	4628      	mov	r0, r5
 8023042:	60da      	str	r2, [r3, #12]
 8023044:	6093      	str	r3, [r2, #8]
 8023046:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802304a:	68eb      	ldr	r3, [r5, #12]
 802304c:	60d3      	str	r3, [r2, #12]
 802304e:	609a      	str	r2, [r3, #8]
 8023050:	1f32      	subs	r2, r6, #4
 8023052:	2a24      	cmp	r2, #36	; 0x24
 8023054:	d842      	bhi.n	80230dc <_realloc_r+0x22c>
 8023056:	2a13      	cmp	r2, #19
 8023058:	d908      	bls.n	802306c <_realloc_r+0x1bc>
 802305a:	6823      	ldr	r3, [r4, #0]
 802305c:	60ab      	str	r3, [r5, #8]
 802305e:	6863      	ldr	r3, [r4, #4]
 8023060:	60eb      	str	r3, [r5, #12]
 8023062:	2a1b      	cmp	r2, #27
 8023064:	d828      	bhi.n	80230b8 <_realloc_r+0x208>
 8023066:	3408      	adds	r4, #8
 8023068:	f105 0010 	add.w	r0, r5, #16
 802306c:	6823      	ldr	r3, [r4, #0]
 802306e:	6003      	str	r3, [r0, #0]
 8023070:	6863      	ldr	r3, [r4, #4]
 8023072:	6043      	str	r3, [r0, #4]
 8023074:	68a3      	ldr	r3, [r4, #8]
 8023076:	6083      	str	r3, [r0, #8]
 8023078:	686a      	ldr	r2, [r5, #4]
 802307a:	eba7 0008 	sub.w	r0, r7, r8
 802307e:	280f      	cmp	r0, #15
 8023080:	f002 0201 	and.w	r2, r2, #1
 8023084:	eb05 0307 	add.w	r3, r5, r7
 8023088:	f240 80b1 	bls.w	80231ee <_realloc_r+0x33e>
 802308c:	eb05 0108 	add.w	r1, r5, r8
 8023090:	ea48 0202 	orr.w	r2, r8, r2
 8023094:	f040 0001 	orr.w	r0, r0, #1
 8023098:	606a      	str	r2, [r5, #4]
 802309a:	6048      	str	r0, [r1, #4]
 802309c:	685a      	ldr	r2, [r3, #4]
 802309e:	f042 0201 	orr.w	r2, r2, #1
 80230a2:	605a      	str	r2, [r3, #4]
 80230a4:	3108      	adds	r1, #8
 80230a6:	4648      	mov	r0, r9
 80230a8:	f7fc fc82 	bl	801f9b0 <_free_r>
 80230ac:	4648      	mov	r0, r9
 80230ae:	f7fd f923 	bl	80202f8 <__malloc_unlock>
 80230b2:	f105 0b08 	add.w	fp, r5, #8
 80230b6:	e717      	b.n	8022ee8 <_realloc_r+0x38>
 80230b8:	68a3      	ldr	r3, [r4, #8]
 80230ba:	612b      	str	r3, [r5, #16]
 80230bc:	68e3      	ldr	r3, [r4, #12]
 80230be:	616b      	str	r3, [r5, #20]
 80230c0:	2a24      	cmp	r2, #36	; 0x24
 80230c2:	bf01      	itttt	eq
 80230c4:	6923      	ldreq	r3, [r4, #16]
 80230c6:	61ab      	streq	r3, [r5, #24]
 80230c8:	6963      	ldreq	r3, [r4, #20]
 80230ca:	61eb      	streq	r3, [r5, #28]
 80230cc:	bf19      	ittee	ne
 80230ce:	3410      	addne	r4, #16
 80230d0:	f105 0018 	addne.w	r0, r5, #24
 80230d4:	f105 0020 	addeq.w	r0, r5, #32
 80230d8:	3418      	addeq	r4, #24
 80230da:	e7c7      	b.n	802306c <_realloc_r+0x1bc>
 80230dc:	4621      	mov	r1, r4
 80230de:	f7f8 f985 	bl	801b3ec <memmove>
 80230e2:	e7c9      	b.n	8023078 <_realloc_r+0x1c8>
 80230e4:	45d8      	cmp	r8, fp
 80230e6:	dc31      	bgt.n	802314c <_realloc_r+0x29c>
 80230e8:	4628      	mov	r0, r5
 80230ea:	68eb      	ldr	r3, [r5, #12]
 80230ec:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80230f0:	60d3      	str	r3, [r2, #12]
 80230f2:	609a      	str	r2, [r3, #8]
 80230f4:	1f32      	subs	r2, r6, #4
 80230f6:	2a24      	cmp	r2, #36	; 0x24
 80230f8:	d824      	bhi.n	8023144 <_realloc_r+0x294>
 80230fa:	2a13      	cmp	r2, #19
 80230fc:	d908      	bls.n	8023110 <_realloc_r+0x260>
 80230fe:	6823      	ldr	r3, [r4, #0]
 8023100:	60ab      	str	r3, [r5, #8]
 8023102:	6863      	ldr	r3, [r4, #4]
 8023104:	60eb      	str	r3, [r5, #12]
 8023106:	2a1b      	cmp	r2, #27
 8023108:	d80a      	bhi.n	8023120 <_realloc_r+0x270>
 802310a:	3408      	adds	r4, #8
 802310c:	f105 0010 	add.w	r0, r5, #16
 8023110:	6823      	ldr	r3, [r4, #0]
 8023112:	6003      	str	r3, [r0, #0]
 8023114:	6863      	ldr	r3, [r4, #4]
 8023116:	6043      	str	r3, [r0, #4]
 8023118:	68a3      	ldr	r3, [r4, #8]
 802311a:	6083      	str	r3, [r0, #8]
 802311c:	465f      	mov	r7, fp
 802311e:	e7ab      	b.n	8023078 <_realloc_r+0x1c8>
 8023120:	68a3      	ldr	r3, [r4, #8]
 8023122:	612b      	str	r3, [r5, #16]
 8023124:	68e3      	ldr	r3, [r4, #12]
 8023126:	616b      	str	r3, [r5, #20]
 8023128:	2a24      	cmp	r2, #36	; 0x24
 802312a:	bf01      	itttt	eq
 802312c:	6923      	ldreq	r3, [r4, #16]
 802312e:	61ab      	streq	r3, [r5, #24]
 8023130:	6963      	ldreq	r3, [r4, #20]
 8023132:	61eb      	streq	r3, [r5, #28]
 8023134:	bf19      	ittee	ne
 8023136:	3410      	addne	r4, #16
 8023138:	f105 0018 	addne.w	r0, r5, #24
 802313c:	f105 0020 	addeq.w	r0, r5, #32
 8023140:	3418      	addeq	r4, #24
 8023142:	e7e5      	b.n	8023110 <_realloc_r+0x260>
 8023144:	4621      	mov	r1, r4
 8023146:	f7f8 f951 	bl	801b3ec <memmove>
 802314a:	e7e7      	b.n	802311c <_realloc_r+0x26c>
 802314c:	4611      	mov	r1, r2
 802314e:	4648      	mov	r0, r9
 8023150:	f7fc fe8a 	bl	801fe68 <_malloc_r>
 8023154:	4683      	mov	fp, r0
 8023156:	2800      	cmp	r0, #0
 8023158:	f43f af51 	beq.w	8022ffe <_realloc_r+0x14e>
 802315c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8023160:	f023 0301 	bic.w	r3, r3, #1
 8023164:	4453      	add	r3, sl
 8023166:	f1a0 0208 	sub.w	r2, r0, #8
 802316a:	4293      	cmp	r3, r2
 802316c:	d105      	bne.n	802317a <_realloc_r+0x2ca>
 802316e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8023172:	f027 0703 	bic.w	r7, r7, #3
 8023176:	4437      	add	r7, r6
 8023178:	e6fc      	b.n	8022f74 <_realloc_r+0xc4>
 802317a:	1f32      	subs	r2, r6, #4
 802317c:	2a24      	cmp	r2, #36	; 0x24
 802317e:	d830      	bhi.n	80231e2 <_realloc_r+0x332>
 8023180:	2a13      	cmp	r2, #19
 8023182:	d92b      	bls.n	80231dc <_realloc_r+0x32c>
 8023184:	6823      	ldr	r3, [r4, #0]
 8023186:	6003      	str	r3, [r0, #0]
 8023188:	6863      	ldr	r3, [r4, #4]
 802318a:	6043      	str	r3, [r0, #4]
 802318c:	2a1b      	cmp	r2, #27
 802318e:	d811      	bhi.n	80231b4 <_realloc_r+0x304>
 8023190:	f104 0208 	add.w	r2, r4, #8
 8023194:	f100 0308 	add.w	r3, r0, #8
 8023198:	6811      	ldr	r1, [r2, #0]
 802319a:	6019      	str	r1, [r3, #0]
 802319c:	6851      	ldr	r1, [r2, #4]
 802319e:	6059      	str	r1, [r3, #4]
 80231a0:	6892      	ldr	r2, [r2, #8]
 80231a2:	609a      	str	r2, [r3, #8]
 80231a4:	4621      	mov	r1, r4
 80231a6:	4648      	mov	r0, r9
 80231a8:	f7fc fc02 	bl	801f9b0 <_free_r>
 80231ac:	e727      	b.n	8022ffe <_realloc_r+0x14e>
 80231ae:	bf00      	nop
 80231b0:	200004d0 	.word	0x200004d0
 80231b4:	68a3      	ldr	r3, [r4, #8]
 80231b6:	6083      	str	r3, [r0, #8]
 80231b8:	68e3      	ldr	r3, [r4, #12]
 80231ba:	60c3      	str	r3, [r0, #12]
 80231bc:	2a24      	cmp	r2, #36	; 0x24
 80231be:	bf01      	itttt	eq
 80231c0:	6923      	ldreq	r3, [r4, #16]
 80231c2:	6103      	streq	r3, [r0, #16]
 80231c4:	6961      	ldreq	r1, [r4, #20]
 80231c6:	6141      	streq	r1, [r0, #20]
 80231c8:	bf19      	ittee	ne
 80231ca:	f104 0210 	addne.w	r2, r4, #16
 80231ce:	f100 0310 	addne.w	r3, r0, #16
 80231d2:	f104 0218 	addeq.w	r2, r4, #24
 80231d6:	f100 0318 	addeq.w	r3, r0, #24
 80231da:	e7dd      	b.n	8023198 <_realloc_r+0x2e8>
 80231dc:	4603      	mov	r3, r0
 80231de:	4622      	mov	r2, r4
 80231e0:	e7da      	b.n	8023198 <_realloc_r+0x2e8>
 80231e2:	4621      	mov	r1, r4
 80231e4:	f7f8 f902 	bl	801b3ec <memmove>
 80231e8:	e7dc      	b.n	80231a4 <_realloc_r+0x2f4>
 80231ea:	4637      	mov	r7, r6
 80231ec:	e6c2      	b.n	8022f74 <_realloc_r+0xc4>
 80231ee:	4317      	orrs	r7, r2
 80231f0:	606f      	str	r7, [r5, #4]
 80231f2:	685a      	ldr	r2, [r3, #4]
 80231f4:	f042 0201 	orr.w	r2, r2, #1
 80231f8:	605a      	str	r2, [r3, #4]
 80231fa:	e757      	b.n	80230ac <_realloc_r+0x1fc>

080231fc <__sccl>:
 80231fc:	b570      	push	{r4, r5, r6, lr}
 80231fe:	780b      	ldrb	r3, [r1, #0]
 8023200:	4604      	mov	r4, r0
 8023202:	2b5e      	cmp	r3, #94	; 0x5e
 8023204:	bf0b      	itete	eq
 8023206:	784b      	ldrbeq	r3, [r1, #1]
 8023208:	1c48      	addne	r0, r1, #1
 802320a:	1c88      	addeq	r0, r1, #2
 802320c:	2200      	movne	r2, #0
 802320e:	bf08      	it	eq
 8023210:	2201      	moveq	r2, #1
 8023212:	1e61      	subs	r1, r4, #1
 8023214:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8023218:	f801 2f01 	strb.w	r2, [r1, #1]!
 802321c:	42a9      	cmp	r1, r5
 802321e:	d1fb      	bne.n	8023218 <__sccl+0x1c>
 8023220:	b90b      	cbnz	r3, 8023226 <__sccl+0x2a>
 8023222:	3801      	subs	r0, #1
 8023224:	bd70      	pop	{r4, r5, r6, pc}
 8023226:	f082 0101 	eor.w	r1, r2, #1
 802322a:	54e1      	strb	r1, [r4, r3]
 802322c:	1c42      	adds	r2, r0, #1
 802322e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8023232:	2d2d      	cmp	r5, #45	; 0x2d
 8023234:	f102 36ff 	add.w	r6, r2, #4294967295
 8023238:	4610      	mov	r0, r2
 802323a:	d006      	beq.n	802324a <__sccl+0x4e>
 802323c:	2d5d      	cmp	r5, #93	; 0x5d
 802323e:	d0f1      	beq.n	8023224 <__sccl+0x28>
 8023240:	b90d      	cbnz	r5, 8023246 <__sccl+0x4a>
 8023242:	4630      	mov	r0, r6
 8023244:	e7ee      	b.n	8023224 <__sccl+0x28>
 8023246:	462b      	mov	r3, r5
 8023248:	e7ef      	b.n	802322a <__sccl+0x2e>
 802324a:	7816      	ldrb	r6, [r2, #0]
 802324c:	2e5d      	cmp	r6, #93	; 0x5d
 802324e:	d0fa      	beq.n	8023246 <__sccl+0x4a>
 8023250:	42b3      	cmp	r3, r6
 8023252:	dcf8      	bgt.n	8023246 <__sccl+0x4a>
 8023254:	4618      	mov	r0, r3
 8023256:	3001      	adds	r0, #1
 8023258:	4286      	cmp	r6, r0
 802325a:	5421      	strb	r1, [r4, r0]
 802325c:	dcfb      	bgt.n	8023256 <__sccl+0x5a>
 802325e:	43d8      	mvns	r0, r3
 8023260:	4430      	add	r0, r6
 8023262:	1c5d      	adds	r5, r3, #1
 8023264:	42b3      	cmp	r3, r6
 8023266:	bfa8      	it	ge
 8023268:	2000      	movge	r0, #0
 802326a:	182b      	adds	r3, r5, r0
 802326c:	3202      	adds	r2, #2
 802326e:	e7de      	b.n	802322e <__sccl+0x32>

08023270 <_strtoll_l.isra.0>:
 8023270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023274:	b087      	sub	sp, #28
 8023276:	4691      	mov	r9, r2
 8023278:	4a47      	ldr	r2, [pc, #284]	; (8023398 <_strtoll_l.isra.0+0x128>)
 802327a:	9005      	str	r0, [sp, #20]
 802327c:	4688      	mov	r8, r1
 802327e:	461f      	mov	r7, r3
 8023280:	460d      	mov	r5, r1
 8023282:	462b      	mov	r3, r5
 8023284:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023288:	5ca6      	ldrb	r6, [r4, r2]
 802328a:	f016 0608 	ands.w	r6, r6, #8
 802328e:	d1f8      	bne.n	8023282 <_strtoll_l.isra.0+0x12>
 8023290:	2c2d      	cmp	r4, #45	; 0x2d
 8023292:	d147      	bne.n	8023324 <_strtoll_l.isra.0+0xb4>
 8023294:	782c      	ldrb	r4, [r5, #0]
 8023296:	2601      	movs	r6, #1
 8023298:	1c9d      	adds	r5, r3, #2
 802329a:	2f00      	cmp	r7, #0
 802329c:	d077      	beq.n	802338e <_strtoll_l.isra.0+0x11e>
 802329e:	2f10      	cmp	r7, #16
 80232a0:	d109      	bne.n	80232b6 <_strtoll_l.isra.0+0x46>
 80232a2:	2c30      	cmp	r4, #48	; 0x30
 80232a4:	d107      	bne.n	80232b6 <_strtoll_l.isra.0+0x46>
 80232a6:	782b      	ldrb	r3, [r5, #0]
 80232a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80232ac:	2b58      	cmp	r3, #88	; 0x58
 80232ae:	d169      	bne.n	8023384 <_strtoll_l.isra.0+0x114>
 80232b0:	786c      	ldrb	r4, [r5, #1]
 80232b2:	2710      	movs	r7, #16
 80232b4:	3502      	adds	r5, #2
 80232b6:	f04f 32ff 	mov.w	r2, #4294967295
 80232ba:	1990      	adds	r0, r2, r6
 80232bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80232c0:	ea4f 7be7 	mov.w	fp, r7, asr #31
 80232c4:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 80232c8:	463a      	mov	r2, r7
 80232ca:	465b      	mov	r3, fp
 80232cc:	e9cd 0100 	strd	r0, r1, [sp]
 80232d0:	f7dd fcea 	bl	8000ca8 <__aeabi_uldivmod>
 80232d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80232d8:	46ba      	mov	sl, r7
 80232da:	4696      	mov	lr, r2
 80232dc:	2300      	movs	r3, #0
 80232de:	2000      	movs	r0, #0
 80232e0:	2100      	movs	r1, #0
 80232e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80232e6:	f1bc 0f09 	cmp.w	ip, #9
 80232ea:	d820      	bhi.n	802332e <_strtoll_l.isra.0+0xbe>
 80232ec:	4664      	mov	r4, ip
 80232ee:	42a7      	cmp	r7, r4
 80232f0:	dd2e      	ble.n	8023350 <_strtoll_l.isra.0+0xe0>
 80232f2:	1c5a      	adds	r2, r3, #1
 80232f4:	d013      	beq.n	802331e <_strtoll_l.isra.0+0xae>
 80232f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80232fa:	428b      	cmp	r3, r1
 80232fc:	bf08      	it	eq
 80232fe:	4282      	cmpeq	r2, r0
 8023300:	d323      	bcc.n	802334a <_strtoll_l.isra.0+0xda>
 8023302:	d101      	bne.n	8023308 <_strtoll_l.isra.0+0x98>
 8023304:	45a6      	cmp	lr, r4
 8023306:	db20      	blt.n	802334a <_strtoll_l.isra.0+0xda>
 8023308:	fb0a f301 	mul.w	r3, sl, r1
 802330c:	fb00 330b 	mla	r3, r0, fp, r3
 8023310:	fbaa 0100 	umull	r0, r1, sl, r0
 8023314:	4419      	add	r1, r3
 8023316:	1900      	adds	r0, r0, r4
 8023318:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802331c:	2301      	movs	r3, #1
 802331e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023322:	e7de      	b.n	80232e2 <_strtoll_l.isra.0+0x72>
 8023324:	2c2b      	cmp	r4, #43	; 0x2b
 8023326:	bf04      	itt	eq
 8023328:	782c      	ldrbeq	r4, [r5, #0]
 802332a:	1c9d      	addeq	r5, r3, #2
 802332c:	e7b5      	b.n	802329a <_strtoll_l.isra.0+0x2a>
 802332e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023332:	f1bc 0f19 	cmp.w	ip, #25
 8023336:	d801      	bhi.n	802333c <_strtoll_l.isra.0+0xcc>
 8023338:	3c37      	subs	r4, #55	; 0x37
 802333a:	e7d8      	b.n	80232ee <_strtoll_l.isra.0+0x7e>
 802333c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023340:	f1bc 0f19 	cmp.w	ip, #25
 8023344:	d804      	bhi.n	8023350 <_strtoll_l.isra.0+0xe0>
 8023346:	3c57      	subs	r4, #87	; 0x57
 8023348:	e7d1      	b.n	80232ee <_strtoll_l.isra.0+0x7e>
 802334a:	f04f 33ff 	mov.w	r3, #4294967295
 802334e:	e7e6      	b.n	802331e <_strtoll_l.isra.0+0xae>
 8023350:	1c5a      	adds	r2, r3, #1
 8023352:	d10a      	bne.n	802336a <_strtoll_l.isra.0+0xfa>
 8023354:	9a05      	ldr	r2, [sp, #20]
 8023356:	2322      	movs	r3, #34	; 0x22
 8023358:	e9dd 0100 	ldrd	r0, r1, [sp]
 802335c:	6013      	str	r3, [r2, #0]
 802335e:	f1b9 0f00 	cmp.w	r9, #0
 8023362:	d10a      	bne.n	802337a <_strtoll_l.isra.0+0x10a>
 8023364:	b007      	add	sp, #28
 8023366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802336a:	b116      	cbz	r6, 8023372 <_strtoll_l.isra.0+0x102>
 802336c:	4240      	negs	r0, r0
 802336e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8023372:	f1b9 0f00 	cmp.w	r9, #0
 8023376:	d0f5      	beq.n	8023364 <_strtoll_l.isra.0+0xf4>
 8023378:	b10b      	cbz	r3, 802337e <_strtoll_l.isra.0+0x10e>
 802337a:	f105 38ff 	add.w	r8, r5, #4294967295
 802337e:	f8c9 8000 	str.w	r8, [r9]
 8023382:	e7ef      	b.n	8023364 <_strtoll_l.isra.0+0xf4>
 8023384:	2430      	movs	r4, #48	; 0x30
 8023386:	2f00      	cmp	r7, #0
 8023388:	d195      	bne.n	80232b6 <_strtoll_l.isra.0+0x46>
 802338a:	2708      	movs	r7, #8
 802338c:	e793      	b.n	80232b6 <_strtoll_l.isra.0+0x46>
 802338e:	2c30      	cmp	r4, #48	; 0x30
 8023390:	d089      	beq.n	80232a6 <_strtoll_l.isra.0+0x36>
 8023392:	270a      	movs	r7, #10
 8023394:	e78f      	b.n	80232b6 <_strtoll_l.isra.0+0x46>
 8023396:	bf00      	nop
 8023398:	080290b1 	.word	0x080290b1

0802339c <_strtoll_r>:
 802339c:	f7ff bf68 	b.w	8023270 <_strtoll_l.isra.0>

080233a0 <_strtoull_l.isra.0>:
 80233a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233a4:	b085      	sub	sp, #20
 80233a6:	4691      	mov	r9, r2
 80233a8:	4a49      	ldr	r2, [pc, #292]	; (80234d0 <_strtoull_l.isra.0+0x130>)
 80233aa:	9003      	str	r0, [sp, #12]
 80233ac:	4688      	mov	r8, r1
 80233ae:	461e      	mov	r6, r3
 80233b0:	460d      	mov	r5, r1
 80233b2:	462b      	mov	r3, r5
 80233b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80233b8:	5ca7      	ldrb	r7, [r4, r2]
 80233ba:	f017 0708 	ands.w	r7, r7, #8
 80233be:	d1f8      	bne.n	80233b2 <_strtoull_l.isra.0+0x12>
 80233c0:	2c2d      	cmp	r4, #45	; 0x2d
 80233c2:	d14a      	bne.n	802345a <_strtoull_l.isra.0+0xba>
 80233c4:	782c      	ldrb	r4, [r5, #0]
 80233c6:	2701      	movs	r7, #1
 80233c8:	1c9d      	adds	r5, r3, #2
 80233ca:	2e00      	cmp	r6, #0
 80233cc:	d07c      	beq.n	80234c8 <_strtoull_l.isra.0+0x128>
 80233ce:	2e10      	cmp	r6, #16
 80233d0:	d109      	bne.n	80233e6 <_strtoull_l.isra.0+0x46>
 80233d2:	2c30      	cmp	r4, #48	; 0x30
 80233d4:	d107      	bne.n	80233e6 <_strtoull_l.isra.0+0x46>
 80233d6:	782b      	ldrb	r3, [r5, #0]
 80233d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80233dc:	2b58      	cmp	r3, #88	; 0x58
 80233de:	d16e      	bne.n	80234be <_strtoull_l.isra.0+0x11e>
 80233e0:	786c      	ldrb	r4, [r5, #1]
 80233e2:	2610      	movs	r6, #16
 80233e4:	3502      	adds	r5, #2
 80233e6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 80233ea:	4632      	mov	r2, r6
 80233ec:	465b      	mov	r3, fp
 80233ee:	f04f 30ff 	mov.w	r0, #4294967295
 80233f2:	f04f 31ff 	mov.w	r1, #4294967295
 80233f6:	f7dd fc57 	bl	8000ca8 <__aeabi_uldivmod>
 80233fa:	e9cd 0100 	strd	r0, r1, [sp]
 80233fe:	4632      	mov	r2, r6
 8023400:	465b      	mov	r3, fp
 8023402:	f04f 30ff 	mov.w	r0, #4294967295
 8023406:	f04f 31ff 	mov.w	r1, #4294967295
 802340a:	f7dd fc4d 	bl	8000ca8 <__aeabi_uldivmod>
 802340e:	46b2      	mov	sl, r6
 8023410:	4696      	mov	lr, r2
 8023412:	2300      	movs	r3, #0
 8023414:	2000      	movs	r0, #0
 8023416:	2100      	movs	r1, #0
 8023418:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802341c:	f1bc 0f09 	cmp.w	ip, #9
 8023420:	d820      	bhi.n	8023464 <_strtoull_l.isra.0+0xc4>
 8023422:	4664      	mov	r4, ip
 8023424:	42a6      	cmp	r6, r4
 8023426:	dd2e      	ble.n	8023486 <_strtoull_l.isra.0+0xe6>
 8023428:	2b00      	cmp	r3, #0
 802342a:	db29      	blt.n	8023480 <_strtoull_l.isra.0+0xe0>
 802342c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023430:	428b      	cmp	r3, r1
 8023432:	bf08      	it	eq
 8023434:	4282      	cmpeq	r2, r0
 8023436:	d323      	bcc.n	8023480 <_strtoull_l.isra.0+0xe0>
 8023438:	d101      	bne.n	802343e <_strtoull_l.isra.0+0x9e>
 802343a:	45a6      	cmp	lr, r4
 802343c:	db20      	blt.n	8023480 <_strtoull_l.isra.0+0xe0>
 802343e:	fb0a f301 	mul.w	r3, sl, r1
 8023442:	fb00 330b 	mla	r3, r0, fp, r3
 8023446:	fbaa 0100 	umull	r0, r1, sl, r0
 802344a:	4419      	add	r1, r3
 802344c:	1900      	adds	r0, r0, r4
 802344e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8023452:	2301      	movs	r3, #1
 8023454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023458:	e7de      	b.n	8023418 <_strtoull_l.isra.0+0x78>
 802345a:	2c2b      	cmp	r4, #43	; 0x2b
 802345c:	bf04      	itt	eq
 802345e:	782c      	ldrbeq	r4, [r5, #0]
 8023460:	1c9d      	addeq	r5, r3, #2
 8023462:	e7b2      	b.n	80233ca <_strtoull_l.isra.0+0x2a>
 8023464:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023468:	f1bc 0f19 	cmp.w	ip, #25
 802346c:	d801      	bhi.n	8023472 <_strtoull_l.isra.0+0xd2>
 802346e:	3c37      	subs	r4, #55	; 0x37
 8023470:	e7d8      	b.n	8023424 <_strtoull_l.isra.0+0x84>
 8023472:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023476:	f1bc 0f19 	cmp.w	ip, #25
 802347a:	d804      	bhi.n	8023486 <_strtoull_l.isra.0+0xe6>
 802347c:	3c57      	subs	r4, #87	; 0x57
 802347e:	e7d1      	b.n	8023424 <_strtoull_l.isra.0+0x84>
 8023480:	f04f 33ff 	mov.w	r3, #4294967295
 8023484:	e7e6      	b.n	8023454 <_strtoull_l.isra.0+0xb4>
 8023486:	2b00      	cmp	r3, #0
 8023488:	da0c      	bge.n	80234a4 <_strtoull_l.isra.0+0x104>
 802348a:	9a03      	ldr	r2, [sp, #12]
 802348c:	2322      	movs	r3, #34	; 0x22
 802348e:	6013      	str	r3, [r2, #0]
 8023490:	f04f 30ff 	mov.w	r0, #4294967295
 8023494:	f04f 31ff 	mov.w	r1, #4294967295
 8023498:	f1b9 0f00 	cmp.w	r9, #0
 802349c:	d10a      	bne.n	80234b4 <_strtoull_l.isra.0+0x114>
 802349e:	b005      	add	sp, #20
 80234a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234a4:	b117      	cbz	r7, 80234ac <_strtoull_l.isra.0+0x10c>
 80234a6:	4240      	negs	r0, r0
 80234a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80234ac:	f1b9 0f00 	cmp.w	r9, #0
 80234b0:	d0f5      	beq.n	802349e <_strtoull_l.isra.0+0xfe>
 80234b2:	b10b      	cbz	r3, 80234b8 <_strtoull_l.isra.0+0x118>
 80234b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80234b8:	f8c9 8000 	str.w	r8, [r9]
 80234bc:	e7ef      	b.n	802349e <_strtoull_l.isra.0+0xfe>
 80234be:	2430      	movs	r4, #48	; 0x30
 80234c0:	2e00      	cmp	r6, #0
 80234c2:	d190      	bne.n	80233e6 <_strtoull_l.isra.0+0x46>
 80234c4:	2608      	movs	r6, #8
 80234c6:	e78e      	b.n	80233e6 <_strtoull_l.isra.0+0x46>
 80234c8:	2c30      	cmp	r4, #48	; 0x30
 80234ca:	d084      	beq.n	80233d6 <_strtoull_l.isra.0+0x36>
 80234cc:	260a      	movs	r6, #10
 80234ce:	e78a      	b.n	80233e6 <_strtoull_l.isra.0+0x46>
 80234d0:	080290b1 	.word	0x080290b1

080234d4 <_strtoull_r>:
 80234d4:	f7ff bf64 	b.w	80233a0 <_strtoull_l.isra.0>

080234d8 <__swbuf_r>:
 80234d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234da:	460e      	mov	r6, r1
 80234dc:	4614      	mov	r4, r2
 80234de:	4605      	mov	r5, r0
 80234e0:	b118      	cbz	r0, 80234ea <__swbuf_r+0x12>
 80234e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80234e4:	b90b      	cbnz	r3, 80234ea <__swbuf_r+0x12>
 80234e6:	f7fc f9d3 	bl	801f890 <__sinit>
 80234ea:	69a3      	ldr	r3, [r4, #24]
 80234ec:	60a3      	str	r3, [r4, #8]
 80234ee:	89a3      	ldrh	r3, [r4, #12]
 80234f0:	0719      	lsls	r1, r3, #28
 80234f2:	d529      	bpl.n	8023548 <__swbuf_r+0x70>
 80234f4:	6923      	ldr	r3, [r4, #16]
 80234f6:	b33b      	cbz	r3, 8023548 <__swbuf_r+0x70>
 80234f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80234fc:	b2f6      	uxtb	r6, r6
 80234fe:	049a      	lsls	r2, r3, #18
 8023500:	4637      	mov	r7, r6
 8023502:	d52a      	bpl.n	802355a <__swbuf_r+0x82>
 8023504:	6823      	ldr	r3, [r4, #0]
 8023506:	6920      	ldr	r0, [r4, #16]
 8023508:	1a18      	subs	r0, r3, r0
 802350a:	6963      	ldr	r3, [r4, #20]
 802350c:	4283      	cmp	r3, r0
 802350e:	dc04      	bgt.n	802351a <__swbuf_r+0x42>
 8023510:	4621      	mov	r1, r4
 8023512:	4628      	mov	r0, r5
 8023514:	f7fc f950 	bl	801f7b8 <_fflush_r>
 8023518:	b9e0      	cbnz	r0, 8023554 <__swbuf_r+0x7c>
 802351a:	68a3      	ldr	r3, [r4, #8]
 802351c:	3b01      	subs	r3, #1
 802351e:	60a3      	str	r3, [r4, #8]
 8023520:	6823      	ldr	r3, [r4, #0]
 8023522:	1c5a      	adds	r2, r3, #1
 8023524:	6022      	str	r2, [r4, #0]
 8023526:	701e      	strb	r6, [r3, #0]
 8023528:	6962      	ldr	r2, [r4, #20]
 802352a:	1c43      	adds	r3, r0, #1
 802352c:	429a      	cmp	r2, r3
 802352e:	d004      	beq.n	802353a <__swbuf_r+0x62>
 8023530:	89a3      	ldrh	r3, [r4, #12]
 8023532:	07db      	lsls	r3, r3, #31
 8023534:	d506      	bpl.n	8023544 <__swbuf_r+0x6c>
 8023536:	2e0a      	cmp	r6, #10
 8023538:	d104      	bne.n	8023544 <__swbuf_r+0x6c>
 802353a:	4621      	mov	r1, r4
 802353c:	4628      	mov	r0, r5
 802353e:	f7fc f93b 	bl	801f7b8 <_fflush_r>
 8023542:	b938      	cbnz	r0, 8023554 <__swbuf_r+0x7c>
 8023544:	4638      	mov	r0, r7
 8023546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023548:	4621      	mov	r1, r4
 802354a:	4628      	mov	r0, r5
 802354c:	f7fb f9c2 	bl	801e8d4 <__swsetup_r>
 8023550:	2800      	cmp	r0, #0
 8023552:	d0d1      	beq.n	80234f8 <__swbuf_r+0x20>
 8023554:	f04f 37ff 	mov.w	r7, #4294967295
 8023558:	e7f4      	b.n	8023544 <__swbuf_r+0x6c>
 802355a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802355e:	81a3      	strh	r3, [r4, #12]
 8023560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8023566:	6663      	str	r3, [r4, #100]	; 0x64
 8023568:	e7cc      	b.n	8023504 <__swbuf_r+0x2c>
	...

0802356c <_wcrtomb_r>:
 802356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802356e:	4c09      	ldr	r4, [pc, #36]	; (8023594 <_wcrtomb_r+0x28>)
 8023570:	b085      	sub	sp, #20
 8023572:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8023576:	4605      	mov	r5, r0
 8023578:	461e      	mov	r6, r3
 802357a:	b909      	cbnz	r1, 8023580 <_wcrtomb_r+0x14>
 802357c:	460a      	mov	r2, r1
 802357e:	a901      	add	r1, sp, #4
 8023580:	47b8      	blx	r7
 8023582:	1c43      	adds	r3, r0, #1
 8023584:	bf01      	itttt	eq
 8023586:	2300      	moveq	r3, #0
 8023588:	6033      	streq	r3, [r6, #0]
 802358a:	238a      	moveq	r3, #138	; 0x8a
 802358c:	602b      	streq	r3, [r5, #0]
 802358e:	b005      	add	sp, #20
 8023590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023592:	bf00      	nop
 8023594:	200008e0 	.word	0x200008e0

08023598 <__ascii_wctomb>:
 8023598:	b149      	cbz	r1, 80235ae <__ascii_wctomb+0x16>
 802359a:	2aff      	cmp	r2, #255	; 0xff
 802359c:	bf85      	ittet	hi
 802359e:	238a      	movhi	r3, #138	; 0x8a
 80235a0:	6003      	strhi	r3, [r0, #0]
 80235a2:	700a      	strbls	r2, [r1, #0]
 80235a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80235a8:	bf98      	it	ls
 80235aa:	2001      	movls	r0, #1
 80235ac:	4770      	bx	lr
 80235ae:	4608      	mov	r0, r1
 80235b0:	4770      	bx	lr

080235b2 <abort>:
 80235b2:	b508      	push	{r3, lr}
 80235b4:	2006      	movs	r0, #6
 80235b6:	f000 f82d 	bl	8023614 <raise>
 80235ba:	2001      	movs	r0, #1
 80235bc:	f7e0 fac4 	bl	8003b48 <_exit>

080235c0 <_raise_r>:
 80235c0:	291f      	cmp	r1, #31
 80235c2:	b538      	push	{r3, r4, r5, lr}
 80235c4:	4604      	mov	r4, r0
 80235c6:	460d      	mov	r5, r1
 80235c8:	d904      	bls.n	80235d4 <_raise_r+0x14>
 80235ca:	2316      	movs	r3, #22
 80235cc:	6003      	str	r3, [r0, #0]
 80235ce:	f04f 30ff 	mov.w	r0, #4294967295
 80235d2:	bd38      	pop	{r3, r4, r5, pc}
 80235d4:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 80235d8:	b112      	cbz	r2, 80235e0 <_raise_r+0x20>
 80235da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80235de:	b94b      	cbnz	r3, 80235f4 <_raise_r+0x34>
 80235e0:	4620      	mov	r0, r4
 80235e2:	f000 f831 	bl	8023648 <_getpid_r>
 80235e6:	462a      	mov	r2, r5
 80235e8:	4601      	mov	r1, r0
 80235ea:	4620      	mov	r0, r4
 80235ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80235f0:	f000 b818 	b.w	8023624 <_kill_r>
 80235f4:	2b01      	cmp	r3, #1
 80235f6:	d00a      	beq.n	802360e <_raise_r+0x4e>
 80235f8:	1c59      	adds	r1, r3, #1
 80235fa:	d103      	bne.n	8023604 <_raise_r+0x44>
 80235fc:	2316      	movs	r3, #22
 80235fe:	6003      	str	r3, [r0, #0]
 8023600:	2001      	movs	r0, #1
 8023602:	e7e6      	b.n	80235d2 <_raise_r+0x12>
 8023604:	2400      	movs	r4, #0
 8023606:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802360a:	4628      	mov	r0, r5
 802360c:	4798      	blx	r3
 802360e:	2000      	movs	r0, #0
 8023610:	e7df      	b.n	80235d2 <_raise_r+0x12>
	...

08023614 <raise>:
 8023614:	4b02      	ldr	r3, [pc, #8]	; (8023620 <raise+0xc>)
 8023616:	4601      	mov	r1, r0
 8023618:	6818      	ldr	r0, [r3, #0]
 802361a:	f7ff bfd1 	b.w	80235c0 <_raise_r>
 802361e:	bf00      	nop
 8023620:	20000038 	.word	0x20000038

08023624 <_kill_r>:
 8023624:	b538      	push	{r3, r4, r5, lr}
 8023626:	4d07      	ldr	r5, [pc, #28]	; (8023644 <_kill_r+0x20>)
 8023628:	2300      	movs	r3, #0
 802362a:	4604      	mov	r4, r0
 802362c:	4608      	mov	r0, r1
 802362e:	4611      	mov	r1, r2
 8023630:	602b      	str	r3, [r5, #0]
 8023632:	f7e0 fa77 	bl	8003b24 <_kill>
 8023636:	1c43      	adds	r3, r0, #1
 8023638:	d102      	bne.n	8023640 <_kill_r+0x1c>
 802363a:	682b      	ldr	r3, [r5, #0]
 802363c:	b103      	cbz	r3, 8023640 <_kill_r+0x1c>
 802363e:	6023      	str	r3, [r4, #0]
 8023640:	bd38      	pop	{r3, r4, r5, pc}
 8023642:	bf00      	nop
 8023644:	2000be64 	.word	0x2000be64

08023648 <_getpid_r>:
 8023648:	f7e0 ba64 	b.w	8003b14 <_getpid>

0802364c <pow>:
 802364c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023650:	ec59 8b10 	vmov	r8, r9, d0
 8023654:	ec57 6b11 	vmov	r6, r7, d1
 8023658:	f000 f8a6 	bl	80237a8 <__ieee754_pow>
 802365c:	4b4e      	ldr	r3, [pc, #312]	; (8023798 <pow+0x14c>)
 802365e:	f993 3000 	ldrsb.w	r3, [r3]
 8023662:	3301      	adds	r3, #1
 8023664:	ec55 4b10 	vmov	r4, r5, d0
 8023668:	d015      	beq.n	8023696 <pow+0x4a>
 802366a:	4632      	mov	r2, r6
 802366c:	463b      	mov	r3, r7
 802366e:	4630      	mov	r0, r6
 8023670:	4639      	mov	r1, r7
 8023672:	f7dd fa8b 	bl	8000b8c <__aeabi_dcmpun>
 8023676:	b970      	cbnz	r0, 8023696 <pow+0x4a>
 8023678:	4642      	mov	r2, r8
 802367a:	464b      	mov	r3, r9
 802367c:	4640      	mov	r0, r8
 802367e:	4649      	mov	r1, r9
 8023680:	f7dd fa84 	bl	8000b8c <__aeabi_dcmpun>
 8023684:	2200      	movs	r2, #0
 8023686:	2300      	movs	r3, #0
 8023688:	b148      	cbz	r0, 802369e <pow+0x52>
 802368a:	4630      	mov	r0, r6
 802368c:	4639      	mov	r1, r7
 802368e:	f7dd fa4b 	bl	8000b28 <__aeabi_dcmpeq>
 8023692:	2800      	cmp	r0, #0
 8023694:	d17d      	bne.n	8023792 <pow+0x146>
 8023696:	ec45 4b10 	vmov	d0, r4, r5
 802369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802369e:	4640      	mov	r0, r8
 80236a0:	4649      	mov	r1, r9
 80236a2:	f7dd fa41 	bl	8000b28 <__aeabi_dcmpeq>
 80236a6:	b1e0      	cbz	r0, 80236e2 <pow+0x96>
 80236a8:	2200      	movs	r2, #0
 80236aa:	2300      	movs	r3, #0
 80236ac:	4630      	mov	r0, r6
 80236ae:	4639      	mov	r1, r7
 80236b0:	f7dd fa3a 	bl	8000b28 <__aeabi_dcmpeq>
 80236b4:	2800      	cmp	r0, #0
 80236b6:	d16c      	bne.n	8023792 <pow+0x146>
 80236b8:	ec47 6b10 	vmov	d0, r6, r7
 80236bc:	f000 fe53 	bl	8024366 <finite>
 80236c0:	2800      	cmp	r0, #0
 80236c2:	d0e8      	beq.n	8023696 <pow+0x4a>
 80236c4:	2200      	movs	r2, #0
 80236c6:	2300      	movs	r3, #0
 80236c8:	4630      	mov	r0, r6
 80236ca:	4639      	mov	r1, r7
 80236cc:	f7dd fa36 	bl	8000b3c <__aeabi_dcmplt>
 80236d0:	2800      	cmp	r0, #0
 80236d2:	d0e0      	beq.n	8023696 <pow+0x4a>
 80236d4:	f7fb ffdc 	bl	801f690 <__errno>
 80236d8:	2321      	movs	r3, #33	; 0x21
 80236da:	6003      	str	r3, [r0, #0]
 80236dc:	2400      	movs	r4, #0
 80236de:	4d2f      	ldr	r5, [pc, #188]	; (802379c <pow+0x150>)
 80236e0:	e7d9      	b.n	8023696 <pow+0x4a>
 80236e2:	ec45 4b10 	vmov	d0, r4, r5
 80236e6:	f000 fe3e 	bl	8024366 <finite>
 80236ea:	bbb8      	cbnz	r0, 802375c <pow+0x110>
 80236ec:	ec49 8b10 	vmov	d0, r8, r9
 80236f0:	f000 fe39 	bl	8024366 <finite>
 80236f4:	b390      	cbz	r0, 802375c <pow+0x110>
 80236f6:	ec47 6b10 	vmov	d0, r6, r7
 80236fa:	f000 fe34 	bl	8024366 <finite>
 80236fe:	b368      	cbz	r0, 802375c <pow+0x110>
 8023700:	4622      	mov	r2, r4
 8023702:	462b      	mov	r3, r5
 8023704:	4620      	mov	r0, r4
 8023706:	4629      	mov	r1, r5
 8023708:	f7dd fa40 	bl	8000b8c <__aeabi_dcmpun>
 802370c:	b160      	cbz	r0, 8023728 <pow+0xdc>
 802370e:	f7fb ffbf 	bl	801f690 <__errno>
 8023712:	2321      	movs	r3, #33	; 0x21
 8023714:	6003      	str	r3, [r0, #0]
 8023716:	2200      	movs	r2, #0
 8023718:	2300      	movs	r3, #0
 802371a:	4610      	mov	r0, r2
 802371c:	4619      	mov	r1, r3
 802371e:	f7dd f8c5 	bl	80008ac <__aeabi_ddiv>
 8023722:	4604      	mov	r4, r0
 8023724:	460d      	mov	r5, r1
 8023726:	e7b6      	b.n	8023696 <pow+0x4a>
 8023728:	f7fb ffb2 	bl	801f690 <__errno>
 802372c:	2322      	movs	r3, #34	; 0x22
 802372e:	6003      	str	r3, [r0, #0]
 8023730:	2200      	movs	r2, #0
 8023732:	2300      	movs	r3, #0
 8023734:	4640      	mov	r0, r8
 8023736:	4649      	mov	r1, r9
 8023738:	f7dd fa00 	bl	8000b3c <__aeabi_dcmplt>
 802373c:	2400      	movs	r4, #0
 802373e:	b158      	cbz	r0, 8023758 <pow+0x10c>
 8023740:	ec47 6b10 	vmov	d0, r6, r7
 8023744:	f000 fe24 	bl	8024390 <rint>
 8023748:	4632      	mov	r2, r6
 802374a:	ec51 0b10 	vmov	r0, r1, d0
 802374e:	463b      	mov	r3, r7
 8023750:	f7dd f9ea 	bl	8000b28 <__aeabi_dcmpeq>
 8023754:	2800      	cmp	r0, #0
 8023756:	d0c2      	beq.n	80236de <pow+0x92>
 8023758:	4d11      	ldr	r5, [pc, #68]	; (80237a0 <pow+0x154>)
 802375a:	e79c      	b.n	8023696 <pow+0x4a>
 802375c:	2200      	movs	r2, #0
 802375e:	2300      	movs	r3, #0
 8023760:	4620      	mov	r0, r4
 8023762:	4629      	mov	r1, r5
 8023764:	f7dd f9e0 	bl	8000b28 <__aeabi_dcmpeq>
 8023768:	2800      	cmp	r0, #0
 802376a:	d094      	beq.n	8023696 <pow+0x4a>
 802376c:	ec49 8b10 	vmov	d0, r8, r9
 8023770:	f000 fdf9 	bl	8024366 <finite>
 8023774:	2800      	cmp	r0, #0
 8023776:	d08e      	beq.n	8023696 <pow+0x4a>
 8023778:	ec47 6b10 	vmov	d0, r6, r7
 802377c:	f000 fdf3 	bl	8024366 <finite>
 8023780:	2800      	cmp	r0, #0
 8023782:	d088      	beq.n	8023696 <pow+0x4a>
 8023784:	f7fb ff84 	bl	801f690 <__errno>
 8023788:	2322      	movs	r3, #34	; 0x22
 802378a:	6003      	str	r3, [r0, #0]
 802378c:	2400      	movs	r4, #0
 802378e:	2500      	movs	r5, #0
 8023790:	e781      	b.n	8023696 <pow+0x4a>
 8023792:	4d04      	ldr	r5, [pc, #16]	; (80237a4 <pow+0x158>)
 8023794:	2400      	movs	r4, #0
 8023796:	e77e      	b.n	8023696 <pow+0x4a>
 8023798:	20000a4c 	.word	0x20000a4c
 802379c:	fff00000 	.word	0xfff00000
 80237a0:	7ff00000 	.word	0x7ff00000
 80237a4:	3ff00000 	.word	0x3ff00000

080237a8 <__ieee754_pow>:
 80237a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237ac:	ed2d 8b06 	vpush	{d8-d10}
 80237b0:	b08d      	sub	sp, #52	; 0x34
 80237b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80237b6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80237ba:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80237be:	ea56 0100 	orrs.w	r1, r6, r0
 80237c2:	ec53 2b10 	vmov	r2, r3, d0
 80237c6:	f000 84d1 	beq.w	802416c <__ieee754_pow+0x9c4>
 80237ca:	497f      	ldr	r1, [pc, #508]	; (80239c8 <__ieee754_pow+0x220>)
 80237cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80237d0:	428c      	cmp	r4, r1
 80237d2:	ee10 8a10 	vmov	r8, s0
 80237d6:	4699      	mov	r9, r3
 80237d8:	dc09      	bgt.n	80237ee <__ieee754_pow+0x46>
 80237da:	d103      	bne.n	80237e4 <__ieee754_pow+0x3c>
 80237dc:	b97a      	cbnz	r2, 80237fe <__ieee754_pow+0x56>
 80237de:	42a6      	cmp	r6, r4
 80237e0:	dd02      	ble.n	80237e8 <__ieee754_pow+0x40>
 80237e2:	e00c      	b.n	80237fe <__ieee754_pow+0x56>
 80237e4:	428e      	cmp	r6, r1
 80237e6:	dc02      	bgt.n	80237ee <__ieee754_pow+0x46>
 80237e8:	428e      	cmp	r6, r1
 80237ea:	d110      	bne.n	802380e <__ieee754_pow+0x66>
 80237ec:	b178      	cbz	r0, 802380e <__ieee754_pow+0x66>
 80237ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80237f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80237f6:	ea54 0308 	orrs.w	r3, r4, r8
 80237fa:	f000 84b7 	beq.w	802416c <__ieee754_pow+0x9c4>
 80237fe:	4873      	ldr	r0, [pc, #460]	; (80239cc <__ieee754_pow+0x224>)
 8023800:	b00d      	add	sp, #52	; 0x34
 8023802:	ecbd 8b06 	vpop	{d8-d10}
 8023806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802380a:	f000 bdb9 	b.w	8024380 <nan>
 802380e:	f1b9 0f00 	cmp.w	r9, #0
 8023812:	da36      	bge.n	8023882 <__ieee754_pow+0xda>
 8023814:	496e      	ldr	r1, [pc, #440]	; (80239d0 <__ieee754_pow+0x228>)
 8023816:	428e      	cmp	r6, r1
 8023818:	dc51      	bgt.n	80238be <__ieee754_pow+0x116>
 802381a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 802381e:	428e      	cmp	r6, r1
 8023820:	f340 84af 	ble.w	8024182 <__ieee754_pow+0x9da>
 8023824:	1531      	asrs	r1, r6, #20
 8023826:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802382a:	2914      	cmp	r1, #20
 802382c:	dd0f      	ble.n	802384e <__ieee754_pow+0xa6>
 802382e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8023832:	fa20 fc01 	lsr.w	ip, r0, r1
 8023836:	fa0c f101 	lsl.w	r1, ip, r1
 802383a:	4281      	cmp	r1, r0
 802383c:	f040 84a1 	bne.w	8024182 <__ieee754_pow+0x9da>
 8023840:	f00c 0c01 	and.w	ip, ip, #1
 8023844:	f1cc 0102 	rsb	r1, ip, #2
 8023848:	9100      	str	r1, [sp, #0]
 802384a:	b180      	cbz	r0, 802386e <__ieee754_pow+0xc6>
 802384c:	e059      	b.n	8023902 <__ieee754_pow+0x15a>
 802384e:	2800      	cmp	r0, #0
 8023850:	d155      	bne.n	80238fe <__ieee754_pow+0x156>
 8023852:	f1c1 0114 	rsb	r1, r1, #20
 8023856:	fa46 fc01 	asr.w	ip, r6, r1
 802385a:	fa0c f101 	lsl.w	r1, ip, r1
 802385e:	42b1      	cmp	r1, r6
 8023860:	f040 848c 	bne.w	802417c <__ieee754_pow+0x9d4>
 8023864:	f00c 0c01 	and.w	ip, ip, #1
 8023868:	f1cc 0102 	rsb	r1, ip, #2
 802386c:	9100      	str	r1, [sp, #0]
 802386e:	4959      	ldr	r1, [pc, #356]	; (80239d4 <__ieee754_pow+0x22c>)
 8023870:	428e      	cmp	r6, r1
 8023872:	d12d      	bne.n	80238d0 <__ieee754_pow+0x128>
 8023874:	2f00      	cmp	r7, #0
 8023876:	da79      	bge.n	802396c <__ieee754_pow+0x1c4>
 8023878:	4956      	ldr	r1, [pc, #344]	; (80239d4 <__ieee754_pow+0x22c>)
 802387a:	2000      	movs	r0, #0
 802387c:	f7dd f816 	bl	80008ac <__aeabi_ddiv>
 8023880:	e016      	b.n	80238b0 <__ieee754_pow+0x108>
 8023882:	2100      	movs	r1, #0
 8023884:	9100      	str	r1, [sp, #0]
 8023886:	2800      	cmp	r0, #0
 8023888:	d13b      	bne.n	8023902 <__ieee754_pow+0x15a>
 802388a:	494f      	ldr	r1, [pc, #316]	; (80239c8 <__ieee754_pow+0x220>)
 802388c:	428e      	cmp	r6, r1
 802388e:	d1ee      	bne.n	802386e <__ieee754_pow+0xc6>
 8023890:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8023894:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8023898:	ea53 0308 	orrs.w	r3, r3, r8
 802389c:	f000 8466 	beq.w	802416c <__ieee754_pow+0x9c4>
 80238a0:	4b4d      	ldr	r3, [pc, #308]	; (80239d8 <__ieee754_pow+0x230>)
 80238a2:	429c      	cmp	r4, r3
 80238a4:	dd0d      	ble.n	80238c2 <__ieee754_pow+0x11a>
 80238a6:	2f00      	cmp	r7, #0
 80238a8:	f280 8464 	bge.w	8024174 <__ieee754_pow+0x9cc>
 80238ac:	2000      	movs	r0, #0
 80238ae:	2100      	movs	r1, #0
 80238b0:	ec41 0b10 	vmov	d0, r0, r1
 80238b4:	b00d      	add	sp, #52	; 0x34
 80238b6:	ecbd 8b06 	vpop	{d8-d10}
 80238ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238be:	2102      	movs	r1, #2
 80238c0:	e7e0      	b.n	8023884 <__ieee754_pow+0xdc>
 80238c2:	2f00      	cmp	r7, #0
 80238c4:	daf2      	bge.n	80238ac <__ieee754_pow+0x104>
 80238c6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80238ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80238ce:	e7ef      	b.n	80238b0 <__ieee754_pow+0x108>
 80238d0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80238d4:	d104      	bne.n	80238e0 <__ieee754_pow+0x138>
 80238d6:	4610      	mov	r0, r2
 80238d8:	4619      	mov	r1, r3
 80238da:	f7dc febd 	bl	8000658 <__aeabi_dmul>
 80238de:	e7e7      	b.n	80238b0 <__ieee754_pow+0x108>
 80238e0:	493e      	ldr	r1, [pc, #248]	; (80239dc <__ieee754_pow+0x234>)
 80238e2:	428f      	cmp	r7, r1
 80238e4:	d10d      	bne.n	8023902 <__ieee754_pow+0x15a>
 80238e6:	f1b9 0f00 	cmp.w	r9, #0
 80238ea:	db0a      	blt.n	8023902 <__ieee754_pow+0x15a>
 80238ec:	ec43 2b10 	vmov	d0, r2, r3
 80238f0:	b00d      	add	sp, #52	; 0x34
 80238f2:	ecbd 8b06 	vpop	{d8-d10}
 80238f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238fa:	f000 bc77 	b.w	80241ec <__ieee754_sqrt>
 80238fe:	2100      	movs	r1, #0
 8023900:	9100      	str	r1, [sp, #0]
 8023902:	ec43 2b10 	vmov	d0, r2, r3
 8023906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802390a:	f000 fd23 	bl	8024354 <fabs>
 802390e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023912:	ec51 0b10 	vmov	r0, r1, d0
 8023916:	f1b8 0f00 	cmp.w	r8, #0
 802391a:	d12a      	bne.n	8023972 <__ieee754_pow+0x1ca>
 802391c:	b12c      	cbz	r4, 802392a <__ieee754_pow+0x182>
 802391e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80239d4 <__ieee754_pow+0x22c>
 8023922:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8023926:	45e6      	cmp	lr, ip
 8023928:	d123      	bne.n	8023972 <__ieee754_pow+0x1ca>
 802392a:	2f00      	cmp	r7, #0
 802392c:	da05      	bge.n	802393a <__ieee754_pow+0x192>
 802392e:	4602      	mov	r2, r0
 8023930:	460b      	mov	r3, r1
 8023932:	2000      	movs	r0, #0
 8023934:	4927      	ldr	r1, [pc, #156]	; (80239d4 <__ieee754_pow+0x22c>)
 8023936:	f7dc ffb9 	bl	80008ac <__aeabi_ddiv>
 802393a:	f1b9 0f00 	cmp.w	r9, #0
 802393e:	dab7      	bge.n	80238b0 <__ieee754_pow+0x108>
 8023940:	9b00      	ldr	r3, [sp, #0]
 8023942:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023946:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802394a:	4323      	orrs	r3, r4
 802394c:	d108      	bne.n	8023960 <__ieee754_pow+0x1b8>
 802394e:	4602      	mov	r2, r0
 8023950:	460b      	mov	r3, r1
 8023952:	4610      	mov	r0, r2
 8023954:	4619      	mov	r1, r3
 8023956:	f7dc fcc7 	bl	80002e8 <__aeabi_dsub>
 802395a:	4602      	mov	r2, r0
 802395c:	460b      	mov	r3, r1
 802395e:	e78d      	b.n	802387c <__ieee754_pow+0xd4>
 8023960:	9b00      	ldr	r3, [sp, #0]
 8023962:	2b01      	cmp	r3, #1
 8023964:	d1a4      	bne.n	80238b0 <__ieee754_pow+0x108>
 8023966:	4602      	mov	r2, r0
 8023968:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802396c:	4610      	mov	r0, r2
 802396e:	4619      	mov	r1, r3
 8023970:	e79e      	b.n	80238b0 <__ieee754_pow+0x108>
 8023972:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8023976:	f10c 35ff 	add.w	r5, ip, #4294967295
 802397a:	950a      	str	r5, [sp, #40]	; 0x28
 802397c:	9d00      	ldr	r5, [sp, #0]
 802397e:	46ac      	mov	ip, r5
 8023980:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023982:	ea5c 0505 	orrs.w	r5, ip, r5
 8023986:	d0e4      	beq.n	8023952 <__ieee754_pow+0x1aa>
 8023988:	4b15      	ldr	r3, [pc, #84]	; (80239e0 <__ieee754_pow+0x238>)
 802398a:	429e      	cmp	r6, r3
 802398c:	f340 80fc 	ble.w	8023b88 <__ieee754_pow+0x3e0>
 8023990:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8023994:	429e      	cmp	r6, r3
 8023996:	4b10      	ldr	r3, [pc, #64]	; (80239d8 <__ieee754_pow+0x230>)
 8023998:	dd07      	ble.n	80239aa <__ieee754_pow+0x202>
 802399a:	429c      	cmp	r4, r3
 802399c:	dc0a      	bgt.n	80239b4 <__ieee754_pow+0x20c>
 802399e:	2f00      	cmp	r7, #0
 80239a0:	da84      	bge.n	80238ac <__ieee754_pow+0x104>
 80239a2:	a307      	add	r3, pc, #28	; (adr r3, 80239c0 <__ieee754_pow+0x218>)
 80239a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239a8:	e795      	b.n	80238d6 <__ieee754_pow+0x12e>
 80239aa:	429c      	cmp	r4, r3
 80239ac:	dbf7      	blt.n	802399e <__ieee754_pow+0x1f6>
 80239ae:	4b09      	ldr	r3, [pc, #36]	; (80239d4 <__ieee754_pow+0x22c>)
 80239b0:	429c      	cmp	r4, r3
 80239b2:	dd17      	ble.n	80239e4 <__ieee754_pow+0x23c>
 80239b4:	2f00      	cmp	r7, #0
 80239b6:	dcf4      	bgt.n	80239a2 <__ieee754_pow+0x1fa>
 80239b8:	e778      	b.n	80238ac <__ieee754_pow+0x104>
 80239ba:	bf00      	nop
 80239bc:	f3af 8000 	nop.w
 80239c0:	8800759c 	.word	0x8800759c
 80239c4:	7e37e43c 	.word	0x7e37e43c
 80239c8:	7ff00000 	.word	0x7ff00000
 80239cc:	08029581 	.word	0x08029581
 80239d0:	433fffff 	.word	0x433fffff
 80239d4:	3ff00000 	.word	0x3ff00000
 80239d8:	3fefffff 	.word	0x3fefffff
 80239dc:	3fe00000 	.word	0x3fe00000
 80239e0:	41e00000 	.word	0x41e00000
 80239e4:	4b64      	ldr	r3, [pc, #400]	; (8023b78 <__ieee754_pow+0x3d0>)
 80239e6:	2200      	movs	r2, #0
 80239e8:	f7dc fc7e 	bl	80002e8 <__aeabi_dsub>
 80239ec:	a356      	add	r3, pc, #344	; (adr r3, 8023b48 <__ieee754_pow+0x3a0>)
 80239ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239f2:	4604      	mov	r4, r0
 80239f4:	460d      	mov	r5, r1
 80239f6:	f7dc fe2f 	bl	8000658 <__aeabi_dmul>
 80239fa:	a355      	add	r3, pc, #340	; (adr r3, 8023b50 <__ieee754_pow+0x3a8>)
 80239fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a00:	4606      	mov	r6, r0
 8023a02:	460f      	mov	r7, r1
 8023a04:	4620      	mov	r0, r4
 8023a06:	4629      	mov	r1, r5
 8023a08:	f7dc fe26 	bl	8000658 <__aeabi_dmul>
 8023a0c:	4b5b      	ldr	r3, [pc, #364]	; (8023b7c <__ieee754_pow+0x3d4>)
 8023a0e:	4682      	mov	sl, r0
 8023a10:	468b      	mov	fp, r1
 8023a12:	2200      	movs	r2, #0
 8023a14:	4620      	mov	r0, r4
 8023a16:	4629      	mov	r1, r5
 8023a18:	f7dc fe1e 	bl	8000658 <__aeabi_dmul>
 8023a1c:	4602      	mov	r2, r0
 8023a1e:	460b      	mov	r3, r1
 8023a20:	a14d      	add	r1, pc, #308	; (adr r1, 8023b58 <__ieee754_pow+0x3b0>)
 8023a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a26:	f7dc fc5f 	bl	80002e8 <__aeabi_dsub>
 8023a2a:	4622      	mov	r2, r4
 8023a2c:	462b      	mov	r3, r5
 8023a2e:	f7dc fe13 	bl	8000658 <__aeabi_dmul>
 8023a32:	4602      	mov	r2, r0
 8023a34:	460b      	mov	r3, r1
 8023a36:	2000      	movs	r0, #0
 8023a38:	4951      	ldr	r1, [pc, #324]	; (8023b80 <__ieee754_pow+0x3d8>)
 8023a3a:	f7dc fc55 	bl	80002e8 <__aeabi_dsub>
 8023a3e:	4622      	mov	r2, r4
 8023a40:	4680      	mov	r8, r0
 8023a42:	4689      	mov	r9, r1
 8023a44:	462b      	mov	r3, r5
 8023a46:	4620      	mov	r0, r4
 8023a48:	4629      	mov	r1, r5
 8023a4a:	f7dc fe05 	bl	8000658 <__aeabi_dmul>
 8023a4e:	4602      	mov	r2, r0
 8023a50:	460b      	mov	r3, r1
 8023a52:	4640      	mov	r0, r8
 8023a54:	4649      	mov	r1, r9
 8023a56:	f7dc fdff 	bl	8000658 <__aeabi_dmul>
 8023a5a:	a341      	add	r3, pc, #260	; (adr r3, 8023b60 <__ieee754_pow+0x3b8>)
 8023a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a60:	f7dc fdfa 	bl	8000658 <__aeabi_dmul>
 8023a64:	4602      	mov	r2, r0
 8023a66:	460b      	mov	r3, r1
 8023a68:	4650      	mov	r0, sl
 8023a6a:	4659      	mov	r1, fp
 8023a6c:	f7dc fc3c 	bl	80002e8 <__aeabi_dsub>
 8023a70:	4602      	mov	r2, r0
 8023a72:	460b      	mov	r3, r1
 8023a74:	4680      	mov	r8, r0
 8023a76:	4689      	mov	r9, r1
 8023a78:	4630      	mov	r0, r6
 8023a7a:	4639      	mov	r1, r7
 8023a7c:	f7dc fc36 	bl	80002ec <__adddf3>
 8023a80:	2400      	movs	r4, #0
 8023a82:	4632      	mov	r2, r6
 8023a84:	463b      	mov	r3, r7
 8023a86:	4620      	mov	r0, r4
 8023a88:	460d      	mov	r5, r1
 8023a8a:	f7dc fc2d 	bl	80002e8 <__aeabi_dsub>
 8023a8e:	4602      	mov	r2, r0
 8023a90:	460b      	mov	r3, r1
 8023a92:	4640      	mov	r0, r8
 8023a94:	4649      	mov	r1, r9
 8023a96:	f7dc fc27 	bl	80002e8 <__aeabi_dsub>
 8023a9a:	9b00      	ldr	r3, [sp, #0]
 8023a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a9e:	3b01      	subs	r3, #1
 8023aa0:	4313      	orrs	r3, r2
 8023aa2:	4682      	mov	sl, r0
 8023aa4:	468b      	mov	fp, r1
 8023aa6:	f040 81f1 	bne.w	8023e8c <__ieee754_pow+0x6e4>
 8023aaa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8023b68 <__ieee754_pow+0x3c0>
 8023aae:	eeb0 8a47 	vmov.f32	s16, s14
 8023ab2:	eef0 8a67 	vmov.f32	s17, s15
 8023ab6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023aba:	2600      	movs	r6, #0
 8023abc:	4632      	mov	r2, r6
 8023abe:	463b      	mov	r3, r7
 8023ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ac4:	f7dc fc10 	bl	80002e8 <__aeabi_dsub>
 8023ac8:	4622      	mov	r2, r4
 8023aca:	462b      	mov	r3, r5
 8023acc:	f7dc fdc4 	bl	8000658 <__aeabi_dmul>
 8023ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023ad4:	4680      	mov	r8, r0
 8023ad6:	4689      	mov	r9, r1
 8023ad8:	4650      	mov	r0, sl
 8023ada:	4659      	mov	r1, fp
 8023adc:	f7dc fdbc 	bl	8000658 <__aeabi_dmul>
 8023ae0:	4602      	mov	r2, r0
 8023ae2:	460b      	mov	r3, r1
 8023ae4:	4640      	mov	r0, r8
 8023ae6:	4649      	mov	r1, r9
 8023ae8:	f7dc fc00 	bl	80002ec <__adddf3>
 8023aec:	4632      	mov	r2, r6
 8023aee:	463b      	mov	r3, r7
 8023af0:	4680      	mov	r8, r0
 8023af2:	4689      	mov	r9, r1
 8023af4:	4620      	mov	r0, r4
 8023af6:	4629      	mov	r1, r5
 8023af8:	f7dc fdae 	bl	8000658 <__aeabi_dmul>
 8023afc:	460b      	mov	r3, r1
 8023afe:	4604      	mov	r4, r0
 8023b00:	460d      	mov	r5, r1
 8023b02:	4602      	mov	r2, r0
 8023b04:	4649      	mov	r1, r9
 8023b06:	4640      	mov	r0, r8
 8023b08:	f7dc fbf0 	bl	80002ec <__adddf3>
 8023b0c:	4b1d      	ldr	r3, [pc, #116]	; (8023b84 <__ieee754_pow+0x3dc>)
 8023b0e:	4299      	cmp	r1, r3
 8023b10:	ec45 4b19 	vmov	d9, r4, r5
 8023b14:	4606      	mov	r6, r0
 8023b16:	460f      	mov	r7, r1
 8023b18:	468b      	mov	fp, r1
 8023b1a:	f340 82fe 	ble.w	802411a <__ieee754_pow+0x972>
 8023b1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8023b22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8023b26:	4303      	orrs	r3, r0
 8023b28:	f000 81f0 	beq.w	8023f0c <__ieee754_pow+0x764>
 8023b2c:	a310      	add	r3, pc, #64	; (adr r3, 8023b70 <__ieee754_pow+0x3c8>)
 8023b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b32:	ec51 0b18 	vmov	r0, r1, d8
 8023b36:	f7dc fd8f 	bl	8000658 <__aeabi_dmul>
 8023b3a:	a30d      	add	r3, pc, #52	; (adr r3, 8023b70 <__ieee754_pow+0x3c8>)
 8023b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b40:	e6cb      	b.n	80238da <__ieee754_pow+0x132>
 8023b42:	bf00      	nop
 8023b44:	f3af 8000 	nop.w
 8023b48:	60000000 	.word	0x60000000
 8023b4c:	3ff71547 	.word	0x3ff71547
 8023b50:	f85ddf44 	.word	0xf85ddf44
 8023b54:	3e54ae0b 	.word	0x3e54ae0b
 8023b58:	55555555 	.word	0x55555555
 8023b5c:	3fd55555 	.word	0x3fd55555
 8023b60:	652b82fe 	.word	0x652b82fe
 8023b64:	3ff71547 	.word	0x3ff71547
 8023b68:	00000000 	.word	0x00000000
 8023b6c:	bff00000 	.word	0xbff00000
 8023b70:	8800759c 	.word	0x8800759c
 8023b74:	7e37e43c 	.word	0x7e37e43c
 8023b78:	3ff00000 	.word	0x3ff00000
 8023b7c:	3fd00000 	.word	0x3fd00000
 8023b80:	3fe00000 	.word	0x3fe00000
 8023b84:	408fffff 	.word	0x408fffff
 8023b88:	4bd7      	ldr	r3, [pc, #860]	; (8023ee8 <__ieee754_pow+0x740>)
 8023b8a:	ea03 0309 	and.w	r3, r3, r9
 8023b8e:	2200      	movs	r2, #0
 8023b90:	b92b      	cbnz	r3, 8023b9e <__ieee754_pow+0x3f6>
 8023b92:	4bd6      	ldr	r3, [pc, #856]	; (8023eec <__ieee754_pow+0x744>)
 8023b94:	f7dc fd60 	bl	8000658 <__aeabi_dmul>
 8023b98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8023b9c:	460c      	mov	r4, r1
 8023b9e:	1523      	asrs	r3, r4, #20
 8023ba0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023ba4:	4413      	add	r3, r2
 8023ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8023ba8:	4bd1      	ldr	r3, [pc, #836]	; (8023ef0 <__ieee754_pow+0x748>)
 8023baa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023bae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8023bb2:	429c      	cmp	r4, r3
 8023bb4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023bb8:	dd08      	ble.n	8023bcc <__ieee754_pow+0x424>
 8023bba:	4bce      	ldr	r3, [pc, #824]	; (8023ef4 <__ieee754_pow+0x74c>)
 8023bbc:	429c      	cmp	r4, r3
 8023bbe:	f340 8163 	ble.w	8023e88 <__ieee754_pow+0x6e0>
 8023bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bc4:	3301      	adds	r3, #1
 8023bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8023bc8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8023bcc:	2400      	movs	r4, #0
 8023bce:	00e3      	lsls	r3, r4, #3
 8023bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8023bd2:	4bc9      	ldr	r3, [pc, #804]	; (8023ef8 <__ieee754_pow+0x750>)
 8023bd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023bd8:	ed93 7b00 	vldr	d7, [r3]
 8023bdc:	4629      	mov	r1, r5
 8023bde:	ec53 2b17 	vmov	r2, r3, d7
 8023be2:	eeb0 8a47 	vmov.f32	s16, s14
 8023be6:	eef0 8a67 	vmov.f32	s17, s15
 8023bea:	4682      	mov	sl, r0
 8023bec:	f7dc fb7c 	bl	80002e8 <__aeabi_dsub>
 8023bf0:	4652      	mov	r2, sl
 8023bf2:	4606      	mov	r6, r0
 8023bf4:	460f      	mov	r7, r1
 8023bf6:	462b      	mov	r3, r5
 8023bf8:	ec51 0b18 	vmov	r0, r1, d8
 8023bfc:	f7dc fb76 	bl	80002ec <__adddf3>
 8023c00:	4602      	mov	r2, r0
 8023c02:	460b      	mov	r3, r1
 8023c04:	2000      	movs	r0, #0
 8023c06:	49bd      	ldr	r1, [pc, #756]	; (8023efc <__ieee754_pow+0x754>)
 8023c08:	f7dc fe50 	bl	80008ac <__aeabi_ddiv>
 8023c0c:	ec41 0b19 	vmov	d9, r0, r1
 8023c10:	4602      	mov	r2, r0
 8023c12:	460b      	mov	r3, r1
 8023c14:	4630      	mov	r0, r6
 8023c16:	4639      	mov	r1, r7
 8023c18:	f7dc fd1e 	bl	8000658 <__aeabi_dmul>
 8023c1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023c20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023c24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023c28:	2300      	movs	r3, #0
 8023c2a:	9304      	str	r3, [sp, #16]
 8023c2c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8023c30:	46ab      	mov	fp, r5
 8023c32:	106d      	asrs	r5, r5, #1
 8023c34:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8023c38:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023c3c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8023c40:	2200      	movs	r2, #0
 8023c42:	4640      	mov	r0, r8
 8023c44:	4649      	mov	r1, r9
 8023c46:	4614      	mov	r4, r2
 8023c48:	461d      	mov	r5, r3
 8023c4a:	f7dc fd05 	bl	8000658 <__aeabi_dmul>
 8023c4e:	4602      	mov	r2, r0
 8023c50:	460b      	mov	r3, r1
 8023c52:	4630      	mov	r0, r6
 8023c54:	4639      	mov	r1, r7
 8023c56:	f7dc fb47 	bl	80002e8 <__aeabi_dsub>
 8023c5a:	ec53 2b18 	vmov	r2, r3, d8
 8023c5e:	4606      	mov	r6, r0
 8023c60:	460f      	mov	r7, r1
 8023c62:	4620      	mov	r0, r4
 8023c64:	4629      	mov	r1, r5
 8023c66:	f7dc fb3f 	bl	80002e8 <__aeabi_dsub>
 8023c6a:	4602      	mov	r2, r0
 8023c6c:	460b      	mov	r3, r1
 8023c6e:	4650      	mov	r0, sl
 8023c70:	4659      	mov	r1, fp
 8023c72:	f7dc fb39 	bl	80002e8 <__aeabi_dsub>
 8023c76:	4642      	mov	r2, r8
 8023c78:	464b      	mov	r3, r9
 8023c7a:	f7dc fced 	bl	8000658 <__aeabi_dmul>
 8023c7e:	4602      	mov	r2, r0
 8023c80:	460b      	mov	r3, r1
 8023c82:	4630      	mov	r0, r6
 8023c84:	4639      	mov	r1, r7
 8023c86:	f7dc fb2f 	bl	80002e8 <__aeabi_dsub>
 8023c8a:	ec53 2b19 	vmov	r2, r3, d9
 8023c8e:	f7dc fce3 	bl	8000658 <__aeabi_dmul>
 8023c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023c96:	ec41 0b18 	vmov	d8, r0, r1
 8023c9a:	4610      	mov	r0, r2
 8023c9c:	4619      	mov	r1, r3
 8023c9e:	f7dc fcdb 	bl	8000658 <__aeabi_dmul>
 8023ca2:	a37d      	add	r3, pc, #500	; (adr r3, 8023e98 <__ieee754_pow+0x6f0>)
 8023ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ca8:	4604      	mov	r4, r0
 8023caa:	460d      	mov	r5, r1
 8023cac:	f7dc fcd4 	bl	8000658 <__aeabi_dmul>
 8023cb0:	a37b      	add	r3, pc, #492	; (adr r3, 8023ea0 <__ieee754_pow+0x6f8>)
 8023cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cb6:	f7dc fb19 	bl	80002ec <__adddf3>
 8023cba:	4622      	mov	r2, r4
 8023cbc:	462b      	mov	r3, r5
 8023cbe:	f7dc fccb 	bl	8000658 <__aeabi_dmul>
 8023cc2:	a379      	add	r3, pc, #484	; (adr r3, 8023ea8 <__ieee754_pow+0x700>)
 8023cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cc8:	f7dc fb10 	bl	80002ec <__adddf3>
 8023ccc:	4622      	mov	r2, r4
 8023cce:	462b      	mov	r3, r5
 8023cd0:	f7dc fcc2 	bl	8000658 <__aeabi_dmul>
 8023cd4:	a376      	add	r3, pc, #472	; (adr r3, 8023eb0 <__ieee754_pow+0x708>)
 8023cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cda:	f7dc fb07 	bl	80002ec <__adddf3>
 8023cde:	4622      	mov	r2, r4
 8023ce0:	462b      	mov	r3, r5
 8023ce2:	f7dc fcb9 	bl	8000658 <__aeabi_dmul>
 8023ce6:	a374      	add	r3, pc, #464	; (adr r3, 8023eb8 <__ieee754_pow+0x710>)
 8023ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cec:	f7dc fafe 	bl	80002ec <__adddf3>
 8023cf0:	4622      	mov	r2, r4
 8023cf2:	462b      	mov	r3, r5
 8023cf4:	f7dc fcb0 	bl	8000658 <__aeabi_dmul>
 8023cf8:	a371      	add	r3, pc, #452	; (adr r3, 8023ec0 <__ieee754_pow+0x718>)
 8023cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cfe:	f7dc faf5 	bl	80002ec <__adddf3>
 8023d02:	4622      	mov	r2, r4
 8023d04:	4606      	mov	r6, r0
 8023d06:	460f      	mov	r7, r1
 8023d08:	462b      	mov	r3, r5
 8023d0a:	4620      	mov	r0, r4
 8023d0c:	4629      	mov	r1, r5
 8023d0e:	f7dc fca3 	bl	8000658 <__aeabi_dmul>
 8023d12:	4602      	mov	r2, r0
 8023d14:	460b      	mov	r3, r1
 8023d16:	4630      	mov	r0, r6
 8023d18:	4639      	mov	r1, r7
 8023d1a:	f7dc fc9d 	bl	8000658 <__aeabi_dmul>
 8023d1e:	4642      	mov	r2, r8
 8023d20:	4604      	mov	r4, r0
 8023d22:	460d      	mov	r5, r1
 8023d24:	464b      	mov	r3, r9
 8023d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023d2a:	f7dc fadf 	bl	80002ec <__adddf3>
 8023d2e:	ec53 2b18 	vmov	r2, r3, d8
 8023d32:	f7dc fc91 	bl	8000658 <__aeabi_dmul>
 8023d36:	4622      	mov	r2, r4
 8023d38:	462b      	mov	r3, r5
 8023d3a:	f7dc fad7 	bl	80002ec <__adddf3>
 8023d3e:	4642      	mov	r2, r8
 8023d40:	4682      	mov	sl, r0
 8023d42:	468b      	mov	fp, r1
 8023d44:	464b      	mov	r3, r9
 8023d46:	4640      	mov	r0, r8
 8023d48:	4649      	mov	r1, r9
 8023d4a:	f7dc fc85 	bl	8000658 <__aeabi_dmul>
 8023d4e:	4b6c      	ldr	r3, [pc, #432]	; (8023f00 <__ieee754_pow+0x758>)
 8023d50:	2200      	movs	r2, #0
 8023d52:	4606      	mov	r6, r0
 8023d54:	460f      	mov	r7, r1
 8023d56:	f7dc fac9 	bl	80002ec <__adddf3>
 8023d5a:	4652      	mov	r2, sl
 8023d5c:	465b      	mov	r3, fp
 8023d5e:	f7dc fac5 	bl	80002ec <__adddf3>
 8023d62:	9c04      	ldr	r4, [sp, #16]
 8023d64:	460d      	mov	r5, r1
 8023d66:	4622      	mov	r2, r4
 8023d68:	460b      	mov	r3, r1
 8023d6a:	4640      	mov	r0, r8
 8023d6c:	4649      	mov	r1, r9
 8023d6e:	f7dc fc73 	bl	8000658 <__aeabi_dmul>
 8023d72:	4b63      	ldr	r3, [pc, #396]	; (8023f00 <__ieee754_pow+0x758>)
 8023d74:	4680      	mov	r8, r0
 8023d76:	4689      	mov	r9, r1
 8023d78:	2200      	movs	r2, #0
 8023d7a:	4620      	mov	r0, r4
 8023d7c:	4629      	mov	r1, r5
 8023d7e:	f7dc fab3 	bl	80002e8 <__aeabi_dsub>
 8023d82:	4632      	mov	r2, r6
 8023d84:	463b      	mov	r3, r7
 8023d86:	f7dc faaf 	bl	80002e8 <__aeabi_dsub>
 8023d8a:	4602      	mov	r2, r0
 8023d8c:	460b      	mov	r3, r1
 8023d8e:	4650      	mov	r0, sl
 8023d90:	4659      	mov	r1, fp
 8023d92:	f7dc faa9 	bl	80002e8 <__aeabi_dsub>
 8023d96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023d9a:	f7dc fc5d 	bl	8000658 <__aeabi_dmul>
 8023d9e:	4622      	mov	r2, r4
 8023da0:	4606      	mov	r6, r0
 8023da2:	460f      	mov	r7, r1
 8023da4:	462b      	mov	r3, r5
 8023da6:	ec51 0b18 	vmov	r0, r1, d8
 8023daa:	f7dc fc55 	bl	8000658 <__aeabi_dmul>
 8023dae:	4602      	mov	r2, r0
 8023db0:	460b      	mov	r3, r1
 8023db2:	4630      	mov	r0, r6
 8023db4:	4639      	mov	r1, r7
 8023db6:	f7dc fa99 	bl	80002ec <__adddf3>
 8023dba:	4606      	mov	r6, r0
 8023dbc:	460f      	mov	r7, r1
 8023dbe:	4602      	mov	r2, r0
 8023dc0:	460b      	mov	r3, r1
 8023dc2:	4640      	mov	r0, r8
 8023dc4:	4649      	mov	r1, r9
 8023dc6:	f7dc fa91 	bl	80002ec <__adddf3>
 8023dca:	9c04      	ldr	r4, [sp, #16]
 8023dcc:	a33e      	add	r3, pc, #248	; (adr r3, 8023ec8 <__ieee754_pow+0x720>)
 8023dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dd2:	4620      	mov	r0, r4
 8023dd4:	460d      	mov	r5, r1
 8023dd6:	f7dc fc3f 	bl	8000658 <__aeabi_dmul>
 8023dda:	4642      	mov	r2, r8
 8023ddc:	ec41 0b18 	vmov	d8, r0, r1
 8023de0:	464b      	mov	r3, r9
 8023de2:	4620      	mov	r0, r4
 8023de4:	4629      	mov	r1, r5
 8023de6:	f7dc fa7f 	bl	80002e8 <__aeabi_dsub>
 8023dea:	4602      	mov	r2, r0
 8023dec:	460b      	mov	r3, r1
 8023dee:	4630      	mov	r0, r6
 8023df0:	4639      	mov	r1, r7
 8023df2:	f7dc fa79 	bl	80002e8 <__aeabi_dsub>
 8023df6:	a336      	add	r3, pc, #216	; (adr r3, 8023ed0 <__ieee754_pow+0x728>)
 8023df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dfc:	f7dc fc2c 	bl	8000658 <__aeabi_dmul>
 8023e00:	a335      	add	r3, pc, #212	; (adr r3, 8023ed8 <__ieee754_pow+0x730>)
 8023e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e06:	4606      	mov	r6, r0
 8023e08:	460f      	mov	r7, r1
 8023e0a:	4620      	mov	r0, r4
 8023e0c:	4629      	mov	r1, r5
 8023e0e:	f7dc fc23 	bl	8000658 <__aeabi_dmul>
 8023e12:	4602      	mov	r2, r0
 8023e14:	460b      	mov	r3, r1
 8023e16:	4630      	mov	r0, r6
 8023e18:	4639      	mov	r1, r7
 8023e1a:	f7dc fa67 	bl	80002ec <__adddf3>
 8023e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023e20:	4b38      	ldr	r3, [pc, #224]	; (8023f04 <__ieee754_pow+0x75c>)
 8023e22:	4413      	add	r3, r2
 8023e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e28:	f7dc fa60 	bl	80002ec <__adddf3>
 8023e2c:	4682      	mov	sl, r0
 8023e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023e30:	468b      	mov	fp, r1
 8023e32:	f7dc fba7 	bl	8000584 <__aeabi_i2d>
 8023e36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023e38:	4b33      	ldr	r3, [pc, #204]	; (8023f08 <__ieee754_pow+0x760>)
 8023e3a:	4413      	add	r3, r2
 8023e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023e40:	4606      	mov	r6, r0
 8023e42:	460f      	mov	r7, r1
 8023e44:	4652      	mov	r2, sl
 8023e46:	465b      	mov	r3, fp
 8023e48:	ec51 0b18 	vmov	r0, r1, d8
 8023e4c:	f7dc fa4e 	bl	80002ec <__adddf3>
 8023e50:	4642      	mov	r2, r8
 8023e52:	464b      	mov	r3, r9
 8023e54:	f7dc fa4a 	bl	80002ec <__adddf3>
 8023e58:	4632      	mov	r2, r6
 8023e5a:	463b      	mov	r3, r7
 8023e5c:	f7dc fa46 	bl	80002ec <__adddf3>
 8023e60:	9c04      	ldr	r4, [sp, #16]
 8023e62:	4632      	mov	r2, r6
 8023e64:	463b      	mov	r3, r7
 8023e66:	4620      	mov	r0, r4
 8023e68:	460d      	mov	r5, r1
 8023e6a:	f7dc fa3d 	bl	80002e8 <__aeabi_dsub>
 8023e6e:	4642      	mov	r2, r8
 8023e70:	464b      	mov	r3, r9
 8023e72:	f7dc fa39 	bl	80002e8 <__aeabi_dsub>
 8023e76:	ec53 2b18 	vmov	r2, r3, d8
 8023e7a:	f7dc fa35 	bl	80002e8 <__aeabi_dsub>
 8023e7e:	4602      	mov	r2, r0
 8023e80:	460b      	mov	r3, r1
 8023e82:	4650      	mov	r0, sl
 8023e84:	4659      	mov	r1, fp
 8023e86:	e606      	b.n	8023a96 <__ieee754_pow+0x2ee>
 8023e88:	2401      	movs	r4, #1
 8023e8a:	e6a0      	b.n	8023bce <__ieee754_pow+0x426>
 8023e8c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8023ee0 <__ieee754_pow+0x738>
 8023e90:	e60d      	b.n	8023aae <__ieee754_pow+0x306>
 8023e92:	bf00      	nop
 8023e94:	f3af 8000 	nop.w
 8023e98:	4a454eef 	.word	0x4a454eef
 8023e9c:	3fca7e28 	.word	0x3fca7e28
 8023ea0:	93c9db65 	.word	0x93c9db65
 8023ea4:	3fcd864a 	.word	0x3fcd864a
 8023ea8:	a91d4101 	.word	0xa91d4101
 8023eac:	3fd17460 	.word	0x3fd17460
 8023eb0:	518f264d 	.word	0x518f264d
 8023eb4:	3fd55555 	.word	0x3fd55555
 8023eb8:	db6fabff 	.word	0xdb6fabff
 8023ebc:	3fdb6db6 	.word	0x3fdb6db6
 8023ec0:	33333303 	.word	0x33333303
 8023ec4:	3fe33333 	.word	0x3fe33333
 8023ec8:	e0000000 	.word	0xe0000000
 8023ecc:	3feec709 	.word	0x3feec709
 8023ed0:	dc3a03fd 	.word	0xdc3a03fd
 8023ed4:	3feec709 	.word	0x3feec709
 8023ed8:	145b01f5 	.word	0x145b01f5
 8023edc:	be3e2fe0 	.word	0xbe3e2fe0
 8023ee0:	00000000 	.word	0x00000000
 8023ee4:	3ff00000 	.word	0x3ff00000
 8023ee8:	7ff00000 	.word	0x7ff00000
 8023eec:	43400000 	.word	0x43400000
 8023ef0:	0003988e 	.word	0x0003988e
 8023ef4:	000bb679 	.word	0x000bb679
 8023ef8:	08029590 	.word	0x08029590
 8023efc:	3ff00000 	.word	0x3ff00000
 8023f00:	40080000 	.word	0x40080000
 8023f04:	080295b0 	.word	0x080295b0
 8023f08:	080295a0 	.word	0x080295a0
 8023f0c:	a3b5      	add	r3, pc, #724	; (adr r3, 80241e4 <__ieee754_pow+0xa3c>)
 8023f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f12:	4640      	mov	r0, r8
 8023f14:	4649      	mov	r1, r9
 8023f16:	f7dc f9e9 	bl	80002ec <__adddf3>
 8023f1a:	4622      	mov	r2, r4
 8023f1c:	ec41 0b1a 	vmov	d10, r0, r1
 8023f20:	462b      	mov	r3, r5
 8023f22:	4630      	mov	r0, r6
 8023f24:	4639      	mov	r1, r7
 8023f26:	f7dc f9df 	bl	80002e8 <__aeabi_dsub>
 8023f2a:	4602      	mov	r2, r0
 8023f2c:	460b      	mov	r3, r1
 8023f2e:	ec51 0b1a 	vmov	r0, r1, d10
 8023f32:	f7dc fe21 	bl	8000b78 <__aeabi_dcmpgt>
 8023f36:	2800      	cmp	r0, #0
 8023f38:	f47f adf8 	bne.w	8023b2c <__ieee754_pow+0x384>
 8023f3c:	4aa4      	ldr	r2, [pc, #656]	; (80241d0 <__ieee754_pow+0xa28>)
 8023f3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023f42:	4293      	cmp	r3, r2
 8023f44:	f340 810b 	ble.w	802415e <__ieee754_pow+0x9b6>
 8023f48:	151b      	asrs	r3, r3, #20
 8023f4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023f4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8023f52:	fa4a f303 	asr.w	r3, sl, r3
 8023f56:	445b      	add	r3, fp
 8023f58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023f5c:	4e9d      	ldr	r6, [pc, #628]	; (80241d4 <__ieee754_pow+0xa2c>)
 8023f5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8023f62:	4116      	asrs	r6, r2
 8023f64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023f68:	2000      	movs	r0, #0
 8023f6a:	ea23 0106 	bic.w	r1, r3, r6
 8023f6e:	f1c2 0214 	rsb	r2, r2, #20
 8023f72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8023f76:	fa4a fa02 	asr.w	sl, sl, r2
 8023f7a:	f1bb 0f00 	cmp.w	fp, #0
 8023f7e:	4602      	mov	r2, r0
 8023f80:	460b      	mov	r3, r1
 8023f82:	4620      	mov	r0, r4
 8023f84:	4629      	mov	r1, r5
 8023f86:	bfb8      	it	lt
 8023f88:	f1ca 0a00 	rsblt	sl, sl, #0
 8023f8c:	f7dc f9ac 	bl	80002e8 <__aeabi_dsub>
 8023f90:	ec41 0b19 	vmov	d9, r0, r1
 8023f94:	4642      	mov	r2, r8
 8023f96:	464b      	mov	r3, r9
 8023f98:	ec51 0b19 	vmov	r0, r1, d9
 8023f9c:	f7dc f9a6 	bl	80002ec <__adddf3>
 8023fa0:	2400      	movs	r4, #0
 8023fa2:	a379      	add	r3, pc, #484	; (adr r3, 8024188 <__ieee754_pow+0x9e0>)
 8023fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fa8:	4620      	mov	r0, r4
 8023faa:	460d      	mov	r5, r1
 8023fac:	f7dc fb54 	bl	8000658 <__aeabi_dmul>
 8023fb0:	ec53 2b19 	vmov	r2, r3, d9
 8023fb4:	4606      	mov	r6, r0
 8023fb6:	460f      	mov	r7, r1
 8023fb8:	4620      	mov	r0, r4
 8023fba:	4629      	mov	r1, r5
 8023fbc:	f7dc f994 	bl	80002e8 <__aeabi_dsub>
 8023fc0:	4602      	mov	r2, r0
 8023fc2:	460b      	mov	r3, r1
 8023fc4:	4640      	mov	r0, r8
 8023fc6:	4649      	mov	r1, r9
 8023fc8:	f7dc f98e 	bl	80002e8 <__aeabi_dsub>
 8023fcc:	a370      	add	r3, pc, #448	; (adr r3, 8024190 <__ieee754_pow+0x9e8>)
 8023fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fd2:	f7dc fb41 	bl	8000658 <__aeabi_dmul>
 8023fd6:	a370      	add	r3, pc, #448	; (adr r3, 8024198 <__ieee754_pow+0x9f0>)
 8023fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fdc:	4680      	mov	r8, r0
 8023fde:	4689      	mov	r9, r1
 8023fe0:	4620      	mov	r0, r4
 8023fe2:	4629      	mov	r1, r5
 8023fe4:	f7dc fb38 	bl	8000658 <__aeabi_dmul>
 8023fe8:	4602      	mov	r2, r0
 8023fea:	460b      	mov	r3, r1
 8023fec:	4640      	mov	r0, r8
 8023fee:	4649      	mov	r1, r9
 8023ff0:	f7dc f97c 	bl	80002ec <__adddf3>
 8023ff4:	4604      	mov	r4, r0
 8023ff6:	460d      	mov	r5, r1
 8023ff8:	4602      	mov	r2, r0
 8023ffa:	460b      	mov	r3, r1
 8023ffc:	4630      	mov	r0, r6
 8023ffe:	4639      	mov	r1, r7
 8024000:	f7dc f974 	bl	80002ec <__adddf3>
 8024004:	4632      	mov	r2, r6
 8024006:	463b      	mov	r3, r7
 8024008:	4680      	mov	r8, r0
 802400a:	4689      	mov	r9, r1
 802400c:	f7dc f96c 	bl	80002e8 <__aeabi_dsub>
 8024010:	4602      	mov	r2, r0
 8024012:	460b      	mov	r3, r1
 8024014:	4620      	mov	r0, r4
 8024016:	4629      	mov	r1, r5
 8024018:	f7dc f966 	bl	80002e8 <__aeabi_dsub>
 802401c:	4642      	mov	r2, r8
 802401e:	4606      	mov	r6, r0
 8024020:	460f      	mov	r7, r1
 8024022:	464b      	mov	r3, r9
 8024024:	4640      	mov	r0, r8
 8024026:	4649      	mov	r1, r9
 8024028:	f7dc fb16 	bl	8000658 <__aeabi_dmul>
 802402c:	a35c      	add	r3, pc, #368	; (adr r3, 80241a0 <__ieee754_pow+0x9f8>)
 802402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024032:	4604      	mov	r4, r0
 8024034:	460d      	mov	r5, r1
 8024036:	f7dc fb0f 	bl	8000658 <__aeabi_dmul>
 802403a:	a35b      	add	r3, pc, #364	; (adr r3, 80241a8 <__ieee754_pow+0xa00>)
 802403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024040:	f7dc f952 	bl	80002e8 <__aeabi_dsub>
 8024044:	4622      	mov	r2, r4
 8024046:	462b      	mov	r3, r5
 8024048:	f7dc fb06 	bl	8000658 <__aeabi_dmul>
 802404c:	a358      	add	r3, pc, #352	; (adr r3, 80241b0 <__ieee754_pow+0xa08>)
 802404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024052:	f7dc f94b 	bl	80002ec <__adddf3>
 8024056:	4622      	mov	r2, r4
 8024058:	462b      	mov	r3, r5
 802405a:	f7dc fafd 	bl	8000658 <__aeabi_dmul>
 802405e:	a356      	add	r3, pc, #344	; (adr r3, 80241b8 <__ieee754_pow+0xa10>)
 8024060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024064:	f7dc f940 	bl	80002e8 <__aeabi_dsub>
 8024068:	4622      	mov	r2, r4
 802406a:	462b      	mov	r3, r5
 802406c:	f7dc faf4 	bl	8000658 <__aeabi_dmul>
 8024070:	a353      	add	r3, pc, #332	; (adr r3, 80241c0 <__ieee754_pow+0xa18>)
 8024072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024076:	f7dc f939 	bl	80002ec <__adddf3>
 802407a:	4622      	mov	r2, r4
 802407c:	462b      	mov	r3, r5
 802407e:	f7dc faeb 	bl	8000658 <__aeabi_dmul>
 8024082:	4602      	mov	r2, r0
 8024084:	460b      	mov	r3, r1
 8024086:	4640      	mov	r0, r8
 8024088:	4649      	mov	r1, r9
 802408a:	f7dc f92d 	bl	80002e8 <__aeabi_dsub>
 802408e:	4604      	mov	r4, r0
 8024090:	460d      	mov	r5, r1
 8024092:	4602      	mov	r2, r0
 8024094:	460b      	mov	r3, r1
 8024096:	4640      	mov	r0, r8
 8024098:	4649      	mov	r1, r9
 802409a:	f7dc fadd 	bl	8000658 <__aeabi_dmul>
 802409e:	2200      	movs	r2, #0
 80240a0:	ec41 0b19 	vmov	d9, r0, r1
 80240a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80240a8:	4620      	mov	r0, r4
 80240aa:	4629      	mov	r1, r5
 80240ac:	f7dc f91c 	bl	80002e8 <__aeabi_dsub>
 80240b0:	4602      	mov	r2, r0
 80240b2:	460b      	mov	r3, r1
 80240b4:	ec51 0b19 	vmov	r0, r1, d9
 80240b8:	f7dc fbf8 	bl	80008ac <__aeabi_ddiv>
 80240bc:	4632      	mov	r2, r6
 80240be:	4604      	mov	r4, r0
 80240c0:	460d      	mov	r5, r1
 80240c2:	463b      	mov	r3, r7
 80240c4:	4640      	mov	r0, r8
 80240c6:	4649      	mov	r1, r9
 80240c8:	f7dc fac6 	bl	8000658 <__aeabi_dmul>
 80240cc:	4632      	mov	r2, r6
 80240ce:	463b      	mov	r3, r7
 80240d0:	f7dc f90c 	bl	80002ec <__adddf3>
 80240d4:	4602      	mov	r2, r0
 80240d6:	460b      	mov	r3, r1
 80240d8:	4620      	mov	r0, r4
 80240da:	4629      	mov	r1, r5
 80240dc:	f7dc f904 	bl	80002e8 <__aeabi_dsub>
 80240e0:	4642      	mov	r2, r8
 80240e2:	464b      	mov	r3, r9
 80240e4:	f7dc f900 	bl	80002e8 <__aeabi_dsub>
 80240e8:	460b      	mov	r3, r1
 80240ea:	4602      	mov	r2, r0
 80240ec:	493a      	ldr	r1, [pc, #232]	; (80241d8 <__ieee754_pow+0xa30>)
 80240ee:	2000      	movs	r0, #0
 80240f0:	f7dc f8fa 	bl	80002e8 <__aeabi_dsub>
 80240f4:	e9cd 0100 	strd	r0, r1, [sp]
 80240f8:	9b01      	ldr	r3, [sp, #4]
 80240fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80240fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024102:	da2f      	bge.n	8024164 <__ieee754_pow+0x9bc>
 8024104:	4650      	mov	r0, sl
 8024106:	ed9d 0b00 	vldr	d0, [sp]
 802410a:	f000 f9cd 	bl	80244a8 <scalbn>
 802410e:	ec51 0b10 	vmov	r0, r1, d0
 8024112:	ec53 2b18 	vmov	r2, r3, d8
 8024116:	f7ff bbe0 	b.w	80238da <__ieee754_pow+0x132>
 802411a:	4b30      	ldr	r3, [pc, #192]	; (80241dc <__ieee754_pow+0xa34>)
 802411c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8024120:	429e      	cmp	r6, r3
 8024122:	f77f af0b 	ble.w	8023f3c <__ieee754_pow+0x794>
 8024126:	4b2e      	ldr	r3, [pc, #184]	; (80241e0 <__ieee754_pow+0xa38>)
 8024128:	440b      	add	r3, r1
 802412a:	4303      	orrs	r3, r0
 802412c:	d00b      	beq.n	8024146 <__ieee754_pow+0x99e>
 802412e:	a326      	add	r3, pc, #152	; (adr r3, 80241c8 <__ieee754_pow+0xa20>)
 8024130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024134:	ec51 0b18 	vmov	r0, r1, d8
 8024138:	f7dc fa8e 	bl	8000658 <__aeabi_dmul>
 802413c:	a322      	add	r3, pc, #136	; (adr r3, 80241c8 <__ieee754_pow+0xa20>)
 802413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024142:	f7ff bbca 	b.w	80238da <__ieee754_pow+0x132>
 8024146:	4622      	mov	r2, r4
 8024148:	462b      	mov	r3, r5
 802414a:	f7dc f8cd 	bl	80002e8 <__aeabi_dsub>
 802414e:	4642      	mov	r2, r8
 8024150:	464b      	mov	r3, r9
 8024152:	f7dc fd07 	bl	8000b64 <__aeabi_dcmpge>
 8024156:	2800      	cmp	r0, #0
 8024158:	f43f aef0 	beq.w	8023f3c <__ieee754_pow+0x794>
 802415c:	e7e7      	b.n	802412e <__ieee754_pow+0x986>
 802415e:	f04f 0a00 	mov.w	sl, #0
 8024162:	e717      	b.n	8023f94 <__ieee754_pow+0x7ec>
 8024164:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024168:	4619      	mov	r1, r3
 802416a:	e7d2      	b.n	8024112 <__ieee754_pow+0x96a>
 802416c:	491a      	ldr	r1, [pc, #104]	; (80241d8 <__ieee754_pow+0xa30>)
 802416e:	2000      	movs	r0, #0
 8024170:	f7ff bb9e 	b.w	80238b0 <__ieee754_pow+0x108>
 8024174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024178:	f7ff bb9a 	b.w	80238b0 <__ieee754_pow+0x108>
 802417c:	9000      	str	r0, [sp, #0]
 802417e:	f7ff bb76 	b.w	802386e <__ieee754_pow+0xc6>
 8024182:	2100      	movs	r1, #0
 8024184:	f7ff bb60 	b.w	8023848 <__ieee754_pow+0xa0>
 8024188:	00000000 	.word	0x00000000
 802418c:	3fe62e43 	.word	0x3fe62e43
 8024190:	fefa39ef 	.word	0xfefa39ef
 8024194:	3fe62e42 	.word	0x3fe62e42
 8024198:	0ca86c39 	.word	0x0ca86c39
 802419c:	be205c61 	.word	0xbe205c61
 80241a0:	72bea4d0 	.word	0x72bea4d0
 80241a4:	3e663769 	.word	0x3e663769
 80241a8:	c5d26bf1 	.word	0xc5d26bf1
 80241ac:	3ebbbd41 	.word	0x3ebbbd41
 80241b0:	af25de2c 	.word	0xaf25de2c
 80241b4:	3f11566a 	.word	0x3f11566a
 80241b8:	16bebd93 	.word	0x16bebd93
 80241bc:	3f66c16c 	.word	0x3f66c16c
 80241c0:	5555553e 	.word	0x5555553e
 80241c4:	3fc55555 	.word	0x3fc55555
 80241c8:	c2f8f359 	.word	0xc2f8f359
 80241cc:	01a56e1f 	.word	0x01a56e1f
 80241d0:	3fe00000 	.word	0x3fe00000
 80241d4:	000fffff 	.word	0x000fffff
 80241d8:	3ff00000 	.word	0x3ff00000
 80241dc:	4090cbff 	.word	0x4090cbff
 80241e0:	3f6f3400 	.word	0x3f6f3400
 80241e4:	652b82fe 	.word	0x652b82fe
 80241e8:	3c971547 	.word	0x3c971547

080241ec <__ieee754_sqrt>:
 80241ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241f0:	ec55 4b10 	vmov	r4, r5, d0
 80241f4:	4e56      	ldr	r6, [pc, #344]	; (8024350 <__ieee754_sqrt+0x164>)
 80241f6:	43ae      	bics	r6, r5
 80241f8:	ee10 0a10 	vmov	r0, s0
 80241fc:	ee10 3a10 	vmov	r3, s0
 8024200:	4629      	mov	r1, r5
 8024202:	462a      	mov	r2, r5
 8024204:	d110      	bne.n	8024228 <__ieee754_sqrt+0x3c>
 8024206:	ee10 2a10 	vmov	r2, s0
 802420a:	462b      	mov	r3, r5
 802420c:	f7dc fa24 	bl	8000658 <__aeabi_dmul>
 8024210:	4602      	mov	r2, r0
 8024212:	460b      	mov	r3, r1
 8024214:	4620      	mov	r0, r4
 8024216:	4629      	mov	r1, r5
 8024218:	f7dc f868 	bl	80002ec <__adddf3>
 802421c:	4604      	mov	r4, r0
 802421e:	460d      	mov	r5, r1
 8024220:	ec45 4b10 	vmov	d0, r4, r5
 8024224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024228:	2d00      	cmp	r5, #0
 802422a:	dc10      	bgt.n	802424e <__ieee754_sqrt+0x62>
 802422c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8024230:	4330      	orrs	r0, r6
 8024232:	d0f5      	beq.n	8024220 <__ieee754_sqrt+0x34>
 8024234:	b15d      	cbz	r5, 802424e <__ieee754_sqrt+0x62>
 8024236:	ee10 2a10 	vmov	r2, s0
 802423a:	462b      	mov	r3, r5
 802423c:	ee10 0a10 	vmov	r0, s0
 8024240:	f7dc f852 	bl	80002e8 <__aeabi_dsub>
 8024244:	4602      	mov	r2, r0
 8024246:	460b      	mov	r3, r1
 8024248:	f7dc fb30 	bl	80008ac <__aeabi_ddiv>
 802424c:	e7e6      	b.n	802421c <__ieee754_sqrt+0x30>
 802424e:	1509      	asrs	r1, r1, #20
 8024250:	d076      	beq.n	8024340 <__ieee754_sqrt+0x154>
 8024252:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8024256:	07ce      	lsls	r6, r1, #31
 8024258:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 802425c:	bf5e      	ittt	pl
 802425e:	0fda      	lsrpl	r2, r3, #31
 8024260:	005b      	lslpl	r3, r3, #1
 8024262:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8024266:	0fda      	lsrs	r2, r3, #31
 8024268:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 802426c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8024270:	2000      	movs	r0, #0
 8024272:	106d      	asrs	r5, r5, #1
 8024274:	005b      	lsls	r3, r3, #1
 8024276:	f04f 0e16 	mov.w	lr, #22
 802427a:	4684      	mov	ip, r0
 802427c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8024280:	eb0c 0401 	add.w	r4, ip, r1
 8024284:	4294      	cmp	r4, r2
 8024286:	bfde      	ittt	le
 8024288:	1b12      	suble	r2, r2, r4
 802428a:	eb04 0c01 	addle.w	ip, r4, r1
 802428e:	1840      	addle	r0, r0, r1
 8024290:	0052      	lsls	r2, r2, #1
 8024292:	f1be 0e01 	subs.w	lr, lr, #1
 8024296:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802429a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802429e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80242a2:	d1ed      	bne.n	8024280 <__ieee754_sqrt+0x94>
 80242a4:	4671      	mov	r1, lr
 80242a6:	2720      	movs	r7, #32
 80242a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80242ac:	4562      	cmp	r2, ip
 80242ae:	eb04 060e 	add.w	r6, r4, lr
 80242b2:	dc02      	bgt.n	80242ba <__ieee754_sqrt+0xce>
 80242b4:	d113      	bne.n	80242de <__ieee754_sqrt+0xf2>
 80242b6:	429e      	cmp	r6, r3
 80242b8:	d811      	bhi.n	80242de <__ieee754_sqrt+0xf2>
 80242ba:	2e00      	cmp	r6, #0
 80242bc:	eb06 0e04 	add.w	lr, r6, r4
 80242c0:	da43      	bge.n	802434a <__ieee754_sqrt+0x15e>
 80242c2:	f1be 0f00 	cmp.w	lr, #0
 80242c6:	db40      	blt.n	802434a <__ieee754_sqrt+0x15e>
 80242c8:	f10c 0801 	add.w	r8, ip, #1
 80242cc:	eba2 020c 	sub.w	r2, r2, ip
 80242d0:	429e      	cmp	r6, r3
 80242d2:	bf88      	it	hi
 80242d4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80242d8:	1b9b      	subs	r3, r3, r6
 80242da:	4421      	add	r1, r4
 80242dc:	46c4      	mov	ip, r8
 80242de:	0052      	lsls	r2, r2, #1
 80242e0:	3f01      	subs	r7, #1
 80242e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80242e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80242ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80242ee:	d1dd      	bne.n	80242ac <__ieee754_sqrt+0xc0>
 80242f0:	4313      	orrs	r3, r2
 80242f2:	d006      	beq.n	8024302 <__ieee754_sqrt+0x116>
 80242f4:	1c4c      	adds	r4, r1, #1
 80242f6:	bf13      	iteet	ne
 80242f8:	3101      	addne	r1, #1
 80242fa:	3001      	addeq	r0, #1
 80242fc:	4639      	moveq	r1, r7
 80242fe:	f021 0101 	bicne.w	r1, r1, #1
 8024302:	1043      	asrs	r3, r0, #1
 8024304:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8024308:	0849      	lsrs	r1, r1, #1
 802430a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802430e:	07c2      	lsls	r2, r0, #31
 8024310:	bf48      	it	mi
 8024312:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8024316:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 802431a:	460c      	mov	r4, r1
 802431c:	463d      	mov	r5, r7
 802431e:	e77f      	b.n	8024220 <__ieee754_sqrt+0x34>
 8024320:	0ada      	lsrs	r2, r3, #11
 8024322:	3815      	subs	r0, #21
 8024324:	055b      	lsls	r3, r3, #21
 8024326:	2a00      	cmp	r2, #0
 8024328:	d0fa      	beq.n	8024320 <__ieee754_sqrt+0x134>
 802432a:	02d7      	lsls	r7, r2, #11
 802432c:	d50a      	bpl.n	8024344 <__ieee754_sqrt+0x158>
 802432e:	f1c1 0420 	rsb	r4, r1, #32
 8024332:	fa23 f404 	lsr.w	r4, r3, r4
 8024336:	1e4d      	subs	r5, r1, #1
 8024338:	408b      	lsls	r3, r1
 802433a:	4322      	orrs	r2, r4
 802433c:	1b41      	subs	r1, r0, r5
 802433e:	e788      	b.n	8024252 <__ieee754_sqrt+0x66>
 8024340:	4608      	mov	r0, r1
 8024342:	e7f0      	b.n	8024326 <__ieee754_sqrt+0x13a>
 8024344:	0052      	lsls	r2, r2, #1
 8024346:	3101      	adds	r1, #1
 8024348:	e7ef      	b.n	802432a <__ieee754_sqrt+0x13e>
 802434a:	46e0      	mov	r8, ip
 802434c:	e7be      	b.n	80242cc <__ieee754_sqrt+0xe0>
 802434e:	bf00      	nop
 8024350:	7ff00000 	.word	0x7ff00000

08024354 <fabs>:
 8024354:	ec51 0b10 	vmov	r0, r1, d0
 8024358:	ee10 2a10 	vmov	r2, s0
 802435c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024360:	ec43 2b10 	vmov	d0, r2, r3
 8024364:	4770      	bx	lr

08024366 <finite>:
 8024366:	b082      	sub	sp, #8
 8024368:	ed8d 0b00 	vstr	d0, [sp]
 802436c:	9801      	ldr	r0, [sp, #4]
 802436e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8024372:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024376:	0fc0      	lsrs	r0, r0, #31
 8024378:	b002      	add	sp, #8
 802437a:	4770      	bx	lr
 802437c:	0000      	movs	r0, r0
	...

08024380 <nan>:
 8024380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024388 <nan+0x8>
 8024384:	4770      	bx	lr
 8024386:	bf00      	nop
 8024388:	00000000 	.word	0x00000000
 802438c:	7ff80000 	.word	0x7ff80000

08024390 <rint>:
 8024390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024392:	ec51 0b10 	vmov	r0, r1, d0
 8024396:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802439a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802439e:	2e13      	cmp	r6, #19
 80243a0:	ee10 4a10 	vmov	r4, s0
 80243a4:	460b      	mov	r3, r1
 80243a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80243aa:	dc58      	bgt.n	802445e <rint+0xce>
 80243ac:	2e00      	cmp	r6, #0
 80243ae:	da2b      	bge.n	8024408 <rint+0x78>
 80243b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80243b4:	4302      	orrs	r2, r0
 80243b6:	d023      	beq.n	8024400 <rint+0x70>
 80243b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80243bc:	4302      	orrs	r2, r0
 80243be:	4254      	negs	r4, r2
 80243c0:	4314      	orrs	r4, r2
 80243c2:	0c4b      	lsrs	r3, r1, #17
 80243c4:	0b24      	lsrs	r4, r4, #12
 80243c6:	045b      	lsls	r3, r3, #17
 80243c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80243cc:	ea44 0103 	orr.w	r1, r4, r3
 80243d0:	4b32      	ldr	r3, [pc, #200]	; (802449c <rint+0x10c>)
 80243d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80243d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80243da:	4602      	mov	r2, r0
 80243dc:	460b      	mov	r3, r1
 80243de:	4630      	mov	r0, r6
 80243e0:	4639      	mov	r1, r7
 80243e2:	f7db ff83 	bl	80002ec <__adddf3>
 80243e6:	e9cd 0100 	strd	r0, r1, [sp]
 80243ea:	463b      	mov	r3, r7
 80243ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80243f0:	4632      	mov	r2, r6
 80243f2:	f7db ff79 	bl	80002e8 <__aeabi_dsub>
 80243f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80243fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80243fe:	4639      	mov	r1, r7
 8024400:	ec41 0b10 	vmov	d0, r0, r1
 8024404:	b003      	add	sp, #12
 8024406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024408:	4a25      	ldr	r2, [pc, #148]	; (80244a0 <rint+0x110>)
 802440a:	4132      	asrs	r2, r6
 802440c:	ea01 0702 	and.w	r7, r1, r2
 8024410:	4307      	orrs	r7, r0
 8024412:	d0f5      	beq.n	8024400 <rint+0x70>
 8024414:	0851      	lsrs	r1, r2, #1
 8024416:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 802441a:	4314      	orrs	r4, r2
 802441c:	d00c      	beq.n	8024438 <rint+0xa8>
 802441e:	ea23 0201 	bic.w	r2, r3, r1
 8024422:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024426:	2e13      	cmp	r6, #19
 8024428:	fa43 f606 	asr.w	r6, r3, r6
 802442c:	bf0c      	ite	eq
 802442e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8024432:	2400      	movne	r4, #0
 8024434:	ea42 0306 	orr.w	r3, r2, r6
 8024438:	4918      	ldr	r1, [pc, #96]	; (802449c <rint+0x10c>)
 802443a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 802443e:	4622      	mov	r2, r4
 8024440:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024444:	4620      	mov	r0, r4
 8024446:	4629      	mov	r1, r5
 8024448:	f7db ff50 	bl	80002ec <__adddf3>
 802444c:	e9cd 0100 	strd	r0, r1, [sp]
 8024450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024454:	4622      	mov	r2, r4
 8024456:	462b      	mov	r3, r5
 8024458:	f7db ff46 	bl	80002e8 <__aeabi_dsub>
 802445c:	e7d0      	b.n	8024400 <rint+0x70>
 802445e:	2e33      	cmp	r6, #51	; 0x33
 8024460:	dd07      	ble.n	8024472 <rint+0xe2>
 8024462:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024466:	d1cb      	bne.n	8024400 <rint+0x70>
 8024468:	ee10 2a10 	vmov	r2, s0
 802446c:	f7db ff3e 	bl	80002ec <__adddf3>
 8024470:	e7c6      	b.n	8024400 <rint+0x70>
 8024472:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8024476:	f04f 36ff 	mov.w	r6, #4294967295
 802447a:	40d6      	lsrs	r6, r2
 802447c:	4230      	tst	r0, r6
 802447e:	d0bf      	beq.n	8024400 <rint+0x70>
 8024480:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8024484:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8024488:	bf1f      	itttt	ne
 802448a:	ea24 0101 	bicne.w	r1, r4, r1
 802448e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8024492:	fa44 f202 	asrne.w	r2, r4, r2
 8024496:	ea41 0402 	orrne.w	r4, r1, r2
 802449a:	e7cd      	b.n	8024438 <rint+0xa8>
 802449c:	080295c0 	.word	0x080295c0
 80244a0:	000fffff 	.word	0x000fffff
 80244a4:	00000000 	.word	0x00000000

080244a8 <scalbn>:
 80244a8:	b570      	push	{r4, r5, r6, lr}
 80244aa:	ec55 4b10 	vmov	r4, r5, d0
 80244ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80244b2:	4606      	mov	r6, r0
 80244b4:	462b      	mov	r3, r5
 80244b6:	b99a      	cbnz	r2, 80244e0 <scalbn+0x38>
 80244b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80244bc:	4323      	orrs	r3, r4
 80244be:	d036      	beq.n	802452e <scalbn+0x86>
 80244c0:	4b39      	ldr	r3, [pc, #228]	; (80245a8 <scalbn+0x100>)
 80244c2:	4629      	mov	r1, r5
 80244c4:	ee10 0a10 	vmov	r0, s0
 80244c8:	2200      	movs	r2, #0
 80244ca:	f7dc f8c5 	bl	8000658 <__aeabi_dmul>
 80244ce:	4b37      	ldr	r3, [pc, #220]	; (80245ac <scalbn+0x104>)
 80244d0:	429e      	cmp	r6, r3
 80244d2:	4604      	mov	r4, r0
 80244d4:	460d      	mov	r5, r1
 80244d6:	da10      	bge.n	80244fa <scalbn+0x52>
 80244d8:	a32b      	add	r3, pc, #172	; (adr r3, 8024588 <scalbn+0xe0>)
 80244da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244de:	e03a      	b.n	8024556 <scalbn+0xae>
 80244e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80244e4:	428a      	cmp	r2, r1
 80244e6:	d10c      	bne.n	8024502 <scalbn+0x5a>
 80244e8:	ee10 2a10 	vmov	r2, s0
 80244ec:	4620      	mov	r0, r4
 80244ee:	4629      	mov	r1, r5
 80244f0:	f7db fefc 	bl	80002ec <__adddf3>
 80244f4:	4604      	mov	r4, r0
 80244f6:	460d      	mov	r5, r1
 80244f8:	e019      	b.n	802452e <scalbn+0x86>
 80244fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80244fe:	460b      	mov	r3, r1
 8024500:	3a36      	subs	r2, #54	; 0x36
 8024502:	4432      	add	r2, r6
 8024504:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024508:	428a      	cmp	r2, r1
 802450a:	dd08      	ble.n	802451e <scalbn+0x76>
 802450c:	2d00      	cmp	r5, #0
 802450e:	a120      	add	r1, pc, #128	; (adr r1, 8024590 <scalbn+0xe8>)
 8024510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024514:	da1c      	bge.n	8024550 <scalbn+0xa8>
 8024516:	a120      	add	r1, pc, #128	; (adr r1, 8024598 <scalbn+0xf0>)
 8024518:	e9d1 0100 	ldrd	r0, r1, [r1]
 802451c:	e018      	b.n	8024550 <scalbn+0xa8>
 802451e:	2a00      	cmp	r2, #0
 8024520:	dd08      	ble.n	8024534 <scalbn+0x8c>
 8024522:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024526:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802452a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802452e:	ec45 4b10 	vmov	d0, r4, r5
 8024532:	bd70      	pop	{r4, r5, r6, pc}
 8024534:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024538:	da19      	bge.n	802456e <scalbn+0xc6>
 802453a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802453e:	429e      	cmp	r6, r3
 8024540:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024544:	dd0a      	ble.n	802455c <scalbn+0xb4>
 8024546:	a112      	add	r1, pc, #72	; (adr r1, 8024590 <scalbn+0xe8>)
 8024548:	e9d1 0100 	ldrd	r0, r1, [r1]
 802454c:	2b00      	cmp	r3, #0
 802454e:	d1e2      	bne.n	8024516 <scalbn+0x6e>
 8024550:	a30f      	add	r3, pc, #60	; (adr r3, 8024590 <scalbn+0xe8>)
 8024552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024556:	f7dc f87f 	bl	8000658 <__aeabi_dmul>
 802455a:	e7cb      	b.n	80244f4 <scalbn+0x4c>
 802455c:	a10a      	add	r1, pc, #40	; (adr r1, 8024588 <scalbn+0xe0>)
 802455e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024562:	2b00      	cmp	r3, #0
 8024564:	d0b8      	beq.n	80244d8 <scalbn+0x30>
 8024566:	a10e      	add	r1, pc, #56	; (adr r1, 80245a0 <scalbn+0xf8>)
 8024568:	e9d1 0100 	ldrd	r0, r1, [r1]
 802456c:	e7b4      	b.n	80244d8 <scalbn+0x30>
 802456e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024572:	3236      	adds	r2, #54	; 0x36
 8024574:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024578:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802457c:	4620      	mov	r0, r4
 802457e:	4b0c      	ldr	r3, [pc, #48]	; (80245b0 <scalbn+0x108>)
 8024580:	2200      	movs	r2, #0
 8024582:	e7e8      	b.n	8024556 <scalbn+0xae>
 8024584:	f3af 8000 	nop.w
 8024588:	c2f8f359 	.word	0xc2f8f359
 802458c:	01a56e1f 	.word	0x01a56e1f
 8024590:	8800759c 	.word	0x8800759c
 8024594:	7e37e43c 	.word	0x7e37e43c
 8024598:	8800759c 	.word	0x8800759c
 802459c:	fe37e43c 	.word	0xfe37e43c
 80245a0:	c2f8f359 	.word	0xc2f8f359
 80245a4:	81a56e1f 	.word	0x81a56e1f
 80245a8:	43500000 	.word	0x43500000
 80245ac:	ffff3cb0 	.word	0xffff3cb0
 80245b0:	3c900000 	.word	0x3c900000

080245b4 <_init>:
 80245b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245b6:	bf00      	nop
 80245b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80245ba:	bc08      	pop	{r3}
 80245bc:	469e      	mov	lr, r3
 80245be:	4770      	bx	lr

080245c0 <_fini>:
 80245c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245c2:	bf00      	nop
 80245c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80245c6:	bc08      	pop	{r3}
 80245c8:	469e      	mov	lr, r3
 80245ca:	4770      	bx	lr
