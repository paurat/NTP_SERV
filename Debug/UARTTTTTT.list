
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002424c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000057f0  08024420  08024420  00034420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029c10  08029c10  00040a50  2**0
                  CONTENTS
  4 .ARM          00000008  08029c10  08029c10  00039c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029c18  08029c18  00040a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029c18  08029c18  00039c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029c20  08029c20  00039c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  08029c24  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b420  20000a50  0802a674  00040a50  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000be70  0802a674  0004be70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052de4  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a504  00000000  00000000  00093864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a8  00000000  00000000  0009dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002600  00000000  00000000  000a0510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bb2d  00000000  00000000  000a2b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f6f6  00000000  00000000  000de63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120ca2  00000000  00000000  0011dd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023e9d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bef0  00000000  00000000  0023ea28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a50 	.word	0x20000a50
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08024404 	.word	0x08024404

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a54 	.word	0x20000a54
 800020c:	08024404 	.word	0x08024404

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "local_files.h"
#define CONFIGURATION_START_ADDR 0x080c0000
void clearFlash(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstSector = 7;//flash memory sector
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfSectors = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <clearFlash+0x44>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <clearFlash+0x44>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	60da      	str	r2, [r3, #12]
	EraseInitStruct.Sector = FirstSector;
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <clearFlash+0x44>)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbSectors = NbOfSectors;
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <clearFlash+0x44>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	6093      	str	r3, [r2, #8]
	uint32_t SectorError = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 8000fca:	f004 f957 	bl	800527c <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <clearFlash+0x44>)
 8000fd4:	f004 fab4 	bl	8005540 <HAL_FLASHEx_Erase>
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();

	}
	HAL_FLASH_Lock();
 8000fd8:	f004 f972 	bl	80052c0 <HAL_FLASH_Lock>

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000a6c 	.word	0x20000a6c

08000fe8 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(char* data, int size, int offset) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <WriteDeviceAddressOffset+0x5c>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000ffc:	f004 f93e 	bl	800527c <HAL_FLASH_Unlock>
	for (int i = 0; i<size; i++){
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e012      	b.n	800102c <WriteDeviceAddressOffset+0x44>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address+i, data[i]) != HAL_OK){
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	18d1      	adds	r1, r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	2000      	movs	r0, #0
 800101c:	f004 f8d2 	bl	80051c4 <HAL_FLASH_Program>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d107      	bne.n	8001036 <WriteDeviceAddressOffset+0x4e>
	for (int i = 0; i<size; i++){
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbe8      	blt.n	8001006 <WriteDeviceAddressOffset+0x1e>
 8001034:	e000      	b.n	8001038 <WriteDeviceAddressOffset+0x50>
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			// int error = HAL_FLASH_GetError();

			break;
 8001036:	bf00      	nop
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001038:	f004 f942 	bl	80052c0 <HAL_FLASH_Lock>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	080c0000 	.word	0x080c0000

08001048 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(char* Dout, int size, int offset)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <ReadDeviceAddressOffset+0x4c>)
 8001058:	4413      	add	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00c      	b.n	800107c <ReadDeviceAddressOffset+0x34>
		Dout[i] = *(__IO char*)(Address+i);
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4413      	add	r3, r2
 8001068:	4619      	mov	r1, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	780a      	ldrb	r2, [r1, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbee      	blt.n	8001062 <ReadDeviceAddressOffset+0x1a>
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	080c0000 	.word	0x080c0000

08001098 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <vApplicationGetIdleTaskMemory+0x30>)
 80010ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000a7c 	.word	0x20000a7c
 80010c8:	20000ad0 	.word	0x20000ad0

080010cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010f4:	e000      	b.n	80010f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f9      	beq.n	80010f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001102:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
	int i=0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e009      	b.n	8001144 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffc7 	bl	80010cc <ITM_SendChar>
	for(i=0;i<len;i++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf1      	blt.n	8001130 <_write+0x16>
	return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b0c0      	sub	sp, #256	; 0x100
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	memset(gps.day,0,sizeof(gps));
 800115e:	221b      	movs	r2, #27
 8001160:	2100      	movs	r1, #0
 8001162:	489c      	ldr	r0, [pc, #624]	; (80013d4 <main+0x27c>)
 8001164:	f01a f882 	bl	801b26c <memset>
	// ZDA-38;RMC-68



	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8001168:	4b9b      	ldr	r3, [pc, #620]	; (80013d8 <main+0x280>)
 800116a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800116e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8001174:	4a99      	ldr	r2, [pc, #612]	; (80013dc <main+0x284>)
 8001176:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800117a:	ca07      	ldmia	r2, {r0, r1, r2}
 800117c:	c303      	stmia	r3!, {r0, r1}
 800117e:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8001180:	4b97      	ldr	r3, [pc, #604]	; (80013e0 <main+0x288>)
 8001182:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8001186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 800118c:	4a95      	ldr	r2, [pc, #596]	; (80013e4 <main+0x28c>)
 800118e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001192:	ca07      	ldmia	r2, {r0, r1, r2}
 8001194:	c303      	stmia	r3!, {r0, r1}
 8001196:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8001198:	4b93      	ldr	r3, [pc, #588]	; (80013e8 <main+0x290>)
 800119a:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 80011a4:	4a91      	ldr	r2, [pc, #580]	; (80013ec <main+0x294>)
 80011a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ac:	c303      	stmia	r3!, {r0, r1}
 80011ae:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 80011b0:	4b8f      	ldr	r3, [pc, #572]	; (80013f0 <main+0x298>)
 80011b2:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80011b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 80011bc:	4a8d      	ldr	r2, [pc, #564]	; (80013f4 <main+0x29c>)
 80011be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c4:	c303      	stmia	r3!, {r0, r1}
 80011c6:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 80011c8:	4b8b      	ldr	r3, [pc, #556]	; (80013f8 <main+0x2a0>)
 80011ca:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80011ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 80011d4:	4a89      	ldr	r2, [pc, #548]	; (80013fc <main+0x2a4>)
 80011d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011da:	ca07      	ldmia	r2, {r0, r1, r2}
 80011dc:	c303      	stmia	r3!, {r0, r1}
 80011de:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 80011e0:	4b87      	ldr	r3, [pc, #540]	; (8001400 <main+0x2a8>)
 80011e2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 80011ec:	4a85      	ldr	r2, [pc, #532]	; (8001404 <main+0x2ac>)
 80011ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	c303      	stmia	r3!, {r0, r1}
 80011f6:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 80011f8:	4b83      	ldr	r3, [pc, #524]	; (8001408 <main+0x2b0>)
 80011fa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80011fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8001204:	4a81      	ldr	r2, [pc, #516]	; (800140c <main+0x2b4>)
 8001206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	c303      	stmia	r3!, {r0, r1}
 800120e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f002 fe23 	bl	8003e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f908 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //MX_LWIP_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 fa6e 	bl	80016f8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800121c:	f000 fa2a 	bl	8001674 <MX_USART6_UART_Init>
  MX_UART7_Init();
 8001220:	f000 f9f8 	bl	8001614 <MX_UART7_Init>
  MX_RTC_Init();
 8001224:	f000 f99a 	bl	800155c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(5000);
 8001228:	f241 3088 	movw	r0, #5000	; 0x1388
 800122c:	f002 fe42 	bl	8003eb4 <HAL_Delay>
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 8001230:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	2210      	movs	r2, #16
 800123a:	4875      	ldr	r0, [pc, #468]	; (8001410 <main+0x2b8>)
 800123c:	f006 fb9e 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 8001240:	2064      	movs	r0, #100	; 0x64
 8001242:	f002 fe37 	bl	8003eb4 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 8001246:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	220a      	movs	r2, #10
 8001250:	486f      	ldr	r0, [pc, #444]	; (8001410 <main+0x2b8>)
 8001252:	f006 fb93 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 8001256:	2064      	movs	r0, #100	; 0x64
 8001258:	f002 fe2c 	bl	8003eb4 <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 800125c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	2210      	movs	r2, #16
 8001266:	486a      	ldr	r0, [pc, #424]	; (8001410 <main+0x2b8>)
 8001268:	f006 fb88 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 800126c:	2064      	movs	r0, #100	; 0x64
 800126e:	f002 fe21 	bl	8003eb4 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 8001272:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	220a      	movs	r2, #10
 800127c:	4864      	ldr	r0, [pc, #400]	; (8001410 <main+0x2b8>)
 800127e:	f006 fb7d 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f002 fe16 	bl	8003eb4 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 8001288:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	2210      	movs	r2, #16
 8001292:	485f      	ldr	r0, [pc, #380]	; (8001410 <main+0x2b8>)
 8001294:	f006 fb72 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f002 fe0b 	bl	8003eb4 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 800129e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	220a      	movs	r2, #10
 80012a8:	4859      	ldr	r0, [pc, #356]	; (8001410 <main+0x2b8>)
 80012aa:	f006 fb67 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f002 fe00 	bl	8003eb4 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 80012b4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80012b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012bc:	2210      	movs	r2, #16
 80012be:	4854      	ldr	r0, [pc, #336]	; (8001410 <main+0x2b8>)
 80012c0:	f006 fb5c 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 80012c4:	2064      	movs	r0, #100	; 0x64
 80012c6:	f002 fdf5 	bl	8003eb4 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 80012ca:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	220a      	movs	r2, #10
 80012d4:	484e      	ldr	r0, [pc, #312]	; (8001410 <main+0x2b8>)
 80012d6:	f006 fb51 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f002 fdea 	bl	8003eb4 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 80012e0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	2210      	movs	r2, #16
 80012ea:	4849      	ldr	r0, [pc, #292]	; (8001410 <main+0x2b8>)
 80012ec:	f006 fb46 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f002 fddf 	bl	8003eb4 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 80012f6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	220a      	movs	r2, #10
 8001300:	4843      	ldr	r0, [pc, #268]	; (8001410 <main+0x2b8>)
 8001302:	f006 fb3b 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 8001306:	2064      	movs	r0, #100	; 0x64
 8001308:	f002 fdd4 	bl	8003eb4 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 800130c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	2210      	movs	r2, #16
 8001316:	483e      	ldr	r0, [pc, #248]	; (8001410 <main+0x2b8>)
 8001318:	f006 fb30 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f002 fdc9 	bl	8003eb4 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 8001322:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	220a      	movs	r2, #10
 800132c:	4838      	ldr	r0, [pc, #224]	; (8001410 <main+0x2b8>)
 800132e:	f006 fb25 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f002 fdbe 	bl	8003eb4 <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 8001338:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	2210      	movs	r2, #16
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <main+0x2b8>)
 8001344:	f006 fb1a 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f002 fdb3 	bl	8003eb4 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 800134e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	220a      	movs	r2, #10
 8001358:	482d      	ldr	r0, [pc, #180]	; (8001410 <main+0x2b8>)
 800135a:	f006 fb0f 	bl	800797c <HAL_UART_Transmit>
  HAL_Delay(100);
 800135e:	2064      	movs	r0, #100	; 0x64
 8001360:	f002 fda8 	bl	8003eb4 <HAL_Delay>

  //start the web server
  int offset =0;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 800136a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800136e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <main+0x2bc>)
 8001374:	f7ff fe68 	bl	8001048 <ReadDeviceAddressOffset>
 offset+=sizeof(user_info);
 8001378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800137c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001380:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <main+0x2c0>)
 8001386:	f107 041c 	add.w	r4, r7, #28
 800138a:	461d      	mov	r5, r3
 800138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fb5e 	bl	8009a60 <osThreadCreate>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <main+0x2c4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 80013aa:	463b      	mov	r3, r7
 80013ac:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <main+0x2c8>)
 80013ae:	461c      	mov	r4, r3
 80013b0:	4615      	mov	r5, r2
 80013b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80013be:	463b      	mov	r3, r7
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fb4c 	bl	8009a60 <osThreadCreate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <main+0x2cc>)
 80013cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013ce:	f008 fb30 	bl	8009a32 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <main+0x27a>
 80013d4:	20005098 	.word	0x20005098
 80013d8:	08024438 	.word	0x08024438
 80013dc:	08024448 	.word	0x08024448
 80013e0:	08024454 	.word	0x08024454
 80013e4:	08024464 	.word	0x08024464
 80013e8:	08024470 	.word	0x08024470
 80013ec:	08024480 	.word	0x08024480
 80013f0:	0802448c 	.word	0x0802448c
 80013f4:	0802449c 	.word	0x0802449c
 80013f8:	080244a8 	.word	0x080244a8
 80013fc:	080244b8 	.word	0x080244b8
 8001400:	080244c4 	.word	0x080244c4
 8001404:	080244d4 	.word	0x080244d4
 8001408:	080244e0 	.word	0x080244e0
 800140c:	080244f0 	.word	0x080244f0
 8001410:	200051cc 	.word	0x200051cc
 8001414:	200050b4 	.word	0x200050b4
 8001418:	080244fc 	.word	0x080244fc
 800141c:	200051c8 	.word	0x200051c8
 8001420:	08024518 	.word	0x08024518
 8001424:	20005254 	.word	0x20005254

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0b4      	sub	sp, #208	; 0xd0
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001432:	2230      	movs	r2, #48	; 0x30
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f019 ff18 	bl	801b26c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2284      	movs	r2, #132	; 0x84
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f019 ff09 	bl	801b26c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800145a:	f004 fb2f 	bl	8005abc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <SystemClock_Config+0x12c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a3c      	ldr	r2, [pc, #240]	; (8001554 <SystemClock_Config+0x12c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <SystemClock_Config+0x12c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <SystemClock_Config+0x130>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a37      	ldr	r2, [pc, #220]	; (8001558 <SystemClock_Config+0x130>)
 800147c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <SystemClock_Config+0x130>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800148e:	2309      	movs	r3, #9
 8001490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	2302      	movs	r3, #2
 80014a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014b0:	2319      	movs	r3, #25
 80014b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80014b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014c4:	2309      	movs	r3, #9
 80014c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fb54 	bl	8005b7c <HAL_RCC_OscConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80014da:	f001 fa7b 	bl	80029d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014de:	f004 fafd 	bl	8005adc <HAL_PWREx_EnableOverDrive>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014e8:	f001 fa74 	bl	80029d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ec:	230f      	movs	r3, #15
 80014ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001502:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800150e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001512:	2106      	movs	r1, #6
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fdd5 	bl	80060c4 <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001520:	f001 fa58 	bl	80029d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8001524:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001528:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800152a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001530:	2300      	movs	r3, #0
 8001532:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001534:	2300      	movs	r3, #0
 8001536:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4618      	mov	r0, r3
 800153e:	f004 ffc9 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001548:	f001 fa44 	bl	80029d4 <Error_Handler>
  }
}
 800154c:	bf00      	nop
 800154e:	37d0      	adds	r7, #208	; 0xd0
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_RTC_Init+0xb0>)
 800157a:	4a25      	ldr	r2, [pc, #148]	; (8001610 <MX_RTC_Init+0xb4>)
 800157c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_RTC_Init+0xb0>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_RTC_Init+0xb0>)
 8001586:	227f      	movs	r2, #127	; 0x7f
 8001588:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_RTC_Init+0xb0>)
 800158c:	22ff      	movs	r2, #255	; 0xff
 800158e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_RTC_Init+0xb0>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_RTC_Init+0xb0>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_RTC_Init+0xb0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015a2:	481a      	ldr	r0, [pc, #104]	; (800160c <MX_RTC_Init+0xb0>)
 80015a4:	f005 fb86 	bl	8006cb4 <HAL_RTC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80015ae:	f001 fa11 	bl	80029d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80015b2:	2317      	movs	r3, #23
 80015b4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 59;
 80015b6:	233b      	movs	r3, #59	; 0x3b
 80015b8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <MX_RTC_Init+0xb0>)
 80015d0:	f005 fc02 	bl	8006dd8 <HAL_RTC_SetTime>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80015da:	f001 f9fb 	bl	80029d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80015de:	2307      	movs	r3, #7
 80015e0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_DECEMBER;
 80015e2:	2312      	movs	r3, #18
 80015e4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 31;
 80015e6:	231f      	movs	r3, #31
 80015e8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_RTC_Init+0xb0>)
 80015f6:	f005 fd0b 	bl	8007010 <HAL_RTC_SetDate>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001600:	f001 f9e8 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20005258 	.word	0x20005258
 8001610:	40002800 	.word	0x40002800

08001614 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_UART7_Init+0x58>)
 800161a:	4a15      	ldr	r2, [pc, #84]	; (8001670 <MX_UART7_Init+0x5c>)
 800161c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_UART7_Init+0x58>)
 8001620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001624:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_UART7_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_UART7_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_UART7_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_UART7_Init+0x58>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_UART7_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_UART7_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_UART7_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_UART7_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_UART7_Init+0x58>)
 8001658:	f006 f942 	bl	80078e0 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001662:	f001 f9b7 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200051cc 	.word	0x200051cc
 8001670:	40007800 	.word	0x40007800

08001674 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_RXNE);
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_USART6_UART_Init+0x78>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_USART6_UART_Init+0x78>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0220 	orr.w	r2, r2, #32
 8001686:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_IDLE);
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_USART6_UART_Init+0x78>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_USART6_UART_Init+0x78>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0210 	orr.w	r2, r2, #16
 8001696:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 800169a:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <MX_USART6_UART_Init+0x80>)
 800169c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016d8:	f006 f902 	bl	80078e0 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART6_UART_Init+0x72>
  {
    Error_Handler();
 80016e2:	f001 f977 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200051cc 	.word	0x200051cc
 80016f0:	2000527c 	.word	0x2000527c
 80016f4:	40011400 	.word	0x40011400

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b090      	sub	sp, #64	; 0x40
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	4bae      	ldr	r3, [pc, #696]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4aad      	ldr	r2, [pc, #692]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4bab      	ldr	r3, [pc, #684]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001726:	4ba8      	ldr	r3, [pc, #672]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4aa7      	ldr	r2, [pc, #668]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800172c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4ba5      	ldr	r3, [pc, #660]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4ba2      	ldr	r3, [pc, #648]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4aa1      	ldr	r2, [pc, #644]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b9f      	ldr	r3, [pc, #636]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	4b9c      	ldr	r3, [pc, #624]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a9b      	ldr	r2, [pc, #620]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b99      	ldr	r3, [pc, #612]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	4b96      	ldr	r3, [pc, #600]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a95      	ldr	r2, [pc, #596]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b93      	ldr	r3, [pc, #588]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b90      	ldr	r3, [pc, #576]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a8f      	ldr	r2, [pc, #572]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b8d      	ldr	r3, [pc, #564]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a89      	ldr	r2, [pc, #548]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b87      	ldr	r3, [pc, #540]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017b6:	4b84      	ldr	r3, [pc, #528]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a83      	ldr	r2, [pc, #524]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017ce:	4b7e      	ldr	r3, [pc, #504]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a7d      	ldr	r2, [pc, #500]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b7b      	ldr	r3, [pc, #492]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e6:	4b78      	ldr	r3, [pc, #480]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a77      	ldr	r2, [pc, #476]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	4b72      	ldr	r3, [pc, #456]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a71      	ldr	r2, [pc, #452]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2120      	movs	r1, #32
 800181a:	486c      	ldr	r0, [pc, #432]	; (80019cc <MX_GPIO_Init+0x2d4>)
 800181c:	f004 f91a 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|Led_Pin|Led1_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	210f      	movs	r1, #15
 8001824:	486a      	ldr	r0, [pc, #424]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001826:	f004 f915 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2108      	movs	r1, #8
 800182e:	4869      	ldr	r0, [pc, #420]	; (80019d4 <MX_GPIO_Init+0x2dc>)
 8001830:	f004 f910 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	4865      	ldr	r0, [pc, #404]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800183c:	f004 f90a 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001846:	4864      	ldr	r0, [pc, #400]	; (80019d8 <MX_GPIO_Init+0x2e0>)
 8001848:	f004 f904 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	21c8      	movs	r1, #200	; 0xc8
 8001850:	4862      	ldr	r0, [pc, #392]	; (80019dc <MX_GPIO_Init+0x2e4>)
 8001852:	f004 f8ff 	bl	8005a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001856:	2310      	movs	r3, #16
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001866:	230e      	movs	r3, #14
 8001868:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	485b      	ldr	r0, [pc, #364]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 8001872:	f003 ff43 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001876:	2308      	movs	r3, #8
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	4855      	ldr	r0, [pc, #340]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 800188a:	f003 ff37 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800188e:	2304      	movs	r3, #4
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800189e:	2309      	movs	r3, #9
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	484d      	ldr	r0, [pc, #308]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 80018aa:	f003 ff27 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80018ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c0:	230c      	movs	r3, #12
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4845      	ldr	r0, [pc, #276]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 80018cc:	f003 ff16 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80018d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d6:	2312      	movs	r3, #18
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018da:	2301      	movs	r3, #1
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e2:	2304      	movs	r3, #4
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ea:	4619      	mov	r1, r3
 80018ec:	483d      	ldr	r0, [pc, #244]	; (80019e4 <MX_GPIO_Init+0x2ec>)
 80018ee:	f003 ff05 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80018f2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001904:	230a      	movs	r3, #10
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	4619      	mov	r1, r3
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <MX_GPIO_Init+0x2ec>)
 8001910:	f003 fef4 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001914:	2310      	movs	r3, #16
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001924:	2302      	movs	r3, #2
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192c:	4619      	mov	r1, r3
 800192e:	482d      	ldr	r0, [pc, #180]	; (80019e4 <MX_GPIO_Init+0x2ec>)
 8001930:	f003 fee4 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001944:	2308      	movs	r3, #8
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	4619      	mov	r1, r3
 800194e:	481f      	ldr	r0, [pc, #124]	; (80019cc <MX_GPIO_Init+0x2d4>)
 8001950:	f003 fed4 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001954:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001966:	230c      	movs	r3, #12
 8001968:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196e:	4619      	mov	r1, r3
 8001970:	481d      	ldr	r0, [pc, #116]	; (80019e8 <MX_GPIO_Init+0x2f0>)
 8001972:	f003 fec3 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001988:	2301      	movs	r3, #1
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <MX_GPIO_Init+0x2f4>)
 8001994:	f003 feb2 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001998:	2360      	movs	r3, #96	; 0x60
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019a8:	230d      	movs	r3, #13
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	480b      	ldr	r0, [pc, #44]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 80019b4:	f003 fea2 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
 80019c4:	e014      	b.n	80019f0 <MX_GPIO_Init+0x2f8>
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40022000 	.word	0x40022000
 80019d4:	40022800 	.word	0x40022800
 80019d8:	40021c00 	.word	0x40021c00
 80019dc:	40021800 	.word	0x40021800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f4:	2307      	movs	r3, #7
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	48bd      	ldr	r0, [pc, #756]	; (8001cf4 <MX_GPIO_Init+0x5fc>)
 8001a00:	f003 fe7c 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001a04:	2340      	movs	r3, #64	; 0x40
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a14:	230a      	movs	r3, #10
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	48b5      	ldr	r0, [pc, #724]	; (8001cf4 <MX_GPIO_Init+0x5fc>)
 8001a20:	f003 fe6c 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001a24:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a36:	230c      	movs	r3, #12
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	48ad      	ldr	r0, [pc, #692]	; (8001cf8 <MX_GPIO_Init+0x600>)
 8001a42:	f003 fe5b 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001a46:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a58:	230e      	movs	r3, #14
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a60:	4619      	mov	r1, r3
 8001a62:	48a6      	ldr	r0, [pc, #664]	; (8001cfc <MX_GPIO_Init+0x604>)
 8001a64:	f003 fe4a 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	489f      	ldr	r0, [pc, #636]	; (8001cfc <MX_GPIO_Init+0x604>)
 8001a7e:	f003 fe3d 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a82:	2340      	movs	r3, #64	; 0x40
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	489a      	ldr	r0, [pc, #616]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001a98:	f003 fe30 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001a9c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aae:	230c      	movs	r3, #12
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4891      	ldr	r0, [pc, #580]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001aba:	f003 fe1f 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001abe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	488a      	ldr	r0, [pc, #552]	; (8001d04 <MX_GPIO_Init+0x60c>)
 8001adc:	f003 fe0e 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001ae0:	23f0      	movs	r3, #240	; 0xf0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001af0:	230a      	movs	r3, #10
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	4883      	ldr	r0, [pc, #524]	; (8001d08 <MX_GPIO_Init+0x610>)
 8001afc:	f003 fdfe 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001b00:	23f7      	movs	r3, #247	; 0xf7
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b10:	230e      	movs	r3, #14
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	487c      	ldr	r0, [pc, #496]	; (8001d0c <MX_GPIO_Init+0x614>)
 8001b1c:	f003 fdee 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b32:	2309      	movs	r3, #9
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	486e      	ldr	r0, [pc, #440]	; (8001cf8 <MX_GPIO_Init+0x600>)
 8001b3e:	f003 fddd 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b54:	230a      	movs	r3, #10
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4866      	ldr	r0, [pc, #408]	; (8001cf8 <MX_GPIO_Init+0x600>)
 8001b60:	f003 fdcc 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b64:	2320      	movs	r3, #32
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4861      	ldr	r0, [pc, #388]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001b7c:	f003 fdbe 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001b80:	2308      	movs	r3, #8
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b90:	230d      	movs	r3, #13
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4859      	ldr	r0, [pc, #356]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001b9c:	f003 fdae 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin Led_Pin LCD_DISP_Pin
                           Led1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|Led_Pin|LCD_DISP_Pin
 8001ba0:	f241 030f 	movw	r3, #4111	; 0x100f
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |Led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4853      	ldr	r0, [pc, #332]	; (8001d08 <MX_GPIO_Init+0x610>)
 8001bba:	f003 fd9f 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	484f      	ldr	r0, [pc, #316]	; (8001d10 <MX_GPIO_Init+0x618>)
 8001bd4:	f003 fd92 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001bd8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bea:	230c      	movs	r3, #12
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4847      	ldr	r0, [pc, #284]	; (8001d14 <MX_GPIO_Init+0x61c>)
 8001bf6:	f003 fd81 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001bfa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c0c:	230e      	movs	r3, #14
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c14:	4619      	mov	r1, r3
 8001c16:	483c      	ldr	r0, [pc, #240]	; (8001d08 <MX_GPIO_Init+0x610>)
 8001c18:	f003 fd70 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c30:	4619      	mov	r1, r3
 8001c32:	4836      	ldr	r0, [pc, #216]	; (8001d0c <MX_GPIO_Init+0x614>)
 8001c34:	f003 fd62 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c4a:	230d      	movs	r3, #13
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c52:	4619      	mov	r1, r3
 8001c54:	4828      	ldr	r0, [pc, #160]	; (8001cf8 <MX_GPIO_Init+0x600>)
 8001c56:	f003 fd51 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4824      	ldr	r0, [pc, #144]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001c6e:	f003 fd45 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001c72:	2304      	movs	r3, #4
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c82:	230c      	movs	r3, #12
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481c      	ldr	r0, [pc, #112]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001c8e:	f003 fd35 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001c92:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481c      	ldr	r0, [pc, #112]	; (8001d18 <MX_GPIO_Init+0x620>)
 8001ca8:	f003 fd28 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4814      	ldr	r0, [pc, #80]	; (8001d18 <MX_GPIO_Init+0x620>)
 8001cc6:	f003 fd19 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001cca:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cdc:	230d      	movs	r3, #13
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0x620>)
 8001ce8:	f003 fd08 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf0:	e014      	b.n	8001d1c <MX_GPIO_Init+0x624>
 8001cf2:	bf00      	nop
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40022400 	.word	0x40022400
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40022800 	.word	0x40022800
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40021400 	.word	0x40021400
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	4885      	ldr	r0, [pc, #532]	; (8001f4c <MX_GPIO_Init+0x854>)
 8001d36:	f003 fce1 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d54:	4619      	mov	r1, r3
 8001d56:	487d      	ldr	r0, [pc, #500]	; (8001f4c <MX_GPIO_Init+0x854>)
 8001d58:	f003 fcd0 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d62:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d70:	4619      	mov	r1, r3
 8001d72:	4877      	ldr	r0, [pc, #476]	; (8001f50 <MX_GPIO_Init+0x858>)
 8001d74:	f003 fcc2 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d78:	2310      	movs	r3, #16
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d90:	4619      	mov	r1, r3
 8001d92:	4870      	ldr	r0, [pc, #448]	; (8001f54 <MX_GPIO_Init+0x85c>)
 8001d94:	f003 fcb2 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001d98:	2328      	movs	r3, #40	; 0x28
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001da8:	230c      	movs	r3, #12
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db0:	4619      	mov	r1, r3
 8001db2:	4868      	ldr	r0, [pc, #416]	; (8001f54 <MX_GPIO_Init+0x85c>)
 8001db4:	f003 fca2 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001db8:	23c8      	movs	r3, #200	; 0xc8
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4862      	ldr	r0, [pc, #392]	; (8001f58 <MX_GPIO_Init+0x860>)
 8001dd0:	f003 fc94 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001dd4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	485c      	ldr	r0, [pc, #368]	; (8001f5c <MX_GPIO_Init+0x864>)
 8001dea:	f003 fc87 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001dee:	2308      	movs	r3, #8
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dfe:	230c      	movs	r3, #12
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e06:	4619      	mov	r1, r3
 8001e08:	4855      	ldr	r0, [pc, #340]	; (8001f60 <MX_GPIO_Init+0x868>)
 8001e0a:	f003 fc77 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e1e:	230a      	movs	r3, #10
 8001e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e26:	4619      	mov	r1, r3
 8001e28:	484d      	ldr	r0, [pc, #308]	; (8001f60 <MX_GPIO_Init+0x868>)
 8001e2a:	f003 fc67 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e3e:	2309      	movs	r3, #9
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	4619      	mov	r1, r3
 8001e48:	4846      	ldr	r0, [pc, #280]	; (8001f64 <MX_GPIO_Init+0x86c>)
 8001e4a:	f003 fc57 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001e4e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e60:	2309      	movs	r3, #9
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e68:	4619      	mov	r1, r3
 8001e6a:	483f      	ldr	r0, [pc, #252]	; (8001f68 <MX_GPIO_Init+0x870>)
 8001e6c:	f003 fc46 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001e70:	2304      	movs	r3, #4
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e80:	4619      	mov	r1, r3
 8001e82:	4835      	ldr	r0, [pc, #212]	; (8001f58 <MX_GPIO_Init+0x860>)
 8001e84:	f003 fc3a 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	482c      	ldr	r0, [pc, #176]	; (8001f4c <MX_GPIO_Init+0x854>)
 8001e9c:	f003 fc2e 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ea0:	2350      	movs	r3, #80	; 0x50
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eb0:	230d      	movs	r3, #13
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4824      	ldr	r0, [pc, #144]	; (8001f4c <MX_GPIO_Init+0x854>)
 8001ebc:	f003 fc1e 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001ec0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec6:	2312      	movs	r3, #18
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eda:	4619      	mov	r1, r3
 8001edc:	481d      	ldr	r0, [pc, #116]	; (8001f54 <MX_GPIO_Init+0x85c>)
 8001ede:	f003 fc0d 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ee2:	2328      	movs	r3, #40	; 0x28
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efa:	4619      	mov	r1, r3
 8001efc:	4813      	ldr	r0, [pc, #76]	; (8001f4c <MX_GPIO_Init+0x854>)
 8001efe:	f003 fbfd 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001f02:	2340      	movs	r3, #64	; 0x40
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f12:	2309      	movs	r3, #9
 8001f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <MX_GPIO_Init+0x85c>)
 8001f1e:	f003 fbed 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001f22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f34:	2305      	movs	r3, #5
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4809      	ldr	r0, [pc, #36]	; (8001f64 <MX_GPIO_Init+0x86c>)
 8001f40:	f003 fbdc 	bl	80056fc <HAL_GPIO_Init>

}
 8001f44:	bf00      	nop
 8001f46:	3740      	adds	r7, #64	; 0x40
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40021c00 	.word	0x40021c00
 8001f58:	40021800 	.word	0x40021800
 8001f5c:	40021400 	.word	0x40021400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020c00 	.word	0x40020c00

08001f6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
 8001f84:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
	if(huart == &huart7) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a62      	ldr	r2, [pc, #392]	; (8002118 <HAL_UART_RxCpltCallback+0x1ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	f040 82b9 	bne.w	8002506 <HAL_UART_RxCpltCallback+0x59a>
		//$ message start
		if(buff[0]=='$'){
 8001f94:	4b61      	ldr	r3, [pc, #388]	; (800211c <HAL_UART_RxCpltCallback+0x1b0>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b24      	cmp	r3, #36	; 0x24
 8001f9a:	d106      	bne.n	8001faa <HAL_UART_RxCpltCallback+0x3e>
			count=0;
 8001f9c:	4b60      	ldr	r3, [pc, #384]	; (8002120 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001fa2:	4b60      	ldr	r3, [pc, #384]	; (8002124 <HAL_UART_RxCpltCallback+0x1b8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e00f      	b.n	8001fca <HAL_UART_RxCpltCallback+0x5e>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_UART_RxCpltCallback+0x1b4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10b      	bne.n	8001fca <HAL_UART_RxCpltCallback+0x5e>
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_UART_RxCpltCallback+0x1b0>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b47      	cmp	r3, #71	; 0x47
 8001fb8:	d007      	beq.n	8001fca <HAL_UART_RxCpltCallback+0x5e>
			count=0;
 8001fba:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_UART_RxCpltCallback+0x1b4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_UART_RxCpltCallback+0x1bc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_UART_RxCpltCallback+0x1bc>)
 8001fc8:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001fca:	4b54      	ldr	r3, [pc, #336]	; (800211c <HAL_UART_RxCpltCallback+0x1b0>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_UART_RxCpltCallback+0x1b4>)
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fb61 	bl	800269c <calc_crc>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d13e      	bne.n	8002062 <HAL_UART_RxCpltCallback+0xf6>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 8001fe4:	f000 fbb6 	bl	8002754 <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 8001fe8:	4850      	ldr	r0, [pc, #320]	; (800212c <HAL_UART_RxCpltCallback+0x1c0>)
 8001fea:	f018 ffeb 	bl	801afc4 <atoi>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 8001ff4:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 8001ff6:	484f      	ldr	r0, [pc, #316]	; (8002134 <HAL_UART_RxCpltCallback+0x1c8>)
 8001ff8:	f018 ffe4 	bl	801afc4 <atoi>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 8002000:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_UART_RxCpltCallback+0x1cc>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b30      	cmp	r3, #48	; 0x30
 8002008:	d108      	bne.n	800201c <HAL_UART_RxCpltCallback+0xb0>
 800200a:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_UART_RxCpltCallback+0x1cc>)
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	2b30      	cmp	r3, #48	; 0x30
 8002010:	d104      	bne.n	800201c <HAL_UART_RxCpltCallback+0xb0>
				century=century+100;//atoi(gps.year)
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_UART_RxCpltCallback+0x1d0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3364      	adds	r3, #100	; 0x64
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_UART_RxCpltCallback+0x1d0>)
 800201a:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 800201c:	4846      	ldr	r0, [pc, #280]	; (8002138 <HAL_UART_RxCpltCallback+0x1cc>)
 800201e:	f018 ffd1 	bl	801afc4 <atoi>
 8002022:	4602      	mov	r2, r0
 8002024:	4b45      	ldr	r3, [pc, #276]	; (800213c <HAL_UART_RxCpltCallback+0x1d0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4413      	add	r3, r2
 800202a:	4a41      	ldr	r2, [pc, #260]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 800202c:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 800202e:	4844      	ldr	r0, [pc, #272]	; (8002140 <HAL_UART_RxCpltCallback+0x1d4>)
 8002030:	f018 ffc8 	bl	801afc4 <atoi>
 8002034:	4603      	mov	r3, r0
 8002036:	4a3e      	ldr	r2, [pc, #248]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 8002038:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 800203a:	4842      	ldr	r0, [pc, #264]	; (8002144 <HAL_UART_RxCpltCallback+0x1d8>)
 800203c:	f018 ffc2 	bl	801afc4 <atoi>
 8002040:	4603      	mov	r3, r0
 8002042:	4a3b      	ldr	r2, [pc, #236]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 8002044:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8002046:	4840      	ldr	r0, [pc, #256]	; (8002148 <HAL_UART_RxCpltCallback+0x1dc>)
 8002048:	f018 ffbc 	bl	801afc4 <atoi>
 800204c:	4603      	mov	r3, r0
 800204e:	4a38      	ldr	r2, [pc, #224]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 8002050:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 8002052:	4837      	ldr	r0, [pc, #220]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 8002054:	f019 f9ea 	bl	801b42c <mktime>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	493b      	ldr	r1, [pc, #236]	; (800214c <HAL_UART_RxCpltCallback+0x1e0>)
 800205e:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		}
		if(res==1&&gps_unix!=rtc_read()){
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	2b01      	cmp	r3, #1
 8002066:	d14a      	bne.n	80020fe <HAL_UART_RxCpltCallback+0x192>
 8002068:	f000 fb74 	bl	8002754 <rtc_read>
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <HAL_UART_RxCpltCallback+0x1e0>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	4299      	cmp	r1, r3
 8002074:	bf08      	it	eq
 8002076:	4290      	cmpeq	r0, r2
 8002078:	d041      	beq.n	80020fe <HAL_UART_RxCpltCallback+0x192>

			time_ref_s=htonl(gps_unix- DIFF_SEC_1970_2036);
 800207a:	4b34      	ldr	r3, [pc, #208]	; (800214c <HAL_UART_RxCpltCallback+0x1e0>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_UART_RxCpltCallback+0x1e4>)
 8002082:	4413      	add	r3, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f00d fc94 	bl	800f9b2 <lwip_htonl>
 800208a:	4603      	mov	r3, r0
 800208c:	4a31      	ldr	r2, [pc, #196]	; (8002154 <HAL_UART_RxCpltCallback+0x1e8>)
 800208e:	6013      	str	r3, [r2, #0]
			sTime.Hours = Time_calc.tm_hour;
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = Time_calc.tm_min;
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = Time_calc.tm_sec;
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	73bb      	strb	r3, [r7, #14]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]




			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	4828      	ldr	r0, [pc, #160]	; (8002158 <HAL_UART_RxCpltCallback+0x1ec>)
 80020b6:	f004 fe8f 	bl	8006dd8 <HAL_RTC_SetTime>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_UART_RxCpltCallback+0x158>
			{
				Error_Handler();
 80020c0:	f000 fc88 	bl	80029d4 <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	727b      	strb	r3, [r7, #9]
			sDate.Date = Time_calc.tm_mday;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	72bb      	strb	r3, [r7, #10]
			sDate.Year = Time_calc.tm_year-century;
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_UART_RxCpltCallback+0x1c4>)
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_UART_RxCpltCallback+0x1d0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	72fb      	strb	r3, [r7, #11]
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80020e6:	f107 0308 	add.w	r3, r7, #8
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	481a      	ldr	r0, [pc, #104]	; (8002158 <HAL_UART_RxCpltCallback+0x1ec>)
 80020f0:	f004 ff8e 	bl	8007010 <HAL_RTC_SetDate>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_UART_RxCpltCallback+0x192>
			{
				Error_Handler();
 80020fa:	f000 fc6b 	bl	80029d4 <Error_Handler>

		}
		//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_UART_RxCpltCallback+0x1b4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d12c      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x1f4>
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_UART_RxCpltCallback+0x1b0>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b5a      	cmp	r3, #90	; 0x5a
 800210c:	d128      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x1f4>
			Tipe_Mes=1;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_UART_RxCpltCallback+0x1f0>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e02f      	b.n	8002176 <HAL_UART_RxCpltCallback+0x20a>
 8002116:	bf00      	nop
 8002118:	200051cc 	.word	0x200051cc
 800211c:	20000d0c 	.word	0x20000d0c
 8002120:	20000cf4 	.word	0x20000cf4
 8002124:	20000ce0 	.word	0x20000ce0
 8002128:	20000cd0 	.word	0x20000cd0
 800212c:	2000509b 	.word	0x2000509b
 8002130:	20005304 	.word	0x20005304
 8002134:	20005098 	.word	0x20005098
 8002138:	20000d10 	.word	0x20000d10
 800213c:	20000008 	.word	0x20000008
 8002140:	200050a3 	.word	0x200050a3
 8002144:	200050a6 	.word	0x200050a6
 8002148:	200050a9 	.word	0x200050a9
 800214c:	20000cd8 	.word	0x20000cd8
 8002150:	83aa7e80 	.word	0x83aa7e80
 8002154:	20005300 	.word	0x20005300
 8002158:	20005258 	.word	0x20005258
 800215c:	20000cd4 	.word	0x20000cd4
		}
		else if(count==3&&buff[0]=='R'){
 8002160:	4b91      	ldr	r3, [pc, #580]	; (80023a8 <HAL_UART_RxCpltCallback+0x43c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d106      	bne.n	8002176 <HAL_UART_RxCpltCallback+0x20a>
 8002168:	4b90      	ldr	r3, [pc, #576]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b52      	cmp	r3, #82	; 0x52
 800216e:	d102      	bne.n	8002176 <HAL_UART_RxCpltCallback+0x20a>
			Tipe_Mes=2;
 8002170:	4b8f      	ldr	r3, [pc, #572]	; (80023b0 <HAL_UART_RxCpltCallback+0x444>)
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 8002176:	4b8e      	ldr	r3, [pc, #568]	; (80023b0 <HAL_UART_RxCpltCallback+0x444>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	f040 80d4 	bne.w	8002328 <HAL_UART_RxCpltCallback+0x3bc>

			if(count==6&&buff[0]!=','){
 8002180:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <HAL_UART_RxCpltCallback+0x43c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b06      	cmp	r3, #6
 8002186:	d10b      	bne.n	80021a0 <HAL_UART_RxCpltCallback+0x234>
 8002188:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b2c      	cmp	r3, #44	; 0x2c
 800218e:	d007      	beq.n	80021a0 <HAL_UART_RxCpltCallback+0x234>
				count=0;
 8002190:	4b85      	ldr	r3, [pc, #532]	; (80023a8 <HAL_UART_RxCpltCallback+0x43c>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8002196:	4b87      	ldr	r3, [pc, #540]	; (80023b4 <HAL_UART_RxCpltCallback+0x448>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	4a85      	ldr	r2, [pc, #532]	; (80023b4 <HAL_UART_RxCpltCallback+0x448>)
 800219e:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 80021a0:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b2c      	cmp	r3, #44	; 0x2c
 80021a6:	d107      	bne.n	80021b8 <HAL_UART_RxCpltCallback+0x24c>
				zpt++;
 80021a8:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4a82      	ldr	r2, [pc, #520]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 80021b0:	6013      	str	r3, [r2, #0]
				ind=0;
 80021b2:	4b82      	ldr	r3, [pc, #520]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 80021b8:	4b7f      	ldr	r3, [pc, #508]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10e      	bne.n	80021de <HAL_UART_RxCpltCallback+0x272>
 80021c0:	4b7a      	ldr	r3, [pc, #488]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b2c      	cmp	r3, #44	; 0x2c
 80021c6:	d00a      	beq.n	80021de <HAL_UART_RxCpltCallback+0x272>
				time_buff[ind]=buff[0];
 80021c8:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a77      	ldr	r2, [pc, #476]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 80021ce:	7811      	ldrb	r1, [r2, #0]
 80021d0:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 80021d2:	54d1      	strb	r1, [r2, r3]
				ind++;
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	4a78      	ldr	r2, [pc, #480]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 80021dc:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d127      	bne.n	8002236 <HAL_UART_RxCpltCallback+0x2ca>
 80021e6:	4b71      	ldr	r3, [pc, #452]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b2c      	cmp	r3, #44	; 0x2c
 80021ec:	d123      	bne.n	8002236 <HAL_UART_RxCpltCallback+0x2ca>
				gps.hours[0]=time_buff[0];
 80021ee:	4b74      	ldr	r3, [pc, #464]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 80021f0:	781a      	ldrb	r2, [r3, #0]
 80021f2:	4b74      	ldr	r3, [pc, #464]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 80021f4:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 80021f8:	785a      	ldrb	r2, [r3, #1]
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 80021fc:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 80021fe:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002200:	789a      	ldrb	r2, [r3, #2]
 8002202:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 8002204:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 8002206:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002208:	78da      	ldrb	r2, [r3, #3]
 800220a:	4b6e      	ldr	r3, [pc, #440]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 800220c:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 800220e:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002210:	791a      	ldrb	r2, [r3, #4]
 8002212:	4b6c      	ldr	r3, [pc, #432]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 8002214:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 8002216:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002218:	795a      	ldrb	r2, [r3, #5]
 800221a:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 800221c:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 800221e:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002220:	799a      	ldrb	r2, [r3, #6]
 8002222:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 8002224:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002228:	79da      	ldrb	r2, [r3, #7]
 800222a:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 800222c:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 800222e:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002230:	7a1a      	ldrb	r2, [r3, #8]
 8002232:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 8002234:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 8002236:	4b60      	ldr	r3, [pc, #384]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d10e      	bne.n	800225c <HAL_UART_RxCpltCallback+0x2f0>
 800223e:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b2c      	cmp	r3, #44	; 0x2c
 8002244:	d00a      	beq.n	800225c <HAL_UART_RxCpltCallback+0x2f0>

				time_buff[ind]=buff[0];
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 800224c:	7811      	ldrb	r1, [r2, #0]
 800224e:	4a5c      	ldr	r2, [pc, #368]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002250:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002252:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 800225a:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 800225c:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d10b      	bne.n	800227c <HAL_UART_RxCpltCallback+0x310>
 8002264:	4b51      	ldr	r3, [pc, #324]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b2c      	cmp	r3, #44	; 0x2c
 800226a:	d107      	bne.n	800227c <HAL_UART_RxCpltCallback+0x310>
				gps.day[0]=time_buff[0];
 800226c:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 8002272:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8002274:	4b52      	ldr	r3, [pc, #328]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002276:	785a      	ldrb	r2, [r3, #1]
 8002278:	4b52      	ldr	r3, [pc, #328]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 800227a:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 800227c:	4b4e      	ldr	r3, [pc, #312]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d10e      	bne.n	80022a2 <HAL_UART_RxCpltCallback+0x336>
 8002284:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b2c      	cmp	r3, #44	; 0x2c
 800228a:	d00a      	beq.n	80022a2 <HAL_UART_RxCpltCallback+0x336>

				time_buff[ind]=buff[0];
 800228c:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a46      	ldr	r2, [pc, #280]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 8002292:	7811      	ldrb	r1, [r2, #0]
 8002294:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002296:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002298:	4b48      	ldr	r3, [pc, #288]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a47      	ldr	r2, [pc, #284]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 80022a0:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 80022a2:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d10b      	bne.n	80022c2 <HAL_UART_RxCpltCallback+0x356>
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b2c      	cmp	r3, #44	; 0x2c
 80022b0:	d107      	bne.n	80022c2 <HAL_UART_RxCpltCallback+0x356>
				gps.month[0]=time_buff[0];
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	4b43      	ldr	r3, [pc, #268]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 80022b8:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[1];
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 80022bc:	785a      	ldrb	r2, [r3, #1]
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 80022c0:	711a      	strb	r2, [r3, #4]
			}
			if(zpt==4&&buff[0]!=','){
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d10e      	bne.n	80022e8 <HAL_UART_RxCpltCallback+0x37c>
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b2c      	cmp	r3, #44	; 0x2c
 80022d0:	d00a      	beq.n	80022e8 <HAL_UART_RxCpltCallback+0x37c>

				time_buff[ind]=buff[0];
 80022d2:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a35      	ldr	r2, [pc, #212]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 80022d8:	7811      	ldrb	r1, [r2, #0]
 80022da:	4a39      	ldr	r2, [pc, #228]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 80022dc:	54d1      	strb	r1, [r2, r3]
				ind++;
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a35      	ldr	r2, [pc, #212]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 80022e6:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 80022e8:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d11b      	bne.n	8002328 <HAL_UART_RxCpltCallback+0x3bc>
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b2c      	cmp	r3, #44	; 0x2c
 80022f6:	d117      	bne.n	8002328 <HAL_UART_RxCpltCallback+0x3bc>
				gps.year[0]=time_buff[0];
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 80022fe:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[1];
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002302:	785a      	ldrb	r2, [r3, #1]
 8002304:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 8002306:	71da      	strb	r2, [r3, #7]
				gps.year[2]=time_buff[2];
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 800230a:	789a      	ldrb	r2, [r3, #2]
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 800230e:	721a      	strb	r2, [r3, #8]
				gps.year[3]=time_buff[3];
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002312:	78da      	ldrb	r2, [r3, #3]
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_UART_RxCpltCallback+0x458>)
 8002316:	725a      	strb	r2, [r3, #9]
				year_str[0]=time_buff[2];
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 800231a:	789a      	ldrb	r2, [r3, #2]
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_UART_RxCpltCallback+0x45c>)
 800231e:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[3];
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002322:	78da      	ldrb	r2, [r3, #3]
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_UART_RxCpltCallback+0x45c>)
 8002326:	705a      	strb	r2, [r3, #1]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_UART_RxCpltCallback+0x444>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f040 80c9 	bne.w	80024c4 <HAL_UART_RxCpltCallback+0x558>

			if(count==6&&buff[0]!=','){
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_UART_RxCpltCallback+0x43c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b06      	cmp	r3, #6
 8002338:	d10b      	bne.n	8002352 <HAL_UART_RxCpltCallback+0x3e6>
 800233a:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b2c      	cmp	r3, #44	; 0x2c
 8002340:	d007      	beq.n	8002352 <HAL_UART_RxCpltCallback+0x3e6>
				count=0;
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_UART_RxCpltCallback+0x43c>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_UART_RxCpltCallback+0x448>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_UART_RxCpltCallback+0x448>)
 8002350:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b2c      	cmp	r3, #44	; 0x2c
 8002358:	d107      	bne.n	800236a <HAL_UART_RxCpltCallback+0x3fe>
				zpt++;
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 8002362:	6013      	str	r3, [r2, #0]
				ind=0;
 8002364:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10e      	bne.n	8002390 <HAL_UART_RxCpltCallback+0x424>
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b2c      	cmp	r3, #44	; 0x2c
 8002378:	d00a      	beq.n	8002390 <HAL_UART_RxCpltCallback+0x424>

				time_buff[ind]=buff[0];
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 8002380:	7811      	ldrb	r1, [r2, #0]
 8002382:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 8002384:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_UART_RxCpltCallback+0x450>)
 800238e:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_UART_RxCpltCallback+0x44c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d13b      	bne.n	8002410 <HAL_UART_RxCpltCallback+0x4a4>
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_UART_RxCpltCallback+0x440>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b2c      	cmp	r3, #44	; 0x2c
 800239e:	d137      	bne.n	8002410 <HAL_UART_RxCpltCallback+0x4a4>
				gps.hours[0]=time_buff[0];
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_UART_RxCpltCallback+0x454>)
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	e012      	b.n	80023cc <HAL_UART_RxCpltCallback+0x460>
 80023a6:	bf00      	nop
 80023a8:	20000cf4 	.word	0x20000cf4
 80023ac:	20000d0c 	.word	0x20000d0c
 80023b0:	20000cd4 	.word	0x20000cd4
 80023b4:	20000cd0 	.word	0x20000cd0
 80023b8:	20000ce0 	.word	0x20000ce0
 80023bc:	20000cec 	.word	0x20000cec
 80023c0:	20000cfc 	.word	0x20000cfc
 80023c4:	20005098 	.word	0x20005098
 80023c8:	20000d10 	.word	0x20000d10
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80023ce:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80023d2:	785a      	ldrb	r2, [r3, #1]
 80023d4:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80023d6:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 80023d8:	4b4e      	ldr	r3, [pc, #312]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80023da:	789a      	ldrb	r2, [r3, #2]
 80023dc:	4b4c      	ldr	r3, [pc, #304]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80023de:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 80023e0:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80023e2:	78da      	ldrb	r2, [r3, #3]
 80023e4:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80023e6:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80023ea:	791a      	ldrb	r2, [r3, #4]
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80023ee:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 80023f0:	4b48      	ldr	r3, [pc, #288]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80023f2:	795a      	ldrb	r2, [r3, #5]
 80023f4:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80023f6:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 80023f8:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80023fa:	799a      	ldrb	r2, [r3, #6]
 80023fc:	4b44      	ldr	r3, [pc, #272]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80023fe:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 8002400:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 8002402:	79da      	ldrb	r2, [r3, #7]
 8002404:	4b42      	ldr	r3, [pc, #264]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 8002406:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 8002408:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 800240a:	7a1a      	ldrb	r2, [r3, #8]
 800240c:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 800240e:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_UART_RxCpltCallback+0x5ac>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d10e      	bne.n	8002436 <HAL_UART_RxCpltCallback+0x4ca>
 8002418:	4b40      	ldr	r3, [pc, #256]	; (800251c <HAL_UART_RxCpltCallback+0x5b0>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b2c      	cmp	r3, #44	; 0x2c
 800241e:	d00a      	beq.n	8002436 <HAL_UART_RxCpltCallback+0x4ca>

				time_buff[ind]=buff[0];
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_UART_RxCpltCallback+0x5b4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a3d      	ldr	r2, [pc, #244]	; (800251c <HAL_UART_RxCpltCallback+0x5b0>)
 8002426:	7811      	ldrb	r1, [r2, #0]
 8002428:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 800242a:	54d1      	strb	r1, [r2, r3]
				ind++;
 800242c:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_UART_RxCpltCallback+0x5b4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3301      	adds	r3, #1
 8002432:	4a3b      	ldr	r2, [pc, #236]	; (8002520 <HAL_UART_RxCpltCallback+0x5b4>)
 8002434:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8002436:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_UART_RxCpltCallback+0x5ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d107      	bne.n	800244e <HAL_UART_RxCpltCallback+0x4e2>
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_UART_RxCpltCallback+0x5b0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b2c      	cmp	r3, #44	; 0x2c
 8002444:	d103      	bne.n	800244e <HAL_UART_RxCpltCallback+0x4e2>
				gps.sinc[1]=time_buff[0];
 8002446:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 800244c:	769a      	strb	r2, [r3, #26]
			}

			if(zpt==9&&buff[0]!=','){
 800244e:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_UART_RxCpltCallback+0x5ac>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b09      	cmp	r3, #9
 8002454:	d10e      	bne.n	8002474 <HAL_UART_RxCpltCallback+0x508>
 8002456:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_UART_RxCpltCallback+0x5b0>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b2c      	cmp	r3, #44	; 0x2c
 800245c:	d00a      	beq.n	8002474 <HAL_UART_RxCpltCallback+0x508>

				time_buff[ind]=buff[0];
 800245e:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_UART_RxCpltCallback+0x5b4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2e      	ldr	r2, [pc, #184]	; (800251c <HAL_UART_RxCpltCallback+0x5b0>)
 8002464:	7811      	ldrb	r1, [r2, #0]
 8002466:	4a2b      	ldr	r2, [pc, #172]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 8002468:	54d1      	strb	r1, [r2, r3]
				ind++;
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_UART_RxCpltCallback+0x5b4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	4a2b      	ldr	r2, [pc, #172]	; (8002520 <HAL_UART_RxCpltCallback+0x5b4>)
 8002472:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 8002474:	4b28      	ldr	r3, [pc, #160]	; (8002518 <HAL_UART_RxCpltCallback+0x5ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b0a      	cmp	r3, #10
 800247a:	d123      	bne.n	80024c4 <HAL_UART_RxCpltCallback+0x558>
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_UART_RxCpltCallback+0x5b0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b2c      	cmp	r3, #44	; 0x2c
 8002482:	d11f      	bne.n	80024c4 <HAL_UART_RxCpltCallback+0x558>
				gps.day[0]=time_buff[0];
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 800248a:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 800248e:	785a      	ldrb	r2, [r3, #1]
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 8002492:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 8002496:	789a      	ldrb	r2, [r3, #2]
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 800249a:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[3];
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 800249e:	78da      	ldrb	r2, [r3, #3]
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80024a2:	711a      	strb	r2, [r3, #4]
				gps.year[0]=time_buff[4];
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80024a6:	791a      	ldrb	r2, [r3, #4]
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80024aa:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[5];
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80024ae:	795a      	ldrb	r2, [r3, #5]
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80024b2:	71da      	strb	r2, [r3, #7]
				year_str[0]=time_buff[4];
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80024b6:	791a      	ldrb	r2, [r3, #4]
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_UART_RxCpltCallback+0x5b8>)
 80024ba:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[5];
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_UART_RxCpltCallback+0x5a8>)
 80024be:	795a      	ldrb	r2, [r3, #5]
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_UART_RxCpltCallback+0x5b8>)
 80024c2:	705a      	strb	r2, [r3, #1]
			}
		}
		//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_UART_RxCpltCallback+0x5bc>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_UART_RxCpltCallback+0x5c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_UART_RxCpltCallback+0x57c>

			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 80024d2:	2201      	movs	r2, #1
 80024d4:	4911      	ldr	r1, [pc, #68]	; (800251c <HAL_UART_RxCpltCallback+0x5b0>)
 80024d6:	4816      	ldr	r0, [pc, #88]	; (8002530 <HAL_UART_RxCpltCallback+0x5c4>)
 80024d8:	f005 fae4 	bl	8007aa4 <HAL_UART_Transmit_IT>

			dataReceived=0;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_UART_RxCpltCallback+0x5bc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_UART_RxCpltCallback+0x5c0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 80024e8:	2201      	movs	r2, #1
 80024ea:	490c      	ldr	r1, [pc, #48]	; (800251c <HAL_UART_RxCpltCallback+0x5b0>)
 80024ec:	4811      	ldr	r0, [pc, #68]	; (8002534 <HAL_UART_RxCpltCallback+0x5c8>)
 80024ee:	f005 fb47 	bl	8007b80 <HAL_UART_Receive_IT>
		gps.errors[1]=ERRORS;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_UART_RxCpltCallback+0x5cc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_UART_RxCpltCallback+0x5a4>)
 80024fa:	761a      	strb	r2, [r3, #24]
		count++;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_UART_RxCpltCallback+0x5d0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_UART_RxCpltCallback+0x5d0>)
 8002504:	6013      	str	r3, [r2, #0]
	}
}
 8002506:	bf00      	nop
 8002508:	3728      	adds	r7, #40	; 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20005098 	.word	0x20005098
 8002514:	20000cfc 	.word	0x20000cfc
 8002518:	20000ce0 	.word	0x20000ce0
 800251c:	20000d0c 	.word	0x20000d0c
 8002520:	20000cec 	.word	0x20000cec
 8002524:	20000d10 	.word	0x20000d10
 8002528:	20000000 	.word	0x20000000
 800252c:	20000004 	.word	0x20000004
 8002530:	2000527c 	.word	0x2000527c
 8002534:	200051cc 	.word	0x200051cc
 8002538:	20000cd0 	.word	0x20000cd0
 800253c:	20000cf4 	.word	0x20000cf4

08002540 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

	if(huart == &huart6) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <HAL_UART_TxCpltCallback+0x3c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d111      	bne.n	8002574 <HAL_UART_TxCpltCallback+0x34>

		dataTransmitted=1;
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_UART_TxCpltCallback+0x40>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_UART_TxCpltCallback+0x44>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_UART_TxCpltCallback+0x34>
			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 800255e:	2201      	movs	r2, #1
 8002560:	4909      	ldr	r1, [pc, #36]	; (8002588 <HAL_UART_TxCpltCallback+0x48>)
 8002562:	4806      	ldr	r0, [pc, #24]	; (800257c <HAL_UART_TxCpltCallback+0x3c>)
 8002564:	f005 fa9e 	bl	8007aa4 <HAL_UART_Transmit_IT>
			dataReceived=0;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_UART_TxCpltCallback+0x44>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_UART_TxCpltCallback+0x40>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000527c 	.word	0x2000527c
 8002580:	20000004 	.word	0x20000004
 8002584:	20000000 	.word	0x20000000
 8002588:	20000d0c 	.word	0x20000d0c
 800258c:	00000000 	.word	0x00000000

08002590 <Hex_to_dec>:

char Hex_to_dec(char hex[2]){
 8002590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
    dec = 0;
 800259e:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <Hex_to_dec+0x108>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7fd fe3d 	bl	8000224 <strlen>
 80025aa:	4603      	mov	r3, r0
 80025ac:	3b01      	subs	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e060      	b.n	8002674 <Hex_to_dec+0xe4>
        switch (hex[i]) {
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	3b41      	subs	r3, #65	; 0x41
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d821      	bhi.n	8002604 <Hex_to_dec+0x74>
 80025c0:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <Hex_to_dec+0x38>)
 80025c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c6:	bf00      	nop
 80025c8:	080025e1 	.word	0x080025e1
 80025cc:	080025e7 	.word	0x080025e7
 80025d0:	080025ed 	.word	0x080025ed
 80025d4:	080025f3 	.word	0x080025f3
 80025d8:	080025f9 	.word	0x080025f9
 80025dc:	080025ff 	.word	0x080025ff
        case 'A':
            dig = 10;
 80025e0:	230a      	movs	r3, #10
 80025e2:	613b      	str	r3, [r7, #16]
            break;
 80025e4:	e014      	b.n	8002610 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 80025e6:	230b      	movs	r3, #11
 80025e8:	613b      	str	r3, [r7, #16]
            break;
 80025ea:	e011      	b.n	8002610 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 80025ec:	230c      	movs	r3, #12
 80025ee:	613b      	str	r3, [r7, #16]
            break;
 80025f0:	e00e      	b.n	8002610 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 80025f2:	230d      	movs	r3, #13
 80025f4:	613b      	str	r3, [r7, #16]
            break;
 80025f6:	e00b      	b.n	8002610 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 80025f8:	230e      	movs	r3, #14
 80025fa:	613b      	str	r3, [r7, #16]
            break;
 80025fc:	e008      	b.n	8002610 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 80025fe:	230f      	movs	r3, #15
 8002600:	613b      	str	r3, [r7, #16]
            break;
 8002602:	e005      	b.n	8002610 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	3b30      	subs	r3, #48	; 0x30
 800260e:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <Hex_to_dec+0x108>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ffb5 	bl	8000584 <__aeabi_i2d>
 800261a:	4604      	mov	r4, r0
 800261c:	460d      	mov	r5, r1
 800261e:	6938      	ldr	r0, [r7, #16]
 8002620:	f7fd ffb0 	bl	8000584 <__aeabi_i2d>
 8002624:	4680      	mov	r8, r0
 8002626:	4689      	mov	r9, r1
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7fd ffab 	bl	8000584 <__aeabi_i2d>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	ec43 2b11 	vmov	d1, r2, r3
 8002636:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002690 <Hex_to_dec+0x100>
 800263a:	f020 ff2f 	bl	802349c <pow>
 800263e:	ec53 2b10 	vmov	r2, r3, d0
 8002642:	4640      	mov	r0, r8
 8002644:	4649      	mov	r1, r9
 8002646:	f7fe f807 	bl	8000658 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4620      	mov	r0, r4
 8002650:	4629      	mov	r1, r5
 8002652:	f7fd fe4b 	bl	80002ec <__adddf3>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe faab 	bl	8000bb8 <__aeabi_d2iz>
 8002662:	4603      	mov	r3, r0
 8002664:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <Hex_to_dec+0x108>)
 8002666:	6013      	str	r3, [r2, #0]
        cont++;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3301      	adds	r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3b01      	subs	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	da9b      	bge.n	80025b2 <Hex_to_dec+0x22>
    }
    return dec;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <Hex_to_dec+0x108>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b2db      	uxtb	r3, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w
 8002690:	00000000 	.word	0x00000000
 8002694:	40300000 	.word	0x40300000
 8002698:	20005250 	.word	0x20005250

0800269c <calc_crc>:


char calc_crc(char c,int cnt){
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2b2a      	cmp	r3, #42	; 0x2a
 80026ac:	d108      	bne.n	80026c0 <calc_crc+0x24>
		start_crc=0;
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <calc_crc+0xa0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <calc_crc+0xa4>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
		z=0;
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <calc_crc+0xa8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <calc_crc+0xa0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <calc_crc+0x38>
		crc^=c;
 80026c8:	79fa      	ldrb	r2, [r7, #7]
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <calc_crc+0xac>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4053      	eors	r3, r2
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <calc_crc+0xac>)
 80026d2:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <calc_crc+0xa4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d110      	bne.n	80026fe <calc_crc+0x62>
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	2b2a      	cmp	r3, #42	; 0x2a
 80026e0:	d00d      	beq.n	80026fe <calc_crc+0x62>
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <calc_crc+0xa8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	dc09      	bgt.n	80026fe <calc_crc+0x62>
		crc_buff[z]=c;
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <calc_crc+0xa8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4917      	ldr	r1, [pc, #92]	; (800274c <calc_crc+0xb0>)
 80026f0:	79fa      	ldrb	r2, [r7, #7]
 80026f2:	54ca      	strb	r2, [r1, r3]
		z++;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <calc_crc+0xa8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <calc_crc+0xa8>)
 80026fc:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b0a      	cmp	r3, #10
 8002702:	d10a      	bne.n	800271a <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 8002704:	4811      	ldr	r0, [pc, #68]	; (800274c <calc_crc+0xb0>)
 8002706:	f7ff ff43 	bl	8002590 <Hex_to_dec>
		if(crc==dec){
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <calc_crc+0xac>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <calc_crc+0xb4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d101      	bne.n	800271a <calc_crc+0x7e>
			//Test++;
			return 1;
 8002716:	2301      	movs	r3, #1
 8002718:	e00c      	b.n	8002734 <calc_crc+0x98>
		}
	}
	if(cnt==0){
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d108      	bne.n	8002732 <calc_crc+0x96>
		start_crc=1;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <calc_crc+0xa0>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <calc_crc+0xa4>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
		crc=0;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <calc_crc+0xac>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000ce4 	.word	0x20000ce4
 8002740:	20000cf8 	.word	0x20000cf8
 8002744:	20000ce8 	.word	0x20000ce8
 8002748:	20000cf0 	.word	0x20000cf0
 800274c:	20000d08 	.word	0x20000d08
 8002750:	20005250 	.word	0x20005250

08002754 <rtc_read>:

time_t rtc_read(void) {
 8002754:	b5b0      	push	{r4, r5, r7, lr}
 8002756:	b092      	sub	sp, #72	; 0x48
 8002758:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <rtc_read+0x84>)
 800275c:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <rtc_read+0x88>)
 800275e:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002764:	2200      	movs	r2, #0
 8002766:	4619      	mov	r1, r3
 8002768:	481b      	ldr	r0, [pc, #108]	; (80027d8 <rtc_read+0x84>)
 800276a:	f004 fbf3 	bl	8006f54 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 800276e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002772:	2200      	movs	r2, #0
 8002774:	4619      	mov	r1, r3
 8002776:	4818      	ldr	r0, [pc, #96]	; (80027d8 <rtc_read+0x84>)
 8002778:	f004 fcf2 	bl	8007160 <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 800277c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002780:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 8002782:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002786:	613b      	str	r3, [r7, #16]
	timeinfo.tm_mday = dateStruct.Date;
 8002788:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800278c:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_year = dateStruct.Year + 100;
 800278e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002792:	3364      	adds	r3, #100	; 0x64
 8002794:	617b      	str	r3, [r7, #20]
	timeinfo.tm_hour = timeStruct.Hours;
 8002796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800279a:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_min = timeStruct.Minutes;
 800279c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027a0:	607b      	str	r3, [r7, #4]
	timeinfo.tm_sec = timeStruct.Seconds;
 80027a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027a6:	603b      	str	r3, [r7, #0]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 80027a8:	463b      	mov	r3, r7
 80027aa:	4618      	mov	r0, r3
 80027ac:	f018 fe3e 	bl	801b42c <mktime>
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <rtc_read+0x8c>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <rtc_read+0x90>)
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	461a      	mov	r2, r3
 80027bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80027c0:	1884      	adds	r4, r0, r2
 80027c2:	eb41 0503 	adc.w	r5, r1, r3
 80027c6:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40


	return t;
 80027ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	3748      	adds	r7, #72	; 0x48
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bdb0      	pop	{r4, r5, r7, pc}
 80027d8:	20005258 	.word	0x20005258
 80027dc:	40002800 	.word	0x40002800
 80027e0:	200050b4 	.word	0x200050b4
 80027e4:	08027e94 	.word	0x08027e94

080027e8 <tcpecho_init>:

void tcpecho_init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 80027ee:	2301      	movs	r3, #1
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f6:	2200      	movs	r2, #0
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <tcpecho_init+0x20>)
 80027fa:	4804      	ldr	r0, [pc, #16]	; (800280c <tcpecho_init+0x24>)
 80027fc:	f018 fb9e 	bl	801af3c <sys_thread_new>
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	08002865 	.word	0x08002865
 800280c:	08024534 	.word	0x08024534

08002810 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002818:	f006 fc72 	bl	8009100 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 800281c:	f00d f894 	bl	800f948 <httpd_init>
	/* Initialize tcp echo server */
	tcpecho_init();
 8002820:	f7ff ffe2 	bl	80027e8 <tcpecho_init>


	  ip4_addr_t add;
	  inet_aton(user_info.ip, &add);
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	4619      	mov	r1, r3
 800282a:	480a      	ldr	r0, [pc, #40]	; (8002854 <StartDefaultTask+0x44>)
 800282c:	f017 f9b0 	bl	8019b90 <ip4addr_aton>
	  setIP(add.addr);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4618      	mov	r0, r3
 8002834:	f006 fc52 	bl	80090dc <setIP>
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8002838:	2201      	movs	r2, #1
 800283a:	4907      	ldr	r1, [pc, #28]	; (8002858 <StartDefaultTask+0x48>)
 800283c:	4807      	ldr	r0, [pc, #28]	; (800285c <StartDefaultTask+0x4c>)
 800283e:	f005 f99f 	bl	8007b80 <HAL_UART_Receive_IT>
		//HAL_GPIO_TogglePin(Led_GPIO_Port, Led1_Pin);
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8002842:	2102      	movs	r1, #2
 8002844:	4806      	ldr	r0, [pc, #24]	; (8002860 <StartDefaultTask+0x50>)
 8002846:	f003 f91e 	bl	8005a86 <HAL_GPIO_TogglePin>
		//HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
		//HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
		HAL_Delay(1000);
 800284a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800284e:	f001 fb31 	bl	8003eb4 <HAL_Delay>
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8002852:	e7f1      	b.n	8002838 <StartDefaultTask+0x28>
 8002854:	200050b4 	.word	0x200050b4
 8002858:	20000d0c 	.word	0x20000d0c
 800285c:	200051cc 	.word	0x200051cc
 8002860:	40022000 	.word	0x40022000

08002864 <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
		//struct tm tm_;
		//uint32_t tm_ms_;


		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_UDP);
 800286c:	2200      	movs	r2, #0
 800286e:	2100      	movs	r1, #0
 8002870:	2020      	movs	r0, #32
 8002872:	f00a f8b9 	bl	800c9e8 <netconn_new_with_proto_and_callback>
 8002876:	61f8      	str	r0, [r7, #28]
		if (conn!=NULL)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8089 	beq.w	8002992 <tcpecho_thread+0x12e>
		{
			/* Bind connection to well known port number 7. */
			err = netconn_bind(conn, NULL, 123);
 8002880:	227b      	movs	r2, #123	; 0x7b
 8002882:	2100      	movs	r1, #0
 8002884:	69f8      	ldr	r0, [r7, #28]
 8002886:	f00a f969 	bl	800cb5c <netconn_bind>
 800288a:	4603      	mov	r3, r0
 800288c:	76fb      	strb	r3, [r7, #27]
			if (err == ERR_OK)
 800288e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d17a      	bne.n	800298c <tcpecho_thread+0x128>
			{
				while (1)
				{
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002896:	e067      	b.n	8002968 <tcpecho_thread+0x104>
					{
						do
						{
							netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f107 0212 	add.w	r2, r7, #18
 800289e:	f107 010c 	add.w	r1, r7, #12
 80028a2:	4618      	mov	r0, r3
 80028a4:	f00b fe60 	bl	800e568 <netbuf_data>

							if(buf_data_len < 48 || buf_data_len > 2048)
 80028a8:	8a7b      	ldrh	r3, [r7, #18]
 80028aa:	2b2f      	cmp	r3, #47	; 0x2f
 80028ac:	d903      	bls.n	80028b6 <tcpecho_thread+0x52>
 80028ae:	8a7b      	ldrh	r3, [r7, #18]
 80028b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b4:	d904      	bls.n	80028c0 <tcpecho_thread+0x5c>
							{
								netbuf_delete(buf);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f00b fe35 	bl	800e528 <netbuf_delete>
								continue;
 80028be:	e048      	b.n	8002952 <tcpecho_thread+0xee>
							}
							ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	701a      	strb	r2, [r3, #0]
							ntp_packet_ptr->stratum = ntpd_status.stratum;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a34      	ldr	r2, [pc, #208]	; (800299c <tcpecho_thread+0x138>)
 80028ca:	7a12      	ldrb	r2, [r2, #8]
 80028cc:	705a      	strb	r2, [r3, #1]
							ntp_packet_ptr->poll = 5; // 32s
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2205      	movs	r2, #5
 80028d2:	709a      	strb	r2, [r3, #2]
							ntp_packet_ptr->precision = -10; // ~1ms
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	22f6      	movs	r2, #246	; 0xf6
 80028d8:	70da      	strb	r2, [r3, #3]

							ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
							ntp_packet_ptr->rootDispersion_s = 0;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	811a      	strh	r2, [r3, #8]
							ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 80028e6:	2041      	movs	r0, #65	; 0x41
 80028e8:	f00d f863 	bl	800f9b2 <lwip_htonl>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	b292      	uxth	r2, r2
 80028f2:	815a      	strh	r2, [r3, #10]
							ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <tcpecho_thread+0x13c>)
 80028f8:	60da      	str	r2, [r3, #12]
							/* Move client's transmit timestamp into origin fields */
							ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002900:	619a      	str	r2, [r3, #24]
							ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002908:	61da      	str	r2, [r3, #28]

							ntp_packet_ptr->refTm_s = time_ref_s;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <tcpecho_thread+0x140>)
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	611a      	str	r2, [r3, #16]
							ntp_packet_ptr->refTm_f = time_ref_f;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a24      	ldr	r2, [pc, #144]	; (80029a8 <tcpecho_thread+0x144>)
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	615a      	str	r2, [r3, #20]

							//rtcGetTime(&RTCD1, &ntpd_datetime);
							//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

							ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 800291a:	f7ff ff1b 	bl	8002754 <rtc_read>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <tcpecho_thread+0x148>)
 8002924:	4413      	add	r3, r2
 8002926:	68fc      	ldr	r4, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	f00d f842 	bl	800f9b2 <lwip_htonl>
 800292e:	4603      	mov	r3, r0
 8002930:	6223      	str	r3, [r4, #32]
							ntp_packet_ptr->rxTm_f = 0;//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

							/* Copy into transmit timestamp fields */
							ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a12      	ldr	r2, [r2, #32]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
							ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c

							netconn_send(conn, buf);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	4619      	mov	r1, r3
 800294c:	69f8      	ldr	r0, [r7, #28]
 800294e:	f00a fb33 	bl	800cfb8 <netconn_send>
						}
						while (netbuf_next(buf) >= 0);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4618      	mov	r0, r3
 8002956:	f00b fe51 	bl	800e5fc <netbuf_next>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	da9b      	bge.n	8002898 <tcpecho_thread+0x34>

						netbuf_delete(buf);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	4618      	mov	r0, r3
 8002964:	f00b fde0 	bl	800e528 <netbuf_delete>
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	69f8      	ldr	r0, [r7, #28]
 8002970:	f00a faa8 	bl	800cec4 <netconn_recv>
 8002974:	4603      	mov	r3, r0
 8002976:	76bb      	strb	r3, [r7, #26]
 8002978:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d08b      	beq.n	8002898 <tcpecho_thread+0x34>
					}
					/* Close connection and discard connection identifier. */
					//netconn_close(newconn);
					//netconn_delete(newconn);
					ntpd_status.requests_count++;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <tcpecho_thread+0x138>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	3301      	adds	r3, #1
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <tcpecho_thread+0x138>)
 8002988:	6053      	str	r3, [r2, #4]
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 800298a:	e7ed      	b.n	8002968 <tcpecho_thread+0x104>
				}
			}
			else
			{
				netconn_delete(conn);
 800298c:	69f8      	ldr	r0, [r7, #28]
 800298e:	f00a f8c9 	bl	800cb24 <netconn_delete>
			}
		}
	}
  /* USER CODE END tcpecho_thread */
}
 8002992:	bf00      	nop
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}
 800299a:	bf00      	nop
 800299c:	2000000c 	.word	0x2000000c
 80029a0:	00535047 	.word	0x00535047
 80029a4:	20005300 	.word	0x20005300
 80029a8:	20005278 	.word	0x20005278
 80029ac:	83aa7e80 	.word	0x83aa7e80

080029b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029c2:	f001 fa57 	bl	8003e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40001000 	.word	0x40001000

080029d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d8:	b672      	cpsid	i
}
 80029da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029dc:	e7fe      	b.n	80029dc <Error_Handler+0x8>
	...

080029e0 <fs_open_custom>:
#define JSON_SIZE 1608
struct tm WebPageTime;
int fs_read_custom(struct fs_file *file, char *buffer, int count){
	return 0;
}
int fs_open_custom(struct fs_file *file, const char *name){
 80029e0:	b5b0      	push	{r4, r5, r7, lr}
 80029e2:	f5ad 6ddb 	sub.w	sp, sp, #1752	; 0x6d8
 80029e6:	af04      	add	r7, sp, #16
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	6018      	str	r0, [r3, #0]
 80029ec:	463b      	mov	r3, r7
 80029ee:	6019      	str	r1, [r3, #0]
	char generated_html[JSON_SIZE];
	memset(generated_html, 0, JSON_SIZE);
 80029f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029f4:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f018 fc36 	bl	801b26c <memset>
	u16_t offset = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6

	if (!strcmp(name, "/info.json")) {
 8002a06:	463b      	mov	r3, r7
 8002a08:	4986      	ldr	r1, [pc, #536]	; (8002c24 <fs_open_custom+0x244>)
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	f7fd fc00 	bl	8000210 <strcmp>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d119      	bne.n	8002a4a <fs_open_custom+0x6a>

		char* ip=user_info.ip;
 8002a16:	4b84      	ldr	r3, [pc, #528]	; (8002c28 <fs_open_custom+0x248>)
 8002a18:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
		int zone=user_info.zone;
 8002a1c:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <fs_open_custom+0x248>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
		char* contacts=user_info.contacts;
 8002a24:	4b81      	ldr	r3, [pc, #516]	; (8002c2c <fs_open_custom+0x24c>)
 8002a26:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0

			offset = sprintf(generated_html,"[{\"IPaddress\":\"%s\",\"Timezone\":\"%d\",\"contacts\":\"%s\",\"software_version\":\"0.000000001\",\"mac\":\"no\"}]",ip,zone,contacts);
 8002a2a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002a2e:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8002a38:	f8d7 26a8 	ldr.w	r2, [r7, #1704]	; 0x6a8
 8002a3c:	497c      	ldr	r1, [pc, #496]	; (8002c30 <fs_open_custom+0x250>)
 8002a3e:	f018 feff 	bl	801b840 <sprintf>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6
 8002a48:	e0a7      	b.n	8002b9a <fs_open_custom+0x1ba>
	}
	else if (!strcmp(name, "/uptime.json")) {
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	4979      	ldr	r1, [pc, #484]	; (8002c34 <fs_open_custom+0x254>)
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	f7fd fbde 	bl	8000210 <strcmp>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 809f 	bne.w	8002b9a <fs_open_custom+0x1ba>
		RTC_DateTypeDef dateStruct;
		RTC_TimeTypeDef timeStruct;

		//hrtc.Instance = RTC;
		if (gps.year[0]!='V'){
 8002a5c:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <fs_open_custom+0x258>)
 8002a5e:	799b      	ldrb	r3, [r3, #6]
 8002a60:	2b56      	cmp	r3, #86	; 0x56
 8002a62:	f000 808d 	beq.w	8002b80 <fs_open_custom+0x1a0>
			// Read actual date and time
			HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002a66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4873      	ldr	r0, [pc, #460]	; (8002c3c <fs_open_custom+0x25c>)
 8002a70:	f004 fa70 	bl	8006f54 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 8002a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	486f      	ldr	r0, [pc, #444]	; (8002c3c <fs_open_custom+0x25c>)
 8002a7e:	f004 fb6f 	bl	8007160 <HAL_RTC_GetDate>

			struct tm timeinfo;

			timeinfo.tm_wday = dateStruct.WeekDay;
 8002a82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	619a      	str	r2, [r3, #24]
			timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 8002a90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	611a      	str	r2, [r3, #16]
			timeinfo.tm_mday = dateStruct.Date;
 8002a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aa2:	789b      	ldrb	r3, [r3, #2]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	60da      	str	r2, [r3, #12]
			timeinfo.tm_year = dateStruct.Year;
 8002aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	615a      	str	r2, [r3, #20]
			timeinfo.tm_hour = timeStruct.Hours;
 8002aba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	609a      	str	r2, [r3, #8]
			timeinfo.tm_min = timeStruct.Minutes;
 8002ac8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	605a      	str	r2, [r3, #4]
			timeinfo.tm_sec = timeStruct.Seconds;
 8002ad6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ada:	789b      	ldrb	r3, [r3, #2]
 8002adc:	461a      	mov	r2, r3
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	601a      	str	r2, [r3, #0]

			time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f018 fc9f 	bl	801b42c <mktime>
 8002aee:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <fs_open_custom+0x248>)
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	4a53      	ldr	r2, [pc, #332]	; (8002c40 <fs_open_custom+0x260>)
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	461a      	mov	r2, r3
 8002afa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002afe:	1884      	adds	r4, r0, r2
 8002b00:	eb41 0503 	adc.w	r5, r1, r3
 8002b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b08:	e9c3 4500 	strd	r4, r5, [r3]
			// time_t  to   tm

			localtime_r(  &t, &WebPageTime );
 8002b0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b10:	494c      	ldr	r1, [pc, #304]	; (8002c44 <fs_open_custom+0x264>)
 8002b12:	4618      	mov	r0, r3
 8002b14:	f018 fa7e 	bl	801b014 <localtime_r>

			int Hours=WebPageTime.tm_hour;
 8002b18:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <fs_open_custom+0x264>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
			int Minutes=WebPageTime.tm_min;
 8002b20:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <fs_open_custom+0x264>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
			int Seconds=WebPageTime.tm_sec;
 8002b28:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <fs_open_custom+0x264>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
			int Date=WebPageTime.tm_mday;
 8002b30:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <fs_open_custom+0x264>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
			int Month=WebPageTime.tm_mon+1;
 8002b38:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <fs_open_custom+0x264>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
			int Year=WebPageTime.tm_year+2000;
 8002b42:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <fs_open_custom+0x264>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002b4a:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac


			offset = sprintf(generated_html,"%02d:%02d:%02d %02d.%02d.%04d",Hours,Minutes,Seconds,Date,Month,Year);
 8002b4e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002b52:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 8002b56:	9303      	str	r3, [sp, #12]
 8002b58:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002b6e:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 8002b72:	4935      	ldr	r1, [pc, #212]	; (8002c48 <fs_open_custom+0x268>)
 8002b74:	f018 fe64 	bl	801b840 <sprintf>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6
 8002b7e:	e00c      	b.n	8002b9a <fs_open_custom+0x1ba>
		}
		else if (gps.year[0]=='V') {
 8002b80:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <fs_open_custom+0x258>)
 8002b82:	799b      	ldrb	r3, [r3, #6]
 8002b84:	2b56      	cmp	r3, #86	; 0x56
 8002b86:	d108      	bne.n	8002b9a <fs_open_custom+0x1ba>
			offset = sprintf(generated_html,"no Reference Timestamp");
 8002b88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b8c:	492f      	ldr	r1, [pc, #188]	; (8002c4c <fs_open_custom+0x26c>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f018 fe56 	bl	801b840 <sprintf>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6
		}
	}

	if (offset>0){
 8002b9a:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	; 0x6c6
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00e      	beq.n	8002bc0 <fs_open_custom+0x1e0>
		memset(file, 0, sizeof(struct fs_file));
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	2214      	movs	r2, #20
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	f018 fb5f 	bl	801b26c <memset>
		file->pextension = mem_malloc(offset);
 8002bae:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	; 0x6c6
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f00d fa52 	bl	801005c <mem_malloc>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60da      	str	r2, [r3, #12]
	}

	if (file->pextension != NULL) {
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d020      	beq.n	8002c0c <fs_open_custom+0x22c>
		/* instead of doing memcpy, you would generate e.g. a JSON here */
		memcpy(file->pextension, generated_html, offset);
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	; 0x6c6
 8002bd4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f018 fb1f 	bl	801b21c <memcpy>
		file->data = (const char *)file->pextension;
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	601a      	str	r2, [r3, #0]
		file->len = offset; /* don't send the trailing 0 */
 8002bea:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	; 0x6c6
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
		file->index = file->len;
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	609a      	str	r2, [r3, #8]
		/* allow persisteng connections */
		file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2201      	movs	r2, #1
 8002c06:	741a      	strb	r2, [r3, #16]
		return 1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e005      	b.n	8002c18 <fs_open_custom+0x238>
	}

	printf("Extension fail %s\n\r",name);
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	480f      	ldr	r0, [pc, #60]	; (8002c50 <fs_open_custom+0x270>)
 8002c12:	f018 fdb1 	bl	801b778 <printf>
	return 0;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f507 67d9 	add.w	r7, r7, #1736	; 0x6c8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bdb0      	pop	{r4, r5, r7, pc}
 8002c22:	bf00      	nop
 8002c24:	08024544 	.word	0x08024544
 8002c28:	200050b4 	.word	0x200050b4
 8002c2c:	200050c8 	.word	0x200050c8
 8002c30:	08024550 	.word	0x08024550
 8002c34:	080245b4 	.word	0x080245b4
 8002c38:	20005098 	.word	0x20005098
 8002c3c:	20005258 	.word	0x20005258
 8002c40:	08027e94 	.word	0x08027e94
 8002c44:	20005328 	.word	0x20005328
 8002c48:	080245c4 	.word	0x080245c4
 8002c4c:	080245e4 	.word	0x080245e4
 8002c50:	080245fc 	.word	0x080245fc

08002c54 <fs_close_custom>:
void fs_close_custom(struct fs_file *file){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	if (file && file->pextension) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <fs_close_custom+0x26>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <fs_close_custom+0x26>
		mem_free(file->pextension);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f00d f85a 	bl	800fd28 <mem_free>
		file->pextension = NULL;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
	}
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8002c82:	b480      	push	{r7}
 8002c84:	b087      	sub	sp, #28
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d801      	bhi.n	8002c9c <jsmn_alloc_token+0x1a>
    return NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e014      	b.n	8002cc6 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	1c59      	adds	r1, r3, #1
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6051      	str	r1, [r2, #4]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	4413      	add	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8002cc4:	697b      	ldr	r3, [r7, #20]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	7afa      	ldrb	r2, [r7, #11]
 8002ce6:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	605a      	str	r2, [r3, #4]
  token->end = end;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002d1c:	e07c      	b.n	8002e18 <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	4413      	add	r3, r2
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b7d      	cmp	r3, #125	; 0x7d
 8002d2a:	f000 8083 	beq.w	8002e34 <jsmn_parse_primitive+0x12c>
 8002d2e:	2b7d      	cmp	r3, #125	; 0x7d
 8002d30:	dc58      	bgt.n	8002de4 <jsmn_parse_primitive+0xdc>
 8002d32:	2b5d      	cmp	r3, #93	; 0x5d
 8002d34:	d07e      	beq.n	8002e34 <jsmn_parse_primitive+0x12c>
 8002d36:	2b5d      	cmp	r3, #93	; 0x5d
 8002d38:	dc54      	bgt.n	8002de4 <jsmn_parse_primitive+0xdc>
 8002d3a:	2b2c      	cmp	r3, #44	; 0x2c
 8002d3c:	dc50      	bgt.n	8002de0 <jsmn_parse_primitive+0xd8>
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	db50      	blt.n	8002de4 <jsmn_parse_primitive+0xdc>
 8002d42:	3b09      	subs	r3, #9
 8002d44:	2b23      	cmp	r3, #35	; 0x23
 8002d46:	d84d      	bhi.n	8002de4 <jsmn_parse_primitive+0xdc>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <jsmn_parse_primitive+0x48>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002e35 	.word	0x08002e35
 8002d54:	08002e35 	.word	0x08002e35
 8002d58:	08002de5 	.word	0x08002de5
 8002d5c:	08002de5 	.word	0x08002de5
 8002d60:	08002e35 	.word	0x08002e35
 8002d64:	08002de5 	.word	0x08002de5
 8002d68:	08002de5 	.word	0x08002de5
 8002d6c:	08002de5 	.word	0x08002de5
 8002d70:	08002de5 	.word	0x08002de5
 8002d74:	08002de5 	.word	0x08002de5
 8002d78:	08002de5 	.word	0x08002de5
 8002d7c:	08002de5 	.word	0x08002de5
 8002d80:	08002de5 	.word	0x08002de5
 8002d84:	08002de5 	.word	0x08002de5
 8002d88:	08002de5 	.word	0x08002de5
 8002d8c:	08002de5 	.word	0x08002de5
 8002d90:	08002de5 	.word	0x08002de5
 8002d94:	08002de5 	.word	0x08002de5
 8002d98:	08002de5 	.word	0x08002de5
 8002d9c:	08002de5 	.word	0x08002de5
 8002da0:	08002de5 	.word	0x08002de5
 8002da4:	08002de5 	.word	0x08002de5
 8002da8:	08002de5 	.word	0x08002de5
 8002dac:	08002e35 	.word	0x08002e35
 8002db0:	08002de5 	.word	0x08002de5
 8002db4:	08002de5 	.word	0x08002de5
 8002db8:	08002de5 	.word	0x08002de5
 8002dbc:	08002de5 	.word	0x08002de5
 8002dc0:	08002de5 	.word	0x08002de5
 8002dc4:	08002de5 	.word	0x08002de5
 8002dc8:	08002de5 	.word	0x08002de5
 8002dcc:	08002de5 	.word	0x08002de5
 8002dd0:	08002de5 	.word	0x08002de5
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002de5 	.word	0x08002de5
 8002ddc:	08002e35 	.word	0x08002e35
 8002de0:	2b3a      	cmp	r3, #58	; 0x3a
 8002de2:	d027      	beq.n	8002e34 <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8002de4:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4413      	add	r3, r2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b1f      	cmp	r3, #31
 8002df2:	d906      	bls.n	8002e02 <jsmn_parse_primitive+0xfa>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b7e      	cmp	r3, #126	; 0x7e
 8002e00:	d905      	bls.n	8002e0e <jsmn_parse_primitive+0x106>
      parser->pos = start;
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8002e08:	f06f 0301 	mvn.w	r3, #1
 8002e0c:	e03b      	b.n	8002e86 <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d90a      	bls.n	8002e38 <jsmn_parse_primitive+0x130>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4413      	add	r3, r2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f af76 	bne.w	8002d1e <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8002e32:	e001      	b.n	8002e38 <jsmn_parse_primitive+0x130>
      goto found;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <jsmn_parse_primitive+0x132>
found:
 8002e38:	bf00      	nop
  if (tokens == NULL) {
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <jsmn_parse_primitive+0x146>
    parser->pos--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1e5a      	subs	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	601a      	str	r2, [r3, #0]
    return 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e01b      	b.n	8002e86 <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	6839      	ldr	r1, [r7, #0]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7ff ff15 	bl	8002c82 <jsmn_alloc_token>
 8002e58:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <jsmn_parse_primitive+0x164>
    parser->pos = start;
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e00c      	b.n	8002e86 <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	2108      	movs	r1, #8
 8002e74:	6938      	ldr	r0, [r7, #16]
 8002e76:	f7ff ff2c 	bl	8002cd2 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]
  return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop

08002e90 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002eae:	e0e6      	b.n	800307e <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b22      	cmp	r3, #34	; 0x22
 8002ec0:	d11d      	bne.n	8002efe <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <jsmn_parse_string+0x3c>
        return 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e0ea      	b.n	80030a2 <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ece:	6839      	ldr	r1, [r7, #0]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff fed6 	bl	8002c82 <jsmn_alloc_token>
 8002ed6:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <jsmn_parse_string+0x5a>
        parser->pos = start;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	e0db      	b.n	80030a2 <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	6938      	ldr	r0, [r7, #16]
 8002ef6:	f7ff feec 	bl	8002cd2 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e0d1      	b.n	80030a2 <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b5c      	cmp	r3, #92	; 0x5c
 8002f02:	f040 80b4 	bne.w	800306e <jsmn_parse_string+0x1de>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	f240 80ad 	bls.w	800306e <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b75      	cmp	r3, #117	; 0x75
 8002f2a:	f300 809a 	bgt.w	8003062 <jsmn_parse_string+0x1d2>
 8002f2e:	2b5c      	cmp	r3, #92	; 0x5c
 8002f30:	da06      	bge.n	8002f40 <jsmn_parse_string+0xb0>
 8002f32:	2b22      	cmp	r3, #34	; 0x22
 8002f34:	f000 809d 	beq.w	8003072 <jsmn_parse_string+0x1e2>
 8002f38:	2b2f      	cmp	r3, #47	; 0x2f
 8002f3a:	f000 809a 	beq.w	8003072 <jsmn_parse_string+0x1e2>
 8002f3e:	e090      	b.n	8003062 <jsmn_parse_string+0x1d2>
 8002f40:	3b5c      	subs	r3, #92	; 0x5c
 8002f42:	2b19      	cmp	r3, #25
 8002f44:	f200 808d 	bhi.w	8003062 <jsmn_parse_string+0x1d2>
 8002f48:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <jsmn_parse_string+0xc0>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08003073 	.word	0x08003073
 8002f54:	08003063 	.word	0x08003063
 8002f58:	08003063 	.word	0x08003063
 8002f5c:	08003063 	.word	0x08003063
 8002f60:	08003063 	.word	0x08003063
 8002f64:	08003063 	.word	0x08003063
 8002f68:	08003073 	.word	0x08003073
 8002f6c:	08003063 	.word	0x08003063
 8002f70:	08003063 	.word	0x08003063
 8002f74:	08003063 	.word	0x08003063
 8002f78:	08003073 	.word	0x08003073
 8002f7c:	08003063 	.word	0x08003063
 8002f80:	08003063 	.word	0x08003063
 8002f84:	08003063 	.word	0x08003063
 8002f88:	08003063 	.word	0x08003063
 8002f8c:	08003063 	.word	0x08003063
 8002f90:	08003063 	.word	0x08003063
 8002f94:	08003063 	.word	0x08003063
 8002f98:	08003073 	.word	0x08003073
 8002f9c:	08003063 	.word	0x08003063
 8002fa0:	08003063 	.word	0x08003063
 8002fa4:	08003063 	.word	0x08003063
 8002fa8:	08003073 	.word	0x08003073
 8002fac:	08003063 	.word	0x08003063
 8002fb0:	08003073 	.word	0x08003073
 8002fb4:	08002fb9 	.word	0x08002fb9
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e037      	b.n	8003038 <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	4413      	add	r3, r2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b2f      	cmp	r3, #47	; 0x2f
 8002fd4:	d906      	bls.n	8002fe4 <jsmn_parse_string+0x154>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b39      	cmp	r3, #57	; 0x39
 8002fe2:	d921      	bls.n	8003028 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d906      	bls.n	8003000 <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b46      	cmp	r3, #70	; 0x46
 8002ffe:	d913      	bls.n	8003028 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800300a:	2b60      	cmp	r3, #96	; 0x60
 800300c:	d906      	bls.n	800301c <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b66      	cmp	r3, #102	; 0x66
 800301a:	d905      	bls.n	8003028 <jsmn_parse_string+0x198>
            parser->pos = start;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8003022:	f06f 0301 	mvn.w	r3, #1
 8003026:	e03c      	b.n	80030a2 <jsmn_parse_string+0x212>
          }
          parser->pos++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	601a      	str	r2, [r3, #0]
             i++) {
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b03      	cmp	r3, #3
 800303c:	dc0b      	bgt.n	8003056 <jsmn_parse_string+0x1c6>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d906      	bls.n	8003056 <jsmn_parse_string+0x1c6>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4413      	add	r3, r2
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1b8      	bne.n	8002fc8 <jsmn_parse_string+0x138>
        }
        parser->pos--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	1e5a      	subs	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]
        break;
 8003060:	e008      	b.n	8003074 <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8003068:	f06f 0301 	mvn.w	r3, #1
 800306c:	e019      	b.n	80030a2 <jsmn_parse_string+0x212>
      }
    }
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <jsmn_parse_string+0x1e4>
        break;
 8003072:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d907      	bls.n	8003098 <jsmn_parse_string+0x208>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f47f af0c 	bne.w	8002eb0 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 800309e:	f06f 0302 	mvn.w	r3, #2
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop

080030ac <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80030c0:	e1bf      	b.n	8003442 <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
 80030d0:	2b7d      	cmp	r3, #125	; 0x7d
 80030d2:	f000 80b9 	beq.w	8003248 <jsmn_parse+0x19c>
 80030d6:	2b7d      	cmp	r3, #125	; 0x7d
 80030d8:	f300 8181 	bgt.w	80033de <jsmn_parse+0x332>
 80030dc:	2b7b      	cmp	r3, #123	; 0x7b
 80030de:	d07c      	beq.n	80031da <jsmn_parse+0x12e>
 80030e0:	2b7b      	cmp	r3, #123	; 0x7b
 80030e2:	f300 817c 	bgt.w	80033de <jsmn_parse+0x332>
 80030e6:	2b5d      	cmp	r3, #93	; 0x5d
 80030e8:	f000 80ae 	beq.w	8003248 <jsmn_parse+0x19c>
 80030ec:	2b5d      	cmp	r3, #93	; 0x5d
 80030ee:	f300 8176 	bgt.w	80033de <jsmn_parse+0x332>
 80030f2:	2b3a      	cmp	r3, #58	; 0x3a
 80030f4:	dc6e      	bgt.n	80031d4 <jsmn_parse+0x128>
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	f2c0 8171 	blt.w	80033de <jsmn_parse+0x332>
 80030fc:	3b09      	subs	r3, #9
 80030fe:	2b31      	cmp	r3, #49	; 0x31
 8003100:	f200 816d 	bhi.w	80033de <jsmn_parse+0x332>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <jsmn_parse+0x60>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	08003423 	.word	0x08003423
 8003110:	08003423 	.word	0x08003423
 8003114:	080033df 	.word	0x080033df
 8003118:	080033df 	.word	0x080033df
 800311c:	08003423 	.word	0x08003423
 8003120:	080033df 	.word	0x080033df
 8003124:	080033df 	.word	0x080033df
 8003128:	080033df 	.word	0x080033df
 800312c:	080033df 	.word	0x080033df
 8003130:	080033df 	.word	0x080033df
 8003134:	080033df 	.word	0x080033df
 8003138:	080033df 	.word	0x080033df
 800313c:	080033df 	.word	0x080033df
 8003140:	080033df 	.word	0x080033df
 8003144:	080033df 	.word	0x080033df
 8003148:	080033df 	.word	0x080033df
 800314c:	080033df 	.word	0x080033df
 8003150:	080033df 	.word	0x080033df
 8003154:	080033df 	.word	0x080033df
 8003158:	080033df 	.word	0x080033df
 800315c:	080033df 	.word	0x080033df
 8003160:	080033df 	.word	0x080033df
 8003164:	080033df 	.word	0x080033df
 8003168:	08003423 	.word	0x08003423
 800316c:	080033df 	.word	0x080033df
 8003170:	080032fd 	.word	0x080032fd
 8003174:	080033df 	.word	0x080033df
 8003178:	080033df 	.word	0x080033df
 800317c:	080033df 	.word	0x080033df
 8003180:	080033df 	.word	0x080033df
 8003184:	080033df 	.word	0x080033df
 8003188:	080033df 	.word	0x080033df
 800318c:	080033df 	.word	0x080033df
 8003190:	080033df 	.word	0x080033df
 8003194:	080033df 	.word	0x080033df
 8003198:	08003351 	.word	0x08003351
 800319c:	080033df 	.word	0x080033df
 80031a0:	080033df 	.word	0x080033df
 80031a4:	080033df 	.word	0x080033df
 80031a8:	080033df 	.word	0x080033df
 80031ac:	080033df 	.word	0x080033df
 80031b0:	080033df 	.word	0x080033df
 80031b4:	080033df 	.word	0x080033df
 80031b8:	080033df 	.word	0x080033df
 80031bc:	080033df 	.word	0x080033df
 80031c0:	080033df 	.word	0x080033df
 80031c4:	080033df 	.word	0x080033df
 80031c8:	080033df 	.word	0x080033df
 80031cc:	080033df 	.word	0x080033df
 80031d0:	08003343 	.word	0x08003343
 80031d4:	2b5b      	cmp	r3, #91	; 0x5b
 80031d6:	f040 8102 	bne.w	80033de <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	3301      	adds	r3, #1
 80031de:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 811f 	beq.w	8003426 <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 80031e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff fd48 	bl	8002c82 <jsmn_alloc_token>
 80031f2:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295
 80031fe:	e14f      	b.n	80034a0 <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d00a      	beq.n	8003220 <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	4413      	add	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8003220:	7ffb      	ldrb	r3, [r7, #31]
 8003222:	2b7b      	cmp	r3, #123	; 0x7b
 8003224:	d101      	bne.n	800322a <jsmn_parse+0x17e>
 8003226:	2201      	movs	r2, #1
 8003228:	e000      	b.n	800322c <jsmn_parse+0x180>
 800322a:	2202      	movs	r2, #2
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	461a      	mov	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	609a      	str	r2, [r3, #8]
      break;
 8003246:	e0f7      	b.n	8003438 <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80ed 	beq.w	800342a <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	2b7d      	cmp	r3, #125	; 0x7d
 8003254:	d101      	bne.n	800325a <jsmn_parse+0x1ae>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <jsmn_parse+0x1b0>
 800325a:	2302      	movs	r3, #2
 800325c:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	e024      	b.n	80032b2 <jsmn_parse+0x206>
        token = &tokens[i];
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4413      	add	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d017      	beq.n	80032ac <jsmn_parse+0x200>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d112      	bne.n	80032ac <jsmn_parse+0x200>
          if (token->type != type) {
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	7fba      	ldrb	r2, [r7, #30]
 800328c:	429a      	cmp	r2, r3
 800328e:	d002      	beq.n	8003296 <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 8003290:	f06f 0301 	mvn.w	r3, #1
 8003294:	e104      	b.n	80034a0 <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	461a      	mov	r2, r3
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	609a      	str	r2, [r3, #8]
          break;
 80032aa:	e005      	b.n	80032b8 <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	3b01      	subs	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	dad7      	bge.n	8003268 <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d119      	bne.n	80032f4 <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 80032c0:	f06f 0301 	mvn.w	r3, #1
 80032c4:	e0ec      	b.n	80034a0 <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4413      	add	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d009      	beq.n	80032ee <jsmn_parse+0x242>
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d104      	bne.n	80032ee <jsmn_parse+0x242>
          parser->toksuper = i;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e8:	609a      	str	r2, [r3, #8]
          break;
 80032ea:	bf00      	nop
        }
      }
#endif
      break;
 80032ec:	e0a4      	b.n	8003438 <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	3b01      	subs	r3, #1
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	dae5      	bge.n	80032c6 <jsmn_parse+0x21a>
      break;
 80032fa:	e09d      	b.n	8003438 <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7ff fdc2 	bl	8002e90 <jsmn_parse_string>
 800330c:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da01      	bge.n	8003318 <jsmn_parse+0x26c>
        return r;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	e0c3      	b.n	80034a0 <jsmn_parse+0x3f4>
      }
      count++;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	3301      	adds	r3, #1
 800331c:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	f000 8082 	beq.w	800342e <jsmn_parse+0x382>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d07e      	beq.n	800342e <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	4413      	add	r3, r2
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	3201      	adds	r2, #1
 800333e:	60da      	str	r2, [r3, #12]
      }
      break;
 8003340:	e075      	b.n	800342e <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	461a      	mov	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	609a      	str	r2, [r3, #8]
      break;
 800334e:	e073      	b.n	8003438 <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d06d      	beq.n	8003432 <jsmn_parse+0x386>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d068      	beq.n	8003432 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	4413      	add	r3, r2
 800336a:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 800336c:	2b02      	cmp	r3, #2
 800336e:	d060      	beq.n	8003432 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 800337c:	2b01      	cmp	r3, #1
 800337e:	d058      	beq.n	8003432 <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	3b01      	subs	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	e025      	b.n	80033d6 <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	4413      	add	r3, r2
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d006      	beq.n	80033a6 <jsmn_parse+0x2fa>
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d114      	bne.n	80033d0 <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d00c      	beq.n	80033d0 <jsmn_parse+0x324>
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d104      	bne.n	80033d0 <jsmn_parse+0x324>
              parser->toksuper = i;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	609a      	str	r2, [r3, #8]
              break;
 80033cc:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 80033ce:	e030      	b.n	8003432 <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	3b01      	subs	r3, #1
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	dad6      	bge.n	800338a <jsmn_parse+0x2de>
      break;
 80033dc:	e029      	b.n	8003432 <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff fc8d 	bl	8002d08 <jsmn_parse_primitive>
 80033ee:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	da01      	bge.n	80033fa <jsmn_parse+0x34e>
        return r;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	e052      	b.n	80034a0 <jsmn_parse+0x3f4>
      }
      count++;
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	3301      	adds	r3, #1
 80033fe:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d015      	beq.n	8003436 <jsmn_parse+0x38a>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	4413      	add	r3, r2
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	3201      	adds	r2, #1
 800341e:	60da      	str	r2, [r3, #12]
      }
      break;
 8003420:	e009      	b.n	8003436 <jsmn_parse+0x38a>
      break;
 8003422:	bf00      	nop
 8003424:	e008      	b.n	8003438 <jsmn_parse+0x38c>
        break;
 8003426:	bf00      	nop
 8003428:	e006      	b.n	8003438 <jsmn_parse+0x38c>
        break;
 800342a:	bf00      	nop
 800342c:	e004      	b.n	8003438 <jsmn_parse+0x38c>
      break;
 800342e:	bf00      	nop
 8003430:	e002      	b.n	8003438 <jsmn_parse+0x38c>
      break;
 8003432:	bf00      	nop
 8003434:	e000      	b.n	8003438 <jsmn_parse+0x38c>
      break;
 8003436:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d907      	bls.n	800345c <jsmn_parse+0x3b0>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	4413      	add	r3, r2
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f ae33 	bne.w	80030c2 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01d      	beq.n	800349e <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	e015      	b.n	8003498 <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	4413      	add	r3, r2
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d00a      	beq.n	8003492 <jsmn_parse+0x3e6>
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	4413      	add	r3, r2
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d102      	bne.n	8003492 <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 800348c:	f06f 0302 	mvn.w	r3, #2
 8003490:	e006      	b.n	80034a0 <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	3b01      	subs	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	dae6      	bge.n	800346c <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 800349e:	6a3b      	ldr	r3, [r7, #32]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3728      	adds	r7, #40	; 0x28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f04f 32ff 	mov.w	r2, #4294967295
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <jsoneq>:
static void *valid_connection;
//static char last_user[USER_PASS_BUFSIZE];

char buf_data[USER_PASS_BUFSIZE];

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d11e      	bne.n	8003522 <jsoneq+0x52>
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fc fe9d 	bl	8000224 <strlen>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4619      	mov	r1, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	4299      	cmp	r1, r3
 80034fa:	d112      	bne.n	8003522 <jsoneq+0x52>
			strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	461a      	mov	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1898      	adds	r0, r3, r2
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	f018 f9c1 	bl	801b89a <strncmp>
 8003518:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <jsoneq+0x52>
		return 0;
 800351e:	2300      	movs	r3, #0
 8003520:	e001      	b.n	8003526 <jsoneq+0x56>
	}
	return -1;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <httpd_post_begin>:
err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request, u16_t http_request_len, int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	807b      	strh	r3, [r7, #2]
	memset(buf_data,0,sizeof(buf_data));
 800353e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003542:	2100      	movs	r1, #0
 8003544:	4813      	ldr	r0, [pc, #76]	; (8003594 <httpd_post_begin+0x64>)
 8003546:	f017 fe91 	bl	801b26c <memset>
	LWIP_UNUSED_ARG(connection);
	LWIP_UNUSED_ARG(http_request);
	LWIP_UNUSED_ARG(http_request_len);
	LWIP_UNUSED_ARG(content_len);
	LWIP_UNUSED_ARG(post_auto_wnd);
	if (!memcmp(uri, "/info.html", 10)) {
 800354a:	220a      	movs	r2, #10
 800354c:	4912      	ldr	r1, [pc, #72]	; (8003598 <httpd_post_begin+0x68>)
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	f017 fe56 	bl	801b200 <memcmp>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d115      	bne.n	8003586 <httpd_post_begin+0x56>
		if (current_connection != connection) {
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <httpd_post_begin+0x6c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	429a      	cmp	r2, r3
 8003562:	d010      	beq.n	8003586 <httpd_post_begin+0x56>
			current_connection = connection;
 8003564:	4a0d      	ldr	r2, [pc, #52]	; (800359c <httpd_post_begin+0x6c>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6013      	str	r3, [r2, #0]
			valid_connection = NULL;
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <httpd_post_begin+0x70>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
			/* default page is "login failed" */
			snprintf(response_uri, response_uri_len, "/info.html");
 8003570:	8c3b      	ldrh	r3, [r7, #32]
 8003572:	4a09      	ldr	r2, [pc, #36]	; (8003598 <httpd_post_begin+0x68>)
 8003574:	4619      	mov	r1, r3
 8003576:	69f8      	ldr	r0, [r7, #28]
 8003578:	f018 f92e 	bl	801b7d8 <snprintf>
			/* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
			*post_auto_wnd = 1;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
			return ERR_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e001      	b.n	800358a <httpd_post_begin+0x5a>
		}
	}
	return ERR_VAL;
 8003586:	f06f 0305 	mvn.w	r3, #5
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	2000534c 	.word	0x2000534c
 8003598:	08024610 	.word	0x08024610
 800359c:	20000d14 	.word	0x20000d14
 80035a0:	20000d18 	.word	0x20000d18

080035a4 <httpd_post_receive_data>:

err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 80035aa:	b082      	sub	sp, #8
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	4b78      	ldr	r3, [pc, #480]	; (8003790 <httpd_post_receive_data+0x1ec>)
 80035b0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80035b4:	4413      	add	r3, r2
 80035b6:	6018      	str	r0, [r3, #0]
 80035b8:	463b      	mov	r3, r7
 80035ba:	6019      	str	r1, [r3, #0]
	err_t ret;

	LWIP_ASSERT("NULL pbuf", p != NULL);
 80035bc:	463b      	mov	r3, r7
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <httpd_post_receive_data+0x2c>
 80035c4:	4b73      	ldr	r3, [pc, #460]	; (8003794 <httpd_post_receive_data+0x1f0>)
 80035c6:	2239      	movs	r2, #57	; 0x39
 80035c8:	4973      	ldr	r1, [pc, #460]	; (8003798 <httpd_post_receive_data+0x1f4>)
 80035ca:	4874      	ldr	r0, [pc, #464]	; (800379c <httpd_post_receive_data+0x1f8>)
 80035cc:	f018 f8d4 	bl	801b778 <printf>
	strncpy(buf_data, p->payload, p->len);
 80035d0:	463b      	mov	r3, r7
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	463b      	mov	r3, r7
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	895b      	ldrh	r3, [r3, #10]
 80035dc:	461a      	mov	r2, r3
 80035de:	4870      	ldr	r0, [pc, #448]	; (80037a0 <httpd_post_receive_data+0x1fc>)
 80035e0:	f018 f96d 	bl	801b8be <strncpy>
	if (current_connection == connection) {
 80035e4:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <httpd_post_receive_data+0x200>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b69      	ldr	r3, [pc, #420]	; (8003790 <httpd_post_receive_data+0x1ec>)
 80035ea:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80035ee:	440b      	add	r3, r1
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f040 819d 	bne.w	8003932 <httpd_post_receive_data+0x38e>
		jsmn_parser parser;
		jsmntok_t t[512]; /* We expect no more than 512 JSON tokens */
		jsmn_init(&parser);
 80035f8:	f242 030c 	movw	r3, #8204	; 0x200c
 80035fc:	443b      	add	r3, r7
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff52 	bl	80034a8 <jsmn_init>

		int tokens = jsmn_parse(&parser, buf_data, strlen(buf_data), t, 128);
 8003604:	4866      	ldr	r0, [pc, #408]	; (80037a0 <httpd_post_receive_data+0x1fc>)
 8003606:	f7fc fe0d 	bl	8000224 <strlen>
 800360a:	4602      	mov	r2, r0
 800360c:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <httpd_post_receive_data+0x204>)
 800360e:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 8003612:	440b      	add	r3, r1
 8003614:	f242 000c 	movw	r0, #8204	; 0x200c
 8003618:	4438      	add	r0, r7
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	9100      	str	r1, [sp, #0]
 800361e:	4960      	ldr	r1, [pc, #384]	; (80037a0 <httpd_post_receive_data+0x1fc>)
 8003620:	f7ff fd44 	bl	80030ac <jsmn_parse>
 8003624:	f242 0334 	movw	r3, #8244	; 0x2034
 8003628:	443b      	add	r3, r7
 800362a:	6018      	str	r0, [r3, #0]
		for (int i = 0; i<tokens; i++){
 800362c:	2300      	movs	r3, #0
 800362e:	f242 0238 	movw	r2, #8248	; 0x2038
 8003632:	443a      	add	r2, r7
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e143      	b.n	80038c0 <httpd_post_receive_data+0x31c>
			if (jsoneq(buf_data, &t[i], "IPaddress") == 0) {
 8003638:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <httpd_post_receive_data+0x204>)
 800363a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800363e:	4413      	add	r3, r2
 8003640:	f242 0238 	movw	r2, #8248	; 0x2038
 8003644:	443a      	add	r2, r7
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	4413      	add	r3, r2
 800364c:	4a57      	ldr	r2, [pc, #348]	; (80037ac <httpd_post_receive_data+0x208>)
 800364e:	4619      	mov	r1, r3
 8003650:	4853      	ldr	r0, [pc, #332]	; (80037a0 <httpd_post_receive_data+0x1fc>)
 8003652:	f7ff ff3d 	bl	80034d0 <jsoneq>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d168      	bne.n	800372e <httpd_post_receive_data+0x18a>
				buf_data[t[i+1].end] = '\0';
 800365c:	f242 0338 	movw	r3, #8248	; 0x2038
 8003660:	443b      	add	r3, r7
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <httpd_post_receive_data+0x204>)
 8003668:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 800366c:	440b      	add	r3, r1
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	4413      	add	r3, r2
 8003672:	3308      	adds	r3, #8
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a4a      	ldr	r2, [pc, #296]	; (80037a0 <httpd_post_receive_data+0x1fc>)
 8003678:	2100      	movs	r1, #0
 800367a:	54d1      	strb	r1, [r2, r3]
				memset(user_info.ip,0,16);
 800367c:	2210      	movs	r2, #16
 800367e:	2100      	movs	r1, #0
 8003680:	484b      	ldr	r0, [pc, #300]	; (80037b0 <httpd_post_receive_data+0x20c>)
 8003682:	f017 fdf3 	bl	801b26c <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 8003686:	2310      	movs	r3, #16
 8003688:	f242 0220 	movw	r2, #8224	; 0x2020
 800368c:	443a      	add	r2, r7
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	f242 0338 	movw	r3, #8248	; 0x2038
 8003694:	443b      	add	r3, r7
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <httpd_post_receive_data+0x204>)
 800369c:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80036a0:	440b      	add	r3, r1
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	3308      	adds	r3, #8
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	f242 0338 	movw	r3, #8248	; 0x2038
 80036ae:	443b      	add	r3, r7
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <httpd_post_receive_data+0x204>)
 80036b6:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 80036ba:	4403      	add	r3, r0
 80036bc:	0109      	lsls	r1, r1, #4
 80036be:	440b      	add	r3, r1
 80036c0:	3304      	adds	r3, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f242 021c 	movw	r2, #8220	; 0x201c
 80036ca:	443a      	add	r2, r7
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	f242 031c 	movw	r3, #8220	; 0x201c
 80036d2:	443b      	add	r3, r7
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	f242 0320 	movw	r3, #8224	; 0x2020
 80036da:	443b      	add	r3, r7
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4293      	cmp	r3, r2
 80036e0:	bfa8      	it	ge
 80036e2:	4613      	movge	r3, r2
 80036e4:	f242 0218 	movw	r2, #8216	; 0x2018
 80036e8:	443a      	add	r2, r7
 80036ea:	6013      	str	r3, [r2, #0]
				strncpy(user_info.ip,&buf_data[t[i+1].start],len);
 80036ec:	f242 0338 	movw	r3, #8248	; 0x2038
 80036f0:	443b      	add	r3, r7
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <httpd_post_receive_data+0x204>)
 80036f8:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80036fc:	440b      	add	r3, r1
 80036fe:	0112      	lsls	r2, r2, #4
 8003700:	4413      	add	r3, r2
 8003702:	3304      	adds	r3, #4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <httpd_post_receive_data+0x1fc>)
 8003708:	4413      	add	r3, r2
 800370a:	f242 0218 	movw	r2, #8216	; 0x2018
 800370e:	443a      	add	r2, r7
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	4619      	mov	r1, r3
 8003714:	4826      	ldr	r0, [pc, #152]	; (80037b0 <httpd_post_receive_data+0x20c>)
 8003716:	f018 f8d2 	bl	801b8be <strncpy>
				i++;
 800371a:	f242 0338 	movw	r3, #8248	; 0x2038
 800371e:	443b      	add	r3, r7
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3301      	adds	r3, #1
 8003724:	f242 0238 	movw	r2, #8248	; 0x2038
 8003728:	443a      	add	r2, r7
 800372a:	6013      	str	r3, [r2, #0]
				continue;
 800372c:	e0bf      	b.n	80038ae <httpd_post_receive_data+0x30a>
			}
			if (jsoneq(buf_data, &t[i], "Timezone") == 0) {
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <httpd_post_receive_data+0x204>)
 8003730:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003734:	4413      	add	r3, r2
 8003736:	f242 0238 	movw	r2, #8248	; 0x2038
 800373a:	443a      	add	r2, r7
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	0112      	lsls	r2, r2, #4
 8003740:	4413      	add	r3, r2
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <httpd_post_receive_data+0x210>)
 8003744:	4619      	mov	r1, r3
 8003746:	4816      	ldr	r0, [pc, #88]	; (80037a0 <httpd_post_receive_data+0x1fc>)
 8003748:	f7ff fec2 	bl	80034d0 <jsoneq>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d132      	bne.n	80037b8 <httpd_post_receive_data+0x214>
				user_info.zone = atoi(&buf_data[t[i+1].start]);
 8003752:	f242 0338 	movw	r3, #8248	; 0x2038
 8003756:	443b      	add	r3, r7
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <httpd_post_receive_data+0x204>)
 800375e:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 8003762:	440b      	add	r3, r1
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <httpd_post_receive_data+0x1fc>)
 800376e:	4413      	add	r3, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f017 fc27 	bl	801afc4 <atoi>
 8003776:	4603      	mov	r3, r0
 8003778:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <httpd_post_receive_data+0x20c>)
 800377a:	6113      	str	r3, [r2, #16]
				i++;
 800377c:	f242 0338 	movw	r3, #8248	; 0x2038
 8003780:	443b      	add	r3, r7
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	f242 0238 	movw	r2, #8248	; 0x2038
 800378a:	443a      	add	r2, r7
 800378c:	6013      	str	r3, [r2, #0]
				continue;
 800378e:	e08e      	b.n	80038ae <httpd_post_receive_data+0x30a>
 8003790:	ffffdfc4 	.word	0xffffdfc4
 8003794:	0802461c 	.word	0x0802461c
 8003798:	08024634 	.word	0x08024634
 800379c:	08024640 	.word	0x08024640
 80037a0:	2000534c 	.word	0x2000534c
 80037a4:	20000d14 	.word	0x20000d14
 80037a8:	ffffdfc8 	.word	0xffffdfc8
 80037ac:	08024668 	.word	0x08024668
 80037b0:	200050b4 	.word	0x200050b4
 80037b4:	08024674 	.word	0x08024674
			}
			if (jsoneq(buf_data, &t[i], "contacts") == 0) {
 80037b8:	4b67      	ldr	r3, [pc, #412]	; (8003958 <httpd_post_receive_data+0x3b4>)
 80037ba:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80037be:	4413      	add	r3, r2
 80037c0:	f242 0238 	movw	r2, #8248	; 0x2038
 80037c4:	443a      	add	r2, r7
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	4a63      	ldr	r2, [pc, #396]	; (800395c <httpd_post_receive_data+0x3b8>)
 80037ce:	4619      	mov	r1, r3
 80037d0:	4863      	ldr	r0, [pc, #396]	; (8003960 <httpd_post_receive_data+0x3bc>)
 80037d2:	f7ff fe7d 	bl	80034d0 <jsoneq>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d168      	bne.n	80038ae <httpd_post_receive_data+0x30a>
				memset(user_info.contacts,0,INFOLEN);
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	2100      	movs	r1, #0
 80037e0:	4860      	ldr	r0, [pc, #384]	; (8003964 <httpd_post_receive_data+0x3c0>)
 80037e2:	f017 fd43 	bl	801b26c <memset>
				buf_data[t[i+1].end] = '\0';
 80037e6:	f242 0338 	movw	r3, #8248	; 0x2038
 80037ea:	443b      	add	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	4b59      	ldr	r3, [pc, #356]	; (8003958 <httpd_post_receive_data+0x3b4>)
 80037f2:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80037f6:	440b      	add	r3, r1
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	4413      	add	r3, r2
 80037fc:	3308      	adds	r3, #8
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a57      	ldr	r2, [pc, #348]	; (8003960 <httpd_post_receive_data+0x3bc>)
 8003802:	2100      	movs	r1, #0
 8003804:	54d1      	strb	r1, [r2, r3]
				int len = mymin(INFOLEN,t[i+1].end-t[i+1].start);
 8003806:	23ff      	movs	r3, #255	; 0xff
 8003808:	f242 022c 	movw	r2, #8236	; 0x202c
 800380c:	443a      	add	r2, r7
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	f242 0338 	movw	r3, #8248	; 0x2038
 8003814:	443b      	add	r3, r7
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	4b4f      	ldr	r3, [pc, #316]	; (8003958 <httpd_post_receive_data+0x3b4>)
 800381c:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 8003820:	440b      	add	r3, r1
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	4413      	add	r3, r2
 8003826:	3308      	adds	r3, #8
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f242 0338 	movw	r3, #8248	; 0x2038
 800382e:	443b      	add	r3, r7
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1c59      	adds	r1, r3, #1
 8003834:	4b48      	ldr	r3, [pc, #288]	; (8003958 <httpd_post_receive_data+0x3b4>)
 8003836:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 800383a:	4403      	add	r3, r0
 800383c:	0109      	lsls	r1, r1, #4
 800383e:	440b      	add	r3, r1
 8003840:	3304      	adds	r3, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f242 0228 	movw	r2, #8232	; 0x2028
 800384a:	443a      	add	r2, r7
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	f242 0328 	movw	r3, #8232	; 0x2028
 8003852:	443b      	add	r3, r7
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f242 032c 	movw	r3, #8236	; 0x202c
 800385a:	443b      	add	r3, r7
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4293      	cmp	r3, r2
 8003860:	bfa8      	it	ge
 8003862:	4613      	movge	r3, r2
 8003864:	f242 0224 	movw	r2, #8228	; 0x2024
 8003868:	443a      	add	r2, r7
 800386a:	6013      	str	r3, [r2, #0]
				strncpy(user_info.contacts,&buf_data[t[i+1].start],len);
 800386c:	f242 0338 	movw	r3, #8248	; 0x2038
 8003870:	443b      	add	r3, r7
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	4b38      	ldr	r3, [pc, #224]	; (8003958 <httpd_post_receive_data+0x3b4>)
 8003878:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 800387c:	440b      	add	r3, r1
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a36      	ldr	r2, [pc, #216]	; (8003960 <httpd_post_receive_data+0x3bc>)
 8003888:	4413      	add	r3, r2
 800388a:	f242 0224 	movw	r2, #8228	; 0x2024
 800388e:	443a      	add	r2, r7
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4833      	ldr	r0, [pc, #204]	; (8003964 <httpd_post_receive_data+0x3c0>)
 8003896:	f018 f812 	bl	801b8be <strncpy>
				i++;
 800389a:	f242 0338 	movw	r3, #8248	; 0x2038
 800389e:	443b      	add	r3, r7
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	f242 0238 	movw	r2, #8248	; 0x2038
 80038a8:	443a      	add	r2, r7
 80038aa:	6013      	str	r3, [r2, #0]
				continue;
 80038ac:	bf00      	nop
		for (int i = 0; i<tokens; i++){
 80038ae:	f242 0338 	movw	r3, #8248	; 0x2038
 80038b2:	443b      	add	r3, r7
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	f242 0238 	movw	r2, #8248	; 0x2038
 80038bc:	443a      	add	r2, r7
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	f242 0338 	movw	r3, #8248	; 0x2038
 80038c4:	443b      	add	r3, r7
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f242 0334 	movw	r3, #8244	; 0x2034
 80038cc:	443b      	add	r3, r7
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	f6ff aeb1 	blt.w	8003638 <httpd_post_receive_data+0x94>
			}
		}
		ip4_addr_t add;
		inet_aton(user_info.ip, &add);
 80038d6:	f242 0308 	movw	r3, #8200	; 0x2008
 80038da:	443b      	add	r3, r7
 80038dc:	4619      	mov	r1, r3
 80038de:	4822      	ldr	r0, [pc, #136]	; (8003968 <httpd_post_receive_data+0x3c4>)
 80038e0:	f016 f956 	bl	8019b90 <ip4addr_aton>
		setIP(add.addr);
 80038e4:	f242 0308 	movw	r3, #8200	; 0x2008
 80038e8:	443b      	add	r3, r7
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 fbf5 	bl	80090dc <setIP>
        clearFlash();
 80038f2:	f7fd fb55 	bl	8000fa0 <clearFlash>
        int offset=0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f242 0230 	movw	r2, #8240	; 0x2030
 80038fc:	443a      	add	r2, r7
 80038fe:	6013      	str	r3, [r2, #0]
        WriteDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 8003900:	f242 0330 	movw	r3, #8240	; 0x2030
 8003904:	443b      	add	r3, r7
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	f44f 718a 	mov.w	r1, #276	; 0x114
 800390c:	4816      	ldr	r0, [pc, #88]	; (8003968 <httpd_post_receive_data+0x3c4>)
 800390e:	f7fd fb6b 	bl	8000fe8 <WriteDeviceAddressOffset>
        offset+=sizeof(user_info);
 8003912:	f242 0330 	movw	r3, #8240	; 0x2030
 8003916:	443b      	add	r3, r7
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800391e:	f242 0230 	movw	r2, #8240	; 0x2030
 8003922:	443a      	add	r2, r7
 8003924:	6013      	str	r3, [r2, #0]
		/* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       connection is unknown */
		ret = ERR_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	f242 023f 	movw	r2, #8255	; 0x203f
 800392c:	443a      	add	r2, r7
 800392e:	7013      	strb	r3, [r2, #0]
 8003930:	e004      	b.n	800393c <httpd_post_receive_data+0x398>
	} else {
		ret = ERR_VAL;
 8003932:	23fa      	movs	r3, #250	; 0xfa
 8003934:	f242 023f 	movw	r2, #8255	; 0x203f
 8003938:	443a      	add	r2, r7
 800393a:	7013      	strb	r3, [r2, #0]
	}

	/* this function must ALWAYS free the pbuf it is passed or it will leak memory */
	pbuf_free(p);
 800393c:	463b      	mov	r3, r7
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	f00d fbb4 	bl	80110ac <pbuf_free>

	return ret;
 8003944:	f242 033f 	movw	r3, #8255	; 0x203f
 8003948:	443b      	add	r3, r7
 800394a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800394e:	4618      	mov	r0, r3
 8003950:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	ffffdfc8 	.word	0xffffdfc8
 800395c:	08024680 	.word	0x08024680
 8003960:	2000534c 	.word	0x2000534c
 8003964:	200050c8 	.word	0x200050c8
 8003968:	200050b4 	.word	0x200050b4

0800396c <httpd_post_finished>:

void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/404.html");
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <httpd_post_finished+0x50>)
 800397e:	4619      	mov	r1, r3
 8003980:	68b8      	ldr	r0, [r7, #8]
 8003982:	f017 ff29 	bl	801b7d8 <snprintf>
	if (current_connection == connection) {
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <httpd_post_finished+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d110      	bne.n	80039b2 <httpd_post_finished+0x46>
		if (valid_connection == connection) {
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <httpd_post_finished+0x58>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	429a      	cmp	r2, r3
 8003998:	d105      	bne.n	80039a6 <httpd_post_finished+0x3a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/info.html");
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <httpd_post_finished+0x5c>)
 800399e:	4619      	mov	r1, r3
 80039a0:	68b8      	ldr	r0, [r7, #8]
 80039a2:	f017 ff19 	bl	801b7d8 <snprintf>
		}
		current_connection = NULL;
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <httpd_post_finished+0x54>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <httpd_post_finished+0x58>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
	}
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	0802468c 	.word	0x0802468c
 80039c0:	20000d14 	.word	0x20000d14
 80039c4:	20000d18 	.word	0x20000d18
 80039c8:	08024610 	.word	0x08024610

080039cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_MspInit+0x4c>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a10      	ldr	r2, [pc, #64]	; (8003a18 <HAL_MspInit+0x4c>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <HAL_MspInit+0x4c>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_MspInit+0x4c>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_MspInit+0x4c>)
 80039f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f4:	6453      	str	r3, [r2, #68]	; 0x44
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_MspInit+0x4c>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	210f      	movs	r1, #15
 8003a06:	f06f 0001 	mvn.w	r0, #1
 8003a0a:	f000 fb2f 	bl	800406c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <HAL_RTC_MspInit+0x2c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d105      	bne.n	8003a3a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <HAL_RTC_MspInit+0x30>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a06      	ldr	r2, [pc, #24]	; (8003a4c <HAL_RTC_MspInit+0x30>)
 8003a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40002800 	.word	0x40002800
 8003a4c:	40023800 	.word	0x40023800

08003a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	; 0x30
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 031c 	add.w	r3, r7, #28
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a36      	ldr	r2, [pc, #216]	; (8003b48 <HAL_UART_MspInit+0xf8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d130      	bne.n	8003ad4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4a35      	ldr	r2, [pc, #212]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7e:	4b33      	ldr	r3, [pc, #204]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a8a:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003a90:	f043 0320 	orr.w	r3, r3, #32
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003aa2:	23c0      	movs	r3, #192	; 0xc0
 8003aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ab6:	f107 031c 	add.w	r3, r7, #28
 8003aba:	4619      	mov	r1, r3
 8003abc:	4824      	ldr	r0, [pc, #144]	; (8003b50 <HAL_UART_MspInit+0x100>)
 8003abe:	f001 fe1d 	bl	80056fc <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2105      	movs	r1, #5
 8003ac6:	2052      	movs	r0, #82	; 0x52
 8003ac8:	f000 fad0 	bl	800406c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003acc:	2052      	movs	r0, #82	; 0x52
 8003ace:	f000 fae9 	bl	80040a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003ad2:	e034      	b.n	8003b3e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_UART_MspInit+0x104>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d12f      	bne.n	8003b3e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003ae4:	f043 0320 	orr.w	r3, r3, #32
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_UART_MspInit+0xfc>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003b0e:	23c0      	movs	r3, #192	; 0xc0
 8003b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b12:	2302      	movs	r3, #2
 8003b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b1e:	2308      	movs	r3, #8
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b22:	f107 031c 	add.w	r3, r7, #28
 8003b26:	4619      	mov	r1, r3
 8003b28:	480b      	ldr	r0, [pc, #44]	; (8003b58 <HAL_UART_MspInit+0x108>)
 8003b2a:	f001 fde7 	bl	80056fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2105      	movs	r1, #5
 8003b32:	2047      	movs	r0, #71	; 0x47
 8003b34:	f000 fa9a 	bl	800406c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b38:	2047      	movs	r0, #71	; 0x47
 8003b3a:	f000 fab3 	bl	80040a4 <HAL_NVIC_EnableIRQ>
}
 8003b3e:	bf00      	nop
 8003b40:	3730      	adds	r7, #48	; 0x30
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40007800 	.word	0x40007800
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40021400 	.word	0x40021400
 8003b54:	40011400 	.word	0x40011400
 8003b58:	40020800 	.word	0x40020800

08003b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08c      	sub	sp, #48	; 0x30
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	2036      	movs	r0, #54	; 0x36
 8003b72:	f000 fa7b 	bl	800406c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b76:	2036      	movs	r0, #54	; 0x36
 8003b78:	f000 fa94 	bl	80040a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <HAL_InitTick+0xa0>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <HAL_InitTick+0xa0>)
 8003b82:	f043 0310 	orr.w	r3, r3, #16
 8003b86:	6413      	str	r3, [r2, #64]	; 0x40
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <HAL_InitTick+0xa0>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b94:	f107 0210 	add.w	r2, r7, #16
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 fc66 	bl	8006470 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003ba4:	f002 fc3c 	bl	8006420 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	4a13      	ldr	r2, [pc, #76]	; (8003c00 <HAL_InitTick+0xa4>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0c9b      	lsrs	r3, r3, #18
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_InitTick+0xa8>)
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <HAL_InitTick+0xac>)
 8003bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <HAL_InitTick+0xa8>)
 8003bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bc8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003bca:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <HAL_InitTick+0xa8>)
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_InitTick+0xa8>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_InitTick+0xa8>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003bdc:	4809      	ldr	r0, [pc, #36]	; (8003c04 <HAL_InitTick+0xa8>)
 8003bde:	f003 fb9f 	bl	8007320 <HAL_TIM_Base_Init>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003be8:	4806      	ldr	r0, [pc, #24]	; (8003c04 <HAL_InitTick+0xa8>)
 8003bea:	f003 fbfb 	bl	80073e4 <HAL_TIM_Base_Start_IT>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	e000      	b.n	8003bf4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3730      	adds	r7, #48	; 0x30
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	431bde83 	.word	0x431bde83
 8003c04:	2000554c 	.word	0x2000554c
 8003c08:	40001000 	.word	0x40001000

08003c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c10:	e7fe      	b.n	8003c10 <NMI_Handler+0x4>

08003c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c16:	e7fe      	b.n	8003c16 <HardFault_Handler+0x4>

08003c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c1c:	e7fe      	b.n	8003c1c <MemManage_Handler+0x4>

08003c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c22:	e7fe      	b.n	8003c22 <BusFault_Handler+0x4>

08003c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c28:	e7fe      	b.n	8003c28 <UsageFault_Handler+0x4>

08003c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <TIM6_DAC_IRQHandler+0x10>)
 8003c3e:	f003 fc49 	bl	80074d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	2000554c 	.word	0x2000554c

08003c4c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <ETH_IRQHandler+0x10>)
 8003c52:	f000 fea9 	bl	80049a8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20006ed0 	.word	0x20006ed0

08003c60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <USART6_IRQHandler+0x10>)
 8003c66:	f003 ffd9 	bl	8007c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000527c 	.word	0x2000527c

08003c74 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <UART7_IRQHandler+0x10>)
 8003c7a:	f003 ffcf 	bl	8007c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200051cc 	.word	0x200051cc

08003c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	return 1;
 8003c8c:	2301      	movs	r3, #1
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_kill>:

int _kill(int pid, int sig)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <_kill+0x20>)
 8003ca4:	2216      	movs	r2, #22
 8003ca6:	601a      	str	r2, [r3, #0]
	return -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	2000be5c 	.word	0x2000be5c

08003cbc <_exit>:

void _exit (int status)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ffe5 	bl	8003c98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cce:	e7fe      	b.n	8003cce <_exit+0x12>

08003cd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e00a      	b.n	8003cf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ce2:	f3af 8000 	nop.w
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	60ba      	str	r2, [r7, #8]
 8003cee:	b2ca      	uxtb	r2, r1
 8003cf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	dbf0      	blt.n	8003ce2 <_read+0x12>
	}

return len;
 8003d00:	687b      	ldr	r3, [r7, #4]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
	return -1;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d32:	605a      	str	r2, [r3, #4]
	return 0;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <_isatty>:

int _isatty(int file)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
	return 1;
 8003d4a:	2301      	movs	r3, #1
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
	return 0;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <_sbrk+0x5c>)
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <_sbrk+0x60>)
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <_sbrk+0x64>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <_sbrk+0x64>)
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <_sbrk+0x68>)
 8003d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <_sbrk+0x64>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d205      	bcs.n	8003db0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <_sbrk+0x6c>)
 8003da6:	220c      	movs	r2, #12
 8003da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	e009      	b.n	8003dc4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <_sbrk+0x64>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <_sbrk+0x64>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <_sbrk+0x64>)
 8003dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	20050000 	.word	0x20050000
 8003dd4:	00000400 	.word	0x00000400
 8003dd8:	20000d20 	.word	0x20000d20
 8003ddc:	2000be70 	.word	0x2000be70
 8003de0:	2000be5c 	.word	0x2000be5c

08003de4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <SystemInit+0x20>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <SystemInit+0x20>)
 8003df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e0c:	480d      	ldr	r0, [pc, #52]	; (8003e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e0e:	490e      	ldr	r1, [pc, #56]	; (8003e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e14:	e002      	b.n	8003e1c <LoopCopyDataInit>

08003e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1a:	3304      	adds	r3, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e20:	d3f9      	bcc.n	8003e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e22:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e24:	4c0b      	ldr	r4, [pc, #44]	; (8003e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e28:	e001      	b.n	8003e2e <LoopFillZerobss>

08003e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e2c:	3204      	adds	r2, #4

08003e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e30:	d3fb      	bcc.n	8003e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e32:	f7ff ffd7 	bl	8003de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e36:	f017 f8c9 	bl	801afcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e3a:	f7fd f98d 	bl	8001158 <main>
  bx  lr    
 8003e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e48:	20000a50 	.word	0x20000a50
  ldr r2, =_sidata
 8003e4c:	08029c24 	.word	0x08029c24
  ldr r2, =_sbss
 8003e50:	20000a50 	.word	0x20000a50
  ldr r4, =_ebss
 8003e54:	2000be70 	.word	0x2000be70

08003e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e58:	e7fe      	b.n	8003e58 <ADC_IRQHandler>

08003e5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5e:	2003      	movs	r0, #3
 8003e60:	f000 f8f9 	bl	8004056 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e64:	2000      	movs	r0, #0
 8003e66:	f7ff fe79 	bl	8003b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e6a:	f7ff fdaf 	bl	80039cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_IncTick+0x20>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_IncTick+0x24>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_IncTick+0x24>)
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000024 	.word	0x20000024
 8003e98:	20005598 	.word	0x20005598

08003e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_GetTick+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20005598 	.word	0x20005598

08003eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7ff ffee 	bl	8003e9c <HAL_GetTick>
 8003ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d005      	beq.n	8003eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_Delay+0x44>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eda:	bf00      	nop
 8003edc:	f7ff ffde 	bl	8003e9c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d8f7      	bhi.n	8003edc <HAL_Delay+0x28>
  {
  }
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000024 	.word	0x20000024

08003efc <__NVIC_SetPriorityGrouping>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <__NVIC_SetPriorityGrouping+0x40>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <__NVIC_SetPriorityGrouping+0x44>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f2a:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <__NVIC_SetPriorityGrouping+0x40>)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	60d3      	str	r3, [r2, #12]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00
 8003f40:	05fa0000 	.word	0x05fa0000

08003f44 <__NVIC_GetPriorityGrouping>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__NVIC_GetPriorityGrouping+0x18>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f003 0307 	and.w	r3, r3, #7
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <__NVIC_EnableIRQ>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	db0b      	blt.n	8003f8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	f003 021f 	and.w	r2, r3, #31
 8003f78:	4907      	ldr	r1, [pc, #28]	; (8003f98 <__NVIC_EnableIRQ+0x38>)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2001      	movs	r0, #1
 8003f82:	fa00 f202 	lsl.w	r2, r0, r2
 8003f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000e100 	.word	0xe000e100

08003f9c <__NVIC_SetPriority>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	6039      	str	r1, [r7, #0]
 8003fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	db0a      	blt.n	8003fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	490c      	ldr	r1, [pc, #48]	; (8003fe8 <__NVIC_SetPriority+0x4c>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	0112      	lsls	r2, r2, #4
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fc4:	e00a      	b.n	8003fdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <__NVIC_SetPriority+0x50>)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	440b      	add	r3, r1
 8003fda:	761a      	strb	r2, [r3, #24]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e100 	.word	0xe000e100
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <NVIC_EncodePriority>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f1c3 0307 	rsb	r3, r3, #7
 800400a:	2b04      	cmp	r3, #4
 800400c:	bf28      	it	cs
 800400e:	2304      	movcs	r3, #4
 8004010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3304      	adds	r3, #4
 8004016:	2b06      	cmp	r3, #6
 8004018:	d902      	bls.n	8004020 <NVIC_EncodePriority+0x30>
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3b03      	subs	r3, #3
 800401e:	e000      	b.n	8004022 <NVIC_EncodePriority+0x32>
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43da      	mvns	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	401a      	ands	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004038:	f04f 31ff 	mov.w	r1, #4294967295
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	fa01 f303 	lsl.w	r3, r1, r3
 8004042:	43d9      	mvns	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	4313      	orrs	r3, r2
}
 800404a:	4618      	mov	r0, r3
 800404c:	3724      	adds	r7, #36	; 0x24
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff4c 	bl	8003efc <__NVIC_SetPriorityGrouping>
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800407e:	f7ff ff61 	bl	8003f44 <__NVIC_GetPriorityGrouping>
 8004082:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	6978      	ldr	r0, [r7, #20]
 800408a:	f7ff ffb1 	bl	8003ff0 <NVIC_EncodePriority>
 800408e:	4602      	mov	r2, r0
 8004090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004094:	4611      	mov	r1, r2
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff80 	bl	8003f9c <__NVIC_SetPriority>
}
 800409c:	bf00      	nop
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff ff54 	bl	8003f60 <__NVIC_EnableIRQ>
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040ce:	f7ff fee5 	bl	8003e9c <HAL_GetTick>
 80040d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d008      	beq.n	80040f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2280      	movs	r2, #128	; 0x80
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e052      	b.n	8004198 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0216 	bic.w	r2, r2, #22
 8004100:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004110:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_DMA_Abort+0x62>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0208 	bic.w	r2, r2, #8
 8004130:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004142:	e013      	b.n	800416c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004144:	f7ff feaa 	bl	8003e9c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b05      	cmp	r3, #5
 8004150:	d90c      	bls.n	800416c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2203      	movs	r2, #3
 800415c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e015      	b.n	8004198 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e4      	bne.n	8004144 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417e:	223f      	movs	r2, #63	; 0x3f
 8004180:	409a      	lsls	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d004      	beq.n	80041be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e00c      	b.n	80041d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2205      	movs	r2, #5
 80041c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80041f4:	4ba9      	ldr	r3, [pc, #676]	; (800449c <HAL_ETH_Init+0x2b8>)
 80041f6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e181      	b.n	800450e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f005 f89c 	bl	800935c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004224:	4b9e      	ldr	r3, [pc, #632]	; (80044a0 <HAL_ETH_Init+0x2bc>)
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	4a9d      	ldr	r2, [pc, #628]	; (80044a0 <HAL_ETH_Init+0x2bc>)
 800422a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422e:	6453      	str	r3, [r2, #68]	; 0x44
 8004230:	4b9b      	ldr	r3, [pc, #620]	; (80044a0 <HAL_ETH_Init+0x2bc>)
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800423c:	4b99      	ldr	r3, [pc, #612]	; (80044a4 <HAL_ETH_Init+0x2c0>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a98      	ldr	r2, [pc, #608]	; (80044a4 <HAL_ETH_Init+0x2c0>)
 8004242:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004246:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004248:	4b96      	ldr	r3, [pc, #600]	; (80044a4 <HAL_ETH_Init+0x2c0>)
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	4994      	ldr	r1, [pc, #592]	; (80044a4 <HAL_ETH_Init+0x2c0>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800426e:	f7ff fe15 	bl	8003e9c <HAL_GetTick>
 8004272:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004274:	e011      	b.n	800429a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004276:	f7ff fe11 	bl	8003e9c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004284:	d909      	bls.n	800429a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2203      	movs	r2, #3
 800428a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e139      	b.n	800450e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e4      	bne.n	8004276 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f023 031c 	bic.w	r3, r3, #28
 80042ba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80042bc:	f002 f8a4 	bl	8006408 <HAL_RCC_GetHCLKFreq>
 80042c0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	4a78      	ldr	r2, [pc, #480]	; (80044a8 <HAL_ETH_Init+0x2c4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d908      	bls.n	80042dc <HAL_ETH_Init+0xf8>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	4a77      	ldr	r2, [pc, #476]	; (80044ac <HAL_ETH_Init+0x2c8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d804      	bhi.n	80042dc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f043 0308 	orr.w	r3, r3, #8
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	e027      	b.n	800432c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	4a73      	ldr	r2, [pc, #460]	; (80044ac <HAL_ETH_Init+0x2c8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d908      	bls.n	80042f6 <HAL_ETH_Init+0x112>
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4a6d      	ldr	r2, [pc, #436]	; (800449c <HAL_ETH_Init+0x2b8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d204      	bcs.n	80042f6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f043 030c 	orr.w	r3, r3, #12
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e01a      	b.n	800432c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4a68      	ldr	r2, [pc, #416]	; (800449c <HAL_ETH_Init+0x2b8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d303      	bcc.n	8004306 <HAL_ETH_Init+0x122>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	4a6b      	ldr	r2, [pc, #428]	; (80044b0 <HAL_ETH_Init+0x2cc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d911      	bls.n	800432a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	4a69      	ldr	r2, [pc, #420]	; (80044b0 <HAL_ETH_Init+0x2cc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d908      	bls.n	8004320 <HAL_ETH_Init+0x13c>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	4a68      	ldr	r2, [pc, #416]	; (80044b4 <HAL_ETH_Init+0x2d0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d804      	bhi.n	8004320 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e005      	b.n	800432c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f043 0310 	orr.w	r3, r3, #16
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e000      	b.n	800432c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800432a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004334:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004338:	2100      	movs	r1, #0
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fc17 	bl	8004b6e <HAL_ETH_WritePHYRegister>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800434a:	6939      	ldr	r1, [r7, #16]
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fca3 	bl	8004c98 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0d7      	b.n	800450e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800435e:	20ff      	movs	r0, #255	; 0xff
 8004360:	f7ff fda8 	bl	8003eb4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a5 	beq.w	80044b8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800436e:	f7ff fd95 	bl	8003e9c <HAL_GetTick>
 8004372:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004374:	f107 030c 	add.w	r3, r7, #12
 8004378:	461a      	mov	r2, r3
 800437a:	2101      	movs	r1, #1
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fb8e 	bl	8004a9e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004382:	f7ff fd8b 	bl	8003e9c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d90f      	bls.n	80043b4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004398:	6939      	ldr	r1, [r7, #16]
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fc7c 	bl	8004c98 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e0ac      	b.n	800450e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0da      	beq.n	8004374 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80043be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043c2:	2100      	movs	r1, #0
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fbd2 	bl	8004b6e <HAL_ETH_WritePHYRegister>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80043d4:	6939      	ldr	r1, [r7, #16]
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fc5e 	bl	8004c98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80043e4:	2301      	movs	r3, #1
 80043e6:	e092      	b.n	800450e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80043e8:	f7ff fd58 	bl	8003e9c <HAL_GetTick>
 80043ec:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80043ee:	f107 030c 	add.w	r3, r7, #12
 80043f2:	461a      	mov	r2, r3
 80043f4:	2101      	movs	r1, #1
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fb51 	bl	8004a9e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80043fc:	f7ff fd4e 	bl	8003e9c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d90f      	bls.n	800442e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004412:	6939      	ldr	r1, [r7, #16]
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fc3f 	bl	8004c98 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e06f      	b.n	800450e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0da      	beq.n	80043ee <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	461a      	mov	r2, r3
 800443e:	2110      	movs	r1, #16
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fb2c 	bl	8004a9e <HAL_ETH_ReadPHYRegister>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00b      	beq.n	8004464 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004450:	6939      	ldr	r1, [r7, #16]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fc20 	bl	8004c98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004460:	2301      	movs	r3, #1
 8004462:	e054      	b.n	800450e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	e002      	b.n	800447e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	e035      	b.n	80044fc <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	e030      	b.n	80044fc <HAL_ETH_Init+0x318>
 800449a:	bf00      	nop
 800449c:	03938700 	.word	0x03938700
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40013800 	.word	0x40013800
 80044a8:	01312cff 	.word	0x01312cff
 80044ac:	02160ebf 	.word	0x02160ebf
 80044b0:	05f5e0ff 	.word	0x05f5e0ff
 80044b4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	08db      	lsrs	r3, r3, #3
 80044be:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80044c8:	4313      	orrs	r3, r2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	2100      	movs	r1, #0
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fb4c 	bl	8004b6e <HAL_ETH_WritePHYRegister>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80044e0:	6939      	ldr	r1, [r7, #16]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fbd8 	bl	8004c98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e00c      	b.n	800450e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80044f4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80044f8:	f7ff fcdc 	bl	8003eb4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80044fc:	6939      	ldr	r1, [r7, #16]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fbca 	bl	8004c98 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop

08004518 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_ETH_DMATxDescListInit+0x20>
 8004534:	2302      	movs	r3, #2
 8004536:	e052      	b.n	80045de <HAL_ETH_DMATxDescListInit+0xc6>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e030      	b.n	80045b6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	015b      	lsls	r3, r3, #5
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	4413      	add	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004564:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800456c:	fb02 f303 	mul.w	r3, r2, r3
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	461a      	mov	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	3b01      	subs	r3, #1
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	d208      	bcs.n	80045aa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3301      	adds	r3, #1
 800459c:	015b      	lsls	r3, r3, #5
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	461a      	mov	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e002      	b.n	80045b0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3301      	adds	r3, #1
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3ca      	bcc.n	8004554 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6819      	ldr	r1, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	f241 0310 	movw	r3, #4112	; 0x1010
 80045c8:	440b      	add	r3, r1
 80045ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_ETH_DMARxDescListInit+0x20>
 8004606:	2302      	movs	r3, #2
 8004608:	e056      	b.n	80046b8 <HAL_ETH_DMARxDescListInit+0xce>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e034      	b.n	8004690 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	015b      	lsls	r3, r3, #5
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	4413      	add	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004636:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800463e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	461a      	mov	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	429a      	cmp	r2, r3
 8004670:	d208      	bcs.n	8004684 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	015b      	lsls	r3, r3, #5
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	4413      	add	r3, r2
 800467c:	461a      	mov	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	e002      	b.n	800468a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	3301      	adds	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d3c6      	bcc.n	8004626 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	f241 030c 	movw	r3, #4108	; 0x100c
 80046a2:	440b      	add	r3, r1
 80046a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_ETH_TransmitFrame+0x24>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e0cd      	b.n	8004884 <HAL_ETH_TransmitFrame+0x1c0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800470e:	2301      	movs	r3, #1
 8004710:	e0b8      	b.n	8004884 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	da09      	bge.n	8004730 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2212      	movs	r2, #18
 8004720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0a9      	b.n	8004884 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004736:	4293      	cmp	r3, r2
 8004738:	d915      	bls.n	8004766 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4a54      	ldr	r2, [pc, #336]	; (8004890 <HAL_ETH_TransmitFrame+0x1cc>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	0a9b      	lsrs	r3, r3, #10
 8004744:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_ETH_TransmitFrame+0x1cc>)
 800474a:	fba3 1302 	umull	r1, r3, r3, r2
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	3301      	adds	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e001      	b.n	800476a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8004766:	2301      	movs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d11c      	bne.n	80047aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800477e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800478a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800479a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	461a      	mov	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80047a8:	e04b      	b.n	8004842 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e044      	b.n	800483a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047be:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047d4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047de:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d116      	bne.n	8004818 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80047f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4a25      	ldr	r2, [pc, #148]	; (8004894 <HAL_ETH_TransmitFrame+0x1d0>)
 80047fe:	fb02 f203 	mul.w	r2, r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	4413      	add	r3, r2
 8004806:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800480a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004816:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004826:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	3301      	adds	r3, #1
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3b6      	bcc.n	80047b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	f241 0314 	movw	r3, #4116	; 0x1014
 800484a:	4413      	add	r3, r2
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f241 0314 	movw	r3, #4116	; 0x1014
 800485e:	4413      	add	r3, r2
 8004860:	2204      	movs	r2, #4
 8004862:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	f241 0304 	movw	r3, #4100	; 0x1004
 800486c:	4413      	add	r3, r2
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	ac02b00b 	.word	0xac02b00b
 8004894:	fffffa0c 	.word	0xfffffa0c

08004898 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e074      	b.n	800499c <HAL_ETH_GetReceivedFrame_IT+0x104>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80048c2:	e05a      	b.n	800497a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d8:	d10d      	bne.n	80048f6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
 80048f4:	e041      	b.n	800497a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	629a      	str	r2, [r3, #40]	; 0x28
 800491a:	e02e      	b.n	800497a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	2b01      	cmp	r3, #1
 8004934:	d103      	bne.n	800493e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800494a:	1f1a      	subs	r2, r3, #4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	461a      	mov	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e010      	b.n	800499c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	db02      	blt.n	800498a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d99c      	bls.n	80048c4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	f241 0314 	movw	r3, #4116	; 0x1014
 80049b8:	4413      	add	r3, r2
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d112      	bne.n	80049ea <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f004 fd6b 	bl	80094a0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80049d2:	4413      	add	r3, r2
 80049d4:	2240      	movs	r2, #64	; 0x40
 80049d6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e8:	e01b      	b.n	8004a22 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f241 0314 	movw	r3, #4116	; 0x1014
 80049f2:	4413      	add	r3, r2
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d111      	bne.n	8004a22 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f839 	bl	8004a76 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	f241 0314 	movw	r3, #4116	; 0x1014
 8004a0c:	4413      	add	r3, r2
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f241 0314 	movw	r3, #4116	; 0x1014
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a30:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	f241 0314 	movw	r3, #4116	; 0x1014
 8004a3a:	4413      	add	r3, r2
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	d112      	bne.n	8004a6e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f81e 	bl	8004a8a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	f241 0314 	movw	r3, #4116	; 0x1014
 8004a56:	4413      	add	r3, r2
 8004a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a5c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b82      	cmp	r3, #130	; 0x82
 8004abe:	d101      	bne.n	8004ac4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e050      	b.n	8004b66 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2282      	movs	r2, #130	; 0x82
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 031c 	and.w	r3, r3, #28
 8004ada:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8a1b      	ldrh	r3, [r3, #16]
 8004ae0:	02db      	lsls	r3, r3, #11
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	019b      	lsls	r3, r3, #6
 8004aee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0302 	bic.w	r3, r3, #2
 8004afe:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b10:	f7ff f9c4 	bl	8003e9c <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b16:	e015      	b.n	8004b44 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004b18:	f7ff f9c0 	bl	8003e9c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b26:	d309      	bcc.n	8004b3c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e014      	b.n	8004b66 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e4      	bne.n	8004b18 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	460b      	mov	r3, r1
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b42      	cmp	r3, #66	; 0x42
 8004b8e:	d101      	bne.n	8004b94 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
 8004b92:	e04e      	b.n	8004c32 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2242      	movs	r2, #66	; 0x42
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 031c 	and.w	r3, r3, #28
 8004baa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8a1b      	ldrh	r3, [r3, #16]
 8004bb0:	02db      	lsls	r3, r3, #11
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004bba:	897b      	ldrh	r3, [r7, #10]
 8004bbc:	019b      	lsls	r3, r3, #6
 8004bbe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f043 0302 	orr.w	r3, r3, #2
 8004bce:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bea:	f7ff f957 	bl	8003e9c <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bf0:	e015      	b.n	8004c1e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004bf2:	f7ff f953 	bl	8003e9c <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d309      	bcc.n	8004c16 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e00d      	b.n	8004c32 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e4      	bne.n	8004bf2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_ETH_Start+0x16>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e01f      	b.n	8004c90 <HAL_ETH_Start+0x56>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fa1b 	bl	800509c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa35 	bl	80050d6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fa7f 	bl	8005170 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa4c 	bl	8005110 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fa61 	bl	8005140 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b0b0      	sub	sp, #192	; 0xc0
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ce4:	e001      	b.n	8004cea <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cee:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004d6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d70:	4bab      	ldr	r3, [pc, #684]	; (8005020 <ETH_MACDMAConfig+0x388>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004d7c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004d80:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004d84:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004d8a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004d8e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004d92:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004d98:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004d9c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004da0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004da4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004da8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004dac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004dae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004dc0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004dcc:	2001      	movs	r0, #1
 8004dce:	f7ff f871 	bl	8003eb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004dda:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ddc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004de0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004de2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004de4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004dea:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004df0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004df6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004dfc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004e00:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004e08:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004e0a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e16:	2001      	movs	r0, #1
 8004e18:	f7ff f84c 	bl	8003eb4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e24:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e2e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004e38:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004e44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e48:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004e52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e56:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004e58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004e5c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004e62:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004e64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004e68:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004e6e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004e70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004e74:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004e76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e88:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e94:	2001      	movs	r0, #1
 8004e96:	f7ff f80d 	bl	8003eb4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ea2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004ea4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004ea8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f7fe fff8 	bl	8003eb4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ecc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ed6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004edc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ee0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f00:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004f02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004f16:	2300      	movs	r3, #0
 8004f18:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004f22:	4413      	add	r3, r2
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004f2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <ETH_MACDMAConfig+0x38c>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004f36:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004f38:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004f3a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004f3c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004f3e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004f40:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004f42:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004f44:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004f46:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004f48:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004f4a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004f4e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004f52:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004f56:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004f58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	f241 0318 	movw	r3, #4120	; 0x1018
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	f241 0318 	movw	r3, #4120	; 0x1018
 8004f7a:	4413      	add	r3, r2
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f82:	2001      	movs	r0, #1
 8004f84:	f7fe ff96 	bl	8003eb4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004f90:	4413      	add	r3, r2
 8004f92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f96:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004f9c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004fa0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004fa4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004fa8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fac:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004fae:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004fb2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f7fe ff6f 	bl	8003eb4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004fe2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10d      	bne.n	8005008 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	f241 031c 	movw	r3, #4124	; 0x101c
 8004ff4:	4413      	add	r3, r2
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6811      	ldr	r1, [r2, #0]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <ETH_MACDMAConfig+0x390>)
 8004ffe:	431a      	orrs	r2, r3
 8005000:	f241 031c 	movw	r3, #4124	; 0x101c
 8005004:	440b      	add	r3, r1
 8005006:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	461a      	mov	r2, r3
 800500e:	2100      	movs	r1, #0
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f80b 	bl	800502c <ETH_MACAddressConfig>
}
 8005016:	bf00      	nop
 8005018:	37c0      	adds	r7, #192	; 0xc0
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	ff20810f 	.word	0xff20810f
 8005024:	f8de3f23 	.word	0xf8de3f23
 8005028:	00010040 	.word	0x00010040

0800502c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3305      	adds	r3, #5
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	3204      	adds	r2, #4
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <ETH_MACAddressConfig+0x68>)
 800504e:	4413      	add	r3, r2
 8005050:	461a      	mov	r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3303      	adds	r3, #3
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	061a      	lsls	r2, r3, #24
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3302      	adds	r3, #2
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3301      	adds	r3, #1
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	4313      	orrs	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <ETH_MACAddressConfig+0x6c>)
 800507e:	4413      	add	r3, r2
 8005080:	461a      	mov	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	6013      	str	r3, [r2, #0]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40028040 	.word	0x40028040
 8005098:	40028044 	.word	0x40028044

0800509c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050c0:	2001      	movs	r0, #1
 80050c2:	f7fe fef7 	bl	8003eb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0204 	orr.w	r2, r2, #4
 80050f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f7fe feda 	bl	8003eb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	601a      	str	r2, [r3, #0]
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005120:	4413      	add	r3, r2
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6811      	ldr	r1, [r2, #0]
 8005128:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800512c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005130:	440b      	add	r3, r1
 8005132:	601a      	str	r2, [r3, #0]
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005150:	4413      	add	r3, r2
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6811      	ldr	r1, [r2, #0]
 8005158:	f043 0202 	orr.w	r2, r3, #2
 800515c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005160:	440b      	add	r3, r1
 8005162:	601a      	str	r2, [r3, #0]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	f241 0318 	movw	r3, #4120	; 0x1018
 8005184:	4413      	add	r3, r2
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6811      	ldr	r1, [r2, #0]
 800518c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005190:	f241 0318 	movw	r3, #4120	; 0x1018
 8005194:	440b      	add	r3, r1
 8005196:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f241 0318 	movw	r3, #4120	; 0x1018
 80051a0:	4413      	add	r3, r2
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051a6:	2001      	movs	r0, #1
 80051a8:	f7fe fe84 	bl	8003eb4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80051b6:	440b      	add	r3, r1
 80051b8:	601a      	str	r2, [r3, #0]
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051d6:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_FLASH_Program+0xb0>)
 80051d8:	7d1b      	ldrb	r3, [r3, #20]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_FLASH_Program+0x1e>
 80051de:	2302      	movs	r3, #2
 80051e0:	e043      	b.n	800526a <HAL_FLASH_Program+0xa6>
 80051e2:	4b24      	ldr	r3, [pc, #144]	; (8005274 <HAL_FLASH_Program+0xb0>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051ec:	f000 f878 	bl	80052e0 <FLASH_WaitForLastOperation>
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d133      	bne.n	8005262 <HAL_FLASH_Program+0x9e>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d823      	bhi.n	8005248 <HAL_FLASH_Program+0x84>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <HAL_FLASH_Program+0x44>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005219 	.word	0x08005219
 800520c:	08005225 	.word	0x08005225
 8005210:	08005231 	.word	0x08005231
 8005214:	0800523d 	.word	0x0800523d
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8005218:	783b      	ldrb	r3, [r7, #0]
 800521a:	4619      	mov	r1, r3
 800521c:	68b8      	ldr	r0, [r7, #8]
 800521e:	f000 f921 	bl	8005464 <FLASH_Program_Byte>
        break;
 8005222:	e012      	b.n	800524a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005224:	883b      	ldrh	r3, [r7, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	f000 f8f5 	bl	8005418 <FLASH_Program_HalfWord>
        break;
 800522e:	e00c      	b.n	800524a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	4619      	mov	r1, r3
 8005234:	68b8      	ldr	r0, [r7, #8]
 8005236:	f000 f8c9 	bl	80053cc <FLASH_Program_Word>
        break;
 800523a:	e006      	b.n	800524a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800523c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005240:	68b8      	ldr	r0, [r7, #8]
 8005242:	f000 f88d 	bl	8005360 <FLASH_Program_DoubleWord>
        break;
 8005246:	e000      	b.n	800524a <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8005248:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800524a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800524e:	f000 f847 	bl	80052e0 <FLASH_WaitForLastOperation>
 8005252:	4603      	mov	r3, r0
 8005254:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <HAL_FLASH_Program+0xb4>)
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	4a07      	ldr	r2, [pc, #28]	; (8005278 <HAL_FLASH_Program+0xb4>)
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005262:	4b04      	ldr	r3, [pc, #16]	; (8005274 <HAL_FLASH_Program+0xb0>)
 8005264:	2200      	movs	r2, #0
 8005266:	751a      	strb	r2, [r3, #20]

  return status;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2000559c 	.word	0x2000559c
 8005278:	40023c00 	.word	0x40023c00

0800527c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_FLASH_Unlock+0x38>)
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	da0b      	bge.n	80052a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_FLASH_Unlock+0x38>)
 8005290:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <HAL_FLASH_Unlock+0x3c>)
 8005292:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <HAL_FLASH_Unlock+0x38>)
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <HAL_FLASH_Unlock+0x40>)
 8005298:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_FLASH_Unlock+0x38>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	da01      	bge.n	80052a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80052a6:	79fb      	ldrb	r3, [r7, #7]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40023c00 	.word	0x40023c00
 80052b8:	45670123 	.word	0x45670123
 80052bc:	cdef89ab 	.word	0xcdef89ab

080052c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_FLASH_Lock+0x1c>)
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	4a04      	ldr	r2, [pc, #16]	; (80052dc <HAL_FLASH_Lock+0x1c>)
 80052ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40023c00 	.word	0x40023c00

080052e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <FLASH_WaitForLastOperation+0x78>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80052f2:	f7fe fdd3 	bl	8003e9c <HAL_GetTick>
 80052f6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80052f8:	e010      	b.n	800531c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d00c      	beq.n	800531c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <FLASH_WaitForLastOperation+0x38>
 8005308:	f7fe fdc8 	bl	8003e9c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d201      	bcs.n	800531c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e019      	b.n	8005350 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800531c:	4b0f      	ldr	r3, [pc, #60]	; (800535c <FLASH_WaitForLastOperation+0x7c>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e8      	bne.n	80052fa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <FLASH_WaitForLastOperation+0x7c>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005334:	f000 f8ba 	bl	80054ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e009      	b.n	8005350 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <FLASH_WaitForLastOperation+0x7c>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005348:	4b04      	ldr	r3, [pc, #16]	; (800535c <FLASH_WaitForLastOperation+0x7c>)
 800534a:	2201      	movs	r2, #1
 800534c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
  
}  
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	2000559c 	.word	0x2000559c
 800535c:	40023c00 	.word	0x40023c00

08005360 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800536c:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <FLASH_Program_DoubleWord+0x68>)
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <FLASH_Program_DoubleWord+0x68>)
 8005372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005378:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <FLASH_Program_DoubleWord+0x68>)
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <FLASH_Program_DoubleWord+0x68>)
 800537e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <FLASH_Program_DoubleWord+0x68>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <FLASH_Program_DoubleWord+0x68>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005396:	f3bf 8f6f 	isb	sy
}
 800539a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800539c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	000a      	movs	r2, r1
 80053aa:	2300      	movs	r3, #0
 80053ac:	68f9      	ldr	r1, [r7, #12]
 80053ae:	3104      	adds	r1, #4
 80053b0:	4613      	mov	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80053b4:	f3bf 8f4f 	dsb	sy
}
 80053b8:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40023c00 	.word	0x40023c00

080053cc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <FLASH_Program_Word+0x48>)
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	4a0e      	ldr	r2, [pc, #56]	; (8005414 <FLASH_Program_Word+0x48>)
 80053dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80053e2:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <FLASH_Program_Word+0x48>)
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <FLASH_Program_Word+0x48>)
 80053e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <FLASH_Program_Word+0x48>)
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	4a08      	ldr	r2, [pc, #32]	; (8005414 <FLASH_Program_Word+0x48>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005400:	f3bf 8f4f 	dsb	sy
}
 8005404:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40023c00 	.word	0x40023c00

08005418 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <FLASH_Program_HalfWord+0x48>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <FLASH_Program_HalfWord+0x48>)
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <FLASH_Program_HalfWord+0x48>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <FLASH_Program_HalfWord+0x48>)
 8005436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800543c:	4b08      	ldr	r3, [pc, #32]	; (8005460 <FLASH_Program_HalfWord+0x48>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	4a07      	ldr	r2, [pc, #28]	; (8005460 <FLASH_Program_HalfWord+0x48>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	887a      	ldrh	r2, [r7, #2]
 800544c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800544e:	f3bf 8f4f 	dsb	sy
}
 8005452:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40023c00 	.word	0x40023c00

08005464 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005470:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <FLASH_Program_Byte+0x44>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	4a0c      	ldr	r2, [pc, #48]	; (80054a8 <FLASH_Program_Byte+0x44>)
 8005476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <FLASH_Program_Byte+0x44>)
 800547e:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <FLASH_Program_Byte+0x44>)
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005484:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <FLASH_Program_Byte+0x44>)
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	4a07      	ldr	r2, [pc, #28]	; (80054a8 <FLASH_Program_Byte+0x44>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005496:	f3bf 8f4f 	dsb	sy
}
 800549a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	40023c00 	.word	0x40023c00

080054ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80054b0:	4b21      	ldr	r3, [pc, #132]	; (8005538 <FLASH_SetErrorCode+0x8c>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80054bc:	4b1f      	ldr	r3, [pc, #124]	; (800553c <FLASH_SetErrorCode+0x90>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f043 0320 	orr.w	r3, r3, #32
 80054c4:	4a1d      	ldr	r2, [pc, #116]	; (800553c <FLASH_SetErrorCode+0x90>)
 80054c6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80054c8:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <FLASH_SetErrorCode+0x8c>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <FLASH_SetErrorCode+0x90>)
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f043 0310 	orr.w	r3, r3, #16
 80054dc:	4a17      	ldr	r2, [pc, #92]	; (800553c <FLASH_SetErrorCode+0x90>)
 80054de:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80054e0:	4b15      	ldr	r3, [pc, #84]	; (8005538 <FLASH_SetErrorCode+0x8c>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <FLASH_SetErrorCode+0x90>)
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f043 0308 	orr.w	r3, r3, #8
 80054f4:	4a11      	ldr	r2, [pc, #68]	; (800553c <FLASH_SetErrorCode+0x90>)
 80054f6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <FLASH_SetErrorCode+0x8c>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005504:	4b0d      	ldr	r3, [pc, #52]	; (800553c <FLASH_SetErrorCode+0x90>)
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	4a0b      	ldr	r2, [pc, #44]	; (800553c <FLASH_SetErrorCode+0x90>)
 800550e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8005510:	4b09      	ldr	r3, [pc, #36]	; (8005538 <FLASH_SetErrorCode+0x8c>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800551c:	4b07      	ldr	r3, [pc, #28]	; (800553c <FLASH_SetErrorCode+0x90>)
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	4a05      	ldr	r2, [pc, #20]	; (800553c <FLASH_SetErrorCode+0x90>)
 8005526:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <FLASH_SetErrorCode+0x8c>)
 800552a:	22f2      	movs	r2, #242	; 0xf2
 800552c:	60da      	str	r2, [r3, #12]
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	40023c00 	.word	0x40023c00
 800553c:	2000559c 	.word	0x2000559c

08005540 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005552:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <HAL_FLASHEx_Erase+0xd0>)
 8005554:	7d1b      	ldrb	r3, [r3, #20]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_FLASHEx_Erase+0x1e>
 800555a:	2302      	movs	r3, #2
 800555c:	e053      	b.n	8005606 <HAL_FLASHEx_Erase+0xc6>
 800555e:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <HAL_FLASHEx_Erase+0xd0>)
 8005560:	2201      	movs	r2, #1
 8005562:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005564:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005568:	f7ff feba 	bl	80052e0 <FLASH_WaitForLastOperation>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d143      	bne.n	80055fe <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f04f 32ff 	mov.w	r2, #4294967295
 800557c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d112      	bne.n	80055ac <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f843 	bl	8005618 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005592:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005596:	f7ff fea3 	bl	80052e0 <FLASH_WaitForLastOperation>
 800559a:	4603      	mov	r3, r0
 800559c:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <HAL_FLASHEx_Erase+0xd4>)
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <HAL_FLASHEx_Erase+0xd4>)
 80055a4:	f023 0304 	bic.w	r3, r3, #4
 80055a8:	6113      	str	r3, [r2, #16]
 80055aa:	e028      	b.n	80055fe <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	e01c      	b.n	80055ee <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	4619      	mov	r1, r3
 80055bc:	68b8      	ldr	r0, [r7, #8]
 80055be:	f000 f851 	bl	8005664 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055c6:	f7ff fe8b 	bl	80052e0 <FLASH_WaitForLastOperation>
 80055ca:	4603      	mov	r3, r0
 80055cc:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80055ce:	4b11      	ldr	r3, [pc, #68]	; (8005614 <HAL_FLASHEx_Erase+0xd4>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	4a10      	ldr	r2, [pc, #64]	; (8005614 <HAL_FLASHEx_Erase+0xd4>)
 80055d4:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 80055d8:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	601a      	str	r2, [r3, #0]
          break;
 80055e6:	e00a      	b.n	80055fe <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	3301      	adds	r3, #1
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4413      	add	r3, r2
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d3da      	bcc.n	80055b4 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80055fe:	4b04      	ldr	r3, [pc, #16]	; (8005610 <HAL_FLASHEx_Erase+0xd0>)
 8005600:	2200      	movs	r2, #0
 8005602:	751a      	strb	r2, [r3, #20]

  return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	2000559c 	.word	0x2000559c
 8005614:	40023c00 	.word	0x40023c00

08005618 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <FLASH_MassErase+0x48>)
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	4a0e      	ldr	r2, [pc, #56]	; (8005660 <FLASH_MassErase+0x48>)
 8005628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <FLASH_MassErase+0x48>)
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <FLASH_MassErase+0x48>)
 8005634:	f043 0304 	orr.w	r3, r3, #4
 8005638:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <FLASH_MassErase+0x48>)
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	4313      	orrs	r3, r2
 8005644:	4a06      	ldr	r2, [pc, #24]	; (8005660 <FLASH_MassErase+0x48>)
 8005646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800564c:	f3bf 8f4f 	dsb	sy
}
 8005650:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40023c00 	.word	0x40023c00

08005664 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e010      	b.n	80056a2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d103      	bne.n	800568e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e009      	b.n	80056a2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d103      	bne.n	800569c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e002      	b.n	80056a2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800569c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80056a2:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	4911      	ldr	r1, [pc, #68]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	4a0e      	ldr	r2, [pc, #56]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80056c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056d2:	f043 0302 	orr.w	r3, r3, #2
 80056d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80056d8:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	4a06      	ldr	r2, [pc, #24]	; (80056f8 <FLASH_Erase_Sector+0x94>)
 80056de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80056e4:	f3bf 8f4f 	dsb	sy
}
 80056e8:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40023c00 	.word	0x40023c00

080056fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	e175      	b.n	8005a08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800571c:	2201      	movs	r2, #1
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4013      	ands	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	429a      	cmp	r2, r3
 8005736:	f040 8164 	bne.w	8005a02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d005      	beq.n	8005752 <HAL_GPIO_Init+0x56>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d130      	bne.n	80057b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	2203      	movs	r2, #3
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43db      	mvns	r3, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4013      	ands	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005788:	2201      	movs	r2, #1
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 0201 	and.w	r2, r3, #1
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d017      	beq.n	80057f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	2203      	movs	r2, #3
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d123      	bne.n	8005844 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	08da      	lsrs	r2, r3, #3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3208      	adds	r2, #8
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	220f      	movs	r2, #15
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	08da      	lsrs	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3208      	adds	r2, #8
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	2203      	movs	r2, #3
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0203 	and.w	r2, r3, #3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80be 	beq.w	8005a02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005886:	4b66      	ldr	r3, [pc, #408]	; (8005a20 <HAL_GPIO_Init+0x324>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	4a65      	ldr	r2, [pc, #404]	; (8005a20 <HAL_GPIO_Init+0x324>)
 800588c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005890:	6453      	str	r3, [r2, #68]	; 0x44
 8005892:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <HAL_GPIO_Init+0x324>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800589e:	4a61      	ldr	r2, [pc, #388]	; (8005a24 <HAL_GPIO_Init+0x328>)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	3302      	adds	r3, #2
 80058a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	220f      	movs	r2, #15
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a58      	ldr	r2, [pc, #352]	; (8005a28 <HAL_GPIO_Init+0x32c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d037      	beq.n	800593a <HAL_GPIO_Init+0x23e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a57      	ldr	r2, [pc, #348]	; (8005a2c <HAL_GPIO_Init+0x330>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d031      	beq.n	8005936 <HAL_GPIO_Init+0x23a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a56      	ldr	r2, [pc, #344]	; (8005a30 <HAL_GPIO_Init+0x334>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d02b      	beq.n	8005932 <HAL_GPIO_Init+0x236>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a55      	ldr	r2, [pc, #340]	; (8005a34 <HAL_GPIO_Init+0x338>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d025      	beq.n	800592e <HAL_GPIO_Init+0x232>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a54      	ldr	r2, [pc, #336]	; (8005a38 <HAL_GPIO_Init+0x33c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01f      	beq.n	800592a <HAL_GPIO_Init+0x22e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a53      	ldr	r2, [pc, #332]	; (8005a3c <HAL_GPIO_Init+0x340>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d019      	beq.n	8005926 <HAL_GPIO_Init+0x22a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a52      	ldr	r2, [pc, #328]	; (8005a40 <HAL_GPIO_Init+0x344>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <HAL_GPIO_Init+0x226>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a51      	ldr	r2, [pc, #324]	; (8005a44 <HAL_GPIO_Init+0x348>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00d      	beq.n	800591e <HAL_GPIO_Init+0x222>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a50      	ldr	r2, [pc, #320]	; (8005a48 <HAL_GPIO_Init+0x34c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <HAL_GPIO_Init+0x21e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a4f      	ldr	r2, [pc, #316]	; (8005a4c <HAL_GPIO_Init+0x350>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <HAL_GPIO_Init+0x21a>
 8005912:	2309      	movs	r3, #9
 8005914:	e012      	b.n	800593c <HAL_GPIO_Init+0x240>
 8005916:	230a      	movs	r3, #10
 8005918:	e010      	b.n	800593c <HAL_GPIO_Init+0x240>
 800591a:	2308      	movs	r3, #8
 800591c:	e00e      	b.n	800593c <HAL_GPIO_Init+0x240>
 800591e:	2307      	movs	r3, #7
 8005920:	e00c      	b.n	800593c <HAL_GPIO_Init+0x240>
 8005922:	2306      	movs	r3, #6
 8005924:	e00a      	b.n	800593c <HAL_GPIO_Init+0x240>
 8005926:	2305      	movs	r3, #5
 8005928:	e008      	b.n	800593c <HAL_GPIO_Init+0x240>
 800592a:	2304      	movs	r3, #4
 800592c:	e006      	b.n	800593c <HAL_GPIO_Init+0x240>
 800592e:	2303      	movs	r3, #3
 8005930:	e004      	b.n	800593c <HAL_GPIO_Init+0x240>
 8005932:	2302      	movs	r3, #2
 8005934:	e002      	b.n	800593c <HAL_GPIO_Init+0x240>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <HAL_GPIO_Init+0x240>
 800593a:	2300      	movs	r3, #0
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	f002 0203 	and.w	r2, r2, #3
 8005942:	0092      	lsls	r2, r2, #2
 8005944:	4093      	lsls	r3, r2
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4313      	orrs	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800594c:	4935      	ldr	r1, [pc, #212]	; (8005a24 <HAL_GPIO_Init+0x328>)
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	089b      	lsrs	r3, r3, #2
 8005952:	3302      	adds	r3, #2
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800595a:	4b3d      	ldr	r3, [pc, #244]	; (8005a50 <HAL_GPIO_Init+0x354>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	43db      	mvns	r3, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4013      	ands	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800597e:	4a34      	ldr	r2, [pc, #208]	; (8005a50 <HAL_GPIO_Init+0x354>)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005984:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <HAL_GPIO_Init+0x354>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	43db      	mvns	r3, r3
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4013      	ands	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059a8:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <HAL_GPIO_Init+0x354>)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059ae:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <HAL_GPIO_Init+0x354>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	43db      	mvns	r3, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4013      	ands	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059d2:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <HAL_GPIO_Init+0x354>)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059d8:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <HAL_GPIO_Init+0x354>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <HAL_GPIO_Init+0x354>)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3301      	adds	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b0f      	cmp	r3, #15
 8005a0c:	f67f ae86 	bls.w	800571c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	3724      	adds	r7, #36	; 0x24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40023800 	.word	0x40023800
 8005a24:	40013800 	.word	0x40013800
 8005a28:	40020000 	.word	0x40020000
 8005a2c:	40020400 	.word	0x40020400
 8005a30:	40020800 	.word	0x40020800
 8005a34:	40020c00 	.word	0x40020c00
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	40021400 	.word	0x40021400
 8005a40:	40021800 	.word	0x40021800
 8005a44:	40021c00 	.word	0x40021c00
 8005a48:	40022000 	.word	0x40022000
 8005a4c:	40022400 	.word	0x40022400
 8005a50:	40013c00 	.word	0x40013c00

08005a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
 8005a60:	4613      	mov	r3, r2
 8005a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a64:	787b      	ldrb	r3, [r7, #1]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a6a:	887a      	ldrh	r2, [r7, #2]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a70:	e003      	b.n	8005a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a72:	887b      	ldrh	r3, [r7, #2]
 8005a74:	041a      	lsls	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a98:	887a      	ldrh	r2, [r7, #2]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	041a      	lsls	r2, r3, #16
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	43d9      	mvns	r1, r3
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	400b      	ands	r3, r1
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	619a      	str	r2, [r3, #24]
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a04      	ldr	r2, [pc, #16]	; (8005ad8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aca:	6013      	str	r3, [r2, #0]
}
 8005acc:	bf00      	nop
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40007000 	.word	0x40007000

08005adc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ae6:	4b23      	ldr	r3, [pc, #140]	; (8005b74 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <HAL_PWREx_EnableOverDrive+0x98>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	; 0x40
 8005af2:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <HAL_PWREx_EnableOverDrive+0x98>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005afe:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1d      	ldr	r2, [pc, #116]	; (8005b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b0a:	f7fe f9c7 	bl	8003e9c <HAL_GetTick>
 8005b0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b10:	e009      	b.n	8005b26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b12:	f7fe f9c3 	bl	8003e9c <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b20:	d901      	bls.n	8005b26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e022      	b.n	8005b6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b32:	d1ee      	bne.n	8005b12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b34:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a0f      	ldr	r2, [pc, #60]	; (8005b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b40:	f7fe f9ac 	bl	8003e9c <HAL_GetTick>
 8005b44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b46:	e009      	b.n	8005b5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b48:	f7fe f9a8 	bl	8003e9c <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b56:	d901      	bls.n	8005b5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e007      	b.n	8005b6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b68:	d1ee      	bne.n	8005b48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40023800 	.word	0x40023800
 8005b78:	40007000 	.word	0x40007000

08005b7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005b84:	2300      	movs	r3, #0
 8005b86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e291      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8087 	beq.w	8005cae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ba0:	4b96      	ldr	r3, [pc, #600]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 030c 	and.w	r3, r3, #12
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d00c      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bac:	4b93      	ldr	r3, [pc, #588]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 030c 	and.w	r3, r3, #12
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d112      	bne.n	8005bde <HAL_RCC_OscConfig+0x62>
 8005bb8:	4b90      	ldr	r3, [pc, #576]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc4:	d10b      	bne.n	8005bde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc6:	4b8d      	ldr	r3, [pc, #564]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d06c      	beq.n	8005cac <HAL_RCC_OscConfig+0x130>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d168      	bne.n	8005cac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e26b      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be6:	d106      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x7a>
 8005be8:	4b84      	ldr	r3, [pc, #528]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a83      	ldr	r2, [pc, #524]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e02e      	b.n	8005c54 <HAL_RCC_OscConfig+0xd8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10c      	bne.n	8005c18 <HAL_RCC_OscConfig+0x9c>
 8005bfe:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a7e      	ldr	r2, [pc, #504]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	4b7c      	ldr	r3, [pc, #496]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a7b      	ldr	r2, [pc, #492]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	e01d      	b.n	8005c54 <HAL_RCC_OscConfig+0xd8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c20:	d10c      	bne.n	8005c3c <HAL_RCC_OscConfig+0xc0>
 8005c22:	4b76      	ldr	r3, [pc, #472]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a75      	ldr	r2, [pc, #468]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	4b73      	ldr	r3, [pc, #460]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a72      	ldr	r2, [pc, #456]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	e00b      	b.n	8005c54 <HAL_RCC_OscConfig+0xd8>
 8005c3c:	4b6f      	ldr	r3, [pc, #444]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6e      	ldr	r2, [pc, #440]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	4b6c      	ldr	r3, [pc, #432]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a6b      	ldr	r2, [pc, #428]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d013      	beq.n	8005c84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fe f91e 	bl	8003e9c <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c64:	f7fe f91a 	bl	8003e9c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b64      	cmp	r3, #100	; 0x64
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e21f      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c76:	4b61      	ldr	r3, [pc, #388]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0xe8>
 8005c82:	e014      	b.n	8005cae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fe f90a 	bl	8003e9c <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c8c:	f7fe f906 	bl	8003e9c <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b64      	cmp	r3, #100	; 0x64
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e20b      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c9e:	4b57      	ldr	r3, [pc, #348]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x110>
 8005caa:	e000      	b.n	8005cae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d069      	beq.n	8005d8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cba:	4b50      	ldr	r3, [pc, #320]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cc6:	4b4d      	ldr	r3, [pc, #308]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d11c      	bne.n	8005d0c <HAL_RCC_OscConfig+0x190>
 8005cd2:	4b4a      	ldr	r3, [pc, #296]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d116      	bne.n	8005d0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cde:	4b47      	ldr	r3, [pc, #284]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x17a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d001      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e1df      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf6:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	493d      	ldr	r1, [pc, #244]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d0a:	e040      	b.n	8005d8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d023      	beq.n	8005d5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d14:	4b39      	ldr	r3, [pc, #228]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a38      	ldr	r2, [pc, #224]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d20:	f7fe f8bc 	bl	8003e9c <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d28:	f7fe f8b8 	bl	8003e9c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e1bd      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3a:	4b30      	ldr	r3, [pc, #192]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d46:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4929      	ldr	r1, [pc, #164]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]
 8005d5a:	e018      	b.n	8005d8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d5c:	4b27      	ldr	r3, [pc, #156]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fe f898 	bl	8003e9c <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d70:	f7fe f894 	bl	8003e9c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e199      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d038      	beq.n	8005e0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d019      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da2:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da6:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dae:	f7fe f875 	bl	8003e9c <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db6:	f7fe f871 	bl	8003e9c <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e176      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x23a>
 8005dd4:	e01a      	b.n	8005e0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dda:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de2:	f7fe f85b 	bl	8003e9c <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de8:	e00a      	b.n	8005e00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dea:	f7fe f857 	bl	8003e9c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d903      	bls.n	8005e00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e15c      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
 8005dfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e00:	4b91      	ldr	r3, [pc, #580]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1ee      	bne.n	8005dea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80a4 	beq.w	8005f62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e1a:	4b8b      	ldr	r3, [pc, #556]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10d      	bne.n	8005e42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e26:	4b88      	ldr	r3, [pc, #544]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	4a87      	ldr	r2, [pc, #540]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e30:	6413      	str	r3, [r2, #64]	; 0x40
 8005e32:	4b85      	ldr	r3, [pc, #532]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	60bb      	str	r3, [r7, #8]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e42:	4b82      	ldr	r3, [pc, #520]	; (800604c <HAL_RCC_OscConfig+0x4d0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d118      	bne.n	8005e80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005e4e:	4b7f      	ldr	r3, [pc, #508]	; (800604c <HAL_RCC_OscConfig+0x4d0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a7e      	ldr	r2, [pc, #504]	; (800604c <HAL_RCC_OscConfig+0x4d0>)
 8005e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e5a:	f7fe f81f 	bl	8003e9c <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e62:	f7fe f81b 	bl	8003e9c <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b64      	cmp	r3, #100	; 0x64
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e120      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e74:	4b75      	ldr	r3, [pc, #468]	; (800604c <HAL_RCC_OscConfig+0x4d0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f0      	beq.n	8005e62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d106      	bne.n	8005e96 <HAL_RCC_OscConfig+0x31a>
 8005e88:	4b6f      	ldr	r3, [pc, #444]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	4a6e      	ldr	r2, [pc, #440]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6713      	str	r3, [r2, #112]	; 0x70
 8005e94:	e02d      	b.n	8005ef2 <HAL_RCC_OscConfig+0x376>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x33c>
 8005e9e:	4b6a      	ldr	r3, [pc, #424]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	4a69      	ldr	r2, [pc, #420]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eaa:	4b67      	ldr	r3, [pc, #412]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	4a66      	ldr	r2, [pc, #408]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005eb0:	f023 0304 	bic.w	r3, r3, #4
 8005eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb6:	e01c      	b.n	8005ef2 <HAL_RCC_OscConfig+0x376>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b05      	cmp	r3, #5
 8005ebe:	d10c      	bne.n	8005eda <HAL_RCC_OscConfig+0x35e>
 8005ec0:	4b61      	ldr	r3, [pc, #388]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	4a60      	ldr	r2, [pc, #384]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005ec6:	f043 0304 	orr.w	r3, r3, #4
 8005eca:	6713      	str	r3, [r2, #112]	; 0x70
 8005ecc:	4b5e      	ldr	r3, [pc, #376]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	4a5d      	ldr	r2, [pc, #372]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed8:	e00b      	b.n	8005ef2 <HAL_RCC_OscConfig+0x376>
 8005eda:	4b5b      	ldr	r3, [pc, #364]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	4a5a      	ldr	r2, [pc, #360]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee6:	4b58      	ldr	r3, [pc, #352]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	4a57      	ldr	r2, [pc, #348]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005eec:	f023 0304 	bic.w	r3, r3, #4
 8005ef0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d015      	beq.n	8005f26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efa:	f7fd ffcf 	bl	8003e9c <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f00:	e00a      	b.n	8005f18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fd ffcb 	bl	8003e9c <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e0ce      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f18:	4b4b      	ldr	r3, [pc, #300]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ee      	beq.n	8005f02 <HAL_RCC_OscConfig+0x386>
 8005f24:	e014      	b.n	8005f50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f26:	f7fd ffb9 	bl	8003e9c <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f2c:	e00a      	b.n	8005f44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2e:	f7fd ffb5 	bl	8003e9c <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e0b8      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f44:	4b40      	ldr	r3, [pc, #256]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1ee      	bne.n	8005f2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d105      	bne.n	8005f62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f56:	4b3c      	ldr	r3, [pc, #240]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	4a3b      	ldr	r2, [pc, #236]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80a4 	beq.w	80060b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f6c:	4b36      	ldr	r3, [pc, #216]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 030c 	and.w	r3, r3, #12
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d06b      	beq.n	8006050 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d149      	bne.n	8006014 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f80:	4b31      	ldr	r3, [pc, #196]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a30      	ldr	r2, [pc, #192]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fd ff86 	bl	8003e9c <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fd ff82 	bl	8003e9c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e087      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa6:	4b28      	ldr	r3, [pc, #160]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	085b      	lsrs	r3, r3, #1
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	041b      	lsls	r3, r3, #16
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	061b      	lsls	r3, r3, #24
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fde:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a18      	ldr	r2, [pc, #96]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fec:	f7fd ff56 	bl	8003e9c <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff4:	f7fd ff52 	bl	8003e9c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e057      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006006:	4b10      	ldr	r3, [pc, #64]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x478>
 8006012:	e04f      	b.n	80060b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0b      	ldr	r2, [pc, #44]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 800601a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800601e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fd ff3c 	bl	8003e9c <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006028:	f7fd ff38 	bl	8003e9c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e03d      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800603a:	4b03      	ldr	r3, [pc, #12]	; (8006048 <HAL_RCC_OscConfig+0x4cc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0x4ac>
 8006046:	e035      	b.n	80060b4 <HAL_RCC_OscConfig+0x538>
 8006048:	40023800 	.word	0x40023800
 800604c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006050:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <HAL_RCC_OscConfig+0x544>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d028      	beq.n	80060b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006068:	429a      	cmp	r2, r3
 800606a:	d121      	bne.n	80060b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d11a      	bne.n	80060b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006080:	4013      	ands	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006086:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006088:	4293      	cmp	r3, r2
 800608a:	d111      	bne.n	80060b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	3b01      	subs	r3, #1
 800609a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800609c:	429a      	cmp	r2, r3
 800609e:	d107      	bne.n	80060b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40023800 	.word	0x40023800

080060c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0d0      	b.n	800627e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060dc:	4b6a      	ldr	r3, [pc, #424]	; (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d910      	bls.n	800610c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b67      	ldr	r3, [pc, #412]	; (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 020f 	bic.w	r2, r3, #15
 80060f2:	4965      	ldr	r1, [pc, #404]	; (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fa:	4b63      	ldr	r3, [pc, #396]	; (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d001      	beq.n	800610c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e0b8      	b.n	800627e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d020      	beq.n	800615a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006124:	4b59      	ldr	r3, [pc, #356]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a58      	ldr	r2, [pc, #352]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 800612a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800612e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800613c:	4b53      	ldr	r3, [pc, #332]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4a52      	ldr	r2, [pc, #328]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006146:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006148:	4b50      	ldr	r3, [pc, #320]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	494d      	ldr	r1, [pc, #308]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d040      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d107      	bne.n	800617e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616e:	4b47      	ldr	r3, [pc, #284]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d115      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e07f      	b.n	800627e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006186:	4b41      	ldr	r3, [pc, #260]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e073      	b.n	800627e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006196:	4b3d      	ldr	r3, [pc, #244]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e06b      	b.n	800627e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061a6:	4b39      	ldr	r3, [pc, #228]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f023 0203 	bic.w	r2, r3, #3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4936      	ldr	r1, [pc, #216]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b8:	f7fd fe70 	bl	8003e9c <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061be:	e00a      	b.n	80061d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c0:	f7fd fe6c 	bl	8003e9c <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e053      	b.n	800627e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d6:	4b2d      	ldr	r3, [pc, #180]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 020c 	and.w	r2, r3, #12
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d1eb      	bne.n	80061c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061e8:	4b27      	ldr	r3, [pc, #156]	; (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d210      	bcs.n	8006218 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f6:	4b24      	ldr	r3, [pc, #144]	; (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f023 020f 	bic.w	r2, r3, #15
 80061fe:	4922      	ldr	r1, [pc, #136]	; (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	4313      	orrs	r3, r2
 8006204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006206:	4b20      	ldr	r3, [pc, #128]	; (8006288 <HAL_RCC_ClockConfig+0x1c4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d001      	beq.n	8006218 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e032      	b.n	800627e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006224:	4b19      	ldr	r3, [pc, #100]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4916      	ldr	r1, [pc, #88]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006232:	4313      	orrs	r3, r2
 8006234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006242:	4b12      	ldr	r3, [pc, #72]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	490e      	ldr	r1, [pc, #56]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 8006252:	4313      	orrs	r3, r2
 8006254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006256:	f000 f821 	bl	800629c <HAL_RCC_GetSysClockFreq>
 800625a:	4602      	mov	r2, r0
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_RCC_ClockConfig+0x1c8>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	490a      	ldr	r1, [pc, #40]	; (8006290 <HAL_RCC_ClockConfig+0x1cc>)
 8006268:	5ccb      	ldrb	r3, [r1, r3]
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <HAL_RCC_ClockConfig+0x1d0>)
 8006270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <HAL_RCC_ClockConfig+0x1d4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd fc70 	bl	8003b5c <HAL_InitTick>

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40023c00 	.word	0x40023c00
 800628c:	40023800 	.word	0x40023800
 8006290:	08027f2c 	.word	0x08027f2c
 8006294:	2000001c 	.word	0x2000001c
 8006298:	20000020 	.word	0x20000020

0800629c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800629c:	b5b0      	push	{r4, r5, r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80062a2:	2100      	movs	r1, #0
 80062a4:	6079      	str	r1, [r7, #4]
 80062a6:	2100      	movs	r1, #0
 80062a8:	60f9      	str	r1, [r7, #12]
 80062aa:	2100      	movs	r1, #0
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80062ae:	2100      	movs	r1, #0
 80062b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062b2:	4952      	ldr	r1, [pc, #328]	; (80063fc <HAL_RCC_GetSysClockFreq+0x160>)
 80062b4:	6889      	ldr	r1, [r1, #8]
 80062b6:	f001 010c 	and.w	r1, r1, #12
 80062ba:	2908      	cmp	r1, #8
 80062bc:	d00d      	beq.n	80062da <HAL_RCC_GetSysClockFreq+0x3e>
 80062be:	2908      	cmp	r1, #8
 80062c0:	f200 8094 	bhi.w	80063ec <HAL_RCC_GetSysClockFreq+0x150>
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d002      	beq.n	80062ce <HAL_RCC_GetSysClockFreq+0x32>
 80062c8:	2904      	cmp	r1, #4
 80062ca:	d003      	beq.n	80062d4 <HAL_RCC_GetSysClockFreq+0x38>
 80062cc:	e08e      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062ce:	4b4c      	ldr	r3, [pc, #304]	; (8006400 <HAL_RCC_GetSysClockFreq+0x164>)
 80062d0:	60bb      	str	r3, [r7, #8]
      break;
 80062d2:	e08e      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062d4:	4b4b      	ldr	r3, [pc, #300]	; (8006404 <HAL_RCC_GetSysClockFreq+0x168>)
 80062d6:	60bb      	str	r3, [r7, #8]
      break;
 80062d8:	e08b      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062da:	4948      	ldr	r1, [pc, #288]	; (80063fc <HAL_RCC_GetSysClockFreq+0x160>)
 80062dc:	6849      	ldr	r1, [r1, #4]
 80062de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80062e2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062e4:	4945      	ldr	r1, [pc, #276]	; (80063fc <HAL_RCC_GetSysClockFreq+0x160>)
 80062e6:	6849      	ldr	r1, [r1, #4]
 80062e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80062ec:	2900      	cmp	r1, #0
 80062ee:	d024      	beq.n	800633a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062f0:	4942      	ldr	r1, [pc, #264]	; (80063fc <HAL_RCC_GetSysClockFreq+0x160>)
 80062f2:	6849      	ldr	r1, [r1, #4]
 80062f4:	0989      	lsrs	r1, r1, #6
 80062f6:	4608      	mov	r0, r1
 80062f8:	f04f 0100 	mov.w	r1, #0
 80062fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006300:	f04f 0500 	mov.w	r5, #0
 8006304:	ea00 0204 	and.w	r2, r0, r4
 8006308:	ea01 0305 	and.w	r3, r1, r5
 800630c:	493d      	ldr	r1, [pc, #244]	; (8006404 <HAL_RCC_GetSysClockFreq+0x168>)
 800630e:	fb01 f003 	mul.w	r0, r1, r3
 8006312:	2100      	movs	r1, #0
 8006314:	fb01 f102 	mul.w	r1, r1, r2
 8006318:	1844      	adds	r4, r0, r1
 800631a:	493a      	ldr	r1, [pc, #232]	; (8006404 <HAL_RCC_GetSysClockFreq+0x168>)
 800631c:	fba2 0101 	umull	r0, r1, r2, r1
 8006320:	1863      	adds	r3, r4, r1
 8006322:	4619      	mov	r1, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	461a      	mov	r2, r3
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	f7fa fcbc 	bl	8000ca8 <__aeabi_uldivmod>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4613      	mov	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e04a      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800633a:	4b30      	ldr	r3, [pc, #192]	; (80063fc <HAL_RCC_GetSysClockFreq+0x160>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	099b      	lsrs	r3, r3, #6
 8006340:	461a      	mov	r2, r3
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	f240 10ff 	movw	r0, #511	; 0x1ff
 800634a:	f04f 0100 	mov.w	r1, #0
 800634e:	ea02 0400 	and.w	r4, r2, r0
 8006352:	ea03 0501 	and.w	r5, r3, r1
 8006356:	4620      	mov	r0, r4
 8006358:	4629      	mov	r1, r5
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	014b      	lsls	r3, r1, #5
 8006364:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006368:	0142      	lsls	r2, r0, #5
 800636a:	4610      	mov	r0, r2
 800636c:	4619      	mov	r1, r3
 800636e:	1b00      	subs	r0, r0, r4
 8006370:	eb61 0105 	sbc.w	r1, r1, r5
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	018b      	lsls	r3, r1, #6
 800637e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006382:	0182      	lsls	r2, r0, #6
 8006384:	1a12      	subs	r2, r2, r0
 8006386:	eb63 0301 	sbc.w	r3, r3, r1
 800638a:	f04f 0000 	mov.w	r0, #0
 800638e:	f04f 0100 	mov.w	r1, #0
 8006392:	00d9      	lsls	r1, r3, #3
 8006394:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006398:	00d0      	lsls	r0, r2, #3
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	1912      	adds	r2, r2, r4
 80063a0:	eb45 0303 	adc.w	r3, r5, r3
 80063a4:	f04f 0000 	mov.w	r0, #0
 80063a8:	f04f 0100 	mov.w	r1, #0
 80063ac:	0299      	lsls	r1, r3, #10
 80063ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80063b2:	0290      	lsls	r0, r2, #10
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4610      	mov	r0, r2
 80063ba:	4619      	mov	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	461a      	mov	r2, r3
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	f7fa fc70 	bl	8000ca8 <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4613      	mov	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <HAL_RCC_GetSysClockFreq+0x160>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	60bb      	str	r3, [r7, #8]
      break;
 80063ea:	e002      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063ec:	4b04      	ldr	r3, [pc, #16]	; (8006400 <HAL_RCC_GetSysClockFreq+0x164>)
 80063ee:	60bb      	str	r3, [r7, #8]
      break;
 80063f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f2:	68bb      	ldr	r3, [r7, #8]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bdb0      	pop	{r4, r5, r7, pc}
 80063fc:	40023800 	.word	0x40023800
 8006400:	00f42400 	.word	0x00f42400
 8006404:	017d7840 	.word	0x017d7840

08006408 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800640c:	4b03      	ldr	r3, [pc, #12]	; (800641c <HAL_RCC_GetHCLKFreq+0x14>)
 800640e:	681b      	ldr	r3, [r3, #0]
}
 8006410:	4618      	mov	r0, r3
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	2000001c 	.word	0x2000001c

08006420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006424:	f7ff fff0 	bl	8006408 <HAL_RCC_GetHCLKFreq>
 8006428:	4602      	mov	r2, r0
 800642a:	4b05      	ldr	r3, [pc, #20]	; (8006440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	0a9b      	lsrs	r3, r3, #10
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	4903      	ldr	r1, [pc, #12]	; (8006444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006436:	5ccb      	ldrb	r3, [r1, r3]
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800643c:	4618      	mov	r0, r3
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40023800 	.word	0x40023800
 8006444:	08027f3c 	.word	0x08027f3c

08006448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800644c:	f7ff ffdc 	bl	8006408 <HAL_RCC_GetHCLKFreq>
 8006450:	4602      	mov	r2, r0
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	0b5b      	lsrs	r3, r3, #13
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	4903      	ldr	r1, [pc, #12]	; (800646c <HAL_RCC_GetPCLK2Freq+0x24>)
 800645e:	5ccb      	ldrb	r3, [r1, r3]
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40023800 	.word	0x40023800
 800646c:	08027f3c 	.word	0x08027f3c

08006470 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	220f      	movs	r2, #15
 800647e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006480:	4b12      	ldr	r3, [pc, #72]	; (80064cc <HAL_RCC_GetClockConfig+0x5c>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 0203 	and.w	r2, r3, #3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <HAL_RCC_GetClockConfig+0x5c>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006498:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <HAL_RCC_GetClockConfig+0x5c>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064a4:	4b09      	ldr	r3, [pc, #36]	; (80064cc <HAL_RCC_GetClockConfig+0x5c>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	08db      	lsrs	r3, r3, #3
 80064aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <HAL_RCC_GetClockConfig+0x60>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	601a      	str	r2, [r3, #0]
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40023800 	.word	0x40023800
 80064d0:	40023c00 	.word	0x40023c00

080064d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d012      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064fc:	4b69      	ldr	r3, [pc, #420]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a68      	ldr	r2, [pc, #416]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006506:	6093      	str	r3, [r2, #8]
 8006508:	4b66      	ldr	r3, [pc, #408]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006510:	4964      	ldr	r1, [pc, #400]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006512:	4313      	orrs	r3, r2
 8006514:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800651e:	2301      	movs	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d017      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800652e:	4b5d      	ldr	r3, [pc, #372]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	4959      	ldr	r1, [pc, #356]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654c:	d101      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800654e:	2301      	movs	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800655a:	2301      	movs	r3, #1
 800655c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d017      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800656a:	4b4e      	ldr	r3, [pc, #312]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	494a      	ldr	r1, [pc, #296]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006588:	d101      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800658a:	2301      	movs	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006596:	2301      	movs	r3, #1
 8006598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80065a6:	2301      	movs	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 808b 	beq.w	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065b8:	4b3a      	ldr	r3, [pc, #232]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	4a39      	ldr	r2, [pc, #228]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c2:	6413      	str	r3, [r2, #64]	; 0x40
 80065c4:	4b37      	ldr	r3, [pc, #220]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065cc:	60bb      	str	r3, [r7, #8]
 80065ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065d0:	4b35      	ldr	r3, [pc, #212]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a34      	ldr	r2, [pc, #208]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065dc:	f7fd fc5e 	bl	8003e9c <HAL_GetTick>
 80065e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e4:	f7fd fc5a 	bl	8003e9c <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b64      	cmp	r3, #100	; 0x64
 80065f0:	d901      	bls.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e357      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065f6:	4b2c      	ldr	r3, [pc, #176]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006602:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d035      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	429a      	cmp	r2, r3
 800661e:	d02e      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006620:	4b20      	ldr	r3, [pc, #128]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800662a:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662e:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006634:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006636:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006642:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006648:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d114      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006654:	f7fd fc22 	bl	8003e9c <HAL_GetTick>
 8006658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665a:	e00a      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800665c:	f7fd fc1e 	bl	8003e9c <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	f241 3288 	movw	r2, #5000	; 0x1388
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e319      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006672:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0ee      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800668a:	d111      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800669a:	400b      	ands	r3, r1
 800669c:	4901      	ldr	r1, [pc, #4]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	608b      	str	r3, [r1, #8]
 80066a2:	e00b      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40007000 	.word	0x40007000
 80066ac:	0ffffcff 	.word	0x0ffffcff
 80066b0:	4bb1      	ldr	r3, [pc, #708]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	4ab0      	ldr	r2, [pc, #704]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066ba:	6093      	str	r3, [r2, #8]
 80066bc:	4bae      	ldr	r3, [pc, #696]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066c8:	49ab      	ldr	r1, [pc, #684]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0310 	and.w	r3, r3, #16
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d010      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066da:	4ba7      	ldr	r3, [pc, #668]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e0:	4aa5      	ldr	r2, [pc, #660]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066ea:	4ba3      	ldr	r3, [pc, #652]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	49a0      	ldr	r1, [pc, #640]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006708:	4b9b      	ldr	r3, [pc, #620]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800670a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006716:	4998      	ldr	r1, [pc, #608]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800672a:	4b93      	ldr	r3, [pc, #588]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006738:	498f      	ldr	r1, [pc, #572]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800674c:	4b8a      	ldr	r3, [pc, #552]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675a:	4987      	ldr	r1, [pc, #540]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800676e:	4b82      	ldr	r3, [pc, #520]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	497e      	ldr	r1, [pc, #504]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006790:	4b79      	ldr	r3, [pc, #484]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006796:	f023 0203 	bic.w	r2, r3, #3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	4976      	ldr	r1, [pc, #472]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067b2:	4b71      	ldr	r3, [pc, #452]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b8:	f023 020c 	bic.w	r2, r3, #12
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c0:	496d      	ldr	r1, [pc, #436]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067d4:	4b68      	ldr	r3, [pc, #416]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e2:	4965      	ldr	r1, [pc, #404]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067f6:	4b60      	ldr	r3, [pc, #384]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	495c      	ldr	r1, [pc, #368]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006818:	4b57      	ldr	r3, [pc, #348]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800681a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	4954      	ldr	r1, [pc, #336]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006828:	4313      	orrs	r3, r2
 800682a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800683a:	4b4f      	ldr	r3, [pc, #316]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800683c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006848:	494b      	ldr	r1, [pc, #300]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800684a:	4313      	orrs	r3, r2
 800684c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800685c:	4b46      	ldr	r3, [pc, #280]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686a:	4943      	ldr	r1, [pc, #268]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800686c:	4313      	orrs	r3, r2
 800686e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800687e:	4b3e      	ldr	r3, [pc, #248]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688c:	493a      	ldr	r1, [pc, #232]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068a0:	4b35      	ldr	r3, [pc, #212]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ae:	4932      	ldr	r1, [pc, #200]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d011      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068c2:	4b2d      	ldr	r3, [pc, #180]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d0:	4929      	ldr	r1, [pc, #164]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e0:	d101      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80068e2:	2301      	movs	r3, #1
 80068e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80068f2:	2301      	movs	r3, #1
 80068f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006902:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006908:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006910:	4919      	ldr	r1, [pc, #100]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006924:	4b14      	ldr	r3, [pc, #80]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006934:	4910      	ldr	r1, [pc, #64]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d006      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80d9 	beq.w	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006950:	4b09      	ldr	r3, [pc, #36]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a08      	ldr	r2, [pc, #32]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006956:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800695a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695c:	f7fd fa9e 	bl	8003e9c <HAL_GetTick>
 8006960:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006962:	e00b      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006964:	f7fd fa9a 	bl	8003e9c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b64      	cmp	r3, #100	; 0x64
 8006970:	d904      	bls.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e197      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006976:	bf00      	nop
 8006978:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800697c:	4b6c      	ldr	r3, [pc, #432]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1ed      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d021      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11d      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800699c:	4b64      	ldr	r3, [pc, #400]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800699e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069aa:	4b61      	ldr	r3, [pc, #388]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b0:	0e1b      	lsrs	r3, r3, #24
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	019a      	lsls	r2, r3, #6
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	041b      	lsls	r3, r3, #16
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	061b      	lsls	r3, r3, #24
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	071b      	lsls	r3, r3, #28
 80069d0:	4957      	ldr	r1, [pc, #348]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ec:	d00a      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02e      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a02:	d129      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a04:	4b4a      	ldr	r3, [pc, #296]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a12:	4b47      	ldr	r3, [pc, #284]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a18:	0f1b      	lsrs	r3, r3, #28
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	019a      	lsls	r2, r3, #6
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	431a      	orrs	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	071b      	lsls	r3, r3, #28
 8006a38:	493d      	ldr	r1, [pc, #244]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a40:	4b3b      	ldr	r3, [pc, #236]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a46:	f023 021f 	bic.w	r2, r3, #31
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	4937      	ldr	r1, [pc, #220]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01d      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a64:	4b32      	ldr	r3, [pc, #200]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6a:	0e1b      	lsrs	r3, r3, #24
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a72:	4b2f      	ldr	r3, [pc, #188]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a78:	0f1b      	lsrs	r3, r3, #28
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	019a      	lsls	r2, r3, #6
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	041b      	lsls	r3, r3, #16
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	061b      	lsls	r3, r3, #24
 8006a92:	431a      	orrs	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	071b      	lsls	r3, r3, #28
 8006a98:	4925      	ldr	r1, [pc, #148]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d011      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	019a      	lsls	r2, r3, #6
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	061b      	lsls	r3, r3, #24
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	071b      	lsls	r3, r3, #28
 8006ac8:	4919      	ldr	r1, [pc, #100]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006adc:	f7fd f9de 	bl	8003e9c <HAL_GetTick>
 8006ae0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ae4:	f7fd f9da 	bl	8003e9c <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	; 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e0d7      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006af6:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	f040 80cd 	bne.w	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b16:	f7fd f9c1 	bl	8003e9c <HAL_GetTick>
 8006b1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b1c:	e00a      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b1e:	f7fd f9bd 	bl	8003e9c <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b64      	cmp	r3, #100	; 0x64
 8006b2a:	d903      	bls.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e0ba      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006b30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b34:	4b5e      	ldr	r3, [pc, #376]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b40:	d0ed      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d02e      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d12a      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b6a:	4b51      	ldr	r3, [pc, #324]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	0c1b      	lsrs	r3, r3, #16
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b78:	4b4d      	ldr	r3, [pc, #308]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7e:	0f1b      	lsrs	r3, r3, #28
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	019a      	lsls	r2, r3, #6
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	071b      	lsls	r3, r3, #28
 8006b9e:	4944      	ldr	r1, [pc, #272]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ba6:	4b42      	ldr	r3, [pc, #264]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	493d      	ldr	r1, [pc, #244]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d022      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd4:	d11d      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bd6:	4b36      	ldr	r3, [pc, #216]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bdc:	0e1b      	lsrs	r3, r3, #24
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006be4:	4b32      	ldr	r3, [pc, #200]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bea:	0f1b      	lsrs	r3, r3, #28
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	019a      	lsls	r2, r3, #6
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	061b      	lsls	r3, r3, #24
 8006c04:	431a      	orrs	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	071b      	lsls	r3, r3, #28
 8006c0a:	4929      	ldr	r1, [pc, #164]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d028      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c1e:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c2c:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	019a      	lsls	r2, r3, #6
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	041b      	lsls	r3, r3, #16
 8006c44:	431a      	orrs	r2, r3
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	061b      	lsls	r3, r3, #24
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	071b      	lsls	r3, r3, #28
 8006c52:	4917      	ldr	r1, [pc, #92]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4911      	ldr	r1, [pc, #68]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c70:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a0e      	ldr	r2, [pc, #56]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c7c:	f7fd f90e 	bl	8003e9c <HAL_GetTick>
 8006c80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c84:	f7fd f90a 	bl	8003e9c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b64      	cmp	r3, #100	; 0x64
 8006c90:	d901      	bls.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e007      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c96:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca2:	d1ef      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	40023800 	.word	0x40023800

08006cb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e081      	b.n	8006dca <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7f5b      	ldrb	r3, [r3, #29]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d105      	bne.n	8006cdc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fc fea0 	bl	8003a1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	22ca      	movs	r2, #202	; 0xca
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2253      	movs	r2, #83	; 0x53
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 faac 	bl	8007250 <RTC_EnterInitMode>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d008      	beq.n	8006d10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	22ff      	movs	r2, #255	; 0xff
 8006d04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e05c      	b.n	8006dca <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6899      	ldr	r1, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <HAL_RTC_Init+0x120>)
 8006d1c:	400b      	ands	r3, r1
 8006d1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6899      	ldr	r1, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68d2      	ldr	r2, [r2, #12]
 8006d46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6919      	ldr	r1, [r3, #16]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	041a      	lsls	r2, r3, #16
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d6a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10e      	bne.n	8006d98 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa40 	bl	8007200 <HAL_RTC_WaitForSynchro>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	22ff      	movs	r2, #255	; 0xff
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2204      	movs	r2, #4
 8006d92:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e018      	b.n	8006dca <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0208 	bic.w	r2, r2, #8
 8006da6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	22ff      	movs	r2, #255	; 0xff
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
  }
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	ff8fffbf 	.word	0xff8fffbf

08006dd8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006dd8:	b590      	push	{r4, r7, lr}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7f1b      	ldrb	r3, [r3, #28]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_RTC_SetTime+0x1c>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e0a8      	b.n	8006f46 <HAL_RTC_SetTime+0x16e>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d126      	bne.n	8006e54 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fa42 	bl	80072a8 <RTC_ByteToBcd2>
 8006e24:	4603      	mov	r3, r0
 8006e26:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fa3b 	bl	80072a8 <RTC_ByteToBcd2>
 8006e32:	4603      	mov	r3, r0
 8006e34:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006e36:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	789b      	ldrb	r3, [r3, #2]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fa33 	bl	80072a8 <RTC_ByteToBcd2>
 8006e42:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006e44:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	7b1b      	ldrb	r3, [r3, #12]
 8006e4c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	e018      	b.n	8006e86 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006e74:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006e7a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	7b1b      	ldrb	r3, [r3, #12]
 8006e80:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	22ca      	movs	r2, #202	; 0xca
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2253      	movs	r2, #83	; 0x53
 8006e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f9da 	bl	8007250 <RTC_EnterInitMode>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	22ff      	movs	r2, #255	; 0xff
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2204      	movs	r2, #4
 8006eae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e045      	b.n	8006f46 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <HAL_RTC_SetTime+0x178>)
 8006ec2:	400b      	ands	r3, r1
 8006ec4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ed4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6899      	ldr	r1, [r3, #8]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d111      	bne.n	8006f30 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f977 	bl	8007200 <HAL_RTC_WaitForSynchro>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2204      	movs	r2, #4
 8006f24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e00a      	b.n	8006f46 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	22ff      	movs	r2, #255	; 0xff
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006f44:	2300      	movs	r3, #0
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd90      	pop	{r4, r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	007f7f7f 	.word	0x007f7f7f

08006f54 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b22      	ldr	r3, [pc, #136]	; (800700c <HAL_RTC_GetTime+0xb8>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	0c1b      	lsrs	r3, r3, #16
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d11a      	bne.n	8007002 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f987 	bl	80072e4 <RTC_Bcd2ToByte>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f97e 	bl	80072e4 <RTC_Bcd2ToByte>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	789b      	ldrb	r3, [r3, #2]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 f975 	bl	80072e4 <RTC_Bcd2ToByte>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	007f7f7f 	.word	0x007f7f7f

08007010 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	7f1b      	ldrb	r3, [r3, #28]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_RTC_SetDate+0x1c>
 8007028:	2302      	movs	r3, #2
 800702a:	e092      	b.n	8007152 <HAL_RTC_SetDate+0x142>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2202      	movs	r2, #2
 8007036:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10e      	bne.n	800705c <HAL_RTC_SetDate+0x4c>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	f003 0310 	and.w	r3, r3, #16
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	f023 0310 	bic.w	r3, r3, #16
 8007052:	b2db      	uxtb	r3, r3
 8007054:	330a      	adds	r3, #10
 8007056:	b2da      	uxtb	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d11c      	bne.n	800709c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	78db      	ldrb	r3, [r3, #3]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f91e 	bl	80072a8 <RTC_ByteToBcd2>
 800706c:	4603      	mov	r3, r0
 800706e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f917 	bl	80072a8 <RTC_ByteToBcd2>
 800707a:	4603      	mov	r3, r0
 800707c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800707e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	789b      	ldrb	r3, [r3, #2]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 f90f 	bl	80072a8 <RTC_ByteToBcd2>
 800708a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800708c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	e00e      	b.n	80070ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80070a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80070ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	22ca      	movs	r2, #202	; 0xca
 80070c0:	625a      	str	r2, [r3, #36]	; 0x24
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2253      	movs	r2, #83	; 0x53
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f8c0 	bl	8007250 <RTC_EnterInitMode>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00b      	beq.n	80070ee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	22ff      	movs	r2, #255	; 0xff
 80070dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2204      	movs	r2, #4
 80070e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e031      	b.n	8007152 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	6979      	ldr	r1, [r7, #20]
 80070f4:	4b19      	ldr	r3, [pc, #100]	; (800715c <HAL_RTC_SetDate+0x14c>)
 80070f6:	400b      	ands	r3, r1
 80070f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007108:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d111      	bne.n	800713c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f871 	bl	8007200 <HAL_RTC_WaitForSynchro>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	22ff      	movs	r2, #255	; 0xff
 800712a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2204      	movs	r2, #4
 8007130:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e00a      	b.n	8007152 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	22ff      	movs	r2, #255	; 0xff
 8007142:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007150:	2300      	movs	r3, #0
  }
}
 8007152:	4618      	mov	r0, r3
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	bd90      	pop	{r4, r7, pc}
 800715a:	bf00      	nop
 800715c:	00ffff3f 	.word	0x00ffff3f

08007160 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4b21      	ldr	r3, [pc, #132]	; (80071fc <HAL_RTC_GetDate+0x9c>)
 8007178:	4013      	ands	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	b2da      	uxtb	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	b2da      	uxtb	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	0b5b      	lsrs	r3, r3, #13
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d11a      	bne.n	80071f0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	78db      	ldrb	r3, [r3, #3]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f890 	bl	80072e4 <RTC_Bcd2ToByte>
 80071c4:	4603      	mov	r3, r0
 80071c6:	461a      	mov	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f887 	bl	80072e4 <RTC_Bcd2ToByte>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	789b      	ldrb	r3, [r3, #2]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f87e 	bl	80072e4 <RTC_Bcd2ToByte>
 80071e8:	4603      	mov	r3, r0
 80071ea:	461a      	mov	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	00ffff3f 	.word	0x00ffff3f

08007200 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800721a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800721c:	f7fc fe3e 	bl	8003e9c <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007222:	e009      	b.n	8007238 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007224:	f7fc fe3a 	bl	8003e9c <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007232:	d901      	bls.n	8007238 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e007      	b.n	8007248 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0ee      	beq.n	8007224 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d119      	bne.n	800729e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f04f 32ff 	mov.w	r2, #4294967295
 8007272:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007274:	f7fc fe12 	bl	8003e9c <HAL_GetTick>
 8007278:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800727a:	e009      	b.n	8007290 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800727c:	f7fc fe0e 	bl	8003e9c <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800728a:	d901      	bls.n	8007290 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e007      	b.n	80072a0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0ee      	beq.n	800727c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80072b6:	e005      	b.n	80072c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	3b0a      	subs	r3, #10
 80072c2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	2b09      	cmp	r3, #9
 80072c8:	d8f6      	bhi.n	80072b8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	b2db      	uxtb	r3, r3
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	091b      	lsrs	r3, r3, #4
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007304:	79fb      	ldrb	r3, [r7, #7]
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	4413      	add	r3, r2
 8007312:	b2db      	uxtb	r3, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e049      	b.n	80073c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d106      	bne.n	800734c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f841 	bl	80073ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f000 fa00 	bl	8007764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d001      	beq.n	80073fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e054      	b.n	80074a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a26      	ldr	r2, [pc, #152]	; (80074b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d022      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x80>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007426:	d01d      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x80>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a22      	ldr	r2, [pc, #136]	; (80074b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x80>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a21      	ldr	r2, [pc, #132]	; (80074bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x80>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1f      	ldr	r2, [pc, #124]	; (80074c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x80>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x80>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1c      	ldr	r2, [pc, #112]	; (80074c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x80>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1b      	ldr	r2, [pc, #108]	; (80074cc <HAL_TIM_Base_Start_IT+0xe8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d115      	bne.n	8007490 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <HAL_TIM_Base_Start_IT+0xec>)
 800746c:	4013      	ands	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b06      	cmp	r3, #6
 8007474:	d015      	beq.n	80074a2 <HAL_TIM_Base_Start_IT+0xbe>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800747c:	d011      	beq.n	80074a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748e:	e008      	b.n	80074a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	e000      	b.n	80074a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800
 80074c0:	40000c00 	.word	0x40000c00
 80074c4:	40010400 	.word	0x40010400
 80074c8:	40014000 	.word	0x40014000
 80074cc:	40001800 	.word	0x40001800
 80074d0:	00010007 	.word	0x00010007

080074d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d122      	bne.n	8007530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d11b      	bne.n	8007530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0202 	mvn.w	r2, #2
 8007500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f905 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
 800751c:	e005      	b.n	800752a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f8f7 	bl	8007712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f908 	bl	800773a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b04      	cmp	r3, #4
 800753c:	d122      	bne.n	8007584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b04      	cmp	r3, #4
 800754a:	d11b      	bne.n	8007584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0204 	mvn.w	r2, #4
 8007554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2202      	movs	r2, #2
 800755a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f8db 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
 8007570:	e005      	b.n	800757e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f8cd 	bl	8007712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f8de 	bl	800773a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	2b08      	cmp	r3, #8
 8007590:	d122      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b08      	cmp	r3, #8
 800759e:	d11b      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0208 	mvn.w	r2, #8
 80075a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2204      	movs	r2, #4
 80075ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f8b1 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
 80075c4:	e005      	b.n	80075d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f8a3 	bl	8007712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f8b4 	bl	800773a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d122      	bne.n	800762c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d11b      	bne.n	800762c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0210 	mvn.w	r2, #16
 80075fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2208      	movs	r2, #8
 8007602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f887 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
 8007618:	e005      	b.n	8007626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f879 	bl	8007712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f88a 	bl	800773a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b01      	cmp	r3, #1
 8007638:	d10e      	bne.n	8007658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d107      	bne.n	8007658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0201 	mvn.w	r2, #1
 8007650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fb f9ac 	bl	80029b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007662:	2b80      	cmp	r3, #128	; 0x80
 8007664:	d10e      	bne.n	8007684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007670:	2b80      	cmp	r3, #128	; 0x80
 8007672:	d107      	bne.n	8007684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800767c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f91a 	bl	80078b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007692:	d10e      	bne.n	80076b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	d107      	bne.n	80076b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f90d 	bl	80078cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076bc:	2b40      	cmp	r3, #64	; 0x40
 80076be:	d10e      	bne.n	80076de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d107      	bne.n	80076de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f838 	bl	800774e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d10e      	bne.n	800770a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d107      	bne.n	800770a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f06f 0220 	mvn.w	r2, #32
 8007702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f8cd 	bl	80078a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007742:	bf00      	nop
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a40      	ldr	r2, [pc, #256]	; (8007878 <TIM_Base_SetConfig+0x114>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d013      	beq.n	80077a4 <TIM_Base_SetConfig+0x40>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007782:	d00f      	beq.n	80077a4 <TIM_Base_SetConfig+0x40>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a3d      	ldr	r2, [pc, #244]	; (800787c <TIM_Base_SetConfig+0x118>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00b      	beq.n	80077a4 <TIM_Base_SetConfig+0x40>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a3c      	ldr	r2, [pc, #240]	; (8007880 <TIM_Base_SetConfig+0x11c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d007      	beq.n	80077a4 <TIM_Base_SetConfig+0x40>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a3b      	ldr	r2, [pc, #236]	; (8007884 <TIM_Base_SetConfig+0x120>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d003      	beq.n	80077a4 <TIM_Base_SetConfig+0x40>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a3a      	ldr	r2, [pc, #232]	; (8007888 <TIM_Base_SetConfig+0x124>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d108      	bne.n	80077b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a2f      	ldr	r2, [pc, #188]	; (8007878 <TIM_Base_SetConfig+0x114>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d02b      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c4:	d027      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a2c      	ldr	r2, [pc, #176]	; (800787c <TIM_Base_SetConfig+0x118>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d023      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a2b      	ldr	r2, [pc, #172]	; (8007880 <TIM_Base_SetConfig+0x11c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d01f      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a2a      	ldr	r2, [pc, #168]	; (8007884 <TIM_Base_SetConfig+0x120>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d01b      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a29      	ldr	r2, [pc, #164]	; (8007888 <TIM_Base_SetConfig+0x124>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d017      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a28      	ldr	r2, [pc, #160]	; (800788c <TIM_Base_SetConfig+0x128>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d013      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a27      	ldr	r2, [pc, #156]	; (8007890 <TIM_Base_SetConfig+0x12c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00f      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a26      	ldr	r2, [pc, #152]	; (8007894 <TIM_Base_SetConfig+0x130>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00b      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a25      	ldr	r2, [pc, #148]	; (8007898 <TIM_Base_SetConfig+0x134>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d007      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a24      	ldr	r2, [pc, #144]	; (800789c <TIM_Base_SetConfig+0x138>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d003      	beq.n	8007816 <TIM_Base_SetConfig+0xb2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a23      	ldr	r2, [pc, #140]	; (80078a0 <TIM_Base_SetConfig+0x13c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d108      	bne.n	8007828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <TIM_Base_SetConfig+0x114>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d003      	beq.n	800785c <TIM_Base_SetConfig+0xf8>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <TIM_Base_SetConfig+0x124>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d103      	bne.n	8007864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	691a      	ldr	r2, [r3, #16]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	615a      	str	r2, [r3, #20]
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40010000 	.word	0x40010000
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800
 8007884:	40000c00 	.word	0x40000c00
 8007888:	40010400 	.word	0x40010400
 800788c:	40014000 	.word	0x40014000
 8007890:	40014400 	.word	0x40014400
 8007894:	40014800 	.word	0x40014800
 8007898:	40001800 	.word	0x40001800
 800789c:	40001c00 	.word	0x40001c00
 80078a0:	40002000 	.word	0x40002000

080078a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e040      	b.n	8007974 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fc f8a4 	bl	8003a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2224      	movs	r2, #36	; 0x24
 800790c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0201 	bic.w	r2, r2, #1
 800791c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc5c 	bl	80081dc <UART_SetConfig>
 8007924:	4603      	mov	r3, r0
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e022      	b.n	8007974 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 feb2 	bl	80086a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800794a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800795a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 ff39 	bl	80087e4 <UART_CheckIdleState>
 8007972:	4603      	mov	r3, r0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08a      	sub	sp, #40	; 0x28
 8007980:	af02      	add	r7, sp, #8
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	4613      	mov	r3, r2
 800798a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007990:	2b20      	cmp	r3, #32
 8007992:	f040 8081 	bne.w	8007a98 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_UART_Transmit+0x26>
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e079      	b.n	8007a9a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <HAL_UART_Transmit+0x38>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e072      	b.n	8007a9a <HAL_UART_Transmit+0x11e>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2221      	movs	r2, #33	; 0x21
 80079c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079ca:	f7fc fa67 	bl	8003e9c <HAL_GetTick>
 80079ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	88fa      	ldrh	r2, [r7, #6]
 80079d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e8:	d108      	bne.n	80079fc <HAL_UART_Transmit+0x80>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d104      	bne.n	80079fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	e003      	b.n	8007a04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007a0c:	e02c      	b.n	8007a68 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2200      	movs	r2, #0
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 ff16 	bl	800884a <UART_WaitOnFlagUntilTimeout>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e038      	b.n	8007a9a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	3302      	adds	r3, #2
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	e007      	b.n	8007a56 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	3301      	adds	r3, #1
 8007a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1cc      	bne.n	8007a0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2140      	movs	r1, #64	; 0x40
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fee3 	bl	800884a <UART_WaitOnFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e005      	b.n	8007a9a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007a98:	2302      	movs	r3, #2
  }
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3720      	adds	r7, #32
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b08b      	sub	sp, #44	; 0x2c
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d156      	bne.n	8007b68 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <HAL_UART_Transmit_IT+0x22>
 8007ac0:	88fb      	ldrh	r3, [r7, #6]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e04f      	b.n	8007b6a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_UART_Transmit_IT+0x34>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e048      	b.n	8007b6a <HAL_UART_Transmit_IT+0xc6>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	88fa      	ldrh	r2, [r7, #6]
 8007aea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2221      	movs	r2, #33	; 0x21
 8007b08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b12:	d107      	bne.n	8007b24 <HAL_UART_Transmit_IT+0x80>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d103      	bne.n	8007b24 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a16      	ldr	r2, [pc, #88]	; (8007b78 <HAL_UART_Transmit_IT+0xd4>)
 8007b20:	669a      	str	r2, [r3, #104]	; 0x68
 8007b22:	e002      	b.n	8007b2a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <HAL_UART_Transmit_IT+0xd8>)
 8007b28:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	623b      	str	r3, [r7, #32]
 8007b52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	69f9      	ldr	r1, [r7, #28]
 8007b56:	6a3a      	ldr	r2, [r7, #32]
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e6      	bne.n	8007b32 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e000      	b.n	8007b6a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8007b68:	2302      	movs	r3, #2
  }
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	372c      	adds	r7, #44	; 0x2c
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	08008d11 	.word	0x08008d11
 8007b7c:	08008c5b 	.word	0x08008c5b

08007b80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	; 0x28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b92:	2b20      	cmp	r3, #32
 8007b94:	d13d      	bne.n	8007c12 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <HAL_UART_Receive_IT+0x22>
 8007b9c:	88fb      	ldrh	r3, [r7, #6]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e036      	b.n	8007c14 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_UART_Receive_IT+0x34>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e02f      	b.n	8007c14 <HAL_UART_Receive_IT+0x94>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d018      	beq.n	8007c02 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	623b      	str	r3, [r7, #32]
 8007bf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	69f9      	ldr	r1, [r7, #28]
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e6      	bne.n	8007bd0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	461a      	mov	r2, r3
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fee3 	bl	80089d4 <UART_Start_Receive_IT>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	e000      	b.n	8007c14 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c12:	2302      	movs	r3, #2
  }
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3728      	adds	r7, #40	; 0x28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b0ba      	sub	sp, #232	; 0xe8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d115      	bne.n	8007c84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5c:	f003 0320 	and.w	r3, r3, #32
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00f      	beq.n	8007c84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 828f 	beq.w	8008198 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
      }
      return;
 8007c82:	e289      	b.n	8008198 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8117 	beq.w	8007ebc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c9e:	4b85      	ldr	r3, [pc, #532]	; (8007eb4 <HAL_UART_IRQHandler+0x298>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 810a 	beq.w	8007ebc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d011      	beq.n	8007cd8 <HAL_UART_IRQHandler+0xbc>
 8007cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cce:	f043 0201 	orr.w	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d011      	beq.n	8007d08 <HAL_UART_IRQHandler+0xec>
 8007ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cfe:	f043 0204 	orr.w	r2, r3, #4
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d011      	beq.n	8007d38 <HAL_UART_IRQHandler+0x11c>
 8007d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2204      	movs	r2, #4
 8007d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d2e:	f043 0202 	orr.w	r2, r3, #2
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3c:	f003 0308 	and.w	r3, r3, #8
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d017      	beq.n	8007d74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d105      	bne.n	8007d5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2208      	movs	r2, #8
 8007d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d6a:	f043 0208 	orr.w	r2, r3, #8
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d012      	beq.n	8007da6 <HAL_UART_IRQHandler+0x18a>
 8007d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00c      	beq.n	8007da6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 81f5 	beq.w	800819c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00d      	beq.n	8007dda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dee:	2b40      	cmp	r3, #64	; 0x40
 8007df0:	d005      	beq.n	8007dfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d04f      	beq.n	8007e9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 feb2 	bl	8008b68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d141      	bne.n	8007e96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1d9      	bne.n	8007e12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d013      	beq.n	8007e8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6a:	4a13      	ldr	r2, [pc, #76]	; (8007eb8 <HAL_UART_IRQHandler+0x29c>)
 8007e6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fc f994 	bl	80041a0 <HAL_DMA_Abort_IT>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d017      	beq.n	8007eae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8c:	e00f      	b.n	8007eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f98e 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	e00b      	b.n	8007eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f98a 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9c:	e007      	b.n	8007eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f986 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007eac:	e176      	b.n	800819c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eae:	bf00      	nop
    return;
 8007eb0:	e174      	b.n	800819c <HAL_UART_IRQHandler+0x580>
 8007eb2:	bf00      	nop
 8007eb4:	04000120 	.word	0x04000120
 8007eb8:	08008c2f 	.word	0x08008c2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	f040 8144 	bne.w	800814e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0310 	and.w	r3, r3, #16
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 813d 	beq.w	800814e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 8136 	beq.w	800814e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2210      	movs	r2, #16
 8007ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef4:	2b40      	cmp	r3, #64	; 0x40
 8007ef6:	f040 80b2 	bne.w	800805e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8148 	beq.w	80081a0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	f080 8140 	bcs.w	80081a0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f34:	f000 8085 	beq.w	8008042 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1da      	bne.n	8007f38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007faa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e1      	bne.n	8007f82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e3      	bne.n	8007fbe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008012:	f023 0310 	bic.w	r3, r3, #16
 8008016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008024:	65bb      	str	r3, [r7, #88]	; 0x58
 8008026:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800802a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e4      	bne.n	8008002 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	4618      	mov	r0, r3
 800803e:	f7fc f83f 	bl	80040c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800804e:	b29b      	uxth	r3, r3
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	b29b      	uxth	r3, r3
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f8b4 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800805c:	e0a0      	b.n	80081a0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800806a:	b29b      	uxth	r3, r3
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008078:	b29b      	uxth	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 8092 	beq.w	80081a4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8008080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 808d 	beq.w	80081a4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800809e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44
 80080ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e4      	bne.n	800808a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3308      	adds	r3, #8
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	623b      	str	r3, [r7, #32]
   return(result);
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	f023 0301 	bic.w	r3, r3, #1
 80080d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3308      	adds	r3, #8
 80080e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080e4:	633a      	str	r2, [r7, #48]	; 0x30
 80080e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e3      	bne.n	80080c0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	60fb      	str	r3, [r7, #12]
   return(result);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0310 	bic.w	r3, r3, #16
 800811e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	69b9      	ldr	r1, [r7, #24]
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	617b      	str	r3, [r7, #20]
   return(result);
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e4      	bne.n	800810a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f83c 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800814c:	e02a      	b.n	80081a4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800814e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00e      	beq.n	8008178 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800815a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008162:	2b00      	cmp	r3, #0
 8008164:	d008      	beq.n	8008178 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01c      	beq.n	80081a8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
    }
    return;
 8008176:	e017      	b.n	80081a8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d012      	beq.n	80081aa <HAL_UART_IRQHandler+0x58e>
 8008184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fe1d 	bl	8008dd0 <UART_EndTransmit_IT>
    return;
 8008196:	e008      	b.n	80081aa <HAL_UART_IRQHandler+0x58e>
      return;
 8008198:	bf00      	nop
 800819a:	e006      	b.n	80081aa <HAL_UART_IRQHandler+0x58e>
    return;
 800819c:	bf00      	nop
 800819e:	e004      	b.n	80081aa <HAL_UART_IRQHandler+0x58e>
      return;
 80081a0:	bf00      	nop
 80081a2:	e002      	b.n	80081aa <HAL_UART_IRQHandler+0x58e>
      return;
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <HAL_UART_IRQHandler+0x58e>
    return;
 80081a8:	bf00      	nop
  }

}
 80081aa:	37e8      	adds	r7, #232	; 0xe8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	4ba7      	ldr	r3, [pc, #668]	; (80084a4 <UART_SetConfig+0x2c8>)
 8008208:	4013      	ands	r3, r2
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	6979      	ldr	r1, [r7, #20]
 8008210:	430b      	orrs	r3, r1
 8008212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	430a      	orrs	r2, r1
 800824c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a95      	ldr	r2, [pc, #596]	; (80084a8 <UART_SetConfig+0x2cc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d120      	bne.n	800829a <UART_SetConfig+0xbe>
 8008258:	4b94      	ldr	r3, [pc, #592]	; (80084ac <UART_SetConfig+0x2d0>)
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	2b03      	cmp	r3, #3
 8008264:	d816      	bhi.n	8008294 <UART_SetConfig+0xb8>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <UART_SetConfig+0x90>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	0800827d 	.word	0x0800827d
 8008270:	08008289 	.word	0x08008289
 8008274:	08008283 	.word	0x08008283
 8008278:	0800828f 	.word	0x0800828f
 800827c:	2301      	movs	r3, #1
 800827e:	77fb      	strb	r3, [r7, #31]
 8008280:	e14f      	b.n	8008522 <UART_SetConfig+0x346>
 8008282:	2302      	movs	r3, #2
 8008284:	77fb      	strb	r3, [r7, #31]
 8008286:	e14c      	b.n	8008522 <UART_SetConfig+0x346>
 8008288:	2304      	movs	r3, #4
 800828a:	77fb      	strb	r3, [r7, #31]
 800828c:	e149      	b.n	8008522 <UART_SetConfig+0x346>
 800828e:	2308      	movs	r3, #8
 8008290:	77fb      	strb	r3, [r7, #31]
 8008292:	e146      	b.n	8008522 <UART_SetConfig+0x346>
 8008294:	2310      	movs	r3, #16
 8008296:	77fb      	strb	r3, [r7, #31]
 8008298:	e143      	b.n	8008522 <UART_SetConfig+0x346>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a84      	ldr	r2, [pc, #528]	; (80084b0 <UART_SetConfig+0x2d4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d132      	bne.n	800830a <UART_SetConfig+0x12e>
 80082a4:	4b81      	ldr	r3, [pc, #516]	; (80084ac <UART_SetConfig+0x2d0>)
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	f003 030c 	and.w	r3, r3, #12
 80082ae:	2b0c      	cmp	r3, #12
 80082b0:	d828      	bhi.n	8008304 <UART_SetConfig+0x128>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <UART_SetConfig+0xdc>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	080082ed 	.word	0x080082ed
 80082bc:	08008305 	.word	0x08008305
 80082c0:	08008305 	.word	0x08008305
 80082c4:	08008305 	.word	0x08008305
 80082c8:	080082f9 	.word	0x080082f9
 80082cc:	08008305 	.word	0x08008305
 80082d0:	08008305 	.word	0x08008305
 80082d4:	08008305 	.word	0x08008305
 80082d8:	080082f3 	.word	0x080082f3
 80082dc:	08008305 	.word	0x08008305
 80082e0:	08008305 	.word	0x08008305
 80082e4:	08008305 	.word	0x08008305
 80082e8:	080082ff 	.word	0x080082ff
 80082ec:	2300      	movs	r3, #0
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e117      	b.n	8008522 <UART_SetConfig+0x346>
 80082f2:	2302      	movs	r3, #2
 80082f4:	77fb      	strb	r3, [r7, #31]
 80082f6:	e114      	b.n	8008522 <UART_SetConfig+0x346>
 80082f8:	2304      	movs	r3, #4
 80082fa:	77fb      	strb	r3, [r7, #31]
 80082fc:	e111      	b.n	8008522 <UART_SetConfig+0x346>
 80082fe:	2308      	movs	r3, #8
 8008300:	77fb      	strb	r3, [r7, #31]
 8008302:	e10e      	b.n	8008522 <UART_SetConfig+0x346>
 8008304:	2310      	movs	r3, #16
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	e10b      	b.n	8008522 <UART_SetConfig+0x346>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a69      	ldr	r2, [pc, #420]	; (80084b4 <UART_SetConfig+0x2d8>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d120      	bne.n	8008356 <UART_SetConfig+0x17a>
 8008314:	4b65      	ldr	r3, [pc, #404]	; (80084ac <UART_SetConfig+0x2d0>)
 8008316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800831e:	2b30      	cmp	r3, #48	; 0x30
 8008320:	d013      	beq.n	800834a <UART_SetConfig+0x16e>
 8008322:	2b30      	cmp	r3, #48	; 0x30
 8008324:	d814      	bhi.n	8008350 <UART_SetConfig+0x174>
 8008326:	2b20      	cmp	r3, #32
 8008328:	d009      	beq.n	800833e <UART_SetConfig+0x162>
 800832a:	2b20      	cmp	r3, #32
 800832c:	d810      	bhi.n	8008350 <UART_SetConfig+0x174>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <UART_SetConfig+0x15c>
 8008332:	2b10      	cmp	r3, #16
 8008334:	d006      	beq.n	8008344 <UART_SetConfig+0x168>
 8008336:	e00b      	b.n	8008350 <UART_SetConfig+0x174>
 8008338:	2300      	movs	r3, #0
 800833a:	77fb      	strb	r3, [r7, #31]
 800833c:	e0f1      	b.n	8008522 <UART_SetConfig+0x346>
 800833e:	2302      	movs	r3, #2
 8008340:	77fb      	strb	r3, [r7, #31]
 8008342:	e0ee      	b.n	8008522 <UART_SetConfig+0x346>
 8008344:	2304      	movs	r3, #4
 8008346:	77fb      	strb	r3, [r7, #31]
 8008348:	e0eb      	b.n	8008522 <UART_SetConfig+0x346>
 800834a:	2308      	movs	r3, #8
 800834c:	77fb      	strb	r3, [r7, #31]
 800834e:	e0e8      	b.n	8008522 <UART_SetConfig+0x346>
 8008350:	2310      	movs	r3, #16
 8008352:	77fb      	strb	r3, [r7, #31]
 8008354:	e0e5      	b.n	8008522 <UART_SetConfig+0x346>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a57      	ldr	r2, [pc, #348]	; (80084b8 <UART_SetConfig+0x2dc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d120      	bne.n	80083a2 <UART_SetConfig+0x1c6>
 8008360:	4b52      	ldr	r3, [pc, #328]	; (80084ac <UART_SetConfig+0x2d0>)
 8008362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008366:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800836a:	2bc0      	cmp	r3, #192	; 0xc0
 800836c:	d013      	beq.n	8008396 <UART_SetConfig+0x1ba>
 800836e:	2bc0      	cmp	r3, #192	; 0xc0
 8008370:	d814      	bhi.n	800839c <UART_SetConfig+0x1c0>
 8008372:	2b80      	cmp	r3, #128	; 0x80
 8008374:	d009      	beq.n	800838a <UART_SetConfig+0x1ae>
 8008376:	2b80      	cmp	r3, #128	; 0x80
 8008378:	d810      	bhi.n	800839c <UART_SetConfig+0x1c0>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <UART_SetConfig+0x1a8>
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d006      	beq.n	8008390 <UART_SetConfig+0x1b4>
 8008382:	e00b      	b.n	800839c <UART_SetConfig+0x1c0>
 8008384:	2300      	movs	r3, #0
 8008386:	77fb      	strb	r3, [r7, #31]
 8008388:	e0cb      	b.n	8008522 <UART_SetConfig+0x346>
 800838a:	2302      	movs	r3, #2
 800838c:	77fb      	strb	r3, [r7, #31]
 800838e:	e0c8      	b.n	8008522 <UART_SetConfig+0x346>
 8008390:	2304      	movs	r3, #4
 8008392:	77fb      	strb	r3, [r7, #31]
 8008394:	e0c5      	b.n	8008522 <UART_SetConfig+0x346>
 8008396:	2308      	movs	r3, #8
 8008398:	77fb      	strb	r3, [r7, #31]
 800839a:	e0c2      	b.n	8008522 <UART_SetConfig+0x346>
 800839c:	2310      	movs	r3, #16
 800839e:	77fb      	strb	r3, [r7, #31]
 80083a0:	e0bf      	b.n	8008522 <UART_SetConfig+0x346>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a45      	ldr	r2, [pc, #276]	; (80084bc <UART_SetConfig+0x2e0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d125      	bne.n	80083f8 <UART_SetConfig+0x21c>
 80083ac:	4b3f      	ldr	r3, [pc, #252]	; (80084ac <UART_SetConfig+0x2d0>)
 80083ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ba:	d017      	beq.n	80083ec <UART_SetConfig+0x210>
 80083bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083c0:	d817      	bhi.n	80083f2 <UART_SetConfig+0x216>
 80083c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c6:	d00b      	beq.n	80083e0 <UART_SetConfig+0x204>
 80083c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083cc:	d811      	bhi.n	80083f2 <UART_SetConfig+0x216>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <UART_SetConfig+0x1fe>
 80083d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d6:	d006      	beq.n	80083e6 <UART_SetConfig+0x20a>
 80083d8:	e00b      	b.n	80083f2 <UART_SetConfig+0x216>
 80083da:	2300      	movs	r3, #0
 80083dc:	77fb      	strb	r3, [r7, #31]
 80083de:	e0a0      	b.n	8008522 <UART_SetConfig+0x346>
 80083e0:	2302      	movs	r3, #2
 80083e2:	77fb      	strb	r3, [r7, #31]
 80083e4:	e09d      	b.n	8008522 <UART_SetConfig+0x346>
 80083e6:	2304      	movs	r3, #4
 80083e8:	77fb      	strb	r3, [r7, #31]
 80083ea:	e09a      	b.n	8008522 <UART_SetConfig+0x346>
 80083ec:	2308      	movs	r3, #8
 80083ee:	77fb      	strb	r3, [r7, #31]
 80083f0:	e097      	b.n	8008522 <UART_SetConfig+0x346>
 80083f2:	2310      	movs	r3, #16
 80083f4:	77fb      	strb	r3, [r7, #31]
 80083f6:	e094      	b.n	8008522 <UART_SetConfig+0x346>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a30      	ldr	r2, [pc, #192]	; (80084c0 <UART_SetConfig+0x2e4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d125      	bne.n	800844e <UART_SetConfig+0x272>
 8008402:	4b2a      	ldr	r3, [pc, #168]	; (80084ac <UART_SetConfig+0x2d0>)
 8008404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800840c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008410:	d017      	beq.n	8008442 <UART_SetConfig+0x266>
 8008412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008416:	d817      	bhi.n	8008448 <UART_SetConfig+0x26c>
 8008418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800841c:	d00b      	beq.n	8008436 <UART_SetConfig+0x25a>
 800841e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008422:	d811      	bhi.n	8008448 <UART_SetConfig+0x26c>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <UART_SetConfig+0x254>
 8008428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800842c:	d006      	beq.n	800843c <UART_SetConfig+0x260>
 800842e:	e00b      	b.n	8008448 <UART_SetConfig+0x26c>
 8008430:	2301      	movs	r3, #1
 8008432:	77fb      	strb	r3, [r7, #31]
 8008434:	e075      	b.n	8008522 <UART_SetConfig+0x346>
 8008436:	2302      	movs	r3, #2
 8008438:	77fb      	strb	r3, [r7, #31]
 800843a:	e072      	b.n	8008522 <UART_SetConfig+0x346>
 800843c:	2304      	movs	r3, #4
 800843e:	77fb      	strb	r3, [r7, #31]
 8008440:	e06f      	b.n	8008522 <UART_SetConfig+0x346>
 8008442:	2308      	movs	r3, #8
 8008444:	77fb      	strb	r3, [r7, #31]
 8008446:	e06c      	b.n	8008522 <UART_SetConfig+0x346>
 8008448:	2310      	movs	r3, #16
 800844a:	77fb      	strb	r3, [r7, #31]
 800844c:	e069      	b.n	8008522 <UART_SetConfig+0x346>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a1c      	ldr	r2, [pc, #112]	; (80084c4 <UART_SetConfig+0x2e8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d137      	bne.n	80084c8 <UART_SetConfig+0x2ec>
 8008458:	4b14      	ldr	r3, [pc, #80]	; (80084ac <UART_SetConfig+0x2d0>)
 800845a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800845e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008462:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008466:	d017      	beq.n	8008498 <UART_SetConfig+0x2bc>
 8008468:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800846c:	d817      	bhi.n	800849e <UART_SetConfig+0x2c2>
 800846e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008472:	d00b      	beq.n	800848c <UART_SetConfig+0x2b0>
 8008474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008478:	d811      	bhi.n	800849e <UART_SetConfig+0x2c2>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <UART_SetConfig+0x2aa>
 800847e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008482:	d006      	beq.n	8008492 <UART_SetConfig+0x2b6>
 8008484:	e00b      	b.n	800849e <UART_SetConfig+0x2c2>
 8008486:	2300      	movs	r3, #0
 8008488:	77fb      	strb	r3, [r7, #31]
 800848a:	e04a      	b.n	8008522 <UART_SetConfig+0x346>
 800848c:	2302      	movs	r3, #2
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e047      	b.n	8008522 <UART_SetConfig+0x346>
 8008492:	2304      	movs	r3, #4
 8008494:	77fb      	strb	r3, [r7, #31]
 8008496:	e044      	b.n	8008522 <UART_SetConfig+0x346>
 8008498:	2308      	movs	r3, #8
 800849a:	77fb      	strb	r3, [r7, #31]
 800849c:	e041      	b.n	8008522 <UART_SetConfig+0x346>
 800849e:	2310      	movs	r3, #16
 80084a0:	77fb      	strb	r3, [r7, #31]
 80084a2:	e03e      	b.n	8008522 <UART_SetConfig+0x346>
 80084a4:	efff69f3 	.word	0xefff69f3
 80084a8:	40011000 	.word	0x40011000
 80084ac:	40023800 	.word	0x40023800
 80084b0:	40004400 	.word	0x40004400
 80084b4:	40004800 	.word	0x40004800
 80084b8:	40004c00 	.word	0x40004c00
 80084bc:	40005000 	.word	0x40005000
 80084c0:	40011400 	.word	0x40011400
 80084c4:	40007800 	.word	0x40007800
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a71      	ldr	r2, [pc, #452]	; (8008694 <UART_SetConfig+0x4b8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d125      	bne.n	800851e <UART_SetConfig+0x342>
 80084d2:	4b71      	ldr	r3, [pc, #452]	; (8008698 <UART_SetConfig+0x4bc>)
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084e0:	d017      	beq.n	8008512 <UART_SetConfig+0x336>
 80084e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084e6:	d817      	bhi.n	8008518 <UART_SetConfig+0x33c>
 80084e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ec:	d00b      	beq.n	8008506 <UART_SetConfig+0x32a>
 80084ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f2:	d811      	bhi.n	8008518 <UART_SetConfig+0x33c>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <UART_SetConfig+0x324>
 80084f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084fc:	d006      	beq.n	800850c <UART_SetConfig+0x330>
 80084fe:	e00b      	b.n	8008518 <UART_SetConfig+0x33c>
 8008500:	2300      	movs	r3, #0
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	e00d      	b.n	8008522 <UART_SetConfig+0x346>
 8008506:	2302      	movs	r3, #2
 8008508:	77fb      	strb	r3, [r7, #31]
 800850a:	e00a      	b.n	8008522 <UART_SetConfig+0x346>
 800850c:	2304      	movs	r3, #4
 800850e:	77fb      	strb	r3, [r7, #31]
 8008510:	e007      	b.n	8008522 <UART_SetConfig+0x346>
 8008512:	2308      	movs	r3, #8
 8008514:	77fb      	strb	r3, [r7, #31]
 8008516:	e004      	b.n	8008522 <UART_SetConfig+0x346>
 8008518:	2310      	movs	r3, #16
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	e001      	b.n	8008522 <UART_SetConfig+0x346>
 800851e:	2310      	movs	r3, #16
 8008520:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800852a:	d15a      	bne.n	80085e2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800852c:	7ffb      	ldrb	r3, [r7, #31]
 800852e:	2b08      	cmp	r3, #8
 8008530:	d827      	bhi.n	8008582 <UART_SetConfig+0x3a6>
 8008532:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <UART_SetConfig+0x35c>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	0800855d 	.word	0x0800855d
 800853c:	08008565 	.word	0x08008565
 8008540:	0800856d 	.word	0x0800856d
 8008544:	08008583 	.word	0x08008583
 8008548:	08008573 	.word	0x08008573
 800854c:	08008583 	.word	0x08008583
 8008550:	08008583 	.word	0x08008583
 8008554:	08008583 	.word	0x08008583
 8008558:	0800857b 	.word	0x0800857b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800855c:	f7fd ff60 	bl	8006420 <HAL_RCC_GetPCLK1Freq>
 8008560:	61b8      	str	r0, [r7, #24]
        break;
 8008562:	e013      	b.n	800858c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008564:	f7fd ff70 	bl	8006448 <HAL_RCC_GetPCLK2Freq>
 8008568:	61b8      	str	r0, [r7, #24]
        break;
 800856a:	e00f      	b.n	800858c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800856c:	4b4b      	ldr	r3, [pc, #300]	; (800869c <UART_SetConfig+0x4c0>)
 800856e:	61bb      	str	r3, [r7, #24]
        break;
 8008570:	e00c      	b.n	800858c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008572:	f7fd fe93 	bl	800629c <HAL_RCC_GetSysClockFreq>
 8008576:	61b8      	str	r0, [r7, #24]
        break;
 8008578:	e008      	b.n	800858c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800857a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800857e:	61bb      	str	r3, [r7, #24]
        break;
 8008580:	e004      	b.n	800858c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	77bb      	strb	r3, [r7, #30]
        break;
 800858a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d074      	beq.n	800867c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	005a      	lsls	r2, r3, #1
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	085b      	lsrs	r3, r3, #1
 800859c:	441a      	add	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	d916      	bls.n	80085dc <UART_SetConfig+0x400>
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b4:	d212      	bcs.n	80085dc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	f023 030f 	bic.w	r3, r3, #15
 80085be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	085b      	lsrs	r3, r3, #1
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	89fb      	ldrh	r3, [r7, #14]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	89fa      	ldrh	r2, [r7, #14]
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	e04f      	b.n	800867c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	77bb      	strb	r3, [r7, #30]
 80085e0:	e04c      	b.n	800867c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085e2:	7ffb      	ldrb	r3, [r7, #31]
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d828      	bhi.n	800863a <UART_SetConfig+0x45e>
 80085e8:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0x414>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	08008615 	.word	0x08008615
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	08008625 	.word	0x08008625
 80085fc:	0800863b 	.word	0x0800863b
 8008600:	0800862b 	.word	0x0800862b
 8008604:	0800863b 	.word	0x0800863b
 8008608:	0800863b 	.word	0x0800863b
 800860c:	0800863b 	.word	0x0800863b
 8008610:	08008633 	.word	0x08008633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008614:	f7fd ff04 	bl	8006420 <HAL_RCC_GetPCLK1Freq>
 8008618:	61b8      	str	r0, [r7, #24]
        break;
 800861a:	e013      	b.n	8008644 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800861c:	f7fd ff14 	bl	8006448 <HAL_RCC_GetPCLK2Freq>
 8008620:	61b8      	str	r0, [r7, #24]
        break;
 8008622:	e00f      	b.n	8008644 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008624:	4b1d      	ldr	r3, [pc, #116]	; (800869c <UART_SetConfig+0x4c0>)
 8008626:	61bb      	str	r3, [r7, #24]
        break;
 8008628:	e00c      	b.n	8008644 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800862a:	f7fd fe37 	bl	800629c <HAL_RCC_GetSysClockFreq>
 800862e:	61b8      	str	r0, [r7, #24]
        break;
 8008630:	e008      	b.n	8008644 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008636:	61bb      	str	r3, [r7, #24]
        break;
 8008638:	e004      	b.n	8008644 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	77bb      	strb	r3, [r7, #30]
        break;
 8008642:	bf00      	nop
    }

    if (pclk != 0U)
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d018      	beq.n	800867c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	085a      	lsrs	r2, r3, #1
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	441a      	add	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	fbb2 f3f3 	udiv	r3, r2, r3
 800865c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b0f      	cmp	r3, #15
 8008662:	d909      	bls.n	8008678 <UART_SetConfig+0x49c>
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866a:	d205      	bcs.n	8008678 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	e001      	b.n	800867c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008688:	7fbb      	ldrb	r3, [r7, #30]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3720      	adds	r7, #32
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	40007c00 	.word	0x40007c00
 8008698:	40023800 	.word	0x40023800
 800869c:	00f42400 	.word	0x00f42400

080086a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01a      	beq.n	80087b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800879e:	d10a      	bne.n	80087b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	605a      	str	r2, [r3, #4]
  }
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f4:	f7fb fb52 	bl	8003e9c <HAL_GetTick>
 80087f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b08      	cmp	r3, #8
 8008806:	d10e      	bne.n	8008826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f817 	bl	800884a <UART_WaitOnFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e00d      	b.n	8008842 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b09c      	sub	sp, #112	; 0x70
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	603b      	str	r3, [r7, #0]
 8008856:	4613      	mov	r3, r2
 8008858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885a:	e0a5      	b.n	80089a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800885c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008862:	f000 80a1 	beq.w	80089a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008866:	f7fb fb19 	bl	8003e9c <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008872:	429a      	cmp	r2, r3
 8008874:	d302      	bcc.n	800887c <UART_WaitOnFlagUntilTimeout+0x32>
 8008876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008878:	2b00      	cmp	r3, #0
 800887a:	d13e      	bne.n	80088fa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800888a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800888c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008890:	667b      	str	r3, [r7, #100]	; 0x64
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800889a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800889c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e6      	bne.n	800887c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3308      	adds	r3, #8
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	663b      	str	r3, [r7, #96]	; 0x60
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80088d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e5      	bne.n	80088ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2220      	movs	r2, #32
 80088e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2220      	movs	r2, #32
 80088ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e067      	b.n	80089ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d04f      	beq.n	80089a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008916:	d147      	bne.n	80089a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008920:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008940:	637b      	str	r3, [r7, #52]	; 0x34
 8008942:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e6      	bne.n	8008922 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	613b      	str	r3, [r7, #16]
   return(result);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f023 0301 	bic.w	r3, r3, #1
 800896a:	66bb      	str	r3, [r7, #104]	; 0x68
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008974:	623a      	str	r2, [r7, #32]
 8008976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	69f9      	ldr	r1, [r7, #28]
 800897a:	6a3a      	ldr	r2, [r7, #32]
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	61bb      	str	r3, [r7, #24]
   return(result);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e5      	bne.n	8008954 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2220      	movs	r2, #32
 800898c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2220      	movs	r2, #32
 8008992:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2220      	movs	r2, #32
 8008998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e010      	b.n	80089ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	69da      	ldr	r2, [r3, #28]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4013      	ands	r3, r2
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	bf0c      	ite	eq
 80089b8:	2301      	moveq	r3, #1
 80089ba:	2300      	movne	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	f43f af4a 	beq.w	800885c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3770      	adds	r7, #112	; 0x70
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b097      	sub	sp, #92	; 0x5c
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4613      	mov	r3, r2
 80089e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	88fa      	ldrh	r2, [r7, #6]
 80089ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	88fa      	ldrh	r2, [r7, #6]
 80089f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a06:	d10e      	bne.n	8008a26 <UART_Start_Receive_IT+0x52>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d105      	bne.n	8008a1c <UART_Start_Receive_IT+0x48>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a1a:	e02d      	b.n	8008a78 <UART_Start_Receive_IT+0xa4>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	22ff      	movs	r2, #255	; 0xff
 8008a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a24:	e028      	b.n	8008a78 <UART_Start_Receive_IT+0xa4>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10d      	bne.n	8008a4a <UART_Start_Receive_IT+0x76>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <UART_Start_Receive_IT+0x6c>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	22ff      	movs	r2, #255	; 0xff
 8008a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a3e:	e01b      	b.n	8008a78 <UART_Start_Receive_IT+0xa4>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	227f      	movs	r2, #127	; 0x7f
 8008a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a48:	e016      	b.n	8008a78 <UART_Start_Receive_IT+0xa4>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a52:	d10d      	bne.n	8008a70 <UART_Start_Receive_IT+0x9c>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <UART_Start_Receive_IT+0x92>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	227f      	movs	r2, #127	; 0x7f
 8008a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a64:	e008      	b.n	8008a78 <UART_Start_Receive_IT+0xa4>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	223f      	movs	r2, #63	; 0x3f
 8008a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a6e:	e003      	b.n	8008a78 <UART_Start_Receive_IT+0xa4>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2222      	movs	r2, #34	; 0x22
 8008a84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	f043 0301 	orr.w	r3, r3, #1
 8008a9c:	657b      	str	r3, [r7, #84]	; 0x54
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008aa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e5      	bne.n	8008a86 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac2:	d107      	bne.n	8008ad4 <UART_Start_Receive_IT+0x100>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d103      	bne.n	8008ad4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4a24      	ldr	r2, [pc, #144]	; (8008b60 <UART_Start_Receive_IT+0x18c>)
 8008ad0:	665a      	str	r2, [r3, #100]	; 0x64
 8008ad2:	e002      	b.n	8008ada <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a23      	ldr	r2, [pc, #140]	; (8008b64 <UART_Start_Receive_IT+0x190>)
 8008ad8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d019      	beq.n	8008b1e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b08:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e6      	bne.n	8008aea <UART_Start_Receive_IT+0x116>
 8008b1c:	e018      	b.n	8008b50 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f043 0320 	orr.w	r3, r3, #32
 8008b32:	653b      	str	r3, [r7, #80]	; 0x50
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b3c:	623b      	str	r3, [r7, #32]
 8008b3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	69f9      	ldr	r1, [r7, #28]
 8008b42:	6a3a      	ldr	r2, [r7, #32]
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	375c      	adds	r7, #92	; 0x5c
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	08008f81 	.word	0x08008f81
 8008b64:	08008e25 	.word	0x08008e25

08008b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b095      	sub	sp, #84	; 0x54
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e6      	bne.n	8008b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e5      	bne.n	8008ba2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d118      	bne.n	8008c10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	e853 3f00 	ldrex	r3, [r3]
 8008bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f023 0310 	bic.w	r3, r3, #16
 8008bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	6979      	ldr	r1, [r7, #20]
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	e841 2300 	strex	r3, r2, [r1]
 8008c08:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e6      	bne.n	8008bde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008c22:	bf00      	nop
 8008c24:	3754      	adds	r7, #84	; 0x54
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7ff faaf 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c52:	bf00      	nop
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b08f      	sub	sp, #60	; 0x3c
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c66:	2b21      	cmp	r3, #33	; 0x21
 8008c68:	d14c      	bne.n	8008d04 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d132      	bne.n	8008cdc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c96:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e6      	bne.n	8008c76 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6979      	ldr	r1, [r7, #20]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e6      	bne.n	8008ca8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008cda:	e013      	b.n	8008d04 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008d04:	bf00      	nop
 8008d06:	373c      	adds	r7, #60	; 0x3c
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b091      	sub	sp, #68	; 0x44
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d1c:	2b21      	cmp	r3, #33	; 0x21
 8008d1e:	d151      	bne.n	8008dc4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d132      	bne.n	8008d92 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	623b      	str	r3, [r7, #32]
   return(result);
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e6      	bne.n	8008d2c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d72:	637b      	str	r3, [r7, #52]	; 0x34
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7c:	61fb      	str	r3, [r7, #28]
 8008d7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	69b9      	ldr	r1, [r7, #24]
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	617b      	str	r3, [r7, #20]
   return(result);
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e6      	bne.n	8008d5e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008d90:	e018      	b.n	8008dc4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008da6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dac:	1c9a      	adds	r2, r3, #2
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008dc4:	bf00      	nop
 8008dc6:	3744      	adds	r7, #68	; 0x44
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dec:	61fb      	str	r3, [r7, #28]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	61bb      	str	r3, [r7, #24]
 8008df8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6979      	ldr	r1, [r7, #20]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	613b      	str	r3, [r7, #16]
   return(result);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e6      	bne.n	8008dd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f9 fb92 	bl	8002540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e1c:	bf00      	nop
 8008e1e:	3720      	adds	r7, #32
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b096      	sub	sp, #88	; 0x58
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e3a:	2b22      	cmp	r3, #34	; 0x22
 8008e3c:	f040 8094 	bne.w	8008f68 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e4a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008e4e:	b2d9      	uxtb	r1, r3
 8008e50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5a:	400a      	ands	r2, r1
 8008e5c:	b2d2      	uxtb	r2, r2
 8008e5e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	3b01      	subs	r3, #1
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d177      	bne.n	8008f78 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ea8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e6      	bne.n	8008e88 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008eda:	633a      	str	r2, [r7, #48]	; 0x30
 8008edc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e5      	bne.n	8008eba <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d12e      	bne.n	8008f60 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f023 0310 	bic.w	r3, r3, #16
 8008f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f26:	61fb      	str	r3, [r7, #28]
 8008f28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	69b9      	ldr	r1, [r7, #24]
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	617b      	str	r3, [r7, #20]
   return(result);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e6      	bne.n	8008f08 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b10      	cmp	r3, #16
 8008f46:	d103      	bne.n	8008f50 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2210      	movs	r2, #16
 8008f4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff f933 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f5e:	e00b      	b.n	8008f78 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7f9 f803 	bl	8001f6c <HAL_UART_RxCpltCallback>
}
 8008f66:	e007      	b.n	8008f78 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0208 	orr.w	r2, r2, #8
 8008f76:	619a      	str	r2, [r3, #24]
}
 8008f78:	bf00      	nop
 8008f7a:	3758      	adds	r7, #88	; 0x58
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b096      	sub	sp, #88	; 0x58
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f96:	2b22      	cmp	r3, #34	; 0x22
 8008f98:	f040 8094 	bne.w	80090c4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008faa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008fb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc0:	1c9a      	adds	r2, r3, #2
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d177      	bne.n	80090d4 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009002:	643b      	str	r3, [r7, #64]	; 0x40
 8009004:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e6      	bne.n	8008fe4 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	61fb      	str	r3, [r7, #28]
   return(result);
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	64bb      	str	r3, [r7, #72]	; 0x48
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800903c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e5      	bne.n	8009016 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2220      	movs	r2, #32
 800904e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800905a:	2b01      	cmp	r3, #1
 800905c:	d12e      	bne.n	80090bc <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	60bb      	str	r3, [r7, #8]
   return(result);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	f023 0310 	bic.w	r3, r3, #16
 8009078:	647b      	str	r3, [r7, #68]	; 0x44
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6979      	ldr	r1, [r7, #20]
 8009088:	69ba      	ldr	r2, [r7, #24]
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	613b      	str	r3, [r7, #16]
   return(result);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e6      	bne.n	8009064 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	f003 0310 	and.w	r3, r3, #16
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d103      	bne.n	80090ac <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2210      	movs	r2, #16
 80090aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff f885 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090ba:	e00b      	b.n	80090d4 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7f8 ff55 	bl	8001f6c <HAL_UART_RxCpltCallback>
}
 80090c2:	e007      	b.n	80090d4 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0208 	orr.w	r2, r2, #8
 80090d2:	619a      	str	r2, [r3, #24]
}
 80090d4:	bf00      	nop
 80090d6:	3758      	adds	r7, #88	; 0x58
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <setIP>:

const ip4_addr_t* getIPAddr(){
	return netif_ip4_addr(&gnetif);
}

void setIP(u32_t addr){
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	60fb      	str	r3, [r7, #12]
	netif_set_ipaddr(&gnetif,&temp);
 80090e8:	f107 030c 	add.w	r3, r7, #12
 80090ec:	4619      	mov	r1, r3
 80090ee:	4803      	ldr	r0, [pc, #12]	; (80090fc <setIP+0x20>)
 80090f0:	f007 fae2 	bl	80106b8 <netif_set_ipaddr>
}
 80090f4:	bf00      	nop
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	200055bc 	.word	0x200055bc

08009100 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009106:	4b8c      	ldr	r3, [pc, #560]	; (8009338 <MX_LWIP_Init+0x238>)
 8009108:	22c0      	movs	r2, #192	; 0xc0
 800910a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800910c:	4b8a      	ldr	r3, [pc, #552]	; (8009338 <MX_LWIP_Init+0x238>)
 800910e:	22a8      	movs	r2, #168	; 0xa8
 8009110:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009112:	4b89      	ldr	r3, [pc, #548]	; (8009338 <MX_LWIP_Init+0x238>)
 8009114:	2200      	movs	r2, #0
 8009116:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 55;
 8009118:	4b87      	ldr	r3, [pc, #540]	; (8009338 <MX_LWIP_Init+0x238>)
 800911a:	2237      	movs	r2, #55	; 0x37
 800911c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800911e:	4b87      	ldr	r3, [pc, #540]	; (800933c <MX_LWIP_Init+0x23c>)
 8009120:	22ff      	movs	r2, #255	; 0xff
 8009122:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009124:	4b85      	ldr	r3, [pc, #532]	; (800933c <MX_LWIP_Init+0x23c>)
 8009126:	22ff      	movs	r2, #255	; 0xff
 8009128:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800912a:	4b84      	ldr	r3, [pc, #528]	; (800933c <MX_LWIP_Init+0x23c>)
 800912c:	22ff      	movs	r2, #255	; 0xff
 800912e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009130:	4b82      	ldr	r3, [pc, #520]	; (800933c <MX_LWIP_Init+0x23c>)
 8009132:	2200      	movs	r2, #0
 8009134:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009136:	4b82      	ldr	r3, [pc, #520]	; (8009340 <MX_LWIP_Init+0x240>)
 8009138:	22c0      	movs	r2, #192	; 0xc0
 800913a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800913c:	4b80      	ldr	r3, [pc, #512]	; (8009340 <MX_LWIP_Init+0x240>)
 800913e:	22a8      	movs	r2, #168	; 0xa8
 8009140:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009142:	4b7f      	ldr	r3, [pc, #508]	; (8009340 <MX_LWIP_Init+0x240>)
 8009144:	2200      	movs	r2, #0
 8009146:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009148:	4b7d      	ldr	r3, [pc, #500]	; (8009340 <MX_LWIP_Init+0x240>)
 800914a:	2201      	movs	r2, #1
 800914c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800914e:	2100      	movs	r1, #0
 8009150:	2000      	movs	r0, #0
 8009152:	f005 fbf1 	bl	800e938 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009156:	4b78      	ldr	r3, [pc, #480]	; (8009338 <MX_LWIP_Init+0x238>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	061a      	lsls	r2, r3, #24
 800915c:	4b76      	ldr	r3, [pc, #472]	; (8009338 <MX_LWIP_Init+0x238>)
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	041b      	lsls	r3, r3, #16
 8009162:	431a      	orrs	r2, r3
 8009164:	4b74      	ldr	r3, [pc, #464]	; (8009338 <MX_LWIP_Init+0x238>)
 8009166:	789b      	ldrb	r3, [r3, #2]
 8009168:	021b      	lsls	r3, r3, #8
 800916a:	4313      	orrs	r3, r2
 800916c:	4a72      	ldr	r2, [pc, #456]	; (8009338 <MX_LWIP_Init+0x238>)
 800916e:	78d2      	ldrb	r2, [r2, #3]
 8009170:	4313      	orrs	r3, r2
 8009172:	061a      	lsls	r2, r3, #24
 8009174:	4b70      	ldr	r3, [pc, #448]	; (8009338 <MX_LWIP_Init+0x238>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	0619      	lsls	r1, r3, #24
 800917a:	4b6f      	ldr	r3, [pc, #444]	; (8009338 <MX_LWIP_Init+0x238>)
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	041b      	lsls	r3, r3, #16
 8009180:	4319      	orrs	r1, r3
 8009182:	4b6d      	ldr	r3, [pc, #436]	; (8009338 <MX_LWIP_Init+0x238>)
 8009184:	789b      	ldrb	r3, [r3, #2]
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	430b      	orrs	r3, r1
 800918a:	496b      	ldr	r1, [pc, #428]	; (8009338 <MX_LWIP_Init+0x238>)
 800918c:	78c9      	ldrb	r1, [r1, #3]
 800918e:	430b      	orrs	r3, r1
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009196:	431a      	orrs	r2, r3
 8009198:	4b67      	ldr	r3, [pc, #412]	; (8009338 <MX_LWIP_Init+0x238>)
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	0619      	lsls	r1, r3, #24
 800919e:	4b66      	ldr	r3, [pc, #408]	; (8009338 <MX_LWIP_Init+0x238>)
 80091a0:	785b      	ldrb	r3, [r3, #1]
 80091a2:	041b      	lsls	r3, r3, #16
 80091a4:	4319      	orrs	r1, r3
 80091a6:	4b64      	ldr	r3, [pc, #400]	; (8009338 <MX_LWIP_Init+0x238>)
 80091a8:	789b      	ldrb	r3, [r3, #2]
 80091aa:	021b      	lsls	r3, r3, #8
 80091ac:	430b      	orrs	r3, r1
 80091ae:	4962      	ldr	r1, [pc, #392]	; (8009338 <MX_LWIP_Init+0x238>)
 80091b0:	78c9      	ldrb	r1, [r1, #3]
 80091b2:	430b      	orrs	r3, r1
 80091b4:	0a1b      	lsrs	r3, r3, #8
 80091b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091ba:	431a      	orrs	r2, r3
 80091bc:	4b5e      	ldr	r3, [pc, #376]	; (8009338 <MX_LWIP_Init+0x238>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	0619      	lsls	r1, r3, #24
 80091c2:	4b5d      	ldr	r3, [pc, #372]	; (8009338 <MX_LWIP_Init+0x238>)
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	041b      	lsls	r3, r3, #16
 80091c8:	4319      	orrs	r1, r3
 80091ca:	4b5b      	ldr	r3, [pc, #364]	; (8009338 <MX_LWIP_Init+0x238>)
 80091cc:	789b      	ldrb	r3, [r3, #2]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	430b      	orrs	r3, r1
 80091d2:	4959      	ldr	r1, [pc, #356]	; (8009338 <MX_LWIP_Init+0x238>)
 80091d4:	78c9      	ldrb	r1, [r1, #3]
 80091d6:	430b      	orrs	r3, r1
 80091d8:	0e1b      	lsrs	r3, r3, #24
 80091da:	4313      	orrs	r3, r2
 80091dc:	4a59      	ldr	r2, [pc, #356]	; (8009344 <MX_LWIP_Init+0x244>)
 80091de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80091e0:	4b56      	ldr	r3, [pc, #344]	; (800933c <MX_LWIP_Init+0x23c>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	061a      	lsls	r2, r3, #24
 80091e6:	4b55      	ldr	r3, [pc, #340]	; (800933c <MX_LWIP_Init+0x23c>)
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	431a      	orrs	r2, r3
 80091ee:	4b53      	ldr	r3, [pc, #332]	; (800933c <MX_LWIP_Init+0x23c>)
 80091f0:	789b      	ldrb	r3, [r3, #2]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	4313      	orrs	r3, r2
 80091f6:	4a51      	ldr	r2, [pc, #324]	; (800933c <MX_LWIP_Init+0x23c>)
 80091f8:	78d2      	ldrb	r2, [r2, #3]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	061a      	lsls	r2, r3, #24
 80091fe:	4b4f      	ldr	r3, [pc, #316]	; (800933c <MX_LWIP_Init+0x23c>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	0619      	lsls	r1, r3, #24
 8009204:	4b4d      	ldr	r3, [pc, #308]	; (800933c <MX_LWIP_Init+0x23c>)
 8009206:	785b      	ldrb	r3, [r3, #1]
 8009208:	041b      	lsls	r3, r3, #16
 800920a:	4319      	orrs	r1, r3
 800920c:	4b4b      	ldr	r3, [pc, #300]	; (800933c <MX_LWIP_Init+0x23c>)
 800920e:	789b      	ldrb	r3, [r3, #2]
 8009210:	021b      	lsls	r3, r3, #8
 8009212:	430b      	orrs	r3, r1
 8009214:	4949      	ldr	r1, [pc, #292]	; (800933c <MX_LWIP_Init+0x23c>)
 8009216:	78c9      	ldrb	r1, [r1, #3]
 8009218:	430b      	orrs	r3, r1
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009220:	431a      	orrs	r2, r3
 8009222:	4b46      	ldr	r3, [pc, #280]	; (800933c <MX_LWIP_Init+0x23c>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	0619      	lsls	r1, r3, #24
 8009228:	4b44      	ldr	r3, [pc, #272]	; (800933c <MX_LWIP_Init+0x23c>)
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	041b      	lsls	r3, r3, #16
 800922e:	4319      	orrs	r1, r3
 8009230:	4b42      	ldr	r3, [pc, #264]	; (800933c <MX_LWIP_Init+0x23c>)
 8009232:	789b      	ldrb	r3, [r3, #2]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	430b      	orrs	r3, r1
 8009238:	4940      	ldr	r1, [pc, #256]	; (800933c <MX_LWIP_Init+0x23c>)
 800923a:	78c9      	ldrb	r1, [r1, #3]
 800923c:	430b      	orrs	r3, r1
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009244:	431a      	orrs	r2, r3
 8009246:	4b3d      	ldr	r3, [pc, #244]	; (800933c <MX_LWIP_Init+0x23c>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	0619      	lsls	r1, r3, #24
 800924c:	4b3b      	ldr	r3, [pc, #236]	; (800933c <MX_LWIP_Init+0x23c>)
 800924e:	785b      	ldrb	r3, [r3, #1]
 8009250:	041b      	lsls	r3, r3, #16
 8009252:	4319      	orrs	r1, r3
 8009254:	4b39      	ldr	r3, [pc, #228]	; (800933c <MX_LWIP_Init+0x23c>)
 8009256:	789b      	ldrb	r3, [r3, #2]
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	430b      	orrs	r3, r1
 800925c:	4937      	ldr	r1, [pc, #220]	; (800933c <MX_LWIP_Init+0x23c>)
 800925e:	78c9      	ldrb	r1, [r1, #3]
 8009260:	430b      	orrs	r3, r1
 8009262:	0e1b      	lsrs	r3, r3, #24
 8009264:	4313      	orrs	r3, r2
 8009266:	4a38      	ldr	r2, [pc, #224]	; (8009348 <MX_LWIP_Init+0x248>)
 8009268:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800926a:	4b35      	ldr	r3, [pc, #212]	; (8009340 <MX_LWIP_Init+0x240>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	061a      	lsls	r2, r3, #24
 8009270:	4b33      	ldr	r3, [pc, #204]	; (8009340 <MX_LWIP_Init+0x240>)
 8009272:	785b      	ldrb	r3, [r3, #1]
 8009274:	041b      	lsls	r3, r3, #16
 8009276:	431a      	orrs	r2, r3
 8009278:	4b31      	ldr	r3, [pc, #196]	; (8009340 <MX_LWIP_Init+0x240>)
 800927a:	789b      	ldrb	r3, [r3, #2]
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	4313      	orrs	r3, r2
 8009280:	4a2f      	ldr	r2, [pc, #188]	; (8009340 <MX_LWIP_Init+0x240>)
 8009282:	78d2      	ldrb	r2, [r2, #3]
 8009284:	4313      	orrs	r3, r2
 8009286:	061a      	lsls	r2, r3, #24
 8009288:	4b2d      	ldr	r3, [pc, #180]	; (8009340 <MX_LWIP_Init+0x240>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	0619      	lsls	r1, r3, #24
 800928e:	4b2c      	ldr	r3, [pc, #176]	; (8009340 <MX_LWIP_Init+0x240>)
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	041b      	lsls	r3, r3, #16
 8009294:	4319      	orrs	r1, r3
 8009296:	4b2a      	ldr	r3, [pc, #168]	; (8009340 <MX_LWIP_Init+0x240>)
 8009298:	789b      	ldrb	r3, [r3, #2]
 800929a:	021b      	lsls	r3, r3, #8
 800929c:	430b      	orrs	r3, r1
 800929e:	4928      	ldr	r1, [pc, #160]	; (8009340 <MX_LWIP_Init+0x240>)
 80092a0:	78c9      	ldrb	r1, [r1, #3]
 80092a2:	430b      	orrs	r3, r1
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092aa:	431a      	orrs	r2, r3
 80092ac:	4b24      	ldr	r3, [pc, #144]	; (8009340 <MX_LWIP_Init+0x240>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	0619      	lsls	r1, r3, #24
 80092b2:	4b23      	ldr	r3, [pc, #140]	; (8009340 <MX_LWIP_Init+0x240>)
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	4319      	orrs	r1, r3
 80092ba:	4b21      	ldr	r3, [pc, #132]	; (8009340 <MX_LWIP_Init+0x240>)
 80092bc:	789b      	ldrb	r3, [r3, #2]
 80092be:	021b      	lsls	r3, r3, #8
 80092c0:	430b      	orrs	r3, r1
 80092c2:	491f      	ldr	r1, [pc, #124]	; (8009340 <MX_LWIP_Init+0x240>)
 80092c4:	78c9      	ldrb	r1, [r1, #3]
 80092c6:	430b      	orrs	r3, r1
 80092c8:	0a1b      	lsrs	r3, r3, #8
 80092ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80092ce:	431a      	orrs	r2, r3
 80092d0:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <MX_LWIP_Init+0x240>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	0619      	lsls	r1, r3, #24
 80092d6:	4b1a      	ldr	r3, [pc, #104]	; (8009340 <MX_LWIP_Init+0x240>)
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	041b      	lsls	r3, r3, #16
 80092dc:	4319      	orrs	r1, r3
 80092de:	4b18      	ldr	r3, [pc, #96]	; (8009340 <MX_LWIP_Init+0x240>)
 80092e0:	789b      	ldrb	r3, [r3, #2]
 80092e2:	021b      	lsls	r3, r3, #8
 80092e4:	430b      	orrs	r3, r1
 80092e6:	4916      	ldr	r1, [pc, #88]	; (8009340 <MX_LWIP_Init+0x240>)
 80092e8:	78c9      	ldrb	r1, [r1, #3]
 80092ea:	430b      	orrs	r3, r1
 80092ec:	0e1b      	lsrs	r3, r3, #24
 80092ee:	4313      	orrs	r3, r2
 80092f0:	4a16      	ldr	r2, [pc, #88]	; (800934c <MX_LWIP_Init+0x24c>)
 80092f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80092f4:	4b16      	ldr	r3, [pc, #88]	; (8009350 <MX_LWIP_Init+0x250>)
 80092f6:	9302      	str	r3, [sp, #8]
 80092f8:	4b16      	ldr	r3, [pc, #88]	; (8009354 <MX_LWIP_Init+0x254>)
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	2300      	movs	r3, #0
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4b12      	ldr	r3, [pc, #72]	; (800934c <MX_LWIP_Init+0x24c>)
 8009302:	4a11      	ldr	r2, [pc, #68]	; (8009348 <MX_LWIP_Init+0x248>)
 8009304:	490f      	ldr	r1, [pc, #60]	; (8009344 <MX_LWIP_Init+0x244>)
 8009306:	4814      	ldr	r0, [pc, #80]	; (8009358 <MX_LWIP_Init+0x258>)
 8009308:	f007 f8ae 	bl	8010468 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800930c:	4812      	ldr	r0, [pc, #72]	; (8009358 <MX_LWIP_Init+0x258>)
 800930e:	f007 fa83 	bl	8010818 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009312:	4b11      	ldr	r3, [pc, #68]	; (8009358 <MX_LWIP_Init+0x258>)
 8009314:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009318:	089b      	lsrs	r3, r3, #2
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009324:	480c      	ldr	r0, [pc, #48]	; (8009358 <MX_LWIP_Init+0x258>)
 8009326:	f007 fa87 	bl	8010838 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800932a:	e002      	b.n	8009332 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800932c:	480a      	ldr	r0, [pc, #40]	; (8009358 <MX_LWIP_Init+0x258>)
 800932e:	f007 faef 	bl	8010910 <netif_set_down>
}
 8009332:	bf00      	nop
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	200055f4 	.word	0x200055f4
 800933c:	200055f0 	.word	0x200055f0
 8009340:	200055b8 	.word	0x200055b8
 8009344:	200055ec 	.word	0x200055ec
 8009348:	200055f8 	.word	0x200055f8
 800934c:	200055fc 	.word	0x200055fc
 8009350:	0800e849 	.word	0x0800e849
 8009354:	08009975 	.word	0x08009975
 8009358:	200055bc 	.word	0x200055bc

0800935c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08e      	sub	sp, #56	; 0x38
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	605a      	str	r2, [r3, #4]
 800936e:	609a      	str	r2, [r3, #8]
 8009370:	60da      	str	r2, [r3, #12]
 8009372:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a44      	ldr	r2, [pc, #272]	; (800948c <HAL_ETH_MspInit+0x130>)
 800937a:	4293      	cmp	r3, r2
 800937c:	f040 8081 	bne.w	8009482 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009380:	4b43      	ldr	r3, [pc, #268]	; (8009490 <HAL_ETH_MspInit+0x134>)
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	4a42      	ldr	r2, [pc, #264]	; (8009490 <HAL_ETH_MspInit+0x134>)
 8009386:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800938a:	6313      	str	r3, [r2, #48]	; 0x30
 800938c:	4b40      	ldr	r3, [pc, #256]	; (8009490 <HAL_ETH_MspInit+0x134>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009394:	623b      	str	r3, [r7, #32]
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	4b3d      	ldr	r3, [pc, #244]	; (8009490 <HAL_ETH_MspInit+0x134>)
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	4a3c      	ldr	r2, [pc, #240]	; (8009490 <HAL_ETH_MspInit+0x134>)
 800939e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093a2:	6313      	str	r3, [r2, #48]	; 0x30
 80093a4:	4b3a      	ldr	r3, [pc, #232]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4b37      	ldr	r3, [pc, #220]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b4:	4a36      	ldr	r2, [pc, #216]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093ba:	6313      	str	r3, [r2, #48]	; 0x30
 80093bc:	4b34      	ldr	r3, [pc, #208]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093c4:	61bb      	str	r3, [r7, #24]
 80093c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80093c8:	4b31      	ldr	r3, [pc, #196]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	4a30      	ldr	r2, [pc, #192]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d2:	6313      	str	r3, [r2, #48]	; 0x30
 80093d4:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093e0:	4b2b      	ldr	r3, [pc, #172]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e4:	4a2a      	ldr	r2, [pc, #168]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093e6:	f043 0304 	orr.w	r3, r3, #4
 80093ea:	6313      	str	r3, [r2, #48]	; 0x30
 80093ec:	4b28      	ldr	r3, [pc, #160]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	613b      	str	r3, [r7, #16]
 80093f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093f8:	4b25      	ldr	r3, [pc, #148]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fc:	4a24      	ldr	r2, [pc, #144]	; (8009490 <HAL_ETH_MspInit+0x134>)
 80093fe:	f043 0301 	orr.w	r3, r3, #1
 8009402:	6313      	str	r3, [r2, #48]	; 0x30
 8009404:	4b22      	ldr	r3, [pc, #136]	; (8009490 <HAL_ETH_MspInit+0x134>)
 8009406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8009410:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8009414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009416:	2302      	movs	r3, #2
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800941a:	2300      	movs	r3, #0
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800941e:	2303      	movs	r3, #3
 8009420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009422:	230b      	movs	r3, #11
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800942a:	4619      	mov	r1, r3
 800942c:	4819      	ldr	r0, [pc, #100]	; (8009494 <HAL_ETH_MspInit+0x138>)
 800942e:	f7fc f965 	bl	80056fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009432:	2332      	movs	r3, #50	; 0x32
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009436:	2302      	movs	r3, #2
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800943a:	2300      	movs	r3, #0
 800943c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800943e:	2303      	movs	r3, #3
 8009440:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009442:	230b      	movs	r3, #11
 8009444:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800944a:	4619      	mov	r1, r3
 800944c:	4812      	ldr	r0, [pc, #72]	; (8009498 <HAL_ETH_MspInit+0x13c>)
 800944e:	f7fc f955 	bl	80056fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009452:	2386      	movs	r3, #134	; 0x86
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009456:	2302      	movs	r3, #2
 8009458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800945a:	2300      	movs	r3, #0
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800945e:	2303      	movs	r3, #3
 8009460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009462:	230b      	movs	r3, #11
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800946a:	4619      	mov	r1, r3
 800946c:	480b      	ldr	r0, [pc, #44]	; (800949c <HAL_ETH_MspInit+0x140>)
 800946e:	f7fc f945 	bl	80056fc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009472:	2200      	movs	r2, #0
 8009474:	2105      	movs	r1, #5
 8009476:	203d      	movs	r0, #61	; 0x3d
 8009478:	f7fa fdf8 	bl	800406c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800947c:	203d      	movs	r0, #61	; 0x3d
 800947e:	f7fa fe11 	bl	80040a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009482:	bf00      	nop
 8009484:	3738      	adds	r7, #56	; 0x38
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	40028000 	.word	0x40028000
 8009490:	40023800 	.word	0x40023800
 8009494:	40021800 	.word	0x40021800
 8009498:	40020800 	.word	0x40020800
 800949c:	40020000 	.word	0x40020000

080094a0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80094a8:	4b04      	ldr	r3, [pc, #16]	; (80094bc <HAL_ETH_RxCpltCallback+0x1c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 fc3f 	bl	8009d30 <osSemaphoreRelease>
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000d24 	.word	0x20000d24

080094c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80094c0:	b5b0      	push	{r4, r5, r7, lr}
 80094c2:	b090      	sub	sp, #64	; 0x40
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80094cc:	4b60      	ldr	r3, [pc, #384]	; (8009650 <low_level_init+0x190>)
 80094ce:	4a61      	ldr	r2, [pc, #388]	; (8009654 <low_level_init+0x194>)
 80094d0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80094d2:	4b5f      	ldr	r3, [pc, #380]	; (8009650 <low_level_init+0x190>)
 80094d4:	2201      	movs	r2, #1
 80094d6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80094d8:	4b5d      	ldr	r3, [pc, #372]	; (8009650 <low_level_init+0x190>)
 80094da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80094de:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80094e0:	4b5b      	ldr	r3, [pc, #364]	; (8009650 <low_level_init+0x190>)
 80094e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094e6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80094e8:	4b59      	ldr	r3, [pc, #356]	; (8009650 <low_level_init+0x190>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80094ee:	2300      	movs	r3, #0
 80094f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80094f4:	2380      	movs	r3, #128	; 0x80
 80094f6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80094fa:	23e1      	movs	r3, #225	; 0xe1
 80094fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009500:	2300      	movs	r3, #0
 8009502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009506:	2300      	movs	r3, #0
 8009508:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800950c:	2300      	movs	r3, #0
 800950e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009512:	4a4f      	ldr	r2, [pc, #316]	; (8009650 <low_level_init+0x190>)
 8009514:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009518:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800951a:	4b4d      	ldr	r3, [pc, #308]	; (8009650 <low_level_init+0x190>)
 800951c:	2201      	movs	r2, #1
 800951e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009520:	4b4b      	ldr	r3, [pc, #300]	; (8009650 <low_level_init+0x190>)
 8009522:	2200      	movs	r2, #0
 8009524:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009526:	4b4a      	ldr	r3, [pc, #296]	; (8009650 <low_level_init+0x190>)
 8009528:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800952c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800952e:	4848      	ldr	r0, [pc, #288]	; (8009650 <low_level_init+0x190>)
 8009530:	f7fa fe58 	bl	80041e4 <HAL_ETH_Init>
 8009534:	4603      	mov	r3, r0
 8009536:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800953a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800953e:	2b00      	cmp	r3, #0
 8009540:	d108      	bne.n	8009554 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009548:	f043 0304 	orr.w	r3, r3, #4
 800954c:	b2da      	uxtb	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009554:	2304      	movs	r3, #4
 8009556:	4a40      	ldr	r2, [pc, #256]	; (8009658 <low_level_init+0x198>)
 8009558:	4940      	ldr	r1, [pc, #256]	; (800965c <low_level_init+0x19c>)
 800955a:	483d      	ldr	r0, [pc, #244]	; (8009650 <low_level_init+0x190>)
 800955c:	f7fa ffdc 	bl	8004518 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009560:	2304      	movs	r3, #4
 8009562:	4a3f      	ldr	r2, [pc, #252]	; (8009660 <low_level_init+0x1a0>)
 8009564:	493f      	ldr	r1, [pc, #252]	; (8009664 <low_level_init+0x1a4>)
 8009566:	483a      	ldr	r0, [pc, #232]	; (8009650 <low_level_init+0x190>)
 8009568:	f7fb f83f 	bl	80045ea <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2206      	movs	r2, #6
 8009570:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009574:	4b36      	ldr	r3, [pc, #216]	; (8009650 <low_level_init+0x190>)
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	781a      	ldrb	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009580:	4b33      	ldr	r3, [pc, #204]	; (8009650 <low_level_init+0x190>)
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	785a      	ldrb	r2, [r3, #1]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800958c:	4b30      	ldr	r3, [pc, #192]	; (8009650 <low_level_init+0x190>)
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	789a      	ldrb	r2, [r3, #2]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009598:	4b2d      	ldr	r3, [pc, #180]	; (8009650 <low_level_init+0x190>)
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	78da      	ldrb	r2, [r3, #3]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80095a4:	4b2a      	ldr	r3, [pc, #168]	; (8009650 <low_level_init+0x190>)
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	791a      	ldrb	r2, [r3, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80095b0:	4b27      	ldr	r3, [pc, #156]	; (8009650 <low_level_init+0x190>)
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	795a      	ldrb	r2, [r3, #5]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80095c2:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80095ca:	f043 030a 	orr.w	r3, r3, #10
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80095d6:	2300      	movs	r3, #0
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095da:	2300      	movs	r3, #0
 80095dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80095de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80095e2:	2101      	movs	r1, #1
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fb23 	bl	8009c30 <osSemaphoreCreate>
 80095ea:	4603      	mov	r3, r0
 80095ec:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <low_level_init+0x1a8>)
 80095ee:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80095f0:	4b1e      	ldr	r3, [pc, #120]	; (800966c <low_level_init+0x1ac>)
 80095f2:	f107 040c 	add.w	r4, r7, #12
 80095f6:	461d      	mov	r5, r3
 80095f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009604:	f107 030c 	add.w	r3, r7, #12
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fa28 	bl	8009a60 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009610:	480f      	ldr	r0, [pc, #60]	; (8009650 <low_level_init+0x190>)
 8009612:	f7fb fb12 	bl	8004c3a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009616:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800961a:	461a      	mov	r2, r3
 800961c:	211d      	movs	r1, #29
 800961e:	480c      	ldr	r0, [pc, #48]	; (8009650 <low_level_init+0x190>)
 8009620:	f7fb fa3d 	bl	8004a9e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	f043 030b 	orr.w	r3, r3, #11
 800962a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	461a      	mov	r2, r3
 8009630:	211d      	movs	r1, #29
 8009632:	4807      	ldr	r0, [pc, #28]	; (8009650 <low_level_init+0x190>)
 8009634:	f7fb fa9b 	bl	8004b6e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009638:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800963c:	461a      	mov	r2, r3
 800963e:	211d      	movs	r1, #29
 8009640:	4803      	ldr	r0, [pc, #12]	; (8009650 <low_level_init+0x190>)
 8009642:	f7fb fa2c 	bl	8004a9e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009646:	bf00      	nop
 8009648:	3740      	adds	r7, #64	; 0x40
 800964a:	46bd      	mov	sp, r7
 800964c:	bdb0      	pop	{r4, r5, r7, pc}
 800964e:	bf00      	nop
 8009650:	20006ed0 	.word	0x20006ed0
 8009654:	40028000 	.word	0x40028000
 8009658:	20006f18 	.word	0x20006f18
 800965c:	20005600 	.word	0x20005600
 8009660:	20005680 	.word	0x20005680
 8009664:	20006e50 	.word	0x20006e50
 8009668:	20000d24 	.word	0x20000d24
 800966c:	080246a0 	.word	0x080246a0

08009670 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	; 0x28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800967a:	4b4b      	ldr	r3, [pc, #300]	; (80097a8 <low_level_output+0x138>)
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8009692:	4b45      	ldr	r3, [pc, #276]	; (80097a8 <low_level_output+0x138>)
 8009694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009696:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	623b      	str	r3, [r7, #32]
 80096a0:	e05a      	b.n	8009758 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da03      	bge.n	80096b2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80096aa:	23f8      	movs	r3, #248	; 0xf8
 80096ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80096b0:	e05c      	b.n	800976c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	895b      	ldrh	r3, [r3, #10]
 80096b6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80096bc:	e02f      	b.n	800971e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	18d0      	adds	r0, r2, r3
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	18d1      	adds	r1, r2, r3
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	f011 fda1 	bl	801b21c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	da03      	bge.n	80096f0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80096e8:	23f8      	movs	r3, #248	; 0xf8
 80096ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80096ee:	e03d      	b.n	800976c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4413      	add	r3, r2
 80096fc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009700:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800970c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009718:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	4413      	add	r3, r2
 8009724:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009728:	4293      	cmp	r3, r2
 800972a:	d8c8      	bhi.n	80096be <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	18d0      	adds	r0, r2, r3
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	4413      	add	r3, r2
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	4619      	mov	r1, r3
 800973e:	f011 fd6d 	bl	801b21c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	623b      	str	r3, [r7, #32]
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1a1      	bne.n	80096a2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800975e:	6979      	ldr	r1, [r7, #20]
 8009760:	4811      	ldr	r0, [pc, #68]	; (80097a8 <low_level_output+0x138>)
 8009762:	f7fa ffaf 	bl	80046c4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800976c:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <low_level_output+0x138>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	f241 0314 	movw	r3, #4116	; 0x1014
 8009774:	4413      	add	r3, r2
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0320 	and.w	r3, r3, #32
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00d      	beq.n	800979c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009780:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <low_level_output+0x138>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	f241 0314 	movw	r3, #4116	; 0x1014
 8009788:	4413      	add	r3, r2
 800978a:	2220      	movs	r2, #32
 800978c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800978e:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <low_level_output+0x138>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	f241 0304 	movw	r3, #4100	; 0x1004
 8009796:	4413      	add	r3, r2
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800979c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3728      	adds	r7, #40	; 0x28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20006ed0 	.word	0x20006ed0

080097ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08c      	sub	sp, #48	; 0x30
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80097b4:	2300      	movs	r3, #0
 80097b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80097b8:	2300      	movs	r3, #0
 80097ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80097d0:	484f      	ldr	r0, [pc, #316]	; (8009910 <low_level_input+0x164>)
 80097d2:	f7fb f861 	bl	8004898 <HAL_ETH_GetReceivedFrame_IT>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <low_level_input+0x34>

    return NULL;
 80097dc:	2300      	movs	r3, #0
 80097de:	e092      	b.n	8009906 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80097e0:	4b4b      	ldr	r3, [pc, #300]	; (8009910 <low_level_input+0x164>)
 80097e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80097e6:	4b4a      	ldr	r3, [pc, #296]	; (8009910 <low_level_input+0x164>)
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80097ec:	89fb      	ldrh	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d007      	beq.n	8009802 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80097f2:	89fb      	ldrh	r3, [r7, #14]
 80097f4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80097f8:	4619      	mov	r1, r3
 80097fa:	2000      	movs	r0, #0
 80097fc:	f007 f972 	bl	8010ae4 <pbuf_alloc>
 8009800:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d04b      	beq.n	80098a0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009808:	4b41      	ldr	r3, [pc, #260]	; (8009910 <low_level_input+0x164>)
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28
 8009816:	e040      	b.n	800989a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	895b      	ldrh	r3, [r3, #10]
 800981c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009822:	e021      	b.n	8009868 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	18d0      	adds	r0, r2, r3
 800982c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	18d1      	adds	r1, r2, r3
 8009832:	69fa      	ldr	r2, [r7, #28]
 8009834:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8009838:	1a9b      	subs	r3, r3, r2
 800983a:	461a      	mov	r2, r3
 800983c:	f011 fcee 	bl	801b21c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	4413      	add	r3, r2
 8009852:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009856:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009858:	69ba      	ldr	r2, [r7, #24]
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009862:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	4413      	add	r3, r2
 800986e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009872:	4293      	cmp	r3, r2
 8009874:	d8d6      	bhi.n	8009824 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	18d0      	adds	r0, r2, r3
 800987e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	4413      	add	r3, r2
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4619      	mov	r1, r3
 8009888:	f011 fcc8 	bl	801b21c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800988c:	69fa      	ldr	r2, [r7, #28]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	62bb      	str	r3, [r7, #40]	; 0x28
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1bb      	bne.n	8009818 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80098a0:	4b1b      	ldr	r3, [pc, #108]	; (8009910 <low_level_input+0x164>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80098a6:	2300      	movs	r3, #0
 80098a8:	613b      	str	r3, [r7, #16]
 80098aa:	e00b      	b.n	80098c4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	3301      	adds	r3, #1
 80098c2:	613b      	str	r3, [r7, #16]
 80098c4:	4b12      	ldr	r3, [pc, #72]	; (8009910 <low_level_input+0x164>)
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d3ee      	bcc.n	80098ac <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80098ce:	4b10      	ldr	r3, [pc, #64]	; (8009910 <low_level_input+0x164>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80098d4:	4b0e      	ldr	r3, [pc, #56]	; (8009910 <low_level_input+0x164>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80098dc:	4413      	add	r3, r2
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00d      	beq.n	8009904 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80098e8:	4b09      	ldr	r3, [pc, #36]	; (8009910 <low_level_input+0x164>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	f241 0314 	movw	r3, #4116	; 0x1014
 80098f0:	4413      	add	r3, r2
 80098f2:	2280      	movs	r2, #128	; 0x80
 80098f4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80098f6:	4b06      	ldr	r3, [pc, #24]	; (8009910 <low_level_input+0x164>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	f241 0308 	movw	r3, #4104	; 0x1008
 80098fe:	4413      	add	r3, r2
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009906:	4618      	mov	r0, r3
 8009908:	3730      	adds	r7, #48	; 0x30
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20006ed0 	.word	0x20006ed0

08009914 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009920:	4b12      	ldr	r3, [pc, #72]	; (800996c <ethernetif_input+0x58>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f04f 31ff 	mov.w	r1, #4294967295
 8009928:	4618      	mov	r0, r3
 800992a:	f000 f9b3 	bl	8009c94 <osSemaphoreWait>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1f5      	bne.n	8009920 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009934:	480e      	ldr	r0, [pc, #56]	; (8009970 <ethernetif_input+0x5c>)
 8009936:	f011 fae5 	bl	801af04 <sys_mutex_lock>
        p = low_level_input( netif );
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff ff36 	bl	80097ac <low_level_input>
 8009940:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	68f9      	ldr	r1, [r7, #12]
 800994e:	68b8      	ldr	r0, [r7, #8]
 8009950:	4798      	blx	r3
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8009958:	68b8      	ldr	r0, [r7, #8]
 800995a:	f007 fba7 	bl	80110ac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800995e:	4804      	ldr	r0, [pc, #16]	; (8009970 <ethernetif_input+0x5c>)
 8009960:	f011 fadf 	bl	801af22 <sys_mutex_unlock>
      } while(p!=NULL);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e4      	bne.n	8009934 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800996a:	e7d9      	b.n	8009920 <ethernetif_input+0xc>
 800996c:	20000d24 	.word	0x20000d24
 8009970:	20008728 	.word	0x20008728

08009974 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d106      	bne.n	8009990 <ethernetif_init+0x1c>
 8009982:	4b0e      	ldr	r3, [pc, #56]	; (80099bc <ethernetif_init+0x48>)
 8009984:	f240 222b 	movw	r2, #555	; 0x22b
 8009988:	490d      	ldr	r1, [pc, #52]	; (80099c0 <ethernetif_init+0x4c>)
 800998a:	480e      	ldr	r0, [pc, #56]	; (80099c4 <ethernetif_init+0x50>)
 800998c:	f011 fef4 	bl	801b778 <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2273      	movs	r2, #115	; 0x73
 8009994:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2274      	movs	r2, #116	; 0x74
 800999c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a09      	ldr	r2, [pc, #36]	; (80099c8 <ethernetif_init+0x54>)
 80099a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a08      	ldr	r2, [pc, #32]	; (80099cc <ethernetif_init+0x58>)
 80099aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7ff fd87 	bl	80094c0 <low_level_init>

  return ERR_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	080246bc 	.word	0x080246bc
 80099c0:	080246d8 	.word	0x080246d8
 80099c4:	080246e8 	.word	0x080246e8
 80099c8:	08018cc5 	.word	0x08018cc5
 80099cc:	08009671 	.word	0x08009671

080099d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80099d4:	f7fa fa62 	bl	8003e9c <HAL_GetTick>
 80099d8:	4603      	mov	r3, r0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	bd80      	pop	{r7, pc}

080099de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	4603      	mov	r3, r0
 80099e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80099ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099f0:	2b84      	cmp	r3, #132	; 0x84
 80099f2:	d005      	beq.n	8009a00 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80099f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4413      	add	r3, r2
 80099fc:	3303      	adds	r3, #3
 80099fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a00:	68fb      	ldr	r3, [r7, #12]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b083      	sub	sp, #12
 8009a12:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a14:	f3ef 8305 	mrs	r3, IPSR
 8009a18:	607b      	str	r3, [r7, #4]
  return(result);
 8009a1a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bf14      	ite	ne
 8009a20:	2301      	movne	r3, #1
 8009a22:	2300      	moveq	r3, #0
 8009a24:	b2db      	uxtb	r3, r3
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009a36:	f001 fd29 	bl	800b48c <vTaskStartScheduler>
  
  return osOK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009a44:	f7ff ffe3 	bl	8009a0e <inHandlerMode>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009a4e:	f001 fe3d 	bl	800b6cc <xTaskGetTickCountFromISR>
 8009a52:	4603      	mov	r3, r0
 8009a54:	e002      	b.n	8009a5c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009a56:	f001 fe29 	bl	800b6ac <xTaskGetTickCount>
 8009a5a:	4603      	mov	r3, r0
  }
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a62:	b089      	sub	sp, #36	; 0x24
 8009a64:	af04      	add	r7, sp, #16
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d020      	beq.n	8009ab4 <osThreadCreate+0x54>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01c      	beq.n	8009ab4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685c      	ldr	r4, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681d      	ldr	r5, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691e      	ldr	r6, [r3, #16]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff ffa6 	bl	80099de <makeFreeRtosPriority>
 8009a92:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a9c:	9202      	str	r2, [sp, #8]
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	9100      	str	r1, [sp, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f001 fb53 	bl	800b154 <xTaskCreateStatic>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	e01c      	b.n	8009aee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685c      	ldr	r4, [r3, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ac0:	b29e      	uxth	r6, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff ff88 	bl	80099de <makeFreeRtosPriority>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	f107 030c 	add.w	r3, r7, #12
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	9200      	str	r2, [sp, #0]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	4632      	mov	r2, r6
 8009adc:	4629      	mov	r1, r5
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f001 fb9b 	bl	800b21a <xTaskCreate>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d001      	beq.n	8009aee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e000      	b.n	8009af0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009aee:	68fb      	ldr	r3, [r7, #12]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009af8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d007      	beq.n	8009b18 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	2001      	movs	r0, #1
 8009b10:	f000 fc91 	bl	800a436 <xQueueCreateMutexStatic>
 8009b14:	4603      	mov	r3, r0
 8009b16:	e003      	b.n	8009b20 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009b18:	2001      	movs	r0, #1
 8009b1a:	f000 fc74 	bl	800a406 <xQueueCreateMutex>
 8009b1e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009b32:	2300      	movs	r3, #0
 8009b34:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <osMutexWait+0x18>
    return osErrorParameter;
 8009b3c:	2380      	movs	r3, #128	; 0x80
 8009b3e:	e03a      	b.n	8009bb6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4a:	d103      	bne.n	8009b54 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e009      	b.n	8009b68 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d006      	beq.n	8009b68 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <osMutexWait+0x40>
      ticks = 1;
 8009b64:	2301      	movs	r3, #1
 8009b66:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009b68:	f7ff ff51 	bl	8009a0e <inHandlerMode>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d017      	beq.n	8009ba2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009b72:	f107 0308 	add.w	r3, r7, #8
 8009b76:	461a      	mov	r2, r3
 8009b78:	2100      	movs	r1, #0
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f001 f8ac 	bl	800acd8 <xQueueReceiveFromISR>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d001      	beq.n	8009b8a <osMutexWait+0x62>
      return osErrorOS;
 8009b86:	23ff      	movs	r3, #255	; 0xff
 8009b88:	e015      	b.n	8009bb6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d011      	beq.n	8009bb4 <osMutexWait+0x8c>
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <osMutexWait+0x98>)
 8009b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	e008      	b.n	8009bb4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009ba2:	68f9      	ldr	r1, [r7, #12]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 ff83 	bl	800aab0 <xQueueSemaphoreTake>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d001      	beq.n	8009bb4 <osMutexWait+0x8c>
    return osErrorOS;
 8009bb0:	23ff      	movs	r3, #255	; 0xff
 8009bb2:	e000      	b.n	8009bb6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009bd4:	f7ff ff1b 	bl	8009a0e <inHandlerMode>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d016      	beq.n	8009c0c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fde7 	bl	800a7b8 <xQueueGiveFromISR>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d001      	beq.n	8009bf4 <osMutexRelease+0x30>
      return osErrorOS;
 8009bf0:	23ff      	movs	r3, #255	; 0xff
 8009bf2:	e017      	b.n	8009c24 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d013      	beq.n	8009c22 <osMutexRelease+0x5e>
 8009bfa:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <osMutexRelease+0x68>)
 8009bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	e00a      	b.n	8009c22 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2100      	movs	r1, #0
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fc2a 	bl	800a46c <xQueueGenericSend>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d001      	beq.n	8009c22 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009c1e:	23ff      	movs	r3, #255	; 0xff
 8009c20:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009c22:	68fb      	ldr	r3, [r7, #12]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00f      	beq.n	8009c62 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d10a      	bne.n	8009c5e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	9200      	str	r2, [sp, #0]
 8009c50:	2200      	movs	r2, #0
 8009c52:	2100      	movs	r1, #0
 8009c54:	2001      	movs	r0, #1
 8009c56:	f000 fad9 	bl	800a20c <xQueueGenericCreateStatic>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	e016      	b.n	8009c8c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e014      	b.n	8009c8c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d110      	bne.n	8009c8a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009c68:	2203      	movs	r2, #3
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	f000 fb4f 	bl	800a310 <xQueueGenericCreate>
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d005      	beq.n	8009c86 <osSemaphoreCreate+0x56>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2100      	movs	r1, #0
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fbf3 	bl	800a46c <xQueueGenericSend>
      return sema;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	e000      	b.n	8009c8c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009c8a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009ca8:	2380      	movs	r3, #128	; 0x80
 8009caa:	e03a      	b.n	8009d22 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d103      	bne.n	8009cc0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	e009      	b.n	8009cd4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d006      	beq.n	8009cd4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <osSemaphoreWait+0x40>
      ticks = 1;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009cd4:	f7ff fe9b 	bl	8009a0e <inHandlerMode>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d017      	beq.n	8009d0e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009cde:	f107 0308 	add.w	r3, r7, #8
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fff6 	bl	800acd8 <xQueueReceiveFromISR>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d001      	beq.n	8009cf6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009cf2:	23ff      	movs	r3, #255	; 0xff
 8009cf4:	e015      	b.n	8009d22 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d011      	beq.n	8009d20 <osSemaphoreWait+0x8c>
 8009cfc:	4b0b      	ldr	r3, [pc, #44]	; (8009d2c <osSemaphoreWait+0x98>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	e008      	b.n	8009d20 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fecd 	bl	800aab0 <xQueueSemaphoreTake>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d001      	beq.n	8009d20 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009d1c:	23ff      	movs	r3, #255	; 0xff
 8009d1e:	e000      	b.n	8009d22 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009d40:	f7ff fe65 	bl	8009a0e <inHandlerMode>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d016      	beq.n	8009d78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009d4a:	f107 0308 	add.w	r3, r7, #8
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fd31 	bl	800a7b8 <xQueueGiveFromISR>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d001      	beq.n	8009d60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009d5c:	23ff      	movs	r3, #255	; 0xff
 8009d5e:	e017      	b.n	8009d90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d013      	beq.n	8009d8e <osSemaphoreRelease+0x5e>
 8009d66:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <osSemaphoreRelease+0x68>)
 8009d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	e00a      	b.n	8009d8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009d78:	2300      	movs	r3, #0
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fb74 	bl	800a46c <xQueueGenericSend>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d001      	beq.n	8009d8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009d8a:	23ff      	movs	r3, #255	; 0xff
 8009d8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009da4:	f7ff fe33 	bl	8009a0e <inHandlerMode>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009dae:	2382      	movs	r3, #130	; 0x82
 8009db0:	e003      	b.n	8009dba <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 f856 	bl	800ae64 <vQueueDelete>

  return osOK; 
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009dc2:	b590      	push	{r4, r7, lr}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af02      	add	r7, sp, #8
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d011      	beq.n	8009df8 <osMessageCreate+0x36>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00d      	beq.n	8009df8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6859      	ldr	r1, [r3, #4]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	2400      	movs	r4, #0
 8009dee:	9400      	str	r4, [sp, #0]
 8009df0:	f000 fa0c 	bl	800a20c <xQueueGenericCreateStatic>
 8009df4:	4603      	mov	r3, r0
 8009df6:	e008      	b.n	8009e0a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	4619      	mov	r1, r3
 8009e04:	f000 fa84 	bl	800a310 <xQueueGenericCreate>
 8009e08:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd90      	pop	{r4, r7, pc}
	...

08009e14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <osMessagePut+0x1e>
    ticks = 1;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009e32:	f7ff fdec 	bl	8009a0e <inHandlerMode>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d018      	beq.n	8009e6e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009e3c:	f107 0210 	add.w	r2, r7, #16
 8009e40:	f107 0108 	add.w	r1, r7, #8
 8009e44:	2300      	movs	r3, #0
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 fc16 	bl	800a678 <xQueueGenericSendFromISR>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d001      	beq.n	8009e56 <osMessagePut+0x42>
      return osErrorOS;
 8009e52:	23ff      	movs	r3, #255	; 0xff
 8009e54:	e018      	b.n	8009e88 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d014      	beq.n	8009e86 <osMessagePut+0x72>
 8009e5c:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <osMessagePut+0x7c>)
 8009e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	e00b      	b.n	8009e86 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009e6e:	f107 0108 	add.w	r1, r7, #8
 8009e72:	2300      	movs	r3, #0
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 faf8 	bl	800a46c <xQueueGenericSend>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d001      	beq.n	8009e86 <osMessagePut+0x72>
      return osErrorOS;
 8009e82:	23ff      	movs	r3, #255	; 0xff
 8009e84:	e000      	b.n	8009e88 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	e000ed04 	.word	0xe000ed04

08009e94 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009e94:	b590      	push	{r4, r7, lr}
 8009e96:	b08b      	sub	sp, #44	; 0x2c
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009eae:	2380      	movs	r3, #128	; 0x80
 8009eb0:	617b      	str	r3, [r7, #20]
    return event;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	461c      	mov	r4, r3
 8009eb6:	f107 0314 	add.w	r3, r7, #20
 8009eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ec2:	e054      	b.n	8009f6e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed2:	d103      	bne.n	8009edc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8009eda:	e009      	b.n	8009ef0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d006      	beq.n	8009ef0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <osMessageGet+0x5c>
      ticks = 1;
 8009eec:	2301      	movs	r3, #1
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009ef0:	f7ff fd8d 	bl	8009a0e <inHandlerMode>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01c      	beq.n	8009f34 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009efa:	f107 0220 	add.w	r2, r7, #32
 8009efe:	f107 0314 	add.w	r3, r7, #20
 8009f02:	3304      	adds	r3, #4
 8009f04:	4619      	mov	r1, r3
 8009f06:	68b8      	ldr	r0, [r7, #8]
 8009f08:	f000 fee6 	bl	800acd8 <xQueueReceiveFromISR>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d102      	bne.n	8009f18 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009f12:	2310      	movs	r3, #16
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	e001      	b.n	8009f1c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d01d      	beq.n	8009f5e <osMessageGet+0xca>
 8009f22:	4b15      	ldr	r3, [pc, #84]	; (8009f78 <osMessageGet+0xe4>)
 8009f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	e014      	b.n	8009f5e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009f34:	f107 0314 	add.w	r3, r7, #20
 8009f38:	3304      	adds	r3, #4
 8009f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	68b8      	ldr	r0, [r7, #8]
 8009f40:	f000 fcd0 	bl	800a8e4 <xQueueReceive>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d102      	bne.n	8009f50 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009f4a:	2310      	movs	r3, #16
 8009f4c:	617b      	str	r3, [r7, #20]
 8009f4e:	e006      	b.n	8009f5e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <osMessageGet+0xc6>
 8009f56:	2300      	movs	r3, #0
 8009f58:	e000      	b.n	8009f5c <osMessageGet+0xc8>
 8009f5a:	2340      	movs	r3, #64	; 0x40
 8009f5c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	461c      	mov	r4, r3
 8009f62:	f107 0314 	add.w	r3, r7, #20
 8009f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	372c      	adds	r7, #44	; 0x2c
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd90      	pop	{r4, r7, pc}
 8009f76:	bf00      	nop
 8009f78:	e000ed04 	.word	0xe000ed04

08009f7c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009f84:	f7ff fd43 	bl	8009a0e <inHandlerMode>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d004      	beq.n	8009f98 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 ff48 	bl	800ae24 <uxQueueMessagesWaitingFromISR>
 8009f94:	4603      	mov	r3, r0
 8009f96:	e003      	b.n	8009fa0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 ff23 	bl	800ade4 <uxQueueMessagesWaiting>
 8009f9e:	4603      	mov	r3, r0
  }
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009fb0:	f7ff fd2d 	bl	8009a0e <inHandlerMode>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <osMessageDelete+0x16>
    return osErrorISR;
 8009fba:	2382      	movs	r3, #130	; 0x82
 8009fbc:	e003      	b.n	8009fc6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 ff50 	bl	800ae64 <vQueueDelete>

  return osOK; 
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b083      	sub	sp, #12
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f103 0208 	add.w	r2, r3, #8
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f103 0208 	add.w	r2, r3, #8
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f103 0208 	add.w	r2, r3, #8
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a002:	bf00      	nop
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	601a      	str	r2, [r3, #0]
}
 800a064:	bf00      	nop
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a086:	d103      	bne.n	800a090 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	e00c      	b.n	800a0aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3308      	adds	r3, #8
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	e002      	b.n	800a09e <vListInsert+0x2e>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d2f6      	bcs.n	800a098 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
}
 800a0d6:	bf00      	nop
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	6892      	ldr	r2, [r2, #8]
 800a0f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6852      	ldr	r2, [r2, #4]
 800a102:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d103      	bne.n	800a116 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	1e5a      	subs	r2, r3, #1
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
	...

0800a138 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10c      	bne.n	800a166 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	b672      	cpsid	i
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	b662      	cpsie	i
 800a160:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a166:	f002 f911 	bl	800c38c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a172:	68f9      	ldr	r1, [r7, #12]
 800a174:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a176:	fb01 f303 	mul.w	r3, r1, r3
 800a17a:	441a      	add	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a196:	3b01      	subs	r3, #1
 800a198:	68f9      	ldr	r1, [r7, #12]
 800a19a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a19c:	fb01 f303 	mul.w	r3, r1, r3
 800a1a0:	441a      	add	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	22ff      	movs	r2, #255	; 0xff
 800a1aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	22ff      	movs	r2, #255	; 0xff
 800a1b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d114      	bne.n	800a1e6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d01a      	beq.n	800a1fa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3310      	adds	r3, #16
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f001 fbcf 	bl	800b96c <xTaskRemoveFromEventList>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d012      	beq.n	800a1fa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <xQueueGenericReset+0xd0>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	e009      	b.n	800a1fa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3310      	adds	r3, #16
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff feef 	bl	8009fce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3324      	adds	r3, #36	; 0x24
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff feea 	bl	8009fce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1fa:	f002 f8fb 	bl	800c3f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1fe:	2301      	movs	r3, #1
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08e      	sub	sp, #56	; 0x38
 800a210:	af02      	add	r7, sp, #8
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10c      	bne.n	800a23a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	b672      	cpsid	i
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	b662      	cpsie	i
 800a234:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10c      	bne.n	800a25a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	b672      	cpsid	i
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	b662      	cpsie	i
 800a254:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a256:	bf00      	nop
 800a258:	e7fe      	b.n	800a258 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <xQueueGenericCreateStatic+0x5a>
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <xQueueGenericCreateStatic+0x5e>
 800a266:	2301      	movs	r3, #1
 800a268:	e000      	b.n	800a26c <xQueueGenericCreateStatic+0x60>
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10c      	bne.n	800a28a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	b672      	cpsid	i
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	b662      	cpsie	i
 800a284:	623b      	str	r3, [r7, #32]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <xQueueGenericCreateStatic+0x8a>
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <xQueueGenericCreateStatic+0x8e>
 800a296:	2301      	movs	r3, #1
 800a298:	e000      	b.n	800a29c <xQueueGenericCreateStatic+0x90>
 800a29a:	2300      	movs	r3, #0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10c      	bne.n	800a2ba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	b672      	cpsid	i
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	b662      	cpsie	i
 800a2b4:	61fb      	str	r3, [r7, #28]
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a2ba:	2348      	movs	r3, #72	; 0x48
 800a2bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b48      	cmp	r3, #72	; 0x48
 800a2c2:	d00c      	beq.n	800a2de <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	b672      	cpsid	i
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	b662      	cpsie	i
 800a2d8:	61bb      	str	r3, [r7, #24]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a2de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00d      	beq.n	800a306 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	68b9      	ldr	r1, [r7, #8]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 f847 	bl	800a394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a308:	4618      	mov	r0, r3
 800a30a:	3730      	adds	r7, #48	; 0x30
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08a      	sub	sp, #40	; 0x28
 800a314:	af02      	add	r7, sp, #8
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	4613      	mov	r3, r2
 800a31c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10c      	bne.n	800a33e <xQueueGenericCreate+0x2e>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	b672      	cpsid	i
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	b662      	cpsie	i
 800a338:	613b      	str	r3, [r7, #16]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d102      	bne.n	800a34a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a344:	2300      	movs	r3, #0
 800a346:	61fb      	str	r3, [r7, #28]
 800a348:	e004      	b.n	800a354 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	fb02 f303 	mul.w	r3, r2, r3
 800a352:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	3348      	adds	r3, #72	; 0x48
 800a358:	4618      	mov	r0, r3
 800a35a:	f002 f943 	bl	800c5e4 <pvPortMalloc>
 800a35e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d011      	beq.n	800a38a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	3348      	adds	r3, #72	; 0x48
 800a36e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a378:	79fa      	ldrb	r2, [r7, #7]
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	4613      	mov	r3, r2
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	68b9      	ldr	r1, [r7, #8]
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f805 	bl	800a394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a38a:	69bb      	ldr	r3, [r7, #24]
	}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3720      	adds	r7, #32
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d103      	bne.n	800a3b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	e002      	b.n	800a3b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	69b8      	ldr	r0, [r7, #24]
 800a3c6:	f7ff feb7 	bl	800a138 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3ca:	bf00      	nop
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00e      	beq.n	800a3fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f837 	bl	800a46c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a406:	b580      	push	{r7, lr}
 800a408:	b086      	sub	sp, #24
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	4603      	mov	r3, r0
 800a40e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a410:	2301      	movs	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	2300      	movs	r3, #0
 800a416:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	461a      	mov	r2, r3
 800a41c:	6939      	ldr	r1, [r7, #16]
 800a41e:	6978      	ldr	r0, [r7, #20]
 800a420:	f7ff ff76 	bl	800a310 <xQueueGenericCreate>
 800a424:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7ff ffd3 	bl	800a3d2 <prvInitialiseMutex>

		return xNewQueue;
 800a42c:	68fb      	ldr	r3, [r7, #12]
	}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a436:	b580      	push	{r7, lr}
 800a438:	b088      	sub	sp, #32
 800a43a:	af02      	add	r7, sp, #8
 800a43c:	4603      	mov	r3, r0
 800a43e:	6039      	str	r1, [r7, #0]
 800a440:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a442:	2301      	movs	r3, #1
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	2300      	movs	r3, #0
 800a448:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2200      	movs	r2, #0
 800a452:	6939      	ldr	r1, [r7, #16]
 800a454:	6978      	ldr	r0, [r7, #20]
 800a456:	f7ff fed9 	bl	800a20c <xQueueGenericCreateStatic>
 800a45a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f7ff ffb8 	bl	800a3d2 <prvInitialiseMutex>

		return xNewQueue;
 800a462:	68fb      	ldr	r3, [r7, #12]
	}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08e      	sub	sp, #56	; 0x38
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a47a:	2300      	movs	r3, #0
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10c      	bne.n	800a4a2 <xQueueGenericSend+0x36>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	b672      	cpsid	i
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	b662      	cpsie	i
 800a49c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d103      	bne.n	800a4b0 <xQueueGenericSend+0x44>
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <xQueueGenericSend+0x48>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e000      	b.n	800a4b6 <xQueueGenericSend+0x4a>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10c      	bne.n	800a4d4 <xQueueGenericSend+0x68>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4be:	b672      	cpsid	i
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	b662      	cpsie	i
 800a4ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d103      	bne.n	800a4e2 <xQueueGenericSend+0x76>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d101      	bne.n	800a4e6 <xQueueGenericSend+0x7a>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <xQueueGenericSend+0x7c>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10c      	bne.n	800a506 <xQueueGenericSend+0x9a>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	b672      	cpsid	i
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	b662      	cpsie	i
 800a500:	623b      	str	r3, [r7, #32]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a506:	f001 fbf5 	bl	800bcf4 <xTaskGetSchedulerState>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d102      	bne.n	800a516 <xQueueGenericSend+0xaa>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <xQueueGenericSend+0xae>
 800a516:	2301      	movs	r3, #1
 800a518:	e000      	b.n	800a51c <xQueueGenericSend+0xb0>
 800a51a:	2300      	movs	r3, #0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10c      	bne.n	800a53a <xQueueGenericSend+0xce>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	b672      	cpsid	i
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	b662      	cpsie	i
 800a534:	61fb      	str	r3, [r7, #28]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a53a:	f001 ff27 	bl	800c38c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a546:	429a      	cmp	r2, r3
 800a548:	d302      	bcc.n	800a550 <xQueueGenericSend+0xe4>
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d129      	bne.n	800a5a4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a556:	f000 fcc2 	bl	800aede <prvCopyDataToQueue>
 800a55a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	d010      	beq.n	800a586 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	3324      	adds	r3, #36	; 0x24
 800a568:	4618      	mov	r0, r3
 800a56a:	f001 f9ff 	bl	800b96c <xTaskRemoveFromEventList>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d013      	beq.n	800a59c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a574:	4b3f      	ldr	r3, [pc, #252]	; (800a674 <xQueueGenericSend+0x208>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	e00a      	b.n	800a59c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a58c:	4b39      	ldr	r3, [pc, #228]	; (800a674 <xQueueGenericSend+0x208>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a59c:	f001 ff2a 	bl	800c3f4 <vPortExitCritical>
				return pdPASS;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e063      	b.n	800a66c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d103      	bne.n	800a5b2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5aa:	f001 ff23 	bl	800c3f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e05c      	b.n	800a66c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5b8:	f107 0314 	add.w	r3, r7, #20
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f001 fa39 	bl	800ba34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5c6:	f001 ff15 	bl	800c3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5ca:	f000 ffc3 	bl	800b554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5ce:	f001 fedd 	bl	800c38c <vPortEnterCritical>
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5d8:	b25b      	sxtb	r3, r3
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5de:	d103      	bne.n	800a5e8 <xQueueGenericSend+0x17c>
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ee:	b25b      	sxtb	r3, r3
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f4:	d103      	bne.n	800a5fe <xQueueGenericSend+0x192>
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5fe:	f001 fef9 	bl	800c3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a602:	1d3a      	adds	r2, r7, #4
 800a604:	f107 0314 	add.w	r3, r7, #20
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 fa28 	bl	800ba60 <xTaskCheckForTimeOut>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d124      	bne.n	800a660 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a618:	f000 fd59 	bl	800b0ce <prvIsQueueFull>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d018      	beq.n	800a654 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a624:	3310      	adds	r3, #16
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	4611      	mov	r1, r2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f001 f978 	bl	800b920 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a632:	f000 fce4 	bl	800affe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a636:	f000 ff9b 	bl	800b570 <xTaskResumeAll>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f47f af7c 	bne.w	800a53a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a642:	4b0c      	ldr	r3, [pc, #48]	; (800a674 <xQueueGenericSend+0x208>)
 800a644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	e772      	b.n	800a53a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a656:	f000 fcd2 	bl	800affe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a65a:	f000 ff89 	bl	800b570 <xTaskResumeAll>
 800a65e:	e76c      	b.n	800a53a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a662:	f000 fccc 	bl	800affe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a666:	f000 ff83 	bl	800b570 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a66a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3738      	adds	r7, #56	; 0x38
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08e      	sub	sp, #56	; 0x38
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10c      	bne.n	800a6aa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	b672      	cpsid	i
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	b662      	cpsie	i
 800a6a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6a6:	bf00      	nop
 800a6a8:	e7fe      	b.n	800a6a8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d103      	bne.n	800a6b8 <xQueueGenericSendFromISR+0x40>
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <xQueueGenericSendFromISR+0x44>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e000      	b.n	800a6be <xQueueGenericSendFromISR+0x46>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10c      	bne.n	800a6dc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	b672      	cpsid	i
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	b662      	cpsie	i
 800a6d6:	623b      	str	r3, [r7, #32]
}
 800a6d8:	bf00      	nop
 800a6da:	e7fe      	b.n	800a6da <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d103      	bne.n	800a6ea <xQueueGenericSendFromISR+0x72>
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d101      	bne.n	800a6ee <xQueueGenericSendFromISR+0x76>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e000      	b.n	800a6f0 <xQueueGenericSendFromISR+0x78>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10c      	bne.n	800a70e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	b672      	cpsid	i
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	b662      	cpsie	i
 800a708:	61fb      	str	r3, [r7, #28]
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a70e:	f001 ff25 	bl	800c55c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a712:	f3ef 8211 	mrs	r2, BASEPRI
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	b672      	cpsid	i
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	b662      	cpsie	i
 800a72a:	61ba      	str	r2, [r7, #24]
 800a72c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a72e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d302      	bcc.n	800a744 <xQueueGenericSendFromISR+0xcc>
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b02      	cmp	r3, #2
 800a742:	d12c      	bne.n	800a79e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a74a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	68b9      	ldr	r1, [r7, #8]
 800a752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a754:	f000 fbc3 	bl	800aede <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a758:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a760:	d112      	bne.n	800a788 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	d016      	beq.n	800a798 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	3324      	adds	r3, #36	; 0x24
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 f8fc 	bl	800b96c <xTaskRemoveFromEventList>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00e      	beq.n	800a798 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00b      	beq.n	800a798 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	e007      	b.n	800a798 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a788:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a78c:	3301      	adds	r3, #1
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	b25a      	sxtb	r2, r3
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a798:	2301      	movs	r3, #1
 800a79a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a79c:	e001      	b.n	800a7a2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a7ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3738      	adds	r7, #56	; 0x38
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08e      	sub	sp, #56	; 0x38
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10c      	bne.n	800a7e6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	b672      	cpsid	i
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	b662      	cpsie	i
 800a7e0:	623b      	str	r3, [r7, #32]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00c      	beq.n	800a808 <xQueueGiveFromISR+0x50>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	b672      	cpsid	i
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	b662      	cpsie	i
 800a802:	61fb      	str	r3, [r7, #28]
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d103      	bne.n	800a818 <xQueueGiveFromISR+0x60>
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <xQueueGiveFromISR+0x64>
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <xQueueGiveFromISR+0x66>
 800a81c:	2300      	movs	r3, #0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10c      	bne.n	800a83c <xQueueGiveFromISR+0x84>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	b672      	cpsid	i
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	b662      	cpsie	i
 800a836:	61bb      	str	r3, [r7, #24]
}
 800a838:	bf00      	nop
 800a83a:	e7fe      	b.n	800a83a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a83c:	f001 fe8e 	bl	800c55c <vPortValidateInterruptPriority>
	__asm volatile
 800a840:	f3ef 8211 	mrs	r2, BASEPRI
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	b672      	cpsid	i
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	b662      	cpsie	i
 800a858:	617a      	str	r2, [r7, #20]
 800a85a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a85c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a85e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a864:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d22b      	bcs.n	800a8c8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	1c5a      	adds	r2, r3, #1
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a882:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88a:	d112      	bne.n	800a8b2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	2b00      	cmp	r3, #0
 800a892:	d016      	beq.n	800a8c2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a896:	3324      	adds	r3, #36	; 0x24
 800a898:	4618      	mov	r0, r3
 800a89a:	f001 f867 	bl	800b96c <xTaskRemoveFromEventList>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00e      	beq.n	800a8c2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00b      	beq.n	800a8c2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	e007      	b.n	800a8c2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	b25a      	sxtb	r2, r3
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c6:	e001      	b.n	800a8cc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f383 8811 	msr	BASEPRI, r3
}
 800a8d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3738      	adds	r7, #56	; 0x38
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08c      	sub	sp, #48	; 0x30
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10c      	bne.n	800a918 <xQueueReceive+0x34>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	b672      	cpsid	i
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	b662      	cpsie	i
 800a912:	623b      	str	r3, [r7, #32]
}
 800a914:	bf00      	nop
 800a916:	e7fe      	b.n	800a916 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d103      	bne.n	800a926 <xQueueReceive+0x42>
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <xQueueReceive+0x46>
 800a926:	2301      	movs	r3, #1
 800a928:	e000      	b.n	800a92c <xQueueReceive+0x48>
 800a92a:	2300      	movs	r3, #0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10c      	bne.n	800a94a <xQueueReceive+0x66>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	b672      	cpsid	i
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	b662      	cpsie	i
 800a944:	61fb      	str	r3, [r7, #28]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a94a:	f001 f9d3 	bl	800bcf4 <xTaskGetSchedulerState>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <xQueueReceive+0x76>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <xQueueReceive+0x7a>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <xQueueReceive+0x7c>
 800a95e:	2300      	movs	r3, #0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10c      	bne.n	800a97e <xQueueReceive+0x9a>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	b672      	cpsid	i
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	b662      	cpsie	i
 800a978:	61bb      	str	r3, [r7, #24]
}
 800a97a:	bf00      	nop
 800a97c:	e7fe      	b.n	800a97c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a97e:	f001 fd05 	bl	800c38c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a986:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d01f      	beq.n	800a9ce <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a98e:	68b9      	ldr	r1, [r7, #8]
 800a990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a992:	f000 fb0e 	bl	800afb2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a998:	1e5a      	subs	r2, r3, #1
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00f      	beq.n	800a9c6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	3310      	adds	r3, #16
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 ffde 	bl	800b96c <xTaskRemoveFromEventList>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d007      	beq.n	800a9c6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9b6:	4b3d      	ldr	r3, [pc, #244]	; (800aaac <xQueueReceive+0x1c8>)
 800a9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9c6:	f001 fd15 	bl	800c3f4 <vPortExitCritical>
				return pdPASS;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e069      	b.n	800aaa2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d103      	bne.n	800a9dc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9d4:	f001 fd0e 	bl	800c3f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e062      	b.n	800aaa2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d106      	bne.n	800a9f0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9e2:	f107 0310 	add.w	r3, r7, #16
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 f824 	bl	800ba34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9f0:	f001 fd00 	bl	800c3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9f4:	f000 fdae 	bl	800b554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9f8:	f001 fcc8 	bl	800c38c <vPortEnterCritical>
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d103      	bne.n	800aa12 <xQueueReceive+0x12e>
 800aa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d103      	bne.n	800aa28 <xQueueReceive+0x144>
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa28:	f001 fce4 	bl	800c3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa2c:	1d3a      	adds	r2, r7, #4
 800aa2e:	f107 0310 	add.w	r3, r7, #16
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f001 f813 	bl	800ba60 <xTaskCheckForTimeOut>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d123      	bne.n	800aa88 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa42:	f000 fb2e 	bl	800b0a2 <prvIsQueueEmpty>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d017      	beq.n	800aa7c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	3324      	adds	r3, #36	; 0x24
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 ff63 	bl	800b920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa5c:	f000 facf 	bl	800affe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa60:	f000 fd86 	bl	800b570 <xTaskResumeAll>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d189      	bne.n	800a97e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800aa6a:	4b10      	ldr	r3, [pc, #64]	; (800aaac <xQueueReceive+0x1c8>)
 800aa6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	e780      	b.n	800a97e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa7e:	f000 fabe 	bl	800affe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa82:	f000 fd75 	bl	800b570 <xTaskResumeAll>
 800aa86:	e77a      	b.n	800a97e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa8a:	f000 fab8 	bl	800affe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa8e:	f000 fd6f 	bl	800b570 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa94:	f000 fb05 	bl	800b0a2 <prvIsQueueEmpty>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f43f af6f 	beq.w	800a97e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aaa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3730      	adds	r7, #48	; 0x30
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	e000ed04 	.word	0xe000ed04

0800aab0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08e      	sub	sp, #56	; 0x38
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aac2:	2300      	movs	r3, #0
 800aac4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10c      	bne.n	800aae6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	b672      	cpsid	i
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	b662      	cpsie	i
 800aae0:	623b      	str	r3, [r7, #32]
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00c      	beq.n	800ab08 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	b672      	cpsid	i
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	b662      	cpsie	i
 800ab02:	61fb      	str	r3, [r7, #28]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab08:	f001 f8f4 	bl	800bcf4 <xTaskGetSchedulerState>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d102      	bne.n	800ab18 <xQueueSemaphoreTake+0x68>
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <xQueueSemaphoreTake+0x6c>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e000      	b.n	800ab1e <xQueueSemaphoreTake+0x6e>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10c      	bne.n	800ab3c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	b672      	cpsid	i
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	b662      	cpsie	i
 800ab36:	61bb      	str	r3, [r7, #24]
}
 800ab38:	bf00      	nop
 800ab3a:	e7fe      	b.n	800ab3a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab3c:	f001 fc26 	bl	800c38c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ab46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d024      	beq.n	800ab96 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	1e5a      	subs	r2, r3, #1
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d104      	bne.n	800ab66 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ab5c:	f001 fa90 	bl	800c080 <pvTaskIncrementMutexHeldCount>
 800ab60:	4602      	mov	r2, r0
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00f      	beq.n	800ab8e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	3310      	adds	r3, #16
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 fefa 	bl	800b96c <xTaskRemoveFromEventList>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d007      	beq.n	800ab8e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab7e:	4b55      	ldr	r3, [pc, #340]	; (800acd4 <xQueueSemaphoreTake+0x224>)
 800ab80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab8e:	f001 fc31 	bl	800c3f4 <vPortExitCritical>
				return pdPASS;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e099      	b.n	800acca <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d113      	bne.n	800abc4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00c      	beq.n	800abbc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	b672      	cpsid	i
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	b662      	cpsie	i
 800abb6:	617b      	str	r3, [r7, #20]
}
 800abb8:	bf00      	nop
 800abba:	e7fe      	b.n	800abba <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800abbc:	f001 fc1a 	bl	800c3f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800abc0:	2300      	movs	r3, #0
 800abc2:	e082      	b.n	800acca <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d106      	bne.n	800abd8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abca:	f107 030c 	add.w	r3, r7, #12
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 ff30 	bl	800ba34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abd4:	2301      	movs	r3, #1
 800abd6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abd8:	f001 fc0c 	bl	800c3f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abdc:	f000 fcba 	bl	800b554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abe0:	f001 fbd4 	bl	800c38c <vPortEnterCritical>
 800abe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abea:	b25b      	sxtb	r3, r3
 800abec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf0:	d103      	bne.n	800abfa <xQueueSemaphoreTake+0x14a>
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac00:	b25b      	sxtb	r3, r3
 800ac02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac06:	d103      	bne.n	800ac10 <xQueueSemaphoreTake+0x160>
 800ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac10:	f001 fbf0 	bl	800c3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac14:	463a      	mov	r2, r7
 800ac16:	f107 030c 	add.w	r3, r7, #12
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 ff1f 	bl	800ba60 <xTaskCheckForTimeOut>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d132      	bne.n	800ac8e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac2a:	f000 fa3a 	bl	800b0a2 <prvIsQueueEmpty>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d026      	beq.n	800ac82 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d109      	bne.n	800ac50 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ac3c:	f001 fba6 	bl	800c38c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f001 f873 	bl	800bd30 <xTaskPriorityInherit>
 800ac4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ac4c:	f001 fbd2 	bl	800c3f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	3324      	adds	r3, #36	; 0x24
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	4611      	mov	r1, r2
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fe61 	bl	800b920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac60:	f000 f9cd 	bl	800affe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac64:	f000 fc84 	bl	800b570 <xTaskResumeAll>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f47f af66 	bne.w	800ab3c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ac70:	4b18      	ldr	r3, [pc, #96]	; (800acd4 <xQueueSemaphoreTake+0x224>)
 800ac72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	e75c      	b.n	800ab3c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ac82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac84:	f000 f9bb 	bl	800affe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac88:	f000 fc72 	bl	800b570 <xTaskResumeAll>
 800ac8c:	e756      	b.n	800ab3c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac90:	f000 f9b5 	bl	800affe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac94:	f000 fc6c 	bl	800b570 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac9a:	f000 fa02 	bl	800b0a2 <prvIsQueueEmpty>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f43f af4b 	beq.w	800ab3c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00d      	beq.n	800acc8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800acac:	f001 fb6e 	bl	800c38c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800acb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acb2:	f000 f8fc 	bl	800aeae <prvGetDisinheritPriorityAfterTimeout>
 800acb6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 f940 	bl	800bf44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800acc4:	f001 fb96 	bl	800c3f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800acc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800acca:	4618      	mov	r0, r3
 800accc:	3738      	adds	r7, #56	; 0x38
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	e000ed04 	.word	0xe000ed04

0800acd8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08e      	sub	sp, #56	; 0x38
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10c      	bne.n	800ad08 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	b672      	cpsid	i
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	b662      	cpsie	i
 800ad02:	623b      	str	r3, [r7, #32]
}
 800ad04:	bf00      	nop
 800ad06:	e7fe      	b.n	800ad06 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d103      	bne.n	800ad16 <xQueueReceiveFromISR+0x3e>
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <xQueueReceiveFromISR+0x42>
 800ad16:	2301      	movs	r3, #1
 800ad18:	e000      	b.n	800ad1c <xQueueReceiveFromISR+0x44>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10c      	bne.n	800ad3a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	b672      	cpsid	i
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	b662      	cpsie	i
 800ad34:	61fb      	str	r3, [r7, #28]
}
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad3a:	f001 fc0f 	bl	800c55c <vPortValidateInterruptPriority>
	__asm volatile
 800ad3e:	f3ef 8211 	mrs	r2, BASEPRI
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	b672      	cpsid	i
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	b662      	cpsie	i
 800ad56:	61ba      	str	r2, [r7, #24]
 800ad58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ad5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d02f      	beq.n	800adca <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad78:	f000 f91b 	bl	800afb2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	1e5a      	subs	r2, r3, #1
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ad84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8c:	d112      	bne.n	800adb4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d016      	beq.n	800adc4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	3310      	adds	r3, #16
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 fde6 	bl	800b96c <xTaskRemoveFromEventList>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00e      	beq.n	800adc4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	e007      	b.n	800adc4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800adb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adb8:	3301      	adds	r3, #1
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	b25a      	sxtb	r2, r3
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800adc4:	2301      	movs	r3, #1
 800adc6:	637b      	str	r3, [r7, #52]	; 0x34
 800adc8:	e001      	b.n	800adce <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800adca:	2300      	movs	r3, #0
 800adcc:	637b      	str	r3, [r7, #52]	; 0x34
 800adce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f383 8811 	msr	BASEPRI, r3
}
 800add8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800addc:	4618      	mov	r0, r3
 800adde:	3738      	adds	r7, #56	; 0x38
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10c      	bne.n	800ae0c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	b672      	cpsid	i
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	b662      	cpsie	i
 800ae06:	60bb      	str	r3, [r7, #8]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800ae0c:	f001 fabe 	bl	800c38c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae14:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ae16:	f001 faed 	bl	800c3f4 <vPortExitCritical>

	return uxReturn;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10c      	bne.n	800ae50 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3a:	b672      	cpsid	i
 800ae3c:	f383 8811 	msr	BASEPRI, r3
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	b662      	cpsie	i
 800ae4a:	60fb      	str	r3, [r7, #12]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae54:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ae56:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ae58:	4618      	mov	r0, r3
 800ae5a:	371c      	adds	r7, #28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10c      	bne.n	800ae90 <vQueueDelete+0x2c>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	b672      	cpsid	i
 800ae7c:	f383 8811 	msr	BASEPRI, r3
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	b662      	cpsie	i
 800ae8a:	60bb      	str	r3, [r7, #8]
}
 800ae8c:	bf00      	nop
 800ae8e:	e7fe      	b.n	800ae8e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f935 	bl	800b100 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d102      	bne.n	800aea6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f001 fc69 	bl	800c778 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aea6:	bf00      	nop
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aeae:	b480      	push	{r7}
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d006      	beq.n	800aecc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f1c3 0307 	rsb	r3, r3, #7
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	e001      	b.n	800aed0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aecc:	2300      	movs	r3, #0
 800aece:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aed0:	68fb      	ldr	r3, [r7, #12]
	}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b086      	sub	sp, #24
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	60f8      	str	r0, [r7, #12]
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10d      	bne.n	800af18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d14d      	bne.n	800afa0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 ff91 	bl	800be30 <xTaskPriorityDisinherit>
 800af0e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	609a      	str	r2, [r3, #8]
 800af16:	e043      	b.n	800afa0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d119      	bne.n	800af52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6858      	ldr	r0, [r3, #4]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af26:	461a      	mov	r2, r3
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	f010 f977 	bl	801b21c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af36:	441a      	add	r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	429a      	cmp	r2, r3
 800af46:	d32b      	bcc.n	800afa0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	605a      	str	r2, [r3, #4]
 800af50:	e026      	b.n	800afa0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	68d8      	ldr	r0, [r3, #12]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5a:	461a      	mov	r2, r3
 800af5c:	68b9      	ldr	r1, [r7, #8]
 800af5e:	f010 f95d 	bl	801b21c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6a:	425b      	negs	r3, r3
 800af6c:	441a      	add	r2, r3
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d207      	bcs.n	800af8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af86:	425b      	negs	r3, r3
 800af88:	441a      	add	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d105      	bne.n	800afa0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afa8:	697b      	ldr	r3, [r7, #20]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d018      	beq.n	800aff6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68da      	ldr	r2, [r3, #12]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afcc:	441a      	add	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68da      	ldr	r2, [r3, #12]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d303      	bcc.n	800afe6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68d9      	ldr	r1, [r3, #12]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	461a      	mov	r2, r3
 800aff0:	6838      	ldr	r0, [r7, #0]
 800aff2:	f010 f913 	bl	801b21c <memcpy>
	}
}
 800aff6:	bf00      	nop
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b006:	f001 f9c1 	bl	800c38c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b010:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b012:	e011      	b.n	800b038 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d012      	beq.n	800b042 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3324      	adds	r3, #36	; 0x24
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fca3 	bl	800b96c <xTaskRemoveFromEventList>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b02c:	f000 fd7e 	bl	800bb2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	3b01      	subs	r3, #1
 800b034:	b2db      	uxtb	r3, r3
 800b036:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	dce9      	bgt.n	800b014 <prvUnlockQueue+0x16>
 800b040:	e000      	b.n	800b044 <prvUnlockQueue+0x46>
					break;
 800b042:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	22ff      	movs	r2, #255	; 0xff
 800b048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b04c:	f001 f9d2 	bl	800c3f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b050:	f001 f99c 	bl	800c38c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b05a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b05c:	e011      	b.n	800b082 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d012      	beq.n	800b08c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3310      	adds	r3, #16
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fc7e 	bl	800b96c <xTaskRemoveFromEventList>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b076:	f000 fd59 	bl	800bb2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b086:	2b00      	cmp	r3, #0
 800b088:	dce9      	bgt.n	800b05e <prvUnlockQueue+0x60>
 800b08a:	e000      	b.n	800b08e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b08c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	22ff      	movs	r2, #255	; 0xff
 800b092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b096:	f001 f9ad 	bl	800c3f4 <vPortExitCritical>
}
 800b09a:	bf00      	nop
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0aa:	f001 f96f 	bl	800c38c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d102      	bne.n	800b0bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	e001      	b.n	800b0c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0c0:	f001 f998 	bl	800c3f4 <vPortExitCritical>

	return xReturn;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0d6:	f001 f959 	bl	800c38c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d102      	bne.n	800b0ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	e001      	b.n	800b0f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0f0:	f001 f980 	bl	800c3f4 <vPortExitCritical>

	return xReturn;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	e016      	b.n	800b13c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b10e:	4a10      	ldr	r2, [pc, #64]	; (800b150 <vQueueUnregisterQueue+0x50>)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	4413      	add	r3, r2
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d10b      	bne.n	800b136 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b11e:	4a0c      	ldr	r2, [pc, #48]	; (800b150 <vQueueUnregisterQueue+0x50>)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2100      	movs	r1, #0
 800b124:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b128:	4a09      	ldr	r2, [pc, #36]	; (800b150 <vQueueUnregisterQueue+0x50>)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	00db      	lsls	r3, r3, #3
 800b12e:	4413      	add	r3, r2
 800b130:	2200      	movs	r2, #0
 800b132:	605a      	str	r2, [r3, #4]
				break;
 800b134:	e006      	b.n	800b144 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3301      	adds	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b07      	cmp	r3, #7
 800b140:	d9e5      	bls.n	800b10e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b142:	bf00      	nop
 800b144:	bf00      	nop
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	200086e8 	.word	0x200086e8

0800b154 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08e      	sub	sp, #56	; 0x38
 800b158:	af04      	add	r7, sp, #16
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10c      	bne.n	800b182 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16c:	b672      	cpsid	i
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	b662      	cpsie	i
 800b17c:	623b      	str	r3, [r7, #32]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10c      	bne.n	800b1a2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	b672      	cpsid	i
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	b662      	cpsie	i
 800b19c:	61fb      	str	r3, [r7, #28]
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1a2:	2354      	movs	r3, #84	; 0x54
 800b1a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	2b54      	cmp	r3, #84	; 0x54
 800b1aa:	d00c      	beq.n	800b1c6 <xTaskCreateStatic+0x72>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	b672      	cpsid	i
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	b662      	cpsie	i
 800b1c0:	61bb      	str	r3, [r7, #24]
}
 800b1c2:	bf00      	nop
 800b1c4:	e7fe      	b.n	800b1c4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01e      	beq.n	800b20c <xTaskCreateStatic+0xb8>
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01b      	beq.n	800b20c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9303      	str	r3, [sp, #12]
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	9302      	str	r3, [sp, #8]
 800b1ee:	f107 0314 	add.w	r3, r7, #20
 800b1f2:	9301      	str	r3, [sp, #4]
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	68b9      	ldr	r1, [r7, #8]
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f000 f850 	bl	800b2a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b206:	f000 f8d7 	bl	800b3b8 <prvAddNewTaskToReadyList>
 800b20a:	e001      	b.n	800b210 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b210:	697b      	ldr	r3, [r7, #20]
	}
 800b212:	4618      	mov	r0, r3
 800b214:	3728      	adds	r7, #40	; 0x28
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b08c      	sub	sp, #48	; 0x30
 800b21e:	af04      	add	r7, sp, #16
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	603b      	str	r3, [r7, #0]
 800b226:	4613      	mov	r3, r2
 800b228:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4618      	mov	r0, r3
 800b230:	f001 f9d8 	bl	800c5e4 <pvPortMalloc>
 800b234:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00e      	beq.n	800b25a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b23c:	2054      	movs	r0, #84	; 0x54
 800b23e:	f001 f9d1 	bl	800c5e4 <pvPortMalloc>
 800b242:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	631a      	str	r2, [r3, #48]	; 0x30
 800b250:	e005      	b.n	800b25e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b252:	6978      	ldr	r0, [r7, #20]
 800b254:	f001 fa90 	bl	800c778 <vPortFree>
 800b258:	e001      	b.n	800b25e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d017      	beq.n	800b294 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b26c:	88fa      	ldrh	r2, [r7, #6]
 800b26e:	2300      	movs	r3, #0
 800b270:	9303      	str	r3, [sp, #12]
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	9302      	str	r3, [sp, #8]
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	9301      	str	r3, [sp, #4]
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	68b9      	ldr	r1, [r7, #8]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 f80e 	bl	800b2a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b288:	69f8      	ldr	r0, [r7, #28]
 800b28a:	f000 f895 	bl	800b3b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b28e:	2301      	movs	r3, #1
 800b290:	61bb      	str	r3, [r7, #24]
 800b292:	e002      	b.n	800b29a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b294:	f04f 33ff 	mov.w	r3, #4294967295
 800b298:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b29a:	69bb      	ldr	r3, [r7, #24]
	}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3720      	adds	r7, #32
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b088      	sub	sp, #32
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
 800b2b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2b6:	6879      	ldr	r1, [r7, #4]
 800b2b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b2bc:	440b      	add	r3, r1
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	f023 0307 	bic.w	r3, r3, #7
 800b2ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00c      	beq.n	800b2f0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	b672      	cpsid	i
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	b662      	cpsie	i
 800b2ea:	617b      	str	r3, [r7, #20]
}
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d01f      	beq.n	800b336 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	61fb      	str	r3, [r7, #28]
 800b2fa:	e012      	b.n	800b322 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	4413      	add	r3, r2
 800b302:	7819      	ldrb	r1, [r3, #0]
 800b304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	4413      	add	r3, r2
 800b30a:	3334      	adds	r3, #52	; 0x34
 800b30c:	460a      	mov	r2, r1
 800b30e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	4413      	add	r3, r2
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d006      	beq.n	800b32a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	3301      	adds	r3, #1
 800b320:	61fb      	str	r3, [r7, #28]
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	2b0f      	cmp	r3, #15
 800b326:	d9e9      	bls.n	800b2fc <prvInitialiseNewTask+0x58>
 800b328:	e000      	b.n	800b32c <prvInitialiseNewTask+0x88>
			{
				break;
 800b32a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b334:	e003      	b.n	800b33e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	2b06      	cmp	r3, #6
 800b342:	d901      	bls.n	800b348 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b344:	2306      	movs	r3, #6
 800b346:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b34c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b352:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	2200      	movs	r2, #0
 800b358:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	3304      	adds	r3, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fe55 	bl	800a00e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	3318      	adds	r3, #24
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fe fe50 	bl	800a00e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b376:	f1c3 0207 	rsb	r2, r3, #7
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b382:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	2200      	movs	r2, #0
 800b388:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	68f9      	ldr	r1, [r7, #12]
 800b396:	69b8      	ldr	r0, [r7, #24]
 800b398:	f000 feec 	bl	800c174 <pxPortInitialiseStack>
 800b39c:	4602      	mov	r2, r0
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d002      	beq.n	800b3ae <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3ae:	bf00      	nop
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3c0:	f000 ffe4 	bl	800c38c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3c4:	4b2a      	ldr	r3, [pc, #168]	; (800b470 <prvAddNewTaskToReadyList+0xb8>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	4a29      	ldr	r2, [pc, #164]	; (800b470 <prvAddNewTaskToReadyList+0xb8>)
 800b3cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3ce:	4b29      	ldr	r3, [pc, #164]	; (800b474 <prvAddNewTaskToReadyList+0xbc>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3d6:	4a27      	ldr	r2, [pc, #156]	; (800b474 <prvAddNewTaskToReadyList+0xbc>)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3dc:	4b24      	ldr	r3, [pc, #144]	; (800b470 <prvAddNewTaskToReadyList+0xb8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d110      	bne.n	800b406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3e4:	f000 fbc6 	bl	800bb74 <prvInitialiseTaskLists>
 800b3e8:	e00d      	b.n	800b406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3ea:	4b23      	ldr	r3, [pc, #140]	; (800b478 <prvAddNewTaskToReadyList+0xc0>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d109      	bne.n	800b406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3f2:	4b20      	ldr	r3, [pc, #128]	; (800b474 <prvAddNewTaskToReadyList+0xbc>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d802      	bhi.n	800b406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b400:	4a1c      	ldr	r2, [pc, #112]	; (800b474 <prvAddNewTaskToReadyList+0xbc>)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b406:	4b1d      	ldr	r3, [pc, #116]	; (800b47c <prvAddNewTaskToReadyList+0xc4>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	3301      	adds	r3, #1
 800b40c:	4a1b      	ldr	r2, [pc, #108]	; (800b47c <prvAddNewTaskToReadyList+0xc4>)
 800b40e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b414:	2201      	movs	r2, #1
 800b416:	409a      	lsls	r2, r3
 800b418:	4b19      	ldr	r3, [pc, #100]	; (800b480 <prvAddNewTaskToReadyList+0xc8>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	4a18      	ldr	r2, [pc, #96]	; (800b480 <prvAddNewTaskToReadyList+0xc8>)
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b426:	4613      	mov	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4a15      	ldr	r2, [pc, #84]	; (800b484 <prvAddNewTaskToReadyList+0xcc>)
 800b430:	441a      	add	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3304      	adds	r3, #4
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7fe fdf5 	bl	800a028 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b43e:	f000 ffd9 	bl	800c3f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <prvAddNewTaskToReadyList+0xc0>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00e      	beq.n	800b468 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b44a:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <prvAddNewTaskToReadyList+0xbc>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	429a      	cmp	r2, r3
 800b456:	d207      	bcs.n	800b468 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b458:	4b0b      	ldr	r3, [pc, #44]	; (800b488 <prvAddNewTaskToReadyList+0xd0>)
 800b45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20000e28 	.word	0x20000e28
 800b474:	20000d28 	.word	0x20000d28
 800b478:	20000e34 	.word	0x20000e34
 800b47c:	20000e44 	.word	0x20000e44
 800b480:	20000e30 	.word	0x20000e30
 800b484:	20000d2c 	.word	0x20000d2c
 800b488:	e000ed04 	.word	0xe000ed04

0800b48c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b496:	2300      	movs	r3, #0
 800b498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b49a:	463a      	mov	r2, r7
 800b49c:	1d39      	adds	r1, r7, #4
 800b49e:	f107 0308 	add.w	r3, r7, #8
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7f5 fdf8 	bl	8001098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	9202      	str	r2, [sp, #8]
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	460a      	mov	r2, r1
 800b4ba:	4920      	ldr	r1, [pc, #128]	; (800b53c <vTaskStartScheduler+0xb0>)
 800b4bc:	4820      	ldr	r0, [pc, #128]	; (800b540 <vTaskStartScheduler+0xb4>)
 800b4be:	f7ff fe49 	bl	800b154 <xTaskCreateStatic>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4a1f      	ldr	r2, [pc, #124]	; (800b544 <vTaskStartScheduler+0xb8>)
 800b4c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4c8:	4b1e      	ldr	r3, [pc, #120]	; (800b544 <vTaskStartScheduler+0xb8>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	617b      	str	r3, [r7, #20]
 800b4d4:	e001      	b.n	800b4da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d118      	bne.n	800b512 <vTaskStartScheduler+0x86>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	b672      	cpsid	i
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	b662      	cpsie	i
 800b4f4:	613b      	str	r3, [r7, #16]
}
 800b4f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4f8:	4b13      	ldr	r3, [pc, #76]	; (800b548 <vTaskStartScheduler+0xbc>)
 800b4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b4fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b500:	4b12      	ldr	r3, [pc, #72]	; (800b54c <vTaskStartScheduler+0xc0>)
 800b502:	2201      	movs	r2, #1
 800b504:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b506:	4b12      	ldr	r3, [pc, #72]	; (800b550 <vTaskStartScheduler+0xc4>)
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b50c:	f000 fec0 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b510:	e010      	b.n	800b534 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d10c      	bne.n	800b534 <vTaskStartScheduler+0xa8>
	__asm volatile
 800b51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51e:	b672      	cpsid	i
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	b662      	cpsie	i
 800b52e:	60fb      	str	r3, [r7, #12]
}
 800b530:	bf00      	nop
 800b532:	e7fe      	b.n	800b532 <vTaskStartScheduler+0xa6>
}
 800b534:	bf00      	nop
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	08024710 	.word	0x08024710
 800b540:	0800bb45 	.word	0x0800bb45
 800b544:	20000e4c 	.word	0x20000e4c
 800b548:	20000e48 	.word	0x20000e48
 800b54c:	20000e34 	.word	0x20000e34
 800b550:	20000e2c 	.word	0x20000e2c

0800b554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b554:	b480      	push	{r7}
 800b556:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b558:	4b04      	ldr	r3, [pc, #16]	; (800b56c <vTaskSuspendAll+0x18>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	4a03      	ldr	r2, [pc, #12]	; (800b56c <vTaskSuspendAll+0x18>)
 800b560:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b562:	bf00      	nop
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	20000e50 	.word	0x20000e50

0800b570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b57a:	2300      	movs	r3, #0
 800b57c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b57e:	4b42      	ldr	r3, [pc, #264]	; (800b688 <xTaskResumeAll+0x118>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10c      	bne.n	800b5a0 <xTaskResumeAll+0x30>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58a:	b672      	cpsid	i
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	b662      	cpsie	i
 800b59a:	603b      	str	r3, [r7, #0]
}
 800b59c:	bf00      	nop
 800b59e:	e7fe      	b.n	800b59e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5a0:	f000 fef4 	bl	800c38c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5a4:	4b38      	ldr	r3, [pc, #224]	; (800b688 <xTaskResumeAll+0x118>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	4a37      	ldr	r2, [pc, #220]	; (800b688 <xTaskResumeAll+0x118>)
 800b5ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5ae:	4b36      	ldr	r3, [pc, #216]	; (800b688 <xTaskResumeAll+0x118>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d161      	bne.n	800b67a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5b6:	4b35      	ldr	r3, [pc, #212]	; (800b68c <xTaskResumeAll+0x11c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d05d      	beq.n	800b67a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5be:	e02e      	b.n	800b61e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c0:	4b33      	ldr	r3, [pc, #204]	; (800b690 <xTaskResumeAll+0x120>)
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	3318      	adds	r3, #24
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe fd88 	bl	800a0e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fd83 	bl	800a0e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	409a      	lsls	r2, r3
 800b5e4:	4b2b      	ldr	r3, [pc, #172]	; (800b694 <xTaskResumeAll+0x124>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	4a2a      	ldr	r2, [pc, #168]	; (800b694 <xTaskResumeAll+0x124>)
 800b5ec:	6013      	str	r3, [r2, #0]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4a27      	ldr	r2, [pc, #156]	; (800b698 <xTaskResumeAll+0x128>)
 800b5fc:	441a      	add	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	3304      	adds	r3, #4
 800b602:	4619      	mov	r1, r3
 800b604:	4610      	mov	r0, r2
 800b606:	f7fe fd0f 	bl	800a028 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60e:	4b23      	ldr	r3, [pc, #140]	; (800b69c <xTaskResumeAll+0x12c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	429a      	cmp	r2, r3
 800b616:	d302      	bcc.n	800b61e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b618:	4b21      	ldr	r3, [pc, #132]	; (800b6a0 <xTaskResumeAll+0x130>)
 800b61a:	2201      	movs	r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b61e:	4b1c      	ldr	r3, [pc, #112]	; (800b690 <xTaskResumeAll+0x120>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1cc      	bne.n	800b5c0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d001      	beq.n	800b630 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b62c:	f000 fb42 	bl	800bcb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b630:	4b1c      	ldr	r3, [pc, #112]	; (800b6a4 <xTaskResumeAll+0x134>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d010      	beq.n	800b65e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b63c:	f000 f858 	bl	800b6f0 <xTaskIncrementTick>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d002      	beq.n	800b64c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b646:	4b16      	ldr	r3, [pc, #88]	; (800b6a0 <xTaskResumeAll+0x130>)
 800b648:	2201      	movs	r2, #1
 800b64a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3b01      	subs	r3, #1
 800b650:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1f1      	bne.n	800b63c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b658:	4b12      	ldr	r3, [pc, #72]	; (800b6a4 <xTaskResumeAll+0x134>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b65e:	4b10      	ldr	r3, [pc, #64]	; (800b6a0 <xTaskResumeAll+0x130>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d009      	beq.n	800b67a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b666:	2301      	movs	r3, #1
 800b668:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b66a:	4b0f      	ldr	r3, [pc, #60]	; (800b6a8 <xTaskResumeAll+0x138>)
 800b66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b67a:	f000 febb 	bl	800c3f4 <vPortExitCritical>

	return xAlreadyYielded;
 800b67e:	68bb      	ldr	r3, [r7, #8]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20000e50 	.word	0x20000e50
 800b68c:	20000e28 	.word	0x20000e28
 800b690:	20000de8 	.word	0x20000de8
 800b694:	20000e30 	.word	0x20000e30
 800b698:	20000d2c 	.word	0x20000d2c
 800b69c:	20000d28 	.word	0x20000d28
 800b6a0:	20000e3c 	.word	0x20000e3c
 800b6a4:	20000e38 	.word	0x20000e38
 800b6a8:	e000ed04 	.word	0xe000ed04

0800b6ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6b2:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <xTaskGetTickCount+0x1c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6b8:	687b      	ldr	r3, [r7, #4]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	20000e2c 	.word	0x20000e2c

0800b6cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6d2:	f000 ff43 	bl	800c55c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b6da:	4b04      	ldr	r3, [pc, #16]	; (800b6ec <xTaskGetTickCountFromISR+0x20>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6e0:	683b      	ldr	r3, [r7, #0]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20000e2c 	.word	0x20000e2c

0800b6f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6fa:	4b4f      	ldr	r3, [pc, #316]	; (800b838 <xTaskIncrementTick+0x148>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f040 808a 	bne.w	800b818 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b704:	4b4d      	ldr	r3, [pc, #308]	; (800b83c <xTaskIncrementTick+0x14c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b70c:	4a4b      	ldr	r2, [pc, #300]	; (800b83c <xTaskIncrementTick+0x14c>)
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d122      	bne.n	800b75e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b718:	4b49      	ldr	r3, [pc, #292]	; (800b840 <xTaskIncrementTick+0x150>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00c      	beq.n	800b73c <xTaskIncrementTick+0x4c>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	b672      	cpsid	i
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	b662      	cpsie	i
 800b736:	603b      	str	r3, [r7, #0]
}
 800b738:	bf00      	nop
 800b73a:	e7fe      	b.n	800b73a <xTaskIncrementTick+0x4a>
 800b73c:	4b40      	ldr	r3, [pc, #256]	; (800b840 <xTaskIncrementTick+0x150>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	4b40      	ldr	r3, [pc, #256]	; (800b844 <xTaskIncrementTick+0x154>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a3e      	ldr	r2, [pc, #248]	; (800b840 <xTaskIncrementTick+0x150>)
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	4a3e      	ldr	r2, [pc, #248]	; (800b844 <xTaskIncrementTick+0x154>)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	4b3d      	ldr	r3, [pc, #244]	; (800b848 <xTaskIncrementTick+0x158>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3301      	adds	r3, #1
 800b756:	4a3c      	ldr	r2, [pc, #240]	; (800b848 <xTaskIncrementTick+0x158>)
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	f000 faab 	bl	800bcb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b75e:	4b3b      	ldr	r3, [pc, #236]	; (800b84c <xTaskIncrementTick+0x15c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	429a      	cmp	r2, r3
 800b766:	d348      	bcc.n	800b7fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b768:	4b35      	ldr	r3, [pc, #212]	; (800b840 <xTaskIncrementTick+0x150>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d104      	bne.n	800b77c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b772:	4b36      	ldr	r3, [pc, #216]	; (800b84c <xTaskIncrementTick+0x15c>)
 800b774:	f04f 32ff 	mov.w	r2, #4294967295
 800b778:	601a      	str	r2, [r3, #0]
					break;
 800b77a:	e03e      	b.n	800b7fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b77c:	4b30      	ldr	r3, [pc, #192]	; (800b840 <xTaskIncrementTick+0x150>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	429a      	cmp	r2, r3
 800b792:	d203      	bcs.n	800b79c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b794:	4a2d      	ldr	r2, [pc, #180]	; (800b84c <xTaskIncrementTick+0x15c>)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b79a:	e02e      	b.n	800b7fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	3304      	adds	r3, #4
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fe fc9e 	bl	800a0e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d004      	beq.n	800b7b8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	3318      	adds	r3, #24
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fc95 	bl	800a0e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	2201      	movs	r2, #1
 800b7be:	409a      	lsls	r2, r3
 800b7c0:	4b23      	ldr	r3, [pc, #140]	; (800b850 <xTaskIncrementTick+0x160>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	4a22      	ldr	r2, [pc, #136]	; (800b850 <xTaskIncrementTick+0x160>)
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4a1f      	ldr	r2, [pc, #124]	; (800b854 <xTaskIncrementTick+0x164>)
 800b7d8:	441a      	add	r2, r3
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f7fe fc21 	bl	800a028 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <xTaskIncrementTick+0x168>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d3b9      	bcc.n	800b768 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7f8:	e7b6      	b.n	800b768 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7fa:	4b17      	ldr	r3, [pc, #92]	; (800b858 <xTaskIncrementTick+0x168>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b800:	4914      	ldr	r1, [pc, #80]	; (800b854 <xTaskIncrementTick+0x164>)
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	440b      	add	r3, r1
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d907      	bls.n	800b822 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b812:	2301      	movs	r3, #1
 800b814:	617b      	str	r3, [r7, #20]
 800b816:	e004      	b.n	800b822 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b818:	4b10      	ldr	r3, [pc, #64]	; (800b85c <xTaskIncrementTick+0x16c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3301      	adds	r3, #1
 800b81e:	4a0f      	ldr	r2, [pc, #60]	; (800b85c <xTaskIncrementTick+0x16c>)
 800b820:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b822:	4b0f      	ldr	r3, [pc, #60]	; (800b860 <xTaskIncrementTick+0x170>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b82a:	2301      	movs	r3, #1
 800b82c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b82e:	697b      	ldr	r3, [r7, #20]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	20000e50 	.word	0x20000e50
 800b83c:	20000e2c 	.word	0x20000e2c
 800b840:	20000de0 	.word	0x20000de0
 800b844:	20000de4 	.word	0x20000de4
 800b848:	20000e40 	.word	0x20000e40
 800b84c:	20000e48 	.word	0x20000e48
 800b850:	20000e30 	.word	0x20000e30
 800b854:	20000d2c 	.word	0x20000d2c
 800b858:	20000d28 	.word	0x20000d28
 800b85c:	20000e38 	.word	0x20000e38
 800b860:	20000e3c 	.word	0x20000e3c

0800b864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b86a:	4b28      	ldr	r3, [pc, #160]	; (800b90c <vTaskSwitchContext+0xa8>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b872:	4b27      	ldr	r3, [pc, #156]	; (800b910 <vTaskSwitchContext+0xac>)
 800b874:	2201      	movs	r2, #1
 800b876:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b878:	e041      	b.n	800b8fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b87a:	4b25      	ldr	r3, [pc, #148]	; (800b910 <vTaskSwitchContext+0xac>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b880:	4b24      	ldr	r3, [pc, #144]	; (800b914 <vTaskSwitchContext+0xb0>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	fab3 f383 	clz	r3, r3
 800b88c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b88e:	7afb      	ldrb	r3, [r7, #11]
 800b890:	f1c3 031f 	rsb	r3, r3, #31
 800b894:	617b      	str	r3, [r7, #20]
 800b896:	4920      	ldr	r1, [pc, #128]	; (800b918 <vTaskSwitchContext+0xb4>)
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	4613      	mov	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	440b      	add	r3, r1
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10c      	bne.n	800b8c4 <vTaskSwitchContext+0x60>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	b672      	cpsid	i
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	b662      	cpsie	i
 800b8be:	607b      	str	r3, [r7, #4]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <vTaskSwitchContext+0x5e>
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	4413      	add	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4a12      	ldr	r2, [pc, #72]	; (800b918 <vTaskSwitchContext+0xb4>)
 800b8d0:	4413      	add	r3, r2
 800b8d2:	613b      	str	r3, [r7, #16]
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	605a      	str	r2, [r3, #4]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	3308      	adds	r3, #8
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d104      	bne.n	800b8f4 <vTaskSwitchContext+0x90>
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	605a      	str	r2, [r3, #4]
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	4a08      	ldr	r2, [pc, #32]	; (800b91c <vTaskSwitchContext+0xb8>)
 800b8fc:	6013      	str	r3, [r2, #0]
}
 800b8fe:	bf00      	nop
 800b900:	371c      	adds	r7, #28
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	20000e50 	.word	0x20000e50
 800b910:	20000e3c 	.word	0x20000e3c
 800b914:	20000e30 	.word	0x20000e30
 800b918:	20000d2c 	.word	0x20000d2c
 800b91c:	20000d28 	.word	0x20000d28

0800b920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10c      	bne.n	800b94a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	b672      	cpsid	i
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	b662      	cpsie	i
 800b944:	60fb      	str	r3, [r7, #12]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b94a:	4b07      	ldr	r3, [pc, #28]	; (800b968 <vTaskPlaceOnEventList+0x48>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3318      	adds	r3, #24
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7fe fb8c 	bl	800a070 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b958:	2101      	movs	r1, #1
 800b95a:	6838      	ldr	r0, [r7, #0]
 800b95c:	f000 fba4 	bl	800c0a8 <prvAddCurrentTaskToDelayedList>
}
 800b960:	bf00      	nop
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	20000d28 	.word	0x20000d28

0800b96c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10c      	bne.n	800b99c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	b672      	cpsid	i
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	b662      	cpsie	i
 800b996:	60fb      	str	r3, [r7, #12]
}
 800b998:	bf00      	nop
 800b99a:	e7fe      	b.n	800b99a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	3318      	adds	r3, #24
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fb9e 	bl	800a0e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9a6:	4b1d      	ldr	r3, [pc, #116]	; (800ba1c <xTaskRemoveFromEventList+0xb0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d11c      	bne.n	800b9e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe fb95 	bl	800a0e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	2201      	movs	r2, #1
 800b9be:	409a      	lsls	r2, r3
 800b9c0:	4b17      	ldr	r3, [pc, #92]	; (800ba20 <xTaskRemoveFromEventList+0xb4>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	4a16      	ldr	r2, [pc, #88]	; (800ba20 <xTaskRemoveFromEventList+0xb4>)
 800b9c8:	6013      	str	r3, [r2, #0]
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4a13      	ldr	r2, [pc, #76]	; (800ba24 <xTaskRemoveFromEventList+0xb8>)
 800b9d8:	441a      	add	r2, r3
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	3304      	adds	r3, #4
 800b9de:	4619      	mov	r1, r3
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	f7fe fb21 	bl	800a028 <vListInsertEnd>
 800b9e6:	e005      	b.n	800b9f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	3318      	adds	r3, #24
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	480e      	ldr	r0, [pc, #56]	; (800ba28 <xTaskRemoveFromEventList+0xbc>)
 800b9f0:	f7fe fb1a 	bl	800a028 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ba2c <xTaskRemoveFromEventList+0xc0>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d905      	bls.n	800ba0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba02:	2301      	movs	r3, #1
 800ba04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba06:	4b0a      	ldr	r3, [pc, #40]	; (800ba30 <xTaskRemoveFromEventList+0xc4>)
 800ba08:	2201      	movs	r2, #1
 800ba0a:	601a      	str	r2, [r3, #0]
 800ba0c:	e001      	b.n	800ba12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba12:	697b      	ldr	r3, [r7, #20]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	20000e50 	.word	0x20000e50
 800ba20:	20000e30 	.word	0x20000e30
 800ba24:	20000d2c 	.word	0x20000d2c
 800ba28:	20000de8 	.word	0x20000de8
 800ba2c:	20000d28 	.word	0x20000d28
 800ba30:	20000e3c 	.word	0x20000e3c

0800ba34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba3c:	4b06      	ldr	r3, [pc, #24]	; (800ba58 <vTaskInternalSetTimeOutState+0x24>)
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba44:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <vTaskInternalSetTimeOutState+0x28>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	605a      	str	r2, [r3, #4]
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	20000e40 	.word	0x20000e40
 800ba5c:	20000e2c 	.word	0x20000e2c

0800ba60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10c      	bne.n	800ba8a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	b672      	cpsid	i
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	b662      	cpsie	i
 800ba84:	613b      	str	r3, [r7, #16]
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10c      	bne.n	800baaa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	b672      	cpsid	i
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	b662      	cpsie	i
 800baa4:	60fb      	str	r3, [r7, #12]
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800baaa:	f000 fc6f 	bl	800c38c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800baae:	4b1d      	ldr	r3, [pc, #116]	; (800bb24 <xTaskCheckForTimeOut+0xc4>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	69ba      	ldr	r2, [r7, #24]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac6:	d102      	bne.n	800bace <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bac8:	2300      	movs	r3, #0
 800baca:	61fb      	str	r3, [r7, #28]
 800bacc:	e023      	b.n	800bb16 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4b15      	ldr	r3, [pc, #84]	; (800bb28 <xTaskCheckForTimeOut+0xc8>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d007      	beq.n	800baea <xTaskCheckForTimeOut+0x8a>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	69ba      	ldr	r2, [r7, #24]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d302      	bcc.n	800baea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bae4:	2301      	movs	r3, #1
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	e015      	b.n	800bb16 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d20b      	bcs.n	800bb0c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	1ad2      	subs	r2, r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff ff97 	bl	800ba34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	61fb      	str	r3, [r7, #28]
 800bb0a:	e004      	b.n	800bb16 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb12:	2301      	movs	r3, #1
 800bb14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb16:	f000 fc6d 	bl	800c3f4 <vPortExitCritical>

	return xReturn;
 800bb1a:	69fb      	ldr	r3, [r7, #28]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3720      	adds	r7, #32
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20000e2c 	.word	0x20000e2c
 800bb28:	20000e40 	.word	0x20000e40

0800bb2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb30:	4b03      	ldr	r3, [pc, #12]	; (800bb40 <vTaskMissedYield+0x14>)
 800bb32:	2201      	movs	r2, #1
 800bb34:	601a      	str	r2, [r3, #0]
}
 800bb36:	bf00      	nop
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	20000e3c 	.word	0x20000e3c

0800bb44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb4c:	f000 f852 	bl	800bbf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb50:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <prvIdleTask+0x28>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d9f9      	bls.n	800bb4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <prvIdleTask+0x2c>)
 800bb5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb68:	e7f0      	b.n	800bb4c <prvIdleTask+0x8>
 800bb6a:	bf00      	nop
 800bb6c:	20000d2c 	.word	0x20000d2c
 800bb70:	e000ed04 	.word	0xe000ed04

0800bb74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	607b      	str	r3, [r7, #4]
 800bb7e:	e00c      	b.n	800bb9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4a12      	ldr	r2, [pc, #72]	; (800bbd4 <prvInitialiseTaskLists+0x60>)
 800bb8c:	4413      	add	r3, r2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe fa1d 	bl	8009fce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	3301      	adds	r3, #1
 800bb98:	607b      	str	r3, [r7, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b06      	cmp	r3, #6
 800bb9e:	d9ef      	bls.n	800bb80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bba0:	480d      	ldr	r0, [pc, #52]	; (800bbd8 <prvInitialiseTaskLists+0x64>)
 800bba2:	f7fe fa14 	bl	8009fce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bba6:	480d      	ldr	r0, [pc, #52]	; (800bbdc <prvInitialiseTaskLists+0x68>)
 800bba8:	f7fe fa11 	bl	8009fce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbac:	480c      	ldr	r0, [pc, #48]	; (800bbe0 <prvInitialiseTaskLists+0x6c>)
 800bbae:	f7fe fa0e 	bl	8009fce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbb2:	480c      	ldr	r0, [pc, #48]	; (800bbe4 <prvInitialiseTaskLists+0x70>)
 800bbb4:	f7fe fa0b 	bl	8009fce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbb8:	480b      	ldr	r0, [pc, #44]	; (800bbe8 <prvInitialiseTaskLists+0x74>)
 800bbba:	f7fe fa08 	bl	8009fce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <prvInitialiseTaskLists+0x78>)
 800bbc0:	4a05      	ldr	r2, [pc, #20]	; (800bbd8 <prvInitialiseTaskLists+0x64>)
 800bbc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <prvInitialiseTaskLists+0x7c>)
 800bbc6:	4a05      	ldr	r2, [pc, #20]	; (800bbdc <prvInitialiseTaskLists+0x68>)
 800bbc8:	601a      	str	r2, [r3, #0]
}
 800bbca:	bf00      	nop
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20000d2c 	.word	0x20000d2c
 800bbd8:	20000db8 	.word	0x20000db8
 800bbdc:	20000dcc 	.word	0x20000dcc
 800bbe0:	20000de8 	.word	0x20000de8
 800bbe4:	20000dfc 	.word	0x20000dfc
 800bbe8:	20000e14 	.word	0x20000e14
 800bbec:	20000de0 	.word	0x20000de0
 800bbf0:	20000de4 	.word	0x20000de4

0800bbf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbfa:	e019      	b.n	800bc30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbfc:	f000 fbc6 	bl	800c38c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc00:	4b10      	ldr	r3, [pc, #64]	; (800bc44 <prvCheckTasksWaitingTermination+0x50>)
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fe fa68 	bl	800a0e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc12:	4b0d      	ldr	r3, [pc, #52]	; (800bc48 <prvCheckTasksWaitingTermination+0x54>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	4a0b      	ldr	r2, [pc, #44]	; (800bc48 <prvCheckTasksWaitingTermination+0x54>)
 800bc1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc1c:	4b0b      	ldr	r3, [pc, #44]	; (800bc4c <prvCheckTasksWaitingTermination+0x58>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3b01      	subs	r3, #1
 800bc22:	4a0a      	ldr	r2, [pc, #40]	; (800bc4c <prvCheckTasksWaitingTermination+0x58>)
 800bc24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc26:	f000 fbe5 	bl	800c3f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f810 	bl	800bc50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc30:	4b06      	ldr	r3, [pc, #24]	; (800bc4c <prvCheckTasksWaitingTermination+0x58>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1e1      	bne.n	800bbfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000dfc 	.word	0x20000dfc
 800bc48:	20000e28 	.word	0x20000e28
 800bc4c:	20000e10 	.word	0x20000e10

0800bc50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d108      	bne.n	800bc74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 fd86 	bl	800c778 <vPortFree>
				vPortFree( pxTCB );
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fd83 	bl	800c778 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc72:	e01a      	b.n	800bcaa <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d103      	bne.n	800bc86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fd7a 	bl	800c778 <vPortFree>
	}
 800bc84:	e011      	b.n	800bcaa <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d00c      	beq.n	800bcaa <prvDeleteTCB+0x5a>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	b672      	cpsid	i
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	b662      	cpsie	i
 800bca4:	60fb      	str	r3, [r7, #12]
}
 800bca6:	bf00      	nop
 800bca8:	e7fe      	b.n	800bca8 <prvDeleteTCB+0x58>
	}
 800bcaa:	bf00      	nop
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
	...

0800bcb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcba:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <prvResetNextTaskUnblockTime+0x38>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d104      	bne.n	800bcce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <prvResetNextTaskUnblockTime+0x3c>)
 800bcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bccc:	e008      	b.n	800bce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcce:	4b07      	ldr	r3, [pc, #28]	; (800bcec <prvResetNextTaskUnblockTime+0x38>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	4a04      	ldr	r2, [pc, #16]	; (800bcf0 <prvResetNextTaskUnblockTime+0x3c>)
 800bcde:	6013      	str	r3, [r2, #0]
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	20000de0 	.word	0x20000de0
 800bcf0:	20000e48 	.word	0x20000e48

0800bcf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bcfa:	4b0b      	ldr	r3, [pc, #44]	; (800bd28 <xTaskGetSchedulerState+0x34>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d102      	bne.n	800bd08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd02:	2301      	movs	r3, #1
 800bd04:	607b      	str	r3, [r7, #4]
 800bd06:	e008      	b.n	800bd1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd08:	4b08      	ldr	r3, [pc, #32]	; (800bd2c <xTaskGetSchedulerState+0x38>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d102      	bne.n	800bd16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd10:	2302      	movs	r3, #2
 800bd12:	607b      	str	r3, [r7, #4]
 800bd14:	e001      	b.n	800bd1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd16:	2300      	movs	r3, #0
 800bd18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd1a:	687b      	ldr	r3, [r7, #4]
	}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	20000e34 	.word	0x20000e34
 800bd2c:	20000e50 	.word	0x20000e50

0800bd30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d069      	beq.n	800be1a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4a:	4b36      	ldr	r3, [pc, #216]	; (800be24 <xTaskPriorityInherit+0xf4>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d259      	bcs.n	800be08 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	db06      	blt.n	800bd6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd5c:	4b31      	ldr	r3, [pc, #196]	; (800be24 <xTaskPriorityInherit+0xf4>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd62:	f1c3 0207 	rsb	r2, r3, #7
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	6959      	ldr	r1, [r3, #20]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4a2b      	ldr	r2, [pc, #172]	; (800be28 <xTaskPriorityInherit+0xf8>)
 800bd7c:	4413      	add	r3, r2
 800bd7e:	4299      	cmp	r1, r3
 800bd80:	d13a      	bne.n	800bdf8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	3304      	adds	r3, #4
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe f9ab 	bl	800a0e2 <uxListRemove>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d115      	bne.n	800bdbe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd96:	4924      	ldr	r1, [pc, #144]	; (800be28 <xTaskPriorityInherit+0xf8>)
 800bd98:	4613      	mov	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	440b      	add	r3, r1
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <xTaskPriorityInherit+0x8e>
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdac:	2201      	movs	r2, #1
 800bdae:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb2:	43da      	mvns	r2, r3
 800bdb4:	4b1d      	ldr	r3, [pc, #116]	; (800be2c <xTaskPriorityInherit+0xfc>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4013      	ands	r3, r2
 800bdba:	4a1c      	ldr	r2, [pc, #112]	; (800be2c <xTaskPriorityInherit+0xfc>)
 800bdbc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdbe:	4b19      	ldr	r3, [pc, #100]	; (800be24 <xTaskPriorityInherit+0xf4>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdcc:	2201      	movs	r2, #1
 800bdce:	409a      	lsls	r2, r3
 800bdd0:	4b16      	ldr	r3, [pc, #88]	; (800be2c <xTaskPriorityInherit+0xfc>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	4a15      	ldr	r2, [pc, #84]	; (800be2c <xTaskPriorityInherit+0xfc>)
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdde:	4613      	mov	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4a10      	ldr	r2, [pc, #64]	; (800be28 <xTaskPriorityInherit+0xf8>)
 800bde8:	441a      	add	r2, r3
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	3304      	adds	r3, #4
 800bdee:	4619      	mov	r1, r3
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	f7fe f919 	bl	800a028 <vListInsertEnd>
 800bdf6:	e004      	b.n	800be02 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <xTaskPriorityInherit+0xf4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be02:	2301      	movs	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	e008      	b.n	800be1a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <xTaskPriorityInherit+0xf4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be12:	429a      	cmp	r2, r3
 800be14:	d201      	bcs.n	800be1a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be16:	2301      	movs	r3, #1
 800be18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be1a:	68fb      	ldr	r3, [r7, #12]
	}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	20000d28 	.word	0x20000d28
 800be28:	20000d2c 	.word	0x20000d2c
 800be2c:	20000e30 	.word	0x20000e30

0800be30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be3c:	2300      	movs	r3, #0
 800be3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d072      	beq.n	800bf2c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be46:	4b3c      	ldr	r3, [pc, #240]	; (800bf38 <xTaskPriorityDisinherit+0x108>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	693a      	ldr	r2, [r7, #16]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d00c      	beq.n	800be6a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	b672      	cpsid	i
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	b662      	cpsie	i
 800be64:	60fb      	str	r3, [r7, #12]
}
 800be66:	bf00      	nop
 800be68:	e7fe      	b.n	800be68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10c      	bne.n	800be8c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	b672      	cpsid	i
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	b662      	cpsie	i
 800be86:	60bb      	str	r3, [r7, #8]
}
 800be88:	bf00      	nop
 800be8a:	e7fe      	b.n	800be8a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be90:	1e5a      	subs	r2, r3, #1
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d044      	beq.n	800bf2c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d140      	bne.n	800bf2c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	3304      	adds	r3, #4
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe f917 	bl	800a0e2 <uxListRemove>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d115      	bne.n	800bee6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bebe:	491f      	ldr	r1, [pc, #124]	; (800bf3c <xTaskPriorityDisinherit+0x10c>)
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	440b      	add	r3, r1
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10a      	bne.n	800bee6 <xTaskPriorityDisinherit+0xb6>
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed4:	2201      	movs	r2, #1
 800bed6:	fa02 f303 	lsl.w	r3, r2, r3
 800beda:	43da      	mvns	r2, r3
 800bedc:	4b18      	ldr	r3, [pc, #96]	; (800bf40 <xTaskPriorityDisinherit+0x110>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4013      	ands	r3, r2
 800bee2:	4a17      	ldr	r2, [pc, #92]	; (800bf40 <xTaskPriorityDisinherit+0x110>)
 800bee4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef2:	f1c3 0207 	rsb	r2, r3, #7
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befe:	2201      	movs	r2, #1
 800bf00:	409a      	lsls	r2, r3
 800bf02:	4b0f      	ldr	r3, [pc, #60]	; (800bf40 <xTaskPriorityDisinherit+0x110>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	4a0d      	ldr	r2, [pc, #52]	; (800bf40 <xTaskPriorityDisinherit+0x110>)
 800bf0a:	6013      	str	r3, [r2, #0]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf10:	4613      	mov	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4a08      	ldr	r2, [pc, #32]	; (800bf3c <xTaskPriorityDisinherit+0x10c>)
 800bf1a:	441a      	add	r2, r3
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	3304      	adds	r3, #4
 800bf20:	4619      	mov	r1, r3
 800bf22:	4610      	mov	r0, r2
 800bf24:	f7fe f880 	bl	800a028 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf2c:	697b      	ldr	r3, [r7, #20]
	}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20000d28 	.word	0x20000d28
 800bf3c:	20000d2c 	.word	0x20000d2c
 800bf40:	20000e30 	.word	0x20000e30

0800bf44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf52:	2301      	movs	r3, #1
 800bf54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 8087 	beq.w	800c06c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf5e:	69bb      	ldr	r3, [r7, #24]
 800bf60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10c      	bne.n	800bf80 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6a:	b672      	cpsid	i
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	b662      	cpsie	i
 800bf7a:	60fb      	str	r3, [r7, #12]
}
 800bf7c:	bf00      	nop
 800bf7e:	e7fe      	b.n	800bf7e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d902      	bls.n	800bf90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	61fb      	str	r3, [r7, #28]
 800bf8e:	e002      	b.n	800bf96 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9a:	69fa      	ldr	r2, [r7, #28]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d065      	beq.n	800c06c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d160      	bne.n	800c06c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bfaa:	4b32      	ldr	r3, [pc, #200]	; (800c074 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	69ba      	ldr	r2, [r7, #24]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d10c      	bne.n	800bfce <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	b672      	cpsid	i
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	b662      	cpsie	i
 800bfc8:	60bb      	str	r3, [r7, #8]
}
 800bfca:	bf00      	nop
 800bfcc:	e7fe      	b.n	800bfcc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	69fa      	ldr	r2, [r7, #28]
 800bfd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	db04      	blt.n	800bfec <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	f1c3 0207 	rsb	r2, r3, #7
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	6959      	ldr	r1, [r3, #20]
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4a1f      	ldr	r2, [pc, #124]	; (800c078 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bffc:	4413      	add	r3, r2
 800bffe:	4299      	cmp	r1, r3
 800c000:	d134      	bne.n	800c06c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	3304      	adds	r3, #4
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe f86b 	bl	800a0e2 <uxListRemove>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d115      	bne.n	800c03e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c016:	4918      	ldr	r1, [pc, #96]	; (800c078 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c018:	4613      	mov	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	440b      	add	r3, r1
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10a      	bne.n	800c03e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02c:	2201      	movs	r2, #1
 800c02e:	fa02 f303 	lsl.w	r3, r2, r3
 800c032:	43da      	mvns	r2, r3
 800c034:	4b11      	ldr	r3, [pc, #68]	; (800c07c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4013      	ands	r3, r2
 800c03a:	4a10      	ldr	r2, [pc, #64]	; (800c07c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c03c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c042:	2201      	movs	r2, #1
 800c044:	409a      	lsls	r2, r3
 800c046:	4b0d      	ldr	r3, [pc, #52]	; (800c07c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	4a0b      	ldr	r2, [pc, #44]	; (800c07c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c054:	4613      	mov	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4a06      	ldr	r2, [pc, #24]	; (800c078 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c05e:	441a      	add	r2, r3
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	3304      	adds	r3, #4
 800c064:	4619      	mov	r1, r3
 800c066:	4610      	mov	r0, r2
 800c068:	f7fd ffde 	bl	800a028 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c06c:	bf00      	nop
 800c06e:	3720      	adds	r7, #32
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	20000d28 	.word	0x20000d28
 800c078:	20000d2c 	.word	0x20000d2c
 800c07c:	20000e30 	.word	0x20000e30

0800c080 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c080:	b480      	push	{r7}
 800c082:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d004      	beq.n	800c096 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c08c:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c092:	3201      	adds	r2, #1
 800c094:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c096:	4b03      	ldr	r3, [pc, #12]	; (800c0a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c098:	681b      	ldr	r3, [r3, #0]
	}
 800c09a:	4618      	mov	r0, r3
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	20000d28 	.word	0x20000d28

0800c0a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0b2:	4b29      	ldr	r3, [pc, #164]	; (800c158 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0b8:	4b28      	ldr	r3, [pc, #160]	; (800c15c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe f80f 	bl	800a0e2 <uxListRemove>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10b      	bne.n	800c0e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c0ca:	4b24      	ldr	r3, [pc, #144]	; (800c15c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d6:	43da      	mvns	r2, r3
 800c0d8:	4b21      	ldr	r3, [pc, #132]	; (800c160 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4013      	ands	r3, r2
 800c0de:	4a20      	ldr	r2, [pc, #128]	; (800c160 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e8:	d10a      	bne.n	800c100 <prvAddCurrentTaskToDelayedList+0x58>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d007      	beq.n	800c100 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0f0:	4b1a      	ldr	r3, [pc, #104]	; (800c15c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	481a      	ldr	r0, [pc, #104]	; (800c164 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c0fa:	f7fd ff95 	bl	800a028 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0fe:	e026      	b.n	800c14e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4413      	add	r3, r2
 800c106:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c108:	4b14      	ldr	r3, [pc, #80]	; (800c15c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	429a      	cmp	r2, r3
 800c116:	d209      	bcs.n	800c12c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c118:	4b13      	ldr	r3, [pc, #76]	; (800c168 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	4b0f      	ldr	r3, [pc, #60]	; (800c15c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3304      	adds	r3, #4
 800c122:	4619      	mov	r1, r3
 800c124:	4610      	mov	r0, r2
 800c126:	f7fd ffa3 	bl	800a070 <vListInsert>
}
 800c12a:	e010      	b.n	800c14e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c12c:	4b0f      	ldr	r3, [pc, #60]	; (800c16c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3304      	adds	r3, #4
 800c136:	4619      	mov	r1, r3
 800c138:	4610      	mov	r0, r2
 800c13a:	f7fd ff99 	bl	800a070 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	429a      	cmp	r2, r3
 800c146:	d202      	bcs.n	800c14e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c148:	4a09      	ldr	r2, [pc, #36]	; (800c170 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	6013      	str	r3, [r2, #0]
}
 800c14e:	bf00      	nop
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20000e2c 	.word	0x20000e2c
 800c15c:	20000d28 	.word	0x20000d28
 800c160:	20000e30 	.word	0x20000e30
 800c164:	20000e14 	.word	0x20000e14
 800c168:	20000de4 	.word	0x20000de4
 800c16c:	20000de0 	.word	0x20000de0
 800c170:	20000e48 	.word	0x20000e48

0800c174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3b04      	subs	r3, #4
 800c184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c18c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3b04      	subs	r3, #4
 800c192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	f023 0201 	bic.w	r2, r3, #1
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3b04      	subs	r3, #4
 800c1a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1a4:	4a0c      	ldr	r2, [pc, #48]	; (800c1d8 <pxPortInitialiseStack+0x64>)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3b14      	subs	r3, #20
 800c1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3b04      	subs	r3, #4
 800c1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f06f 0202 	mvn.w	r2, #2
 800c1c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	3b20      	subs	r3, #32
 800c1c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	0800c1dd 	.word	0x0800c1dd

0800c1dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1e6:	4b14      	ldr	r3, [pc, #80]	; (800c238 <prvTaskExitError+0x5c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ee:	d00c      	beq.n	800c20a <prvTaskExitError+0x2e>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	b672      	cpsid	i
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	b662      	cpsie	i
 800c204:	60fb      	str	r3, [r7, #12]
}
 800c206:	bf00      	nop
 800c208:	e7fe      	b.n	800c208 <prvTaskExitError+0x2c>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	b672      	cpsid	i
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	b662      	cpsie	i
 800c21e:	60bb      	str	r3, [r7, #8]
}
 800c220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c222:	bf00      	nop
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d0fc      	beq.n	800c224 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c22a:	bf00      	nop
 800c22c:	bf00      	nop
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	20000028 	.word	0x20000028
 800c23c:	00000000 	.word	0x00000000

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	20000d28 	.word	0x20000d28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c296:	4b37      	ldr	r3, [pc, #220]	; (800c374 <xPortStartScheduler+0xe4>)
 800c298:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	22ff      	movs	r2, #255	; 0xff
 800c2a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2b0:	78fb      	ldrb	r3, [r7, #3]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	4b2f      	ldr	r3, [pc, #188]	; (800c378 <xPortStartScheduler+0xe8>)
 800c2bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2be:	4b2f      	ldr	r3, [pc, #188]	; (800c37c <xPortStartScheduler+0xec>)
 800c2c0:	2207      	movs	r2, #7
 800c2c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2c4:	e009      	b.n	800c2da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c2c6:	4b2d      	ldr	r3, [pc, #180]	; (800c37c <xPortStartScheduler+0xec>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	4a2b      	ldr	r2, [pc, #172]	; (800c37c <xPortStartScheduler+0xec>)
 800c2ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2da:	78fb      	ldrb	r3, [r7, #3]
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2e2:	2b80      	cmp	r3, #128	; 0x80
 800c2e4:	d0ef      	beq.n	800c2c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2e6:	4b25      	ldr	r3, [pc, #148]	; (800c37c <xPortStartScheduler+0xec>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f1c3 0307 	rsb	r3, r3, #7
 800c2ee:	2b04      	cmp	r3, #4
 800c2f0:	d00c      	beq.n	800c30c <xPortStartScheduler+0x7c>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	b672      	cpsid	i
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	b662      	cpsie	i
 800c306:	60bb      	str	r3, [r7, #8]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c30c:	4b1b      	ldr	r3, [pc, #108]	; (800c37c <xPortStartScheduler+0xec>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	021b      	lsls	r3, r3, #8
 800c312:	4a1a      	ldr	r2, [pc, #104]	; (800c37c <xPortStartScheduler+0xec>)
 800c314:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c316:	4b19      	ldr	r3, [pc, #100]	; (800c37c <xPortStartScheduler+0xec>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c31e:	4a17      	ldr	r2, [pc, #92]	; (800c37c <xPortStartScheduler+0xec>)
 800c320:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	b2da      	uxtb	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c32a:	4b15      	ldr	r3, [pc, #84]	; (800c380 <xPortStartScheduler+0xf0>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a14      	ldr	r2, [pc, #80]	; (800c380 <xPortStartScheduler+0xf0>)
 800c330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c334:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c336:	4b12      	ldr	r3, [pc, #72]	; (800c380 <xPortStartScheduler+0xf0>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a11      	ldr	r2, [pc, #68]	; (800c380 <xPortStartScheduler+0xf0>)
 800c33c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c340:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c342:	f000 f8dd 	bl	800c500 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c346:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <xPortStartScheduler+0xf4>)
 800c348:	2200      	movs	r2, #0
 800c34a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c34c:	f000 f8fc 	bl	800c548 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c350:	4b0d      	ldr	r3, [pc, #52]	; (800c388 <xPortStartScheduler+0xf8>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a0c      	ldr	r2, [pc, #48]	; (800c388 <xPortStartScheduler+0xf8>)
 800c356:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c35a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c35c:	f7ff ff84 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c360:	f7ff fa80 	bl	800b864 <vTaskSwitchContext>
	prvTaskExitError();
 800c364:	f7ff ff3a 	bl	800c1dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	e000e400 	.word	0xe000e400
 800c378:	20000e54 	.word	0x20000e54
 800c37c:	20000e58 	.word	0x20000e58
 800c380:	e000ed20 	.word	0xe000ed20
 800c384:	20000028 	.word	0x20000028
 800c388:	e000ef34 	.word	0xe000ef34

0800c38c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	b672      	cpsid	i
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	b662      	cpsie	i
 800c3a6:	607b      	str	r3, [r7, #4]
}
 800c3a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3aa:	4b10      	ldr	r3, [pc, #64]	; (800c3ec <vPortEnterCritical+0x60>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	4a0e      	ldr	r2, [pc, #56]	; (800c3ec <vPortEnterCritical+0x60>)
 800c3b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3b4:	4b0d      	ldr	r3, [pc, #52]	; (800c3ec <vPortEnterCritical+0x60>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d111      	bne.n	800c3e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3bc:	4b0c      	ldr	r3, [pc, #48]	; (800c3f0 <vPortEnterCritical+0x64>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00c      	beq.n	800c3e0 <vPortEnterCritical+0x54>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	b672      	cpsid	i
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	b662      	cpsie	i
 800c3da:	603b      	str	r3, [r7, #0]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <vPortEnterCritical+0x52>
	}
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	20000028 	.word	0x20000028
 800c3f0:	e000ed04 	.word	0xe000ed04

0800c3f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c3fa:	4b13      	ldr	r3, [pc, #76]	; (800c448 <vPortExitCritical+0x54>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10c      	bne.n	800c41c <vPortExitCritical+0x28>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c406:	b672      	cpsid	i
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	b662      	cpsie	i
 800c416:	607b      	str	r3, [r7, #4]
}
 800c418:	bf00      	nop
 800c41a:	e7fe      	b.n	800c41a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c41c:	4b0a      	ldr	r3, [pc, #40]	; (800c448 <vPortExitCritical+0x54>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3b01      	subs	r3, #1
 800c422:	4a09      	ldr	r2, [pc, #36]	; (800c448 <vPortExitCritical+0x54>)
 800c424:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c426:	4b08      	ldr	r3, [pc, #32]	; (800c448 <vPortExitCritical+0x54>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d105      	bne.n	800c43a <vPortExitCritical+0x46>
 800c42e:	2300      	movs	r3, #0
 800c430:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	f383 8811 	msr	BASEPRI, r3
}
 800c438:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c43a:	bf00      	nop
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	20000028 	.word	0x20000028
 800c44c:	00000000 	.word	0x00000000

0800c450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c450:	f3ef 8009 	mrs	r0, PSP
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	4b15      	ldr	r3, [pc, #84]	; (800c4b0 <pxCurrentTCBConst>)
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	f01e 0f10 	tst.w	lr, #16
 800c460:	bf08      	it	eq
 800c462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46a:	6010      	str	r0, [r2, #0]
 800c46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c474:	b672      	cpsid	i
 800c476:	f380 8811 	msr	BASEPRI, r0
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	b662      	cpsie	i
 800c484:	f7ff f9ee 	bl	800b864 <vTaskSwitchContext>
 800c488:	f04f 0000 	mov.w	r0, #0
 800c48c:	f380 8811 	msr	BASEPRI, r0
 800c490:	bc09      	pop	{r0, r3}
 800c492:	6819      	ldr	r1, [r3, #0]
 800c494:	6808      	ldr	r0, [r1, #0]
 800c496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	f01e 0f10 	tst.w	lr, #16
 800c49e:	bf08      	it	eq
 800c4a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4a4:	f380 8809 	msr	PSP, r0
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop

0800c4b0 <pxCurrentTCBConst>:
 800c4b0:	20000d28 	.word	0x20000d28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop

0800c4b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	b672      	cpsid	i
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	b662      	cpsie	i
 800c4d2:	607b      	str	r3, [r7, #4]
}
 800c4d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4d6:	f7ff f90b 	bl	800b6f0 <xTaskIncrementTick>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d003      	beq.n	800c4e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4e0:	4b06      	ldr	r3, [pc, #24]	; (800c4fc <SysTick_Handler+0x44>)
 800c4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	f383 8811 	msr	BASEPRI, r3
}
 800c4f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4f4:	bf00      	nop
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	e000ed04 	.word	0xe000ed04

0800c500 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c500:	b480      	push	{r7}
 800c502:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c504:	4b0b      	ldr	r3, [pc, #44]	; (800c534 <vPortSetupTimerInterrupt+0x34>)
 800c506:	2200      	movs	r2, #0
 800c508:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c50a:	4b0b      	ldr	r3, [pc, #44]	; (800c538 <vPortSetupTimerInterrupt+0x38>)
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c510:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <vPortSetupTimerInterrupt+0x3c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a0a      	ldr	r2, [pc, #40]	; (800c540 <vPortSetupTimerInterrupt+0x40>)
 800c516:	fba2 2303 	umull	r2, r3, r2, r3
 800c51a:	099b      	lsrs	r3, r3, #6
 800c51c:	4a09      	ldr	r2, [pc, #36]	; (800c544 <vPortSetupTimerInterrupt+0x44>)
 800c51e:	3b01      	subs	r3, #1
 800c520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c522:	4b04      	ldr	r3, [pc, #16]	; (800c534 <vPortSetupTimerInterrupt+0x34>)
 800c524:	2207      	movs	r2, #7
 800c526:	601a      	str	r2, [r3, #0]
}
 800c528:	bf00      	nop
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	e000e010 	.word	0xe000e010
 800c538:	e000e018 	.word	0xe000e018
 800c53c:	2000001c 	.word	0x2000001c
 800c540:	10624dd3 	.word	0x10624dd3
 800c544:	e000e014 	.word	0xe000e014

0800c548 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c548:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c558 <vPortEnableVFP+0x10>
 800c54c:	6801      	ldr	r1, [r0, #0]
 800c54e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c552:	6001      	str	r1, [r0, #0]
 800c554:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c556:	bf00      	nop
 800c558:	e000ed88 	.word	0xe000ed88

0800c55c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c562:	f3ef 8305 	mrs	r3, IPSR
 800c566:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2b0f      	cmp	r3, #15
 800c56c:	d916      	bls.n	800c59c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c56e:	4a19      	ldr	r2, [pc, #100]	; (800c5d4 <vPortValidateInterruptPriority+0x78>)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	4413      	add	r3, r2
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c578:	4b17      	ldr	r3, [pc, #92]	; (800c5d8 <vPortValidateInterruptPriority+0x7c>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	7afa      	ldrb	r2, [r7, #11]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d20c      	bcs.n	800c59c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	b672      	cpsid	i
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	b662      	cpsie	i
 800c596:	607b      	str	r3, [r7, #4]
}
 800c598:	bf00      	nop
 800c59a:	e7fe      	b.n	800c59a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c59c:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <vPortValidateInterruptPriority+0x80>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5a4:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <vPortValidateInterruptPriority+0x84>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d90c      	bls.n	800c5c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	b672      	cpsid	i
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	b662      	cpsie	i
 800c5c0:	603b      	str	r3, [r7, #0]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <vPortValidateInterruptPriority+0x68>
	}
 800c5c6:	bf00      	nop
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	e000e3f0 	.word	0xe000e3f0
 800c5d8:	20000e54 	.word	0x20000e54
 800c5dc:	e000ed0c 	.word	0xe000ed0c
 800c5e0:	20000e58 	.word	0x20000e58

0800c5e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08a      	sub	sp, #40	; 0x28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5f0:	f7fe ffb0 	bl	800b554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5f4:	4b5b      	ldr	r3, [pc, #364]	; (800c764 <pvPortMalloc+0x180>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c5fc:	f000 f91a 	bl	800c834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c600:	4b59      	ldr	r3, [pc, #356]	; (800c768 <pvPortMalloc+0x184>)
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4013      	ands	r3, r2
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f040 8092 	bne.w	800c732 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01f      	beq.n	800c654 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c614:	2208      	movs	r2, #8
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4413      	add	r3, r2
 800c61a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f003 0307 	and.w	r3, r3, #7
 800c622:	2b00      	cmp	r3, #0
 800c624:	d016      	beq.n	800c654 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f023 0307 	bic.w	r3, r3, #7
 800c62c:	3308      	adds	r3, #8
 800c62e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f003 0307 	and.w	r3, r3, #7
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00c      	beq.n	800c654 <pvPortMalloc+0x70>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	b672      	cpsid	i
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	b662      	cpsie	i
 800c64e:	617b      	str	r3, [r7, #20]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d06b      	beq.n	800c732 <pvPortMalloc+0x14e>
 800c65a:	4b44      	ldr	r3, [pc, #272]	; (800c76c <pvPortMalloc+0x188>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	429a      	cmp	r2, r3
 800c662:	d866      	bhi.n	800c732 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c664:	4b42      	ldr	r3, [pc, #264]	; (800c770 <pvPortMalloc+0x18c>)
 800c666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c668:	4b41      	ldr	r3, [pc, #260]	; (800c770 <pvPortMalloc+0x18c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c66e:	e004      	b.n	800c67a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	429a      	cmp	r2, r3
 800c682:	d903      	bls.n	800c68c <pvPortMalloc+0xa8>
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1f1      	bne.n	800c670 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c68c:	4b35      	ldr	r3, [pc, #212]	; (800c764 <pvPortMalloc+0x180>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c692:	429a      	cmp	r2, r3
 800c694:	d04d      	beq.n	800c732 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2208      	movs	r2, #8
 800c69c:	4413      	add	r3, r2
 800c69e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	2308      	movs	r3, #8
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d921      	bls.n	800c6fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4413      	add	r3, r2
 800c6be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00c      	beq.n	800c6e4 <pvPortMalloc+0x100>
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ce:	b672      	cpsid	i
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	b662      	cpsie	i
 800c6de:	613b      	str	r3, [r7, #16]
}
 800c6e0:	bf00      	nop
 800c6e2:	e7fe      	b.n	800c6e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	1ad2      	subs	r2, r2, r3
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6f6:	69b8      	ldr	r0, [r7, #24]
 800c6f8:	f000 f8fe 	bl	800c8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6fc:	4b1b      	ldr	r3, [pc, #108]	; (800c76c <pvPortMalloc+0x188>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	4a19      	ldr	r2, [pc, #100]	; (800c76c <pvPortMalloc+0x188>)
 800c708:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c70a:	4b18      	ldr	r3, [pc, #96]	; (800c76c <pvPortMalloc+0x188>)
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	4b19      	ldr	r3, [pc, #100]	; (800c774 <pvPortMalloc+0x190>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	429a      	cmp	r2, r3
 800c714:	d203      	bcs.n	800c71e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c716:	4b15      	ldr	r3, [pc, #84]	; (800c76c <pvPortMalloc+0x188>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a16      	ldr	r2, [pc, #88]	; (800c774 <pvPortMalloc+0x190>)
 800c71c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	4b11      	ldr	r3, [pc, #68]	; (800c768 <pvPortMalloc+0x184>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	431a      	orrs	r2, r3
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	2200      	movs	r2, #0
 800c730:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c732:	f7fe ff1d 	bl	800b570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	f003 0307 	and.w	r3, r3, #7
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00c      	beq.n	800c75a <pvPortMalloc+0x176>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	b672      	cpsid	i
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	b662      	cpsie	i
 800c754:	60fb      	str	r3, [r7, #12]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <pvPortMalloc+0x174>
	return pvReturn;
 800c75a:	69fb      	ldr	r3, [r7, #28]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3728      	adds	r7, #40	; 0x28
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20004a64 	.word	0x20004a64
 800c768:	20004a70 	.word	0x20004a70
 800c76c:	20004a68 	.word	0x20004a68
 800c770:	20004a5c 	.word	0x20004a5c
 800c774:	20004a6c 	.word	0x20004a6c

0800c778 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d04c      	beq.n	800c824 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c78a:	2308      	movs	r3, #8
 800c78c:	425b      	negs	r3, r3
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	4413      	add	r3, r2
 800c792:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	4b23      	ldr	r3, [pc, #140]	; (800c82c <vPortFree+0xb4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10c      	bne.n	800c7c0 <vPortFree+0x48>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	b672      	cpsid	i
 800c7ac:	f383 8811 	msr	BASEPRI, r3
 800c7b0:	f3bf 8f6f 	isb	sy
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	b662      	cpsie	i
 800c7ba:	60fb      	str	r3, [r7, #12]
}
 800c7bc:	bf00      	nop
 800c7be:	e7fe      	b.n	800c7be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00c      	beq.n	800c7e2 <vPortFree+0x6a>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	b672      	cpsid	i
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	b662      	cpsie	i
 800c7dc:	60bb      	str	r3, [r7, #8]
}
 800c7de:	bf00      	nop
 800c7e0:	e7fe      	b.n	800c7e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	4b11      	ldr	r3, [pc, #68]	; (800c82c <vPortFree+0xb4>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d019      	beq.n	800c824 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d115      	bne.n	800c824 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	685a      	ldr	r2, [r3, #4]
 800c7fc:	4b0b      	ldr	r3, [pc, #44]	; (800c82c <vPortFree+0xb4>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	43db      	mvns	r3, r3
 800c802:	401a      	ands	r2, r3
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c808:	f7fe fea4 	bl	800b554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <vPortFree+0xb8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4413      	add	r3, r2
 800c816:	4a06      	ldr	r2, [pc, #24]	; (800c830 <vPortFree+0xb8>)
 800c818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c81a:	6938      	ldr	r0, [r7, #16]
 800c81c:	f000 f86c 	bl	800c8f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c820:	f7fe fea6 	bl	800b570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c824:	bf00      	nop
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20004a70 	.word	0x20004a70
 800c830:	20004a68 	.word	0x20004a68

0800c834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c83a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c840:	4b27      	ldr	r3, [pc, #156]	; (800c8e0 <prvHeapInit+0xac>)
 800c842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00c      	beq.n	800c868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	3307      	adds	r3, #7
 800c852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f023 0307 	bic.w	r3, r3, #7
 800c85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	4a1f      	ldr	r2, [pc, #124]	; (800c8e0 <prvHeapInit+0xac>)
 800c864:	4413      	add	r3, r2
 800c866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c86c:	4a1d      	ldr	r2, [pc, #116]	; (800c8e4 <prvHeapInit+0xb0>)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c872:	4b1c      	ldr	r3, [pc, #112]	; (800c8e4 <prvHeapInit+0xb0>)
 800c874:	2200      	movs	r2, #0
 800c876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	4413      	add	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c880:	2208      	movs	r2, #8
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f023 0307 	bic.w	r3, r3, #7
 800c88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	4a15      	ldr	r2, [pc, #84]	; (800c8e8 <prvHeapInit+0xb4>)
 800c894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c896:	4b14      	ldr	r3, [pc, #80]	; (800c8e8 <prvHeapInit+0xb4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2200      	movs	r2, #0
 800c89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c89e:	4b12      	ldr	r3, [pc, #72]	; (800c8e8 <prvHeapInit+0xb4>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8b4:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <prvHeapInit+0xb4>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	4a0a      	ldr	r2, [pc, #40]	; (800c8ec <prvHeapInit+0xb8>)
 800c8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	4a09      	ldr	r2, [pc, #36]	; (800c8f0 <prvHeapInit+0xbc>)
 800c8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8cc:	4b09      	ldr	r3, [pc, #36]	; (800c8f4 <prvHeapInit+0xc0>)
 800c8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8d2:	601a      	str	r2, [r3, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	20000e5c 	.word	0x20000e5c
 800c8e4:	20004a5c 	.word	0x20004a5c
 800c8e8:	20004a64 	.word	0x20004a64
 800c8ec:	20004a6c 	.word	0x20004a6c
 800c8f0:	20004a68 	.word	0x20004a68
 800c8f4:	20004a70 	.word	0x20004a70

0800c8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c900:	4b28      	ldr	r3, [pc, #160]	; (800c9a4 <prvInsertBlockIntoFreeList+0xac>)
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e002      	b.n	800c90c <prvInsertBlockIntoFreeList+0x14>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	429a      	cmp	r2, r3
 800c914:	d8f7      	bhi.n	800c906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	4413      	add	r3, r2
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d108      	bne.n	800c93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	441a      	add	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	441a      	add	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d118      	bne.n	800c980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	4b15      	ldr	r3, [pc, #84]	; (800c9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	429a      	cmp	r2, r3
 800c958:	d00d      	beq.n	800c976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	441a      	add	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	e008      	b.n	800c988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c976:	4b0c      	ldr	r3, [pc, #48]	; (800c9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	e003      	b.n	800c988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d002      	beq.n	800c996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c996:	bf00      	nop
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	20004a5c 	.word	0x20004a5c
 800c9a8:	20004a64 	.word	0x20004a64

0800c9ac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	330c      	adds	r3, #12
 800c9bc:	461a      	mov	r2, r3
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 ffa3 	bl	800e90c <tcpip_send_msg_wait_sem>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d103      	bne.n	800c9da <netconn_apimsg+0x2e>
    return apimsg->err;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c9d8:	e001      	b.n	800c9de <netconn_apimsg+0x32>
  }
  return err;
 800c9da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
	...

0800c9e8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08c      	sub	sp, #48	; 0x30
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	603a      	str	r2, [r7, #0]
 800c9f2:	71fb      	strb	r3, [r7, #7]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c9f8:	79fb      	ldrb	r3, [r7, #7]
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 feff 	bl	800d800 <netconn_alloc>
 800ca02:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d054      	beq.n	800cab4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ca0a:	79bb      	ldrb	r3, [r7, #6]
 800ca0c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca10:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ca12:	f107 0308 	add.w	r3, r7, #8
 800ca16:	4619      	mov	r1, r3
 800ca18:	4829      	ldr	r0, [pc, #164]	; (800cac0 <netconn_new_with_proto_and_callback+0xd8>)
 800ca1a:	f7ff ffc7 	bl	800c9ac <netconn_apimsg>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ca24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d043      	beq.n	800cab4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d005      	beq.n	800ca40 <netconn_new_with_proto_and_callback+0x58>
 800ca34:	4b23      	ldr	r3, [pc, #140]	; (800cac4 <netconn_new_with_proto_and_callback+0xdc>)
 800ca36:	22a3      	movs	r2, #163	; 0xa3
 800ca38:	4923      	ldr	r1, [pc, #140]	; (800cac8 <netconn_new_with_proto_and_callback+0xe0>)
 800ca3a:	4824      	ldr	r0, [pc, #144]	; (800cacc <netconn_new_with_proto_and_callback+0xe4>)
 800ca3c:	f00e fe9c 	bl	801b778 <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ca40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca42:	3310      	adds	r3, #16
 800ca44:	4618      	mov	r0, r3
 800ca46:	f00e f984 	bl	801ad52 <sys_mbox_valid>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d105      	bne.n	800ca5c <netconn_new_with_proto_and_callback+0x74>
 800ca50:	4b1c      	ldr	r3, [pc, #112]	; (800cac4 <netconn_new_with_proto_and_callback+0xdc>)
 800ca52:	22a4      	movs	r2, #164	; 0xa4
 800ca54:	491e      	ldr	r1, [pc, #120]	; (800cad0 <netconn_new_with_proto_and_callback+0xe8>)
 800ca56:	481d      	ldr	r0, [pc, #116]	; (800cacc <netconn_new_with_proto_and_callback+0xe4>)
 800ca58:	f00e fe8e 	bl	801b778 <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	3314      	adds	r3, #20
 800ca60:	4618      	mov	r0, r3
 800ca62:	f00e f976 	bl	801ad52 <sys_mbox_valid>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d005      	beq.n	800ca78 <netconn_new_with_proto_and_callback+0x90>
 800ca6c:	4b15      	ldr	r3, [pc, #84]	; (800cac4 <netconn_new_with_proto_and_callback+0xdc>)
 800ca6e:	22a6      	movs	r2, #166	; 0xa6
 800ca70:	4918      	ldr	r1, [pc, #96]	; (800cad4 <netconn_new_with_proto_and_callback+0xec>)
 800ca72:	4816      	ldr	r0, [pc, #88]	; (800cacc <netconn_new_with_proto_and_callback+0xe4>)
 800ca74:	f00e fe80 	bl	801b778 <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	330c      	adds	r3, #12
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f00e f9f9 	bl	801ae74 <sys_sem_valid>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d105      	bne.n	800ca94 <netconn_new_with_proto_and_callback+0xac>
 800ca88:	4b0e      	ldr	r3, [pc, #56]	; (800cac4 <netconn_new_with_proto_and_callback+0xdc>)
 800ca8a:	22a9      	movs	r2, #169	; 0xa9
 800ca8c:	4912      	ldr	r1, [pc, #72]	; (800cad8 <netconn_new_with_proto_and_callback+0xf0>)
 800ca8e:	480f      	ldr	r0, [pc, #60]	; (800cacc <netconn_new_with_proto_and_callback+0xe4>)
 800ca90:	f00e fe72 	bl	801b778 <printf>
      sys_sem_free(&conn->op_completed);
 800ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca96:	330c      	adds	r3, #12
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f00e f9de 	bl	801ae5a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ca9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa0:	3310      	adds	r3, #16
 800caa2:	4618      	mov	r0, r3
 800caa4:	f00e f8ce 	bl	801ac44 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800caa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800caaa:	2007      	movs	r0, #7
 800caac:	f003 fcaa 	bl	8010404 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800cab0:	2300      	movs	r3, #0
 800cab2:	e000      	b.n	800cab6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3730      	adds	r7, #48	; 0x30
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	0800d7d5 	.word	0x0800d7d5
 800cac4:	08024718 	.word	0x08024718
 800cac8:	0802474c 	.word	0x0802474c
 800cacc:	08024770 	.word	0x08024770
 800cad0:	08024798 	.word	0x08024798
 800cad4:	080247b0 	.word	0x080247b0
 800cad8:	080247d4 	.word	0x080247d4

0800cadc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08c      	sub	sp, #48	; 0x30
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <netconn_prepare_delete+0x12>
    return ERR_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	e014      	b.n	800cb18 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800caf2:	2329      	movs	r3, #41	; 0x29
 800caf4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800caf6:	f107 030c 	add.w	r3, r7, #12
 800cafa:	4619      	mov	r1, r3
 800cafc:	4808      	ldr	r0, [pc, #32]	; (800cb20 <netconn_prepare_delete+0x44>)
 800cafe:	f7ff ff55 	bl	800c9ac <netconn_apimsg>
 800cb02:	4603      	mov	r3, r0
 800cb04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800cb08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d002      	beq.n	800cb16 <netconn_prepare_delete+0x3a>
    return err;
 800cb10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cb14:	e000      	b.n	800cb18 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3730      	adds	r7, #48	; 0x30
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	0800dd39 	.word	0x0800dd39

0800cb24 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <netconn_delete+0x12>
    return ERR_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	e00d      	b.n	800cb52 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff ffd0 	bl	800cadc <netconn_prepare_delete>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800cb40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <netconn_delete+0x2a>
    netconn_free(conn);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fec7 	bl	800d8dc <netconn_free>
  }
  return err;
 800cb4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08e      	sub	sp, #56	; 0x38
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	4613      	mov	r3, r2
 800cb68:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d109      	bne.n	800cb84 <netconn_bind+0x28>
 800cb70:	4b11      	ldr	r3, [pc, #68]	; (800cbb8 <netconn_bind+0x5c>)
 800cb72:	f44f 729c 	mov.w	r2, #312	; 0x138
 800cb76:	4911      	ldr	r1, [pc, #68]	; (800cbbc <netconn_bind+0x60>)
 800cb78:	4811      	ldr	r0, [pc, #68]	; (800cbc0 <netconn_bind+0x64>)
 800cb7a:	f00e fdfd 	bl	801b778 <printf>
 800cb7e:	f06f 030f 	mvn.w	r3, #15
 800cb82:	e015      	b.n	800cbb0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800cb8a:	4b0e      	ldr	r3, [pc, #56]	; (800cbc4 <netconn_bind+0x68>)
 800cb8c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800cb96:	88fb      	ldrh	r3, [r7, #6]
 800cb98:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800cb9a:	f107 0314 	add.w	r3, r7, #20
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4809      	ldr	r0, [pc, #36]	; (800cbc8 <netconn_bind+0x6c>)
 800cba2:	f7ff ff03 	bl	800c9ac <netconn_apimsg>
 800cba6:	4603      	mov	r3, r0
 800cba8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800cbac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3738      	adds	r7, #56	; 0x38
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	08024718 	.word	0x08024718
 800cbbc:	08024850 	.word	0x08024850
 800cbc0:	08024770 	.word	0x08024770
 800cbc4:	080296d4 	.word	0x080296d4
 800cbc8:	0800df01 	.word	0x0800df01

0800cbcc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b088      	sub	sp, #32
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d109      	bne.n	800cbf8 <netconn_recv_data+0x2c>
 800cbe4:	4b58      	ldr	r3, [pc, #352]	; (800cd48 <netconn_recv_data+0x17c>)
 800cbe6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800cbea:	4958      	ldr	r1, [pc, #352]	; (800cd4c <netconn_recv_data+0x180>)
 800cbec:	4858      	ldr	r0, [pc, #352]	; (800cd50 <netconn_recv_data+0x184>)
 800cbee:	f00e fdc3 	bl	801b778 <printf>
 800cbf2:	f06f 030f 	mvn.w	r3, #15
 800cbf6:	e0a2      	b.n	800cd3e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d109      	bne.n	800cc18 <netconn_recv_data+0x4c>
 800cc04:	4b50      	ldr	r3, [pc, #320]	; (800cd48 <netconn_recv_data+0x17c>)
 800cc06:	f240 224a 	movw	r2, #586	; 0x24a
 800cc0a:	4952      	ldr	r1, [pc, #328]	; (800cd54 <netconn_recv_data+0x188>)
 800cc0c:	4850      	ldr	r0, [pc, #320]	; (800cd50 <netconn_recv_data+0x184>)
 800cc0e:	f00e fdb3 	bl	801b778 <printf>
 800cc12:	f06f 030f 	mvn.w	r3, #15
 800cc16:	e092      	b.n	800cd3e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	3310      	adds	r3, #16
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f00e f898 	bl	801ad52 <sys_mbox_valid>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10e      	bne.n	800cc46 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f000 fa23 	bl	800d074 <netconn_err>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800cc32:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800cc3a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cc3e:	e07e      	b.n	800cd3e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800cc40:	f06f 030a 	mvn.w	r3, #10
 800cc44:	e07b      	b.n	800cd3e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	7f1b      	ldrb	r3, [r3, #28]
 800cc4a:	f003 0302 	and.w	r3, r3, #2
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10f      	bne.n	800cc72 <netconn_recv_data+0xa6>
 800cc52:	79fb      	ldrb	r3, [r7, #7]
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10a      	bne.n	800cc72 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	7f1b      	ldrb	r3, [r3, #28]
 800cc60:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d104      	bne.n	800cc72 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d023      	beq.n	800ccba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3310      	adds	r3, #16
 800cc76:	f107 0218 	add.w	r2, r7, #24
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f00e f84c 	bl	801ad1a <sys_arch_mbox_tryfetch>
 800cc82:	4603      	mov	r3, r0
 800cc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc88:	d11f      	bne.n	800ccca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f000 f9f2 	bl	800d074 <netconn_err>
 800cc90:	4603      	mov	r3, r0
 800cc92:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800cc94:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800cc9c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cca0:	e04d      	b.n	800cd3e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	7f1b      	ldrb	r3, [r3, #28]
 800cca6:	f003 0301 	and.w	r3, r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d002      	beq.n	800ccb4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ccae:	f06f 030a 	mvn.w	r3, #10
 800ccb2:	e044      	b.n	800cd3e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ccb4:	f06f 0306 	mvn.w	r3, #6
 800ccb8:	e041      	b.n	800cd3e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3310      	adds	r3, #16
 800ccbe:	f107 0118 	add.w	r1, r7, #24
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f00d ffe9 	bl	801ac9c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccd2:	2b10      	cmp	r3, #16
 800ccd4:	d117      	bne.n	800cd06 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	f107 0217 	add.w	r2, r7, #23
 800ccdc:	4611      	mov	r1, r2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 fa1a 	bl	800d118 <lwip_netconn_is_err_msg>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d009      	beq.n	800ccfe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ccea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccee:	f113 0f0f 	cmn.w	r3, #15
 800ccf2:	d101      	bne.n	800ccf8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e022      	b.n	800cd3e <netconn_recv_data+0x172>
      }
      return err;
 800ccf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccfc:	e01f      	b.n	800cd3e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	891b      	ldrh	r3, [r3, #8]
 800cd02:	83fb      	strh	r3, [r7, #30]
 800cd04:	e00d      	b.n	800cd22 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d106      	bne.n	800cd1a <netconn_recv_data+0x14e>
 800cd0c:	4b0e      	ldr	r3, [pc, #56]	; (800cd48 <netconn_recv_data+0x17c>)
 800cd0e:	f240 2291 	movw	r2, #657	; 0x291
 800cd12:	4911      	ldr	r1, [pc, #68]	; (800cd58 <netconn_recv_data+0x18c>)
 800cd14:	480e      	ldr	r0, [pc, #56]	; (800cd50 <netconn_recv_data+0x184>)
 800cd16:	f00e fd2f 	bl	801b778 <printf>
    len = netbuf_len((struct netbuf *)buf);
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	891b      	ldrh	r3, [r3, #8]
 800cd20:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d005      	beq.n	800cd36 <netconn_recv_data+0x16a>
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2e:	8bfa      	ldrh	r2, [r7, #30]
 800cd30:	2101      	movs	r1, #1
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800cd36:	69ba      	ldr	r2, [r7, #24]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3720      	adds	r7, #32
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	08024718 	.word	0x08024718
 800cd4c:	08024930 	.word	0x08024930
 800cd50:	08024770 	.word	0x08024770
 800cd54:	08024950 	.word	0x08024950
 800cd58:	0802496c 	.word	0x0802496c

0800cd5c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d005      	beq.n	800cd7a <netconn_tcp_recvd_msg+0x1e>
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd76:	2b10      	cmp	r3, #16
 800cd78:	d009      	beq.n	800cd8e <netconn_tcp_recvd_msg+0x32>
 800cd7a:	4b0c      	ldr	r3, [pc, #48]	; (800cdac <netconn_tcp_recvd_msg+0x50>)
 800cd7c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800cd80:	490b      	ldr	r1, [pc, #44]	; (800cdb0 <netconn_tcp_recvd_msg+0x54>)
 800cd82:	480c      	ldr	r0, [pc, #48]	; (800cdb4 <netconn_tcp_recvd_msg+0x58>)
 800cd84:	f00e fcf8 	bl	801b778 <printf>
 800cd88:	f06f 030f 	mvn.w	r3, #15
 800cd8c:	e00a      	b.n	800cda4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	4806      	ldr	r0, [pc, #24]	; (800cdb8 <netconn_tcp_recvd_msg+0x5c>)
 800cd9e:	f7ff fe05 	bl	800c9ac <netconn_apimsg>
 800cda2:	4603      	mov	r3, r0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	08024718 	.word	0x08024718
 800cdb0:	08024978 	.word	0x08024978
 800cdb4:	08024770 	.word	0x08024770
 800cdb8:	0800e00f 	.word	0x0800e00f

0800cdbc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b090      	sub	sp, #64	; 0x40
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3310      	adds	r3, #16
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f00d ffbf 	bl	801ad52 <sys_mbox_valid>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d102      	bne.n	800cde0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800cdda:	f06f 030a 	mvn.w	r3, #10
 800cdde:	e06d      	b.n	800cebc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	7f1b      	ldrb	r3, [r3, #28]
 800cde4:	b25b      	sxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	da07      	bge.n	800cdfa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	7f1b      	ldrb	r3, [r3, #28]
 800cdee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800cdf8:	e039      	b.n	800ce6e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800cdfa:	79fb      	ldrb	r3, [r7, #7]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	68b9      	ldr	r1, [r7, #8]
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f7ff fee3 	bl	800cbcc <netconn_recv_data>
 800ce06:	4603      	mov	r3, r0
 800ce08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ce0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d002      	beq.n	800ce1a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ce14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce18:	e050      	b.n	800cebc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ce20:	79fb      	ldrb	r3, [r7, #7]
 800ce22:	f003 0308 	and.w	r3, r3, #8
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d10e      	bne.n	800ce48 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <netconn_recv_data_tcp+0x7a>
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	891b      	ldrh	r3, [r3, #8]
 800ce34:	e000      	b.n	800ce38 <netconn_recv_data_tcp+0x7c>
 800ce36:	2301      	movs	r3, #1
 800ce38:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ce3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce3c:	f107 0214 	add.w	r2, r7, #20
 800ce40:	4619      	mov	r1, r3
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f7ff ff8a 	bl	800cd5c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d134      	bne.n	800ceb8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	f003 0310 	and.w	r3, r3, #16
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d009      	beq.n	800ce6c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	7f1b      	ldrb	r3, [r3, #28]
 800ce5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ce66:	f06f 0306 	mvn.w	r3, #6
 800ce6a:	e027      	b.n	800cebc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ce6c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d005      	beq.n	800ce82 <netconn_recv_data_tcp+0xc6>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	68f8      	ldr	r0, [r7, #12]
 800ce80:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10f      	bne.n	800ceaa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f000 f8f2 	bl	800d074 <netconn_err>
 800ce90:	4603      	mov	r3, r0
 800ce92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ce96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <netconn_recv_data_tcp+0xe8>
          return err;
 800ce9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cea2:	e00b      	b.n	800cebc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800cea4:	f06f 030d 	mvn.w	r3, #13
 800cea8:	e008      	b.n	800cebc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ceaa:	2101      	movs	r1, #1
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 f8b1 	bl	800d014 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ceb2:	f06f 030e 	mvn.w	r3, #14
 800ceb6:	e001      	b.n	800cebc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ceb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3740      	adds	r7, #64	; 0x40
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d109      	bne.n	800ceec <netconn_recv+0x28>
 800ced8:	4b32      	ldr	r3, [pc, #200]	; (800cfa4 <netconn_recv+0xe0>)
 800ceda:	f240 3263 	movw	r2, #867	; 0x363
 800cede:	4932      	ldr	r1, [pc, #200]	; (800cfa8 <netconn_recv+0xe4>)
 800cee0:	4832      	ldr	r0, [pc, #200]	; (800cfac <netconn_recv+0xe8>)
 800cee2:	f00e fc49 	bl	801b778 <printf>
 800cee6:	f06f 030f 	mvn.w	r3, #15
 800ceea:	e056      	b.n	800cf9a <netconn_recv+0xd6>
  *new_buf = NULL;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	2200      	movs	r2, #0
 800cef0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d109      	bne.n	800cf0c <netconn_recv+0x48>
 800cef8:	4b2a      	ldr	r3, [pc, #168]	; (800cfa4 <netconn_recv+0xe0>)
 800cefa:	f240 3265 	movw	r2, #869	; 0x365
 800cefe:	492c      	ldr	r1, [pc, #176]	; (800cfb0 <netconn_recv+0xec>)
 800cf00:	482a      	ldr	r0, [pc, #168]	; (800cfac <netconn_recv+0xe8>)
 800cf02:	f00e fc39 	bl	801b778 <printf>
 800cf06:	f06f 030f 	mvn.w	r3, #15
 800cf0a:	e046      	b.n	800cf9a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf14:	2b10      	cmp	r3, #16
 800cf16:	d13a      	bne.n	800cf8e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cf1c:	2006      	movs	r0, #6
 800cf1e:	f003 fa1f 	bl	8010360 <memp_malloc>
 800cf22:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d102      	bne.n	800cf30 <netconn_recv+0x6c>
      return ERR_MEM;
 800cf2a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2e:	e034      	b.n	800cf9a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800cf30:	f107 030c 	add.w	r3, r7, #12
 800cf34:	2200      	movs	r2, #0
 800cf36:	4619      	mov	r1, r3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7ff ff3f 	bl	800cdbc <netconn_recv_data_tcp>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800cf42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d006      	beq.n	800cf58 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800cf4a:	6979      	ldr	r1, [r7, #20]
 800cf4c:	2006      	movs	r0, #6
 800cf4e:	f003 fa59 	bl	8010404 <memp_free>
      return err;
 800cf52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf56:	e020      	b.n	800cf9a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d106      	bne.n	800cf6c <netconn_recv+0xa8>
 800cf5e:	4b11      	ldr	r3, [pc, #68]	; (800cfa4 <netconn_recv+0xe0>)
 800cf60:	f240 3279 	movw	r2, #889	; 0x379
 800cf64:	4913      	ldr	r1, [pc, #76]	; (800cfb4 <netconn_recv+0xf0>)
 800cf66:	4811      	ldr	r0, [pc, #68]	; (800cfac <netconn_recv+0xe8>)
 800cf68:	f00e fc06 	bl	801b778 <printf>

    buf->p = p;
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2200      	movs	r2, #0
 800cf82:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	e005      	b.n	800cf9a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800cf8e:	2200      	movs	r2, #0
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7ff fe1a 	bl	800cbcc <netconn_recv_data>
 800cf98:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3718      	adds	r7, #24
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	08024718 	.word	0x08024718
 800cfa8:	08024930 	.word	0x08024930
 800cfac:	08024770 	.word	0x08024770
 800cfb0:	08024950 	.word	0x08024950
 800cfb4:	080249c8 	.word	0x080249c8

0800cfb8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b08c      	sub	sp, #48	; 0x30
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d109      	bne.n	800cfdc <netconn_send+0x24>
 800cfc8:	4b0e      	ldr	r3, [pc, #56]	; (800d004 <netconn_send+0x4c>)
 800cfca:	f240 32b2 	movw	r2, #946	; 0x3b2
 800cfce:	490e      	ldr	r1, [pc, #56]	; (800d008 <netconn_send+0x50>)
 800cfd0:	480e      	ldr	r0, [pc, #56]	; (800d00c <netconn_send+0x54>)
 800cfd2:	f00e fbd1 	bl	801b778 <printf>
 800cfd6:	f06f 030f 	mvn.w	r3, #15
 800cfda:	e00e      	b.n	800cffa <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800cfe4:	f107 030c 	add.w	r3, r7, #12
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4809      	ldr	r0, [pc, #36]	; (800d010 <netconn_send+0x58>)
 800cfec:	f7ff fcde 	bl	800c9ac <netconn_apimsg>
 800cff0:	4603      	mov	r3, r0
 800cff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800cff6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3730      	adds	r7, #48	; 0x30
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	08024718 	.word	0x08024718
 800d008:	080249d4 	.word	0x080249d4
 800d00c:	08024770 	.word	0x08024770
 800d010:	0800df75 	.word	0x0800df75

0800d014 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08c      	sub	sp, #48	; 0x30
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	460b      	mov	r3, r1
 800d01e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d109      	bne.n	800d03a <netconn_close_shutdown+0x26>
 800d026:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <netconn_close_shutdown+0x50>)
 800d028:	f240 4247 	movw	r2, #1095	; 0x447
 800d02c:	490e      	ldr	r1, [pc, #56]	; (800d068 <netconn_close_shutdown+0x54>)
 800d02e:	480f      	ldr	r0, [pc, #60]	; (800d06c <netconn_close_shutdown+0x58>)
 800d030:	f00e fba2 	bl	801b778 <printf>
 800d034:	f06f 030f 	mvn.w	r3, #15
 800d038:	e010      	b.n	800d05c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d042:	2329      	movs	r3, #41	; 0x29
 800d044:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d046:	f107 030c 	add.w	r3, r7, #12
 800d04a:	4619      	mov	r1, r3
 800d04c:	4808      	ldr	r0, [pc, #32]	; (800d070 <netconn_close_shutdown+0x5c>)
 800d04e:	f7ff fcad 	bl	800c9ac <netconn_apimsg>
 800d052:	4603      	mov	r3, r0
 800d054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d058:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3730      	adds	r7, #48	; 0x30
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	08024718 	.word	0x08024718
 800d068:	08024a54 	.word	0x08024a54
 800d06c:	08024770 	.word	0x08024770
 800d070:	0800e411 	.word	0x0800e411

0800d074 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <netconn_err+0x12>
    return ERR_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	e00d      	b.n	800d0a2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d086:	f00d ff7f 	bl	801af88 <sys_arch_protect>
 800d08a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	7a1b      	ldrb	r3, [r3, #8]
 800d090:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f00d ff83 	bl	801afa4 <sys_arch_unprotect>
  return err;
 800d09e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0ba:	f113 0f0d 	cmn.w	r3, #13
 800d0be:	d009      	beq.n	800d0d4 <lwip_netconn_err_to_msg+0x28>
 800d0c0:	f113 0f0d 	cmn.w	r3, #13
 800d0c4:	dc0c      	bgt.n	800d0e0 <lwip_netconn_err_to_msg+0x34>
 800d0c6:	f113 0f0f 	cmn.w	r3, #15
 800d0ca:	d007      	beq.n	800d0dc <lwip_netconn_err_to_msg+0x30>
 800d0cc:	f113 0f0e 	cmn.w	r3, #14
 800d0d0:	d002      	beq.n	800d0d8 <lwip_netconn_err_to_msg+0x2c>
 800d0d2:	e005      	b.n	800d0e0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d0d4:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <lwip_netconn_err_to_msg+0x54>)
 800d0d6:	e00e      	b.n	800d0f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d0d8:	4b0a      	ldr	r3, [pc, #40]	; (800d104 <lwip_netconn_err_to_msg+0x58>)
 800d0da:	e00c      	b.n	800d0f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <lwip_netconn_err_to_msg+0x5c>)
 800d0de:	e00a      	b.n	800d0f6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d0e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d005      	beq.n	800d0f4 <lwip_netconn_err_to_msg+0x48>
 800d0e8:	4b08      	ldr	r3, [pc, #32]	; (800d10c <lwip_netconn_err_to_msg+0x60>)
 800d0ea:	227d      	movs	r2, #125	; 0x7d
 800d0ec:	4908      	ldr	r1, [pc, #32]	; (800d110 <lwip_netconn_err_to_msg+0x64>)
 800d0ee:	4809      	ldr	r0, [pc, #36]	; (800d114 <lwip_netconn_err_to_msg+0x68>)
 800d0f0:	f00e fb42 	bl	801b778 <printf>
      return NULL;
 800d0f4:	2300      	movs	r3, #0
  }
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	08027f44 	.word	0x08027f44
 800d104:	08027f45 	.word	0x08027f45
 800d108:	08027f46 	.word	0x08027f46
 800d10c:	08024a70 	.word	0x08024a70
 800d110:	08024aa4 	.word	0x08024aa4
 800d114:	08024ab4 	.word	0x08024ab4

0800d118 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d105      	bne.n	800d134 <lwip_netconn_is_err_msg+0x1c>
 800d128:	4b12      	ldr	r3, [pc, #72]	; (800d174 <lwip_netconn_is_err_msg+0x5c>)
 800d12a:	2285      	movs	r2, #133	; 0x85
 800d12c:	4912      	ldr	r1, [pc, #72]	; (800d178 <lwip_netconn_is_err_msg+0x60>)
 800d12e:	4813      	ldr	r0, [pc, #76]	; (800d17c <lwip_netconn_is_err_msg+0x64>)
 800d130:	f00e fb22 	bl	801b778 <printf>

  if (msg == &netconn_aborted) {
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	4a12      	ldr	r2, [pc, #72]	; (800d180 <lwip_netconn_is_err_msg+0x68>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d104      	bne.n	800d146 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	22f3      	movs	r2, #243	; 0xf3
 800d140:	701a      	strb	r2, [r3, #0]
    return 1;
 800d142:	2301      	movs	r3, #1
 800d144:	e012      	b.n	800d16c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	4a0e      	ldr	r2, [pc, #56]	; (800d184 <lwip_netconn_is_err_msg+0x6c>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d104      	bne.n	800d158 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	22f2      	movs	r2, #242	; 0xf2
 800d152:	701a      	strb	r2, [r3, #0]
    return 1;
 800d154:	2301      	movs	r3, #1
 800d156:	e009      	b.n	800d16c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a0b      	ldr	r2, [pc, #44]	; (800d188 <lwip_netconn_is_err_msg+0x70>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d104      	bne.n	800d16a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	22f1      	movs	r2, #241	; 0xf1
 800d164:	701a      	strb	r2, [r3, #0]
    return 1;
 800d166:	2301      	movs	r3, #1
 800d168:	e000      	b.n	800d16c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	08024a70 	.word	0x08024a70
 800d178:	08024adc 	.word	0x08024adc
 800d17c:	08024ab4 	.word	0x08024ab4
 800d180:	08027f44 	.word	0x08027f44
 800d184:	08027f45 	.word	0x08027f45
 800d188:	08027f46 	.word	0x08027f46

0800d18c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b088      	sub	sp, #32
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
 800d198:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d105      	bne.n	800d1ac <recv_udp+0x20>
 800d1a0:	4b34      	ldr	r3, [pc, #208]	; (800d274 <recv_udp+0xe8>)
 800d1a2:	22e5      	movs	r2, #229	; 0xe5
 800d1a4:	4934      	ldr	r1, [pc, #208]	; (800d278 <recv_udp+0xec>)
 800d1a6:	4835      	ldr	r0, [pc, #212]	; (800d27c <recv_udp+0xf0>)
 800d1a8:	f00e fae6 	bl	801b778 <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d105      	bne.n	800d1be <recv_udp+0x32>
 800d1b2:	4b30      	ldr	r3, [pc, #192]	; (800d274 <recv_udp+0xe8>)
 800d1b4:	22e6      	movs	r2, #230	; 0xe6
 800d1b6:	4932      	ldr	r1, [pc, #200]	; (800d280 <recv_udp+0xf4>)
 800d1b8:	4830      	ldr	r0, [pc, #192]	; (800d27c <recv_udp+0xf0>)
 800d1ba:	f00e fadd 	bl	801b778 <printf>
  conn = (struct netconn *)arg;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d103      	bne.n	800d1d0 <recv_udp+0x44>
    pbuf_free(p);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f003 ff6f 	bl	80110ac <pbuf_free>
    return;
 800d1ce:	e04d      	b.n	800d26c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	68ba      	ldr	r2, [r7, #8]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d005      	beq.n	800d1e6 <recv_udp+0x5a>
 800d1da:	4b26      	ldr	r3, [pc, #152]	; (800d274 <recv_udp+0xe8>)
 800d1dc:	22ee      	movs	r2, #238	; 0xee
 800d1de:	4929      	ldr	r1, [pc, #164]	; (800d284 <recv_udp+0xf8>)
 800d1e0:	4826      	ldr	r0, [pc, #152]	; (800d27c <recv_udp+0xf0>)
 800d1e2:	f00e fac9 	bl	801b778 <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	3310      	adds	r3, #16
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f00d fdb1 	bl	801ad52 <sys_mbox_valid>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d103      	bne.n	800d1fe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f003 ff58 	bl	80110ac <pbuf_free>
    return;
 800d1fc:	e036      	b.n	800d26c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d1fe:	2006      	movs	r0, #6
 800d200:	f003 f8ae 	bl	8010360 <memp_malloc>
 800d204:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <recv_udp+0x88>
    pbuf_free(p);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f003 ff4d 	bl	80110ac <pbuf_free>
    return;
 800d212:	e02b      	b.n	800d26c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d002      	beq.n	800d22c <recv_udp+0xa0>
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	e000      	b.n	800d22e <recv_udp+0xa2>
 800d22c:	2300      	movs	r3, #0
 800d22e:	69ba      	ldr	r2, [r7, #24]
 800d230:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d236:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	891b      	ldrh	r3, [r3, #8]
 800d23c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	3310      	adds	r3, #16
 800d242:	69b9      	ldr	r1, [r7, #24]
 800d244:	4618      	mov	r0, r3
 800d246:	f00d fd0f 	bl	801ac68 <sys_mbox_trypost>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d003      	beq.n	800d258 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d250:	69b8      	ldr	r0, [r7, #24]
 800d252:	f001 f969 	bl	800e528 <netbuf_delete>
    return;
 800d256:	e009      	b.n	800d26c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d005      	beq.n	800d26c <recv_udp+0xe0>
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d264:	8afa      	ldrh	r2, [r7, #22]
 800d266:	2100      	movs	r1, #0
 800d268:	69f8      	ldr	r0, [r7, #28]
 800d26a:	4798      	blx	r3
  }
}
 800d26c:	3720      	adds	r7, #32
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	08024a70 	.word	0x08024a70
 800d278:	08024ae8 	.word	0x08024ae8
 800d27c:	08024ab4 	.word	0x08024ab4
 800d280:	08024b0c 	.word	0x08024b0c
 800d284:	08024b2c 	.word	0x08024b2c

0800d288 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
 800d294:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d106      	bne.n	800d2aa <recv_tcp+0x22>
 800d29c:	4b36      	ldr	r3, [pc, #216]	; (800d378 <recv_tcp+0xf0>)
 800d29e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d2a2:	4936      	ldr	r1, [pc, #216]	; (800d37c <recv_tcp+0xf4>)
 800d2a4:	4836      	ldr	r0, [pc, #216]	; (800d380 <recv_tcp+0xf8>)
 800d2a6:	f00e fa67 	bl	801b778 <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d106      	bne.n	800d2be <recv_tcp+0x36>
 800d2b0:	4b31      	ldr	r3, [pc, #196]	; (800d378 <recv_tcp+0xf0>)
 800d2b2:	f240 122d 	movw	r2, #301	; 0x12d
 800d2b6:	4933      	ldr	r1, [pc, #204]	; (800d384 <recv_tcp+0xfc>)
 800d2b8:	4831      	ldr	r0, [pc, #196]	; (800d380 <recv_tcp+0xf8>)
 800d2ba:	f00e fa5d 	bl	801b778 <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d2be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d006      	beq.n	800d2d4 <recv_tcp+0x4c>
 800d2c6:	4b2c      	ldr	r3, [pc, #176]	; (800d378 <recv_tcp+0xf0>)
 800d2c8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d2cc:	492e      	ldr	r1, [pc, #184]	; (800d388 <recv_tcp+0x100>)
 800d2ce:	482c      	ldr	r0, [pc, #176]	; (800d380 <recv_tcp+0xf8>)
 800d2d0:	f00e fa52 	bl	801b778 <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <recv_tcp+0x5c>
    return ERR_VAL;
 800d2de:	f06f 0305 	mvn.w	r3, #5
 800d2e2:	e045      	b.n	800d370 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d006      	beq.n	800d2fc <recv_tcp+0x74>
 800d2ee:	4b22      	ldr	r3, [pc, #136]	; (800d378 <recv_tcp+0xf0>)
 800d2f0:	f240 1235 	movw	r2, #309	; 0x135
 800d2f4:	4925      	ldr	r1, [pc, #148]	; (800d38c <recv_tcp+0x104>)
 800d2f6:	4822      	ldr	r0, [pc, #136]	; (800d380 <recv_tcp+0xf8>)
 800d2f8:	f00e fa3e 	bl	801b778 <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	3310      	adds	r3, #16
 800d300:	4618      	mov	r0, r3
 800d302:	f00d fd26 	bl	801ad52 <sys_mbox_valid>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10d      	bne.n	800d328 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d008      	beq.n	800d324 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	891b      	ldrh	r3, [r3, #8]
 800d316:	4619      	mov	r1, r3
 800d318:	68b8      	ldr	r0, [r7, #8]
 800d31a:	f004 fea1 	bl	8012060 <tcp_recved>
      pbuf_free(p);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f003 fec4 	bl	80110ac <pbuf_free>
    }
    return ERR_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	e023      	b.n	800d370 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d005      	beq.n	800d33a <recv_tcp+0xb2>
    msg = p;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	891b      	ldrh	r3, [r3, #8]
 800d336:	83fb      	strh	r3, [r7, #30]
 800d338:	e003      	b.n	800d342 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d33a:	4b15      	ldr	r3, [pc, #84]	; (800d390 <recv_tcp+0x108>)
 800d33c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d33e:	2300      	movs	r3, #0
 800d340:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	3310      	adds	r3, #16
 800d346:	69b9      	ldr	r1, [r7, #24]
 800d348:	4618      	mov	r0, r3
 800d34a:	f00d fc8d 	bl	801ac68 <sys_mbox_trypost>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d002      	beq.n	800d35a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d354:	f04f 33ff 	mov.w	r3, #4294967295
 800d358:	e00a      	b.n	800d370 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d005      	beq.n	800d36e <recv_tcp+0xe6>
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d366:	8bfa      	ldrh	r2, [r7, #30]
 800d368:	2100      	movs	r1, #0
 800d36a:	6978      	ldr	r0, [r7, #20]
 800d36c:	4798      	blx	r3
  }

  return ERR_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3720      	adds	r7, #32
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	08024a70 	.word	0x08024a70
 800d37c:	08024b4c 	.word	0x08024b4c
 800d380:	08024ab4 	.word	0x08024ab4
 800d384:	08024b70 	.word	0x08024b70
 800d388:	08024b90 	.word	0x08024b90
 800d38c:	08024ba8 	.word	0x08024ba8
 800d390:	08027f46 	.word	0x08027f46

0800d394 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d106      	bne.n	800d3b6 <poll_tcp+0x22>
 800d3a8:	4b29      	ldr	r3, [pc, #164]	; (800d450 <poll_tcp+0xbc>)
 800d3aa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d3ae:	4929      	ldr	r1, [pc, #164]	; (800d454 <poll_tcp+0xc0>)
 800d3b0:	4829      	ldr	r0, [pc, #164]	; (800d458 <poll_tcp+0xc4>)
 800d3b2:	f00e f9e1 	bl	801b778 <printf>

  if (conn->state == NETCONN_WRITE) {
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	785b      	ldrb	r3, [r3, #1]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d104      	bne.n	800d3c8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d3be:	2101      	movs	r1, #1
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 fe59 	bl	800e078 <lwip_netconn_do_writemore>
 800d3c6:	e016      	b.n	800d3f6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	785b      	ldrb	r3, [r3, #1]
 800d3cc:	2b04      	cmp	r3, #4
 800d3ce:	d112      	bne.n	800d3f6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6a1b      	ldr	r3, [r3, #32]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00a      	beq.n	800d3ee <poll_tcp+0x5a>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6a1b      	ldr	r3, [r3, #32]
 800d3dc:	7a5b      	ldrb	r3, [r3, #9]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d005      	beq.n	800d3ee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	7a5a      	ldrb	r2, [r3, #9]
 800d3e8:	3a01      	subs	r2, #1
 800d3ea:	b2d2      	uxtb	r2, r2
 800d3ec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d3ee:	2101      	movs	r1, #1
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f000 fb3b 	bl	800da6c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	7f1b      	ldrb	r3, [r3, #28]
 800d3fa:	f003 0310 	and.w	r3, r3, #16
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d021      	beq.n	800d446 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d01d      	beq.n	800d446 <poll_tcp+0xb2>
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d412:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d416:	d316      	bcc.n	800d446 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d420:	2b04      	cmp	r3, #4
 800d422:	d810      	bhi.n	800d446 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	7f1b      	ldrb	r3, [r3, #28]
 800d428:	f023 0310 	bic.w	r3, r3, #16
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d436:	2b00      	cmp	r3, #0
 800d438:	d005      	beq.n	800d446 <poll_tcp+0xb2>
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43e:	2200      	movs	r2, #0
 800d440:	2102      	movs	r1, #2
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	08024a70 	.word	0x08024a70
 800d454:	08024bc8 	.word	0x08024bc8
 800d458:	08024ab4 	.word	0x08024ab4

0800d45c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	4613      	mov	r3, r2
 800d468:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d106      	bne.n	800d482 <sent_tcp+0x26>
 800d474:	4b20      	ldr	r3, [pc, #128]	; (800d4f8 <sent_tcp+0x9c>)
 800d476:	f240 1293 	movw	r2, #403	; 0x193
 800d47a:	4920      	ldr	r1, [pc, #128]	; (800d4fc <sent_tcp+0xa0>)
 800d47c:	4820      	ldr	r0, [pc, #128]	; (800d500 <sent_tcp+0xa4>)
 800d47e:	f00e f97b 	bl	801b778 <printf>

  if (conn) {
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d032      	beq.n	800d4ee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	785b      	ldrb	r3, [r3, #1]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d104      	bne.n	800d49a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d490:	2101      	movs	r1, #1
 800d492:	6978      	ldr	r0, [r7, #20]
 800d494:	f000 fdf0 	bl	800e078 <lwip_netconn_do_writemore>
 800d498:	e007      	b.n	800d4aa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	785b      	ldrb	r3, [r3, #1]
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	d103      	bne.n	800d4aa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	6978      	ldr	r0, [r7, #20]
 800d4a6:	f000 fae1 	bl	800da6c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d01d      	beq.n	800d4ee <sent_tcp+0x92>
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d4ba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d4be:	d316      	bcc.n	800d4ee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	d810      	bhi.n	800d4ee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	7f1b      	ldrb	r3, [r3, #28]
 800d4d0:	f023 0310 	bic.w	r3, r3, #16
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d005      	beq.n	800d4ee <sent_tcp+0x92>
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e6:	88fa      	ldrh	r2, [r7, #6]
 800d4e8:	2102      	movs	r1, #2
 800d4ea:	6978      	ldr	r0, [r7, #20]
 800d4ec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	08024a70 	.word	0x08024a70
 800d4fc:	08024bc8 	.word	0x08024bc8
 800d500:	08024ab4 	.word	0x08024ab4

0800d504 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b088      	sub	sp, #32
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d106      	bne.n	800d528 <err_tcp+0x24>
 800d51a:	4b5f      	ldr	r3, [pc, #380]	; (800d698 <err_tcp+0x194>)
 800d51c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d520:	495e      	ldr	r1, [pc, #376]	; (800d69c <err_tcp+0x198>)
 800d522:	485f      	ldr	r0, [pc, #380]	; (800d6a0 <err_tcp+0x19c>)
 800d524:	f00e f928 	bl	801b778 <printf>

  SYS_ARCH_PROTECT(lev);
 800d528:	f00d fd2e 	bl	801af88 <sys_arch_protect>
 800d52c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	2200      	movs	r2, #0
 800d532:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	78fa      	ldrb	r2, [r7, #3]
 800d538:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	7f1b      	ldrb	r3, [r3, #28]
 800d53e:	f043 0301 	orr.w	r3, r3, #1
 800d542:	b2da      	uxtb	r2, r3
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	785b      	ldrb	r3, [r3, #1]
 800d54c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	2200      	movs	r2, #0
 800d552:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d554:	69b8      	ldr	r0, [r7, #24]
 800d556:	f00d fd25 	bl	801afa4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d005      	beq.n	800d56e <err_tcp+0x6a>
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d566:	2200      	movs	r2, #0
 800d568:	2104      	movs	r1, #4
 800d56a:	69f8      	ldr	r0, [r7, #28]
 800d56c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d572:	2b00      	cmp	r3, #0
 800d574:	d005      	beq.n	800d582 <err_tcp+0x7e>
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57a:	2200      	movs	r2, #0
 800d57c:	2100      	movs	r1, #0
 800d57e:	69f8      	ldr	r0, [r7, #28]
 800d580:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d586:	2b00      	cmp	r3, #0
 800d588:	d005      	beq.n	800d596 <err_tcp+0x92>
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58e:	2200      	movs	r2, #0
 800d590:	2102      	movs	r1, #2
 800d592:	69f8      	ldr	r0, [r7, #28]
 800d594:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7ff fd86 	bl	800d0ac <lwip_netconn_err_to_msg>
 800d5a0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	3310      	adds	r3, #16
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f00d fbd3 	bl	801ad52 <sys_mbox_valid>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d005      	beq.n	800d5be <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	3310      	adds	r3, #16
 800d5b6:	6939      	ldr	r1, [r7, #16]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f00d fb55 	bl	801ac68 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	3314      	adds	r3, #20
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f00d fbc5 	bl	801ad52 <sys_mbox_valid>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d005      	beq.n	800d5da <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	3314      	adds	r3, #20
 800d5d2:	6939      	ldr	r1, [r7, #16]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f00d fb47 	bl	801ac68 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d5da:	7dfb      	ldrb	r3, [r7, #23]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d005      	beq.n	800d5ec <err_tcp+0xe8>
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
 800d5e2:	2b04      	cmp	r3, #4
 800d5e4:	d002      	beq.n	800d5ec <err_tcp+0xe8>
 800d5e6:	7dfb      	ldrb	r3, [r7, #23]
 800d5e8:	2b03      	cmp	r3, #3
 800d5ea:	d143      	bne.n	800d674 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	7f1b      	ldrb	r3, [r3, #28]
 800d5f0:	f003 0304 	and.w	r3, r3, #4
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	bf14      	ite	ne
 800d5f8:	2301      	movne	r3, #1
 800d5fa:	2300      	moveq	r3, #0
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	7f1b      	ldrb	r3, [r3, #28]
 800d604:	f023 0304 	bic.w	r3, r3, #4
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d13b      	bne.n	800d68c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d106      	bne.n	800d62a <err_tcp+0x126>
 800d61c:	4b1e      	ldr	r3, [pc, #120]	; (800d698 <err_tcp+0x194>)
 800d61e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d622:	4920      	ldr	r1, [pc, #128]	; (800d6a4 <err_tcp+0x1a0>)
 800d624:	481e      	ldr	r0, [pc, #120]	; (800d6a0 <err_tcp+0x19c>)
 800d626:	f00e f8a7 	bl	801b778 <printf>
      if (old_state == NETCONN_CLOSE) {
 800d62a:	7dfb      	ldrb	r3, [r7, #23]
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d104      	bne.n	800d63a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	6a1b      	ldr	r3, [r3, #32]
 800d634:	2200      	movs	r2, #0
 800d636:	711a      	strb	r2, [r3, #4]
 800d638:	e003      	b.n	800d642 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	78fa      	ldrb	r2, [r7, #3]
 800d640:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	330c      	adds	r3, #12
 800d64a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d64c:	68b8      	ldr	r0, [r7, #8]
 800d64e:	f00d fc11 	bl	801ae74 <sys_sem_valid>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d106      	bne.n	800d666 <err_tcp+0x162>
 800d658:	4b0f      	ldr	r3, [pc, #60]	; (800d698 <err_tcp+0x194>)
 800d65a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d65e:	4912      	ldr	r1, [pc, #72]	; (800d6a8 <err_tcp+0x1a4>)
 800d660:	480f      	ldr	r0, [pc, #60]	; (800d6a0 <err_tcp+0x19c>)
 800d662:	f00e f889 	bl	801b778 <printf>
      conn->current_msg = NULL;
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	2200      	movs	r2, #0
 800d66a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d66c:	68b8      	ldr	r0, [r7, #8]
 800d66e:	f00d fbe7 	bl	801ae40 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d672:	e00b      	b.n	800d68c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	6a1b      	ldr	r3, [r3, #32]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d008      	beq.n	800d68e <err_tcp+0x18a>
 800d67c:	4b06      	ldr	r3, [pc, #24]	; (800d698 <err_tcp+0x194>)
 800d67e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d682:	490a      	ldr	r1, [pc, #40]	; (800d6ac <err_tcp+0x1a8>)
 800d684:	4806      	ldr	r0, [pc, #24]	; (800d6a0 <err_tcp+0x19c>)
 800d686:	f00e f877 	bl	801b778 <printf>
  }
}
 800d68a:	e000      	b.n	800d68e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d68c:	bf00      	nop
}
 800d68e:	bf00      	nop
 800d690:	3720      	adds	r7, #32
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	08024a70 	.word	0x08024a70
 800d69c:	08024bc8 	.word	0x08024bc8
 800d6a0:	08024ab4 	.word	0x08024ab4
 800d6a4:	08024bd8 	.word	0x08024bd8
 800d6a8:	08024bf4 	.word	0x08024bf4
 800d6ac:	08024c10 	.word	0x08024c10

0800d6b0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d6be:	6879      	ldr	r1, [r7, #4]
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f005 fbb1 	bl	8012e28 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d6c6:	490a      	ldr	r1, [pc, #40]	; (800d6f0 <setup_tcp+0x40>)
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f005 fbbf 	bl	8012e4c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d6ce:	4909      	ldr	r1, [pc, #36]	; (800d6f4 <setup_tcp+0x44>)
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f005 fbdd 	bl	8012e90 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d6d6:	2202      	movs	r2, #2
 800d6d8:	4907      	ldr	r1, [pc, #28]	; (800d6f8 <setup_tcp+0x48>)
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f005 fc34 	bl	8012f48 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d6e0:	4906      	ldr	r1, [pc, #24]	; (800d6fc <setup_tcp+0x4c>)
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f005 fbf6 	bl	8012ed4 <tcp_err>
}
 800d6e8:	bf00      	nop
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	0800d289 	.word	0x0800d289
 800d6f4:	0800d45d 	.word	0x0800d45d
 800d6f8:	0800d395 	.word	0x0800d395
 800d6fc:	0800d505 	.word	0x0800d505

0800d700 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d700:	b590      	push	{r4, r7, lr}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d708:	2300      	movs	r3, #0
 800d70a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d006      	beq.n	800d724 <pcb_new+0x24>
 800d716:	4b2b      	ldr	r3, [pc, #172]	; (800d7c4 <pcb_new+0xc4>)
 800d718:	f240 2265 	movw	r2, #613	; 0x265
 800d71c:	492a      	ldr	r1, [pc, #168]	; (800d7c8 <pcb_new+0xc8>)
 800d71e:	482b      	ldr	r0, [pc, #172]	; (800d7cc <pcb_new+0xcc>)
 800d720:	f00e f82a 	bl	801b778 <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d72e:	2b10      	cmp	r3, #16
 800d730:	d022      	beq.n	800d778 <pcb_new+0x78>
 800d732:	2b20      	cmp	r3, #32
 800d734:	d133      	bne.n	800d79e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681c      	ldr	r4, [r3, #0]
 800d73a:	7bfb      	ldrb	r3, [r7, #15]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f00a fe38 	bl	80183b2 <udp_new_ip_type>
 800d742:	4603      	mov	r3, r0
 800d744:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d02a      	beq.n	800d7a6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	2b22      	cmp	r3, #34	; 0x22
 800d758:	d104      	bne.n	800d764 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6858      	ldr	r0, [r3, #4]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	4917      	ldr	r1, [pc, #92]	; (800d7d0 <pcb_new+0xd0>)
 800d772:	f00a fda5 	bl	80182c0 <udp_recv>
      }
      break;
 800d776:	e016      	b.n	800d7a6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681c      	ldr	r4, [r3, #0]
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	4618      	mov	r0, r3
 800d780:	f005 fb44 	bl	8012e0c <tcp_new_ip_type>
 800d784:	4603      	mov	r3, r0
 800d786:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00b      	beq.n	800d7aa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4618      	mov	r0, r3
 800d798:	f7ff ff8a 	bl	800d6b0 <setup_tcp>
      }
      break;
 800d79c:	e005      	b.n	800d7aa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	22fa      	movs	r2, #250	; 0xfa
 800d7a2:	711a      	strb	r2, [r3, #4]
      return;
 800d7a4:	e00a      	b.n	800d7bc <pcb_new+0xbc>
      break;
 800d7a6:	bf00      	nop
 800d7a8:	e000      	b.n	800d7ac <pcb_new+0xac>
      break;
 800d7aa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d102      	bne.n	800d7bc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	22ff      	movs	r2, #255	; 0xff
 800d7ba:	711a      	strb	r2, [r3, #4]
  }
}
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd90      	pop	{r4, r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	08024a70 	.word	0x08024a70
 800d7c8:	08024c54 	.word	0x08024c54
 800d7cc:	08024ab4 	.word	0x08024ab4
 800d7d0:	0800d18d 	.word	0x0800d18d

0800d7d4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d102      	bne.n	800d7f6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7ff ff85 	bl	800d700 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d7f6:	bf00      	nop
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
	...

0800d800 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af00      	add	r7, sp, #0
 800d806:	4603      	mov	r3, r0
 800d808:	6039      	str	r1, [r7, #0]
 800d80a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d810:	2007      	movs	r0, #7
 800d812:	f002 fda5 	bl	8010360 <memp_malloc>
 800d816:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <netconn_alloc+0x22>
    return NULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	e052      	b.n	800d8c8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	79fa      	ldrb	r2, [r7, #7]
 800d82c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d83a:	2b10      	cmp	r3, #16
 800d83c:	d004      	beq.n	800d848 <netconn_alloc+0x48>
 800d83e:	2b20      	cmp	r3, #32
 800d840:	d105      	bne.n	800d84e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d842:	2306      	movs	r3, #6
 800d844:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d846:	e00a      	b.n	800d85e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d848:	2306      	movs	r3, #6
 800d84a:	617b      	str	r3, [r7, #20]
      break;
 800d84c:	e007      	b.n	800d85e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d84e:	4b20      	ldr	r3, [pc, #128]	; (800d8d0 <netconn_alloc+0xd0>)
 800d850:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d854:	491f      	ldr	r1, [pc, #124]	; (800d8d4 <netconn_alloc+0xd4>)
 800d856:	4820      	ldr	r0, [pc, #128]	; (800d8d8 <netconn_alloc+0xd8>)
 800d858:	f00d ff8e 	bl	801b778 <printf>
      goto free_and_return;
 800d85c:	e02f      	b.n	800d8be <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3310      	adds	r3, #16
 800d862:	6979      	ldr	r1, [r7, #20]
 800d864:	4618      	mov	r0, r3
 800d866:	f00d f9cb 	bl	801ac00 <sys_mbox_new>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d125      	bne.n	800d8bc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	330c      	adds	r3, #12
 800d874:	2100      	movs	r1, #0
 800d876:	4618      	mov	r0, r3
 800d878:	f00d fa89 	bl	801ad8e <sys_sem_new>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d005      	beq.n	800d88e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	3310      	adds	r3, #16
 800d886:	4618      	mov	r0, r3
 800d888:	f00d f9dc 	bl	801ac44 <sys_mbox_free>
    goto free_and_return;
 800d88c:	e017      	b.n	800d8be <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3314      	adds	r3, #20
 800d892:	4618      	mov	r0, r3
 800d894:	f00d fa6e 	bl	801ad74 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	7cfa      	ldrb	r2, [r7, #19]
 800d8b6:	771a      	strb	r2, [r3, #28]
  return conn;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	e005      	b.n	800d8c8 <netconn_alloc+0xc8>
    goto free_and_return;
 800d8bc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d8be:	68f9      	ldr	r1, [r7, #12]
 800d8c0:	2007      	movs	r0, #7
 800d8c2:	f002 fd9f 	bl	8010404 <memp_free>
  return NULL;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3718      	adds	r7, #24
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	08024a70 	.word	0x08024a70
 800d8d4:	08024c74 	.word	0x08024c74
 800d8d8:	08024ab4 	.word	0x08024ab4

0800d8dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d006      	beq.n	800d8fa <netconn_free+0x1e>
 800d8ec:	4b1b      	ldr	r3, [pc, #108]	; (800d95c <netconn_free+0x80>)
 800d8ee:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d8f2:	491b      	ldr	r1, [pc, #108]	; (800d960 <netconn_free+0x84>)
 800d8f4:	481b      	ldr	r0, [pc, #108]	; (800d964 <netconn_free+0x88>)
 800d8f6:	f00d ff3f 	bl	801b778 <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	3310      	adds	r3, #16
 800d8fe:	4618      	mov	r0, r3
 800d900:	f00d fa27 	bl	801ad52 <sys_mbox_valid>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d006      	beq.n	800d918 <netconn_free+0x3c>
 800d90a:	4b14      	ldr	r3, [pc, #80]	; (800d95c <netconn_free+0x80>)
 800d90c:	f240 3223 	movw	r2, #803	; 0x323
 800d910:	4915      	ldr	r1, [pc, #84]	; (800d968 <netconn_free+0x8c>)
 800d912:	4814      	ldr	r0, [pc, #80]	; (800d964 <netconn_free+0x88>)
 800d914:	f00d ff30 	bl	801b778 <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	3314      	adds	r3, #20
 800d91c:	4618      	mov	r0, r3
 800d91e:	f00d fa18 	bl	801ad52 <sys_mbox_valid>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d006      	beq.n	800d936 <netconn_free+0x5a>
 800d928:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <netconn_free+0x80>)
 800d92a:	f240 3226 	movw	r2, #806	; 0x326
 800d92e:	490f      	ldr	r1, [pc, #60]	; (800d96c <netconn_free+0x90>)
 800d930:	480c      	ldr	r0, [pc, #48]	; (800d964 <netconn_free+0x88>)
 800d932:	f00d ff21 	bl	801b778 <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	330c      	adds	r3, #12
 800d93a:	4618      	mov	r0, r3
 800d93c:	f00d fa8d 	bl	801ae5a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	330c      	adds	r3, #12
 800d944:	4618      	mov	r0, r3
 800d946:	f00d faa6 	bl	801ae96 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	2007      	movs	r0, #7
 800d94e:	f002 fd59 	bl	8010404 <memp_free>
}
 800d952:	bf00      	nop
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	08024a70 	.word	0x08024a70
 800d960:	08024c9c 	.word	0x08024c9c
 800d964:	08024ab4 	.word	0x08024ab4
 800d968:	08024ccc 	.word	0x08024ccc
 800d96c:	08024d08 	.word	0x08024d08

0800d970 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	3310      	adds	r3, #16
 800d97c:	4618      	mov	r0, r3
 800d97e:	f00d f9e8 	bl	801ad52 <sys_mbox_valid>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d02f      	beq.n	800d9e8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d988:	e018      	b.n	800d9bc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d992:	2b10      	cmp	r3, #16
 800d994:	d10e      	bne.n	800d9b4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	f107 020f 	add.w	r2, r7, #15
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff fbba 	bl	800d118 <lwip_netconn_is_err_msg>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d108      	bne.n	800d9bc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f003 fb7d 	bl	80110ac <pbuf_free>
 800d9b2:	e003      	b.n	800d9bc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 fdb6 	bl	800e528 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3310      	adds	r3, #16
 800d9c0:	f107 0210 	add.w	r2, r7, #16
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f00d f9a7 	bl	801ad1a <sys_arch_mbox_tryfetch>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d2:	d1da      	bne.n	800d98a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	3310      	adds	r3, #16
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f00d f933 	bl	801ac44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	3310      	adds	r3, #16
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f00d f9c6 	bl	801ad74 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3314      	adds	r3, #20
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f00d f9b0 	bl	801ad52 <sys_mbox_valid>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d034      	beq.n	800da62 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d9f8:	e01d      	b.n	800da36 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	f107 020e 	add.w	r2, r7, #14
 800da00:	4611      	mov	r1, r2
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff fb88 	bl	800d118 <lwip_netconn_is_err_msg>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d113      	bne.n	800da36 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800da12:	6978      	ldr	r0, [r7, #20]
 800da14:	f7ff ffac 	bl	800d970 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d007      	beq.n	800da30 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	4618      	mov	r0, r3
 800da26:	f004 f941 	bl	8011cac <tcp_abort>
            newconn->pcb.tcp = NULL;
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	2200      	movs	r2, #0
 800da2e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800da30:	6978      	ldr	r0, [r7, #20]
 800da32:	f7ff ff53 	bl	800d8dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	3314      	adds	r3, #20
 800da3a:	f107 0210 	add.w	r2, r7, #16
 800da3e:	4611      	mov	r1, r2
 800da40:	4618      	mov	r0, r3
 800da42:	f00d f96a 	bl	801ad1a <sys_arch_mbox_tryfetch>
 800da46:	4603      	mov	r3, r0
 800da48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4c:	d1d5      	bne.n	800d9fa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	3314      	adds	r3, #20
 800da52:	4618      	mov	r0, r3
 800da54:	f00d f8f6 	bl	801ac44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	3314      	adds	r3, #20
 800da5c:	4618      	mov	r0, r3
 800da5e:	f00d f989 	bl	801ad74 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800da62:	bf00      	nop
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
	...

0800da6c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	460b      	mov	r3, r1
 800da76:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800da78:	2300      	movs	r3, #0
 800da7a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d106      	bne.n	800da90 <lwip_netconn_do_close_internal+0x24>
 800da82:	4ba1      	ldr	r3, [pc, #644]	; (800dd08 <lwip_netconn_do_close_internal+0x29c>)
 800da84:	f240 32a2 	movw	r2, #930	; 0x3a2
 800da88:	49a0      	ldr	r1, [pc, #640]	; (800dd0c <lwip_netconn_do_close_internal+0x2a0>)
 800da8a:	48a1      	ldr	r0, [pc, #644]	; (800dd10 <lwip_netconn_do_close_internal+0x2a4>)
 800da8c:	f00d fe74 	bl	801b778 <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da98:	2b10      	cmp	r3, #16
 800da9a:	d006      	beq.n	800daaa <lwip_netconn_do_close_internal+0x3e>
 800da9c:	4b9a      	ldr	r3, [pc, #616]	; (800dd08 <lwip_netconn_do_close_internal+0x29c>)
 800da9e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800daa2:	499c      	ldr	r1, [pc, #624]	; (800dd14 <lwip_netconn_do_close_internal+0x2a8>)
 800daa4:	489a      	ldr	r0, [pc, #616]	; (800dd10 <lwip_netconn_do_close_internal+0x2a4>)
 800daa6:	f00d fe67 	bl	801b778 <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	785b      	ldrb	r3, [r3, #1]
 800daae:	2b04      	cmp	r3, #4
 800dab0:	d006      	beq.n	800dac0 <lwip_netconn_do_close_internal+0x54>
 800dab2:	4b95      	ldr	r3, [pc, #596]	; (800dd08 <lwip_netconn_do_close_internal+0x29c>)
 800dab4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800dab8:	4997      	ldr	r1, [pc, #604]	; (800dd18 <lwip_netconn_do_close_internal+0x2ac>)
 800daba:	4895      	ldr	r0, [pc, #596]	; (800dd10 <lwip_netconn_do_close_internal+0x2a4>)
 800dabc:	f00d fe5c 	bl	801b778 <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d106      	bne.n	800dad6 <lwip_netconn_do_close_internal+0x6a>
 800dac8:	4b8f      	ldr	r3, [pc, #572]	; (800dd08 <lwip_netconn_do_close_internal+0x29c>)
 800daca:	f240 32a5 	movw	r2, #933	; 0x3a5
 800dace:	4993      	ldr	r1, [pc, #588]	; (800dd1c <lwip_netconn_do_close_internal+0x2b0>)
 800dad0:	488f      	ldr	r0, [pc, #572]	; (800dd10 <lwip_netconn_do_close_internal+0x2a4>)
 800dad2:	f00d fe51 	bl	801b778 <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d106      	bne.n	800daec <lwip_netconn_do_close_internal+0x80>
 800dade:	4b8a      	ldr	r3, [pc, #552]	; (800dd08 <lwip_netconn_do_close_internal+0x29c>)
 800dae0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dae4:	498e      	ldr	r1, [pc, #568]	; (800dd20 <lwip_netconn_do_close_internal+0x2b4>)
 800dae6:	488a      	ldr	r0, [pc, #552]	; (800dd10 <lwip_netconn_do_close_internal+0x2a4>)
 800dae8:	f00d fe46 	bl	801b778 <printf>

  tpcb = conn->pcb.tcp;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6a1b      	ldr	r3, [r3, #32]
 800daf6:	7a1b      	ldrb	r3, [r3, #8]
 800daf8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800dafa:	7bfb      	ldrb	r3, [r7, #15]
 800dafc:	f003 0301 	and.w	r3, r3, #1
 800db00:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800db02:	7bfb      	ldrb	r3, [r7, #15]
 800db04:	f003 0302 	and.w	r3, r3, #2
 800db08:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	2b03      	cmp	r3, #3
 800db0e:	d102      	bne.n	800db16 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800db10:	2301      	movs	r3, #1
 800db12:	75bb      	strb	r3, [r7, #22]
 800db14:	e01f      	b.n	800db56 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800db16:	7bbb      	ldrb	r3, [r7, #14]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00e      	beq.n	800db3a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800db20:	2b05      	cmp	r3, #5
 800db22:	d007      	beq.n	800db34 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800db28:	2b06      	cmp	r3, #6
 800db2a:	d003      	beq.n	800db34 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800db30:	2b08      	cmp	r3, #8
 800db32:	d102      	bne.n	800db3a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800db34:	2301      	movs	r3, #1
 800db36:	75bb      	strb	r3, [r7, #22]
 800db38:	e00d      	b.n	800db56 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800db3a:	7b7b      	ldrb	r3, [r7, #13]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d008      	beq.n	800db52 <lwip_netconn_do_close_internal+0xe6>
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	8b5b      	ldrh	r3, [r3, #26]
 800db44:	f003 0310 	and.w	r3, r3, #16
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800db4c:	2301      	movs	r3, #1
 800db4e:	75bb      	strb	r3, [r7, #22]
 800db50:	e001      	b.n	800db56 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800db52:	2300      	movs	r3, #0
 800db54:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800db56:	7dbb      	ldrb	r3, [r7, #22]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800db5c:	2100      	movs	r1, #0
 800db5e:	6938      	ldr	r0, [r7, #16]
 800db60:	f005 f962 	bl	8012e28 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	7d1b      	ldrb	r3, [r3, #20]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d104      	bne.n	800db76 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800db6c:	2100      	movs	r1, #0
 800db6e:	6938      	ldr	r0, [r7, #16]
 800db70:	f005 f9d2 	bl	8012f18 <tcp_accept>
 800db74:	e01d      	b.n	800dbb2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800db76:	7bbb      	ldrb	r3, [r7, #14]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d007      	beq.n	800db8c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800db7c:	2100      	movs	r1, #0
 800db7e:	6938      	ldr	r0, [r7, #16]
 800db80:	f005 f964 	bl	8012e4c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800db84:	2100      	movs	r1, #0
 800db86:	6938      	ldr	r0, [r7, #16]
 800db88:	f005 f9c6 	bl	8012f18 <tcp_accept>
    }
    if (shut_tx) {
 800db8c:	7b7b      	ldrb	r3, [r7, #13]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800db92:	2100      	movs	r1, #0
 800db94:	6938      	ldr	r0, [r7, #16]
 800db96:	f005 f97b 	bl	8012e90 <tcp_sent>
    }
    if (shut_close) {
 800db9a:	7dbb      	ldrb	r3, [r7, #22]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d008      	beq.n	800dbb2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800dba0:	2200      	movs	r2, #0
 800dba2:	2100      	movs	r1, #0
 800dba4:	6938      	ldr	r0, [r7, #16]
 800dba6:	f005 f9cf 	bl	8012f48 <tcp_poll>
      tcp_err(tpcb, NULL);
 800dbaa:	2100      	movs	r1, #0
 800dbac:	6938      	ldr	r0, [r7, #16]
 800dbae:	f005 f991 	bl	8012ed4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800dbb2:	7dbb      	ldrb	r3, [r7, #22]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d005      	beq.n	800dbc4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800dbb8:	6938      	ldr	r0, [r7, #16]
 800dbba:	f003 ff31 	bl	8011a20 <tcp_close>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	75fb      	strb	r3, [r7, #23]
 800dbc2:	e007      	b.n	800dbd4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800dbc4:	7bbb      	ldrb	r3, [r7, #14]
 800dbc6:	7b7a      	ldrb	r2, [r7, #13]
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6938      	ldr	r0, [r7, #16]
 800dbcc:	f003 ff54 	bl	8011a78 <tcp_shutdown>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800dbd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d102      	bne.n	800dbe2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	757b      	strb	r3, [r7, #21]
 800dbe0:	e016      	b.n	800dc10 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800dbe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbea:	d10f      	bne.n	800dc0c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a1b      	ldr	r3, [r3, #32]
 800dbf0:	7a5b      	ldrb	r3, [r3, #9]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10c      	bne.n	800dc10 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800dbfa:	7dbb      	ldrb	r3, [r7, #22]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d007      	beq.n	800dc10 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800dc00:	6938      	ldr	r0, [r7, #16]
 800dc02:	f004 f853 	bl	8011cac <tcp_abort>
          err = ERR_OK;
 800dc06:	2300      	movs	r3, #0
 800dc08:	75fb      	strb	r3, [r7, #23]
 800dc0a:	e001      	b.n	800dc10 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800dc10:	7d7b      	ldrb	r3, [r7, #21]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d044      	beq.n	800dca0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a1b      	ldr	r3, [r3, #32]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	330c      	adds	r3, #12
 800dc1e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a1b      	ldr	r3, [r3, #32]
 800dc24:	7dfa      	ldrb	r2, [r7, #23]
 800dc26:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800dc34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d129      	bne.n	800dc90 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800dc3c:	7dbb      	ldrb	r3, [r7, #22]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00c      	beq.n	800dc5c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d005      	beq.n	800dc5c <lwip_netconn_do_close_internal+0x1f0>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc54:	2200      	movs	r2, #0
 800dc56:	2104      	movs	r1, #4
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	4798      	blx	r3
      }
      if (shut_rx) {
 800dc5c:	7bbb      	ldrb	r3, [r7, #14]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d009      	beq.n	800dc76 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d005      	beq.n	800dc76 <lwip_netconn_do_close_internal+0x20a>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6e:	2200      	movs	r2, #0
 800dc70:	2100      	movs	r1, #0
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	4798      	blx	r3
      }
      if (shut_tx) {
 800dc76:	7b7b      	ldrb	r3, [r7, #13]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d009      	beq.n	800dc90 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <lwip_netconn_do_close_internal+0x224>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc88:	2200      	movs	r2, #0
 800dc8a:	2102      	movs	r1, #2
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dc90:	78fb      	ldrb	r3, [r7, #3]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d002      	beq.n	800dc9c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800dc96:	68b8      	ldr	r0, [r7, #8]
 800dc98:	f00d f8d2 	bl	801ae40 <sys_sem_signal>
    }
    return ERR_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	e02e      	b.n	800dcfe <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800dca0:	7d7b      	ldrb	r3, [r7, #21]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d11e      	bne.n	800dce4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	7d1b      	ldrb	r3, [r3, #20]
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d106      	bne.n	800dcbc <lwip_netconn_do_close_internal+0x250>
 800dcae:	4b16      	ldr	r3, [pc, #88]	; (800dd08 <lwip_netconn_do_close_internal+0x29c>)
 800dcb0:	f240 4241 	movw	r2, #1089	; 0x441
 800dcb4:	491b      	ldr	r1, [pc, #108]	; (800dd24 <lwip_netconn_do_close_internal+0x2b8>)
 800dcb6:	4816      	ldr	r0, [pc, #88]	; (800dd10 <lwip_netconn_do_close_internal+0x2a4>)
 800dcb8:	f00d fd5e 	bl	801b778 <printf>
    if (shut_tx) {
 800dcbc:	7b7b      	ldrb	r3, [r7, #13]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d003      	beq.n	800dcca <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800dcc2:	4919      	ldr	r1, [pc, #100]	; (800dd28 <lwip_netconn_do_close_internal+0x2bc>)
 800dcc4:	6938      	ldr	r0, [r7, #16]
 800dcc6:	f005 f8e3 	bl	8012e90 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800dcca:	2201      	movs	r2, #1
 800dccc:	4917      	ldr	r1, [pc, #92]	; (800dd2c <lwip_netconn_do_close_internal+0x2c0>)
 800dcce:	6938      	ldr	r0, [r7, #16]
 800dcd0:	f005 f93a 	bl	8012f48 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800dcd4:	4916      	ldr	r1, [pc, #88]	; (800dd30 <lwip_netconn_do_close_internal+0x2c4>)
 800dcd6:	6938      	ldr	r0, [r7, #16]
 800dcd8:	f005 f8fc 	bl	8012ed4 <tcp_err>
    tcp_arg(tpcb, conn);
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	6938      	ldr	r0, [r7, #16]
 800dce0:	f005 f8a2 	bl	8012e28 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800dce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d106      	bne.n	800dcfa <lwip_netconn_do_close_internal+0x28e>
 800dcec:	4b06      	ldr	r3, [pc, #24]	; (800dd08 <lwip_netconn_do_close_internal+0x29c>)
 800dcee:	f240 424d 	movw	r2, #1101	; 0x44d
 800dcf2:	4910      	ldr	r1, [pc, #64]	; (800dd34 <lwip_netconn_do_close_internal+0x2c8>)
 800dcf4:	4806      	ldr	r0, [pc, #24]	; (800dd10 <lwip_netconn_do_close_internal+0x2a4>)
 800dcf6:	f00d fd3f 	bl	801b778 <printf>
  return err;
 800dcfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	08024a70 	.word	0x08024a70
 800dd0c:	08024d44 	.word	0x08024d44
 800dd10:	08024ab4 	.word	0x08024ab4
 800dd14:	08024d54 	.word	0x08024d54
 800dd18:	08024d74 	.word	0x08024d74
 800dd1c:	08024d98 	.word	0x08024d98
 800dd20:	08024bd8 	.word	0x08024bd8
 800dd24:	08024dac 	.word	0x08024dac
 800dd28:	0800d45d 	.word	0x0800d45d
 800dd2c:	0800d395 	.word	0x0800d395
 800dd30:	0800d505 	.word	0x0800d505
 800dd34:	08024dd0 	.word	0x08024dd0

0800dd38 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	785b      	ldrb	r3, [r3, #1]
 800dd4a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800dd4c:	7afb      	ldrb	r3, [r7, #11]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00d      	beq.n	800dd6e <lwip_netconn_do_delconn+0x36>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd5c:	2b10      	cmp	r3, #16
 800dd5e:	d006      	beq.n	800dd6e <lwip_netconn_do_delconn+0x36>
 800dd60:	4b60      	ldr	r3, [pc, #384]	; (800dee4 <lwip_netconn_do_delconn+0x1ac>)
 800dd62:	f240 425e 	movw	r2, #1118	; 0x45e
 800dd66:	4960      	ldr	r1, [pc, #384]	; (800dee8 <lwip_netconn_do_delconn+0x1b0>)
 800dd68:	4860      	ldr	r0, [pc, #384]	; (800deec <lwip_netconn_do_delconn+0x1b4>)
 800dd6a:	f00d fd05 	bl	801b778 <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800dd6e:	7afb      	ldrb	r3, [r7, #11]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d005      	beq.n	800dd80 <lwip_netconn_do_delconn+0x48>
 800dd74:	7afb      	ldrb	r3, [r7, #11]
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d002      	beq.n	800dd80 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800dd7a:	7afb      	ldrb	r3, [r7, #11]
 800dd7c:	2b03      	cmp	r3, #3
 800dd7e:	d109      	bne.n	800dd94 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800dd80:	7afb      	ldrb	r3, [r7, #11]
 800dd82:	2b03      	cmp	r3, #3
 800dd84:	d10a      	bne.n	800dd9c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	7f1b      	ldrb	r3, [r3, #28]
 800dd8c:	f003 0304 	and.w	r3, r3, #4
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d103      	bne.n	800dd9c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	22fb      	movs	r2, #251	; 0xfb
 800dd98:	711a      	strb	r2, [r3, #4]
 800dd9a:	e097      	b.n	800decc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800dd9c:	7afb      	ldrb	r3, [r7, #11]
 800dd9e:	2b03      	cmp	r3, #3
 800dda0:	d10d      	bne.n	800ddbe <lwip_netconn_do_delconn+0x86>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	7f1b      	ldrb	r3, [r3, #28]
 800dda8:	f003 0304 	and.w	r3, r3, #4
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d106      	bne.n	800ddbe <lwip_netconn_do_delconn+0x86>
 800ddb0:	4b4c      	ldr	r3, [pc, #304]	; (800dee4 <lwip_netconn_do_delconn+0x1ac>)
 800ddb2:	f240 427a 	movw	r2, #1146	; 0x47a
 800ddb6:	494e      	ldr	r1, [pc, #312]	; (800def0 <lwip_netconn_do_delconn+0x1b8>)
 800ddb8:	484c      	ldr	r0, [pc, #304]	; (800deec <lwip_netconn_do_delconn+0x1b4>)
 800ddba:	f00d fcdd 	bl	801b778 <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7ff fdd1 	bl	800d970 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d05f      	beq.n	800de98 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dde2:	2b10      	cmp	r3, #16
 800dde4:	d00d      	beq.n	800de02 <lwip_netconn_do_delconn+0xca>
 800dde6:	2b20      	cmp	r3, #32
 800dde8:	d151      	bne.n	800de8e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f00a fa80 	bl	8018300 <udp_remove>
          break;
 800de00:	e046      	b.n	800de90 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	6a1b      	ldr	r3, [r3, #32]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d006      	beq.n	800de1a <lwip_netconn_do_delconn+0xe2>
 800de0c:	4b35      	ldr	r3, [pc, #212]	; (800dee4 <lwip_netconn_do_delconn+0x1ac>)
 800de0e:	f240 4294 	movw	r2, #1172	; 0x494
 800de12:	4938      	ldr	r1, [pc, #224]	; (800def4 <lwip_netconn_do_delconn+0x1bc>)
 800de14:	4835      	ldr	r0, [pc, #212]	; (800deec <lwip_netconn_do_delconn+0x1b4>)
 800de16:	f00d fcaf 	bl	801b778 <printf>
          msg->conn->state = NETCONN_CLOSE;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2204      	movs	r2, #4
 800de20:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2203      	movs	r2, #3
 800de26:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2100      	movs	r1, #0
 800de36:	4618      	mov	r0, r3
 800de38:	f7ff fe18 	bl	800da6c <lwip_netconn_do_close_internal>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d04b      	beq.n	800deda <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	785b      	ldrb	r3, [r3, #1]
 800de48:	2b04      	cmp	r3, #4
 800de4a:	d006      	beq.n	800de5a <lwip_netconn_do_delconn+0x122>
 800de4c:	4b25      	ldr	r3, [pc, #148]	; (800dee4 <lwip_netconn_do_delconn+0x1ac>)
 800de4e:	f240 429a 	movw	r2, #1178	; 0x49a
 800de52:	4929      	ldr	r1, [pc, #164]	; (800def8 <lwip_netconn_do_delconn+0x1c0>)
 800de54:	4825      	ldr	r0, [pc, #148]	; (800deec <lwip_netconn_do_delconn+0x1b4>)
 800de56:	f00d fc8f 	bl	801b778 <printf>
            UNLOCK_TCPIP_CORE();
 800de5a:	4828      	ldr	r0, [pc, #160]	; (800defc <lwip_netconn_do_delconn+0x1c4>)
 800de5c:	f00d f861 	bl	801af22 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	330c      	adds	r3, #12
 800de66:	2100      	movs	r1, #0
 800de68:	4618      	mov	r0, r3
 800de6a:	f00c ffb8 	bl	801adde <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800de6e:	4823      	ldr	r0, [pc, #140]	; (800defc <lwip_netconn_do_delconn+0x1c4>)
 800de70:	f00d f848 	bl	801af04 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	785b      	ldrb	r3, [r3, #1]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d02d      	beq.n	800deda <lwip_netconn_do_delconn+0x1a2>
 800de7e:	4b19      	ldr	r3, [pc, #100]	; (800dee4 <lwip_netconn_do_delconn+0x1ac>)
 800de80:	f240 429e 	movw	r2, #1182	; 0x49e
 800de84:	491c      	ldr	r1, [pc, #112]	; (800def8 <lwip_netconn_do_delconn+0x1c0>)
 800de86:	4819      	ldr	r0, [pc, #100]	; (800deec <lwip_netconn_do_delconn+0x1b4>)
 800de88:	f00d fc76 	bl	801b778 <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800de8c:	e025      	b.n	800deda <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800de8e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2200      	movs	r2, #0
 800de96:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d007      	beq.n	800deb2 <lwip_netconn_do_delconn+0x17a>
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	6810      	ldr	r0, [r2, #0]
 800deac:	2200      	movs	r2, #0
 800deae:	2100      	movs	r1, #0
 800deb0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d007      	beq.n	800decc <lwip_netconn_do_delconn+0x194>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec2:	68fa      	ldr	r2, [r7, #12]
 800dec4:	6810      	ldr	r0, [r2, #0]
 800dec6:	2200      	movs	r2, #0
 800dec8:	2102      	movs	r1, #2
 800deca:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	330c      	adds	r3, #12
 800ded2:	4618      	mov	r0, r3
 800ded4:	f00c ffce 	bl	801ae74 <sys_sem_valid>
 800ded8:	e000      	b.n	800dedc <lwip_netconn_do_delconn+0x1a4>
          return;
 800deda:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	08024a70 	.word	0x08024a70
 800dee8:	08024de0 	.word	0x08024de0
 800deec:	08024ab4 	.word	0x08024ab4
 800def0:	08024df4 	.word	0x08024df4
 800def4:	08024e14 	.word	0x08024e14
 800def8:	08024e30 	.word	0x08024e30
 800defc:	20008728 	.word	0x20008728

0800df00 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d025      	beq.n	800df62 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df20:	2b10      	cmp	r3, #16
 800df22:	d00e      	beq.n	800df42 <lwip_netconn_do_bind+0x42>
 800df24:	2b20      	cmp	r3, #32
 800df26:	d119      	bne.n	800df5c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6858      	ldr	r0, [r3, #4]
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	6899      	ldr	r1, [r3, #8]
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	899b      	ldrh	r3, [r3, #12]
 800df36:	461a      	mov	r2, r3
 800df38:	f00a f93a 	bl	80181b0 <udp_bind>
 800df3c:	4603      	mov	r3, r0
 800df3e:	73fb      	strb	r3, [r7, #15]
        break;
 800df40:	e011      	b.n	800df66 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	6858      	ldr	r0, [r3, #4]
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	6899      	ldr	r1, [r3, #8]
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	899b      	ldrh	r3, [r3, #12]
 800df50:	461a      	mov	r2, r3
 800df52:	f003 feb7 	bl	8011cc4 <tcp_bind>
 800df56:	4603      	mov	r3, r0
 800df58:	73fb      	strb	r3, [r7, #15]
        break;
 800df5a:	e004      	b.n	800df66 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800df5c:	23fa      	movs	r3, #250	; 0xfa
 800df5e:	73fb      	strb	r3, [r7, #15]
        break;
 800df60:	e001      	b.n	800df66 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800df62:	23fa      	movs	r3, #250	; 0xfa
 800df64:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	7bfa      	ldrb	r2, [r7, #15]
 800df6a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800df6c:	bf00      	nop
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4618      	mov	r0, r3
 800df86:	f7ff f875 	bl	800d074 <netconn_err>
 800df8a:	4603      	mov	r3, r0
 800df8c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800df8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d134      	bne.n	800e000 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d02d      	beq.n	800dffc <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfaa:	2b20      	cmp	r3, #32
 800dfac:	d123      	bne.n	800dff6 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10c      	bne.n	800dfd2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	685a      	ldr	r2, [r3, #4]
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	f009 ff08 	bl	8017ddc <udp_send>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800dfd0:	e016      	b.n	800e000 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	6858      	ldr	r0, [r3, #4]
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	6819      	ldr	r1, [r3, #0]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	f103 0208 	add.w	r2, r3, #8
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	899b      	ldrh	r3, [r3, #12]
 800dfec:	f009 ff2a 	bl	8017e44 <udp_sendto>
 800dff0:	4603      	mov	r3, r0
 800dff2:	73fb      	strb	r3, [r7, #15]
          break;
 800dff4:	e004      	b.n	800e000 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800dff6:	23f5      	movs	r3, #245	; 0xf5
 800dff8:	73fb      	strb	r3, [r7, #15]
          break;
 800dffa:	e001      	b.n	800e000 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800dffc:	23f5      	movs	r3, #245	; 0xf5
 800dffe:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	7bfa      	ldrb	r2, [r7, #15]
 800e004:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e006:	bf00      	nop
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b086      	sub	sp, #24
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	2200      	movs	r2, #0
 800e01e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d022      	beq.n	800e070 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e034:	2b10      	cmp	r3, #16
 800e036:	d11b      	bne.n	800e070 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e044:	d202      	bcs.n	800e04c <lwip_netconn_do_recv+0x3e>
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	b29b      	uxth	r3, r3
 800e04a:	e001      	b.n	800e050 <lwip_netconn_do_recv+0x42>
 800e04c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e050:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	89fa      	ldrh	r2, [r7, #14]
 800e05a:	4611      	mov	r1, r2
 800e05c:	4618      	mov	r0, r3
 800e05e:	f003 ffff 	bl	8012060 <tcp_recved>
        remaining -= recved;
 800e062:	89fb      	ldrh	r3, [r7, #14]
 800e064:	697a      	ldr	r2, [r7, #20]
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1e6      	bne.n	800e03e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e070:	bf00      	nop
 800e072:	3718      	adds	r7, #24
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	460b      	mov	r3, r1
 800e082:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e084:	2300      	movs	r3, #0
 800e086:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d106      	bne.n	800e09c <lwip_netconn_do_writemore+0x24>
 800e08e:	4b96      	ldr	r3, [pc, #600]	; (800e2e8 <lwip_netconn_do_writemore+0x270>)
 800e090:	f240 6273 	movw	r2, #1651	; 0x673
 800e094:	4995      	ldr	r1, [pc, #596]	; (800e2ec <lwip_netconn_do_writemore+0x274>)
 800e096:	4896      	ldr	r0, [pc, #600]	; (800e2f0 <lwip_netconn_do_writemore+0x278>)
 800e098:	f00d fb6e 	bl	801b778 <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	785b      	ldrb	r3, [r3, #1]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d006      	beq.n	800e0b2 <lwip_netconn_do_writemore+0x3a>
 800e0a4:	4b90      	ldr	r3, [pc, #576]	; (800e2e8 <lwip_netconn_do_writemore+0x270>)
 800e0a6:	f240 6274 	movw	r2, #1652	; 0x674
 800e0aa:	4992      	ldr	r1, [pc, #584]	; (800e2f4 <lwip_netconn_do_writemore+0x27c>)
 800e0ac:	4890      	ldr	r0, [pc, #576]	; (800e2f0 <lwip_netconn_do_writemore+0x278>)
 800e0ae:	f00d fb63 	bl	801b778 <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a1b      	ldr	r3, [r3, #32]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d106      	bne.n	800e0c8 <lwip_netconn_do_writemore+0x50>
 800e0ba:	4b8b      	ldr	r3, [pc, #556]	; (800e2e8 <lwip_netconn_do_writemore+0x270>)
 800e0bc:	f240 6275 	movw	r2, #1653	; 0x675
 800e0c0:	498d      	ldr	r1, [pc, #564]	; (800e2f8 <lwip_netconn_do_writemore+0x280>)
 800e0c2:	488b      	ldr	r0, [pc, #556]	; (800e2f0 <lwip_netconn_do_writemore+0x278>)
 800e0c4:	f00d fb58 	bl	801b778 <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d106      	bne.n	800e0de <lwip_netconn_do_writemore+0x66>
 800e0d0:	4b85      	ldr	r3, [pc, #532]	; (800e2e8 <lwip_netconn_do_writemore+0x270>)
 800e0d2:	f240 6276 	movw	r2, #1654	; 0x676
 800e0d6:	4989      	ldr	r1, [pc, #548]	; (800e2fc <lwip_netconn_do_writemore+0x284>)
 800e0d8:	4885      	ldr	r0, [pc, #532]	; (800e2f0 <lwip_netconn_do_writemore+0x278>)
 800e0da:	f00d fb4d 	bl	801b778 <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
 800e0e2:	699a      	ldr	r2, [r3, #24]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a1b      	ldr	r3, [r3, #32]
 800e0e8:	695b      	ldr	r3, [r3, #20]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d306      	bcc.n	800e0fc <lwip_netconn_do_writemore+0x84>
 800e0ee:	4b7e      	ldr	r3, [pc, #504]	; (800e2e8 <lwip_netconn_do_writemore+0x270>)
 800e0f0:	f240 6277 	movw	r2, #1655	; 0x677
 800e0f4:	4982      	ldr	r1, [pc, #520]	; (800e300 <lwip_netconn_do_writemore+0x288>)
 800e0f6:	487e      	ldr	r0, [pc, #504]	; (800e2f0 <lwip_netconn_do_writemore+0x278>)
 800e0f8:	f00d fb3e 	bl	801b778 <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a1b      	ldr	r3, [r3, #32]
 800e100:	899b      	ldrh	r3, [r3, #12]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d106      	bne.n	800e114 <lwip_netconn_do_writemore+0x9c>
 800e106:	4b78      	ldr	r3, [pc, #480]	; (800e2e8 <lwip_netconn_do_writemore+0x270>)
 800e108:	f240 6279 	movw	r2, #1657	; 0x679
 800e10c:	497d      	ldr	r1, [pc, #500]	; (800e304 <lwip_netconn_do_writemore+0x28c>)
 800e10e:	4878      	ldr	r0, [pc, #480]	; (800e2f0 <lwip_netconn_do_writemore+0x278>)
 800e110:	f00d fb32 	bl	801b778 <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a1b      	ldr	r3, [r3, #32]
 800e118:	7f1b      	ldrb	r3, [r3, #28]
 800e11a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	7f1b      	ldrb	r3, [r3, #28]
 800e120:	f003 0302 	and.w	r3, r3, #2
 800e124:	2b00      	cmp	r3, #0
 800e126:	d104      	bne.n	800e132 <lwip_netconn_do_writemore+0xba>
 800e128:	7ebb      	ldrb	r3, [r7, #26]
 800e12a:	f003 0304 	and.w	r3, r3, #4
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <lwip_netconn_do_writemore+0xbe>
 800e132:	2301      	movs	r3, #1
 800e134:	e000      	b.n	800e138 <lwip_netconn_do_writemore+0xc0>
 800e136:	2300      	movs	r3, #0
 800e138:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a1b      	ldr	r3, [r3, #32]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a1b      	ldr	r3, [r3, #32]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	4413      	add	r3, r2
 800e14a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6a1b      	ldr	r3, [r3, #32]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	685a      	ldr	r2, [r3, #4]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a1b      	ldr	r3, [r3, #32]
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	1ad3      	subs	r3, r2, r3
 800e15c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e164:	d307      	bcc.n	800e176 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e16a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e16c:	7ebb      	ldrb	r3, [r7, #26]
 800e16e:	f043 0302 	orr.w	r3, r3, #2
 800e172:	76bb      	strb	r3, [r7, #26]
 800e174:	e001      	b.n	800e17a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e182:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e184:	89fa      	ldrh	r2, [r7, #14]
 800e186:	8bbb      	ldrh	r3, [r7, #28]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d216      	bcs.n	800e1ba <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e18c:	89fb      	ldrh	r3, [r7, #14]
 800e18e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e190:	7e3b      	ldrb	r3, [r7, #24]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00d      	beq.n	800e1b2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e196:	8bbb      	ldrh	r3, [r7, #28]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10e      	bne.n	800e1ba <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6a1b      	ldr	r3, [r3, #32]
 800e1a0:	699b      	ldr	r3, [r3, #24]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d102      	bne.n	800e1ac <lwip_netconn_do_writemore+0x134>
 800e1a6:	f06f 0306 	mvn.w	r3, #6
 800e1aa:	e000      	b.n	800e1ae <lwip_netconn_do_writemore+0x136>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e1b0:	e07d      	b.n	800e2ae <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e1b2:	7ebb      	ldrb	r3, [r7, #26]
 800e1b4:	f043 0302 	orr.w	r3, r3, #2
 800e1b8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a1b      	ldr	r3, [r3, #32]
 800e1be:	691a      	ldr	r2, [r3, #16]
 800e1c0:	8bbb      	ldrh	r3, [r7, #28]
 800e1c2:	441a      	add	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6a1b      	ldr	r3, [r3, #32]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d906      	bls.n	800e1de <lwip_netconn_do_writemore+0x166>
 800e1d0:	4b45      	ldr	r3, [pc, #276]	; (800e2e8 <lwip_netconn_do_writemore+0x270>)
 800e1d2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800e1d6:	494c      	ldr	r1, [pc, #304]	; (800e308 <lwip_netconn_do_writemore+0x290>)
 800e1d8:	4845      	ldr	r0, [pc, #276]	; (800e2f0 <lwip_netconn_do_writemore+0x278>)
 800e1da:	f00d facd 	bl	801b778 <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e1de:	8bbb      	ldrh	r3, [r7, #28]
 800e1e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d103      	bne.n	800e1f0 <lwip_netconn_do_writemore+0x178>
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1ee:	d209      	bcs.n	800e204 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e1f4:	8bba      	ldrh	r2, [r7, #28]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d10b      	bne.n	800e212 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	899b      	ldrh	r3, [r3, #12]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d906      	bls.n	800e212 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e204:	2301      	movs	r3, #1
 800e206:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e208:	7ebb      	ldrb	r3, [r7, #26]
 800e20a:	f043 0302 	orr.w	r3, r3, #2
 800e20e:	76bb      	strb	r3, [r7, #26]
 800e210:	e001      	b.n	800e216 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6858      	ldr	r0, [r3, #4]
 800e21a:	7ebb      	ldrb	r3, [r7, #26]
 800e21c:	8bba      	ldrh	r2, [r7, #28]
 800e21e:	6979      	ldr	r1, [r7, #20]
 800e220:	f007 fd40 	bl	8015ca4 <tcp_write>
 800e224:	4603      	mov	r3, r0
 800e226:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e228:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d12c      	bne.n	800e28a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a1b      	ldr	r3, [r3, #32]
 800e234:	6999      	ldr	r1, [r3, #24]
 800e236:	8bba      	ldrh	r2, [r7, #28]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a1b      	ldr	r3, [r3, #32]
 800e23c:	440a      	add	r2, r1
 800e23e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a1b      	ldr	r3, [r3, #32]
 800e244:	6919      	ldr	r1, [r3, #16]
 800e246:	8bba      	ldrh	r2, [r7, #28]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a1b      	ldr	r3, [r3, #32]
 800e24c:	440a      	add	r2, r1
 800e24e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	691a      	ldr	r2, [r3, #16]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d113      	bne.n	800e28a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	899a      	ldrh	r2, [r3, #12]
 800e268:	3a01      	subs	r2, #1
 800e26a:	b292      	uxth	r2, r2
 800e26c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	899b      	ldrh	r3, [r3, #12]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d008      	beq.n	800e28a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a1b      	ldr	r3, [r3, #32]
 800e27c:	689a      	ldr	r2, [r3, #8]
 800e27e:	3208      	adds	r2, #8
 800e280:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6a1b      	ldr	r3, [r3, #32]
 800e286:	2200      	movs	r2, #0
 800e288:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e28a:	7e7b      	ldrb	r3, [r7, #25]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d004      	beq.n	800e29a <lwip_netconn_do_writemore+0x222>
 800e290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e294:	2b00      	cmp	r3, #0
 800e296:	f43f af50 	beq.w	800e13a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e29a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d004      	beq.n	800e2ac <lwip_netconn_do_writemore+0x234>
 800e2a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2aa:	d146      	bne.n	800e33a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e2ac:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e2ae:	7e3b      	ldrb	r3, [r7, #24]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d02b      	beq.n	800e30c <lwip_netconn_do_writemore+0x294>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	699a      	ldr	r2, [r3, #24]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	695b      	ldr	r3, [r3, #20]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d223      	bcs.n	800e30c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d005      	beq.n	800e2d8 <lwip_netconn_do_writemore+0x260>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2103      	movs	r1, #3
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	7f1b      	ldrb	r3, [r3, #28]
 800e2dc:	f043 0310 	orr.w	r3, r3, #16
 800e2e0:	b2da      	uxtb	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	771a      	strb	r2, [r3, #28]
 800e2e6:	e028      	b.n	800e33a <lwip_netconn_do_writemore+0x2c2>
 800e2e8:	08024a70 	.word	0x08024a70
 800e2ec:	08024bc8 	.word	0x08024bc8
 800e2f0:	08024ab4 	.word	0x08024ab4
 800e2f4:	08024ed0 	.word	0x08024ed0
 800e2f8:	08024bd8 	.word	0x08024bd8
 800e2fc:	08024ef0 	.word	0x08024ef0
 800e300:	08024f08 	.word	0x08024f08
 800e304:	08024f48 	.word	0x08024f48
 800e308:	08024f70 	.word	0x08024f70
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e314:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e318:	d305      	bcc.n	800e326 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e322:	2b04      	cmp	r3, #4
 800e324:	d909      	bls.n	800e33a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d005      	beq.n	800e33a <lwip_netconn_do_writemore+0x2c2>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e332:	2200      	movs	r2, #0
 800e334:	2103      	movs	r1, #3
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e33a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d11d      	bne.n	800e37e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	699a      	ldr	r2, [r3, #24]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a1b      	ldr	r3, [r3, #32]
 800e34c:	695b      	ldr	r3, [r3, #20]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d002      	beq.n	800e358 <lwip_netconn_do_writemore+0x2e0>
 800e352:	7e3b      	ldrb	r3, [r7, #24]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e358:	2301      	movs	r3, #1
 800e35a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	4618      	mov	r0, r3
 800e362:	f008 fa89 	bl	8016878 <tcp_output>
 800e366:	4603      	mov	r3, r0
 800e368:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e36a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e36e:	f113 0f04 	cmn.w	r3, #4
 800e372:	d12c      	bne.n	800e3ce <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e374:	7b3b      	ldrb	r3, [r7, #12]
 800e376:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e378:	2301      	movs	r3, #1
 800e37a:	76fb      	strb	r3, [r7, #27]
 800e37c:	e027      	b.n	800e3ce <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e37e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e386:	d120      	bne.n	800e3ca <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f008 fa73 	bl	8016878 <tcp_output>
 800e392:	4603      	mov	r3, r0
 800e394:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e396:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e39a:	f113 0f04 	cmn.w	r3, #4
 800e39e:	d104      	bne.n	800e3aa <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e3a0:	7b7b      	ldrb	r3, [r7, #13]
 800e3a2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	76fb      	strb	r3, [r7, #27]
 800e3a8:	e011      	b.n	800e3ce <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e3aa:	7e3b      	ldrb	r3, [r7, #24]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00e      	beq.n	800e3ce <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a1b      	ldr	r3, [r3, #32]
 800e3b4:	699b      	ldr	r3, [r3, #24]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d102      	bne.n	800e3c0 <lwip_netconn_do_writemore+0x348>
 800e3ba:	f06f 0306 	mvn.w	r3, #6
 800e3be:	e000      	b.n	800e3c2 <lwip_netconn_do_writemore+0x34a>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	76fb      	strb	r3, [r7, #27]
 800e3c8:	e001      	b.n	800e3ce <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e3ce:	7efb      	ldrb	r3, [r7, #27]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d015      	beq.n	800e400 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a1b      	ldr	r3, [r3, #32]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	330c      	adds	r3, #12
 800e3dc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	7ffa      	ldrb	r2, [r7, #31]
 800e3e4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e3f2:	78fb      	ldrb	r3, [r7, #3]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d006      	beq.n	800e406 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e3f8:	68b8      	ldr	r0, [r7, #8]
 800e3fa:	f00c fd21 	bl	801ae40 <sys_sem_signal>
 800e3fe:	e002      	b.n	800e406 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e400:	f04f 33ff 	mov.w	r3, #4294967295
 800e404:	e000      	b.n	800e408 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3720      	adds	r7, #32
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	785b      	ldrb	r3, [r3, #1]
 800e422:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d069      	beq.n	800e502 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e438:	2b10      	cmp	r3, #16
 800e43a:	d162      	bne.n	800e502 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e440:	2b03      	cmp	r3, #3
 800e442:	d002      	beq.n	800e44a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e444:	7afb      	ldrb	r3, [r7, #11]
 800e446:	2b02      	cmp	r3, #2
 800e448:	d05b      	beq.n	800e502 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e44a:	7afb      	ldrb	r3, [r7, #11]
 800e44c:	2b03      	cmp	r3, #3
 800e44e:	d103      	bne.n	800e458 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	22f5      	movs	r2, #245	; 0xf5
 800e454:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e456:	e059      	b.n	800e50c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e458:	7afb      	ldrb	r3, [r7, #11]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d103      	bne.n	800e466 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	22fb      	movs	r2, #251	; 0xfb
 800e462:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e464:	e052      	b.n	800e50c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	7a1b      	ldrb	r3, [r3, #8]
 800e46a:	f003 0301 	and.w	r3, r3, #1
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d004      	beq.n	800e47c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff fa7a 	bl	800d970 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	6a1b      	ldr	r3, [r3, #32]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d006      	beq.n	800e494 <lwip_netconn_do_close+0x84>
 800e486:	4b23      	ldr	r3, [pc, #140]	; (800e514 <lwip_netconn_do_close+0x104>)
 800e488:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e48c:	4922      	ldr	r1, [pc, #136]	; (800e518 <lwip_netconn_do_close+0x108>)
 800e48e:	4823      	ldr	r0, [pc, #140]	; (800e51c <lwip_netconn_do_close+0x10c>)
 800e490:	f00d f972 	bl	801b778 <printf>
      msg->conn->state = NETCONN_CLOSE;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2204      	movs	r2, #4
 800e49a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7ff fade 	bl	800da6c <lwip_netconn_do_close_internal>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d029      	beq.n	800e50a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	785b      	ldrb	r3, [r3, #1]
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	d006      	beq.n	800e4ce <lwip_netconn_do_close+0xbe>
 800e4c0:	4b14      	ldr	r3, [pc, #80]	; (800e514 <lwip_netconn_do_close+0x104>)
 800e4c2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e4c6:	4916      	ldr	r1, [pc, #88]	; (800e520 <lwip_netconn_do_close+0x110>)
 800e4c8:	4814      	ldr	r0, [pc, #80]	; (800e51c <lwip_netconn_do_close+0x10c>)
 800e4ca:	f00d f955 	bl	801b778 <printf>
        UNLOCK_TCPIP_CORE();
 800e4ce:	4815      	ldr	r0, [pc, #84]	; (800e524 <lwip_netconn_do_close+0x114>)
 800e4d0:	f00c fd27 	bl	801af22 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	330c      	adds	r3, #12
 800e4da:	2100      	movs	r1, #0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f00c fc7e 	bl	801adde <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e4e2:	4810      	ldr	r0, [pc, #64]	; (800e524 <lwip_netconn_do_close+0x114>)
 800e4e4:	f00c fd0e 	bl	801af04 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	785b      	ldrb	r3, [r3, #1]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00b      	beq.n	800e50a <lwip_netconn_do_close+0xfa>
 800e4f2:	4b08      	ldr	r3, [pc, #32]	; (800e514 <lwip_netconn_do_close+0x104>)
 800e4f4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e4f8:	4909      	ldr	r1, [pc, #36]	; (800e520 <lwip_netconn_do_close+0x110>)
 800e4fa:	4808      	ldr	r0, [pc, #32]	; (800e51c <lwip_netconn_do_close+0x10c>)
 800e4fc:	f00d f93c 	bl	801b778 <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e500:	e003      	b.n	800e50a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	22f5      	movs	r2, #245	; 0xf5
 800e506:	711a      	strb	r2, [r3, #4]
 800e508:	e000      	b.n	800e50c <lwip_netconn_do_close+0xfc>
      return;
 800e50a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	08024a70 	.word	0x08024a70
 800e518:	08024e14 	.word	0x08024e14
 800e51c:	08024ab4 	.word	0x08024ab4
 800e520:	08024e30 	.word	0x08024e30
 800e524:	20008728 	.word	0x20008728

0800e528 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d013      	beq.n	800e55e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00b      	beq.n	800e556 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4618      	mov	r0, r3
 800e544:	f002 fdb2 	bl	80110ac <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	605a      	str	r2, [r3, #4]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	685a      	ldr	r2, [r3, #4]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e556:	6879      	ldr	r1, [r7, #4]
 800e558:	2006      	movs	r0, #6
 800e55a:	f001 ff53 	bl	8010404 <memp_free>
  }
}
 800e55e:	bf00      	nop
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
	...

0800e568 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d108      	bne.n	800e58c <netbuf_data+0x24>
 800e57a:	4b1b      	ldr	r3, [pc, #108]	; (800e5e8 <netbuf_data+0x80>)
 800e57c:	22c6      	movs	r2, #198	; 0xc6
 800e57e:	491b      	ldr	r1, [pc, #108]	; (800e5ec <netbuf_data+0x84>)
 800e580:	481b      	ldr	r0, [pc, #108]	; (800e5f0 <netbuf_data+0x88>)
 800e582:	f00d f8f9 	bl	801b778 <printf>
 800e586:	f06f 030f 	mvn.w	r3, #15
 800e58a:	e029      	b.n	800e5e0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d108      	bne.n	800e5a4 <netbuf_data+0x3c>
 800e592:	4b15      	ldr	r3, [pc, #84]	; (800e5e8 <netbuf_data+0x80>)
 800e594:	22c7      	movs	r2, #199	; 0xc7
 800e596:	4917      	ldr	r1, [pc, #92]	; (800e5f4 <netbuf_data+0x8c>)
 800e598:	4815      	ldr	r0, [pc, #84]	; (800e5f0 <netbuf_data+0x88>)
 800e59a:	f00d f8ed 	bl	801b778 <printf>
 800e59e:	f06f 030f 	mvn.w	r3, #15
 800e5a2:	e01d      	b.n	800e5e0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d108      	bne.n	800e5bc <netbuf_data+0x54>
 800e5aa:	4b0f      	ldr	r3, [pc, #60]	; (800e5e8 <netbuf_data+0x80>)
 800e5ac:	22c8      	movs	r2, #200	; 0xc8
 800e5ae:	4912      	ldr	r1, [pc, #72]	; (800e5f8 <netbuf_data+0x90>)
 800e5b0:	480f      	ldr	r0, [pc, #60]	; (800e5f0 <netbuf_data+0x88>)
 800e5b2:	f00d f8e1 	bl	801b778 <printf>
 800e5b6:	f06f 030f 	mvn.w	r3, #15
 800e5ba:	e011      	b.n	800e5e0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d102      	bne.n	800e5ca <netbuf_data+0x62>
    return ERR_BUF;
 800e5c4:	f06f 0301 	mvn.w	r3, #1
 800e5c8:	e00a      	b.n	800e5e0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	685a      	ldr	r2, [r3, #4]
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	895a      	ldrh	r2, [r3, #10]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	08024fc8 	.word	0x08024fc8
 800e5ec:	080250d0 	.word	0x080250d0
 800e5f0:	08025018 	.word	0x08025018
 800e5f4:	080250ec 	.word	0x080250ec
 800e5f8:	0802510c 	.word	0x0802510c

0800e5fc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d108      	bne.n	800e61c <netbuf_next+0x20>
 800e60a:	4b11      	ldr	r3, [pc, #68]	; (800e650 <netbuf_next+0x54>)
 800e60c:	22e0      	movs	r2, #224	; 0xe0
 800e60e:	4911      	ldr	r1, [pc, #68]	; (800e654 <netbuf_next+0x58>)
 800e610:	4811      	ldr	r0, [pc, #68]	; (800e658 <netbuf_next+0x5c>)
 800e612:	f00d f8b1 	bl	801b778 <printf>
 800e616:	f04f 33ff 	mov.w	r3, #4294967295
 800e61a:	e014      	b.n	800e646 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <netbuf_next+0x30>
    return -1;
 800e626:	f04f 33ff 	mov.w	r3, #4294967295
 800e62a:	e00c      	b.n	800e646 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <netbuf_next+0x48>
    return 1;
 800e640:	2301      	movs	r3, #1
 800e642:	e000      	b.n	800e646 <netbuf_next+0x4a>
  }
  return 0;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	08024fc8 	.word	0x08024fc8
 800e654:	08025128 	.word	0x08025128
 800e658:	08025018 	.word	0x08025018

0800e65c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e666:	f009 f9bf 	bl	80179e8 <sys_timeouts_sleeptime>
 800e66a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e672:	d10b      	bne.n	800e68c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e674:	4813      	ldr	r0, [pc, #76]	; (800e6c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e676:	f00c fc54 	bl	801af22 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e67a:	2200      	movs	r2, #0
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f00c fb0c 	bl	801ac9c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e684:	480f      	ldr	r0, [pc, #60]	; (800e6c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e686:	f00c fc3d 	bl	801af04 <sys_mutex_lock>
    return;
 800e68a:	e018      	b.n	800e6be <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d102      	bne.n	800e698 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e692:	f009 f96f 	bl	8017974 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e696:	e7e6      	b.n	800e666 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e698:	480a      	ldr	r0, [pc, #40]	; (800e6c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e69a:	f00c fc42 	bl	801af22 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	6839      	ldr	r1, [r7, #0]
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f00c fafa 	bl	801ac9c <sys_arch_mbox_fetch>
 800e6a8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e6aa:	4806      	ldr	r0, [pc, #24]	; (800e6c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e6ac:	f00c fc2a 	bl	801af04 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b6:	d102      	bne.n	800e6be <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e6b8:	f009 f95c 	bl	8017974 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e6bc:	e7d3      	b.n	800e666 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	20008728 	.word	0x20008728

0800e6c8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e6d0:	4810      	ldr	r0, [pc, #64]	; (800e714 <tcpip_thread+0x4c>)
 800e6d2:	f00c fc17 	bl	801af04 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e6d6:	4b10      	ldr	r3, [pc, #64]	; (800e718 <tcpip_thread+0x50>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d005      	beq.n	800e6ea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e6de:	4b0e      	ldr	r3, [pc, #56]	; (800e718 <tcpip_thread+0x50>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a0e      	ldr	r2, [pc, #56]	; (800e71c <tcpip_thread+0x54>)
 800e6e4:	6812      	ldr	r2, [r2, #0]
 800e6e6:	4610      	mov	r0, r2
 800e6e8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e6ea:	f107 030c 	add.w	r3, r7, #12
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	480b      	ldr	r0, [pc, #44]	; (800e720 <tcpip_thread+0x58>)
 800e6f2:	f7ff ffb3 	bl	800e65c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d106      	bne.n	800e70a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e6fc:	4b09      	ldr	r3, [pc, #36]	; (800e724 <tcpip_thread+0x5c>)
 800e6fe:	2291      	movs	r2, #145	; 0x91
 800e700:	4909      	ldr	r1, [pc, #36]	; (800e728 <tcpip_thread+0x60>)
 800e702:	480a      	ldr	r0, [pc, #40]	; (800e72c <tcpip_thread+0x64>)
 800e704:	f00d f838 	bl	801b778 <printf>
      continue;
 800e708:	e003      	b.n	800e712 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f000 f80f 	bl	800e730 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e712:	e7ea      	b.n	800e6ea <tcpip_thread+0x22>
 800e714:	20008728 	.word	0x20008728
 800e718:	20004a74 	.word	0x20004a74
 800e71c:	20004a78 	.word	0x20004a78
 800e720:	20004a7c 	.word	0x20004a7c
 800e724:	08025160 	.word	0x08025160
 800e728:	08025190 	.word	0x08025190
 800e72c:	080251b0 	.word	0x080251b0

0800e730 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d026      	beq.n	800e78e <tcpip_thread_handle_msg+0x5e>
 800e740:	2b02      	cmp	r3, #2
 800e742:	dc2b      	bgt.n	800e79c <tcpip_thread_handle_msg+0x6c>
 800e744:	2b00      	cmp	r3, #0
 800e746:	d002      	beq.n	800e74e <tcpip_thread_handle_msg+0x1e>
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d015      	beq.n	800e778 <tcpip_thread_handle_msg+0x48>
 800e74c:	e026      	b.n	800e79c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	6850      	ldr	r0, [r2, #4]
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	6892      	ldr	r2, [r2, #8]
 800e75a:	4611      	mov	r1, r2
 800e75c:	4798      	blx	r3
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d004      	beq.n	800e76e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	4618      	mov	r0, r3
 800e76a:	f002 fc9f 	bl	80110ac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	2009      	movs	r0, #9
 800e772:	f001 fe47 	bl	8010404 <memp_free>
      break;
 800e776:	e018      	b.n	800e7aa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	6892      	ldr	r2, [r2, #8]
 800e780:	4610      	mov	r0, r2
 800e782:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e784:	6879      	ldr	r1, [r7, #4]
 800e786:	2008      	movs	r0, #8
 800e788:	f001 fe3c 	bl	8010404 <memp_free>
      break;
 800e78c:	e00d      	b.n	800e7aa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	6892      	ldr	r2, [r2, #8]
 800e796:	4610      	mov	r0, r2
 800e798:	4798      	blx	r3
      break;
 800e79a:	e006      	b.n	800e7aa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e79c:	4b05      	ldr	r3, [pc, #20]	; (800e7b4 <tcpip_thread_handle_msg+0x84>)
 800e79e:	22cf      	movs	r2, #207	; 0xcf
 800e7a0:	4905      	ldr	r1, [pc, #20]	; (800e7b8 <tcpip_thread_handle_msg+0x88>)
 800e7a2:	4806      	ldr	r0, [pc, #24]	; (800e7bc <tcpip_thread_handle_msg+0x8c>)
 800e7a4:	f00c ffe8 	bl	801b778 <printf>
      break;
 800e7a8:	bf00      	nop
  }
}
 800e7aa:	bf00      	nop
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	08025160 	.word	0x08025160
 800e7b8:	08025190 	.word	0x08025190
 800e7bc:	080251b0 	.word	0x080251b0

0800e7c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b086      	sub	sp, #24
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e7cc:	481a      	ldr	r0, [pc, #104]	; (800e838 <tcpip_inpkt+0x78>)
 800e7ce:	f00c fac0 	bl	801ad52 <sys_mbox_valid>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d105      	bne.n	800e7e4 <tcpip_inpkt+0x24>
 800e7d8:	4b18      	ldr	r3, [pc, #96]	; (800e83c <tcpip_inpkt+0x7c>)
 800e7da:	22fc      	movs	r2, #252	; 0xfc
 800e7dc:	4918      	ldr	r1, [pc, #96]	; (800e840 <tcpip_inpkt+0x80>)
 800e7de:	4819      	ldr	r0, [pc, #100]	; (800e844 <tcpip_inpkt+0x84>)
 800e7e0:	f00c ffca 	bl	801b778 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e7e4:	2009      	movs	r0, #9
 800e7e6:	f001 fdbb 	bl	8010360 <memp_malloc>
 800e7ea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d102      	bne.n	800e7f8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f6:	e01a      	b.n	800e82e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e810:	6979      	ldr	r1, [r7, #20]
 800e812:	4809      	ldr	r0, [pc, #36]	; (800e838 <tcpip_inpkt+0x78>)
 800e814:	f00c fa28 	bl	801ac68 <sys_mbox_trypost>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d006      	beq.n	800e82c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e81e:	6979      	ldr	r1, [r7, #20]
 800e820:	2009      	movs	r0, #9
 800e822:	f001 fdef 	bl	8010404 <memp_free>
    return ERR_MEM;
 800e826:	f04f 33ff 	mov.w	r3, #4294967295
 800e82a:	e000      	b.n	800e82e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e82c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20004a7c 	.word	0x20004a7c
 800e83c:	08025160 	.word	0x08025160
 800e840:	080251d8 	.word	0x080251d8
 800e844:	080251b0 	.word	0x080251b0

0800e848 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e858:	f003 0318 	and.w	r3, r3, #24
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d006      	beq.n	800e86e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e860:	4a08      	ldr	r2, [pc, #32]	; (800e884 <tcpip_input+0x3c>)
 800e862:	6839      	ldr	r1, [r7, #0]
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7ff ffab 	bl	800e7c0 <tcpip_inpkt>
 800e86a:	4603      	mov	r3, r0
 800e86c:	e005      	b.n	800e87a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e86e:	4a06      	ldr	r2, [pc, #24]	; (800e888 <tcpip_input+0x40>)
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7ff ffa4 	bl	800e7c0 <tcpip_inpkt>
 800e878:	4603      	mov	r3, r0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	0801aa55 	.word	0x0801aa55
 800e888:	08019715 	.word	0x08019715

0800e88c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e896:	4819      	ldr	r0, [pc, #100]	; (800e8fc <tcpip_try_callback+0x70>)
 800e898:	f00c fa5b 	bl	801ad52 <sys_mbox_valid>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d106      	bne.n	800e8b0 <tcpip_try_callback+0x24>
 800e8a2:	4b17      	ldr	r3, [pc, #92]	; (800e900 <tcpip_try_callback+0x74>)
 800e8a4:	f240 125d 	movw	r2, #349	; 0x15d
 800e8a8:	4916      	ldr	r1, [pc, #88]	; (800e904 <tcpip_try_callback+0x78>)
 800e8aa:	4817      	ldr	r0, [pc, #92]	; (800e908 <tcpip_try_callback+0x7c>)
 800e8ac:	f00c ff64 	bl	801b778 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e8b0:	2008      	movs	r0, #8
 800e8b2:	f001 fd55 	bl	8010360 <memp_malloc>
 800e8b6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d102      	bne.n	800e8c4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e8be:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c2:	e017      	b.n	800e8f4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	683a      	ldr	r2, [r7, #0]
 800e8d4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e8d6:	68f9      	ldr	r1, [r7, #12]
 800e8d8:	4808      	ldr	r0, [pc, #32]	; (800e8fc <tcpip_try_callback+0x70>)
 800e8da:	f00c f9c5 	bl	801ac68 <sys_mbox_trypost>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d006      	beq.n	800e8f2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e8e4:	68f9      	ldr	r1, [r7, #12]
 800e8e6:	2008      	movs	r0, #8
 800e8e8:	f001 fd8c 	bl	8010404 <memp_free>
    return ERR_MEM;
 800e8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f0:	e000      	b.n	800e8f4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	20004a7c 	.word	0x20004a7c
 800e900:	08025160 	.word	0x08025160
 800e904:	080251d8 	.word	0x080251d8
 800e908:	080251b0 	.word	0x080251b0

0800e90c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800e918:	4806      	ldr	r0, [pc, #24]	; (800e934 <tcpip_send_msg_wait_sem+0x28>)
 800e91a:	f00c faf3 	bl	801af04 <sys_mutex_lock>
  fn(apimsg);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	68b8      	ldr	r0, [r7, #8]
 800e922:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800e924:	4803      	ldr	r0, [pc, #12]	; (800e934 <tcpip_send_msg_wait_sem+0x28>)
 800e926:	f00c fafc 	bl	801af22 <sys_mutex_unlock>
  return ERR_OK;
 800e92a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	20008728 	.word	0x20008728

0800e938 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af02      	add	r7, sp, #8
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e942:	f001 f885 	bl	800fa50 <lwip_init>

  tcpip_init_done = initfunc;
 800e946:	4a17      	ldr	r2, [pc, #92]	; (800e9a4 <tcpip_init+0x6c>)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e94c:	4a16      	ldr	r2, [pc, #88]	; (800e9a8 <tcpip_init+0x70>)
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e952:	2106      	movs	r1, #6
 800e954:	4815      	ldr	r0, [pc, #84]	; (800e9ac <tcpip_init+0x74>)
 800e956:	f00c f953 	bl	801ac00 <sys_mbox_new>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d006      	beq.n	800e96e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e960:	4b13      	ldr	r3, [pc, #76]	; (800e9b0 <tcpip_init+0x78>)
 800e962:	f240 2261 	movw	r2, #609	; 0x261
 800e966:	4913      	ldr	r1, [pc, #76]	; (800e9b4 <tcpip_init+0x7c>)
 800e968:	4813      	ldr	r0, [pc, #76]	; (800e9b8 <tcpip_init+0x80>)
 800e96a:	f00c ff05 	bl	801b778 <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e96e:	4813      	ldr	r0, [pc, #76]	; (800e9bc <tcpip_init+0x84>)
 800e970:	f00c faac 	bl	801aecc <sys_mutex_new>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d006      	beq.n	800e988 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e97a:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <tcpip_init+0x78>)
 800e97c:	f240 2265 	movw	r2, #613	; 0x265
 800e980:	490f      	ldr	r1, [pc, #60]	; (800e9c0 <tcpip_init+0x88>)
 800e982:	480d      	ldr	r0, [pc, #52]	; (800e9b8 <tcpip_init+0x80>)
 800e984:	f00c fef8 	bl	801b778 <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e988:	2300      	movs	r3, #0
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e990:	2200      	movs	r2, #0
 800e992:	490c      	ldr	r1, [pc, #48]	; (800e9c4 <tcpip_init+0x8c>)
 800e994:	480c      	ldr	r0, [pc, #48]	; (800e9c8 <tcpip_init+0x90>)
 800e996:	f00c fad1 	bl	801af3c <sys_thread_new>
}
 800e99a:	bf00      	nop
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20004a74 	.word	0x20004a74
 800e9a8:	20004a78 	.word	0x20004a78
 800e9ac:	20004a7c 	.word	0x20004a7c
 800e9b0:	08025160 	.word	0x08025160
 800e9b4:	080251e8 	.word	0x080251e8
 800e9b8:	080251b0 	.word	0x080251b0
 800e9bc:	20008728 	.word	0x20008728
 800e9c0:	0802520c 	.word	0x0802520c
 800e9c4:	0800e6c9 	.word	0x0800e6c9
 800e9c8:	08025230 	.word	0x08025230

0800e9cc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d002      	beq.n	800e9e2 <fs_open+0x16>
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d102      	bne.n	800e9e8 <fs_open+0x1c>
    return ERR_ARG;
 800e9e2:	f06f 030f 	mvn.w	r3, #15
 800e9e6:	e037      	b.n	800ea58 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7f3 fff8 	bl	80029e0 <fs_open_custom>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d004      	beq.n	800ea00 <fs_open+0x34>
    file->is_custom_file = 1;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	e02b      	b.n	800ea58 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ea06:	4b16      	ldr	r3, [pc, #88]	; (800ea60 <fs_open+0x94>)
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	e020      	b.n	800ea4e <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	4619      	mov	r1, r3
 800ea12:	6838      	ldr	r0, [r7, #0]
 800ea14:	f7f1 fbfc 	bl	8000210 <strcmp>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d114      	bne.n	800ea48 <fs_open+0x7c>
      file->data = (const char *)f->data;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	689a      	ldr	r2, [r3, #8]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	68da      	ldr	r2, [r3, #12]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	68da      	ldr	r2, [r3, #12]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	7c1a      	ldrb	r2, [r3, #16]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ea44:	2300      	movs	r3, #0
 800ea46:	e007      	b.n	800ea58 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	60fb      	str	r3, [r7, #12]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d1db      	bne.n	800ea0c <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ea54:	f06f 0305 	mvn.w	r3, #5
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	08029588 	.word	0x08029588

0800ea64 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	7c5b      	ldrb	r3, [r3, #17]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <fs_close+0x16>
    fs_close_custom(file);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7f4 f8ed 	bl	8002c54 <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ea7a:	bf00      	nop
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ea82:	b480      	push	{r7}
 800ea84:	b083      	sub	sp, #12
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	685a      	ldr	r2, [r3, #4]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	1ad3      	subs	r3, r2, r3
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800eaa8:	2230      	movs	r2, #48	; 0x30
 800eaaa:	2100      	movs	r1, #0
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f00c fbdd 	bl	801b26c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800eab2:	bf00      	nop
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b082      	sub	sp, #8
 800eabe:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800eac0:	2030      	movs	r0, #48	; 0x30
 800eac2:	f001 facb 	bl	801005c <mem_malloc>
 800eac6:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d002      	beq.n	800ead4 <http_state_alloc+0x1a>
    http_state_init(ret);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff ffe6 	bl	800eaa0 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ead4:	687b      	ldr	r3, [r7, #4]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b082      	sub	sp, #8
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d007      	beq.n	800eafe <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7ff ffb6 	bl	800ea64 <fs_close>
    hs->handle = NULL;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d007      	beq.n	800eb16 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a1b      	ldr	r3, [r3, #32]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f002 face 	bl	80110ac <pbuf_free>
    hs->req = NULL;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800eb16:	bf00      	nop
 800eb18:	3708      	adds	r7, #8
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b082      	sub	sp, #8
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d005      	beq.n	800eb38 <http_state_free+0x1a>
    http_state_eof(hs);
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f7ff ffd6 	bl	800eade <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f001 f8f8 	bl	800fd28 <mem_free>
  }
}
 800eb38:	bf00      	nop
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d106      	bne.n	800eb62 <http_write+0x22>
 800eb54:	4b2c      	ldr	r3, [pc, #176]	; (800ec08 <http_write+0xc8>)
 800eb56:	f240 2219 	movw	r2, #537	; 0x219
 800eb5a:	492c      	ldr	r1, [pc, #176]	; (800ec0c <http_write+0xcc>)
 800eb5c:	482c      	ldr	r0, [pc, #176]	; (800ec10 <http_write+0xd0>)
 800eb5e:	f00c fe0b 	bl	801b778 <printf>
  len = *length;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800eb68:	8afb      	ldrh	r3, [r7, #22]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d101      	bne.n	800eb72 <http_write+0x32>
    return ERR_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e045      	b.n	800ebfe <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eb78:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800eb7a:	8aba      	ldrh	r2, [r7, #20]
 800eb7c:	8afb      	ldrh	r3, [r7, #22]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d201      	bcs.n	800eb86 <http_write+0x46>
    len = max_len;
 800eb82:	8abb      	ldrh	r3, [r7, #20]
 800eb84:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800eb8e:	8afa      	ldrh	r2, [r7, #22]
 800eb90:	8abb      	ldrh	r3, [r7, #20]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d901      	bls.n	800eb9a <http_write+0x5a>
    len = max_len;
 800eb96:	8abb      	ldrh	r3, [r7, #20]
 800eb98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800eb9a:	78fb      	ldrb	r3, [r7, #3]
 800eb9c:	8afa      	ldrh	r2, [r7, #22]
 800eb9e:	68b9      	ldr	r1, [r7, #8]
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f007 f87f 	bl	8015ca4 <tcp_write>
 800eba6:	4603      	mov	r3, r0
 800eba8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800ebaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb2:	d10f      	bne.n	800ebd4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d004      	beq.n	800ebc8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ebc4:	2b08      	cmp	r3, #8
 800ebc6:	d902      	bls.n	800ebce <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	82fb      	strh	r3, [r7, #22]
 800ebcc:	e002      	b.n	800ebd4 <http_write+0x94>
      } else {
        len /= 2;
 800ebce:	8afb      	ldrh	r3, [r7, #22]
 800ebd0:	085b      	lsrs	r3, r3, #1
 800ebd2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ebd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebdc:	d102      	bne.n	800ebe4 <http_write+0xa4>
 800ebde:	8afb      	ldrh	r3, [r7, #22]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d8da      	bhi.n	800eb9a <http_write+0x5a>

  if (err == ERR_OK) {
 800ebe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d103      	bne.n	800ebf4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	8afa      	ldrh	r2, [r7, #22]
 800ebf0:	801a      	strh	r2, [r3, #0]
 800ebf2:	e002      	b.n	800ebfa <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800ebfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	08025280 	.word	0x08025280
 800ec0c:	080252b8 	.word	0x080252b8
 800ec10:	080252c8 	.word	0x080252c8

0800ec14 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	4613      	mov	r3, r2
 800ec20:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00b      	beq.n	800ec40 <http_close_or_abort_conn+0x2c>
    if ((hs->post_content_len_left != 0)
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d007      	beq.n	800ec40 <http_close_or_abort_conn+0x2c>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800ec30:	4b1f      	ldr	r3, [pc, #124]	; (800ecb0 <http_close_or_abort_conn+0x9c>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800ec36:	223f      	movs	r2, #63	; 0x3f
 800ec38:	491d      	ldr	r1, [pc, #116]	; (800ecb0 <http_close_or_abort_conn+0x9c>)
 800ec3a:	68b8      	ldr	r0, [r7, #8]
 800ec3c:	f7f4 fe96 	bl	800396c <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ec40:	2100      	movs	r1, #0
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f004 f8f0 	bl	8012e28 <tcp_arg>
  altcp_recv(pcb, NULL);
 800ec48:	2100      	movs	r1, #0
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f004 f8fe 	bl	8012e4c <tcp_recv>
  altcp_err(pcb, NULL);
 800ec50:	2100      	movs	r1, #0
 800ec52:	68f8      	ldr	r0, [r7, #12]
 800ec54:	f004 f93e 	bl	8012ed4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ec58:	2200      	movs	r2, #0
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	68f8      	ldr	r0, [r7, #12]
 800ec5e:	f004 f973 	bl	8012f48 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ec62:	2100      	movs	r1, #0
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f004 f913 	bl	8012e90 <tcp_sent>
  if (hs != NULL) {
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d002      	beq.n	800ec76 <http_close_or_abort_conn+0x62>
    http_state_free(hs);
 800ec70:	68b8      	ldr	r0, [r7, #8]
 800ec72:	f7ff ff54 	bl	800eb1e <http_state_free>
  }

  if (abort_conn) {
 800ec76:	79fb      	ldrb	r3, [r7, #7]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d004      	beq.n	800ec86 <http_close_or_abort_conn+0x72>
    altcp_abort(pcb);
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f003 f815 	bl	8011cac <tcp_abort>
    return ERR_OK;
 800ec82:	2300      	movs	r3, #0
 800ec84:	e00f      	b.n	800eca6 <http_close_or_abort_conn+0x92>
  }
  err = altcp_close(pcb);
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f002 feca 	bl	8011a20 <tcp_close>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ec90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d004      	beq.n	800eca2 <http_close_or_abort_conn+0x8e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ec98:	2204      	movs	r2, #4
 800ec9a:	4906      	ldr	r1, [pc, #24]	; (800ecb4 <http_close_or_abort_conn+0xa0>)
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f004 f953 	bl	8012f48 <tcp_poll>
  }
  return err;
 800eca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	20004e80 	.word	0x20004e80
 800ecb4:	0800f687 	.word	0x0800f687

0800ecb8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	6839      	ldr	r1, [r7, #0]
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff ffa4 	bl	800ec14 <http_close_or_abort_conn>
 800eccc:	4603      	mov	r3, r0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b082      	sub	sp, #8
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
 800ecde:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ece0:	6839      	ldr	r1, [r7, #0]
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7ff ffe8 	bl	800ecb8 <http_close_conn>
  }
}
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	695b      	ldr	r3, [r3, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d105      	bne.n	800ed0e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7ff ffe6 	bl	800ecd6 <http_eof>
    return 0;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	e016      	b.n	800ed3c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7ff feb5 	bl	800ea82 <fs_bytes_left>
 800ed18:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	dc05      	bgt.n	800ed2c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff ffd7 	bl	800ecd6 <http_eof>
    return 0;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	e007      	b.n	800ed3c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ed2c:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <http_check_eof+0x54>)
 800ed2e:	f240 429d 	movw	r2, #1181	; 0x49d
 800ed32:	4905      	ldr	r1, [pc, #20]	; (800ed48 <http_check_eof+0x58>)
 800ed34:	4805      	ldr	r0, [pc, #20]	; (800ed4c <http_check_eof+0x5c>)
 800ed36:	f00c fd1f 	bl	801b778 <printf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ed3a:	2301      	movs	r3, #1
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	08025280 	.word	0x08025280
 800ed48:	080252f0 	.word	0x080252f0
 800ed4c:	080252c8 	.word	0x080252c8

0800ed50 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d803      	bhi.n	800ed72 <http_send_data_nonssi+0x22>
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	e001      	b.n	800ed76 <http_send_data_nonssi+0x26>
 800ed72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed76:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	6999      	ldr	r1, [r3, #24]
 800ed7c:	f107 020c 	add.w	r2, r7, #12
 800ed80:	2300      	movs	r3, #0
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7ff fedc 	bl	800eb40 <http_write>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800ed8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d10d      	bne.n	800edb0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800ed94:	2301      	movs	r3, #1
 800ed96:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	699b      	ldr	r3, [r3, #24]
 800ed9c:	89ba      	ldrh	r2, [r7, #12]
 800ed9e:	441a      	add	r2, r3
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda8:	89ba      	ldrh	r2, [r7, #12]
 800edaa:	1a9a      	subs	r2, r3, r2
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800edb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b084      	sub	sp, #16
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
 800edc2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800edc4:	2300      	movs	r3, #0
 800edc6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d101      	bne.n	800edd2 <http_send+0x18>
    return 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	e025      	b.n	800ee1e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d108      	bne.n	800edec <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7ff ff87 	bl	800ecf0 <http_check_eof>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d101      	bne.n	800edec <http_send+0x32>
      return 0;
 800ede8:	2300      	movs	r3, #0
 800edea:	e018      	b.n	800ee1e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800edec:	6839      	ldr	r1, [r7, #0]
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7ff ffae 	bl	800ed50 <http_send_data_nonssi>
 800edf4:	4603      	mov	r3, r0
 800edf6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10d      	bne.n	800ee1c <http_send+0x62>
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	695b      	ldr	r3, [r3, #20]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff fe3c 	bl	800ea82 <fs_bytes_left>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	dc05      	bgt.n	800ee1c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ee10:	6839      	ldr	r1, [r7, #0]
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f7ff ff5f 	bl	800ecd6 <http_eof>
    return 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	e000      	b.n	800ee1e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ee1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
	...

0800ee28 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	4a1c      	ldr	r2, [pc, #112]	; (800eea8 <http_get_404_file+0x80>)
 800ee36:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4619      	mov	r1, r3
 800ee40:	4610      	mov	r0, r2
 800ee42:	f7ff fdc3 	bl	800e9cc <fs_open>
 800ee46:	4603      	mov	r3, r0
 800ee48:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ee4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d024      	beq.n	800ee9c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	4a15      	ldr	r2, [pc, #84]	; (800eeac <http_get_404_file+0x84>)
 800ee56:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	4619      	mov	r1, r3
 800ee60:	4610      	mov	r0, r2
 800ee62:	f7ff fdb3 	bl	800e9cc <fs_open>
 800ee66:	4603      	mov	r3, r0
 800ee68:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ee6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d014      	beq.n	800ee9c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	4a0e      	ldr	r2, [pc, #56]	; (800eeb0 <http_get_404_file+0x88>)
 800ee76:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4619      	mov	r1, r3
 800ee80:	4610      	mov	r0, r2
 800ee82:	f7ff fda3 	bl	800e9cc <fs_open>
 800ee86:	4603      	mov	r3, r0
 800ee88:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800ee8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d004      	beq.n	800ee9c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	2200      	movs	r2, #0
 800ee96:	601a      	str	r2, [r3, #0]
        return NULL;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	e000      	b.n	800ee9e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800ee9c:	687b      	ldr	r3, [r7, #4]
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	08025328 	.word	0x08025328
 800eeac:	08025334 	.word	0x08025334
 800eeb0:	08025340 	.word	0x08025340

0800eeb4 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800eebc:	4b08      	ldr	r3, [pc, #32]	; (800eee0 <http_handle_post_finished+0x2c>)
 800eebe:	2200      	movs	r2, #0
 800eec0:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800eec2:	223f      	movs	r2, #63	; 0x3f
 800eec4:	4906      	ldr	r1, [pc, #24]	; (800eee0 <http_handle_post_finished+0x2c>)
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7f4 fd50 	bl	800396c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800eecc:	2200      	movs	r2, #0
 800eece:	4904      	ldr	r1, [pc, #16]	; (800eee0 <http_handle_post_finished+0x2c>)
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 fa51 	bl	800f378 <http_find_file>
 800eed6:	4603      	mov	r3, r0
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20004e80 	.word	0x20004e80

0800eee4 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d010      	beq.n	800ef16 <http_post_rxpbuf+0x32>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef8:	683a      	ldr	r2, [r7, #0]
 800eefa:	8912      	ldrh	r2, [r2, #8]
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d203      	bcs.n	800ef08 <http_post_rxpbuf+0x24>
      hs->post_content_len_left = 0;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	62da      	str	r2, [r3, #44]	; 0x2c
 800ef06:	e006      	b.n	800ef16 <http_post_rxpbuf+0x32>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	8912      	ldrh	r2, [r2, #8]
 800ef10:	1a9a      	subs	r2, r3, r2
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d006      	beq.n	800ef2a <http_post_rxpbuf+0x46>
    err = httpd_post_receive_data(hs, p);
 800ef1c:	6839      	ldr	r1, [r7, #0]
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f7f4 fb40 	bl	80035a4 <httpd_post_receive_data>
 800ef24:	4603      	mov	r3, r0
 800ef26:	73fb      	strb	r3, [r7, #15]
 800ef28:	e001      	b.n	800ef2e <http_post_rxpbuf+0x4a>
  } else {
    err = ERR_OK;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800ef2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d002      	beq.n	800ef3c <http_post_rxpbuf+0x58>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  if (hs->post_content_len_left == 0) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d104      	bne.n	800ef4e <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7ff ffb5 	bl	800eeb4 <http_handle_post_finished>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	e000      	b.n	800ef50 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b092      	sub	sp, #72	; 0x48
 800ef5c:	af04      	add	r7, sp, #16
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800ef66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef68:	1c58      	adds	r0, r3, #1
 800ef6a:	887a      	ldrh	r2, [r7, #2]
 800ef6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef6e:	1c59      	adds	r1, r3, #1
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	1acb      	subs	r3, r1, r3
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	461a      	mov	r2, r3
 800ef78:	4964      	ldr	r1, [pc, #400]	; (800f10c <http_post_request+0x1b4>)
 800ef7a:	f000 fd33 	bl	800f9e4 <lwip_strnstr>
 800ef7e:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800ef80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f000 80bc 	beq.w	800f100 <http_post_request+0x1a8>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800ef88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef8a:	1c58      	adds	r0, r3, #1
 800ef8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef8e:	3301      	adds	r3, #1
 800ef90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	461a      	mov	r2, r3
 800ef96:	495e      	ldr	r1, [pc, #376]	; (800f110 <http_post_request+0x1b8>)
 800ef98:	f000 fd24 	bl	800f9e4 <lwip_strnstr>
 800ef9c:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f000 80aa 	beq.w	800f0fa <http_post_request+0x1a2>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800efa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa8:	3310      	adds	r3, #16
 800efaa:	220a      	movs	r2, #10
 800efac:	4959      	ldr	r1, [pc, #356]	; (800f114 <http_post_request+0x1bc>)
 800efae:	4618      	mov	r0, r3
 800efb0:	f000 fd18 	bl	800f9e4 <lwip_strnstr>
 800efb4:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800efb6:	6a3b      	ldr	r3, [r7, #32]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 809e 	beq.w	800f0fa <http_post_request+0x1a2>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800efbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc0:	3310      	adds	r3, #16
 800efc2:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800efc4:	69f8      	ldr	r0, [r7, #28]
 800efc6:	f00b fffd 	bl	801afc4 <atoi>
 800efca:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800efcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10b      	bne.n	800efea <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	2b30      	cmp	r3, #48	; 0x30
 800efd8:	d104      	bne.n	800efe4 <http_post_request+0x8c>
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	3301      	adds	r3, #1
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	2b0d      	cmp	r3, #13
 800efe2:	d002      	beq.n	800efea <http_post_request+0x92>
            content_len = -1;
 800efe4:	f04f 33ff 	mov.w	r3, #4294967295
 800efe8:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800efea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efec:	2b00      	cmp	r3, #0
 800efee:	f2c0 8081 	blt.w	800f0f4 <http_post_request+0x19c>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800eff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eff4:	3301      	adds	r3, #1
 800eff6:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800eff8:	887a      	ldrh	r2, [r7, #2]
 800effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effc:	1d19      	adds	r1, r3, #4
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	1acb      	subs	r3, r1, r3
 800f002:	429a      	cmp	r2, r3
 800f004:	db05      	blt.n	800f012 <http_post_request+0xba>
 800f006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f008:	1d1a      	adds	r2, r3, #4
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	1ad3      	subs	r3, r2, r3
 800f00e:	b29b      	uxth	r3, r3
 800f010:	e000      	b.n	800f014 <http_post_request+0xbc>
 800f012:	887b      	ldrh	r3, [r7, #2]
 800f014:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800f016:	887a      	ldrh	r2, [r7, #2]
 800f018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01a:	1d19      	adds	r1, r3, #4
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	1acb      	subs	r3, r1, r3
 800f020:	429a      	cmp	r2, r3
 800f022:	db05      	blt.n	800f030 <http_post_request+0xd8>
 800f024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f026:	1d1a      	adds	r2, r3, #4
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	e000      	b.n	800f032 <http_post_request+0xda>
 800f030:	887b      	ldrh	r3, [r7, #2]
 800f032:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800f034:	2301      	movs	r3, #1
 800f036:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800f038:	4b37      	ldr	r3, [pc, #220]	; (800f118 <http_post_request+0x1c0>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	2200      	movs	r2, #0
 800f042:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800f044:	8aba      	ldrh	r2, [r7, #20]
 800f046:	f107 0312 	add.w	r3, r7, #18
 800f04a:	9303      	str	r3, [sp, #12]
 800f04c:	233f      	movs	r3, #63	; 0x3f
 800f04e:	9302      	str	r3, [sp, #8]
 800f050:	4b31      	ldr	r3, [pc, #196]	; (800f118 <http_post_request+0x1c0>)
 800f052:	9301      	str	r3, [sp, #4]
 800f054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f056:	9300      	str	r3, [sp, #0]
 800f058:	4613      	mov	r3, r2
 800f05a:	69ba      	ldr	r2, [r7, #24]
 800f05c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f05e:	68b8      	ldr	r0, [r7, #8]
 800f060:	f7f4 fa66 	bl	8003530 <httpd_post_begin>
 800f064:	4603      	mov	r3, r0
 800f066:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800f068:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d13a      	bne.n	800f0e6 <http_post_request+0x18e>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800f074:	8afb      	ldrh	r3, [r7, #22]
 800f076:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800f078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800f07e:	e007      	b.n	800f090 <http_post_request+0x138>
              start_offset -= q->len;
 800f080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f082:	895b      	ldrh	r3, [r3, #10]
 800f084:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800f08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800f090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f092:	2b00      	cmp	r3, #0
 800f094:	d004      	beq.n	800f0a0 <http_post_request+0x148>
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	895b      	ldrh	r3, [r3, #10]
 800f09a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d2ef      	bcs.n	800f080 <http_post_request+0x128>
            }
            if (q != NULL) {
 800f0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00d      	beq.n	800f0c2 <http_post_request+0x16a>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800f0a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ac:	f001 ff78 	bl	8010fa0 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800f0b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0b2:	f002 f8a1 	bl	80111f8 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800f0b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0b8:	68b8      	ldr	r0, [r7, #8]
 800f0ba:	f7ff ff13 	bl	800eee4 <http_post_rxpbuf>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	e020      	b.n	800f104 <http_post_request+0x1ac>
            } else if (hs->post_content_len_left == 0) {
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10b      	bne.n	800f0e2 <http_post_request+0x18a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800f0ca:	2241      	movs	r2, #65	; 0x41
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	f001 fd08 	bl	8010ae4 <pbuf_alloc>
 800f0d4:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800f0d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0d8:	68b8      	ldr	r0, [r7, #8]
 800f0da:	f7ff ff03 	bl	800eee4 <http_post_rxpbuf>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	e010      	b.n	800f104 <http_post_request+0x1ac>
            } else {
              return ERR_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e00e      	b.n	800f104 <http_post_request+0x1ac>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	490b      	ldr	r1, [pc, #44]	; (800f118 <http_post_request+0x1c0>)
 800f0ea:	68b8      	ldr	r0, [r7, #8]
 800f0ec:	f000 f944 	bl	800f378 <http_find_file>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	e007      	b.n	800f104 <http_post_request+0x1ac>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800f0f4:	f06f 030f 	mvn.w	r3, #15
 800f0f8:	e004      	b.n	800f104 <http_post_request+0x1ac>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800f0fa:	f06f 030f 	mvn.w	r3, #15
 800f0fe:	e001      	b.n	800f104 <http_post_request+0x1ac>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800f100:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800f104:	4618      	mov	r0, r3
 800f106:	3738      	adds	r7, #56	; 0x38
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	0802534c 	.word	0x0802534c
 800f110:	08025354 	.word	0x08025354
 800f114:	08025368 	.word	0x08025368
 800f118:	20004e80 	.word	0x20004e80

0800f11c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b092      	sub	sp, #72	; 0x48
 800f120:	af02      	add	r7, sp, #8
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800f12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d106      	bne.n	800f140 <http_parse_request+0x24>
 800f132:	4b87      	ldr	r3, [pc, #540]	; (800f350 <http_parse_request+0x234>)
 800f134:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800f138:	4986      	ldr	r1, [pc, #536]	; (800f354 <http_parse_request+0x238>)
 800f13a:	4887      	ldr	r0, [pc, #540]	; (800f358 <http_parse_request+0x23c>)
 800f13c:	f00c fb1c 	bl	801b778 <printf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d106      	bne.n	800f154 <http_parse_request+0x38>
 800f146:	4b82      	ldr	r3, [pc, #520]	; (800f350 <http_parse_request+0x234>)
 800f148:	f240 72af 	movw	r2, #1967	; 0x7af
 800f14c:	4983      	ldr	r1, [pc, #524]	; (800f35c <http_parse_request+0x240>)
 800f14e:	4882      	ldr	r0, [pc, #520]	; (800f358 <http_parse_request+0x23c>)
 800f150:	f00c fb12 	bl	801b778 <printf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	695b      	ldr	r3, [r3, #20]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d103      	bne.n	800f164 <http_parse_request+0x48>
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	699b      	ldr	r3, [r3, #24]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d002      	beq.n	800f16a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800f164:	f06f 0307 	mvn.w	r3, #7
 800f168:	e0ed      	b.n	800f346 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	6a1b      	ldr	r3, [r3, #32]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d103      	bne.n	800f17a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f176:	621a      	str	r2, [r3, #32]
 800f178:	e005      	b.n	800f186 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	6a1b      	ldr	r3, [r3, #32]
 800f17e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f180:	4618      	mov	r0, r3
 800f182:	f002 f861 	bl	8011248 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800f186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f188:	f002 f836 	bl	80111f8 <pbuf_ref>

  if (hs->req->next != NULL) {
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	6a1b      	ldr	r3, [r3, #32]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d012      	beq.n	800f1bc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	6a1b      	ldr	r3, [r3, #32]
 800f19a:	891b      	ldrh	r3, [r3, #8]
 800f19c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	bf28      	it	cs
 800f1a4:	4613      	movcs	r3, r2
 800f1a6:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	6a18      	ldr	r0, [r3, #32]
 800f1ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	496b      	ldr	r1, [pc, #428]	; (800f360 <http_parse_request+0x244>)
 800f1b2:	f002 f981 	bl	80114b8 <pbuf_copy_partial>
    data = httpd_req_buf;
 800f1b6:	4b6a      	ldr	r3, [pc, #424]	; (800f360 <http_parse_request+0x244>)
 800f1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1ba:	e005      	b.n	800f1c8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c4:	895b      	ldrh	r3, [r3, #10]
 800f1c6:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800f1c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f1ca:	2b06      	cmp	r3, #6
 800f1cc:	f240 80a1 	bls.w	800f312 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800f1d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	4963      	ldr	r1, [pc, #396]	; (800f364 <http_parse_request+0x248>)
 800f1d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1d8:	f000 fc04 	bl	800f9e4 <lwip_strnstr>
 800f1dc:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800f1de:	6a3b      	ldr	r3, [r7, #32]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 8096 	beq.w	800f312 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800f1ee:	2204      	movs	r2, #4
 800f1f0:	495d      	ldr	r1, [pc, #372]	; (800f368 <http_parse_request+0x24c>)
 800f1f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1f4:	f00c fb51 	bl	801b89a <strncmp>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d103      	bne.n	800f206 <http_parse_request+0xea>
        sp1 = data + 3;
 800f1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f200:	3303      	adds	r3, #3
 800f202:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f204:	e014      	b.n	800f230 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800f206:	2205      	movs	r2, #5
 800f208:	4958      	ldr	r1, [pc, #352]	; (800f36c <http_parse_request+0x250>)
 800f20a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f20c:	f00c fb45 	bl	801b89a <strncmp>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d105      	bne.n	800f222 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800f216:	2301      	movs	r3, #1
 800f218:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800f21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21c:	3304      	adds	r3, #4
 800f21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f220:	e006      	b.n	800f230 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800f222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f224:	3304      	adds	r3, #4
 800f226:	2200      	movs	r2, #0
 800f228:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800f22a:	f06f 030f 	mvn.w	r3, #15
 800f22e:	e08a      	b.n	800f346 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f232:	1c5a      	adds	r2, r3, #1
 800f234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	b29b      	uxth	r3, r3
 800f23a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	3301      	adds	r3, #1
 800f244:	8bfa      	ldrh	r2, [r7, #30]
 800f246:	494a      	ldr	r1, [pc, #296]	; (800f370 <http_parse_request+0x254>)
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 fbcb 	bl	800f9e4 <lwip_strnstr>
 800f24e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	2b00      	cmp	r3, #0
 800f254:	d10c      	bne.n	800f270 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	3301      	adds	r3, #1
 800f25a:	8bfa      	ldrh	r2, [r7, #30]
 800f25c:	4941      	ldr	r1, [pc, #260]	; (800f364 <http_parse_request+0x248>)
 800f25e:	4618      	mov	r0, r3
 800f260:	f000 fbc0 	bl	800f9e4 <lwip_strnstr>
 800f264:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800f266:	2301      	movs	r3, #1
 800f268:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800f26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d163      	bne.n	800f338 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	3301      	adds	r3, #1
 800f274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800f27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d048      	beq.n	800f312 <http_parse_request+0x1f6>
 800f280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f284:	429a      	cmp	r2, r3
 800f286:	d944      	bls.n	800f312 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800f288:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f28a:	461a      	mov	r2, r3
 800f28c:	4939      	ldr	r1, [pc, #228]	; (800f374 <http_parse_request+0x258>)
 800f28e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f290:	f000 fba8 	bl	800f9e4 <lwip_strnstr>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d03b      	beq.n	800f312 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800f29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29c:	3301      	adds	r3, #1
 800f29e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800f2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800f2a6:	8bbb      	ldrh	r3, [r7, #28]
 800f2a8:	69ba      	ldr	r2, [r7, #24]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800f2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d026      	beq.n	800f304 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6a1b      	ldr	r3, [r3, #32]
 800f2ba:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800f2bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c0:	9301      	str	r3, [sp, #4]
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f2ca:	68b9      	ldr	r1, [r7, #8]
 800f2cc:	6978      	ldr	r0, [r7, #20]
 800f2ce:	f7ff fe43 	bl	800ef58 <http_post_request>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800f2d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00a      	beq.n	800f2f4 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800f2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e0:	2220      	movs	r2, #32
 800f2e2:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800f2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e6:	2220      	movs	r2, #32
 800f2e8:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800f2ea:	8bbb      	ldrh	r3, [r7, #28]
 800f2ec:	69ba      	ldr	r2, [r7, #24]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	2220      	movs	r2, #32
 800f2f2:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800f2f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2f8:	f113 0f10 	cmn.w	r3, #16
 800f2fc:	d01e      	beq.n	800f33c <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800f2fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f302:	e020      	b.n	800f346 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800f304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f306:	69b9      	ldr	r1, [r7, #24]
 800f308:	68b8      	ldr	r0, [r7, #8]
 800f30a:	f000 f835 	bl	800f378 <http_find_file>
 800f30e:	4603      	mov	r3, r0
 800f310:	e019      	b.n	800f346 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	6a1b      	ldr	r3, [r3, #32]
 800f316:	4618      	mov	r0, r3
 800f318:	f001 ff56 	bl	80111c8 <pbuf_clen>
 800f31c:	4603      	mov	r3, r0
 800f31e:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	6a1b      	ldr	r3, [r3, #32]
 800f324:	891b      	ldrh	r3, [r3, #8]
 800f326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f32a:	d209      	bcs.n	800f340 <http_parse_request+0x224>
 800f32c:	8a3b      	ldrh	r3, [r7, #16]
 800f32e:	2b05      	cmp	r3, #5
 800f330:	d806      	bhi.n	800f340 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800f332:	f06f 0304 	mvn.w	r3, #4
 800f336:	e006      	b.n	800f346 <http_parse_request+0x22a>
          goto badrequest;
 800f338:	bf00      	nop
 800f33a:	e002      	b.n	800f342 <http_parse_request+0x226>
              goto badrequest;
 800f33c:	bf00      	nop
 800f33e:	e000      	b.n	800f342 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800f340:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800f342:	f06f 030f 	mvn.w	r3, #15
  }
}
 800f346:	4618      	mov	r0, r3
 800f348:	3740      	adds	r7, #64	; 0x40
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	08025280 	.word	0x08025280
 800f354:	0802536c 	.word	0x0802536c
 800f358:	080252c8 	.word	0x080252c8
 800f35c:	08025378 	.word	0x08025378
 800f360:	20004a80 	.word	0x20004a80
 800f364:	08025368 	.word	0x08025368
 800f368:	08025384 	.word	0x08025384
 800f36c:	0802538c 	.word	0x0802538c
 800f370:	08025394 	.word	0x08025394
 800f374:	0802534c 	.word	0x0802534c

0800f378 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b092      	sub	sp, #72	; 0x48
 800f37c:	af02      	add	r7, sp, #8
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800f384:	2300      	movs	r3, #0
 800f386:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800f388:	2300      	movs	r3, #0
 800f38a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800f38c:	2300      	movs	r3, #0
 800f38e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	4618      	mov	r0, r3
 800f396:	f7f0 ff45 	bl	8000224 <strlen>
 800f39a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d06b      	beq.n	800f47a <http_find_file+0x102>
 800f3a2:	68ba      	ldr	r2, [r7, #8]
 800f3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a6:	3b01      	subs	r3, #1
 800f3a8:	4413      	add	r3, r2
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	2b2f      	cmp	r3, #47	; 0x2f
 800f3ae:	d164      	bne.n	800f47a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f3b0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f3b2:	4a53      	ldr	r2, [pc, #332]	; (800f500 <http_find_file+0x188>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d102      	bne.n	800f3be <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d15d      	bne.n	800f47a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	2b3f      	cmp	r3, #63	; 0x3f
 800f3c4:	bf28      	it	cs
 800f3c6:	233f      	movcs	r3, #63	; 0x3f
 800f3c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00a      	beq.n	800f3e6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	484a      	ldr	r0, [pc, #296]	; (800f500 <http_find_file+0x188>)
 800f3d8:	f00b ff20 	bl	801b21c <memcpy>
      http_uri_buf[copy_len] = 0;
 800f3dc:	4a48      	ldr	r2, [pc, #288]	; (800f500 <http_find_file+0x188>)
 800f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e0:	4413      	add	r3, r2
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3ea:	e043      	b.n	800f474 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d028      	beq.n	800f444 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800f3f8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d01e      	beq.n	800f43e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800f400:	4a40      	ldr	r2, [pc, #256]	; (800f504 <http_find_file+0x18c>)
 800f402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f404:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f408:	4618      	mov	r0, r3
 800f40a:	f7f0 ff0b 	bl	8000224 <strlen>
 800f40e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800f410:	69fa      	ldr	r2, [r7, #28]
 800f412:	6a3b      	ldr	r3, [r7, #32]
 800f414:	4293      	cmp	r3, r2
 800f416:	bf28      	it	cs
 800f418:	4613      	movcs	r3, r2
 800f41a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	4a38      	ldr	r2, [pc, #224]	; (800f500 <http_find_file+0x188>)
 800f420:	1898      	adds	r0, r3, r2
 800f422:	4a38      	ldr	r2, [pc, #224]	; (800f504 <http_find_file+0x18c>)
 800f424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f426:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f42a:	69ba      	ldr	r2, [r7, #24]
 800f42c:	4619      	mov	r1, r3
 800f42e:	f00b fef5 	bl	801b21c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800f432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	4413      	add	r3, r2
 800f438:	4a31      	ldr	r2, [pc, #196]	; (800f500 <http_find_file+0x188>)
 800f43a:	2100      	movs	r1, #0
 800f43c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800f43e:	4b30      	ldr	r3, [pc, #192]	; (800f500 <http_find_file+0x188>)
 800f440:	633b      	str	r3, [r7, #48]	; 0x30
 800f442:	e004      	b.n	800f44e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800f444:	4a2f      	ldr	r2, [pc, #188]	; (800f504 <http_find_file+0x18c>)
 800f446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f448:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f44c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff faba 	bl	800e9cc <fs_open>
 800f458:	4603      	mov	r3, r0
 800f45a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800f45c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d104      	bne.n	800f46e <http_find_file+0xf6>
        uri = file_name;
 800f464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f466:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800f46c:	e005      	b.n	800f47a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f470:	3301      	adds	r3, #1
 800f472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f476:	2b04      	cmp	r3, #4
 800f478:	d9b8      	bls.n	800f3ec <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800f47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d124      	bne.n	800f4ca <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	213f      	movs	r1, #63	; 0x3f
 800f484:	4618      	mov	r0, r3
 800f486:	f00c f9fb 	bl	801b880 <strchr>
 800f48a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800f48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d005      	beq.n	800f49e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800f492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f494:	2200      	movs	r2, #0
 800f496:	701a      	strb	r2, [r3, #0]
      params++;
 800f498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49a:	3301      	adds	r3, #1
 800f49c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	68ba      	ldr	r2, [r7, #8]
 800f4a2:	4611      	mov	r1, r2
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7ff fa91 	bl	800e9cc <fs_open>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800f4ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d102      	bne.n	800f4bc <http_find_file+0x144>
      file = &hs->file_handle;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4ba:	e006      	b.n	800f4ca <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800f4bc:	f107 0308 	add.w	r3, r7, #8
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	68f8      	ldr	r0, [r7, #12]
 800f4c4:	f7ff fcb0 	bl	800ee28 <http_get_404_file>
 800f4c8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d106      	bne.n	800f4de <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800f4d0:	f107 0308 	add.w	r3, r7, #8
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f7ff fca6 	bl	800ee28 <http_get_404_file>
 800f4dc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4e2:	9301      	str	r3, [sp, #4]
 800f4e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f000 f809 	bl	800f508 <http_init_file>
 800f4f6:	4603      	mov	r3, r0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3740      	adds	r7, #64	; 0x40
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	20004e80 	.word	0x20004e80
 800f504:	0802959c 	.word	0x0802959c

0800f508 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d068      	beq.n	800f5ee <http_init_file+0xe6>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d106      	bne.n	800f532 <http_init_file+0x2a>
 800f524:	4b3b      	ldr	r3, [pc, #236]	; (800f614 <http_init_file+0x10c>)
 800f526:	f640 120b 	movw	r2, #2315	; 0x90b
 800f52a:	493b      	ldr	r1, [pc, #236]	; (800f618 <http_init_file+0x110>)
 800f52c:	483b      	ldr	r0, [pc, #236]	; (800f61c <http_init_file+0x114>)
 800f52e:	f00c f923 	bl	801b778 <printf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	da06      	bge.n	800f556 <http_init_file+0x4e>
 800f548:	4b32      	ldr	r3, [pc, #200]	; (800f614 <http_init_file+0x10c>)
 800f54a:	f640 1234 	movw	r2, #2356	; 0x934
 800f54e:	4934      	ldr	r1, [pc, #208]	; (800f620 <http_init_file+0x118>)
 800f550:	4832      	ldr	r0, [pc, #200]	; (800f61c <http_init_file+0x114>)
 800f552:	f00c f911 	bl	801b778 <printf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	7c5b      	ldrb	r3, [r3, #17]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d007      	beq.n	800f56e <http_init_file+0x66>
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d103      	bne.n	800f56e <http_init_file+0x66>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	625a      	str	r2, [r3, #36]	; 0x24
 800f56c:	e004      	b.n	800f578 <http_init_file+0x70>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	461a      	mov	r2, r3
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	695b      	ldr	r3, [r3, #20]
 800f584:	7c1b      	ldrb	r3, [r3, #16]
 800f586:	f003 0301 	and.w	r3, r3, #1
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d106      	bne.n	800f59c <http_init_file+0x94>
 800f58e:	4b21      	ldr	r3, [pc, #132]	; (800f614 <http_init_file+0x10c>)
 800f590:	f640 1243 	movw	r2, #2371	; 0x943
 800f594:	4923      	ldr	r1, [pc, #140]	; (800f624 <http_init_file+0x11c>)
 800f596:	4821      	ldr	r0, [pc, #132]	; (800f61c <http_init_file+0x114>)
 800f598:	f00c f8ee 	bl	801b778 <printf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d032      	beq.n	800f608 <http_init_file+0x100>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	695b      	ldr	r3, [r3, #20]
 800f5a6:	7c1b      	ldrb	r3, [r3, #16]
 800f5a8:	f003 0301 	and.w	r3, r3, #1
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d02b      	beq.n	800f608 <http_init_file+0x100>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6998      	ldr	r0, [r3, #24]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	491b      	ldr	r1, [pc, #108]	; (800f628 <http_init_file+0x120>)
 800f5bc:	f000 fa12 	bl	800f9e4 <lwip_strnstr>
 800f5c0:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d01f      	beq.n	800f608 <http_init_file+0x100>
        int diff = file_start + 4 - hs->file;
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	1d1a      	adds	r2, r3, #4
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	699b      	ldr	r3, [r3, #24]
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	699a      	ldr	r2, [r3, #24]
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	441a      	add	r2, r3
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	1ad2      	subs	r2, r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	625a      	str	r2, [r3, #36]	; 0x24
 800f5ec:	e00c      	b.n	800f608 <http_init_file+0x100>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2200      	movs	r2, #0
 800f604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800f608:	2300      	movs	r3, #0
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3718      	adds	r7, #24
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	08025280 	.word	0x08025280
 800f618:	08025398 	.word	0x08025398
 800f61c:	080252c8 	.word	0x080252c8
 800f620:	080253ac 	.word	0x080253ac
 800f624:	080253cc 	.word	0x080253cc
 800f628:	0802534c 	.word	0x0802534c

0800f62c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	460b      	mov	r3, r1
 800f636:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d002      	beq.n	800f648 <http_err+0x1c>
    http_state_free(hs);
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f7ff fa6b 	bl	800eb1e <http_state_free>
  }
}
 800f648:	bf00      	nop
 800f64a:	3710      	adds	r7, #16
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	4613      	mov	r3, r2
 800f65c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d101      	bne.n	800f66c <http_sent+0x1c>
    return ERR_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	e008      	b.n	800f67e <http_sent+0x2e>
  }

  hs->retries = 0;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800f674:	6979      	ldr	r1, [r7, #20]
 800f676:	68b8      	ldr	r0, [r7, #8]
 800f678:	f7ff fb9f 	bl	800edba <http_send>

  return ERR_OK;
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3718      	adds	r7, #24
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800f686:	b580      	push	{r7, lr}
 800f688:	b084      	sub	sp, #16
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
 800f68e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d107      	bne.n	800f6aa <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800f69a:	2100      	movs	r1, #0
 800f69c:	6838      	ldr	r0, [r7, #0]
 800f69e:	f7ff fb0b 	bl	800ecb8 <http_close_conn>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e021      	b.n	800f6ee <http_poll+0x68>
  } else {
    hs->retries++;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	b2da      	uxtb	r2, r3
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6c0:	2b04      	cmp	r3, #4
 800f6c2:	d105      	bne.n	800f6d0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800f6c4:	68f9      	ldr	r1, [r7, #12]
 800f6c6:	6838      	ldr	r0, [r7, #0]
 800f6c8:	f7ff faf6 	bl	800ecb8 <http_close_conn>
      return ERR_OK;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	e00e      	b.n	800f6ee <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d009      	beq.n	800f6ec <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800f6d8:	68f9      	ldr	r1, [r7, #12]
 800f6da:	6838      	ldr	r0, [r7, #0]
 800f6dc:	f7ff fb6d 	bl	800edba <http_send>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d002      	beq.n	800f6ec <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800f6e6:	6838      	ldr	r0, [r7, #0]
 800f6e8:	f007 f8c6 	bl	8016878 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800f70a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d105      	bne.n	800f71e <http_recv+0x26>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d002      	beq.n	800f71e <http_recv+0x26>
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d111      	bne.n	800f742 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d008      	beq.n	800f736 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	891b      	ldrh	r3, [r3, #8]
 800f728:	4619      	mov	r1, r3
 800f72a:	68b8      	ldr	r0, [r7, #8]
 800f72c:	f002 fc98 	bl	8012060 <tcp_recved>
      pbuf_free(p);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f001 fcbb 	bl	80110ac <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800f736:	6979      	ldr	r1, [r7, #20]
 800f738:	68b8      	ldr	r0, [r7, #8]
 800f73a:	f7ff fabd 	bl	800ecb8 <http_close_conn>
    return ERR_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	e06f      	b.n	800f822 <http_recv+0x12a>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	891b      	ldrh	r3, [r3, #8]
 800f746:	4619      	mov	r1, r3
 800f748:	68b8      	ldr	r0, [r7, #8]
 800f74a:	f002 fc89 	bl	8012060 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f752:	2b00      	cmp	r3, #0
 800f754:	d011      	beq.n	800f77a <http_recv+0x82>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	2200      	movs	r2, #0
 800f75a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800f75e:	6879      	ldr	r1, [r7, #4]
 800f760:	6978      	ldr	r0, [r7, #20]
 800f762:	f7ff fbbf 	bl	800eee4 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d103      	bne.n	800f776 <http_recv+0x7e>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800f76e:	6979      	ldr	r1, [r7, #20]
 800f770:	68b8      	ldr	r0, [r7, #8]
 800f772:	f7ff fb22 	bl	800edba <http_send>
    }
    return ERR_OK;
 800f776:	2300      	movs	r3, #0
 800f778:	e053      	b.n	800f822 <http_recv+0x12a>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d14b      	bne.n	800f81a <http_recv+0x122>
      err_t parsed = http_parse_request(p, hs, pcb);
 800f782:	68ba      	ldr	r2, [r7, #8]
 800f784:	6979      	ldr	r1, [r7, #20]
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7ff fcc8 	bl	800f11c <http_parse_request>
 800f78c:	4603      	mov	r3, r0
 800f78e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800f790:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d015      	beq.n	800f7c4 <http_recv+0xcc>
 800f798:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f79c:	f113 0f05 	cmn.w	r3, #5
 800f7a0:	d010      	beq.n	800f7c4 <http_recv+0xcc>
 800f7a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7a6:	f113 0f10 	cmn.w	r3, #16
 800f7aa:	d00b      	beq.n	800f7c4 <http_recv+0xcc>
 800f7ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7b0:	f113 0f08 	cmn.w	r3, #8
 800f7b4:	d006      	beq.n	800f7c4 <http_recv+0xcc>
 800f7b6:	4b1d      	ldr	r3, [pc, #116]	; (800f82c <http_recv+0x134>)
 800f7b8:	f640 2204 	movw	r2, #2564	; 0xa04
 800f7bc:	491c      	ldr	r1, [pc, #112]	; (800f830 <http_recv+0x138>)
 800f7be:	481d      	ldr	r0, [pc, #116]	; (800f834 <http_recv+0x13c>)
 800f7c0:	f00b ffda 	bl	801b778 <printf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800f7c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7c8:	f113 0f05 	cmn.w	r3, #5
 800f7cc:	d00b      	beq.n	800f7e6 <http_recv+0xee>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	6a1b      	ldr	r3, [r3, #32]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d007      	beq.n	800f7e6 <http_recv+0xee>
          pbuf_free(hs->req);
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	6a1b      	ldr	r3, [r3, #32]
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f001 fc66 	bl	80110ac <pbuf_free>
          hs->req = NULL;
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f001 fc60 	bl	80110ac <pbuf_free>
      if (parsed == ERR_OK) {
 800f7ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d108      	bne.n	800f806 <http_recv+0x10e>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d111      	bne.n	800f820 <http_recv+0x128>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800f7fc:	6979      	ldr	r1, [r7, #20]
 800f7fe:	68b8      	ldr	r0, [r7, #8]
 800f800:	f7ff fadb 	bl	800edba <http_send>
 800f804:	e00c      	b.n	800f820 <http_recv+0x128>
        }
      } else if (parsed == ERR_ARG) {
 800f806:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f80a:	f113 0f10 	cmn.w	r3, #16
 800f80e:	d107      	bne.n	800f820 <http_recv+0x128>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800f810:	6979      	ldr	r1, [r7, #20]
 800f812:	68b8      	ldr	r0, [r7, #8]
 800f814:	f7ff fa50 	bl	800ecb8 <http_close_conn>
 800f818:	e002      	b.n	800f820 <http_recv+0x128>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f001 fc46 	bl	80110ac <pbuf_free>
    }
  }
  return ERR_OK;
 800f820:	2300      	movs	r3, #0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3718      	adds	r7, #24
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	08025280 	.word	0x08025280
 800f830:	080253f8 	.word	0x080253f8
 800f834:	080252c8 	.word	0x080252c8

0800f838 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b086      	sub	sp, #24
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	4613      	mov	r3, r2
 800f844:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800f846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d102      	bne.n	800f854 <http_accept+0x1c>
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d102      	bne.n	800f85a <http_accept+0x22>
    return ERR_VAL;
 800f854:	f06f 0305 	mvn.w	r3, #5
 800f858:	e025      	b.n	800f8a6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f85a:	2101      	movs	r1, #1
 800f85c:	68b8      	ldr	r0, [r7, #8]
 800f85e:	f003 f8e3 	bl	8012a28 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800f862:	f7ff f92a 	bl	800eaba <http_state_alloc>
 800f866:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d102      	bne.n	800f874 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800f86e:	f04f 33ff 	mov.w	r3, #4294967295
 800f872:	e018      	b.n	800f8a6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	68ba      	ldr	r2, [r7, #8]
 800f878:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800f87a:	6979      	ldr	r1, [r7, #20]
 800f87c:	68b8      	ldr	r0, [r7, #8]
 800f87e:	f003 fad3 	bl	8012e28 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800f882:	490b      	ldr	r1, [pc, #44]	; (800f8b0 <http_accept+0x78>)
 800f884:	68b8      	ldr	r0, [r7, #8]
 800f886:	f003 fae1 	bl	8012e4c <tcp_recv>
  altcp_err(pcb, http_err);
 800f88a:	490a      	ldr	r1, [pc, #40]	; (800f8b4 <http_accept+0x7c>)
 800f88c:	68b8      	ldr	r0, [r7, #8]
 800f88e:	f003 fb21 	bl	8012ed4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800f892:	2204      	movs	r2, #4
 800f894:	4908      	ldr	r1, [pc, #32]	; (800f8b8 <http_accept+0x80>)
 800f896:	68b8      	ldr	r0, [r7, #8]
 800f898:	f003 fb56 	bl	8012f48 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800f89c:	4907      	ldr	r1, [pc, #28]	; (800f8bc <http_accept+0x84>)
 800f89e:	68b8      	ldr	r0, [r7, #8]
 800f8a0:	f003 faf6 	bl	8012e90 <tcp_sent>

  return ERR_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3718      	adds	r7, #24
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	0800f6f9 	.word	0x0800f6f9
 800f8b4:	0800f62d 	.word	0x0800f62d
 800f8b8:	0800f687 	.word	0x0800f687
 800f8bc:	0800f651 	.word	0x0800f651

0800f8c0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d029      	beq.n	800f926 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f8d2:	2101      	movs	r1, #1
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f003 f8a7 	bl	8012a28 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800f8da:	887b      	ldrh	r3, [r7, #2]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4914      	ldr	r1, [pc, #80]	; (800f930 <httpd_init_pcb+0x70>)
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f002 f9ef 	bl	8011cc4 <tcp_bind>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800f8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d006      	beq.n	800f900 <httpd_init_pcb+0x40>
 800f8f2:	4b10      	ldr	r3, [pc, #64]	; (800f934 <httpd_init_pcb+0x74>)
 800f8f4:	f640 2257 	movw	r2, #2647	; 0xa57
 800f8f8:	490f      	ldr	r1, [pc, #60]	; (800f938 <httpd_init_pcb+0x78>)
 800f8fa:	4810      	ldr	r0, [pc, #64]	; (800f93c <httpd_init_pcb+0x7c>)
 800f8fc:	f00b ff3c 	bl	801b778 <printf>
    pcb = altcp_listen(pcb);
 800f900:	21ff      	movs	r1, #255	; 0xff
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f002 fa96 	bl	8011e34 <tcp_listen_with_backlog>
 800f908:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d106      	bne.n	800f91e <httpd_init_pcb+0x5e>
 800f910:	4b08      	ldr	r3, [pc, #32]	; (800f934 <httpd_init_pcb+0x74>)
 800f912:	f640 2259 	movw	r2, #2649	; 0xa59
 800f916:	490a      	ldr	r1, [pc, #40]	; (800f940 <httpd_init_pcb+0x80>)
 800f918:	4808      	ldr	r0, [pc, #32]	; (800f93c <httpd_init_pcb+0x7c>)
 800f91a:	f00b ff2d 	bl	801b778 <printf>
    altcp_accept(pcb, http_accept);
 800f91e:	4909      	ldr	r1, [pc, #36]	; (800f944 <httpd_init_pcb+0x84>)
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f003 faf9 	bl	8012f18 <tcp_accept>
  }
}
 800f926:	bf00      	nop
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	080296d4 	.word	0x080296d4
 800f934:	08025280 	.word	0x08025280
 800f938:	08025424 	.word	0x08025424
 800f93c:	080252c8 	.word	0x080252c8
 800f940:	08025440 	.word	0x08025440
 800f944:	0800f839 	.word	0x0800f839

0800f948 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800f94e:	202e      	movs	r0, #46	; 0x2e
 800f950:	f003 fa5c 	bl	8012e0c <tcp_new_ip_type>
 800f954:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d106      	bne.n	800f96a <httpd_init+0x22>
 800f95c:	4b07      	ldr	r3, [pc, #28]	; (800f97c <httpd_init+0x34>)
 800f95e:	f640 2272 	movw	r2, #2674	; 0xa72
 800f962:	4907      	ldr	r1, [pc, #28]	; (800f980 <httpd_init+0x38>)
 800f964:	4807      	ldr	r0, [pc, #28]	; (800f984 <httpd_init+0x3c>)
 800f966:	f00b ff07 	bl	801b778 <printf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800f96a:	2150      	movs	r1, #80	; 0x50
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7ff ffa7 	bl	800f8c0 <httpd_init_pcb>
}
 800f972:	bf00      	nop
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	08025280 	.word	0x08025280
 800f980:	08025460 	.word	0x08025460
 800f984:	080252c8 	.word	0x080252c8

0800f988 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	4603      	mov	r3, r0
 800f990:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f992:	88fb      	ldrh	r3, [r7, #6]
 800f994:	021b      	lsls	r3, r3, #8
 800f996:	b21a      	sxth	r2, r3
 800f998:	88fb      	ldrh	r3, [r7, #6]
 800f99a:	0a1b      	lsrs	r3, r3, #8
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	b21b      	sxth	r3, r3
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	b21b      	sxth	r3, r3
 800f9a4:	b29b      	uxth	r3, r3
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	370c      	adds	r7, #12
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr

0800f9b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f9b2:	b480      	push	{r7}
 800f9b4:	b083      	sub	sp, #12
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	061a      	lsls	r2, r3, #24
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	021b      	lsls	r3, r3, #8
 800f9c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f9c6:	431a      	orrs	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	0a1b      	lsrs	r3, r3, #8
 800f9cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f9d0:	431a      	orrs	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	0e1b      	lsrs	r3, r3, #24
 800f9d6:	4313      	orrs	r3, r2
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800f9f0:	68b8      	ldr	r0, [r7, #8]
 800f9f2:	f7f0 fc17 	bl	8000224 <strlen>
 800f9f6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d101      	bne.n	800fa02 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	e022      	b.n	800fa48 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	617b      	str	r3, [r7, #20]
 800fa06:	e012      	b.n	800fa2e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	781a      	ldrb	r2, [r3, #0]
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d109      	bne.n	800fa28 <lwip_strnstr+0x44>
 800fa14:	693a      	ldr	r2, [r7, #16]
 800fa16:	68b9      	ldr	r1, [r7, #8]
 800fa18:	6978      	ldr	r0, [r7, #20]
 800fa1a:	f00b ff3e 	bl	801b89a <strncmp>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	e00f      	b.n	800fa48 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	617b      	str	r3, [r7, #20]
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d007      	beq.n	800fa46 <lwip_strnstr+0x62>
 800fa36:	697a      	ldr	r2, [r7, #20]
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	441a      	add	r2, r3
 800fa3c:	68f9      	ldr	r1, [r7, #12]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	440b      	add	r3, r1
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d9e0      	bls.n	800fa08 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3718      	adds	r7, #24
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fa5a:	f00b fa29 	bl	801aeb0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fa5e:	f000 f8d5 	bl	800fc0c <mem_init>
  memp_init();
 800fa62:	f000 fc31 	bl	80102c8 <memp_init>
  pbuf_init();
  netif_init();
 800fa66:	f000 fcf7 	bl	8010458 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fa6a:	f007 fff5 	bl	8017a58 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fa6e:	f001 fdc7 	bl	8011600 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fa72:	f007 ff37 	bl	80178e4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fa76:	bf00      	nop
 800fa78:	3708      	adds	r7, #8
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
	...

0800fa80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4603      	mov	r3, r0
 800fa88:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fa8a:	4b05      	ldr	r3, [pc, #20]	; (800faa0 <ptr_to_mem+0x20>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	88fb      	ldrh	r3, [r7, #6]
 800fa90:	4413      	add	r3, r2
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	370c      	adds	r7, #12
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	20004ec0 	.word	0x20004ec0

0800faa4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800faac:	4b05      	ldr	r3, [pc, #20]	; (800fac4 <mem_to_ptr+0x20>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	1ad3      	subs	r3, r2, r3
 800fab4:	b29b      	uxth	r3, r3
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	370c      	adds	r7, #12
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	20004ec0 	.word	0x20004ec0

0800fac8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fac8:	b590      	push	{r4, r7, lr}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fad0:	4b45      	ldr	r3, [pc, #276]	; (800fbe8 <plug_holes+0x120>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d206      	bcs.n	800fae8 <plug_holes+0x20>
 800fada:	4b44      	ldr	r3, [pc, #272]	; (800fbec <plug_holes+0x124>)
 800fadc:	f240 12df 	movw	r2, #479	; 0x1df
 800fae0:	4943      	ldr	r1, [pc, #268]	; (800fbf0 <plug_holes+0x128>)
 800fae2:	4844      	ldr	r0, [pc, #272]	; (800fbf4 <plug_holes+0x12c>)
 800fae4:	f00b fe48 	bl	801b778 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fae8:	4b43      	ldr	r3, [pc, #268]	; (800fbf8 <plug_holes+0x130>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	429a      	cmp	r2, r3
 800faf0:	d306      	bcc.n	800fb00 <plug_holes+0x38>
 800faf2:	4b3e      	ldr	r3, [pc, #248]	; (800fbec <plug_holes+0x124>)
 800faf4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800faf8:	4940      	ldr	r1, [pc, #256]	; (800fbfc <plug_holes+0x134>)
 800fafa:	483e      	ldr	r0, [pc, #248]	; (800fbf4 <plug_holes+0x12c>)
 800fafc:	f00b fe3c 	bl	801b778 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	791b      	ldrb	r3, [r3, #4]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d006      	beq.n	800fb16 <plug_holes+0x4e>
 800fb08:	4b38      	ldr	r3, [pc, #224]	; (800fbec <plug_holes+0x124>)
 800fb0a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fb0e:	493c      	ldr	r1, [pc, #240]	; (800fc00 <plug_holes+0x138>)
 800fb10:	4838      	ldr	r0, [pc, #224]	; (800fbf4 <plug_holes+0x12c>)
 800fb12:	f00b fe31 	bl	801b778 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb1e:	d906      	bls.n	800fb2e <plug_holes+0x66>
 800fb20:	4b32      	ldr	r3, [pc, #200]	; (800fbec <plug_holes+0x124>)
 800fb22:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fb26:	4937      	ldr	r1, [pc, #220]	; (800fc04 <plug_holes+0x13c>)
 800fb28:	4832      	ldr	r0, [pc, #200]	; (800fbf4 <plug_holes+0x12c>)
 800fb2a:	f00b fe25 	bl	801b778 <printf>

  nmem = ptr_to_mem(mem->next);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	881b      	ldrh	r3, [r3, #0]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7ff ffa4 	bl	800fa80 <ptr_to_mem>
 800fb38:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d024      	beq.n	800fb8c <plug_holes+0xc4>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	791b      	ldrb	r3, [r3, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d120      	bne.n	800fb8c <plug_holes+0xc4>
 800fb4a:	4b2b      	ldr	r3, [pc, #172]	; (800fbf8 <plug_holes+0x130>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d01b      	beq.n	800fb8c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fb54:	4b2c      	ldr	r3, [pc, #176]	; (800fc08 <plug_holes+0x140>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d102      	bne.n	800fb64 <plug_holes+0x9c>
      lfree = mem;
 800fb5e:	4a2a      	ldr	r2, [pc, #168]	; (800fc08 <plug_holes+0x140>)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	881a      	ldrh	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	881b      	ldrh	r3, [r3, #0]
 800fb70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb74:	d00a      	beq.n	800fb8c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7ff ff80 	bl	800fa80 <ptr_to_mem>
 800fb80:	4604      	mov	r4, r0
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7ff ff8e 	bl	800faa4 <mem_to_ptr>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	885b      	ldrh	r3, [r3, #2]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7ff ff75 	bl	800fa80 <ptr_to_mem>
 800fb96:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d01f      	beq.n	800fbe0 <plug_holes+0x118>
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	791b      	ldrb	r3, [r3, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d11b      	bne.n	800fbe0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fba8:	4b17      	ldr	r3, [pc, #92]	; (800fc08 <plug_holes+0x140>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d102      	bne.n	800fbb8 <plug_holes+0xf0>
      lfree = pmem;
 800fbb2:	4a15      	ldr	r2, [pc, #84]	; (800fc08 <plug_holes+0x140>)
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	881a      	ldrh	r2, [r3, #0]
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fbc8:	d00a      	beq.n	800fbe0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7ff ff56 	bl	800fa80 <ptr_to_mem>
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	68b8      	ldr	r0, [r7, #8]
 800fbd8:	f7ff ff64 	bl	800faa4 <mem_to_ptr>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fbe0:	bf00      	nop
 800fbe2:	3714      	adds	r7, #20
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd90      	pop	{r4, r7, pc}
 800fbe8:	20004ec0 	.word	0x20004ec0
 800fbec:	0802547c 	.word	0x0802547c
 800fbf0:	080254ac 	.word	0x080254ac
 800fbf4:	080254c4 	.word	0x080254c4
 800fbf8:	20004ec4 	.word	0x20004ec4
 800fbfc:	080254ec 	.word	0x080254ec
 800fc00:	08025508 	.word	0x08025508
 800fc04:	08025524 	.word	0x08025524
 800fc08:	20004ecc 	.word	0x20004ecc

0800fc0c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fc12:	4b1f      	ldr	r3, [pc, #124]	; (800fc90 <mem_init+0x84>)
 800fc14:	3303      	adds	r3, #3
 800fc16:	f023 0303 	bic.w	r3, r3, #3
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	4b1d      	ldr	r3, [pc, #116]	; (800fc94 <mem_init+0x88>)
 800fc1e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fc20:	4b1c      	ldr	r3, [pc, #112]	; (800fc94 <mem_init+0x88>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc2c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fc3a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800fc3e:	f7ff ff1f 	bl	800fa80 <ptr_to_mem>
 800fc42:	4603      	mov	r3, r0
 800fc44:	4a14      	ldr	r2, [pc, #80]	; (800fc98 <mem_init+0x8c>)
 800fc46:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fc48:	4b13      	ldr	r3, [pc, #76]	; (800fc98 <mem_init+0x8c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fc50:	4b11      	ldr	r3, [pc, #68]	; (800fc98 <mem_init+0x8c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc58:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fc5a:	4b0f      	ldr	r3, [pc, #60]	; (800fc98 <mem_init+0x8c>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc62:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fc64:	4b0b      	ldr	r3, [pc, #44]	; (800fc94 <mem_init+0x88>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4a0c      	ldr	r2, [pc, #48]	; (800fc9c <mem_init+0x90>)
 800fc6a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fc6c:	480c      	ldr	r0, [pc, #48]	; (800fca0 <mem_init+0x94>)
 800fc6e:	f00b f92d 	bl	801aecc <sys_mutex_new>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d006      	beq.n	800fc86 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fc78:	4b0a      	ldr	r3, [pc, #40]	; (800fca4 <mem_init+0x98>)
 800fc7a:	f240 221f 	movw	r2, #543	; 0x21f
 800fc7e:	490a      	ldr	r1, [pc, #40]	; (800fca8 <mem_init+0x9c>)
 800fc80:	480a      	ldr	r0, [pc, #40]	; (800fcac <mem_init+0xa0>)
 800fc82:	f00b fd79 	bl	801b778 <printf>
  }
}
 800fc86:	bf00      	nop
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	20008744 	.word	0x20008744
 800fc94:	20004ec0 	.word	0x20004ec0
 800fc98:	20004ec4 	.word	0x20004ec4
 800fc9c:	20004ecc 	.word	0x20004ecc
 800fca0:	20004ec8 	.word	0x20004ec8
 800fca4:	0802547c 	.word	0x0802547c
 800fca8:	08025550 	.word	0x08025550
 800fcac:	080254c4 	.word	0x080254c4

0800fcb0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f7ff fef3 	bl	800faa4 <mem_to_ptr>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	881b      	ldrh	r3, [r3, #0]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff feda 	bl	800fa80 <ptr_to_mem>
 800fccc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	885b      	ldrh	r3, [r3, #2]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff fed4 	bl	800fa80 <ptr_to_mem>
 800fcd8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fce2:	d818      	bhi.n	800fd16 <mem_link_valid+0x66>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	885b      	ldrh	r3, [r3, #2]
 800fce8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcec:	d813      	bhi.n	800fd16 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcf2:	8afa      	ldrh	r2, [r7, #22]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d004      	beq.n	800fd02 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	881b      	ldrh	r3, [r3, #0]
 800fcfc:	8afa      	ldrh	r2, [r7, #22]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d109      	bne.n	800fd16 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd02:	4b08      	ldr	r3, [pc, #32]	; (800fd24 <mem_link_valid+0x74>)
 800fd04:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd06:	693a      	ldr	r2, [r7, #16]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d006      	beq.n	800fd1a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	885b      	ldrh	r3, [r3, #2]
 800fd10:	8afa      	ldrh	r2, [r7, #22]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d001      	beq.n	800fd1a <mem_link_valid+0x6a>
    return 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e000      	b.n	800fd1c <mem_link_valid+0x6c>
  }
  return 1;
 800fd1a:	2301      	movs	r3, #1
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3718      	adds	r7, #24
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	20004ec4 	.word	0x20004ec4

0800fd28 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b088      	sub	sp, #32
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d070      	beq.n	800fe18 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f003 0303 	and.w	r3, r3, #3
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d00d      	beq.n	800fd5c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fd40:	4b37      	ldr	r3, [pc, #220]	; (800fe20 <mem_free+0xf8>)
 800fd42:	f240 2273 	movw	r2, #627	; 0x273
 800fd46:	4937      	ldr	r1, [pc, #220]	; (800fe24 <mem_free+0xfc>)
 800fd48:	4837      	ldr	r0, [pc, #220]	; (800fe28 <mem_free+0x100>)
 800fd4a:	f00b fd15 	bl	801b778 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd4e:	f00b f91b 	bl	801af88 <sys_arch_protect>
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f00b f925 	bl	801afa4 <sys_arch_unprotect>
    return;
 800fd5a:	e05e      	b.n	800fe1a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	3b08      	subs	r3, #8
 800fd60:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fd62:	4b32      	ldr	r3, [pc, #200]	; (800fe2c <mem_free+0x104>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	69fa      	ldr	r2, [r7, #28]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d306      	bcc.n	800fd7a <mem_free+0x52>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f103 020c 	add.w	r2, r3, #12
 800fd72:	4b2f      	ldr	r3, [pc, #188]	; (800fe30 <mem_free+0x108>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d90d      	bls.n	800fd96 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fd7a:	4b29      	ldr	r3, [pc, #164]	; (800fe20 <mem_free+0xf8>)
 800fd7c:	f240 227f 	movw	r2, #639	; 0x27f
 800fd80:	492c      	ldr	r1, [pc, #176]	; (800fe34 <mem_free+0x10c>)
 800fd82:	4829      	ldr	r0, [pc, #164]	; (800fe28 <mem_free+0x100>)
 800fd84:	f00b fcf8 	bl	801b778 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd88:	f00b f8fe 	bl	801af88 <sys_arch_protect>
 800fd8c:	6138      	str	r0, [r7, #16]
 800fd8e:	6938      	ldr	r0, [r7, #16]
 800fd90:	f00b f908 	bl	801afa4 <sys_arch_unprotect>
    return;
 800fd94:	e041      	b.n	800fe1a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fd96:	4828      	ldr	r0, [pc, #160]	; (800fe38 <mem_free+0x110>)
 800fd98:	f00b f8b4 	bl	801af04 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	791b      	ldrb	r3, [r3, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d110      	bne.n	800fdc6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fda4:	4b1e      	ldr	r3, [pc, #120]	; (800fe20 <mem_free+0xf8>)
 800fda6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fdaa:	4924      	ldr	r1, [pc, #144]	; (800fe3c <mem_free+0x114>)
 800fdac:	481e      	ldr	r0, [pc, #120]	; (800fe28 <mem_free+0x100>)
 800fdae:	f00b fce3 	bl	801b778 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800fdb2:	4821      	ldr	r0, [pc, #132]	; (800fe38 <mem_free+0x110>)
 800fdb4:	f00b f8b5 	bl	801af22 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fdb8:	f00b f8e6 	bl	801af88 <sys_arch_protect>
 800fdbc:	6178      	str	r0, [r7, #20]
 800fdbe:	6978      	ldr	r0, [r7, #20]
 800fdc0:	f00b f8f0 	bl	801afa4 <sys_arch_unprotect>
    return;
 800fdc4:	e029      	b.n	800fe1a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fdc6:	69f8      	ldr	r0, [r7, #28]
 800fdc8:	f7ff ff72 	bl	800fcb0 <mem_link_valid>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d110      	bne.n	800fdf4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fdd2:	4b13      	ldr	r3, [pc, #76]	; (800fe20 <mem_free+0xf8>)
 800fdd4:	f240 2295 	movw	r2, #661	; 0x295
 800fdd8:	4919      	ldr	r1, [pc, #100]	; (800fe40 <mem_free+0x118>)
 800fdda:	4813      	ldr	r0, [pc, #76]	; (800fe28 <mem_free+0x100>)
 800fddc:	f00b fccc 	bl	801b778 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800fde0:	4815      	ldr	r0, [pc, #84]	; (800fe38 <mem_free+0x110>)
 800fde2:	f00b f89e 	bl	801af22 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fde6:	f00b f8cf 	bl	801af88 <sys_arch_protect>
 800fdea:	61b8      	str	r0, [r7, #24]
 800fdec:	69b8      	ldr	r0, [r7, #24]
 800fdee:	f00b f8d9 	bl	801afa4 <sys_arch_unprotect>
    return;
 800fdf2:	e012      	b.n	800fe1a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fdfa:	4b12      	ldr	r3, [pc, #72]	; (800fe44 <mem_free+0x11c>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	69fa      	ldr	r2, [r7, #28]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d202      	bcs.n	800fe0a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fe04:	4a0f      	ldr	r2, [pc, #60]	; (800fe44 <mem_free+0x11c>)
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fe0a:	69f8      	ldr	r0, [r7, #28]
 800fe0c:	f7ff fe5c 	bl	800fac8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fe10:	4809      	ldr	r0, [pc, #36]	; (800fe38 <mem_free+0x110>)
 800fe12:	f00b f886 	bl	801af22 <sys_mutex_unlock>
 800fe16:	e000      	b.n	800fe1a <mem_free+0xf2>
    return;
 800fe18:	bf00      	nop
}
 800fe1a:	3720      	adds	r7, #32
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	0802547c 	.word	0x0802547c
 800fe24:	0802556c 	.word	0x0802556c
 800fe28:	080254c4 	.word	0x080254c4
 800fe2c:	20004ec0 	.word	0x20004ec0
 800fe30:	20004ec4 	.word	0x20004ec4
 800fe34:	08025590 	.word	0x08025590
 800fe38:	20004ec8 	.word	0x20004ec8
 800fe3c:	080255ac 	.word	0x080255ac
 800fe40:	080255d4 	.word	0x080255d4
 800fe44:	20004ecc 	.word	0x20004ecc

0800fe48 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b088      	sub	sp, #32
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	460b      	mov	r3, r1
 800fe52:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fe54:	887b      	ldrh	r3, [r7, #2]
 800fe56:	3303      	adds	r3, #3
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	f023 0303 	bic.w	r3, r3, #3
 800fe5e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fe60:	8bfb      	ldrh	r3, [r7, #30]
 800fe62:	2b0b      	cmp	r3, #11
 800fe64:	d801      	bhi.n	800fe6a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fe66:	230c      	movs	r3, #12
 800fe68:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fe6a:	8bfb      	ldrh	r3, [r7, #30]
 800fe6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe70:	d803      	bhi.n	800fe7a <mem_trim+0x32>
 800fe72:	8bfa      	ldrh	r2, [r7, #30]
 800fe74:	887b      	ldrh	r3, [r7, #2]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d201      	bcs.n	800fe7e <mem_trim+0x36>
    return NULL;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	e0d8      	b.n	8010030 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe7e:	4b6e      	ldr	r3, [pc, #440]	; (8010038 <mem_trim+0x1f0>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d304      	bcc.n	800fe92 <mem_trim+0x4a>
 800fe88:	4b6c      	ldr	r3, [pc, #432]	; (801003c <mem_trim+0x1f4>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d306      	bcc.n	800fea0 <mem_trim+0x58>
 800fe92:	4b6b      	ldr	r3, [pc, #428]	; (8010040 <mem_trim+0x1f8>)
 800fe94:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fe98:	496a      	ldr	r1, [pc, #424]	; (8010044 <mem_trim+0x1fc>)
 800fe9a:	486b      	ldr	r0, [pc, #428]	; (8010048 <mem_trim+0x200>)
 800fe9c:	f00b fc6c 	bl	801b778 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fea0:	4b65      	ldr	r3, [pc, #404]	; (8010038 <mem_trim+0x1f0>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d304      	bcc.n	800feb4 <mem_trim+0x6c>
 800feaa:	4b64      	ldr	r3, [pc, #400]	; (801003c <mem_trim+0x1f4>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d307      	bcc.n	800fec4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800feb4:	f00b f868 	bl	801af88 <sys_arch_protect>
 800feb8:	60b8      	str	r0, [r7, #8]
 800feba:	68b8      	ldr	r0, [r7, #8]
 800febc:	f00b f872 	bl	801afa4 <sys_arch_unprotect>
    return rmem;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	e0b5      	b.n	8010030 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	3b08      	subs	r3, #8
 800fec8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800feca:	69b8      	ldr	r0, [r7, #24]
 800fecc:	f7ff fdea 	bl	800faa4 <mem_to_ptr>
 800fed0:	4603      	mov	r3, r0
 800fed2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fed4:	69bb      	ldr	r3, [r7, #24]
 800fed6:	881a      	ldrh	r2, [r3, #0]
 800fed8:	8afb      	ldrh	r3, [r7, #22]
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	b29b      	uxth	r3, r3
 800fede:	3b08      	subs	r3, #8
 800fee0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fee2:	8bfa      	ldrh	r2, [r7, #30]
 800fee4:	8abb      	ldrh	r3, [r7, #20]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d906      	bls.n	800fef8 <mem_trim+0xb0>
 800feea:	4b55      	ldr	r3, [pc, #340]	; (8010040 <mem_trim+0x1f8>)
 800feec:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fef0:	4956      	ldr	r1, [pc, #344]	; (801004c <mem_trim+0x204>)
 800fef2:	4855      	ldr	r0, [pc, #340]	; (8010048 <mem_trim+0x200>)
 800fef4:	f00b fc40 	bl	801b778 <printf>
  if (newsize > size) {
 800fef8:	8bfa      	ldrh	r2, [r7, #30]
 800fefa:	8abb      	ldrh	r3, [r7, #20]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d901      	bls.n	800ff04 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ff00:	2300      	movs	r3, #0
 800ff02:	e095      	b.n	8010030 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ff04:	8bfa      	ldrh	r2, [r7, #30]
 800ff06:	8abb      	ldrh	r3, [r7, #20]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d101      	bne.n	800ff10 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	e08f      	b.n	8010030 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ff10:	484f      	ldr	r0, [pc, #316]	; (8010050 <mem_trim+0x208>)
 800ff12:	f00a fff7 	bl	801af04 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	881b      	ldrh	r3, [r3, #0]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7ff fdb0 	bl	800fa80 <ptr_to_mem>
 800ff20:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	791b      	ldrb	r3, [r3, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d13f      	bne.n	800ffaa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff32:	d106      	bne.n	800ff42 <mem_trim+0xfa>
 800ff34:	4b42      	ldr	r3, [pc, #264]	; (8010040 <mem_trim+0x1f8>)
 800ff36:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ff3a:	4946      	ldr	r1, [pc, #280]	; (8010054 <mem_trim+0x20c>)
 800ff3c:	4842      	ldr	r0, [pc, #264]	; (8010048 <mem_trim+0x200>)
 800ff3e:	f00b fc1b 	bl	801b778 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	881b      	ldrh	r3, [r3, #0]
 800ff46:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff48:	8afa      	ldrh	r2, [r7, #22]
 800ff4a:	8bfb      	ldrh	r3, [r7, #30]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	3308      	adds	r3, #8
 800ff52:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ff54:	4b40      	ldr	r3, [pc, #256]	; (8010058 <mem_trim+0x210>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	693a      	ldr	r2, [r7, #16]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d106      	bne.n	800ff6c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ff5e:	89fb      	ldrh	r3, [r7, #14]
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff fd8d 	bl	800fa80 <ptr_to_mem>
 800ff66:	4603      	mov	r3, r0
 800ff68:	4a3b      	ldr	r2, [pc, #236]	; (8010058 <mem_trim+0x210>)
 800ff6a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ff6c:	89fb      	ldrh	r3, [r7, #14]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7ff fd86 	bl	800fa80 <ptr_to_mem>
 800ff74:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	89ba      	ldrh	r2, [r7, #12]
 800ff80:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	8afa      	ldrh	r2, [r7, #22]
 800ff86:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	89fa      	ldrh	r2, [r7, #14]
 800ff8c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff96:	d047      	beq.n	8010028 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	881b      	ldrh	r3, [r3, #0]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7ff fd6f 	bl	800fa80 <ptr_to_mem>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	89fb      	ldrh	r3, [r7, #14]
 800ffa6:	8053      	strh	r3, [r2, #2]
 800ffa8:	e03e      	b.n	8010028 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ffaa:	8bfb      	ldrh	r3, [r7, #30]
 800ffac:	f103 0214 	add.w	r2, r3, #20
 800ffb0:	8abb      	ldrh	r3, [r7, #20]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d838      	bhi.n	8010028 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ffb6:	8afa      	ldrh	r2, [r7, #22]
 800ffb8:	8bfb      	ldrh	r3, [r7, #30]
 800ffba:	4413      	add	r3, r2
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	3308      	adds	r3, #8
 800ffc0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	881b      	ldrh	r3, [r3, #0]
 800ffc6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ffca:	d106      	bne.n	800ffda <mem_trim+0x192>
 800ffcc:	4b1c      	ldr	r3, [pc, #112]	; (8010040 <mem_trim+0x1f8>)
 800ffce:	f240 3216 	movw	r2, #790	; 0x316
 800ffd2:	4920      	ldr	r1, [pc, #128]	; (8010054 <mem_trim+0x20c>)
 800ffd4:	481c      	ldr	r0, [pc, #112]	; (8010048 <mem_trim+0x200>)
 800ffd6:	f00b fbcf 	bl	801b778 <printf>
    mem2 = ptr_to_mem(ptr2);
 800ffda:	89fb      	ldrh	r3, [r7, #14]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7ff fd4f 	bl	800fa80 <ptr_to_mem>
 800ffe2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ffe4:	4b1c      	ldr	r3, [pc, #112]	; (8010058 <mem_trim+0x210>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	693a      	ldr	r2, [r7, #16]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d202      	bcs.n	800fff4 <mem_trim+0x1ac>
      lfree = mem2;
 800ffee:	4a1a      	ldr	r2, [pc, #104]	; (8010058 <mem_trim+0x210>)
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	2200      	movs	r2, #0
 800fff8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	881a      	ldrh	r2, [r3, #0]
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	8afa      	ldrh	r2, [r7, #22]
 8010006:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	89fa      	ldrh	r2, [r7, #14]
 801000c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010016:	d007      	beq.n	8010028 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	4618      	mov	r0, r3
 801001e:	f7ff fd2f 	bl	800fa80 <ptr_to_mem>
 8010022:	4602      	mov	r2, r0
 8010024:	89fb      	ldrh	r3, [r7, #14]
 8010026:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010028:	4809      	ldr	r0, [pc, #36]	; (8010050 <mem_trim+0x208>)
 801002a:	f00a ff7a 	bl	801af22 <sys_mutex_unlock>
  return rmem;
 801002e:	687b      	ldr	r3, [r7, #4]
}
 8010030:	4618      	mov	r0, r3
 8010032:	3720      	adds	r7, #32
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	20004ec0 	.word	0x20004ec0
 801003c:	20004ec4 	.word	0x20004ec4
 8010040:	0802547c 	.word	0x0802547c
 8010044:	08025608 	.word	0x08025608
 8010048:	080254c4 	.word	0x080254c4
 801004c:	08025620 	.word	0x08025620
 8010050:	20004ec8 	.word	0x20004ec8
 8010054:	08025640 	.word	0x08025640
 8010058:	20004ecc 	.word	0x20004ecc

0801005c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b088      	sub	sp, #32
 8010060:	af00      	add	r7, sp, #0
 8010062:	4603      	mov	r3, r0
 8010064:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010066:	88fb      	ldrh	r3, [r7, #6]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d101      	bne.n	8010070 <mem_malloc+0x14>
    return NULL;
 801006c:	2300      	movs	r3, #0
 801006e:	e0e2      	b.n	8010236 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010070:	88fb      	ldrh	r3, [r7, #6]
 8010072:	3303      	adds	r3, #3
 8010074:	b29b      	uxth	r3, r3
 8010076:	f023 0303 	bic.w	r3, r3, #3
 801007a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801007c:	8bbb      	ldrh	r3, [r7, #28]
 801007e:	2b0b      	cmp	r3, #11
 8010080:	d801      	bhi.n	8010086 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010082:	230c      	movs	r3, #12
 8010084:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010086:	8bbb      	ldrh	r3, [r7, #28]
 8010088:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801008c:	d803      	bhi.n	8010096 <mem_malloc+0x3a>
 801008e:	8bba      	ldrh	r2, [r7, #28]
 8010090:	88fb      	ldrh	r3, [r7, #6]
 8010092:	429a      	cmp	r2, r3
 8010094:	d201      	bcs.n	801009a <mem_malloc+0x3e>
    return NULL;
 8010096:	2300      	movs	r3, #0
 8010098:	e0cd      	b.n	8010236 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801009a:	4869      	ldr	r0, [pc, #420]	; (8010240 <mem_malloc+0x1e4>)
 801009c:	f00a ff32 	bl	801af04 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80100a0:	4b68      	ldr	r3, [pc, #416]	; (8010244 <mem_malloc+0x1e8>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7ff fcfd 	bl	800faa4 <mem_to_ptr>
 80100aa:	4603      	mov	r3, r0
 80100ac:	83fb      	strh	r3, [r7, #30]
 80100ae:	e0b7      	b.n	8010220 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80100b0:	8bfb      	ldrh	r3, [r7, #30]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff fce4 	bl	800fa80 <ptr_to_mem>
 80100b8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	791b      	ldrb	r3, [r3, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f040 80a7 	bne.w	8010212 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	881b      	ldrh	r3, [r3, #0]
 80100c8:	461a      	mov	r2, r3
 80100ca:	8bfb      	ldrh	r3, [r7, #30]
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	f1a3 0208 	sub.w	r2, r3, #8
 80100d2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80100d4:	429a      	cmp	r2, r3
 80100d6:	f0c0 809c 	bcc.w	8010212 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	881b      	ldrh	r3, [r3, #0]
 80100de:	461a      	mov	r2, r3
 80100e0:	8bfb      	ldrh	r3, [r7, #30]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	f1a3 0208 	sub.w	r2, r3, #8
 80100e8:	8bbb      	ldrh	r3, [r7, #28]
 80100ea:	3314      	adds	r3, #20
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d333      	bcc.n	8010158 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80100f0:	8bfa      	ldrh	r2, [r7, #30]
 80100f2:	8bbb      	ldrh	r3, [r7, #28]
 80100f4:	4413      	add	r3, r2
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	3308      	adds	r3, #8
 80100fa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80100fc:	8a7b      	ldrh	r3, [r7, #18]
 80100fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010102:	d106      	bne.n	8010112 <mem_malloc+0xb6>
 8010104:	4b50      	ldr	r3, [pc, #320]	; (8010248 <mem_malloc+0x1ec>)
 8010106:	f240 3287 	movw	r2, #903	; 0x387
 801010a:	4950      	ldr	r1, [pc, #320]	; (801024c <mem_malloc+0x1f0>)
 801010c:	4850      	ldr	r0, [pc, #320]	; (8010250 <mem_malloc+0x1f4>)
 801010e:	f00b fb33 	bl	801b778 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010112:	8a7b      	ldrh	r3, [r7, #18]
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff fcb3 	bl	800fa80 <ptr_to_mem>
 801011a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2200      	movs	r2, #0
 8010120:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	881a      	ldrh	r2, [r3, #0]
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	8bfa      	ldrh	r2, [r7, #30]
 801012e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	8a7a      	ldrh	r2, [r7, #18]
 8010134:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	2201      	movs	r2, #1
 801013a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	881b      	ldrh	r3, [r3, #0]
 8010140:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010144:	d00b      	beq.n	801015e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff fc98 	bl	800fa80 <ptr_to_mem>
 8010150:	4602      	mov	r2, r0
 8010152:	8a7b      	ldrh	r3, [r7, #18]
 8010154:	8053      	strh	r3, [r2, #2]
 8010156:	e002      	b.n	801015e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2201      	movs	r2, #1
 801015c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801015e:	4b39      	ldr	r3, [pc, #228]	; (8010244 <mem_malloc+0x1e8>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	697a      	ldr	r2, [r7, #20]
 8010164:	429a      	cmp	r2, r3
 8010166:	d127      	bne.n	80101b8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010168:	4b36      	ldr	r3, [pc, #216]	; (8010244 <mem_malloc+0x1e8>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801016e:	e005      	b.n	801017c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010170:	69bb      	ldr	r3, [r7, #24]
 8010172:	881b      	ldrh	r3, [r3, #0]
 8010174:	4618      	mov	r0, r3
 8010176:	f7ff fc83 	bl	800fa80 <ptr_to_mem>
 801017a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801017c:	69bb      	ldr	r3, [r7, #24]
 801017e:	791b      	ldrb	r3, [r3, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d004      	beq.n	801018e <mem_malloc+0x132>
 8010184:	4b33      	ldr	r3, [pc, #204]	; (8010254 <mem_malloc+0x1f8>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	69ba      	ldr	r2, [r7, #24]
 801018a:	429a      	cmp	r2, r3
 801018c:	d1f0      	bne.n	8010170 <mem_malloc+0x114>
          }
          lfree = cur;
 801018e:	4a2d      	ldr	r2, [pc, #180]	; (8010244 <mem_malloc+0x1e8>)
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010194:	4b2b      	ldr	r3, [pc, #172]	; (8010244 <mem_malloc+0x1e8>)
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	4b2e      	ldr	r3, [pc, #184]	; (8010254 <mem_malloc+0x1f8>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	429a      	cmp	r2, r3
 801019e:	d00b      	beq.n	80101b8 <mem_malloc+0x15c>
 80101a0:	4b28      	ldr	r3, [pc, #160]	; (8010244 <mem_malloc+0x1e8>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	791b      	ldrb	r3, [r3, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d006      	beq.n	80101b8 <mem_malloc+0x15c>
 80101aa:	4b27      	ldr	r3, [pc, #156]	; (8010248 <mem_malloc+0x1ec>)
 80101ac:	f240 32b5 	movw	r2, #949	; 0x3b5
 80101b0:	4929      	ldr	r1, [pc, #164]	; (8010258 <mem_malloc+0x1fc>)
 80101b2:	4827      	ldr	r0, [pc, #156]	; (8010250 <mem_malloc+0x1f4>)
 80101b4:	f00b fae0 	bl	801b778 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80101b8:	4821      	ldr	r0, [pc, #132]	; (8010240 <mem_malloc+0x1e4>)
 80101ba:	f00a feb2 	bl	801af22 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80101be:	8bba      	ldrh	r2, [r7, #28]
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	4413      	add	r3, r2
 80101c4:	3308      	adds	r3, #8
 80101c6:	4a23      	ldr	r2, [pc, #140]	; (8010254 <mem_malloc+0x1f8>)
 80101c8:	6812      	ldr	r2, [r2, #0]
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d906      	bls.n	80101dc <mem_malloc+0x180>
 80101ce:	4b1e      	ldr	r3, [pc, #120]	; (8010248 <mem_malloc+0x1ec>)
 80101d0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80101d4:	4921      	ldr	r1, [pc, #132]	; (801025c <mem_malloc+0x200>)
 80101d6:	481e      	ldr	r0, [pc, #120]	; (8010250 <mem_malloc+0x1f4>)
 80101d8:	f00b face 	bl	801b778 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	f003 0303 	and.w	r3, r3, #3
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d006      	beq.n	80101f4 <mem_malloc+0x198>
 80101e6:	4b18      	ldr	r3, [pc, #96]	; (8010248 <mem_malloc+0x1ec>)
 80101e8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80101ec:	491c      	ldr	r1, [pc, #112]	; (8010260 <mem_malloc+0x204>)
 80101ee:	4818      	ldr	r0, [pc, #96]	; (8010250 <mem_malloc+0x1f4>)
 80101f0:	f00b fac2 	bl	801b778 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	f003 0303 	and.w	r3, r3, #3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d006      	beq.n	801020c <mem_malloc+0x1b0>
 80101fe:	4b12      	ldr	r3, [pc, #72]	; (8010248 <mem_malloc+0x1ec>)
 8010200:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010204:	4917      	ldr	r1, [pc, #92]	; (8010264 <mem_malloc+0x208>)
 8010206:	4812      	ldr	r0, [pc, #72]	; (8010250 <mem_malloc+0x1f4>)
 8010208:	f00b fab6 	bl	801b778 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	3308      	adds	r3, #8
 8010210:	e011      	b.n	8010236 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010212:	8bfb      	ldrh	r3, [r7, #30]
 8010214:	4618      	mov	r0, r3
 8010216:	f7ff fc33 	bl	800fa80 <ptr_to_mem>
 801021a:	4603      	mov	r3, r0
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010220:	8bfa      	ldrh	r2, [r7, #30]
 8010222:	8bbb      	ldrh	r3, [r7, #28]
 8010224:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010228:	429a      	cmp	r2, r3
 801022a:	f4ff af41 	bcc.w	80100b0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801022e:	4804      	ldr	r0, [pc, #16]	; (8010240 <mem_malloc+0x1e4>)
 8010230:	f00a fe77 	bl	801af22 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010234:	2300      	movs	r3, #0
}
 8010236:	4618      	mov	r0, r3
 8010238:	3720      	adds	r7, #32
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	20004ec8 	.word	0x20004ec8
 8010244:	20004ecc 	.word	0x20004ecc
 8010248:	0802547c 	.word	0x0802547c
 801024c:	08025640 	.word	0x08025640
 8010250:	080254c4 	.word	0x080254c4
 8010254:	20004ec4 	.word	0x20004ec4
 8010258:	08025654 	.word	0x08025654
 801025c:	08025670 	.word	0x08025670
 8010260:	080256a0 	.word	0x080256a0
 8010264:	080256d0 	.word	0x080256d0

08010268 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	2200      	movs	r2, #0
 8010276:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	3303      	adds	r3, #3
 801027e:	f023 0303 	bic.w	r3, r3, #3
 8010282:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010284:	2300      	movs	r3, #0
 8010286:	60fb      	str	r3, [r7, #12]
 8010288:	e011      	b.n	80102ae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	461a      	mov	r2, r3
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	4413      	add	r3, r2
 80102a6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	3301      	adds	r3, #1
 80102ac:	60fb      	str	r3, [r7, #12]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	885b      	ldrh	r3, [r3, #2]
 80102b2:	461a      	mov	r2, r3
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	4293      	cmp	r3, r2
 80102b8:	dbe7      	blt.n	801028a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80102ba:	bf00      	nop
 80102bc:	bf00      	nop
 80102be:	3714      	adds	r7, #20
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr

080102c8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80102ce:	2300      	movs	r3, #0
 80102d0:	80fb      	strh	r3, [r7, #6]
 80102d2:	e009      	b.n	80102e8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80102d4:	88fb      	ldrh	r3, [r7, #6]
 80102d6:	4a08      	ldr	r2, [pc, #32]	; (80102f8 <memp_init+0x30>)
 80102d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102dc:	4618      	mov	r0, r3
 80102de:	f7ff ffc3 	bl	8010268 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80102e2:	88fb      	ldrh	r3, [r7, #6]
 80102e4:	3301      	adds	r3, #1
 80102e6:	80fb      	strh	r3, [r7, #6]
 80102e8:	88fb      	ldrh	r3, [r7, #6]
 80102ea:	2b0c      	cmp	r3, #12
 80102ec:	d9f2      	bls.n	80102d4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80102ee:	bf00      	nop
 80102f0:	bf00      	nop
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	08029660 	.word	0x08029660

080102fc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010304:	f00a fe40 	bl	801af88 <sys_arch_protect>
 8010308:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d015      	beq.n	8010344 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	68ba      	ldr	r2, [r7, #8]
 801031e:	6812      	ldr	r2, [r2, #0]
 8010320:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	f003 0303 	and.w	r3, r3, #3
 8010328:	2b00      	cmp	r3, #0
 801032a:	d006      	beq.n	801033a <do_memp_malloc_pool+0x3e>
 801032c:	4b09      	ldr	r3, [pc, #36]	; (8010354 <do_memp_malloc_pool+0x58>)
 801032e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010332:	4909      	ldr	r1, [pc, #36]	; (8010358 <do_memp_malloc_pool+0x5c>)
 8010334:	4809      	ldr	r0, [pc, #36]	; (801035c <do_memp_malloc_pool+0x60>)
 8010336:	f00b fa1f 	bl	801b778 <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f00a fe32 	bl	801afa4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	e003      	b.n	801034c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f00a fe2d 	bl	801afa4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801034a:	2300      	movs	r3, #0
}
 801034c:	4618      	mov	r0, r3
 801034e:	3710      	adds	r7, #16
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	080256f4 	.word	0x080256f4
 8010358:	08025724 	.word	0x08025724
 801035c:	08025748 	.word	0x08025748

08010360 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	4603      	mov	r3, r0
 8010368:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801036a:	79fb      	ldrb	r3, [r7, #7]
 801036c:	2b0c      	cmp	r3, #12
 801036e:	d908      	bls.n	8010382 <memp_malloc+0x22>
 8010370:	4b0a      	ldr	r3, [pc, #40]	; (801039c <memp_malloc+0x3c>)
 8010372:	f240 1257 	movw	r2, #343	; 0x157
 8010376:	490a      	ldr	r1, [pc, #40]	; (80103a0 <memp_malloc+0x40>)
 8010378:	480a      	ldr	r0, [pc, #40]	; (80103a4 <memp_malloc+0x44>)
 801037a:	f00b f9fd 	bl	801b778 <printf>
 801037e:	2300      	movs	r3, #0
 8010380:	e008      	b.n	8010394 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	4a08      	ldr	r2, [pc, #32]	; (80103a8 <memp_malloc+0x48>)
 8010386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801038a:	4618      	mov	r0, r3
 801038c:	f7ff ffb6 	bl	80102fc <do_memp_malloc_pool>
 8010390:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010392:	68fb      	ldr	r3, [r7, #12]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	080256f4 	.word	0x080256f4
 80103a0:	08025784 	.word	0x08025784
 80103a4:	08025748 	.word	0x08025748
 80103a8:	08029660 	.word	0x08029660

080103ac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	f003 0303 	and.w	r3, r3, #3
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d006      	beq.n	80103ce <do_memp_free_pool+0x22>
 80103c0:	4b0d      	ldr	r3, [pc, #52]	; (80103f8 <do_memp_free_pool+0x4c>)
 80103c2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80103c6:	490d      	ldr	r1, [pc, #52]	; (80103fc <do_memp_free_pool+0x50>)
 80103c8:	480d      	ldr	r0, [pc, #52]	; (8010400 <do_memp_free_pool+0x54>)
 80103ca:	f00b f9d5 	bl	801b778 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80103d2:	f00a fdd9 	bl	801af88 <sys_arch_protect>
 80103d6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	689b      	ldr	r3, [r3, #8]
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	68fa      	ldr	r2, [r7, #12]
 80103e8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80103ea:	68b8      	ldr	r0, [r7, #8]
 80103ec:	f00a fdda 	bl	801afa4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80103f0:	bf00      	nop
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	080256f4 	.word	0x080256f4
 80103fc:	080257a4 	.word	0x080257a4
 8010400:	08025748 	.word	0x08025748

08010404 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	4603      	mov	r3, r0
 801040c:	6039      	str	r1, [r7, #0]
 801040e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010410:	79fb      	ldrb	r3, [r7, #7]
 8010412:	2b0c      	cmp	r3, #12
 8010414:	d907      	bls.n	8010426 <memp_free+0x22>
 8010416:	4b0c      	ldr	r3, [pc, #48]	; (8010448 <memp_free+0x44>)
 8010418:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801041c:	490b      	ldr	r1, [pc, #44]	; (801044c <memp_free+0x48>)
 801041e:	480c      	ldr	r0, [pc, #48]	; (8010450 <memp_free+0x4c>)
 8010420:	f00b f9aa 	bl	801b778 <printf>
 8010424:	e00c      	b.n	8010440 <memp_free+0x3c>

  if (mem == NULL) {
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d008      	beq.n	801043e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801042c:	79fb      	ldrb	r3, [r7, #7]
 801042e:	4a09      	ldr	r2, [pc, #36]	; (8010454 <memp_free+0x50>)
 8010430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010434:	6839      	ldr	r1, [r7, #0]
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff ffb8 	bl	80103ac <do_memp_free_pool>
 801043c:	e000      	b.n	8010440 <memp_free+0x3c>
    return;
 801043e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	080256f4 	.word	0x080256f4
 801044c:	080257c4 	.word	0x080257c4
 8010450:	08025748 	.word	0x08025748
 8010454:	08029660 	.word	0x08029660

08010458 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010458:	b480      	push	{r7}
 801045a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801045c:	bf00      	nop
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
	...

08010468 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
 8010474:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d108      	bne.n	801048e <netif_add+0x26>
 801047c:	4b56      	ldr	r3, [pc, #344]	; (80105d8 <netif_add+0x170>)
 801047e:	f240 1227 	movw	r2, #295	; 0x127
 8010482:	4956      	ldr	r1, [pc, #344]	; (80105dc <netif_add+0x174>)
 8010484:	4856      	ldr	r0, [pc, #344]	; (80105e0 <netif_add+0x178>)
 8010486:	f00b f977 	bl	801b778 <printf>
 801048a:	2300      	movs	r3, #0
 801048c:	e09f      	b.n	80105ce <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010490:	2b00      	cmp	r3, #0
 8010492:	d108      	bne.n	80104a6 <netif_add+0x3e>
 8010494:	4b50      	ldr	r3, [pc, #320]	; (80105d8 <netif_add+0x170>)
 8010496:	f44f 7294 	mov.w	r2, #296	; 0x128
 801049a:	4952      	ldr	r1, [pc, #328]	; (80105e4 <netif_add+0x17c>)
 801049c:	4850      	ldr	r0, [pc, #320]	; (80105e0 <netif_add+0x178>)
 801049e:	f00b f96b 	bl	801b778 <printf>
 80104a2:	2300      	movs	r3, #0
 80104a4:	e093      	b.n	80105ce <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d101      	bne.n	80104b0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80104ac:	4b4e      	ldr	r3, [pc, #312]	; (80105e8 <netif_add+0x180>)
 80104ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80104b6:	4b4c      	ldr	r3, [pc, #304]	; (80105e8 <netif_add+0x180>)
 80104b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d101      	bne.n	80104c4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80104c0:	4b49      	ldr	r3, [pc, #292]	; (80105e8 <netif_add+0x180>)
 80104c2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2200      	movs	r2, #0
 80104c8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2200      	movs	r2, #0
 80104ce:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2200      	movs	r2, #0
 80104d4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	4a44      	ldr	r2, [pc, #272]	; (80105ec <netif_add+0x184>)
 80104da:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2200      	movs	r2, #0
 80104e0:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2200      	movs	r2, #0
 80104e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	6a3a      	ldr	r2, [r7, #32]
 80104ee:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80104f0:	4b3f      	ldr	r3, [pc, #252]	; (80105f0 <netif_add+0x188>)
 80104f2:	781a      	ldrb	r2, [r3, #0]
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104fe:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	68b9      	ldr	r1, [r7, #8]
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f000 f93c 	bl	8010784 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	4798      	blx	r3
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d001      	beq.n	801051c <netif_add+0xb4>
    return NULL;
 8010518:	2300      	movs	r3, #0
 801051a:	e058      	b.n	80105ce <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010522:	2bff      	cmp	r3, #255	; 0xff
 8010524:	d103      	bne.n	801052e <netif_add+0xc6>
        netif->num = 0;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	2200      	movs	r2, #0
 801052a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010532:	4b30      	ldr	r3, [pc, #192]	; (80105f4 <netif_add+0x18c>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	617b      	str	r3, [r7, #20]
 8010538:	e02b      	b.n	8010592 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801053a:	697a      	ldr	r2, [r7, #20]
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	429a      	cmp	r2, r3
 8010540:	d106      	bne.n	8010550 <netif_add+0xe8>
 8010542:	4b25      	ldr	r3, [pc, #148]	; (80105d8 <netif_add+0x170>)
 8010544:	f240 128b 	movw	r2, #395	; 0x18b
 8010548:	492b      	ldr	r1, [pc, #172]	; (80105f8 <netif_add+0x190>)
 801054a:	4825      	ldr	r0, [pc, #148]	; (80105e0 <netif_add+0x178>)
 801054c:	f00b f914 	bl	801b778 <printf>
        num_netifs++;
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	3301      	adds	r3, #1
 8010554:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	2bff      	cmp	r3, #255	; 0xff
 801055a:	dd06      	ble.n	801056a <netif_add+0x102>
 801055c:	4b1e      	ldr	r3, [pc, #120]	; (80105d8 <netif_add+0x170>)
 801055e:	f240 128d 	movw	r2, #397	; 0x18d
 8010562:	4926      	ldr	r1, [pc, #152]	; (80105fc <netif_add+0x194>)
 8010564:	481e      	ldr	r0, [pc, #120]	; (80105e0 <netif_add+0x178>)
 8010566:	f00b f907 	bl	801b778 <printf>
        if (netif2->num == netif->num) {
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010576:	429a      	cmp	r2, r3
 8010578:	d108      	bne.n	801058c <netif_add+0x124>
          netif->num++;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010580:	3301      	adds	r3, #1
 8010582:	b2da      	uxtb	r2, r3
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 801058a:	e005      	b.n	8010598 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	617b      	str	r3, [r7, #20]
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d1d0      	bne.n	801053a <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1be      	bne.n	801051c <netif_add+0xb4>
  }
  if (netif->num == 254) {
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80105a4:	2bfe      	cmp	r3, #254	; 0xfe
 80105a6:	d103      	bne.n	80105b0 <netif_add+0x148>
    netif_num = 0;
 80105a8:	4b11      	ldr	r3, [pc, #68]	; (80105f0 <netif_add+0x188>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	701a      	strb	r2, [r3, #0]
 80105ae:	e006      	b.n	80105be <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80105b6:	3301      	adds	r3, #1
 80105b8:	b2da      	uxtb	r2, r3
 80105ba:	4b0d      	ldr	r3, [pc, #52]	; (80105f0 <netif_add+0x188>)
 80105bc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80105be:	4b0d      	ldr	r3, [pc, #52]	; (80105f4 <netif_add+0x18c>)
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80105c6:	4a0b      	ldr	r2, [pc, #44]	; (80105f4 <netif_add+0x18c>)
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80105cc:	68fb      	ldr	r3, [r7, #12]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3718      	adds	r7, #24
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	080257e0 	.word	0x080257e0
 80105dc:	08025874 	.word	0x08025874
 80105e0:	08025830 	.word	0x08025830
 80105e4:	08025890 	.word	0x08025890
 80105e8:	080296d4 	.word	0x080296d4
 80105ec:	08010975 	.word	0x08010975
 80105f0:	20004f04 	.word	0x20004f04
 80105f4:	2000be30 	.word	0x2000be30
 80105f8:	080258b4 	.word	0x080258b4
 80105fc:	080258c8 	.word	0x080258c8

08010600 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801060a:	6839      	ldr	r1, [r7, #0]
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f002 fe41 	bl	8013294 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010612:	6839      	ldr	r1, [r7, #0]
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f007 fed9 	bl	80183cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801061a:	bf00      	nop
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
	...

08010624 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d106      	bne.n	8010644 <netif_do_set_ipaddr+0x20>
 8010636:	4b1d      	ldr	r3, [pc, #116]	; (80106ac <netif_do_set_ipaddr+0x88>)
 8010638:	f240 12cb 	movw	r2, #459	; 0x1cb
 801063c:	491c      	ldr	r1, [pc, #112]	; (80106b0 <netif_do_set_ipaddr+0x8c>)
 801063e:	481d      	ldr	r0, [pc, #116]	; (80106b4 <netif_do_set_ipaddr+0x90>)
 8010640:	f00b f89a 	bl	801b778 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <netif_do_set_ipaddr+0x34>
 801064a:	4b18      	ldr	r3, [pc, #96]	; (80106ac <netif_do_set_ipaddr+0x88>)
 801064c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010650:	4917      	ldr	r1, [pc, #92]	; (80106b0 <netif_do_set_ipaddr+0x8c>)
 8010652:	4818      	ldr	r0, [pc, #96]	; (80106b4 <netif_do_set_ipaddr+0x90>)
 8010654:	f00b f890 	bl	801b778 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	3304      	adds	r3, #4
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	429a      	cmp	r2, r3
 8010664:	d01c      	beq.n	80106a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	3304      	adds	r3, #4
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010676:	f107 0314 	add.w	r3, r7, #20
 801067a:	4619      	mov	r1, r3
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7ff ffbf 	bl	8010600 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d002      	beq.n	801068e <netif_do_set_ipaddr+0x6a>
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	e000      	b.n	8010690 <netif_do_set_ipaddr+0x6c>
 801068e:	2300      	movs	r3, #0
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010694:	2101      	movs	r1, #1
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	f000 f8fa 	bl	8010890 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801069c:	2301      	movs	r3, #1
 801069e:	e000      	b.n	80106a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80106a0:	2300      	movs	r3, #0
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3718      	adds	r7, #24
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	080257e0 	.word	0x080257e0
 80106b0:	080258f8 	.word	0x080258f8
 80106b4:	08025830 	.word	0x08025830

080106b8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b084      	sub	sp, #16
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  ip_addr_t old_addr;

  LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d107      	bne.n	80106d8 <netif_set_ipaddr+0x20>
 80106c8:	4b0b      	ldr	r3, [pc, #44]	; (80106f8 <netif_set_ipaddr+0x40>)
 80106ca:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80106ce:	490b      	ldr	r1, [pc, #44]	; (80106fc <netif_set_ipaddr+0x44>)
 80106d0:	480b      	ldr	r0, [pc, #44]	; (8010700 <netif_set_ipaddr+0x48>)
 80106d2:	f00b f851 	bl	801b778 <printf>
 80106d6:	e00b      	b.n	80106f0 <netif_set_ipaddr+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d101      	bne.n	80106e2 <netif_set_ipaddr+0x2a>
    ipaddr = IP4_ADDR_ANY4;
 80106de:	4b09      	ldr	r3, [pc, #36]	; (8010704 <netif_set_ipaddr+0x4c>)
 80106e0:	603b      	str	r3, [r7, #0]
  }

  LWIP_ASSERT_CORE_LOCKED();

  if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80106e2:	f107 030c 	add.w	r3, r7, #12
 80106e6:	461a      	mov	r2, r3
 80106e8:	6839      	ldr	r1, [r7, #0]
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7ff ff9a 	bl	8010624 <netif_do_set_ipaddr>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_address = &old_addr;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
#endif
  }
}
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	080257e0 	.word	0x080257e0
 80106fc:	08025908 	.word	0x08025908
 8010700:	08025830 	.word	0x08025830
 8010704:	080296d4 	.word	0x080296d4

08010708 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010708:	b480      	push	{r7}
 801070a:	b085      	sub	sp, #20
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	3308      	adds	r3, #8
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	429a      	cmp	r2, r3
 8010720:	d00a      	beq.n	8010738 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d002      	beq.n	801072e <netif_do_set_netmask+0x26>
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	e000      	b.n	8010730 <netif_do_set_netmask+0x28>
 801072e:	2300      	movs	r3, #0
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010734:	2301      	movs	r3, #1
 8010736:	e000      	b.n	801073a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	3714      	adds	r7, #20
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr

08010746 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010746:	b480      	push	{r7}
 8010748:	b085      	sub	sp, #20
 801074a:	af00      	add	r7, sp, #0
 801074c:	60f8      	str	r0, [r7, #12]
 801074e:	60b9      	str	r1, [r7, #8]
 8010750:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	330c      	adds	r3, #12
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	429a      	cmp	r2, r3
 801075e:	d00a      	beq.n	8010776 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d002      	beq.n	801076c <netif_do_set_gw+0x26>
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	e000      	b.n	801076e <netif_do_set_gw+0x28>
 801076c:	2300      	movs	r3, #0
 801076e:	68fa      	ldr	r2, [r7, #12]
 8010770:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010772:	2301      	movs	r3, #1
 8010774:	e000      	b.n	8010778 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010776:	2300      	movs	r3, #0
}
 8010778:	4618      	mov	r0, r3
 801077a:	3714      	adds	r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b088      	sub	sp, #32
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
 8010790:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010792:	2300      	movs	r3, #0
 8010794:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010796:	2300      	movs	r3, #0
 8010798:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d101      	bne.n	80107a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80107a0:	4b1c      	ldr	r3, [pc, #112]	; (8010814 <netif_set_addr+0x90>)
 80107a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d101      	bne.n	80107ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80107aa:	4b1a      	ldr	r3, [pc, #104]	; (8010814 <netif_set_addr+0x90>)
 80107ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d101      	bne.n	80107b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80107b4:	4b17      	ldr	r3, [pc, #92]	; (8010814 <netif_set_addr+0x90>)
 80107b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d003      	beq.n	80107c6 <netif_set_addr+0x42>
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d101      	bne.n	80107ca <netif_set_addr+0x46>
 80107c6:	2301      	movs	r3, #1
 80107c8:	e000      	b.n	80107cc <netif_set_addr+0x48>
 80107ca:	2300      	movs	r3, #0
 80107cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d006      	beq.n	80107e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80107d4:	f107 0310 	add.w	r3, r7, #16
 80107d8:	461a      	mov	r2, r3
 80107da:	68b9      	ldr	r1, [r7, #8]
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	f7ff ff21 	bl	8010624 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80107e2:	69fa      	ldr	r2, [r7, #28]
 80107e4:	6879      	ldr	r1, [r7, #4]
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f7ff ff8e 	bl	8010708 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80107ec:	69ba      	ldr	r2, [r7, #24]
 80107ee:	6839      	ldr	r1, [r7, #0]
 80107f0:	68f8      	ldr	r0, [r7, #12]
 80107f2:	f7ff ffa8 	bl	8010746 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d106      	bne.n	801080a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80107fc:	f107 0310 	add.w	r3, r7, #16
 8010800:	461a      	mov	r2, r3
 8010802:	68b9      	ldr	r1, [r7, #8]
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f7ff ff0d 	bl	8010624 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801080a:	bf00      	nop
 801080c:	3720      	adds	r7, #32
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	080296d4 	.word	0x080296d4

08010818 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010820:	4a04      	ldr	r2, [pc, #16]	; (8010834 <netif_set_default+0x1c>)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010826:	bf00      	nop
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	2000be34 	.word	0x2000be34

08010838 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d107      	bne.n	8010856 <netif_set_up+0x1e>
 8010846:	4b0f      	ldr	r3, [pc, #60]	; (8010884 <netif_set_up+0x4c>)
 8010848:	f44f 7254 	mov.w	r2, #848	; 0x350
 801084c:	490e      	ldr	r1, [pc, #56]	; (8010888 <netif_set_up+0x50>)
 801084e:	480f      	ldr	r0, [pc, #60]	; (801088c <netif_set_up+0x54>)
 8010850:	f00a ff92 	bl	801b778 <printf>
 8010854:	e013      	b.n	801087e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801085c:	f003 0301 	and.w	r3, r3, #1
 8010860:	2b00      	cmp	r3, #0
 8010862:	d10c      	bne.n	801087e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801086a:	f043 0301 	orr.w	r3, r3, #1
 801086e:	b2da      	uxtb	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010876:	2103      	movs	r1, #3
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f000 f809 	bl	8010890 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	080257e0 	.word	0x080257e0
 8010888:	08025968 	.word	0x08025968
 801088c:	08025830 	.word	0x08025830

08010890 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	460b      	mov	r3, r1
 801089a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d106      	bne.n	80108b0 <netif_issue_reports+0x20>
 80108a2:	4b18      	ldr	r3, [pc, #96]	; (8010904 <netif_issue_reports+0x74>)
 80108a4:	f240 326d 	movw	r2, #877	; 0x36d
 80108a8:	4917      	ldr	r1, [pc, #92]	; (8010908 <netif_issue_reports+0x78>)
 80108aa:	4818      	ldr	r0, [pc, #96]	; (801090c <netif_issue_reports+0x7c>)
 80108ac:	f00a ff64 	bl	801b778 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80108b6:	f003 0304 	and.w	r3, r3, #4
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d01e      	beq.n	80108fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80108c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d017      	beq.n	80108fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80108cc:	78fb      	ldrb	r3, [r7, #3]
 80108ce:	f003 0301 	and.w	r3, r3, #1
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d013      	beq.n	80108fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	3304      	adds	r3, #4
 80108da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d00e      	beq.n	80108fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80108e6:	f003 0308 	and.w	r3, r3, #8
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d007      	beq.n	80108fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	3304      	adds	r3, #4
 80108f2:	4619      	mov	r1, r3
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f008 fcd3 	bl	80192a0 <etharp_request>
 80108fa:	e000      	b.n	80108fe <netif_issue_reports+0x6e>
    return;
 80108fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	080257e0 	.word	0x080257e0
 8010908:	08025984 	.word	0x08025984
 801090c:	08025830 	.word	0x08025830

08010910 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d107      	bne.n	801092e <netif_set_down+0x1e>
 801091e:	4b12      	ldr	r3, [pc, #72]	; (8010968 <netif_set_down+0x58>)
 8010920:	f240 329b 	movw	r2, #923	; 0x39b
 8010924:	4911      	ldr	r1, [pc, #68]	; (801096c <netif_set_down+0x5c>)
 8010926:	4812      	ldr	r0, [pc, #72]	; (8010970 <netif_set_down+0x60>)
 8010928:	f00a ff26 	bl	801b778 <printf>
 801092c:	e019      	b.n	8010962 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010934:	f003 0301 	and.w	r3, r3, #1
 8010938:	2b00      	cmp	r3, #0
 801093a:	d012      	beq.n	8010962 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010942:	f023 0301 	bic.w	r3, r3, #1
 8010946:	b2da      	uxtb	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010954:	f003 0308 	and.w	r3, r3, #8
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f008 f85d 	bl	8018a1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	080257e0 	.word	0x080257e0
 801096c:	080259a8 	.word	0x080259a8
 8010970:	08025830 	.word	0x08025830

08010974 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010980:	f06f 030b 	mvn.w	r3, #11
}
 8010984:	4618      	mov	r0, r3
 8010986:	3714      	adds	r7, #20
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010990:	b480      	push	{r7}
 8010992:	b085      	sub	sp, #20
 8010994:	af00      	add	r7, sp, #0
 8010996:	4603      	mov	r3, r0
 8010998:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801099a:	79fb      	ldrb	r3, [r7, #7]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d013      	beq.n	80109c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80109a0:	4b0d      	ldr	r3, [pc, #52]	; (80109d8 <netif_get_by_index+0x48>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	60fb      	str	r3, [r7, #12]
 80109a6:	e00c      	b.n	80109c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80109ae:	3301      	adds	r3, #1
 80109b0:	b2db      	uxtb	r3, r3
 80109b2:	79fa      	ldrb	r2, [r7, #7]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d101      	bne.n	80109bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	e006      	b.n	80109ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	60fb      	str	r3, [r7, #12]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d1ef      	bne.n	80109a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	2000be30 	.word	0x2000be30

080109dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80109e2:	f00a fad1 	bl	801af88 <sys_arch_protect>
 80109e6:	6038      	str	r0, [r7, #0]
 80109e8:	4b0d      	ldr	r3, [pc, #52]	; (8010a20 <pbuf_free_ooseq+0x44>)
 80109ea:	2200      	movs	r2, #0
 80109ec:	701a      	strb	r2, [r3, #0]
 80109ee:	6838      	ldr	r0, [r7, #0]
 80109f0:	f00a fad8 	bl	801afa4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80109f4:	4b0b      	ldr	r3, [pc, #44]	; (8010a24 <pbuf_free_ooseq+0x48>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	607b      	str	r3, [r7, #4]
 80109fa:	e00a      	b.n	8010a12 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d003      	beq.n	8010a0c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f002 fc83 	bl	8013310 <tcp_free_ooseq>
      return;
 8010a0a:	e005      	b.n	8010a18 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	607b      	str	r3, [r7, #4]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1f1      	bne.n	80109fc <pbuf_free_ooseq+0x20>
    }
  }
}
 8010a18:	3708      	adds	r7, #8
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	2000be38 	.word	0x2000be38
 8010a24:	2000be40 	.word	0x2000be40

08010a28 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010a30:	f7ff ffd4 	bl	80109dc <pbuf_free_ooseq>
}
 8010a34:	bf00      	nop
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010a42:	f00a faa1 	bl	801af88 <sys_arch_protect>
 8010a46:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010a48:	4b0f      	ldr	r3, [pc, #60]	; (8010a88 <pbuf_pool_is_empty+0x4c>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010a4e:	4b0e      	ldr	r3, [pc, #56]	; (8010a88 <pbuf_pool_is_empty+0x4c>)
 8010a50:	2201      	movs	r2, #1
 8010a52:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f00a faa5 	bl	801afa4 <sys_arch_unprotect>

  if (!queued) {
 8010a5a:	78fb      	ldrb	r3, [r7, #3]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d10f      	bne.n	8010a80 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010a60:	2100      	movs	r1, #0
 8010a62:	480a      	ldr	r0, [pc, #40]	; (8010a8c <pbuf_pool_is_empty+0x50>)
 8010a64:	f7fd ff12 	bl	800e88c <tcpip_try_callback>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d008      	beq.n	8010a80 <pbuf_pool_is_empty+0x44>
 8010a6e:	f00a fa8b 	bl	801af88 <sys_arch_protect>
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	4b04      	ldr	r3, [pc, #16]	; (8010a88 <pbuf_pool_is_empty+0x4c>)
 8010a76:	2200      	movs	r2, #0
 8010a78:	701a      	strb	r2, [r3, #0]
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f00a fa92 	bl	801afa4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	2000be38 	.word	0x2000be38
 8010a8c:	08010a29 	.word	0x08010a29

08010a90 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b085      	sub	sp, #20
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	4611      	mov	r1, r2
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	460b      	mov	r3, r1
 8010aa0:	80fb      	strh	r3, [r7, #6]
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	88fa      	ldrh	r2, [r7, #6]
 8010ab6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	88ba      	ldrh	r2, [r7, #4]
 8010abc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010abe:	8b3b      	ldrh	r3, [r7, #24]
 8010ac0:	b2da      	uxtb	r2, r3
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	7f3a      	ldrb	r2, [r7, #28]
 8010aca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	73da      	strb	r2, [r3, #15]
}
 8010ad8:	bf00      	nop
 8010ada:	3714      	adds	r7, #20
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b08c      	sub	sp, #48	; 0x30
 8010ae8:	af02      	add	r7, sp, #8
 8010aea:	4603      	mov	r3, r0
 8010aec:	71fb      	strb	r3, [r7, #7]
 8010aee:	460b      	mov	r3, r1
 8010af0:	80bb      	strh	r3, [r7, #4]
 8010af2:	4613      	mov	r3, r2
 8010af4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010af6:	79fb      	ldrb	r3, [r7, #7]
 8010af8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010afa:	887b      	ldrh	r3, [r7, #2]
 8010afc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010b00:	d07f      	beq.n	8010c02 <pbuf_alloc+0x11e>
 8010b02:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010b06:	f300 80c8 	bgt.w	8010c9a <pbuf_alloc+0x1b6>
 8010b0a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010b0e:	d010      	beq.n	8010b32 <pbuf_alloc+0x4e>
 8010b10:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010b14:	f300 80c1 	bgt.w	8010c9a <pbuf_alloc+0x1b6>
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d002      	beq.n	8010b22 <pbuf_alloc+0x3e>
 8010b1c:	2b41      	cmp	r3, #65	; 0x41
 8010b1e:	f040 80bc 	bne.w	8010c9a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010b22:	887a      	ldrh	r2, [r7, #2]
 8010b24:	88bb      	ldrh	r3, [r7, #4]
 8010b26:	4619      	mov	r1, r3
 8010b28:	2000      	movs	r0, #0
 8010b2a:	f000 f8d1 	bl	8010cd0 <pbuf_alloc_reference>
 8010b2e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010b30:	e0bd      	b.n	8010cae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010b32:	2300      	movs	r3, #0
 8010b34:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010b3a:	88bb      	ldrh	r3, [r7, #4]
 8010b3c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010b3e:	200c      	movs	r0, #12
 8010b40:	f7ff fc0e 	bl	8010360 <memp_malloc>
 8010b44:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d109      	bne.n	8010b60 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010b4c:	f7ff ff76 	bl	8010a3c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d002      	beq.n	8010b5c <pbuf_alloc+0x78>
            pbuf_free(p);
 8010b56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b58:	f000 faa8 	bl	80110ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	e0a7      	b.n	8010cb0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b62:	3303      	adds	r3, #3
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	f023 0303 	bic.w	r3, r3, #3
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	8b7a      	ldrh	r2, [r7, #26]
 8010b74:	4293      	cmp	r3, r2
 8010b76:	bf28      	it	cs
 8010b78:	4613      	movcs	r3, r2
 8010b7a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010b7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b7e:	3310      	adds	r3, #16
 8010b80:	693a      	ldr	r2, [r7, #16]
 8010b82:	4413      	add	r3, r2
 8010b84:	3303      	adds	r3, #3
 8010b86:	f023 0303 	bic.w	r3, r3, #3
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	89f9      	ldrh	r1, [r7, #14]
 8010b8e:	8b7a      	ldrh	r2, [r7, #26]
 8010b90:	2300      	movs	r3, #0
 8010b92:	9301      	str	r3, [sp, #4]
 8010b94:	887b      	ldrh	r3, [r7, #2]
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	6938      	ldr	r0, [r7, #16]
 8010b9e:	f7ff ff77 	bl	8010a90 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	f003 0303 	and.w	r3, r3, #3
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d006      	beq.n	8010bbc <pbuf_alloc+0xd8>
 8010bae:	4b42      	ldr	r3, [pc, #264]	; (8010cb8 <pbuf_alloc+0x1d4>)
 8010bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010bb4:	4941      	ldr	r1, [pc, #260]	; (8010cbc <pbuf_alloc+0x1d8>)
 8010bb6:	4842      	ldr	r0, [pc, #264]	; (8010cc0 <pbuf_alloc+0x1dc>)
 8010bb8:	f00a fdde 	bl	801b778 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010bbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bbe:	3303      	adds	r3, #3
 8010bc0:	f023 0303 	bic.w	r3, r3, #3
 8010bc4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010bc8:	d106      	bne.n	8010bd8 <pbuf_alloc+0xf4>
 8010bca:	4b3b      	ldr	r3, [pc, #236]	; (8010cb8 <pbuf_alloc+0x1d4>)
 8010bcc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010bd0:	493c      	ldr	r1, [pc, #240]	; (8010cc4 <pbuf_alloc+0x1e0>)
 8010bd2:	483b      	ldr	r0, [pc, #236]	; (8010cc0 <pbuf_alloc+0x1dc>)
 8010bd4:	f00a fdd0 	bl	801b778 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d102      	bne.n	8010be4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	627b      	str	r3, [r7, #36]	; 0x24
 8010be2:	e002      	b.n	8010bea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	693a      	ldr	r2, [r7, #16]
 8010be8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010bee:	8b7a      	ldrh	r2, [r7, #26]
 8010bf0:	89fb      	ldrh	r3, [r7, #14]
 8010bf2:	1ad3      	subs	r3, r2, r3
 8010bf4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010bfa:	8b7b      	ldrh	r3, [r7, #26]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d19e      	bne.n	8010b3e <pbuf_alloc+0x5a>
      break;
 8010c00:	e055      	b.n	8010cae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010c02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c04:	3303      	adds	r3, #3
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	f023 0303 	bic.w	r3, r3, #3
 8010c0c:	b29a      	uxth	r2, r3
 8010c0e:	88bb      	ldrh	r3, [r7, #4]
 8010c10:	3303      	adds	r3, #3
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	f023 0303 	bic.w	r3, r3, #3
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	4413      	add	r3, r2
 8010c1c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010c1e:	8b3b      	ldrh	r3, [r7, #24]
 8010c20:	3310      	adds	r3, #16
 8010c22:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010c24:	8b3a      	ldrh	r2, [r7, #24]
 8010c26:	88bb      	ldrh	r3, [r7, #4]
 8010c28:	3303      	adds	r3, #3
 8010c2a:	f023 0303 	bic.w	r3, r3, #3
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d306      	bcc.n	8010c40 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010c32:	8afa      	ldrh	r2, [r7, #22]
 8010c34:	88bb      	ldrh	r3, [r7, #4]
 8010c36:	3303      	adds	r3, #3
 8010c38:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d201      	bcs.n	8010c44 <pbuf_alloc+0x160>
        return NULL;
 8010c40:	2300      	movs	r3, #0
 8010c42:	e035      	b.n	8010cb0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010c44:	8afb      	ldrh	r3, [r7, #22]
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7ff fa08 	bl	801005c <mem_malloc>
 8010c4c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <pbuf_alloc+0x174>
        return NULL;
 8010c54:	2300      	movs	r3, #0
 8010c56:	e02b      	b.n	8010cb0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010c58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c5a:	3310      	adds	r3, #16
 8010c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c5e:	4413      	add	r3, r2
 8010c60:	3303      	adds	r3, #3
 8010c62:	f023 0303 	bic.w	r3, r3, #3
 8010c66:	4618      	mov	r0, r3
 8010c68:	88b9      	ldrh	r1, [r7, #4]
 8010c6a:	88ba      	ldrh	r2, [r7, #4]
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	9301      	str	r3, [sp, #4]
 8010c70:	887b      	ldrh	r3, [r7, #2]
 8010c72:	9300      	str	r3, [sp, #0]
 8010c74:	460b      	mov	r3, r1
 8010c76:	4601      	mov	r1, r0
 8010c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c7a:	f7ff ff09 	bl	8010a90 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	f003 0303 	and.w	r3, r3, #3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d010      	beq.n	8010cac <pbuf_alloc+0x1c8>
 8010c8a:	4b0b      	ldr	r3, [pc, #44]	; (8010cb8 <pbuf_alloc+0x1d4>)
 8010c8c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010c90:	490d      	ldr	r1, [pc, #52]	; (8010cc8 <pbuf_alloc+0x1e4>)
 8010c92:	480b      	ldr	r0, [pc, #44]	; (8010cc0 <pbuf_alloc+0x1dc>)
 8010c94:	f00a fd70 	bl	801b778 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010c98:	e008      	b.n	8010cac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010c9a:	4b07      	ldr	r3, [pc, #28]	; (8010cb8 <pbuf_alloc+0x1d4>)
 8010c9c:	f240 1227 	movw	r2, #295	; 0x127
 8010ca0:	490a      	ldr	r1, [pc, #40]	; (8010ccc <pbuf_alloc+0x1e8>)
 8010ca2:	4807      	ldr	r0, [pc, #28]	; (8010cc0 <pbuf_alloc+0x1dc>)
 8010ca4:	f00a fd68 	bl	801b778 <printf>
      return NULL;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e001      	b.n	8010cb0 <pbuf_alloc+0x1cc>
      break;
 8010cac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3728      	adds	r7, #40	; 0x28
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	08025a10 	.word	0x08025a10
 8010cbc:	08025a40 	.word	0x08025a40
 8010cc0:	08025a70 	.word	0x08025a70
 8010cc4:	08025a98 	.word	0x08025a98
 8010cc8:	08025acc 	.word	0x08025acc
 8010ccc:	08025af8 	.word	0x08025af8

08010cd0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b086      	sub	sp, #24
 8010cd4:	af02      	add	r7, sp, #8
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	807b      	strh	r3, [r7, #2]
 8010cdc:	4613      	mov	r3, r2
 8010cde:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010ce0:	883b      	ldrh	r3, [r7, #0]
 8010ce2:	2b41      	cmp	r3, #65	; 0x41
 8010ce4:	d009      	beq.n	8010cfa <pbuf_alloc_reference+0x2a>
 8010ce6:	883b      	ldrh	r3, [r7, #0]
 8010ce8:	2b01      	cmp	r3, #1
 8010cea:	d006      	beq.n	8010cfa <pbuf_alloc_reference+0x2a>
 8010cec:	4b0f      	ldr	r3, [pc, #60]	; (8010d2c <pbuf_alloc_reference+0x5c>)
 8010cee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010cf2:	490f      	ldr	r1, [pc, #60]	; (8010d30 <pbuf_alloc_reference+0x60>)
 8010cf4:	480f      	ldr	r0, [pc, #60]	; (8010d34 <pbuf_alloc_reference+0x64>)
 8010cf6:	f00a fd3f 	bl	801b778 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010cfa:	200b      	movs	r0, #11
 8010cfc:	f7ff fb30 	bl	8010360 <memp_malloc>
 8010d00:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	e00b      	b.n	8010d24 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010d0c:	8879      	ldrh	r1, [r7, #2]
 8010d0e:	887a      	ldrh	r2, [r7, #2]
 8010d10:	2300      	movs	r3, #0
 8010d12:	9301      	str	r3, [sp, #4]
 8010d14:	883b      	ldrh	r3, [r7, #0]
 8010d16:	9300      	str	r3, [sp, #0]
 8010d18:	460b      	mov	r3, r1
 8010d1a:	6879      	ldr	r1, [r7, #4]
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f7ff feb7 	bl	8010a90 <pbuf_init_alloced_pbuf>
  return p;
 8010d22:	68fb      	ldr	r3, [r7, #12]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	08025a10 	.word	0x08025a10
 8010d30:	08025b14 	.word	0x08025b14
 8010d34:	08025a70 	.word	0x08025a70

08010d38 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b088      	sub	sp, #32
 8010d3c:	af02      	add	r7, sp, #8
 8010d3e:	607b      	str	r3, [r7, #4]
 8010d40:	4603      	mov	r3, r0
 8010d42:	73fb      	strb	r3, [r7, #15]
 8010d44:	460b      	mov	r3, r1
 8010d46:	81bb      	strh	r3, [r7, #12]
 8010d48:	4613      	mov	r3, r2
 8010d4a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010d4c:	7bfb      	ldrb	r3, [r7, #15]
 8010d4e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010d50:	8a7b      	ldrh	r3, [r7, #18]
 8010d52:	3303      	adds	r3, #3
 8010d54:	f023 0203 	bic.w	r2, r3, #3
 8010d58:	89bb      	ldrh	r3, [r7, #12]
 8010d5a:	441a      	add	r2, r3
 8010d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d901      	bls.n	8010d66 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010d62:	2300      	movs	r3, #0
 8010d64:	e018      	b.n	8010d98 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010d66:	6a3b      	ldr	r3, [r7, #32]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d007      	beq.n	8010d7c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010d6c:	8a7b      	ldrh	r3, [r7, #18]
 8010d6e:	3303      	adds	r3, #3
 8010d70:	f023 0303 	bic.w	r3, r3, #3
 8010d74:	6a3a      	ldr	r2, [r7, #32]
 8010d76:	4413      	add	r3, r2
 8010d78:	617b      	str	r3, [r7, #20]
 8010d7a:	e001      	b.n	8010d80 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	89b9      	ldrh	r1, [r7, #12]
 8010d84:	89ba      	ldrh	r2, [r7, #12]
 8010d86:	2302      	movs	r3, #2
 8010d88:	9301      	str	r3, [sp, #4]
 8010d8a:	897b      	ldrh	r3, [r7, #10]
 8010d8c:	9300      	str	r3, [sp, #0]
 8010d8e:	460b      	mov	r3, r1
 8010d90:	6979      	ldr	r1, [r7, #20]
 8010d92:	f7ff fe7d 	bl	8010a90 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010d96:	687b      	ldr	r3, [r7, #4]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3718      	adds	r7, #24
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b084      	sub	sp, #16
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d106      	bne.n	8010dc0 <pbuf_realloc+0x20>
 8010db2:	4b3a      	ldr	r3, [pc, #232]	; (8010e9c <pbuf_realloc+0xfc>)
 8010db4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010db8:	4939      	ldr	r1, [pc, #228]	; (8010ea0 <pbuf_realloc+0x100>)
 8010dba:	483a      	ldr	r0, [pc, #232]	; (8010ea4 <pbuf_realloc+0x104>)
 8010dbc:	f00a fcdc 	bl	801b778 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	891b      	ldrh	r3, [r3, #8]
 8010dc4:	887a      	ldrh	r2, [r7, #2]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d263      	bcs.n	8010e92 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	891a      	ldrh	r2, [r3, #8]
 8010dce:	887b      	ldrh	r3, [r7, #2]
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010dd4:	887b      	ldrh	r3, [r7, #2]
 8010dd6:	817b      	strh	r3, [r7, #10]
  q = p;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010ddc:	e018      	b.n	8010e10 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	895b      	ldrh	r3, [r3, #10]
 8010de2:	897a      	ldrh	r2, [r7, #10]
 8010de4:	1ad3      	subs	r3, r2, r3
 8010de6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	891a      	ldrh	r2, [r3, #8]
 8010dec:	893b      	ldrh	r3, [r7, #8]
 8010dee:	1ad3      	subs	r3, r2, r3
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d106      	bne.n	8010e10 <pbuf_realloc+0x70>
 8010e02:	4b26      	ldr	r3, [pc, #152]	; (8010e9c <pbuf_realloc+0xfc>)
 8010e04:	f240 12af 	movw	r2, #431	; 0x1af
 8010e08:	4927      	ldr	r1, [pc, #156]	; (8010ea8 <pbuf_realloc+0x108>)
 8010e0a:	4826      	ldr	r0, [pc, #152]	; (8010ea4 <pbuf_realloc+0x104>)
 8010e0c:	f00a fcb4 	bl	801b778 <printf>
  while (rem_len > q->len) {
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	895b      	ldrh	r3, [r3, #10]
 8010e14:	897a      	ldrh	r2, [r7, #10]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d8e1      	bhi.n	8010dde <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	7b1b      	ldrb	r3, [r3, #12]
 8010e1e:	f003 030f 	and.w	r3, r3, #15
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d121      	bne.n	8010e6a <pbuf_realloc+0xca>
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	895b      	ldrh	r3, [r3, #10]
 8010e2a:	897a      	ldrh	r2, [r7, #10]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d01c      	beq.n	8010e6a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	7b5b      	ldrb	r3, [r3, #13]
 8010e34:	f003 0302 	and.w	r3, r3, #2
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d116      	bne.n	8010e6a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	685a      	ldr	r2, [r3, #4]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	897b      	ldrh	r3, [r7, #10]
 8010e48:	4413      	add	r3, r2
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	68f8      	ldr	r0, [r7, #12]
 8010e50:	f7fe fffa 	bl	800fe48 <mem_trim>
 8010e54:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d106      	bne.n	8010e6a <pbuf_realloc+0xca>
 8010e5c:	4b0f      	ldr	r3, [pc, #60]	; (8010e9c <pbuf_realloc+0xfc>)
 8010e5e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010e62:	4912      	ldr	r1, [pc, #72]	; (8010eac <pbuf_realloc+0x10c>)
 8010e64:	480f      	ldr	r0, [pc, #60]	; (8010ea4 <pbuf_realloc+0x104>)
 8010e66:	f00a fc87 	bl	801b778 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	897a      	ldrh	r2, [r7, #10]
 8010e6e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	895a      	ldrh	r2, [r3, #10]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d004      	beq.n	8010e8a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f000 f911 	bl	80110ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	601a      	str	r2, [r3, #0]
 8010e90:	e000      	b.n	8010e94 <pbuf_realloc+0xf4>
    return;
 8010e92:	bf00      	nop

}
 8010e94:	3710      	adds	r7, #16
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	bf00      	nop
 8010e9c:	08025a10 	.word	0x08025a10
 8010ea0:	08025b28 	.word	0x08025b28
 8010ea4:	08025a70 	.word	0x08025a70
 8010ea8:	08025b40 	.word	0x08025b40
 8010eac:	08025b58 	.word	0x08025b58

08010eb0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b086      	sub	sp, #24
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d106      	bne.n	8010ed2 <pbuf_add_header_impl+0x22>
 8010ec4:	4b2b      	ldr	r3, [pc, #172]	; (8010f74 <pbuf_add_header_impl+0xc4>)
 8010ec6:	f240 12df 	movw	r2, #479	; 0x1df
 8010eca:	492b      	ldr	r1, [pc, #172]	; (8010f78 <pbuf_add_header_impl+0xc8>)
 8010ecc:	482b      	ldr	r0, [pc, #172]	; (8010f7c <pbuf_add_header_impl+0xcc>)
 8010ece:	f00a fc53 	bl	801b778 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <pbuf_add_header_impl+0x30>
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ede:	d301      	bcc.n	8010ee4 <pbuf_add_header_impl+0x34>
    return 1;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	e043      	b.n	8010f6c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d101      	bne.n	8010eee <pbuf_add_header_impl+0x3e>
    return 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	e03e      	b.n	8010f6c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	891a      	ldrh	r2, [r3, #8]
 8010ef6:	8a7b      	ldrh	r3, [r7, #18]
 8010ef8:	4413      	add	r3, r2
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	8a7a      	ldrh	r2, [r7, #18]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d901      	bls.n	8010f06 <pbuf_add_header_impl+0x56>
    return 1;
 8010f02:	2301      	movs	r3, #1
 8010f04:	e032      	b.n	8010f6c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	7b1b      	ldrb	r3, [r3, #12]
 8010f0a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010f0c:	8a3b      	ldrh	r3, [r7, #16]
 8010f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00c      	beq.n	8010f30 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	685a      	ldr	r2, [r3, #4]
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	425b      	negs	r3, r3
 8010f1e:	4413      	add	r3, r2
 8010f20:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	3310      	adds	r3, #16
 8010f26:	697a      	ldr	r2, [r7, #20]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d20d      	bcs.n	8010f48 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e01d      	b.n	8010f6c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010f30:	79fb      	ldrb	r3, [r7, #7]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d006      	beq.n	8010f44 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	685a      	ldr	r2, [r3, #4]
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	425b      	negs	r3, r3
 8010f3e:	4413      	add	r3, r2
 8010f40:	617b      	str	r3, [r7, #20]
 8010f42:	e001      	b.n	8010f48 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010f44:	2301      	movs	r3, #1
 8010f46:	e011      	b.n	8010f6c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	697a      	ldr	r2, [r7, #20]
 8010f4c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	895a      	ldrh	r2, [r3, #10]
 8010f52:	8a7b      	ldrh	r3, [r7, #18]
 8010f54:	4413      	add	r3, r2
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	891a      	ldrh	r2, [r3, #8]
 8010f60:	8a7b      	ldrh	r3, [r7, #18]
 8010f62:	4413      	add	r3, r2
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	811a      	strh	r2, [r3, #8]


  return 0;
 8010f6a:	2300      	movs	r3, #0
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3718      	adds	r7, #24
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	08025a10 	.word	0x08025a10
 8010f78:	08025b74 	.word	0x08025b74
 8010f7c:	08025a70 	.word	0x08025a70

08010f80 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	6839      	ldr	r1, [r7, #0]
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff ff8e 	bl	8010eb0 <pbuf_add_header_impl>
 8010f94:	4603      	mov	r3, r0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3708      	adds	r7, #8
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
	...

08010fa0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d106      	bne.n	8010fbe <pbuf_remove_header+0x1e>
 8010fb0:	4b20      	ldr	r3, [pc, #128]	; (8011034 <pbuf_remove_header+0x94>)
 8010fb2:	f240 224b 	movw	r2, #587	; 0x24b
 8010fb6:	4920      	ldr	r1, [pc, #128]	; (8011038 <pbuf_remove_header+0x98>)
 8010fb8:	4820      	ldr	r0, [pc, #128]	; (801103c <pbuf_remove_header+0x9c>)
 8010fba:	f00a fbdd 	bl	801b778 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d003      	beq.n	8010fcc <pbuf_remove_header+0x2c>
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fca:	d301      	bcc.n	8010fd0 <pbuf_remove_header+0x30>
    return 1;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e02c      	b.n	801102a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d101      	bne.n	8010fda <pbuf_remove_header+0x3a>
    return 0;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	e027      	b.n	801102a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	895b      	ldrh	r3, [r3, #10]
 8010fe2:	89fa      	ldrh	r2, [r7, #14]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d908      	bls.n	8010ffa <pbuf_remove_header+0x5a>
 8010fe8:	4b12      	ldr	r3, [pc, #72]	; (8011034 <pbuf_remove_header+0x94>)
 8010fea:	f240 2255 	movw	r2, #597	; 0x255
 8010fee:	4914      	ldr	r1, [pc, #80]	; (8011040 <pbuf_remove_header+0xa0>)
 8010ff0:	4812      	ldr	r0, [pc, #72]	; (801103c <pbuf_remove_header+0x9c>)
 8010ff2:	f00a fbc1 	bl	801b778 <printf>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e017      	b.n	801102a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	685a      	ldr	r2, [r3, #4]
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	441a      	add	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	895a      	ldrh	r2, [r3, #10]
 8011010:	89fb      	ldrh	r3, [r7, #14]
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	b29a      	uxth	r2, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	891a      	ldrh	r2, [r3, #8]
 801101e:	89fb      	ldrh	r3, [r7, #14]
 8011020:	1ad3      	subs	r3, r2, r3
 8011022:	b29a      	uxth	r2, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	08025a10 	.word	0x08025a10
 8011038:	08025b74 	.word	0x08025b74
 801103c:	08025a70 	.word	0x08025a70
 8011040:	08025b80 	.word	0x08025b80

08011044 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	460b      	mov	r3, r1
 801104e:	807b      	strh	r3, [r7, #2]
 8011050:	4613      	mov	r3, r2
 8011052:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011054:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011058:	2b00      	cmp	r3, #0
 801105a:	da08      	bge.n	801106e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801105c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011060:	425b      	negs	r3, r3
 8011062:	4619      	mov	r1, r3
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7ff ff9b 	bl	8010fa0 <pbuf_remove_header>
 801106a:	4603      	mov	r3, r0
 801106c:	e007      	b.n	801107e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801106e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011072:	787a      	ldrb	r2, [r7, #1]
 8011074:	4619      	mov	r1, r3
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f7ff ff1a 	bl	8010eb0 <pbuf_add_header_impl>
 801107c:	4603      	mov	r3, r0
  }
}
 801107e:	4618      	mov	r0, r3
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}

08011086 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011086:	b580      	push	{r7, lr}
 8011088:	b082      	sub	sp, #8
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
 801108e:	460b      	mov	r3, r1
 8011090:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011092:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011096:	2201      	movs	r2, #1
 8011098:	4619      	mov	r1, r3
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f7ff ffd2 	bl	8011044 <pbuf_header_impl>
 80110a0:	4603      	mov	r3, r0
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3708      	adds	r7, #8
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
	...

080110ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b088      	sub	sp, #32
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d10b      	bne.n	80110d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d106      	bne.n	80110ce <pbuf_free+0x22>
 80110c0:	4b3b      	ldr	r3, [pc, #236]	; (80111b0 <pbuf_free+0x104>)
 80110c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80110c6:	493b      	ldr	r1, [pc, #236]	; (80111b4 <pbuf_free+0x108>)
 80110c8:	483b      	ldr	r0, [pc, #236]	; (80111b8 <pbuf_free+0x10c>)
 80110ca:	f00a fb55 	bl	801b778 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80110ce:	2300      	movs	r3, #0
 80110d0:	e069      	b.n	80111a6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80110d2:	2300      	movs	r3, #0
 80110d4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80110d6:	e062      	b.n	801119e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80110d8:	f009 ff56 	bl	801af88 <sys_arch_protect>
 80110dc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7b9b      	ldrb	r3, [r3, #14]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d106      	bne.n	80110f4 <pbuf_free+0x48>
 80110e6:	4b32      	ldr	r3, [pc, #200]	; (80111b0 <pbuf_free+0x104>)
 80110e8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80110ec:	4933      	ldr	r1, [pc, #204]	; (80111bc <pbuf_free+0x110>)
 80110ee:	4832      	ldr	r0, [pc, #200]	; (80111b8 <pbuf_free+0x10c>)
 80110f0:	f00a fb42 	bl	801b778 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	7b9b      	ldrb	r3, [r3, #14]
 80110f8:	3b01      	subs	r3, #1
 80110fa:	b2da      	uxtb	r2, r3
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	739a      	strb	r2, [r3, #14]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	7b9b      	ldrb	r3, [r3, #14]
 8011104:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011106:	69b8      	ldr	r0, [r7, #24]
 8011108:	f009 ff4c 	bl	801afa4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801110c:	7dfb      	ldrb	r3, [r7, #23]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d143      	bne.n	801119a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	7b1b      	ldrb	r3, [r3, #12]
 801111c:	f003 030f 	and.w	r3, r3, #15
 8011120:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	7b5b      	ldrb	r3, [r3, #13]
 8011126:	f003 0302 	and.w	r3, r3, #2
 801112a:	2b00      	cmp	r3, #0
 801112c:	d011      	beq.n	8011152 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	691b      	ldr	r3, [r3, #16]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d106      	bne.n	8011148 <pbuf_free+0x9c>
 801113a:	4b1d      	ldr	r3, [pc, #116]	; (80111b0 <pbuf_free+0x104>)
 801113c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011140:	491f      	ldr	r1, [pc, #124]	; (80111c0 <pbuf_free+0x114>)
 8011142:	481d      	ldr	r0, [pc, #116]	; (80111b8 <pbuf_free+0x10c>)
 8011144:	f00a fb18 	bl	801b778 <printf>
        pc->custom_free_function(p);
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	691b      	ldr	r3, [r3, #16]
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	4798      	blx	r3
 8011150:	e01d      	b.n	801118e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011152:	7bfb      	ldrb	r3, [r7, #15]
 8011154:	2b02      	cmp	r3, #2
 8011156:	d104      	bne.n	8011162 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011158:	6879      	ldr	r1, [r7, #4]
 801115a:	200c      	movs	r0, #12
 801115c:	f7ff f952 	bl	8010404 <memp_free>
 8011160:	e015      	b.n	801118e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011162:	7bfb      	ldrb	r3, [r7, #15]
 8011164:	2b01      	cmp	r3, #1
 8011166:	d104      	bne.n	8011172 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011168:	6879      	ldr	r1, [r7, #4]
 801116a:	200b      	movs	r0, #11
 801116c:	f7ff f94a 	bl	8010404 <memp_free>
 8011170:	e00d      	b.n	801118e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011172:	7bfb      	ldrb	r3, [r7, #15]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d103      	bne.n	8011180 <pbuf_free+0xd4>
          mem_free(p);
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f7fe fdd5 	bl	800fd28 <mem_free>
 801117e:	e006      	b.n	801118e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011180:	4b0b      	ldr	r3, [pc, #44]	; (80111b0 <pbuf_free+0x104>)
 8011182:	f240 320f 	movw	r2, #783	; 0x30f
 8011186:	490f      	ldr	r1, [pc, #60]	; (80111c4 <pbuf_free+0x118>)
 8011188:	480b      	ldr	r0, [pc, #44]	; (80111b8 <pbuf_free+0x10c>)
 801118a:	f00a faf5 	bl	801b778 <printf>
        }
      }
      count++;
 801118e:	7ffb      	ldrb	r3, [r7, #31]
 8011190:	3301      	adds	r3, #1
 8011192:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	607b      	str	r3, [r7, #4]
 8011198:	e001      	b.n	801119e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801119a:	2300      	movs	r3, #0
 801119c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d199      	bne.n	80110d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80111a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3720      	adds	r7, #32
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	08025a10 	.word	0x08025a10
 80111b4:	08025b74 	.word	0x08025b74
 80111b8:	08025a70 	.word	0x08025a70
 80111bc:	08025ba0 	.word	0x08025ba0
 80111c0:	08025bb8 	.word	0x08025bb8
 80111c4:	08025bdc 	.word	0x08025bdc

080111c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80111d0:	2300      	movs	r3, #0
 80111d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80111d4:	e005      	b.n	80111e2 <pbuf_clen+0x1a>
    ++len;
 80111d6:	89fb      	ldrh	r3, [r7, #14]
 80111d8:	3301      	adds	r3, #1
 80111da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1f6      	bne.n	80111d6 <pbuf_clen+0xe>
  }
  return len;
 80111e8:	89fb      	ldrh	r3, [r7, #14]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3714      	adds	r7, #20
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
	...

080111f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d016      	beq.n	8011234 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011206:	f009 febf 	bl	801af88 <sys_arch_protect>
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	7b9b      	ldrb	r3, [r3, #14]
 8011210:	3301      	adds	r3, #1
 8011212:	b2da      	uxtb	r2, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	739a      	strb	r2, [r3, #14]
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	f009 fec3 	bl	801afa4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	7b9b      	ldrb	r3, [r3, #14]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d106      	bne.n	8011234 <pbuf_ref+0x3c>
 8011226:	4b05      	ldr	r3, [pc, #20]	; (801123c <pbuf_ref+0x44>)
 8011228:	f240 3242 	movw	r2, #834	; 0x342
 801122c:	4904      	ldr	r1, [pc, #16]	; (8011240 <pbuf_ref+0x48>)
 801122e:	4805      	ldr	r0, [pc, #20]	; (8011244 <pbuf_ref+0x4c>)
 8011230:	f00a faa2 	bl	801b778 <printf>
  }
}
 8011234:	bf00      	nop
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	08025a10 	.word	0x08025a10
 8011240:	08025bf0 	.word	0x08025bf0
 8011244:	08025a70 	.word	0x08025a70

08011248 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d002      	beq.n	801125e <pbuf_cat+0x16>
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d107      	bne.n	801126e <pbuf_cat+0x26>
 801125e:	4b20      	ldr	r3, [pc, #128]	; (80112e0 <pbuf_cat+0x98>)
 8011260:	f240 3259 	movw	r2, #857	; 0x359
 8011264:	491f      	ldr	r1, [pc, #124]	; (80112e4 <pbuf_cat+0x9c>)
 8011266:	4820      	ldr	r0, [pc, #128]	; (80112e8 <pbuf_cat+0xa0>)
 8011268:	f00a fa86 	bl	801b778 <printf>
 801126c:	e034      	b.n	80112d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	60fb      	str	r3, [r7, #12]
 8011272:	e00a      	b.n	801128a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	891a      	ldrh	r2, [r3, #8]
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	891b      	ldrh	r3, [r3, #8]
 801127c:	4413      	add	r3, r2
 801127e:	b29a      	uxth	r2, r3
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	60fb      	str	r3, [r7, #12]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1f0      	bne.n	8011274 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	891a      	ldrh	r2, [r3, #8]
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	895b      	ldrh	r3, [r3, #10]
 801129a:	429a      	cmp	r2, r3
 801129c:	d006      	beq.n	80112ac <pbuf_cat+0x64>
 801129e:	4b10      	ldr	r3, [pc, #64]	; (80112e0 <pbuf_cat+0x98>)
 80112a0:	f240 3262 	movw	r2, #866	; 0x362
 80112a4:	4911      	ldr	r1, [pc, #68]	; (80112ec <pbuf_cat+0xa4>)
 80112a6:	4810      	ldr	r0, [pc, #64]	; (80112e8 <pbuf_cat+0xa0>)
 80112a8:	f00a fa66 	bl	801b778 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d006      	beq.n	80112c2 <pbuf_cat+0x7a>
 80112b4:	4b0a      	ldr	r3, [pc, #40]	; (80112e0 <pbuf_cat+0x98>)
 80112b6:	f240 3263 	movw	r2, #867	; 0x363
 80112ba:	490d      	ldr	r1, [pc, #52]	; (80112f0 <pbuf_cat+0xa8>)
 80112bc:	480a      	ldr	r0, [pc, #40]	; (80112e8 <pbuf_cat+0xa0>)
 80112be:	f00a fa5b 	bl	801b778 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	891a      	ldrh	r2, [r3, #8]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	891b      	ldrh	r3, [r3, #8]
 80112ca:	4413      	add	r3, r2
 80112cc:	b29a      	uxth	r2, r3
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	683a      	ldr	r2, [r7, #0]
 80112d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80112d8:	3710      	adds	r7, #16
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	bf00      	nop
 80112e0:	08025a10 	.word	0x08025a10
 80112e4:	08025c04 	.word	0x08025c04
 80112e8:	08025a70 	.word	0x08025a70
 80112ec:	08025c3c 	.word	0x08025c3c
 80112f0:	08025c6c 	.word	0x08025c6c

080112f4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80112fe:	6839      	ldr	r1, [r7, #0]
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7ff ffa1 	bl	8011248 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011306:	6838      	ldr	r0, [r7, #0]
 8011308:	f7ff ff76 	bl	80111f8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801130c:	bf00      	nop
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b086      	sub	sp, #24
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801131e:	2300      	movs	r3, #0
 8011320:	617b      	str	r3, [r7, #20]
 8011322:	2300      	movs	r3, #0
 8011324:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d008      	beq.n	801133e <pbuf_copy+0x2a>
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d005      	beq.n	801133e <pbuf_copy+0x2a>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	891a      	ldrh	r2, [r3, #8]
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	891b      	ldrh	r3, [r3, #8]
 801133a:	429a      	cmp	r2, r3
 801133c:	d209      	bcs.n	8011352 <pbuf_copy+0x3e>
 801133e:	4b57      	ldr	r3, [pc, #348]	; (801149c <pbuf_copy+0x188>)
 8011340:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011344:	4956      	ldr	r1, [pc, #344]	; (80114a0 <pbuf_copy+0x18c>)
 8011346:	4857      	ldr	r0, [pc, #348]	; (80114a4 <pbuf_copy+0x190>)
 8011348:	f00a fa16 	bl	801b778 <printf>
 801134c:	f06f 030f 	mvn.w	r3, #15
 8011350:	e09f      	b.n	8011492 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	895b      	ldrh	r3, [r3, #10]
 8011356:	461a      	mov	r2, r3
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	1ad2      	subs	r2, r2, r3
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	895b      	ldrh	r3, [r3, #10]
 8011360:	4619      	mov	r1, r3
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	1acb      	subs	r3, r1, r3
 8011366:	429a      	cmp	r2, r3
 8011368:	d306      	bcc.n	8011378 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	895b      	ldrh	r3, [r3, #10]
 801136e:	461a      	mov	r2, r3
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	60fb      	str	r3, [r7, #12]
 8011376:	e005      	b.n	8011384 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	895b      	ldrh	r3, [r3, #10]
 801137c:	461a      	mov	r2, r3
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	1ad3      	subs	r3, r2, r3
 8011382:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	685a      	ldr	r2, [r3, #4]
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	18d0      	adds	r0, r2, r3
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	685a      	ldr	r2, [r3, #4]
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	4413      	add	r3, r2
 8011394:	68fa      	ldr	r2, [r7, #12]
 8011396:	4619      	mov	r1, r3
 8011398:	f009 ff40 	bl	801b21c <memcpy>
    offset_to += len;
 801139c:	697a      	ldr	r2, [r7, #20]
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	4413      	add	r3, r2
 80113a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80113a4:	693a      	ldr	r2, [r7, #16]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	4413      	add	r3, r2
 80113aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	895b      	ldrh	r3, [r3, #10]
 80113b0:	461a      	mov	r2, r3
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d906      	bls.n	80113c6 <pbuf_copy+0xb2>
 80113b8:	4b38      	ldr	r3, [pc, #224]	; (801149c <pbuf_copy+0x188>)
 80113ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 80113be:	493a      	ldr	r1, [pc, #232]	; (80114a8 <pbuf_copy+0x194>)
 80113c0:	4838      	ldr	r0, [pc, #224]	; (80114a4 <pbuf_copy+0x190>)
 80113c2:	f00a f9d9 	bl	801b778 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	895b      	ldrh	r3, [r3, #10]
 80113ca:	461a      	mov	r2, r3
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d906      	bls.n	80113e0 <pbuf_copy+0xcc>
 80113d2:	4b32      	ldr	r3, [pc, #200]	; (801149c <pbuf_copy+0x188>)
 80113d4:	f240 32da 	movw	r2, #986	; 0x3da
 80113d8:	4934      	ldr	r1, [pc, #208]	; (80114ac <pbuf_copy+0x198>)
 80113da:	4832      	ldr	r0, [pc, #200]	; (80114a4 <pbuf_copy+0x190>)
 80113dc:	f00a f9cc 	bl	801b778 <printf>
    if (offset_from >= p_from->len) {
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	895b      	ldrh	r3, [r3, #10]
 80113e4:	461a      	mov	r2, r3
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d304      	bcc.n	80113f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80113ec:	2300      	movs	r3, #0
 80113ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	895b      	ldrh	r3, [r3, #10]
 80113fa:	461a      	mov	r2, r3
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	4293      	cmp	r3, r2
 8011400:	d114      	bne.n	801142c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011402:	2300      	movs	r3, #0
 8011404:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d10c      	bne.n	801142c <pbuf_copy+0x118>
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d009      	beq.n	801142c <pbuf_copy+0x118>
 8011418:	4b20      	ldr	r3, [pc, #128]	; (801149c <pbuf_copy+0x188>)
 801141a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801141e:	4924      	ldr	r1, [pc, #144]	; (80114b0 <pbuf_copy+0x19c>)
 8011420:	4820      	ldr	r0, [pc, #128]	; (80114a4 <pbuf_copy+0x190>)
 8011422:	f00a f9a9 	bl	801b778 <printf>
 8011426:	f06f 030f 	mvn.w	r3, #15
 801142a:	e032      	b.n	8011492 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d013      	beq.n	801145a <pbuf_copy+0x146>
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	895a      	ldrh	r2, [r3, #10]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	891b      	ldrh	r3, [r3, #8]
 801143a:	429a      	cmp	r2, r3
 801143c:	d10d      	bne.n	801145a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d009      	beq.n	801145a <pbuf_copy+0x146>
 8011446:	4b15      	ldr	r3, [pc, #84]	; (801149c <pbuf_copy+0x188>)
 8011448:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801144c:	4919      	ldr	r1, [pc, #100]	; (80114b4 <pbuf_copy+0x1a0>)
 801144e:	4815      	ldr	r0, [pc, #84]	; (80114a4 <pbuf_copy+0x190>)
 8011450:	f00a f992 	bl	801b778 <printf>
 8011454:	f06f 0305 	mvn.w	r3, #5
 8011458:	e01b      	b.n	8011492 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d013      	beq.n	8011488 <pbuf_copy+0x174>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	895a      	ldrh	r2, [r3, #10]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	891b      	ldrh	r3, [r3, #8]
 8011468:	429a      	cmp	r2, r3
 801146a:	d10d      	bne.n	8011488 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d009      	beq.n	8011488 <pbuf_copy+0x174>
 8011474:	4b09      	ldr	r3, [pc, #36]	; (801149c <pbuf_copy+0x188>)
 8011476:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801147a:	490e      	ldr	r1, [pc, #56]	; (80114b4 <pbuf_copy+0x1a0>)
 801147c:	4809      	ldr	r0, [pc, #36]	; (80114a4 <pbuf_copy+0x190>)
 801147e:	f00a f97b 	bl	801b778 <printf>
 8011482:	f06f 0305 	mvn.w	r3, #5
 8011486:	e004      	b.n	8011492 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	f47f af61 	bne.w	8011352 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3718      	adds	r7, #24
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	08025a10 	.word	0x08025a10
 80114a0:	08025cb8 	.word	0x08025cb8
 80114a4:	08025a70 	.word	0x08025a70
 80114a8:	08025ce8 	.word	0x08025ce8
 80114ac:	08025d00 	.word	0x08025d00
 80114b0:	08025d1c 	.word	0x08025d1c
 80114b4:	08025d2c 	.word	0x08025d2c

080114b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b088      	sub	sp, #32
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	4611      	mov	r1, r2
 80114c4:	461a      	mov	r2, r3
 80114c6:	460b      	mov	r3, r1
 80114c8:	80fb      	strh	r3, [r7, #6]
 80114ca:	4613      	mov	r3, r2
 80114cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80114d2:	2300      	movs	r3, #0
 80114d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d108      	bne.n	80114ee <pbuf_copy_partial+0x36>
 80114dc:	4b2b      	ldr	r3, [pc, #172]	; (801158c <pbuf_copy_partial+0xd4>)
 80114de:	f240 420a 	movw	r2, #1034	; 0x40a
 80114e2:	492b      	ldr	r1, [pc, #172]	; (8011590 <pbuf_copy_partial+0xd8>)
 80114e4:	482b      	ldr	r0, [pc, #172]	; (8011594 <pbuf_copy_partial+0xdc>)
 80114e6:	f00a f947 	bl	801b778 <printf>
 80114ea:	2300      	movs	r3, #0
 80114ec:	e04a      	b.n	8011584 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d108      	bne.n	8011506 <pbuf_copy_partial+0x4e>
 80114f4:	4b25      	ldr	r3, [pc, #148]	; (801158c <pbuf_copy_partial+0xd4>)
 80114f6:	f240 420b 	movw	r2, #1035	; 0x40b
 80114fa:	4927      	ldr	r1, [pc, #156]	; (8011598 <pbuf_copy_partial+0xe0>)
 80114fc:	4825      	ldr	r0, [pc, #148]	; (8011594 <pbuf_copy_partial+0xdc>)
 80114fe:	f00a f93b 	bl	801b778 <printf>
 8011502:	2300      	movs	r3, #0
 8011504:	e03e      	b.n	8011584 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	61fb      	str	r3, [r7, #28]
 801150a:	e034      	b.n	8011576 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801150c:	88bb      	ldrh	r3, [r7, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d00a      	beq.n	8011528 <pbuf_copy_partial+0x70>
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	895b      	ldrh	r3, [r3, #10]
 8011516:	88ba      	ldrh	r2, [r7, #4]
 8011518:	429a      	cmp	r2, r3
 801151a:	d305      	bcc.n	8011528 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	895b      	ldrh	r3, [r3, #10]
 8011520:	88ba      	ldrh	r2, [r7, #4]
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	80bb      	strh	r3, [r7, #4]
 8011526:	e023      	b.n	8011570 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011528:	69fb      	ldr	r3, [r7, #28]
 801152a:	895a      	ldrh	r2, [r3, #10]
 801152c:	88bb      	ldrh	r3, [r7, #4]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011532:	8b3a      	ldrh	r2, [r7, #24]
 8011534:	88fb      	ldrh	r3, [r7, #6]
 8011536:	429a      	cmp	r2, r3
 8011538:	d901      	bls.n	801153e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801153a:	88fb      	ldrh	r3, [r7, #6]
 801153c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801153e:	8b7b      	ldrh	r3, [r7, #26]
 8011540:	68ba      	ldr	r2, [r7, #8]
 8011542:	18d0      	adds	r0, r2, r3
 8011544:	69fb      	ldr	r3, [r7, #28]
 8011546:	685a      	ldr	r2, [r3, #4]
 8011548:	88bb      	ldrh	r3, [r7, #4]
 801154a:	4413      	add	r3, r2
 801154c:	8b3a      	ldrh	r2, [r7, #24]
 801154e:	4619      	mov	r1, r3
 8011550:	f009 fe64 	bl	801b21c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011554:	8afa      	ldrh	r2, [r7, #22]
 8011556:	8b3b      	ldrh	r3, [r7, #24]
 8011558:	4413      	add	r3, r2
 801155a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801155c:	8b7a      	ldrh	r2, [r7, #26]
 801155e:	8b3b      	ldrh	r3, [r7, #24]
 8011560:	4413      	add	r3, r2
 8011562:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011564:	88fa      	ldrh	r2, [r7, #6]
 8011566:	8b3b      	ldrh	r3, [r7, #24]
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801156c:	2300      	movs	r3, #0
 801156e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	61fb      	str	r3, [r7, #28]
 8011576:	88fb      	ldrh	r3, [r7, #6]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <pbuf_copy_partial+0xca>
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1c4      	bne.n	801150c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011582:	8afb      	ldrh	r3, [r7, #22]
}
 8011584:	4618      	mov	r0, r3
 8011586:	3720      	adds	r7, #32
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}
 801158c:	08025a10 	.word	0x08025a10
 8011590:	08025d58 	.word	0x08025d58
 8011594:	08025a70 	.word	0x08025a70
 8011598:	08025d78 	.word	0x08025d78

0801159c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b084      	sub	sp, #16
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	4603      	mov	r3, r0
 80115a4:	603a      	str	r2, [r7, #0]
 80115a6:	71fb      	strb	r3, [r7, #7]
 80115a8:	460b      	mov	r3, r1
 80115aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	8919      	ldrh	r1, [r3, #8]
 80115b0:	88ba      	ldrh	r2, [r7, #4]
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff fa95 	bl	8010ae4 <pbuf_alloc>
 80115ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d101      	bne.n	80115c6 <pbuf_clone+0x2a>
    return NULL;
 80115c2:	2300      	movs	r3, #0
 80115c4:	e011      	b.n	80115ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80115c6:	6839      	ldr	r1, [r7, #0]
 80115c8:	68f8      	ldr	r0, [r7, #12]
 80115ca:	f7ff fea3 	bl	8011314 <pbuf_copy>
 80115ce:	4603      	mov	r3, r0
 80115d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80115d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d006      	beq.n	80115e8 <pbuf_clone+0x4c>
 80115da:	4b06      	ldr	r3, [pc, #24]	; (80115f4 <pbuf_clone+0x58>)
 80115dc:	f240 5224 	movw	r2, #1316	; 0x524
 80115e0:	4905      	ldr	r1, [pc, #20]	; (80115f8 <pbuf_clone+0x5c>)
 80115e2:	4806      	ldr	r0, [pc, #24]	; (80115fc <pbuf_clone+0x60>)
 80115e4:	f00a f8c8 	bl	801b778 <printf>
  return q;
 80115e8:	68fb      	ldr	r3, [r7, #12]
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	08025a10 	.word	0x08025a10
 80115f8:	08025e84 	.word	0x08025e84
 80115fc:	08025a70 	.word	0x08025a70

08011600 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011604:	f00a f8ca 	bl	801b79c <rand>
 8011608:	4603      	mov	r3, r0
 801160a:	b29b      	uxth	r3, r3
 801160c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011610:	b29b      	uxth	r3, r3
 8011612:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011616:	b29a      	uxth	r2, r3
 8011618:	4b01      	ldr	r3, [pc, #4]	; (8011620 <tcp_init+0x20>)
 801161a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801161c:	bf00      	nop
 801161e:	bd80      	pop	{r7, pc}
 8011620:	2000002c 	.word	0x2000002c

08011624 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	7d1b      	ldrb	r3, [r3, #20]
 8011630:	2b01      	cmp	r3, #1
 8011632:	d105      	bne.n	8011640 <tcp_free+0x1c>
 8011634:	4b06      	ldr	r3, [pc, #24]	; (8011650 <tcp_free+0x2c>)
 8011636:	22d4      	movs	r2, #212	; 0xd4
 8011638:	4906      	ldr	r1, [pc, #24]	; (8011654 <tcp_free+0x30>)
 801163a:	4807      	ldr	r0, [pc, #28]	; (8011658 <tcp_free+0x34>)
 801163c:	f00a f89c 	bl	801b778 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011640:	6879      	ldr	r1, [r7, #4]
 8011642:	2001      	movs	r0, #1
 8011644:	f7fe fede 	bl	8010404 <memp_free>
}
 8011648:	bf00      	nop
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	08025f10 	.word	0x08025f10
 8011654:	08025f40 	.word	0x08025f40
 8011658:	08025f54 	.word	0x08025f54

0801165c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	7d1b      	ldrb	r3, [r3, #20]
 8011668:	2b01      	cmp	r3, #1
 801166a:	d105      	bne.n	8011678 <tcp_free_listen+0x1c>
 801166c:	4b06      	ldr	r3, [pc, #24]	; (8011688 <tcp_free_listen+0x2c>)
 801166e:	22df      	movs	r2, #223	; 0xdf
 8011670:	4906      	ldr	r1, [pc, #24]	; (801168c <tcp_free_listen+0x30>)
 8011672:	4807      	ldr	r0, [pc, #28]	; (8011690 <tcp_free_listen+0x34>)
 8011674:	f00a f880 	bl	801b778 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011678:	6879      	ldr	r1, [r7, #4]
 801167a:	2002      	movs	r0, #2
 801167c:	f7fe fec2 	bl	8010404 <memp_free>
}
 8011680:	bf00      	nop
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	08025f10 	.word	0x08025f10
 801168c:	08025f7c 	.word	0x08025f7c
 8011690:	08025f54 	.word	0x08025f54

08011694 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011698:	f001 f8b8 	bl	801280c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801169c:	4b07      	ldr	r3, [pc, #28]	; (80116bc <tcp_tmr+0x28>)
 801169e:	781b      	ldrb	r3, [r3, #0]
 80116a0:	3301      	adds	r3, #1
 80116a2:	b2da      	uxtb	r2, r3
 80116a4:	4b05      	ldr	r3, [pc, #20]	; (80116bc <tcp_tmr+0x28>)
 80116a6:	701a      	strb	r2, [r3, #0]
 80116a8:	4b04      	ldr	r3, [pc, #16]	; (80116bc <tcp_tmr+0x28>)
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	f003 0301 	and.w	r3, r3, #1
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d001      	beq.n	80116b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80116b4:	f000 fd6a 	bl	801218c <tcp_slowtmr>
  }
}
 80116b8:	bf00      	nop
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	20004f05 	.word	0x20004f05

080116c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d105      	bne.n	80116dc <tcp_remove_listener+0x1c>
 80116d0:	4b0d      	ldr	r3, [pc, #52]	; (8011708 <tcp_remove_listener+0x48>)
 80116d2:	22ff      	movs	r2, #255	; 0xff
 80116d4:	490d      	ldr	r1, [pc, #52]	; (801170c <tcp_remove_listener+0x4c>)
 80116d6:	480e      	ldr	r0, [pc, #56]	; (8011710 <tcp_remove_listener+0x50>)
 80116d8:	f00a f84e 	bl	801b778 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	60fb      	str	r3, [r7, #12]
 80116e0:	e00a      	b.n	80116f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116e6:	683a      	ldr	r2, [r7, #0]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d102      	bne.n	80116f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	60fb      	str	r3, [r7, #12]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d1f1      	bne.n	80116e2 <tcp_remove_listener+0x22>
    }
  }
}
 80116fe:	bf00      	nop
 8011700:	bf00      	nop
 8011702:	3710      	adds	r7, #16
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}
 8011708:	08025f10 	.word	0x08025f10
 801170c:	08025f98 	.word	0x08025f98
 8011710:	08025f54 	.word	0x08025f54

08011714 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d106      	bne.n	8011730 <tcp_listen_closed+0x1c>
 8011722:	4b14      	ldr	r3, [pc, #80]	; (8011774 <tcp_listen_closed+0x60>)
 8011724:	f240 1211 	movw	r2, #273	; 0x111
 8011728:	4913      	ldr	r1, [pc, #76]	; (8011778 <tcp_listen_closed+0x64>)
 801172a:	4814      	ldr	r0, [pc, #80]	; (801177c <tcp_listen_closed+0x68>)
 801172c:	f00a f824 	bl	801b778 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	7d1b      	ldrb	r3, [r3, #20]
 8011734:	2b01      	cmp	r3, #1
 8011736:	d006      	beq.n	8011746 <tcp_listen_closed+0x32>
 8011738:	4b0e      	ldr	r3, [pc, #56]	; (8011774 <tcp_listen_closed+0x60>)
 801173a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801173e:	4910      	ldr	r1, [pc, #64]	; (8011780 <tcp_listen_closed+0x6c>)
 8011740:	480e      	ldr	r0, [pc, #56]	; (801177c <tcp_listen_closed+0x68>)
 8011742:	f00a f819 	bl	801b778 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011746:	2301      	movs	r3, #1
 8011748:	60fb      	str	r3, [r7, #12]
 801174a:	e00b      	b.n	8011764 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801174c:	4a0d      	ldr	r2, [pc, #52]	; (8011784 <tcp_listen_closed+0x70>)
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	6879      	ldr	r1, [r7, #4]
 8011758:	4618      	mov	r0, r3
 801175a:	f7ff ffb1 	bl	80116c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	3301      	adds	r3, #1
 8011762:	60fb      	str	r3, [r7, #12]
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2b03      	cmp	r3, #3
 8011768:	d9f0      	bls.n	801174c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801176a:	bf00      	nop
 801176c:	bf00      	nop
 801176e:	3710      	adds	r7, #16
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	08025f10 	.word	0x08025f10
 8011778:	08025fc0 	.word	0x08025fc0
 801177c:	08025f54 	.word	0x08025f54
 8011780:	08025fcc 	.word	0x08025fcc
 8011784:	080296ac 	.word	0x080296ac

08011788 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011788:	b5b0      	push	{r4, r5, r7, lr}
 801178a:	b088      	sub	sp, #32
 801178c:	af04      	add	r7, sp, #16
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	460b      	mov	r3, r1
 8011792:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d106      	bne.n	80117a8 <tcp_close_shutdown+0x20>
 801179a:	4b63      	ldr	r3, [pc, #396]	; (8011928 <tcp_close_shutdown+0x1a0>)
 801179c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80117a0:	4962      	ldr	r1, [pc, #392]	; (801192c <tcp_close_shutdown+0x1a4>)
 80117a2:	4863      	ldr	r0, [pc, #396]	; (8011930 <tcp_close_shutdown+0x1a8>)
 80117a4:	f009 ffe8 	bl	801b778 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80117a8:	78fb      	ldrb	r3, [r7, #3]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d066      	beq.n	801187c <tcp_close_shutdown+0xf4>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	7d1b      	ldrb	r3, [r3, #20]
 80117b2:	2b04      	cmp	r3, #4
 80117b4:	d003      	beq.n	80117be <tcp_close_shutdown+0x36>
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	7d1b      	ldrb	r3, [r3, #20]
 80117ba:	2b07      	cmp	r3, #7
 80117bc:	d15e      	bne.n	801187c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d104      	bne.n	80117d0 <tcp_close_shutdown+0x48>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80117ce:	d055      	beq.n	801187c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	8b5b      	ldrh	r3, [r3, #26]
 80117d4:	f003 0310 	and.w	r3, r3, #16
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d106      	bne.n	80117ea <tcp_close_shutdown+0x62>
 80117dc:	4b52      	ldr	r3, [pc, #328]	; (8011928 <tcp_close_shutdown+0x1a0>)
 80117de:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80117e2:	4954      	ldr	r1, [pc, #336]	; (8011934 <tcp_close_shutdown+0x1ac>)
 80117e4:	4852      	ldr	r0, [pc, #328]	; (8011930 <tcp_close_shutdown+0x1a8>)
 80117e6:	f009 ffc7 	bl	801b778 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80117f2:	687d      	ldr	r5, [r7, #4]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	3304      	adds	r3, #4
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	8ad2      	ldrh	r2, [r2, #22]
 80117fc:	6879      	ldr	r1, [r7, #4]
 80117fe:	8b09      	ldrh	r1, [r1, #24]
 8011800:	9102      	str	r1, [sp, #8]
 8011802:	9201      	str	r2, [sp, #4]
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	462b      	mov	r3, r5
 8011808:	4622      	mov	r2, r4
 801180a:	4601      	mov	r1, r0
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f005 fde7 	bl	80173e0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f001 fbc8 	bl	8012fa8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011818:	4b47      	ldr	r3, [pc, #284]	; (8011938 <tcp_close_shutdown+0x1b0>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	429a      	cmp	r2, r3
 8011820:	d105      	bne.n	801182e <tcp_close_shutdown+0xa6>
 8011822:	4b45      	ldr	r3, [pc, #276]	; (8011938 <tcp_close_shutdown+0x1b0>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	4a43      	ldr	r2, [pc, #268]	; (8011938 <tcp_close_shutdown+0x1b0>)
 801182a:	6013      	str	r3, [r2, #0]
 801182c:	e013      	b.n	8011856 <tcp_close_shutdown+0xce>
 801182e:	4b42      	ldr	r3, [pc, #264]	; (8011938 <tcp_close_shutdown+0x1b0>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	60fb      	str	r3, [r7, #12]
 8011834:	e00c      	b.n	8011850 <tcp_close_shutdown+0xc8>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	68db      	ldr	r3, [r3, #12]
 801183a:	687a      	ldr	r2, [r7, #4]
 801183c:	429a      	cmp	r2, r3
 801183e:	d104      	bne.n	801184a <tcp_close_shutdown+0xc2>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	68da      	ldr	r2, [r3, #12]
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	60da      	str	r2, [r3, #12]
 8011848:	e005      	b.n	8011856 <tcp_close_shutdown+0xce>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	68db      	ldr	r3, [r3, #12]
 801184e:	60fb      	str	r3, [r7, #12]
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d1ef      	bne.n	8011836 <tcp_close_shutdown+0xae>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	60da      	str	r2, [r3, #12]
 801185c:	4b37      	ldr	r3, [pc, #220]	; (801193c <tcp_close_shutdown+0x1b4>)
 801185e:	2201      	movs	r2, #1
 8011860:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011862:	4b37      	ldr	r3, [pc, #220]	; (8011940 <tcp_close_shutdown+0x1b8>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	429a      	cmp	r2, r3
 801186a:	d102      	bne.n	8011872 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801186c:	f004 f85c 	bl	8015928 <tcp_trigger_input_pcb_close>
 8011870:	e002      	b.n	8011878 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7ff fed6 	bl	8011624 <tcp_free>
      }
      return ERR_OK;
 8011878:	2300      	movs	r3, #0
 801187a:	e050      	b.n	801191e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	7d1b      	ldrb	r3, [r3, #20]
 8011880:	2b02      	cmp	r3, #2
 8011882:	d03b      	beq.n	80118fc <tcp_close_shutdown+0x174>
 8011884:	2b02      	cmp	r3, #2
 8011886:	dc44      	bgt.n	8011912 <tcp_close_shutdown+0x18a>
 8011888:	2b00      	cmp	r3, #0
 801188a:	d002      	beq.n	8011892 <tcp_close_shutdown+0x10a>
 801188c:	2b01      	cmp	r3, #1
 801188e:	d02a      	beq.n	80118e6 <tcp_close_shutdown+0x15e>
 8011890:	e03f      	b.n	8011912 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	8adb      	ldrh	r3, [r3, #22]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d021      	beq.n	80118de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801189a:	4b2a      	ldr	r3, [pc, #168]	; (8011944 <tcp_close_shutdown+0x1bc>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d105      	bne.n	80118b0 <tcp_close_shutdown+0x128>
 80118a4:	4b27      	ldr	r3, [pc, #156]	; (8011944 <tcp_close_shutdown+0x1bc>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	68db      	ldr	r3, [r3, #12]
 80118aa:	4a26      	ldr	r2, [pc, #152]	; (8011944 <tcp_close_shutdown+0x1bc>)
 80118ac:	6013      	str	r3, [r2, #0]
 80118ae:	e013      	b.n	80118d8 <tcp_close_shutdown+0x150>
 80118b0:	4b24      	ldr	r3, [pc, #144]	; (8011944 <tcp_close_shutdown+0x1bc>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	60bb      	str	r3, [r7, #8]
 80118b6:	e00c      	b.n	80118d2 <tcp_close_shutdown+0x14a>
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d104      	bne.n	80118cc <tcp_close_shutdown+0x144>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	68da      	ldr	r2, [r3, #12]
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	60da      	str	r2, [r3, #12]
 80118ca:	e005      	b.n	80118d8 <tcp_close_shutdown+0x150>
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	60bb      	str	r3, [r7, #8]
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1ef      	bne.n	80118b8 <tcp_close_shutdown+0x130>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2200      	movs	r2, #0
 80118dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7ff fea0 	bl	8011624 <tcp_free>
      break;
 80118e4:	e01a      	b.n	801191c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7ff ff14 	bl	8011714 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80118ec:	6879      	ldr	r1, [r7, #4]
 80118ee:	4816      	ldr	r0, [pc, #88]	; (8011948 <tcp_close_shutdown+0x1c0>)
 80118f0:	f001 fbaa 	bl	8013048 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f7ff feb1 	bl	801165c <tcp_free_listen>
      break;
 80118fa:	e00f      	b.n	801191c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80118fc:	6879      	ldr	r1, [r7, #4]
 80118fe:	480e      	ldr	r0, [pc, #56]	; (8011938 <tcp_close_shutdown+0x1b0>)
 8011900:	f001 fba2 	bl	8013048 <tcp_pcb_remove>
 8011904:	4b0d      	ldr	r3, [pc, #52]	; (801193c <tcp_close_shutdown+0x1b4>)
 8011906:	2201      	movs	r2, #1
 8011908:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f7ff fe8a 	bl	8011624 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011910:	e004      	b.n	801191c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 f81a 	bl	801194c <tcp_close_shutdown_fin>
 8011918:	4603      	mov	r3, r0
 801191a:	e000      	b.n	801191e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bdb0      	pop	{r4, r5, r7, pc}
 8011926:	bf00      	nop
 8011928:	08025f10 	.word	0x08025f10
 801192c:	08025fe4 	.word	0x08025fe4
 8011930:	08025f54 	.word	0x08025f54
 8011934:	08026004 	.word	0x08026004
 8011938:	2000be40 	.word	0x2000be40
 801193c:	2000be3c 	.word	0x2000be3c
 8011940:	2000be54 	.word	0x2000be54
 8011944:	2000be4c 	.word	0x2000be4c
 8011948:	2000be48 	.word	0x2000be48

0801194c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d106      	bne.n	8011968 <tcp_close_shutdown_fin+0x1c>
 801195a:	4b2e      	ldr	r3, [pc, #184]	; (8011a14 <tcp_close_shutdown_fin+0xc8>)
 801195c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011960:	492d      	ldr	r1, [pc, #180]	; (8011a18 <tcp_close_shutdown_fin+0xcc>)
 8011962:	482e      	ldr	r0, [pc, #184]	; (8011a1c <tcp_close_shutdown_fin+0xd0>)
 8011964:	f009 ff08 	bl	801b778 <printf>

  switch (pcb->state) {
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	7d1b      	ldrb	r3, [r3, #20]
 801196c:	2b07      	cmp	r3, #7
 801196e:	d020      	beq.n	80119b2 <tcp_close_shutdown_fin+0x66>
 8011970:	2b07      	cmp	r3, #7
 8011972:	dc2b      	bgt.n	80119cc <tcp_close_shutdown_fin+0x80>
 8011974:	2b03      	cmp	r3, #3
 8011976:	d002      	beq.n	801197e <tcp_close_shutdown_fin+0x32>
 8011978:	2b04      	cmp	r3, #4
 801197a:	d00d      	beq.n	8011998 <tcp_close_shutdown_fin+0x4c>
 801197c:	e026      	b.n	80119cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f004 fe3c 	bl	80165fc <tcp_send_fin>
 8011984:	4603      	mov	r3, r0
 8011986:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d11f      	bne.n	80119d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2205      	movs	r2, #5
 8011994:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011996:	e01b      	b.n	80119d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f004 fe2f 	bl	80165fc <tcp_send_fin>
 801199e:	4603      	mov	r3, r0
 80119a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80119a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d114      	bne.n	80119d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2205      	movs	r2, #5
 80119ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 80119b0:	e010      	b.n	80119d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f004 fe22 	bl	80165fc <tcp_send_fin>
 80119b8:	4603      	mov	r3, r0
 80119ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80119bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d109      	bne.n	80119d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2209      	movs	r2, #9
 80119c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80119ca:	e005      	b.n	80119d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80119cc:	2300      	movs	r3, #0
 80119ce:	e01c      	b.n	8011a0a <tcp_close_shutdown_fin+0xbe>
      break;
 80119d0:	bf00      	nop
 80119d2:	e002      	b.n	80119da <tcp_close_shutdown_fin+0x8e>
      break;
 80119d4:	bf00      	nop
 80119d6:	e000      	b.n	80119da <tcp_close_shutdown_fin+0x8e>
      break;
 80119d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80119da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d103      	bne.n	80119ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f004 ff48 	bl	8016878 <tcp_output>
 80119e8:	e00d      	b.n	8011a06 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80119ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119f2:	d108      	bne.n	8011a06 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	8b5b      	ldrh	r3, [r3, #26]
 80119f8:	f043 0308 	orr.w	r3, r3, #8
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011a02:	2300      	movs	r3, #0
 8011a04:	e001      	b.n	8011a0a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3710      	adds	r7, #16
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	08025f10 	.word	0x08025f10
 8011a18:	08025fc0 	.word	0x08025fc0
 8011a1c:	08025f54 	.word	0x08025f54

08011a20 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d109      	bne.n	8011a42 <tcp_close+0x22>
 8011a2e:	4b0f      	ldr	r3, [pc, #60]	; (8011a6c <tcp_close+0x4c>)
 8011a30:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011a34:	490e      	ldr	r1, [pc, #56]	; (8011a70 <tcp_close+0x50>)
 8011a36:	480f      	ldr	r0, [pc, #60]	; (8011a74 <tcp_close+0x54>)
 8011a38:	f009 fe9e 	bl	801b778 <printf>
 8011a3c:	f06f 030f 	mvn.w	r3, #15
 8011a40:	e00f      	b.n	8011a62 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	7d1b      	ldrb	r3, [r3, #20]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d006      	beq.n	8011a58 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	8b5b      	ldrh	r3, [r3, #26]
 8011a4e:	f043 0310 	orr.w	r3, r3, #16
 8011a52:	b29a      	uxth	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011a58:	2101      	movs	r1, #1
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f7ff fe94 	bl	8011788 <tcp_close_shutdown>
 8011a60:	4603      	mov	r3, r0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	08025f10 	.word	0x08025f10
 8011a70:	08026020 	.word	0x08026020
 8011a74:	08025f54 	.word	0x08025f54

08011a78 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d109      	bne.n	8011a9e <tcp_shutdown+0x26>
 8011a8a:	4b26      	ldr	r3, [pc, #152]	; (8011b24 <tcp_shutdown+0xac>)
 8011a8c:	f240 2207 	movw	r2, #519	; 0x207
 8011a90:	4925      	ldr	r1, [pc, #148]	; (8011b28 <tcp_shutdown+0xb0>)
 8011a92:	4826      	ldr	r0, [pc, #152]	; (8011b2c <tcp_shutdown+0xb4>)
 8011a94:	f009 fe70 	bl	801b778 <printf>
 8011a98:	f06f 030f 	mvn.w	r3, #15
 8011a9c:	e03d      	b.n	8011b1a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	7d1b      	ldrb	r3, [r3, #20]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d102      	bne.n	8011aac <tcp_shutdown+0x34>
    return ERR_CONN;
 8011aa6:	f06f 030a 	mvn.w	r3, #10
 8011aaa:	e036      	b.n	8011b1a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d01b      	beq.n	8011aea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	8b5b      	ldrh	r3, [r3, #26]
 8011ab6:	f043 0310 	orr.w	r3, r3, #16
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d005      	beq.n	8011ad2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011ac6:	2101      	movs	r1, #1
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f7ff fe5d 	bl	8011788 <tcp_close_shutdown>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	e023      	b.n	8011b1a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d007      	beq.n	8011aea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7ff fae4 	bl	80110ac <pbuf_free>
      pcb->refused_data = NULL;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d013      	beq.n	8011b18 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	7d1b      	ldrb	r3, [r3, #20]
 8011af4:	2b04      	cmp	r3, #4
 8011af6:	dc02      	bgt.n	8011afe <tcp_shutdown+0x86>
 8011af8:	2b03      	cmp	r3, #3
 8011afa:	da02      	bge.n	8011b02 <tcp_shutdown+0x8a>
 8011afc:	e009      	b.n	8011b12 <tcp_shutdown+0x9a>
 8011afe:	2b07      	cmp	r3, #7
 8011b00:	d107      	bne.n	8011b12 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	4619      	mov	r1, r3
 8011b08:	68f8      	ldr	r0, [r7, #12]
 8011b0a:	f7ff fe3d 	bl	8011788 <tcp_close_shutdown>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	e003      	b.n	8011b1a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011b12:	f06f 030a 	mvn.w	r3, #10
 8011b16:	e000      	b.n	8011b1a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011b18:	2300      	movs	r3, #0
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3710      	adds	r7, #16
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	08025f10 	.word	0x08025f10
 8011b28:	08026038 	.word	0x08026038
 8011b2c:	08025f54 	.word	0x08025f54

08011b30 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b08e      	sub	sp, #56	; 0x38
 8011b34:	af04      	add	r7, sp, #16
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d107      	bne.n	8011b50 <tcp_abandon+0x20>
 8011b40:	4b52      	ldr	r3, [pc, #328]	; (8011c8c <tcp_abandon+0x15c>)
 8011b42:	f240 223d 	movw	r2, #573	; 0x23d
 8011b46:	4952      	ldr	r1, [pc, #328]	; (8011c90 <tcp_abandon+0x160>)
 8011b48:	4852      	ldr	r0, [pc, #328]	; (8011c94 <tcp_abandon+0x164>)
 8011b4a:	f009 fe15 	bl	801b778 <printf>
 8011b4e:	e099      	b.n	8011c84 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	7d1b      	ldrb	r3, [r3, #20]
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d106      	bne.n	8011b66 <tcp_abandon+0x36>
 8011b58:	4b4c      	ldr	r3, [pc, #304]	; (8011c8c <tcp_abandon+0x15c>)
 8011b5a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011b5e:	494e      	ldr	r1, [pc, #312]	; (8011c98 <tcp_abandon+0x168>)
 8011b60:	484c      	ldr	r0, [pc, #304]	; (8011c94 <tcp_abandon+0x164>)
 8011b62:	f009 fe09 	bl	801b778 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	7d1b      	ldrb	r3, [r3, #20]
 8011b6a:	2b0a      	cmp	r3, #10
 8011b6c:	d107      	bne.n	8011b7e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011b6e:	6879      	ldr	r1, [r7, #4]
 8011b70:	484a      	ldr	r0, [pc, #296]	; (8011c9c <tcp_abandon+0x16c>)
 8011b72:	f001 fa69 	bl	8013048 <tcp_pcb_remove>
    tcp_free(pcb);
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f7ff fd54 	bl	8011624 <tcp_free>
 8011b7c:	e082      	b.n	8011c84 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011b82:	2300      	movs	r3, #0
 8011b84:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b8a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b90:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b98:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	7d1b      	ldrb	r3, [r3, #20]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d126      	bne.n	8011bf6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	8adb      	ldrh	r3, [r3, #22]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d02e      	beq.n	8011c0e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011bb0:	4b3b      	ldr	r3, [pc, #236]	; (8011ca0 <tcp_abandon+0x170>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d105      	bne.n	8011bc6 <tcp_abandon+0x96>
 8011bba:	4b39      	ldr	r3, [pc, #228]	; (8011ca0 <tcp_abandon+0x170>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	4a37      	ldr	r2, [pc, #220]	; (8011ca0 <tcp_abandon+0x170>)
 8011bc2:	6013      	str	r3, [r2, #0]
 8011bc4:	e013      	b.n	8011bee <tcp_abandon+0xbe>
 8011bc6:	4b36      	ldr	r3, [pc, #216]	; (8011ca0 <tcp_abandon+0x170>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	61fb      	str	r3, [r7, #28]
 8011bcc:	e00c      	b.n	8011be8 <tcp_abandon+0xb8>
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	68db      	ldr	r3, [r3, #12]
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d104      	bne.n	8011be2 <tcp_abandon+0xb2>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68da      	ldr	r2, [r3, #12]
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	60da      	str	r2, [r3, #12]
 8011be0:	e005      	b.n	8011bee <tcp_abandon+0xbe>
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	61fb      	str	r3, [r7, #28]
 8011be8:	69fb      	ldr	r3, [r7, #28]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d1ef      	bne.n	8011bce <tcp_abandon+0x9e>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	60da      	str	r2, [r3, #12]
 8011bf4:	e00b      	b.n	8011c0e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	8adb      	ldrh	r3, [r3, #22]
 8011bfe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011c00:	6879      	ldr	r1, [r7, #4]
 8011c02:	4828      	ldr	r0, [pc, #160]	; (8011ca4 <tcp_abandon+0x174>)
 8011c04:	f001 fa20 	bl	8013048 <tcp_pcb_remove>
 8011c08:	4b27      	ldr	r3, [pc, #156]	; (8011ca8 <tcp_abandon+0x178>)
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d004      	beq.n	8011c20 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f000 fed6 	bl	80129cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d004      	beq.n	8011c32 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f000 fecd 	bl	80129cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d004      	beq.n	8011c44 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f000 fec4 	bl	80129cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d00e      	beq.n	8011c68 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011c4a:	6879      	ldr	r1, [r7, #4]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	3304      	adds	r3, #4
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	8b12      	ldrh	r2, [r2, #24]
 8011c54:	9202      	str	r2, [sp, #8]
 8011c56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011c58:	9201      	str	r2, [sp, #4]
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	697a      	ldr	r2, [r7, #20]
 8011c60:	69b9      	ldr	r1, [r7, #24]
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f005 fbbc 	bl	80173e0 <tcp_rst>
    }
    last_state = pcb->state;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	7d1b      	ldrb	r3, [r3, #20]
 8011c6c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f7ff fcd8 	bl	8011624 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d004      	beq.n	8011c84 <tcp_abandon+0x154>
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	f06f 010c 	mvn.w	r1, #12
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	4798      	blx	r3
  }
}
 8011c84:	3728      	adds	r7, #40	; 0x28
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	08025f10 	.word	0x08025f10
 8011c90:	08026054 	.word	0x08026054
 8011c94:	08025f54 	.word	0x08025f54
 8011c98:	08026070 	.word	0x08026070
 8011c9c:	2000be50 	.word	0x2000be50
 8011ca0:	2000be4c 	.word	0x2000be4c
 8011ca4:	2000be40 	.word	0x2000be40
 8011ca8:	2000be3c 	.word	0x2000be3c

08011cac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7ff ff3a 	bl	8011b30 <tcp_abandon>
}
 8011cbc:	bf00      	nop
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b088      	sub	sp, #32
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	60b9      	str	r1, [r7, #8]
 8011cce:	4613      	mov	r3, r2
 8011cd0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011cd2:	2304      	movs	r3, #4
 8011cd4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d101      	bne.n	8011ce0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011cdc:	4b3e      	ldr	r3, [pc, #248]	; (8011dd8 <tcp_bind+0x114>)
 8011cde:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d109      	bne.n	8011cfa <tcp_bind+0x36>
 8011ce6:	4b3d      	ldr	r3, [pc, #244]	; (8011ddc <tcp_bind+0x118>)
 8011ce8:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011cec:	493c      	ldr	r1, [pc, #240]	; (8011de0 <tcp_bind+0x11c>)
 8011cee:	483d      	ldr	r0, [pc, #244]	; (8011de4 <tcp_bind+0x120>)
 8011cf0:	f009 fd42 	bl	801b778 <printf>
 8011cf4:	f06f 030f 	mvn.w	r3, #15
 8011cf8:	e06a      	b.n	8011dd0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	7d1b      	ldrb	r3, [r3, #20]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d009      	beq.n	8011d16 <tcp_bind+0x52>
 8011d02:	4b36      	ldr	r3, [pc, #216]	; (8011ddc <tcp_bind+0x118>)
 8011d04:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011d08:	4937      	ldr	r1, [pc, #220]	; (8011de8 <tcp_bind+0x124>)
 8011d0a:	4836      	ldr	r0, [pc, #216]	; (8011de4 <tcp_bind+0x120>)
 8011d0c:	f009 fd34 	bl	801b778 <printf>
 8011d10:	f06f 0305 	mvn.w	r3, #5
 8011d14:	e05c      	b.n	8011dd0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011d16:	88fb      	ldrh	r3, [r7, #6]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d109      	bne.n	8011d30 <tcp_bind+0x6c>
    port = tcp_new_port();
 8011d1c:	f000 f9f0 	bl	8012100 <tcp_new_port>
 8011d20:	4603      	mov	r3, r0
 8011d22:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011d24:	88fb      	ldrh	r3, [r7, #6]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d135      	bne.n	8011d96 <tcp_bind+0xd2>
      return ERR_BUF;
 8011d2a:	f06f 0301 	mvn.w	r3, #1
 8011d2e:	e04f      	b.n	8011dd0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011d30:	2300      	movs	r3, #0
 8011d32:	61fb      	str	r3, [r7, #28]
 8011d34:	e02b      	b.n	8011d8e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011d36:	4a2d      	ldr	r2, [pc, #180]	; (8011dec <tcp_bind+0x128>)
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	61bb      	str	r3, [r7, #24]
 8011d42:	e01e      	b.n	8011d82 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	8adb      	ldrh	r3, [r3, #22]
 8011d48:	88fa      	ldrh	r2, [r7, #6]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d116      	bne.n	8011d7c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011d4e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d010      	beq.n	8011d76 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d00c      	beq.n	8011d76 <tcp_bind+0xb2>
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d009      	beq.n	8011d76 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d005      	beq.n	8011d76 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d102      	bne.n	8011d7c <tcp_bind+0xb8>
              return ERR_USE;
 8011d76:	f06f 0307 	mvn.w	r3, #7
 8011d7a:	e029      	b.n	8011dd0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	61bb      	str	r3, [r7, #24]
 8011d82:	69bb      	ldr	r3, [r7, #24]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d1dd      	bne.n	8011d44 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	61fb      	str	r3, [r7, #28]
 8011d8e:	69fa      	ldr	r2, [r7, #28]
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	dbcf      	blt.n	8011d36 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00c      	beq.n	8011db6 <tcp_bind+0xf2>
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d008      	beq.n	8011db6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d002      	beq.n	8011db0 <tcp_bind+0xec>
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	e000      	b.n	8011db2 <tcp_bind+0xee>
 8011db0:	2300      	movs	r3, #0
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	88fa      	ldrh	r2, [r7, #6]
 8011dba:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011dbc:	4b0c      	ldr	r3, [pc, #48]	; (8011df0 <tcp_bind+0x12c>)
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	60da      	str	r2, [r3, #12]
 8011dc4:	4a0a      	ldr	r2, [pc, #40]	; (8011df0 <tcp_bind+0x12c>)
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	6013      	str	r3, [r2, #0]
 8011dca:	f005 fccb 	bl	8017764 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011dce:	2300      	movs	r3, #0
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3720      	adds	r7, #32
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	080296d4 	.word	0x080296d4
 8011ddc:	08025f10 	.word	0x08025f10
 8011de0:	080260a4 	.word	0x080260a4
 8011de4:	08025f54 	.word	0x08025f54
 8011de8:	080260bc 	.word	0x080260bc
 8011dec:	080296ac 	.word	0x080296ac
 8011df0:	2000be4c 	.word	0x2000be4c

08011df4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	60b9      	str	r1, [r7, #8]
 8011dfe:	4613      	mov	r3, r2
 8011e00:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d106      	bne.n	8011e16 <tcp_accept_null+0x22>
 8011e08:	4b07      	ldr	r3, [pc, #28]	; (8011e28 <tcp_accept_null+0x34>)
 8011e0a:	f240 320f 	movw	r2, #783	; 0x30f
 8011e0e:	4907      	ldr	r1, [pc, #28]	; (8011e2c <tcp_accept_null+0x38>)
 8011e10:	4807      	ldr	r0, [pc, #28]	; (8011e30 <tcp_accept_null+0x3c>)
 8011e12:	f009 fcb1 	bl	801b778 <printf>

  tcp_abort(pcb);
 8011e16:	68b8      	ldr	r0, [r7, #8]
 8011e18:	f7ff ff48 	bl	8011cac <tcp_abort>

  return ERR_ABRT;
 8011e1c:	f06f 030c 	mvn.w	r3, #12
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3710      	adds	r7, #16
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	08025f10 	.word	0x08025f10
 8011e2c:	080260e4 	.word	0x080260e4
 8011e30:	08025f54 	.word	0x08025f54

08011e34 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	460b      	mov	r3, r1
 8011e3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8011e40:	78fb      	ldrb	r3, [r7, #3]
 8011e42:	2200      	movs	r2, #0
 8011e44:	4619      	mov	r1, r3
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 f806 	bl	8011e58 <tcp_listen_with_backlog_and_err>
 8011e4c:	4603      	mov	r3, r0
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3708      	adds	r7, #8
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
	...

08011e58 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b088      	sub	sp, #32
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	460b      	mov	r3, r1
 8011e62:	607a      	str	r2, [r7, #4]
 8011e64:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011e66:	2300      	movs	r3, #0
 8011e68:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d109      	bne.n	8011e84 <tcp_listen_with_backlog_and_err+0x2c>
 8011e70:	4b47      	ldr	r3, [pc, #284]	; (8011f90 <tcp_listen_with_backlog_and_err+0x138>)
 8011e72:	f240 3259 	movw	r2, #857	; 0x359
 8011e76:	4947      	ldr	r1, [pc, #284]	; (8011f94 <tcp_listen_with_backlog_and_err+0x13c>)
 8011e78:	4847      	ldr	r0, [pc, #284]	; (8011f98 <tcp_listen_with_backlog_and_err+0x140>)
 8011e7a:	f009 fc7d 	bl	801b778 <printf>
 8011e7e:	23f0      	movs	r3, #240	; 0xf0
 8011e80:	76fb      	strb	r3, [r7, #27]
 8011e82:	e079      	b.n	8011f78 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	7d1b      	ldrb	r3, [r3, #20]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d009      	beq.n	8011ea0 <tcp_listen_with_backlog_and_err+0x48>
 8011e8c:	4b40      	ldr	r3, [pc, #256]	; (8011f90 <tcp_listen_with_backlog_and_err+0x138>)
 8011e8e:	f240 325a 	movw	r2, #858	; 0x35a
 8011e92:	4942      	ldr	r1, [pc, #264]	; (8011f9c <tcp_listen_with_backlog_and_err+0x144>)
 8011e94:	4840      	ldr	r0, [pc, #256]	; (8011f98 <tcp_listen_with_backlog_and_err+0x140>)
 8011e96:	f009 fc6f 	bl	801b778 <printf>
 8011e9a:	23f1      	movs	r3, #241	; 0xf1
 8011e9c:	76fb      	strb	r3, [r7, #27]
 8011e9e:	e06b      	b.n	8011f78 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	7d1b      	ldrb	r3, [r3, #20]
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d104      	bne.n	8011eb2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8011eac:	23f7      	movs	r3, #247	; 0xf7
 8011eae:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011eb0:	e062      	b.n	8011f78 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011eb2:	2002      	movs	r0, #2
 8011eb4:	f7fe fa54 	bl	8010360 <memp_malloc>
 8011eb8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011eba:	69fb      	ldr	r3, [r7, #28]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d102      	bne.n	8011ec6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8011ec0:	23ff      	movs	r3, #255	; 0xff
 8011ec2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011ec4:	e058      	b.n	8011f78 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	691a      	ldr	r2, [r3, #16]
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	8ada      	ldrh	r2, [r3, #22]
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011ed6:	69fb      	ldr	r3, [r7, #28]
 8011ed8:	2201      	movs	r2, #1
 8011eda:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	7d5a      	ldrb	r2, [r3, #21]
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	7a5a      	ldrb	r2, [r3, #9]
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	7ada      	ldrb	r2, [r3, #11]
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	7a9a      	ldrb	r2, [r3, #10]
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	8adb      	ldrh	r3, [r3, #22]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d021      	beq.n	8011f56 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8011f12:	4b23      	ldr	r3, [pc, #140]	; (8011fa0 <tcp_listen_with_backlog_and_err+0x148>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	68fa      	ldr	r2, [r7, #12]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d105      	bne.n	8011f28 <tcp_listen_with_backlog_and_err+0xd0>
 8011f1c:	4b20      	ldr	r3, [pc, #128]	; (8011fa0 <tcp_listen_with_backlog_and_err+0x148>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	68db      	ldr	r3, [r3, #12]
 8011f22:	4a1f      	ldr	r2, [pc, #124]	; (8011fa0 <tcp_listen_with_backlog_and_err+0x148>)
 8011f24:	6013      	str	r3, [r2, #0]
 8011f26:	e013      	b.n	8011f50 <tcp_listen_with_backlog_and_err+0xf8>
 8011f28:	4b1d      	ldr	r3, [pc, #116]	; (8011fa0 <tcp_listen_with_backlog_and_err+0x148>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	617b      	str	r3, [r7, #20]
 8011f2e:	e00c      	b.n	8011f4a <tcp_listen_with_backlog_and_err+0xf2>
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	68db      	ldr	r3, [r3, #12]
 8011f34:	68fa      	ldr	r2, [r7, #12]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d104      	bne.n	8011f44 <tcp_listen_with_backlog_and_err+0xec>
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	68da      	ldr	r2, [r3, #12]
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	60da      	str	r2, [r3, #12]
 8011f42:	e005      	b.n	8011f50 <tcp_listen_with_backlog_and_err+0xf8>
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	617b      	str	r3, [r7, #20]
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d1ef      	bne.n	8011f30 <tcp_listen_with_backlog_and_err+0xd8>
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2200      	movs	r2, #0
 8011f54:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f7ff fb64 	bl	8011624 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011f5c:	69fb      	ldr	r3, [r7, #28]
 8011f5e:	4a11      	ldr	r2, [pc, #68]	; (8011fa4 <tcp_listen_with_backlog_and_err+0x14c>)
 8011f60:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8011f62:	4b11      	ldr	r3, [pc, #68]	; (8011fa8 <tcp_listen_with_backlog_and_err+0x150>)
 8011f64:	681a      	ldr	r2, [r3, #0]
 8011f66:	69fb      	ldr	r3, [r7, #28]
 8011f68:	60da      	str	r2, [r3, #12]
 8011f6a:	4a0f      	ldr	r2, [pc, #60]	; (8011fa8 <tcp_listen_with_backlog_and_err+0x150>)
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	6013      	str	r3, [r2, #0]
 8011f70:	f005 fbf8 	bl	8017764 <tcp_timer_needed>
  res = ERR_OK;
 8011f74:	2300      	movs	r3, #0
 8011f76:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d002      	beq.n	8011f84 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	7efa      	ldrb	r2, [r7, #27]
 8011f82:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011f84:	69fb      	ldr	r3, [r7, #28]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3720      	adds	r7, #32
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	08025f10 	.word	0x08025f10
 8011f94:	08026104 	.word	0x08026104
 8011f98:	08025f54 	.word	0x08025f54
 8011f9c:	08026134 	.word	0x08026134
 8011fa0:	2000be4c 	.word	0x2000be4c
 8011fa4:	08011df5 	.word	0x08011df5
 8011fa8:	2000be48 	.word	0x2000be48

08011fac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d106      	bne.n	8011fc8 <tcp_update_rcv_ann_wnd+0x1c>
 8011fba:	4b25      	ldr	r3, [pc, #148]	; (8012050 <tcp_update_rcv_ann_wnd+0xa4>)
 8011fbc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011fc0:	4924      	ldr	r1, [pc, #144]	; (8012054 <tcp_update_rcv_ann_wnd+0xa8>)
 8011fc2:	4825      	ldr	r0, [pc, #148]	; (8012058 <tcp_update_rcv_ann_wnd+0xac>)
 8011fc4:	f009 fbd8 	bl	801b778 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011fd0:	4413      	add	r3, r2
 8011fd2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd8:	687a      	ldr	r2, [r7, #4]
 8011fda:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011fdc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011fe0:	bf28      	it	cs
 8011fe2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011fe6:	b292      	uxth	r2, r2
 8011fe8:	4413      	add	r3, r2
 8011fea:	68fa      	ldr	r2, [r7, #12]
 8011fec:	1ad3      	subs	r3, r2, r3
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	db08      	blt.n	8012004 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	1ad3      	subs	r3, r2, r3
 8012002:	e020      	b.n	8012046 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801200c:	1ad3      	subs	r3, r2, r3
 801200e:	2b00      	cmp	r3, #0
 8012010:	dd03      	ble.n	801201a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012018:	e014      	b.n	8012044 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801202c:	d306      	bcc.n	801203c <tcp_update_rcv_ann_wnd+0x90>
 801202e:	4b08      	ldr	r3, [pc, #32]	; (8012050 <tcp_update_rcv_ann_wnd+0xa4>)
 8012030:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012034:	4909      	ldr	r1, [pc, #36]	; (801205c <tcp_update_rcv_ann_wnd+0xb0>)
 8012036:	4808      	ldr	r0, [pc, #32]	; (8012058 <tcp_update_rcv_ann_wnd+0xac>)
 8012038:	f009 fb9e 	bl	801b778 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	b29a      	uxth	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012044:	2300      	movs	r3, #0
  }
}
 8012046:	4618      	mov	r0, r3
 8012048:	3710      	adds	r7, #16
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop
 8012050:	08025f10 	.word	0x08025f10
 8012054:	0802616c 	.word	0x0802616c
 8012058:	08025f54 	.word	0x08025f54
 801205c:	08026190 	.word	0x08026190

08012060 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	460b      	mov	r3, r1
 801206a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d107      	bne.n	8012082 <tcp_recved+0x22>
 8012072:	4b1f      	ldr	r3, [pc, #124]	; (80120f0 <tcp_recved+0x90>)
 8012074:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012078:	491e      	ldr	r1, [pc, #120]	; (80120f4 <tcp_recved+0x94>)
 801207a:	481f      	ldr	r0, [pc, #124]	; (80120f8 <tcp_recved+0x98>)
 801207c:	f009 fb7c 	bl	801b778 <printf>
 8012080:	e032      	b.n	80120e8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	7d1b      	ldrb	r3, [r3, #20]
 8012086:	2b01      	cmp	r3, #1
 8012088:	d106      	bne.n	8012098 <tcp_recved+0x38>
 801208a:	4b19      	ldr	r3, [pc, #100]	; (80120f0 <tcp_recved+0x90>)
 801208c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012090:	491a      	ldr	r1, [pc, #104]	; (80120fc <tcp_recved+0x9c>)
 8012092:	4819      	ldr	r0, [pc, #100]	; (80120f8 <tcp_recved+0x98>)
 8012094:	f009 fb70 	bl	801b778 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801209c:	887b      	ldrh	r3, [r7, #2]
 801209e:	4413      	add	r3, r2
 80120a0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80120a2:	89fb      	ldrh	r3, [r7, #14]
 80120a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80120a8:	d804      	bhi.n	80120b4 <tcp_recved+0x54>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120ae:	89fa      	ldrh	r2, [r7, #14]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d204      	bcs.n	80120be <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80120ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80120bc:	e002      	b.n	80120c4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	89fa      	ldrh	r2, [r7, #14]
 80120c2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f7ff ff71 	bl	8011fac <tcp_update_rcv_ann_wnd>
 80120ca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80120d2:	d309      	bcc.n	80120e8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	8b5b      	ldrh	r3, [r3, #26]
 80120d8:	f043 0302 	orr.w	r3, r3, #2
 80120dc:	b29a      	uxth	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f004 fbc8 	bl	8016878 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80120e8:	3710      	adds	r7, #16
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	08025f10 	.word	0x08025f10
 80120f4:	080261ac 	.word	0x080261ac
 80120f8:	08025f54 	.word	0x08025f54
 80120fc:	080261c4 	.word	0x080261c4

08012100 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012106:	2300      	movs	r3, #0
 8012108:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801210a:	4b1e      	ldr	r3, [pc, #120]	; (8012184 <tcp_new_port+0x84>)
 801210c:	881b      	ldrh	r3, [r3, #0]
 801210e:	3301      	adds	r3, #1
 8012110:	b29a      	uxth	r2, r3
 8012112:	4b1c      	ldr	r3, [pc, #112]	; (8012184 <tcp_new_port+0x84>)
 8012114:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012116:	4b1b      	ldr	r3, [pc, #108]	; (8012184 <tcp_new_port+0x84>)
 8012118:	881b      	ldrh	r3, [r3, #0]
 801211a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801211e:	4293      	cmp	r3, r2
 8012120:	d103      	bne.n	801212a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012122:	4b18      	ldr	r3, [pc, #96]	; (8012184 <tcp_new_port+0x84>)
 8012124:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012128:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801212a:	2300      	movs	r3, #0
 801212c:	71fb      	strb	r3, [r7, #7]
 801212e:	e01e      	b.n	801216e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012130:	79fb      	ldrb	r3, [r7, #7]
 8012132:	4a15      	ldr	r2, [pc, #84]	; (8012188 <tcp_new_port+0x88>)
 8012134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	603b      	str	r3, [r7, #0]
 801213c:	e011      	b.n	8012162 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	8ada      	ldrh	r2, [r3, #22]
 8012142:	4b10      	ldr	r3, [pc, #64]	; (8012184 <tcp_new_port+0x84>)
 8012144:	881b      	ldrh	r3, [r3, #0]
 8012146:	429a      	cmp	r2, r3
 8012148:	d108      	bne.n	801215c <tcp_new_port+0x5c>
        n++;
 801214a:	88bb      	ldrh	r3, [r7, #4]
 801214c:	3301      	adds	r3, #1
 801214e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012150:	88bb      	ldrh	r3, [r7, #4]
 8012152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012156:	d3d8      	bcc.n	801210a <tcp_new_port+0xa>
          return 0;
 8012158:	2300      	movs	r3, #0
 801215a:	e00d      	b.n	8012178 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	68db      	ldr	r3, [r3, #12]
 8012160:	603b      	str	r3, [r7, #0]
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d1ea      	bne.n	801213e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012168:	79fb      	ldrb	r3, [r7, #7]
 801216a:	3301      	adds	r3, #1
 801216c:	71fb      	strb	r3, [r7, #7]
 801216e:	79fb      	ldrb	r3, [r7, #7]
 8012170:	2b03      	cmp	r3, #3
 8012172:	d9dd      	bls.n	8012130 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012174:	4b03      	ldr	r3, [pc, #12]	; (8012184 <tcp_new_port+0x84>)
 8012176:	881b      	ldrh	r3, [r3, #0]
}
 8012178:	4618      	mov	r0, r3
 801217a:	370c      	adds	r7, #12
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr
 8012184:	2000002c 	.word	0x2000002c
 8012188:	080296ac 	.word	0x080296ac

0801218c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801218c:	b5b0      	push	{r4, r5, r7, lr}
 801218e:	b090      	sub	sp, #64	; 0x40
 8012190:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012192:	2300      	movs	r3, #0
 8012194:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012198:	4b94      	ldr	r3, [pc, #592]	; (80123ec <tcp_slowtmr+0x260>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	3301      	adds	r3, #1
 801219e:	4a93      	ldr	r2, [pc, #588]	; (80123ec <tcp_slowtmr+0x260>)
 80121a0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80121a2:	4b93      	ldr	r3, [pc, #588]	; (80123f0 <tcp_slowtmr+0x264>)
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	3301      	adds	r3, #1
 80121a8:	b2da      	uxtb	r2, r3
 80121aa:	4b91      	ldr	r3, [pc, #580]	; (80123f0 <tcp_slowtmr+0x264>)
 80121ac:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80121ae:	2300      	movs	r3, #0
 80121b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80121b2:	4b90      	ldr	r3, [pc, #576]	; (80123f4 <tcp_slowtmr+0x268>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80121b8:	e29d      	b.n	80126f6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80121ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121bc:	7d1b      	ldrb	r3, [r3, #20]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d106      	bne.n	80121d0 <tcp_slowtmr+0x44>
 80121c2:	4b8d      	ldr	r3, [pc, #564]	; (80123f8 <tcp_slowtmr+0x26c>)
 80121c4:	f240 42be 	movw	r2, #1214	; 0x4be
 80121c8:	498c      	ldr	r1, [pc, #560]	; (80123fc <tcp_slowtmr+0x270>)
 80121ca:	488d      	ldr	r0, [pc, #564]	; (8012400 <tcp_slowtmr+0x274>)
 80121cc:	f009 fad4 	bl	801b778 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80121d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d2:	7d1b      	ldrb	r3, [r3, #20]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d106      	bne.n	80121e6 <tcp_slowtmr+0x5a>
 80121d8:	4b87      	ldr	r3, [pc, #540]	; (80123f8 <tcp_slowtmr+0x26c>)
 80121da:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80121de:	4989      	ldr	r1, [pc, #548]	; (8012404 <tcp_slowtmr+0x278>)
 80121e0:	4887      	ldr	r0, [pc, #540]	; (8012400 <tcp_slowtmr+0x274>)
 80121e2:	f009 fac9 	bl	801b778 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80121e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e8:	7d1b      	ldrb	r3, [r3, #20]
 80121ea:	2b0a      	cmp	r3, #10
 80121ec:	d106      	bne.n	80121fc <tcp_slowtmr+0x70>
 80121ee:	4b82      	ldr	r3, [pc, #520]	; (80123f8 <tcp_slowtmr+0x26c>)
 80121f0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80121f4:	4984      	ldr	r1, [pc, #528]	; (8012408 <tcp_slowtmr+0x27c>)
 80121f6:	4882      	ldr	r0, [pc, #520]	; (8012400 <tcp_slowtmr+0x274>)
 80121f8:	f009 fabe 	bl	801b778 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80121fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fe:	7f9a      	ldrb	r2, [r3, #30]
 8012200:	4b7b      	ldr	r3, [pc, #492]	; (80123f0 <tcp_slowtmr+0x264>)
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	429a      	cmp	r2, r3
 8012206:	d105      	bne.n	8012214 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220e:	68db      	ldr	r3, [r3, #12]
 8012210:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012212:	e270      	b.n	80126f6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012214:	4b76      	ldr	r3, [pc, #472]	; (80123f0 <tcp_slowtmr+0x264>)
 8012216:	781a      	ldrb	r2, [r3, #0]
 8012218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801221c:	2300      	movs	r3, #0
 801221e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012222:	2300      	movs	r3, #0
 8012224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222a:	7d1b      	ldrb	r3, [r3, #20]
 801222c:	2b02      	cmp	r3, #2
 801222e:	d10a      	bne.n	8012246 <tcp_slowtmr+0xba>
 8012230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012236:	2b05      	cmp	r3, #5
 8012238:	d905      	bls.n	8012246 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801223a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801223e:	3301      	adds	r3, #1
 8012240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012244:	e11e      	b.n	8012484 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012248:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801224c:	2b0b      	cmp	r3, #11
 801224e:	d905      	bls.n	801225c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012254:	3301      	adds	r3, #1
 8012256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801225a:	e113      	b.n	8012484 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801225e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012262:	2b00      	cmp	r3, #0
 8012264:	d075      	beq.n	8012352 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801226a:	2b00      	cmp	r3, #0
 801226c:	d006      	beq.n	801227c <tcp_slowtmr+0xf0>
 801226e:	4b62      	ldr	r3, [pc, #392]	; (80123f8 <tcp_slowtmr+0x26c>)
 8012270:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012274:	4965      	ldr	r1, [pc, #404]	; (801240c <tcp_slowtmr+0x280>)
 8012276:	4862      	ldr	r0, [pc, #392]	; (8012400 <tcp_slowtmr+0x274>)
 8012278:	f009 fa7e 	bl	801b778 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012280:	2b00      	cmp	r3, #0
 8012282:	d106      	bne.n	8012292 <tcp_slowtmr+0x106>
 8012284:	4b5c      	ldr	r3, [pc, #368]	; (80123f8 <tcp_slowtmr+0x26c>)
 8012286:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801228a:	4961      	ldr	r1, [pc, #388]	; (8012410 <tcp_slowtmr+0x284>)
 801228c:	485c      	ldr	r0, [pc, #368]	; (8012400 <tcp_slowtmr+0x274>)
 801228e:	f009 fa73 	bl	801b778 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012294:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012298:	2b0b      	cmp	r3, #11
 801229a:	d905      	bls.n	80122a8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801229c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122a0:	3301      	adds	r3, #1
 80122a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122a6:	e0ed      	b.n	8012484 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80122a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80122ae:	3b01      	subs	r3, #1
 80122b0:	4a58      	ldr	r2, [pc, #352]	; (8012414 <tcp_slowtmr+0x288>)
 80122b2:	5cd3      	ldrb	r3, [r2, r3]
 80122b4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80122b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80122bc:	7c7a      	ldrb	r2, [r7, #17]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d907      	bls.n	80122d2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80122c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80122c8:	3301      	adds	r3, #1
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80122d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80122d8:	7c7a      	ldrb	r2, [r7, #17]
 80122da:	429a      	cmp	r2, r3
 80122dc:	f200 80d2 	bhi.w	8012484 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80122e0:	2301      	movs	r3, #1
 80122e2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80122e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d108      	bne.n	8012300 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80122ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80122f0:	f005 f96a 	bl	80175c8 <tcp_zero_window_probe>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d014      	beq.n	8012324 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80122fa:	2300      	movs	r3, #0
 80122fc:	623b      	str	r3, [r7, #32]
 80122fe:	e011      	b.n	8012324 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012306:	4619      	mov	r1, r3
 8012308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801230a:	f004 f82f 	bl	801636c <tcp_split_unsent_seg>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d107      	bne.n	8012324 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012316:	f004 faaf 	bl	8016878 <tcp_output>
 801231a:	4603      	mov	r3, r0
 801231c:	2b00      	cmp	r3, #0
 801231e:	d101      	bne.n	8012324 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012320:	2300      	movs	r3, #0
 8012322:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012324:	6a3b      	ldr	r3, [r7, #32]
 8012326:	2b00      	cmp	r3, #0
 8012328:	f000 80ac 	beq.w	8012484 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232e:	2200      	movs	r2, #0
 8012330:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012336:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801233a:	2b06      	cmp	r3, #6
 801233c:	f200 80a2 	bhi.w	8012484 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012342:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012346:	3301      	adds	r3, #1
 8012348:	b2da      	uxtb	r2, r3
 801234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012350:	e098      	b.n	8012484 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012354:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012358:	2b00      	cmp	r3, #0
 801235a:	db0f      	blt.n	801237c <tcp_slowtmr+0x1f0>
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012362:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012366:	4293      	cmp	r3, r2
 8012368:	d008      	beq.n	801237c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012370:	b29b      	uxth	r3, r3
 8012372:	3301      	adds	r3, #1
 8012374:	b29b      	uxth	r3, r3
 8012376:	b21a      	sxth	r2, r3
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012384:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012388:	429a      	cmp	r2, r3
 801238a:	db7b      	blt.n	8012484 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801238c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801238e:	f004 fd65 	bl	8016e5c <tcp_rexmit_rto_prepare>
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d007      	beq.n	80123a8 <tcp_slowtmr+0x21c>
 8012398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801239c:	2b00      	cmp	r3, #0
 801239e:	d171      	bne.n	8012484 <tcp_slowtmr+0x2f8>
 80123a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d06d      	beq.n	8012484 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80123a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123aa:	7d1b      	ldrb	r3, [r3, #20]
 80123ac:	2b02      	cmp	r3, #2
 80123ae:	d03a      	beq.n	8012426 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80123b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80123b6:	2b0c      	cmp	r3, #12
 80123b8:	bf28      	it	cs
 80123ba:	230c      	movcs	r3, #12
 80123bc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80123be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80123c4:	10db      	asrs	r3, r3, #3
 80123c6:	b21b      	sxth	r3, r3
 80123c8:	461a      	mov	r2, r3
 80123ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80123d0:	4413      	add	r3, r2
 80123d2:	7efa      	ldrb	r2, [r7, #27]
 80123d4:	4910      	ldr	r1, [pc, #64]	; (8012418 <tcp_slowtmr+0x28c>)
 80123d6:	5c8a      	ldrb	r2, [r1, r2]
 80123d8:	4093      	lsls	r3, r2
 80123da:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80123e2:	4293      	cmp	r3, r2
 80123e4:	dc1a      	bgt.n	801241c <tcp_slowtmr+0x290>
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	b21a      	sxth	r2, r3
 80123ea:	e019      	b.n	8012420 <tcp_slowtmr+0x294>
 80123ec:	2000be44 	.word	0x2000be44
 80123f0:	20004f06 	.word	0x20004f06
 80123f4:	2000be40 	.word	0x2000be40
 80123f8:	08025f10 	.word	0x08025f10
 80123fc:	08026254 	.word	0x08026254
 8012400:	08025f54 	.word	0x08025f54
 8012404:	08026280 	.word	0x08026280
 8012408:	080262ac 	.word	0x080262ac
 801240c:	080262dc 	.word	0x080262dc
 8012410:	08026310 	.word	0x08026310
 8012414:	080296a4 	.word	0x080296a4
 8012418:	08029694 	.word	0x08029694
 801241c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012422:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012428:	2200      	movs	r2, #0
 801242a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012434:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012438:	4293      	cmp	r3, r2
 801243a:	bf28      	it	cs
 801243c:	4613      	movcs	r3, r2
 801243e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012440:	8a7b      	ldrh	r3, [r7, #18]
 8012442:	085b      	lsrs	r3, r3, #1
 8012444:	b29a      	uxth	r2, r3
 8012446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012448:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012456:	005b      	lsls	r3, r3, #1
 8012458:	b29b      	uxth	r3, r3
 801245a:	429a      	cmp	r2, r3
 801245c:	d206      	bcs.n	801246c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	b29a      	uxth	r2, r3
 8012466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012468:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012472:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012478:	2200      	movs	r2, #0
 801247a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801247e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012480:	f004 fd5c 	bl	8016f3c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012486:	7d1b      	ldrb	r3, [r3, #20]
 8012488:	2b06      	cmp	r3, #6
 801248a:	d111      	bne.n	80124b0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248e:	8b5b      	ldrh	r3, [r3, #26]
 8012490:	f003 0310 	and.w	r3, r3, #16
 8012494:	2b00      	cmp	r3, #0
 8012496:	d00b      	beq.n	80124b0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012498:	4b9c      	ldr	r3, [pc, #624]	; (801270c <tcp_slowtmr+0x580>)
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249e:	6a1b      	ldr	r3, [r3, #32]
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	2b28      	cmp	r3, #40	; 0x28
 80124a4:	d904      	bls.n	80124b0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80124a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124aa:	3301      	adds	r3, #1
 80124ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80124b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b2:	7a5b      	ldrb	r3, [r3, #9]
 80124b4:	f003 0308 	and.w	r3, r3, #8
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d04a      	beq.n	8012552 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80124bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124be:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80124c0:	2b04      	cmp	r3, #4
 80124c2:	d003      	beq.n	80124cc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80124c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80124c8:	2b07      	cmp	r3, #7
 80124ca:	d142      	bne.n	8012552 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80124cc:	4b8f      	ldr	r3, [pc, #572]	; (801270c <tcp_slowtmr+0x580>)
 80124ce:	681a      	ldr	r2, [r3, #0]
 80124d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d2:	6a1b      	ldr	r3, [r3, #32]
 80124d4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80124d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80124dc:	4b8c      	ldr	r3, [pc, #560]	; (8012710 <tcp_slowtmr+0x584>)
 80124de:	440b      	add	r3, r1
 80124e0:	498c      	ldr	r1, [pc, #560]	; (8012714 <tcp_slowtmr+0x588>)
 80124e2:	fba1 1303 	umull	r1, r3, r1, r3
 80124e6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d90a      	bls.n	8012502 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80124ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124f0:	3301      	adds	r3, #1
 80124f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80124f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124fa:	3301      	adds	r3, #1
 80124fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012500:	e027      	b.n	8012552 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012502:	4b82      	ldr	r3, [pc, #520]	; (801270c <tcp_slowtmr+0x580>)
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012508:	6a1b      	ldr	r3, [r3, #32]
 801250a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012514:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012518:	4618      	mov	r0, r3
 801251a:	4b7f      	ldr	r3, [pc, #508]	; (8012718 <tcp_slowtmr+0x58c>)
 801251c:	fb03 f300 	mul.w	r3, r3, r0
 8012520:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012522:	497c      	ldr	r1, [pc, #496]	; (8012714 <tcp_slowtmr+0x588>)
 8012524:	fba1 1303 	umull	r1, r3, r1, r3
 8012528:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801252a:	429a      	cmp	r2, r3
 801252c:	d911      	bls.n	8012552 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801252e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012530:	f005 f80a 	bl	8017548 <tcp_keepalive>
 8012534:	4603      	mov	r3, r0
 8012536:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801253a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801253e:	2b00      	cmp	r3, #0
 8012540:	d107      	bne.n	8012552 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8012542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012544:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012548:	3301      	adds	r3, #1
 801254a:	b2da      	uxtb	r2, r3
 801254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012556:	2b00      	cmp	r3, #0
 8012558:	d011      	beq.n	801257e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801255a:	4b6c      	ldr	r3, [pc, #432]	; (801270c <tcp_slowtmr+0x580>)
 801255c:	681a      	ldr	r2, [r3, #0]
 801255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012560:	6a1b      	ldr	r3, [r3, #32]
 8012562:	1ad2      	subs	r2, r2, r3
 8012564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012566:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801256a:	4619      	mov	r1, r3
 801256c:	460b      	mov	r3, r1
 801256e:	005b      	lsls	r3, r3, #1
 8012570:	440b      	add	r3, r1
 8012572:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012574:	429a      	cmp	r2, r3
 8012576:	d302      	bcc.n	801257e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801257a:	f000 fec9 	bl	8013310 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012580:	7d1b      	ldrb	r3, [r3, #20]
 8012582:	2b03      	cmp	r3, #3
 8012584:	d10b      	bne.n	801259e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012586:	4b61      	ldr	r3, [pc, #388]	; (801270c <tcp_slowtmr+0x580>)
 8012588:	681a      	ldr	r2, [r3, #0]
 801258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258c:	6a1b      	ldr	r3, [r3, #32]
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	2b28      	cmp	r3, #40	; 0x28
 8012592:	d904      	bls.n	801259e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012598:	3301      	adds	r3, #1
 801259a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a0:	7d1b      	ldrb	r3, [r3, #20]
 80125a2:	2b09      	cmp	r3, #9
 80125a4:	d10b      	bne.n	80125be <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80125a6:	4b59      	ldr	r3, [pc, #356]	; (801270c <tcp_slowtmr+0x580>)
 80125a8:	681a      	ldr	r2, [r3, #0]
 80125aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ac:	6a1b      	ldr	r3, [r3, #32]
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	2bf0      	cmp	r3, #240	; 0xf0
 80125b2:	d904      	bls.n	80125be <tcp_slowtmr+0x432>
        ++pcb_remove;
 80125b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125b8:	3301      	adds	r3, #1
 80125ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80125be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d060      	beq.n	8012688 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80125c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80125ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125d0:	f000 fcea 	bl	8012fa8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80125d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d010      	beq.n	80125fc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80125da:	4b50      	ldr	r3, [pc, #320]	; (801271c <tcp_slowtmr+0x590>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d106      	bne.n	80125f2 <tcp_slowtmr+0x466>
 80125e4:	4b4e      	ldr	r3, [pc, #312]	; (8012720 <tcp_slowtmr+0x594>)
 80125e6:	f240 526d 	movw	r2, #1389	; 0x56d
 80125ea:	494e      	ldr	r1, [pc, #312]	; (8012724 <tcp_slowtmr+0x598>)
 80125ec:	484e      	ldr	r0, [pc, #312]	; (8012728 <tcp_slowtmr+0x59c>)
 80125ee:	f009 f8c3 	bl	801b778 <printf>
        prev->next = pcb->next;
 80125f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f4:	68da      	ldr	r2, [r3, #12]
 80125f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f8:	60da      	str	r2, [r3, #12]
 80125fa:	e00f      	b.n	801261c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80125fc:	4b47      	ldr	r3, [pc, #284]	; (801271c <tcp_slowtmr+0x590>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012602:	429a      	cmp	r2, r3
 8012604:	d006      	beq.n	8012614 <tcp_slowtmr+0x488>
 8012606:	4b46      	ldr	r3, [pc, #280]	; (8012720 <tcp_slowtmr+0x594>)
 8012608:	f240 5271 	movw	r2, #1393	; 0x571
 801260c:	4947      	ldr	r1, [pc, #284]	; (801272c <tcp_slowtmr+0x5a0>)
 801260e:	4846      	ldr	r0, [pc, #280]	; (8012728 <tcp_slowtmr+0x59c>)
 8012610:	f009 f8b2 	bl	801b778 <printf>
        tcp_active_pcbs = pcb->next;
 8012614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012616:	68db      	ldr	r3, [r3, #12]
 8012618:	4a40      	ldr	r2, [pc, #256]	; (801271c <tcp_slowtmr+0x590>)
 801261a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801261c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012620:	2b00      	cmp	r3, #0
 8012622:	d013      	beq.n	801264c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801262c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012630:	3304      	adds	r3, #4
 8012632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012634:	8ad2      	ldrh	r2, [r2, #22]
 8012636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012638:	8b09      	ldrh	r1, [r1, #24]
 801263a:	9102      	str	r1, [sp, #8]
 801263c:	9201      	str	r2, [sp, #4]
 801263e:	9300      	str	r3, [sp, #0]
 8012640:	462b      	mov	r3, r5
 8012642:	4622      	mov	r2, r4
 8012644:	4601      	mov	r1, r0
 8012646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012648:	f004 feca 	bl	80173e0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264e:	691b      	ldr	r3, [r3, #16]
 8012650:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012654:	7d1b      	ldrb	r3, [r3, #20]
 8012656:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801265a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012662:	6838      	ldr	r0, [r7, #0]
 8012664:	f7fe ffde 	bl	8011624 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012668:	4b31      	ldr	r3, [pc, #196]	; (8012730 <tcp_slowtmr+0x5a4>)
 801266a:	2200      	movs	r2, #0
 801266c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d004      	beq.n	801267e <tcp_slowtmr+0x4f2>
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	f06f 010c 	mvn.w	r1, #12
 801267a:	68b8      	ldr	r0, [r7, #8]
 801267c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801267e:	4b2c      	ldr	r3, [pc, #176]	; (8012730 <tcp_slowtmr+0x5a4>)
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d037      	beq.n	80126f6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012686:	e592      	b.n	80121ae <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012694:	7f1b      	ldrb	r3, [r3, #28]
 8012696:	3301      	adds	r3, #1
 8012698:	b2da      	uxtb	r2, r3
 801269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a0:	7f1a      	ldrb	r2, [r3, #28]
 80126a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a4:	7f5b      	ldrb	r3, [r3, #29]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d325      	bcc.n	80126f6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80126aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ac:	2200      	movs	r2, #0
 80126ae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80126b0:	4b1f      	ldr	r3, [pc, #124]	; (8012730 <tcp_slowtmr+0x5a4>)
 80126b2:	2200      	movs	r2, #0
 80126b4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80126b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d00b      	beq.n	80126d8 <tcp_slowtmr+0x54c>
 80126c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126c8:	6912      	ldr	r2, [r2, #16]
 80126ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126cc:	4610      	mov	r0, r2
 80126ce:	4798      	blx	r3
 80126d0:	4603      	mov	r3, r0
 80126d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80126d6:	e002      	b.n	80126de <tcp_slowtmr+0x552>
 80126d8:	2300      	movs	r3, #0
 80126da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80126de:	4b14      	ldr	r3, [pc, #80]	; (8012730 <tcp_slowtmr+0x5a4>)
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d000      	beq.n	80126e8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80126e6:	e562      	b.n	80121ae <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80126e8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d102      	bne.n	80126f6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80126f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126f2:	f004 f8c1 	bl	8016878 <tcp_output>
  while (pcb != NULL) {
 80126f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f47f ad5e 	bne.w	80121ba <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80126fe:	2300      	movs	r3, #0
 8012700:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012702:	4b0c      	ldr	r3, [pc, #48]	; (8012734 <tcp_slowtmr+0x5a8>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012708:	e069      	b.n	80127de <tcp_slowtmr+0x652>
 801270a:	bf00      	nop
 801270c:	2000be44 	.word	0x2000be44
 8012710:	000a4cb8 	.word	0x000a4cb8
 8012714:	10624dd3 	.word	0x10624dd3
 8012718:	000124f8 	.word	0x000124f8
 801271c:	2000be40 	.word	0x2000be40
 8012720:	08025f10 	.word	0x08025f10
 8012724:	08026348 	.word	0x08026348
 8012728:	08025f54 	.word	0x08025f54
 801272c:	08026374 	.word	0x08026374
 8012730:	2000be3c 	.word	0x2000be3c
 8012734:	2000be50 	.word	0x2000be50
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273a:	7d1b      	ldrb	r3, [r3, #20]
 801273c:	2b0a      	cmp	r3, #10
 801273e:	d006      	beq.n	801274e <tcp_slowtmr+0x5c2>
 8012740:	4b2b      	ldr	r3, [pc, #172]	; (80127f0 <tcp_slowtmr+0x664>)
 8012742:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012746:	492b      	ldr	r1, [pc, #172]	; (80127f4 <tcp_slowtmr+0x668>)
 8012748:	482b      	ldr	r0, [pc, #172]	; (80127f8 <tcp_slowtmr+0x66c>)
 801274a:	f009 f815 	bl	801b778 <printf>
    pcb_remove = 0;
 801274e:	2300      	movs	r3, #0
 8012750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012754:	4b29      	ldr	r3, [pc, #164]	; (80127fc <tcp_slowtmr+0x670>)
 8012756:	681a      	ldr	r2, [r3, #0]
 8012758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275a:	6a1b      	ldr	r3, [r3, #32]
 801275c:	1ad3      	subs	r3, r2, r3
 801275e:	2bf0      	cmp	r3, #240	; 0xf0
 8012760:	d904      	bls.n	801276c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012766:	3301      	adds	r3, #1
 8012768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801276c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012770:	2b00      	cmp	r3, #0
 8012772:	d02f      	beq.n	80127d4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012776:	f000 fc17 	bl	8012fa8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801277c:	2b00      	cmp	r3, #0
 801277e:	d010      	beq.n	80127a2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012780:	4b1f      	ldr	r3, [pc, #124]	; (8012800 <tcp_slowtmr+0x674>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012786:	429a      	cmp	r2, r3
 8012788:	d106      	bne.n	8012798 <tcp_slowtmr+0x60c>
 801278a:	4b19      	ldr	r3, [pc, #100]	; (80127f0 <tcp_slowtmr+0x664>)
 801278c:	f240 52af 	movw	r2, #1455	; 0x5af
 8012790:	491c      	ldr	r1, [pc, #112]	; (8012804 <tcp_slowtmr+0x678>)
 8012792:	4819      	ldr	r0, [pc, #100]	; (80127f8 <tcp_slowtmr+0x66c>)
 8012794:	f008 fff0 	bl	801b778 <printf>
        prev->next = pcb->next;
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279a:	68da      	ldr	r2, [r3, #12]
 801279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279e:	60da      	str	r2, [r3, #12]
 80127a0:	e00f      	b.n	80127c2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80127a2:	4b17      	ldr	r3, [pc, #92]	; (8012800 <tcp_slowtmr+0x674>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d006      	beq.n	80127ba <tcp_slowtmr+0x62e>
 80127ac:	4b10      	ldr	r3, [pc, #64]	; (80127f0 <tcp_slowtmr+0x664>)
 80127ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80127b2:	4915      	ldr	r1, [pc, #84]	; (8012808 <tcp_slowtmr+0x67c>)
 80127b4:	4810      	ldr	r0, [pc, #64]	; (80127f8 <tcp_slowtmr+0x66c>)
 80127b6:	f008 ffdf 	bl	801b778 <printf>
        tcp_tw_pcbs = pcb->next;
 80127ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127bc:	68db      	ldr	r3, [r3, #12]
 80127be:	4a10      	ldr	r2, [pc, #64]	; (8012800 <tcp_slowtmr+0x674>)
 80127c0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80127c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80127c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c8:	68db      	ldr	r3, [r3, #12]
 80127ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80127cc:	69f8      	ldr	r0, [r7, #28]
 80127ce:	f7fe ff29 	bl	8011624 <tcp_free>
 80127d2:	e004      	b.n	80127de <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80127d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80127d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80127de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d1a9      	bne.n	8012738 <tcp_slowtmr+0x5ac>
    }
  }
}
 80127e4:	bf00      	nop
 80127e6:	bf00      	nop
 80127e8:	3730      	adds	r7, #48	; 0x30
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bdb0      	pop	{r4, r5, r7, pc}
 80127ee:	bf00      	nop
 80127f0:	08025f10 	.word	0x08025f10
 80127f4:	080263a0 	.word	0x080263a0
 80127f8:	08025f54 	.word	0x08025f54
 80127fc:	2000be44 	.word	0x2000be44
 8012800:	2000be50 	.word	0x2000be50
 8012804:	080263d0 	.word	0x080263d0
 8012808:	080263f8 	.word	0x080263f8

0801280c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b082      	sub	sp, #8
 8012810:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012812:	4b2d      	ldr	r3, [pc, #180]	; (80128c8 <tcp_fasttmr+0xbc>)
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	3301      	adds	r3, #1
 8012818:	b2da      	uxtb	r2, r3
 801281a:	4b2b      	ldr	r3, [pc, #172]	; (80128c8 <tcp_fasttmr+0xbc>)
 801281c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801281e:	4b2b      	ldr	r3, [pc, #172]	; (80128cc <tcp_fasttmr+0xc0>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012824:	e048      	b.n	80128b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	7f9a      	ldrb	r2, [r3, #30]
 801282a:	4b27      	ldr	r3, [pc, #156]	; (80128c8 <tcp_fasttmr+0xbc>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	429a      	cmp	r2, r3
 8012830:	d03f      	beq.n	80128b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012832:	4b25      	ldr	r3, [pc, #148]	; (80128c8 <tcp_fasttmr+0xbc>)
 8012834:	781a      	ldrb	r2, [r3, #0]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	8b5b      	ldrh	r3, [r3, #26]
 801283e:	f003 0301 	and.w	r3, r3, #1
 8012842:	2b00      	cmp	r3, #0
 8012844:	d010      	beq.n	8012868 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	8b5b      	ldrh	r3, [r3, #26]
 801284a:	f043 0302 	orr.w	r3, r3, #2
 801284e:	b29a      	uxth	r2, r3
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f004 f80f 	bl	8016878 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	8b5b      	ldrh	r3, [r3, #26]
 801285e:	f023 0303 	bic.w	r3, r3, #3
 8012862:	b29a      	uxth	r2, r3
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	8b5b      	ldrh	r3, [r3, #26]
 801286c:	f003 0308 	and.w	r3, r3, #8
 8012870:	2b00      	cmp	r3, #0
 8012872:	d009      	beq.n	8012888 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	8b5b      	ldrh	r3, [r3, #26]
 8012878:	f023 0308 	bic.w	r3, r3, #8
 801287c:	b29a      	uxth	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f7ff f862 	bl	801194c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012892:	2b00      	cmp	r3, #0
 8012894:	d00a      	beq.n	80128ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012896:	4b0e      	ldr	r3, [pc, #56]	; (80128d0 <tcp_fasttmr+0xc4>)
 8012898:	2200      	movs	r2, #0
 801289a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f000 f819 	bl	80128d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80128a2:	4b0b      	ldr	r3, [pc, #44]	; (80128d0 <tcp_fasttmr+0xc4>)
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d000      	beq.n	80128ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80128aa:	e7b8      	b.n	801281e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	607b      	str	r3, [r7, #4]
 80128b0:	e002      	b.n	80128b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	68db      	ldr	r3, [r3, #12]
 80128b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d1b3      	bne.n	8012826 <tcp_fasttmr+0x1a>
    }
  }
}
 80128be:	bf00      	nop
 80128c0:	bf00      	nop
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	20004f06 	.word	0x20004f06
 80128cc:	2000be40 	.word	0x2000be40
 80128d0:	2000be3c 	.word	0x2000be3c

080128d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80128d4:	b590      	push	{r4, r7, lr}
 80128d6:	b085      	sub	sp, #20
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d109      	bne.n	80128f6 <tcp_process_refused_data+0x22>
 80128e2:	4b37      	ldr	r3, [pc, #220]	; (80129c0 <tcp_process_refused_data+0xec>)
 80128e4:	f240 6209 	movw	r2, #1545	; 0x609
 80128e8:	4936      	ldr	r1, [pc, #216]	; (80129c4 <tcp_process_refused_data+0xf0>)
 80128ea:	4837      	ldr	r0, [pc, #220]	; (80129c8 <tcp_process_refused_data+0xf4>)
 80128ec:	f008 ff44 	bl	801b778 <printf>
 80128f0:	f06f 030f 	mvn.w	r3, #15
 80128f4:	e060      	b.n	80129b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128fa:	7b5b      	ldrb	r3, [r3, #13]
 80128fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012902:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012910:	2b00      	cmp	r3, #0
 8012912:	d00b      	beq.n	801292c <tcp_process_refused_data+0x58>
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6918      	ldr	r0, [r3, #16]
 801291e:	2300      	movs	r3, #0
 8012920:	68ba      	ldr	r2, [r7, #8]
 8012922:	6879      	ldr	r1, [r7, #4]
 8012924:	47a0      	blx	r4
 8012926:	4603      	mov	r3, r0
 8012928:	73fb      	strb	r3, [r7, #15]
 801292a:	e007      	b.n	801293c <tcp_process_refused_data+0x68>
 801292c:	2300      	movs	r3, #0
 801292e:	68ba      	ldr	r2, [r7, #8]
 8012930:	6879      	ldr	r1, [r7, #4]
 8012932:	2000      	movs	r0, #0
 8012934:	f000 f8c2 	bl	8012abc <tcp_recv_null>
 8012938:	4603      	mov	r3, r0
 801293a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801293c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d12a      	bne.n	801299a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012944:	7bbb      	ldrb	r3, [r7, #14]
 8012946:	f003 0320 	and.w	r3, r3, #32
 801294a:	2b00      	cmp	r3, #0
 801294c:	d033      	beq.n	80129b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012952:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012956:	d005      	beq.n	8012964 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801295c:	3301      	adds	r3, #1
 801295e:	b29a      	uxth	r2, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801296a:	2b00      	cmp	r3, #0
 801296c:	d00b      	beq.n	8012986 <tcp_process_refused_data+0xb2>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6918      	ldr	r0, [r3, #16]
 8012978:	2300      	movs	r3, #0
 801297a:	2200      	movs	r2, #0
 801297c:	6879      	ldr	r1, [r7, #4]
 801297e:	47a0      	blx	r4
 8012980:	4603      	mov	r3, r0
 8012982:	73fb      	strb	r3, [r7, #15]
 8012984:	e001      	b.n	801298a <tcp_process_refused_data+0xb6>
 8012986:	2300      	movs	r3, #0
 8012988:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801298e:	f113 0f0d 	cmn.w	r3, #13
 8012992:	d110      	bne.n	80129b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012994:	f06f 030c 	mvn.w	r3, #12
 8012998:	e00e      	b.n	80129b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801299e:	f113 0f0d 	cmn.w	r3, #13
 80129a2:	d102      	bne.n	80129aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80129a4:	f06f 030c 	mvn.w	r3, #12
 80129a8:	e006      	b.n	80129b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	68ba      	ldr	r2, [r7, #8]
 80129ae:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80129b0:	f06f 0304 	mvn.w	r3, #4
 80129b4:	e000      	b.n	80129b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80129b6:	2300      	movs	r3, #0
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3714      	adds	r7, #20
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd90      	pop	{r4, r7, pc}
 80129c0:	08025f10 	.word	0x08025f10
 80129c4:	08026420 	.word	0x08026420
 80129c8:	08025f54 	.word	0x08025f54

080129cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80129d4:	e007      	b.n	80129e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f000 f80a 	bl	80129f6 <tcp_seg_free>
    seg = next;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d1f4      	bne.n	80129d6 <tcp_segs_free+0xa>
  }
}
 80129ec:	bf00      	nop
 80129ee:	bf00      	nop
 80129f0:	3710      	adds	r7, #16
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b082      	sub	sp, #8
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00c      	beq.n	8012a1e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	685b      	ldr	r3, [r3, #4]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d004      	beq.n	8012a16 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fe fb4b 	bl	80110ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012a16:	6879      	ldr	r1, [r7, #4]
 8012a18:	2003      	movs	r0, #3
 8012a1a:	f7fd fcf3 	bl	8010404 <memp_free>
  }
}
 8012a1e:	bf00      	nop
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
	...

08012a28 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	460b      	mov	r3, r1
 8012a32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d107      	bne.n	8012a4a <tcp_setprio+0x22>
 8012a3a:	4b07      	ldr	r3, [pc, #28]	; (8012a58 <tcp_setprio+0x30>)
 8012a3c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8012a40:	4906      	ldr	r1, [pc, #24]	; (8012a5c <tcp_setprio+0x34>)
 8012a42:	4807      	ldr	r0, [pc, #28]	; (8012a60 <tcp_setprio+0x38>)
 8012a44:	f008 fe98 	bl	801b778 <printf>
 8012a48:	e002      	b.n	8012a50 <tcp_setprio+0x28>

  pcb->prio = prio;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	78fa      	ldrb	r2, [r7, #3]
 8012a4e:	755a      	strb	r2, [r3, #21]
}
 8012a50:	3708      	adds	r7, #8
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	08025f10 	.word	0x08025f10
 8012a5c:	08026448 	.word	0x08026448
 8012a60:	08025f54 	.word	0x08025f54

08012a64 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d106      	bne.n	8012a80 <tcp_seg_copy+0x1c>
 8012a72:	4b0f      	ldr	r3, [pc, #60]	; (8012ab0 <tcp_seg_copy+0x4c>)
 8012a74:	f240 6282 	movw	r2, #1666	; 0x682
 8012a78:	490e      	ldr	r1, [pc, #56]	; (8012ab4 <tcp_seg_copy+0x50>)
 8012a7a:	480f      	ldr	r0, [pc, #60]	; (8012ab8 <tcp_seg_copy+0x54>)
 8012a7c:	f008 fe7c 	bl	801b778 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012a80:	2003      	movs	r0, #3
 8012a82:	f7fd fc6d 	bl	8010360 <memp_malloc>
 8012a86:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d101      	bne.n	8012a92 <tcp_seg_copy+0x2e>
    return NULL;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	e00a      	b.n	8012aa8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012a92:	2210      	movs	r2, #16
 8012a94:	6879      	ldr	r1, [r7, #4]
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f008 fbc0 	bl	801b21c <memcpy>
  pbuf_ref(cseg->p);
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fe fba9 	bl	80111f8 <pbuf_ref>
  return cseg;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	08025f10 	.word	0x08025f10
 8012ab4:	08026464 	.word	0x08026464
 8012ab8:	08025f54 	.word	0x08025f54

08012abc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	60f8      	str	r0, [r7, #12]
 8012ac4:	60b9      	str	r1, [r7, #8]
 8012ac6:	607a      	str	r2, [r7, #4]
 8012ac8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d109      	bne.n	8012ae4 <tcp_recv_null+0x28>
 8012ad0:	4b12      	ldr	r3, [pc, #72]	; (8012b1c <tcp_recv_null+0x60>)
 8012ad2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ad6:	4912      	ldr	r1, [pc, #72]	; (8012b20 <tcp_recv_null+0x64>)
 8012ad8:	4812      	ldr	r0, [pc, #72]	; (8012b24 <tcp_recv_null+0x68>)
 8012ada:	f008 fe4d 	bl	801b778 <printf>
 8012ade:	f06f 030f 	mvn.w	r3, #15
 8012ae2:	e016      	b.n	8012b12 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d009      	beq.n	8012afe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	891b      	ldrh	r3, [r3, #8]
 8012aee:	4619      	mov	r1, r3
 8012af0:	68b8      	ldr	r0, [r7, #8]
 8012af2:	f7ff fab5 	bl	8012060 <tcp_recved>
    pbuf_free(p);
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7fe fad8 	bl	80110ac <pbuf_free>
 8012afc:	e008      	b.n	8012b10 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d104      	bne.n	8012b10 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012b06:	68b8      	ldr	r0, [r7, #8]
 8012b08:	f7fe ff8a 	bl	8011a20 <tcp_close>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	e000      	b.n	8012b12 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3710      	adds	r7, #16
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	08025f10 	.word	0x08025f10
 8012b20:	08026480 	.word	0x08026480
 8012b24:	08025f54 	.word	0x08025f54

08012b28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b086      	sub	sp, #24
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	4603      	mov	r3, r0
 8012b30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	db01      	blt.n	8012b3e <tcp_kill_prio+0x16>
 8012b3a:	79fb      	ldrb	r3, [r7, #7]
 8012b3c:	e000      	b.n	8012b40 <tcp_kill_prio+0x18>
 8012b3e:	237f      	movs	r3, #127	; 0x7f
 8012b40:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012b42:	7afb      	ldrb	r3, [r7, #11]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d034      	beq.n	8012bb2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012b48:	7afb      	ldrb	r3, [r7, #11]
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012b52:	2300      	movs	r3, #0
 8012b54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b56:	4b19      	ldr	r3, [pc, #100]	; (8012bbc <tcp_kill_prio+0x94>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	617b      	str	r3, [r7, #20]
 8012b5c:	e01f      	b.n	8012b9e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	7d5b      	ldrb	r3, [r3, #21]
 8012b62:	7afa      	ldrb	r2, [r7, #11]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d80c      	bhi.n	8012b82 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012b6c:	7afa      	ldrb	r2, [r7, #11]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d112      	bne.n	8012b98 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012b72:	4b13      	ldr	r3, [pc, #76]	; (8012bc0 <tcp_kill_prio+0x98>)
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	6a1b      	ldr	r3, [r3, #32]
 8012b7a:	1ad3      	subs	r3, r2, r3
 8012b7c:	68fa      	ldr	r2, [r7, #12]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d80a      	bhi.n	8012b98 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012b82:	4b0f      	ldr	r3, [pc, #60]	; (8012bc0 <tcp_kill_prio+0x98>)
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	6a1b      	ldr	r3, [r3, #32]
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	7d5b      	ldrb	r3, [r3, #21]
 8012b96:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	68db      	ldr	r3, [r3, #12]
 8012b9c:	617b      	str	r3, [r7, #20]
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1dc      	bne.n	8012b5e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d004      	beq.n	8012bb4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012baa:	6938      	ldr	r0, [r7, #16]
 8012bac:	f7ff f87e 	bl	8011cac <tcp_abort>
 8012bb0:	e000      	b.n	8012bb4 <tcp_kill_prio+0x8c>
    return;
 8012bb2:	bf00      	nop
  }
}
 8012bb4:	3718      	adds	r7, #24
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	2000be40 	.word	0x2000be40
 8012bc0:	2000be44 	.word	0x2000be44

08012bc4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	4603      	mov	r3, r0
 8012bcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012bce:	79fb      	ldrb	r3, [r7, #7]
 8012bd0:	2b08      	cmp	r3, #8
 8012bd2:	d009      	beq.n	8012be8 <tcp_kill_state+0x24>
 8012bd4:	79fb      	ldrb	r3, [r7, #7]
 8012bd6:	2b09      	cmp	r3, #9
 8012bd8:	d006      	beq.n	8012be8 <tcp_kill_state+0x24>
 8012bda:	4b1a      	ldr	r3, [pc, #104]	; (8012c44 <tcp_kill_state+0x80>)
 8012bdc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012be0:	4919      	ldr	r1, [pc, #100]	; (8012c48 <tcp_kill_state+0x84>)
 8012be2:	481a      	ldr	r0, [pc, #104]	; (8012c4c <tcp_kill_state+0x88>)
 8012be4:	f008 fdc8 	bl	801b778 <printf>

  inactivity = 0;
 8012be8:	2300      	movs	r3, #0
 8012bea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012bec:	2300      	movs	r3, #0
 8012bee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bf0:	4b17      	ldr	r3, [pc, #92]	; (8012c50 <tcp_kill_state+0x8c>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	617b      	str	r3, [r7, #20]
 8012bf6:	e017      	b.n	8012c28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	7d1b      	ldrb	r3, [r3, #20]
 8012bfc:	79fa      	ldrb	r2, [r7, #7]
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d10f      	bne.n	8012c22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012c02:	4b14      	ldr	r3, [pc, #80]	; (8012c54 <tcp_kill_state+0x90>)
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	6a1b      	ldr	r3, [r3, #32]
 8012c0a:	1ad3      	subs	r3, r2, r3
 8012c0c:	68fa      	ldr	r2, [r7, #12]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d807      	bhi.n	8012c22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012c12:	4b10      	ldr	r3, [pc, #64]	; (8012c54 <tcp_kill_state+0x90>)
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	6a1b      	ldr	r3, [r3, #32]
 8012c1a:	1ad3      	subs	r3, r2, r3
 8012c1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	617b      	str	r3, [r7, #20]
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d1e4      	bne.n	8012bf8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d003      	beq.n	8012c3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012c34:	2100      	movs	r1, #0
 8012c36:	6938      	ldr	r0, [r7, #16]
 8012c38:	f7fe ff7a 	bl	8011b30 <tcp_abandon>
  }
}
 8012c3c:	bf00      	nop
 8012c3e:	3718      	adds	r7, #24
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	08025f10 	.word	0x08025f10
 8012c48:	0802649c 	.word	0x0802649c
 8012c4c:	08025f54 	.word	0x08025f54
 8012c50:	2000be40 	.word	0x2000be40
 8012c54:	2000be44 	.word	0x2000be44

08012c58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b084      	sub	sp, #16
 8012c5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012c62:	2300      	movs	r3, #0
 8012c64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c66:	4b12      	ldr	r3, [pc, #72]	; (8012cb0 <tcp_kill_timewait+0x58>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	60fb      	str	r3, [r7, #12]
 8012c6c:	e012      	b.n	8012c94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012c6e:	4b11      	ldr	r3, [pc, #68]	; (8012cb4 <tcp_kill_timewait+0x5c>)
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	6a1b      	ldr	r3, [r3, #32]
 8012c76:	1ad3      	subs	r3, r2, r3
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d807      	bhi.n	8012c8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012c7e:	4b0d      	ldr	r3, [pc, #52]	; (8012cb4 <tcp_kill_timewait+0x5c>)
 8012c80:	681a      	ldr	r2, [r3, #0]
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	6a1b      	ldr	r3, [r3, #32]
 8012c86:	1ad3      	subs	r3, r2, r3
 8012c88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	60fb      	str	r3, [r7, #12]
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d1e9      	bne.n	8012c6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d002      	beq.n	8012ca6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012ca0:	68b8      	ldr	r0, [r7, #8]
 8012ca2:	f7ff f803 	bl	8011cac <tcp_abort>
  }
}
 8012ca6:	bf00      	nop
 8012ca8:	3710      	adds	r7, #16
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	2000be50 	.word	0x2000be50
 8012cb4:	2000be44 	.word	0x2000be44

08012cb8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012cbe:	4b10      	ldr	r3, [pc, #64]	; (8012d00 <tcp_handle_closepend+0x48>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012cc4:	e014      	b.n	8012cf0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	68db      	ldr	r3, [r3, #12]
 8012cca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	8b5b      	ldrh	r3, [r3, #26]
 8012cd0:	f003 0308 	and.w	r3, r3, #8
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d009      	beq.n	8012cec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	8b5b      	ldrh	r3, [r3, #26]
 8012cdc:	f023 0308 	bic.w	r3, r3, #8
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f7fe fe30 	bl	801194c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d1e7      	bne.n	8012cc6 <tcp_handle_closepend+0xe>
  }
}
 8012cf6:	bf00      	nop
 8012cf8:	bf00      	nop
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	2000be40 	.word	0x2000be40

08012d04 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012d0e:	2001      	movs	r0, #1
 8012d10:	f7fd fb26 	bl	8010360 <memp_malloc>
 8012d14:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d126      	bne.n	8012d6a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012d1c:	f7ff ffcc 	bl	8012cb8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012d20:	f7ff ff9a 	bl	8012c58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012d24:	2001      	movs	r0, #1
 8012d26:	f7fd fb1b 	bl	8010360 <memp_malloc>
 8012d2a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d11b      	bne.n	8012d6a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012d32:	2009      	movs	r0, #9
 8012d34:	f7ff ff46 	bl	8012bc4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012d38:	2001      	movs	r0, #1
 8012d3a:	f7fd fb11 	bl	8010360 <memp_malloc>
 8012d3e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d111      	bne.n	8012d6a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012d46:	2008      	movs	r0, #8
 8012d48:	f7ff ff3c 	bl	8012bc4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012d4c:	2001      	movs	r0, #1
 8012d4e:	f7fd fb07 	bl	8010360 <memp_malloc>
 8012d52:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d107      	bne.n	8012d6a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012d5a:	79fb      	ldrb	r3, [r7, #7]
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7ff fee3 	bl	8012b28 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012d62:	2001      	movs	r0, #1
 8012d64:	f7fd fafc 	bl	8010360 <memp_malloc>
 8012d68:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d03f      	beq.n	8012df0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012d70:	229c      	movs	r2, #156	; 0x9c
 8012d72:	2100      	movs	r1, #0
 8012d74:	68f8      	ldr	r0, [r7, #12]
 8012d76:	f008 fa79 	bl	801b26c <memset>
    pcb->prio = prio;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	79fa      	ldrb	r2, [r7, #7]
 8012d7e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012d86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012d90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	22ff      	movs	r2, #255	; 0xff
 8012d9e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012da6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2206      	movs	r2, #6
 8012dac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2206      	movs	r2, #6
 8012db4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012dbc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	2201      	movs	r2, #1
 8012dc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012dc6:	4b0d      	ldr	r3, [pc, #52]	; (8012dfc <tcp_alloc+0xf8>)
 8012dc8:	681a      	ldr	r2, [r3, #0]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012dce:	4b0c      	ldr	r3, [pc, #48]	; (8012e00 <tcp_alloc+0xfc>)
 8012dd0:	781a      	ldrb	r2, [r3, #0]
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012ddc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	4a08      	ldr	r2, [pc, #32]	; (8012e04 <tcp_alloc+0x100>)
 8012de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	4a07      	ldr	r2, [pc, #28]	; (8012e08 <tcp_alloc+0x104>)
 8012dec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012df0:	68fb      	ldr	r3, [r7, #12]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3710      	adds	r7, #16
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	2000be44 	.word	0x2000be44
 8012e00:	20004f06 	.word	0x20004f06
 8012e04:	08012abd 	.word	0x08012abd
 8012e08:	006ddd00 	.word	0x006ddd00

08012e0c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	4603      	mov	r3, r0
 8012e14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012e16:	2040      	movs	r0, #64	; 0x40
 8012e18:	f7ff ff74 	bl	8012d04 <tcp_alloc>
 8012e1c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3710      	adds	r7, #16
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b083      	sub	sp, #12
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	683a      	ldr	r2, [r7, #0]
 8012e3c:	611a      	str	r2, [r3, #16]
  }
}
 8012e3e:	bf00      	nop
 8012e40:	370c      	adds	r7, #12
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr
	...

08012e4c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d00e      	beq.n	8012e7a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	7d1b      	ldrb	r3, [r3, #20]
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d106      	bne.n	8012e72 <tcp_recv+0x26>
 8012e64:	4b07      	ldr	r3, [pc, #28]	; (8012e84 <tcp_recv+0x38>)
 8012e66:	f240 72df 	movw	r2, #2015	; 0x7df
 8012e6a:	4907      	ldr	r1, [pc, #28]	; (8012e88 <tcp_recv+0x3c>)
 8012e6c:	4807      	ldr	r0, [pc, #28]	; (8012e8c <tcp_recv+0x40>)
 8012e6e:	f008 fc83 	bl	801b778 <printf>
    pcb->recv = recv;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	683a      	ldr	r2, [r7, #0]
 8012e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8012e7a:	bf00      	nop
 8012e7c:	3708      	adds	r7, #8
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	08025f10 	.word	0x08025f10
 8012e88:	080264ac 	.word	0x080264ac
 8012e8c:	08025f54 	.word	0x08025f54

08012e90 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d00e      	beq.n	8012ebe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	7d1b      	ldrb	r3, [r3, #20]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d106      	bne.n	8012eb6 <tcp_sent+0x26>
 8012ea8:	4b07      	ldr	r3, [pc, #28]	; (8012ec8 <tcp_sent+0x38>)
 8012eaa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8012eae:	4907      	ldr	r1, [pc, #28]	; (8012ecc <tcp_sent+0x3c>)
 8012eb0:	4807      	ldr	r0, [pc, #28]	; (8012ed0 <tcp_sent+0x40>)
 8012eb2:	f008 fc61 	bl	801b778 <printf>
    pcb->sent = sent;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	683a      	ldr	r2, [r7, #0]
 8012eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012ebe:	bf00      	nop
 8012ec0:	3708      	adds	r7, #8
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	08025f10 	.word	0x08025f10
 8012ecc:	080264d4 	.word	0x080264d4
 8012ed0:	08025f54 	.word	0x08025f54

08012ed4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d00e      	beq.n	8012f02 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	7d1b      	ldrb	r3, [r3, #20]
 8012ee8:	2b01      	cmp	r3, #1
 8012eea:	d106      	bne.n	8012efa <tcp_err+0x26>
 8012eec:	4b07      	ldr	r3, [pc, #28]	; (8012f0c <tcp_err+0x38>)
 8012eee:	f640 020d 	movw	r2, #2061	; 0x80d
 8012ef2:	4907      	ldr	r1, [pc, #28]	; (8012f10 <tcp_err+0x3c>)
 8012ef4:	4807      	ldr	r0, [pc, #28]	; (8012f14 <tcp_err+0x40>)
 8012ef6:	f008 fc3f 	bl	801b778 <printf>
    pcb->errf = err;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	683a      	ldr	r2, [r7, #0]
 8012efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8012f02:	bf00      	nop
 8012f04:	3708      	adds	r7, #8
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	08025f10 	.word	0x08025f10
 8012f10:	080264fc 	.word	0x080264fc
 8012f14:	08025f54 	.word	0x08025f54

08012f18 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b085      	sub	sp, #20
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d008      	beq.n	8012f3a <tcp_accept+0x22>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	7d1b      	ldrb	r3, [r3, #20]
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	d104      	bne.n	8012f3a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	683a      	ldr	r2, [r7, #0]
 8012f38:	619a      	str	r2, [r3, #24]
  }
}
 8012f3a:	bf00      	nop
 8012f3c:	3714      	adds	r7, #20
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr
	...

08012f48 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	4613      	mov	r3, r2
 8012f54:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d107      	bne.n	8012f6c <tcp_poll+0x24>
 8012f5c:	4b0e      	ldr	r3, [pc, #56]	; (8012f98 <tcp_poll+0x50>)
 8012f5e:	f640 023d 	movw	r2, #2109	; 0x83d
 8012f62:	490e      	ldr	r1, [pc, #56]	; (8012f9c <tcp_poll+0x54>)
 8012f64:	480e      	ldr	r0, [pc, #56]	; (8012fa0 <tcp_poll+0x58>)
 8012f66:	f008 fc07 	bl	801b778 <printf>
 8012f6a:	e011      	b.n	8012f90 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	7d1b      	ldrb	r3, [r3, #20]
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d106      	bne.n	8012f82 <tcp_poll+0x3a>
 8012f74:	4b08      	ldr	r3, [pc, #32]	; (8012f98 <tcp_poll+0x50>)
 8012f76:	f640 023e 	movw	r2, #2110	; 0x83e
 8012f7a:	490a      	ldr	r1, [pc, #40]	; (8012fa4 <tcp_poll+0x5c>)
 8012f7c:	4808      	ldr	r0, [pc, #32]	; (8012fa0 <tcp_poll+0x58>)
 8012f7e:	f008 fbfb 	bl	801b778 <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	68ba      	ldr	r2, [r7, #8]
 8012f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	79fa      	ldrb	r2, [r7, #7]
 8012f8e:	775a      	strb	r2, [r3, #29]
}
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	08025f10 	.word	0x08025f10
 8012f9c:	08026524 	.word	0x08026524
 8012fa0:	08025f54 	.word	0x08025f54
 8012fa4:	0802653c 	.word	0x0802653c

08012fa8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d107      	bne.n	8012fc6 <tcp_pcb_purge+0x1e>
 8012fb6:	4b21      	ldr	r3, [pc, #132]	; (801303c <tcp_pcb_purge+0x94>)
 8012fb8:	f640 0251 	movw	r2, #2129	; 0x851
 8012fbc:	4920      	ldr	r1, [pc, #128]	; (8013040 <tcp_pcb_purge+0x98>)
 8012fbe:	4821      	ldr	r0, [pc, #132]	; (8013044 <tcp_pcb_purge+0x9c>)
 8012fc0:	f008 fbda 	bl	801b778 <printf>
 8012fc4:	e037      	b.n	8013036 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	7d1b      	ldrb	r3, [r3, #20]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d033      	beq.n	8013036 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012fd2:	2b0a      	cmp	r3, #10
 8012fd4:	d02f      	beq.n	8013036 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d02b      	beq.n	8013036 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d007      	beq.n	8012ff6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fe f85e 	bl	80110ac <pbuf_free>
      pcb->refused_data = NULL;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d002      	beq.n	8013004 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 f986 	bl	8013310 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801300a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013010:	4618      	mov	r0, r3
 8013012:	f7ff fcdb 	bl	80129cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801301a:	4618      	mov	r0, r3
 801301c:	f7ff fcd6 	bl	80129cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2200      	movs	r2, #0
 8013024:	66da      	str	r2, [r3, #108]	; 0x6c
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2200      	movs	r2, #0
 8013032:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013036:	3708      	adds	r7, #8
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	08025f10 	.word	0x08025f10
 8013040:	0802655c 	.word	0x0802655c
 8013044:	08025f54 	.word	0x08025f54

08013048 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d106      	bne.n	8013066 <tcp_pcb_remove+0x1e>
 8013058:	4b3e      	ldr	r3, [pc, #248]	; (8013154 <tcp_pcb_remove+0x10c>)
 801305a:	f640 0283 	movw	r2, #2179	; 0x883
 801305e:	493e      	ldr	r1, [pc, #248]	; (8013158 <tcp_pcb_remove+0x110>)
 8013060:	483e      	ldr	r0, [pc, #248]	; (801315c <tcp_pcb_remove+0x114>)
 8013062:	f008 fb89 	bl	801b778 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d106      	bne.n	801307a <tcp_pcb_remove+0x32>
 801306c:	4b39      	ldr	r3, [pc, #228]	; (8013154 <tcp_pcb_remove+0x10c>)
 801306e:	f640 0284 	movw	r2, #2180	; 0x884
 8013072:	493b      	ldr	r1, [pc, #236]	; (8013160 <tcp_pcb_remove+0x118>)
 8013074:	4839      	ldr	r0, [pc, #228]	; (801315c <tcp_pcb_remove+0x114>)
 8013076:	f008 fb7f 	bl	801b778 <printf>

  TCP_RMV(pcblist, pcb);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	683a      	ldr	r2, [r7, #0]
 8013080:	429a      	cmp	r2, r3
 8013082:	d105      	bne.n	8013090 <tcp_pcb_remove+0x48>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	68da      	ldr	r2, [r3, #12]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	601a      	str	r2, [r3, #0]
 801308e:	e013      	b.n	80130b8 <tcp_pcb_remove+0x70>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	60fb      	str	r3, [r7, #12]
 8013096:	e00c      	b.n	80130b2 <tcp_pcb_remove+0x6a>
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	683a      	ldr	r2, [r7, #0]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d104      	bne.n	80130ac <tcp_pcb_remove+0x64>
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	68da      	ldr	r2, [r3, #12]
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	60da      	str	r2, [r3, #12]
 80130aa:	e005      	b.n	80130b8 <tcp_pcb_remove+0x70>
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	60fb      	str	r3, [r7, #12]
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d1ef      	bne.n	8013098 <tcp_pcb_remove+0x50>
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	2200      	movs	r2, #0
 80130bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80130be:	6838      	ldr	r0, [r7, #0]
 80130c0:	f7ff ff72 	bl	8012fa8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	7d1b      	ldrb	r3, [r3, #20]
 80130c8:	2b0a      	cmp	r3, #10
 80130ca:	d013      	beq.n	80130f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80130d0:	2b01      	cmp	r3, #1
 80130d2:	d00f      	beq.n	80130f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	8b5b      	ldrh	r3, [r3, #26]
 80130d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d009      	beq.n	80130f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	8b5b      	ldrh	r3, [r3, #26]
 80130e4:	f043 0302 	orr.w	r3, r3, #2
 80130e8:	b29a      	uxth	r2, r3
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80130ee:	6838      	ldr	r0, [r7, #0]
 80130f0:	f003 fbc2 	bl	8016878 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	7d1b      	ldrb	r3, [r3, #20]
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d020      	beq.n	801313e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013100:	2b00      	cmp	r3, #0
 8013102:	d006      	beq.n	8013112 <tcp_pcb_remove+0xca>
 8013104:	4b13      	ldr	r3, [pc, #76]	; (8013154 <tcp_pcb_remove+0x10c>)
 8013106:	f640 0293 	movw	r2, #2195	; 0x893
 801310a:	4916      	ldr	r1, [pc, #88]	; (8013164 <tcp_pcb_remove+0x11c>)
 801310c:	4813      	ldr	r0, [pc, #76]	; (801315c <tcp_pcb_remove+0x114>)
 801310e:	f008 fb33 	bl	801b778 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013116:	2b00      	cmp	r3, #0
 8013118:	d006      	beq.n	8013128 <tcp_pcb_remove+0xe0>
 801311a:	4b0e      	ldr	r3, [pc, #56]	; (8013154 <tcp_pcb_remove+0x10c>)
 801311c:	f640 0294 	movw	r2, #2196	; 0x894
 8013120:	4911      	ldr	r1, [pc, #68]	; (8013168 <tcp_pcb_remove+0x120>)
 8013122:	480e      	ldr	r0, [pc, #56]	; (801315c <tcp_pcb_remove+0x114>)
 8013124:	f008 fb28 	bl	801b778 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801312c:	2b00      	cmp	r3, #0
 801312e:	d006      	beq.n	801313e <tcp_pcb_remove+0xf6>
 8013130:	4b08      	ldr	r3, [pc, #32]	; (8013154 <tcp_pcb_remove+0x10c>)
 8013132:	f640 0296 	movw	r2, #2198	; 0x896
 8013136:	490d      	ldr	r1, [pc, #52]	; (801316c <tcp_pcb_remove+0x124>)
 8013138:	4808      	ldr	r0, [pc, #32]	; (801315c <tcp_pcb_remove+0x114>)
 801313a:	f008 fb1d 	bl	801b778 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	2200      	movs	r2, #0
 8013142:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	2200      	movs	r2, #0
 8013148:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801314a:	bf00      	nop
 801314c:	3710      	adds	r7, #16
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	08025f10 	.word	0x08025f10
 8013158:	08026578 	.word	0x08026578
 801315c:	08025f54 	.word	0x08025f54
 8013160:	08026594 	.word	0x08026594
 8013164:	080265b4 	.word	0x080265b4
 8013168:	080265cc 	.word	0x080265cc
 801316c:	080265e8 	.word	0x080265e8

08013170 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d106      	bne.n	801318c <tcp_next_iss+0x1c>
 801317e:	4b0a      	ldr	r3, [pc, #40]	; (80131a8 <tcp_next_iss+0x38>)
 8013180:	f640 02af 	movw	r2, #2223	; 0x8af
 8013184:	4909      	ldr	r1, [pc, #36]	; (80131ac <tcp_next_iss+0x3c>)
 8013186:	480a      	ldr	r0, [pc, #40]	; (80131b0 <tcp_next_iss+0x40>)
 8013188:	f008 faf6 	bl	801b778 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801318c:	4b09      	ldr	r3, [pc, #36]	; (80131b4 <tcp_next_iss+0x44>)
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	4b09      	ldr	r3, [pc, #36]	; (80131b8 <tcp_next_iss+0x48>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	4413      	add	r3, r2
 8013196:	4a07      	ldr	r2, [pc, #28]	; (80131b4 <tcp_next_iss+0x44>)
 8013198:	6013      	str	r3, [r2, #0]
  return iss;
 801319a:	4b06      	ldr	r3, [pc, #24]	; (80131b4 <tcp_next_iss+0x44>)
 801319c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}
 80131a6:	bf00      	nop
 80131a8:	08025f10 	.word	0x08025f10
 80131ac:	08026600 	.word	0x08026600
 80131b0:	08025f54 	.word	0x08025f54
 80131b4:	20000030 	.word	0x20000030
 80131b8:	2000be44 	.word	0x2000be44

080131bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b086      	sub	sp, #24
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	4603      	mov	r3, r0
 80131c4:	60b9      	str	r1, [r7, #8]
 80131c6:	607a      	str	r2, [r7, #4]
 80131c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d106      	bne.n	80131de <tcp_eff_send_mss_netif+0x22>
 80131d0:	4b14      	ldr	r3, [pc, #80]	; (8013224 <tcp_eff_send_mss_netif+0x68>)
 80131d2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80131d6:	4914      	ldr	r1, [pc, #80]	; (8013228 <tcp_eff_send_mss_netif+0x6c>)
 80131d8:	4814      	ldr	r0, [pc, #80]	; (801322c <tcp_eff_send_mss_netif+0x70>)
 80131da:	f008 facd 	bl	801b778 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d101      	bne.n	80131e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80131e4:	89fb      	ldrh	r3, [r7, #14]
 80131e6:	e019      	b.n	801321c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	8c1b      	ldrh	r3, [r3, #32]
 80131ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80131ee:	8afb      	ldrh	r3, [r7, #22]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d012      	beq.n	801321a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80131f4:	2328      	movs	r3, #40	; 0x28
 80131f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80131f8:	8afa      	ldrh	r2, [r7, #22]
 80131fa:	8abb      	ldrh	r3, [r7, #20]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d904      	bls.n	801320a <tcp_eff_send_mss_netif+0x4e>
 8013200:	8afa      	ldrh	r2, [r7, #22]
 8013202:	8abb      	ldrh	r3, [r7, #20]
 8013204:	1ad3      	subs	r3, r2, r3
 8013206:	b29b      	uxth	r3, r3
 8013208:	e000      	b.n	801320c <tcp_eff_send_mss_netif+0x50>
 801320a:	2300      	movs	r3, #0
 801320c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801320e:	8a7a      	ldrh	r2, [r7, #18]
 8013210:	89fb      	ldrh	r3, [r7, #14]
 8013212:	4293      	cmp	r3, r2
 8013214:	bf28      	it	cs
 8013216:	4613      	movcs	r3, r2
 8013218:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801321a:	89fb      	ldrh	r3, [r7, #14]
}
 801321c:	4618      	mov	r0, r3
 801321e:	3718      	adds	r7, #24
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	08025f10 	.word	0x08025f10
 8013228:	0802661c 	.word	0x0802661c
 801322c:	08025f54 	.word	0x08025f54

08013230 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d119      	bne.n	8013278 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013244:	4b10      	ldr	r3, [pc, #64]	; (8013288 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013246:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801324a:	4910      	ldr	r1, [pc, #64]	; (801328c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801324c:	4810      	ldr	r0, [pc, #64]	; (8013290 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801324e:	f008 fa93 	bl	801b778 <printf>

  while (pcb != NULL) {
 8013252:	e011      	b.n	8013278 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	429a      	cmp	r2, r3
 801325e:	d108      	bne.n	8013272 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	68db      	ldr	r3, [r3, #12]
 8013264:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013266:	68f8      	ldr	r0, [r7, #12]
 8013268:	f7fe fd20 	bl	8011cac <tcp_abort>
      pcb = next;
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	60fb      	str	r3, [r7, #12]
 8013270:	e002      	b.n	8013278 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	68db      	ldr	r3, [r3, #12]
 8013276:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d1ea      	bne.n	8013254 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801327e:	bf00      	nop
 8013280:	bf00      	nop
 8013282:	3710      	adds	r7, #16
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	08025f10 	.word	0x08025f10
 801328c:	08026644 	.word	0x08026644
 8013290:	08025f54 	.word	0x08025f54

08013294 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b084      	sub	sp, #16
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d02a      	beq.n	80132fa <tcp_netif_ip_addr_changed+0x66>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d026      	beq.n	80132fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80132ac:	4b15      	ldr	r3, [pc, #84]	; (8013304 <tcp_netif_ip_addr_changed+0x70>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	4619      	mov	r1, r3
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f7ff ffbc 	bl	8013230 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80132b8:	4b13      	ldr	r3, [pc, #76]	; (8013308 <tcp_netif_ip_addr_changed+0x74>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	4619      	mov	r1, r3
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f7ff ffb6 	bl	8013230 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d017      	beq.n	80132fa <tcp_netif_ip_addr_changed+0x66>
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d013      	beq.n	80132fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80132d2:	4b0e      	ldr	r3, [pc, #56]	; (801330c <tcp_netif_ip_addr_changed+0x78>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	60fb      	str	r3, [r7, #12]
 80132d8:	e00c      	b.n	80132f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	681a      	ldr	r2, [r3, #0]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d103      	bne.n	80132ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	681a      	ldr	r2, [r3, #0]
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	68db      	ldr	r3, [r3, #12]
 80132f2:	60fb      	str	r3, [r7, #12]
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d1ef      	bne.n	80132da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80132fa:	bf00      	nop
 80132fc:	3710      	adds	r7, #16
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}
 8013302:	bf00      	nop
 8013304:	2000be40 	.word	0x2000be40
 8013308:	2000be4c 	.word	0x2000be4c
 801330c:	2000be48 	.word	0x2000be48

08013310 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801331c:	2b00      	cmp	r3, #0
 801331e:	d007      	beq.n	8013330 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013324:	4618      	mov	r0, r3
 8013326:	f7ff fb51 	bl	80129cc <tcp_segs_free>
    pcb->ooseq = NULL;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2200      	movs	r2, #0
 801332e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013330:	bf00      	nop
 8013332:	3708      	adds	r7, #8
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013338:	b590      	push	{r4, r7, lr}
 801333a:	b08d      	sub	sp, #52	; 0x34
 801333c:	af04      	add	r7, sp, #16
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d105      	bne.n	8013354 <tcp_input+0x1c>
 8013348:	4b9b      	ldr	r3, [pc, #620]	; (80135b8 <tcp_input+0x280>)
 801334a:	2283      	movs	r2, #131	; 0x83
 801334c:	499b      	ldr	r1, [pc, #620]	; (80135bc <tcp_input+0x284>)
 801334e:	489c      	ldr	r0, [pc, #624]	; (80135c0 <tcp_input+0x288>)
 8013350:	f008 fa12 	bl	801b778 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	4a9a      	ldr	r2, [pc, #616]	; (80135c4 <tcp_input+0x28c>)
 801335a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	895b      	ldrh	r3, [r3, #10]
 8013360:	2b13      	cmp	r3, #19
 8013362:	f240 83c4 	bls.w	8013aee <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013366:	4b98      	ldr	r3, [pc, #608]	; (80135c8 <tcp_input+0x290>)
 8013368:	695b      	ldr	r3, [r3, #20]
 801336a:	4a97      	ldr	r2, [pc, #604]	; (80135c8 <tcp_input+0x290>)
 801336c:	6812      	ldr	r2, [r2, #0]
 801336e:	4611      	mov	r1, r2
 8013370:	4618      	mov	r0, r3
 8013372:	f006 fbcb 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	f040 83ba 	bne.w	8013af2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801337e:	4b92      	ldr	r3, [pc, #584]	; (80135c8 <tcp_input+0x290>)
 8013380:	695b      	ldr	r3, [r3, #20]
 8013382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013386:	2be0      	cmp	r3, #224	; 0xe0
 8013388:	f000 83b3 	beq.w	8013af2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801338c:	4b8d      	ldr	r3, [pc, #564]	; (80135c4 <tcp_input+0x28c>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	899b      	ldrh	r3, [r3, #12]
 8013392:	b29b      	uxth	r3, r3
 8013394:	4618      	mov	r0, r3
 8013396:	f7fc faf7 	bl	800f988 <lwip_htons>
 801339a:	4603      	mov	r3, r0
 801339c:	0b1b      	lsrs	r3, r3, #12
 801339e:	b29b      	uxth	r3, r3
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80133a6:	7cbb      	ldrb	r3, [r7, #18]
 80133a8:	2b13      	cmp	r3, #19
 80133aa:	f240 83a4 	bls.w	8013af6 <tcp_input+0x7be>
 80133ae:	7cbb      	ldrb	r3, [r7, #18]
 80133b0:	b29a      	uxth	r2, r3
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	891b      	ldrh	r3, [r3, #8]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	f200 839d 	bhi.w	8013af6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80133bc:	7cbb      	ldrb	r3, [r7, #18]
 80133be:	b29b      	uxth	r3, r3
 80133c0:	3b14      	subs	r3, #20
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	4b81      	ldr	r3, [pc, #516]	; (80135cc <tcp_input+0x294>)
 80133c6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80133c8:	4b81      	ldr	r3, [pc, #516]	; (80135d0 <tcp_input+0x298>)
 80133ca:	2200      	movs	r2, #0
 80133cc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	895a      	ldrh	r2, [r3, #10]
 80133d2:	7cbb      	ldrb	r3, [r7, #18]
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d309      	bcc.n	80133ee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80133da:	4b7c      	ldr	r3, [pc, #496]	; (80135cc <tcp_input+0x294>)
 80133dc:	881a      	ldrh	r2, [r3, #0]
 80133de:	4b7d      	ldr	r3, [pc, #500]	; (80135d4 <tcp_input+0x29c>)
 80133e0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80133e2:	7cbb      	ldrb	r3, [r7, #18]
 80133e4:	4619      	mov	r1, r3
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f7fd fdda 	bl	8010fa0 <pbuf_remove_header>
 80133ec:	e04e      	b.n	801348c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d105      	bne.n	8013402 <tcp_input+0xca>
 80133f6:	4b70      	ldr	r3, [pc, #448]	; (80135b8 <tcp_input+0x280>)
 80133f8:	22c2      	movs	r2, #194	; 0xc2
 80133fa:	4977      	ldr	r1, [pc, #476]	; (80135d8 <tcp_input+0x2a0>)
 80133fc:	4870      	ldr	r0, [pc, #448]	; (80135c0 <tcp_input+0x288>)
 80133fe:	f008 f9bb 	bl	801b778 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013402:	2114      	movs	r1, #20
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7fd fdcb 	bl	8010fa0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	895a      	ldrh	r2, [r3, #10]
 801340e:	4b71      	ldr	r3, [pc, #452]	; (80135d4 <tcp_input+0x29c>)
 8013410:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013412:	4b6e      	ldr	r3, [pc, #440]	; (80135cc <tcp_input+0x294>)
 8013414:	881a      	ldrh	r2, [r3, #0]
 8013416:	4b6f      	ldr	r3, [pc, #444]	; (80135d4 <tcp_input+0x29c>)
 8013418:	881b      	ldrh	r3, [r3, #0]
 801341a:	1ad3      	subs	r3, r2, r3
 801341c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801341e:	4b6d      	ldr	r3, [pc, #436]	; (80135d4 <tcp_input+0x29c>)
 8013420:	881b      	ldrh	r3, [r3, #0]
 8013422:	4619      	mov	r1, r3
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7fd fdbb 	bl	8010fa0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	895b      	ldrh	r3, [r3, #10]
 8013430:	8a3a      	ldrh	r2, [r7, #16]
 8013432:	429a      	cmp	r2, r3
 8013434:	f200 8361 	bhi.w	8013afa <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	685b      	ldr	r3, [r3, #4]
 801343e:	4a64      	ldr	r2, [pc, #400]	; (80135d0 <tcp_input+0x298>)
 8013440:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	8a3a      	ldrh	r2, [r7, #16]
 8013448:	4611      	mov	r1, r2
 801344a:	4618      	mov	r0, r3
 801344c:	f7fd fda8 	bl	8010fa0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	891a      	ldrh	r2, [r3, #8]
 8013454:	8a3b      	ldrh	r3, [r7, #16]
 8013456:	1ad3      	subs	r3, r2, r3
 8013458:	b29a      	uxth	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	895b      	ldrh	r3, [r3, #10]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d005      	beq.n	8013472 <tcp_input+0x13a>
 8013466:	4b54      	ldr	r3, [pc, #336]	; (80135b8 <tcp_input+0x280>)
 8013468:	22df      	movs	r2, #223	; 0xdf
 801346a:	495c      	ldr	r1, [pc, #368]	; (80135dc <tcp_input+0x2a4>)
 801346c:	4854      	ldr	r0, [pc, #336]	; (80135c0 <tcp_input+0x288>)
 801346e:	f008 f983 	bl	801b778 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	891a      	ldrh	r2, [r3, #8]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	891b      	ldrh	r3, [r3, #8]
 801347c:	429a      	cmp	r2, r3
 801347e:	d005      	beq.n	801348c <tcp_input+0x154>
 8013480:	4b4d      	ldr	r3, [pc, #308]	; (80135b8 <tcp_input+0x280>)
 8013482:	22e0      	movs	r2, #224	; 0xe0
 8013484:	4956      	ldr	r1, [pc, #344]	; (80135e0 <tcp_input+0x2a8>)
 8013486:	484e      	ldr	r0, [pc, #312]	; (80135c0 <tcp_input+0x288>)
 8013488:	f008 f976 	bl	801b778 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801348c:	4b4d      	ldr	r3, [pc, #308]	; (80135c4 <tcp_input+0x28c>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	881b      	ldrh	r3, [r3, #0]
 8013492:	b29b      	uxth	r3, r3
 8013494:	4a4b      	ldr	r2, [pc, #300]	; (80135c4 <tcp_input+0x28c>)
 8013496:	6814      	ldr	r4, [r2, #0]
 8013498:	4618      	mov	r0, r3
 801349a:	f7fc fa75 	bl	800f988 <lwip_htons>
 801349e:	4603      	mov	r3, r0
 80134a0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80134a2:	4b48      	ldr	r3, [pc, #288]	; (80135c4 <tcp_input+0x28c>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	885b      	ldrh	r3, [r3, #2]
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	4a46      	ldr	r2, [pc, #280]	; (80135c4 <tcp_input+0x28c>)
 80134ac:	6814      	ldr	r4, [r2, #0]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7fc fa6a 	bl	800f988 <lwip_htons>
 80134b4:	4603      	mov	r3, r0
 80134b6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80134b8:	4b42      	ldr	r3, [pc, #264]	; (80135c4 <tcp_input+0x28c>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	4a41      	ldr	r2, [pc, #260]	; (80135c4 <tcp_input+0x28c>)
 80134c0:	6814      	ldr	r4, [r2, #0]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7fc fa75 	bl	800f9b2 <lwip_htonl>
 80134c8:	4603      	mov	r3, r0
 80134ca:	6063      	str	r3, [r4, #4]
 80134cc:	6863      	ldr	r3, [r4, #4]
 80134ce:	4a45      	ldr	r2, [pc, #276]	; (80135e4 <tcp_input+0x2ac>)
 80134d0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80134d2:	4b3c      	ldr	r3, [pc, #240]	; (80135c4 <tcp_input+0x28c>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	4a3a      	ldr	r2, [pc, #232]	; (80135c4 <tcp_input+0x28c>)
 80134da:	6814      	ldr	r4, [r2, #0]
 80134dc:	4618      	mov	r0, r3
 80134de:	f7fc fa68 	bl	800f9b2 <lwip_htonl>
 80134e2:	4603      	mov	r3, r0
 80134e4:	60a3      	str	r3, [r4, #8]
 80134e6:	68a3      	ldr	r3, [r4, #8]
 80134e8:	4a3f      	ldr	r2, [pc, #252]	; (80135e8 <tcp_input+0x2b0>)
 80134ea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80134ec:	4b35      	ldr	r3, [pc, #212]	; (80135c4 <tcp_input+0x28c>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	89db      	ldrh	r3, [r3, #14]
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	4a33      	ldr	r2, [pc, #204]	; (80135c4 <tcp_input+0x28c>)
 80134f6:	6814      	ldr	r4, [r2, #0]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fc fa45 	bl	800f988 <lwip_htons>
 80134fe:	4603      	mov	r3, r0
 8013500:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013502:	4b30      	ldr	r3, [pc, #192]	; (80135c4 <tcp_input+0x28c>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	899b      	ldrh	r3, [r3, #12]
 8013508:	b29b      	uxth	r3, r3
 801350a:	4618      	mov	r0, r3
 801350c:	f7fc fa3c 	bl	800f988 <lwip_htons>
 8013510:	4603      	mov	r3, r0
 8013512:	b2db      	uxtb	r3, r3
 8013514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013518:	b2da      	uxtb	r2, r3
 801351a:	4b34      	ldr	r3, [pc, #208]	; (80135ec <tcp_input+0x2b4>)
 801351c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	891a      	ldrh	r2, [r3, #8]
 8013522:	4b33      	ldr	r3, [pc, #204]	; (80135f0 <tcp_input+0x2b8>)
 8013524:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013526:	4b31      	ldr	r3, [pc, #196]	; (80135ec <tcp_input+0x2b4>)
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	f003 0303 	and.w	r3, r3, #3
 801352e:	2b00      	cmp	r3, #0
 8013530:	d00c      	beq.n	801354c <tcp_input+0x214>
    tcplen++;
 8013532:	4b2f      	ldr	r3, [pc, #188]	; (80135f0 <tcp_input+0x2b8>)
 8013534:	881b      	ldrh	r3, [r3, #0]
 8013536:	3301      	adds	r3, #1
 8013538:	b29a      	uxth	r2, r3
 801353a:	4b2d      	ldr	r3, [pc, #180]	; (80135f0 <tcp_input+0x2b8>)
 801353c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	891a      	ldrh	r2, [r3, #8]
 8013542:	4b2b      	ldr	r3, [pc, #172]	; (80135f0 <tcp_input+0x2b8>)
 8013544:	881b      	ldrh	r3, [r3, #0]
 8013546:	429a      	cmp	r2, r3
 8013548:	f200 82d9 	bhi.w	8013afe <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801354c:	2300      	movs	r3, #0
 801354e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013550:	4b28      	ldr	r3, [pc, #160]	; (80135f4 <tcp_input+0x2bc>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	61fb      	str	r3, [r7, #28]
 8013556:	e09d      	b.n	8013694 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013558:	69fb      	ldr	r3, [r7, #28]
 801355a:	7d1b      	ldrb	r3, [r3, #20]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d105      	bne.n	801356c <tcp_input+0x234>
 8013560:	4b15      	ldr	r3, [pc, #84]	; (80135b8 <tcp_input+0x280>)
 8013562:	22fb      	movs	r2, #251	; 0xfb
 8013564:	4924      	ldr	r1, [pc, #144]	; (80135f8 <tcp_input+0x2c0>)
 8013566:	4816      	ldr	r0, [pc, #88]	; (80135c0 <tcp_input+0x288>)
 8013568:	f008 f906 	bl	801b778 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	7d1b      	ldrb	r3, [r3, #20]
 8013570:	2b0a      	cmp	r3, #10
 8013572:	d105      	bne.n	8013580 <tcp_input+0x248>
 8013574:	4b10      	ldr	r3, [pc, #64]	; (80135b8 <tcp_input+0x280>)
 8013576:	22fc      	movs	r2, #252	; 0xfc
 8013578:	4920      	ldr	r1, [pc, #128]	; (80135fc <tcp_input+0x2c4>)
 801357a:	4811      	ldr	r0, [pc, #68]	; (80135c0 <tcp_input+0x288>)
 801357c:	f008 f8fc 	bl	801b778 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	7d1b      	ldrb	r3, [r3, #20]
 8013584:	2b01      	cmp	r3, #1
 8013586:	d105      	bne.n	8013594 <tcp_input+0x25c>
 8013588:	4b0b      	ldr	r3, [pc, #44]	; (80135b8 <tcp_input+0x280>)
 801358a:	22fd      	movs	r2, #253	; 0xfd
 801358c:	491c      	ldr	r1, [pc, #112]	; (8013600 <tcp_input+0x2c8>)
 801358e:	480c      	ldr	r0, [pc, #48]	; (80135c0 <tcp_input+0x288>)
 8013590:	f008 f8f2 	bl	801b778 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	7a1b      	ldrb	r3, [r3, #8]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d033      	beq.n	8013604 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801359c:	69fb      	ldr	r3, [r7, #28]
 801359e:	7a1a      	ldrb	r2, [r3, #8]
 80135a0:	4b09      	ldr	r3, [pc, #36]	; (80135c8 <tcp_input+0x290>)
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80135a8:	3301      	adds	r3, #1
 80135aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d029      	beq.n	8013604 <tcp_input+0x2cc>
      prev = pcb;
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	61bb      	str	r3, [r7, #24]
      continue;
 80135b4:	e06b      	b.n	801368e <tcp_input+0x356>
 80135b6:	bf00      	nop
 80135b8:	08026678 	.word	0x08026678
 80135bc:	080266ac 	.word	0x080266ac
 80135c0:	080266c4 	.word	0x080266c4
 80135c4:	20004f18 	.word	0x20004f18
 80135c8:	2000872c 	.word	0x2000872c
 80135cc:	20004f1c 	.word	0x20004f1c
 80135d0:	20004f20 	.word	0x20004f20
 80135d4:	20004f1e 	.word	0x20004f1e
 80135d8:	080266ec 	.word	0x080266ec
 80135dc:	080266fc 	.word	0x080266fc
 80135e0:	08026708 	.word	0x08026708
 80135e4:	20004f28 	.word	0x20004f28
 80135e8:	20004f2c 	.word	0x20004f2c
 80135ec:	20004f34 	.word	0x20004f34
 80135f0:	20004f32 	.word	0x20004f32
 80135f4:	2000be40 	.word	0x2000be40
 80135f8:	08026728 	.word	0x08026728
 80135fc:	08026750 	.word	0x08026750
 8013600:	0802677c 	.word	0x0802677c
    }

    if (pcb->remote_port == tcphdr->src &&
 8013604:	69fb      	ldr	r3, [r7, #28]
 8013606:	8b1a      	ldrh	r2, [r3, #24]
 8013608:	4b94      	ldr	r3, [pc, #592]	; (801385c <tcp_input+0x524>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	881b      	ldrh	r3, [r3, #0]
 801360e:	b29b      	uxth	r3, r3
 8013610:	429a      	cmp	r2, r3
 8013612:	d13a      	bne.n	801368a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	8ada      	ldrh	r2, [r3, #22]
 8013618:	4b90      	ldr	r3, [pc, #576]	; (801385c <tcp_input+0x524>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	885b      	ldrh	r3, [r3, #2]
 801361e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013620:	429a      	cmp	r2, r3
 8013622:	d132      	bne.n	801368a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013624:	69fb      	ldr	r3, [r7, #28]
 8013626:	685a      	ldr	r2, [r3, #4]
 8013628:	4b8d      	ldr	r3, [pc, #564]	; (8013860 <tcp_input+0x528>)
 801362a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801362c:	429a      	cmp	r2, r3
 801362e:	d12c      	bne.n	801368a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	4b8a      	ldr	r3, [pc, #552]	; (8013860 <tcp_input+0x528>)
 8013636:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013638:	429a      	cmp	r2, r3
 801363a:	d126      	bne.n	801368a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801363c:	69fb      	ldr	r3, [r7, #28]
 801363e:	68db      	ldr	r3, [r3, #12]
 8013640:	69fa      	ldr	r2, [r7, #28]
 8013642:	429a      	cmp	r2, r3
 8013644:	d106      	bne.n	8013654 <tcp_input+0x31c>
 8013646:	4b87      	ldr	r3, [pc, #540]	; (8013864 <tcp_input+0x52c>)
 8013648:	f240 120d 	movw	r2, #269	; 0x10d
 801364c:	4986      	ldr	r1, [pc, #536]	; (8013868 <tcp_input+0x530>)
 801364e:	4887      	ldr	r0, [pc, #540]	; (801386c <tcp_input+0x534>)
 8013650:	f008 f892 	bl	801b778 <printf>
      if (prev != NULL) {
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00a      	beq.n	8013670 <tcp_input+0x338>
        prev->next = pcb->next;
 801365a:	69fb      	ldr	r3, [r7, #28]
 801365c:	68da      	ldr	r2, [r3, #12]
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013662:	4b83      	ldr	r3, [pc, #524]	; (8013870 <tcp_input+0x538>)
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801366a:	4a81      	ldr	r2, [pc, #516]	; (8013870 <tcp_input+0x538>)
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	69fa      	ldr	r2, [r7, #28]
 8013676:	429a      	cmp	r2, r3
 8013678:	d111      	bne.n	801369e <tcp_input+0x366>
 801367a:	4b7a      	ldr	r3, [pc, #488]	; (8013864 <tcp_input+0x52c>)
 801367c:	f240 1215 	movw	r2, #277	; 0x115
 8013680:	497c      	ldr	r1, [pc, #496]	; (8013874 <tcp_input+0x53c>)
 8013682:	487a      	ldr	r0, [pc, #488]	; (801386c <tcp_input+0x534>)
 8013684:	f008 f878 	bl	801b778 <printf>
      break;
 8013688:	e009      	b.n	801369e <tcp_input+0x366>
    }
    prev = pcb;
 801368a:	69fb      	ldr	r3, [r7, #28]
 801368c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801368e:	69fb      	ldr	r3, [r7, #28]
 8013690:	68db      	ldr	r3, [r3, #12]
 8013692:	61fb      	str	r3, [r7, #28]
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	2b00      	cmp	r3, #0
 8013698:	f47f af5e 	bne.w	8013558 <tcp_input+0x220>
 801369c:	e000      	b.n	80136a0 <tcp_input+0x368>
      break;
 801369e:	bf00      	nop
  }

  if (pcb == NULL) {
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f040 8095 	bne.w	80137d2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80136a8:	4b73      	ldr	r3, [pc, #460]	; (8013878 <tcp_input+0x540>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	61fb      	str	r3, [r7, #28]
 80136ae:	e03f      	b.n	8013730 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80136b0:	69fb      	ldr	r3, [r7, #28]
 80136b2:	7d1b      	ldrb	r3, [r3, #20]
 80136b4:	2b0a      	cmp	r3, #10
 80136b6:	d006      	beq.n	80136c6 <tcp_input+0x38e>
 80136b8:	4b6a      	ldr	r3, [pc, #424]	; (8013864 <tcp_input+0x52c>)
 80136ba:	f240 121f 	movw	r2, #287	; 0x11f
 80136be:	496f      	ldr	r1, [pc, #444]	; (801387c <tcp_input+0x544>)
 80136c0:	486a      	ldr	r0, [pc, #424]	; (801386c <tcp_input+0x534>)
 80136c2:	f008 f859 	bl	801b778 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	7a1b      	ldrb	r3, [r3, #8]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d009      	beq.n	80136e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	7a1a      	ldrb	r2, [r3, #8]
 80136d2:	4b63      	ldr	r3, [pc, #396]	; (8013860 <tcp_input+0x528>)
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80136da:	3301      	adds	r3, #1
 80136dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136de:	429a      	cmp	r2, r3
 80136e0:	d122      	bne.n	8013728 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	8b1a      	ldrh	r2, [r3, #24]
 80136e6:	4b5d      	ldr	r3, [pc, #372]	; (801385c <tcp_input+0x524>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	881b      	ldrh	r3, [r3, #0]
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d11b      	bne.n	801372a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80136f2:	69fb      	ldr	r3, [r7, #28]
 80136f4:	8ada      	ldrh	r2, [r3, #22]
 80136f6:	4b59      	ldr	r3, [pc, #356]	; (801385c <tcp_input+0x524>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	885b      	ldrh	r3, [r3, #2]
 80136fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80136fe:	429a      	cmp	r2, r3
 8013700:	d113      	bne.n	801372a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	685a      	ldr	r2, [r3, #4]
 8013706:	4b56      	ldr	r3, [pc, #344]	; (8013860 <tcp_input+0x528>)
 8013708:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801370a:	429a      	cmp	r2, r3
 801370c:	d10d      	bne.n	801372a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801370e:	69fb      	ldr	r3, [r7, #28]
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	4b53      	ldr	r3, [pc, #332]	; (8013860 <tcp_input+0x528>)
 8013714:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013716:	429a      	cmp	r2, r3
 8013718:	d107      	bne.n	801372a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801371a:	69f8      	ldr	r0, [r7, #28]
 801371c:	f000 fb54 	bl	8013dc8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7fd fcc3 	bl	80110ac <pbuf_free>
        return;
 8013726:	e1f0      	b.n	8013b0a <tcp_input+0x7d2>
        continue;
 8013728:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801372a:	69fb      	ldr	r3, [r7, #28]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	61fb      	str	r3, [r7, #28]
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d1bc      	bne.n	80136b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013736:	2300      	movs	r3, #0
 8013738:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801373a:	4b51      	ldr	r3, [pc, #324]	; (8013880 <tcp_input+0x548>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	617b      	str	r3, [r7, #20]
 8013740:	e02a      	b.n	8013798 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	7a1b      	ldrb	r3, [r3, #8]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d00c      	beq.n	8013764 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	7a1a      	ldrb	r2, [r3, #8]
 801374e:	4b44      	ldr	r3, [pc, #272]	; (8013860 <tcp_input+0x528>)
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013756:	3301      	adds	r3, #1
 8013758:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801375a:	429a      	cmp	r2, r3
 801375c:	d002      	beq.n	8013764 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	61bb      	str	r3, [r7, #24]
        continue;
 8013762:	e016      	b.n	8013792 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	8ada      	ldrh	r2, [r3, #22]
 8013768:	4b3c      	ldr	r3, [pc, #240]	; (801385c <tcp_input+0x524>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	885b      	ldrh	r3, [r3, #2]
 801376e:	b29b      	uxth	r3, r3
 8013770:	429a      	cmp	r2, r3
 8013772:	d10c      	bne.n	801378e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	4b39      	ldr	r3, [pc, #228]	; (8013860 <tcp_input+0x528>)
 801377a:	695b      	ldr	r3, [r3, #20]
 801377c:	429a      	cmp	r2, r3
 801377e:	d00f      	beq.n	80137a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d00d      	beq.n	80137a2 <tcp_input+0x46a>
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d009      	beq.n	80137a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	617b      	str	r3, [r7, #20]
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d1d1      	bne.n	8013742 <tcp_input+0x40a>
 801379e:	e000      	b.n	80137a2 <tcp_input+0x46a>
            break;
 80137a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d014      	beq.n	80137d2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00a      	beq.n	80137c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	68da      	ldr	r2, [r3, #12]
 80137b2:	69bb      	ldr	r3, [r7, #24]
 80137b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80137b6:	4b32      	ldr	r3, [pc, #200]	; (8013880 <tcp_input+0x548>)
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80137be:	4a30      	ldr	r2, [pc, #192]	; (8013880 <tcp_input+0x548>)
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80137c4:	6978      	ldr	r0, [r7, #20]
 80137c6:	f000 fa01 	bl	8013bcc <tcp_listen_input>
      }
      pbuf_free(p);
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f7fd fc6e 	bl	80110ac <pbuf_free>
      return;
 80137d0:	e19b      	b.n	8013b0a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80137d2:	69fb      	ldr	r3, [r7, #28]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	f000 8160 	beq.w	8013a9a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80137da:	4b2a      	ldr	r3, [pc, #168]	; (8013884 <tcp_input+0x54c>)
 80137dc:	2200      	movs	r2, #0
 80137de:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	891a      	ldrh	r2, [r3, #8]
 80137e4:	4b27      	ldr	r3, [pc, #156]	; (8013884 <tcp_input+0x54c>)
 80137e6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80137e8:	4a26      	ldr	r2, [pc, #152]	; (8013884 <tcp_input+0x54c>)
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80137ee:	4b1b      	ldr	r3, [pc, #108]	; (801385c <tcp_input+0x524>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	4a24      	ldr	r2, [pc, #144]	; (8013884 <tcp_input+0x54c>)
 80137f4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80137f6:	4b24      	ldr	r3, [pc, #144]	; (8013888 <tcp_input+0x550>)
 80137f8:	2200      	movs	r2, #0
 80137fa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80137fc:	4b23      	ldr	r3, [pc, #140]	; (801388c <tcp_input+0x554>)
 80137fe:	2200      	movs	r2, #0
 8013800:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013802:	4b23      	ldr	r3, [pc, #140]	; (8013890 <tcp_input+0x558>)
 8013804:	2200      	movs	r2, #0
 8013806:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013808:	4b22      	ldr	r3, [pc, #136]	; (8013894 <tcp_input+0x55c>)
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	f003 0308 	and.w	r3, r3, #8
 8013810:	2b00      	cmp	r3, #0
 8013812:	d006      	beq.n	8013822 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	7b5b      	ldrb	r3, [r3, #13]
 8013818:	f043 0301 	orr.w	r3, r3, #1
 801381c:	b2da      	uxtb	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013822:	69fb      	ldr	r3, [r7, #28]
 8013824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013826:	2b00      	cmp	r3, #0
 8013828:	d038      	beq.n	801389c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801382a:	69f8      	ldr	r0, [r7, #28]
 801382c:	f7ff f852 	bl	80128d4 <tcp_process_refused_data>
 8013830:	4603      	mov	r3, r0
 8013832:	f113 0f0d 	cmn.w	r3, #13
 8013836:	d007      	beq.n	8013848 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801383c:	2b00      	cmp	r3, #0
 801383e:	d02d      	beq.n	801389c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013840:	4b15      	ldr	r3, [pc, #84]	; (8013898 <tcp_input+0x560>)
 8013842:	881b      	ldrh	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d029      	beq.n	801389c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801384c:	2b00      	cmp	r3, #0
 801384e:	f040 8104 	bne.w	8013a5a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013852:	69f8      	ldr	r0, [r7, #28]
 8013854:	f003 fe16 	bl	8017484 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013858:	e0ff      	b.n	8013a5a <tcp_input+0x722>
 801385a:	bf00      	nop
 801385c:	20004f18 	.word	0x20004f18
 8013860:	2000872c 	.word	0x2000872c
 8013864:	08026678 	.word	0x08026678
 8013868:	080267a4 	.word	0x080267a4
 801386c:	080266c4 	.word	0x080266c4
 8013870:	2000be40 	.word	0x2000be40
 8013874:	080267d0 	.word	0x080267d0
 8013878:	2000be50 	.word	0x2000be50
 801387c:	080267fc 	.word	0x080267fc
 8013880:	2000be48 	.word	0x2000be48
 8013884:	20004f08 	.word	0x20004f08
 8013888:	20004f38 	.word	0x20004f38
 801388c:	20004f35 	.word	0x20004f35
 8013890:	20004f30 	.word	0x20004f30
 8013894:	20004f34 	.word	0x20004f34
 8013898:	20004f32 	.word	0x20004f32
      }
    }
    tcp_input_pcb = pcb;
 801389c:	4a9c      	ldr	r2, [pc, #624]	; (8013b10 <tcp_input+0x7d8>)
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80138a2:	69f8      	ldr	r0, [r7, #28]
 80138a4:	f000 fb0a 	bl	8013ebc <tcp_process>
 80138a8:	4603      	mov	r3, r0
 80138aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80138ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138b0:	f113 0f0d 	cmn.w	r3, #13
 80138b4:	f000 80d3 	beq.w	8013a5e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80138b8:	4b96      	ldr	r3, [pc, #600]	; (8013b14 <tcp_input+0x7dc>)
 80138ba:	781b      	ldrb	r3, [r3, #0]
 80138bc:	f003 0308 	and.w	r3, r3, #8
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d015      	beq.n	80138f0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80138c4:	69fb      	ldr	r3, [r7, #28]
 80138c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d008      	beq.n	80138e0 <tcp_input+0x5a8>
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138d4:	69fa      	ldr	r2, [r7, #28]
 80138d6:	6912      	ldr	r2, [r2, #16]
 80138d8:	f06f 010d 	mvn.w	r1, #13
 80138dc:	4610      	mov	r0, r2
 80138de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80138e0:	69f9      	ldr	r1, [r7, #28]
 80138e2:	488d      	ldr	r0, [pc, #564]	; (8013b18 <tcp_input+0x7e0>)
 80138e4:	f7ff fbb0 	bl	8013048 <tcp_pcb_remove>
        tcp_free(pcb);
 80138e8:	69f8      	ldr	r0, [r7, #28]
 80138ea:	f7fd fe9b 	bl	8011624 <tcp_free>
 80138ee:	e0c1      	b.n	8013a74 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80138f0:	2300      	movs	r3, #0
 80138f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80138f4:	4b89      	ldr	r3, [pc, #548]	; (8013b1c <tcp_input+0x7e4>)
 80138f6:	881b      	ldrh	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d01d      	beq.n	8013938 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80138fc:	4b87      	ldr	r3, [pc, #540]	; (8013b1c <tcp_input+0x7e4>)
 80138fe:	881b      	ldrh	r3, [r3, #0]
 8013900:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013902:	69fb      	ldr	r3, [r7, #28]
 8013904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013908:	2b00      	cmp	r3, #0
 801390a:	d00a      	beq.n	8013922 <tcp_input+0x5ea>
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013912:	69fa      	ldr	r2, [r7, #28]
 8013914:	6910      	ldr	r0, [r2, #16]
 8013916:	89fa      	ldrh	r2, [r7, #14]
 8013918:	69f9      	ldr	r1, [r7, #28]
 801391a:	4798      	blx	r3
 801391c:	4603      	mov	r3, r0
 801391e:	74fb      	strb	r3, [r7, #19]
 8013920:	e001      	b.n	8013926 <tcp_input+0x5ee>
 8013922:	2300      	movs	r3, #0
 8013924:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013926:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801392a:	f113 0f0d 	cmn.w	r3, #13
 801392e:	f000 8098 	beq.w	8013a62 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013932:	4b7a      	ldr	r3, [pc, #488]	; (8013b1c <tcp_input+0x7e4>)
 8013934:	2200      	movs	r2, #0
 8013936:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013938:	69f8      	ldr	r0, [r7, #28]
 801393a:	f000 f907 	bl	8013b4c <tcp_input_delayed_close>
 801393e:	4603      	mov	r3, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	f040 8090 	bne.w	8013a66 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013946:	4b76      	ldr	r3, [pc, #472]	; (8013b20 <tcp_input+0x7e8>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d041      	beq.n	80139d2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013952:	2b00      	cmp	r3, #0
 8013954:	d006      	beq.n	8013964 <tcp_input+0x62c>
 8013956:	4b73      	ldr	r3, [pc, #460]	; (8013b24 <tcp_input+0x7ec>)
 8013958:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801395c:	4972      	ldr	r1, [pc, #456]	; (8013b28 <tcp_input+0x7f0>)
 801395e:	4873      	ldr	r0, [pc, #460]	; (8013b2c <tcp_input+0x7f4>)
 8013960:	f007 ff0a 	bl	801b778 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	8b5b      	ldrh	r3, [r3, #26]
 8013968:	f003 0310 	and.w	r3, r3, #16
 801396c:	2b00      	cmp	r3, #0
 801396e:	d008      	beq.n	8013982 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013970:	4b6b      	ldr	r3, [pc, #428]	; (8013b20 <tcp_input+0x7e8>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4618      	mov	r0, r3
 8013976:	f7fd fb99 	bl	80110ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801397a:	69f8      	ldr	r0, [r7, #28]
 801397c:	f7fe f996 	bl	8011cac <tcp_abort>
            goto aborted;
 8013980:	e078      	b.n	8013a74 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013988:	2b00      	cmp	r3, #0
 801398a:	d00c      	beq.n	80139a6 <tcp_input+0x66e>
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	6918      	ldr	r0, [r3, #16]
 8013996:	4b62      	ldr	r3, [pc, #392]	; (8013b20 <tcp_input+0x7e8>)
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	2300      	movs	r3, #0
 801399c:	69f9      	ldr	r1, [r7, #28]
 801399e:	47a0      	blx	r4
 80139a0:	4603      	mov	r3, r0
 80139a2:	74fb      	strb	r3, [r7, #19]
 80139a4:	e008      	b.n	80139b8 <tcp_input+0x680>
 80139a6:	4b5e      	ldr	r3, [pc, #376]	; (8013b20 <tcp_input+0x7e8>)
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	2300      	movs	r3, #0
 80139ac:	69f9      	ldr	r1, [r7, #28]
 80139ae:	2000      	movs	r0, #0
 80139b0:	f7ff f884 	bl	8012abc <tcp_recv_null>
 80139b4:	4603      	mov	r3, r0
 80139b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80139b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139bc:	f113 0f0d 	cmn.w	r3, #13
 80139c0:	d053      	beq.n	8013a6a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80139c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d003      	beq.n	80139d2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80139ca:	4b55      	ldr	r3, [pc, #340]	; (8013b20 <tcp_input+0x7e8>)
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	69fb      	ldr	r3, [r7, #28]
 80139d0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80139d2:	4b50      	ldr	r3, [pc, #320]	; (8013b14 <tcp_input+0x7dc>)
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	f003 0320 	and.w	r3, r3, #32
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d030      	beq.n	8013a40 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d009      	beq.n	80139fa <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139ea:	7b5a      	ldrb	r2, [r3, #13]
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139f0:	f042 0220 	orr.w	r2, r2, #32
 80139f4:	b2d2      	uxtb	r2, r2
 80139f6:	735a      	strb	r2, [r3, #13]
 80139f8:	e022      	b.n	8013a40 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80139fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013a02:	d005      	beq.n	8013a10 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a08:	3301      	adds	r3, #1
 8013a0a:	b29a      	uxth	r2, r3
 8013a0c:	69fb      	ldr	r3, [r7, #28]
 8013a0e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d00b      	beq.n	8013a32 <tcp_input+0x6fa>
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	6918      	ldr	r0, [r3, #16]
 8013a24:	2300      	movs	r3, #0
 8013a26:	2200      	movs	r2, #0
 8013a28:	69f9      	ldr	r1, [r7, #28]
 8013a2a:	47a0      	blx	r4
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	74fb      	strb	r3, [r7, #19]
 8013a30:	e001      	b.n	8013a36 <tcp_input+0x6fe>
 8013a32:	2300      	movs	r3, #0
 8013a34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013a36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a3a:	f113 0f0d 	cmn.w	r3, #13
 8013a3e:	d016      	beq.n	8013a6e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013a40:	4b33      	ldr	r3, [pc, #204]	; (8013b10 <tcp_input+0x7d8>)
 8013a42:	2200      	movs	r2, #0
 8013a44:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013a46:	69f8      	ldr	r0, [r7, #28]
 8013a48:	f000 f880 	bl	8013b4c <tcp_input_delayed_close>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10f      	bne.n	8013a72 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013a52:	69f8      	ldr	r0, [r7, #28]
 8013a54:	f002 ff10 	bl	8016878 <tcp_output>
 8013a58:	e00c      	b.n	8013a74 <tcp_input+0x73c>
        goto aborted;
 8013a5a:	bf00      	nop
 8013a5c:	e00a      	b.n	8013a74 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013a5e:	bf00      	nop
 8013a60:	e008      	b.n	8013a74 <tcp_input+0x73c>
              goto aborted;
 8013a62:	bf00      	nop
 8013a64:	e006      	b.n	8013a74 <tcp_input+0x73c>
          goto aborted;
 8013a66:	bf00      	nop
 8013a68:	e004      	b.n	8013a74 <tcp_input+0x73c>
            goto aborted;
 8013a6a:	bf00      	nop
 8013a6c:	e002      	b.n	8013a74 <tcp_input+0x73c>
              goto aborted;
 8013a6e:	bf00      	nop
 8013a70:	e000      	b.n	8013a74 <tcp_input+0x73c>
          goto aborted;
 8013a72:	bf00      	nop
    tcp_input_pcb = NULL;
 8013a74:	4b26      	ldr	r3, [pc, #152]	; (8013b10 <tcp_input+0x7d8>)
 8013a76:	2200      	movs	r2, #0
 8013a78:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013a7a:	4b29      	ldr	r3, [pc, #164]	; (8013b20 <tcp_input+0x7e8>)
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013a80:	4b2b      	ldr	r3, [pc, #172]	; (8013b30 <tcp_input+0x7f8>)
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d03f      	beq.n	8013b08 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8013a88:	4b29      	ldr	r3, [pc, #164]	; (8013b30 <tcp_input+0x7f8>)
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7fd fb0d 	bl	80110ac <pbuf_free>
      inseg.p = NULL;
 8013a92:	4b27      	ldr	r3, [pc, #156]	; (8013b30 <tcp_input+0x7f8>)
 8013a94:	2200      	movs	r2, #0
 8013a96:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013a98:	e036      	b.n	8013b08 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013a9a:	4b26      	ldr	r3, [pc, #152]	; (8013b34 <tcp_input+0x7fc>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	899b      	ldrh	r3, [r3, #12]
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7fb ff70 	bl	800f988 <lwip_htons>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	b2db      	uxtb	r3, r3
 8013aac:	f003 0304 	and.w	r3, r3, #4
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d118      	bne.n	8013ae6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ab4:	4b20      	ldr	r3, [pc, #128]	; (8013b38 <tcp_input+0x800>)
 8013ab6:	6819      	ldr	r1, [r3, #0]
 8013ab8:	4b20      	ldr	r3, [pc, #128]	; (8013b3c <tcp_input+0x804>)
 8013aba:	881b      	ldrh	r3, [r3, #0]
 8013abc:	461a      	mov	r2, r3
 8013abe:	4b20      	ldr	r3, [pc, #128]	; (8013b40 <tcp_input+0x808>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ac4:	4b1b      	ldr	r3, [pc, #108]	; (8013b34 <tcp_input+0x7fc>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ac8:	885b      	ldrh	r3, [r3, #2]
 8013aca:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013acc:	4a19      	ldr	r2, [pc, #100]	; (8013b34 <tcp_input+0x7fc>)
 8013ace:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ad0:	8812      	ldrh	r2, [r2, #0]
 8013ad2:	b292      	uxth	r2, r2
 8013ad4:	9202      	str	r2, [sp, #8]
 8013ad6:	9301      	str	r3, [sp, #4]
 8013ad8:	4b1a      	ldr	r3, [pc, #104]	; (8013b44 <tcp_input+0x80c>)
 8013ada:	9300      	str	r3, [sp, #0]
 8013adc:	4b1a      	ldr	r3, [pc, #104]	; (8013b48 <tcp_input+0x810>)
 8013ade:	4602      	mov	r2, r0
 8013ae0:	2000      	movs	r0, #0
 8013ae2:	f003 fc7d 	bl	80173e0 <tcp_rst>
    pbuf_free(p);
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	f7fd fae0 	bl	80110ac <pbuf_free>
  return;
 8013aec:	e00c      	b.n	8013b08 <tcp_input+0x7d0>
    goto dropped;
 8013aee:	bf00      	nop
 8013af0:	e006      	b.n	8013b00 <tcp_input+0x7c8>
    goto dropped;
 8013af2:	bf00      	nop
 8013af4:	e004      	b.n	8013b00 <tcp_input+0x7c8>
    goto dropped;
 8013af6:	bf00      	nop
 8013af8:	e002      	b.n	8013b00 <tcp_input+0x7c8>
      goto dropped;
 8013afa:	bf00      	nop
 8013afc:	e000      	b.n	8013b00 <tcp_input+0x7c8>
      goto dropped;
 8013afe:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f7fd fad3 	bl	80110ac <pbuf_free>
 8013b06:	e000      	b.n	8013b0a <tcp_input+0x7d2>
  return;
 8013b08:	bf00      	nop
}
 8013b0a:	3724      	adds	r7, #36	; 0x24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd90      	pop	{r4, r7, pc}
 8013b10:	2000be54 	.word	0x2000be54
 8013b14:	20004f35 	.word	0x20004f35
 8013b18:	2000be40 	.word	0x2000be40
 8013b1c:	20004f30 	.word	0x20004f30
 8013b20:	20004f38 	.word	0x20004f38
 8013b24:	08026678 	.word	0x08026678
 8013b28:	0802682c 	.word	0x0802682c
 8013b2c:	080266c4 	.word	0x080266c4
 8013b30:	20004f08 	.word	0x20004f08
 8013b34:	20004f18 	.word	0x20004f18
 8013b38:	20004f2c 	.word	0x20004f2c
 8013b3c:	20004f32 	.word	0x20004f32
 8013b40:	20004f28 	.word	0x20004f28
 8013b44:	2000873c 	.word	0x2000873c
 8013b48:	20008740 	.word	0x20008740

08013b4c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d106      	bne.n	8013b68 <tcp_input_delayed_close+0x1c>
 8013b5a:	4b17      	ldr	r3, [pc, #92]	; (8013bb8 <tcp_input_delayed_close+0x6c>)
 8013b5c:	f240 225a 	movw	r2, #602	; 0x25a
 8013b60:	4916      	ldr	r1, [pc, #88]	; (8013bbc <tcp_input_delayed_close+0x70>)
 8013b62:	4817      	ldr	r0, [pc, #92]	; (8013bc0 <tcp_input_delayed_close+0x74>)
 8013b64:	f007 fe08 	bl	801b778 <printf>

  if (recv_flags & TF_CLOSED) {
 8013b68:	4b16      	ldr	r3, [pc, #88]	; (8013bc4 <tcp_input_delayed_close+0x78>)
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	f003 0310 	and.w	r3, r3, #16
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d01c      	beq.n	8013bae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	8b5b      	ldrh	r3, [r3, #26]
 8013b78:	f003 0310 	and.w	r3, r3, #16
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d10d      	bne.n	8013b9c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d008      	beq.n	8013b9c <tcp_input_delayed_close+0x50>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	6912      	ldr	r2, [r2, #16]
 8013b94:	f06f 010e 	mvn.w	r1, #14
 8013b98:	4610      	mov	r0, r2
 8013b9a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013b9c:	6879      	ldr	r1, [r7, #4]
 8013b9e:	480a      	ldr	r0, [pc, #40]	; (8013bc8 <tcp_input_delayed_close+0x7c>)
 8013ba0:	f7ff fa52 	bl	8013048 <tcp_pcb_remove>
    tcp_free(pcb);
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f7fd fd3d 	bl	8011624 <tcp_free>
    return 1;
 8013baa:	2301      	movs	r3, #1
 8013bac:	e000      	b.n	8013bb0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013bae:	2300      	movs	r3, #0
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3708      	adds	r7, #8
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}
 8013bb8:	08026678 	.word	0x08026678
 8013bbc:	08026848 	.word	0x08026848
 8013bc0:	080266c4 	.word	0x080266c4
 8013bc4:	20004f35 	.word	0x20004f35
 8013bc8:	2000be40 	.word	0x2000be40

08013bcc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013bcc:	b590      	push	{r4, r7, lr}
 8013bce:	b08b      	sub	sp, #44	; 0x2c
 8013bd0:	af04      	add	r7, sp, #16
 8013bd2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013bd4:	4b6f      	ldr	r3, [pc, #444]	; (8013d94 <tcp_listen_input+0x1c8>)
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	f003 0304 	and.w	r3, r3, #4
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	f040 80d2 	bne.w	8013d86 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d106      	bne.n	8013bf6 <tcp_listen_input+0x2a>
 8013be8:	4b6b      	ldr	r3, [pc, #428]	; (8013d98 <tcp_listen_input+0x1cc>)
 8013bea:	f240 2281 	movw	r2, #641	; 0x281
 8013bee:	496b      	ldr	r1, [pc, #428]	; (8013d9c <tcp_listen_input+0x1d0>)
 8013bf0:	486b      	ldr	r0, [pc, #428]	; (8013da0 <tcp_listen_input+0x1d4>)
 8013bf2:	f007 fdc1 	bl	801b778 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013bf6:	4b67      	ldr	r3, [pc, #412]	; (8013d94 <tcp_listen_input+0x1c8>)
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	f003 0310 	and.w	r3, r3, #16
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d019      	beq.n	8013c36 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c02:	4b68      	ldr	r3, [pc, #416]	; (8013da4 <tcp_listen_input+0x1d8>)
 8013c04:	6819      	ldr	r1, [r3, #0]
 8013c06:	4b68      	ldr	r3, [pc, #416]	; (8013da8 <tcp_listen_input+0x1dc>)
 8013c08:	881b      	ldrh	r3, [r3, #0]
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	4b67      	ldr	r3, [pc, #412]	; (8013dac <tcp_listen_input+0x1e0>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c12:	4b67      	ldr	r3, [pc, #412]	; (8013db0 <tcp_listen_input+0x1e4>)
 8013c14:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c16:	885b      	ldrh	r3, [r3, #2]
 8013c18:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c1a:	4a65      	ldr	r2, [pc, #404]	; (8013db0 <tcp_listen_input+0x1e4>)
 8013c1c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c1e:	8812      	ldrh	r2, [r2, #0]
 8013c20:	b292      	uxth	r2, r2
 8013c22:	9202      	str	r2, [sp, #8]
 8013c24:	9301      	str	r3, [sp, #4]
 8013c26:	4b63      	ldr	r3, [pc, #396]	; (8013db4 <tcp_listen_input+0x1e8>)
 8013c28:	9300      	str	r3, [sp, #0]
 8013c2a:	4b63      	ldr	r3, [pc, #396]	; (8013db8 <tcp_listen_input+0x1ec>)
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f003 fbd6 	bl	80173e0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013c34:	e0a9      	b.n	8013d8a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013c36:	4b57      	ldr	r3, [pc, #348]	; (8013d94 <tcp_listen_input+0x1c8>)
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	f003 0302 	and.w	r3, r3, #2
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	f000 80a3 	beq.w	8013d8a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	7d5b      	ldrb	r3, [r3, #21]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7ff f85b 	bl	8012d04 <tcp_alloc>
 8013c4e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d111      	bne.n	8013c7a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	699b      	ldr	r3, [r3, #24]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d00a      	beq.n	8013c74 <tcp_listen_input+0xa8>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	699b      	ldr	r3, [r3, #24]
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	6910      	ldr	r0, [r2, #16]
 8013c66:	f04f 32ff 	mov.w	r2, #4294967295
 8013c6a:	2100      	movs	r1, #0
 8013c6c:	4798      	blx	r3
 8013c6e:	4603      	mov	r3, r0
 8013c70:	73bb      	strb	r3, [r7, #14]
      return;
 8013c72:	e08b      	b.n	8013d8c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013c74:	23f0      	movs	r3, #240	; 0xf0
 8013c76:	73bb      	strb	r3, [r7, #14]
      return;
 8013c78:	e088      	b.n	8013d8c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013c7a:	4b50      	ldr	r3, [pc, #320]	; (8013dbc <tcp_listen_input+0x1f0>)
 8013c7c:	695a      	ldr	r2, [r3, #20]
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013c82:	4b4e      	ldr	r3, [pc, #312]	; (8013dbc <tcp_listen_input+0x1f0>)
 8013c84:	691a      	ldr	r2, [r3, #16]
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	8ada      	ldrh	r2, [r3, #22]
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013c92:	4b47      	ldr	r3, [pc, #284]	; (8013db0 <tcp_listen_input+0x1e4>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	881b      	ldrh	r3, [r3, #0]
 8013c98:	b29a      	uxth	r2, r3
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	2203      	movs	r2, #3
 8013ca2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013ca4:	4b41      	ldr	r3, [pc, #260]	; (8013dac <tcp_listen_input+0x1e0>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	1c5a      	adds	r2, r3, #1
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013cb6:	6978      	ldr	r0, [r7, #20]
 8013cb8:	f7ff fa5a 	bl	8013170 <tcp_next_iss>
 8013cbc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	693a      	ldr	r2, [r7, #16]
 8013cc2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	693a      	ldr	r2, [r7, #16]
 8013cc8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	693a      	ldr	r2, [r7, #16]
 8013cce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	693a      	ldr	r2, [r7, #16]
 8013cd4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013cd6:	4b35      	ldr	r3, [pc, #212]	; (8013dac <tcp_listen_input+0x1e0>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	1e5a      	subs	r2, r3, #1
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	691a      	ldr	r2, [r3, #16]
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	687a      	ldr	r2, [r7, #4]
 8013cec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	7a5b      	ldrb	r3, [r3, #9]
 8013cf2:	f003 030c 	and.w	r3, r3, #12
 8013cf6:	b2da      	uxtb	r2, r3
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	7a1a      	ldrb	r2, [r3, #8]
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013d04:	4b2e      	ldr	r3, [pc, #184]	; (8013dc0 <tcp_listen_input+0x1f4>)
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	60da      	str	r2, [r3, #12]
 8013d0c:	4a2c      	ldr	r2, [pc, #176]	; (8013dc0 <tcp_listen_input+0x1f4>)
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	6013      	str	r3, [r2, #0]
 8013d12:	f003 fd27 	bl	8017764 <tcp_timer_needed>
 8013d16:	4b2b      	ldr	r3, [pc, #172]	; (8013dc4 <tcp_listen_input+0x1f8>)
 8013d18:	2201      	movs	r2, #1
 8013d1a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013d1c:	6978      	ldr	r0, [r7, #20]
 8013d1e:	f001 fd8d 	bl	801583c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013d22:	4b23      	ldr	r3, [pc, #140]	; (8013db0 <tcp_listen_input+0x1e4>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	89db      	ldrh	r3, [r3, #14]
 8013d28:	b29a      	uxth	r2, r3
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	3304      	adds	r3, #4
 8013d44:	4618      	mov	r0, r3
 8013d46:	f005 fc4b 	bl	80195e0 <ip4_route>
 8013d4a:	4601      	mov	r1, r0
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	3304      	adds	r3, #4
 8013d50:	461a      	mov	r2, r3
 8013d52:	4620      	mov	r0, r4
 8013d54:	f7ff fa32 	bl	80131bc <tcp_eff_send_mss_netif>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013d60:	2112      	movs	r1, #18
 8013d62:	6978      	ldr	r0, [r7, #20]
 8013d64:	f002 fc9a 	bl	801669c <tcp_enqueue_flags>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d004      	beq.n	8013d7e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013d74:	2100      	movs	r1, #0
 8013d76:	6978      	ldr	r0, [r7, #20]
 8013d78:	f7fd feda 	bl	8011b30 <tcp_abandon>
      return;
 8013d7c:	e006      	b.n	8013d8c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013d7e:	6978      	ldr	r0, [r7, #20]
 8013d80:	f002 fd7a 	bl	8016878 <tcp_output>
  return;
 8013d84:	e001      	b.n	8013d8a <tcp_listen_input+0x1be>
    return;
 8013d86:	bf00      	nop
 8013d88:	e000      	b.n	8013d8c <tcp_listen_input+0x1c0>
  return;
 8013d8a:	bf00      	nop
}
 8013d8c:	371c      	adds	r7, #28
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd90      	pop	{r4, r7, pc}
 8013d92:	bf00      	nop
 8013d94:	20004f34 	.word	0x20004f34
 8013d98:	08026678 	.word	0x08026678
 8013d9c:	08026870 	.word	0x08026870
 8013da0:	080266c4 	.word	0x080266c4
 8013da4:	20004f2c 	.word	0x20004f2c
 8013da8:	20004f32 	.word	0x20004f32
 8013dac:	20004f28 	.word	0x20004f28
 8013db0:	20004f18 	.word	0x20004f18
 8013db4:	2000873c 	.word	0x2000873c
 8013db8:	20008740 	.word	0x20008740
 8013dbc:	2000872c 	.word	0x2000872c
 8013dc0:	2000be40 	.word	0x2000be40
 8013dc4:	2000be3c 	.word	0x2000be3c

08013dc8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b086      	sub	sp, #24
 8013dcc:	af04      	add	r7, sp, #16
 8013dce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013dd0:	4b2f      	ldr	r3, [pc, #188]	; (8013e90 <tcp_timewait_input+0xc8>)
 8013dd2:	781b      	ldrb	r3, [r3, #0]
 8013dd4:	f003 0304 	and.w	r3, r3, #4
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d153      	bne.n	8013e84 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d106      	bne.n	8013df0 <tcp_timewait_input+0x28>
 8013de2:	4b2c      	ldr	r3, [pc, #176]	; (8013e94 <tcp_timewait_input+0xcc>)
 8013de4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013de8:	492b      	ldr	r1, [pc, #172]	; (8013e98 <tcp_timewait_input+0xd0>)
 8013dea:	482c      	ldr	r0, [pc, #176]	; (8013e9c <tcp_timewait_input+0xd4>)
 8013dec:	f007 fcc4 	bl	801b778 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013df0:	4b27      	ldr	r3, [pc, #156]	; (8013e90 <tcp_timewait_input+0xc8>)
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	f003 0302 	and.w	r3, r3, #2
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d02a      	beq.n	8013e52 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013dfc:	4b28      	ldr	r3, [pc, #160]	; (8013ea0 <tcp_timewait_input+0xd8>)
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e04:	1ad3      	subs	r3, r2, r3
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	db2d      	blt.n	8013e66 <tcp_timewait_input+0x9e>
 8013e0a:	4b25      	ldr	r3, [pc, #148]	; (8013ea0 <tcp_timewait_input+0xd8>)
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e12:	6879      	ldr	r1, [r7, #4]
 8013e14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013e16:	440b      	add	r3, r1
 8013e18:	1ad3      	subs	r3, r2, r3
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	dc23      	bgt.n	8013e66 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e1e:	4b21      	ldr	r3, [pc, #132]	; (8013ea4 <tcp_timewait_input+0xdc>)
 8013e20:	6819      	ldr	r1, [r3, #0]
 8013e22:	4b21      	ldr	r3, [pc, #132]	; (8013ea8 <tcp_timewait_input+0xe0>)
 8013e24:	881b      	ldrh	r3, [r3, #0]
 8013e26:	461a      	mov	r2, r3
 8013e28:	4b1d      	ldr	r3, [pc, #116]	; (8013ea0 <tcp_timewait_input+0xd8>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e2e:	4b1f      	ldr	r3, [pc, #124]	; (8013eac <tcp_timewait_input+0xe4>)
 8013e30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e32:	885b      	ldrh	r3, [r3, #2]
 8013e34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e36:	4a1d      	ldr	r2, [pc, #116]	; (8013eac <tcp_timewait_input+0xe4>)
 8013e38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e3a:	8812      	ldrh	r2, [r2, #0]
 8013e3c:	b292      	uxth	r2, r2
 8013e3e:	9202      	str	r2, [sp, #8]
 8013e40:	9301      	str	r3, [sp, #4]
 8013e42:	4b1b      	ldr	r3, [pc, #108]	; (8013eb0 <tcp_timewait_input+0xe8>)
 8013e44:	9300      	str	r3, [sp, #0]
 8013e46:	4b1b      	ldr	r3, [pc, #108]	; (8013eb4 <tcp_timewait_input+0xec>)
 8013e48:	4602      	mov	r2, r0
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f003 fac8 	bl	80173e0 <tcp_rst>
      return;
 8013e50:	e01b      	b.n	8013e8a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013e52:	4b0f      	ldr	r3, [pc, #60]	; (8013e90 <tcp_timewait_input+0xc8>)
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	f003 0301 	and.w	r3, r3, #1
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d003      	beq.n	8013e66 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013e5e:	4b16      	ldr	r3, [pc, #88]	; (8013eb8 <tcp_timewait_input+0xf0>)
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013e66:	4b10      	ldr	r3, [pc, #64]	; (8013ea8 <tcp_timewait_input+0xe0>)
 8013e68:	881b      	ldrh	r3, [r3, #0]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d00c      	beq.n	8013e88 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	8b5b      	ldrh	r3, [r3, #26]
 8013e72:	f043 0302 	orr.w	r3, r3, #2
 8013e76:	b29a      	uxth	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f002 fcfb 	bl	8016878 <tcp_output>
  }
  return;
 8013e82:	e001      	b.n	8013e88 <tcp_timewait_input+0xc0>
    return;
 8013e84:	bf00      	nop
 8013e86:	e000      	b.n	8013e8a <tcp_timewait_input+0xc2>
  return;
 8013e88:	bf00      	nop
}
 8013e8a:	3708      	adds	r7, #8
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	20004f34 	.word	0x20004f34
 8013e94:	08026678 	.word	0x08026678
 8013e98:	08026890 	.word	0x08026890
 8013e9c:	080266c4 	.word	0x080266c4
 8013ea0:	20004f28 	.word	0x20004f28
 8013ea4:	20004f2c 	.word	0x20004f2c
 8013ea8:	20004f32 	.word	0x20004f32
 8013eac:	20004f18 	.word	0x20004f18
 8013eb0:	2000873c 	.word	0x2000873c
 8013eb4:	20008740 	.word	0x20008740
 8013eb8:	2000be44 	.word	0x2000be44

08013ebc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013ebc:	b590      	push	{r4, r7, lr}
 8013ebe:	b08d      	sub	sp, #52	; 0x34
 8013ec0:	af04      	add	r7, sp, #16
 8013ec2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d106      	bne.n	8013ee0 <tcp_process+0x24>
 8013ed2:	4ba5      	ldr	r3, [pc, #660]	; (8014168 <tcp_process+0x2ac>)
 8013ed4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013ed8:	49a4      	ldr	r1, [pc, #656]	; (801416c <tcp_process+0x2b0>)
 8013eda:	48a5      	ldr	r0, [pc, #660]	; (8014170 <tcp_process+0x2b4>)
 8013edc:	f007 fc4c 	bl	801b778 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013ee0:	4ba4      	ldr	r3, [pc, #656]	; (8014174 <tcp_process+0x2b8>)
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	f003 0304 	and.w	r3, r3, #4
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d04e      	beq.n	8013f8a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	7d1b      	ldrb	r3, [r3, #20]
 8013ef0:	2b02      	cmp	r3, #2
 8013ef2:	d108      	bne.n	8013f06 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ef8:	4b9f      	ldr	r3, [pc, #636]	; (8014178 <tcp_process+0x2bc>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d123      	bne.n	8013f48 <tcp_process+0x8c>
        acceptable = 1;
 8013f00:	2301      	movs	r3, #1
 8013f02:	76fb      	strb	r3, [r7, #27]
 8013f04:	e020      	b.n	8013f48 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f0a:	4b9c      	ldr	r3, [pc, #624]	; (801417c <tcp_process+0x2c0>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d102      	bne.n	8013f18 <tcp_process+0x5c>
        acceptable = 1;
 8013f12:	2301      	movs	r3, #1
 8013f14:	76fb      	strb	r3, [r7, #27]
 8013f16:	e017      	b.n	8013f48 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013f18:	4b98      	ldr	r3, [pc, #608]	; (801417c <tcp_process+0x2c0>)
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f20:	1ad3      	subs	r3, r2, r3
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	db10      	blt.n	8013f48 <tcp_process+0x8c>
 8013f26:	4b95      	ldr	r3, [pc, #596]	; (801417c <tcp_process+0x2c0>)
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f2e:	6879      	ldr	r1, [r7, #4]
 8013f30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013f32:	440b      	add	r3, r1
 8013f34:	1ad3      	subs	r3, r2, r3
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	dc06      	bgt.n	8013f48 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	8b5b      	ldrh	r3, [r3, #26]
 8013f3e:	f043 0302 	orr.w	r3, r3, #2
 8013f42:	b29a      	uxth	r2, r3
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013f48:	7efb      	ldrb	r3, [r7, #27]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d01b      	beq.n	8013f86 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	7d1b      	ldrb	r3, [r3, #20]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d106      	bne.n	8013f64 <tcp_process+0xa8>
 8013f56:	4b84      	ldr	r3, [pc, #528]	; (8014168 <tcp_process+0x2ac>)
 8013f58:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013f5c:	4988      	ldr	r1, [pc, #544]	; (8014180 <tcp_process+0x2c4>)
 8013f5e:	4884      	ldr	r0, [pc, #528]	; (8014170 <tcp_process+0x2b4>)
 8013f60:	f007 fc0a 	bl	801b778 <printf>
      recv_flags |= TF_RESET;
 8013f64:	4b87      	ldr	r3, [pc, #540]	; (8014184 <tcp_process+0x2c8>)
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	f043 0308 	orr.w	r3, r3, #8
 8013f6c:	b2da      	uxtb	r2, r3
 8013f6e:	4b85      	ldr	r3, [pc, #532]	; (8014184 <tcp_process+0x2c8>)
 8013f70:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	8b5b      	ldrh	r3, [r3, #26]
 8013f76:	f023 0301 	bic.w	r3, r3, #1
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013f80:	f06f 030d 	mvn.w	r3, #13
 8013f84:	e37a      	b.n	801467c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013f86:	2300      	movs	r3, #0
 8013f88:	e378      	b.n	801467c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013f8a:	4b7a      	ldr	r3, [pc, #488]	; (8014174 <tcp_process+0x2b8>)
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	f003 0302 	and.w	r3, r3, #2
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d010      	beq.n	8013fb8 <tcp_process+0xfc>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	7d1b      	ldrb	r3, [r3, #20]
 8013f9a:	2b02      	cmp	r3, #2
 8013f9c:	d00c      	beq.n	8013fb8 <tcp_process+0xfc>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	7d1b      	ldrb	r3, [r3, #20]
 8013fa2:	2b03      	cmp	r3, #3
 8013fa4:	d008      	beq.n	8013fb8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	8b5b      	ldrh	r3, [r3, #26]
 8013faa:	f043 0302 	orr.w	r3, r3, #2
 8013fae:	b29a      	uxth	r2, r3
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	e361      	b.n	801467c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	8b5b      	ldrh	r3, [r3, #26]
 8013fbc:	f003 0310 	and.w	r3, r3, #16
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d103      	bne.n	8013fcc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013fc4:	4b70      	ldr	r3, [pc, #448]	; (8014188 <tcp_process+0x2cc>)
 8013fc6:	681a      	ldr	r2, [r3, #0]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f001 fc2d 	bl	801583c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	7d1b      	ldrb	r3, [r3, #20]
 8013fe6:	3b02      	subs	r3, #2
 8013fe8:	2b07      	cmp	r3, #7
 8013fea:	f200 8337 	bhi.w	801465c <tcp_process+0x7a0>
 8013fee:	a201      	add	r2, pc, #4	; (adr r2, 8013ff4 <tcp_process+0x138>)
 8013ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ff4:	08014015 	.word	0x08014015
 8013ff8:	08014245 	.word	0x08014245
 8013ffc:	080143bd 	.word	0x080143bd
 8014000:	080143e7 	.word	0x080143e7
 8014004:	0801450b 	.word	0x0801450b
 8014008:	080143bd 	.word	0x080143bd
 801400c:	08014597 	.word	0x08014597
 8014010:	08014627 	.word	0x08014627
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014014:	4b57      	ldr	r3, [pc, #348]	; (8014174 <tcp_process+0x2b8>)
 8014016:	781b      	ldrb	r3, [r3, #0]
 8014018:	f003 0310 	and.w	r3, r3, #16
 801401c:	2b00      	cmp	r3, #0
 801401e:	f000 80e4 	beq.w	80141ea <tcp_process+0x32e>
 8014022:	4b54      	ldr	r3, [pc, #336]	; (8014174 <tcp_process+0x2b8>)
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	f003 0302 	and.w	r3, r3, #2
 801402a:	2b00      	cmp	r3, #0
 801402c:	f000 80dd 	beq.w	80141ea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014034:	1c5a      	adds	r2, r3, #1
 8014036:	4b50      	ldr	r3, [pc, #320]	; (8014178 <tcp_process+0x2bc>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	429a      	cmp	r2, r3
 801403c:	f040 80d5 	bne.w	80141ea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014040:	4b4e      	ldr	r3, [pc, #312]	; (801417c <tcp_process+0x2c0>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	1c5a      	adds	r2, r3, #1
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014052:	4b49      	ldr	r3, [pc, #292]	; (8014178 <tcp_process+0x2bc>)
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801405a:	4b4c      	ldr	r3, [pc, #304]	; (801418c <tcp_process+0x2d0>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	89db      	ldrh	r3, [r3, #14]
 8014060:	b29a      	uxth	r2, r3
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014074:	4b41      	ldr	r3, [pc, #260]	; (801417c <tcp_process+0x2c0>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	1e5a      	subs	r2, r3, #1
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2204      	movs	r2, #4
 8014082:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	3304      	adds	r3, #4
 801408c:	4618      	mov	r0, r3
 801408e:	f005 faa7 	bl	80195e0 <ip4_route>
 8014092:	4601      	mov	r1, r0
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	3304      	adds	r3, #4
 8014098:	461a      	mov	r2, r3
 801409a:	4620      	mov	r0, r4
 801409c:	f7ff f88e 	bl	80131bc <tcp_eff_send_mss_netif>
 80140a0:	4603      	mov	r3, r0
 80140a2:	461a      	mov	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140ac:	009a      	lsls	r2, r3, #2
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	f241 111c 	movw	r1, #4380	; 0x111c
 80140b8:	428b      	cmp	r3, r1
 80140ba:	bf38      	it	cc
 80140bc:	460b      	movcc	r3, r1
 80140be:	429a      	cmp	r2, r3
 80140c0:	d204      	bcs.n	80140cc <tcp_process+0x210>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	e00d      	b.n	80140e8 <tcp_process+0x22c>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140d0:	005b      	lsls	r3, r3, #1
 80140d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80140d6:	4293      	cmp	r3, r2
 80140d8:	d904      	bls.n	80140e4 <tcp_process+0x228>
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140de:	005b      	lsls	r3, r3, #1
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	e001      	b.n	80140e8 <tcp_process+0x22c>
 80140e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d106      	bne.n	8014106 <tcp_process+0x24a>
 80140f8:	4b1b      	ldr	r3, [pc, #108]	; (8014168 <tcp_process+0x2ac>)
 80140fa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80140fe:	4924      	ldr	r1, [pc, #144]	; (8014190 <tcp_process+0x2d4>)
 8014100:	481b      	ldr	r0, [pc, #108]	; (8014170 <tcp_process+0x2b4>)
 8014102:	f007 fb39 	bl	801b778 <printf>
        --pcb->snd_queuelen;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801410c:	3b01      	subs	r3, #1
 801410e:	b29a      	uxth	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801411a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d111      	bne.n	8014146 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014126:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d106      	bne.n	801413c <tcp_process+0x280>
 801412e:	4b0e      	ldr	r3, [pc, #56]	; (8014168 <tcp_process+0x2ac>)
 8014130:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014134:	4917      	ldr	r1, [pc, #92]	; (8014194 <tcp_process+0x2d8>)
 8014136:	480e      	ldr	r0, [pc, #56]	; (8014170 <tcp_process+0x2b4>)
 8014138:	f007 fb1e 	bl	801b778 <printf>
          pcb->unsent = rseg->next;
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	66da      	str	r2, [r3, #108]	; 0x6c
 8014144:	e003      	b.n	801414e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	681a      	ldr	r2, [r3, #0]
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801414e:	69f8      	ldr	r0, [r7, #28]
 8014150:	f7fe fc51 	bl	80129f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014158:	2b00      	cmp	r3, #0
 801415a:	d11d      	bne.n	8014198 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014162:	861a      	strh	r2, [r3, #48]	; 0x30
 8014164:	e01f      	b.n	80141a6 <tcp_process+0x2ea>
 8014166:	bf00      	nop
 8014168:	08026678 	.word	0x08026678
 801416c:	080268b0 	.word	0x080268b0
 8014170:	080266c4 	.word	0x080266c4
 8014174:	20004f34 	.word	0x20004f34
 8014178:	20004f2c 	.word	0x20004f2c
 801417c:	20004f28 	.word	0x20004f28
 8014180:	080268cc 	.word	0x080268cc
 8014184:	20004f35 	.word	0x20004f35
 8014188:	2000be44 	.word	0x2000be44
 801418c:	20004f18 	.word	0x20004f18
 8014190:	080268ec 	.word	0x080268ec
 8014194:	08026904 	.word	0x08026904
        } else {
          pcb->rtime = 0;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2200      	movs	r2, #0
 801419c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2200      	movs	r2, #0
 80141a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d00a      	beq.n	80141c6 <tcp_process+0x30a>
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	6910      	ldr	r0, [r2, #16]
 80141ba:	2200      	movs	r2, #0
 80141bc:	6879      	ldr	r1, [r7, #4]
 80141be:	4798      	blx	r3
 80141c0:	4603      	mov	r3, r0
 80141c2:	76bb      	strb	r3, [r7, #26]
 80141c4:	e001      	b.n	80141ca <tcp_process+0x30e>
 80141c6:	2300      	movs	r3, #0
 80141c8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80141ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80141ce:	f113 0f0d 	cmn.w	r3, #13
 80141d2:	d102      	bne.n	80141da <tcp_process+0x31e>
          return ERR_ABRT;
 80141d4:	f06f 030c 	mvn.w	r3, #12
 80141d8:	e250      	b.n	801467c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	8b5b      	ldrh	r3, [r3, #26]
 80141de:	f043 0302 	orr.w	r3, r3, #2
 80141e2:	b29a      	uxth	r2, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80141e8:	e23a      	b.n	8014660 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80141ea:	4b9d      	ldr	r3, [pc, #628]	; (8014460 <tcp_process+0x5a4>)
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	f003 0310 	and.w	r3, r3, #16
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	f000 8234 	beq.w	8014660 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141f8:	4b9a      	ldr	r3, [pc, #616]	; (8014464 <tcp_process+0x5a8>)
 80141fa:	6819      	ldr	r1, [r3, #0]
 80141fc:	4b9a      	ldr	r3, [pc, #616]	; (8014468 <tcp_process+0x5ac>)
 80141fe:	881b      	ldrh	r3, [r3, #0]
 8014200:	461a      	mov	r2, r3
 8014202:	4b9a      	ldr	r3, [pc, #616]	; (801446c <tcp_process+0x5b0>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014208:	4b99      	ldr	r3, [pc, #612]	; (8014470 <tcp_process+0x5b4>)
 801420a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801420c:	885b      	ldrh	r3, [r3, #2]
 801420e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014210:	4a97      	ldr	r2, [pc, #604]	; (8014470 <tcp_process+0x5b4>)
 8014212:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014214:	8812      	ldrh	r2, [r2, #0]
 8014216:	b292      	uxth	r2, r2
 8014218:	9202      	str	r2, [sp, #8]
 801421a:	9301      	str	r3, [sp, #4]
 801421c:	4b95      	ldr	r3, [pc, #596]	; (8014474 <tcp_process+0x5b8>)
 801421e:	9300      	str	r3, [sp, #0]
 8014220:	4b95      	ldr	r3, [pc, #596]	; (8014478 <tcp_process+0x5bc>)
 8014222:	4602      	mov	r2, r0
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f003 f8db 	bl	80173e0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014230:	2b05      	cmp	r3, #5
 8014232:	f200 8215 	bhi.w	8014660 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2200      	movs	r2, #0
 801423a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f002 fea5 	bl	8016f8c <tcp_rexmit_rto>
      break;
 8014242:	e20d      	b.n	8014660 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014244:	4b86      	ldr	r3, [pc, #536]	; (8014460 <tcp_process+0x5a4>)
 8014246:	781b      	ldrb	r3, [r3, #0]
 8014248:	f003 0310 	and.w	r3, r3, #16
 801424c:	2b00      	cmp	r3, #0
 801424e:	f000 80a1 	beq.w	8014394 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014252:	4b84      	ldr	r3, [pc, #528]	; (8014464 <tcp_process+0x5a8>)
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801425a:	1ad3      	subs	r3, r2, r3
 801425c:	3b01      	subs	r3, #1
 801425e:	2b00      	cmp	r3, #0
 8014260:	db7e      	blt.n	8014360 <tcp_process+0x4a4>
 8014262:	4b80      	ldr	r3, [pc, #512]	; (8014464 <tcp_process+0x5a8>)
 8014264:	681a      	ldr	r2, [r3, #0]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801426a:	1ad3      	subs	r3, r2, r3
 801426c:	2b00      	cmp	r3, #0
 801426e:	dc77      	bgt.n	8014360 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2204      	movs	r2, #4
 8014274:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801427a:	2b00      	cmp	r3, #0
 801427c:	d102      	bne.n	8014284 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801427e:	23fa      	movs	r3, #250	; 0xfa
 8014280:	76bb      	strb	r3, [r7, #26]
 8014282:	e01d      	b.n	80142c0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014288:	699b      	ldr	r3, [r3, #24]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d106      	bne.n	801429c <tcp_process+0x3e0>
 801428e:	4b7b      	ldr	r3, [pc, #492]	; (801447c <tcp_process+0x5c0>)
 8014290:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014294:	497a      	ldr	r1, [pc, #488]	; (8014480 <tcp_process+0x5c4>)
 8014296:	487b      	ldr	r0, [pc, #492]	; (8014484 <tcp_process+0x5c8>)
 8014298:	f007 fa6e 	bl	801b778 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80142a0:	699b      	ldr	r3, [r3, #24]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d00a      	beq.n	80142bc <tcp_process+0x400>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80142aa:	699b      	ldr	r3, [r3, #24]
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	6910      	ldr	r0, [r2, #16]
 80142b0:	2200      	movs	r2, #0
 80142b2:	6879      	ldr	r1, [r7, #4]
 80142b4:	4798      	blx	r3
 80142b6:	4603      	mov	r3, r0
 80142b8:	76bb      	strb	r3, [r7, #26]
 80142ba:	e001      	b.n	80142c0 <tcp_process+0x404>
 80142bc:	23f0      	movs	r3, #240	; 0xf0
 80142be:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80142c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d00a      	beq.n	80142de <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80142c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80142cc:	f113 0f0d 	cmn.w	r3, #13
 80142d0:	d002      	beq.n	80142d8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f7fd fcea 	bl	8011cac <tcp_abort>
            }
            return ERR_ABRT;
 80142d8:	f06f 030c 	mvn.w	r3, #12
 80142dc:	e1ce      	b.n	801467c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f000 fae0 	bl	80148a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80142e4:	4b68      	ldr	r3, [pc, #416]	; (8014488 <tcp_process+0x5cc>)
 80142e6:	881b      	ldrh	r3, [r3, #0]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d005      	beq.n	80142f8 <tcp_process+0x43c>
            recv_acked--;
 80142ec:	4b66      	ldr	r3, [pc, #408]	; (8014488 <tcp_process+0x5cc>)
 80142ee:	881b      	ldrh	r3, [r3, #0]
 80142f0:	3b01      	subs	r3, #1
 80142f2:	b29a      	uxth	r2, r3
 80142f4:	4b64      	ldr	r3, [pc, #400]	; (8014488 <tcp_process+0x5cc>)
 80142f6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142fc:	009a      	lsls	r2, r3, #2
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	f241 111c 	movw	r1, #4380	; 0x111c
 8014308:	428b      	cmp	r3, r1
 801430a:	bf38      	it	cc
 801430c:	460b      	movcc	r3, r1
 801430e:	429a      	cmp	r2, r3
 8014310:	d204      	bcs.n	801431c <tcp_process+0x460>
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	b29b      	uxth	r3, r3
 801431a:	e00d      	b.n	8014338 <tcp_process+0x47c>
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	f241 121c 	movw	r2, #4380	; 0x111c
 8014326:	4293      	cmp	r3, r2
 8014328:	d904      	bls.n	8014334 <tcp_process+0x478>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801432e:	005b      	lsls	r3, r3, #1
 8014330:	b29b      	uxth	r3, r3
 8014332:	e001      	b.n	8014338 <tcp_process+0x47c>
 8014334:	f241 131c 	movw	r3, #4380	; 0x111c
 8014338:	687a      	ldr	r2, [r7, #4]
 801433a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801433e:	4b53      	ldr	r3, [pc, #332]	; (801448c <tcp_process+0x5d0>)
 8014340:	781b      	ldrb	r3, [r3, #0]
 8014342:	f003 0320 	and.w	r3, r3, #32
 8014346:	2b00      	cmp	r3, #0
 8014348:	d037      	beq.n	80143ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	8b5b      	ldrh	r3, [r3, #26]
 801434e:	f043 0302 	orr.w	r3, r3, #2
 8014352:	b29a      	uxth	r2, r3
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2207      	movs	r2, #7
 801435c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801435e:	e02c      	b.n	80143ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014360:	4b40      	ldr	r3, [pc, #256]	; (8014464 <tcp_process+0x5a8>)
 8014362:	6819      	ldr	r1, [r3, #0]
 8014364:	4b40      	ldr	r3, [pc, #256]	; (8014468 <tcp_process+0x5ac>)
 8014366:	881b      	ldrh	r3, [r3, #0]
 8014368:	461a      	mov	r2, r3
 801436a:	4b40      	ldr	r3, [pc, #256]	; (801446c <tcp_process+0x5b0>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014370:	4b3f      	ldr	r3, [pc, #252]	; (8014470 <tcp_process+0x5b4>)
 8014372:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014374:	885b      	ldrh	r3, [r3, #2]
 8014376:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014378:	4a3d      	ldr	r2, [pc, #244]	; (8014470 <tcp_process+0x5b4>)
 801437a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801437c:	8812      	ldrh	r2, [r2, #0]
 801437e:	b292      	uxth	r2, r2
 8014380:	9202      	str	r2, [sp, #8]
 8014382:	9301      	str	r3, [sp, #4]
 8014384:	4b3b      	ldr	r3, [pc, #236]	; (8014474 <tcp_process+0x5b8>)
 8014386:	9300      	str	r3, [sp, #0]
 8014388:	4b3b      	ldr	r3, [pc, #236]	; (8014478 <tcp_process+0x5bc>)
 801438a:	4602      	mov	r2, r0
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f003 f827 	bl	80173e0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014392:	e167      	b.n	8014664 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014394:	4b32      	ldr	r3, [pc, #200]	; (8014460 <tcp_process+0x5a4>)
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	f003 0302 	and.w	r3, r3, #2
 801439c:	2b00      	cmp	r3, #0
 801439e:	f000 8161 	beq.w	8014664 <tcp_process+0x7a8>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a6:	1e5a      	subs	r2, r3, #1
 80143a8:	4b30      	ldr	r3, [pc, #192]	; (801446c <tcp_process+0x5b0>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	f040 8159 	bne.w	8014664 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f002 fe0c 	bl	8016fd0 <tcp_rexmit>
      break;
 80143b8:	e154      	b.n	8014664 <tcp_process+0x7a8>
 80143ba:	e153      	b.n	8014664 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f000 fa71 	bl	80148a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80143c2:	4b32      	ldr	r3, [pc, #200]	; (801448c <tcp_process+0x5d0>)
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	f003 0320 	and.w	r3, r3, #32
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	f000 814c 	beq.w	8014668 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	8b5b      	ldrh	r3, [r3, #26]
 80143d4:	f043 0302 	orr.w	r3, r3, #2
 80143d8:	b29a      	uxth	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2207      	movs	r2, #7
 80143e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80143e4:	e140      	b.n	8014668 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 fa5c 	bl	80148a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80143ec:	4b27      	ldr	r3, [pc, #156]	; (801448c <tcp_process+0x5d0>)
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	f003 0320 	and.w	r3, r3, #32
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d071      	beq.n	80144dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80143f8:	4b19      	ldr	r3, [pc, #100]	; (8014460 <tcp_process+0x5a4>)
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	f003 0310 	and.w	r3, r3, #16
 8014400:	2b00      	cmp	r3, #0
 8014402:	d060      	beq.n	80144c6 <tcp_process+0x60a>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014408:	4b16      	ldr	r3, [pc, #88]	; (8014464 <tcp_process+0x5a8>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	429a      	cmp	r2, r3
 801440e:	d15a      	bne.n	80144c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014414:	2b00      	cmp	r3, #0
 8014416:	d156      	bne.n	80144c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	8b5b      	ldrh	r3, [r3, #26]
 801441c:	f043 0302 	orr.w	r3, r3, #2
 8014420:	b29a      	uxth	r2, r3
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f7fe fdbe 	bl	8012fa8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801442c:	4b18      	ldr	r3, [pc, #96]	; (8014490 <tcp_process+0x5d4>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	429a      	cmp	r2, r3
 8014434:	d105      	bne.n	8014442 <tcp_process+0x586>
 8014436:	4b16      	ldr	r3, [pc, #88]	; (8014490 <tcp_process+0x5d4>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	4a14      	ldr	r2, [pc, #80]	; (8014490 <tcp_process+0x5d4>)
 801443e:	6013      	str	r3, [r2, #0]
 8014440:	e02e      	b.n	80144a0 <tcp_process+0x5e4>
 8014442:	4b13      	ldr	r3, [pc, #76]	; (8014490 <tcp_process+0x5d4>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	617b      	str	r3, [r7, #20]
 8014448:	e027      	b.n	801449a <tcp_process+0x5de>
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	68db      	ldr	r3, [r3, #12]
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	429a      	cmp	r2, r3
 8014452:	d11f      	bne.n	8014494 <tcp_process+0x5d8>
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	68da      	ldr	r2, [r3, #12]
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	60da      	str	r2, [r3, #12]
 801445c:	e020      	b.n	80144a0 <tcp_process+0x5e4>
 801445e:	bf00      	nop
 8014460:	20004f34 	.word	0x20004f34
 8014464:	20004f2c 	.word	0x20004f2c
 8014468:	20004f32 	.word	0x20004f32
 801446c:	20004f28 	.word	0x20004f28
 8014470:	20004f18 	.word	0x20004f18
 8014474:	2000873c 	.word	0x2000873c
 8014478:	20008740 	.word	0x20008740
 801447c:	08026678 	.word	0x08026678
 8014480:	08026918 	.word	0x08026918
 8014484:	080266c4 	.word	0x080266c4
 8014488:	20004f30 	.word	0x20004f30
 801448c:	20004f35 	.word	0x20004f35
 8014490:	2000be40 	.word	0x2000be40
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	68db      	ldr	r3, [r3, #12]
 8014498:	617b      	str	r3, [r7, #20]
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d1d4      	bne.n	801444a <tcp_process+0x58e>
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2200      	movs	r2, #0
 80144a4:	60da      	str	r2, [r3, #12]
 80144a6:	4b77      	ldr	r3, [pc, #476]	; (8014684 <tcp_process+0x7c8>)
 80144a8:	2201      	movs	r2, #1
 80144aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	220a      	movs	r2, #10
 80144b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80144b2:	4b75      	ldr	r3, [pc, #468]	; (8014688 <tcp_process+0x7cc>)
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	60da      	str	r2, [r3, #12]
 80144ba:	4a73      	ldr	r2, [pc, #460]	; (8014688 <tcp_process+0x7cc>)
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6013      	str	r3, [r2, #0]
 80144c0:	f003 f950 	bl	8017764 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80144c4:	e0d2      	b.n	801466c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	8b5b      	ldrh	r3, [r3, #26]
 80144ca:	f043 0302 	orr.w	r3, r3, #2
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2208      	movs	r2, #8
 80144d8:	751a      	strb	r2, [r3, #20]
      break;
 80144da:	e0c7      	b.n	801466c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80144dc:	4b6b      	ldr	r3, [pc, #428]	; (801468c <tcp_process+0x7d0>)
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	f003 0310 	and.w	r3, r3, #16
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	f000 80c1 	beq.w	801466c <tcp_process+0x7b0>
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80144ee:	4b68      	ldr	r3, [pc, #416]	; (8014690 <tcp_process+0x7d4>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	f040 80ba 	bne.w	801466c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	f040 80b5 	bne.w	801466c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2206      	movs	r2, #6
 8014506:	751a      	strb	r2, [r3, #20]
      break;
 8014508:	e0b0      	b.n	801466c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f000 f9ca 	bl	80148a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014510:	4b60      	ldr	r3, [pc, #384]	; (8014694 <tcp_process+0x7d8>)
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	f003 0320 	and.w	r3, r3, #32
 8014518:	2b00      	cmp	r3, #0
 801451a:	f000 80a9 	beq.w	8014670 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	8b5b      	ldrh	r3, [r3, #26]
 8014522:	f043 0302 	orr.w	r3, r3, #2
 8014526:	b29a      	uxth	r2, r3
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f7fe fd3b 	bl	8012fa8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014532:	4b59      	ldr	r3, [pc, #356]	; (8014698 <tcp_process+0x7dc>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	687a      	ldr	r2, [r7, #4]
 8014538:	429a      	cmp	r2, r3
 801453a:	d105      	bne.n	8014548 <tcp_process+0x68c>
 801453c:	4b56      	ldr	r3, [pc, #344]	; (8014698 <tcp_process+0x7dc>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	68db      	ldr	r3, [r3, #12]
 8014542:	4a55      	ldr	r2, [pc, #340]	; (8014698 <tcp_process+0x7dc>)
 8014544:	6013      	str	r3, [r2, #0]
 8014546:	e013      	b.n	8014570 <tcp_process+0x6b4>
 8014548:	4b53      	ldr	r3, [pc, #332]	; (8014698 <tcp_process+0x7dc>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	613b      	str	r3, [r7, #16]
 801454e:	e00c      	b.n	801456a <tcp_process+0x6ae>
 8014550:	693b      	ldr	r3, [r7, #16]
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	429a      	cmp	r2, r3
 8014558:	d104      	bne.n	8014564 <tcp_process+0x6a8>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	68da      	ldr	r2, [r3, #12]
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	60da      	str	r2, [r3, #12]
 8014562:	e005      	b.n	8014570 <tcp_process+0x6b4>
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	613b      	str	r3, [r7, #16]
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d1ef      	bne.n	8014550 <tcp_process+0x694>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2200      	movs	r2, #0
 8014574:	60da      	str	r2, [r3, #12]
 8014576:	4b43      	ldr	r3, [pc, #268]	; (8014684 <tcp_process+0x7c8>)
 8014578:	2201      	movs	r2, #1
 801457a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	220a      	movs	r2, #10
 8014580:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014582:	4b41      	ldr	r3, [pc, #260]	; (8014688 <tcp_process+0x7cc>)
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	60da      	str	r2, [r3, #12]
 801458a:	4a3f      	ldr	r2, [pc, #252]	; (8014688 <tcp_process+0x7cc>)
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6013      	str	r3, [r2, #0]
 8014590:	f003 f8e8 	bl	8017764 <tcp_timer_needed>
      }
      break;
 8014594:	e06c      	b.n	8014670 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f000 f984 	bl	80148a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801459c:	4b3b      	ldr	r3, [pc, #236]	; (801468c <tcp_process+0x7d0>)
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	f003 0310 	and.w	r3, r3, #16
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d065      	beq.n	8014674 <tcp_process+0x7b8>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80145ac:	4b38      	ldr	r3, [pc, #224]	; (8014690 <tcp_process+0x7d4>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d15f      	bne.n	8014674 <tcp_process+0x7b8>
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d15b      	bne.n	8014674 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f7fe fcf3 	bl	8012fa8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80145c2:	4b35      	ldr	r3, [pc, #212]	; (8014698 <tcp_process+0x7dc>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d105      	bne.n	80145d8 <tcp_process+0x71c>
 80145cc:	4b32      	ldr	r3, [pc, #200]	; (8014698 <tcp_process+0x7dc>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	68db      	ldr	r3, [r3, #12]
 80145d2:	4a31      	ldr	r2, [pc, #196]	; (8014698 <tcp_process+0x7dc>)
 80145d4:	6013      	str	r3, [r2, #0]
 80145d6:	e013      	b.n	8014600 <tcp_process+0x744>
 80145d8:	4b2f      	ldr	r3, [pc, #188]	; (8014698 <tcp_process+0x7dc>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	60fb      	str	r3, [r7, #12]
 80145de:	e00c      	b.n	80145fa <tcp_process+0x73e>
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d104      	bne.n	80145f4 <tcp_process+0x738>
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	68da      	ldr	r2, [r3, #12]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	60da      	str	r2, [r3, #12]
 80145f2:	e005      	b.n	8014600 <tcp_process+0x744>
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	60fb      	str	r3, [r7, #12]
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d1ef      	bne.n	80145e0 <tcp_process+0x724>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2200      	movs	r2, #0
 8014604:	60da      	str	r2, [r3, #12]
 8014606:	4b1f      	ldr	r3, [pc, #124]	; (8014684 <tcp_process+0x7c8>)
 8014608:	2201      	movs	r2, #1
 801460a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	220a      	movs	r2, #10
 8014610:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014612:	4b1d      	ldr	r3, [pc, #116]	; (8014688 <tcp_process+0x7cc>)
 8014614:	681a      	ldr	r2, [r3, #0]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	60da      	str	r2, [r3, #12]
 801461a:	4a1b      	ldr	r2, [pc, #108]	; (8014688 <tcp_process+0x7cc>)
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6013      	str	r3, [r2, #0]
 8014620:	f003 f8a0 	bl	8017764 <tcp_timer_needed>
      }
      break;
 8014624:	e026      	b.n	8014674 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f000 f93c 	bl	80148a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801462c:	4b17      	ldr	r3, [pc, #92]	; (801468c <tcp_process+0x7d0>)
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	f003 0310 	and.w	r3, r3, #16
 8014634:	2b00      	cmp	r3, #0
 8014636:	d01f      	beq.n	8014678 <tcp_process+0x7bc>
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801463c:	4b14      	ldr	r3, [pc, #80]	; (8014690 <tcp_process+0x7d4>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	429a      	cmp	r2, r3
 8014642:	d119      	bne.n	8014678 <tcp_process+0x7bc>
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014648:	2b00      	cmp	r3, #0
 801464a:	d115      	bne.n	8014678 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801464c:	4b11      	ldr	r3, [pc, #68]	; (8014694 <tcp_process+0x7d8>)
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	f043 0310 	orr.w	r3, r3, #16
 8014654:	b2da      	uxtb	r2, r3
 8014656:	4b0f      	ldr	r3, [pc, #60]	; (8014694 <tcp_process+0x7d8>)
 8014658:	701a      	strb	r2, [r3, #0]
      }
      break;
 801465a:	e00d      	b.n	8014678 <tcp_process+0x7bc>
    default:
      break;
 801465c:	bf00      	nop
 801465e:	e00c      	b.n	801467a <tcp_process+0x7be>
      break;
 8014660:	bf00      	nop
 8014662:	e00a      	b.n	801467a <tcp_process+0x7be>
      break;
 8014664:	bf00      	nop
 8014666:	e008      	b.n	801467a <tcp_process+0x7be>
      break;
 8014668:	bf00      	nop
 801466a:	e006      	b.n	801467a <tcp_process+0x7be>
      break;
 801466c:	bf00      	nop
 801466e:	e004      	b.n	801467a <tcp_process+0x7be>
      break;
 8014670:	bf00      	nop
 8014672:	e002      	b.n	801467a <tcp_process+0x7be>
      break;
 8014674:	bf00      	nop
 8014676:	e000      	b.n	801467a <tcp_process+0x7be>
      break;
 8014678:	bf00      	nop
  }
  return ERR_OK;
 801467a:	2300      	movs	r3, #0
}
 801467c:	4618      	mov	r0, r3
 801467e:	3724      	adds	r7, #36	; 0x24
 8014680:	46bd      	mov	sp, r7
 8014682:	bd90      	pop	{r4, r7, pc}
 8014684:	2000be3c 	.word	0x2000be3c
 8014688:	2000be50 	.word	0x2000be50
 801468c:	20004f34 	.word	0x20004f34
 8014690:	20004f2c 	.word	0x20004f2c
 8014694:	20004f35 	.word	0x20004f35
 8014698:	2000be40 	.word	0x2000be40

0801469c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801469c:	b590      	push	{r4, r7, lr}
 801469e:	b085      	sub	sp, #20
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d106      	bne.n	80146ba <tcp_oos_insert_segment+0x1e>
 80146ac:	4b3b      	ldr	r3, [pc, #236]	; (801479c <tcp_oos_insert_segment+0x100>)
 80146ae:	f240 421f 	movw	r2, #1055	; 0x41f
 80146b2:	493b      	ldr	r1, [pc, #236]	; (80147a0 <tcp_oos_insert_segment+0x104>)
 80146b4:	483b      	ldr	r0, [pc, #236]	; (80147a4 <tcp_oos_insert_segment+0x108>)
 80146b6:	f007 f85f 	bl	801b778 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	899b      	ldrh	r3, [r3, #12]
 80146c0:	b29b      	uxth	r3, r3
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7fb f960 	bl	800f988 <lwip_htons>
 80146c8:	4603      	mov	r3, r0
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	f003 0301 	and.w	r3, r3, #1
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d028      	beq.n	8014726 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80146d4:	6838      	ldr	r0, [r7, #0]
 80146d6:	f7fe f979 	bl	80129cc <tcp_segs_free>
    next = NULL;
 80146da:	2300      	movs	r3, #0
 80146dc:	603b      	str	r3, [r7, #0]
 80146de:	e056      	b.n	801478e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	899b      	ldrh	r3, [r3, #12]
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7fb f94d 	bl	800f988 <lwip_htons>
 80146ee:	4603      	mov	r3, r0
 80146f0:	b2db      	uxtb	r3, r3
 80146f2:	f003 0301 	and.w	r3, r3, #1
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d00d      	beq.n	8014716 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	68db      	ldr	r3, [r3, #12]
 80146fe:	899b      	ldrh	r3, [r3, #12]
 8014700:	b29c      	uxth	r4, r3
 8014702:	2001      	movs	r0, #1
 8014704:	f7fb f940 	bl	800f988 <lwip_htons>
 8014708:	4603      	mov	r3, r0
 801470a:	461a      	mov	r2, r3
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	68db      	ldr	r3, [r3, #12]
 8014710:	4322      	orrs	r2, r4
 8014712:	b292      	uxth	r2, r2
 8014714:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014720:	68f8      	ldr	r0, [r7, #12]
 8014722:	f7fe f968 	bl	80129f6 <tcp_seg_free>
    while (next &&
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00e      	beq.n	801474a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	891b      	ldrh	r3, [r3, #8]
 8014730:	461a      	mov	r2, r3
 8014732:	4b1d      	ldr	r3, [pc, #116]	; (80147a8 <tcp_oos_insert_segment+0x10c>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	441a      	add	r2, r3
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	685b      	ldr	r3, [r3, #4]
 801473e:	6839      	ldr	r1, [r7, #0]
 8014740:	8909      	ldrh	r1, [r1, #8]
 8014742:	440b      	add	r3, r1
 8014744:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014746:	2b00      	cmp	r3, #0
 8014748:	daca      	bge.n	80146e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d01e      	beq.n	801478e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	891b      	ldrh	r3, [r3, #8]
 8014754:	461a      	mov	r2, r3
 8014756:	4b14      	ldr	r3, [pc, #80]	; (80147a8 <tcp_oos_insert_segment+0x10c>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	441a      	add	r2, r3
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	68db      	ldr	r3, [r3, #12]
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014764:	2b00      	cmp	r3, #0
 8014766:	dd12      	ble.n	801478e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	b29a      	uxth	r2, r3
 8014770:	4b0d      	ldr	r3, [pc, #52]	; (80147a8 <tcp_oos_insert_segment+0x10c>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	b29b      	uxth	r3, r3
 8014776:	1ad3      	subs	r3, r2, r3
 8014778:	b29a      	uxth	r2, r3
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	685a      	ldr	r2, [r3, #4]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	891b      	ldrh	r3, [r3, #8]
 8014786:	4619      	mov	r1, r3
 8014788:	4610      	mov	r0, r2
 801478a:	f7fc fb09 	bl	8010da0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	683a      	ldr	r2, [r7, #0]
 8014792:	601a      	str	r2, [r3, #0]
}
 8014794:	bf00      	nop
 8014796:	3714      	adds	r7, #20
 8014798:	46bd      	mov	sp, r7
 801479a:	bd90      	pop	{r4, r7, pc}
 801479c:	08026678 	.word	0x08026678
 80147a0:	08026938 	.word	0x08026938
 80147a4:	080266c4 	.word	0x080266c4
 80147a8:	20004f28 	.word	0x20004f28

080147ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80147ac:	b5b0      	push	{r4, r5, r7, lr}
 80147ae:	b086      	sub	sp, #24
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	607a      	str	r2, [r7, #4]
 80147b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80147ba:	e03e      	b.n	801483a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	685b      	ldr	r3, [r3, #4]
 80147ca:	4618      	mov	r0, r3
 80147cc:	f7fc fcfc 	bl	80111c8 <pbuf_clen>
 80147d0:	4603      	mov	r3, r0
 80147d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80147da:	8a7a      	ldrh	r2, [r7, #18]
 80147dc:	429a      	cmp	r2, r3
 80147de:	d906      	bls.n	80147ee <tcp_free_acked_segments+0x42>
 80147e0:	4b2a      	ldr	r3, [pc, #168]	; (801488c <tcp_free_acked_segments+0xe0>)
 80147e2:	f240 4257 	movw	r2, #1111	; 0x457
 80147e6:	492a      	ldr	r1, [pc, #168]	; (8014890 <tcp_free_acked_segments+0xe4>)
 80147e8:	482a      	ldr	r0, [pc, #168]	; (8014894 <tcp_free_acked_segments+0xe8>)
 80147ea:	f006 ffc5 	bl	801b778 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80147f4:	8a7b      	ldrh	r3, [r7, #18]
 80147f6:	1ad3      	subs	r3, r2, r3
 80147f8:	b29a      	uxth	r2, r3
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	891a      	ldrh	r2, [r3, #8]
 8014804:	4b24      	ldr	r3, [pc, #144]	; (8014898 <tcp_free_acked_segments+0xec>)
 8014806:	881b      	ldrh	r3, [r3, #0]
 8014808:	4413      	add	r3, r2
 801480a:	b29a      	uxth	r2, r3
 801480c:	4b22      	ldr	r3, [pc, #136]	; (8014898 <tcp_free_acked_segments+0xec>)
 801480e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014810:	6978      	ldr	r0, [r7, #20]
 8014812:	f7fe f8f0 	bl	80129f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801481c:	2b00      	cmp	r3, #0
 801481e:	d00c      	beq.n	801483a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d109      	bne.n	801483a <tcp_free_acked_segments+0x8e>
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d106      	bne.n	801483a <tcp_free_acked_segments+0x8e>
 801482c:	4b17      	ldr	r3, [pc, #92]	; (801488c <tcp_free_acked_segments+0xe0>)
 801482e:	f240 4261 	movw	r2, #1121	; 0x461
 8014832:	491a      	ldr	r1, [pc, #104]	; (801489c <tcp_free_acked_segments+0xf0>)
 8014834:	4817      	ldr	r0, [pc, #92]	; (8014894 <tcp_free_acked_segments+0xe8>)
 8014836:	f006 ff9f 	bl	801b778 <printf>
  while (seg_list != NULL &&
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d020      	beq.n	8014882 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	685b      	ldr	r3, [r3, #4]
 8014846:	4618      	mov	r0, r3
 8014848:	f7fb f8b3 	bl	800f9b2 <lwip_htonl>
 801484c:	4604      	mov	r4, r0
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	891b      	ldrh	r3, [r3, #8]
 8014852:	461d      	mov	r5, r3
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	899b      	ldrh	r3, [r3, #12]
 801485a:	b29b      	uxth	r3, r3
 801485c:	4618      	mov	r0, r3
 801485e:	f7fb f893 	bl	800f988 <lwip_htons>
 8014862:	4603      	mov	r3, r0
 8014864:	b2db      	uxtb	r3, r3
 8014866:	f003 0303 	and.w	r3, r3, #3
 801486a:	2b00      	cmp	r3, #0
 801486c:	d001      	beq.n	8014872 <tcp_free_acked_segments+0xc6>
 801486e:	2301      	movs	r3, #1
 8014870:	e000      	b.n	8014874 <tcp_free_acked_segments+0xc8>
 8014872:	2300      	movs	r3, #0
 8014874:	442b      	add	r3, r5
 8014876:	18e2      	adds	r2, r4, r3
 8014878:	4b09      	ldr	r3, [pc, #36]	; (80148a0 <tcp_free_acked_segments+0xf4>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801487e:	2b00      	cmp	r3, #0
 8014880:	dd9c      	ble.n	80147bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014882:	68bb      	ldr	r3, [r7, #8]
}
 8014884:	4618      	mov	r0, r3
 8014886:	3718      	adds	r7, #24
 8014888:	46bd      	mov	sp, r7
 801488a:	bdb0      	pop	{r4, r5, r7, pc}
 801488c:	08026678 	.word	0x08026678
 8014890:	08026960 	.word	0x08026960
 8014894:	080266c4 	.word	0x080266c4
 8014898:	20004f30 	.word	0x20004f30
 801489c:	08026988 	.word	0x08026988
 80148a0:	20004f2c 	.word	0x20004f2c

080148a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80148a4:	b5b0      	push	{r4, r5, r7, lr}
 80148a6:	b094      	sub	sp, #80	; 0x50
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80148ac:	2300      	movs	r3, #0
 80148ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d106      	bne.n	80148c4 <tcp_receive+0x20>
 80148b6:	4ba6      	ldr	r3, [pc, #664]	; (8014b50 <tcp_receive+0x2ac>)
 80148b8:	f240 427b 	movw	r2, #1147	; 0x47b
 80148bc:	49a5      	ldr	r1, [pc, #660]	; (8014b54 <tcp_receive+0x2b0>)
 80148be:	48a6      	ldr	r0, [pc, #664]	; (8014b58 <tcp_receive+0x2b4>)
 80148c0:	f006 ff5a 	bl	801b778 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	7d1b      	ldrb	r3, [r3, #20]
 80148c8:	2b03      	cmp	r3, #3
 80148ca:	d806      	bhi.n	80148da <tcp_receive+0x36>
 80148cc:	4ba0      	ldr	r3, [pc, #640]	; (8014b50 <tcp_receive+0x2ac>)
 80148ce:	f240 427c 	movw	r2, #1148	; 0x47c
 80148d2:	49a2      	ldr	r1, [pc, #648]	; (8014b5c <tcp_receive+0x2b8>)
 80148d4:	48a0      	ldr	r0, [pc, #640]	; (8014b58 <tcp_receive+0x2b4>)
 80148d6:	f006 ff4f 	bl	801b778 <printf>

  if (flags & TCP_ACK) {
 80148da:	4ba1      	ldr	r3, [pc, #644]	; (8014b60 <tcp_receive+0x2bc>)
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	f003 0310 	and.w	r3, r3, #16
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	f000 8263 	beq.w	8014dae <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80148ee:	461a      	mov	r2, r3
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148f4:	4413      	add	r3, r2
 80148f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80148fc:	4b99      	ldr	r3, [pc, #612]	; (8014b64 <tcp_receive+0x2c0>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	1ad3      	subs	r3, r2, r3
 8014902:	2b00      	cmp	r3, #0
 8014904:	db1b      	blt.n	801493e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801490a:	4b96      	ldr	r3, [pc, #600]	; (8014b64 <tcp_receive+0x2c0>)
 801490c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801490e:	429a      	cmp	r2, r3
 8014910:	d106      	bne.n	8014920 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014916:	4b94      	ldr	r3, [pc, #592]	; (8014b68 <tcp_receive+0x2c4>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	2b00      	cmp	r3, #0
 801491e:	db0e      	blt.n	801493e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014924:	4b90      	ldr	r3, [pc, #576]	; (8014b68 <tcp_receive+0x2c4>)
 8014926:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014928:	429a      	cmp	r2, r3
 801492a:	d125      	bne.n	8014978 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801492c:	4b8f      	ldr	r3, [pc, #572]	; (8014b6c <tcp_receive+0x2c8>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	89db      	ldrh	r3, [r3, #14]
 8014932:	b29a      	uxth	r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801493a:	429a      	cmp	r2, r3
 801493c:	d91c      	bls.n	8014978 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801493e:	4b8b      	ldr	r3, [pc, #556]	; (8014b6c <tcp_receive+0x2c8>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	89db      	ldrh	r3, [r3, #14]
 8014944:	b29a      	uxth	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014958:	429a      	cmp	r2, r3
 801495a:	d205      	bcs.n	8014968 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014968:	4b7e      	ldr	r3, [pc, #504]	; (8014b64 <tcp_receive+0x2c0>)
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014970:	4b7d      	ldr	r3, [pc, #500]	; (8014b68 <tcp_receive+0x2c4>)
 8014972:	681a      	ldr	r2, [r3, #0]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014978:	4b7b      	ldr	r3, [pc, #492]	; (8014b68 <tcp_receive+0x2c4>)
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014980:	1ad3      	subs	r3, r2, r3
 8014982:	2b00      	cmp	r3, #0
 8014984:	dc58      	bgt.n	8014a38 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014986:	4b7a      	ldr	r3, [pc, #488]	; (8014b70 <tcp_receive+0x2cc>)
 8014988:	881b      	ldrh	r3, [r3, #0]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d14b      	bne.n	8014a26 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014998:	4413      	add	r3, r2
 801499a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801499c:	429a      	cmp	r2, r3
 801499e:	d142      	bne.n	8014a26 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	db3d      	blt.n	8014a26 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80149ae:	4b6e      	ldr	r3, [pc, #440]	; (8014b68 <tcp_receive+0x2c4>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d137      	bne.n	8014a26 <tcp_receive+0x182>
              found_dupack = 1;
 80149b6:	2301      	movs	r3, #1
 80149b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80149c0:	2bff      	cmp	r3, #255	; 0xff
 80149c2:	d007      	beq.n	80149d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80149ca:	3301      	adds	r3, #1
 80149cc:	b2da      	uxtb	r2, r3
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80149da:	2b03      	cmp	r3, #3
 80149dc:	d91b      	bls.n	8014a16 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149e8:	4413      	add	r3, r2
 80149ea:	b29a      	uxth	r2, r3
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d30a      	bcc.n	8014a0c <tcp_receive+0x168>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a00:	4413      	add	r3, r2
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014a0a:	e004      	b.n	8014a16 <tcp_receive+0x172>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014a1c:	2b02      	cmp	r3, #2
 8014a1e:	d902      	bls.n	8014a26 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f002 fb41 	bl	80170a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	f040 8160 	bne.w	8014cee <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2200      	movs	r2, #0
 8014a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014a36:	e15a      	b.n	8014cee <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014a38:	4b4b      	ldr	r3, [pc, #300]	; (8014b68 <tcp_receive+0x2c4>)
 8014a3a:	681a      	ldr	r2, [r3, #0]
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a40:	1ad3      	subs	r3, r2, r3
 8014a42:	3b01      	subs	r3, #1
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	f2c0 814d 	blt.w	8014ce4 <tcp_receive+0x440>
 8014a4a:	4b47      	ldr	r3, [pc, #284]	; (8014b68 <tcp_receive+0x2c4>)
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a52:	1ad3      	subs	r3, r2, r3
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	f300 8145 	bgt.w	8014ce4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	8b5b      	ldrh	r3, [r3, #26]
 8014a5e:	f003 0304 	and.w	r3, r3, #4
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d010      	beq.n	8014a88 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	8b5b      	ldrh	r3, [r3, #26]
 8014a6a:	f023 0304 	bic.w	r3, r3, #4
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	2200      	movs	r2, #0
 8014a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014a96:	10db      	asrs	r3, r3, #3
 8014a98:	b21b      	sxth	r3, r3
 8014a9a:	b29a      	uxth	r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014aa2:	b29b      	uxth	r3, r3
 8014aa4:	4413      	add	r3, r2
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	b21a      	sxth	r2, r3
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014ab0:	4b2d      	ldr	r3, [pc, #180]	; (8014b68 <tcp_receive+0x2c4>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	b29a      	uxth	r2, r3
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	1ad3      	subs	r3, r2, r3
 8014abe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014ac8:	4b27      	ldr	r3, [pc, #156]	; (8014b68 <tcp_receive+0x2c4>)
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	7d1b      	ldrb	r3, [r3, #20]
 8014ad4:	2b03      	cmp	r3, #3
 8014ad6:	f240 8096 	bls.w	8014c06 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d244      	bcs.n	8014b74 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	8b5b      	ldrh	r3, [r3, #26]
 8014aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d001      	beq.n	8014afa <tcp_receive+0x256>
 8014af6:	2301      	movs	r3, #1
 8014af8:	e000      	b.n	8014afc <tcp_receive+0x258>
 8014afa:	2302      	movs	r3, #2
 8014afc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014b00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014b04:	b29a      	uxth	r2, r3
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b0a:	fb12 f303 	smulbb	r3, r2, r3
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b12:	4293      	cmp	r3, r2
 8014b14:	bf28      	it	cs
 8014b16:	4613      	movcs	r3, r2
 8014b18:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b22:	4413      	add	r3, r2
 8014b24:	b29a      	uxth	r2, r3
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d309      	bcc.n	8014b44 <tcp_receive+0x2a0>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b38:	4413      	add	r3, r2
 8014b3a:	b29a      	uxth	r2, r3
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014b42:	e060      	b.n	8014c06 <tcp_receive+0x362>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014b4e:	e05a      	b.n	8014c06 <tcp_receive+0x362>
 8014b50:	08026678 	.word	0x08026678
 8014b54:	080269a8 	.word	0x080269a8
 8014b58:	080266c4 	.word	0x080266c4
 8014b5c:	080269c4 	.word	0x080269c4
 8014b60:	20004f34 	.word	0x20004f34
 8014b64:	20004f28 	.word	0x20004f28
 8014b68:	20004f2c 	.word	0x20004f2c
 8014b6c:	20004f18 	.word	0x20004f18
 8014b70:	20004f32 	.word	0x20004f32
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014b7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014b7c:	4413      	add	r3, r2
 8014b7e:	b29a      	uxth	r2, r3
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d309      	bcc.n	8014b9e <tcp_receive+0x2fa>
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014b90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014b92:	4413      	add	r3, r2
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014b9c:	e004      	b.n	8014ba8 <tcp_receive+0x304>
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	d326      	bcc.n	8014c06 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014bc4:	1ad3      	subs	r3, r2, r3
 8014bc6:	b29a      	uxth	r2, r3
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bd8:	4413      	add	r3, r2
 8014bda:	b29a      	uxth	r2, r3
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d30a      	bcc.n	8014bfc <tcp_receive+0x358>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bf0:	4413      	add	r3, r2
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014bfa:	e004      	b.n	8014c06 <tcp_receive+0x362>
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c0e:	4a98      	ldr	r2, [pc, #608]	; (8014e70 <tcp_receive+0x5cc>)
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7ff fdcb 	bl	80147ac <tcp_free_acked_segments>
 8014c16:	4602      	mov	r2, r0
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c24:	4a93      	ldr	r2, [pc, #588]	; (8014e74 <tcp_receive+0x5d0>)
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7ff fdc0 	bl	80147ac <tcp_free_acked_segments>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d104      	bne.n	8014c44 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c40:	861a      	strh	r2, [r3, #48]	; 0x30
 8014c42:	e002      	b.n	8014c4a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d103      	bne.n	8014c60 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014c66:	4b84      	ldr	r3, [pc, #528]	; (8014e78 <tcp_receive+0x5d4>)
 8014c68:	881b      	ldrh	r3, [r3, #0]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	b29a      	uxth	r2, r3
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	8b5b      	ldrh	r3, [r3, #26]
 8014c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d035      	beq.n	8014cec <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d118      	bne.n	8014cba <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d00c      	beq.n	8014caa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7fa fe88 	bl	800f9b2 <lwip_htonl>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	dc20      	bgt.n	8014cec <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	8b5b      	ldrh	r3, [r3, #26]
 8014cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014cb8:	e018      	b.n	8014cec <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cc2:	68db      	ldr	r3, [r3, #12]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7fa fe73 	bl	800f9b2 <lwip_htonl>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	1ae3      	subs	r3, r4, r3
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	dc0b      	bgt.n	8014cec <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	8b5b      	ldrh	r3, [r3, #26]
 8014cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014ce2:	e003      	b.n	8014cec <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f002 fbcd 	bl	8017484 <tcp_send_empty_ack>
 8014cea:	e000      	b.n	8014cee <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014cec:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d05b      	beq.n	8014dae <tcp_receive+0x50a>
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014cfa:	4b60      	ldr	r3, [pc, #384]	; (8014e7c <tcp_receive+0x5d8>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	da54      	bge.n	8014dae <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014d04:	4b5e      	ldr	r3, [pc, #376]	; (8014e80 <tcp_receive+0x5dc>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	b29a      	uxth	r2, r3
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	1ad3      	subs	r3, r2, r3
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014d18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014d22:	10db      	asrs	r3, r3, #3
 8014d24:	b21b      	sxth	r3, r3
 8014d26:	b29b      	uxth	r3, r3
 8014d28:	1ad3      	subs	r3, r2, r3
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014d36:	b29a      	uxth	r2, r3
 8014d38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014d3c:	4413      	add	r3, r2
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	b21a      	sxth	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014d46:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	da05      	bge.n	8014d5a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8014d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014d52:	425b      	negs	r3, r3
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014d5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014d64:	109b      	asrs	r3, r3, #2
 8014d66:	b21b      	sxth	r3, r3
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	1ad3      	subs	r3, r2, r3
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014d78:	b29a      	uxth	r2, r3
 8014d7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014d7e:	4413      	add	r3, r2
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	b21a      	sxth	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014d8e:	10db      	asrs	r3, r3, #3
 8014d90:	b21b      	sxth	r3, r3
 8014d92:	b29a      	uxth	r2, r3
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	4413      	add	r3, r2
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	b21a      	sxth	r2, r3
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2200      	movs	r2, #0
 8014dac:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014dae:	4b35      	ldr	r3, [pc, #212]	; (8014e84 <tcp_receive+0x5e0>)
 8014db0:	881b      	ldrh	r3, [r3, #0]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	f000 84e1 	beq.w	801577a <tcp_receive+0xed6>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	7d1b      	ldrb	r3, [r3, #20]
 8014dbc:	2b06      	cmp	r3, #6
 8014dbe:	f200 84dc 	bhi.w	801577a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014dc6:	4b30      	ldr	r3, [pc, #192]	; (8014e88 <tcp_receive+0x5e4>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	1ad3      	subs	r3, r2, r3
 8014dcc:	3b01      	subs	r3, #1
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f2c0 808e 	blt.w	8014ef0 <tcp_receive+0x64c>
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014dd8:	4b2a      	ldr	r3, [pc, #168]	; (8014e84 <tcp_receive+0x5e0>)
 8014dda:	881b      	ldrh	r3, [r3, #0]
 8014ddc:	4619      	mov	r1, r3
 8014dde:	4b2a      	ldr	r3, [pc, #168]	; (8014e88 <tcp_receive+0x5e4>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	440b      	add	r3, r1
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	3301      	adds	r3, #1
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	f300 8081 	bgt.w	8014ef0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014dee:	4b27      	ldr	r3, [pc, #156]	; (8014e8c <tcp_receive+0x5e8>)
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014df8:	4b23      	ldr	r3, [pc, #140]	; (8014e88 <tcp_receive+0x5e4>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	1ad3      	subs	r3, r2, r3
 8014dfe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014e00:	4b22      	ldr	r3, [pc, #136]	; (8014e8c <tcp_receive+0x5e8>)
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d106      	bne.n	8014e16 <tcp_receive+0x572>
 8014e08:	4b21      	ldr	r3, [pc, #132]	; (8014e90 <tcp_receive+0x5ec>)
 8014e0a:	f240 5294 	movw	r2, #1428	; 0x594
 8014e0e:	4921      	ldr	r1, [pc, #132]	; (8014e94 <tcp_receive+0x5f0>)
 8014e10:	4821      	ldr	r0, [pc, #132]	; (8014e98 <tcp_receive+0x5f4>)
 8014e12:	f006 fcb1 	bl	801b778 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	d906      	bls.n	8014e2e <tcp_receive+0x58a>
 8014e20:	4b1b      	ldr	r3, [pc, #108]	; (8014e90 <tcp_receive+0x5ec>)
 8014e22:	f240 5295 	movw	r2, #1429	; 0x595
 8014e26:	491d      	ldr	r1, [pc, #116]	; (8014e9c <tcp_receive+0x5f8>)
 8014e28:	481b      	ldr	r0, [pc, #108]	; (8014e98 <tcp_receive+0x5f4>)
 8014e2a:	f006 fca5 	bl	801b778 <printf>
      off = (u16_t)off32;
 8014e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014e34:	4b15      	ldr	r3, [pc, #84]	; (8014e8c <tcp_receive+0x5e8>)
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	891b      	ldrh	r3, [r3, #8]
 8014e3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d906      	bls.n	8014e50 <tcp_receive+0x5ac>
 8014e42:	4b13      	ldr	r3, [pc, #76]	; (8014e90 <tcp_receive+0x5ec>)
 8014e44:	f240 5297 	movw	r2, #1431	; 0x597
 8014e48:	4915      	ldr	r1, [pc, #84]	; (8014ea0 <tcp_receive+0x5fc>)
 8014e4a:	4813      	ldr	r0, [pc, #76]	; (8014e98 <tcp_receive+0x5f4>)
 8014e4c:	f006 fc94 	bl	801b778 <printf>
      inseg.len -= off;
 8014e50:	4b0e      	ldr	r3, [pc, #56]	; (8014e8c <tcp_receive+0x5e8>)
 8014e52:	891a      	ldrh	r2, [r3, #8]
 8014e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e58:	1ad3      	subs	r3, r2, r3
 8014e5a:	b29a      	uxth	r2, r3
 8014e5c:	4b0b      	ldr	r3, [pc, #44]	; (8014e8c <tcp_receive+0x5e8>)
 8014e5e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014e60:	4b0a      	ldr	r3, [pc, #40]	; (8014e8c <tcp_receive+0x5e8>)
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	891a      	ldrh	r2, [r3, #8]
 8014e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e6a:	1ad3      	subs	r3, r2, r3
 8014e6c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014e6e:	e029      	b.n	8014ec4 <tcp_receive+0x620>
 8014e70:	080269e0 	.word	0x080269e0
 8014e74:	080269e8 	.word	0x080269e8
 8014e78:	20004f30 	.word	0x20004f30
 8014e7c:	20004f2c 	.word	0x20004f2c
 8014e80:	2000be44 	.word	0x2000be44
 8014e84:	20004f32 	.word	0x20004f32
 8014e88:	20004f28 	.word	0x20004f28
 8014e8c:	20004f08 	.word	0x20004f08
 8014e90:	08026678 	.word	0x08026678
 8014e94:	080269f0 	.word	0x080269f0
 8014e98:	080266c4 	.word	0x080266c4
 8014e9c:	08026a00 	.word	0x08026a00
 8014ea0:	08026a10 	.word	0x08026a10
        off -= p->len;
 8014ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ea6:	895b      	ldrh	r3, [r3, #10]
 8014ea8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014eac:	1ad3      	subs	r3, r2, r3
 8014eae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eb4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014eb6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eba:	2200      	movs	r2, #0
 8014ebc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ec6:	895b      	ldrh	r3, [r3, #10]
 8014ec8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d8e9      	bhi.n	8014ea4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014ed0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014ed8:	f7fc f862 	bl	8010fa0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee0:	4a91      	ldr	r2, [pc, #580]	; (8015128 <tcp_receive+0x884>)
 8014ee2:	6013      	str	r3, [r2, #0]
 8014ee4:	4b91      	ldr	r3, [pc, #580]	; (801512c <tcp_receive+0x888>)
 8014ee6:	68db      	ldr	r3, [r3, #12]
 8014ee8:	4a8f      	ldr	r2, [pc, #572]	; (8015128 <tcp_receive+0x884>)
 8014eea:	6812      	ldr	r2, [r2, #0]
 8014eec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014eee:	e00d      	b.n	8014f0c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014ef0:	4b8d      	ldr	r3, [pc, #564]	; (8015128 <tcp_receive+0x884>)
 8014ef2:	681a      	ldr	r2, [r3, #0]
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef8:	1ad3      	subs	r3, r2, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	da06      	bge.n	8014f0c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	8b5b      	ldrh	r3, [r3, #26]
 8014f02:	f043 0302 	orr.w	r3, r3, #2
 8014f06:	b29a      	uxth	r2, r3
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014f0c:	4b86      	ldr	r3, [pc, #536]	; (8015128 <tcp_receive+0x884>)
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f14:	1ad3      	subs	r3, r2, r3
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	f2c0 842a 	blt.w	8015770 <tcp_receive+0xecc>
 8014f1c:	4b82      	ldr	r3, [pc, #520]	; (8015128 <tcp_receive+0x884>)
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f24:	6879      	ldr	r1, [r7, #4]
 8014f26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f28:	440b      	add	r3, r1
 8014f2a:	1ad3      	subs	r3, r2, r3
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	f300 841e 	bgt.w	8015770 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f38:	4b7b      	ldr	r3, [pc, #492]	; (8015128 <tcp_receive+0x884>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	f040 829a 	bne.w	8015476 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014f42:	4b7a      	ldr	r3, [pc, #488]	; (801512c <tcp_receive+0x888>)
 8014f44:	891c      	ldrh	r4, [r3, #8]
 8014f46:	4b79      	ldr	r3, [pc, #484]	; (801512c <tcp_receive+0x888>)
 8014f48:	68db      	ldr	r3, [r3, #12]
 8014f4a:	899b      	ldrh	r3, [r3, #12]
 8014f4c:	b29b      	uxth	r3, r3
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7fa fd1a 	bl	800f988 <lwip_htons>
 8014f54:	4603      	mov	r3, r0
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	f003 0303 	and.w	r3, r3, #3
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d001      	beq.n	8014f64 <tcp_receive+0x6c0>
 8014f60:	2301      	movs	r3, #1
 8014f62:	e000      	b.n	8014f66 <tcp_receive+0x6c2>
 8014f64:	2300      	movs	r3, #0
 8014f66:	4423      	add	r3, r4
 8014f68:	b29a      	uxth	r2, r3
 8014f6a:	4b71      	ldr	r3, [pc, #452]	; (8015130 <tcp_receive+0x88c>)
 8014f6c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014f72:	4b6f      	ldr	r3, [pc, #444]	; (8015130 <tcp_receive+0x88c>)
 8014f74:	881b      	ldrh	r3, [r3, #0]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d275      	bcs.n	8015066 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014f7a:	4b6c      	ldr	r3, [pc, #432]	; (801512c <tcp_receive+0x888>)
 8014f7c:	68db      	ldr	r3, [r3, #12]
 8014f7e:	899b      	ldrh	r3, [r3, #12]
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7fa fd00 	bl	800f988 <lwip_htons>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	b2db      	uxtb	r3, r3
 8014f8c:	f003 0301 	and.w	r3, r3, #1
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d01f      	beq.n	8014fd4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014f94:	4b65      	ldr	r3, [pc, #404]	; (801512c <tcp_receive+0x888>)
 8014f96:	68db      	ldr	r3, [r3, #12]
 8014f98:	899b      	ldrh	r3, [r3, #12]
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	b21b      	sxth	r3, r3
 8014f9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014fa2:	b21c      	sxth	r4, r3
 8014fa4:	4b61      	ldr	r3, [pc, #388]	; (801512c <tcp_receive+0x888>)
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	899b      	ldrh	r3, [r3, #12]
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7fa fceb 	bl	800f988 <lwip_htons>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	b2db      	uxtb	r3, r3
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7fa fce2 	bl	800f988 <lwip_htons>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	b21b      	sxth	r3, r3
 8014fc8:	4323      	orrs	r3, r4
 8014fca:	b21a      	sxth	r2, r3
 8014fcc:	4b57      	ldr	r3, [pc, #348]	; (801512c <tcp_receive+0x888>)
 8014fce:	68db      	ldr	r3, [r3, #12]
 8014fd0:	b292      	uxth	r2, r2
 8014fd2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014fd8:	4b54      	ldr	r3, [pc, #336]	; (801512c <tcp_receive+0x888>)
 8014fda:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014fdc:	4b53      	ldr	r3, [pc, #332]	; (801512c <tcp_receive+0x888>)
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	899b      	ldrh	r3, [r3, #12]
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7fa fccf 	bl	800f988 <lwip_htons>
 8014fea:	4603      	mov	r3, r0
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	f003 0302 	and.w	r3, r3, #2
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d005      	beq.n	8015002 <tcp_receive+0x75e>
            inseg.len -= 1;
 8014ff6:	4b4d      	ldr	r3, [pc, #308]	; (801512c <tcp_receive+0x888>)
 8014ff8:	891b      	ldrh	r3, [r3, #8]
 8014ffa:	3b01      	subs	r3, #1
 8014ffc:	b29a      	uxth	r2, r3
 8014ffe:	4b4b      	ldr	r3, [pc, #300]	; (801512c <tcp_receive+0x888>)
 8015000:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015002:	4b4a      	ldr	r3, [pc, #296]	; (801512c <tcp_receive+0x888>)
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	4a49      	ldr	r2, [pc, #292]	; (801512c <tcp_receive+0x888>)
 8015008:	8912      	ldrh	r2, [r2, #8]
 801500a:	4611      	mov	r1, r2
 801500c:	4618      	mov	r0, r3
 801500e:	f7fb fec7 	bl	8010da0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015012:	4b46      	ldr	r3, [pc, #280]	; (801512c <tcp_receive+0x888>)
 8015014:	891c      	ldrh	r4, [r3, #8]
 8015016:	4b45      	ldr	r3, [pc, #276]	; (801512c <tcp_receive+0x888>)
 8015018:	68db      	ldr	r3, [r3, #12]
 801501a:	899b      	ldrh	r3, [r3, #12]
 801501c:	b29b      	uxth	r3, r3
 801501e:	4618      	mov	r0, r3
 8015020:	f7fa fcb2 	bl	800f988 <lwip_htons>
 8015024:	4603      	mov	r3, r0
 8015026:	b2db      	uxtb	r3, r3
 8015028:	f003 0303 	and.w	r3, r3, #3
 801502c:	2b00      	cmp	r3, #0
 801502e:	d001      	beq.n	8015034 <tcp_receive+0x790>
 8015030:	2301      	movs	r3, #1
 8015032:	e000      	b.n	8015036 <tcp_receive+0x792>
 8015034:	2300      	movs	r3, #0
 8015036:	4423      	add	r3, r4
 8015038:	b29a      	uxth	r2, r3
 801503a:	4b3d      	ldr	r3, [pc, #244]	; (8015130 <tcp_receive+0x88c>)
 801503c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801503e:	4b3c      	ldr	r3, [pc, #240]	; (8015130 <tcp_receive+0x88c>)
 8015040:	881b      	ldrh	r3, [r3, #0]
 8015042:	461a      	mov	r2, r3
 8015044:	4b38      	ldr	r3, [pc, #224]	; (8015128 <tcp_receive+0x884>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	441a      	add	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801504e:	6879      	ldr	r1, [r7, #4]
 8015050:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015052:	440b      	add	r3, r1
 8015054:	429a      	cmp	r2, r3
 8015056:	d006      	beq.n	8015066 <tcp_receive+0x7c2>
 8015058:	4b36      	ldr	r3, [pc, #216]	; (8015134 <tcp_receive+0x890>)
 801505a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801505e:	4936      	ldr	r1, [pc, #216]	; (8015138 <tcp_receive+0x894>)
 8015060:	4836      	ldr	r0, [pc, #216]	; (801513c <tcp_receive+0x898>)
 8015062:	f006 fb89 	bl	801b778 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801506a:	2b00      	cmp	r3, #0
 801506c:	f000 80e7 	beq.w	801523e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015070:	4b2e      	ldr	r3, [pc, #184]	; (801512c <tcp_receive+0x888>)
 8015072:	68db      	ldr	r3, [r3, #12]
 8015074:	899b      	ldrh	r3, [r3, #12]
 8015076:	b29b      	uxth	r3, r3
 8015078:	4618      	mov	r0, r3
 801507a:	f7fa fc85 	bl	800f988 <lwip_htons>
 801507e:	4603      	mov	r3, r0
 8015080:	b2db      	uxtb	r3, r3
 8015082:	f003 0301 	and.w	r3, r3, #1
 8015086:	2b00      	cmp	r3, #0
 8015088:	d010      	beq.n	80150ac <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801508a:	e00a      	b.n	80150a2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015090:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015096:	681a      	ldr	r2, [r3, #0]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801509c:	68f8      	ldr	r0, [r7, #12]
 801509e:	f7fd fcaa 	bl	80129f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d1f0      	bne.n	801508c <tcp_receive+0x7e8>
 80150aa:	e0c8      	b.n	801523e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150b0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80150b2:	e052      	b.n	801515a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80150b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	899b      	ldrh	r3, [r3, #12]
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	4618      	mov	r0, r3
 80150be:	f7fa fc63 	bl	800f988 <lwip_htons>
 80150c2:	4603      	mov	r3, r0
 80150c4:	b2db      	uxtb	r3, r3
 80150c6:	f003 0301 	and.w	r3, r3, #1
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d03d      	beq.n	801514a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80150ce:	4b17      	ldr	r3, [pc, #92]	; (801512c <tcp_receive+0x888>)
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	899b      	ldrh	r3, [r3, #12]
 80150d4:	b29b      	uxth	r3, r3
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7fa fc56 	bl	800f988 <lwip_htons>
 80150dc:	4603      	mov	r3, r0
 80150de:	b2db      	uxtb	r3, r3
 80150e0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d130      	bne.n	801514a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80150e8:	4b10      	ldr	r3, [pc, #64]	; (801512c <tcp_receive+0x888>)
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	899b      	ldrh	r3, [r3, #12]
 80150ee:	b29c      	uxth	r4, r3
 80150f0:	2001      	movs	r0, #1
 80150f2:	f7fa fc49 	bl	800f988 <lwip_htons>
 80150f6:	4603      	mov	r3, r0
 80150f8:	461a      	mov	r2, r3
 80150fa:	4b0c      	ldr	r3, [pc, #48]	; (801512c <tcp_receive+0x888>)
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	4322      	orrs	r2, r4
 8015100:	b292      	uxth	r2, r2
 8015102:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015104:	4b09      	ldr	r3, [pc, #36]	; (801512c <tcp_receive+0x888>)
 8015106:	891c      	ldrh	r4, [r3, #8]
 8015108:	4b08      	ldr	r3, [pc, #32]	; (801512c <tcp_receive+0x888>)
 801510a:	68db      	ldr	r3, [r3, #12]
 801510c:	899b      	ldrh	r3, [r3, #12]
 801510e:	b29b      	uxth	r3, r3
 8015110:	4618      	mov	r0, r3
 8015112:	f7fa fc39 	bl	800f988 <lwip_htons>
 8015116:	4603      	mov	r3, r0
 8015118:	b2db      	uxtb	r3, r3
 801511a:	f003 0303 	and.w	r3, r3, #3
 801511e:	2b00      	cmp	r3, #0
 8015120:	d00e      	beq.n	8015140 <tcp_receive+0x89c>
 8015122:	2301      	movs	r3, #1
 8015124:	e00d      	b.n	8015142 <tcp_receive+0x89e>
 8015126:	bf00      	nop
 8015128:	20004f28 	.word	0x20004f28
 801512c:	20004f08 	.word	0x20004f08
 8015130:	20004f32 	.word	0x20004f32
 8015134:	08026678 	.word	0x08026678
 8015138:	08026a20 	.word	0x08026a20
 801513c:	080266c4 	.word	0x080266c4
 8015140:	2300      	movs	r3, #0
 8015142:	4423      	add	r3, r4
 8015144:	b29a      	uxth	r2, r3
 8015146:	4b98      	ldr	r3, [pc, #608]	; (80153a8 <tcp_receive+0xb04>)
 8015148:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801514c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801514e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015154:	6938      	ldr	r0, [r7, #16]
 8015156:	f7fd fc4e 	bl	80129f6 <tcp_seg_free>
            while (next &&
 801515a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801515c:	2b00      	cmp	r3, #0
 801515e:	d00e      	beq.n	801517e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015160:	4b91      	ldr	r3, [pc, #580]	; (80153a8 <tcp_receive+0xb04>)
 8015162:	881b      	ldrh	r3, [r3, #0]
 8015164:	461a      	mov	r2, r3
 8015166:	4b91      	ldr	r3, [pc, #580]	; (80153ac <tcp_receive+0xb08>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	441a      	add	r2, r3
 801516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801516e:	68db      	ldr	r3, [r3, #12]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015174:	8909      	ldrh	r1, [r1, #8]
 8015176:	440b      	add	r3, r1
 8015178:	1ad3      	subs	r3, r2, r3
            while (next &&
 801517a:	2b00      	cmp	r3, #0
 801517c:	da9a      	bge.n	80150b4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015180:	2b00      	cmp	r3, #0
 8015182:	d059      	beq.n	8015238 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015184:	4b88      	ldr	r3, [pc, #544]	; (80153a8 <tcp_receive+0xb04>)
 8015186:	881b      	ldrh	r3, [r3, #0]
 8015188:	461a      	mov	r2, r3
 801518a:	4b88      	ldr	r3, [pc, #544]	; (80153ac <tcp_receive+0xb08>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	441a      	add	r2, r3
 8015190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	685b      	ldr	r3, [r3, #4]
 8015196:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015198:	2b00      	cmp	r3, #0
 801519a:	dd4d      	ble.n	8015238 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801519c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801519e:	68db      	ldr	r3, [r3, #12]
 80151a0:	685b      	ldr	r3, [r3, #4]
 80151a2:	b29a      	uxth	r2, r3
 80151a4:	4b81      	ldr	r3, [pc, #516]	; (80153ac <tcp_receive+0xb08>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	1ad3      	subs	r3, r2, r3
 80151ac:	b29a      	uxth	r2, r3
 80151ae:	4b80      	ldr	r3, [pc, #512]	; (80153b0 <tcp_receive+0xb0c>)
 80151b0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80151b2:	4b7f      	ldr	r3, [pc, #508]	; (80153b0 <tcp_receive+0xb0c>)
 80151b4:	68db      	ldr	r3, [r3, #12]
 80151b6:	899b      	ldrh	r3, [r3, #12]
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7fa fbe4 	bl	800f988 <lwip_htons>
 80151c0:	4603      	mov	r3, r0
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	f003 0302 	and.w	r3, r3, #2
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d005      	beq.n	80151d8 <tcp_receive+0x934>
                inseg.len -= 1;
 80151cc:	4b78      	ldr	r3, [pc, #480]	; (80153b0 <tcp_receive+0xb0c>)
 80151ce:	891b      	ldrh	r3, [r3, #8]
 80151d0:	3b01      	subs	r3, #1
 80151d2:	b29a      	uxth	r2, r3
 80151d4:	4b76      	ldr	r3, [pc, #472]	; (80153b0 <tcp_receive+0xb0c>)
 80151d6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80151d8:	4b75      	ldr	r3, [pc, #468]	; (80153b0 <tcp_receive+0xb0c>)
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	4a74      	ldr	r2, [pc, #464]	; (80153b0 <tcp_receive+0xb0c>)
 80151de:	8912      	ldrh	r2, [r2, #8]
 80151e0:	4611      	mov	r1, r2
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7fb fddc 	bl	8010da0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80151e8:	4b71      	ldr	r3, [pc, #452]	; (80153b0 <tcp_receive+0xb0c>)
 80151ea:	891c      	ldrh	r4, [r3, #8]
 80151ec:	4b70      	ldr	r3, [pc, #448]	; (80153b0 <tcp_receive+0xb0c>)
 80151ee:	68db      	ldr	r3, [r3, #12]
 80151f0:	899b      	ldrh	r3, [r3, #12]
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7fa fbc7 	bl	800f988 <lwip_htons>
 80151fa:	4603      	mov	r3, r0
 80151fc:	b2db      	uxtb	r3, r3
 80151fe:	f003 0303 	and.w	r3, r3, #3
 8015202:	2b00      	cmp	r3, #0
 8015204:	d001      	beq.n	801520a <tcp_receive+0x966>
 8015206:	2301      	movs	r3, #1
 8015208:	e000      	b.n	801520c <tcp_receive+0x968>
 801520a:	2300      	movs	r3, #0
 801520c:	4423      	add	r3, r4
 801520e:	b29a      	uxth	r2, r3
 8015210:	4b65      	ldr	r3, [pc, #404]	; (80153a8 <tcp_receive+0xb04>)
 8015212:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015214:	4b64      	ldr	r3, [pc, #400]	; (80153a8 <tcp_receive+0xb04>)
 8015216:	881b      	ldrh	r3, [r3, #0]
 8015218:	461a      	mov	r2, r3
 801521a:	4b64      	ldr	r3, [pc, #400]	; (80153ac <tcp_receive+0xb08>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	441a      	add	r2, r3
 8015220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015222:	68db      	ldr	r3, [r3, #12]
 8015224:	685b      	ldr	r3, [r3, #4]
 8015226:	429a      	cmp	r2, r3
 8015228:	d006      	beq.n	8015238 <tcp_receive+0x994>
 801522a:	4b62      	ldr	r3, [pc, #392]	; (80153b4 <tcp_receive+0xb10>)
 801522c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015230:	4961      	ldr	r1, [pc, #388]	; (80153b8 <tcp_receive+0xb14>)
 8015232:	4862      	ldr	r0, [pc, #392]	; (80153bc <tcp_receive+0xb18>)
 8015234:	f006 faa0 	bl	801b778 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801523c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801523e:	4b5a      	ldr	r3, [pc, #360]	; (80153a8 <tcp_receive+0xb04>)
 8015240:	881b      	ldrh	r3, [r3, #0]
 8015242:	461a      	mov	r2, r3
 8015244:	4b59      	ldr	r3, [pc, #356]	; (80153ac <tcp_receive+0xb08>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	441a      	add	r2, r3
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015252:	4b55      	ldr	r3, [pc, #340]	; (80153a8 <tcp_receive+0xb04>)
 8015254:	881b      	ldrh	r3, [r3, #0]
 8015256:	429a      	cmp	r2, r3
 8015258:	d206      	bcs.n	8015268 <tcp_receive+0x9c4>
 801525a:	4b56      	ldr	r3, [pc, #344]	; (80153b4 <tcp_receive+0xb10>)
 801525c:	f240 6207 	movw	r2, #1543	; 0x607
 8015260:	4957      	ldr	r1, [pc, #348]	; (80153c0 <tcp_receive+0xb1c>)
 8015262:	4856      	ldr	r0, [pc, #344]	; (80153bc <tcp_receive+0xb18>)
 8015264:	f006 fa88 	bl	801b778 <printf>
        pcb->rcv_wnd -= tcplen;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801526c:	4b4e      	ldr	r3, [pc, #312]	; (80153a8 <tcp_receive+0xb04>)
 801526e:	881b      	ldrh	r3, [r3, #0]
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	b29a      	uxth	r2, r3
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f7fc fe97 	bl	8011fac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801527e:	4b4c      	ldr	r3, [pc, #304]	; (80153b0 <tcp_receive+0xb0c>)
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	891b      	ldrh	r3, [r3, #8]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d006      	beq.n	8015296 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015288:	4b49      	ldr	r3, [pc, #292]	; (80153b0 <tcp_receive+0xb0c>)
 801528a:	685b      	ldr	r3, [r3, #4]
 801528c:	4a4d      	ldr	r2, [pc, #308]	; (80153c4 <tcp_receive+0xb20>)
 801528e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015290:	4b47      	ldr	r3, [pc, #284]	; (80153b0 <tcp_receive+0xb0c>)
 8015292:	2200      	movs	r2, #0
 8015294:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015296:	4b46      	ldr	r3, [pc, #280]	; (80153b0 <tcp_receive+0xb0c>)
 8015298:	68db      	ldr	r3, [r3, #12]
 801529a:	899b      	ldrh	r3, [r3, #12]
 801529c:	b29b      	uxth	r3, r3
 801529e:	4618      	mov	r0, r3
 80152a0:	f7fa fb72 	bl	800f988 <lwip_htons>
 80152a4:	4603      	mov	r3, r0
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	f003 0301 	and.w	r3, r3, #1
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	f000 80b8 	beq.w	8015422 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80152b2:	4b45      	ldr	r3, [pc, #276]	; (80153c8 <tcp_receive+0xb24>)
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	f043 0320 	orr.w	r3, r3, #32
 80152ba:	b2da      	uxtb	r2, r3
 80152bc:	4b42      	ldr	r3, [pc, #264]	; (80153c8 <tcp_receive+0xb24>)
 80152be:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80152c0:	e0af      	b.n	8015422 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152c6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152cc:	68db      	ldr	r3, [r3, #12]
 80152ce:	685b      	ldr	r3, [r3, #4]
 80152d0:	4a36      	ldr	r2, [pc, #216]	; (80153ac <tcp_receive+0xb08>)
 80152d2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	891b      	ldrh	r3, [r3, #8]
 80152d8:	461c      	mov	r4, r3
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	68db      	ldr	r3, [r3, #12]
 80152de:	899b      	ldrh	r3, [r3, #12]
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fa fb50 	bl	800f988 <lwip_htons>
 80152e8:	4603      	mov	r3, r0
 80152ea:	b2db      	uxtb	r3, r3
 80152ec:	f003 0303 	and.w	r3, r3, #3
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d001      	beq.n	80152f8 <tcp_receive+0xa54>
 80152f4:	2301      	movs	r3, #1
 80152f6:	e000      	b.n	80152fa <tcp_receive+0xa56>
 80152f8:	2300      	movs	r3, #0
 80152fa:	191a      	adds	r2, r3, r4
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015300:	441a      	add	r2, r3
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801530a:	461c      	mov	r4, r3
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	891b      	ldrh	r3, [r3, #8]
 8015310:	461d      	mov	r5, r3
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	68db      	ldr	r3, [r3, #12]
 8015316:	899b      	ldrh	r3, [r3, #12]
 8015318:	b29b      	uxth	r3, r3
 801531a:	4618      	mov	r0, r3
 801531c:	f7fa fb34 	bl	800f988 <lwip_htons>
 8015320:	4603      	mov	r3, r0
 8015322:	b2db      	uxtb	r3, r3
 8015324:	f003 0303 	and.w	r3, r3, #3
 8015328:	2b00      	cmp	r3, #0
 801532a:	d001      	beq.n	8015330 <tcp_receive+0xa8c>
 801532c:	2301      	movs	r3, #1
 801532e:	e000      	b.n	8015332 <tcp_receive+0xa8e>
 8015330:	2300      	movs	r3, #0
 8015332:	442b      	add	r3, r5
 8015334:	429c      	cmp	r4, r3
 8015336:	d206      	bcs.n	8015346 <tcp_receive+0xaa2>
 8015338:	4b1e      	ldr	r3, [pc, #120]	; (80153b4 <tcp_receive+0xb10>)
 801533a:	f240 622b 	movw	r2, #1579	; 0x62b
 801533e:	4923      	ldr	r1, [pc, #140]	; (80153cc <tcp_receive+0xb28>)
 8015340:	481e      	ldr	r0, [pc, #120]	; (80153bc <tcp_receive+0xb18>)
 8015342:	f006 fa19 	bl	801b778 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	891b      	ldrh	r3, [r3, #8]
 801534a:	461c      	mov	r4, r3
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	68db      	ldr	r3, [r3, #12]
 8015350:	899b      	ldrh	r3, [r3, #12]
 8015352:	b29b      	uxth	r3, r3
 8015354:	4618      	mov	r0, r3
 8015356:	f7fa fb17 	bl	800f988 <lwip_htons>
 801535a:	4603      	mov	r3, r0
 801535c:	b2db      	uxtb	r3, r3
 801535e:	f003 0303 	and.w	r3, r3, #3
 8015362:	2b00      	cmp	r3, #0
 8015364:	d001      	beq.n	801536a <tcp_receive+0xac6>
 8015366:	2301      	movs	r3, #1
 8015368:	e000      	b.n	801536c <tcp_receive+0xac8>
 801536a:	2300      	movs	r3, #0
 801536c:	1919      	adds	r1, r3, r4
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015372:	b28b      	uxth	r3, r1
 8015374:	1ad3      	subs	r3, r2, r3
 8015376:	b29a      	uxth	r2, r3
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7fc fe15 	bl	8011fac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	891b      	ldrh	r3, [r3, #8]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d028      	beq.n	80153de <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801538c:	4b0d      	ldr	r3, [pc, #52]	; (80153c4 <tcp_receive+0xb20>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d01d      	beq.n	80153d0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015394:	4b0b      	ldr	r3, [pc, #44]	; (80153c4 <tcp_receive+0xb20>)
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	685b      	ldr	r3, [r3, #4]
 801539c:	4619      	mov	r1, r3
 801539e:	4610      	mov	r0, r2
 80153a0:	f7fb ff52 	bl	8011248 <pbuf_cat>
 80153a4:	e018      	b.n	80153d8 <tcp_receive+0xb34>
 80153a6:	bf00      	nop
 80153a8:	20004f32 	.word	0x20004f32
 80153ac:	20004f28 	.word	0x20004f28
 80153b0:	20004f08 	.word	0x20004f08
 80153b4:	08026678 	.word	0x08026678
 80153b8:	08026a58 	.word	0x08026a58
 80153bc:	080266c4 	.word	0x080266c4
 80153c0:	08026a94 	.word	0x08026a94
 80153c4:	20004f38 	.word	0x20004f38
 80153c8:	20004f35 	.word	0x20004f35
 80153cc:	08026ab4 	.word	0x08026ab4
            } else {
              recv_data = cseg->p;
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	4a70      	ldr	r2, [pc, #448]	; (8015598 <tcp_receive+0xcf4>)
 80153d6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	2200      	movs	r2, #0
 80153dc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	68db      	ldr	r3, [r3, #12]
 80153e2:	899b      	ldrh	r3, [r3, #12]
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fa face 	bl	800f988 <lwip_htons>
 80153ec:	4603      	mov	r3, r0
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	f003 0301 	and.w	r3, r3, #1
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d00d      	beq.n	8015414 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80153f8:	4b68      	ldr	r3, [pc, #416]	; (801559c <tcp_receive+0xcf8>)
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	f043 0320 	orr.w	r3, r3, #32
 8015400:	b2da      	uxtb	r2, r3
 8015402:	4b66      	ldr	r3, [pc, #408]	; (801559c <tcp_receive+0xcf8>)
 8015404:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	7d1b      	ldrb	r3, [r3, #20]
 801540a:	2b04      	cmp	r3, #4
 801540c:	d102      	bne.n	8015414 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2207      	movs	r2, #7
 8015412:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801541c:	68b8      	ldr	r0, [r7, #8]
 801541e:	f7fd faea 	bl	80129f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015426:	2b00      	cmp	r3, #0
 8015428:	d008      	beq.n	801543c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801542e:	68db      	ldr	r3, [r3, #12]
 8015430:	685a      	ldr	r2, [r3, #4]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015436:	429a      	cmp	r2, r3
 8015438:	f43f af43 	beq.w	80152c2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	8b5b      	ldrh	r3, [r3, #26]
 8015440:	f003 0301 	and.w	r3, r3, #1
 8015444:	2b00      	cmp	r3, #0
 8015446:	d00e      	beq.n	8015466 <tcp_receive+0xbc2>
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	8b5b      	ldrh	r3, [r3, #26]
 801544c:	f023 0301 	bic.w	r3, r3, #1
 8015450:	b29a      	uxth	r2, r3
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	835a      	strh	r2, [r3, #26]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	8b5b      	ldrh	r3, [r3, #26]
 801545a:	f043 0302 	orr.w	r3, r3, #2
 801545e:	b29a      	uxth	r2, r3
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015464:	e188      	b.n	8015778 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	8b5b      	ldrh	r3, [r3, #26]
 801546a:	f043 0301 	orr.w	r3, r3, #1
 801546e:	b29a      	uxth	r2, r3
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015474:	e180      	b.n	8015778 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801547a:	2b00      	cmp	r3, #0
 801547c:	d106      	bne.n	801548c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801547e:	4848      	ldr	r0, [pc, #288]	; (80155a0 <tcp_receive+0xcfc>)
 8015480:	f7fd faf0 	bl	8012a64 <tcp_seg_copy>
 8015484:	4602      	mov	r2, r0
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	675a      	str	r2, [r3, #116]	; 0x74
 801548a:	e16d      	b.n	8015768 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801548c:	2300      	movs	r3, #0
 801548e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015494:	63bb      	str	r3, [r7, #56]	; 0x38
 8015496:	e157      	b.n	8015748 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8015498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801549a:	68db      	ldr	r3, [r3, #12]
 801549c:	685a      	ldr	r2, [r3, #4]
 801549e:	4b41      	ldr	r3, [pc, #260]	; (80155a4 <tcp_receive+0xd00>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d11d      	bne.n	80154e2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80154a6:	4b3e      	ldr	r3, [pc, #248]	; (80155a0 <tcp_receive+0xcfc>)
 80154a8:	891a      	ldrh	r2, [r3, #8]
 80154aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ac:	891b      	ldrh	r3, [r3, #8]
 80154ae:	429a      	cmp	r2, r3
 80154b0:	f240 814f 	bls.w	8015752 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80154b4:	483a      	ldr	r0, [pc, #232]	; (80155a0 <tcp_receive+0xcfc>)
 80154b6:	f7fd fad5 	bl	8012a64 <tcp_seg_copy>
 80154ba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	f000 8149 	beq.w	8015756 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80154c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d003      	beq.n	80154d2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80154ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154cc:	697a      	ldr	r2, [r7, #20]
 80154ce:	601a      	str	r2, [r3, #0]
 80154d0:	e002      	b.n	80154d8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	697a      	ldr	r2, [r7, #20]
 80154d6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80154d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80154da:	6978      	ldr	r0, [r7, #20]
 80154dc:	f7ff f8de 	bl	801469c <tcp_oos_insert_segment>
                }
                break;
 80154e0:	e139      	b.n	8015756 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80154e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d117      	bne.n	8015518 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80154e8:	4b2e      	ldr	r3, [pc, #184]	; (80155a4 <tcp_receive+0xd00>)
 80154ea:	681a      	ldr	r2, [r3, #0]
 80154ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	685b      	ldr	r3, [r3, #4]
 80154f2:	1ad3      	subs	r3, r2, r3
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	da57      	bge.n	80155a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80154f8:	4829      	ldr	r0, [pc, #164]	; (80155a0 <tcp_receive+0xcfc>)
 80154fa:	f7fd fab3 	bl	8012a64 <tcp_seg_copy>
 80154fe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015500:	69bb      	ldr	r3, [r7, #24]
 8015502:	2b00      	cmp	r3, #0
 8015504:	f000 8129 	beq.w	801575a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	69ba      	ldr	r2, [r7, #24]
 801550c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801550e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015510:	69b8      	ldr	r0, [r7, #24]
 8015512:	f7ff f8c3 	bl	801469c <tcp_oos_insert_segment>
                  }
                  break;
 8015516:	e120      	b.n	801575a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015518:	4b22      	ldr	r3, [pc, #136]	; (80155a4 <tcp_receive+0xd00>)
 801551a:	681a      	ldr	r2, [r3, #0]
 801551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	1ad3      	subs	r3, r2, r3
 8015524:	3b01      	subs	r3, #1
 8015526:	2b00      	cmp	r3, #0
 8015528:	db3e      	blt.n	80155a8 <tcp_receive+0xd04>
 801552a:	4b1e      	ldr	r3, [pc, #120]	; (80155a4 <tcp_receive+0xd00>)
 801552c:	681a      	ldr	r2, [r3, #0]
 801552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015530:	68db      	ldr	r3, [r3, #12]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	1ad3      	subs	r3, r2, r3
 8015536:	3301      	adds	r3, #1
 8015538:	2b00      	cmp	r3, #0
 801553a:	dc35      	bgt.n	80155a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801553c:	4818      	ldr	r0, [pc, #96]	; (80155a0 <tcp_receive+0xcfc>)
 801553e:	f7fd fa91 	bl	8012a64 <tcp_seg_copy>
 8015542:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	2b00      	cmp	r3, #0
 8015548:	f000 8109 	beq.w	801575e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801554e:	68db      	ldr	r3, [r3, #12]
 8015550:	685b      	ldr	r3, [r3, #4]
 8015552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015554:	8912      	ldrh	r2, [r2, #8]
 8015556:	441a      	add	r2, r3
 8015558:	4b12      	ldr	r3, [pc, #72]	; (80155a4 <tcp_receive+0xd00>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	1ad3      	subs	r3, r2, r3
 801555e:	2b00      	cmp	r3, #0
 8015560:	dd12      	ble.n	8015588 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015562:	4b10      	ldr	r3, [pc, #64]	; (80155a4 <tcp_receive+0xd00>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	b29a      	uxth	r2, r3
 8015568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801556a:	68db      	ldr	r3, [r3, #12]
 801556c:	685b      	ldr	r3, [r3, #4]
 801556e:	b29b      	uxth	r3, r3
 8015570:	1ad3      	subs	r3, r2, r3
 8015572:	b29a      	uxth	r2, r3
 8015574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015576:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801557a:	685a      	ldr	r2, [r3, #4]
 801557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801557e:	891b      	ldrh	r3, [r3, #8]
 8015580:	4619      	mov	r1, r3
 8015582:	4610      	mov	r0, r2
 8015584:	f7fb fc0c 	bl	8010da0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801558a:	69fa      	ldr	r2, [r7, #28]
 801558c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801558e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015590:	69f8      	ldr	r0, [r7, #28]
 8015592:	f7ff f883 	bl	801469c <tcp_oos_insert_segment>
                  }
                  break;
 8015596:	e0e2      	b.n	801575e <tcp_receive+0xeba>
 8015598:	20004f38 	.word	0x20004f38
 801559c:	20004f35 	.word	0x20004f35
 80155a0:	20004f08 	.word	0x20004f08
 80155a4:	20004f28 	.word	0x20004f28
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80155a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155aa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80155ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f040 80c6 	bne.w	8015742 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80155b6:	4b80      	ldr	r3, [pc, #512]	; (80157b8 <tcp_receive+0xf14>)
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155bc:	68db      	ldr	r3, [r3, #12]
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	f340 80bd 	ble.w	8015742 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80155c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	899b      	ldrh	r3, [r3, #12]
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fa f9d9 	bl	800f988 <lwip_htons>
 80155d6:	4603      	mov	r3, r0
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	f003 0301 	and.w	r3, r3, #1
 80155de:	2b00      	cmp	r3, #0
 80155e0:	f040 80bf 	bne.w	8015762 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80155e4:	4875      	ldr	r0, [pc, #468]	; (80157bc <tcp_receive+0xf18>)
 80155e6:	f7fd fa3d 	bl	8012a64 <tcp_seg_copy>
 80155ea:	4602      	mov	r2, r0
 80155ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155ee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80155f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	f000 80b6 	beq.w	8015766 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80155fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155fc:	68db      	ldr	r3, [r3, #12]
 80155fe:	685b      	ldr	r3, [r3, #4]
 8015600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015602:	8912      	ldrh	r2, [r2, #8]
 8015604:	441a      	add	r2, r3
 8015606:	4b6c      	ldr	r3, [pc, #432]	; (80157b8 <tcp_receive+0xf14>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	1ad3      	subs	r3, r2, r3
 801560c:	2b00      	cmp	r3, #0
 801560e:	dd12      	ble.n	8015636 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015610:	4b69      	ldr	r3, [pc, #420]	; (80157b8 <tcp_receive+0xf14>)
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	b29a      	uxth	r2, r3
 8015616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	b29b      	uxth	r3, r3
 801561e:	1ad3      	subs	r3, r2, r3
 8015620:	b29a      	uxth	r2, r3
 8015622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015624:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015628:	685a      	ldr	r2, [r3, #4]
 801562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801562c:	891b      	ldrh	r3, [r3, #8]
 801562e:	4619      	mov	r1, r3
 8015630:	4610      	mov	r0, r2
 8015632:	f7fb fbb5 	bl	8010da0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015636:	4b62      	ldr	r3, [pc, #392]	; (80157c0 <tcp_receive+0xf1c>)
 8015638:	881b      	ldrh	r3, [r3, #0]
 801563a:	461a      	mov	r2, r3
 801563c:	4b5e      	ldr	r3, [pc, #376]	; (80157b8 <tcp_receive+0xf14>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	441a      	add	r2, r3
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015646:	6879      	ldr	r1, [r7, #4]
 8015648:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801564a:	440b      	add	r3, r1
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	2b00      	cmp	r3, #0
 8015650:	f340 8089 	ble.w	8015766 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	899b      	ldrh	r3, [r3, #12]
 801565c:	b29b      	uxth	r3, r3
 801565e:	4618      	mov	r0, r3
 8015660:	f7fa f992 	bl	800f988 <lwip_htons>
 8015664:	4603      	mov	r3, r0
 8015666:	b2db      	uxtb	r3, r3
 8015668:	f003 0301 	and.w	r3, r3, #1
 801566c:	2b00      	cmp	r3, #0
 801566e:	d022      	beq.n	80156b6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	68db      	ldr	r3, [r3, #12]
 8015676:	899b      	ldrh	r3, [r3, #12]
 8015678:	b29b      	uxth	r3, r3
 801567a:	b21b      	sxth	r3, r3
 801567c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015680:	b21c      	sxth	r4, r3
 8015682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	899b      	ldrh	r3, [r3, #12]
 801568a:	b29b      	uxth	r3, r3
 801568c:	4618      	mov	r0, r3
 801568e:	f7fa f97b 	bl	800f988 <lwip_htons>
 8015692:	4603      	mov	r3, r0
 8015694:	b2db      	uxtb	r3, r3
 8015696:	b29b      	uxth	r3, r3
 8015698:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801569c:	b29b      	uxth	r3, r3
 801569e:	4618      	mov	r0, r3
 80156a0:	f7fa f972 	bl	800f988 <lwip_htons>
 80156a4:	4603      	mov	r3, r0
 80156a6:	b21b      	sxth	r3, r3
 80156a8:	4323      	orrs	r3, r4
 80156aa:	b21a      	sxth	r2, r3
 80156ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	68db      	ldr	r3, [r3, #12]
 80156b2:	b292      	uxth	r2, r2
 80156b4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156ba:	b29a      	uxth	r2, r3
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156c0:	4413      	add	r3, r2
 80156c2:	b299      	uxth	r1, r3
 80156c4:	4b3c      	ldr	r3, [pc, #240]	; (80157b8 <tcp_receive+0xf14>)
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	1a8a      	subs	r2, r1, r2
 80156d0:	b292      	uxth	r2, r2
 80156d2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80156d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	685a      	ldr	r2, [r3, #4]
 80156da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	891b      	ldrh	r3, [r3, #8]
 80156e0:	4619      	mov	r1, r3
 80156e2:	4610      	mov	r0, r2
 80156e4:	f7fb fb5c 	bl	8010da0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80156e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	891c      	ldrh	r4, [r3, #8]
 80156ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	68db      	ldr	r3, [r3, #12]
 80156f4:	899b      	ldrh	r3, [r3, #12]
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7fa f945 	bl	800f988 <lwip_htons>
 80156fe:	4603      	mov	r3, r0
 8015700:	b2db      	uxtb	r3, r3
 8015702:	f003 0303 	and.w	r3, r3, #3
 8015706:	2b00      	cmp	r3, #0
 8015708:	d001      	beq.n	801570e <tcp_receive+0xe6a>
 801570a:	2301      	movs	r3, #1
 801570c:	e000      	b.n	8015710 <tcp_receive+0xe6c>
 801570e:	2300      	movs	r3, #0
 8015710:	4423      	add	r3, r4
 8015712:	b29a      	uxth	r2, r3
 8015714:	4b2a      	ldr	r3, [pc, #168]	; (80157c0 <tcp_receive+0xf1c>)
 8015716:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015718:	4b29      	ldr	r3, [pc, #164]	; (80157c0 <tcp_receive+0xf1c>)
 801571a:	881b      	ldrh	r3, [r3, #0]
 801571c:	461a      	mov	r2, r3
 801571e:	4b26      	ldr	r3, [pc, #152]	; (80157b8 <tcp_receive+0xf14>)
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	441a      	add	r2, r3
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015728:	6879      	ldr	r1, [r7, #4]
 801572a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801572c:	440b      	add	r3, r1
 801572e:	429a      	cmp	r2, r3
 8015730:	d019      	beq.n	8015766 <tcp_receive+0xec2>
 8015732:	4b24      	ldr	r3, [pc, #144]	; (80157c4 <tcp_receive+0xf20>)
 8015734:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015738:	4923      	ldr	r1, [pc, #140]	; (80157c8 <tcp_receive+0xf24>)
 801573a:	4824      	ldr	r0, [pc, #144]	; (80157cc <tcp_receive+0xf28>)
 801573c:	f006 f81c 	bl	801b778 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015740:	e011      	b.n	8015766 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	63bb      	str	r3, [r7, #56]	; 0x38
 8015748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801574a:	2b00      	cmp	r3, #0
 801574c:	f47f aea4 	bne.w	8015498 <tcp_receive+0xbf4>
 8015750:	e00a      	b.n	8015768 <tcp_receive+0xec4>
                break;
 8015752:	bf00      	nop
 8015754:	e008      	b.n	8015768 <tcp_receive+0xec4>
                break;
 8015756:	bf00      	nop
 8015758:	e006      	b.n	8015768 <tcp_receive+0xec4>
                  break;
 801575a:	bf00      	nop
 801575c:	e004      	b.n	8015768 <tcp_receive+0xec4>
                  break;
 801575e:	bf00      	nop
 8015760:	e002      	b.n	8015768 <tcp_receive+0xec4>
                  break;
 8015762:	bf00      	nop
 8015764:	e000      	b.n	8015768 <tcp_receive+0xec4>
                break;
 8015766:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f001 fe8b 	bl	8017484 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801576e:	e003      	b.n	8015778 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f001 fe87 	bl	8017484 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015776:	e01a      	b.n	80157ae <tcp_receive+0xf0a>
 8015778:	e019      	b.n	80157ae <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801577a:	4b0f      	ldr	r3, [pc, #60]	; (80157b8 <tcp_receive+0xf14>)
 801577c:	681a      	ldr	r2, [r3, #0]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015782:	1ad3      	subs	r3, r2, r3
 8015784:	2b00      	cmp	r3, #0
 8015786:	db0a      	blt.n	801579e <tcp_receive+0xefa>
 8015788:	4b0b      	ldr	r3, [pc, #44]	; (80157b8 <tcp_receive+0xf14>)
 801578a:	681a      	ldr	r2, [r3, #0]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015790:	6879      	ldr	r1, [r7, #4]
 8015792:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015794:	440b      	add	r3, r1
 8015796:	1ad3      	subs	r3, r2, r3
 8015798:	3301      	adds	r3, #1
 801579a:	2b00      	cmp	r3, #0
 801579c:	dd07      	ble.n	80157ae <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	8b5b      	ldrh	r3, [r3, #26]
 80157a2:	f043 0302 	orr.w	r3, r3, #2
 80157a6:	b29a      	uxth	r2, r3
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80157ac:	e7ff      	b.n	80157ae <tcp_receive+0xf0a>
 80157ae:	bf00      	nop
 80157b0:	3750      	adds	r7, #80	; 0x50
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bdb0      	pop	{r4, r5, r7, pc}
 80157b6:	bf00      	nop
 80157b8:	20004f28 	.word	0x20004f28
 80157bc:	20004f08 	.word	0x20004f08
 80157c0:	20004f32 	.word	0x20004f32
 80157c4:	08026678 	.word	0x08026678
 80157c8:	08026a20 	.word	0x08026a20
 80157cc:	080266c4 	.word	0x080266c4

080157d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80157d0:	b480      	push	{r7}
 80157d2:	b083      	sub	sp, #12
 80157d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80157d6:	4b15      	ldr	r3, [pc, #84]	; (801582c <tcp_get_next_optbyte+0x5c>)
 80157d8:	881b      	ldrh	r3, [r3, #0]
 80157da:	1c5a      	adds	r2, r3, #1
 80157dc:	b291      	uxth	r1, r2
 80157de:	4a13      	ldr	r2, [pc, #76]	; (801582c <tcp_get_next_optbyte+0x5c>)
 80157e0:	8011      	strh	r1, [r2, #0]
 80157e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80157e4:	4b12      	ldr	r3, [pc, #72]	; (8015830 <tcp_get_next_optbyte+0x60>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d004      	beq.n	80157f6 <tcp_get_next_optbyte+0x26>
 80157ec:	4b11      	ldr	r3, [pc, #68]	; (8015834 <tcp_get_next_optbyte+0x64>)
 80157ee:	881b      	ldrh	r3, [r3, #0]
 80157f0:	88fa      	ldrh	r2, [r7, #6]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d208      	bcs.n	8015808 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80157f6:	4b10      	ldr	r3, [pc, #64]	; (8015838 <tcp_get_next_optbyte+0x68>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	3314      	adds	r3, #20
 80157fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80157fe:	88fb      	ldrh	r3, [r7, #6]
 8015800:	683a      	ldr	r2, [r7, #0]
 8015802:	4413      	add	r3, r2
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	e00b      	b.n	8015820 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015808:	88fb      	ldrh	r3, [r7, #6]
 801580a:	b2da      	uxtb	r2, r3
 801580c:	4b09      	ldr	r3, [pc, #36]	; (8015834 <tcp_get_next_optbyte+0x64>)
 801580e:	881b      	ldrh	r3, [r3, #0]
 8015810:	b2db      	uxtb	r3, r3
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015816:	4b06      	ldr	r3, [pc, #24]	; (8015830 <tcp_get_next_optbyte+0x60>)
 8015818:	681a      	ldr	r2, [r3, #0]
 801581a:	797b      	ldrb	r3, [r7, #5]
 801581c:	4413      	add	r3, r2
 801581e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015820:	4618      	mov	r0, r3
 8015822:	370c      	adds	r7, #12
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr
 801582c:	20004f24 	.word	0x20004f24
 8015830:	20004f20 	.word	0x20004f20
 8015834:	20004f1e 	.word	0x20004f1e
 8015838:	20004f18 	.word	0x20004f18

0801583c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b084      	sub	sp, #16
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d106      	bne.n	8015858 <tcp_parseopt+0x1c>
 801584a:	4b32      	ldr	r3, [pc, #200]	; (8015914 <tcp_parseopt+0xd8>)
 801584c:	f240 727d 	movw	r2, #1917	; 0x77d
 8015850:	4931      	ldr	r1, [pc, #196]	; (8015918 <tcp_parseopt+0xdc>)
 8015852:	4832      	ldr	r0, [pc, #200]	; (801591c <tcp_parseopt+0xe0>)
 8015854:	f005 ff90 	bl	801b778 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015858:	4b31      	ldr	r3, [pc, #196]	; (8015920 <tcp_parseopt+0xe4>)
 801585a:	881b      	ldrh	r3, [r3, #0]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d055      	beq.n	801590c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015860:	4b30      	ldr	r3, [pc, #192]	; (8015924 <tcp_parseopt+0xe8>)
 8015862:	2200      	movs	r2, #0
 8015864:	801a      	strh	r2, [r3, #0]
 8015866:	e045      	b.n	80158f4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015868:	f7ff ffb2 	bl	80157d0 <tcp_get_next_optbyte>
 801586c:	4603      	mov	r3, r0
 801586e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015870:	7bfb      	ldrb	r3, [r7, #15]
 8015872:	2b02      	cmp	r3, #2
 8015874:	d006      	beq.n	8015884 <tcp_parseopt+0x48>
 8015876:	2b02      	cmp	r3, #2
 8015878:	dc2b      	bgt.n	80158d2 <tcp_parseopt+0x96>
 801587a:	2b00      	cmp	r3, #0
 801587c:	d041      	beq.n	8015902 <tcp_parseopt+0xc6>
 801587e:	2b01      	cmp	r3, #1
 8015880:	d127      	bne.n	80158d2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015882:	e037      	b.n	80158f4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015884:	f7ff ffa4 	bl	80157d0 <tcp_get_next_optbyte>
 8015888:	4603      	mov	r3, r0
 801588a:	2b04      	cmp	r3, #4
 801588c:	d13b      	bne.n	8015906 <tcp_parseopt+0xca>
 801588e:	4b25      	ldr	r3, [pc, #148]	; (8015924 <tcp_parseopt+0xe8>)
 8015890:	881b      	ldrh	r3, [r3, #0]
 8015892:	3301      	adds	r3, #1
 8015894:	4a22      	ldr	r2, [pc, #136]	; (8015920 <tcp_parseopt+0xe4>)
 8015896:	8812      	ldrh	r2, [r2, #0]
 8015898:	4293      	cmp	r3, r2
 801589a:	da34      	bge.n	8015906 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801589c:	f7ff ff98 	bl	80157d0 <tcp_get_next_optbyte>
 80158a0:	4603      	mov	r3, r0
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	021b      	lsls	r3, r3, #8
 80158a6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80158a8:	f7ff ff92 	bl	80157d0 <tcp_get_next_optbyte>
 80158ac:	4603      	mov	r3, r0
 80158ae:	b29a      	uxth	r2, r3
 80158b0:	89bb      	ldrh	r3, [r7, #12]
 80158b2:	4313      	orrs	r3, r2
 80158b4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80158b6:	89bb      	ldrh	r3, [r7, #12]
 80158b8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80158bc:	d804      	bhi.n	80158c8 <tcp_parseopt+0x8c>
 80158be:	89bb      	ldrh	r3, [r7, #12]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d001      	beq.n	80158c8 <tcp_parseopt+0x8c>
 80158c4:	89ba      	ldrh	r2, [r7, #12]
 80158c6:	e001      	b.n	80158cc <tcp_parseopt+0x90>
 80158c8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80158d0:	e010      	b.n	80158f4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80158d2:	f7ff ff7d 	bl	80157d0 <tcp_get_next_optbyte>
 80158d6:	4603      	mov	r3, r0
 80158d8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80158da:	7afb      	ldrb	r3, [r7, #11]
 80158dc:	2b01      	cmp	r3, #1
 80158de:	d914      	bls.n	801590a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80158e0:	7afb      	ldrb	r3, [r7, #11]
 80158e2:	b29a      	uxth	r2, r3
 80158e4:	4b0f      	ldr	r3, [pc, #60]	; (8015924 <tcp_parseopt+0xe8>)
 80158e6:	881b      	ldrh	r3, [r3, #0]
 80158e8:	4413      	add	r3, r2
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	3b02      	subs	r3, #2
 80158ee:	b29a      	uxth	r2, r3
 80158f0:	4b0c      	ldr	r3, [pc, #48]	; (8015924 <tcp_parseopt+0xe8>)
 80158f2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80158f4:	4b0b      	ldr	r3, [pc, #44]	; (8015924 <tcp_parseopt+0xe8>)
 80158f6:	881a      	ldrh	r2, [r3, #0]
 80158f8:	4b09      	ldr	r3, [pc, #36]	; (8015920 <tcp_parseopt+0xe4>)
 80158fa:	881b      	ldrh	r3, [r3, #0]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d3b3      	bcc.n	8015868 <tcp_parseopt+0x2c>
 8015900:	e004      	b.n	801590c <tcp_parseopt+0xd0>
          return;
 8015902:	bf00      	nop
 8015904:	e002      	b.n	801590c <tcp_parseopt+0xd0>
            return;
 8015906:	bf00      	nop
 8015908:	e000      	b.n	801590c <tcp_parseopt+0xd0>
            return;
 801590a:	bf00      	nop
      }
    }
  }
}
 801590c:	3710      	adds	r7, #16
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	08026678 	.word	0x08026678
 8015918:	08026adc 	.word	0x08026adc
 801591c:	080266c4 	.word	0x080266c4
 8015920:	20004f1c 	.word	0x20004f1c
 8015924:	20004f24 	.word	0x20004f24

08015928 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015928:	b480      	push	{r7}
 801592a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801592c:	4b05      	ldr	r3, [pc, #20]	; (8015944 <tcp_trigger_input_pcb_close+0x1c>)
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	f043 0310 	orr.w	r3, r3, #16
 8015934:	b2da      	uxtb	r2, r3
 8015936:	4b03      	ldr	r3, [pc, #12]	; (8015944 <tcp_trigger_input_pcb_close+0x1c>)
 8015938:	701a      	strb	r2, [r3, #0]
}
 801593a:	bf00      	nop
 801593c:	46bd      	mov	sp, r7
 801593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015942:	4770      	bx	lr
 8015944:	20004f35 	.word	0x20004f35

08015948 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	60f8      	str	r0, [r7, #12]
 8015950:	60b9      	str	r1, [r7, #8]
 8015952:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d00a      	beq.n	8015970 <tcp_route+0x28>
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	7a1b      	ldrb	r3, [r3, #8]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d006      	beq.n	8015970 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	7a1b      	ldrb	r3, [r3, #8]
 8015966:	4618      	mov	r0, r3
 8015968:	f7fb f812 	bl	8010990 <netif_get_by_index>
 801596c:	4603      	mov	r3, r0
 801596e:	e003      	b.n	8015978 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f003 fe35 	bl	80195e0 <ip4_route>
 8015976:	4603      	mov	r3, r0
  }
}
 8015978:	4618      	mov	r0, r3
 801597a:	3710      	adds	r7, #16
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}

08015980 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015980:	b590      	push	{r4, r7, lr}
 8015982:	b087      	sub	sp, #28
 8015984:	af00      	add	r7, sp, #0
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	603b      	str	r3, [r7, #0]
 801598c:	4613      	mov	r3, r2
 801598e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d105      	bne.n	80159a2 <tcp_create_segment+0x22>
 8015996:	4b44      	ldr	r3, [pc, #272]	; (8015aa8 <tcp_create_segment+0x128>)
 8015998:	22a3      	movs	r2, #163	; 0xa3
 801599a:	4944      	ldr	r1, [pc, #272]	; (8015aac <tcp_create_segment+0x12c>)
 801599c:	4844      	ldr	r0, [pc, #272]	; (8015ab0 <tcp_create_segment+0x130>)
 801599e:	f005 feeb 	bl	801b778 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80159a2:	68bb      	ldr	r3, [r7, #8]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d105      	bne.n	80159b4 <tcp_create_segment+0x34>
 80159a8:	4b3f      	ldr	r3, [pc, #252]	; (8015aa8 <tcp_create_segment+0x128>)
 80159aa:	22a4      	movs	r2, #164	; 0xa4
 80159ac:	4941      	ldr	r1, [pc, #260]	; (8015ab4 <tcp_create_segment+0x134>)
 80159ae:	4840      	ldr	r0, [pc, #256]	; (8015ab0 <tcp_create_segment+0x130>)
 80159b0:	f005 fee2 	bl	801b778 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80159b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80159b8:	009b      	lsls	r3, r3, #2
 80159ba:	b2db      	uxtb	r3, r3
 80159bc:	f003 0304 	and.w	r3, r3, #4
 80159c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80159c2:	2003      	movs	r0, #3
 80159c4:	f7fa fccc 	bl	8010360 <memp_malloc>
 80159c8:	6138      	str	r0, [r7, #16]
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d104      	bne.n	80159da <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80159d0:	68b8      	ldr	r0, [r7, #8]
 80159d2:	f7fb fb6b 	bl	80110ac <pbuf_free>
    return NULL;
 80159d6:	2300      	movs	r3, #0
 80159d8:	e061      	b.n	8015a9e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80159e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	2200      	movs	r2, #0
 80159e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	68ba      	ldr	r2, [r7, #8]
 80159ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	891a      	ldrh	r2, [r3, #8]
 80159f2:	7dfb      	ldrb	r3, [r7, #23]
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d205      	bcs.n	8015a06 <tcp_create_segment+0x86>
 80159fa:	4b2b      	ldr	r3, [pc, #172]	; (8015aa8 <tcp_create_segment+0x128>)
 80159fc:	22b0      	movs	r2, #176	; 0xb0
 80159fe:	492e      	ldr	r1, [pc, #184]	; (8015ab8 <tcp_create_segment+0x138>)
 8015a00:	482b      	ldr	r0, [pc, #172]	; (8015ab0 <tcp_create_segment+0x130>)
 8015a02:	f005 feb9 	bl	801b778 <printf>
  seg->len = p->tot_len - optlen;
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	891a      	ldrh	r2, [r3, #8]
 8015a0a:	7dfb      	ldrb	r3, [r7, #23]
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	1ad3      	subs	r3, r2, r3
 8015a10:	b29a      	uxth	r2, r3
 8015a12:	693b      	ldr	r3, [r7, #16]
 8015a14:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015a16:	2114      	movs	r1, #20
 8015a18:	68b8      	ldr	r0, [r7, #8]
 8015a1a:	f7fb fab1 	bl	8010f80 <pbuf_add_header>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d004      	beq.n	8015a2e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015a24:	6938      	ldr	r0, [r7, #16]
 8015a26:	f7fc ffe6 	bl	80129f6 <tcp_seg_free>
    return NULL;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	e037      	b.n	8015a9e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	685a      	ldr	r2, [r3, #4]
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	8ada      	ldrh	r2, [r3, #22]
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	68dc      	ldr	r4, [r3, #12]
 8015a40:	4610      	mov	r0, r2
 8015a42:	f7f9 ffa1 	bl	800f988 <lwip_htons>
 8015a46:	4603      	mov	r3, r0
 8015a48:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	8b1a      	ldrh	r2, [r3, #24]
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	68dc      	ldr	r4, [r3, #12]
 8015a52:	4610      	mov	r0, r2
 8015a54:	f7f9 ff98 	bl	800f988 <lwip_htons>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	68dc      	ldr	r4, [r3, #12]
 8015a60:	6838      	ldr	r0, [r7, #0]
 8015a62:	f7f9 ffa6 	bl	800f9b2 <lwip_htonl>
 8015a66:	4603      	mov	r3, r0
 8015a68:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015a6a:	7dfb      	ldrb	r3, [r7, #23]
 8015a6c:	089b      	lsrs	r3, r3, #2
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	b29b      	uxth	r3, r3
 8015a72:	3305      	adds	r3, #5
 8015a74:	b29b      	uxth	r3, r3
 8015a76:	031b      	lsls	r3, r3, #12
 8015a78:	b29a      	uxth	r2, r3
 8015a7a:	79fb      	ldrb	r3, [r7, #7]
 8015a7c:	b29b      	uxth	r3, r3
 8015a7e:	4313      	orrs	r3, r2
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	68dc      	ldr	r4, [r3, #12]
 8015a86:	4610      	mov	r0, r2
 8015a88:	f7f9 ff7e 	bl	800f988 <lwip_htons>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015a90:	693b      	ldr	r3, [r7, #16]
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	2200      	movs	r2, #0
 8015a96:	749a      	strb	r2, [r3, #18]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	74da      	strb	r2, [r3, #19]
  return seg;
 8015a9c:	693b      	ldr	r3, [r7, #16]
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	371c      	adds	r7, #28
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd90      	pop	{r4, r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	08026af8 	.word	0x08026af8
 8015aac:	08026b2c 	.word	0x08026b2c
 8015ab0:	08026b4c 	.word	0x08026b4c
 8015ab4:	08026b74 	.word	0x08026b74
 8015ab8:	08026b98 	.word	0x08026b98

08015abc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b086      	sub	sp, #24
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	607b      	str	r3, [r7, #4]
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	73fb      	strb	r3, [r7, #15]
 8015ac8:	460b      	mov	r3, r1
 8015aca:	81bb      	strh	r3, [r7, #12]
 8015acc:	4613      	mov	r3, r2
 8015ace:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015ad0:	89bb      	ldrh	r3, [r7, #12]
 8015ad2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d105      	bne.n	8015ae6 <tcp_pbuf_prealloc+0x2a>
 8015ada:	4b30      	ldr	r3, [pc, #192]	; (8015b9c <tcp_pbuf_prealloc+0xe0>)
 8015adc:	22e8      	movs	r2, #232	; 0xe8
 8015ade:	4930      	ldr	r1, [pc, #192]	; (8015ba0 <tcp_pbuf_prealloc+0xe4>)
 8015ae0:	4830      	ldr	r0, [pc, #192]	; (8015ba4 <tcp_pbuf_prealloc+0xe8>)
 8015ae2:	f005 fe49 	bl	801b778 <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015ae6:	6a3b      	ldr	r3, [r7, #32]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d105      	bne.n	8015af8 <tcp_pbuf_prealloc+0x3c>
 8015aec:	4b2b      	ldr	r3, [pc, #172]	; (8015b9c <tcp_pbuf_prealloc+0xe0>)
 8015aee:	22e9      	movs	r2, #233	; 0xe9
 8015af0:	492d      	ldr	r1, [pc, #180]	; (8015ba8 <tcp_pbuf_prealloc+0xec>)
 8015af2:	482c      	ldr	r0, [pc, #176]	; (8015ba4 <tcp_pbuf_prealloc+0xe8>)
 8015af4:	f005 fe40 	bl	801b778 <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015af8:	89ba      	ldrh	r2, [r7, #12]
 8015afa:	897b      	ldrh	r3, [r7, #10]
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d221      	bcs.n	8015b44 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015b00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015b04:	f003 0302 	and.w	r3, r3, #2
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d111      	bne.n	8015b30 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015b0c:	6a3b      	ldr	r3, [r7, #32]
 8015b0e:	8b5b      	ldrh	r3, [r3, #26]
 8015b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d115      	bne.n	8015b44 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d007      	beq.n	8015b30 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015b20:	6a3b      	ldr	r3, [r7, #32]
 8015b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d103      	bne.n	8015b30 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015b28:	6a3b      	ldr	r3, [r7, #32]
 8015b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d009      	beq.n	8015b44 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015b30:	89bb      	ldrh	r3, [r7, #12]
 8015b32:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015b36:	f023 0203 	bic.w	r2, r3, #3
 8015b3a:	897b      	ldrh	r3, [r7, #10]
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	bf28      	it	cs
 8015b40:	4613      	movcs	r3, r2
 8015b42:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015b44:	8af9      	ldrh	r1, [r7, #22]
 8015b46:	7bfb      	ldrb	r3, [r7, #15]
 8015b48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7fa ffc9 	bl	8010ae4 <pbuf_alloc>
 8015b52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d101      	bne.n	8015b5e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	e019      	b.n	8015b92 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d006      	beq.n	8015b74 <tcp_pbuf_prealloc+0xb8>
 8015b66:	4b0d      	ldr	r3, [pc, #52]	; (8015b9c <tcp_pbuf_prealloc+0xe0>)
 8015b68:	f240 120b 	movw	r2, #267	; 0x10b
 8015b6c:	490f      	ldr	r1, [pc, #60]	; (8015bac <tcp_pbuf_prealloc+0xf0>)
 8015b6e:	480d      	ldr	r0, [pc, #52]	; (8015ba4 <tcp_pbuf_prealloc+0xe8>)
 8015b70:	f005 fe02 	bl	801b778 <printf>
  *oversize = p->len - length;
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	895a      	ldrh	r2, [r3, #10]
 8015b78:	89bb      	ldrh	r3, [r7, #12]
 8015b7a:	1ad3      	subs	r3, r2, r3
 8015b7c:	b29a      	uxth	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	89ba      	ldrh	r2, [r7, #12]
 8015b86:	811a      	strh	r2, [r3, #8]
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	891a      	ldrh	r2, [r3, #8]
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	815a      	strh	r2, [r3, #10]
  return p;
 8015b90:	693b      	ldr	r3, [r7, #16]
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	3718      	adds	r7, #24
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	08026af8 	.word	0x08026af8
 8015ba0:	08026bb0 	.word	0x08026bb0
 8015ba4:	08026b4c 	.word	0x08026b4c
 8015ba8:	08026bd4 	.word	0x08026bd4
 8015bac:	08026bf4 	.word	0x08026bf4

08015bb0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	460b      	mov	r3, r1
 8015bba:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d106      	bne.n	8015bd0 <tcp_write_checks+0x20>
 8015bc2:	4b33      	ldr	r3, [pc, #204]	; (8015c90 <tcp_write_checks+0xe0>)
 8015bc4:	f240 1233 	movw	r2, #307	; 0x133
 8015bc8:	4932      	ldr	r1, [pc, #200]	; (8015c94 <tcp_write_checks+0xe4>)
 8015bca:	4833      	ldr	r0, [pc, #204]	; (8015c98 <tcp_write_checks+0xe8>)
 8015bcc:	f005 fdd4 	bl	801b778 <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	7d1b      	ldrb	r3, [r3, #20]
 8015bd4:	2b04      	cmp	r3, #4
 8015bd6:	d00e      	beq.n	8015bf6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015bdc:	2b07      	cmp	r3, #7
 8015bde:	d00a      	beq.n	8015bf6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015be4:	2b02      	cmp	r3, #2
 8015be6:	d006      	beq.n	8015bf6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015bec:	2b03      	cmp	r3, #3
 8015bee:	d002      	beq.n	8015bf6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015bf0:	f06f 030a 	mvn.w	r3, #10
 8015bf4:	e048      	b.n	8015c88 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015bf6:	887b      	ldrh	r3, [r7, #2]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d101      	bne.n	8015c00 <tcp_write_checks+0x50>
    return ERR_OK;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	e043      	b.n	8015c88 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015c06:	887a      	ldrh	r2, [r7, #2]
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d909      	bls.n	8015c20 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	8b5b      	ldrh	r3, [r3, #26]
 8015c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c14:	b29a      	uxth	r2, r3
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c1e:	e033      	b.n	8015c88 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c26:	2b08      	cmp	r3, #8
 8015c28:	d909      	bls.n	8015c3e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	8b5b      	ldrh	r3, [r3, #26]
 8015c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c32:	b29a      	uxth	r2, r3
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015c38:	f04f 33ff 	mov.w	r3, #4294967295
 8015c3c:	e024      	b.n	8015c88 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00f      	beq.n	8015c68 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d11a      	bne.n	8015c86 <tcp_write_checks+0xd6>
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d116      	bne.n	8015c86 <tcp_write_checks+0xd6>
 8015c58:	4b0d      	ldr	r3, [pc, #52]	; (8015c90 <tcp_write_checks+0xe0>)
 8015c5a:	f240 1255 	movw	r2, #341	; 0x155
 8015c5e:	490f      	ldr	r1, [pc, #60]	; (8015c9c <tcp_write_checks+0xec>)
 8015c60:	480d      	ldr	r0, [pc, #52]	; (8015c98 <tcp_write_checks+0xe8>)
 8015c62:	f005 fd89 	bl	801b778 <printf>
 8015c66:	e00e      	b.n	8015c86 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d103      	bne.n	8015c78 <tcp_write_checks+0xc8>
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d006      	beq.n	8015c86 <tcp_write_checks+0xd6>
 8015c78:	4b05      	ldr	r3, [pc, #20]	; (8015c90 <tcp_write_checks+0xe0>)
 8015c7a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015c7e:	4908      	ldr	r1, [pc, #32]	; (8015ca0 <tcp_write_checks+0xf0>)
 8015c80:	4805      	ldr	r0, [pc, #20]	; (8015c98 <tcp_write_checks+0xe8>)
 8015c82:	f005 fd79 	bl	801b778 <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015c86:	2300      	movs	r3, #0
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3708      	adds	r7, #8
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	08026af8 	.word	0x08026af8
 8015c94:	08026c08 	.word	0x08026c08
 8015c98:	08026b4c 	.word	0x08026b4c
 8015c9c:	08026c28 	.word	0x08026c28
 8015ca0:	08026c64 	.word	0x08026c64

08015ca4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015ca4:	b590      	push	{r4, r7, lr}
 8015ca6:	b09b      	sub	sp, #108	; 0x6c
 8015ca8:	af04      	add	r7, sp, #16
 8015caa:	60f8      	str	r0, [r7, #12]
 8015cac:	60b9      	str	r1, [r7, #8]
 8015cae:	4611      	mov	r1, r2
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	80fb      	strh	r3, [r7, #6]
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8015cca:	2300      	movs	r3, #0
 8015ccc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015cce:	2300      	movs	r3, #0
 8015cd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d109      	bne.n	8015d00 <tcp_write+0x5c>
 8015cec:	4ba4      	ldr	r3, [pc, #656]	; (8015f80 <tcp_write+0x2dc>)
 8015cee:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015cf2:	49a4      	ldr	r1, [pc, #656]	; (8015f84 <tcp_write+0x2e0>)
 8015cf4:	48a4      	ldr	r0, [pc, #656]	; (8015f88 <tcp_write+0x2e4>)
 8015cf6:	f005 fd3f 	bl	801b778 <printf>
 8015cfa:	f06f 030f 	mvn.w	r3, #15
 8015cfe:	e32a      	b.n	8016356 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015d06:	085b      	lsrs	r3, r3, #1
 8015d08:	b29a      	uxth	r2, r3
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d0e:	4293      	cmp	r3, r2
 8015d10:	bf28      	it	cs
 8015d12:	4613      	movcs	r3, r2
 8015d14:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d102      	bne.n	8015d22 <tcp_write+0x7e>
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d20:	e000      	b.n	8015d24 <tcp_write+0x80>
 8015d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d24:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d109      	bne.n	8015d40 <tcp_write+0x9c>
 8015d2c:	4b94      	ldr	r3, [pc, #592]	; (8015f80 <tcp_write+0x2dc>)
 8015d2e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015d32:	4996      	ldr	r1, [pc, #600]	; (8015f8c <tcp_write+0x2e8>)
 8015d34:	4894      	ldr	r0, [pc, #592]	; (8015f88 <tcp_write+0x2e4>)
 8015d36:	f005 fd1f 	bl	801b778 <printf>
 8015d3a:	f06f 030f 	mvn.w	r3, #15
 8015d3e:	e30a      	b.n	8016356 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015d40:	88fb      	ldrh	r3, [r7, #6]
 8015d42:	4619      	mov	r1, r3
 8015d44:	68f8      	ldr	r0, [r7, #12]
 8015d46:	f7ff ff33 	bl	8015bb0 <tcp_write_checks>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015d50:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d002      	beq.n	8015d5e <tcp_write+0xba>
    return err;
 8015d58:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015d5c:	e2fb      	b.n	8016356 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015d68:	2300      	movs	r3, #0
 8015d6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	f000 80f6 	beq.w	8015f64 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8015d7e:	e002      	b.n	8015d86 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d1f8      	bne.n	8015d80 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d90:	7a9b      	ldrb	r3, [r3, #10]
 8015d92:	009b      	lsls	r3, r3, #2
 8015d94:	b29b      	uxth	r3, r3
 8015d96:	f003 0304 	and.w	r3, r3, #4
 8015d9a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015d9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015da0:	891b      	ldrh	r3, [r3, #8]
 8015da2:	4619      	mov	r1, r3
 8015da4:	8c3b      	ldrh	r3, [r7, #32]
 8015da6:	440b      	add	r3, r1
 8015da8:	429a      	cmp	r2, r3
 8015daa:	da06      	bge.n	8015dba <tcp_write+0x116>
 8015dac:	4b74      	ldr	r3, [pc, #464]	; (8015f80 <tcp_write+0x2dc>)
 8015dae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015db2:	4977      	ldr	r1, [pc, #476]	; (8015f90 <tcp_write+0x2ec>)
 8015db4:	4874      	ldr	r0, [pc, #464]	; (8015f88 <tcp_write+0x2e4>)
 8015db6:	f005 fcdf 	bl	801b778 <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dbc:	891a      	ldrh	r2, [r3, #8]
 8015dbe:	8c3b      	ldrh	r3, [r7, #32]
 8015dc0:	4413      	add	r3, r2
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015dc6:	1ad3      	subs	r3, r2, r3
 8015dc8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015dd0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015dd2:	8a7b      	ldrh	r3, [r7, #18]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d026      	beq.n	8015e26 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015dd8:	8a7b      	ldrh	r3, [r7, #18]
 8015dda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d206      	bcs.n	8015dee <tcp_write+0x14a>
 8015de0:	4b67      	ldr	r3, [pc, #412]	; (8015f80 <tcp_write+0x2dc>)
 8015de2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8015de6:	496b      	ldr	r1, [pc, #428]	; (8015f94 <tcp_write+0x2f0>)
 8015de8:	4867      	ldr	r0, [pc, #412]	; (8015f88 <tcp_write+0x2e4>)
 8015dea:	f005 fcc5 	bl	801b778 <printf>
      seg = last_unsent;
 8015dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015df0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015df2:	8a7b      	ldrh	r3, [r7, #18]
 8015df4:	88fa      	ldrh	r2, [r7, #6]
 8015df6:	4293      	cmp	r3, r2
 8015df8:	bf28      	it	cs
 8015dfa:	4613      	movcs	r3, r2
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e00:	4293      	cmp	r3, r2
 8015e02:	bf28      	it	cs
 8015e04:	4613      	movcs	r3, r2
 8015e06:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015e08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e0e:	4413      	add	r3, r2
 8015e10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015e14:	8a7a      	ldrh	r2, [r7, #18]
 8015e16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	b29b      	uxth	r3, r3
 8015e1c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015e1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e22:	1ad3      	subs	r3, r2, r3
 8015e24:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015e26:	8a7b      	ldrh	r3, [r7, #18]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d00b      	beq.n	8015e44 <tcp_write+0x1a0>
 8015e2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e30:	88fb      	ldrh	r3, [r7, #6]
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d006      	beq.n	8015e44 <tcp_write+0x1a0>
 8015e36:	4b52      	ldr	r3, [pc, #328]	; (8015f80 <tcp_write+0x2dc>)
 8015e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e3c:	4956      	ldr	r1, [pc, #344]	; (8015f98 <tcp_write+0x2f4>)
 8015e3e:	4852      	ldr	r0, [pc, #328]	; (8015f88 <tcp_write+0x2e4>)
 8015e40:	f005 fc9a 	bl	801b778 <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015e44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e48:	88fb      	ldrh	r3, [r7, #6]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	f080 8167 	bcs.w	801611e <tcp_write+0x47a>
 8015e50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	f000 8163 	beq.w	801611e <tcp_write+0x47a>
 8015e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e5a:	891b      	ldrh	r3, [r3, #8]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	f000 815e 	beq.w	801611e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015e62:	88fa      	ldrh	r2, [r7, #6]
 8015e64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e68:	1ad2      	subs	r2, r2, r3
 8015e6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	bfa8      	it	ge
 8015e70:	4613      	movge	r3, r2
 8015e72:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e76:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015e78:	797b      	ldrb	r3, [r7, #5]
 8015e7a:	f003 0301 	and.w	r3, r3, #1
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d027      	beq.n	8015ed2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015e82:	f107 0012 	add.w	r0, r7, #18
 8015e86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e88:	8bf9      	ldrh	r1, [r7, #30]
 8015e8a:	2301      	movs	r3, #1
 8015e8c:	9302      	str	r3, [sp, #8]
 8015e8e:	797b      	ldrb	r3, [r7, #5]
 8015e90:	9301      	str	r3, [sp, #4]
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	9300      	str	r3, [sp, #0]
 8015e96:	4603      	mov	r3, r0
 8015e98:	2000      	movs	r0, #0
 8015e9a:	f7ff fe0f 	bl	8015abc <tcp_pbuf_prealloc>
 8015e9e:	6578      	str	r0, [r7, #84]	; 0x54
 8015ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	f000 8225 	beq.w	80162f2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015eaa:	6858      	ldr	r0, [r3, #4]
 8015eac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015eb0:	68ba      	ldr	r2, [r7, #8]
 8015eb2:	4413      	add	r3, r2
 8015eb4:	8bfa      	ldrh	r2, [r7, #30]
 8015eb6:	4619      	mov	r1, r3
 8015eb8:	f005 f9b0 	bl	801b21c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015ebc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015ebe:	f7fb f983 	bl	80111c8 <pbuf_clen>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015eca:	4413      	add	r3, r2
 8015ecc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015ed0:	e041      	b.n	8015f56 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8015ed8:	e002      	b.n	8015ee0 <tcp_write+0x23c>
 8015eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	637b      	str	r3, [r7, #52]	; 0x34
 8015ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1f8      	bne.n	8015eda <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eea:	7b1b      	ldrb	r3, [r3, #12]
 8015eec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d115      	bne.n	8015f20 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015efa:	8952      	ldrh	r2, [r2, #10]
 8015efc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015efe:	68ba      	ldr	r2, [r7, #8]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d10d      	bne.n	8015f20 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015f04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d006      	beq.n	8015f1a <tcp_write+0x276>
 8015f0c:	4b1c      	ldr	r3, [pc, #112]	; (8015f80 <tcp_write+0x2dc>)
 8015f0e:	f240 2231 	movw	r2, #561	; 0x231
 8015f12:	4922      	ldr	r1, [pc, #136]	; (8015f9c <tcp_write+0x2f8>)
 8015f14:	481c      	ldr	r0, [pc, #112]	; (8015f88 <tcp_write+0x2e4>)
 8015f16:	f005 fc2f 	bl	801b778 <printf>
          extendlen = seglen;
 8015f1a:	8bfb      	ldrh	r3, [r7, #30]
 8015f1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015f1e:	e01a      	b.n	8015f56 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015f20:	8bfb      	ldrh	r3, [r7, #30]
 8015f22:	2201      	movs	r2, #1
 8015f24:	4619      	mov	r1, r3
 8015f26:	2000      	movs	r0, #0
 8015f28:	f7fa fddc 	bl	8010ae4 <pbuf_alloc>
 8015f2c:	6578      	str	r0, [r7, #84]	; 0x54
 8015f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	f000 81e0 	beq.w	80162f6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8015f36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	441a      	add	r2, r3
 8015f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f40:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015f42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015f44:	f7fb f940 	bl	80111c8 <pbuf_clen>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015f50:	4413      	add	r3, r2
 8015f52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8015f56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f5a:	8bfb      	ldrh	r3, [r7, #30]
 8015f5c:	4413      	add	r3, r2
 8015f5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015f62:	e0dc      	b.n	801611e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	f000 80d7 	beq.w	801611e <tcp_write+0x47a>
 8015f70:	4b03      	ldr	r3, [pc, #12]	; (8015f80 <tcp_write+0x2dc>)
 8015f72:	f240 224a 	movw	r2, #586	; 0x24a
 8015f76:	490a      	ldr	r1, [pc, #40]	; (8015fa0 <tcp_write+0x2fc>)
 8015f78:	4803      	ldr	r0, [pc, #12]	; (8015f88 <tcp_write+0x2e4>)
 8015f7a:	f005 fbfd 	bl	801b778 <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015f7e:	e0ce      	b.n	801611e <tcp_write+0x47a>
 8015f80:	08026af8 	.word	0x08026af8
 8015f84:	08026c98 	.word	0x08026c98
 8015f88:	08026b4c 	.word	0x08026b4c
 8015f8c:	08026cb0 	.word	0x08026cb0
 8015f90:	08026ce4 	.word	0x08026ce4
 8015f94:	08026cfc 	.word	0x08026cfc
 8015f98:	08026d1c 	.word	0x08026d1c
 8015f9c:	08026d3c 	.word	0x08026d3c
 8015fa0:	08026d68 	.word	0x08026d68
    struct pbuf *p;
    u16_t left = len - pos;
 8015fa4:	88fa      	ldrh	r2, [r7, #6]
 8015fa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015faa:	1ad3      	subs	r3, r2, r3
 8015fac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015fae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015fb2:	b29b      	uxth	r3, r3
 8015fb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015fb6:	1ad3      	subs	r3, r2, r3
 8015fb8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015fba:	8b7a      	ldrh	r2, [r7, #26]
 8015fbc:	8bbb      	ldrh	r3, [r7, #28]
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	bf28      	it	cs
 8015fc2:	4613      	movcs	r3, r2
 8015fc4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015fc6:	797b      	ldrb	r3, [r7, #5]
 8015fc8:	f003 0301 	and.w	r3, r3, #1
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d036      	beq.n	801603e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015fd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015fd4:	b29a      	uxth	r2, r3
 8015fd6:	8b3b      	ldrh	r3, [r7, #24]
 8015fd8:	4413      	add	r3, r2
 8015fda:	b299      	uxth	r1, r3
 8015fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	bf0c      	ite	eq
 8015fe2:	2301      	moveq	r3, #1
 8015fe4:	2300      	movne	r3, #0
 8015fe6:	b2db      	uxtb	r3, r3
 8015fe8:	f107 0012 	add.w	r0, r7, #18
 8015fec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015fee:	9302      	str	r3, [sp, #8]
 8015ff0:	797b      	ldrb	r3, [r7, #5]
 8015ff2:	9301      	str	r3, [sp, #4]
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	9300      	str	r3, [sp, #0]
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2036      	movs	r0, #54	; 0x36
 8015ffc:	f7ff fd5e 	bl	8015abc <tcp_pbuf_prealloc>
 8016000:	6338      	str	r0, [r7, #48]	; 0x30
 8016002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016004:	2b00      	cmp	r3, #0
 8016006:	f000 8178 	beq.w	80162fa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801600c:	895b      	ldrh	r3, [r3, #10]
 801600e:	8b3a      	ldrh	r2, [r7, #24]
 8016010:	429a      	cmp	r2, r3
 8016012:	d906      	bls.n	8016022 <tcp_write+0x37e>
 8016014:	4b8c      	ldr	r3, [pc, #560]	; (8016248 <tcp_write+0x5a4>)
 8016016:	f240 2266 	movw	r2, #614	; 0x266
 801601a:	498c      	ldr	r1, [pc, #560]	; (801624c <tcp_write+0x5a8>)
 801601c:	488c      	ldr	r0, [pc, #560]	; (8016250 <tcp_write+0x5ac>)
 801601e:	f005 fbab 	bl	801b778 <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016024:	685a      	ldr	r2, [r3, #4]
 8016026:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801602a:	18d0      	adds	r0, r2, r3
 801602c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016030:	68ba      	ldr	r2, [r7, #8]
 8016032:	4413      	add	r3, r2
 8016034:	8b3a      	ldrh	r2, [r7, #24]
 8016036:	4619      	mov	r1, r3
 8016038:	f005 f8f0 	bl	801b21c <memcpy>
 801603c:	e02f      	b.n	801609e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801603e:	8a7b      	ldrh	r3, [r7, #18]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d006      	beq.n	8016052 <tcp_write+0x3ae>
 8016044:	4b80      	ldr	r3, [pc, #512]	; (8016248 <tcp_write+0x5a4>)
 8016046:	f240 2271 	movw	r2, #625	; 0x271
 801604a:	4982      	ldr	r1, [pc, #520]	; (8016254 <tcp_write+0x5b0>)
 801604c:	4880      	ldr	r0, [pc, #512]	; (8016250 <tcp_write+0x5ac>)
 801604e:	f005 fb93 	bl	801b778 <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016052:	8b3b      	ldrh	r3, [r7, #24]
 8016054:	2201      	movs	r2, #1
 8016056:	4619      	mov	r1, r3
 8016058:	2036      	movs	r0, #54	; 0x36
 801605a:	f7fa fd43 	bl	8010ae4 <pbuf_alloc>
 801605e:	6178      	str	r0, [r7, #20]
 8016060:	697b      	ldr	r3, [r7, #20]
 8016062:	2b00      	cmp	r3, #0
 8016064:	f000 814b 	beq.w	80162fe <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016068:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801606c:	68ba      	ldr	r2, [r7, #8]
 801606e:	441a      	add	r2, r3
 8016070:	697b      	ldr	r3, [r7, #20]
 8016072:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016074:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016078:	b29b      	uxth	r3, r3
 801607a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801607e:	4619      	mov	r1, r3
 8016080:	2036      	movs	r0, #54	; 0x36
 8016082:	f7fa fd2f 	bl	8010ae4 <pbuf_alloc>
 8016086:	6338      	str	r0, [r7, #48]	; 0x30
 8016088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801608a:	2b00      	cmp	r3, #0
 801608c:	d103      	bne.n	8016096 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801608e:	6978      	ldr	r0, [r7, #20]
 8016090:	f7fb f80c 	bl	80110ac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016094:	e136      	b.n	8016304 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016096:	6979      	ldr	r1, [r7, #20]
 8016098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801609a:	f7fb f8d5 	bl	8011248 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801609e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160a0:	f7fb f892 	bl	80111c8 <pbuf_clen>
 80160a4:	4603      	mov	r3, r0
 80160a6:	461a      	mov	r2, r3
 80160a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80160ac:	4413      	add	r3, r2
 80160ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80160b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80160b6:	2b09      	cmp	r3, #9
 80160b8:	d903      	bls.n	80160c2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80160ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160bc:	f7fa fff6 	bl	80110ac <pbuf_free>
      goto memerr;
 80160c0:	e120      	b.n	8016304 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80160c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160ca:	441a      	add	r2, r3
 80160cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160d0:	9300      	str	r3, [sp, #0]
 80160d2:	4613      	mov	r3, r2
 80160d4:	2200      	movs	r2, #0
 80160d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160d8:	68f8      	ldr	r0, [r7, #12]
 80160da:	f7ff fc51 	bl	8015980 <tcp_create_segment>
 80160de:	64f8      	str	r0, [r7, #76]	; 0x4c
 80160e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	f000 810d 	beq.w	8016302 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80160e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d102      	bne.n	80160f4 <tcp_write+0x450>
      queue = seg;
 80160ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160f0:	647b      	str	r3, [r7, #68]	; 0x44
 80160f2:	e00c      	b.n	801610e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80160f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d106      	bne.n	8016108 <tcp_write+0x464>
 80160fa:	4b53      	ldr	r3, [pc, #332]	; (8016248 <tcp_write+0x5a4>)
 80160fc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016100:	4955      	ldr	r1, [pc, #340]	; (8016258 <tcp_write+0x5b4>)
 8016102:	4853      	ldr	r0, [pc, #332]	; (8016250 <tcp_write+0x5ac>)
 8016104:	f005 fb38 	bl	801b778 <printf>
      prev_seg->next = seg;
 8016108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801610a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801610c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801610e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016110:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016112:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016116:	8b3b      	ldrh	r3, [r7, #24]
 8016118:	4413      	add	r3, r2
 801611a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801611e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016122:	88fb      	ldrh	r3, [r7, #6]
 8016124:	429a      	cmp	r2, r3
 8016126:	f4ff af3d 	bcc.w	8015fa4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801612a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801612c:	2b00      	cmp	r3, #0
 801612e:	d02c      	beq.n	801618a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016136:	e01e      	b.n	8016176 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801613a:	891a      	ldrh	r2, [r3, #8]
 801613c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801613e:	4413      	add	r3, r2
 8016140:	b29a      	uxth	r2, r3
 8016142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016144:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d110      	bne.n	8016170 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016150:	685b      	ldr	r3, [r3, #4]
 8016152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016154:	8952      	ldrh	r2, [r2, #10]
 8016156:	4413      	add	r3, r2
 8016158:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801615a:	68b9      	ldr	r1, [r7, #8]
 801615c:	4618      	mov	r0, r3
 801615e:	f005 f85d 	bl	801b21c <memcpy>
        p->len += oversize_used;
 8016162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016164:	895a      	ldrh	r2, [r3, #10]
 8016166:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016168:	4413      	add	r3, r2
 801616a:	b29a      	uxth	r2, r3
 801616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016178:	2b00      	cmp	r3, #0
 801617a:	d1dd      	bne.n	8016138 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801617c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801617e:	891a      	ldrh	r2, [r3, #8]
 8016180:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016182:	4413      	add	r3, r2
 8016184:	b29a      	uxth	r2, r3
 8016186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016188:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801618a:	8a7a      	ldrh	r2, [r7, #18]
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016194:	2b00      	cmp	r3, #0
 8016196:	d018      	beq.n	80161ca <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801619a:	2b00      	cmp	r3, #0
 801619c:	d106      	bne.n	80161ac <tcp_write+0x508>
 801619e:	4b2a      	ldr	r3, [pc, #168]	; (8016248 <tcp_write+0x5a4>)
 80161a0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80161a4:	492d      	ldr	r1, [pc, #180]	; (801625c <tcp_write+0x5b8>)
 80161a6:	482a      	ldr	r0, [pc, #168]	; (8016250 <tcp_write+0x5ac>)
 80161a8:	f005 fae6 	bl	801b778 <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80161ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161ae:	685b      	ldr	r3, [r3, #4]
 80161b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80161b2:	4618      	mov	r0, r3
 80161b4:	f7fb f848 	bl	8011248 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80161b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161ba:	891a      	ldrh	r2, [r3, #8]
 80161bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161be:	891b      	ldrh	r3, [r3, #8]
 80161c0:	4413      	add	r3, r2
 80161c2:	b29a      	uxth	r2, r3
 80161c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161c6:	811a      	strh	r2, [r3, #8]
 80161c8:	e037      	b.n	801623a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80161ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d034      	beq.n	801623a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80161d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d003      	beq.n	80161de <tcp_write+0x53a>
 80161d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161d8:	685b      	ldr	r3, [r3, #4]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d106      	bne.n	80161ec <tcp_write+0x548>
 80161de:	4b1a      	ldr	r3, [pc, #104]	; (8016248 <tcp_write+0x5a4>)
 80161e0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80161e4:	491e      	ldr	r1, [pc, #120]	; (8016260 <tcp_write+0x5bc>)
 80161e6:	481a      	ldr	r0, [pc, #104]	; (8016250 <tcp_write+0x5ac>)
 80161e8:	f005 fac6 	bl	801b778 <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80161ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161ee:	685b      	ldr	r3, [r3, #4]
 80161f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80161f2:	e009      	b.n	8016208 <tcp_write+0x564>
      p->tot_len += extendlen;
 80161f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f6:	891a      	ldrh	r2, [r3, #8]
 80161f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161fa:	4413      	add	r3, r2
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016200:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	62bb      	str	r3, [r7, #40]	; 0x28
 8016208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d1f1      	bne.n	80161f4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016212:	891a      	ldrh	r2, [r3, #8]
 8016214:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016216:	4413      	add	r3, r2
 8016218:	b29a      	uxth	r2, r3
 801621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016220:	895a      	ldrh	r2, [r3, #10]
 8016222:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016224:	4413      	add	r3, r2
 8016226:	b29a      	uxth	r2, r3
 8016228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801622c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801622e:	891a      	ldrh	r2, [r3, #8]
 8016230:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016232:	4413      	add	r3, r2
 8016234:	b29a      	uxth	r2, r3
 8016236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016238:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801623c:	2b00      	cmp	r3, #0
 801623e:	d111      	bne.n	8016264 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016244:	66da      	str	r2, [r3, #108]	; 0x6c
 8016246:	e010      	b.n	801626a <tcp_write+0x5c6>
 8016248:	08026af8 	.word	0x08026af8
 801624c:	08026d98 	.word	0x08026d98
 8016250:	08026b4c 	.word	0x08026b4c
 8016254:	08026dd8 	.word	0x08026dd8
 8016258:	08026de8 	.word	0x08026de8
 801625c:	08026dfc 	.word	0x08026dfc
 8016260:	08026e34 	.word	0x08026e34
  } else {
    last_unsent->next = queue;
 8016264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016268:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801626e:	88fb      	ldrh	r3, [r7, #6]
 8016270:	441a      	add	r2, r3
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801627c:	88fb      	ldrh	r3, [r7, #6]
 801627e:	1ad3      	subs	r3, r2, r3
 8016280:	b29a      	uxth	r2, r3
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801628e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016298:	2b00      	cmp	r3, #0
 801629a:	d00e      	beq.n	80162ba <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d10a      	bne.n	80162ba <tcp_write+0x616>
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d106      	bne.n	80162ba <tcp_write+0x616>
 80162ac:	4b2c      	ldr	r3, [pc, #176]	; (8016360 <tcp_write+0x6bc>)
 80162ae:	f240 3212 	movw	r2, #786	; 0x312
 80162b2:	492c      	ldr	r1, [pc, #176]	; (8016364 <tcp_write+0x6c0>)
 80162b4:	482c      	ldr	r0, [pc, #176]	; (8016368 <tcp_write+0x6c4>)
 80162b6:	f005 fa5f 	bl	801b778 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80162ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d016      	beq.n	80162ee <tcp_write+0x64a>
 80162c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162c2:	68db      	ldr	r3, [r3, #12]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d012      	beq.n	80162ee <tcp_write+0x64a>
 80162c8:	797b      	ldrb	r3, [r7, #5]
 80162ca:	f003 0302 	and.w	r3, r3, #2
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d10d      	bne.n	80162ee <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80162d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	899b      	ldrh	r3, [r3, #12]
 80162d8:	b29c      	uxth	r4, r3
 80162da:	2008      	movs	r0, #8
 80162dc:	f7f9 fb54 	bl	800f988 <lwip_htons>
 80162e0:	4603      	mov	r3, r0
 80162e2:	461a      	mov	r2, r3
 80162e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	4322      	orrs	r2, r4
 80162ea:	b292      	uxth	r2, r2
 80162ec:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80162ee:	2300      	movs	r3, #0
 80162f0:	e031      	b.n	8016356 <tcp_write+0x6b2>
          goto memerr;
 80162f2:	bf00      	nop
 80162f4:	e006      	b.n	8016304 <tcp_write+0x660>
            goto memerr;
 80162f6:	bf00      	nop
 80162f8:	e004      	b.n	8016304 <tcp_write+0x660>
        goto memerr;
 80162fa:	bf00      	nop
 80162fc:	e002      	b.n	8016304 <tcp_write+0x660>
        goto memerr;
 80162fe:	bf00      	nop
 8016300:	e000      	b.n	8016304 <tcp_write+0x660>
      goto memerr;
 8016302:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	8b5b      	ldrh	r3, [r3, #26]
 8016308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801630c:	b29a      	uxth	r2, r3
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016314:	2b00      	cmp	r3, #0
 8016316:	d002      	beq.n	801631e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016318:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801631a:	f7fa fec7 	bl	80110ac <pbuf_free>
  }
  if (queue != NULL) {
 801631e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016320:	2b00      	cmp	r3, #0
 8016322:	d002      	beq.n	801632a <tcp_write+0x686>
    tcp_segs_free(queue);
 8016324:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016326:	f7fc fb51 	bl	80129cc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016330:	2b00      	cmp	r3, #0
 8016332:	d00e      	beq.n	8016352 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016338:	2b00      	cmp	r3, #0
 801633a:	d10a      	bne.n	8016352 <tcp_write+0x6ae>
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016340:	2b00      	cmp	r3, #0
 8016342:	d106      	bne.n	8016352 <tcp_write+0x6ae>
 8016344:	4b06      	ldr	r3, [pc, #24]	; (8016360 <tcp_write+0x6bc>)
 8016346:	f240 3227 	movw	r2, #807	; 0x327
 801634a:	4906      	ldr	r1, [pc, #24]	; (8016364 <tcp_write+0x6c0>)
 801634c:	4806      	ldr	r0, [pc, #24]	; (8016368 <tcp_write+0x6c4>)
 801634e:	f005 fa13 	bl	801b778 <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8016352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016356:	4618      	mov	r0, r3
 8016358:	375c      	adds	r7, #92	; 0x5c
 801635a:	46bd      	mov	sp, r7
 801635c:	bd90      	pop	{r4, r7, pc}
 801635e:	bf00      	nop
 8016360:	08026af8 	.word	0x08026af8
 8016364:	08026e6c 	.word	0x08026e6c
 8016368:	08026b4c 	.word	0x08026b4c

0801636c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801636c:	b590      	push	{r4, r7, lr}
 801636e:	b08b      	sub	sp, #44	; 0x2c
 8016370:	af02      	add	r7, sp, #8
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	460b      	mov	r3, r1
 8016376:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016378:	2300      	movs	r3, #0
 801637a:	61fb      	str	r3, [r7, #28]
 801637c:	2300      	movs	r3, #0
 801637e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016380:	2300      	movs	r3, #0
 8016382:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d106      	bne.n	8016398 <tcp_split_unsent_seg+0x2c>
 801638a:	4b95      	ldr	r3, [pc, #596]	; (80165e0 <tcp_split_unsent_seg+0x274>)
 801638c:	f240 324b 	movw	r2, #843	; 0x34b
 8016390:	4994      	ldr	r1, [pc, #592]	; (80165e4 <tcp_split_unsent_seg+0x278>)
 8016392:	4895      	ldr	r0, [pc, #596]	; (80165e8 <tcp_split_unsent_seg+0x27c>)
 8016394:	f005 f9f0 	bl	801b778 <printf>

  useg = pcb->unsent;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801639c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d102      	bne.n	80163aa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80163a4:	f04f 33ff 	mov.w	r3, #4294967295
 80163a8:	e116      	b.n	80165d8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80163aa:	887b      	ldrh	r3, [r7, #2]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d109      	bne.n	80163c4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80163b0:	4b8b      	ldr	r3, [pc, #556]	; (80165e0 <tcp_split_unsent_seg+0x274>)
 80163b2:	f240 3253 	movw	r2, #851	; 0x353
 80163b6:	498d      	ldr	r1, [pc, #564]	; (80165ec <tcp_split_unsent_seg+0x280>)
 80163b8:	488b      	ldr	r0, [pc, #556]	; (80165e8 <tcp_split_unsent_seg+0x27c>)
 80163ba:	f005 f9dd 	bl	801b778 <printf>
    return ERR_VAL;
 80163be:	f06f 0305 	mvn.w	r3, #5
 80163c2:	e109      	b.n	80165d8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	891b      	ldrh	r3, [r3, #8]
 80163c8:	887a      	ldrh	r2, [r7, #2]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d301      	bcc.n	80163d2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80163ce:	2300      	movs	r3, #0
 80163d0:	e102      	b.n	80165d8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80163d6:	887a      	ldrh	r2, [r7, #2]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d906      	bls.n	80163ea <tcp_split_unsent_seg+0x7e>
 80163dc:	4b80      	ldr	r3, [pc, #512]	; (80165e0 <tcp_split_unsent_seg+0x274>)
 80163de:	f240 325b 	movw	r2, #859	; 0x35b
 80163e2:	4983      	ldr	r1, [pc, #524]	; (80165f0 <tcp_split_unsent_seg+0x284>)
 80163e4:	4880      	ldr	r0, [pc, #512]	; (80165e8 <tcp_split_unsent_seg+0x27c>)
 80163e6:	f005 f9c7 	bl	801b778 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	891b      	ldrh	r3, [r3, #8]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d106      	bne.n	8016400 <tcp_split_unsent_seg+0x94>
 80163f2:	4b7b      	ldr	r3, [pc, #492]	; (80165e0 <tcp_split_unsent_seg+0x274>)
 80163f4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80163f8:	497e      	ldr	r1, [pc, #504]	; (80165f4 <tcp_split_unsent_seg+0x288>)
 80163fa:	487b      	ldr	r0, [pc, #492]	; (80165e8 <tcp_split_unsent_seg+0x27c>)
 80163fc:	f005 f9bc 	bl	801b778 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016400:	697b      	ldr	r3, [r7, #20]
 8016402:	7a9b      	ldrb	r3, [r3, #10]
 8016404:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016406:	7bfb      	ldrb	r3, [r7, #15]
 8016408:	009b      	lsls	r3, r3, #2
 801640a:	b2db      	uxtb	r3, r3
 801640c:	f003 0304 	and.w	r3, r3, #4
 8016410:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	891a      	ldrh	r2, [r3, #8]
 8016416:	887b      	ldrh	r3, [r7, #2]
 8016418:	1ad3      	subs	r3, r2, r3
 801641a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801641c:	7bbb      	ldrb	r3, [r7, #14]
 801641e:	b29a      	uxth	r2, r3
 8016420:	89bb      	ldrh	r3, [r7, #12]
 8016422:	4413      	add	r3, r2
 8016424:	b29b      	uxth	r3, r3
 8016426:	f44f 7220 	mov.w	r2, #640	; 0x280
 801642a:	4619      	mov	r1, r3
 801642c:	2036      	movs	r0, #54	; 0x36
 801642e:	f7fa fb59 	bl	8010ae4 <pbuf_alloc>
 8016432:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	2b00      	cmp	r3, #0
 8016438:	f000 80b7 	beq.w	80165aa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801643c:	697b      	ldr	r3, [r7, #20]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	891a      	ldrh	r2, [r3, #8]
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	891b      	ldrh	r3, [r3, #8]
 8016446:	1ad3      	subs	r3, r2, r3
 8016448:	b29a      	uxth	r2, r3
 801644a:	887b      	ldrh	r3, [r7, #2]
 801644c:	4413      	add	r3, r2
 801644e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016450:	697b      	ldr	r3, [r7, #20]
 8016452:	6858      	ldr	r0, [r3, #4]
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	685a      	ldr	r2, [r3, #4]
 8016458:	7bbb      	ldrb	r3, [r7, #14]
 801645a:	18d1      	adds	r1, r2, r3
 801645c:	897b      	ldrh	r3, [r7, #10]
 801645e:	89ba      	ldrh	r2, [r7, #12]
 8016460:	f7fb f82a 	bl	80114b8 <pbuf_copy_partial>
 8016464:	4603      	mov	r3, r0
 8016466:	461a      	mov	r2, r3
 8016468:	89bb      	ldrh	r3, [r7, #12]
 801646a:	4293      	cmp	r3, r2
 801646c:	f040 809f 	bne.w	80165ae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	68db      	ldr	r3, [r3, #12]
 8016474:	899b      	ldrh	r3, [r3, #12]
 8016476:	b29b      	uxth	r3, r3
 8016478:	4618      	mov	r0, r3
 801647a:	f7f9 fa85 	bl	800f988 <lwip_htons>
 801647e:	4603      	mov	r3, r0
 8016480:	b2db      	uxtb	r3, r3
 8016482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016486:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016488:	2300      	movs	r3, #0
 801648a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801648c:	7efb      	ldrb	r3, [r7, #27]
 801648e:	f003 0308 	and.w	r3, r3, #8
 8016492:	2b00      	cmp	r3, #0
 8016494:	d007      	beq.n	80164a6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016496:	7efb      	ldrb	r3, [r7, #27]
 8016498:	f023 0308 	bic.w	r3, r3, #8
 801649c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801649e:	7ebb      	ldrb	r3, [r7, #26]
 80164a0:	f043 0308 	orr.w	r3, r3, #8
 80164a4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80164a6:	7efb      	ldrb	r3, [r7, #27]
 80164a8:	f003 0301 	and.w	r3, r3, #1
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d007      	beq.n	80164c0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80164b0:	7efb      	ldrb	r3, [r7, #27]
 80164b2:	f023 0301 	bic.w	r3, r3, #1
 80164b6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80164b8:	7ebb      	ldrb	r3, [r7, #26]
 80164ba:	f043 0301 	orr.w	r3, r3, #1
 80164be:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80164c0:	697b      	ldr	r3, [r7, #20]
 80164c2:	68db      	ldr	r3, [r3, #12]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7f9 fa73 	bl	800f9b2 <lwip_htonl>
 80164cc:	4602      	mov	r2, r0
 80164ce:	887b      	ldrh	r3, [r7, #2]
 80164d0:	18d1      	adds	r1, r2, r3
 80164d2:	7eba      	ldrb	r2, [r7, #26]
 80164d4:	7bfb      	ldrb	r3, [r7, #15]
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	460b      	mov	r3, r1
 80164da:	6939      	ldr	r1, [r7, #16]
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f7ff fa4f 	bl	8015980 <tcp_create_segment>
 80164e2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80164e4:	69fb      	ldr	r3, [r7, #28]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d063      	beq.n	80165b2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fa fe6a 	bl	80111c8 <pbuf_clen>
 80164f4:	4603      	mov	r3, r0
 80164f6:	461a      	mov	r2, r3
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164fe:	1a9b      	subs	r3, r3, r2
 8016500:	b29a      	uxth	r2, r3
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016508:	697b      	ldr	r3, [r7, #20]
 801650a:	6858      	ldr	r0, [r3, #4]
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	891a      	ldrh	r2, [r3, #8]
 8016512:	89bb      	ldrh	r3, [r7, #12]
 8016514:	1ad3      	subs	r3, r2, r3
 8016516:	b29b      	uxth	r3, r3
 8016518:	4619      	mov	r1, r3
 801651a:	f7fa fc41 	bl	8010da0 <pbuf_realloc>
  useg->len -= remainder;
 801651e:	697b      	ldr	r3, [r7, #20]
 8016520:	891a      	ldrh	r2, [r3, #8]
 8016522:	89bb      	ldrh	r3, [r7, #12]
 8016524:	1ad3      	subs	r3, r2, r3
 8016526:	b29a      	uxth	r2, r3
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801652c:	697b      	ldr	r3, [r7, #20]
 801652e:	68db      	ldr	r3, [r3, #12]
 8016530:	899b      	ldrh	r3, [r3, #12]
 8016532:	b29c      	uxth	r4, r3
 8016534:	7efb      	ldrb	r3, [r7, #27]
 8016536:	b29b      	uxth	r3, r3
 8016538:	4618      	mov	r0, r3
 801653a:	f7f9 fa25 	bl	800f988 <lwip_htons>
 801653e:	4603      	mov	r3, r0
 8016540:	461a      	mov	r2, r3
 8016542:	697b      	ldr	r3, [r7, #20]
 8016544:	68db      	ldr	r3, [r3, #12]
 8016546:	4322      	orrs	r2, r4
 8016548:	b292      	uxth	r2, r2
 801654a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	4618      	mov	r0, r3
 8016552:	f7fa fe39 	bl	80111c8 <pbuf_clen>
 8016556:	4603      	mov	r3, r0
 8016558:	461a      	mov	r2, r3
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016560:	4413      	add	r3, r2
 8016562:	b29a      	uxth	r2, r3
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801656a:	69fb      	ldr	r3, [r7, #28]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	4618      	mov	r0, r3
 8016570:	f7fa fe2a 	bl	80111c8 <pbuf_clen>
 8016574:	4603      	mov	r3, r0
 8016576:	461a      	mov	r2, r3
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801657e:	4413      	add	r3, r2
 8016580:	b29a      	uxth	r2, r3
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	681a      	ldr	r2, [r3, #0]
 801658c:	69fb      	ldr	r3, [r7, #28]
 801658e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	69fa      	ldr	r2, [r7, #28]
 8016594:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016596:	69fb      	ldr	r3, [r7, #28]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d103      	bne.n	80165a6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2200      	movs	r2, #0
 80165a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80165a6:	2300      	movs	r3, #0
 80165a8:	e016      	b.n	80165d8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80165aa:	bf00      	nop
 80165ac:	e002      	b.n	80165b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80165ae:	bf00      	nop
 80165b0:	e000      	b.n	80165b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80165b2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d006      	beq.n	80165c8 <tcp_split_unsent_seg+0x25c>
 80165ba:	4b09      	ldr	r3, [pc, #36]	; (80165e0 <tcp_split_unsent_seg+0x274>)
 80165bc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80165c0:	490d      	ldr	r1, [pc, #52]	; (80165f8 <tcp_split_unsent_seg+0x28c>)
 80165c2:	4809      	ldr	r0, [pc, #36]	; (80165e8 <tcp_split_unsent_seg+0x27c>)
 80165c4:	f005 f8d8 	bl	801b778 <printf>
  if (p != NULL) {
 80165c8:	693b      	ldr	r3, [r7, #16]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d002      	beq.n	80165d4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80165ce:	6938      	ldr	r0, [r7, #16]
 80165d0:	f7fa fd6c 	bl	80110ac <pbuf_free>
  }

  return ERR_MEM;
 80165d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3724      	adds	r7, #36	; 0x24
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd90      	pop	{r4, r7, pc}
 80165e0:	08026af8 	.word	0x08026af8
 80165e4:	08026e8c 	.word	0x08026e8c
 80165e8:	08026b4c 	.word	0x08026b4c
 80165ec:	08026eb0 	.word	0x08026eb0
 80165f0:	08026ed4 	.word	0x08026ed4
 80165f4:	08026ee4 	.word	0x08026ee4
 80165f8:	08026ef4 	.word	0x08026ef4

080165fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80165fc:	b590      	push	{r4, r7, lr}
 80165fe:	b085      	sub	sp, #20
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d106      	bne.n	8016618 <tcp_send_fin+0x1c>
 801660a:	4b21      	ldr	r3, [pc, #132]	; (8016690 <tcp_send_fin+0x94>)
 801660c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016610:	4920      	ldr	r1, [pc, #128]	; (8016694 <tcp_send_fin+0x98>)
 8016612:	4821      	ldr	r0, [pc, #132]	; (8016698 <tcp_send_fin+0x9c>)
 8016614:	f005 f8b0 	bl	801b778 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801661c:	2b00      	cmp	r3, #0
 801661e:	d02e      	beq.n	801667e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016624:	60fb      	str	r3, [r7, #12]
 8016626:	e002      	b.n	801662e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d1f8      	bne.n	8016628 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	68db      	ldr	r3, [r3, #12]
 801663a:	899b      	ldrh	r3, [r3, #12]
 801663c:	b29b      	uxth	r3, r3
 801663e:	4618      	mov	r0, r3
 8016640:	f7f9 f9a2 	bl	800f988 <lwip_htons>
 8016644:	4603      	mov	r3, r0
 8016646:	b2db      	uxtb	r3, r3
 8016648:	f003 0307 	and.w	r3, r3, #7
 801664c:	2b00      	cmp	r3, #0
 801664e:	d116      	bne.n	801667e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	68db      	ldr	r3, [r3, #12]
 8016654:	899b      	ldrh	r3, [r3, #12]
 8016656:	b29c      	uxth	r4, r3
 8016658:	2001      	movs	r0, #1
 801665a:	f7f9 f995 	bl	800f988 <lwip_htons>
 801665e:	4603      	mov	r3, r0
 8016660:	461a      	mov	r2, r3
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	68db      	ldr	r3, [r3, #12]
 8016666:	4322      	orrs	r2, r4
 8016668:	b292      	uxth	r2, r2
 801666a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	8b5b      	ldrh	r3, [r3, #26]
 8016670:	f043 0320 	orr.w	r3, r3, #32
 8016674:	b29a      	uxth	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801667a:	2300      	movs	r3, #0
 801667c:	e004      	b.n	8016688 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801667e:	2101      	movs	r1, #1
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	f000 f80b 	bl	801669c <tcp_enqueue_flags>
 8016686:	4603      	mov	r3, r0
}
 8016688:	4618      	mov	r0, r3
 801668a:	3714      	adds	r7, #20
 801668c:	46bd      	mov	sp, r7
 801668e:	bd90      	pop	{r4, r7, pc}
 8016690:	08026af8 	.word	0x08026af8
 8016694:	08026f00 	.word	0x08026f00
 8016698:	08026b4c 	.word	0x08026b4c

0801669c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b08a      	sub	sp, #40	; 0x28
 80166a0:	af02      	add	r7, sp, #8
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	460b      	mov	r3, r1
 80166a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80166a8:	2300      	movs	r3, #0
 80166aa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80166ac:	2300      	movs	r3, #0
 80166ae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80166b0:	78fb      	ldrb	r3, [r7, #3]
 80166b2:	f003 0303 	and.w	r3, r3, #3
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d106      	bne.n	80166c8 <tcp_enqueue_flags+0x2c>
 80166ba:	4b67      	ldr	r3, [pc, #412]	; (8016858 <tcp_enqueue_flags+0x1bc>)
 80166bc:	f240 4211 	movw	r2, #1041	; 0x411
 80166c0:	4966      	ldr	r1, [pc, #408]	; (801685c <tcp_enqueue_flags+0x1c0>)
 80166c2:	4867      	ldr	r0, [pc, #412]	; (8016860 <tcp_enqueue_flags+0x1c4>)
 80166c4:	f005 f858 	bl	801b778 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d106      	bne.n	80166dc <tcp_enqueue_flags+0x40>
 80166ce:	4b62      	ldr	r3, [pc, #392]	; (8016858 <tcp_enqueue_flags+0x1bc>)
 80166d0:	f240 4213 	movw	r2, #1043	; 0x413
 80166d4:	4963      	ldr	r1, [pc, #396]	; (8016864 <tcp_enqueue_flags+0x1c8>)
 80166d6:	4862      	ldr	r0, [pc, #392]	; (8016860 <tcp_enqueue_flags+0x1c4>)
 80166d8:	f005 f84e 	bl	801b778 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80166dc:	78fb      	ldrb	r3, [r7, #3]
 80166de:	f003 0302 	and.w	r3, r3, #2
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d001      	beq.n	80166ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80166e6:	2301      	movs	r3, #1
 80166e8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80166ea:	7ffb      	ldrb	r3, [r7, #31]
 80166ec:	009b      	lsls	r3, r3, #2
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	f003 0304 	and.w	r3, r3, #4
 80166f4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80166f6:	7dfb      	ldrb	r3, [r7, #23]
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166fe:	4619      	mov	r1, r3
 8016700:	2036      	movs	r0, #54	; 0x36
 8016702:	f7fa f9ef 	bl	8010ae4 <pbuf_alloc>
 8016706:	6138      	str	r0, [r7, #16]
 8016708:	693b      	ldr	r3, [r7, #16]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d109      	bne.n	8016722 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	8b5b      	ldrh	r3, [r3, #26]
 8016712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016716:	b29a      	uxth	r2, r3
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801671c:	f04f 33ff 	mov.w	r3, #4294967295
 8016720:	e095      	b.n	801684e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	895a      	ldrh	r2, [r3, #10]
 8016726:	7dfb      	ldrb	r3, [r7, #23]
 8016728:	b29b      	uxth	r3, r3
 801672a:	429a      	cmp	r2, r3
 801672c:	d206      	bcs.n	801673c <tcp_enqueue_flags+0xa0>
 801672e:	4b4a      	ldr	r3, [pc, #296]	; (8016858 <tcp_enqueue_flags+0x1bc>)
 8016730:	f240 4239 	movw	r2, #1081	; 0x439
 8016734:	494c      	ldr	r1, [pc, #304]	; (8016868 <tcp_enqueue_flags+0x1cc>)
 8016736:	484a      	ldr	r0, [pc, #296]	; (8016860 <tcp_enqueue_flags+0x1c4>)
 8016738:	f005 f81e 	bl	801b778 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016740:	78fa      	ldrb	r2, [r7, #3]
 8016742:	7ffb      	ldrb	r3, [r7, #31]
 8016744:	9300      	str	r3, [sp, #0]
 8016746:	460b      	mov	r3, r1
 8016748:	6939      	ldr	r1, [r7, #16]
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f7ff f918 	bl	8015980 <tcp_create_segment>
 8016750:	60f8      	str	r0, [r7, #12]
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d109      	bne.n	801676c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	8b5b      	ldrh	r3, [r3, #26]
 801675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016760:	b29a      	uxth	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016766:	f04f 33ff 	mov.w	r3, #4294967295
 801676a:	e070      	b.n	801684e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	f003 0303 	and.w	r3, r3, #3
 8016774:	2b00      	cmp	r3, #0
 8016776:	d006      	beq.n	8016786 <tcp_enqueue_flags+0xea>
 8016778:	4b37      	ldr	r3, [pc, #220]	; (8016858 <tcp_enqueue_flags+0x1bc>)
 801677a:	f240 4242 	movw	r2, #1090	; 0x442
 801677e:	493b      	ldr	r1, [pc, #236]	; (801686c <tcp_enqueue_flags+0x1d0>)
 8016780:	4837      	ldr	r0, [pc, #220]	; (8016860 <tcp_enqueue_flags+0x1c4>)
 8016782:	f004 fff9 	bl	801b778 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	891b      	ldrh	r3, [r3, #8]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d006      	beq.n	801679c <tcp_enqueue_flags+0x100>
 801678e:	4b32      	ldr	r3, [pc, #200]	; (8016858 <tcp_enqueue_flags+0x1bc>)
 8016790:	f240 4243 	movw	r2, #1091	; 0x443
 8016794:	4936      	ldr	r1, [pc, #216]	; (8016870 <tcp_enqueue_flags+0x1d4>)
 8016796:	4832      	ldr	r0, [pc, #200]	; (8016860 <tcp_enqueue_flags+0x1c4>)
 8016798:	f004 ffee 	bl	801b778 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d103      	bne.n	80167ac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	68fa      	ldr	r2, [r7, #12]
 80167a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80167aa:	e00d      	b.n	80167c8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167b0:	61bb      	str	r3, [r7, #24]
 80167b2:	e002      	b.n	80167ba <tcp_enqueue_flags+0x11e>
 80167b4:	69bb      	ldr	r3, [r7, #24]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	61bb      	str	r3, [r7, #24]
 80167ba:	69bb      	ldr	r3, [r7, #24]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d1f8      	bne.n	80167b4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80167c2:	69bb      	ldr	r3, [r7, #24]
 80167c4:	68fa      	ldr	r2, [r7, #12]
 80167c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2200      	movs	r2, #0
 80167cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80167d0:	78fb      	ldrb	r3, [r7, #3]
 80167d2:	f003 0302 	and.w	r3, r3, #2
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d104      	bne.n	80167e4 <tcp_enqueue_flags+0x148>
 80167da:	78fb      	ldrb	r3, [r7, #3]
 80167dc:	f003 0301 	and.w	r3, r3, #1
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d004      	beq.n	80167ee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80167e8:	1c5a      	adds	r2, r3, #1
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80167ee:	78fb      	ldrb	r3, [r7, #3]
 80167f0:	f003 0301 	and.w	r3, r3, #1
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d006      	beq.n	8016806 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	8b5b      	ldrh	r3, [r3, #26]
 80167fc:	f043 0320 	orr.w	r3, r3, #32
 8016800:	b29a      	uxth	r2, r3
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	4618      	mov	r0, r3
 801680c:	f7fa fcdc 	bl	80111c8 <pbuf_clen>
 8016810:	4603      	mov	r3, r0
 8016812:	461a      	mov	r2, r3
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801681a:	4413      	add	r3, r2
 801681c:	b29a      	uxth	r2, r3
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801682a:	2b00      	cmp	r3, #0
 801682c:	d00e      	beq.n	801684c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016832:	2b00      	cmp	r3, #0
 8016834:	d10a      	bne.n	801684c <tcp_enqueue_flags+0x1b0>
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801683a:	2b00      	cmp	r3, #0
 801683c:	d106      	bne.n	801684c <tcp_enqueue_flags+0x1b0>
 801683e:	4b06      	ldr	r3, [pc, #24]	; (8016858 <tcp_enqueue_flags+0x1bc>)
 8016840:	f240 4265 	movw	r2, #1125	; 0x465
 8016844:	490b      	ldr	r1, [pc, #44]	; (8016874 <tcp_enqueue_flags+0x1d8>)
 8016846:	4806      	ldr	r0, [pc, #24]	; (8016860 <tcp_enqueue_flags+0x1c4>)
 8016848:	f004 ff96 	bl	801b778 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801684c:	2300      	movs	r3, #0
}
 801684e:	4618      	mov	r0, r3
 8016850:	3720      	adds	r7, #32
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	08026af8 	.word	0x08026af8
 801685c:	08026f1c 	.word	0x08026f1c
 8016860:	08026b4c 	.word	0x08026b4c
 8016864:	08026f74 	.word	0x08026f74
 8016868:	08026f94 	.word	0x08026f94
 801686c:	08026fd0 	.word	0x08026fd0
 8016870:	08026fe8 	.word	0x08026fe8
 8016874:	08027014 	.word	0x08027014

08016878 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016878:	b5b0      	push	{r4, r5, r7, lr}
 801687a:	b08a      	sub	sp, #40	; 0x28
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d106      	bne.n	8016894 <tcp_output+0x1c>
 8016886:	4b9e      	ldr	r3, [pc, #632]	; (8016b00 <tcp_output+0x288>)
 8016888:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801688c:	499d      	ldr	r1, [pc, #628]	; (8016b04 <tcp_output+0x28c>)
 801688e:	489e      	ldr	r0, [pc, #632]	; (8016b08 <tcp_output+0x290>)
 8016890:	f004 ff72 	bl	801b778 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	7d1b      	ldrb	r3, [r3, #20]
 8016898:	2b01      	cmp	r3, #1
 801689a:	d106      	bne.n	80168aa <tcp_output+0x32>
 801689c:	4b98      	ldr	r3, [pc, #608]	; (8016b00 <tcp_output+0x288>)
 801689e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80168a2:	499a      	ldr	r1, [pc, #616]	; (8016b0c <tcp_output+0x294>)
 80168a4:	4898      	ldr	r0, [pc, #608]	; (8016b08 <tcp_output+0x290>)
 80168a6:	f004 ff67 	bl	801b778 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80168aa:	4b99      	ldr	r3, [pc, #612]	; (8016b10 <tcp_output+0x298>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	687a      	ldr	r2, [r7, #4]
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d101      	bne.n	80168b8 <tcp_output+0x40>
    return ERR_OK;
 80168b4:	2300      	movs	r3, #0
 80168b6:	e1ce      	b.n	8016c56 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80168c4:	4293      	cmp	r3, r2
 80168c6:	bf28      	it	cs
 80168c8:	4613      	movcs	r3, r2
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80168d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d10b      	bne.n	80168f2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	8b5b      	ldrh	r3, [r3, #26]
 80168de:	f003 0302 	and.w	r3, r3, #2
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	f000 81aa 	beq.w	8016c3c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80168e8:	6878      	ldr	r0, [r7, #4]
 80168ea:	f000 fdcb 	bl	8017484 <tcp_send_empty_ack>
 80168ee:	4603      	mov	r3, r0
 80168f0:	e1b1      	b.n	8016c56 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80168f2:	6879      	ldr	r1, [r7, #4]
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	3304      	adds	r3, #4
 80168f8:	461a      	mov	r2, r3
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f7ff f824 	bl	8015948 <tcp_route>
 8016900:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d102      	bne.n	801690e <tcp_output+0x96>
    return ERR_RTE;
 8016908:	f06f 0303 	mvn.w	r3, #3
 801690c:	e1a3      	b.n	8016c56 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d003      	beq.n	801691c <tcp_output+0xa4>
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d111      	bne.n	8016940 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d002      	beq.n	8016928 <tcp_output+0xb0>
 8016922:	697b      	ldr	r3, [r7, #20]
 8016924:	3304      	adds	r3, #4
 8016926:	e000      	b.n	801692a <tcp_output+0xb2>
 8016928:	2300      	movs	r3, #0
 801692a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801692c:	693b      	ldr	r3, [r7, #16]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d102      	bne.n	8016938 <tcp_output+0xc0>
      return ERR_RTE;
 8016932:	f06f 0303 	mvn.w	r3, #3
 8016936:	e18e      	b.n	8016c56 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	68db      	ldr	r3, [r3, #12]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	4618      	mov	r0, r3
 8016948:	f7f9 f833 	bl	800f9b2 <lwip_htonl>
 801694c:	4602      	mov	r2, r0
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016952:	1ad3      	subs	r3, r2, r3
 8016954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016956:	8912      	ldrh	r2, [r2, #8]
 8016958:	4413      	add	r3, r2
 801695a:	69ba      	ldr	r2, [r7, #24]
 801695c:	429a      	cmp	r2, r3
 801695e:	d227      	bcs.n	80169b0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016966:	461a      	mov	r2, r3
 8016968:	69bb      	ldr	r3, [r7, #24]
 801696a:	4293      	cmp	r3, r2
 801696c:	d114      	bne.n	8016998 <tcp_output+0x120>
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016972:	2b00      	cmp	r3, #0
 8016974:	d110      	bne.n	8016998 <tcp_output+0x120>
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801697c:	2b00      	cmp	r3, #0
 801697e:	d10b      	bne.n	8016998 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2200      	movs	r2, #0
 8016984:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2201      	movs	r2, #1
 801698c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2200      	movs	r2, #0
 8016994:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	8b5b      	ldrh	r3, [r3, #26]
 801699c:	f003 0302 	and.w	r3, r3, #2
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	f000 814d 	beq.w	8016c40 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 fd6c 	bl	8017484 <tcp_send_empty_ack>
 80169ac:	4603      	mov	r3, r0
 80169ae:	e152      	b.n	8016c56 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2200      	movs	r2, #0
 80169b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169bc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80169be:	6a3b      	ldr	r3, [r7, #32]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	f000 811c 	beq.w	8016bfe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80169c6:	e002      	b.n	80169ce <tcp_output+0x156>
 80169c8:	6a3b      	ldr	r3, [r7, #32]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	623b      	str	r3, [r7, #32]
 80169ce:	6a3b      	ldr	r3, [r7, #32]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d1f8      	bne.n	80169c8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80169d6:	e112      	b.n	8016bfe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80169d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169da:	68db      	ldr	r3, [r3, #12]
 80169dc:	899b      	ldrh	r3, [r3, #12]
 80169de:	b29b      	uxth	r3, r3
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7f8 ffd1 	bl	800f988 <lwip_htons>
 80169e6:	4603      	mov	r3, r0
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	f003 0304 	and.w	r3, r3, #4
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d006      	beq.n	8016a00 <tcp_output+0x188>
 80169f2:	4b43      	ldr	r3, [pc, #268]	; (8016b00 <tcp_output+0x288>)
 80169f4:	f240 5236 	movw	r2, #1334	; 0x536
 80169f8:	4946      	ldr	r1, [pc, #280]	; (8016b14 <tcp_output+0x29c>)
 80169fa:	4843      	ldr	r0, [pc, #268]	; (8016b08 <tcp_output+0x290>)
 80169fc:	f004 febc 	bl	801b778 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d01f      	beq.n	8016a48 <tcp_output+0x1d0>
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	8b5b      	ldrh	r3, [r3, #26]
 8016a0c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d119      	bne.n	8016a48 <tcp_output+0x1d0>
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d00b      	beq.n	8016a34 <tcp_output+0x1bc>
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d110      	bne.n	8016a48 <tcp_output+0x1d0>
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a2a:	891a      	ldrh	r2, [r3, #8]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d209      	bcs.n	8016a48 <tcp_output+0x1d0>
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d004      	beq.n	8016a48 <tcp_output+0x1d0>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a44:	2b08      	cmp	r3, #8
 8016a46:	d901      	bls.n	8016a4c <tcp_output+0x1d4>
 8016a48:	2301      	movs	r3, #1
 8016a4a:	e000      	b.n	8016a4e <tcp_output+0x1d6>
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d106      	bne.n	8016a60 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	8b5b      	ldrh	r3, [r3, #26]
 8016a56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	f000 80e4 	beq.w	8016c28 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	7d1b      	ldrb	r3, [r3, #20]
 8016a64:	2b02      	cmp	r3, #2
 8016a66:	d00d      	beq.n	8016a84 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a6a:	68db      	ldr	r3, [r3, #12]
 8016a6c:	899b      	ldrh	r3, [r3, #12]
 8016a6e:	b29c      	uxth	r4, r3
 8016a70:	2010      	movs	r0, #16
 8016a72:	f7f8 ff89 	bl	800f988 <lwip_htons>
 8016a76:	4603      	mov	r3, r0
 8016a78:	461a      	mov	r2, r3
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7c:	68db      	ldr	r3, [r3, #12]
 8016a7e:	4322      	orrs	r2, r4
 8016a80:	b292      	uxth	r2, r2
 8016a82:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016a84:	697a      	ldr	r2, [r7, #20]
 8016a86:	6879      	ldr	r1, [r7, #4]
 8016a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a8a:	f000 f909 	bl	8016ca0 <tcp_output_segment>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d009      	beq.n	8016aae <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	8b5b      	ldrh	r3, [r3, #26]
 8016a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aa2:	b29a      	uxth	r2, r3
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	835a      	strh	r2, [r3, #26]
      return err;
 8016aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016aac:	e0d3      	b.n	8016c56 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab0:	681a      	ldr	r2, [r3, #0]
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	7d1b      	ldrb	r3, [r3, #20]
 8016aba:	2b02      	cmp	r3, #2
 8016abc:	d006      	beq.n	8016acc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	8b5b      	ldrh	r3, [r3, #26]
 8016ac2:	f023 0303 	bic.w	r3, r3, #3
 8016ac6:	b29a      	uxth	r2, r3
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ace:	68db      	ldr	r3, [r3, #12]
 8016ad0:	685b      	ldr	r3, [r3, #4]
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7f8 ff6d 	bl	800f9b2 <lwip_htonl>
 8016ad8:	4604      	mov	r4, r0
 8016ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016adc:	891b      	ldrh	r3, [r3, #8]
 8016ade:	461d      	mov	r5, r3
 8016ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae2:	68db      	ldr	r3, [r3, #12]
 8016ae4:	899b      	ldrh	r3, [r3, #12]
 8016ae6:	b29b      	uxth	r3, r3
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7f8 ff4d 	bl	800f988 <lwip_htons>
 8016aee:	4603      	mov	r3, r0
 8016af0:	b2db      	uxtb	r3, r3
 8016af2:	f003 0303 	and.w	r3, r3, #3
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d00e      	beq.n	8016b18 <tcp_output+0x2a0>
 8016afa:	2301      	movs	r3, #1
 8016afc:	e00d      	b.n	8016b1a <tcp_output+0x2a2>
 8016afe:	bf00      	nop
 8016b00:	08026af8 	.word	0x08026af8
 8016b04:	0802703c 	.word	0x0802703c
 8016b08:	08026b4c 	.word	0x08026b4c
 8016b0c:	08027054 	.word	0x08027054
 8016b10:	2000be54 	.word	0x2000be54
 8016b14:	0802707c 	.word	0x0802707c
 8016b18:	2300      	movs	r3, #0
 8016b1a:	442b      	add	r3, r5
 8016b1c:	4423      	add	r3, r4
 8016b1e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016b24:	68bb      	ldr	r3, [r7, #8]
 8016b26:	1ad3      	subs	r3, r2, r3
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	da02      	bge.n	8016b32 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	68ba      	ldr	r2, [r7, #8]
 8016b30:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b34:	891b      	ldrh	r3, [r3, #8]
 8016b36:	461c      	mov	r4, r3
 8016b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b3a:	68db      	ldr	r3, [r3, #12]
 8016b3c:	899b      	ldrh	r3, [r3, #12]
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7f8 ff21 	bl	800f988 <lwip_htons>
 8016b46:	4603      	mov	r3, r0
 8016b48:	b2db      	uxtb	r3, r3
 8016b4a:	f003 0303 	and.w	r3, r3, #3
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d001      	beq.n	8016b56 <tcp_output+0x2de>
 8016b52:	2301      	movs	r3, #1
 8016b54:	e000      	b.n	8016b58 <tcp_output+0x2e0>
 8016b56:	2300      	movs	r3, #0
 8016b58:	4423      	add	r3, r4
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d049      	beq.n	8016bf2 <tcp_output+0x37a>
      seg->next = NULL;
 8016b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b60:	2200      	movs	r2, #0
 8016b62:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d105      	bne.n	8016b78 <tcp_output+0x300>
        pcb->unacked = seg;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b70:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b74:	623b      	str	r3, [r7, #32]
 8016b76:	e03f      	b.n	8016bf8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b7a:	68db      	ldr	r3, [r3, #12]
 8016b7c:	685b      	ldr	r3, [r3, #4]
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f7f8 ff17 	bl	800f9b2 <lwip_htonl>
 8016b84:	4604      	mov	r4, r0
 8016b86:	6a3b      	ldr	r3, [r7, #32]
 8016b88:	68db      	ldr	r3, [r3, #12]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7f8 ff10 	bl	800f9b2 <lwip_htonl>
 8016b92:	4603      	mov	r3, r0
 8016b94:	1ae3      	subs	r3, r4, r3
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	da24      	bge.n	8016be4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	3370      	adds	r3, #112	; 0x70
 8016b9e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016ba0:	e002      	b.n	8016ba8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d011      	beq.n	8016bd4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	68db      	ldr	r3, [r3, #12]
 8016bb6:	685b      	ldr	r3, [r3, #4]
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7f8 fefa 	bl	800f9b2 <lwip_htonl>
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc2:	68db      	ldr	r3, [r3, #12]
 8016bc4:	685b      	ldr	r3, [r3, #4]
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7f8 fef3 	bl	800f9b2 <lwip_htonl>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	dbe6      	blt.n	8016ba2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016bd4:	69fb      	ldr	r3, [r7, #28]
 8016bd6:	681a      	ldr	r2, [r3, #0]
 8016bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bda:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016bdc:	69fb      	ldr	r3, [r7, #28]
 8016bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016be0:	601a      	str	r2, [r3, #0]
 8016be2:	e009      	b.n	8016bf8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016be4:	6a3b      	ldr	r3, [r7, #32]
 8016be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016be8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016bea:	6a3b      	ldr	r3, [r7, #32]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	623b      	str	r3, [r7, #32]
 8016bf0:	e002      	b.n	8016bf8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bf4:	f7fb feff 	bl	80129f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bfc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d012      	beq.n	8016c2a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c06:	68db      	ldr	r3, [r3, #12]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7f8 fed1 	bl	800f9b2 <lwip_htonl>
 8016c10:	4602      	mov	r2, r0
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c16:	1ad3      	subs	r3, r2, r3
 8016c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c1a:	8912      	ldrh	r2, [r2, #8]
 8016c1c:	4413      	add	r3, r2
  while (seg != NULL &&
 8016c1e:	69ba      	ldr	r2, [r7, #24]
 8016c20:	429a      	cmp	r2, r3
 8016c22:	f4bf aed9 	bcs.w	80169d8 <tcp_output+0x160>
 8016c26:	e000      	b.n	8016c2a <tcp_output+0x3b2>
      break;
 8016c28:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d108      	bne.n	8016c44 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2200      	movs	r2, #0
 8016c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016c3a:	e004      	b.n	8016c46 <tcp_output+0x3ce>
    goto output_done;
 8016c3c:	bf00      	nop
 8016c3e:	e002      	b.n	8016c46 <tcp_output+0x3ce>
    goto output_done;
 8016c40:	bf00      	nop
 8016c42:	e000      	b.n	8016c46 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016c44:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	8b5b      	ldrh	r3, [r3, #26]
 8016c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016c4e:	b29a      	uxth	r2, r3
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016c54:	2300      	movs	r3, #0
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3728      	adds	r7, #40	; 0x28
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8016c5e:	bf00      	nop

08016c60 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d106      	bne.n	8016c7c <tcp_output_segment_busy+0x1c>
 8016c6e:	4b09      	ldr	r3, [pc, #36]	; (8016c94 <tcp_output_segment_busy+0x34>)
 8016c70:	f240 529a 	movw	r2, #1434	; 0x59a
 8016c74:	4908      	ldr	r1, [pc, #32]	; (8016c98 <tcp_output_segment_busy+0x38>)
 8016c76:	4809      	ldr	r0, [pc, #36]	; (8016c9c <tcp_output_segment_busy+0x3c>)
 8016c78:	f004 fd7e 	bl	801b778 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	685b      	ldr	r3, [r3, #4]
 8016c80:	7b9b      	ldrb	r3, [r3, #14]
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	d001      	beq.n	8016c8a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016c86:	2301      	movs	r3, #1
 8016c88:	e000      	b.n	8016c8c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016c8a:	2300      	movs	r3, #0
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3708      	adds	r7, #8
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}
 8016c94:	08026af8 	.word	0x08026af8
 8016c98:	08027094 	.word	0x08027094
 8016c9c:	08026b4c 	.word	0x08026b4c

08016ca0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016ca0:	b5b0      	push	{r4, r5, r7, lr}
 8016ca2:	b08c      	sub	sp, #48	; 0x30
 8016ca4:	af04      	add	r7, sp, #16
 8016ca6:	60f8      	str	r0, [r7, #12]
 8016ca8:	60b9      	str	r1, [r7, #8]
 8016caa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d106      	bne.n	8016cc0 <tcp_output_segment+0x20>
 8016cb2:	4b63      	ldr	r3, [pc, #396]	; (8016e40 <tcp_output_segment+0x1a0>)
 8016cb4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016cb8:	4962      	ldr	r1, [pc, #392]	; (8016e44 <tcp_output_segment+0x1a4>)
 8016cba:	4863      	ldr	r0, [pc, #396]	; (8016e48 <tcp_output_segment+0x1a8>)
 8016cbc:	f004 fd5c 	bl	801b778 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016cc0:	68bb      	ldr	r3, [r7, #8]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d106      	bne.n	8016cd4 <tcp_output_segment+0x34>
 8016cc6:	4b5e      	ldr	r3, [pc, #376]	; (8016e40 <tcp_output_segment+0x1a0>)
 8016cc8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016ccc:	495f      	ldr	r1, [pc, #380]	; (8016e4c <tcp_output_segment+0x1ac>)
 8016cce:	485e      	ldr	r0, [pc, #376]	; (8016e48 <tcp_output_segment+0x1a8>)
 8016cd0:	f004 fd52 	bl	801b778 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d106      	bne.n	8016ce8 <tcp_output_segment+0x48>
 8016cda:	4b59      	ldr	r3, [pc, #356]	; (8016e40 <tcp_output_segment+0x1a0>)
 8016cdc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016ce0:	495b      	ldr	r1, [pc, #364]	; (8016e50 <tcp_output_segment+0x1b0>)
 8016ce2:	4859      	ldr	r0, [pc, #356]	; (8016e48 <tcp_output_segment+0x1a8>)
 8016ce4:	f004 fd48 	bl	801b778 <printf>

  if (tcp_output_segment_busy(seg)) {
 8016ce8:	68f8      	ldr	r0, [r7, #12]
 8016cea:	f7ff ffb9 	bl	8016c60 <tcp_output_segment_busy>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d001      	beq.n	8016cf8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	e09f      	b.n	8016e38 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	68dc      	ldr	r4, [r3, #12]
 8016d00:	4610      	mov	r0, r2
 8016d02:	f7f8 fe56 	bl	800f9b2 <lwip_htonl>
 8016d06:	4603      	mov	r3, r0
 8016d08:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	68dc      	ldr	r4, [r3, #12]
 8016d12:	4610      	mov	r0, r2
 8016d14:	f7f8 fe38 	bl	800f988 <lwip_htons>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d20:	68ba      	ldr	r2, [r7, #8]
 8016d22:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016d24:	441a      	add	r2, r3
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	3314      	adds	r3, #20
 8016d30:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	7a9b      	ldrb	r3, [r3, #10]
 8016d36:	f003 0301 	and.w	r3, r3, #1
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d015      	beq.n	8016d6a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016d3e:	68bb      	ldr	r3, [r7, #8]
 8016d40:	3304      	adds	r3, #4
 8016d42:	461a      	mov	r2, r3
 8016d44:	6879      	ldr	r1, [r7, #4]
 8016d46:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016d4a:	f7fc fa37 	bl	80131bc <tcp_eff_send_mss_netif>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016d52:	8b7b      	ldrh	r3, [r7, #26]
 8016d54:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7f8 fe2a 	bl	800f9b2 <lwip_htonl>
 8016d5e:	4602      	mov	r2, r0
 8016d60:	69fb      	ldr	r3, [r7, #28]
 8016d62:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	3304      	adds	r3, #4
 8016d68:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	da02      	bge.n	8016d7a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	2200      	movs	r2, #0
 8016d78:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d10c      	bne.n	8016d9c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016d82:	4b34      	ldr	r3, [pc, #208]	; (8016e54 <tcp_output_segment+0x1b4>)
 8016d84:	681a      	ldr	r2, [r3, #0]
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	68db      	ldr	r3, [r3, #12]
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	4618      	mov	r0, r3
 8016d92:	f7f8 fe0e 	bl	800f9b2 <lwip_htonl>
 8016d96:	4602      	mov	r2, r0
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	68da      	ldr	r2, [r3, #12]
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	685b      	ldr	r3, [r3, #4]
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	1ad3      	subs	r3, r2, r3
 8016da8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	685b      	ldr	r3, [r3, #4]
 8016dae:	8959      	ldrh	r1, [r3, #10]
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	685b      	ldr	r3, [r3, #4]
 8016db4:	8b3a      	ldrh	r2, [r7, #24]
 8016db6:	1a8a      	subs	r2, r1, r2
 8016db8:	b292      	uxth	r2, r2
 8016dba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	685b      	ldr	r3, [r3, #4]
 8016dc0:	8919      	ldrh	r1, [r3, #8]
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	685b      	ldr	r3, [r3, #4]
 8016dc6:	8b3a      	ldrh	r2, [r7, #24]
 8016dc8:	1a8a      	subs	r2, r1, r2
 8016dca:	b292      	uxth	r2, r2
 8016dcc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	685b      	ldr	r3, [r3, #4]
 8016dd2:	68fa      	ldr	r2, [r7, #12]
 8016dd4:	68d2      	ldr	r2, [r2, #12]
 8016dd6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	68db      	ldr	r3, [r3, #12]
 8016ddc:	2200      	movs	r2, #0
 8016dde:	741a      	strb	r2, [r3, #16]
 8016de0:	2200      	movs	r2, #0
 8016de2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	68db      	ldr	r3, [r3, #12]
 8016de8:	f103 0214 	add.w	r2, r3, #20
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	7a9b      	ldrb	r3, [r3, #10]
 8016df0:	009b      	lsls	r3, r3, #2
 8016df2:	f003 0304 	and.w	r3, r3, #4
 8016df6:	4413      	add	r3, r2
 8016df8:	69fa      	ldr	r2, [r7, #28]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	d006      	beq.n	8016e0c <tcp_output_segment+0x16c>
 8016dfe:	4b10      	ldr	r3, [pc, #64]	; (8016e40 <tcp_output_segment+0x1a0>)
 8016e00:	f240 621c 	movw	r2, #1564	; 0x61c
 8016e04:	4914      	ldr	r1, [pc, #80]	; (8016e58 <tcp_output_segment+0x1b8>)
 8016e06:	4810      	ldr	r0, [pc, #64]	; (8016e48 <tcp_output_segment+0x1a8>)
 8016e08:	f004 fcb6 	bl	801b778 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	6858      	ldr	r0, [r3, #4]
 8016e10:	68b9      	ldr	r1, [r7, #8]
 8016e12:	68bb      	ldr	r3, [r7, #8]
 8016e14:	1d1c      	adds	r4, r3, #4
 8016e16:	68bb      	ldr	r3, [r7, #8]
 8016e18:	7add      	ldrb	r5, [r3, #11]
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	7a9b      	ldrb	r3, [r3, #10]
 8016e1e:	687a      	ldr	r2, [r7, #4]
 8016e20:	9202      	str	r2, [sp, #8]
 8016e22:	2206      	movs	r2, #6
 8016e24:	9201      	str	r2, [sp, #4]
 8016e26:	9300      	str	r3, [sp, #0]
 8016e28:	462b      	mov	r3, r5
 8016e2a:	4622      	mov	r2, r4
 8016e2c:	f002 fd96 	bl	801995c <ip4_output_if>
 8016e30:	4603      	mov	r3, r0
 8016e32:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	3720      	adds	r7, #32
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8016e40:	08026af8 	.word	0x08026af8
 8016e44:	080270bc 	.word	0x080270bc
 8016e48:	08026b4c 	.word	0x08026b4c
 8016e4c:	080270dc 	.word	0x080270dc
 8016e50:	080270fc 	.word	0x080270fc
 8016e54:	2000be44 	.word	0x2000be44
 8016e58:	08027120 	.word	0x08027120

08016e5c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016e5c:	b5b0      	push	{r4, r5, r7, lr}
 8016e5e:	b084      	sub	sp, #16
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d106      	bne.n	8016e78 <tcp_rexmit_rto_prepare+0x1c>
 8016e6a:	4b31      	ldr	r3, [pc, #196]	; (8016f30 <tcp_rexmit_rto_prepare+0xd4>)
 8016e6c:	f240 6263 	movw	r2, #1635	; 0x663
 8016e70:	4930      	ldr	r1, [pc, #192]	; (8016f34 <tcp_rexmit_rto_prepare+0xd8>)
 8016e72:	4831      	ldr	r0, [pc, #196]	; (8016f38 <tcp_rexmit_rto_prepare+0xdc>)
 8016e74:	f004 fc80 	bl	801b778 <printf>

  if (pcb->unacked == NULL) {
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d102      	bne.n	8016e86 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016e80:	f06f 0305 	mvn.w	r3, #5
 8016e84:	e050      	b.n	8016f28 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e8a:	60fb      	str	r3, [r7, #12]
 8016e8c:	e00b      	b.n	8016ea6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016e8e:	68f8      	ldr	r0, [r7, #12]
 8016e90:	f7ff fee6 	bl	8016c60 <tcp_output_segment_busy>
 8016e94:	4603      	mov	r3, r0
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d002      	beq.n	8016ea0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016e9a:	f06f 0305 	mvn.w	r3, #5
 8016e9e:	e043      	b.n	8016f28 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	60fb      	str	r3, [r7, #12]
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d1ef      	bne.n	8016e8e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016eae:	68f8      	ldr	r0, [r7, #12]
 8016eb0:	f7ff fed6 	bl	8016c60 <tcp_output_segment_busy>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d002      	beq.n	8016ec0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016eba:	f06f 0305 	mvn.w	r3, #5
 8016ebe:	e033      	b.n	8016f28 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8b5b      	ldrh	r3, [r3, #26]
 8016eda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016ede:	b29a      	uxth	r2, r3
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7f8 fd61 	bl	800f9b2 <lwip_htonl>
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	891b      	ldrh	r3, [r3, #8]
 8016ef6:	461d      	mov	r5, r3
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	899b      	ldrh	r3, [r3, #12]
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7f8 fd41 	bl	800f988 <lwip_htons>
 8016f06:	4603      	mov	r3, r0
 8016f08:	b2db      	uxtb	r3, r3
 8016f0a:	f003 0303 	and.w	r3, r3, #3
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d001      	beq.n	8016f16 <tcp_rexmit_rto_prepare+0xba>
 8016f12:	2301      	movs	r3, #1
 8016f14:	e000      	b.n	8016f18 <tcp_rexmit_rto_prepare+0xbc>
 8016f16:	2300      	movs	r3, #0
 8016f18:	442b      	add	r3, r5
 8016f1a:	18e2      	adds	r2, r4, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	2200      	movs	r2, #0
 8016f24:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016f26:	2300      	movs	r3, #0
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3710      	adds	r7, #16
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8016f30:	08026af8 	.word	0x08026af8
 8016f34:	08027134 	.word	0x08027134
 8016f38:	08026b4c 	.word	0x08026b4c

08016f3c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b082      	sub	sp, #8
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d106      	bne.n	8016f58 <tcp_rexmit_rto_commit+0x1c>
 8016f4a:	4b0d      	ldr	r3, [pc, #52]	; (8016f80 <tcp_rexmit_rto_commit+0x44>)
 8016f4c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016f50:	490c      	ldr	r1, [pc, #48]	; (8016f84 <tcp_rexmit_rto_commit+0x48>)
 8016f52:	480d      	ldr	r0, [pc, #52]	; (8016f88 <tcp_rexmit_rto_commit+0x4c>)
 8016f54:	f004 fc10 	bl	801b778 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f5e:	2bff      	cmp	r3, #255	; 0xff
 8016f60:	d007      	beq.n	8016f72 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f68:	3301      	adds	r3, #1
 8016f6a:	b2da      	uxtb	r2, r3
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	f7ff fc80 	bl	8016878 <tcp_output>
}
 8016f78:	bf00      	nop
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	08026af8 	.word	0x08026af8
 8016f84:	08027158 	.word	0x08027158
 8016f88:	08026b4c 	.word	0x08026b4c

08016f8c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b082      	sub	sp, #8
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d106      	bne.n	8016fa8 <tcp_rexmit_rto+0x1c>
 8016f9a:	4b0a      	ldr	r3, [pc, #40]	; (8016fc4 <tcp_rexmit_rto+0x38>)
 8016f9c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016fa0:	4909      	ldr	r1, [pc, #36]	; (8016fc8 <tcp_rexmit_rto+0x3c>)
 8016fa2:	480a      	ldr	r0, [pc, #40]	; (8016fcc <tcp_rexmit_rto+0x40>)
 8016fa4:	f004 fbe8 	bl	801b778 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016fa8:	6878      	ldr	r0, [r7, #4]
 8016faa:	f7ff ff57 	bl	8016e5c <tcp_rexmit_rto_prepare>
 8016fae:	4603      	mov	r3, r0
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d102      	bne.n	8016fba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	f7ff ffc1 	bl	8016f3c <tcp_rexmit_rto_commit>
  }
}
 8016fba:	bf00      	nop
 8016fbc:	3708      	adds	r7, #8
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	08026af8 	.word	0x08026af8
 8016fc8:	0802717c 	.word	0x0802717c
 8016fcc:	08026b4c 	.word	0x08026b4c

08016fd0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016fd0:	b590      	push	{r4, r7, lr}
 8016fd2:	b085      	sub	sp, #20
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d106      	bne.n	8016fec <tcp_rexmit+0x1c>
 8016fde:	4b2f      	ldr	r3, [pc, #188]	; (801709c <tcp_rexmit+0xcc>)
 8016fe0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016fe4:	492e      	ldr	r1, [pc, #184]	; (80170a0 <tcp_rexmit+0xd0>)
 8016fe6:	482f      	ldr	r0, [pc, #188]	; (80170a4 <tcp_rexmit+0xd4>)
 8016fe8:	f004 fbc6 	bl	801b778 <printf>

  if (pcb->unacked == NULL) {
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d102      	bne.n	8016ffa <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016ff4:	f06f 0305 	mvn.w	r3, #5
 8016ff8:	e04c      	b.n	8017094 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ffe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017000:	68b8      	ldr	r0, [r7, #8]
 8017002:	f7ff fe2d 	bl	8016c60 <tcp_output_segment_busy>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d002      	beq.n	8017012 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801700c:	f06f 0305 	mvn.w	r3, #5
 8017010:	e040      	b.n	8017094 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	681a      	ldr	r2, [r3, #0]
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	336c      	adds	r3, #108	; 0x6c
 801701e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017020:	e002      	b.n	8017028 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d011      	beq.n	8017054 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	68db      	ldr	r3, [r3, #12]
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	4618      	mov	r0, r3
 801703a:	f7f8 fcba 	bl	800f9b2 <lwip_htonl>
 801703e:	4604      	mov	r4, r0
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	4618      	mov	r0, r3
 8017048:	f7f8 fcb3 	bl	800f9b2 <lwip_htonl>
 801704c:	4603      	mov	r3, r0
 801704e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017050:	2b00      	cmp	r3, #0
 8017052:	dbe6      	blt.n	8017022 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	68ba      	ldr	r2, [r7, #8]
 8017060:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d103      	bne.n	8017072 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2200      	movs	r2, #0
 801706e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017078:	2bff      	cmp	r3, #255	; 0xff
 801707a:	d007      	beq.n	801708c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017082:	3301      	adds	r3, #1
 8017084:	b2da      	uxtb	r2, r3
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	2200      	movs	r2, #0
 8017090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017092:	2300      	movs	r3, #0
}
 8017094:	4618      	mov	r0, r3
 8017096:	3714      	adds	r7, #20
 8017098:	46bd      	mov	sp, r7
 801709a:	bd90      	pop	{r4, r7, pc}
 801709c:	08026af8 	.word	0x08026af8
 80170a0:	08027198 	.word	0x08027198
 80170a4:	08026b4c 	.word	0x08026b4c

080170a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d106      	bne.n	80170c4 <tcp_rexmit_fast+0x1c>
 80170b6:	4b2a      	ldr	r3, [pc, #168]	; (8017160 <tcp_rexmit_fast+0xb8>)
 80170b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80170bc:	4929      	ldr	r1, [pc, #164]	; (8017164 <tcp_rexmit_fast+0xbc>)
 80170be:	482a      	ldr	r0, [pc, #168]	; (8017168 <tcp_rexmit_fast+0xc0>)
 80170c0:	f004 fb5a 	bl	801b778 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d045      	beq.n	8017158 <tcp_rexmit_fast+0xb0>
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	8b5b      	ldrh	r3, [r3, #26]
 80170d0:	f003 0304 	and.w	r3, r3, #4
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d13f      	bne.n	8017158 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f7ff ff79 	bl	8016fd0 <tcp_rexmit>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d139      	bne.n	8017158 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80170f0:	4293      	cmp	r3, r2
 80170f2:	bf28      	it	cs
 80170f4:	4613      	movcs	r3, r2
 80170f6:	b29b      	uxth	r3, r3
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	da00      	bge.n	80170fe <tcp_rexmit_fast+0x56>
 80170fc:	3301      	adds	r3, #1
 80170fe:	105b      	asrs	r3, r3, #1
 8017100:	b29a      	uxth	r2, r3
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801710e:	461a      	mov	r2, r3
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017114:	005b      	lsls	r3, r3, #1
 8017116:	429a      	cmp	r2, r3
 8017118:	d206      	bcs.n	8017128 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801711e:	005b      	lsls	r3, r3, #1
 8017120:	b29a      	uxth	r2, r3
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017132:	4619      	mov	r1, r3
 8017134:	0049      	lsls	r1, r1, #1
 8017136:	440b      	add	r3, r1
 8017138:	b29b      	uxth	r3, r3
 801713a:	4413      	add	r3, r2
 801713c:	b29a      	uxth	r2, r3
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	8b5b      	ldrh	r3, [r3, #26]
 8017148:	f043 0304 	orr.w	r3, r3, #4
 801714c:	b29a      	uxth	r2, r3
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2200      	movs	r2, #0
 8017156:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017158:	bf00      	nop
 801715a:	3708      	adds	r7, #8
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}
 8017160:	08026af8 	.word	0x08026af8
 8017164:	080271b0 	.word	0x080271b0
 8017168:	08026b4c 	.word	0x08026b4c

0801716c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b086      	sub	sp, #24
 8017170:	af00      	add	r7, sp, #0
 8017172:	60f8      	str	r0, [r7, #12]
 8017174:	607b      	str	r3, [r7, #4]
 8017176:	460b      	mov	r3, r1
 8017178:	817b      	strh	r3, [r7, #10]
 801717a:	4613      	mov	r3, r2
 801717c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801717e:	897a      	ldrh	r2, [r7, #10]
 8017180:	893b      	ldrh	r3, [r7, #8]
 8017182:	4413      	add	r3, r2
 8017184:	b29b      	uxth	r3, r3
 8017186:	3314      	adds	r3, #20
 8017188:	b29b      	uxth	r3, r3
 801718a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801718e:	4619      	mov	r1, r3
 8017190:	2022      	movs	r0, #34	; 0x22
 8017192:	f7f9 fca7 	bl	8010ae4 <pbuf_alloc>
 8017196:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017198:	697b      	ldr	r3, [r7, #20]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d04d      	beq.n	801723a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801719e:	897b      	ldrh	r3, [r7, #10]
 80171a0:	3313      	adds	r3, #19
 80171a2:	697a      	ldr	r2, [r7, #20]
 80171a4:	8952      	ldrh	r2, [r2, #10]
 80171a6:	4293      	cmp	r3, r2
 80171a8:	db06      	blt.n	80171b8 <tcp_output_alloc_header_common+0x4c>
 80171aa:	4b26      	ldr	r3, [pc, #152]	; (8017244 <tcp_output_alloc_header_common+0xd8>)
 80171ac:	f240 7223 	movw	r2, #1827	; 0x723
 80171b0:	4925      	ldr	r1, [pc, #148]	; (8017248 <tcp_output_alloc_header_common+0xdc>)
 80171b2:	4826      	ldr	r0, [pc, #152]	; (801724c <tcp_output_alloc_header_common+0xe0>)
 80171b4:	f004 fae0 	bl	801b778 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	685b      	ldr	r3, [r3, #4]
 80171bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80171be:	8c3b      	ldrh	r3, [r7, #32]
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7f8 fbe1 	bl	800f988 <lwip_htons>
 80171c6:	4603      	mov	r3, r0
 80171c8:	461a      	mov	r2, r3
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80171ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80171d0:	4618      	mov	r0, r3
 80171d2:	f7f8 fbd9 	bl	800f988 <lwip_htons>
 80171d6:	4603      	mov	r3, r0
 80171d8:	461a      	mov	r2, r3
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80171e4:	68f8      	ldr	r0, [r7, #12]
 80171e6:	f7f8 fbe4 	bl	800f9b2 <lwip_htonl>
 80171ea:	4602      	mov	r2, r0
 80171ec:	693b      	ldr	r3, [r7, #16]
 80171ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80171f0:	897b      	ldrh	r3, [r7, #10]
 80171f2:	089b      	lsrs	r3, r3, #2
 80171f4:	b29b      	uxth	r3, r3
 80171f6:	3305      	adds	r3, #5
 80171f8:	b29b      	uxth	r3, r3
 80171fa:	031b      	lsls	r3, r3, #12
 80171fc:	b29a      	uxth	r2, r3
 80171fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017202:	b29b      	uxth	r3, r3
 8017204:	4313      	orrs	r3, r2
 8017206:	b29b      	uxth	r3, r3
 8017208:	4618      	mov	r0, r3
 801720a:	f7f8 fbbd 	bl	800f988 <lwip_htons>
 801720e:	4603      	mov	r3, r0
 8017210:	461a      	mov	r2, r3
 8017212:	693b      	ldr	r3, [r7, #16]
 8017214:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017216:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017218:	4618      	mov	r0, r3
 801721a:	f7f8 fbb5 	bl	800f988 <lwip_htons>
 801721e:	4603      	mov	r3, r0
 8017220:	461a      	mov	r2, r3
 8017222:	693b      	ldr	r3, [r7, #16]
 8017224:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017226:	693b      	ldr	r3, [r7, #16]
 8017228:	2200      	movs	r2, #0
 801722a:	741a      	strb	r2, [r3, #16]
 801722c:	2200      	movs	r2, #0
 801722e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017230:	693b      	ldr	r3, [r7, #16]
 8017232:	2200      	movs	r2, #0
 8017234:	749a      	strb	r2, [r3, #18]
 8017236:	2200      	movs	r2, #0
 8017238:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801723a:	697b      	ldr	r3, [r7, #20]
}
 801723c:	4618      	mov	r0, r3
 801723e:	3718      	adds	r7, #24
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}
 8017244:	08026af8 	.word	0x08026af8
 8017248:	080271d0 	.word	0x080271d0
 801724c:	08026b4c 	.word	0x08026b4c

08017250 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017250:	b5b0      	push	{r4, r5, r7, lr}
 8017252:	b08a      	sub	sp, #40	; 0x28
 8017254:	af04      	add	r7, sp, #16
 8017256:	60f8      	str	r0, [r7, #12]
 8017258:	607b      	str	r3, [r7, #4]
 801725a:	460b      	mov	r3, r1
 801725c:	817b      	strh	r3, [r7, #10]
 801725e:	4613      	mov	r3, r2
 8017260:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d106      	bne.n	8017276 <tcp_output_alloc_header+0x26>
 8017268:	4b15      	ldr	r3, [pc, #84]	; (80172c0 <tcp_output_alloc_header+0x70>)
 801726a:	f240 7242 	movw	r2, #1858	; 0x742
 801726e:	4915      	ldr	r1, [pc, #84]	; (80172c4 <tcp_output_alloc_header+0x74>)
 8017270:	4815      	ldr	r0, [pc, #84]	; (80172c8 <tcp_output_alloc_header+0x78>)
 8017272:	f004 fa81 	bl	801b778 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	8adb      	ldrh	r3, [r3, #22]
 801727e:	68fa      	ldr	r2, [r7, #12]
 8017280:	8b12      	ldrh	r2, [r2, #24]
 8017282:	68f9      	ldr	r1, [r7, #12]
 8017284:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017286:	893d      	ldrh	r5, [r7, #8]
 8017288:	897c      	ldrh	r4, [r7, #10]
 801728a:	9103      	str	r1, [sp, #12]
 801728c:	2110      	movs	r1, #16
 801728e:	9102      	str	r1, [sp, #8]
 8017290:	9201      	str	r2, [sp, #4]
 8017292:	9300      	str	r3, [sp, #0]
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	462a      	mov	r2, r5
 8017298:	4621      	mov	r1, r4
 801729a:	f7ff ff67 	bl	801716c <tcp_output_alloc_header_common>
 801729e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d006      	beq.n	80172b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172aa:	68fa      	ldr	r2, [r7, #12]
 80172ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80172ae:	441a      	add	r2, r3
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80172b4:	697b      	ldr	r3, [r7, #20]
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3718      	adds	r7, #24
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bdb0      	pop	{r4, r5, r7, pc}
 80172be:	bf00      	nop
 80172c0:	08026af8 	.word	0x08026af8
 80172c4:	08027200 	.word	0x08027200
 80172c8:	08026b4c 	.word	0x08026b4c

080172cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b088      	sub	sp, #32
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	60f8      	str	r0, [r7, #12]
 80172d4:	60b9      	str	r1, [r7, #8]
 80172d6:	4611      	mov	r1, r2
 80172d8:	461a      	mov	r2, r3
 80172da:	460b      	mov	r3, r1
 80172dc:	71fb      	strb	r3, [r7, #7]
 80172de:	4613      	mov	r3, r2
 80172e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80172e2:	2300      	movs	r3, #0
 80172e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80172e6:	68bb      	ldr	r3, [r7, #8]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d106      	bne.n	80172fa <tcp_output_fill_options+0x2e>
 80172ec:	4b13      	ldr	r3, [pc, #76]	; (801733c <tcp_output_fill_options+0x70>)
 80172ee:	f240 7256 	movw	r2, #1878	; 0x756
 80172f2:	4913      	ldr	r1, [pc, #76]	; (8017340 <tcp_output_fill_options+0x74>)
 80172f4:	4813      	ldr	r0, [pc, #76]	; (8017344 <tcp_output_fill_options+0x78>)
 80172f6:	f004 fa3f 	bl	801b778 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	685b      	ldr	r3, [r3, #4]
 80172fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017300:	69bb      	ldr	r3, [r7, #24]
 8017302:	3314      	adds	r3, #20
 8017304:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017306:	69bb      	ldr	r3, [r7, #24]
 8017308:	f103 0214 	add.w	r2, r3, #20
 801730c:	8bfb      	ldrh	r3, [r7, #30]
 801730e:	009b      	lsls	r3, r3, #2
 8017310:	4619      	mov	r1, r3
 8017312:	79fb      	ldrb	r3, [r7, #7]
 8017314:	009b      	lsls	r3, r3, #2
 8017316:	f003 0304 	and.w	r3, r3, #4
 801731a:	440b      	add	r3, r1
 801731c:	4413      	add	r3, r2
 801731e:	697a      	ldr	r2, [r7, #20]
 8017320:	429a      	cmp	r2, r3
 8017322:	d006      	beq.n	8017332 <tcp_output_fill_options+0x66>
 8017324:	4b05      	ldr	r3, [pc, #20]	; (801733c <tcp_output_fill_options+0x70>)
 8017326:	f240 7275 	movw	r2, #1909	; 0x775
 801732a:	4907      	ldr	r1, [pc, #28]	; (8017348 <tcp_output_fill_options+0x7c>)
 801732c:	4805      	ldr	r0, [pc, #20]	; (8017344 <tcp_output_fill_options+0x78>)
 801732e:	f004 fa23 	bl	801b778 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017332:	bf00      	nop
 8017334:	3720      	adds	r7, #32
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	08026af8 	.word	0x08026af8
 8017340:	08027228 	.word	0x08027228
 8017344:	08026b4c 	.word	0x08026b4c
 8017348:	08027120 	.word	0x08027120

0801734c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b08a      	sub	sp, #40	; 0x28
 8017350:	af04      	add	r7, sp, #16
 8017352:	60f8      	str	r0, [r7, #12]
 8017354:	60b9      	str	r1, [r7, #8]
 8017356:	607a      	str	r2, [r7, #4]
 8017358:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801735a:	68bb      	ldr	r3, [r7, #8]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d106      	bne.n	801736e <tcp_output_control_segment+0x22>
 8017360:	4b1c      	ldr	r3, [pc, #112]	; (80173d4 <tcp_output_control_segment+0x88>)
 8017362:	f240 7287 	movw	r2, #1927	; 0x787
 8017366:	491c      	ldr	r1, [pc, #112]	; (80173d8 <tcp_output_control_segment+0x8c>)
 8017368:	481c      	ldr	r0, [pc, #112]	; (80173dc <tcp_output_control_segment+0x90>)
 801736a:	f004 fa05 	bl	801b778 <printf>

  netif = tcp_route(pcb, src, dst);
 801736e:	683a      	ldr	r2, [r7, #0]
 8017370:	6879      	ldr	r1, [r7, #4]
 8017372:	68f8      	ldr	r0, [r7, #12]
 8017374:	f7fe fae8 	bl	8015948 <tcp_route>
 8017378:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801737a:	693b      	ldr	r3, [r7, #16]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d102      	bne.n	8017386 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017380:	23fc      	movs	r3, #252	; 0xfc
 8017382:	75fb      	strb	r3, [r7, #23]
 8017384:	e01c      	b.n	80173c0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d006      	beq.n	801739a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	7adb      	ldrb	r3, [r3, #11]
 8017390:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	7a9b      	ldrb	r3, [r3, #10]
 8017396:	757b      	strb	r3, [r7, #21]
 8017398:	e003      	b.n	80173a2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801739a:	23ff      	movs	r3, #255	; 0xff
 801739c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801739e:	2300      	movs	r3, #0
 80173a0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80173a2:	7dba      	ldrb	r2, [r7, #22]
 80173a4:	693b      	ldr	r3, [r7, #16]
 80173a6:	9302      	str	r3, [sp, #8]
 80173a8:	2306      	movs	r3, #6
 80173aa:	9301      	str	r3, [sp, #4]
 80173ac:	7d7b      	ldrb	r3, [r7, #21]
 80173ae:	9300      	str	r3, [sp, #0]
 80173b0:	4613      	mov	r3, r2
 80173b2:	683a      	ldr	r2, [r7, #0]
 80173b4:	6879      	ldr	r1, [r7, #4]
 80173b6:	68b8      	ldr	r0, [r7, #8]
 80173b8:	f002 fad0 	bl	801995c <ip4_output_if>
 80173bc:	4603      	mov	r3, r0
 80173be:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80173c0:	68b8      	ldr	r0, [r7, #8]
 80173c2:	f7f9 fe73 	bl	80110ac <pbuf_free>
  return err;
 80173c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80173ca:	4618      	mov	r0, r3
 80173cc:	3718      	adds	r7, #24
 80173ce:	46bd      	mov	sp, r7
 80173d0:	bd80      	pop	{r7, pc}
 80173d2:	bf00      	nop
 80173d4:	08026af8 	.word	0x08026af8
 80173d8:	08027250 	.word	0x08027250
 80173dc:	08026b4c 	.word	0x08026b4c

080173e0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80173e0:	b590      	push	{r4, r7, lr}
 80173e2:	b08b      	sub	sp, #44	; 0x2c
 80173e4:	af04      	add	r7, sp, #16
 80173e6:	60f8      	str	r0, [r7, #12]
 80173e8:	60b9      	str	r1, [r7, #8]
 80173ea:	607a      	str	r2, [r7, #4]
 80173ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d106      	bne.n	8017402 <tcp_rst+0x22>
 80173f4:	4b1f      	ldr	r3, [pc, #124]	; (8017474 <tcp_rst+0x94>)
 80173f6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80173fa:	491f      	ldr	r1, [pc, #124]	; (8017478 <tcp_rst+0x98>)
 80173fc:	481f      	ldr	r0, [pc, #124]	; (801747c <tcp_rst+0x9c>)
 80173fe:	f004 f9bb 	bl	801b778 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017404:	2b00      	cmp	r3, #0
 8017406:	d106      	bne.n	8017416 <tcp_rst+0x36>
 8017408:	4b1a      	ldr	r3, [pc, #104]	; (8017474 <tcp_rst+0x94>)
 801740a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801740e:	491c      	ldr	r1, [pc, #112]	; (8017480 <tcp_rst+0xa0>)
 8017410:	481a      	ldr	r0, [pc, #104]	; (801747c <tcp_rst+0x9c>)
 8017412:	f004 f9b1 	bl	801b778 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017416:	2300      	movs	r3, #0
 8017418:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801741a:	f246 0308 	movw	r3, #24584	; 0x6008
 801741e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017420:	7dfb      	ldrb	r3, [r7, #23]
 8017422:	b29c      	uxth	r4, r3
 8017424:	68b8      	ldr	r0, [r7, #8]
 8017426:	f7f8 fac4 	bl	800f9b2 <lwip_htonl>
 801742a:	4602      	mov	r2, r0
 801742c:	8abb      	ldrh	r3, [r7, #20]
 801742e:	9303      	str	r3, [sp, #12]
 8017430:	2314      	movs	r3, #20
 8017432:	9302      	str	r3, [sp, #8]
 8017434:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017436:	9301      	str	r3, [sp, #4]
 8017438:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801743a:	9300      	str	r3, [sp, #0]
 801743c:	4613      	mov	r3, r2
 801743e:	2200      	movs	r2, #0
 8017440:	4621      	mov	r1, r4
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	f7ff fe92 	bl	801716c <tcp_output_alloc_header_common>
 8017448:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d00c      	beq.n	801746a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017450:	7dfb      	ldrb	r3, [r7, #23]
 8017452:	2200      	movs	r2, #0
 8017454:	6939      	ldr	r1, [r7, #16]
 8017456:	68f8      	ldr	r0, [r7, #12]
 8017458:	f7ff ff38 	bl	80172cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801745e:	683a      	ldr	r2, [r7, #0]
 8017460:	6939      	ldr	r1, [r7, #16]
 8017462:	68f8      	ldr	r0, [r7, #12]
 8017464:	f7ff ff72 	bl	801734c <tcp_output_control_segment>
 8017468:	e000      	b.n	801746c <tcp_rst+0x8c>
    return;
 801746a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801746c:	371c      	adds	r7, #28
 801746e:	46bd      	mov	sp, r7
 8017470:	bd90      	pop	{r4, r7, pc}
 8017472:	bf00      	nop
 8017474:	08026af8 	.word	0x08026af8
 8017478:	0802727c 	.word	0x0802727c
 801747c:	08026b4c 	.word	0x08026b4c
 8017480:	08027298 	.word	0x08027298

08017484 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017484:	b590      	push	{r4, r7, lr}
 8017486:	b087      	sub	sp, #28
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801748c:	2300      	movs	r3, #0
 801748e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017490:	2300      	movs	r3, #0
 8017492:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d106      	bne.n	80174a8 <tcp_send_empty_ack+0x24>
 801749a:	4b28      	ldr	r3, [pc, #160]	; (801753c <tcp_send_empty_ack+0xb8>)
 801749c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80174a0:	4927      	ldr	r1, [pc, #156]	; (8017540 <tcp_send_empty_ack+0xbc>)
 80174a2:	4828      	ldr	r0, [pc, #160]	; (8017544 <tcp_send_empty_ack+0xc0>)
 80174a4:	f004 f968 	bl	801b778 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80174a8:	7dfb      	ldrb	r3, [r7, #23]
 80174aa:	009b      	lsls	r3, r3, #2
 80174ac:	b2db      	uxtb	r3, r3
 80174ae:	f003 0304 	and.w	r3, r3, #4
 80174b2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80174b4:	7d7b      	ldrb	r3, [r7, #21]
 80174b6:	b29c      	uxth	r4, r3
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80174bc:	4618      	mov	r0, r3
 80174be:	f7f8 fa78 	bl	800f9b2 <lwip_htonl>
 80174c2:	4603      	mov	r3, r0
 80174c4:	2200      	movs	r2, #0
 80174c6:	4621      	mov	r1, r4
 80174c8:	6878      	ldr	r0, [r7, #4]
 80174ca:	f7ff fec1 	bl	8017250 <tcp_output_alloc_header>
 80174ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80174d0:	693b      	ldr	r3, [r7, #16]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d109      	bne.n	80174ea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	8b5b      	ldrh	r3, [r3, #26]
 80174da:	f043 0303 	orr.w	r3, r3, #3
 80174de:	b29a      	uxth	r2, r3
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80174e4:	f06f 0301 	mvn.w	r3, #1
 80174e8:	e023      	b.n	8017532 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80174ea:	7dbb      	ldrb	r3, [r7, #22]
 80174ec:	7dfa      	ldrb	r2, [r7, #23]
 80174ee:	6939      	ldr	r1, [r7, #16]
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f7ff feeb 	bl	80172cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80174f6:	687a      	ldr	r2, [r7, #4]
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	3304      	adds	r3, #4
 80174fc:	6939      	ldr	r1, [r7, #16]
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f7ff ff24 	bl	801734c <tcp_output_control_segment>
 8017504:	4603      	mov	r3, r0
 8017506:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d007      	beq.n	8017520 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	8b5b      	ldrh	r3, [r3, #26]
 8017514:	f043 0303 	orr.w	r3, r3, #3
 8017518:	b29a      	uxth	r2, r3
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	835a      	strh	r2, [r3, #26]
 801751e:	e006      	b.n	801752e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	8b5b      	ldrh	r3, [r3, #26]
 8017524:	f023 0303 	bic.w	r3, r3, #3
 8017528:	b29a      	uxth	r2, r3
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801752e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017532:	4618      	mov	r0, r3
 8017534:	371c      	adds	r7, #28
 8017536:	46bd      	mov	sp, r7
 8017538:	bd90      	pop	{r4, r7, pc}
 801753a:	bf00      	nop
 801753c:	08026af8 	.word	0x08026af8
 8017540:	080272b4 	.word	0x080272b4
 8017544:	08026b4c 	.word	0x08026b4c

08017548 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017548:	b590      	push	{r4, r7, lr}
 801754a:	b087      	sub	sp, #28
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017550:	2300      	movs	r3, #0
 8017552:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d106      	bne.n	8017568 <tcp_keepalive+0x20>
 801755a:	4b18      	ldr	r3, [pc, #96]	; (80175bc <tcp_keepalive+0x74>)
 801755c:	f640 0224 	movw	r2, #2084	; 0x824
 8017560:	4917      	ldr	r1, [pc, #92]	; (80175c0 <tcp_keepalive+0x78>)
 8017562:	4818      	ldr	r0, [pc, #96]	; (80175c4 <tcp_keepalive+0x7c>)
 8017564:	f004 f908 	bl	801b778 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017568:	7dfb      	ldrb	r3, [r7, #23]
 801756a:	b29c      	uxth	r4, r3
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017570:	3b01      	subs	r3, #1
 8017572:	4618      	mov	r0, r3
 8017574:	f7f8 fa1d 	bl	800f9b2 <lwip_htonl>
 8017578:	4603      	mov	r3, r0
 801757a:	2200      	movs	r2, #0
 801757c:	4621      	mov	r1, r4
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f7ff fe66 	bl	8017250 <tcp_output_alloc_header>
 8017584:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d102      	bne.n	8017592 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801758c:	f04f 33ff 	mov.w	r3, #4294967295
 8017590:	e010      	b.n	80175b4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017592:	7dfb      	ldrb	r3, [r7, #23]
 8017594:	2200      	movs	r2, #0
 8017596:	6939      	ldr	r1, [r7, #16]
 8017598:	6878      	ldr	r0, [r7, #4]
 801759a:	f7ff fe97 	bl	80172cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801759e:	687a      	ldr	r2, [r7, #4]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	3304      	adds	r3, #4
 80175a4:	6939      	ldr	r1, [r7, #16]
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	f7ff fed0 	bl	801734c <tcp_output_control_segment>
 80175ac:	4603      	mov	r3, r0
 80175ae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80175b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	371c      	adds	r7, #28
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd90      	pop	{r4, r7, pc}
 80175bc:	08026af8 	.word	0x08026af8
 80175c0:	080272d4 	.word	0x080272d4
 80175c4:	08026b4c 	.word	0x08026b4c

080175c8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80175c8:	b590      	push	{r4, r7, lr}
 80175ca:	b08b      	sub	sp, #44	; 0x2c
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80175d0:	2300      	movs	r3, #0
 80175d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d106      	bne.n	80175ea <tcp_zero_window_probe+0x22>
 80175dc:	4b4c      	ldr	r3, [pc, #304]	; (8017710 <tcp_zero_window_probe+0x148>)
 80175de:	f640 024f 	movw	r2, #2127	; 0x84f
 80175e2:	494c      	ldr	r1, [pc, #304]	; (8017714 <tcp_zero_window_probe+0x14c>)
 80175e4:	484c      	ldr	r0, [pc, #304]	; (8017718 <tcp_zero_window_probe+0x150>)
 80175e6:	f004 f8c7 	bl	801b778 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175ee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80175f0:	6a3b      	ldr	r3, [r7, #32]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d101      	bne.n	80175fa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80175f6:	2300      	movs	r3, #0
 80175f8:	e086      	b.n	8017708 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017600:	2bff      	cmp	r3, #255	; 0xff
 8017602:	d007      	beq.n	8017614 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801760a:	3301      	adds	r3, #1
 801760c:	b2da      	uxtb	r2, r3
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017614:	6a3b      	ldr	r3, [r7, #32]
 8017616:	68db      	ldr	r3, [r3, #12]
 8017618:	899b      	ldrh	r3, [r3, #12]
 801761a:	b29b      	uxth	r3, r3
 801761c:	4618      	mov	r0, r3
 801761e:	f7f8 f9b3 	bl	800f988 <lwip_htons>
 8017622:	4603      	mov	r3, r0
 8017624:	b2db      	uxtb	r3, r3
 8017626:	f003 0301 	and.w	r3, r3, #1
 801762a:	2b00      	cmp	r3, #0
 801762c:	d005      	beq.n	801763a <tcp_zero_window_probe+0x72>
 801762e:	6a3b      	ldr	r3, [r7, #32]
 8017630:	891b      	ldrh	r3, [r3, #8]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d101      	bne.n	801763a <tcp_zero_window_probe+0x72>
 8017636:	2301      	movs	r3, #1
 8017638:	e000      	b.n	801763c <tcp_zero_window_probe+0x74>
 801763a:	2300      	movs	r3, #0
 801763c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801763e:	7ffb      	ldrb	r3, [r7, #31]
 8017640:	2b00      	cmp	r3, #0
 8017642:	bf0c      	ite	eq
 8017644:	2301      	moveq	r3, #1
 8017646:	2300      	movne	r3, #0
 8017648:	b2db      	uxtb	r3, r3
 801764a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801764c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017650:	b299      	uxth	r1, r3
 8017652:	6a3b      	ldr	r3, [r7, #32]
 8017654:	68db      	ldr	r3, [r3, #12]
 8017656:	685b      	ldr	r3, [r3, #4]
 8017658:	8bba      	ldrh	r2, [r7, #28]
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f7ff fdf8 	bl	8017250 <tcp_output_alloc_header>
 8017660:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d102      	bne.n	801766e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017668:	f04f 33ff 	mov.w	r3, #4294967295
 801766c:	e04c      	b.n	8017708 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801766e:	69bb      	ldr	r3, [r7, #24]
 8017670:	685b      	ldr	r3, [r3, #4]
 8017672:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017674:	7ffb      	ldrb	r3, [r7, #31]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d011      	beq.n	801769e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	899b      	ldrh	r3, [r3, #12]
 801767e:	b29b      	uxth	r3, r3
 8017680:	b21b      	sxth	r3, r3
 8017682:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017686:	b21c      	sxth	r4, r3
 8017688:	2011      	movs	r0, #17
 801768a:	f7f8 f97d 	bl	800f988 <lwip_htons>
 801768e:	4603      	mov	r3, r0
 8017690:	b21b      	sxth	r3, r3
 8017692:	4323      	orrs	r3, r4
 8017694:	b21b      	sxth	r3, r3
 8017696:	b29a      	uxth	r2, r3
 8017698:	697b      	ldr	r3, [r7, #20]
 801769a:	819a      	strh	r2, [r3, #12]
 801769c:	e010      	b.n	80176c0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801769e:	69bb      	ldr	r3, [r7, #24]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	3314      	adds	r3, #20
 80176a4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80176a6:	6a3b      	ldr	r3, [r7, #32]
 80176a8:	6858      	ldr	r0, [r3, #4]
 80176aa:	6a3b      	ldr	r3, [r7, #32]
 80176ac:	685b      	ldr	r3, [r3, #4]
 80176ae:	891a      	ldrh	r2, [r3, #8]
 80176b0:	6a3b      	ldr	r3, [r7, #32]
 80176b2:	891b      	ldrh	r3, [r3, #8]
 80176b4:	1ad3      	subs	r3, r2, r3
 80176b6:	b29b      	uxth	r3, r3
 80176b8:	2201      	movs	r2, #1
 80176ba:	6939      	ldr	r1, [r7, #16]
 80176bc:	f7f9 fefc 	bl	80114b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80176c0:	6a3b      	ldr	r3, [r7, #32]
 80176c2:	68db      	ldr	r3, [r3, #12]
 80176c4:	685b      	ldr	r3, [r3, #4]
 80176c6:	4618      	mov	r0, r3
 80176c8:	f7f8 f973 	bl	800f9b2 <lwip_htonl>
 80176cc:	4603      	mov	r3, r0
 80176ce:	3301      	adds	r3, #1
 80176d0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	1ad3      	subs	r3, r2, r3
 80176da:	2b00      	cmp	r3, #0
 80176dc:	da02      	bge.n	80176e4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	68fa      	ldr	r2, [r7, #12]
 80176e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80176e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176e8:	2200      	movs	r2, #0
 80176ea:	69b9      	ldr	r1, [r7, #24]
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	f7ff fded 	bl	80172cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	3304      	adds	r3, #4
 80176f8:	69b9      	ldr	r1, [r7, #24]
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f7ff fe26 	bl	801734c <tcp_output_control_segment>
 8017700:	4603      	mov	r3, r0
 8017702:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017704:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017708:	4618      	mov	r0, r3
 801770a:	372c      	adds	r7, #44	; 0x2c
 801770c:	46bd      	mov	sp, r7
 801770e:	bd90      	pop	{r4, r7, pc}
 8017710:	08026af8 	.word	0x08026af8
 8017714:	080272f0 	.word	0x080272f0
 8017718:	08026b4c 	.word	0x08026b4c

0801771c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017724:	f7f9 ffb6 	bl	8011694 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017728:	4b0a      	ldr	r3, [pc, #40]	; (8017754 <tcpip_tcp_timer+0x38>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d103      	bne.n	8017738 <tcpip_tcp_timer+0x1c>
 8017730:	4b09      	ldr	r3, [pc, #36]	; (8017758 <tcpip_tcp_timer+0x3c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d005      	beq.n	8017744 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017738:	2200      	movs	r2, #0
 801773a:	4908      	ldr	r1, [pc, #32]	; (801775c <tcpip_tcp_timer+0x40>)
 801773c:	20fa      	movs	r0, #250	; 0xfa
 801773e:	f000 f8f3 	bl	8017928 <sys_timeout>
 8017742:	e003      	b.n	801774c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017744:	4b06      	ldr	r3, [pc, #24]	; (8017760 <tcpip_tcp_timer+0x44>)
 8017746:	2200      	movs	r2, #0
 8017748:	601a      	str	r2, [r3, #0]
  }
}
 801774a:	bf00      	nop
 801774c:	bf00      	nop
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}
 8017754:	2000be40 	.word	0x2000be40
 8017758:	2000be50 	.word	0x2000be50
 801775c:	0801771d 	.word	0x0801771d
 8017760:	20004f44 	.word	0x20004f44

08017764 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017768:	4b0a      	ldr	r3, [pc, #40]	; (8017794 <tcp_timer_needed+0x30>)
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d10f      	bne.n	8017790 <tcp_timer_needed+0x2c>
 8017770:	4b09      	ldr	r3, [pc, #36]	; (8017798 <tcp_timer_needed+0x34>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d103      	bne.n	8017780 <tcp_timer_needed+0x1c>
 8017778:	4b08      	ldr	r3, [pc, #32]	; (801779c <tcp_timer_needed+0x38>)
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d007      	beq.n	8017790 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017780:	4b04      	ldr	r3, [pc, #16]	; (8017794 <tcp_timer_needed+0x30>)
 8017782:	2201      	movs	r2, #1
 8017784:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017786:	2200      	movs	r2, #0
 8017788:	4905      	ldr	r1, [pc, #20]	; (80177a0 <tcp_timer_needed+0x3c>)
 801778a:	20fa      	movs	r0, #250	; 0xfa
 801778c:	f000 f8cc 	bl	8017928 <sys_timeout>
  }
}
 8017790:	bf00      	nop
 8017792:	bd80      	pop	{r7, pc}
 8017794:	20004f44 	.word	0x20004f44
 8017798:	2000be40 	.word	0x2000be40
 801779c:	2000be50 	.word	0x2000be50
 80177a0:	0801771d 	.word	0x0801771d

080177a4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b086      	sub	sp, #24
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80177b0:	200a      	movs	r0, #10
 80177b2:	f7f8 fdd5 	bl	8010360 <memp_malloc>
 80177b6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80177b8:	693b      	ldr	r3, [r7, #16]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d109      	bne.n	80177d2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80177be:	693b      	ldr	r3, [r7, #16]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d151      	bne.n	8017868 <sys_timeout_abs+0xc4>
 80177c4:	4b2a      	ldr	r3, [pc, #168]	; (8017870 <sys_timeout_abs+0xcc>)
 80177c6:	22be      	movs	r2, #190	; 0xbe
 80177c8:	492a      	ldr	r1, [pc, #168]	; (8017874 <sys_timeout_abs+0xd0>)
 80177ca:	482b      	ldr	r0, [pc, #172]	; (8017878 <sys_timeout_abs+0xd4>)
 80177cc:	f003 ffd4 	bl	801b778 <printf>
    return;
 80177d0:	e04a      	b.n	8017868 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80177d2:	693b      	ldr	r3, [r7, #16]
 80177d4:	2200      	movs	r2, #0
 80177d6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80177d8:	693b      	ldr	r3, [r7, #16]
 80177da:	68ba      	ldr	r2, [r7, #8]
 80177dc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	687a      	ldr	r2, [r7, #4]
 80177e2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80177e4:	693b      	ldr	r3, [r7, #16]
 80177e6:	68fa      	ldr	r2, [r7, #12]
 80177e8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80177ea:	4b24      	ldr	r3, [pc, #144]	; (801787c <sys_timeout_abs+0xd8>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d103      	bne.n	80177fa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80177f2:	4a22      	ldr	r2, [pc, #136]	; (801787c <sys_timeout_abs+0xd8>)
 80177f4:	693b      	ldr	r3, [r7, #16]
 80177f6:	6013      	str	r3, [r2, #0]
    return;
 80177f8:	e037      	b.n	801786a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80177fa:	693b      	ldr	r3, [r7, #16]
 80177fc:	685a      	ldr	r2, [r3, #4]
 80177fe:	4b1f      	ldr	r3, [pc, #124]	; (801787c <sys_timeout_abs+0xd8>)
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	685b      	ldr	r3, [r3, #4]
 8017804:	1ad3      	subs	r3, r2, r3
 8017806:	0fdb      	lsrs	r3, r3, #31
 8017808:	f003 0301 	and.w	r3, r3, #1
 801780c:	b2db      	uxtb	r3, r3
 801780e:	2b00      	cmp	r3, #0
 8017810:	d007      	beq.n	8017822 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017812:	4b1a      	ldr	r3, [pc, #104]	; (801787c <sys_timeout_abs+0xd8>)
 8017814:	681a      	ldr	r2, [r3, #0]
 8017816:	693b      	ldr	r3, [r7, #16]
 8017818:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801781a:	4a18      	ldr	r2, [pc, #96]	; (801787c <sys_timeout_abs+0xd8>)
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	6013      	str	r3, [r2, #0]
 8017820:	e023      	b.n	801786a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017822:	4b16      	ldr	r3, [pc, #88]	; (801787c <sys_timeout_abs+0xd8>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	617b      	str	r3, [r7, #20]
 8017828:	e01a      	b.n	8017860 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801782a:	697b      	ldr	r3, [r7, #20]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d00b      	beq.n	801784a <sys_timeout_abs+0xa6>
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	685a      	ldr	r2, [r3, #4]
 8017836:	697b      	ldr	r3, [r7, #20]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	685b      	ldr	r3, [r3, #4]
 801783c:	1ad3      	subs	r3, r2, r3
 801783e:	0fdb      	lsrs	r3, r3, #31
 8017840:	f003 0301 	and.w	r3, r3, #1
 8017844:	b2db      	uxtb	r3, r3
 8017846:	2b00      	cmp	r3, #0
 8017848:	d007      	beq.n	801785a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	681a      	ldr	r2, [r3, #0]
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	693a      	ldr	r2, [r7, #16]
 8017856:	601a      	str	r2, [r3, #0]
        break;
 8017858:	e007      	b.n	801786a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	617b      	str	r3, [r7, #20]
 8017860:	697b      	ldr	r3, [r7, #20]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1e1      	bne.n	801782a <sys_timeout_abs+0x86>
 8017866:	e000      	b.n	801786a <sys_timeout_abs+0xc6>
    return;
 8017868:	bf00      	nop
      }
    }
  }
}
 801786a:	3718      	adds	r7, #24
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	08027314 	.word	0x08027314
 8017874:	08027348 	.word	0x08027348
 8017878:	08027388 	.word	0x08027388
 801787c:	20004f3c 	.word	0x20004f3c

08017880 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b086      	sub	sp, #24
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	685b      	ldr	r3, [r3, #4]
 8017890:	4798      	blx	r3

  now = sys_now();
 8017892:	f7f2 f89d 	bl	80099d0 <sys_now>
 8017896:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017898:	697b      	ldr	r3, [r7, #20]
 801789a:	681a      	ldr	r2, [r3, #0]
 801789c:	4b0f      	ldr	r3, [pc, #60]	; (80178dc <lwip_cyclic_timer+0x5c>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	4413      	add	r3, r2
 80178a2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80178a4:	68fa      	ldr	r2, [r7, #12]
 80178a6:	693b      	ldr	r3, [r7, #16]
 80178a8:	1ad3      	subs	r3, r2, r3
 80178aa:	0fdb      	lsrs	r3, r3, #31
 80178ac:	f003 0301 	and.w	r3, r3, #1
 80178b0:	b2db      	uxtb	r3, r3
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d009      	beq.n	80178ca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	693b      	ldr	r3, [r7, #16]
 80178bc:	4413      	add	r3, r2
 80178be:	687a      	ldr	r2, [r7, #4]
 80178c0:	4907      	ldr	r1, [pc, #28]	; (80178e0 <lwip_cyclic_timer+0x60>)
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7ff ff6e 	bl	80177a4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80178c8:	e004      	b.n	80178d4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80178ca:	687a      	ldr	r2, [r7, #4]
 80178cc:	4904      	ldr	r1, [pc, #16]	; (80178e0 <lwip_cyclic_timer+0x60>)
 80178ce:	68f8      	ldr	r0, [r7, #12]
 80178d0:	f7ff ff68 	bl	80177a4 <sys_timeout_abs>
}
 80178d4:	bf00      	nop
 80178d6:	3718      	adds	r7, #24
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}
 80178dc:	20004f40 	.word	0x20004f40
 80178e0:	08017881 	.word	0x08017881

080178e4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b082      	sub	sp, #8
 80178e8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80178ea:	2301      	movs	r3, #1
 80178ec:	607b      	str	r3, [r7, #4]
 80178ee:	e00e      	b.n	801790e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80178f0:	4a0b      	ldr	r2, [pc, #44]	; (8017920 <sys_timeouts_init+0x3c>)
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	00db      	lsls	r3, r3, #3
 80178fc:	4a08      	ldr	r2, [pc, #32]	; (8017920 <sys_timeouts_init+0x3c>)
 80178fe:	4413      	add	r3, r2
 8017900:	461a      	mov	r2, r3
 8017902:	4908      	ldr	r1, [pc, #32]	; (8017924 <sys_timeouts_init+0x40>)
 8017904:	f000 f810 	bl	8017928 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	3301      	adds	r3, #1
 801790c:	607b      	str	r3, [r7, #4]
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	2b02      	cmp	r3, #2
 8017912:	d9ed      	bls.n	80178f0 <sys_timeouts_init+0xc>
  }
}
 8017914:	bf00      	nop
 8017916:	bf00      	nop
 8017918:	3708      	adds	r7, #8
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}
 801791e:	bf00      	nop
 8017920:	080296bc 	.word	0x080296bc
 8017924:	08017881 	.word	0x08017881

08017928 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b086      	sub	sp, #24
 801792c:	af00      	add	r7, sp, #0
 801792e:	60f8      	str	r0, [r7, #12]
 8017930:	60b9      	str	r1, [r7, #8]
 8017932:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801793a:	d306      	bcc.n	801794a <sys_timeout+0x22>
 801793c:	4b0a      	ldr	r3, [pc, #40]	; (8017968 <sys_timeout+0x40>)
 801793e:	f240 1229 	movw	r2, #297	; 0x129
 8017942:	490a      	ldr	r1, [pc, #40]	; (801796c <sys_timeout+0x44>)
 8017944:	480a      	ldr	r0, [pc, #40]	; (8017970 <sys_timeout+0x48>)
 8017946:	f003 ff17 	bl	801b778 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801794a:	f7f2 f841 	bl	80099d0 <sys_now>
 801794e:	4602      	mov	r2, r0
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	4413      	add	r3, r2
 8017954:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017956:	687a      	ldr	r2, [r7, #4]
 8017958:	68b9      	ldr	r1, [r7, #8]
 801795a:	6978      	ldr	r0, [r7, #20]
 801795c:	f7ff ff22 	bl	80177a4 <sys_timeout_abs>
#endif
}
 8017960:	bf00      	nop
 8017962:	3718      	adds	r7, #24
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	08027314 	.word	0x08027314
 801796c:	080273b0 	.word	0x080273b0
 8017970:	08027388 	.word	0x08027388

08017974 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b084      	sub	sp, #16
 8017978:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801797a:	f7f2 f829 	bl	80099d0 <sys_now>
 801797e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017980:	4b17      	ldr	r3, [pc, #92]	; (80179e0 <sys_check_timeouts+0x6c>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d022      	beq.n	80179d2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801798c:	68bb      	ldr	r3, [r7, #8]
 801798e:	685b      	ldr	r3, [r3, #4]
 8017990:	68fa      	ldr	r2, [r7, #12]
 8017992:	1ad3      	subs	r3, r2, r3
 8017994:	0fdb      	lsrs	r3, r3, #31
 8017996:	f003 0301 	and.w	r3, r3, #1
 801799a:	b2db      	uxtb	r3, r3
 801799c:	2b00      	cmp	r3, #0
 801799e:	d11a      	bne.n	80179d6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80179a0:	68bb      	ldr	r3, [r7, #8]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	4a0e      	ldr	r2, [pc, #56]	; (80179e0 <sys_check_timeouts+0x6c>)
 80179a6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	689b      	ldr	r3, [r3, #8]
 80179ac:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80179ae:	68bb      	ldr	r3, [r7, #8]
 80179b0:	68db      	ldr	r3, [r3, #12]
 80179b2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	685b      	ldr	r3, [r3, #4]
 80179b8:	4a0a      	ldr	r2, [pc, #40]	; (80179e4 <sys_check_timeouts+0x70>)
 80179ba:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80179bc:	68b9      	ldr	r1, [r7, #8]
 80179be:	200a      	movs	r0, #10
 80179c0:	f7f8 fd20 	bl	8010404 <memp_free>
    if (handler != NULL) {
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d0da      	beq.n	8017980 <sys_check_timeouts+0xc>
      handler(arg);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6838      	ldr	r0, [r7, #0]
 80179ce:	4798      	blx	r3
  do {
 80179d0:	e7d6      	b.n	8017980 <sys_check_timeouts+0xc>
      return;
 80179d2:	bf00      	nop
 80179d4:	e000      	b.n	80179d8 <sys_check_timeouts+0x64>
      return;
 80179d6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80179d8:	3710      	adds	r7, #16
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}
 80179de:	bf00      	nop
 80179e0:	20004f3c 	.word	0x20004f3c
 80179e4:	20004f40 	.word	0x20004f40

080179e8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b082      	sub	sp, #8
 80179ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80179ee:	4b16      	ldr	r3, [pc, #88]	; (8017a48 <sys_timeouts_sleeptime+0x60>)
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d102      	bne.n	80179fc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80179f6:	f04f 33ff 	mov.w	r3, #4294967295
 80179fa:	e020      	b.n	8017a3e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80179fc:	f7f1 ffe8 	bl	80099d0 <sys_now>
 8017a00:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017a02:	4b11      	ldr	r3, [pc, #68]	; (8017a48 <sys_timeouts_sleeptime+0x60>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	685a      	ldr	r2, [r3, #4]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	1ad3      	subs	r3, r2, r3
 8017a0c:	0fdb      	lsrs	r3, r3, #31
 8017a0e:	f003 0301 	and.w	r3, r3, #1
 8017a12:	b2db      	uxtb	r3, r3
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d001      	beq.n	8017a1c <sys_timeouts_sleeptime+0x34>
    return 0;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	e010      	b.n	8017a3e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017a1c:	4b0a      	ldr	r3, [pc, #40]	; (8017a48 <sys_timeouts_sleeptime+0x60>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	685a      	ldr	r2, [r3, #4]
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	1ad3      	subs	r3, r2, r3
 8017a26:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	da06      	bge.n	8017a3c <sys_timeouts_sleeptime+0x54>
 8017a2e:	4b07      	ldr	r3, [pc, #28]	; (8017a4c <sys_timeouts_sleeptime+0x64>)
 8017a30:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017a34:	4906      	ldr	r1, [pc, #24]	; (8017a50 <sys_timeouts_sleeptime+0x68>)
 8017a36:	4807      	ldr	r0, [pc, #28]	; (8017a54 <sys_timeouts_sleeptime+0x6c>)
 8017a38:	f003 fe9e 	bl	801b778 <printf>
    return ret;
 8017a3c:	683b      	ldr	r3, [r7, #0]
  }
}
 8017a3e:	4618      	mov	r0, r3
 8017a40:	3708      	adds	r7, #8
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}
 8017a46:	bf00      	nop
 8017a48:	20004f3c 	.word	0x20004f3c
 8017a4c:	08027314 	.word	0x08027314
 8017a50:	080273e8 	.word	0x080273e8
 8017a54:	08027388 	.word	0x08027388

08017a58 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017a5c:	f003 fe9e 	bl	801b79c <rand>
 8017a60:	4603      	mov	r3, r0
 8017a62:	b29b      	uxth	r3, r3
 8017a64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017a68:	b29b      	uxth	r3, r3
 8017a6a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017a6e:	b29a      	uxth	r2, r3
 8017a70:	4b01      	ldr	r3, [pc, #4]	; (8017a78 <udp_init+0x20>)
 8017a72:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017a74:	bf00      	nop
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	20000034 	.word	0x20000034

08017a7c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017a7c:	b480      	push	{r7}
 8017a7e:	b083      	sub	sp, #12
 8017a80:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017a82:	2300      	movs	r3, #0
 8017a84:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017a86:	4b17      	ldr	r3, [pc, #92]	; (8017ae4 <udp_new_port+0x68>)
 8017a88:	881b      	ldrh	r3, [r3, #0]
 8017a8a:	1c5a      	adds	r2, r3, #1
 8017a8c:	b291      	uxth	r1, r2
 8017a8e:	4a15      	ldr	r2, [pc, #84]	; (8017ae4 <udp_new_port+0x68>)
 8017a90:	8011      	strh	r1, [r2, #0]
 8017a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a96:	4293      	cmp	r3, r2
 8017a98:	d103      	bne.n	8017aa2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017a9a:	4b12      	ldr	r3, [pc, #72]	; (8017ae4 <udp_new_port+0x68>)
 8017a9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017aa0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017aa2:	4b11      	ldr	r3, [pc, #68]	; (8017ae8 <udp_new_port+0x6c>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	603b      	str	r3, [r7, #0]
 8017aa8:	e011      	b.n	8017ace <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017aaa:	683b      	ldr	r3, [r7, #0]
 8017aac:	8a5a      	ldrh	r2, [r3, #18]
 8017aae:	4b0d      	ldr	r3, [pc, #52]	; (8017ae4 <udp_new_port+0x68>)
 8017ab0:	881b      	ldrh	r3, [r3, #0]
 8017ab2:	429a      	cmp	r2, r3
 8017ab4:	d108      	bne.n	8017ac8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017ab6:	88fb      	ldrh	r3, [r7, #6]
 8017ab8:	3301      	adds	r3, #1
 8017aba:	80fb      	strh	r3, [r7, #6]
 8017abc:	88fb      	ldrh	r3, [r7, #6]
 8017abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017ac2:	d3e0      	bcc.n	8017a86 <udp_new_port+0xa>
        return 0;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	e007      	b.n	8017ad8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	68db      	ldr	r3, [r3, #12]
 8017acc:	603b      	str	r3, [r7, #0]
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d1ea      	bne.n	8017aaa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017ad4:	4b03      	ldr	r3, [pc, #12]	; (8017ae4 <udp_new_port+0x68>)
 8017ad6:	881b      	ldrh	r3, [r3, #0]
}
 8017ad8:	4618      	mov	r0, r3
 8017ada:	370c      	adds	r7, #12
 8017adc:	46bd      	mov	sp, r7
 8017ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae2:	4770      	bx	lr
 8017ae4:	20000034 	.word	0x20000034
 8017ae8:	2000be58 	.word	0x2000be58

08017aec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b084      	sub	sp, #16
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	60f8      	str	r0, [r7, #12]
 8017af4:	60b9      	str	r1, [r7, #8]
 8017af6:	4613      	mov	r3, r2
 8017af8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d105      	bne.n	8017b0c <udp_input_local_match+0x20>
 8017b00:	4b27      	ldr	r3, [pc, #156]	; (8017ba0 <udp_input_local_match+0xb4>)
 8017b02:	2287      	movs	r2, #135	; 0x87
 8017b04:	4927      	ldr	r1, [pc, #156]	; (8017ba4 <udp_input_local_match+0xb8>)
 8017b06:	4828      	ldr	r0, [pc, #160]	; (8017ba8 <udp_input_local_match+0xbc>)
 8017b08:	f003 fe36 	bl	801b778 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017b0c:	68bb      	ldr	r3, [r7, #8]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d105      	bne.n	8017b1e <udp_input_local_match+0x32>
 8017b12:	4b23      	ldr	r3, [pc, #140]	; (8017ba0 <udp_input_local_match+0xb4>)
 8017b14:	2288      	movs	r2, #136	; 0x88
 8017b16:	4925      	ldr	r1, [pc, #148]	; (8017bac <udp_input_local_match+0xc0>)
 8017b18:	4823      	ldr	r0, [pc, #140]	; (8017ba8 <udp_input_local_match+0xbc>)
 8017b1a:	f003 fe2d 	bl	801b778 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	7a1b      	ldrb	r3, [r3, #8]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d00b      	beq.n	8017b3e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	7a1a      	ldrb	r2, [r3, #8]
 8017b2a:	4b21      	ldr	r3, [pc, #132]	; (8017bb0 <udp_input_local_match+0xc4>)
 8017b2c:	685b      	ldr	r3, [r3, #4]
 8017b2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017b32:	3301      	adds	r3, #1
 8017b34:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d001      	beq.n	8017b3e <udp_input_local_match+0x52>
    return 0;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	e02b      	b.n	8017b96 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017b3e:	79fb      	ldrb	r3, [r7, #7]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d018      	beq.n	8017b76 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d013      	beq.n	8017b72 <udp_input_local_match+0x86>
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d00f      	beq.n	8017b72 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017b52:	4b17      	ldr	r3, [pc, #92]	; (8017bb0 <udp_input_local_match+0xc4>)
 8017b54:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b5a:	d00a      	beq.n	8017b72 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	681a      	ldr	r2, [r3, #0]
 8017b60:	4b13      	ldr	r3, [pc, #76]	; (8017bb0 <udp_input_local_match+0xc4>)
 8017b62:	695b      	ldr	r3, [r3, #20]
 8017b64:	405a      	eors	r2, r3
 8017b66:	68bb      	ldr	r3, [r7, #8]
 8017b68:	3308      	adds	r3, #8
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d110      	bne.n	8017b94 <udp_input_local_match+0xa8>
          return 1;
 8017b72:	2301      	movs	r3, #1
 8017b74:	e00f      	b.n	8017b96 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d009      	beq.n	8017b90 <udp_input_local_match+0xa4>
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d005      	beq.n	8017b90 <udp_input_local_match+0xa4>
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	681a      	ldr	r2, [r3, #0]
 8017b88:	4b09      	ldr	r3, [pc, #36]	; (8017bb0 <udp_input_local_match+0xc4>)
 8017b8a:	695b      	ldr	r3, [r3, #20]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d101      	bne.n	8017b94 <udp_input_local_match+0xa8>
        return 1;
 8017b90:	2301      	movs	r3, #1
 8017b92:	e000      	b.n	8017b96 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017b94:	2300      	movs	r3, #0
}
 8017b96:	4618      	mov	r0, r3
 8017b98:	3710      	adds	r7, #16
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}
 8017b9e:	bf00      	nop
 8017ba0:	080273fc 	.word	0x080273fc
 8017ba4:	0802742c 	.word	0x0802742c
 8017ba8:	08027450 	.word	0x08027450
 8017bac:	08027478 	.word	0x08027478
 8017bb0:	2000872c 	.word	0x2000872c

08017bb4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017bb4:	b590      	push	{r4, r7, lr}
 8017bb6:	b08d      	sub	sp, #52	; 0x34
 8017bb8:	af02      	add	r7, sp, #8
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d105      	bne.n	8017bd4 <udp_input+0x20>
 8017bc8:	4b7c      	ldr	r3, [pc, #496]	; (8017dbc <udp_input+0x208>)
 8017bca:	22cf      	movs	r2, #207	; 0xcf
 8017bcc:	497c      	ldr	r1, [pc, #496]	; (8017dc0 <udp_input+0x20c>)
 8017bce:	487d      	ldr	r0, [pc, #500]	; (8017dc4 <udp_input+0x210>)
 8017bd0:	f003 fdd2 	bl	801b778 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d105      	bne.n	8017be6 <udp_input+0x32>
 8017bda:	4b78      	ldr	r3, [pc, #480]	; (8017dbc <udp_input+0x208>)
 8017bdc:	22d0      	movs	r2, #208	; 0xd0
 8017bde:	497a      	ldr	r1, [pc, #488]	; (8017dc8 <udp_input+0x214>)
 8017be0:	4878      	ldr	r0, [pc, #480]	; (8017dc4 <udp_input+0x210>)
 8017be2:	f003 fdc9 	bl	801b778 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	895b      	ldrh	r3, [r3, #10]
 8017bea:	2b07      	cmp	r3, #7
 8017bec:	d803      	bhi.n	8017bf6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017bee:	6878      	ldr	r0, [r7, #4]
 8017bf0:	f7f9 fa5c 	bl	80110ac <pbuf_free>
    goto end;
 8017bf4:	e0de      	b.n	8017db4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	685b      	ldr	r3, [r3, #4]
 8017bfa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017bfc:	4b73      	ldr	r3, [pc, #460]	; (8017dcc <udp_input+0x218>)
 8017bfe:	695b      	ldr	r3, [r3, #20]
 8017c00:	4a72      	ldr	r2, [pc, #456]	; (8017dcc <udp_input+0x218>)
 8017c02:	6812      	ldr	r2, [r2, #0]
 8017c04:	4611      	mov	r1, r2
 8017c06:	4618      	mov	r0, r3
 8017c08:	f001 ff80 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017c10:	697b      	ldr	r3, [r7, #20]
 8017c12:	881b      	ldrh	r3, [r3, #0]
 8017c14:	b29b      	uxth	r3, r3
 8017c16:	4618      	mov	r0, r3
 8017c18:	f7f7 feb6 	bl	800f988 <lwip_htons>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017c20:	697b      	ldr	r3, [r7, #20]
 8017c22:	885b      	ldrh	r3, [r3, #2]
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	4618      	mov	r0, r3
 8017c28:	f7f7 feae 	bl	800f988 <lwip_htons>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017c30:	2300      	movs	r3, #0
 8017c32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017c34:	2300      	movs	r3, #0
 8017c36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c3c:	4b64      	ldr	r3, [pc, #400]	; (8017dd0 <udp_input+0x21c>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	627b      	str	r3, [r7, #36]	; 0x24
 8017c42:	e054      	b.n	8017cee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c46:	8a5b      	ldrh	r3, [r3, #18]
 8017c48:	89fa      	ldrh	r2, [r7, #14]
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	d14a      	bne.n	8017ce4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017c4e:	7cfb      	ldrb	r3, [r7, #19]
 8017c50:	461a      	mov	r2, r3
 8017c52:	6839      	ldr	r1, [r7, #0]
 8017c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c56:	f7ff ff49 	bl	8017aec <udp_input_local_match>
 8017c5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d041      	beq.n	8017ce4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c62:	7c1b      	ldrb	r3, [r3, #16]
 8017c64:	f003 0304 	and.w	r3, r3, #4
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d11d      	bne.n	8017ca8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017c6c:	69fb      	ldr	r3, [r7, #28]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d102      	bne.n	8017c78 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c74:	61fb      	str	r3, [r7, #28]
 8017c76:	e017      	b.n	8017ca8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017c78:	7cfb      	ldrb	r3, [r7, #19]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d014      	beq.n	8017ca8 <udp_input+0xf4>
 8017c7e:	4b53      	ldr	r3, [pc, #332]	; (8017dcc <udp_input+0x218>)
 8017c80:	695b      	ldr	r3, [r3, #20]
 8017c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c86:	d10f      	bne.n	8017ca8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017c88:	69fb      	ldr	r3, [r7, #28]
 8017c8a:	681a      	ldr	r2, [r3, #0]
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	3304      	adds	r3, #4
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	429a      	cmp	r2, r3
 8017c94:	d008      	beq.n	8017ca8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c98:	681a      	ldr	r2, [r3, #0]
 8017c9a:	683b      	ldr	r3, [r7, #0]
 8017c9c:	3304      	adds	r3, #4
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	d101      	bne.n	8017ca8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017caa:	8a9b      	ldrh	r3, [r3, #20]
 8017cac:	8a3a      	ldrh	r2, [r7, #16]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	d118      	bne.n	8017ce4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d005      	beq.n	8017cc6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cbc:	685a      	ldr	r2, [r3, #4]
 8017cbe:	4b43      	ldr	r3, [pc, #268]	; (8017dcc <udp_input+0x218>)
 8017cc0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	d10e      	bne.n	8017ce4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017cc6:	6a3b      	ldr	r3, [r7, #32]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d014      	beq.n	8017cf6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cce:	68da      	ldr	r2, [r3, #12]
 8017cd0:	6a3b      	ldr	r3, [r7, #32]
 8017cd2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017cd4:	4b3e      	ldr	r3, [pc, #248]	; (8017dd0 <udp_input+0x21c>)
 8017cd6:	681a      	ldr	r2, [r3, #0]
 8017cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cda:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017cdc:	4a3c      	ldr	r2, [pc, #240]	; (8017dd0 <udp_input+0x21c>)
 8017cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017ce2:	e008      	b.n	8017cf6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cea:	68db      	ldr	r3, [r3, #12]
 8017cec:	627b      	str	r3, [r7, #36]	; 0x24
 8017cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d1a7      	bne.n	8017c44 <udp_input+0x90>
 8017cf4:	e000      	b.n	8017cf8 <udp_input+0x144>
        break;
 8017cf6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d101      	bne.n	8017d02 <udp_input+0x14e>
    pcb = uncon_pcb;
 8017cfe:	69fb      	ldr	r3, [r7, #28]
 8017d00:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d002      	beq.n	8017d0e <udp_input+0x15a>
    for_us = 1;
 8017d08:	2301      	movs	r3, #1
 8017d0a:	76fb      	strb	r3, [r7, #27]
 8017d0c:	e00a      	b.n	8017d24 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017d0e:	683b      	ldr	r3, [r7, #0]
 8017d10:	3304      	adds	r3, #4
 8017d12:	681a      	ldr	r2, [r3, #0]
 8017d14:	4b2d      	ldr	r3, [pc, #180]	; (8017dcc <udp_input+0x218>)
 8017d16:	695b      	ldr	r3, [r3, #20]
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	bf0c      	ite	eq
 8017d1c:	2301      	moveq	r3, #1
 8017d1e:	2300      	movne	r3, #0
 8017d20:	b2db      	uxtb	r3, r3
 8017d22:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017d24:	7efb      	ldrb	r3, [r7, #27]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d041      	beq.n	8017dae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017d2a:	2108      	movs	r1, #8
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7f9 f937 	bl	8010fa0 <pbuf_remove_header>
 8017d32:	4603      	mov	r3, r0
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d00a      	beq.n	8017d4e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017d38:	4b20      	ldr	r3, [pc, #128]	; (8017dbc <udp_input+0x208>)
 8017d3a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017d3e:	4925      	ldr	r1, [pc, #148]	; (8017dd4 <udp_input+0x220>)
 8017d40:	4820      	ldr	r0, [pc, #128]	; (8017dc4 <udp_input+0x210>)
 8017d42:	f003 fd19 	bl	801b778 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	f7f9 f9b0 	bl	80110ac <pbuf_free>
      goto end;
 8017d4c:	e032      	b.n	8017db4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d012      	beq.n	8017d7a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d56:	699b      	ldr	r3, [r3, #24]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d00a      	beq.n	8017d72 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d5e:	699c      	ldr	r4, [r3, #24]
 8017d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d62:	69d8      	ldr	r0, [r3, #28]
 8017d64:	8a3b      	ldrh	r3, [r7, #16]
 8017d66:	9300      	str	r3, [sp, #0]
 8017d68:	4b1b      	ldr	r3, [pc, #108]	; (8017dd8 <udp_input+0x224>)
 8017d6a:	687a      	ldr	r2, [r7, #4]
 8017d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d6e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017d70:	e021      	b.n	8017db6 <udp_input+0x202>
        pbuf_free(p);
 8017d72:	6878      	ldr	r0, [r7, #4]
 8017d74:	f7f9 f99a 	bl	80110ac <pbuf_free>
        goto end;
 8017d78:	e01c      	b.n	8017db4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017d7a:	7cfb      	ldrb	r3, [r7, #19]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d112      	bne.n	8017da6 <udp_input+0x1f2>
 8017d80:	4b12      	ldr	r3, [pc, #72]	; (8017dcc <udp_input+0x218>)
 8017d82:	695b      	ldr	r3, [r3, #20]
 8017d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d88:	2be0      	cmp	r3, #224	; 0xe0
 8017d8a:	d00c      	beq.n	8017da6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017d8c:	4b0f      	ldr	r3, [pc, #60]	; (8017dcc <udp_input+0x218>)
 8017d8e:	899b      	ldrh	r3, [r3, #12]
 8017d90:	3308      	adds	r3, #8
 8017d92:	b29b      	uxth	r3, r3
 8017d94:	b21b      	sxth	r3, r3
 8017d96:	4619      	mov	r1, r3
 8017d98:	6878      	ldr	r0, [r7, #4]
 8017d9a:	f7f9 f974 	bl	8011086 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017d9e:	2103      	movs	r1, #3
 8017da0:	6878      	ldr	r0, [r7, #4]
 8017da2:	f001 fb93 	bl	80194cc <icmp_dest_unreach>
      pbuf_free(p);
 8017da6:	6878      	ldr	r0, [r7, #4]
 8017da8:	f7f9 f980 	bl	80110ac <pbuf_free>
  return;
 8017dac:	e003      	b.n	8017db6 <udp_input+0x202>
    pbuf_free(p);
 8017dae:	6878      	ldr	r0, [r7, #4]
 8017db0:	f7f9 f97c 	bl	80110ac <pbuf_free>
  return;
 8017db4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017db6:	372c      	adds	r7, #44	; 0x2c
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd90      	pop	{r4, r7, pc}
 8017dbc:	080273fc 	.word	0x080273fc
 8017dc0:	080274a0 	.word	0x080274a0
 8017dc4:	08027450 	.word	0x08027450
 8017dc8:	080274b8 	.word	0x080274b8
 8017dcc:	2000872c 	.word	0x2000872c
 8017dd0:	2000be58 	.word	0x2000be58
 8017dd4:	080274d4 	.word	0x080274d4
 8017dd8:	2000873c 	.word	0x2000873c

08017ddc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b082      	sub	sp, #8
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
 8017de4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d109      	bne.n	8017e00 <udp_send+0x24>
 8017dec:	4b11      	ldr	r3, [pc, #68]	; (8017e34 <udp_send+0x58>)
 8017dee:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017df2:	4911      	ldr	r1, [pc, #68]	; (8017e38 <udp_send+0x5c>)
 8017df4:	4811      	ldr	r0, [pc, #68]	; (8017e3c <udp_send+0x60>)
 8017df6:	f003 fcbf 	bl	801b778 <printf>
 8017dfa:	f06f 030f 	mvn.w	r3, #15
 8017dfe:	e015      	b.n	8017e2c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d109      	bne.n	8017e1a <udp_send+0x3e>
 8017e06:	4b0b      	ldr	r3, [pc, #44]	; (8017e34 <udp_send+0x58>)
 8017e08:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017e0c:	490c      	ldr	r1, [pc, #48]	; (8017e40 <udp_send+0x64>)
 8017e0e:	480b      	ldr	r0, [pc, #44]	; (8017e3c <udp_send+0x60>)
 8017e10:	f003 fcb2 	bl	801b778 <printf>
 8017e14:	f06f 030f 	mvn.w	r3, #15
 8017e18:	e008      	b.n	8017e2c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	1d1a      	adds	r2, r3, #4
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	8a9b      	ldrh	r3, [r3, #20]
 8017e22:	6839      	ldr	r1, [r7, #0]
 8017e24:	6878      	ldr	r0, [r7, #4]
 8017e26:	f000 f80d 	bl	8017e44 <udp_sendto>
 8017e2a:	4603      	mov	r3, r0
}
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	3708      	adds	r7, #8
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}
 8017e34:	080273fc 	.word	0x080273fc
 8017e38:	080274f0 	.word	0x080274f0
 8017e3c:	08027450 	.word	0x08027450
 8017e40:	08027508 	.word	0x08027508

08017e44 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b088      	sub	sp, #32
 8017e48:	af02      	add	r7, sp, #8
 8017e4a:	60f8      	str	r0, [r7, #12]
 8017e4c:	60b9      	str	r1, [r7, #8]
 8017e4e:	607a      	str	r2, [r7, #4]
 8017e50:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d109      	bne.n	8017e6c <udp_sendto+0x28>
 8017e58:	4b23      	ldr	r3, [pc, #140]	; (8017ee8 <udp_sendto+0xa4>)
 8017e5a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017e5e:	4923      	ldr	r1, [pc, #140]	; (8017eec <udp_sendto+0xa8>)
 8017e60:	4823      	ldr	r0, [pc, #140]	; (8017ef0 <udp_sendto+0xac>)
 8017e62:	f003 fc89 	bl	801b778 <printf>
 8017e66:	f06f 030f 	mvn.w	r3, #15
 8017e6a:	e038      	b.n	8017ede <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d109      	bne.n	8017e86 <udp_sendto+0x42>
 8017e72:	4b1d      	ldr	r3, [pc, #116]	; (8017ee8 <udp_sendto+0xa4>)
 8017e74:	f240 2219 	movw	r2, #537	; 0x219
 8017e78:	491e      	ldr	r1, [pc, #120]	; (8017ef4 <udp_sendto+0xb0>)
 8017e7a:	481d      	ldr	r0, [pc, #116]	; (8017ef0 <udp_sendto+0xac>)
 8017e7c:	f003 fc7c 	bl	801b778 <printf>
 8017e80:	f06f 030f 	mvn.w	r3, #15
 8017e84:	e02b      	b.n	8017ede <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d109      	bne.n	8017ea0 <udp_sendto+0x5c>
 8017e8c:	4b16      	ldr	r3, [pc, #88]	; (8017ee8 <udp_sendto+0xa4>)
 8017e8e:	f240 221a 	movw	r2, #538	; 0x21a
 8017e92:	4919      	ldr	r1, [pc, #100]	; (8017ef8 <udp_sendto+0xb4>)
 8017e94:	4816      	ldr	r0, [pc, #88]	; (8017ef0 <udp_sendto+0xac>)
 8017e96:	f003 fc6f 	bl	801b778 <printf>
 8017e9a:	f06f 030f 	mvn.w	r3, #15
 8017e9e:	e01e      	b.n	8017ede <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	7a1b      	ldrb	r3, [r3, #8]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d006      	beq.n	8017eb6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	7a1b      	ldrb	r3, [r3, #8]
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7f8 fd6f 	bl	8010990 <netif_get_by_index>
 8017eb2:	6178      	str	r0, [r7, #20]
 8017eb4:	e003      	b.n	8017ebe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8017eb6:	6878      	ldr	r0, [r7, #4]
 8017eb8:	f001 fb92 	bl	80195e0 <ip4_route>
 8017ebc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017ebe:	697b      	ldr	r3, [r7, #20]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d102      	bne.n	8017eca <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017ec4:	f06f 0303 	mvn.w	r3, #3
 8017ec8:	e009      	b.n	8017ede <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8017eca:	887a      	ldrh	r2, [r7, #2]
 8017ecc:	697b      	ldr	r3, [r7, #20]
 8017ece:	9300      	str	r3, [sp, #0]
 8017ed0:	4613      	mov	r3, r2
 8017ed2:	687a      	ldr	r2, [r7, #4]
 8017ed4:	68b9      	ldr	r1, [r7, #8]
 8017ed6:	68f8      	ldr	r0, [r7, #12]
 8017ed8:	f000 f810 	bl	8017efc <udp_sendto_if>
 8017edc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3718      	adds	r7, #24
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	080273fc 	.word	0x080273fc
 8017eec:	08027520 	.word	0x08027520
 8017ef0:	08027450 	.word	0x08027450
 8017ef4:	08027538 	.word	0x08027538
 8017ef8:	08027554 	.word	0x08027554

08017efc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b088      	sub	sp, #32
 8017f00:	af02      	add	r7, sp, #8
 8017f02:	60f8      	str	r0, [r7, #12]
 8017f04:	60b9      	str	r1, [r7, #8]
 8017f06:	607a      	str	r2, [r7, #4]
 8017f08:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d109      	bne.n	8017f24 <udp_sendto_if+0x28>
 8017f10:	4b2e      	ldr	r3, [pc, #184]	; (8017fcc <udp_sendto_if+0xd0>)
 8017f12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f16:	492e      	ldr	r1, [pc, #184]	; (8017fd0 <udp_sendto_if+0xd4>)
 8017f18:	482e      	ldr	r0, [pc, #184]	; (8017fd4 <udp_sendto_if+0xd8>)
 8017f1a:	f003 fc2d 	bl	801b778 <printf>
 8017f1e:	f06f 030f 	mvn.w	r3, #15
 8017f22:	e04f      	b.n	8017fc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017f24:	68bb      	ldr	r3, [r7, #8]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d109      	bne.n	8017f3e <udp_sendto_if+0x42>
 8017f2a:	4b28      	ldr	r3, [pc, #160]	; (8017fcc <udp_sendto_if+0xd0>)
 8017f2c:	f240 2281 	movw	r2, #641	; 0x281
 8017f30:	4929      	ldr	r1, [pc, #164]	; (8017fd8 <udp_sendto_if+0xdc>)
 8017f32:	4828      	ldr	r0, [pc, #160]	; (8017fd4 <udp_sendto_if+0xd8>)
 8017f34:	f003 fc20 	bl	801b778 <printf>
 8017f38:	f06f 030f 	mvn.w	r3, #15
 8017f3c:	e042      	b.n	8017fc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d109      	bne.n	8017f58 <udp_sendto_if+0x5c>
 8017f44:	4b21      	ldr	r3, [pc, #132]	; (8017fcc <udp_sendto_if+0xd0>)
 8017f46:	f240 2282 	movw	r2, #642	; 0x282
 8017f4a:	4924      	ldr	r1, [pc, #144]	; (8017fdc <udp_sendto_if+0xe0>)
 8017f4c:	4821      	ldr	r0, [pc, #132]	; (8017fd4 <udp_sendto_if+0xd8>)
 8017f4e:	f003 fc13 	bl	801b778 <printf>
 8017f52:	f06f 030f 	mvn.w	r3, #15
 8017f56:	e035      	b.n	8017fc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017f58:	6a3b      	ldr	r3, [r7, #32]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d109      	bne.n	8017f72 <udp_sendto_if+0x76>
 8017f5e:	4b1b      	ldr	r3, [pc, #108]	; (8017fcc <udp_sendto_if+0xd0>)
 8017f60:	f240 2283 	movw	r2, #643	; 0x283
 8017f64:	491e      	ldr	r1, [pc, #120]	; (8017fe0 <udp_sendto_if+0xe4>)
 8017f66:	481b      	ldr	r0, [pc, #108]	; (8017fd4 <udp_sendto_if+0xd8>)
 8017f68:	f003 fc06 	bl	801b778 <printf>
 8017f6c:	f06f 030f 	mvn.w	r3, #15
 8017f70:	e028      	b.n	8017fc4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d009      	beq.n	8017f8c <udp_sendto_if+0x90>
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d005      	beq.n	8017f8c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017f88:	2be0      	cmp	r3, #224	; 0xe0
 8017f8a:	d103      	bne.n	8017f94 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017f8c:	6a3b      	ldr	r3, [r7, #32]
 8017f8e:	3304      	adds	r3, #4
 8017f90:	617b      	str	r3, [r7, #20]
 8017f92:	e00b      	b.n	8017fac <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	6a3b      	ldr	r3, [r7, #32]
 8017f9a:	3304      	adds	r3, #4
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	d002      	beq.n	8017fa8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017fa2:	f06f 0303 	mvn.w	r3, #3
 8017fa6:	e00d      	b.n	8017fc4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017fac:	887a      	ldrh	r2, [r7, #2]
 8017fae:	697b      	ldr	r3, [r7, #20]
 8017fb0:	9301      	str	r3, [sp, #4]
 8017fb2:	6a3b      	ldr	r3, [r7, #32]
 8017fb4:	9300      	str	r3, [sp, #0]
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	687a      	ldr	r2, [r7, #4]
 8017fba:	68b9      	ldr	r1, [r7, #8]
 8017fbc:	68f8      	ldr	r0, [r7, #12]
 8017fbe:	f000 f811 	bl	8017fe4 <udp_sendto_if_src>
 8017fc2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	3718      	adds	r7, #24
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}
 8017fcc:	080273fc 	.word	0x080273fc
 8017fd0:	08027570 	.word	0x08027570
 8017fd4:	08027450 	.word	0x08027450
 8017fd8:	0802758c 	.word	0x0802758c
 8017fdc:	080275a8 	.word	0x080275a8
 8017fe0:	080275c8 	.word	0x080275c8

08017fe4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b08c      	sub	sp, #48	; 0x30
 8017fe8:	af04      	add	r7, sp, #16
 8017fea:	60f8      	str	r0, [r7, #12]
 8017fec:	60b9      	str	r1, [r7, #8]
 8017fee:	607a      	str	r2, [r7, #4]
 8017ff0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d109      	bne.n	801800c <udp_sendto_if_src+0x28>
 8017ff8:	4b65      	ldr	r3, [pc, #404]	; (8018190 <udp_sendto_if_src+0x1ac>)
 8017ffa:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017ffe:	4965      	ldr	r1, [pc, #404]	; (8018194 <udp_sendto_if_src+0x1b0>)
 8018000:	4865      	ldr	r0, [pc, #404]	; (8018198 <udp_sendto_if_src+0x1b4>)
 8018002:	f003 fbb9 	bl	801b778 <printf>
 8018006:	f06f 030f 	mvn.w	r3, #15
 801800a:	e0bc      	b.n	8018186 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d109      	bne.n	8018026 <udp_sendto_if_src+0x42>
 8018012:	4b5f      	ldr	r3, [pc, #380]	; (8018190 <udp_sendto_if_src+0x1ac>)
 8018014:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018018:	4960      	ldr	r1, [pc, #384]	; (801819c <udp_sendto_if_src+0x1b8>)
 801801a:	485f      	ldr	r0, [pc, #380]	; (8018198 <udp_sendto_if_src+0x1b4>)
 801801c:	f003 fbac 	bl	801b778 <printf>
 8018020:	f06f 030f 	mvn.w	r3, #15
 8018024:	e0af      	b.n	8018186 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d109      	bne.n	8018040 <udp_sendto_if_src+0x5c>
 801802c:	4b58      	ldr	r3, [pc, #352]	; (8018190 <udp_sendto_if_src+0x1ac>)
 801802e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8018032:	495b      	ldr	r1, [pc, #364]	; (80181a0 <udp_sendto_if_src+0x1bc>)
 8018034:	4858      	ldr	r0, [pc, #352]	; (8018198 <udp_sendto_if_src+0x1b4>)
 8018036:	f003 fb9f 	bl	801b778 <printf>
 801803a:	f06f 030f 	mvn.w	r3, #15
 801803e:	e0a2      	b.n	8018186 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018042:	2b00      	cmp	r3, #0
 8018044:	d109      	bne.n	801805a <udp_sendto_if_src+0x76>
 8018046:	4b52      	ldr	r3, [pc, #328]	; (8018190 <udp_sendto_if_src+0x1ac>)
 8018048:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801804c:	4955      	ldr	r1, [pc, #340]	; (80181a4 <udp_sendto_if_src+0x1c0>)
 801804e:	4852      	ldr	r0, [pc, #328]	; (8018198 <udp_sendto_if_src+0x1b4>)
 8018050:	f003 fb92 	bl	801b778 <printf>
 8018054:	f06f 030f 	mvn.w	r3, #15
 8018058:	e095      	b.n	8018186 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801805c:	2b00      	cmp	r3, #0
 801805e:	d109      	bne.n	8018074 <udp_sendto_if_src+0x90>
 8018060:	4b4b      	ldr	r3, [pc, #300]	; (8018190 <udp_sendto_if_src+0x1ac>)
 8018062:	f240 22d5 	movw	r2, #725	; 0x2d5
 8018066:	4950      	ldr	r1, [pc, #320]	; (80181a8 <udp_sendto_if_src+0x1c4>)
 8018068:	484b      	ldr	r0, [pc, #300]	; (8018198 <udp_sendto_if_src+0x1b4>)
 801806a:	f003 fb85 	bl	801b778 <printf>
 801806e:	f06f 030f 	mvn.w	r3, #15
 8018072:	e088      	b.n	8018186 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	8a5b      	ldrh	r3, [r3, #18]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d10f      	bne.n	801809c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801807c:	68f9      	ldr	r1, [r7, #12]
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	8a5b      	ldrh	r3, [r3, #18]
 8018082:	461a      	mov	r2, r3
 8018084:	68f8      	ldr	r0, [r7, #12]
 8018086:	f000 f893 	bl	80181b0 <udp_bind>
 801808a:	4603      	mov	r3, r0
 801808c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801808e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d002      	beq.n	801809c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018096:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801809a:	e074      	b.n	8018186 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	891b      	ldrh	r3, [r3, #8]
 80180a0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80180a4:	4293      	cmp	r3, r2
 80180a6:	d902      	bls.n	80180ae <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80180a8:	f04f 33ff 	mov.w	r3, #4294967295
 80180ac:	e06b      	b.n	8018186 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80180ae:	2108      	movs	r1, #8
 80180b0:	68b8      	ldr	r0, [r7, #8]
 80180b2:	f7f8 ff65 	bl	8010f80 <pbuf_add_header>
 80180b6:	4603      	mov	r3, r0
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d015      	beq.n	80180e8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80180bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180c0:	2108      	movs	r1, #8
 80180c2:	2022      	movs	r0, #34	; 0x22
 80180c4:	f7f8 fd0e 	bl	8010ae4 <pbuf_alloc>
 80180c8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80180ca:	69fb      	ldr	r3, [r7, #28]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d102      	bne.n	80180d6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80180d0:	f04f 33ff 	mov.w	r3, #4294967295
 80180d4:	e057      	b.n	8018186 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80180d6:	68bb      	ldr	r3, [r7, #8]
 80180d8:	891b      	ldrh	r3, [r3, #8]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d006      	beq.n	80180ec <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80180de:	68b9      	ldr	r1, [r7, #8]
 80180e0:	69f8      	ldr	r0, [r7, #28]
 80180e2:	f7f9 f907 	bl	80112f4 <pbuf_chain>
 80180e6:	e001      	b.n	80180ec <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80180ec:	69fb      	ldr	r3, [r7, #28]
 80180ee:	895b      	ldrh	r3, [r3, #10]
 80180f0:	2b07      	cmp	r3, #7
 80180f2:	d806      	bhi.n	8018102 <udp_sendto_if_src+0x11e>
 80180f4:	4b26      	ldr	r3, [pc, #152]	; (8018190 <udp_sendto_if_src+0x1ac>)
 80180f6:	f240 320d 	movw	r2, #781	; 0x30d
 80180fa:	492c      	ldr	r1, [pc, #176]	; (80181ac <udp_sendto_if_src+0x1c8>)
 80180fc:	4826      	ldr	r0, [pc, #152]	; (8018198 <udp_sendto_if_src+0x1b4>)
 80180fe:	f003 fb3b 	bl	801b778 <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018102:	69fb      	ldr	r3, [r7, #28]
 8018104:	685b      	ldr	r3, [r3, #4]
 8018106:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	8a5b      	ldrh	r3, [r3, #18]
 801810c:	4618      	mov	r0, r3
 801810e:	f7f7 fc3b 	bl	800f988 <lwip_htons>
 8018112:	4603      	mov	r3, r0
 8018114:	461a      	mov	r2, r3
 8018116:	697b      	ldr	r3, [r7, #20]
 8018118:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801811a:	887b      	ldrh	r3, [r7, #2]
 801811c:	4618      	mov	r0, r3
 801811e:	f7f7 fc33 	bl	800f988 <lwip_htons>
 8018122:	4603      	mov	r3, r0
 8018124:	461a      	mov	r2, r3
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	2200      	movs	r2, #0
 801812e:	719a      	strb	r2, [r3, #6]
 8018130:	2200      	movs	r2, #0
 8018132:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018134:	69fb      	ldr	r3, [r7, #28]
 8018136:	891b      	ldrh	r3, [r3, #8]
 8018138:	4618      	mov	r0, r3
 801813a:	f7f7 fc25 	bl	800f988 <lwip_htons>
 801813e:	4603      	mov	r3, r0
 8018140:	461a      	mov	r2, r3
 8018142:	697b      	ldr	r3, [r7, #20]
 8018144:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018146:	2311      	movs	r3, #17
 8018148:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	7adb      	ldrb	r3, [r3, #11]
 801814e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	7a9b      	ldrb	r3, [r3, #10]
 8018154:	7cb9      	ldrb	r1, [r7, #18]
 8018156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018158:	9202      	str	r2, [sp, #8]
 801815a:	7cfa      	ldrb	r2, [r7, #19]
 801815c:	9201      	str	r2, [sp, #4]
 801815e:	9300      	str	r3, [sp, #0]
 8018160:	460b      	mov	r3, r1
 8018162:	687a      	ldr	r2, [r7, #4]
 8018164:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018166:	69f8      	ldr	r0, [r7, #28]
 8018168:	f001 fc22 	bl	80199b0 <ip4_output_if_src>
 801816c:	4603      	mov	r3, r0
 801816e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018170:	69fa      	ldr	r2, [r7, #28]
 8018172:	68bb      	ldr	r3, [r7, #8]
 8018174:	429a      	cmp	r2, r3
 8018176:	d004      	beq.n	8018182 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018178:	69f8      	ldr	r0, [r7, #28]
 801817a:	f7f8 ff97 	bl	80110ac <pbuf_free>
    q = NULL;
 801817e:	2300      	movs	r3, #0
 8018180:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018182:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018186:	4618      	mov	r0, r3
 8018188:	3720      	adds	r7, #32
 801818a:	46bd      	mov	sp, r7
 801818c:	bd80      	pop	{r7, pc}
 801818e:	bf00      	nop
 8018190:	080273fc 	.word	0x080273fc
 8018194:	080275e8 	.word	0x080275e8
 8018198:	08027450 	.word	0x08027450
 801819c:	08027608 	.word	0x08027608
 80181a0:	08027628 	.word	0x08027628
 80181a4:	0802764c 	.word	0x0802764c
 80181a8:	08027670 	.word	0x08027670
 80181ac:	08027694 	.word	0x08027694

080181b0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b086      	sub	sp, #24
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	60f8      	str	r0, [r7, #12]
 80181b8:	60b9      	str	r1, [r7, #8]
 80181ba:	4613      	mov	r3, r2
 80181bc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80181be:	68bb      	ldr	r3, [r7, #8]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d101      	bne.n	80181c8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80181c4:	4b39      	ldr	r3, [pc, #228]	; (80182ac <udp_bind+0xfc>)
 80181c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d109      	bne.n	80181e2 <udp_bind+0x32>
 80181ce:	4b38      	ldr	r3, [pc, #224]	; (80182b0 <udp_bind+0x100>)
 80181d0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80181d4:	4937      	ldr	r1, [pc, #220]	; (80182b4 <udp_bind+0x104>)
 80181d6:	4838      	ldr	r0, [pc, #224]	; (80182b8 <udp_bind+0x108>)
 80181d8:	f003 face 	bl	801b778 <printf>
 80181dc:	f06f 030f 	mvn.w	r3, #15
 80181e0:	e060      	b.n	80182a4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80181e2:	2300      	movs	r3, #0
 80181e4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80181e6:	4b35      	ldr	r3, [pc, #212]	; (80182bc <udp_bind+0x10c>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	617b      	str	r3, [r7, #20]
 80181ec:	e009      	b.n	8018202 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80181ee:	68fa      	ldr	r2, [r7, #12]
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d102      	bne.n	80181fc <udp_bind+0x4c>
      rebind = 1;
 80181f6:	2301      	movs	r3, #1
 80181f8:	74fb      	strb	r3, [r7, #19]
      break;
 80181fa:	e005      	b.n	8018208 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80181fc:	697b      	ldr	r3, [r7, #20]
 80181fe:	68db      	ldr	r3, [r3, #12]
 8018200:	617b      	str	r3, [r7, #20]
 8018202:	697b      	ldr	r3, [r7, #20]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d1f2      	bne.n	80181ee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018208:	88fb      	ldrh	r3, [r7, #6]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d109      	bne.n	8018222 <udp_bind+0x72>
    port = udp_new_port();
 801820e:	f7ff fc35 	bl	8017a7c <udp_new_port>
 8018212:	4603      	mov	r3, r0
 8018214:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018216:	88fb      	ldrh	r3, [r7, #6]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d12c      	bne.n	8018276 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801821c:	f06f 0307 	mvn.w	r3, #7
 8018220:	e040      	b.n	80182a4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018222:	4b26      	ldr	r3, [pc, #152]	; (80182bc <udp_bind+0x10c>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	617b      	str	r3, [r7, #20]
 8018228:	e022      	b.n	8018270 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801822a:	68fa      	ldr	r2, [r7, #12]
 801822c:	697b      	ldr	r3, [r7, #20]
 801822e:	429a      	cmp	r2, r3
 8018230:	d01b      	beq.n	801826a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018232:	697b      	ldr	r3, [r7, #20]
 8018234:	8a5b      	ldrh	r3, [r3, #18]
 8018236:	88fa      	ldrh	r2, [r7, #6]
 8018238:	429a      	cmp	r2, r3
 801823a:	d116      	bne.n	801826a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801823c:	697b      	ldr	r3, [r7, #20]
 801823e:	681a      	ldr	r2, [r3, #0]
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018244:	429a      	cmp	r2, r3
 8018246:	d00d      	beq.n	8018264 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d00a      	beq.n	8018264 <udp_bind+0xb4>
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d006      	beq.n	8018264 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018256:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018258:	2b00      	cmp	r3, #0
 801825a:	d003      	beq.n	8018264 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d102      	bne.n	801826a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018264:	f06f 0307 	mvn.w	r3, #7
 8018268:	e01c      	b.n	80182a4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801826a:	697b      	ldr	r3, [r7, #20]
 801826c:	68db      	ldr	r3, [r3, #12]
 801826e:	617b      	str	r3, [r7, #20]
 8018270:	697b      	ldr	r3, [r7, #20]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d1d9      	bne.n	801822a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d002      	beq.n	8018282 <udp_bind+0xd2>
 801827c:	68bb      	ldr	r3, [r7, #8]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	e000      	b.n	8018284 <udp_bind+0xd4>
 8018282:	2300      	movs	r3, #0
 8018284:	68fa      	ldr	r2, [r7, #12]
 8018286:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	88fa      	ldrh	r2, [r7, #6]
 801828c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801828e:	7cfb      	ldrb	r3, [r7, #19]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d106      	bne.n	80182a2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018294:	4b09      	ldr	r3, [pc, #36]	; (80182bc <udp_bind+0x10c>)
 8018296:	681a      	ldr	r2, [r3, #0]
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801829c:	4a07      	ldr	r2, [pc, #28]	; (80182bc <udp_bind+0x10c>)
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80182a2:	2300      	movs	r3, #0
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	3718      	adds	r7, #24
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bd80      	pop	{r7, pc}
 80182ac:	080296d4 	.word	0x080296d4
 80182b0:	080273fc 	.word	0x080273fc
 80182b4:	080276c4 	.word	0x080276c4
 80182b8:	08027450 	.word	0x08027450
 80182bc:	2000be58 	.word	0x2000be58

080182c0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b084      	sub	sp, #16
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	60f8      	str	r0, [r7, #12]
 80182c8:	60b9      	str	r1, [r7, #8]
 80182ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d107      	bne.n	80182e2 <udp_recv+0x22>
 80182d2:	4b08      	ldr	r3, [pc, #32]	; (80182f4 <udp_recv+0x34>)
 80182d4:	f240 428a 	movw	r2, #1162	; 0x48a
 80182d8:	4907      	ldr	r1, [pc, #28]	; (80182f8 <udp_recv+0x38>)
 80182da:	4808      	ldr	r0, [pc, #32]	; (80182fc <udp_recv+0x3c>)
 80182dc:	f003 fa4c 	bl	801b778 <printf>
 80182e0:	e005      	b.n	80182ee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	68ba      	ldr	r2, [r7, #8]
 80182e6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	687a      	ldr	r2, [r7, #4]
 80182ec:	61da      	str	r2, [r3, #28]
}
 80182ee:	3710      	adds	r7, #16
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}
 80182f4:	080273fc 	.word	0x080273fc
 80182f8:	08027730 	.word	0x08027730
 80182fc:	08027450 	.word	0x08027450

08018300 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b084      	sub	sp, #16
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d107      	bne.n	801831e <udp_remove+0x1e>
 801830e:	4b19      	ldr	r3, [pc, #100]	; (8018374 <udp_remove+0x74>)
 8018310:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018314:	4918      	ldr	r1, [pc, #96]	; (8018378 <udp_remove+0x78>)
 8018316:	4819      	ldr	r0, [pc, #100]	; (801837c <udp_remove+0x7c>)
 8018318:	f003 fa2e 	bl	801b778 <printf>
 801831c:	e026      	b.n	801836c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801831e:	4b18      	ldr	r3, [pc, #96]	; (8018380 <udp_remove+0x80>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	687a      	ldr	r2, [r7, #4]
 8018324:	429a      	cmp	r2, r3
 8018326:	d105      	bne.n	8018334 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018328:	4b15      	ldr	r3, [pc, #84]	; (8018380 <udp_remove+0x80>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	68db      	ldr	r3, [r3, #12]
 801832e:	4a14      	ldr	r2, [pc, #80]	; (8018380 <udp_remove+0x80>)
 8018330:	6013      	str	r3, [r2, #0]
 8018332:	e017      	b.n	8018364 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018334:	4b12      	ldr	r3, [pc, #72]	; (8018380 <udp_remove+0x80>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	60fb      	str	r3, [r7, #12]
 801833a:	e010      	b.n	801835e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	68db      	ldr	r3, [r3, #12]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d009      	beq.n	8018358 <udp_remove+0x58>
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	68db      	ldr	r3, [r3, #12]
 8018348:	687a      	ldr	r2, [r7, #4]
 801834a:	429a      	cmp	r2, r3
 801834c:	d104      	bne.n	8018358 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	68da      	ldr	r2, [r3, #12]
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	60da      	str	r2, [r3, #12]
        break;
 8018356:	e005      	b.n	8018364 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	60fb      	str	r3, [r7, #12]
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d1eb      	bne.n	801833c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018364:	6879      	ldr	r1, [r7, #4]
 8018366:	2000      	movs	r0, #0
 8018368:	f7f8 f84c 	bl	8010404 <memp_free>
}
 801836c:	3710      	adds	r7, #16
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
 8018372:	bf00      	nop
 8018374:	080273fc 	.word	0x080273fc
 8018378:	08027748 	.word	0x08027748
 801837c:	08027450 	.word	0x08027450
 8018380:	2000be58 	.word	0x2000be58

08018384 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018384:	b580      	push	{r7, lr}
 8018386:	b082      	sub	sp, #8
 8018388:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801838a:	2000      	movs	r0, #0
 801838c:	f7f7 ffe8 	bl	8010360 <memp_malloc>
 8018390:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2b00      	cmp	r3, #0
 8018396:	d007      	beq.n	80183a8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018398:	2220      	movs	r2, #32
 801839a:	2100      	movs	r1, #0
 801839c:	6878      	ldr	r0, [r7, #4]
 801839e:	f002 ff65 	bl	801b26c <memset>
    pcb->ttl = UDP_TTL;
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	22ff      	movs	r2, #255	; 0xff
 80183a6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80183a8:	687b      	ldr	r3, [r7, #4]
}
 80183aa:	4618      	mov	r0, r3
 80183ac:	3708      	adds	r7, #8
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}

080183b2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80183b2:	b580      	push	{r7, lr}
 80183b4:	b084      	sub	sp, #16
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	4603      	mov	r3, r0
 80183ba:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80183bc:	f7ff ffe2 	bl	8018384 <udp_new>
 80183c0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80183c2:	68fb      	ldr	r3, [r7, #12]
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	3710      	adds	r7, #16
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd80      	pop	{r7, pc}

080183cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80183cc:	b480      	push	{r7}
 80183ce:	b085      	sub	sp, #20
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
 80183d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d01e      	beq.n	801841a <udp_netif_ip_addr_changed+0x4e>
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d01a      	beq.n	801841a <udp_netif_ip_addr_changed+0x4e>
 80183e4:	683b      	ldr	r3, [r7, #0]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d017      	beq.n	801841a <udp_netif_ip_addr_changed+0x4e>
 80183ea:	683b      	ldr	r3, [r7, #0]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d013      	beq.n	801841a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80183f2:	4b0d      	ldr	r3, [pc, #52]	; (8018428 <udp_netif_ip_addr_changed+0x5c>)
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	60fb      	str	r3, [r7, #12]
 80183f8:	e00c      	b.n	8018414 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	429a      	cmp	r2, r3
 8018404:	d103      	bne.n	801840e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018406:	683b      	ldr	r3, [r7, #0]
 8018408:	681a      	ldr	r2, [r3, #0]
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	68db      	ldr	r3, [r3, #12]
 8018412:	60fb      	str	r3, [r7, #12]
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d1ef      	bne.n	80183fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801841a:	bf00      	nop
 801841c:	3714      	adds	r7, #20
 801841e:	46bd      	mov	sp, r7
 8018420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018424:	4770      	bx	lr
 8018426:	bf00      	nop
 8018428:	2000be58 	.word	0x2000be58

0801842c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b082      	sub	sp, #8
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018434:	4915      	ldr	r1, [pc, #84]	; (801848c <etharp_free_entry+0x60>)
 8018436:	687a      	ldr	r2, [r7, #4]
 8018438:	4613      	mov	r3, r2
 801843a:	005b      	lsls	r3, r3, #1
 801843c:	4413      	add	r3, r2
 801843e:	00db      	lsls	r3, r3, #3
 8018440:	440b      	add	r3, r1
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d013      	beq.n	8018470 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018448:	4910      	ldr	r1, [pc, #64]	; (801848c <etharp_free_entry+0x60>)
 801844a:	687a      	ldr	r2, [r7, #4]
 801844c:	4613      	mov	r3, r2
 801844e:	005b      	lsls	r3, r3, #1
 8018450:	4413      	add	r3, r2
 8018452:	00db      	lsls	r3, r3, #3
 8018454:	440b      	add	r3, r1
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4618      	mov	r0, r3
 801845a:	f7f8 fe27 	bl	80110ac <pbuf_free>
    arp_table[i].q = NULL;
 801845e:	490b      	ldr	r1, [pc, #44]	; (801848c <etharp_free_entry+0x60>)
 8018460:	687a      	ldr	r2, [r7, #4]
 8018462:	4613      	mov	r3, r2
 8018464:	005b      	lsls	r3, r3, #1
 8018466:	4413      	add	r3, r2
 8018468:	00db      	lsls	r3, r3, #3
 801846a:	440b      	add	r3, r1
 801846c:	2200      	movs	r2, #0
 801846e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018470:	4906      	ldr	r1, [pc, #24]	; (801848c <etharp_free_entry+0x60>)
 8018472:	687a      	ldr	r2, [r7, #4]
 8018474:	4613      	mov	r3, r2
 8018476:	005b      	lsls	r3, r3, #1
 8018478:	4413      	add	r3, r2
 801847a:	00db      	lsls	r3, r3, #3
 801847c:	440b      	add	r3, r1
 801847e:	3314      	adds	r3, #20
 8018480:	2200      	movs	r2, #0
 8018482:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018484:	bf00      	nop
 8018486:	3708      	adds	r7, #8
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}
 801848c:	20004f48 	.word	0x20004f48

08018490 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018496:	2300      	movs	r3, #0
 8018498:	607b      	str	r3, [r7, #4]
 801849a:	e096      	b.n	80185ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801849c:	494f      	ldr	r1, [pc, #316]	; (80185dc <etharp_tmr+0x14c>)
 801849e:	687a      	ldr	r2, [r7, #4]
 80184a0:	4613      	mov	r3, r2
 80184a2:	005b      	lsls	r3, r3, #1
 80184a4:	4413      	add	r3, r2
 80184a6:	00db      	lsls	r3, r3, #3
 80184a8:	440b      	add	r3, r1
 80184aa:	3314      	adds	r3, #20
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80184b0:	78fb      	ldrb	r3, [r7, #3]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	f000 8086 	beq.w	80185c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80184b8:	4948      	ldr	r1, [pc, #288]	; (80185dc <etharp_tmr+0x14c>)
 80184ba:	687a      	ldr	r2, [r7, #4]
 80184bc:	4613      	mov	r3, r2
 80184be:	005b      	lsls	r3, r3, #1
 80184c0:	4413      	add	r3, r2
 80184c2:	00db      	lsls	r3, r3, #3
 80184c4:	440b      	add	r3, r1
 80184c6:	3312      	adds	r3, #18
 80184c8:	881b      	ldrh	r3, [r3, #0]
 80184ca:	3301      	adds	r3, #1
 80184cc:	b298      	uxth	r0, r3
 80184ce:	4943      	ldr	r1, [pc, #268]	; (80185dc <etharp_tmr+0x14c>)
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	4613      	mov	r3, r2
 80184d4:	005b      	lsls	r3, r3, #1
 80184d6:	4413      	add	r3, r2
 80184d8:	00db      	lsls	r3, r3, #3
 80184da:	440b      	add	r3, r1
 80184dc:	3312      	adds	r3, #18
 80184de:	4602      	mov	r2, r0
 80184e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80184e2:	493e      	ldr	r1, [pc, #248]	; (80185dc <etharp_tmr+0x14c>)
 80184e4:	687a      	ldr	r2, [r7, #4]
 80184e6:	4613      	mov	r3, r2
 80184e8:	005b      	lsls	r3, r3, #1
 80184ea:	4413      	add	r3, r2
 80184ec:	00db      	lsls	r3, r3, #3
 80184ee:	440b      	add	r3, r1
 80184f0:	3312      	adds	r3, #18
 80184f2:	881b      	ldrh	r3, [r3, #0]
 80184f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80184f8:	d215      	bcs.n	8018526 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80184fa:	4938      	ldr	r1, [pc, #224]	; (80185dc <etharp_tmr+0x14c>)
 80184fc:	687a      	ldr	r2, [r7, #4]
 80184fe:	4613      	mov	r3, r2
 8018500:	005b      	lsls	r3, r3, #1
 8018502:	4413      	add	r3, r2
 8018504:	00db      	lsls	r3, r3, #3
 8018506:	440b      	add	r3, r1
 8018508:	3314      	adds	r3, #20
 801850a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801850c:	2b01      	cmp	r3, #1
 801850e:	d10e      	bne.n	801852e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018510:	4932      	ldr	r1, [pc, #200]	; (80185dc <etharp_tmr+0x14c>)
 8018512:	687a      	ldr	r2, [r7, #4]
 8018514:	4613      	mov	r3, r2
 8018516:	005b      	lsls	r3, r3, #1
 8018518:	4413      	add	r3, r2
 801851a:	00db      	lsls	r3, r3, #3
 801851c:	440b      	add	r3, r1
 801851e:	3312      	adds	r3, #18
 8018520:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018522:	2b04      	cmp	r3, #4
 8018524:	d903      	bls.n	801852e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	f7ff ff80 	bl	801842c <etharp_free_entry>
 801852c:	e04a      	b.n	80185c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801852e:	492b      	ldr	r1, [pc, #172]	; (80185dc <etharp_tmr+0x14c>)
 8018530:	687a      	ldr	r2, [r7, #4]
 8018532:	4613      	mov	r3, r2
 8018534:	005b      	lsls	r3, r3, #1
 8018536:	4413      	add	r3, r2
 8018538:	00db      	lsls	r3, r3, #3
 801853a:	440b      	add	r3, r1
 801853c:	3314      	adds	r3, #20
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	2b03      	cmp	r3, #3
 8018542:	d10a      	bne.n	801855a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018544:	4925      	ldr	r1, [pc, #148]	; (80185dc <etharp_tmr+0x14c>)
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	4613      	mov	r3, r2
 801854a:	005b      	lsls	r3, r3, #1
 801854c:	4413      	add	r3, r2
 801854e:	00db      	lsls	r3, r3, #3
 8018550:	440b      	add	r3, r1
 8018552:	3314      	adds	r3, #20
 8018554:	2204      	movs	r2, #4
 8018556:	701a      	strb	r2, [r3, #0]
 8018558:	e034      	b.n	80185c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801855a:	4920      	ldr	r1, [pc, #128]	; (80185dc <etharp_tmr+0x14c>)
 801855c:	687a      	ldr	r2, [r7, #4]
 801855e:	4613      	mov	r3, r2
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	4413      	add	r3, r2
 8018564:	00db      	lsls	r3, r3, #3
 8018566:	440b      	add	r3, r1
 8018568:	3314      	adds	r3, #20
 801856a:	781b      	ldrb	r3, [r3, #0]
 801856c:	2b04      	cmp	r3, #4
 801856e:	d10a      	bne.n	8018586 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018570:	491a      	ldr	r1, [pc, #104]	; (80185dc <etharp_tmr+0x14c>)
 8018572:	687a      	ldr	r2, [r7, #4]
 8018574:	4613      	mov	r3, r2
 8018576:	005b      	lsls	r3, r3, #1
 8018578:	4413      	add	r3, r2
 801857a:	00db      	lsls	r3, r3, #3
 801857c:	440b      	add	r3, r1
 801857e:	3314      	adds	r3, #20
 8018580:	2202      	movs	r2, #2
 8018582:	701a      	strb	r2, [r3, #0]
 8018584:	e01e      	b.n	80185c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018586:	4915      	ldr	r1, [pc, #84]	; (80185dc <etharp_tmr+0x14c>)
 8018588:	687a      	ldr	r2, [r7, #4]
 801858a:	4613      	mov	r3, r2
 801858c:	005b      	lsls	r3, r3, #1
 801858e:	4413      	add	r3, r2
 8018590:	00db      	lsls	r3, r3, #3
 8018592:	440b      	add	r3, r1
 8018594:	3314      	adds	r3, #20
 8018596:	781b      	ldrb	r3, [r3, #0]
 8018598:	2b01      	cmp	r3, #1
 801859a:	d113      	bne.n	80185c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801859c:	490f      	ldr	r1, [pc, #60]	; (80185dc <etharp_tmr+0x14c>)
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	4613      	mov	r3, r2
 80185a2:	005b      	lsls	r3, r3, #1
 80185a4:	4413      	add	r3, r2
 80185a6:	00db      	lsls	r3, r3, #3
 80185a8:	440b      	add	r3, r1
 80185aa:	3308      	adds	r3, #8
 80185ac:	6818      	ldr	r0, [r3, #0]
 80185ae:	687a      	ldr	r2, [r7, #4]
 80185b0:	4613      	mov	r3, r2
 80185b2:	005b      	lsls	r3, r3, #1
 80185b4:	4413      	add	r3, r2
 80185b6:	00db      	lsls	r3, r3, #3
 80185b8:	4a08      	ldr	r2, [pc, #32]	; (80185dc <etharp_tmr+0x14c>)
 80185ba:	4413      	add	r3, r2
 80185bc:	3304      	adds	r3, #4
 80185be:	4619      	mov	r1, r3
 80185c0:	f000 fe6e 	bl	80192a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	3301      	adds	r3, #1
 80185c8:	607b      	str	r3, [r7, #4]
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2b09      	cmp	r3, #9
 80185ce:	f77f af65 	ble.w	801849c <etharp_tmr+0xc>
      }
    }
  }
}
 80185d2:	bf00      	nop
 80185d4:	bf00      	nop
 80185d6:	3708      	adds	r7, #8
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd80      	pop	{r7, pc}
 80185dc:	20004f48 	.word	0x20004f48

080185e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b08a      	sub	sp, #40	; 0x28
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	60f8      	str	r0, [r7, #12]
 80185e8:	460b      	mov	r3, r1
 80185ea:	607a      	str	r2, [r7, #4]
 80185ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80185ee:	230a      	movs	r3, #10
 80185f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80185f2:	230a      	movs	r3, #10
 80185f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80185f6:	230a      	movs	r3, #10
 80185f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80185fa:	2300      	movs	r3, #0
 80185fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80185fe:	230a      	movs	r3, #10
 8018600:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018602:	2300      	movs	r3, #0
 8018604:	83bb      	strh	r3, [r7, #28]
 8018606:	2300      	movs	r3, #0
 8018608:	837b      	strh	r3, [r7, #26]
 801860a:	2300      	movs	r3, #0
 801860c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801860e:	2300      	movs	r3, #0
 8018610:	843b      	strh	r3, [r7, #32]
 8018612:	e0ae      	b.n	8018772 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018614:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018618:	49a6      	ldr	r1, [pc, #664]	; (80188b4 <etharp_find_entry+0x2d4>)
 801861a:	4613      	mov	r3, r2
 801861c:	005b      	lsls	r3, r3, #1
 801861e:	4413      	add	r3, r2
 8018620:	00db      	lsls	r3, r3, #3
 8018622:	440b      	add	r3, r1
 8018624:	3314      	adds	r3, #20
 8018626:	781b      	ldrb	r3, [r3, #0]
 8018628:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801862a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801862e:	2b0a      	cmp	r3, #10
 8018630:	d105      	bne.n	801863e <etharp_find_entry+0x5e>
 8018632:	7dfb      	ldrb	r3, [r7, #23]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d102      	bne.n	801863e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018638:	8c3b      	ldrh	r3, [r7, #32]
 801863a:	847b      	strh	r3, [r7, #34]	; 0x22
 801863c:	e095      	b.n	801876a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801863e:	7dfb      	ldrb	r3, [r7, #23]
 8018640:	2b00      	cmp	r3, #0
 8018642:	f000 8092 	beq.w	801876a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018646:	7dfb      	ldrb	r3, [r7, #23]
 8018648:	2b01      	cmp	r3, #1
 801864a:	d009      	beq.n	8018660 <etharp_find_entry+0x80>
 801864c:	7dfb      	ldrb	r3, [r7, #23]
 801864e:	2b01      	cmp	r3, #1
 8018650:	d806      	bhi.n	8018660 <etharp_find_entry+0x80>
 8018652:	4b99      	ldr	r3, [pc, #612]	; (80188b8 <etharp_find_entry+0x2d8>)
 8018654:	f240 1223 	movw	r2, #291	; 0x123
 8018658:	4998      	ldr	r1, [pc, #608]	; (80188bc <etharp_find_entry+0x2dc>)
 801865a:	4899      	ldr	r0, [pc, #612]	; (80188c0 <etharp_find_entry+0x2e0>)
 801865c:	f003 f88c 	bl	801b778 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d020      	beq.n	80186a8 <etharp_find_entry+0xc8>
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	6819      	ldr	r1, [r3, #0]
 801866a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801866e:	4891      	ldr	r0, [pc, #580]	; (80188b4 <etharp_find_entry+0x2d4>)
 8018670:	4613      	mov	r3, r2
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	4413      	add	r3, r2
 8018676:	00db      	lsls	r3, r3, #3
 8018678:	4403      	add	r3, r0
 801867a:	3304      	adds	r3, #4
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	4299      	cmp	r1, r3
 8018680:	d112      	bne.n	80186a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d00c      	beq.n	80186a2 <etharp_find_entry+0xc2>
 8018688:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801868c:	4989      	ldr	r1, [pc, #548]	; (80188b4 <etharp_find_entry+0x2d4>)
 801868e:	4613      	mov	r3, r2
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	4413      	add	r3, r2
 8018694:	00db      	lsls	r3, r3, #3
 8018696:	440b      	add	r3, r1
 8018698:	3308      	adds	r3, #8
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	687a      	ldr	r2, [r7, #4]
 801869e:	429a      	cmp	r2, r3
 80186a0:	d102      	bne.n	80186a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80186a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80186a6:	e100      	b.n	80188aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80186a8:	7dfb      	ldrb	r3, [r7, #23]
 80186aa:	2b01      	cmp	r3, #1
 80186ac:	d140      	bne.n	8018730 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80186ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186b2:	4980      	ldr	r1, [pc, #512]	; (80188b4 <etharp_find_entry+0x2d4>)
 80186b4:	4613      	mov	r3, r2
 80186b6:	005b      	lsls	r3, r3, #1
 80186b8:	4413      	add	r3, r2
 80186ba:	00db      	lsls	r3, r3, #3
 80186bc:	440b      	add	r3, r1
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d01a      	beq.n	80186fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80186c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186c8:	497a      	ldr	r1, [pc, #488]	; (80188b4 <etharp_find_entry+0x2d4>)
 80186ca:	4613      	mov	r3, r2
 80186cc:	005b      	lsls	r3, r3, #1
 80186ce:	4413      	add	r3, r2
 80186d0:	00db      	lsls	r3, r3, #3
 80186d2:	440b      	add	r3, r1
 80186d4:	3312      	adds	r3, #18
 80186d6:	881b      	ldrh	r3, [r3, #0]
 80186d8:	8bba      	ldrh	r2, [r7, #28]
 80186da:	429a      	cmp	r2, r3
 80186dc:	d845      	bhi.n	801876a <etharp_find_entry+0x18a>
            old_queue = i;
 80186de:	8c3b      	ldrh	r3, [r7, #32]
 80186e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80186e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186e6:	4973      	ldr	r1, [pc, #460]	; (80188b4 <etharp_find_entry+0x2d4>)
 80186e8:	4613      	mov	r3, r2
 80186ea:	005b      	lsls	r3, r3, #1
 80186ec:	4413      	add	r3, r2
 80186ee:	00db      	lsls	r3, r3, #3
 80186f0:	440b      	add	r3, r1
 80186f2:	3312      	adds	r3, #18
 80186f4:	881b      	ldrh	r3, [r3, #0]
 80186f6:	83bb      	strh	r3, [r7, #28]
 80186f8:	e037      	b.n	801876a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80186fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186fe:	496d      	ldr	r1, [pc, #436]	; (80188b4 <etharp_find_entry+0x2d4>)
 8018700:	4613      	mov	r3, r2
 8018702:	005b      	lsls	r3, r3, #1
 8018704:	4413      	add	r3, r2
 8018706:	00db      	lsls	r3, r3, #3
 8018708:	440b      	add	r3, r1
 801870a:	3312      	adds	r3, #18
 801870c:	881b      	ldrh	r3, [r3, #0]
 801870e:	8b7a      	ldrh	r2, [r7, #26]
 8018710:	429a      	cmp	r2, r3
 8018712:	d82a      	bhi.n	801876a <etharp_find_entry+0x18a>
            old_pending = i;
 8018714:	8c3b      	ldrh	r3, [r7, #32]
 8018716:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018718:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801871c:	4965      	ldr	r1, [pc, #404]	; (80188b4 <etharp_find_entry+0x2d4>)
 801871e:	4613      	mov	r3, r2
 8018720:	005b      	lsls	r3, r3, #1
 8018722:	4413      	add	r3, r2
 8018724:	00db      	lsls	r3, r3, #3
 8018726:	440b      	add	r3, r1
 8018728:	3312      	adds	r3, #18
 801872a:	881b      	ldrh	r3, [r3, #0]
 801872c:	837b      	strh	r3, [r7, #26]
 801872e:	e01c      	b.n	801876a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018730:	7dfb      	ldrb	r3, [r7, #23]
 8018732:	2b01      	cmp	r3, #1
 8018734:	d919      	bls.n	801876a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801873a:	495e      	ldr	r1, [pc, #376]	; (80188b4 <etharp_find_entry+0x2d4>)
 801873c:	4613      	mov	r3, r2
 801873e:	005b      	lsls	r3, r3, #1
 8018740:	4413      	add	r3, r2
 8018742:	00db      	lsls	r3, r3, #3
 8018744:	440b      	add	r3, r1
 8018746:	3312      	adds	r3, #18
 8018748:	881b      	ldrh	r3, [r3, #0]
 801874a:	8b3a      	ldrh	r2, [r7, #24]
 801874c:	429a      	cmp	r2, r3
 801874e:	d80c      	bhi.n	801876a <etharp_find_entry+0x18a>
            old_stable = i;
 8018750:	8c3b      	ldrh	r3, [r7, #32]
 8018752:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018754:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018758:	4956      	ldr	r1, [pc, #344]	; (80188b4 <etharp_find_entry+0x2d4>)
 801875a:	4613      	mov	r3, r2
 801875c:	005b      	lsls	r3, r3, #1
 801875e:	4413      	add	r3, r2
 8018760:	00db      	lsls	r3, r3, #3
 8018762:	440b      	add	r3, r1
 8018764:	3312      	adds	r3, #18
 8018766:	881b      	ldrh	r3, [r3, #0]
 8018768:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801876a:	8c3b      	ldrh	r3, [r7, #32]
 801876c:	3301      	adds	r3, #1
 801876e:	b29b      	uxth	r3, r3
 8018770:	843b      	strh	r3, [r7, #32]
 8018772:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018776:	2b09      	cmp	r3, #9
 8018778:	f77f af4c 	ble.w	8018614 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801877c:	7afb      	ldrb	r3, [r7, #11]
 801877e:	f003 0302 	and.w	r3, r3, #2
 8018782:	2b00      	cmp	r3, #0
 8018784:	d108      	bne.n	8018798 <etharp_find_entry+0x1b8>
 8018786:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801878a:	2b0a      	cmp	r3, #10
 801878c:	d107      	bne.n	801879e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801878e:	7afb      	ldrb	r3, [r7, #11]
 8018790:	f003 0301 	and.w	r3, r3, #1
 8018794:	2b00      	cmp	r3, #0
 8018796:	d102      	bne.n	801879e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018798:	f04f 33ff 	mov.w	r3, #4294967295
 801879c:	e085      	b.n	80188aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801879e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80187a2:	2b09      	cmp	r3, #9
 80187a4:	dc02      	bgt.n	80187ac <etharp_find_entry+0x1cc>
    i = empty;
 80187a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80187a8:	843b      	strh	r3, [r7, #32]
 80187aa:	e039      	b.n	8018820 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80187ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80187b0:	2b09      	cmp	r3, #9
 80187b2:	dc14      	bgt.n	80187de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80187b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80187b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80187b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187bc:	493d      	ldr	r1, [pc, #244]	; (80188b4 <etharp_find_entry+0x2d4>)
 80187be:	4613      	mov	r3, r2
 80187c0:	005b      	lsls	r3, r3, #1
 80187c2:	4413      	add	r3, r2
 80187c4:	00db      	lsls	r3, r3, #3
 80187c6:	440b      	add	r3, r1
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d018      	beq.n	8018800 <etharp_find_entry+0x220>
 80187ce:	4b3a      	ldr	r3, [pc, #232]	; (80188b8 <etharp_find_entry+0x2d8>)
 80187d0:	f240 126d 	movw	r2, #365	; 0x16d
 80187d4:	493b      	ldr	r1, [pc, #236]	; (80188c4 <etharp_find_entry+0x2e4>)
 80187d6:	483a      	ldr	r0, [pc, #232]	; (80188c0 <etharp_find_entry+0x2e0>)
 80187d8:	f002 ffce 	bl	801b778 <printf>
 80187dc:	e010      	b.n	8018800 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80187de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80187e2:	2b09      	cmp	r3, #9
 80187e4:	dc02      	bgt.n	80187ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80187e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80187e8:	843b      	strh	r3, [r7, #32]
 80187ea:	e009      	b.n	8018800 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80187ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80187f0:	2b09      	cmp	r3, #9
 80187f2:	dc02      	bgt.n	80187fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80187f4:	8bfb      	ldrh	r3, [r7, #30]
 80187f6:	843b      	strh	r3, [r7, #32]
 80187f8:	e002      	b.n	8018800 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80187fa:	f04f 33ff 	mov.w	r3, #4294967295
 80187fe:	e054      	b.n	80188aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018800:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018804:	2b09      	cmp	r3, #9
 8018806:	dd06      	ble.n	8018816 <etharp_find_entry+0x236>
 8018808:	4b2b      	ldr	r3, [pc, #172]	; (80188b8 <etharp_find_entry+0x2d8>)
 801880a:	f240 127f 	movw	r2, #383	; 0x17f
 801880e:	492e      	ldr	r1, [pc, #184]	; (80188c8 <etharp_find_entry+0x2e8>)
 8018810:	482b      	ldr	r0, [pc, #172]	; (80188c0 <etharp_find_entry+0x2e0>)
 8018812:	f002 ffb1 	bl	801b778 <printf>
    etharp_free_entry(i);
 8018816:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801881a:	4618      	mov	r0, r3
 801881c:	f7ff fe06 	bl	801842c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018820:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018824:	2b09      	cmp	r3, #9
 8018826:	dd06      	ble.n	8018836 <etharp_find_entry+0x256>
 8018828:	4b23      	ldr	r3, [pc, #140]	; (80188b8 <etharp_find_entry+0x2d8>)
 801882a:	f240 1283 	movw	r2, #387	; 0x183
 801882e:	4926      	ldr	r1, [pc, #152]	; (80188c8 <etharp_find_entry+0x2e8>)
 8018830:	4823      	ldr	r0, [pc, #140]	; (80188c0 <etharp_find_entry+0x2e0>)
 8018832:	f002 ffa1 	bl	801b778 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018836:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801883a:	491e      	ldr	r1, [pc, #120]	; (80188b4 <etharp_find_entry+0x2d4>)
 801883c:	4613      	mov	r3, r2
 801883e:	005b      	lsls	r3, r3, #1
 8018840:	4413      	add	r3, r2
 8018842:	00db      	lsls	r3, r3, #3
 8018844:	440b      	add	r3, r1
 8018846:	3314      	adds	r3, #20
 8018848:	781b      	ldrb	r3, [r3, #0]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d006      	beq.n	801885c <etharp_find_entry+0x27c>
 801884e:	4b1a      	ldr	r3, [pc, #104]	; (80188b8 <etharp_find_entry+0x2d8>)
 8018850:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018854:	491d      	ldr	r1, [pc, #116]	; (80188cc <etharp_find_entry+0x2ec>)
 8018856:	481a      	ldr	r0, [pc, #104]	; (80188c0 <etharp_find_entry+0x2e0>)
 8018858:	f002 ff8e 	bl	801b778 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	2b00      	cmp	r3, #0
 8018860:	d00b      	beq.n	801887a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	6819      	ldr	r1, [r3, #0]
 801886a:	4812      	ldr	r0, [pc, #72]	; (80188b4 <etharp_find_entry+0x2d4>)
 801886c:	4613      	mov	r3, r2
 801886e:	005b      	lsls	r3, r3, #1
 8018870:	4413      	add	r3, r2
 8018872:	00db      	lsls	r3, r3, #3
 8018874:	4403      	add	r3, r0
 8018876:	3304      	adds	r3, #4
 8018878:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801887a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801887e:	490d      	ldr	r1, [pc, #52]	; (80188b4 <etharp_find_entry+0x2d4>)
 8018880:	4613      	mov	r3, r2
 8018882:	005b      	lsls	r3, r3, #1
 8018884:	4413      	add	r3, r2
 8018886:	00db      	lsls	r3, r3, #3
 8018888:	440b      	add	r3, r1
 801888a:	3312      	adds	r3, #18
 801888c:	2200      	movs	r2, #0
 801888e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018894:	4907      	ldr	r1, [pc, #28]	; (80188b4 <etharp_find_entry+0x2d4>)
 8018896:	4613      	mov	r3, r2
 8018898:	005b      	lsls	r3, r3, #1
 801889a:	4413      	add	r3, r2
 801889c:	00db      	lsls	r3, r3, #3
 801889e:	440b      	add	r3, r1
 80188a0:	3308      	adds	r3, #8
 80188a2:	687a      	ldr	r2, [r7, #4]
 80188a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80188a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80188aa:	4618      	mov	r0, r3
 80188ac:	3728      	adds	r7, #40	; 0x28
 80188ae:	46bd      	mov	sp, r7
 80188b0:	bd80      	pop	{r7, pc}
 80188b2:	bf00      	nop
 80188b4:	20004f48 	.word	0x20004f48
 80188b8:	08027760 	.word	0x08027760
 80188bc:	08027798 	.word	0x08027798
 80188c0:	080277d8 	.word	0x080277d8
 80188c4:	08027800 	.word	0x08027800
 80188c8:	08027818 	.word	0x08027818
 80188cc:	0802782c 	.word	0x0802782c

080188d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b088      	sub	sp, #32
 80188d4:	af02      	add	r7, sp, #8
 80188d6:	60f8      	str	r0, [r7, #12]
 80188d8:	60b9      	str	r1, [r7, #8]
 80188da:	607a      	str	r2, [r7, #4]
 80188dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188e4:	2b06      	cmp	r3, #6
 80188e6:	d006      	beq.n	80188f6 <etharp_update_arp_entry+0x26>
 80188e8:	4b48      	ldr	r3, [pc, #288]	; (8018a0c <etharp_update_arp_entry+0x13c>)
 80188ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 80188ee:	4948      	ldr	r1, [pc, #288]	; (8018a10 <etharp_update_arp_entry+0x140>)
 80188f0:	4848      	ldr	r0, [pc, #288]	; (8018a14 <etharp_update_arp_entry+0x144>)
 80188f2:	f002 ff41 	bl	801b778 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80188f6:	68bb      	ldr	r3, [r7, #8]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d012      	beq.n	8018922 <etharp_update_arp_entry+0x52>
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d00e      	beq.n	8018922 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	68f9      	ldr	r1, [r7, #12]
 801890a:	4618      	mov	r0, r3
 801890c:	f001 f8fe 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 8018910:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018912:	2b00      	cmp	r3, #0
 8018914:	d105      	bne.n	8018922 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018916:	68bb      	ldr	r3, [r7, #8]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801891e:	2be0      	cmp	r3, #224	; 0xe0
 8018920:	d102      	bne.n	8018928 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018922:	f06f 030f 	mvn.w	r3, #15
 8018926:	e06c      	b.n	8018a02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018928:	78fb      	ldrb	r3, [r7, #3]
 801892a:	68fa      	ldr	r2, [r7, #12]
 801892c:	4619      	mov	r1, r3
 801892e:	68b8      	ldr	r0, [r7, #8]
 8018930:	f7ff fe56 	bl	80185e0 <etharp_find_entry>
 8018934:	4603      	mov	r3, r0
 8018936:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018938:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801893c:	2b00      	cmp	r3, #0
 801893e:	da02      	bge.n	8018946 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018940:	8afb      	ldrh	r3, [r7, #22]
 8018942:	b25b      	sxtb	r3, r3
 8018944:	e05d      	b.n	8018a02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018946:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801894a:	4933      	ldr	r1, [pc, #204]	; (8018a18 <etharp_update_arp_entry+0x148>)
 801894c:	4613      	mov	r3, r2
 801894e:	005b      	lsls	r3, r3, #1
 8018950:	4413      	add	r3, r2
 8018952:	00db      	lsls	r3, r3, #3
 8018954:	440b      	add	r3, r1
 8018956:	3314      	adds	r3, #20
 8018958:	2202      	movs	r2, #2
 801895a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801895c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018960:	492d      	ldr	r1, [pc, #180]	; (8018a18 <etharp_update_arp_entry+0x148>)
 8018962:	4613      	mov	r3, r2
 8018964:	005b      	lsls	r3, r3, #1
 8018966:	4413      	add	r3, r2
 8018968:	00db      	lsls	r3, r3, #3
 801896a:	440b      	add	r3, r1
 801896c:	3308      	adds	r3, #8
 801896e:	68fa      	ldr	r2, [r7, #12]
 8018970:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018972:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018976:	4613      	mov	r3, r2
 8018978:	005b      	lsls	r3, r3, #1
 801897a:	4413      	add	r3, r2
 801897c:	00db      	lsls	r3, r3, #3
 801897e:	3308      	adds	r3, #8
 8018980:	4a25      	ldr	r2, [pc, #148]	; (8018a18 <etharp_update_arp_entry+0x148>)
 8018982:	4413      	add	r3, r2
 8018984:	3304      	adds	r3, #4
 8018986:	2206      	movs	r2, #6
 8018988:	6879      	ldr	r1, [r7, #4]
 801898a:	4618      	mov	r0, r3
 801898c:	f002 fc46 	bl	801b21c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018990:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018994:	4920      	ldr	r1, [pc, #128]	; (8018a18 <etharp_update_arp_entry+0x148>)
 8018996:	4613      	mov	r3, r2
 8018998:	005b      	lsls	r3, r3, #1
 801899a:	4413      	add	r3, r2
 801899c:	00db      	lsls	r3, r3, #3
 801899e:	440b      	add	r3, r1
 80189a0:	3312      	adds	r3, #18
 80189a2:	2200      	movs	r2, #0
 80189a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80189a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189aa:	491b      	ldr	r1, [pc, #108]	; (8018a18 <etharp_update_arp_entry+0x148>)
 80189ac:	4613      	mov	r3, r2
 80189ae:	005b      	lsls	r3, r3, #1
 80189b0:	4413      	add	r3, r2
 80189b2:	00db      	lsls	r3, r3, #3
 80189b4:	440b      	add	r3, r1
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d021      	beq.n	8018a00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80189bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189c0:	4915      	ldr	r1, [pc, #84]	; (8018a18 <etharp_update_arp_entry+0x148>)
 80189c2:	4613      	mov	r3, r2
 80189c4:	005b      	lsls	r3, r3, #1
 80189c6:	4413      	add	r3, r2
 80189c8:	00db      	lsls	r3, r3, #3
 80189ca:	440b      	add	r3, r1
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80189d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189d4:	4910      	ldr	r1, [pc, #64]	; (8018a18 <etharp_update_arp_entry+0x148>)
 80189d6:	4613      	mov	r3, r2
 80189d8:	005b      	lsls	r3, r3, #1
 80189da:	4413      	add	r3, r2
 80189dc:	00db      	lsls	r3, r3, #3
 80189de:	440b      	add	r3, r1
 80189e0:	2200      	movs	r2, #0
 80189e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80189ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80189ee:	9300      	str	r3, [sp, #0]
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	6939      	ldr	r1, [r7, #16]
 80189f4:	68f8      	ldr	r0, [r7, #12]
 80189f6:	f002 f8bb 	bl	801ab70 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80189fa:	6938      	ldr	r0, [r7, #16]
 80189fc:	f7f8 fb56 	bl	80110ac <pbuf_free>
  }
  return ERR_OK;
 8018a00:	2300      	movs	r3, #0
}
 8018a02:	4618      	mov	r0, r3
 8018a04:	3718      	adds	r7, #24
 8018a06:	46bd      	mov	sp, r7
 8018a08:	bd80      	pop	{r7, pc}
 8018a0a:	bf00      	nop
 8018a0c:	08027760 	.word	0x08027760
 8018a10:	08027858 	.word	0x08027858
 8018a14:	080277d8 	.word	0x080277d8
 8018a18:	20004f48 	.word	0x20004f48

08018a1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b084      	sub	sp, #16
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018a24:	2300      	movs	r3, #0
 8018a26:	60fb      	str	r3, [r7, #12]
 8018a28:	e01e      	b.n	8018a68 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018a2a:	4913      	ldr	r1, [pc, #76]	; (8018a78 <etharp_cleanup_netif+0x5c>)
 8018a2c:	68fa      	ldr	r2, [r7, #12]
 8018a2e:	4613      	mov	r3, r2
 8018a30:	005b      	lsls	r3, r3, #1
 8018a32:	4413      	add	r3, r2
 8018a34:	00db      	lsls	r3, r3, #3
 8018a36:	440b      	add	r3, r1
 8018a38:	3314      	adds	r3, #20
 8018a3a:	781b      	ldrb	r3, [r3, #0]
 8018a3c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018a3e:	7afb      	ldrb	r3, [r7, #11]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d00e      	beq.n	8018a62 <etharp_cleanup_netif+0x46>
 8018a44:	490c      	ldr	r1, [pc, #48]	; (8018a78 <etharp_cleanup_netif+0x5c>)
 8018a46:	68fa      	ldr	r2, [r7, #12]
 8018a48:	4613      	mov	r3, r2
 8018a4a:	005b      	lsls	r3, r3, #1
 8018a4c:	4413      	add	r3, r2
 8018a4e:	00db      	lsls	r3, r3, #3
 8018a50:	440b      	add	r3, r1
 8018a52:	3308      	adds	r3, #8
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	687a      	ldr	r2, [r7, #4]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d102      	bne.n	8018a62 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018a5c:	68f8      	ldr	r0, [r7, #12]
 8018a5e:	f7ff fce5 	bl	801842c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	3301      	adds	r3, #1
 8018a66:	60fb      	str	r3, [r7, #12]
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	2b09      	cmp	r3, #9
 8018a6c:	dddd      	ble.n	8018a2a <etharp_cleanup_netif+0xe>
    }
  }
}
 8018a6e:	bf00      	nop
 8018a70:	bf00      	nop
 8018a72:	3710      	adds	r7, #16
 8018a74:	46bd      	mov	sp, r7
 8018a76:	bd80      	pop	{r7, pc}
 8018a78:	20004f48 	.word	0x20004f48

08018a7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018a7c:	b5b0      	push	{r4, r5, r7, lr}
 8018a7e:	b08a      	sub	sp, #40	; 0x28
 8018a80:	af04      	add	r7, sp, #16
 8018a82:	6078      	str	r0, [r7, #4]
 8018a84:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d107      	bne.n	8018a9c <etharp_input+0x20>
 8018a8c:	4b3d      	ldr	r3, [pc, #244]	; (8018b84 <etharp_input+0x108>)
 8018a8e:	f240 228a 	movw	r2, #650	; 0x28a
 8018a92:	493d      	ldr	r1, [pc, #244]	; (8018b88 <etharp_input+0x10c>)
 8018a94:	483d      	ldr	r0, [pc, #244]	; (8018b8c <etharp_input+0x110>)
 8018a96:	f002 fe6f 	bl	801b778 <printf>
 8018a9a:	e06f      	b.n	8018b7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	685b      	ldr	r3, [r3, #4]
 8018aa0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018aa2:	693b      	ldr	r3, [r7, #16]
 8018aa4:	881b      	ldrh	r3, [r3, #0]
 8018aa6:	b29b      	uxth	r3, r3
 8018aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018aac:	d10c      	bne.n	8018ac8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018aae:	693b      	ldr	r3, [r7, #16]
 8018ab0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018ab2:	2b06      	cmp	r3, #6
 8018ab4:	d108      	bne.n	8018ac8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018ab6:	693b      	ldr	r3, [r7, #16]
 8018ab8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018aba:	2b04      	cmp	r3, #4
 8018abc:	d104      	bne.n	8018ac8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018abe:	693b      	ldr	r3, [r7, #16]
 8018ac0:	885b      	ldrh	r3, [r3, #2]
 8018ac2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018ac4:	2b08      	cmp	r3, #8
 8018ac6:	d003      	beq.n	8018ad0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f7f8 faef 	bl	80110ac <pbuf_free>
    return;
 8018ace:	e055      	b.n	8018b7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018ad0:	693b      	ldr	r3, [r7, #16]
 8018ad2:	330e      	adds	r3, #14
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018ad8:	693b      	ldr	r3, [r7, #16]
 8018ada:	3318      	adds	r3, #24
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018ae0:	683b      	ldr	r3, [r7, #0]
 8018ae2:	3304      	adds	r3, #4
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d102      	bne.n	8018af0 <etharp_input+0x74>
    for_us = 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	75fb      	strb	r3, [r7, #23]
 8018aee:	e009      	b.n	8018b04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018af0:	68ba      	ldr	r2, [r7, #8]
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	3304      	adds	r3, #4
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	429a      	cmp	r2, r3
 8018afa:	bf0c      	ite	eq
 8018afc:	2301      	moveq	r3, #1
 8018afe:	2300      	movne	r3, #0
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018b04:	693b      	ldr	r3, [r7, #16]
 8018b06:	f103 0208 	add.w	r2, r3, #8
 8018b0a:	7dfb      	ldrb	r3, [r7, #23]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d001      	beq.n	8018b14 <etharp_input+0x98>
 8018b10:	2301      	movs	r3, #1
 8018b12:	e000      	b.n	8018b16 <etharp_input+0x9a>
 8018b14:	2302      	movs	r3, #2
 8018b16:	f107 010c 	add.w	r1, r7, #12
 8018b1a:	6838      	ldr	r0, [r7, #0]
 8018b1c:	f7ff fed8 	bl	80188d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018b20:	693b      	ldr	r3, [r7, #16]
 8018b22:	88db      	ldrh	r3, [r3, #6]
 8018b24:	b29b      	uxth	r3, r3
 8018b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018b2a:	d003      	beq.n	8018b34 <etharp_input+0xb8>
 8018b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b30:	d01e      	beq.n	8018b70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018b32:	e020      	b.n	8018b76 <etharp_input+0xfa>
      if (for_us) {
 8018b34:	7dfb      	ldrb	r3, [r7, #23]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d01c      	beq.n	8018b74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8018b40:	693b      	ldr	r3, [r7, #16]
 8018b42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018b46:	683b      	ldr	r3, [r7, #0]
 8018b48:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8018b4c:	683b      	ldr	r3, [r7, #0]
 8018b4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018b50:	693a      	ldr	r2, [r7, #16]
 8018b52:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018b54:	2102      	movs	r1, #2
 8018b56:	9103      	str	r1, [sp, #12]
 8018b58:	f107 010c 	add.w	r1, r7, #12
 8018b5c:	9102      	str	r1, [sp, #8]
 8018b5e:	9201      	str	r2, [sp, #4]
 8018b60:	9300      	str	r3, [sp, #0]
 8018b62:	462b      	mov	r3, r5
 8018b64:	4622      	mov	r2, r4
 8018b66:	4601      	mov	r1, r0
 8018b68:	6838      	ldr	r0, [r7, #0]
 8018b6a:	f000 faeb 	bl	8019144 <etharp_raw>
      break;
 8018b6e:	e001      	b.n	8018b74 <etharp_input+0xf8>
      break;
 8018b70:	bf00      	nop
 8018b72:	e000      	b.n	8018b76 <etharp_input+0xfa>
      break;
 8018b74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018b76:	6878      	ldr	r0, [r7, #4]
 8018b78:	f7f8 fa98 	bl	80110ac <pbuf_free>
}
 8018b7c:	3718      	adds	r7, #24
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bdb0      	pop	{r4, r5, r7, pc}
 8018b82:	bf00      	nop
 8018b84:	08027760 	.word	0x08027760
 8018b88:	080278b0 	.word	0x080278b0
 8018b8c:	080277d8 	.word	0x080277d8

08018b90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b086      	sub	sp, #24
 8018b94:	af02      	add	r7, sp, #8
 8018b96:	60f8      	str	r0, [r7, #12]
 8018b98:	60b9      	str	r1, [r7, #8]
 8018b9a:	4613      	mov	r3, r2
 8018b9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018b9e:	79fa      	ldrb	r2, [r7, #7]
 8018ba0:	4944      	ldr	r1, [pc, #272]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	4413      	add	r3, r2
 8018ba8:	00db      	lsls	r3, r3, #3
 8018baa:	440b      	add	r3, r1
 8018bac:	3314      	adds	r3, #20
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	2b01      	cmp	r3, #1
 8018bb2:	d806      	bhi.n	8018bc2 <etharp_output_to_arp_index+0x32>
 8018bb4:	4b40      	ldr	r3, [pc, #256]	; (8018cb8 <etharp_output_to_arp_index+0x128>)
 8018bb6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018bba:	4940      	ldr	r1, [pc, #256]	; (8018cbc <etharp_output_to_arp_index+0x12c>)
 8018bbc:	4840      	ldr	r0, [pc, #256]	; (8018cc0 <etharp_output_to_arp_index+0x130>)
 8018bbe:	f002 fddb 	bl	801b778 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018bc2:	79fa      	ldrb	r2, [r7, #7]
 8018bc4:	493b      	ldr	r1, [pc, #236]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018bc6:	4613      	mov	r3, r2
 8018bc8:	005b      	lsls	r3, r3, #1
 8018bca:	4413      	add	r3, r2
 8018bcc:	00db      	lsls	r3, r3, #3
 8018bce:	440b      	add	r3, r1
 8018bd0:	3314      	adds	r3, #20
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	2b02      	cmp	r3, #2
 8018bd6:	d153      	bne.n	8018c80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018bd8:	79fa      	ldrb	r2, [r7, #7]
 8018bda:	4936      	ldr	r1, [pc, #216]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018bdc:	4613      	mov	r3, r2
 8018bde:	005b      	lsls	r3, r3, #1
 8018be0:	4413      	add	r3, r2
 8018be2:	00db      	lsls	r3, r3, #3
 8018be4:	440b      	add	r3, r1
 8018be6:	3312      	adds	r3, #18
 8018be8:	881b      	ldrh	r3, [r3, #0]
 8018bea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018bee:	d919      	bls.n	8018c24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018bf0:	79fa      	ldrb	r2, [r7, #7]
 8018bf2:	4613      	mov	r3, r2
 8018bf4:	005b      	lsls	r3, r3, #1
 8018bf6:	4413      	add	r3, r2
 8018bf8:	00db      	lsls	r3, r3, #3
 8018bfa:	4a2e      	ldr	r2, [pc, #184]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018bfc:	4413      	add	r3, r2
 8018bfe:	3304      	adds	r3, #4
 8018c00:	4619      	mov	r1, r3
 8018c02:	68f8      	ldr	r0, [r7, #12]
 8018c04:	f000 fb4c 	bl	80192a0 <etharp_request>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d138      	bne.n	8018c80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018c0e:	79fa      	ldrb	r2, [r7, #7]
 8018c10:	4928      	ldr	r1, [pc, #160]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018c12:	4613      	mov	r3, r2
 8018c14:	005b      	lsls	r3, r3, #1
 8018c16:	4413      	add	r3, r2
 8018c18:	00db      	lsls	r3, r3, #3
 8018c1a:	440b      	add	r3, r1
 8018c1c:	3314      	adds	r3, #20
 8018c1e:	2203      	movs	r2, #3
 8018c20:	701a      	strb	r2, [r3, #0]
 8018c22:	e02d      	b.n	8018c80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018c24:	79fa      	ldrb	r2, [r7, #7]
 8018c26:	4923      	ldr	r1, [pc, #140]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018c28:	4613      	mov	r3, r2
 8018c2a:	005b      	lsls	r3, r3, #1
 8018c2c:	4413      	add	r3, r2
 8018c2e:	00db      	lsls	r3, r3, #3
 8018c30:	440b      	add	r3, r1
 8018c32:	3312      	adds	r3, #18
 8018c34:	881b      	ldrh	r3, [r3, #0]
 8018c36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018c3a:	d321      	bcc.n	8018c80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018c3c:	79fa      	ldrb	r2, [r7, #7]
 8018c3e:	4613      	mov	r3, r2
 8018c40:	005b      	lsls	r3, r3, #1
 8018c42:	4413      	add	r3, r2
 8018c44:	00db      	lsls	r3, r3, #3
 8018c46:	4a1b      	ldr	r2, [pc, #108]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018c48:	4413      	add	r3, r2
 8018c4a:	1d19      	adds	r1, r3, #4
 8018c4c:	79fa      	ldrb	r2, [r7, #7]
 8018c4e:	4613      	mov	r3, r2
 8018c50:	005b      	lsls	r3, r3, #1
 8018c52:	4413      	add	r3, r2
 8018c54:	00db      	lsls	r3, r3, #3
 8018c56:	3308      	adds	r3, #8
 8018c58:	4a16      	ldr	r2, [pc, #88]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018c5a:	4413      	add	r3, r2
 8018c5c:	3304      	adds	r3, #4
 8018c5e:	461a      	mov	r2, r3
 8018c60:	68f8      	ldr	r0, [r7, #12]
 8018c62:	f000 fafb 	bl	801925c <etharp_request_dst>
 8018c66:	4603      	mov	r3, r0
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d109      	bne.n	8018c80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018c6c:	79fa      	ldrb	r2, [r7, #7]
 8018c6e:	4911      	ldr	r1, [pc, #68]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018c70:	4613      	mov	r3, r2
 8018c72:	005b      	lsls	r3, r3, #1
 8018c74:	4413      	add	r3, r2
 8018c76:	00db      	lsls	r3, r3, #3
 8018c78:	440b      	add	r3, r1
 8018c7a:	3314      	adds	r3, #20
 8018c7c:	2203      	movs	r2, #3
 8018c7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8018c86:	79fa      	ldrb	r2, [r7, #7]
 8018c88:	4613      	mov	r3, r2
 8018c8a:	005b      	lsls	r3, r3, #1
 8018c8c:	4413      	add	r3, r2
 8018c8e:	00db      	lsls	r3, r3, #3
 8018c90:	3308      	adds	r3, #8
 8018c92:	4a08      	ldr	r2, [pc, #32]	; (8018cb4 <etharp_output_to_arp_index+0x124>)
 8018c94:	4413      	add	r3, r2
 8018c96:	3304      	adds	r3, #4
 8018c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018c9c:	9200      	str	r2, [sp, #0]
 8018c9e:	460a      	mov	r2, r1
 8018ca0:	68b9      	ldr	r1, [r7, #8]
 8018ca2:	68f8      	ldr	r0, [r7, #12]
 8018ca4:	f001 ff64 	bl	801ab70 <ethernet_output>
 8018ca8:	4603      	mov	r3, r0
}
 8018caa:	4618      	mov	r0, r3
 8018cac:	3710      	adds	r7, #16
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}
 8018cb2:	bf00      	nop
 8018cb4:	20004f48 	.word	0x20004f48
 8018cb8:	08027760 	.word	0x08027760
 8018cbc:	080278d0 	.word	0x080278d0
 8018cc0:	080277d8 	.word	0x080277d8

08018cc4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b08a      	sub	sp, #40	; 0x28
 8018cc8:	af02      	add	r7, sp, #8
 8018cca:	60f8      	str	r0, [r7, #12]
 8018ccc:	60b9      	str	r1, [r7, #8]
 8018cce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d106      	bne.n	8018ce8 <etharp_output+0x24>
 8018cda:	4b73      	ldr	r3, [pc, #460]	; (8018ea8 <etharp_output+0x1e4>)
 8018cdc:	f240 321e 	movw	r2, #798	; 0x31e
 8018ce0:	4972      	ldr	r1, [pc, #456]	; (8018eac <etharp_output+0x1e8>)
 8018ce2:	4873      	ldr	r0, [pc, #460]	; (8018eb0 <etharp_output+0x1ec>)
 8018ce4:	f002 fd48 	bl	801b778 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018ce8:	68bb      	ldr	r3, [r7, #8]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d106      	bne.n	8018cfc <etharp_output+0x38>
 8018cee:	4b6e      	ldr	r3, [pc, #440]	; (8018ea8 <etharp_output+0x1e4>)
 8018cf0:	f240 321f 	movw	r2, #799	; 0x31f
 8018cf4:	496f      	ldr	r1, [pc, #444]	; (8018eb4 <etharp_output+0x1f0>)
 8018cf6:	486e      	ldr	r0, [pc, #440]	; (8018eb0 <etharp_output+0x1ec>)
 8018cf8:	f002 fd3e 	bl	801b778 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d106      	bne.n	8018d10 <etharp_output+0x4c>
 8018d02:	4b69      	ldr	r3, [pc, #420]	; (8018ea8 <etharp_output+0x1e4>)
 8018d04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018d08:	496b      	ldr	r1, [pc, #428]	; (8018eb8 <etharp_output+0x1f4>)
 8018d0a:	4869      	ldr	r0, [pc, #420]	; (8018eb0 <etharp_output+0x1ec>)
 8018d0c:	f002 fd34 	bl	801b778 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	68f9      	ldr	r1, [r7, #12]
 8018d16:	4618      	mov	r0, r3
 8018d18:	f000 fef8 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d002      	beq.n	8018d28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018d22:	4b66      	ldr	r3, [pc, #408]	; (8018ebc <etharp_output+0x1f8>)
 8018d24:	61fb      	str	r3, [r7, #28]
 8018d26:	e0af      	b.n	8018e88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018d30:	2be0      	cmp	r3, #224	; 0xe0
 8018d32:	d118      	bne.n	8018d66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018d34:	2301      	movs	r3, #1
 8018d36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018d3c:	235e      	movs	r3, #94	; 0x5e
 8018d3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	3301      	adds	r3, #1
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018d4a:	b2db      	uxtb	r3, r3
 8018d4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	3302      	adds	r3, #2
 8018d52:	781b      	ldrb	r3, [r3, #0]
 8018d54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	3303      	adds	r3, #3
 8018d5a:	781b      	ldrb	r3, [r3, #0]
 8018d5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018d5e:	f107 0310 	add.w	r3, r7, #16
 8018d62:	61fb      	str	r3, [r7, #28]
 8018d64:	e090      	b.n	8018e88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	681a      	ldr	r2, [r3, #0]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	3304      	adds	r3, #4
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	405a      	eors	r2, r3
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	3308      	adds	r3, #8
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	4013      	ands	r3, r2
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d012      	beq.n	8018da4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018d84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018d88:	4293      	cmp	r3, r2
 8018d8a:	d00b      	beq.n	8018da4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	330c      	adds	r3, #12
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d003      	beq.n	8018d9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	330c      	adds	r3, #12
 8018d9a:	61bb      	str	r3, [r7, #24]
 8018d9c:	e002      	b.n	8018da4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018d9e:	f06f 0303 	mvn.w	r3, #3
 8018da2:	e07d      	b.n	8018ea0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018da4:	4b46      	ldr	r3, [pc, #280]	; (8018ec0 <etharp_output+0x1fc>)
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	4619      	mov	r1, r3
 8018daa:	4a46      	ldr	r2, [pc, #280]	; (8018ec4 <etharp_output+0x200>)
 8018dac:	460b      	mov	r3, r1
 8018dae:	005b      	lsls	r3, r3, #1
 8018db0:	440b      	add	r3, r1
 8018db2:	00db      	lsls	r3, r3, #3
 8018db4:	4413      	add	r3, r2
 8018db6:	3314      	adds	r3, #20
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	2b01      	cmp	r3, #1
 8018dbc:	d925      	bls.n	8018e0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018dbe:	4b40      	ldr	r3, [pc, #256]	; (8018ec0 <etharp_output+0x1fc>)
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	4619      	mov	r1, r3
 8018dc4:	4a3f      	ldr	r2, [pc, #252]	; (8018ec4 <etharp_output+0x200>)
 8018dc6:	460b      	mov	r3, r1
 8018dc8:	005b      	lsls	r3, r3, #1
 8018dca:	440b      	add	r3, r1
 8018dcc:	00db      	lsls	r3, r3, #3
 8018dce:	4413      	add	r3, r2
 8018dd0:	3308      	adds	r3, #8
 8018dd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018dd4:	68fa      	ldr	r2, [r7, #12]
 8018dd6:	429a      	cmp	r2, r3
 8018dd8:	d117      	bne.n	8018e0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018dda:	69bb      	ldr	r3, [r7, #24]
 8018ddc:	681a      	ldr	r2, [r3, #0]
 8018dde:	4b38      	ldr	r3, [pc, #224]	; (8018ec0 <etharp_output+0x1fc>)
 8018de0:	781b      	ldrb	r3, [r3, #0]
 8018de2:	4618      	mov	r0, r3
 8018de4:	4937      	ldr	r1, [pc, #220]	; (8018ec4 <etharp_output+0x200>)
 8018de6:	4603      	mov	r3, r0
 8018de8:	005b      	lsls	r3, r3, #1
 8018dea:	4403      	add	r3, r0
 8018dec:	00db      	lsls	r3, r3, #3
 8018dee:	440b      	add	r3, r1
 8018df0:	3304      	adds	r3, #4
 8018df2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018df4:	429a      	cmp	r2, r3
 8018df6:	d108      	bne.n	8018e0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018df8:	4b31      	ldr	r3, [pc, #196]	; (8018ec0 <etharp_output+0x1fc>)
 8018dfa:	781b      	ldrb	r3, [r3, #0]
 8018dfc:	461a      	mov	r2, r3
 8018dfe:	68b9      	ldr	r1, [r7, #8]
 8018e00:	68f8      	ldr	r0, [r7, #12]
 8018e02:	f7ff fec5 	bl	8018b90 <etharp_output_to_arp_index>
 8018e06:	4603      	mov	r3, r0
 8018e08:	e04a      	b.n	8018ea0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	75fb      	strb	r3, [r7, #23]
 8018e0e:	e031      	b.n	8018e74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018e10:	7dfa      	ldrb	r2, [r7, #23]
 8018e12:	492c      	ldr	r1, [pc, #176]	; (8018ec4 <etharp_output+0x200>)
 8018e14:	4613      	mov	r3, r2
 8018e16:	005b      	lsls	r3, r3, #1
 8018e18:	4413      	add	r3, r2
 8018e1a:	00db      	lsls	r3, r3, #3
 8018e1c:	440b      	add	r3, r1
 8018e1e:	3314      	adds	r3, #20
 8018e20:	781b      	ldrb	r3, [r3, #0]
 8018e22:	2b01      	cmp	r3, #1
 8018e24:	d923      	bls.n	8018e6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018e26:	7dfa      	ldrb	r2, [r7, #23]
 8018e28:	4926      	ldr	r1, [pc, #152]	; (8018ec4 <etharp_output+0x200>)
 8018e2a:	4613      	mov	r3, r2
 8018e2c:	005b      	lsls	r3, r3, #1
 8018e2e:	4413      	add	r3, r2
 8018e30:	00db      	lsls	r3, r3, #3
 8018e32:	440b      	add	r3, r1
 8018e34:	3308      	adds	r3, #8
 8018e36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018e38:	68fa      	ldr	r2, [r7, #12]
 8018e3a:	429a      	cmp	r2, r3
 8018e3c:	d117      	bne.n	8018e6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018e3e:	69bb      	ldr	r3, [r7, #24]
 8018e40:	6819      	ldr	r1, [r3, #0]
 8018e42:	7dfa      	ldrb	r2, [r7, #23]
 8018e44:	481f      	ldr	r0, [pc, #124]	; (8018ec4 <etharp_output+0x200>)
 8018e46:	4613      	mov	r3, r2
 8018e48:	005b      	lsls	r3, r3, #1
 8018e4a:	4413      	add	r3, r2
 8018e4c:	00db      	lsls	r3, r3, #3
 8018e4e:	4403      	add	r3, r0
 8018e50:	3304      	adds	r3, #4
 8018e52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018e54:	4299      	cmp	r1, r3
 8018e56:	d10a      	bne.n	8018e6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018e58:	4a19      	ldr	r2, [pc, #100]	; (8018ec0 <etharp_output+0x1fc>)
 8018e5a:	7dfb      	ldrb	r3, [r7, #23]
 8018e5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018e5e:	7dfb      	ldrb	r3, [r7, #23]
 8018e60:	461a      	mov	r2, r3
 8018e62:	68b9      	ldr	r1, [r7, #8]
 8018e64:	68f8      	ldr	r0, [r7, #12]
 8018e66:	f7ff fe93 	bl	8018b90 <etharp_output_to_arp_index>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	e018      	b.n	8018ea0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018e6e:	7dfb      	ldrb	r3, [r7, #23]
 8018e70:	3301      	adds	r3, #1
 8018e72:	75fb      	strb	r3, [r7, #23]
 8018e74:	7dfb      	ldrb	r3, [r7, #23]
 8018e76:	2b09      	cmp	r3, #9
 8018e78:	d9ca      	bls.n	8018e10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018e7a:	68ba      	ldr	r2, [r7, #8]
 8018e7c:	69b9      	ldr	r1, [r7, #24]
 8018e7e:	68f8      	ldr	r0, [r7, #12]
 8018e80:	f000 f822 	bl	8018ec8 <etharp_query>
 8018e84:	4603      	mov	r3, r0
 8018e86:	e00b      	b.n	8018ea0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8018e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018e92:	9300      	str	r3, [sp, #0]
 8018e94:	69fb      	ldr	r3, [r7, #28]
 8018e96:	68b9      	ldr	r1, [r7, #8]
 8018e98:	68f8      	ldr	r0, [r7, #12]
 8018e9a:	f001 fe69 	bl	801ab70 <ethernet_output>
 8018e9e:	4603      	mov	r3, r0
}
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	3720      	adds	r7, #32
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	bd80      	pop	{r7, pc}
 8018ea8:	08027760 	.word	0x08027760
 8018eac:	080278b0 	.word	0x080278b0
 8018eb0:	080277d8 	.word	0x080277d8
 8018eb4:	08027900 	.word	0x08027900
 8018eb8:	080278a0 	.word	0x080278a0
 8018ebc:	080296d8 	.word	0x080296d8
 8018ec0:	20005038 	.word	0x20005038
 8018ec4:	20004f48 	.word	0x20004f48

08018ec8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b08c      	sub	sp, #48	; 0x30
 8018ecc:	af02      	add	r7, sp, #8
 8018ece:	60f8      	str	r0, [r7, #12]
 8018ed0:	60b9      	str	r1, [r7, #8]
 8018ed2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	3322      	adds	r3, #34	; 0x22
 8018ed8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018eda:	23ff      	movs	r3, #255	; 0xff
 8018edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	68f9      	ldr	r1, [r7, #12]
 8018eea:	4618      	mov	r0, r3
 8018eec:	f000 fe0e 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d10c      	bne.n	8018f10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018ef6:	68bb      	ldr	r3, [r7, #8]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018efe:	2be0      	cmp	r3, #224	; 0xe0
 8018f00:	d006      	beq.n	8018f10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018f02:	68bb      	ldr	r3, [r7, #8]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d003      	beq.n	8018f10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018f08:	68bb      	ldr	r3, [r7, #8]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d102      	bne.n	8018f16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018f10:	f06f 030f 	mvn.w	r3, #15
 8018f14:	e101      	b.n	801911a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018f16:	68fa      	ldr	r2, [r7, #12]
 8018f18:	2101      	movs	r1, #1
 8018f1a:	68b8      	ldr	r0, [r7, #8]
 8018f1c:	f7ff fb60 	bl	80185e0 <etharp_find_entry>
 8018f20:	4603      	mov	r3, r0
 8018f22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018f24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	da02      	bge.n	8018f32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018f2c:	8a7b      	ldrh	r3, [r7, #18]
 8018f2e:	b25b      	sxtb	r3, r3
 8018f30:	e0f3      	b.n	801911a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018f32:	8a7b      	ldrh	r3, [r7, #18]
 8018f34:	2b7e      	cmp	r3, #126	; 0x7e
 8018f36:	d906      	bls.n	8018f46 <etharp_query+0x7e>
 8018f38:	4b7a      	ldr	r3, [pc, #488]	; (8019124 <etharp_query+0x25c>)
 8018f3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018f3e:	497a      	ldr	r1, [pc, #488]	; (8019128 <etharp_query+0x260>)
 8018f40:	487a      	ldr	r0, [pc, #488]	; (801912c <etharp_query+0x264>)
 8018f42:	f002 fc19 	bl	801b778 <printf>
  i = (netif_addr_idx_t)i_err;
 8018f46:	8a7b      	ldrh	r3, [r7, #18]
 8018f48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018f4a:	7c7a      	ldrb	r2, [r7, #17]
 8018f4c:	4978      	ldr	r1, [pc, #480]	; (8019130 <etharp_query+0x268>)
 8018f4e:	4613      	mov	r3, r2
 8018f50:	005b      	lsls	r3, r3, #1
 8018f52:	4413      	add	r3, r2
 8018f54:	00db      	lsls	r3, r3, #3
 8018f56:	440b      	add	r3, r1
 8018f58:	3314      	adds	r3, #20
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d115      	bne.n	8018f8c <etharp_query+0xc4>
    is_new_entry = 1;
 8018f60:	2301      	movs	r3, #1
 8018f62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018f64:	7c7a      	ldrb	r2, [r7, #17]
 8018f66:	4972      	ldr	r1, [pc, #456]	; (8019130 <etharp_query+0x268>)
 8018f68:	4613      	mov	r3, r2
 8018f6a:	005b      	lsls	r3, r3, #1
 8018f6c:	4413      	add	r3, r2
 8018f6e:	00db      	lsls	r3, r3, #3
 8018f70:	440b      	add	r3, r1
 8018f72:	3314      	adds	r3, #20
 8018f74:	2201      	movs	r2, #1
 8018f76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018f78:	7c7a      	ldrb	r2, [r7, #17]
 8018f7a:	496d      	ldr	r1, [pc, #436]	; (8019130 <etharp_query+0x268>)
 8018f7c:	4613      	mov	r3, r2
 8018f7e:	005b      	lsls	r3, r3, #1
 8018f80:	4413      	add	r3, r2
 8018f82:	00db      	lsls	r3, r3, #3
 8018f84:	440b      	add	r3, r1
 8018f86:	3308      	adds	r3, #8
 8018f88:	68fa      	ldr	r2, [r7, #12]
 8018f8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018f8c:	7c7a      	ldrb	r2, [r7, #17]
 8018f8e:	4968      	ldr	r1, [pc, #416]	; (8019130 <etharp_query+0x268>)
 8018f90:	4613      	mov	r3, r2
 8018f92:	005b      	lsls	r3, r3, #1
 8018f94:	4413      	add	r3, r2
 8018f96:	00db      	lsls	r3, r3, #3
 8018f98:	440b      	add	r3, r1
 8018f9a:	3314      	adds	r3, #20
 8018f9c:	781b      	ldrb	r3, [r3, #0]
 8018f9e:	2b01      	cmp	r3, #1
 8018fa0:	d011      	beq.n	8018fc6 <etharp_query+0xfe>
 8018fa2:	7c7a      	ldrb	r2, [r7, #17]
 8018fa4:	4962      	ldr	r1, [pc, #392]	; (8019130 <etharp_query+0x268>)
 8018fa6:	4613      	mov	r3, r2
 8018fa8:	005b      	lsls	r3, r3, #1
 8018faa:	4413      	add	r3, r2
 8018fac:	00db      	lsls	r3, r3, #3
 8018fae:	440b      	add	r3, r1
 8018fb0:	3314      	adds	r3, #20
 8018fb2:	781b      	ldrb	r3, [r3, #0]
 8018fb4:	2b01      	cmp	r3, #1
 8018fb6:	d806      	bhi.n	8018fc6 <etharp_query+0xfe>
 8018fb8:	4b5a      	ldr	r3, [pc, #360]	; (8019124 <etharp_query+0x25c>)
 8018fba:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018fbe:	495d      	ldr	r1, [pc, #372]	; (8019134 <etharp_query+0x26c>)
 8018fc0:	485a      	ldr	r0, [pc, #360]	; (801912c <etharp_query+0x264>)
 8018fc2:	f002 fbd9 	bl	801b778 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018fc6:	6a3b      	ldr	r3, [r7, #32]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d102      	bne.n	8018fd2 <etharp_query+0x10a>
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d10c      	bne.n	8018fec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018fd2:	68b9      	ldr	r1, [r7, #8]
 8018fd4:	68f8      	ldr	r0, [r7, #12]
 8018fd6:	f000 f963 	bl	80192a0 <etharp_request>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d102      	bne.n	8018fec <etharp_query+0x124>
      return result;
 8018fe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018fea:	e096      	b.n	801911a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d106      	bne.n	8019000 <etharp_query+0x138>
 8018ff2:	4b4c      	ldr	r3, [pc, #304]	; (8019124 <etharp_query+0x25c>)
 8018ff4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018ff8:	494f      	ldr	r1, [pc, #316]	; (8019138 <etharp_query+0x270>)
 8018ffa:	484c      	ldr	r0, [pc, #304]	; (801912c <etharp_query+0x264>)
 8018ffc:	f002 fbbc 	bl	801b778 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019000:	7c7a      	ldrb	r2, [r7, #17]
 8019002:	494b      	ldr	r1, [pc, #300]	; (8019130 <etharp_query+0x268>)
 8019004:	4613      	mov	r3, r2
 8019006:	005b      	lsls	r3, r3, #1
 8019008:	4413      	add	r3, r2
 801900a:	00db      	lsls	r3, r3, #3
 801900c:	440b      	add	r3, r1
 801900e:	3314      	adds	r3, #20
 8019010:	781b      	ldrb	r3, [r3, #0]
 8019012:	2b01      	cmp	r3, #1
 8019014:	d917      	bls.n	8019046 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019016:	4a49      	ldr	r2, [pc, #292]	; (801913c <etharp_query+0x274>)
 8019018:	7c7b      	ldrb	r3, [r7, #17]
 801901a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801901c:	7c7a      	ldrb	r2, [r7, #17]
 801901e:	4613      	mov	r3, r2
 8019020:	005b      	lsls	r3, r3, #1
 8019022:	4413      	add	r3, r2
 8019024:	00db      	lsls	r3, r3, #3
 8019026:	3308      	adds	r3, #8
 8019028:	4a41      	ldr	r2, [pc, #260]	; (8019130 <etharp_query+0x268>)
 801902a:	4413      	add	r3, r2
 801902c:	3304      	adds	r3, #4
 801902e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019032:	9200      	str	r2, [sp, #0]
 8019034:	697a      	ldr	r2, [r7, #20]
 8019036:	6879      	ldr	r1, [r7, #4]
 8019038:	68f8      	ldr	r0, [r7, #12]
 801903a:	f001 fd99 	bl	801ab70 <ethernet_output>
 801903e:	4603      	mov	r3, r0
 8019040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019044:	e067      	b.n	8019116 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019046:	7c7a      	ldrb	r2, [r7, #17]
 8019048:	4939      	ldr	r1, [pc, #228]	; (8019130 <etharp_query+0x268>)
 801904a:	4613      	mov	r3, r2
 801904c:	005b      	lsls	r3, r3, #1
 801904e:	4413      	add	r3, r2
 8019050:	00db      	lsls	r3, r3, #3
 8019052:	440b      	add	r3, r1
 8019054:	3314      	adds	r3, #20
 8019056:	781b      	ldrb	r3, [r3, #0]
 8019058:	2b01      	cmp	r3, #1
 801905a:	d15c      	bne.n	8019116 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801905c:	2300      	movs	r3, #0
 801905e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019064:	e01c      	b.n	80190a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019066:	69fb      	ldr	r3, [r7, #28]
 8019068:	895a      	ldrh	r2, [r3, #10]
 801906a:	69fb      	ldr	r3, [r7, #28]
 801906c:	891b      	ldrh	r3, [r3, #8]
 801906e:	429a      	cmp	r2, r3
 8019070:	d10a      	bne.n	8019088 <etharp_query+0x1c0>
 8019072:	69fb      	ldr	r3, [r7, #28]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d006      	beq.n	8019088 <etharp_query+0x1c0>
 801907a:	4b2a      	ldr	r3, [pc, #168]	; (8019124 <etharp_query+0x25c>)
 801907c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019080:	492f      	ldr	r1, [pc, #188]	; (8019140 <etharp_query+0x278>)
 8019082:	482a      	ldr	r0, [pc, #168]	; (801912c <etharp_query+0x264>)
 8019084:	f002 fb78 	bl	801b778 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 8019088:	69fb      	ldr	r3, [r7, #28]
 801908a:	7b1b      	ldrb	r3, [r3, #12]
 801908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019090:	2b00      	cmp	r3, #0
 8019092:	d002      	beq.n	801909a <etharp_query+0x1d2>
        copy_needed = 1;
 8019094:	2301      	movs	r3, #1
 8019096:	61bb      	str	r3, [r7, #24]
        break;
 8019098:	e005      	b.n	80190a6 <etharp_query+0x1de>
      }
      p = p->next;
 801909a:	69fb      	ldr	r3, [r7, #28]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80190a0:	69fb      	ldr	r3, [r7, #28]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d1df      	bne.n	8019066 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80190a6:	69bb      	ldr	r3, [r7, #24]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d007      	beq.n	80190bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80190ac:	687a      	ldr	r2, [r7, #4]
 80190ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 80190b2:	200e      	movs	r0, #14
 80190b4:	f7f8 fa72 	bl	801159c <pbuf_clone>
 80190b8:	61f8      	str	r0, [r7, #28]
 80190ba:	e004      	b.n	80190c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80190c0:	69f8      	ldr	r0, [r7, #28]
 80190c2:	f7f8 f899 	bl	80111f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80190c6:	69fb      	ldr	r3, [r7, #28]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d021      	beq.n	8019110 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80190cc:	7c7a      	ldrb	r2, [r7, #17]
 80190ce:	4918      	ldr	r1, [pc, #96]	; (8019130 <etharp_query+0x268>)
 80190d0:	4613      	mov	r3, r2
 80190d2:	005b      	lsls	r3, r3, #1
 80190d4:	4413      	add	r3, r2
 80190d6:	00db      	lsls	r3, r3, #3
 80190d8:	440b      	add	r3, r1
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d00a      	beq.n	80190f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80190e0:	7c7a      	ldrb	r2, [r7, #17]
 80190e2:	4913      	ldr	r1, [pc, #76]	; (8019130 <etharp_query+0x268>)
 80190e4:	4613      	mov	r3, r2
 80190e6:	005b      	lsls	r3, r3, #1
 80190e8:	4413      	add	r3, r2
 80190ea:	00db      	lsls	r3, r3, #3
 80190ec:	440b      	add	r3, r1
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	4618      	mov	r0, r3
 80190f2:	f7f7 ffdb 	bl	80110ac <pbuf_free>
      }
      arp_table[i].q = p;
 80190f6:	7c7a      	ldrb	r2, [r7, #17]
 80190f8:	490d      	ldr	r1, [pc, #52]	; (8019130 <etharp_query+0x268>)
 80190fa:	4613      	mov	r3, r2
 80190fc:	005b      	lsls	r3, r3, #1
 80190fe:	4413      	add	r3, r2
 8019100:	00db      	lsls	r3, r3, #3
 8019102:	440b      	add	r3, r1
 8019104:	69fa      	ldr	r2, [r7, #28]
 8019106:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019108:	2300      	movs	r3, #0
 801910a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801910e:	e002      	b.n	8019116 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019110:	23ff      	movs	r3, #255	; 0xff
 8019112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801911a:	4618      	mov	r0, r3
 801911c:	3728      	adds	r7, #40	; 0x28
 801911e:	46bd      	mov	sp, r7
 8019120:	bd80      	pop	{r7, pc}
 8019122:	bf00      	nop
 8019124:	08027760 	.word	0x08027760
 8019128:	0802790c 	.word	0x0802790c
 801912c:	080277d8 	.word	0x080277d8
 8019130:	20004f48 	.word	0x20004f48
 8019134:	0802791c 	.word	0x0802791c
 8019138:	08027900 	.word	0x08027900
 801913c:	20005038 	.word	0x20005038
 8019140:	08027944 	.word	0x08027944

08019144 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b08a      	sub	sp, #40	; 0x28
 8019148:	af02      	add	r7, sp, #8
 801914a:	60f8      	str	r0, [r7, #12]
 801914c:	60b9      	str	r1, [r7, #8]
 801914e:	607a      	str	r2, [r7, #4]
 8019150:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019152:	2300      	movs	r3, #0
 8019154:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d106      	bne.n	801916a <etharp_raw+0x26>
 801915c:	4b3a      	ldr	r3, [pc, #232]	; (8019248 <etharp_raw+0x104>)
 801915e:	f240 4257 	movw	r2, #1111	; 0x457
 8019162:	493a      	ldr	r1, [pc, #232]	; (801924c <etharp_raw+0x108>)
 8019164:	483a      	ldr	r0, [pc, #232]	; (8019250 <etharp_raw+0x10c>)
 8019166:	f002 fb07 	bl	801b778 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801916a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801916e:	211c      	movs	r1, #28
 8019170:	200e      	movs	r0, #14
 8019172:	f7f7 fcb7 	bl	8010ae4 <pbuf_alloc>
 8019176:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019178:	69bb      	ldr	r3, [r7, #24]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d102      	bne.n	8019184 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801917e:	f04f 33ff 	mov.w	r3, #4294967295
 8019182:	e05d      	b.n	8019240 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019184:	69bb      	ldr	r3, [r7, #24]
 8019186:	895b      	ldrh	r3, [r3, #10]
 8019188:	2b1b      	cmp	r3, #27
 801918a:	d806      	bhi.n	801919a <etharp_raw+0x56>
 801918c:	4b2e      	ldr	r3, [pc, #184]	; (8019248 <etharp_raw+0x104>)
 801918e:	f240 4262 	movw	r2, #1122	; 0x462
 8019192:	4930      	ldr	r1, [pc, #192]	; (8019254 <etharp_raw+0x110>)
 8019194:	482e      	ldr	r0, [pc, #184]	; (8019250 <etharp_raw+0x10c>)
 8019196:	f002 faef 	bl	801b778 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801919a:	69bb      	ldr	r3, [r7, #24]
 801919c:	685b      	ldr	r3, [r3, #4]
 801919e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80191a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80191a2:	4618      	mov	r0, r3
 80191a4:	f7f6 fbf0 	bl	800f988 <lwip_htons>
 80191a8:	4603      	mov	r3, r0
 80191aa:	461a      	mov	r2, r3
 80191ac:	697b      	ldr	r3, [r7, #20]
 80191ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191b6:	2b06      	cmp	r3, #6
 80191b8:	d006      	beq.n	80191c8 <etharp_raw+0x84>
 80191ba:	4b23      	ldr	r3, [pc, #140]	; (8019248 <etharp_raw+0x104>)
 80191bc:	f240 4269 	movw	r2, #1129	; 0x469
 80191c0:	4925      	ldr	r1, [pc, #148]	; (8019258 <etharp_raw+0x114>)
 80191c2:	4823      	ldr	r0, [pc, #140]	; (8019250 <etharp_raw+0x10c>)
 80191c4:	f002 fad8 	bl	801b778 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	3308      	adds	r3, #8
 80191cc:	2206      	movs	r2, #6
 80191ce:	6839      	ldr	r1, [r7, #0]
 80191d0:	4618      	mov	r0, r3
 80191d2:	f002 f823 	bl	801b21c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80191d6:	697b      	ldr	r3, [r7, #20]
 80191d8:	3312      	adds	r3, #18
 80191da:	2206      	movs	r2, #6
 80191dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80191de:	4618      	mov	r0, r3
 80191e0:	f002 f81c 	bl	801b21c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80191e4:	697b      	ldr	r3, [r7, #20]
 80191e6:	330e      	adds	r3, #14
 80191e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80191ea:	6812      	ldr	r2, [r2, #0]
 80191ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80191ee:	697b      	ldr	r3, [r7, #20]
 80191f0:	3318      	adds	r3, #24
 80191f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80191f4:	6812      	ldr	r2, [r2, #0]
 80191f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80191f8:	697b      	ldr	r3, [r7, #20]
 80191fa:	2200      	movs	r2, #0
 80191fc:	701a      	strb	r2, [r3, #0]
 80191fe:	2200      	movs	r2, #0
 8019200:	f042 0201 	orr.w	r2, r2, #1
 8019204:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019206:	697b      	ldr	r3, [r7, #20]
 8019208:	2200      	movs	r2, #0
 801920a:	f042 0208 	orr.w	r2, r2, #8
 801920e:	709a      	strb	r2, [r3, #2]
 8019210:	2200      	movs	r2, #0
 8019212:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019214:	697b      	ldr	r3, [r7, #20]
 8019216:	2206      	movs	r2, #6
 8019218:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	2204      	movs	r2, #4
 801921e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019220:	f640 0306 	movw	r3, #2054	; 0x806
 8019224:	9300      	str	r3, [sp, #0]
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	68ba      	ldr	r2, [r7, #8]
 801922a:	69b9      	ldr	r1, [r7, #24]
 801922c:	68f8      	ldr	r0, [r7, #12]
 801922e:	f001 fc9f 	bl	801ab70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019232:	69b8      	ldr	r0, [r7, #24]
 8019234:	f7f7 ff3a 	bl	80110ac <pbuf_free>
  p = NULL;
 8019238:	2300      	movs	r3, #0
 801923a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801923c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019240:	4618      	mov	r0, r3
 8019242:	3720      	adds	r7, #32
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}
 8019248:	08027760 	.word	0x08027760
 801924c:	080278b0 	.word	0x080278b0
 8019250:	080277d8 	.word	0x080277d8
 8019254:	08027960 	.word	0x08027960
 8019258:	08027994 	.word	0x08027994

0801925c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801925c:	b580      	push	{r7, lr}
 801925e:	b088      	sub	sp, #32
 8019260:	af04      	add	r7, sp, #16
 8019262:	60f8      	str	r0, [r7, #12]
 8019264:	60b9      	str	r1, [r7, #8]
 8019266:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019278:	2201      	movs	r2, #1
 801927a:	9203      	str	r2, [sp, #12]
 801927c:	68ba      	ldr	r2, [r7, #8]
 801927e:	9202      	str	r2, [sp, #8]
 8019280:	4a06      	ldr	r2, [pc, #24]	; (801929c <etharp_request_dst+0x40>)
 8019282:	9201      	str	r2, [sp, #4]
 8019284:	9300      	str	r3, [sp, #0]
 8019286:	4603      	mov	r3, r0
 8019288:	687a      	ldr	r2, [r7, #4]
 801928a:	68f8      	ldr	r0, [r7, #12]
 801928c:	f7ff ff5a 	bl	8019144 <etharp_raw>
 8019290:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019292:	4618      	mov	r0, r3
 8019294:	3710      	adds	r7, #16
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}
 801929a:	bf00      	nop
 801929c:	080296e0 	.word	0x080296e0

080192a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b082      	sub	sp, #8
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
 80192a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80192aa:	4a05      	ldr	r2, [pc, #20]	; (80192c0 <etharp_request+0x20>)
 80192ac:	6839      	ldr	r1, [r7, #0]
 80192ae:	6878      	ldr	r0, [r7, #4]
 80192b0:	f7ff ffd4 	bl	801925c <etharp_request_dst>
 80192b4:	4603      	mov	r3, r0
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	3708      	adds	r7, #8
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}
 80192be:	bf00      	nop
 80192c0:	080296d8 	.word	0x080296d8

080192c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b08e      	sub	sp, #56	; 0x38
 80192c8:	af04      	add	r7, sp, #16
 80192ca:	6078      	str	r0, [r7, #4]
 80192cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80192ce:	4b79      	ldr	r3, [pc, #484]	; (80194b4 <icmp_input+0x1f0>)
 80192d0:	689b      	ldr	r3, [r3, #8]
 80192d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80192d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d6:	781b      	ldrb	r3, [r3, #0]
 80192d8:	f003 030f 	and.w	r3, r3, #15
 80192dc:	b2db      	uxtb	r3, r3
 80192de:	009b      	lsls	r3, r3, #2
 80192e0:	b2db      	uxtb	r3, r3
 80192e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80192e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192e6:	2b13      	cmp	r3, #19
 80192e8:	f240 80cd 	bls.w	8019486 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	895b      	ldrh	r3, [r3, #10]
 80192f0:	2b03      	cmp	r3, #3
 80192f2:	f240 80ca 	bls.w	801948a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	685b      	ldr	r3, [r3, #4]
 80192fa:	781b      	ldrb	r3, [r3, #0]
 80192fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019300:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019304:	2b00      	cmp	r3, #0
 8019306:	f000 80b7 	beq.w	8019478 <icmp_input+0x1b4>
 801930a:	2b08      	cmp	r3, #8
 801930c:	f040 80b7 	bne.w	801947e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019310:	4b69      	ldr	r3, [pc, #420]	; (80194b8 <icmp_input+0x1f4>)
 8019312:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019314:	4b67      	ldr	r3, [pc, #412]	; (80194b4 <icmp_input+0x1f0>)
 8019316:	695b      	ldr	r3, [r3, #20]
 8019318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801931c:	2be0      	cmp	r3, #224	; 0xe0
 801931e:	f000 80bb 	beq.w	8019498 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019322:	4b64      	ldr	r3, [pc, #400]	; (80194b4 <icmp_input+0x1f0>)
 8019324:	695b      	ldr	r3, [r3, #20]
 8019326:	4a63      	ldr	r2, [pc, #396]	; (80194b4 <icmp_input+0x1f0>)
 8019328:	6812      	ldr	r2, [r2, #0]
 801932a:	4611      	mov	r1, r2
 801932c:	4618      	mov	r0, r3
 801932e:	f000 fbed 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 8019332:	4603      	mov	r3, r0
 8019334:	2b00      	cmp	r3, #0
 8019336:	f040 80b1 	bne.w	801949c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	891b      	ldrh	r3, [r3, #8]
 801933e:	2b07      	cmp	r3, #7
 8019340:	f240 80a5 	bls.w	801948e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019346:	330e      	adds	r3, #14
 8019348:	4619      	mov	r1, r3
 801934a:	6878      	ldr	r0, [r7, #4]
 801934c:	f7f7 fe18 	bl	8010f80 <pbuf_add_header>
 8019350:	4603      	mov	r3, r0
 8019352:	2b00      	cmp	r3, #0
 8019354:	d04b      	beq.n	80193ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	891a      	ldrh	r2, [r3, #8]
 801935a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801935c:	4413      	add	r3, r2
 801935e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	891b      	ldrh	r3, [r3, #8]
 8019364:	8b7a      	ldrh	r2, [r7, #26]
 8019366:	429a      	cmp	r2, r3
 8019368:	f0c0 809a 	bcc.w	80194a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801936c:	8b7b      	ldrh	r3, [r7, #26]
 801936e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019372:	4619      	mov	r1, r3
 8019374:	200e      	movs	r0, #14
 8019376:	f7f7 fbb5 	bl	8010ae4 <pbuf_alloc>
 801937a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801937c:	697b      	ldr	r3, [r7, #20]
 801937e:	2b00      	cmp	r3, #0
 8019380:	f000 8090 	beq.w	80194a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019384:	697b      	ldr	r3, [r7, #20]
 8019386:	895b      	ldrh	r3, [r3, #10]
 8019388:	461a      	mov	r2, r3
 801938a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801938c:	3308      	adds	r3, #8
 801938e:	429a      	cmp	r2, r3
 8019390:	d203      	bcs.n	801939a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019392:	6978      	ldr	r0, [r7, #20]
 8019394:	f7f7 fe8a 	bl	80110ac <pbuf_free>
          goto icmperr;
 8019398:	e085      	b.n	80194a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801939a:	697b      	ldr	r3, [r7, #20]
 801939c:	685b      	ldr	r3, [r3, #4]
 801939e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80193a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80193a2:	4618      	mov	r0, r3
 80193a4:	f001 ff3a 	bl	801b21c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80193a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80193aa:	4619      	mov	r1, r3
 80193ac:	6978      	ldr	r0, [r7, #20]
 80193ae:	f7f7 fdf7 	bl	8010fa0 <pbuf_remove_header>
 80193b2:	4603      	mov	r3, r0
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d009      	beq.n	80193cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80193b8:	4b40      	ldr	r3, [pc, #256]	; (80194bc <icmp_input+0x1f8>)
 80193ba:	22b6      	movs	r2, #182	; 0xb6
 80193bc:	4940      	ldr	r1, [pc, #256]	; (80194c0 <icmp_input+0x1fc>)
 80193be:	4841      	ldr	r0, [pc, #260]	; (80194c4 <icmp_input+0x200>)
 80193c0:	f002 f9da 	bl	801b778 <printf>
          pbuf_free(r);
 80193c4:	6978      	ldr	r0, [r7, #20]
 80193c6:	f7f7 fe71 	bl	80110ac <pbuf_free>
          goto icmperr;
 80193ca:	e06c      	b.n	80194a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80193cc:	6879      	ldr	r1, [r7, #4]
 80193ce:	6978      	ldr	r0, [r7, #20]
 80193d0:	f7f7 ffa0 	bl	8011314 <pbuf_copy>
 80193d4:	4603      	mov	r3, r0
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d003      	beq.n	80193e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80193da:	6978      	ldr	r0, [r7, #20]
 80193dc:	f7f7 fe66 	bl	80110ac <pbuf_free>
          goto icmperr;
 80193e0:	e061      	b.n	80194a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80193e2:	6878      	ldr	r0, [r7, #4]
 80193e4:	f7f7 fe62 	bl	80110ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80193e8:	697b      	ldr	r3, [r7, #20]
 80193ea:	607b      	str	r3, [r7, #4]
 80193ec:	e00f      	b.n	801940e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80193ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80193f0:	330e      	adds	r3, #14
 80193f2:	4619      	mov	r1, r3
 80193f4:	6878      	ldr	r0, [r7, #4]
 80193f6:	f7f7 fdd3 	bl	8010fa0 <pbuf_remove_header>
 80193fa:	4603      	mov	r3, r0
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d006      	beq.n	801940e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019400:	4b2e      	ldr	r3, [pc, #184]	; (80194bc <icmp_input+0x1f8>)
 8019402:	22c7      	movs	r2, #199	; 0xc7
 8019404:	4930      	ldr	r1, [pc, #192]	; (80194c8 <icmp_input+0x204>)
 8019406:	482f      	ldr	r0, [pc, #188]	; (80194c4 <icmp_input+0x200>)
 8019408:	f002 f9b6 	bl	801b778 <printf>
          goto icmperr;
 801940c:	e04b      	b.n	80194a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	685b      	ldr	r3, [r3, #4]
 8019412:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019416:	4619      	mov	r1, r3
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f7f7 fdb1 	bl	8010f80 <pbuf_add_header>
 801941e:	4603      	mov	r3, r0
 8019420:	2b00      	cmp	r3, #0
 8019422:	d12b      	bne.n	801947c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	685b      	ldr	r3, [r3, #4]
 8019428:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801942a:	69fb      	ldr	r3, [r7, #28]
 801942c:	681a      	ldr	r2, [r3, #0]
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019432:	4b20      	ldr	r3, [pc, #128]	; (80194b4 <icmp_input+0x1f0>)
 8019434:	691a      	ldr	r2, [r3, #16]
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801943a:	693b      	ldr	r3, [r7, #16]
 801943c:	2200      	movs	r2, #0
 801943e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019440:	693b      	ldr	r3, [r7, #16]
 8019442:	2200      	movs	r2, #0
 8019444:	709a      	strb	r2, [r3, #2]
 8019446:	2200      	movs	r2, #0
 8019448:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	22ff      	movs	r2, #255	; 0xff
 801944e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	2200      	movs	r2, #0
 8019454:	729a      	strb	r2, [r3, #10]
 8019456:	2200      	movs	r2, #0
 8019458:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	9302      	str	r3, [sp, #8]
 801945e:	2301      	movs	r3, #1
 8019460:	9301      	str	r3, [sp, #4]
 8019462:	2300      	movs	r3, #0
 8019464:	9300      	str	r3, [sp, #0]
 8019466:	23ff      	movs	r3, #255	; 0xff
 8019468:	2200      	movs	r2, #0
 801946a:	69f9      	ldr	r1, [r7, #28]
 801946c:	6878      	ldr	r0, [r7, #4]
 801946e:	f000 fa75 	bl	801995c <ip4_output_if>
 8019472:	4603      	mov	r3, r0
 8019474:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019476:	e001      	b.n	801947c <icmp_input+0x1b8>
      break;
 8019478:	bf00      	nop
 801947a:	e000      	b.n	801947e <icmp_input+0x1ba>
      break;
 801947c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801947e:	6878      	ldr	r0, [r7, #4]
 8019480:	f7f7 fe14 	bl	80110ac <pbuf_free>
  return;
 8019484:	e013      	b.n	80194ae <icmp_input+0x1ea>
    goto lenerr;
 8019486:	bf00      	nop
 8019488:	e002      	b.n	8019490 <icmp_input+0x1cc>
    goto lenerr;
 801948a:	bf00      	nop
 801948c:	e000      	b.n	8019490 <icmp_input+0x1cc>
        goto lenerr;
 801948e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019490:	6878      	ldr	r0, [r7, #4]
 8019492:	f7f7 fe0b 	bl	80110ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019496:	e00a      	b.n	80194ae <icmp_input+0x1ea>
        goto icmperr;
 8019498:	bf00      	nop
 801949a:	e004      	b.n	80194a6 <icmp_input+0x1e2>
        goto icmperr;
 801949c:	bf00      	nop
 801949e:	e002      	b.n	80194a6 <icmp_input+0x1e2>
          goto icmperr;
 80194a0:	bf00      	nop
 80194a2:	e000      	b.n	80194a6 <icmp_input+0x1e2>
          goto icmperr;
 80194a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80194a6:	6878      	ldr	r0, [r7, #4]
 80194a8:	f7f7 fe00 	bl	80110ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80194ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80194ae:	3728      	adds	r7, #40	; 0x28
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bd80      	pop	{r7, pc}
 80194b4:	2000872c 	.word	0x2000872c
 80194b8:	20008740 	.word	0x20008740
 80194bc:	080279d8 	.word	0x080279d8
 80194c0:	08027a10 	.word	0x08027a10
 80194c4:	08027a48 	.word	0x08027a48
 80194c8:	08027a70 	.word	0x08027a70

080194cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b082      	sub	sp, #8
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
 80194d4:	460b      	mov	r3, r1
 80194d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80194d8:	78fb      	ldrb	r3, [r7, #3]
 80194da:	461a      	mov	r2, r3
 80194dc:	2103      	movs	r1, #3
 80194de:	6878      	ldr	r0, [r7, #4]
 80194e0:	f000 f814 	bl	801950c <icmp_send_response>
}
 80194e4:	bf00      	nop
 80194e6:	3708      	adds	r7, #8
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bd80      	pop	{r7, pc}

080194ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b082      	sub	sp, #8
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
 80194f4:	460b      	mov	r3, r1
 80194f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80194f8:	78fb      	ldrb	r3, [r7, #3]
 80194fa:	461a      	mov	r2, r3
 80194fc:	210b      	movs	r1, #11
 80194fe:	6878      	ldr	r0, [r7, #4]
 8019500:	f000 f804 	bl	801950c <icmp_send_response>
}
 8019504:	bf00      	nop
 8019506:	3708      	adds	r7, #8
 8019508:	46bd      	mov	sp, r7
 801950a:	bd80      	pop	{r7, pc}

0801950c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b08c      	sub	sp, #48	; 0x30
 8019510:	af04      	add	r7, sp, #16
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	460b      	mov	r3, r1
 8019516:	70fb      	strb	r3, [r7, #3]
 8019518:	4613      	mov	r3, r2
 801951a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801951c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019520:	2124      	movs	r1, #36	; 0x24
 8019522:	2022      	movs	r0, #34	; 0x22
 8019524:	f7f7 fade 	bl	8010ae4 <pbuf_alloc>
 8019528:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d04c      	beq.n	80195ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019530:	69fb      	ldr	r3, [r7, #28]
 8019532:	895b      	ldrh	r3, [r3, #10]
 8019534:	2b23      	cmp	r3, #35	; 0x23
 8019536:	d806      	bhi.n	8019546 <icmp_send_response+0x3a>
 8019538:	4b26      	ldr	r3, [pc, #152]	; (80195d4 <icmp_send_response+0xc8>)
 801953a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801953e:	4926      	ldr	r1, [pc, #152]	; (80195d8 <icmp_send_response+0xcc>)
 8019540:	4826      	ldr	r0, [pc, #152]	; (80195dc <icmp_send_response+0xd0>)
 8019542:	f002 f919 	bl	801b778 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	685b      	ldr	r3, [r3, #4]
 801954a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801954c:	69fb      	ldr	r3, [r7, #28]
 801954e:	685b      	ldr	r3, [r3, #4]
 8019550:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	78fa      	ldrb	r2, [r7, #3]
 8019556:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019558:	697b      	ldr	r3, [r7, #20]
 801955a:	78ba      	ldrb	r2, [r7, #2]
 801955c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	2200      	movs	r2, #0
 8019562:	711a      	strb	r2, [r3, #4]
 8019564:	2200      	movs	r2, #0
 8019566:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019568:	697b      	ldr	r3, [r7, #20]
 801956a:	2200      	movs	r2, #0
 801956c:	719a      	strb	r2, [r3, #6]
 801956e:	2200      	movs	r2, #0
 8019570:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019572:	69fb      	ldr	r3, [r7, #28]
 8019574:	685b      	ldr	r3, [r3, #4]
 8019576:	f103 0008 	add.w	r0, r3, #8
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	685b      	ldr	r3, [r3, #4]
 801957e:	221c      	movs	r2, #28
 8019580:	4619      	mov	r1, r3
 8019582:	f001 fe4b 	bl	801b21c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019586:	69bb      	ldr	r3, [r7, #24]
 8019588:	68db      	ldr	r3, [r3, #12]
 801958a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801958c:	f107 030c 	add.w	r3, r7, #12
 8019590:	4618      	mov	r0, r3
 8019592:	f000 f825 	bl	80195e0 <ip4_route>
 8019596:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019598:	693b      	ldr	r3, [r7, #16]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d011      	beq.n	80195c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801959e:	697b      	ldr	r3, [r7, #20]
 80195a0:	2200      	movs	r2, #0
 80195a2:	709a      	strb	r2, [r3, #2]
 80195a4:	2200      	movs	r2, #0
 80195a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80195a8:	f107 020c 	add.w	r2, r7, #12
 80195ac:	693b      	ldr	r3, [r7, #16]
 80195ae:	9302      	str	r3, [sp, #8]
 80195b0:	2301      	movs	r3, #1
 80195b2:	9301      	str	r3, [sp, #4]
 80195b4:	2300      	movs	r3, #0
 80195b6:	9300      	str	r3, [sp, #0]
 80195b8:	23ff      	movs	r3, #255	; 0xff
 80195ba:	2100      	movs	r1, #0
 80195bc:	69f8      	ldr	r0, [r7, #28]
 80195be:	f000 f9cd 	bl	801995c <ip4_output_if>
  }
  pbuf_free(q);
 80195c2:	69f8      	ldr	r0, [r7, #28]
 80195c4:	f7f7 fd72 	bl	80110ac <pbuf_free>
 80195c8:	e000      	b.n	80195cc <icmp_send_response+0xc0>
    return;
 80195ca:	bf00      	nop
}
 80195cc:	3720      	adds	r7, #32
 80195ce:	46bd      	mov	sp, r7
 80195d0:	bd80      	pop	{r7, pc}
 80195d2:	bf00      	nop
 80195d4:	080279d8 	.word	0x080279d8
 80195d8:	08027aa4 	.word	0x08027aa4
 80195dc:	08027a48 	.word	0x08027a48

080195e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80195e0:	b480      	push	{r7}
 80195e2:	b085      	sub	sp, #20
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80195e8:	4b33      	ldr	r3, [pc, #204]	; (80196b8 <ip4_route+0xd8>)
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	60fb      	str	r3, [r7, #12]
 80195ee:	e036      	b.n	801965e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80195f6:	f003 0301 	and.w	r3, r3, #1
 80195fa:	b2db      	uxtb	r3, r3
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d02b      	beq.n	8019658 <ip4_route+0x78>
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019606:	089b      	lsrs	r3, r3, #2
 8019608:	f003 0301 	and.w	r3, r3, #1
 801960c:	b2db      	uxtb	r3, r3
 801960e:	2b00      	cmp	r3, #0
 8019610:	d022      	beq.n	8019658 <ip4_route+0x78>
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	3304      	adds	r3, #4
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d01d      	beq.n	8019658 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	681a      	ldr	r2, [r3, #0]
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	3304      	adds	r3, #4
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	405a      	eors	r2, r3
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	3308      	adds	r3, #8
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	4013      	ands	r3, r2
 8019630:	2b00      	cmp	r3, #0
 8019632:	d101      	bne.n	8019638 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	e038      	b.n	80196aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801963e:	f003 0302 	and.w	r3, r3, #2
 8019642:	2b00      	cmp	r3, #0
 8019644:	d108      	bne.n	8019658 <ip4_route+0x78>
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	681a      	ldr	r2, [r3, #0]
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	330c      	adds	r3, #12
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	429a      	cmp	r2, r3
 8019652:	d101      	bne.n	8019658 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	e028      	b.n	80196aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	60fb      	str	r3, [r7, #12]
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d1c5      	bne.n	80195f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019664:	4b15      	ldr	r3, [pc, #84]	; (80196bc <ip4_route+0xdc>)
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d01a      	beq.n	80196a2 <ip4_route+0xc2>
 801966c:	4b13      	ldr	r3, [pc, #76]	; (80196bc <ip4_route+0xdc>)
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019674:	f003 0301 	and.w	r3, r3, #1
 8019678:	2b00      	cmp	r3, #0
 801967a:	d012      	beq.n	80196a2 <ip4_route+0xc2>
 801967c:	4b0f      	ldr	r3, [pc, #60]	; (80196bc <ip4_route+0xdc>)
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019684:	f003 0304 	and.w	r3, r3, #4
 8019688:	2b00      	cmp	r3, #0
 801968a:	d00a      	beq.n	80196a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801968c:	4b0b      	ldr	r3, [pc, #44]	; (80196bc <ip4_route+0xdc>)
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	3304      	adds	r3, #4
 8019692:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019694:	2b00      	cmp	r3, #0
 8019696:	d004      	beq.n	80196a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	b2db      	uxtb	r3, r3
 801969e:	2b7f      	cmp	r3, #127	; 0x7f
 80196a0:	d101      	bne.n	80196a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80196a2:	2300      	movs	r3, #0
 80196a4:	e001      	b.n	80196aa <ip4_route+0xca>
  }

  return netif_default;
 80196a6:	4b05      	ldr	r3, [pc, #20]	; (80196bc <ip4_route+0xdc>)
 80196a8:	681b      	ldr	r3, [r3, #0]
}
 80196aa:	4618      	mov	r0, r3
 80196ac:	3714      	adds	r7, #20
 80196ae:	46bd      	mov	sp, r7
 80196b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b4:	4770      	bx	lr
 80196b6:	bf00      	nop
 80196b8:	2000be30 	.word	0x2000be30
 80196bc:	2000be34 	.word	0x2000be34

080196c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b082      	sub	sp, #8
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80196ce:	f003 0301 	and.w	r3, r3, #1
 80196d2:	b2db      	uxtb	r3, r3
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d016      	beq.n	8019706 <ip4_input_accept+0x46>
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	3304      	adds	r3, #4
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d011      	beq.n	8019706 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80196e2:	4b0b      	ldr	r3, [pc, #44]	; (8019710 <ip4_input_accept+0x50>)
 80196e4:	695a      	ldr	r2, [r3, #20]
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	3304      	adds	r3, #4
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	429a      	cmp	r2, r3
 80196ee:	d008      	beq.n	8019702 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80196f0:	4b07      	ldr	r3, [pc, #28]	; (8019710 <ip4_input_accept+0x50>)
 80196f2:	695b      	ldr	r3, [r3, #20]
 80196f4:	6879      	ldr	r1, [r7, #4]
 80196f6:	4618      	mov	r0, r3
 80196f8:	f000 fa08 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 80196fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d001      	beq.n	8019706 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019702:	2301      	movs	r3, #1
 8019704:	e000      	b.n	8019708 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019706:	2300      	movs	r3, #0
}
 8019708:	4618      	mov	r0, r3
 801970a:	3708      	adds	r7, #8
 801970c:	46bd      	mov	sp, r7
 801970e:	bd80      	pop	{r7, pc}
 8019710:	2000872c 	.word	0x2000872c

08019714 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b086      	sub	sp, #24
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
 801971c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	685b      	ldr	r3, [r3, #4]
 8019722:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019724:	697b      	ldr	r3, [r7, #20]
 8019726:	781b      	ldrb	r3, [r3, #0]
 8019728:	091b      	lsrs	r3, r3, #4
 801972a:	b2db      	uxtb	r3, r3
 801972c:	2b04      	cmp	r3, #4
 801972e:	d004      	beq.n	801973a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f7f7 fcbb 	bl	80110ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019736:	2300      	movs	r3, #0
 8019738:	e107      	b.n	801994a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	781b      	ldrb	r3, [r3, #0]
 801973e:	f003 030f 	and.w	r3, r3, #15
 8019742:	b2db      	uxtb	r3, r3
 8019744:	009b      	lsls	r3, r3, #2
 8019746:	b2db      	uxtb	r3, r3
 8019748:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801974a:	697b      	ldr	r3, [r7, #20]
 801974c:	885b      	ldrh	r3, [r3, #2]
 801974e:	b29b      	uxth	r3, r3
 8019750:	4618      	mov	r0, r3
 8019752:	f7f6 f919 	bl	800f988 <lwip_htons>
 8019756:	4603      	mov	r3, r0
 8019758:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	891b      	ldrh	r3, [r3, #8]
 801975e:	89ba      	ldrh	r2, [r7, #12]
 8019760:	429a      	cmp	r2, r3
 8019762:	d204      	bcs.n	801976e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019764:	89bb      	ldrh	r3, [r7, #12]
 8019766:	4619      	mov	r1, r3
 8019768:	6878      	ldr	r0, [r7, #4]
 801976a:	f7f7 fb19 	bl	8010da0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	895b      	ldrh	r3, [r3, #10]
 8019772:	89fa      	ldrh	r2, [r7, #14]
 8019774:	429a      	cmp	r2, r3
 8019776:	d807      	bhi.n	8019788 <ip4_input+0x74>
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	891b      	ldrh	r3, [r3, #8]
 801977c:	89ba      	ldrh	r2, [r7, #12]
 801977e:	429a      	cmp	r2, r3
 8019780:	d802      	bhi.n	8019788 <ip4_input+0x74>
 8019782:	89fb      	ldrh	r3, [r7, #14]
 8019784:	2b13      	cmp	r3, #19
 8019786:	d804      	bhi.n	8019792 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019788:	6878      	ldr	r0, [r7, #4]
 801978a:	f7f7 fc8f 	bl	80110ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801978e:	2300      	movs	r3, #0
 8019790:	e0db      	b.n	801994a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019792:	697b      	ldr	r3, [r7, #20]
 8019794:	691b      	ldr	r3, [r3, #16]
 8019796:	4a6f      	ldr	r2, [pc, #444]	; (8019954 <ip4_input+0x240>)
 8019798:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801979a:	697b      	ldr	r3, [r7, #20]
 801979c:	68db      	ldr	r3, [r3, #12]
 801979e:	4a6d      	ldr	r2, [pc, #436]	; (8019954 <ip4_input+0x240>)
 80197a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80197a2:	4b6c      	ldr	r3, [pc, #432]	; (8019954 <ip4_input+0x240>)
 80197a4:	695b      	ldr	r3, [r3, #20]
 80197a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80197aa:	2be0      	cmp	r3, #224	; 0xe0
 80197ac:	d112      	bne.n	80197d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197b4:	f003 0301 	and.w	r3, r3, #1
 80197b8:	b2db      	uxtb	r3, r3
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d007      	beq.n	80197ce <ip4_input+0xba>
 80197be:	683b      	ldr	r3, [r7, #0]
 80197c0:	3304      	adds	r3, #4
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d002      	beq.n	80197ce <ip4_input+0xba>
      netif = inp;
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	613b      	str	r3, [r7, #16]
 80197cc:	e02a      	b.n	8019824 <ip4_input+0x110>
    } else {
      netif = NULL;
 80197ce:	2300      	movs	r3, #0
 80197d0:	613b      	str	r3, [r7, #16]
 80197d2:	e027      	b.n	8019824 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80197d4:	6838      	ldr	r0, [r7, #0]
 80197d6:	f7ff ff73 	bl	80196c0 <ip4_input_accept>
 80197da:	4603      	mov	r3, r0
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d002      	beq.n	80197e6 <ip4_input+0xd2>
      netif = inp;
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	613b      	str	r3, [r7, #16]
 80197e4:	e01e      	b.n	8019824 <ip4_input+0x110>
    } else {
      netif = NULL;
 80197e6:	2300      	movs	r3, #0
 80197e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80197ea:	4b5a      	ldr	r3, [pc, #360]	; (8019954 <ip4_input+0x240>)
 80197ec:	695b      	ldr	r3, [r3, #20]
 80197ee:	b2db      	uxtb	r3, r3
 80197f0:	2b7f      	cmp	r3, #127	; 0x7f
 80197f2:	d017      	beq.n	8019824 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80197f4:	4b58      	ldr	r3, [pc, #352]	; (8019958 <ip4_input+0x244>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	613b      	str	r3, [r7, #16]
 80197fa:	e00e      	b.n	801981a <ip4_input+0x106>
          if (netif == inp) {
 80197fc:	693a      	ldr	r2, [r7, #16]
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	429a      	cmp	r2, r3
 8019802:	d006      	beq.n	8019812 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019804:	6938      	ldr	r0, [r7, #16]
 8019806:	f7ff ff5b 	bl	80196c0 <ip4_input_accept>
 801980a:	4603      	mov	r3, r0
 801980c:	2b00      	cmp	r3, #0
 801980e:	d108      	bne.n	8019822 <ip4_input+0x10e>
 8019810:	e000      	b.n	8019814 <ip4_input+0x100>
            continue;
 8019812:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019814:	693b      	ldr	r3, [r7, #16]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	613b      	str	r3, [r7, #16]
 801981a:	693b      	ldr	r3, [r7, #16]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d1ed      	bne.n	80197fc <ip4_input+0xe8>
 8019820:	e000      	b.n	8019824 <ip4_input+0x110>
            break;
 8019822:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019824:	4b4b      	ldr	r3, [pc, #300]	; (8019954 <ip4_input+0x240>)
 8019826:	691b      	ldr	r3, [r3, #16]
 8019828:	6839      	ldr	r1, [r7, #0]
 801982a:	4618      	mov	r0, r3
 801982c:	f000 f96e 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 8019830:	4603      	mov	r3, r0
 8019832:	2b00      	cmp	r3, #0
 8019834:	d105      	bne.n	8019842 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019836:	4b47      	ldr	r3, [pc, #284]	; (8019954 <ip4_input+0x240>)
 8019838:	691b      	ldr	r3, [r3, #16]
 801983a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801983e:	2be0      	cmp	r3, #224	; 0xe0
 8019840:	d104      	bne.n	801984c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019842:	6878      	ldr	r0, [r7, #4]
 8019844:	f7f7 fc32 	bl	80110ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019848:	2300      	movs	r3, #0
 801984a:	e07e      	b.n	801994a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801984c:	693b      	ldr	r3, [r7, #16]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d104      	bne.n	801985c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019852:	6878      	ldr	r0, [r7, #4]
 8019854:	f7f7 fc2a 	bl	80110ac <pbuf_free>
    return ERR_OK;
 8019858:	2300      	movs	r3, #0
 801985a:	e076      	b.n	801994a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801985c:	697b      	ldr	r3, [r7, #20]
 801985e:	88db      	ldrh	r3, [r3, #6]
 8019860:	b29b      	uxth	r3, r3
 8019862:	461a      	mov	r2, r3
 8019864:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019868:	4013      	ands	r3, r2
 801986a:	2b00      	cmp	r3, #0
 801986c:	d00b      	beq.n	8019886 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801986e:	6878      	ldr	r0, [r7, #4]
 8019870:	f000 fdbc 	bl	801a3ec <ip4_reass>
 8019874:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d101      	bne.n	8019880 <ip4_input+0x16c>
      return ERR_OK;
 801987c:	2300      	movs	r3, #0
 801987e:	e064      	b.n	801994a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	685b      	ldr	r3, [r3, #4]
 8019884:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019886:	4a33      	ldr	r2, [pc, #204]	; (8019954 <ip4_input+0x240>)
 8019888:	693b      	ldr	r3, [r7, #16]
 801988a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801988c:	4a31      	ldr	r2, [pc, #196]	; (8019954 <ip4_input+0x240>)
 801988e:	683b      	ldr	r3, [r7, #0]
 8019890:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019892:	4a30      	ldr	r2, [pc, #192]	; (8019954 <ip4_input+0x240>)
 8019894:	697b      	ldr	r3, [r7, #20]
 8019896:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019898:	697b      	ldr	r3, [r7, #20]
 801989a:	781b      	ldrb	r3, [r3, #0]
 801989c:	f003 030f 	and.w	r3, r3, #15
 80198a0:	b2db      	uxtb	r3, r3
 80198a2:	009b      	lsls	r3, r3, #2
 80198a4:	b2db      	uxtb	r3, r3
 80198a6:	b29a      	uxth	r2, r3
 80198a8:	4b2a      	ldr	r3, [pc, #168]	; (8019954 <ip4_input+0x240>)
 80198aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80198ac:	89fb      	ldrh	r3, [r7, #14]
 80198ae:	4619      	mov	r1, r3
 80198b0:	6878      	ldr	r0, [r7, #4]
 80198b2:	f7f7 fb75 	bl	8010fa0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80198b6:	697b      	ldr	r3, [r7, #20]
 80198b8:	7a5b      	ldrb	r3, [r3, #9]
 80198ba:	2b11      	cmp	r3, #17
 80198bc:	d006      	beq.n	80198cc <ip4_input+0x1b8>
 80198be:	2b11      	cmp	r3, #17
 80198c0:	dc13      	bgt.n	80198ea <ip4_input+0x1d6>
 80198c2:	2b01      	cmp	r3, #1
 80198c4:	d00c      	beq.n	80198e0 <ip4_input+0x1cc>
 80198c6:	2b06      	cmp	r3, #6
 80198c8:	d005      	beq.n	80198d6 <ip4_input+0x1c2>
 80198ca:	e00e      	b.n	80198ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80198cc:	6839      	ldr	r1, [r7, #0]
 80198ce:	6878      	ldr	r0, [r7, #4]
 80198d0:	f7fe f970 	bl	8017bb4 <udp_input>
        break;
 80198d4:	e026      	b.n	8019924 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80198d6:	6839      	ldr	r1, [r7, #0]
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f7f9 fd2d 	bl	8013338 <tcp_input>
        break;
 80198de:	e021      	b.n	8019924 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80198e0:	6839      	ldr	r1, [r7, #0]
 80198e2:	6878      	ldr	r0, [r7, #4]
 80198e4:	f7ff fcee 	bl	80192c4 <icmp_input>
        break;
 80198e8:	e01c      	b.n	8019924 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80198ea:	4b1a      	ldr	r3, [pc, #104]	; (8019954 <ip4_input+0x240>)
 80198ec:	695b      	ldr	r3, [r3, #20]
 80198ee:	6939      	ldr	r1, [r7, #16]
 80198f0:	4618      	mov	r0, r3
 80198f2:	f000 f90b 	bl	8019b0c <ip4_addr_isbroadcast_u32>
 80198f6:	4603      	mov	r3, r0
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d10f      	bne.n	801991c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80198fc:	4b15      	ldr	r3, [pc, #84]	; (8019954 <ip4_input+0x240>)
 80198fe:	695b      	ldr	r3, [r3, #20]
 8019900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019904:	2be0      	cmp	r3, #224	; 0xe0
 8019906:	d009      	beq.n	801991c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019908:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801990c:	4619      	mov	r1, r3
 801990e:	6878      	ldr	r0, [r7, #4]
 8019910:	f7f7 fbb9 	bl	8011086 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019914:	2102      	movs	r1, #2
 8019916:	6878      	ldr	r0, [r7, #4]
 8019918:	f7ff fdd8 	bl	80194cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801991c:	6878      	ldr	r0, [r7, #4]
 801991e:	f7f7 fbc5 	bl	80110ac <pbuf_free>
        break;
 8019922:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019924:	4b0b      	ldr	r3, [pc, #44]	; (8019954 <ip4_input+0x240>)
 8019926:	2200      	movs	r2, #0
 8019928:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801992a:	4b0a      	ldr	r3, [pc, #40]	; (8019954 <ip4_input+0x240>)
 801992c:	2200      	movs	r2, #0
 801992e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019930:	4b08      	ldr	r3, [pc, #32]	; (8019954 <ip4_input+0x240>)
 8019932:	2200      	movs	r2, #0
 8019934:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019936:	4b07      	ldr	r3, [pc, #28]	; (8019954 <ip4_input+0x240>)
 8019938:	2200      	movs	r2, #0
 801993a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801993c:	4b05      	ldr	r3, [pc, #20]	; (8019954 <ip4_input+0x240>)
 801993e:	2200      	movs	r2, #0
 8019940:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019942:	4b04      	ldr	r3, [pc, #16]	; (8019954 <ip4_input+0x240>)
 8019944:	2200      	movs	r2, #0
 8019946:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019948:	2300      	movs	r3, #0
}
 801994a:	4618      	mov	r0, r3
 801994c:	3718      	adds	r7, #24
 801994e:	46bd      	mov	sp, r7
 8019950:	bd80      	pop	{r7, pc}
 8019952:	bf00      	nop
 8019954:	2000872c 	.word	0x2000872c
 8019958:	2000be30 	.word	0x2000be30

0801995c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b08a      	sub	sp, #40	; 0x28
 8019960:	af04      	add	r7, sp, #16
 8019962:	60f8      	str	r0, [r7, #12]
 8019964:	60b9      	str	r1, [r7, #8]
 8019966:	607a      	str	r2, [r7, #4]
 8019968:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801996a:	68bb      	ldr	r3, [r7, #8]
 801996c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d009      	beq.n	8019988 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019974:	68bb      	ldr	r3, [r7, #8]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d003      	beq.n	8019982 <ip4_output_if+0x26>
 801997a:	68bb      	ldr	r3, [r7, #8]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d102      	bne.n	8019988 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019984:	3304      	adds	r3, #4
 8019986:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019988:	78fa      	ldrb	r2, [r7, #3]
 801998a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801998c:	9302      	str	r3, [sp, #8]
 801998e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019992:	9301      	str	r3, [sp, #4]
 8019994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019998:	9300      	str	r3, [sp, #0]
 801999a:	4613      	mov	r3, r2
 801999c:	687a      	ldr	r2, [r7, #4]
 801999e:	6979      	ldr	r1, [r7, #20]
 80199a0:	68f8      	ldr	r0, [r7, #12]
 80199a2:	f000 f805 	bl	80199b0 <ip4_output_if_src>
 80199a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80199a8:	4618      	mov	r0, r3
 80199aa:	3718      	adds	r7, #24
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bd80      	pop	{r7, pc}

080199b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b088      	sub	sp, #32
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	60f8      	str	r0, [r7, #12]
 80199b8:	60b9      	str	r1, [r7, #8]
 80199ba:	607a      	str	r2, [r7, #4]
 80199bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	7b9b      	ldrb	r3, [r3, #14]
 80199c2:	2b01      	cmp	r3, #1
 80199c4:	d006      	beq.n	80199d4 <ip4_output_if_src+0x24>
 80199c6:	4b4b      	ldr	r3, [pc, #300]	; (8019af4 <ip4_output_if_src+0x144>)
 80199c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80199cc:	494a      	ldr	r1, [pc, #296]	; (8019af8 <ip4_output_if_src+0x148>)
 80199ce:	484b      	ldr	r0, [pc, #300]	; (8019afc <ip4_output_if_src+0x14c>)
 80199d0:	f001 fed2 	bl	801b778 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d060      	beq.n	8019a9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80199da:	2314      	movs	r3, #20
 80199dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80199de:	2114      	movs	r1, #20
 80199e0:	68f8      	ldr	r0, [r7, #12]
 80199e2:	f7f7 facd 	bl	8010f80 <pbuf_add_header>
 80199e6:	4603      	mov	r3, r0
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d002      	beq.n	80199f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80199ec:	f06f 0301 	mvn.w	r3, #1
 80199f0:	e07c      	b.n	8019aec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	685b      	ldr	r3, [r3, #4]
 80199f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	895b      	ldrh	r3, [r3, #10]
 80199fc:	2b13      	cmp	r3, #19
 80199fe:	d806      	bhi.n	8019a0e <ip4_output_if_src+0x5e>
 8019a00:	4b3c      	ldr	r3, [pc, #240]	; (8019af4 <ip4_output_if_src+0x144>)
 8019a02:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019a06:	493e      	ldr	r1, [pc, #248]	; (8019b00 <ip4_output_if_src+0x150>)
 8019a08:	483c      	ldr	r0, [pc, #240]	; (8019afc <ip4_output_if_src+0x14c>)
 8019a0a:	f001 feb5 	bl	801b778 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019a0e:	69fb      	ldr	r3, [r7, #28]
 8019a10:	78fa      	ldrb	r2, [r7, #3]
 8019a12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019a14:	69fb      	ldr	r3, [r7, #28]
 8019a16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019a1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	681a      	ldr	r2, [r3, #0]
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019a24:	8b7b      	ldrh	r3, [r7, #26]
 8019a26:	089b      	lsrs	r3, r3, #2
 8019a28:	b29b      	uxth	r3, r3
 8019a2a:	b2db      	uxtb	r3, r3
 8019a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a30:	b2da      	uxtb	r2, r3
 8019a32:	69fb      	ldr	r3, [r7, #28]
 8019a34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019a36:	69fb      	ldr	r3, [r7, #28]
 8019a38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019a3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	891b      	ldrh	r3, [r3, #8]
 8019a42:	4618      	mov	r0, r3
 8019a44:	f7f5 ffa0 	bl	800f988 <lwip_htons>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	69fb      	ldr	r3, [r7, #28]
 8019a4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019a50:	69fb      	ldr	r3, [r7, #28]
 8019a52:	2200      	movs	r2, #0
 8019a54:	719a      	strb	r2, [r3, #6]
 8019a56:	2200      	movs	r2, #0
 8019a58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019a5a:	4b2a      	ldr	r3, [pc, #168]	; (8019b04 <ip4_output_if_src+0x154>)
 8019a5c:	881b      	ldrh	r3, [r3, #0]
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f7f5 ff92 	bl	800f988 <lwip_htons>
 8019a64:	4603      	mov	r3, r0
 8019a66:	461a      	mov	r2, r3
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019a6c:	4b25      	ldr	r3, [pc, #148]	; (8019b04 <ip4_output_if_src+0x154>)
 8019a6e:	881b      	ldrh	r3, [r3, #0]
 8019a70:	3301      	adds	r3, #1
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	4b23      	ldr	r3, [pc, #140]	; (8019b04 <ip4_output_if_src+0x154>)
 8019a76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d104      	bne.n	8019a88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019a7e:	4b22      	ldr	r3, [pc, #136]	; (8019b08 <ip4_output_if_src+0x158>)
 8019a80:	681a      	ldr	r2, [r3, #0]
 8019a82:	69fb      	ldr	r3, [r7, #28]
 8019a84:	60da      	str	r2, [r3, #12]
 8019a86:	e003      	b.n	8019a90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	681a      	ldr	r2, [r3, #0]
 8019a8c:	69fb      	ldr	r3, [r7, #28]
 8019a8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019a90:	69fb      	ldr	r3, [r7, #28]
 8019a92:	2200      	movs	r2, #0
 8019a94:	729a      	strb	r2, [r3, #10]
 8019a96:	2200      	movs	r2, #0
 8019a98:	72da      	strb	r2, [r3, #11]
 8019a9a:	e00f      	b.n	8019abc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	895b      	ldrh	r3, [r3, #10]
 8019aa0:	2b13      	cmp	r3, #19
 8019aa2:	d802      	bhi.n	8019aaa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019aa4:	f06f 0301 	mvn.w	r3, #1
 8019aa8:	e020      	b.n	8019aec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019ab0:	69fb      	ldr	r3, [r7, #28]
 8019ab2:	691b      	ldr	r3, [r3, #16]
 8019ab4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019ab6:	f107 0314 	add.w	r3, r7, #20
 8019aba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019abe:	8c1b      	ldrh	r3, [r3, #32]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d00c      	beq.n	8019ade <ip4_output_if_src+0x12e>
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	891a      	ldrh	r2, [r3, #8]
 8019ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aca:	8c1b      	ldrh	r3, [r3, #32]
 8019acc:	429a      	cmp	r2, r3
 8019ace:	d906      	bls.n	8019ade <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019ad0:	687a      	ldr	r2, [r7, #4]
 8019ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019ad4:	68f8      	ldr	r0, [r7, #12]
 8019ad6:	f000 fe77 	bl	801a7c8 <ip4_frag>
 8019ada:	4603      	mov	r3, r0
 8019adc:	e006      	b.n	8019aec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ae0:	695b      	ldr	r3, [r3, #20]
 8019ae2:	687a      	ldr	r2, [r7, #4]
 8019ae4:	68f9      	ldr	r1, [r7, #12]
 8019ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019ae8:	4798      	blx	r3
 8019aea:	4603      	mov	r3, r0
}
 8019aec:	4618      	mov	r0, r3
 8019aee:	3720      	adds	r7, #32
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}
 8019af4:	08027ad0 	.word	0x08027ad0
 8019af8:	08027b04 	.word	0x08027b04
 8019afc:	08027b10 	.word	0x08027b10
 8019b00:	08027b38 	.word	0x08027b38
 8019b04:	2000503a 	.word	0x2000503a
 8019b08:	080296d4 	.word	0x080296d4

08019b0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019b0c:	b480      	push	{r7}
 8019b0e:	b085      	sub	sp, #20
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
 8019b14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b20:	d002      	beq.n	8019b28 <ip4_addr_isbroadcast_u32+0x1c>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d101      	bne.n	8019b2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019b28:	2301      	movs	r3, #1
 8019b2a:	e02a      	b.n	8019b82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019b2c:	683b      	ldr	r3, [r7, #0]
 8019b2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019b32:	f003 0302 	and.w	r3, r3, #2
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d101      	bne.n	8019b3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	e021      	b.n	8019b82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	3304      	adds	r3, #4
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	687a      	ldr	r2, [r7, #4]
 8019b46:	429a      	cmp	r2, r3
 8019b48:	d101      	bne.n	8019b4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019b4a:	2300      	movs	r3, #0
 8019b4c:	e019      	b.n	8019b82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019b4e:	68fa      	ldr	r2, [r7, #12]
 8019b50:	683b      	ldr	r3, [r7, #0]
 8019b52:	3304      	adds	r3, #4
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	405a      	eors	r2, r3
 8019b58:	683b      	ldr	r3, [r7, #0]
 8019b5a:	3308      	adds	r3, #8
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	4013      	ands	r3, r2
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d10d      	bne.n	8019b80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	3308      	adds	r3, #8
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	43da      	mvns	r2, r3
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019b70:	683b      	ldr	r3, [r7, #0]
 8019b72:	3308      	adds	r3, #8
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019b78:	429a      	cmp	r2, r3
 8019b7a:	d101      	bne.n	8019b80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019b7c:	2301      	movs	r3, #1
 8019b7e:	e000      	b.n	8019b82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019b80:	2300      	movs	r3, #0
  }
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3714      	adds	r7, #20
 8019b86:	46bd      	mov	sp, r7
 8019b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b8c:	4770      	bx	lr
	...

08019b90 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b08a      	sub	sp, #40	; 0x28
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
 8019b98:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8019b9a:	f107 030c 	add.w	r3, r7, #12
 8019b9e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	781b      	ldrb	r3, [r3, #0]
 8019ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8019ba8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019bac:	3301      	adds	r3, #1
 8019bae:	4a89      	ldr	r2, [pc, #548]	; (8019dd4 <ip4addr_aton+0x244>)
 8019bb0:	4413      	add	r3, r2
 8019bb2:	781b      	ldrb	r3, [r3, #0]
 8019bb4:	f003 0304 	and.w	r3, r3, #4
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d101      	bne.n	8019bc0 <ip4addr_aton+0x30>
      return 0;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	e105      	b.n	8019dcc <ip4addr_aton+0x23c>
    }
    val = 0;
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8019bc4:	230a      	movs	r3, #10
 8019bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8019bca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019bce:	2b30      	cmp	r3, #48	; 0x30
 8019bd0:	d11c      	bne.n	8019c0c <ip4addr_aton+0x7c>
      c = *++cp;
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	3301      	adds	r3, #1
 8019bd6:	607b      	str	r3, [r7, #4]
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	781b      	ldrb	r3, [r3, #0]
 8019bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8019be0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019be4:	2b78      	cmp	r3, #120	; 0x78
 8019be6:	d003      	beq.n	8019bf0 <ip4addr_aton+0x60>
 8019be8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019bec:	2b58      	cmp	r3, #88	; 0x58
 8019bee:	d10a      	bne.n	8019c06 <ip4addr_aton+0x76>
        base = 16;
 8019bf0:	2310      	movs	r3, #16
 8019bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	3301      	adds	r3, #1
 8019bfa:	607b      	str	r3, [r7, #4]
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	781b      	ldrb	r3, [r3, #0]
 8019c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019c04:	e002      	b.n	8019c0c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8019c06:	2308      	movs	r3, #8
 8019c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8019c0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019c10:	3301      	adds	r3, #1
 8019c12:	4a70      	ldr	r2, [pc, #448]	; (8019dd4 <ip4addr_aton+0x244>)
 8019c14:	4413      	add	r3, r2
 8019c16:	781b      	ldrb	r3, [r3, #0]
 8019c18:	f003 0304 	and.w	r3, r3, #4
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d011      	beq.n	8019c44 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8019c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c26:	fb02 f203 	mul.w	r2, r2, r3
 8019c2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019c2e:	4413      	add	r3, r2
 8019c30:	3b30      	subs	r3, #48	; 0x30
 8019c32:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	3301      	adds	r3, #1
 8019c38:	607b      	str	r3, [r7, #4]
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019c42:	e7e3      	b.n	8019c0c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8019c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c48:	2b10      	cmp	r3, #16
 8019c4a:	d127      	bne.n	8019c9c <ip4addr_aton+0x10c>
 8019c4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019c50:	3301      	adds	r3, #1
 8019c52:	4a60      	ldr	r2, [pc, #384]	; (8019dd4 <ip4addr_aton+0x244>)
 8019c54:	4413      	add	r3, r2
 8019c56:	781b      	ldrb	r3, [r3, #0]
 8019c58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d01d      	beq.n	8019c9c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8019c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c62:	011b      	lsls	r3, r3, #4
 8019c64:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019c68:	f102 010a 	add.w	r1, r2, #10
 8019c6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019c70:	3201      	adds	r2, #1
 8019c72:	4858      	ldr	r0, [pc, #352]	; (8019dd4 <ip4addr_aton+0x244>)
 8019c74:	4402      	add	r2, r0
 8019c76:	7812      	ldrb	r2, [r2, #0]
 8019c78:	f002 0203 	and.w	r2, r2, #3
 8019c7c:	2a02      	cmp	r2, #2
 8019c7e:	d101      	bne.n	8019c84 <ip4addr_aton+0xf4>
 8019c80:	2261      	movs	r2, #97	; 0x61
 8019c82:	e000      	b.n	8019c86 <ip4addr_aton+0xf6>
 8019c84:	2241      	movs	r2, #65	; 0x41
 8019c86:	1a8a      	subs	r2, r1, r2
 8019c88:	4313      	orrs	r3, r2
 8019c8a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	3301      	adds	r3, #1
 8019c90:	607b      	str	r3, [r7, #4]
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8019c9a:	e7b7      	b.n	8019c0c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8019c9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019ca0:	2b2e      	cmp	r3, #46	; 0x2e
 8019ca2:	d114      	bne.n	8019cce <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8019ca4:	f107 030c 	add.w	r3, r7, #12
 8019ca8:	330c      	adds	r3, #12
 8019caa:	69fa      	ldr	r2, [r7, #28]
 8019cac:	429a      	cmp	r2, r3
 8019cae:	d301      	bcc.n	8019cb4 <ip4addr_aton+0x124>
        return 0;
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	e08b      	b.n	8019dcc <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8019cb4:	69fb      	ldr	r3, [r7, #28]
 8019cb6:	1d1a      	adds	r2, r3, #4
 8019cb8:	61fa      	str	r2, [r7, #28]
 8019cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cbc:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	3301      	adds	r3, #1
 8019cc2:	607b      	str	r3, [r7, #4]
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	781b      	ldrb	r3, [r3, #0]
 8019cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8019ccc:	e76c      	b.n	8019ba8 <ip4addr_aton+0x18>
    } else {
      break;
 8019cce:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8019cd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d00b      	beq.n	8019cf0 <ip4addr_aton+0x160>
 8019cd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019cdc:	3301      	adds	r3, #1
 8019cde:	4a3d      	ldr	r2, [pc, #244]	; (8019dd4 <ip4addr_aton+0x244>)
 8019ce0:	4413      	add	r3, r2
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	f003 0308 	and.w	r3, r3, #8
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d101      	bne.n	8019cf0 <ip4addr_aton+0x160>
    return 0;
 8019cec:	2300      	movs	r3, #0
 8019cee:	e06d      	b.n	8019dcc <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8019cf0:	f107 030c 	add.w	r3, r7, #12
 8019cf4:	69fa      	ldr	r2, [r7, #28]
 8019cf6:	1ad3      	subs	r3, r2, r3
 8019cf8:	109b      	asrs	r3, r3, #2
 8019cfa:	3301      	adds	r3, #1
 8019cfc:	2b04      	cmp	r3, #4
 8019cfe:	d853      	bhi.n	8019da8 <ip4addr_aton+0x218>
 8019d00:	a201      	add	r2, pc, #4	; (adr r2, 8019d08 <ip4addr_aton+0x178>)
 8019d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d06:	bf00      	nop
 8019d08:	08019d1d 	.word	0x08019d1d
 8019d0c:	08019db7 	.word	0x08019db7
 8019d10:	08019d21 	.word	0x08019d21
 8019d14:	08019d43 	.word	0x08019d43
 8019d18:	08019d71 	.word	0x08019d71

    case 0:
      return 0;       /* initial nondigit */
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	e055      	b.n	8019dcc <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8019d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019d26:	d301      	bcc.n	8019d2c <ip4addr_aton+0x19c>
        return 0;
 8019d28:	2300      	movs	r3, #0
 8019d2a:	e04f      	b.n	8019dcc <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	2bff      	cmp	r3, #255	; 0xff
 8019d30:	d901      	bls.n	8019d36 <ip4addr_aton+0x1a6>
        return 0;
 8019d32:	2300      	movs	r3, #0
 8019d34:	e04a      	b.n	8019dcc <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	061b      	lsls	r3, r3, #24
 8019d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d3c:	4313      	orrs	r3, r2
 8019d3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019d40:	e03a      	b.n	8019db8 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8019d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019d48:	d301      	bcc.n	8019d4e <ip4addr_aton+0x1be>
        return 0;
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	e03e      	b.n	8019dcc <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	2bff      	cmp	r3, #255	; 0xff
 8019d52:	d802      	bhi.n	8019d5a <ip4addr_aton+0x1ca>
 8019d54:	693b      	ldr	r3, [r7, #16]
 8019d56:	2bff      	cmp	r3, #255	; 0xff
 8019d58:	d901      	bls.n	8019d5e <ip4addr_aton+0x1ce>
        return 0;
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	e036      	b.n	8019dcc <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	061a      	lsls	r2, r3, #24
 8019d62:	693b      	ldr	r3, [r7, #16]
 8019d64:	041b      	lsls	r3, r3, #16
 8019d66:	4313      	orrs	r3, r2
 8019d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d6a:	4313      	orrs	r3, r2
 8019d6c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019d6e:	e023      	b.n	8019db8 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8019d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d72:	2bff      	cmp	r3, #255	; 0xff
 8019d74:	d901      	bls.n	8019d7a <ip4addr_aton+0x1ea>
        return 0;
 8019d76:	2300      	movs	r3, #0
 8019d78:	e028      	b.n	8019dcc <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	2bff      	cmp	r3, #255	; 0xff
 8019d7e:	d805      	bhi.n	8019d8c <ip4addr_aton+0x1fc>
 8019d80:	693b      	ldr	r3, [r7, #16]
 8019d82:	2bff      	cmp	r3, #255	; 0xff
 8019d84:	d802      	bhi.n	8019d8c <ip4addr_aton+0x1fc>
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	2bff      	cmp	r3, #255	; 0xff
 8019d8a:	d901      	bls.n	8019d90 <ip4addr_aton+0x200>
        return 0;
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	e01d      	b.n	8019dcc <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	061a      	lsls	r2, r3, #24
 8019d94:	693b      	ldr	r3, [r7, #16]
 8019d96:	041b      	lsls	r3, r3, #16
 8019d98:	431a      	orrs	r2, r3
 8019d9a:	697b      	ldr	r3, [r7, #20]
 8019d9c:	021b      	lsls	r3, r3, #8
 8019d9e:	4313      	orrs	r3, r2
 8019da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019da2:	4313      	orrs	r3, r2
 8019da4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019da6:	e007      	b.n	8019db8 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8019da8:	4b0b      	ldr	r3, [pc, #44]	; (8019dd8 <ip4addr_aton+0x248>)
 8019daa:	22f9      	movs	r2, #249	; 0xf9
 8019dac:	490b      	ldr	r1, [pc, #44]	; (8019ddc <ip4addr_aton+0x24c>)
 8019dae:	480c      	ldr	r0, [pc, #48]	; (8019de0 <ip4addr_aton+0x250>)
 8019db0:	f001 fce2 	bl	801b778 <printf>
      break;
 8019db4:	e000      	b.n	8019db8 <ip4addr_aton+0x228>
      break;
 8019db6:	bf00      	nop
  }
  if (addr) {
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d005      	beq.n	8019dca <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8019dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dc0:	f7f5 fdf7 	bl	800f9b2 <lwip_htonl>
 8019dc4:	4602      	mov	r2, r0
 8019dc6:	683b      	ldr	r3, [r7, #0]
 8019dc8:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8019dca:	2301      	movs	r3, #1
}
 8019dcc:	4618      	mov	r0, r3
 8019dce:	3728      	adds	r7, #40	; 0x28
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}
 8019dd4:	080296f0 	.word	0x080296f0
 8019dd8:	08027b68 	.word	0x08027b68
 8019ddc:	08027ba4 	.word	0x08027ba4
 8019de0:	08027bb0 	.word	0x08027bb0

08019de4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b084      	sub	sp, #16
 8019de8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019dea:	2300      	movs	r3, #0
 8019dec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019dee:	4b12      	ldr	r3, [pc, #72]	; (8019e38 <ip_reass_tmr+0x54>)
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019df4:	e018      	b.n	8019e28 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	7fdb      	ldrb	r3, [r3, #31]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d00b      	beq.n	8019e16 <ip_reass_tmr+0x32>
      r->timer--;
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	7fdb      	ldrb	r3, [r3, #31]
 8019e02:	3b01      	subs	r3, #1
 8019e04:	b2da      	uxtb	r2, r3
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	60fb      	str	r3, [r7, #12]
 8019e14:	e008      	b.n	8019e28 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019e20:	68b9      	ldr	r1, [r7, #8]
 8019e22:	6878      	ldr	r0, [r7, #4]
 8019e24:	f000 f80a 	bl	8019e3c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d1e3      	bne.n	8019df6 <ip_reass_tmr+0x12>
    }
  }
}
 8019e2e:	bf00      	nop
 8019e30:	bf00      	nop
 8019e32:	3710      	adds	r7, #16
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}
 8019e38:	2000503c 	.word	0x2000503c

08019e3c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	b088      	sub	sp, #32
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
 8019e44:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019e46:	2300      	movs	r3, #0
 8019e48:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019e4a:	683a      	ldr	r2, [r7, #0]
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d105      	bne.n	8019e5e <ip_reass_free_complete_datagram+0x22>
 8019e52:	4b45      	ldr	r3, [pc, #276]	; (8019f68 <ip_reass_free_complete_datagram+0x12c>)
 8019e54:	22ab      	movs	r2, #171	; 0xab
 8019e56:	4945      	ldr	r1, [pc, #276]	; (8019f6c <ip_reass_free_complete_datagram+0x130>)
 8019e58:	4845      	ldr	r0, [pc, #276]	; (8019f70 <ip_reass_free_complete_datagram+0x134>)
 8019e5a:	f001 fc8d 	bl	801b778 <printf>
  if (prev != NULL) {
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d00a      	beq.n	8019e7a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019e64:	683b      	ldr	r3, [r7, #0]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	687a      	ldr	r2, [r7, #4]
 8019e6a:	429a      	cmp	r2, r3
 8019e6c:	d005      	beq.n	8019e7a <ip_reass_free_complete_datagram+0x3e>
 8019e6e:	4b3e      	ldr	r3, [pc, #248]	; (8019f68 <ip_reass_free_complete_datagram+0x12c>)
 8019e70:	22ad      	movs	r2, #173	; 0xad
 8019e72:	4940      	ldr	r1, [pc, #256]	; (8019f74 <ip_reass_free_complete_datagram+0x138>)
 8019e74:	483e      	ldr	r0, [pc, #248]	; (8019f70 <ip_reass_free_complete_datagram+0x134>)
 8019e76:	f001 fc7f 	bl	801b778 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	685b      	ldr	r3, [r3, #4]
 8019e7e:	685b      	ldr	r3, [r3, #4]
 8019e80:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019e82:	697b      	ldr	r3, [r7, #20]
 8019e84:	889b      	ldrh	r3, [r3, #4]
 8019e86:	b29b      	uxth	r3, r3
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d12a      	bne.n	8019ee2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	685b      	ldr	r3, [r3, #4]
 8019e90:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019e92:	697b      	ldr	r3, [r7, #20]
 8019e94:	681a      	ldr	r2, [r3, #0]
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019e9a:	69bb      	ldr	r3, [r7, #24]
 8019e9c:	6858      	ldr	r0, [r3, #4]
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	3308      	adds	r3, #8
 8019ea2:	2214      	movs	r2, #20
 8019ea4:	4619      	mov	r1, r3
 8019ea6:	f001 f9b9 	bl	801b21c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019eaa:	2101      	movs	r1, #1
 8019eac:	69b8      	ldr	r0, [r7, #24]
 8019eae:	f7ff fb1d 	bl	80194ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019eb2:	69b8      	ldr	r0, [r7, #24]
 8019eb4:	f7f7 f988 	bl	80111c8 <pbuf_clen>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019ebc:	8bfa      	ldrh	r2, [r7, #30]
 8019ebe:	8a7b      	ldrh	r3, [r7, #18]
 8019ec0:	4413      	add	r3, r2
 8019ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019ec6:	db05      	blt.n	8019ed4 <ip_reass_free_complete_datagram+0x98>
 8019ec8:	4b27      	ldr	r3, [pc, #156]	; (8019f68 <ip_reass_free_complete_datagram+0x12c>)
 8019eca:	22bc      	movs	r2, #188	; 0xbc
 8019ecc:	492a      	ldr	r1, [pc, #168]	; (8019f78 <ip_reass_free_complete_datagram+0x13c>)
 8019ece:	4828      	ldr	r0, [pc, #160]	; (8019f70 <ip_reass_free_complete_datagram+0x134>)
 8019ed0:	f001 fc52 	bl	801b778 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019ed4:	8bfa      	ldrh	r2, [r7, #30]
 8019ed6:	8a7b      	ldrh	r3, [r7, #18]
 8019ed8:	4413      	add	r3, r2
 8019eda:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019edc:	69b8      	ldr	r0, [r7, #24]
 8019ede:	f7f7 f8e5 	bl	80110ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	685b      	ldr	r3, [r3, #4]
 8019ee6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019ee8:	e01f      	b.n	8019f2a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019eea:	69bb      	ldr	r3, [r7, #24]
 8019eec:	685b      	ldr	r3, [r3, #4]
 8019eee:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019ef0:	69bb      	ldr	r3, [r7, #24]
 8019ef2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019ef4:	697b      	ldr	r3, [r7, #20]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019efa:	68f8      	ldr	r0, [r7, #12]
 8019efc:	f7f7 f964 	bl	80111c8 <pbuf_clen>
 8019f00:	4603      	mov	r3, r0
 8019f02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019f04:	8bfa      	ldrh	r2, [r7, #30]
 8019f06:	8a7b      	ldrh	r3, [r7, #18]
 8019f08:	4413      	add	r3, r2
 8019f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019f0e:	db05      	blt.n	8019f1c <ip_reass_free_complete_datagram+0xe0>
 8019f10:	4b15      	ldr	r3, [pc, #84]	; (8019f68 <ip_reass_free_complete_datagram+0x12c>)
 8019f12:	22cc      	movs	r2, #204	; 0xcc
 8019f14:	4918      	ldr	r1, [pc, #96]	; (8019f78 <ip_reass_free_complete_datagram+0x13c>)
 8019f16:	4816      	ldr	r0, [pc, #88]	; (8019f70 <ip_reass_free_complete_datagram+0x134>)
 8019f18:	f001 fc2e 	bl	801b778 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019f1c:	8bfa      	ldrh	r2, [r7, #30]
 8019f1e:	8a7b      	ldrh	r3, [r7, #18]
 8019f20:	4413      	add	r3, r2
 8019f22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019f24:	68f8      	ldr	r0, [r7, #12]
 8019f26:	f7f7 f8c1 	bl	80110ac <pbuf_free>
  while (p != NULL) {
 8019f2a:	69bb      	ldr	r3, [r7, #24]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d1dc      	bne.n	8019eea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019f30:	6839      	ldr	r1, [r7, #0]
 8019f32:	6878      	ldr	r0, [r7, #4]
 8019f34:	f000 f8c2 	bl	801a0bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019f38:	4b10      	ldr	r3, [pc, #64]	; (8019f7c <ip_reass_free_complete_datagram+0x140>)
 8019f3a:	881b      	ldrh	r3, [r3, #0]
 8019f3c:	8bfa      	ldrh	r2, [r7, #30]
 8019f3e:	429a      	cmp	r2, r3
 8019f40:	d905      	bls.n	8019f4e <ip_reass_free_complete_datagram+0x112>
 8019f42:	4b09      	ldr	r3, [pc, #36]	; (8019f68 <ip_reass_free_complete_datagram+0x12c>)
 8019f44:	22d2      	movs	r2, #210	; 0xd2
 8019f46:	490e      	ldr	r1, [pc, #56]	; (8019f80 <ip_reass_free_complete_datagram+0x144>)
 8019f48:	4809      	ldr	r0, [pc, #36]	; (8019f70 <ip_reass_free_complete_datagram+0x134>)
 8019f4a:	f001 fc15 	bl	801b778 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019f4e:	4b0b      	ldr	r3, [pc, #44]	; (8019f7c <ip_reass_free_complete_datagram+0x140>)
 8019f50:	881a      	ldrh	r2, [r3, #0]
 8019f52:	8bfb      	ldrh	r3, [r7, #30]
 8019f54:	1ad3      	subs	r3, r2, r3
 8019f56:	b29a      	uxth	r2, r3
 8019f58:	4b08      	ldr	r3, [pc, #32]	; (8019f7c <ip_reass_free_complete_datagram+0x140>)
 8019f5a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019f5c:	8bfb      	ldrh	r3, [r7, #30]
}
 8019f5e:	4618      	mov	r0, r3
 8019f60:	3720      	adds	r7, #32
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}
 8019f66:	bf00      	nop
 8019f68:	08027bd8 	.word	0x08027bd8
 8019f6c:	08027c14 	.word	0x08027c14
 8019f70:	08027c20 	.word	0x08027c20
 8019f74:	08027c48 	.word	0x08027c48
 8019f78:	08027c5c 	.word	0x08027c5c
 8019f7c:	20005040 	.word	0x20005040
 8019f80:	08027c7c 	.word	0x08027c7c

08019f84 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b08a      	sub	sp, #40	; 0x28
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
 8019f8c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019f8e:	2300      	movs	r3, #0
 8019f90:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019f92:	2300      	movs	r3, #0
 8019f94:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019f96:	2300      	movs	r3, #0
 8019f98:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019fa2:	4b28      	ldr	r3, [pc, #160]	; (801a044 <ip_reass_remove_oldest_datagram+0xc0>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019fa8:	e030      	b.n	801a00c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fac:	695a      	ldr	r2, [r3, #20]
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	68db      	ldr	r3, [r3, #12]
 8019fb2:	429a      	cmp	r2, r3
 8019fb4:	d10c      	bne.n	8019fd0 <ip_reass_remove_oldest_datagram+0x4c>
 8019fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb8:	699a      	ldr	r2, [r3, #24]
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	691b      	ldr	r3, [r3, #16]
 8019fbe:	429a      	cmp	r2, r3
 8019fc0:	d106      	bne.n	8019fd0 <ip_reass_remove_oldest_datagram+0x4c>
 8019fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc4:	899a      	ldrh	r2, [r3, #12]
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	889b      	ldrh	r3, [r3, #4]
 8019fca:	b29b      	uxth	r3, r3
 8019fcc:	429a      	cmp	r2, r3
 8019fce:	d014      	beq.n	8019ffa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019fd0:	693b      	ldr	r3, [r7, #16]
 8019fd2:	3301      	adds	r3, #1
 8019fd4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019fd6:	6a3b      	ldr	r3, [r7, #32]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d104      	bne.n	8019fe6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fde:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019fe0:	69fb      	ldr	r3, [r7, #28]
 8019fe2:	61bb      	str	r3, [r7, #24]
 8019fe4:	e009      	b.n	8019ffa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe8:	7fda      	ldrb	r2, [r3, #31]
 8019fea:	6a3b      	ldr	r3, [r7, #32]
 8019fec:	7fdb      	ldrb	r3, [r3, #31]
 8019fee:	429a      	cmp	r2, r3
 8019ff0:	d803      	bhi.n	8019ffa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019ff6:	69fb      	ldr	r3, [r7, #28]
 8019ff8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d001      	beq.n	801a006 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a004:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d1cb      	bne.n	8019faa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a012:	6a3b      	ldr	r3, [r7, #32]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d008      	beq.n	801a02a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a018:	69b9      	ldr	r1, [r7, #24]
 801a01a:	6a38      	ldr	r0, [r7, #32]
 801a01c:	f7ff ff0e 	bl	8019e3c <ip_reass_free_complete_datagram>
 801a020:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a022:	697a      	ldr	r2, [r7, #20]
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	4413      	add	r3, r2
 801a028:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a02a:	697a      	ldr	r2, [r7, #20]
 801a02c:	683b      	ldr	r3, [r7, #0]
 801a02e:	429a      	cmp	r2, r3
 801a030:	da02      	bge.n	801a038 <ip_reass_remove_oldest_datagram+0xb4>
 801a032:	693b      	ldr	r3, [r7, #16]
 801a034:	2b01      	cmp	r3, #1
 801a036:	dcac      	bgt.n	8019f92 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a038:	697b      	ldr	r3, [r7, #20]
}
 801a03a:	4618      	mov	r0, r3
 801a03c:	3728      	adds	r7, #40	; 0x28
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}
 801a042:	bf00      	nop
 801a044:	2000503c 	.word	0x2000503c

0801a048 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b084      	sub	sp, #16
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a052:	2004      	movs	r0, #4
 801a054:	f7f6 f984 	bl	8010360 <memp_malloc>
 801a058:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d110      	bne.n	801a082 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a060:	6839      	ldr	r1, [r7, #0]
 801a062:	6878      	ldr	r0, [r7, #4]
 801a064:	f7ff ff8e 	bl	8019f84 <ip_reass_remove_oldest_datagram>
 801a068:	4602      	mov	r2, r0
 801a06a:	683b      	ldr	r3, [r7, #0]
 801a06c:	4293      	cmp	r3, r2
 801a06e:	dc03      	bgt.n	801a078 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a070:	2004      	movs	r0, #4
 801a072:	f7f6 f975 	bl	8010360 <memp_malloc>
 801a076:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d101      	bne.n	801a082 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a07e:	2300      	movs	r3, #0
 801a080:	e016      	b.n	801a0b0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a082:	2220      	movs	r2, #32
 801a084:	2100      	movs	r1, #0
 801a086:	68f8      	ldr	r0, [r7, #12]
 801a088:	f001 f8f0 	bl	801b26c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	220f      	movs	r2, #15
 801a090:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a092:	4b09      	ldr	r3, [pc, #36]	; (801a0b8 <ip_reass_enqueue_new_datagram+0x70>)
 801a094:	681a      	ldr	r2, [r3, #0]
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a09a:	4a07      	ldr	r2, [pc, #28]	; (801a0b8 <ip_reass_enqueue_new_datagram+0x70>)
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	3308      	adds	r3, #8
 801a0a4:	2214      	movs	r2, #20
 801a0a6:	6879      	ldr	r1, [r7, #4]
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f001 f8b7 	bl	801b21c <memcpy>
  return ipr;
 801a0ae:	68fb      	ldr	r3, [r7, #12]
}
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	3710      	adds	r7, #16
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}
 801a0b8:	2000503c 	.word	0x2000503c

0801a0bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b082      	sub	sp, #8
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
 801a0c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a0c6:	4b10      	ldr	r3, [pc, #64]	; (801a108 <ip_reass_dequeue_datagram+0x4c>)
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	687a      	ldr	r2, [r7, #4]
 801a0cc:	429a      	cmp	r2, r3
 801a0ce:	d104      	bne.n	801a0da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	4a0c      	ldr	r2, [pc, #48]	; (801a108 <ip_reass_dequeue_datagram+0x4c>)
 801a0d6:	6013      	str	r3, [r2, #0]
 801a0d8:	e00d      	b.n	801a0f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d106      	bne.n	801a0ee <ip_reass_dequeue_datagram+0x32>
 801a0e0:	4b0a      	ldr	r3, [pc, #40]	; (801a10c <ip_reass_dequeue_datagram+0x50>)
 801a0e2:	f240 1245 	movw	r2, #325	; 0x145
 801a0e6:	490a      	ldr	r1, [pc, #40]	; (801a110 <ip_reass_dequeue_datagram+0x54>)
 801a0e8:	480a      	ldr	r0, [pc, #40]	; (801a114 <ip_reass_dequeue_datagram+0x58>)
 801a0ea:	f001 fb45 	bl	801b778 <printf>
    prev->next = ipr->next;
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681a      	ldr	r2, [r3, #0]
 801a0f2:	683b      	ldr	r3, [r7, #0]
 801a0f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a0f6:	6879      	ldr	r1, [r7, #4]
 801a0f8:	2004      	movs	r0, #4
 801a0fa:	f7f6 f983 	bl	8010404 <memp_free>
}
 801a0fe:	bf00      	nop
 801a100:	3708      	adds	r7, #8
 801a102:	46bd      	mov	sp, r7
 801a104:	bd80      	pop	{r7, pc}
 801a106:	bf00      	nop
 801a108:	2000503c 	.word	0x2000503c
 801a10c:	08027bd8 	.word	0x08027bd8
 801a110:	08027ca0 	.word	0x08027ca0
 801a114:	08027c20 	.word	0x08027c20

0801a118 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b08c      	sub	sp, #48	; 0x30
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	60f8      	str	r0, [r7, #12]
 801a120:	60b9      	str	r1, [r7, #8]
 801a122:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a124:	2300      	movs	r3, #0
 801a126:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a128:	2301      	movs	r3, #1
 801a12a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a12c:	68bb      	ldr	r3, [r7, #8]
 801a12e:	685b      	ldr	r3, [r3, #4]
 801a130:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a132:	69fb      	ldr	r3, [r7, #28]
 801a134:	885b      	ldrh	r3, [r3, #2]
 801a136:	b29b      	uxth	r3, r3
 801a138:	4618      	mov	r0, r3
 801a13a:	f7f5 fc25 	bl	800f988 <lwip_htons>
 801a13e:	4603      	mov	r3, r0
 801a140:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a142:	69fb      	ldr	r3, [r7, #28]
 801a144:	781b      	ldrb	r3, [r3, #0]
 801a146:	f003 030f 	and.w	r3, r3, #15
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	009b      	lsls	r3, r3, #2
 801a14e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a150:	7e7b      	ldrb	r3, [r7, #25]
 801a152:	b29b      	uxth	r3, r3
 801a154:	8b7a      	ldrh	r2, [r7, #26]
 801a156:	429a      	cmp	r2, r3
 801a158:	d202      	bcs.n	801a160 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a15a:	f04f 33ff 	mov.w	r3, #4294967295
 801a15e:	e135      	b.n	801a3cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a160:	7e7b      	ldrb	r3, [r7, #25]
 801a162:	b29b      	uxth	r3, r3
 801a164:	8b7a      	ldrh	r2, [r7, #26]
 801a166:	1ad3      	subs	r3, r2, r3
 801a168:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a16a:	69fb      	ldr	r3, [r7, #28]
 801a16c:	88db      	ldrh	r3, [r3, #6]
 801a16e:	b29b      	uxth	r3, r3
 801a170:	4618      	mov	r0, r3
 801a172:	f7f5 fc09 	bl	800f988 <lwip_htons>
 801a176:	4603      	mov	r3, r0
 801a178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a17c:	b29b      	uxth	r3, r3
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a182:	68bb      	ldr	r3, [r7, #8]
 801a184:	685b      	ldr	r3, [r3, #4]
 801a186:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a18a:	2200      	movs	r2, #0
 801a18c:	701a      	strb	r2, [r3, #0]
 801a18e:	2200      	movs	r2, #0
 801a190:	705a      	strb	r2, [r3, #1]
 801a192:	2200      	movs	r2, #0
 801a194:	709a      	strb	r2, [r3, #2]
 801a196:	2200      	movs	r2, #0
 801a198:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a19c:	8afa      	ldrh	r2, [r7, #22]
 801a19e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a1a0:	8afa      	ldrh	r2, [r7, #22]
 801a1a2:	8b7b      	ldrh	r3, [r7, #26]
 801a1a4:	4413      	add	r3, r2
 801a1a6:	b29a      	uxth	r2, r3
 801a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ae:	88db      	ldrh	r3, [r3, #6]
 801a1b0:	b29b      	uxth	r3, r3
 801a1b2:	8afa      	ldrh	r2, [r7, #22]
 801a1b4:	429a      	cmp	r2, r3
 801a1b6:	d902      	bls.n	801a1be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a1b8:	f04f 33ff 	mov.w	r3, #4294967295
 801a1bc:	e106      	b.n	801a3cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	685b      	ldr	r3, [r3, #4]
 801a1c2:	627b      	str	r3, [r7, #36]	; 0x24
 801a1c4:	e068      	b.n	801a298 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1c8:	685b      	ldr	r3, [r3, #4]
 801a1ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ce:	889b      	ldrh	r3, [r3, #4]
 801a1d0:	b29a      	uxth	r2, r3
 801a1d2:	693b      	ldr	r3, [r7, #16]
 801a1d4:	889b      	ldrh	r3, [r3, #4]
 801a1d6:	b29b      	uxth	r3, r3
 801a1d8:	429a      	cmp	r2, r3
 801a1da:	d235      	bcs.n	801a248 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d020      	beq.n	801a22a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ea:	889b      	ldrh	r3, [r3, #4]
 801a1ec:	b29a      	uxth	r2, r3
 801a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1f0:	88db      	ldrh	r3, [r3, #6]
 801a1f2:	b29b      	uxth	r3, r3
 801a1f4:	429a      	cmp	r2, r3
 801a1f6:	d307      	bcc.n	801a208 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1fa:	88db      	ldrh	r3, [r3, #6]
 801a1fc:	b29a      	uxth	r2, r3
 801a1fe:	693b      	ldr	r3, [r7, #16]
 801a200:	889b      	ldrh	r3, [r3, #4]
 801a202:	b29b      	uxth	r3, r3
 801a204:	429a      	cmp	r2, r3
 801a206:	d902      	bls.n	801a20e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a208:	f04f 33ff 	mov.w	r3, #4294967295
 801a20c:	e0de      	b.n	801a3cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a210:	68ba      	ldr	r2, [r7, #8]
 801a212:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a216:	88db      	ldrh	r3, [r3, #6]
 801a218:	b29a      	uxth	r2, r3
 801a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a21c:	889b      	ldrh	r3, [r3, #4]
 801a21e:	b29b      	uxth	r3, r3
 801a220:	429a      	cmp	r2, r3
 801a222:	d03d      	beq.n	801a2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a224:	2300      	movs	r3, #0
 801a226:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a228:	e03a      	b.n	801a2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a22c:	88db      	ldrh	r3, [r3, #6]
 801a22e:	b29a      	uxth	r2, r3
 801a230:	693b      	ldr	r3, [r7, #16]
 801a232:	889b      	ldrh	r3, [r3, #4]
 801a234:	b29b      	uxth	r3, r3
 801a236:	429a      	cmp	r2, r3
 801a238:	d902      	bls.n	801a240 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a23a:	f04f 33ff 	mov.w	r3, #4294967295
 801a23e:	e0c5      	b.n	801a3cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	68ba      	ldr	r2, [r7, #8]
 801a244:	605a      	str	r2, [r3, #4]
      break;
 801a246:	e02b      	b.n	801a2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24a:	889b      	ldrh	r3, [r3, #4]
 801a24c:	b29a      	uxth	r2, r3
 801a24e:	693b      	ldr	r3, [r7, #16]
 801a250:	889b      	ldrh	r3, [r3, #4]
 801a252:	b29b      	uxth	r3, r3
 801a254:	429a      	cmp	r2, r3
 801a256:	d102      	bne.n	801a25e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a258:	f04f 33ff 	mov.w	r3, #4294967295
 801a25c:	e0b6      	b.n	801a3cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a260:	889b      	ldrh	r3, [r3, #4]
 801a262:	b29a      	uxth	r2, r3
 801a264:	693b      	ldr	r3, [r7, #16]
 801a266:	88db      	ldrh	r3, [r3, #6]
 801a268:	b29b      	uxth	r3, r3
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d202      	bcs.n	801a274 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a26e:	f04f 33ff 	mov.w	r3, #4294967295
 801a272:	e0ab      	b.n	801a3cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a276:	2b00      	cmp	r3, #0
 801a278:	d009      	beq.n	801a28e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a27c:	88db      	ldrh	r3, [r3, #6]
 801a27e:	b29a      	uxth	r2, r3
 801a280:	693b      	ldr	r3, [r7, #16]
 801a282:	889b      	ldrh	r3, [r3, #4]
 801a284:	b29b      	uxth	r3, r3
 801a286:	429a      	cmp	r2, r3
 801a288:	d001      	beq.n	801a28e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a28a:	2300      	movs	r3, #0
 801a28c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a28e:	693b      	ldr	r3, [r7, #16]
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a294:	693b      	ldr	r3, [r7, #16]
 801a296:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d193      	bne.n	801a1c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a29e:	e000      	b.n	801a2a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a2a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d12d      	bne.n	801a304 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d01c      	beq.n	801a2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2b0:	88db      	ldrh	r3, [r3, #6]
 801a2b2:	b29a      	uxth	r2, r3
 801a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2b6:	889b      	ldrh	r3, [r3, #4]
 801a2b8:	b29b      	uxth	r3, r3
 801a2ba:	429a      	cmp	r2, r3
 801a2bc:	d906      	bls.n	801a2cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a2be:	4b45      	ldr	r3, [pc, #276]	; (801a3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a2c0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a2c4:	4944      	ldr	r1, [pc, #272]	; (801a3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a2c6:	4845      	ldr	r0, [pc, #276]	; (801a3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a2c8:	f001 fa56 	bl	801b778 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ce:	68ba      	ldr	r2, [r7, #8]
 801a2d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d4:	88db      	ldrh	r3, [r3, #6]
 801a2d6:	b29a      	uxth	r2, r3
 801a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2da:	889b      	ldrh	r3, [r3, #4]
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	429a      	cmp	r2, r3
 801a2e0:	d010      	beq.n	801a304 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	623b      	str	r3, [r7, #32]
 801a2e6:	e00d      	b.n	801a304 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	685b      	ldr	r3, [r3, #4]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d006      	beq.n	801a2fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a2f0:	4b38      	ldr	r3, [pc, #224]	; (801a3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a2f2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a2f6:	493a      	ldr	r1, [pc, #232]	; (801a3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a2f8:	4838      	ldr	r0, [pc, #224]	; (801a3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a2fa:	f001 fa3d 	bl	801b778 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	68ba      	ldr	r2, [r7, #8]
 801a302:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d105      	bne.n	801a316 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	7f9b      	ldrb	r3, [r3, #30]
 801a30e:	f003 0301 	and.w	r3, r3, #1
 801a312:	2b00      	cmp	r3, #0
 801a314:	d059      	beq.n	801a3ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a316:	6a3b      	ldr	r3, [r7, #32]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d04f      	beq.n	801a3bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	685b      	ldr	r3, [r3, #4]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d006      	beq.n	801a332 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	685b      	ldr	r3, [r3, #4]
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	889b      	ldrh	r3, [r3, #4]
 801a32c:	b29b      	uxth	r3, r3
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d002      	beq.n	801a338 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a332:	2300      	movs	r3, #0
 801a334:	623b      	str	r3, [r7, #32]
 801a336:	e041      	b.n	801a3bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a33a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a342:	e012      	b.n	801a36a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a346:	685b      	ldr	r3, [r3, #4]
 801a348:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a34c:	88db      	ldrh	r3, [r3, #6]
 801a34e:	b29a      	uxth	r2, r3
 801a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a352:	889b      	ldrh	r3, [r3, #4]
 801a354:	b29b      	uxth	r3, r3
 801a356:	429a      	cmp	r2, r3
 801a358:	d002      	beq.n	801a360 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a35a:	2300      	movs	r3, #0
 801a35c:	623b      	str	r3, [r7, #32]
            break;
 801a35e:	e007      	b.n	801a370 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a362:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d1e9      	bne.n	801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a370:	6a3b      	ldr	r3, [r7, #32]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d022      	beq.n	801a3bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	685b      	ldr	r3, [r3, #4]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d106      	bne.n	801a38c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a37e:	4b15      	ldr	r3, [pc, #84]	; (801a3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a380:	f240 12df 	movw	r2, #479	; 0x1df
 801a384:	4917      	ldr	r1, [pc, #92]	; (801a3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a386:	4815      	ldr	r0, [pc, #84]	; (801a3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a388:	f001 f9f6 	bl	801b778 <printf>
          LWIP_ASSERT("sanity check",
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	685b      	ldr	r3, [r3, #4]
 801a390:	685b      	ldr	r3, [r3, #4]
 801a392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a394:	429a      	cmp	r2, r3
 801a396:	d106      	bne.n	801a3a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a398:	4b0e      	ldr	r3, [pc, #56]	; (801a3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a39a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a39e:	4911      	ldr	r1, [pc, #68]	; (801a3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a3a0:	480e      	ldr	r0, [pc, #56]	; (801a3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a3a2:	f001 f9e9 	bl	801b778 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d006      	beq.n	801a3bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a3ae:	4b09      	ldr	r3, [pc, #36]	; (801a3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a3b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a3b4:	490c      	ldr	r1, [pc, #48]	; (801a3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a3b6:	4809      	ldr	r0, [pc, #36]	; (801a3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a3b8:	f001 f9de 	bl	801b778 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a3bc:	6a3b      	ldr	r3, [r7, #32]
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	bf14      	ite	ne
 801a3c2:	2301      	movne	r3, #1
 801a3c4:	2300      	moveq	r3, #0
 801a3c6:	b2db      	uxtb	r3, r3
 801a3c8:	e000      	b.n	801a3cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a3ca:	2300      	movs	r3, #0
}
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	3730      	adds	r7, #48	; 0x30
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	bd80      	pop	{r7, pc}
 801a3d4:	08027bd8 	.word	0x08027bd8
 801a3d8:	08027cbc 	.word	0x08027cbc
 801a3dc:	08027c20 	.word	0x08027c20
 801a3e0:	08027cdc 	.word	0x08027cdc
 801a3e4:	08027d14 	.word	0x08027d14
 801a3e8:	08027d24 	.word	0x08027d24

0801a3ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b08e      	sub	sp, #56	; 0x38
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3fc:	781b      	ldrb	r3, [r3, #0]
 801a3fe:	f003 030f 	and.w	r3, r3, #15
 801a402:	b2db      	uxtb	r3, r3
 801a404:	009b      	lsls	r3, r3, #2
 801a406:	b2db      	uxtb	r3, r3
 801a408:	2b14      	cmp	r3, #20
 801a40a:	f040 8167 	bne.w	801a6dc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a410:	88db      	ldrh	r3, [r3, #6]
 801a412:	b29b      	uxth	r3, r3
 801a414:	4618      	mov	r0, r3
 801a416:	f7f5 fab7 	bl	800f988 <lwip_htons>
 801a41a:	4603      	mov	r3, r0
 801a41c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a420:	b29b      	uxth	r3, r3
 801a422:	00db      	lsls	r3, r3, #3
 801a424:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a428:	885b      	ldrh	r3, [r3, #2]
 801a42a:	b29b      	uxth	r3, r3
 801a42c:	4618      	mov	r0, r3
 801a42e:	f7f5 faab 	bl	800f988 <lwip_htons>
 801a432:	4603      	mov	r3, r0
 801a434:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a438:	781b      	ldrb	r3, [r3, #0]
 801a43a:	f003 030f 	and.w	r3, r3, #15
 801a43e:	b2db      	uxtb	r3, r3
 801a440:	009b      	lsls	r3, r3, #2
 801a442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a44a:	b29b      	uxth	r3, r3
 801a44c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a44e:	429a      	cmp	r2, r3
 801a450:	f0c0 8146 	bcc.w	801a6e0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a458:	b29b      	uxth	r3, r3
 801a45a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a45c:	1ad3      	subs	r3, r2, r3
 801a45e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a460:	6878      	ldr	r0, [r7, #4]
 801a462:	f7f6 feb1 	bl	80111c8 <pbuf_clen>
 801a466:	4603      	mov	r3, r0
 801a468:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a46a:	4b9f      	ldr	r3, [pc, #636]	; (801a6e8 <ip4_reass+0x2fc>)
 801a46c:	881b      	ldrh	r3, [r3, #0]
 801a46e:	461a      	mov	r2, r3
 801a470:	8c3b      	ldrh	r3, [r7, #32]
 801a472:	4413      	add	r3, r2
 801a474:	2b0a      	cmp	r3, #10
 801a476:	dd10      	ble.n	801a49a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a478:	8c3b      	ldrh	r3, [r7, #32]
 801a47a:	4619      	mov	r1, r3
 801a47c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a47e:	f7ff fd81 	bl	8019f84 <ip_reass_remove_oldest_datagram>
 801a482:	4603      	mov	r3, r0
 801a484:	2b00      	cmp	r3, #0
 801a486:	f000 812d 	beq.w	801a6e4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a48a:	4b97      	ldr	r3, [pc, #604]	; (801a6e8 <ip4_reass+0x2fc>)
 801a48c:	881b      	ldrh	r3, [r3, #0]
 801a48e:	461a      	mov	r2, r3
 801a490:	8c3b      	ldrh	r3, [r7, #32]
 801a492:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a494:	2b0a      	cmp	r3, #10
 801a496:	f300 8125 	bgt.w	801a6e4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a49a:	4b94      	ldr	r3, [pc, #592]	; (801a6ec <ip4_reass+0x300>)
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	633b      	str	r3, [r7, #48]	; 0x30
 801a4a0:	e015      	b.n	801a4ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a4:	695a      	ldr	r2, [r3, #20]
 801a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4a8:	68db      	ldr	r3, [r3, #12]
 801a4aa:	429a      	cmp	r2, r3
 801a4ac:	d10c      	bne.n	801a4c8 <ip4_reass+0xdc>
 801a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4b0:	699a      	ldr	r2, [r3, #24]
 801a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4b4:	691b      	ldr	r3, [r3, #16]
 801a4b6:	429a      	cmp	r2, r3
 801a4b8:	d106      	bne.n	801a4c8 <ip4_reass+0xdc>
 801a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4bc:	899a      	ldrh	r2, [r3, #12]
 801a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c0:	889b      	ldrh	r3, [r3, #4]
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	429a      	cmp	r2, r3
 801a4c6:	d006      	beq.n	801a4d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	633b      	str	r3, [r7, #48]	; 0x30
 801a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d1e6      	bne.n	801a4a2 <ip4_reass+0xb6>
 801a4d4:	e000      	b.n	801a4d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a4d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d109      	bne.n	801a4f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a4de:	8c3b      	ldrh	r3, [r7, #32]
 801a4e0:	4619      	mov	r1, r3
 801a4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a4e4:	f7ff fdb0 	bl	801a048 <ip_reass_enqueue_new_datagram>
 801a4e8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d11c      	bne.n	801a52a <ip4_reass+0x13e>
      goto nullreturn;
 801a4f0:	e109      	b.n	801a706 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4f4:	88db      	ldrh	r3, [r3, #6]
 801a4f6:	b29b      	uxth	r3, r3
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	f7f5 fa45 	bl	800f988 <lwip_htons>
 801a4fe:	4603      	mov	r3, r0
 801a500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a504:	2b00      	cmp	r3, #0
 801a506:	d110      	bne.n	801a52a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a50a:	89db      	ldrh	r3, [r3, #14]
 801a50c:	4618      	mov	r0, r3
 801a50e:	f7f5 fa3b 	bl	800f988 <lwip_htons>
 801a512:	4603      	mov	r3, r0
 801a514:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d006      	beq.n	801a52a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a51e:	3308      	adds	r3, #8
 801a520:	2214      	movs	r2, #20
 801a522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a524:	4618      	mov	r0, r3
 801a526:	f000 fe79 	bl	801b21c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a52c:	88db      	ldrh	r3, [r3, #6]
 801a52e:	b29b      	uxth	r3, r3
 801a530:	f003 0320 	and.w	r3, r3, #32
 801a534:	2b00      	cmp	r3, #0
 801a536:	bf0c      	ite	eq
 801a538:	2301      	moveq	r3, #1
 801a53a:	2300      	movne	r3, #0
 801a53c:	b2db      	uxtb	r3, r3
 801a53e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a540:	69fb      	ldr	r3, [r7, #28]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d00e      	beq.n	801a564 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a546:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a54a:	4413      	add	r3, r2
 801a54c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a54e:	8b7a      	ldrh	r2, [r7, #26]
 801a550:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a552:	429a      	cmp	r2, r3
 801a554:	f0c0 80a0 	bcc.w	801a698 <ip4_reass+0x2ac>
 801a558:	8b7b      	ldrh	r3, [r7, #26]
 801a55a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a55e:	4293      	cmp	r3, r2
 801a560:	f200 809a 	bhi.w	801a698 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a564:	69fa      	ldr	r2, [r7, #28]
 801a566:	6879      	ldr	r1, [r7, #4]
 801a568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a56a:	f7ff fdd5 	bl	801a118 <ip_reass_chain_frag_into_datagram_and_validate>
 801a56e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a570:	697b      	ldr	r3, [r7, #20]
 801a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a576:	f000 8091 	beq.w	801a69c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a57a:	4b5b      	ldr	r3, [pc, #364]	; (801a6e8 <ip4_reass+0x2fc>)
 801a57c:	881a      	ldrh	r2, [r3, #0]
 801a57e:	8c3b      	ldrh	r3, [r7, #32]
 801a580:	4413      	add	r3, r2
 801a582:	b29a      	uxth	r2, r3
 801a584:	4b58      	ldr	r3, [pc, #352]	; (801a6e8 <ip4_reass+0x2fc>)
 801a586:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a588:	69fb      	ldr	r3, [r7, #28]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d00d      	beq.n	801a5aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a58e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a592:	4413      	add	r3, r2
 801a594:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a598:	8a7a      	ldrh	r2, [r7, #18]
 801a59a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a59e:	7f9b      	ldrb	r3, [r3, #30]
 801a5a0:	f043 0301 	orr.w	r3, r3, #1
 801a5a4:	b2da      	uxtb	r2, r3
 801a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a5aa:	697b      	ldr	r3, [r7, #20]
 801a5ac:	2b01      	cmp	r3, #1
 801a5ae:	d171      	bne.n	801a694 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5b2:	8b9b      	ldrh	r3, [r3, #28]
 801a5b4:	3314      	adds	r3, #20
 801a5b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5ba:	685b      	ldr	r3, [r3, #4]
 801a5bc:	685b      	ldr	r3, [r3, #4]
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5c4:	685b      	ldr	r3, [r3, #4]
 801a5c6:	685b      	ldr	r3, [r3, #4]
 801a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5cc:	3308      	adds	r3, #8
 801a5ce:	2214      	movs	r2, #20
 801a5d0:	4619      	mov	r1, r3
 801a5d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a5d4:	f000 fe22 	bl	801b21c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a5d8:	8a3b      	ldrh	r3, [r7, #16]
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f7f5 f9d4 	bl	800f988 <lwip_htons>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	461a      	mov	r2, r3
 801a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	719a      	strb	r2, [r3, #6]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	729a      	strb	r2, [r3, #10]
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5fe:	685b      	ldr	r3, [r3, #4]
 801a600:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a602:	e00d      	b.n	801a620 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a606:	685b      	ldr	r3, [r3, #4]
 801a608:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a60a:	2114      	movs	r1, #20
 801a60c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a60e:	f7f6 fcc7 	bl	8010fa0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a612:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a614:	6878      	ldr	r0, [r7, #4]
 801a616:	f7f6 fe17 	bl	8011248 <pbuf_cat>
      r = iprh->next_pbuf;
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a622:	2b00      	cmp	r3, #0
 801a624:	d1ee      	bne.n	801a604 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a626:	4b31      	ldr	r3, [pc, #196]	; (801a6ec <ip4_reass+0x300>)
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a62c:	429a      	cmp	r2, r3
 801a62e:	d102      	bne.n	801a636 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a630:	2300      	movs	r3, #0
 801a632:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a634:	e010      	b.n	801a658 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a636:	4b2d      	ldr	r3, [pc, #180]	; (801a6ec <ip4_reass+0x300>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a63c:	e007      	b.n	801a64e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a644:	429a      	cmp	r2, r3
 801a646:	d006      	beq.n	801a656 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a650:	2b00      	cmp	r3, #0
 801a652:	d1f4      	bne.n	801a63e <ip4_reass+0x252>
 801a654:	e000      	b.n	801a658 <ip4_reass+0x26c>
          break;
 801a656:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a65a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a65c:	f7ff fd2e 	bl	801a0bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7f6 fdb1 	bl	80111c8 <pbuf_clen>
 801a666:	4603      	mov	r3, r0
 801a668:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a66a:	4b1f      	ldr	r3, [pc, #124]	; (801a6e8 <ip4_reass+0x2fc>)
 801a66c:	881b      	ldrh	r3, [r3, #0]
 801a66e:	8c3a      	ldrh	r2, [r7, #32]
 801a670:	429a      	cmp	r2, r3
 801a672:	d906      	bls.n	801a682 <ip4_reass+0x296>
 801a674:	4b1e      	ldr	r3, [pc, #120]	; (801a6f0 <ip4_reass+0x304>)
 801a676:	f240 229b 	movw	r2, #667	; 0x29b
 801a67a:	491e      	ldr	r1, [pc, #120]	; (801a6f4 <ip4_reass+0x308>)
 801a67c:	481e      	ldr	r0, [pc, #120]	; (801a6f8 <ip4_reass+0x30c>)
 801a67e:	f001 f87b 	bl	801b778 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a682:	4b19      	ldr	r3, [pc, #100]	; (801a6e8 <ip4_reass+0x2fc>)
 801a684:	881a      	ldrh	r2, [r3, #0]
 801a686:	8c3b      	ldrh	r3, [r7, #32]
 801a688:	1ad3      	subs	r3, r2, r3
 801a68a:	b29a      	uxth	r2, r3
 801a68c:	4b16      	ldr	r3, [pc, #88]	; (801a6e8 <ip4_reass+0x2fc>)
 801a68e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	e03c      	b.n	801a70e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a694:	2300      	movs	r3, #0
 801a696:	e03a      	b.n	801a70e <ip4_reass+0x322>
      goto nullreturn_ipr;
 801a698:	bf00      	nop
 801a69a:	e000      	b.n	801a69e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801a69c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d106      	bne.n	801a6b2 <ip4_reass+0x2c6>
 801a6a4:	4b12      	ldr	r3, [pc, #72]	; (801a6f0 <ip4_reass+0x304>)
 801a6a6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a6aa:	4914      	ldr	r1, [pc, #80]	; (801a6fc <ip4_reass+0x310>)
 801a6ac:	4812      	ldr	r0, [pc, #72]	; (801a6f8 <ip4_reass+0x30c>)
 801a6ae:	f001 f863 	bl	801b778 <printf>
  if (ipr->p == NULL) {
 801a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6b4:	685b      	ldr	r3, [r3, #4]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d124      	bne.n	801a704 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a6ba:	4b0c      	ldr	r3, [pc, #48]	; (801a6ec <ip4_reass+0x300>)
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a6c0:	429a      	cmp	r2, r3
 801a6c2:	d006      	beq.n	801a6d2 <ip4_reass+0x2e6>
 801a6c4:	4b0a      	ldr	r3, [pc, #40]	; (801a6f0 <ip4_reass+0x304>)
 801a6c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a6ca:	490d      	ldr	r1, [pc, #52]	; (801a700 <ip4_reass+0x314>)
 801a6cc:	480a      	ldr	r0, [pc, #40]	; (801a6f8 <ip4_reass+0x30c>)
 801a6ce:	f001 f853 	bl	801b778 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a6d2:	2100      	movs	r1, #0
 801a6d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6d6:	f7ff fcf1 	bl	801a0bc <ip_reass_dequeue_datagram>
 801a6da:	e014      	b.n	801a706 <ip4_reass+0x31a>
    goto nullreturn;
 801a6dc:	bf00      	nop
 801a6de:	e012      	b.n	801a706 <ip4_reass+0x31a>
    goto nullreturn;
 801a6e0:	bf00      	nop
 801a6e2:	e010      	b.n	801a706 <ip4_reass+0x31a>
      goto nullreturn;
 801a6e4:	bf00      	nop
 801a6e6:	e00e      	b.n	801a706 <ip4_reass+0x31a>
 801a6e8:	20005040 	.word	0x20005040
 801a6ec:	2000503c 	.word	0x2000503c
 801a6f0:	08027bd8 	.word	0x08027bd8
 801a6f4:	08027d48 	.word	0x08027d48
 801a6f8:	08027c20 	.word	0x08027c20
 801a6fc:	08027d64 	.word	0x08027d64
 801a700:	08027d70 	.word	0x08027d70
  }

nullreturn:
 801a704:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a706:	6878      	ldr	r0, [r7, #4]
 801a708:	f7f6 fcd0 	bl	80110ac <pbuf_free>
  return NULL;
 801a70c:	2300      	movs	r3, #0
}
 801a70e:	4618      	mov	r0, r3
 801a710:	3738      	adds	r7, #56	; 0x38
 801a712:	46bd      	mov	sp, r7
 801a714:	bd80      	pop	{r7, pc}
 801a716:	bf00      	nop

0801a718 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a71c:	2005      	movs	r0, #5
 801a71e:	f7f5 fe1f 	bl	8010360 <memp_malloc>
 801a722:	4603      	mov	r3, r0
}
 801a724:	4618      	mov	r0, r3
 801a726:	bd80      	pop	{r7, pc}

0801a728 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b082      	sub	sp, #8
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d106      	bne.n	801a744 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a736:	4b07      	ldr	r3, [pc, #28]	; (801a754 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a738:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a73c:	4906      	ldr	r1, [pc, #24]	; (801a758 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a73e:	4807      	ldr	r0, [pc, #28]	; (801a75c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a740:	f001 f81a 	bl	801b778 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a744:	6879      	ldr	r1, [r7, #4]
 801a746:	2005      	movs	r0, #5
 801a748:	f7f5 fe5c 	bl	8010404 <memp_free>
}
 801a74c:	bf00      	nop
 801a74e:	3708      	adds	r7, #8
 801a750:	46bd      	mov	sp, r7
 801a752:	bd80      	pop	{r7, pc}
 801a754:	08027bd8 	.word	0x08027bd8
 801a758:	08027d90 	.word	0x08027d90
 801a75c:	08027c20 	.word	0x08027c20

0801a760 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a760:	b580      	push	{r7, lr}
 801a762:	b084      	sub	sp, #16
 801a764:	af00      	add	r7, sp, #0
 801a766:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d106      	bne.n	801a780 <ipfrag_free_pbuf_custom+0x20>
 801a772:	4b11      	ldr	r3, [pc, #68]	; (801a7b8 <ipfrag_free_pbuf_custom+0x58>)
 801a774:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a778:	4910      	ldr	r1, [pc, #64]	; (801a7bc <ipfrag_free_pbuf_custom+0x5c>)
 801a77a:	4811      	ldr	r0, [pc, #68]	; (801a7c0 <ipfrag_free_pbuf_custom+0x60>)
 801a77c:	f000 fffc 	bl	801b778 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a780:	68fa      	ldr	r2, [r7, #12]
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	429a      	cmp	r2, r3
 801a786:	d006      	beq.n	801a796 <ipfrag_free_pbuf_custom+0x36>
 801a788:	4b0b      	ldr	r3, [pc, #44]	; (801a7b8 <ipfrag_free_pbuf_custom+0x58>)
 801a78a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a78e:	490d      	ldr	r1, [pc, #52]	; (801a7c4 <ipfrag_free_pbuf_custom+0x64>)
 801a790:	480b      	ldr	r0, [pc, #44]	; (801a7c0 <ipfrag_free_pbuf_custom+0x60>)
 801a792:	f000 fff1 	bl	801b778 <printf>
  if (pcr->original != NULL) {
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	695b      	ldr	r3, [r3, #20]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d004      	beq.n	801a7a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	695b      	ldr	r3, [r3, #20]
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	f7f6 fc82 	bl	80110ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a7a8:	68f8      	ldr	r0, [r7, #12]
 801a7aa:	f7ff ffbd 	bl	801a728 <ip_frag_free_pbuf_custom_ref>
}
 801a7ae:	bf00      	nop
 801a7b0:	3710      	adds	r7, #16
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	bd80      	pop	{r7, pc}
 801a7b6:	bf00      	nop
 801a7b8:	08027bd8 	.word	0x08027bd8
 801a7bc:	08027d9c 	.word	0x08027d9c
 801a7c0:	08027c20 	.word	0x08027c20
 801a7c4:	08027da8 	.word	0x08027da8

0801a7c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	b094      	sub	sp, #80	; 0x50
 801a7cc:	af02      	add	r7, sp, #8
 801a7ce:	60f8      	str	r0, [r7, #12]
 801a7d0:	60b9      	str	r1, [r7, #8]
 801a7d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a7da:	68bb      	ldr	r3, [r7, #8]
 801a7dc:	8c1b      	ldrh	r3, [r3, #32]
 801a7de:	3b14      	subs	r3, #20
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	da00      	bge.n	801a7e6 <ip4_frag+0x1e>
 801a7e4:	3307      	adds	r3, #7
 801a7e6:	10db      	asrs	r3, r3, #3
 801a7e8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a7ea:	2314      	movs	r3, #20
 801a7ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	685b      	ldr	r3, [r3, #4]
 801a7f2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7fa:	781b      	ldrb	r3, [r3, #0]
 801a7fc:	f003 030f 	and.w	r3, r3, #15
 801a800:	b2db      	uxtb	r3, r3
 801a802:	009b      	lsls	r3, r3, #2
 801a804:	b2db      	uxtb	r3, r3
 801a806:	2b14      	cmp	r3, #20
 801a808:	d002      	beq.n	801a810 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a80a:	f06f 0305 	mvn.w	r3, #5
 801a80e:	e110      	b.n	801aa32 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	895b      	ldrh	r3, [r3, #10]
 801a814:	2b13      	cmp	r3, #19
 801a816:	d809      	bhi.n	801a82c <ip4_frag+0x64>
 801a818:	4b88      	ldr	r3, [pc, #544]	; (801aa3c <ip4_frag+0x274>)
 801a81a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a81e:	4988      	ldr	r1, [pc, #544]	; (801aa40 <ip4_frag+0x278>)
 801a820:	4888      	ldr	r0, [pc, #544]	; (801aa44 <ip4_frag+0x27c>)
 801a822:	f000 ffa9 	bl	801b778 <printf>
 801a826:	f06f 0305 	mvn.w	r3, #5
 801a82a:	e102      	b.n	801aa32 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a82e:	88db      	ldrh	r3, [r3, #6]
 801a830:	b29b      	uxth	r3, r3
 801a832:	4618      	mov	r0, r3
 801a834:	f7f5 f8a8 	bl	800f988 <lwip_htons>
 801a838:	4603      	mov	r3, r0
 801a83a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a83c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a83e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a842:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a846:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a84c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	891b      	ldrh	r3, [r3, #8]
 801a852:	3b14      	subs	r3, #20
 801a854:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a858:	e0e1      	b.n	801aa1e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a85a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a85c:	00db      	lsls	r3, r3, #3
 801a85e:	b29b      	uxth	r3, r3
 801a860:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a864:	4293      	cmp	r3, r2
 801a866:	bf28      	it	cs
 801a868:	4613      	movcs	r3, r2
 801a86a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a86c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a870:	2114      	movs	r1, #20
 801a872:	200e      	movs	r0, #14
 801a874:	f7f6 f936 	bl	8010ae4 <pbuf_alloc>
 801a878:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	f000 80d5 	beq.w	801aa2c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a884:	895b      	ldrh	r3, [r3, #10]
 801a886:	2b13      	cmp	r3, #19
 801a888:	d806      	bhi.n	801a898 <ip4_frag+0xd0>
 801a88a:	4b6c      	ldr	r3, [pc, #432]	; (801aa3c <ip4_frag+0x274>)
 801a88c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a890:	496d      	ldr	r1, [pc, #436]	; (801aa48 <ip4_frag+0x280>)
 801a892:	486c      	ldr	r0, [pc, #432]	; (801aa44 <ip4_frag+0x27c>)
 801a894:	f000 ff70 	bl	801b778 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a89a:	685b      	ldr	r3, [r3, #4]
 801a89c:	2214      	movs	r2, #20
 801a89e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	f000 fcbb 	bl	801b21c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8a8:	685b      	ldr	r3, [r3, #4]
 801a8aa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a8ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a8ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a8b2:	e064      	b.n	801a97e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	895a      	ldrh	r2, [r3, #10]
 801a8b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a8ba:	1ad3      	subs	r3, r2, r3
 801a8bc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	895b      	ldrh	r3, [r3, #10]
 801a8c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d906      	bls.n	801a8d6 <ip4_frag+0x10e>
 801a8c8:	4b5c      	ldr	r3, [pc, #368]	; (801aa3c <ip4_frag+0x274>)
 801a8ca:	f240 322d 	movw	r2, #813	; 0x32d
 801a8ce:	495f      	ldr	r1, [pc, #380]	; (801aa4c <ip4_frag+0x284>)
 801a8d0:	485c      	ldr	r0, [pc, #368]	; (801aa44 <ip4_frag+0x27c>)
 801a8d2:	f000 ff51 	bl	801b778 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a8d6:	8bfa      	ldrh	r2, [r7, #30]
 801a8d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a8dc:	4293      	cmp	r3, r2
 801a8de:	bf28      	it	cs
 801a8e0:	4613      	movcs	r3, r2
 801a8e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a8e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d105      	bne.n	801a8fa <ip4_frag+0x132>
        poff = 0;
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	60fb      	str	r3, [r7, #12]
        continue;
 801a8f8:	e041      	b.n	801a97e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a8fa:	f7ff ff0d 	bl	801a718 <ip_frag_alloc_pbuf_custom_ref>
 801a8fe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a900:	69bb      	ldr	r3, [r7, #24]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d103      	bne.n	801a90e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a908:	f7f6 fbd0 	bl	80110ac <pbuf_free>
        goto memerr;
 801a90c:	e08f      	b.n	801aa2e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a90e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a916:	4413      	add	r3, r2
 801a918:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a91c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a920:	9201      	str	r2, [sp, #4]
 801a922:	9300      	str	r3, [sp, #0]
 801a924:	4603      	mov	r3, r0
 801a926:	2241      	movs	r2, #65	; 0x41
 801a928:	2000      	movs	r0, #0
 801a92a:	f7f6 fa05 	bl	8010d38 <pbuf_alloced_custom>
 801a92e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a930:	697b      	ldr	r3, [r7, #20]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d106      	bne.n	801a944 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a936:	69b8      	ldr	r0, [r7, #24]
 801a938:	f7ff fef6 	bl	801a728 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a93c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a93e:	f7f6 fbb5 	bl	80110ac <pbuf_free>
        goto memerr;
 801a942:	e074      	b.n	801aa2e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a944:	68f8      	ldr	r0, [r7, #12]
 801a946:	f7f6 fc57 	bl	80111f8 <pbuf_ref>
      pcr->original = p;
 801a94a:	69bb      	ldr	r3, [r7, #24]
 801a94c:	68fa      	ldr	r2, [r7, #12]
 801a94e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a950:	69bb      	ldr	r3, [r7, #24]
 801a952:	4a3f      	ldr	r2, [pc, #252]	; (801aa50 <ip4_frag+0x288>)
 801a954:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a956:	6979      	ldr	r1, [r7, #20]
 801a958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a95a:	f7f6 fc75 	bl	8011248 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a95e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a962:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a966:	1ad3      	subs	r3, r2, r3
 801a968:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a96c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a970:	2b00      	cmp	r3, #0
 801a972:	d004      	beq.n	801a97e <ip4_frag+0x1b6>
        poff = 0;
 801a974:	2300      	movs	r3, #0
 801a976:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a97e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a982:	2b00      	cmp	r3, #0
 801a984:	d196      	bne.n	801a8b4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a986:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a988:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a98c:	4413      	add	r3, r2
 801a98e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a990:	68bb      	ldr	r3, [r7, #8]
 801a992:	8c1b      	ldrh	r3, [r3, #32]
 801a994:	f1a3 0213 	sub.w	r2, r3, #19
 801a998:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a99c:	429a      	cmp	r2, r3
 801a99e:	bfcc      	ite	gt
 801a9a0:	2301      	movgt	r3, #1
 801a9a2:	2300      	movle	r3, #0
 801a9a4:	b2db      	uxtb	r3, r3
 801a9a6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a9a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a9ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a9b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a9b2:	6a3b      	ldr	r3, [r7, #32]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d002      	beq.n	801a9be <ip4_frag+0x1f6>
 801a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d003      	beq.n	801a9c6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a9be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a9c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a9c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a9c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f7f4 ffdd 	bl	800f988 <lwip_htons>
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	461a      	mov	r2, r3
 801a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9d4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a9d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a9d8:	3314      	adds	r3, #20
 801a9da:	b29b      	uxth	r3, r3
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7f4 ffd3 	bl	800f988 <lwip_htons>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	461a      	mov	r2, r3
 801a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9e8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	729a      	strb	r2, [r3, #10]
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	695b      	ldr	r3, [r3, #20]
 801a9f8:	687a      	ldr	r2, [r7, #4]
 801a9fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a9fc:	68b8      	ldr	r0, [r7, #8]
 801a9fe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801aa00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aa02:	f7f6 fb53 	bl	80110ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 801aa06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aa0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aa0c:	1ad3      	subs	r3, r2, r3
 801aa0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801aa12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801aa16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801aa18:	4413      	add	r3, r2
 801aa1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801aa1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	f47f af19 	bne.w	801a85a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	e002      	b.n	801aa32 <ip4_frag+0x26a>
      goto memerr;
 801aa2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801aa2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801aa32:	4618      	mov	r0, r3
 801aa34:	3748      	adds	r7, #72	; 0x48
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}
 801aa3a:	bf00      	nop
 801aa3c:	08027bd8 	.word	0x08027bd8
 801aa40:	08027db4 	.word	0x08027db4
 801aa44:	08027c20 	.word	0x08027c20
 801aa48:	08027dd0 	.word	0x08027dd0
 801aa4c:	08027df0 	.word	0x08027df0
 801aa50:	0801a761 	.word	0x0801a761

0801aa54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b086      	sub	sp, #24
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
 801aa5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801aa5e:	230e      	movs	r3, #14
 801aa60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	895b      	ldrh	r3, [r3, #10]
 801aa66:	2b0e      	cmp	r3, #14
 801aa68:	d96e      	bls.n	801ab48 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	7bdb      	ldrb	r3, [r3, #15]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d106      	bne.n	801aa80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801aa72:	683b      	ldr	r3, [r7, #0]
 801aa74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aa78:	3301      	adds	r3, #1
 801aa7a:	b2da      	uxtb	r2, r3
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	685b      	ldr	r3, [r3, #4]
 801aa84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801aa86:	693b      	ldr	r3, [r7, #16]
 801aa88:	7b1a      	ldrb	r2, [r3, #12]
 801aa8a:	7b5b      	ldrb	r3, [r3, #13]
 801aa8c:	021b      	lsls	r3, r3, #8
 801aa8e:	4313      	orrs	r3, r2
 801aa90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801aa92:	693b      	ldr	r3, [r7, #16]
 801aa94:	781b      	ldrb	r3, [r3, #0]
 801aa96:	f003 0301 	and.w	r3, r3, #1
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d023      	beq.n	801aae6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801aa9e:	693b      	ldr	r3, [r7, #16]
 801aaa0:	781b      	ldrb	r3, [r3, #0]
 801aaa2:	2b01      	cmp	r3, #1
 801aaa4:	d10f      	bne.n	801aac6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aaa6:	693b      	ldr	r3, [r7, #16]
 801aaa8:	785b      	ldrb	r3, [r3, #1]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d11b      	bne.n	801aae6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801aaae:	693b      	ldr	r3, [r7, #16]
 801aab0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aab2:	2b5e      	cmp	r3, #94	; 0x5e
 801aab4:	d117      	bne.n	801aae6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	7b5b      	ldrb	r3, [r3, #13]
 801aaba:	f043 0310 	orr.w	r3, r3, #16
 801aabe:	b2da      	uxtb	r2, r3
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	735a      	strb	r2, [r3, #13]
 801aac4:	e00f      	b.n	801aae6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801aac6:	693b      	ldr	r3, [r7, #16]
 801aac8:	2206      	movs	r2, #6
 801aaca:	4928      	ldr	r1, [pc, #160]	; (801ab6c <ethernet_input+0x118>)
 801aacc:	4618      	mov	r0, r3
 801aace:	f000 fb97 	bl	801b200 <memcmp>
 801aad2:	4603      	mov	r3, r0
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d106      	bne.n	801aae6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	7b5b      	ldrb	r3, [r3, #13]
 801aadc:	f043 0308 	orr.w	r3, r3, #8
 801aae0:	b2da      	uxtb	r2, r3
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801aae6:	89fb      	ldrh	r3, [r7, #14]
 801aae8:	2b08      	cmp	r3, #8
 801aaea:	d003      	beq.n	801aaf4 <ethernet_input+0xa0>
 801aaec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801aaf0:	d014      	beq.n	801ab1c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801aaf2:	e032      	b.n	801ab5a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801aafa:	f003 0308 	and.w	r3, r3, #8
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d024      	beq.n	801ab4c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ab02:	8afb      	ldrh	r3, [r7, #22]
 801ab04:	4619      	mov	r1, r3
 801ab06:	6878      	ldr	r0, [r7, #4]
 801ab08:	f7f6 fa4a 	bl	8010fa0 <pbuf_remove_header>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d11e      	bne.n	801ab50 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801ab12:	6839      	ldr	r1, [r7, #0]
 801ab14:	6878      	ldr	r0, [r7, #4]
 801ab16:	f7fe fdfd 	bl	8019714 <ip4_input>
      break;
 801ab1a:	e013      	b.n	801ab44 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801ab22:	f003 0308 	and.w	r3, r3, #8
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d014      	beq.n	801ab54 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ab2a:	8afb      	ldrh	r3, [r7, #22]
 801ab2c:	4619      	mov	r1, r3
 801ab2e:	6878      	ldr	r0, [r7, #4]
 801ab30:	f7f6 fa36 	bl	8010fa0 <pbuf_remove_header>
 801ab34:	4603      	mov	r3, r0
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d10e      	bne.n	801ab58 <ethernet_input+0x104>
        etharp_input(p, netif);
 801ab3a:	6839      	ldr	r1, [r7, #0]
 801ab3c:	6878      	ldr	r0, [r7, #4]
 801ab3e:	f7fd ff9d 	bl	8018a7c <etharp_input>
      break;
 801ab42:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ab44:	2300      	movs	r3, #0
 801ab46:	e00c      	b.n	801ab62 <ethernet_input+0x10e>
    goto free_and_return;
 801ab48:	bf00      	nop
 801ab4a:	e006      	b.n	801ab5a <ethernet_input+0x106>
        goto free_and_return;
 801ab4c:	bf00      	nop
 801ab4e:	e004      	b.n	801ab5a <ethernet_input+0x106>
        goto free_and_return;
 801ab50:	bf00      	nop
 801ab52:	e002      	b.n	801ab5a <ethernet_input+0x106>
        goto free_and_return;
 801ab54:	bf00      	nop
 801ab56:	e000      	b.n	801ab5a <ethernet_input+0x106>
        goto free_and_return;
 801ab58:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ab5a:	6878      	ldr	r0, [r7, #4]
 801ab5c:	f7f6 faa6 	bl	80110ac <pbuf_free>
  return ERR_OK;
 801ab60:	2300      	movs	r3, #0
}
 801ab62:	4618      	mov	r0, r3
 801ab64:	3718      	adds	r7, #24
 801ab66:	46bd      	mov	sp, r7
 801ab68:	bd80      	pop	{r7, pc}
 801ab6a:	bf00      	nop
 801ab6c:	080296d8 	.word	0x080296d8

0801ab70 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b086      	sub	sp, #24
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	60f8      	str	r0, [r7, #12]
 801ab78:	60b9      	str	r1, [r7, #8]
 801ab7a:	607a      	str	r2, [r7, #4]
 801ab7c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ab7e:	8c3b      	ldrh	r3, [r7, #32]
 801ab80:	4618      	mov	r0, r3
 801ab82:	f7f4 ff01 	bl	800f988 <lwip_htons>
 801ab86:	4603      	mov	r3, r0
 801ab88:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ab8a:	210e      	movs	r1, #14
 801ab8c:	68b8      	ldr	r0, [r7, #8]
 801ab8e:	f7f6 f9f7 	bl	8010f80 <pbuf_add_header>
 801ab92:	4603      	mov	r3, r0
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d125      	bne.n	801abe4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ab98:	68bb      	ldr	r3, [r7, #8]
 801ab9a:	685b      	ldr	r3, [r3, #4]
 801ab9c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ab9e:	693b      	ldr	r3, [r7, #16]
 801aba0:	8afa      	ldrh	r2, [r7, #22]
 801aba2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801aba4:	693b      	ldr	r3, [r7, #16]
 801aba6:	2206      	movs	r2, #6
 801aba8:	6839      	ldr	r1, [r7, #0]
 801abaa:	4618      	mov	r0, r3
 801abac:	f000 fb36 	bl	801b21c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801abb0:	693b      	ldr	r3, [r7, #16]
 801abb2:	3306      	adds	r3, #6
 801abb4:	2206      	movs	r2, #6
 801abb6:	6879      	ldr	r1, [r7, #4]
 801abb8:	4618      	mov	r0, r3
 801abba:	f000 fb2f 	bl	801b21c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801abc4:	2b06      	cmp	r3, #6
 801abc6:	d006      	beq.n	801abd6 <ethernet_output+0x66>
 801abc8:	4b0a      	ldr	r3, [pc, #40]	; (801abf4 <ethernet_output+0x84>)
 801abca:	f44f 7299 	mov.w	r2, #306	; 0x132
 801abce:	490a      	ldr	r1, [pc, #40]	; (801abf8 <ethernet_output+0x88>)
 801abd0:	480a      	ldr	r0, [pc, #40]	; (801abfc <ethernet_output+0x8c>)
 801abd2:	f000 fdd1 	bl	801b778 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	699b      	ldr	r3, [r3, #24]
 801abda:	68b9      	ldr	r1, [r7, #8]
 801abdc:	68f8      	ldr	r0, [r7, #12]
 801abde:	4798      	blx	r3
 801abe0:	4603      	mov	r3, r0
 801abe2:	e002      	b.n	801abea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801abe4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801abe6:	f06f 0301 	mvn.w	r3, #1
}
 801abea:	4618      	mov	r0, r3
 801abec:	3718      	adds	r7, #24
 801abee:	46bd      	mov	sp, r7
 801abf0:	bd80      	pop	{r7, pc}
 801abf2:	bf00      	nop
 801abf4:	08027e00 	.word	0x08027e00
 801abf8:	08027e38 	.word	0x08027e38
 801abfc:	08027e6c 	.word	0x08027e6c

0801ac00 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ac00:	b580      	push	{r7, lr}
 801ac02:	b086      	sub	sp, #24
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	6078      	str	r0, [r7, #4]
 801ac08:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	60bb      	str	r3, [r7, #8]
 801ac0e:	2304      	movs	r3, #4
 801ac10:	60fb      	str	r3, [r7, #12]
 801ac12:	2300      	movs	r3, #0
 801ac14:	613b      	str	r3, [r7, #16]
 801ac16:	2300      	movs	r3, #0
 801ac18:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ac1a:	f107 0308 	add.w	r3, r7, #8
 801ac1e:	2100      	movs	r1, #0
 801ac20:	4618      	mov	r0, r3
 801ac22:	f7ef f8ce 	bl	8009dc2 <osMessageCreate>
 801ac26:	4602      	mov	r2, r0
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d102      	bne.n	801ac3a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801ac34:	f04f 33ff 	mov.w	r3, #4294967295
 801ac38:	e000      	b.n	801ac3c <sys_mbox_new+0x3c>

  return ERR_OK;
 801ac3a:	2300      	movs	r3, #0
}
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	3718      	adds	r7, #24
 801ac40:	46bd      	mov	sp, r7
 801ac42:	bd80      	pop	{r7, pc}

0801ac44 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ac44:	b580      	push	{r7, lr}
 801ac46:	b082      	sub	sp, #8
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	4618      	mov	r0, r3
 801ac52:	f7ef f993 	bl	8009f7c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f7ef f9a4 	bl	8009fa8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ac60:	bf00      	nop
 801ac62:	3708      	adds	r7, #8
 801ac64:	46bd      	mov	sp, r7
 801ac66:	bd80      	pop	{r7, pc}

0801ac68 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b084      	sub	sp, #16
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
 801ac70:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	6839      	ldr	r1, [r7, #0]
 801ac78:	2200      	movs	r2, #0
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7ef f8ca 	bl	8009e14 <osMessagePut>
 801ac80:	4603      	mov	r3, r0
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d102      	bne.n	801ac8c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ac86:	2300      	movs	r3, #0
 801ac88:	73fb      	strb	r3, [r7, #15]
 801ac8a:	e001      	b.n	801ac90 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ac8c:	23ff      	movs	r3, #255	; 0xff
 801ac8e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ac90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ac94:	4618      	mov	r0, r3
 801ac96:	3710      	adds	r7, #16
 801ac98:	46bd      	mov	sp, r7
 801ac9a:	bd80      	pop	{r7, pc}

0801ac9c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b08c      	sub	sp, #48	; 0x30
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	61f8      	str	r0, [r7, #28]
 801aca4:	61b9      	str	r1, [r7, #24]
 801aca6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801aca8:	f7ee feca 	bl	8009a40 <osKernelSysTick>
 801acac:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801acae:	697b      	ldr	r3, [r7, #20]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d017      	beq.n	801ace4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801acb4:	69fb      	ldr	r3, [r7, #28]
 801acb6:	6819      	ldr	r1, [r3, #0]
 801acb8:	f107 0320 	add.w	r3, r7, #32
 801acbc:	697a      	ldr	r2, [r7, #20]
 801acbe:	4618      	mov	r0, r3
 801acc0:	f7ef f8e8 	bl	8009e94 <osMessageGet>

    if(event.status == osEventMessage)
 801acc4:	6a3b      	ldr	r3, [r7, #32]
 801acc6:	2b10      	cmp	r3, #16
 801acc8:	d109      	bne.n	801acde <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801accc:	461a      	mov	r2, r3
 801acce:	69bb      	ldr	r3, [r7, #24]
 801acd0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801acd2:	f7ee feb5 	bl	8009a40 <osKernelSysTick>
 801acd6:	4602      	mov	r2, r0
 801acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acda:	1ad3      	subs	r3, r2, r3
 801acdc:	e019      	b.n	801ad12 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801acde:	f04f 33ff 	mov.w	r3, #4294967295
 801ace2:	e016      	b.n	801ad12 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ace4:	69fb      	ldr	r3, [r7, #28]
 801ace6:	6819      	ldr	r1, [r3, #0]
 801ace8:	463b      	mov	r3, r7
 801acea:	f04f 32ff 	mov.w	r2, #4294967295
 801acee:	4618      	mov	r0, r3
 801acf0:	f7ef f8d0 	bl	8009e94 <osMessageGet>
 801acf4:	f107 0320 	add.w	r3, r7, #32
 801acf8:	463a      	mov	r2, r7
 801acfa:	ca07      	ldmia	r2, {r0, r1, r2}
 801acfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad02:	461a      	mov	r2, r3
 801ad04:	69bb      	ldr	r3, [r7, #24]
 801ad06:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ad08:	f7ee fe9a 	bl	8009a40 <osKernelSysTick>
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad10:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	3730      	adds	r7, #48	; 0x30
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}

0801ad1a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ad1a:	b580      	push	{r7, lr}
 801ad1c:	b086      	sub	sp, #24
 801ad1e:	af00      	add	r7, sp, #0
 801ad20:	6078      	str	r0, [r7, #4]
 801ad22:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	6819      	ldr	r1, [r3, #0]
 801ad28:	f107 030c 	add.w	r3, r7, #12
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f7ef f8b0 	bl	8009e94 <osMessageGet>

  if(event.status == osEventMessage)
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	2b10      	cmp	r3, #16
 801ad38:	d105      	bne.n	801ad46 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801ad3a:	693b      	ldr	r3, [r7, #16]
 801ad3c:	461a      	mov	r2, r3
 801ad3e:	683b      	ldr	r3, [r7, #0]
 801ad40:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801ad42:	2300      	movs	r3, #0
 801ad44:	e001      	b.n	801ad4a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ad46:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	3718      	adds	r7, #24
 801ad4e:	46bd      	mov	sp, r7
 801ad50:	bd80      	pop	{r7, pc}

0801ad52 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ad52:	b480      	push	{r7}
 801ad54:	b083      	sub	sp, #12
 801ad56:	af00      	add	r7, sp, #0
 801ad58:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d101      	bne.n	801ad66 <sys_mbox_valid+0x14>
    return 0;
 801ad62:	2300      	movs	r3, #0
 801ad64:	e000      	b.n	801ad68 <sys_mbox_valid+0x16>
  else
    return 1;
 801ad66:	2301      	movs	r3, #1
}
 801ad68:	4618      	mov	r0, r3
 801ad6a:	370c      	adds	r7, #12
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad72:	4770      	bx	lr

0801ad74 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ad74:	b480      	push	{r7}
 801ad76:	b083      	sub	sp, #12
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	2200      	movs	r2, #0
 801ad80:	601a      	str	r2, [r3, #0]
}
 801ad82:	bf00      	nop
 801ad84:	370c      	adds	r7, #12
 801ad86:	46bd      	mov	sp, r7
 801ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8c:	4770      	bx	lr

0801ad8e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801ad8e:	b580      	push	{r7, lr}
 801ad90:	b084      	sub	sp, #16
 801ad92:	af00      	add	r7, sp, #0
 801ad94:	6078      	str	r0, [r7, #4]
 801ad96:	460b      	mov	r3, r1
 801ad98:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801ad9a:	2300      	movs	r3, #0
 801ad9c:	60bb      	str	r3, [r7, #8]
 801ad9e:	2300      	movs	r3, #0
 801ada0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801ada2:	f107 0308 	add.w	r3, r7, #8
 801ada6:	2101      	movs	r1, #1
 801ada8:	4618      	mov	r0, r3
 801adaa:	f7ee ff41 	bl	8009c30 <osSemaphoreCreate>
 801adae:	4602      	mov	r2, r0
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d102      	bne.n	801adc2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801adbc:	f04f 33ff 	mov.w	r3, #4294967295
 801adc0:	e009      	b.n	801add6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801adc2:	78fb      	ldrb	r3, [r7, #3]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d105      	bne.n	801add4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	2100      	movs	r1, #0
 801adce:	4618      	mov	r0, r3
 801add0:	f7ee ff60 	bl	8009c94 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801add4:	2300      	movs	r3, #0
}
 801add6:	4618      	mov	r0, r3
 801add8:	3710      	adds	r7, #16
 801adda:	46bd      	mov	sp, r7
 801addc:	bd80      	pop	{r7, pc}

0801adde <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801adde:	b580      	push	{r7, lr}
 801ade0:	b084      	sub	sp, #16
 801ade2:	af00      	add	r7, sp, #0
 801ade4:	6078      	str	r0, [r7, #4]
 801ade6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801ade8:	f7ee fe2a 	bl	8009a40 <osKernelSysTick>
 801adec:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d011      	beq.n	801ae18 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	6839      	ldr	r1, [r7, #0]
 801adfa:	4618      	mov	r0, r3
 801adfc:	f7ee ff4a 	bl	8009c94 <osSemaphoreWait>
 801ae00:	4603      	mov	r3, r0
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d105      	bne.n	801ae12 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801ae06:	f7ee fe1b 	bl	8009a40 <osKernelSysTick>
 801ae0a:	4602      	mov	r2, r0
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	1ad3      	subs	r3, r2, r3
 801ae10:	e012      	b.n	801ae38 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ae12:	f04f 33ff 	mov.w	r3, #4294967295
 801ae16:	e00f      	b.n	801ae38 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801ae18:	bf00      	nop
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	f04f 31ff 	mov.w	r1, #4294967295
 801ae22:	4618      	mov	r0, r3
 801ae24:	f7ee ff36 	bl	8009c94 <osSemaphoreWait>
 801ae28:	4603      	mov	r3, r0
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d1f5      	bne.n	801ae1a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801ae2e:	f7ee fe07 	bl	8009a40 <osKernelSysTick>
 801ae32:	4602      	mov	r2, r0
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ae38:	4618      	mov	r0, r3
 801ae3a:	3710      	adds	r7, #16
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	bd80      	pop	{r7, pc}

0801ae40 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801ae40:	b580      	push	{r7, lr}
 801ae42:	b082      	sub	sp, #8
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	f7ee ff6f 	bl	8009d30 <osSemaphoreRelease>
}
 801ae52:	bf00      	nop
 801ae54:	3708      	adds	r7, #8
 801ae56:	46bd      	mov	sp, r7
 801ae58:	bd80      	pop	{r7, pc}

0801ae5a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ae5a:	b580      	push	{r7, lr}
 801ae5c:	b082      	sub	sp, #8
 801ae5e:	af00      	add	r7, sp, #0
 801ae60:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	4618      	mov	r0, r3
 801ae68:	f7ee ff98 	bl	8009d9c <osSemaphoreDelete>
}
 801ae6c:	bf00      	nop
 801ae6e:	3708      	adds	r7, #8
 801ae70:	46bd      	mov	sp, r7
 801ae72:	bd80      	pop	{r7, pc}

0801ae74 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ae74:	b480      	push	{r7}
 801ae76:	b083      	sub	sp, #12
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d101      	bne.n	801ae88 <sys_sem_valid+0x14>
    return 0;
 801ae84:	2300      	movs	r3, #0
 801ae86:	e000      	b.n	801ae8a <sys_sem_valid+0x16>
  else
    return 1;
 801ae88:	2301      	movs	r3, #1
}
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	370c      	adds	r7, #12
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae94:	4770      	bx	lr

0801ae96 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ae96:	b480      	push	{r7}
 801ae98:	b083      	sub	sp, #12
 801ae9a:	af00      	add	r7, sp, #0
 801ae9c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	2200      	movs	r2, #0
 801aea2:	601a      	str	r2, [r3, #0]
}
 801aea4:	bf00      	nop
 801aea6:	370c      	adds	r7, #12
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeae:	4770      	bx	lr

0801aeb0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801aeb4:	4803      	ldr	r0, [pc, #12]	; (801aec4 <sys_init+0x14>)
 801aeb6:	f7ee fe1f 	bl	8009af8 <osMutexCreate>
 801aeba:	4603      	mov	r3, r0
 801aebc:	4a02      	ldr	r2, [pc, #8]	; (801aec8 <sys_init+0x18>)
 801aebe:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801aec0:	bf00      	nop
 801aec2:	bd80      	pop	{r7, pc}
 801aec4:	080296e8 	.word	0x080296e8
 801aec8:	2000be60 	.word	0x2000be60

0801aecc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801aecc:	b580      	push	{r7, lr}
 801aece:	b084      	sub	sp, #16
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801aed4:	2300      	movs	r3, #0
 801aed6:	60bb      	str	r3, [r7, #8]
 801aed8:	2300      	movs	r3, #0
 801aeda:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801aedc:	f107 0308 	add.w	r3, r7, #8
 801aee0:	4618      	mov	r0, r3
 801aee2:	f7ee fe09 	bl	8009af8 <osMutexCreate>
 801aee6:	4602      	mov	r2, r0
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d102      	bne.n	801aefa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801aef4:	f04f 33ff 	mov.w	r3, #4294967295
 801aef8:	e000      	b.n	801aefc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801aefa:	2300      	movs	r3, #0
}
 801aefc:	4618      	mov	r0, r3
 801aefe:	3710      	adds	r7, #16
 801af00:	46bd      	mov	sp, r7
 801af02:	bd80      	pop	{r7, pc}

0801af04 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b082      	sub	sp, #8
 801af08:	af00      	add	r7, sp, #0
 801af0a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	f04f 31ff 	mov.w	r1, #4294967295
 801af14:	4618      	mov	r0, r3
 801af16:	f7ee fe07 	bl	8009b28 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801af1a:	bf00      	nop
 801af1c:	3708      	adds	r7, #8
 801af1e:	46bd      	mov	sp, r7
 801af20:	bd80      	pop	{r7, pc}

0801af22 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801af22:	b580      	push	{r7, lr}
 801af24:	b082      	sub	sp, #8
 801af26:	af00      	add	r7, sp, #0
 801af28:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	4618      	mov	r0, r3
 801af30:	f7ee fe48 	bl	8009bc4 <osMutexRelease>
}
 801af34:	bf00      	nop
 801af36:	3708      	adds	r7, #8
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}

0801af3c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b08c      	sub	sp, #48	; 0x30
 801af40:	af00      	add	r7, sp, #0
 801af42:	60f8      	str	r0, [r7, #12]
 801af44:	60b9      	str	r1, [r7, #8]
 801af46:	607a      	str	r2, [r7, #4]
 801af48:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801af4a:	f107 0314 	add.w	r3, r7, #20
 801af4e:	2200      	movs	r2, #0
 801af50:	601a      	str	r2, [r3, #0]
 801af52:	605a      	str	r2, [r3, #4]
 801af54:	609a      	str	r2, [r3, #8]
 801af56:	60da      	str	r2, [r3, #12]
 801af58:	611a      	str	r2, [r3, #16]
 801af5a:	615a      	str	r2, [r3, #20]
 801af5c:	619a      	str	r2, [r3, #24]
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	617b      	str	r3, [r7, #20]
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	61bb      	str	r3, [r7, #24]
 801af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af68:	b21b      	sxth	r3, r3
 801af6a:	83bb      	strh	r3, [r7, #28]
 801af6c:	683b      	ldr	r3, [r7, #0]
 801af6e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801af70:	f107 0314 	add.w	r3, r7, #20
 801af74:	6879      	ldr	r1, [r7, #4]
 801af76:	4618      	mov	r0, r3
 801af78:	f7ee fd72 	bl	8009a60 <osThreadCreate>
 801af7c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801af7e:	4618      	mov	r0, r3
 801af80:	3730      	adds	r7, #48	; 0x30
 801af82:	46bd      	mov	sp, r7
 801af84:	bd80      	pop	{r7, pc}
	...

0801af88 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801af8c:	4b04      	ldr	r3, [pc, #16]	; (801afa0 <sys_arch_protect+0x18>)
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	f04f 31ff 	mov.w	r1, #4294967295
 801af94:	4618      	mov	r0, r3
 801af96:	f7ee fdc7 	bl	8009b28 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801af9a:	2301      	movs	r3, #1
}
 801af9c:	4618      	mov	r0, r3
 801af9e:	bd80      	pop	{r7, pc}
 801afa0:	2000be60 	.word	0x2000be60

0801afa4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b082      	sub	sp, #8
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801afac:	4b04      	ldr	r3, [pc, #16]	; (801afc0 <sys_arch_unprotect+0x1c>)
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	4618      	mov	r0, r3
 801afb2:	f7ee fe07 	bl	8009bc4 <osMutexRelease>
}
 801afb6:	bf00      	nop
 801afb8:	3708      	adds	r7, #8
 801afba:	46bd      	mov	sp, r7
 801afbc:	bd80      	pop	{r7, pc}
 801afbe:	bf00      	nop
 801afc0:	2000be60 	.word	0x2000be60

0801afc4 <atoi>:
 801afc4:	220a      	movs	r2, #10
 801afc6:	2100      	movs	r1, #0
 801afc8:	f000 bd12 	b.w	801b9f0 <strtol>

0801afcc <__libc_init_array>:
 801afcc:	b570      	push	{r4, r5, r6, lr}
 801afce:	4d0d      	ldr	r5, [pc, #52]	; (801b004 <__libc_init_array+0x38>)
 801afd0:	4c0d      	ldr	r4, [pc, #52]	; (801b008 <__libc_init_array+0x3c>)
 801afd2:	1b64      	subs	r4, r4, r5
 801afd4:	10a4      	asrs	r4, r4, #2
 801afd6:	2600      	movs	r6, #0
 801afd8:	42a6      	cmp	r6, r4
 801afda:	d109      	bne.n	801aff0 <__libc_init_array+0x24>
 801afdc:	4d0b      	ldr	r5, [pc, #44]	; (801b00c <__libc_init_array+0x40>)
 801afde:	4c0c      	ldr	r4, [pc, #48]	; (801b010 <__libc_init_array+0x44>)
 801afe0:	f009 fa10 	bl	8024404 <_init>
 801afe4:	1b64      	subs	r4, r4, r5
 801afe6:	10a4      	asrs	r4, r4, #2
 801afe8:	2600      	movs	r6, #0
 801afea:	42a6      	cmp	r6, r4
 801afec:	d105      	bne.n	801affa <__libc_init_array+0x2e>
 801afee:	bd70      	pop	{r4, r5, r6, pc}
 801aff0:	f855 3b04 	ldr.w	r3, [r5], #4
 801aff4:	4798      	blx	r3
 801aff6:	3601      	adds	r6, #1
 801aff8:	e7ee      	b.n	801afd8 <__libc_init_array+0xc>
 801affa:	f855 3b04 	ldr.w	r3, [r5], #4
 801affe:	4798      	blx	r3
 801b000:	3601      	adds	r6, #1
 801b002:	e7f2      	b.n	801afea <__libc_init_array+0x1e>
 801b004:	08029c18 	.word	0x08029c18
 801b008:	08029c18 	.word	0x08029c18
 801b00c:	08029c18 	.word	0x08029c18
 801b010:	08029c20 	.word	0x08029c20

0801b014 <localtime_r>:
 801b014:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b018:	4607      	mov	r7, r0
 801b01a:	9101      	str	r1, [sp, #4]
 801b01c:	f004 fd12 	bl	801fa44 <__gettzinfo>
 801b020:	9901      	ldr	r1, [sp, #4]
 801b022:	4680      	mov	r8, r0
 801b024:	4638      	mov	r0, r7
 801b026:	f004 fd11 	bl	801fa4c <gmtime_r>
 801b02a:	6943      	ldr	r3, [r0, #20]
 801b02c:	079a      	lsls	r2, r3, #30
 801b02e:	4604      	mov	r4, r0
 801b030:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801b034:	d105      	bne.n	801b042 <localtime_r+0x2e>
 801b036:	2264      	movs	r2, #100	; 0x64
 801b038:	fb96 f3f2 	sdiv	r3, r6, r2
 801b03c:	fb02 6313 	mls	r3, r2, r3, r6
 801b040:	bb7b      	cbnz	r3, 801b0a2 <localtime_r+0x8e>
 801b042:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801b046:	fb96 f5f3 	sdiv	r5, r6, r3
 801b04a:	fb03 6515 	mls	r5, r3, r5, r6
 801b04e:	fab5 f585 	clz	r5, r5
 801b052:	096d      	lsrs	r5, r5, #5
 801b054:	4b68      	ldr	r3, [pc, #416]	; (801b1f8 <localtime_r+0x1e4>)
 801b056:	2230      	movs	r2, #48	; 0x30
 801b058:	fb02 3505 	mla	r5, r2, r5, r3
 801b05c:	f001 ff5c 	bl	801cf18 <__tz_lock>
 801b060:	f001 ff66 	bl	801cf30 <_tzset_unlocked>
 801b064:	4b65      	ldr	r3, [pc, #404]	; (801b1fc <localtime_r+0x1e8>)
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	b353      	cbz	r3, 801b0c0 <localtime_r+0xac>
 801b06a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b06e:	42b3      	cmp	r3, r6
 801b070:	d119      	bne.n	801b0a6 <localtime_r+0x92>
 801b072:	f8d8 1000 	ldr.w	r1, [r8]
 801b076:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b07a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801b07e:	b9d1      	cbnz	r1, 801b0b6 <localtime_r+0xa2>
 801b080:	4296      	cmp	r6, r2
 801b082:	eb77 0303 	sbcs.w	r3, r7, r3
 801b086:	da23      	bge.n	801b0d0 <localtime_r+0xbc>
 801b088:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b08c:	4296      	cmp	r6, r2
 801b08e:	eb77 0303 	sbcs.w	r3, r7, r3
 801b092:	bfb4      	ite	lt
 801b094:	2301      	movlt	r3, #1
 801b096:	2300      	movge	r3, #0
 801b098:	6223      	str	r3, [r4, #32]
 801b09a:	db1b      	blt.n	801b0d4 <localtime_r+0xc0>
 801b09c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801b0a0:	e01a      	b.n	801b0d8 <localtime_r+0xc4>
 801b0a2:	2501      	movs	r5, #1
 801b0a4:	e7d6      	b.n	801b054 <localtime_r+0x40>
 801b0a6:	4630      	mov	r0, r6
 801b0a8:	f001 fe8e 	bl	801cdc8 <__tzcalc_limits>
 801b0ac:	2800      	cmp	r0, #0
 801b0ae:	d1e0      	bne.n	801b072 <localtime_r+0x5e>
 801b0b0:	f04f 33ff 	mov.w	r3, #4294967295
 801b0b4:	e004      	b.n	801b0c0 <localtime_r+0xac>
 801b0b6:	4296      	cmp	r6, r2
 801b0b8:	eb77 0303 	sbcs.w	r3, r7, r3
 801b0bc:	da02      	bge.n	801b0c4 <localtime_r+0xb0>
 801b0be:	2300      	movs	r3, #0
 801b0c0:	6223      	str	r3, [r4, #32]
 801b0c2:	e7eb      	b.n	801b09c <localtime_r+0x88>
 801b0c4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b0c8:	4296      	cmp	r6, r2
 801b0ca:	eb77 0303 	sbcs.w	r3, r7, r3
 801b0ce:	daf6      	bge.n	801b0be <localtime_r+0xaa>
 801b0d0:	2301      	movs	r3, #1
 801b0d2:	6223      	str	r3, [r4, #32]
 801b0d4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801b0d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801b0dc:	203c      	movs	r0, #60	; 0x3c
 801b0de:	fb91 f6f3 	sdiv	r6, r1, r3
 801b0e2:	fb03 1316 	mls	r3, r3, r6, r1
 801b0e6:	6861      	ldr	r1, [r4, #4]
 801b0e8:	fb93 f2f0 	sdiv	r2, r3, r0
 801b0ec:	fb00 3012 	mls	r0, r0, r2, r3
 801b0f0:	6823      	ldr	r3, [r4, #0]
 801b0f2:	1a89      	subs	r1, r1, r2
 801b0f4:	68a2      	ldr	r2, [r4, #8]
 801b0f6:	6061      	str	r1, [r4, #4]
 801b0f8:	1a1b      	subs	r3, r3, r0
 801b0fa:	1b92      	subs	r2, r2, r6
 801b0fc:	2b3b      	cmp	r3, #59	; 0x3b
 801b0fe:	6023      	str	r3, [r4, #0]
 801b100:	60a2      	str	r2, [r4, #8]
 801b102:	dd35      	ble.n	801b170 <localtime_r+0x15c>
 801b104:	3101      	adds	r1, #1
 801b106:	6061      	str	r1, [r4, #4]
 801b108:	3b3c      	subs	r3, #60	; 0x3c
 801b10a:	6023      	str	r3, [r4, #0]
 801b10c:	6863      	ldr	r3, [r4, #4]
 801b10e:	2b3b      	cmp	r3, #59	; 0x3b
 801b110:	dd34      	ble.n	801b17c <localtime_r+0x168>
 801b112:	3201      	adds	r2, #1
 801b114:	60a2      	str	r2, [r4, #8]
 801b116:	3b3c      	subs	r3, #60	; 0x3c
 801b118:	6063      	str	r3, [r4, #4]
 801b11a:	68a3      	ldr	r3, [r4, #8]
 801b11c:	2b17      	cmp	r3, #23
 801b11e:	dd33      	ble.n	801b188 <localtime_r+0x174>
 801b120:	69e2      	ldr	r2, [r4, #28]
 801b122:	3201      	adds	r2, #1
 801b124:	61e2      	str	r2, [r4, #28]
 801b126:	69a2      	ldr	r2, [r4, #24]
 801b128:	3201      	adds	r2, #1
 801b12a:	2a06      	cmp	r2, #6
 801b12c:	bfc8      	it	gt
 801b12e:	2200      	movgt	r2, #0
 801b130:	61a2      	str	r2, [r4, #24]
 801b132:	68e2      	ldr	r2, [r4, #12]
 801b134:	3b18      	subs	r3, #24
 801b136:	3201      	adds	r2, #1
 801b138:	60a3      	str	r3, [r4, #8]
 801b13a:	6923      	ldr	r3, [r4, #16]
 801b13c:	60e2      	str	r2, [r4, #12]
 801b13e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801b142:	428a      	cmp	r2, r1
 801b144:	dd0e      	ble.n	801b164 <localtime_r+0x150>
 801b146:	2b0b      	cmp	r3, #11
 801b148:	eba2 0201 	sub.w	r2, r2, r1
 801b14c:	60e2      	str	r2, [r4, #12]
 801b14e:	f103 0201 	add.w	r2, r3, #1
 801b152:	bf09      	itett	eq
 801b154:	6963      	ldreq	r3, [r4, #20]
 801b156:	6122      	strne	r2, [r4, #16]
 801b158:	2200      	moveq	r2, #0
 801b15a:	3301      	addeq	r3, #1
 801b15c:	bf02      	ittt	eq
 801b15e:	6122      	streq	r2, [r4, #16]
 801b160:	6163      	streq	r3, [r4, #20]
 801b162:	61e2      	streq	r2, [r4, #28]
 801b164:	f001 fede 	bl	801cf24 <__tz_unlock>
 801b168:	4620      	mov	r0, r4
 801b16a:	b002      	add	sp, #8
 801b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b170:	2b00      	cmp	r3, #0
 801b172:	dacb      	bge.n	801b10c <localtime_r+0xf8>
 801b174:	3901      	subs	r1, #1
 801b176:	6061      	str	r1, [r4, #4]
 801b178:	333c      	adds	r3, #60	; 0x3c
 801b17a:	e7c6      	b.n	801b10a <localtime_r+0xf6>
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	dacc      	bge.n	801b11a <localtime_r+0x106>
 801b180:	3a01      	subs	r2, #1
 801b182:	60a2      	str	r2, [r4, #8]
 801b184:	333c      	adds	r3, #60	; 0x3c
 801b186:	e7c7      	b.n	801b118 <localtime_r+0x104>
 801b188:	2b00      	cmp	r3, #0
 801b18a:	daeb      	bge.n	801b164 <localtime_r+0x150>
 801b18c:	69e2      	ldr	r2, [r4, #28]
 801b18e:	3a01      	subs	r2, #1
 801b190:	61e2      	str	r2, [r4, #28]
 801b192:	69a2      	ldr	r2, [r4, #24]
 801b194:	3a01      	subs	r2, #1
 801b196:	bf48      	it	mi
 801b198:	2206      	movmi	r2, #6
 801b19a:	61a2      	str	r2, [r4, #24]
 801b19c:	68e2      	ldr	r2, [r4, #12]
 801b19e:	3318      	adds	r3, #24
 801b1a0:	3a01      	subs	r2, #1
 801b1a2:	60e2      	str	r2, [r4, #12]
 801b1a4:	60a3      	str	r3, [r4, #8]
 801b1a6:	2a00      	cmp	r2, #0
 801b1a8:	d1dc      	bne.n	801b164 <localtime_r+0x150>
 801b1aa:	6923      	ldr	r3, [r4, #16]
 801b1ac:	3b01      	subs	r3, #1
 801b1ae:	d405      	bmi.n	801b1bc <localtime_r+0x1a8>
 801b1b0:	6123      	str	r3, [r4, #16]
 801b1b2:	6923      	ldr	r3, [r4, #16]
 801b1b4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b1b8:	60e3      	str	r3, [r4, #12]
 801b1ba:	e7d3      	b.n	801b164 <localtime_r+0x150>
 801b1bc:	230b      	movs	r3, #11
 801b1be:	6123      	str	r3, [r4, #16]
 801b1c0:	6963      	ldr	r3, [r4, #20]
 801b1c2:	1e5a      	subs	r2, r3, #1
 801b1c4:	6162      	str	r2, [r4, #20]
 801b1c6:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801b1ca:	0793      	lsls	r3, r2, #30
 801b1cc:	d105      	bne.n	801b1da <localtime_r+0x1c6>
 801b1ce:	2164      	movs	r1, #100	; 0x64
 801b1d0:	fb92 f3f1 	sdiv	r3, r2, r1
 801b1d4:	fb01 2313 	mls	r3, r1, r3, r2
 801b1d8:	b963      	cbnz	r3, 801b1f4 <localtime_r+0x1e0>
 801b1da:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b1de:	fb92 f3f1 	sdiv	r3, r2, r1
 801b1e2:	fb01 2313 	mls	r3, r1, r3, r2
 801b1e6:	fab3 f383 	clz	r3, r3
 801b1ea:	095b      	lsrs	r3, r3, #5
 801b1ec:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801b1f0:	61e3      	str	r3, [r4, #28]
 801b1f2:	e7de      	b.n	801b1b2 <localtime_r+0x19e>
 801b1f4:	2301      	movs	r3, #1
 801b1f6:	e7f9      	b.n	801b1ec <localtime_r+0x1d8>
 801b1f8:	08029858 	.word	0x08029858
 801b1fc:	2000505c 	.word	0x2000505c

0801b200 <memcmp>:
 801b200:	b530      	push	{r4, r5, lr}
 801b202:	3901      	subs	r1, #1
 801b204:	2400      	movs	r4, #0
 801b206:	42a2      	cmp	r2, r4
 801b208:	d101      	bne.n	801b20e <memcmp+0xe>
 801b20a:	2000      	movs	r0, #0
 801b20c:	e005      	b.n	801b21a <memcmp+0x1a>
 801b20e:	5d03      	ldrb	r3, [r0, r4]
 801b210:	3401      	adds	r4, #1
 801b212:	5d0d      	ldrb	r5, [r1, r4]
 801b214:	42ab      	cmp	r3, r5
 801b216:	d0f6      	beq.n	801b206 <memcmp+0x6>
 801b218:	1b58      	subs	r0, r3, r5
 801b21a:	bd30      	pop	{r4, r5, pc}

0801b21c <memcpy>:
 801b21c:	440a      	add	r2, r1
 801b21e:	4291      	cmp	r1, r2
 801b220:	f100 33ff 	add.w	r3, r0, #4294967295
 801b224:	d100      	bne.n	801b228 <memcpy+0xc>
 801b226:	4770      	bx	lr
 801b228:	b510      	push	{r4, lr}
 801b22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b22e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b232:	4291      	cmp	r1, r2
 801b234:	d1f9      	bne.n	801b22a <memcpy+0xe>
 801b236:	bd10      	pop	{r4, pc}

0801b238 <memmove>:
 801b238:	4288      	cmp	r0, r1
 801b23a:	b510      	push	{r4, lr}
 801b23c:	eb01 0402 	add.w	r4, r1, r2
 801b240:	d902      	bls.n	801b248 <memmove+0x10>
 801b242:	4284      	cmp	r4, r0
 801b244:	4623      	mov	r3, r4
 801b246:	d807      	bhi.n	801b258 <memmove+0x20>
 801b248:	1e43      	subs	r3, r0, #1
 801b24a:	42a1      	cmp	r1, r4
 801b24c:	d008      	beq.n	801b260 <memmove+0x28>
 801b24e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b252:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b256:	e7f8      	b.n	801b24a <memmove+0x12>
 801b258:	4402      	add	r2, r0
 801b25a:	4601      	mov	r1, r0
 801b25c:	428a      	cmp	r2, r1
 801b25e:	d100      	bne.n	801b262 <memmove+0x2a>
 801b260:	bd10      	pop	{r4, pc}
 801b262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b26a:	e7f7      	b.n	801b25c <memmove+0x24>

0801b26c <memset>:
 801b26c:	4402      	add	r2, r0
 801b26e:	4603      	mov	r3, r0
 801b270:	4293      	cmp	r3, r2
 801b272:	d100      	bne.n	801b276 <memset+0xa>
 801b274:	4770      	bx	lr
 801b276:	f803 1b01 	strb.w	r1, [r3], #1
 801b27a:	e7f9      	b.n	801b270 <memset+0x4>

0801b27c <validate_structure>:
 801b27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b27e:	6801      	ldr	r1, [r0, #0]
 801b280:	293b      	cmp	r1, #59	; 0x3b
 801b282:	4604      	mov	r4, r0
 801b284:	d911      	bls.n	801b2aa <validate_structure+0x2e>
 801b286:	223c      	movs	r2, #60	; 0x3c
 801b288:	4668      	mov	r0, sp
 801b28a:	f003 fab3 	bl	801e7f4 <div>
 801b28e:	9a01      	ldr	r2, [sp, #4]
 801b290:	6863      	ldr	r3, [r4, #4]
 801b292:	9900      	ldr	r1, [sp, #0]
 801b294:	2a00      	cmp	r2, #0
 801b296:	440b      	add	r3, r1
 801b298:	6063      	str	r3, [r4, #4]
 801b29a:	bfbb      	ittet	lt
 801b29c:	323c      	addlt	r2, #60	; 0x3c
 801b29e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b2a2:	6022      	strge	r2, [r4, #0]
 801b2a4:	6022      	strlt	r2, [r4, #0]
 801b2a6:	bfb8      	it	lt
 801b2a8:	6063      	strlt	r3, [r4, #4]
 801b2aa:	6861      	ldr	r1, [r4, #4]
 801b2ac:	293b      	cmp	r1, #59	; 0x3b
 801b2ae:	d911      	bls.n	801b2d4 <validate_structure+0x58>
 801b2b0:	223c      	movs	r2, #60	; 0x3c
 801b2b2:	4668      	mov	r0, sp
 801b2b4:	f003 fa9e 	bl	801e7f4 <div>
 801b2b8:	9a01      	ldr	r2, [sp, #4]
 801b2ba:	68a3      	ldr	r3, [r4, #8]
 801b2bc:	9900      	ldr	r1, [sp, #0]
 801b2be:	2a00      	cmp	r2, #0
 801b2c0:	440b      	add	r3, r1
 801b2c2:	60a3      	str	r3, [r4, #8]
 801b2c4:	bfbb      	ittet	lt
 801b2c6:	323c      	addlt	r2, #60	; 0x3c
 801b2c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b2cc:	6062      	strge	r2, [r4, #4]
 801b2ce:	6062      	strlt	r2, [r4, #4]
 801b2d0:	bfb8      	it	lt
 801b2d2:	60a3      	strlt	r3, [r4, #8]
 801b2d4:	68a1      	ldr	r1, [r4, #8]
 801b2d6:	2917      	cmp	r1, #23
 801b2d8:	d911      	bls.n	801b2fe <validate_structure+0x82>
 801b2da:	2218      	movs	r2, #24
 801b2dc:	4668      	mov	r0, sp
 801b2de:	f003 fa89 	bl	801e7f4 <div>
 801b2e2:	9a01      	ldr	r2, [sp, #4]
 801b2e4:	68e3      	ldr	r3, [r4, #12]
 801b2e6:	9900      	ldr	r1, [sp, #0]
 801b2e8:	2a00      	cmp	r2, #0
 801b2ea:	440b      	add	r3, r1
 801b2ec:	60e3      	str	r3, [r4, #12]
 801b2ee:	bfbb      	ittet	lt
 801b2f0:	3218      	addlt	r2, #24
 801b2f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b2f6:	60a2      	strge	r2, [r4, #8]
 801b2f8:	60a2      	strlt	r2, [r4, #8]
 801b2fa:	bfb8      	it	lt
 801b2fc:	60e3      	strlt	r3, [r4, #12]
 801b2fe:	6921      	ldr	r1, [r4, #16]
 801b300:	290b      	cmp	r1, #11
 801b302:	d911      	bls.n	801b328 <validate_structure+0xac>
 801b304:	220c      	movs	r2, #12
 801b306:	4668      	mov	r0, sp
 801b308:	f003 fa74 	bl	801e7f4 <div>
 801b30c:	9a01      	ldr	r2, [sp, #4]
 801b30e:	6963      	ldr	r3, [r4, #20]
 801b310:	9900      	ldr	r1, [sp, #0]
 801b312:	2a00      	cmp	r2, #0
 801b314:	440b      	add	r3, r1
 801b316:	6163      	str	r3, [r4, #20]
 801b318:	bfbb      	ittet	lt
 801b31a:	320c      	addlt	r2, #12
 801b31c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b320:	6122      	strge	r2, [r4, #16]
 801b322:	6122      	strlt	r2, [r4, #16]
 801b324:	bfb8      	it	lt
 801b326:	6163      	strlt	r3, [r4, #20]
 801b328:	6963      	ldr	r3, [r4, #20]
 801b32a:	0799      	lsls	r1, r3, #30
 801b32c:	d120      	bne.n	801b370 <validate_structure+0xf4>
 801b32e:	2164      	movs	r1, #100	; 0x64
 801b330:	fb93 f2f1 	sdiv	r2, r3, r1
 801b334:	fb01 3212 	mls	r2, r1, r2, r3
 801b338:	b9e2      	cbnz	r2, 801b374 <validate_structure+0xf8>
 801b33a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801b33e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b342:	fb93 f2f1 	sdiv	r2, r3, r1
 801b346:	fb01 3312 	mls	r3, r1, r2, r3
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	bf14      	ite	ne
 801b34e:	231c      	movne	r3, #28
 801b350:	231d      	moveq	r3, #29
 801b352:	68e2      	ldr	r2, [r4, #12]
 801b354:	2a00      	cmp	r2, #0
 801b356:	dc0f      	bgt.n	801b378 <validate_structure+0xfc>
 801b358:	4f33      	ldr	r7, [pc, #204]	; (801b428 <validate_structure+0x1ac>)
 801b35a:	260b      	movs	r6, #11
 801b35c:	2064      	movs	r0, #100	; 0x64
 801b35e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801b362:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801b366:	f1bc 0f00 	cmp.w	ip, #0
 801b36a:	dd31      	ble.n	801b3d0 <validate_structure+0x154>
 801b36c:	b003      	add	sp, #12
 801b36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b370:	231c      	movs	r3, #28
 801b372:	e7ee      	b.n	801b352 <validate_structure+0xd6>
 801b374:	231d      	movs	r3, #29
 801b376:	e7ec      	b.n	801b352 <validate_structure+0xd6>
 801b378:	4f2b      	ldr	r7, [pc, #172]	; (801b428 <validate_structure+0x1ac>)
 801b37a:	f04f 0c00 	mov.w	ip, #0
 801b37e:	2564      	movs	r5, #100	; 0x64
 801b380:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801b384:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801b388:	2a01      	cmp	r2, #1
 801b38a:	bf14      	ite	ne
 801b38c:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801b390:	4618      	moveq	r0, r3
 801b392:	4281      	cmp	r1, r0
 801b394:	ddea      	ble.n	801b36c <validate_structure+0xf0>
 801b396:	3201      	adds	r2, #1
 801b398:	1a09      	subs	r1, r1, r0
 801b39a:	2a0c      	cmp	r2, #12
 801b39c:	60e1      	str	r1, [r4, #12]
 801b39e:	6122      	str	r2, [r4, #16]
 801b3a0:	d1f0      	bne.n	801b384 <validate_structure+0x108>
 801b3a2:	6963      	ldr	r3, [r4, #20]
 801b3a4:	1c5a      	adds	r2, r3, #1
 801b3a6:	0791      	lsls	r1, r2, #30
 801b3a8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801b3ac:	d137      	bne.n	801b41e <validate_structure+0x1a2>
 801b3ae:	fb92 f1f5 	sdiv	r1, r2, r5
 801b3b2:	fb05 2211 	mls	r2, r5, r1, r2
 801b3b6:	2a00      	cmp	r2, #0
 801b3b8:	d133      	bne.n	801b422 <validate_structure+0x1a6>
 801b3ba:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801b3be:	fb93 f2f6 	sdiv	r2, r3, r6
 801b3c2:	fb06 3312 	mls	r3, r6, r2, r3
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	bf14      	ite	ne
 801b3ca:	231c      	movne	r3, #28
 801b3cc:	231d      	moveq	r3, #29
 801b3ce:	e7d9      	b.n	801b384 <validate_structure+0x108>
 801b3d0:	6921      	ldr	r1, [r4, #16]
 801b3d2:	3901      	subs	r1, #1
 801b3d4:	6121      	str	r1, [r4, #16]
 801b3d6:	3101      	adds	r1, #1
 801b3d8:	d114      	bne.n	801b404 <validate_structure+0x188>
 801b3da:	6963      	ldr	r3, [r4, #20]
 801b3dc:	1e59      	subs	r1, r3, #1
 801b3de:	078a      	lsls	r2, r1, #30
 801b3e0:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801b3e4:	d117      	bne.n	801b416 <validate_structure+0x19a>
 801b3e6:	fb91 f2f0 	sdiv	r2, r1, r0
 801b3ea:	fb00 1112 	mls	r1, r0, r2, r1
 801b3ee:	b9a1      	cbnz	r1, 801b41a <validate_structure+0x19e>
 801b3f0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801b3f4:	fb93 f2f5 	sdiv	r2, r3, r5
 801b3f8:	fb05 3312 	mls	r3, r5, r2, r3
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	bf14      	ite	ne
 801b400:	231c      	movne	r3, #28
 801b402:	231d      	moveq	r3, #29
 801b404:	6922      	ldr	r2, [r4, #16]
 801b406:	2a01      	cmp	r2, #1
 801b408:	bf14      	ite	ne
 801b40a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801b40e:	461a      	moveq	r2, r3
 801b410:	4462      	add	r2, ip
 801b412:	60e2      	str	r2, [r4, #12]
 801b414:	e7a5      	b.n	801b362 <validate_structure+0xe6>
 801b416:	231c      	movs	r3, #28
 801b418:	e7f4      	b.n	801b404 <validate_structure+0x188>
 801b41a:	231d      	movs	r3, #29
 801b41c:	e7f2      	b.n	801b404 <validate_structure+0x188>
 801b41e:	231c      	movs	r3, #28
 801b420:	e7b0      	b.n	801b384 <validate_structure+0x108>
 801b422:	231d      	movs	r3, #29
 801b424:	e7ae      	b.n	801b384 <validate_structure+0x108>
 801b426:	bf00      	nop
 801b428:	080297f8 	.word	0x080297f8

0801b42c <mktime>:
 801b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b430:	b08b      	sub	sp, #44	; 0x2c
 801b432:	4605      	mov	r5, r0
 801b434:	f004 fb06 	bl	801fa44 <__gettzinfo>
 801b438:	4607      	mov	r7, r0
 801b43a:	4628      	mov	r0, r5
 801b43c:	f7ff ff1e 	bl	801b27c <validate_structure>
 801b440:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b444:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801b448:	68a8      	ldr	r0, [r5, #8]
 801b44a:	696e      	ldr	r6, [r5, #20]
 801b44c:	fb0a 2303 	mla	r3, sl, r3, r2
 801b450:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801b454:	fb0a 3a00 	mla	sl, sl, r0, r3
 801b458:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801b45c:	4ac3      	ldr	r2, [pc, #780]	; (801b76c <mktime+0x340>)
 801b45e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b462:	3c01      	subs	r4, #1
 801b464:	2b01      	cmp	r3, #1
 801b466:	4414      	add	r4, r2
 801b468:	dd11      	ble.n	801b48e <mktime+0x62>
 801b46a:	07b1      	lsls	r1, r6, #30
 801b46c:	d10f      	bne.n	801b48e <mktime+0x62>
 801b46e:	2264      	movs	r2, #100	; 0x64
 801b470:	fb96 f3f2 	sdiv	r3, r6, r2
 801b474:	fb02 6313 	mls	r3, r2, r3, r6
 801b478:	b943      	cbnz	r3, 801b48c <mktime+0x60>
 801b47a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b47e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b482:	fb91 f3f2 	sdiv	r3, r1, r2
 801b486:	fb02 1313 	mls	r3, r2, r3, r1
 801b48a:	b903      	cbnz	r3, 801b48e <mktime+0x62>
 801b48c:	3401      	adds	r4, #1
 801b48e:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801b492:	3310      	adds	r3, #16
 801b494:	f644 6220 	movw	r2, #20000	; 0x4e20
 801b498:	4293      	cmp	r3, r2
 801b49a:	61ec      	str	r4, [r5, #28]
 801b49c:	f200 8161 	bhi.w	801b762 <mktime+0x336>
 801b4a0:	2e46      	cmp	r6, #70	; 0x46
 801b4a2:	dd77      	ble.n	801b594 <mktime+0x168>
 801b4a4:	2346      	movs	r3, #70	; 0x46
 801b4a6:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b4aa:	2164      	movs	r1, #100	; 0x64
 801b4ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b4b0:	079a      	lsls	r2, r3, #30
 801b4b2:	d169      	bne.n	801b588 <mktime+0x15c>
 801b4b4:	fb93 f2f1 	sdiv	r2, r3, r1
 801b4b8:	fb01 3212 	mls	r2, r1, r2, r3
 801b4bc:	2a00      	cmp	r2, #0
 801b4be:	d166      	bne.n	801b58e <mktime+0x162>
 801b4c0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b4c4:	fb9c f2f0 	sdiv	r2, ip, r0
 801b4c8:	fb00 c212 	mls	r2, r0, r2, ip
 801b4cc:	2a00      	cmp	r2, #0
 801b4ce:	bf14      	ite	ne
 801b4d0:	4672      	movne	r2, lr
 801b4d2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b4d6:	3301      	adds	r3, #1
 801b4d8:	429e      	cmp	r6, r3
 801b4da:	4414      	add	r4, r2
 801b4dc:	d1e8      	bne.n	801b4b0 <mktime+0x84>
 801b4de:	4ba4      	ldr	r3, [pc, #656]	; (801b770 <mktime+0x344>)
 801b4e0:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801b4e4:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801b4e8:	f001 fd16 	bl	801cf18 <__tz_lock>
 801b4ec:	f001 fd20 	bl	801cf30 <_tzset_unlocked>
 801b4f0:	4ba0      	ldr	r3, [pc, #640]	; (801b774 <mktime+0x348>)
 801b4f2:	f8d3 9000 	ldr.w	r9, [r3]
 801b4f6:	f1b9 0f00 	cmp.w	r9, #0
 801b4fa:	d03f      	beq.n	801b57c <mktime+0x150>
 801b4fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801b500:	6968      	ldr	r0, [r5, #20]
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	f1b9 0f01 	cmp.w	r9, #1
 801b508:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801b50c:	46c8      	mov	r8, r9
 801b50e:	bfa8      	it	ge
 801b510:	f04f 0801 	movge.w	r8, #1
 801b514:	4283      	cmp	r3, r0
 801b516:	d17f      	bne.n	801b618 <mktime+0x1ec>
 801b518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b51a:	4619      	mov	r1, r3
 801b51c:	17da      	asrs	r2, r3, #31
 801b51e:	e9cd 1200 	strd	r1, r2, [sp]
 801b522:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801b526:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b52a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b52e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b530:	1a80      	subs	r0, r0, r2
 801b532:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801b536:	4582      	cmp	sl, r0
 801b538:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b53c:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b540:	da71      	bge.n	801b626 <mktime+0x1fa>
 801b542:	9800      	ldr	r0, [sp, #0]
 801b544:	6a39      	ldr	r1, [r7, #32]
 801b546:	1a09      	subs	r1, r1, r0
 801b548:	9104      	str	r1, [sp, #16]
 801b54a:	9801      	ldr	r0, [sp, #4]
 801b54c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b54e:	eb61 0100 	sbc.w	r1, r1, r0
 801b552:	9105      	str	r1, [sp, #20]
 801b554:	6839      	ldr	r1, [r7, #0]
 801b556:	2900      	cmp	r1, #0
 801b558:	d075      	beq.n	801b646 <mktime+0x21a>
 801b55a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b55e:	4582      	cmp	sl, r0
 801b560:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b564:	db05      	blt.n	801b572 <mktime+0x146>
 801b566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b56a:	4582      	cmp	sl, r0
 801b56c:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b570:	db6f      	blt.n	801b652 <mktime+0x226>
 801b572:	f1b9 0f00 	cmp.w	r9, #0
 801b576:	f04f 0900 	mov.w	r9, #0
 801b57a:	da6f      	bge.n	801b65c <mktime+0x230>
 801b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b57e:	eb1a 0a03 	adds.w	sl, sl, r3
 801b582:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b586:	e0ae      	b.n	801b6e6 <mktime+0x2ba>
 801b588:	f240 126d 	movw	r2, #365	; 0x16d
 801b58c:	e7a3      	b.n	801b4d6 <mktime+0xaa>
 801b58e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b592:	e7a0      	b.n	801b4d6 <mktime+0xaa>
 801b594:	d0a3      	beq.n	801b4de <mktime+0xb2>
 801b596:	2345      	movs	r3, #69	; 0x45
 801b598:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b59c:	2164      	movs	r1, #100	; 0x64
 801b59e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b5a2:	e012      	b.n	801b5ca <mktime+0x19e>
 801b5a4:	bb62      	cbnz	r2, 801b600 <mktime+0x1d4>
 801b5a6:	fb93 f2f1 	sdiv	r2, r3, r1
 801b5aa:	fb01 3212 	mls	r2, r1, r2, r3
 801b5ae:	bb52      	cbnz	r2, 801b606 <mktime+0x1da>
 801b5b0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b5b4:	fb9c f2f0 	sdiv	r2, ip, r0
 801b5b8:	fb00 c212 	mls	r2, r0, r2, ip
 801b5bc:	2a00      	cmp	r2, #0
 801b5be:	bf14      	ite	ne
 801b5c0:	4672      	movne	r2, lr
 801b5c2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b5c6:	1aa4      	subs	r4, r4, r2
 801b5c8:	3b01      	subs	r3, #1
 801b5ca:	429e      	cmp	r6, r3
 801b5cc:	f003 0203 	and.w	r2, r3, #3
 801b5d0:	dbe8      	blt.n	801b5a4 <mktime+0x178>
 801b5d2:	b9da      	cbnz	r2, 801b60c <mktime+0x1e0>
 801b5d4:	2264      	movs	r2, #100	; 0x64
 801b5d6:	fb96 f3f2 	sdiv	r3, r6, r2
 801b5da:	fb02 6313 	mls	r3, r2, r3, r6
 801b5de:	b9c3      	cbnz	r3, 801b612 <mktime+0x1e6>
 801b5e0:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b5e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b5e8:	fb91 f3f2 	sdiv	r3, r1, r2
 801b5ec:	fb02 1313 	mls	r3, r2, r3, r1
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	f240 136d 	movw	r3, #365	; 0x16d
 801b5f6:	bf08      	it	eq
 801b5f8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801b5fc:	1ae4      	subs	r4, r4, r3
 801b5fe:	e76e      	b.n	801b4de <mktime+0xb2>
 801b600:	f240 126d 	movw	r2, #365	; 0x16d
 801b604:	e7df      	b.n	801b5c6 <mktime+0x19a>
 801b606:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b60a:	e7dc      	b.n	801b5c6 <mktime+0x19a>
 801b60c:	f240 136d 	movw	r3, #365	; 0x16d
 801b610:	e7f4      	b.n	801b5fc <mktime+0x1d0>
 801b612:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801b616:	e7f1      	b.n	801b5fc <mktime+0x1d0>
 801b618:	f001 fbd6 	bl	801cdc8 <__tzcalc_limits>
 801b61c:	2800      	cmp	r0, #0
 801b61e:	f47f af7b 	bne.w	801b518 <mktime+0xec>
 801b622:	46c1      	mov	r9, r8
 801b624:	e054      	b.n	801b6d0 <mktime+0x2a4>
 801b626:	9800      	ldr	r0, [sp, #0]
 801b628:	9902      	ldr	r1, [sp, #8]
 801b62a:	1a09      	subs	r1, r1, r0
 801b62c:	9108      	str	r1, [sp, #32]
 801b62e:	9801      	ldr	r0, [sp, #4]
 801b630:	9903      	ldr	r1, [sp, #12]
 801b632:	eb61 0100 	sbc.w	r1, r1, r0
 801b636:	9109      	str	r1, [sp, #36]	; 0x24
 801b638:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b63c:	4582      	cmp	sl, r0
 801b63e:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b642:	dbee      	blt.n	801b622 <mktime+0x1f6>
 801b644:	e77d      	b.n	801b542 <mktime+0x116>
 801b646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b64a:	4582      	cmp	sl, r0
 801b64c:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b650:	db89      	blt.n	801b566 <mktime+0x13a>
 801b652:	f1b9 0f00 	cmp.w	r9, #0
 801b656:	db3f      	blt.n	801b6d8 <mktime+0x2ac>
 801b658:	f04f 0901 	mov.w	r9, #1
 801b65c:	ea88 0809 	eor.w	r8, r8, r9
 801b660:	f1b8 0f01 	cmp.w	r8, #1
 801b664:	d134      	bne.n	801b6d0 <mktime+0x2a4>
 801b666:	f1b9 0f00 	cmp.w	r9, #0
 801b66a:	d04f      	beq.n	801b70c <mktime+0x2e0>
 801b66c:	1ad3      	subs	r3, r2, r3
 801b66e:	682a      	ldr	r2, [r5, #0]
 801b670:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801b674:	441a      	add	r2, r3
 801b676:	eb1a 0a03 	adds.w	sl, sl, r3
 801b67a:	602a      	str	r2, [r5, #0]
 801b67c:	4628      	mov	r0, r5
 801b67e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b682:	f7ff fdfb 	bl	801b27c <validate_structure>
 801b686:	68ea      	ldr	r2, [r5, #12]
 801b688:	ebb2 0208 	subs.w	r2, r2, r8
 801b68c:	d020      	beq.n	801b6d0 <mktime+0x2a4>
 801b68e:	2a01      	cmp	r2, #1
 801b690:	dc3e      	bgt.n	801b710 <mktime+0x2e4>
 801b692:	1c90      	adds	r0, r2, #2
 801b694:	bfd8      	it	le
 801b696:	2201      	movle	r2, #1
 801b698:	69eb      	ldr	r3, [r5, #28]
 801b69a:	18d3      	adds	r3, r2, r3
 801b69c:	4414      	add	r4, r2
 801b69e:	d540      	bpl.n	801b722 <mktime+0x2f6>
 801b6a0:	1e72      	subs	r2, r6, #1
 801b6a2:	0791      	lsls	r1, r2, #30
 801b6a4:	d137      	bne.n	801b716 <mktime+0x2ea>
 801b6a6:	2164      	movs	r1, #100	; 0x64
 801b6a8:	fb92 f3f1 	sdiv	r3, r2, r1
 801b6ac:	fb01 2313 	mls	r3, r1, r3, r2
 801b6b0:	bba3      	cbnz	r3, 801b71c <mktime+0x2f0>
 801b6b2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801b6b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b6ba:	fb96 f3f2 	sdiv	r3, r6, r2
 801b6be:	fb02 6613 	mls	r6, r2, r3, r6
 801b6c2:	2e00      	cmp	r6, #0
 801b6c4:	f240 136d 	movw	r3, #365	; 0x16d
 801b6c8:	bf18      	it	ne
 801b6ca:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801b6ce:	61eb      	str	r3, [r5, #28]
 801b6d0:	f1b9 0f01 	cmp.w	r9, #1
 801b6d4:	f47f af52 	bne.w	801b57c <mktime+0x150>
 801b6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b6da:	eb1a 0a03 	adds.w	sl, sl, r3
 801b6de:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b6e2:	f04f 0901 	mov.w	r9, #1
 801b6e6:	f001 fc1d 	bl	801cf24 <__tz_unlock>
 801b6ea:	3404      	adds	r4, #4
 801b6ec:	2307      	movs	r3, #7
 801b6ee:	fb94 f3f3 	sdiv	r3, r4, r3
 801b6f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801b6f6:	1ae4      	subs	r4, r4, r3
 801b6f8:	bf48      	it	mi
 801b6fa:	3407      	addmi	r4, #7
 801b6fc:	f8c5 9020 	str.w	r9, [r5, #32]
 801b700:	61ac      	str	r4, [r5, #24]
 801b702:	4650      	mov	r0, sl
 801b704:	4659      	mov	r1, fp
 801b706:	b00b      	add	sp, #44	; 0x2c
 801b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b70c:	1a9b      	subs	r3, r3, r2
 801b70e:	e7ae      	b.n	801b66e <mktime+0x242>
 801b710:	f04f 32ff 	mov.w	r2, #4294967295
 801b714:	e7c0      	b.n	801b698 <mktime+0x26c>
 801b716:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801b71a:	e7d8      	b.n	801b6ce <mktime+0x2a2>
 801b71c:	f240 136d 	movw	r3, #365	; 0x16d
 801b720:	e7d5      	b.n	801b6ce <mktime+0x2a2>
 801b722:	07b2      	lsls	r2, r6, #30
 801b724:	d117      	bne.n	801b756 <mktime+0x32a>
 801b726:	2164      	movs	r1, #100	; 0x64
 801b728:	fb96 f2f1 	sdiv	r2, r6, r1
 801b72c:	fb01 6212 	mls	r2, r1, r2, r6
 801b730:	b9a2      	cbnz	r2, 801b75c <mktime+0x330>
 801b732:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801b736:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b73a:	fb96 f2f1 	sdiv	r2, r6, r1
 801b73e:	fb01 6612 	mls	r6, r1, r2, r6
 801b742:	2e00      	cmp	r6, #0
 801b744:	f240 126d 	movw	r2, #365	; 0x16d
 801b748:	bf08      	it	eq
 801b74a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b74e:	4293      	cmp	r3, r2
 801b750:	bfa8      	it	ge
 801b752:	1a9b      	subge	r3, r3, r2
 801b754:	e7bb      	b.n	801b6ce <mktime+0x2a2>
 801b756:	f240 126d 	movw	r2, #365	; 0x16d
 801b75a:	e7f8      	b.n	801b74e <mktime+0x322>
 801b75c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b760:	e7f5      	b.n	801b74e <mktime+0x322>
 801b762:	f04f 3aff 	mov.w	sl, #4294967295
 801b766:	f04f 3bff 	mov.w	fp, #4294967295
 801b76a:	e7ca      	b.n	801b702 <mktime+0x2d6>
 801b76c:	08029828 	.word	0x08029828
 801b770:	00015180 	.word	0x00015180
 801b774:	2000505c 	.word	0x2000505c

0801b778 <printf>:
 801b778:	b40f      	push	{r0, r1, r2, r3}
 801b77a:	b507      	push	{r0, r1, r2, lr}
 801b77c:	4906      	ldr	r1, [pc, #24]	; (801b798 <printf+0x20>)
 801b77e:	ab04      	add	r3, sp, #16
 801b780:	6808      	ldr	r0, [r1, #0]
 801b782:	f853 2b04 	ldr.w	r2, [r3], #4
 801b786:	6881      	ldr	r1, [r0, #8]
 801b788:	9301      	str	r3, [sp, #4]
 801b78a:	f001 fd55 	bl	801d238 <_vfprintf_r>
 801b78e:	b003      	add	sp, #12
 801b790:	f85d eb04 	ldr.w	lr, [sp], #4
 801b794:	b004      	add	sp, #16
 801b796:	4770      	bx	lr
 801b798:	20000038 	.word	0x20000038

0801b79c <rand>:
 801b79c:	4b0b      	ldr	r3, [pc, #44]	; (801b7cc <rand+0x30>)
 801b79e:	480c      	ldr	r0, [pc, #48]	; (801b7d0 <rand+0x34>)
 801b7a0:	6819      	ldr	r1, [r3, #0]
 801b7a2:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 801b7a6:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 801b7aa:	b510      	push	{r4, lr}
 801b7ac:	4c09      	ldr	r4, [pc, #36]	; (801b7d4 <rand+0x38>)
 801b7ae:	4350      	muls	r0, r2
 801b7b0:	fb04 0003 	mla	r0, r4, r3, r0
 801b7b4:	fba2 3404 	umull	r3, r4, r2, r4
 801b7b8:	1c5a      	adds	r2, r3, #1
 801b7ba:	4404      	add	r4, r0
 801b7bc:	f144 0000 	adc.w	r0, r4, #0
 801b7c0:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 801b7c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b7c8:	bd10      	pop	{r4, pc}
 801b7ca:	bf00      	nop
 801b7cc:	20000038 	.word	0x20000038
 801b7d0:	5851f42d 	.word	0x5851f42d
 801b7d4:	4c957f2d 	.word	0x4c957f2d

0801b7d8 <snprintf>:
 801b7d8:	b40c      	push	{r2, r3}
 801b7da:	b530      	push	{r4, r5, lr}
 801b7dc:	4b17      	ldr	r3, [pc, #92]	; (801b83c <snprintf+0x64>)
 801b7de:	1e0c      	subs	r4, r1, #0
 801b7e0:	681d      	ldr	r5, [r3, #0]
 801b7e2:	b09d      	sub	sp, #116	; 0x74
 801b7e4:	da08      	bge.n	801b7f8 <snprintf+0x20>
 801b7e6:	238b      	movs	r3, #139	; 0x8b
 801b7e8:	602b      	str	r3, [r5, #0]
 801b7ea:	f04f 30ff 	mov.w	r0, #4294967295
 801b7ee:	b01d      	add	sp, #116	; 0x74
 801b7f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b7f4:	b002      	add	sp, #8
 801b7f6:	4770      	bx	lr
 801b7f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b7fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b800:	bf14      	ite	ne
 801b802:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b806:	4623      	moveq	r3, r4
 801b808:	9304      	str	r3, [sp, #16]
 801b80a:	9307      	str	r3, [sp, #28]
 801b80c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b810:	9002      	str	r0, [sp, #8]
 801b812:	9006      	str	r0, [sp, #24]
 801b814:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b81a:	ab21      	add	r3, sp, #132	; 0x84
 801b81c:	a902      	add	r1, sp, #8
 801b81e:	4628      	mov	r0, r5
 801b820:	9301      	str	r3, [sp, #4]
 801b822:	f000 f8f1 	bl	801ba08 <_svfprintf_r>
 801b826:	1c43      	adds	r3, r0, #1
 801b828:	bfbc      	itt	lt
 801b82a:	238b      	movlt	r3, #139	; 0x8b
 801b82c:	602b      	strlt	r3, [r5, #0]
 801b82e:	2c00      	cmp	r4, #0
 801b830:	d0dd      	beq.n	801b7ee <snprintf+0x16>
 801b832:	9b02      	ldr	r3, [sp, #8]
 801b834:	2200      	movs	r2, #0
 801b836:	701a      	strb	r2, [r3, #0]
 801b838:	e7d9      	b.n	801b7ee <snprintf+0x16>
 801b83a:	bf00      	nop
 801b83c:	20000038 	.word	0x20000038

0801b840 <sprintf>:
 801b840:	b40e      	push	{r1, r2, r3}
 801b842:	b500      	push	{lr}
 801b844:	b09c      	sub	sp, #112	; 0x70
 801b846:	ab1d      	add	r3, sp, #116	; 0x74
 801b848:	9002      	str	r0, [sp, #8]
 801b84a:	9006      	str	r0, [sp, #24]
 801b84c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b850:	4809      	ldr	r0, [pc, #36]	; (801b878 <sprintf+0x38>)
 801b852:	9107      	str	r1, [sp, #28]
 801b854:	9104      	str	r1, [sp, #16]
 801b856:	4909      	ldr	r1, [pc, #36]	; (801b87c <sprintf+0x3c>)
 801b858:	f853 2b04 	ldr.w	r2, [r3], #4
 801b85c:	9105      	str	r1, [sp, #20]
 801b85e:	6800      	ldr	r0, [r0, #0]
 801b860:	9301      	str	r3, [sp, #4]
 801b862:	a902      	add	r1, sp, #8
 801b864:	f000 f8d0 	bl	801ba08 <_svfprintf_r>
 801b868:	9b02      	ldr	r3, [sp, #8]
 801b86a:	2200      	movs	r2, #0
 801b86c:	701a      	strb	r2, [r3, #0]
 801b86e:	b01c      	add	sp, #112	; 0x70
 801b870:	f85d eb04 	ldr.w	lr, [sp], #4
 801b874:	b003      	add	sp, #12
 801b876:	4770      	bx	lr
 801b878:	20000038 	.word	0x20000038
 801b87c:	ffff0208 	.word	0xffff0208

0801b880 <strchr>:
 801b880:	b2c9      	uxtb	r1, r1
 801b882:	4603      	mov	r3, r0
 801b884:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b888:	b11a      	cbz	r2, 801b892 <strchr+0x12>
 801b88a:	428a      	cmp	r2, r1
 801b88c:	d1f9      	bne.n	801b882 <strchr+0x2>
 801b88e:	4618      	mov	r0, r3
 801b890:	4770      	bx	lr
 801b892:	2900      	cmp	r1, #0
 801b894:	bf18      	it	ne
 801b896:	2300      	movne	r3, #0
 801b898:	e7f9      	b.n	801b88e <strchr+0xe>

0801b89a <strncmp>:
 801b89a:	b510      	push	{r4, lr}
 801b89c:	b16a      	cbz	r2, 801b8ba <strncmp+0x20>
 801b89e:	3901      	subs	r1, #1
 801b8a0:	1884      	adds	r4, r0, r2
 801b8a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b8a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	d103      	bne.n	801b8b6 <strncmp+0x1c>
 801b8ae:	42a0      	cmp	r0, r4
 801b8b0:	d001      	beq.n	801b8b6 <strncmp+0x1c>
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d1f5      	bne.n	801b8a2 <strncmp+0x8>
 801b8b6:	1a98      	subs	r0, r3, r2
 801b8b8:	bd10      	pop	{r4, pc}
 801b8ba:	4610      	mov	r0, r2
 801b8bc:	e7fc      	b.n	801b8b8 <strncmp+0x1e>

0801b8be <strncpy>:
 801b8be:	b510      	push	{r4, lr}
 801b8c0:	3901      	subs	r1, #1
 801b8c2:	4603      	mov	r3, r0
 801b8c4:	b132      	cbz	r2, 801b8d4 <strncpy+0x16>
 801b8c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b8ca:	f803 4b01 	strb.w	r4, [r3], #1
 801b8ce:	3a01      	subs	r2, #1
 801b8d0:	2c00      	cmp	r4, #0
 801b8d2:	d1f7      	bne.n	801b8c4 <strncpy+0x6>
 801b8d4:	441a      	add	r2, r3
 801b8d6:	2100      	movs	r1, #0
 801b8d8:	4293      	cmp	r3, r2
 801b8da:	d100      	bne.n	801b8de <strncpy+0x20>
 801b8dc:	bd10      	pop	{r4, pc}
 801b8de:	f803 1b01 	strb.w	r1, [r3], #1
 801b8e2:	e7f9      	b.n	801b8d8 <strncpy+0x1a>

0801b8e4 <_strtol_l.isra.0>:
 801b8e4:	2b01      	cmp	r3, #1
 801b8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8ea:	d001      	beq.n	801b8f0 <_strtol_l.isra.0+0xc>
 801b8ec:	2b24      	cmp	r3, #36	; 0x24
 801b8ee:	d906      	bls.n	801b8fe <_strtol_l.isra.0+0x1a>
 801b8f0:	f003 fdf6 	bl	801f4e0 <__errno>
 801b8f4:	2316      	movs	r3, #22
 801b8f6:	6003      	str	r3, [r0, #0]
 801b8f8:	2000      	movs	r0, #0
 801b8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8fe:	4f3a      	ldr	r7, [pc, #232]	; (801b9e8 <_strtol_l.isra.0+0x104>)
 801b900:	468e      	mov	lr, r1
 801b902:	4676      	mov	r6, lr
 801b904:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b908:	5de5      	ldrb	r5, [r4, r7]
 801b90a:	f015 0508 	ands.w	r5, r5, #8
 801b90e:	d1f8      	bne.n	801b902 <_strtol_l.isra.0+0x1e>
 801b910:	2c2d      	cmp	r4, #45	; 0x2d
 801b912:	d134      	bne.n	801b97e <_strtol_l.isra.0+0x9a>
 801b914:	f89e 4000 	ldrb.w	r4, [lr]
 801b918:	f04f 0801 	mov.w	r8, #1
 801b91c:	f106 0e02 	add.w	lr, r6, #2
 801b920:	2b00      	cmp	r3, #0
 801b922:	d05c      	beq.n	801b9de <_strtol_l.isra.0+0xfa>
 801b924:	2b10      	cmp	r3, #16
 801b926:	d10c      	bne.n	801b942 <_strtol_l.isra.0+0x5e>
 801b928:	2c30      	cmp	r4, #48	; 0x30
 801b92a:	d10a      	bne.n	801b942 <_strtol_l.isra.0+0x5e>
 801b92c:	f89e 4000 	ldrb.w	r4, [lr]
 801b930:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b934:	2c58      	cmp	r4, #88	; 0x58
 801b936:	d14d      	bne.n	801b9d4 <_strtol_l.isra.0+0xf0>
 801b938:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b93c:	2310      	movs	r3, #16
 801b93e:	f10e 0e02 	add.w	lr, lr, #2
 801b942:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b946:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b94a:	2600      	movs	r6, #0
 801b94c:	fbbc f9f3 	udiv	r9, ip, r3
 801b950:	4635      	mov	r5, r6
 801b952:	fb03 ca19 	mls	sl, r3, r9, ip
 801b956:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b95a:	2f09      	cmp	r7, #9
 801b95c:	d818      	bhi.n	801b990 <_strtol_l.isra.0+0xac>
 801b95e:	463c      	mov	r4, r7
 801b960:	42a3      	cmp	r3, r4
 801b962:	dd24      	ble.n	801b9ae <_strtol_l.isra.0+0xca>
 801b964:	2e00      	cmp	r6, #0
 801b966:	db1f      	blt.n	801b9a8 <_strtol_l.isra.0+0xc4>
 801b968:	45a9      	cmp	r9, r5
 801b96a:	d31d      	bcc.n	801b9a8 <_strtol_l.isra.0+0xc4>
 801b96c:	d101      	bne.n	801b972 <_strtol_l.isra.0+0x8e>
 801b96e:	45a2      	cmp	sl, r4
 801b970:	db1a      	blt.n	801b9a8 <_strtol_l.isra.0+0xc4>
 801b972:	fb05 4503 	mla	r5, r5, r3, r4
 801b976:	2601      	movs	r6, #1
 801b978:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b97c:	e7eb      	b.n	801b956 <_strtol_l.isra.0+0x72>
 801b97e:	2c2b      	cmp	r4, #43	; 0x2b
 801b980:	bf08      	it	eq
 801b982:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b986:	46a8      	mov	r8, r5
 801b988:	bf08      	it	eq
 801b98a:	f106 0e02 	addeq.w	lr, r6, #2
 801b98e:	e7c7      	b.n	801b920 <_strtol_l.isra.0+0x3c>
 801b990:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b994:	2f19      	cmp	r7, #25
 801b996:	d801      	bhi.n	801b99c <_strtol_l.isra.0+0xb8>
 801b998:	3c37      	subs	r4, #55	; 0x37
 801b99a:	e7e1      	b.n	801b960 <_strtol_l.isra.0+0x7c>
 801b99c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b9a0:	2f19      	cmp	r7, #25
 801b9a2:	d804      	bhi.n	801b9ae <_strtol_l.isra.0+0xca>
 801b9a4:	3c57      	subs	r4, #87	; 0x57
 801b9a6:	e7db      	b.n	801b960 <_strtol_l.isra.0+0x7c>
 801b9a8:	f04f 36ff 	mov.w	r6, #4294967295
 801b9ac:	e7e4      	b.n	801b978 <_strtol_l.isra.0+0x94>
 801b9ae:	2e00      	cmp	r6, #0
 801b9b0:	da05      	bge.n	801b9be <_strtol_l.isra.0+0xda>
 801b9b2:	2322      	movs	r3, #34	; 0x22
 801b9b4:	6003      	str	r3, [r0, #0]
 801b9b6:	4665      	mov	r5, ip
 801b9b8:	b942      	cbnz	r2, 801b9cc <_strtol_l.isra.0+0xe8>
 801b9ba:	4628      	mov	r0, r5
 801b9bc:	e79d      	b.n	801b8fa <_strtol_l.isra.0+0x16>
 801b9be:	f1b8 0f00 	cmp.w	r8, #0
 801b9c2:	d000      	beq.n	801b9c6 <_strtol_l.isra.0+0xe2>
 801b9c4:	426d      	negs	r5, r5
 801b9c6:	2a00      	cmp	r2, #0
 801b9c8:	d0f7      	beq.n	801b9ba <_strtol_l.isra.0+0xd6>
 801b9ca:	b10e      	cbz	r6, 801b9d0 <_strtol_l.isra.0+0xec>
 801b9cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 801b9d0:	6011      	str	r1, [r2, #0]
 801b9d2:	e7f2      	b.n	801b9ba <_strtol_l.isra.0+0xd6>
 801b9d4:	2430      	movs	r4, #48	; 0x30
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d1b3      	bne.n	801b942 <_strtol_l.isra.0+0x5e>
 801b9da:	2308      	movs	r3, #8
 801b9dc:	e7b1      	b.n	801b942 <_strtol_l.isra.0+0x5e>
 801b9de:	2c30      	cmp	r4, #48	; 0x30
 801b9e0:	d0a4      	beq.n	801b92c <_strtol_l.isra.0+0x48>
 801b9e2:	230a      	movs	r3, #10
 801b9e4:	e7ad      	b.n	801b942 <_strtol_l.isra.0+0x5e>
 801b9e6:	bf00      	nop
 801b9e8:	080296f1 	.word	0x080296f1

0801b9ec <_strtol_r>:
 801b9ec:	f7ff bf7a 	b.w	801b8e4 <_strtol_l.isra.0>

0801b9f0 <strtol>:
 801b9f0:	4613      	mov	r3, r2
 801b9f2:	460a      	mov	r2, r1
 801b9f4:	4601      	mov	r1, r0
 801b9f6:	4802      	ldr	r0, [pc, #8]	; (801ba00 <strtol+0x10>)
 801b9f8:	6800      	ldr	r0, [r0, #0]
 801b9fa:	f7ff bf73 	b.w	801b8e4 <_strtol_l.isra.0>
 801b9fe:	bf00      	nop
 801ba00:	20000038 	.word	0x20000038
 801ba04:	00000000 	.word	0x00000000

0801ba08 <_svfprintf_r>:
 801ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba0c:	ed2d 8b04 	vpush	{d8-d9}
 801ba10:	b0cf      	sub	sp, #316	; 0x13c
 801ba12:	4689      	mov	r9, r1
 801ba14:	4693      	mov	fp, r2
 801ba16:	461e      	mov	r6, r3
 801ba18:	4682      	mov	sl, r0
 801ba1a:	f004 f8c7 	bl	801fbac <_localeconv_r>
 801ba1e:	6803      	ldr	r3, [r0, #0]
 801ba20:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba22:	4618      	mov	r0, r3
 801ba24:	f7e4 fbfe 	bl	8000224 <strlen>
 801ba28:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801ba2c:	900e      	str	r0, [sp, #56]	; 0x38
 801ba2e:	0618      	lsls	r0, r3, #24
 801ba30:	d51a      	bpl.n	801ba68 <_svfprintf_r+0x60>
 801ba32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ba36:	b9bb      	cbnz	r3, 801ba68 <_svfprintf_r+0x60>
 801ba38:	2140      	movs	r1, #64	; 0x40
 801ba3a:	4650      	mov	r0, sl
 801ba3c:	f004 f93c 	bl	801fcb8 <_malloc_r>
 801ba40:	f8c9 0000 	str.w	r0, [r9]
 801ba44:	f8c9 0010 	str.w	r0, [r9, #16]
 801ba48:	b958      	cbnz	r0, 801ba62 <_svfprintf_r+0x5a>
 801ba4a:	230c      	movs	r3, #12
 801ba4c:	f8ca 3000 	str.w	r3, [sl]
 801ba50:	f04f 33ff 	mov.w	r3, #4294967295
 801ba54:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ba58:	b04f      	add	sp, #316	; 0x13c
 801ba5a:	ecbd 8b04 	vpop	{d8-d9}
 801ba5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba62:	2340      	movs	r3, #64	; 0x40
 801ba64:	f8c9 3014 	str.w	r3, [r9, #20]
 801ba68:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801bcb8 <_svfprintf_r+0x2b0>
 801ba6c:	2500      	movs	r5, #0
 801ba6e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801ba72:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801ba76:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801ba7a:	ac25      	add	r4, sp, #148	; 0x94
 801ba7c:	9422      	str	r4, [sp, #136]	; 0x88
 801ba7e:	9505      	str	r5, [sp, #20]
 801ba80:	950a      	str	r5, [sp, #40]	; 0x28
 801ba82:	9512      	str	r5, [sp, #72]	; 0x48
 801ba84:	9514      	str	r5, [sp, #80]	; 0x50
 801ba86:	950f      	str	r5, [sp, #60]	; 0x3c
 801ba88:	465b      	mov	r3, fp
 801ba8a:	461d      	mov	r5, r3
 801ba8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ba90:	b10a      	cbz	r2, 801ba96 <_svfprintf_r+0x8e>
 801ba92:	2a25      	cmp	r2, #37	; 0x25
 801ba94:	d1f9      	bne.n	801ba8a <_svfprintf_r+0x82>
 801ba96:	ebb5 070b 	subs.w	r7, r5, fp
 801ba9a:	d00d      	beq.n	801bab8 <_svfprintf_r+0xb0>
 801ba9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ba9e:	443b      	add	r3, r7
 801baa0:	9324      	str	r3, [sp, #144]	; 0x90
 801baa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801baa4:	3301      	adds	r3, #1
 801baa6:	2b07      	cmp	r3, #7
 801baa8:	e9c4 b700 	strd	fp, r7, [r4]
 801baac:	9323      	str	r3, [sp, #140]	; 0x8c
 801baae:	dc79      	bgt.n	801bba4 <_svfprintf_r+0x19c>
 801bab0:	3408      	adds	r4, #8
 801bab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bab4:	443b      	add	r3, r7
 801bab6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bab8:	782b      	ldrb	r3, [r5, #0]
 801baba:	2b00      	cmp	r3, #0
 801babc:	f001 8140 	beq.w	801cd40 <_svfprintf_r+0x1338>
 801bac0:	2300      	movs	r3, #0
 801bac2:	f04f 32ff 	mov.w	r2, #4294967295
 801bac6:	3501      	adds	r5, #1
 801bac8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bacc:	9204      	str	r2, [sp, #16]
 801bace:	9310      	str	r3, [sp, #64]	; 0x40
 801bad0:	4698      	mov	r8, r3
 801bad2:	270a      	movs	r7, #10
 801bad4:	212b      	movs	r1, #43	; 0x2b
 801bad6:	462a      	mov	r2, r5
 801bad8:	f812 3b01 	ldrb.w	r3, [r2], #1
 801badc:	9307      	str	r3, [sp, #28]
 801bade:	920b      	str	r2, [sp, #44]	; 0x2c
 801bae0:	9b07      	ldr	r3, [sp, #28]
 801bae2:	3b20      	subs	r3, #32
 801bae4:	2b5a      	cmp	r3, #90	; 0x5a
 801bae6:	f200 85b4 	bhi.w	801c652 <_svfprintf_r+0xc4a>
 801baea:	e8df f013 	tbh	[pc, r3, lsl #1]
 801baee:	007e      	.short	0x007e
 801baf0:	05b205b2 	.word	0x05b205b2
 801baf4:	05b20086 	.word	0x05b20086
 801baf8:	05b205b2 	.word	0x05b205b2
 801bafc:	05b20065 	.word	0x05b20065
 801bb00:	008905b2 	.word	0x008905b2
 801bb04:	05b20093 	.word	0x05b20093
 801bb08:	00960090 	.word	0x00960090
 801bb0c:	00b305b2 	.word	0x00b305b2
 801bb10:	00b600b6 	.word	0x00b600b6
 801bb14:	00b600b6 	.word	0x00b600b6
 801bb18:	00b600b6 	.word	0x00b600b6
 801bb1c:	00b600b6 	.word	0x00b600b6
 801bb20:	05b200b6 	.word	0x05b200b6
 801bb24:	05b205b2 	.word	0x05b205b2
 801bb28:	05b205b2 	.word	0x05b205b2
 801bb2c:	05b205b2 	.word	0x05b205b2
 801bb30:	05b20127 	.word	0x05b20127
 801bb34:	00fc00e9 	.word	0x00fc00e9
 801bb38:	01270127 	.word	0x01270127
 801bb3c:	05b20127 	.word	0x05b20127
 801bb40:	05b205b2 	.word	0x05b205b2
 801bb44:	00c605b2 	.word	0x00c605b2
 801bb48:	05b205b2 	.word	0x05b205b2
 801bb4c:	05b20492 	.word	0x05b20492
 801bb50:	05b205b2 	.word	0x05b205b2
 801bb54:	05b204d9 	.word	0x05b204d9
 801bb58:	05b204fa 	.word	0x05b204fa
 801bb5c:	051905b2 	.word	0x051905b2
 801bb60:	05b205b2 	.word	0x05b205b2
 801bb64:	05b205b2 	.word	0x05b205b2
 801bb68:	05b205b2 	.word	0x05b205b2
 801bb6c:	05b205b2 	.word	0x05b205b2
 801bb70:	05b20127 	.word	0x05b20127
 801bb74:	00fe00e9 	.word	0x00fe00e9
 801bb78:	01270127 	.word	0x01270127
 801bb7c:	00c90127 	.word	0x00c90127
 801bb80:	00dd00fe 	.word	0x00dd00fe
 801bb84:	00d605b2 	.word	0x00d605b2
 801bb88:	046f05b2 	.word	0x046f05b2
 801bb8c:	04c80494 	.word	0x04c80494
 801bb90:	05b200dd 	.word	0x05b200dd
 801bb94:	007c04d9 	.word	0x007c04d9
 801bb98:	05b204fc 	.word	0x05b204fc
 801bb9c:	053605b2 	.word	0x053605b2
 801bba0:	007c05b2 	.word	0x007c05b2
 801bba4:	aa22      	add	r2, sp, #136	; 0x88
 801bba6:	4649      	mov	r1, r9
 801bba8:	4650      	mov	r0, sl
 801bbaa:	f004 ff4d 	bl	8020a48 <__ssprint_r>
 801bbae:	2800      	cmp	r0, #0
 801bbb0:	f040 8132 	bne.w	801be18 <_svfprintf_r+0x410>
 801bbb4:	ac25      	add	r4, sp, #148	; 0x94
 801bbb6:	e77c      	b.n	801bab2 <_svfprintf_r+0xaa>
 801bbb8:	4650      	mov	r0, sl
 801bbba:	f003 fff7 	bl	801fbac <_localeconv_r>
 801bbbe:	6843      	ldr	r3, [r0, #4]
 801bbc0:	9314      	str	r3, [sp, #80]	; 0x50
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	f7e4 fb2e 	bl	8000224 <strlen>
 801bbc8:	9012      	str	r0, [sp, #72]	; 0x48
 801bbca:	4650      	mov	r0, sl
 801bbcc:	f003 ffee 	bl	801fbac <_localeconv_r>
 801bbd0:	6883      	ldr	r3, [r0, #8]
 801bbd2:	930a      	str	r3, [sp, #40]	; 0x28
 801bbd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bbd6:	212b      	movs	r1, #43	; 0x2b
 801bbd8:	b12b      	cbz	r3, 801bbe6 <_svfprintf_r+0x1de>
 801bbda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbdc:	b11b      	cbz	r3, 801bbe6 <_svfprintf_r+0x1de>
 801bbde:	781b      	ldrb	r3, [r3, #0]
 801bbe0:	b10b      	cbz	r3, 801bbe6 <_svfprintf_r+0x1de>
 801bbe2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801bbe6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801bbe8:	e775      	b.n	801bad6 <_svfprintf_r+0xce>
 801bbea:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d1f9      	bne.n	801bbe6 <_svfprintf_r+0x1de>
 801bbf2:	2320      	movs	r3, #32
 801bbf4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bbf8:	e7f5      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bbfa:	f048 0801 	orr.w	r8, r8, #1
 801bbfe:	e7f2      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bc00:	f856 3b04 	ldr.w	r3, [r6], #4
 801bc04:	9310      	str	r3, [sp, #64]	; 0x40
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	daed      	bge.n	801bbe6 <_svfprintf_r+0x1de>
 801bc0a:	425b      	negs	r3, r3
 801bc0c:	9310      	str	r3, [sp, #64]	; 0x40
 801bc0e:	f048 0804 	orr.w	r8, r8, #4
 801bc12:	e7e8      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bc14:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801bc18:	e7e5      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bc1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bc1c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bc20:	9307      	str	r3, [sp, #28]
 801bc22:	2b2a      	cmp	r3, #42	; 0x2a
 801bc24:	d113      	bne.n	801bc4e <_svfprintf_r+0x246>
 801bc26:	f856 0b04 	ldr.w	r0, [r6], #4
 801bc2a:	920b      	str	r2, [sp, #44]	; 0x2c
 801bc2c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801bc30:	9304      	str	r3, [sp, #16]
 801bc32:	e7d8      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bc34:	9804      	ldr	r0, [sp, #16]
 801bc36:	fb07 3300 	mla	r3, r7, r0, r3
 801bc3a:	9304      	str	r3, [sp, #16]
 801bc3c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bc40:	9307      	str	r3, [sp, #28]
 801bc42:	9b07      	ldr	r3, [sp, #28]
 801bc44:	3b30      	subs	r3, #48	; 0x30
 801bc46:	2b09      	cmp	r3, #9
 801bc48:	d9f4      	bls.n	801bc34 <_svfprintf_r+0x22c>
 801bc4a:	920b      	str	r2, [sp, #44]	; 0x2c
 801bc4c:	e748      	b.n	801bae0 <_svfprintf_r+0xd8>
 801bc4e:	2300      	movs	r3, #0
 801bc50:	9304      	str	r3, [sp, #16]
 801bc52:	e7f6      	b.n	801bc42 <_svfprintf_r+0x23a>
 801bc54:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801bc58:	e7c5      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bc5e:	9310      	str	r3, [sp, #64]	; 0x40
 801bc60:	9b07      	ldr	r3, [sp, #28]
 801bc62:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bc64:	3b30      	subs	r3, #48	; 0x30
 801bc66:	fb07 3300 	mla	r3, r7, r0, r3
 801bc6a:	9310      	str	r3, [sp, #64]	; 0x40
 801bc6c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bc70:	9307      	str	r3, [sp, #28]
 801bc72:	3b30      	subs	r3, #48	; 0x30
 801bc74:	2b09      	cmp	r3, #9
 801bc76:	d9f3      	bls.n	801bc60 <_svfprintf_r+0x258>
 801bc78:	e7e7      	b.n	801bc4a <_svfprintf_r+0x242>
 801bc7a:	f048 0808 	orr.w	r8, r8, #8
 801bc7e:	e7b2      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc82:	781b      	ldrb	r3, [r3, #0]
 801bc84:	2b68      	cmp	r3, #104	; 0x68
 801bc86:	bf01      	itttt	eq
 801bc88:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801bc8a:	3301      	addeq	r3, #1
 801bc8c:	930b      	streq	r3, [sp, #44]	; 0x2c
 801bc8e:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801bc92:	bf18      	it	ne
 801bc94:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801bc98:	e7a5      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc9c:	781b      	ldrb	r3, [r3, #0]
 801bc9e:	2b6c      	cmp	r3, #108	; 0x6c
 801bca0:	d105      	bne.n	801bcae <_svfprintf_r+0x2a6>
 801bca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bca4:	3301      	adds	r3, #1
 801bca6:	930b      	str	r3, [sp, #44]	; 0x2c
 801bca8:	f048 0820 	orr.w	r8, r8, #32
 801bcac:	e79b      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bcae:	f048 0810 	orr.w	r8, r8, #16
 801bcb2:	e798      	b.n	801bbe6 <_svfprintf_r+0x1de>
 801bcb4:	f3af 8000 	nop.w
	...
 801bcc0:	4632      	mov	r2, r6
 801bcc2:	2000      	movs	r0, #0
 801bcc4:	f852 3b04 	ldr.w	r3, [r2], #4
 801bcc8:	9206      	str	r2, [sp, #24]
 801bcca:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801bcce:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801bcd2:	2301      	movs	r3, #1
 801bcd4:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801bcd8:	9003      	str	r0, [sp, #12]
 801bcda:	9304      	str	r3, [sp, #16]
 801bcdc:	4606      	mov	r6, r0
 801bcde:	4605      	mov	r5, r0
 801bce0:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801bce4:	e1b8      	b.n	801c058 <_svfprintf_r+0x650>
 801bce6:	f048 0810 	orr.w	r8, r8, #16
 801bcea:	f018 0f20 	tst.w	r8, #32
 801bcee:	d012      	beq.n	801bd16 <_svfprintf_r+0x30e>
 801bcf0:	3607      	adds	r6, #7
 801bcf2:	f026 0307 	bic.w	r3, r6, #7
 801bcf6:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801bcfa:	9306      	str	r3, [sp, #24]
 801bcfc:	2e00      	cmp	r6, #0
 801bcfe:	f177 0300 	sbcs.w	r3, r7, #0
 801bd02:	da06      	bge.n	801bd12 <_svfprintf_r+0x30a>
 801bd04:	4276      	negs	r6, r6
 801bd06:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801bd0a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801bd0e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bd12:	2301      	movs	r3, #1
 801bd14:	e38e      	b.n	801c434 <_svfprintf_r+0xa2c>
 801bd16:	1d33      	adds	r3, r6, #4
 801bd18:	f018 0f10 	tst.w	r8, #16
 801bd1c:	9306      	str	r3, [sp, #24]
 801bd1e:	d002      	beq.n	801bd26 <_svfprintf_r+0x31e>
 801bd20:	6836      	ldr	r6, [r6, #0]
 801bd22:	17f7      	asrs	r7, r6, #31
 801bd24:	e7ea      	b.n	801bcfc <_svfprintf_r+0x2f4>
 801bd26:	f018 0f40 	tst.w	r8, #64	; 0x40
 801bd2a:	6836      	ldr	r6, [r6, #0]
 801bd2c:	d001      	beq.n	801bd32 <_svfprintf_r+0x32a>
 801bd2e:	b236      	sxth	r6, r6
 801bd30:	e7f7      	b.n	801bd22 <_svfprintf_r+0x31a>
 801bd32:	f418 7f00 	tst.w	r8, #512	; 0x200
 801bd36:	bf18      	it	ne
 801bd38:	b276      	sxtbne	r6, r6
 801bd3a:	e7f2      	b.n	801bd22 <_svfprintf_r+0x31a>
 801bd3c:	3607      	adds	r6, #7
 801bd3e:	f026 0307 	bic.w	r3, r6, #7
 801bd42:	ecb3 7b02 	vldmia	r3!, {d7}
 801bd46:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801bd4a:	9306      	str	r3, [sp, #24]
 801bd4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd4e:	ee09 3a10 	vmov	s18, r3
 801bd52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bd58:	ee09 3a90 	vmov	s19, r3
 801bd5c:	f04f 32ff 	mov.w	r2, #4294967295
 801bd60:	4b3a      	ldr	r3, [pc, #232]	; (801be4c <_svfprintf_r+0x444>)
 801bd62:	ec51 0b19 	vmov	r0, r1, d9
 801bd66:	f7e4 ff11 	bl	8000b8c <__aeabi_dcmpun>
 801bd6a:	bb10      	cbnz	r0, 801bdb2 <_svfprintf_r+0x3aa>
 801bd6c:	4b37      	ldr	r3, [pc, #220]	; (801be4c <_svfprintf_r+0x444>)
 801bd6e:	ec51 0b19 	vmov	r0, r1, d9
 801bd72:	f04f 32ff 	mov.w	r2, #4294967295
 801bd76:	f7e4 feeb 	bl	8000b50 <__aeabi_dcmple>
 801bd7a:	b9d0      	cbnz	r0, 801bdb2 <_svfprintf_r+0x3aa>
 801bd7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bd80:	2200      	movs	r2, #0
 801bd82:	2300      	movs	r3, #0
 801bd84:	f7e4 feda 	bl	8000b3c <__aeabi_dcmplt>
 801bd88:	b110      	cbz	r0, 801bd90 <_svfprintf_r+0x388>
 801bd8a:	232d      	movs	r3, #45	; 0x2d
 801bd8c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bd90:	4a2f      	ldr	r2, [pc, #188]	; (801be50 <_svfprintf_r+0x448>)
 801bd92:	4830      	ldr	r0, [pc, #192]	; (801be54 <_svfprintf_r+0x44c>)
 801bd94:	9b07      	ldr	r3, [sp, #28]
 801bd96:	2100      	movs	r1, #0
 801bd98:	2b47      	cmp	r3, #71	; 0x47
 801bd9a:	bfd4      	ite	le
 801bd9c:	4693      	movle	fp, r2
 801bd9e:	4683      	movgt	fp, r0
 801bda0:	2303      	movs	r3, #3
 801bda2:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801bda6:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801bdaa:	2600      	movs	r6, #0
 801bdac:	4633      	mov	r3, r6
 801bdae:	f001 b802 	b.w	801cdb6 <_svfprintf_r+0x13ae>
 801bdb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801bdb6:	4610      	mov	r0, r2
 801bdb8:	4619      	mov	r1, r3
 801bdba:	f7e4 fee7 	bl	8000b8c <__aeabi_dcmpun>
 801bdbe:	b140      	cbz	r0, 801bdd2 <_svfprintf_r+0x3ca>
 801bdc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bdc2:	4a25      	ldr	r2, [pc, #148]	; (801be58 <_svfprintf_r+0x450>)
 801bdc4:	4825      	ldr	r0, [pc, #148]	; (801be5c <_svfprintf_r+0x454>)
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	bfbc      	itt	lt
 801bdca:	232d      	movlt	r3, #45	; 0x2d
 801bdcc:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801bdd0:	e7e0      	b.n	801bd94 <_svfprintf_r+0x38c>
 801bdd2:	9b07      	ldr	r3, [sp, #28]
 801bdd4:	f023 0320 	bic.w	r3, r3, #32
 801bdd8:	2b41      	cmp	r3, #65	; 0x41
 801bdda:	9308      	str	r3, [sp, #32]
 801bddc:	d125      	bne.n	801be2a <_svfprintf_r+0x422>
 801bdde:	2330      	movs	r3, #48	; 0x30
 801bde0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801bde4:	9b07      	ldr	r3, [sp, #28]
 801bde6:	2b61      	cmp	r3, #97	; 0x61
 801bde8:	bf0c      	ite	eq
 801bdea:	2378      	moveq	r3, #120	; 0x78
 801bdec:	2358      	movne	r3, #88	; 0x58
 801bdee:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801bdf2:	9b04      	ldr	r3, [sp, #16]
 801bdf4:	2b63      	cmp	r3, #99	; 0x63
 801bdf6:	f048 0802 	orr.w	r8, r8, #2
 801bdfa:	dd31      	ble.n	801be60 <_svfprintf_r+0x458>
 801bdfc:	1c59      	adds	r1, r3, #1
 801bdfe:	4650      	mov	r0, sl
 801be00:	f003 ff5a 	bl	801fcb8 <_malloc_r>
 801be04:	4683      	mov	fp, r0
 801be06:	2800      	cmp	r0, #0
 801be08:	f040 81fe 	bne.w	801c208 <_svfprintf_r+0x800>
 801be0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801be10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be14:	f8a9 300c 	strh.w	r3, [r9, #12]
 801be18:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801be1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801be20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be22:	bf18      	it	ne
 801be24:	f04f 33ff 	movne.w	r3, #4294967295
 801be28:	e614      	b.n	801ba54 <_svfprintf_r+0x4c>
 801be2a:	9b04      	ldr	r3, [sp, #16]
 801be2c:	3301      	adds	r3, #1
 801be2e:	f000 81ed 	beq.w	801c20c <_svfprintf_r+0x804>
 801be32:	9b08      	ldr	r3, [sp, #32]
 801be34:	2b47      	cmp	r3, #71	; 0x47
 801be36:	f040 81ec 	bne.w	801c212 <_svfprintf_r+0x80a>
 801be3a:	9b04      	ldr	r3, [sp, #16]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	f040 81e8 	bne.w	801c212 <_svfprintf_r+0x80a>
 801be42:	9303      	str	r3, [sp, #12]
 801be44:	2301      	movs	r3, #1
 801be46:	9304      	str	r3, [sp, #16]
 801be48:	e00d      	b.n	801be66 <_svfprintf_r+0x45e>
 801be4a:	bf00      	nop
 801be4c:	7fefffff 	.word	0x7fefffff
 801be50:	080298b8 	.word	0x080298b8
 801be54:	080298bc 	.word	0x080298bc
 801be58:	080298c0 	.word	0x080298c0
 801be5c:	080298c4 	.word	0x080298c4
 801be60:	9003      	str	r0, [sp, #12]
 801be62:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801be66:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801be6a:	9311      	str	r3, [sp, #68]	; 0x44
 801be6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be6e:	2b00      	cmp	r3, #0
 801be70:	f280 81d1 	bge.w	801c216 <_svfprintf_r+0x80e>
 801be74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be76:	ee08 3a10 	vmov	s16, r3
 801be7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801be80:	ee08 3a90 	vmov	s17, r3
 801be84:	232d      	movs	r3, #45	; 0x2d
 801be86:	9318      	str	r3, [sp, #96]	; 0x60
 801be88:	9b08      	ldr	r3, [sp, #32]
 801be8a:	2b41      	cmp	r3, #65	; 0x41
 801be8c:	f040 81e1 	bne.w	801c252 <_svfprintf_r+0x84a>
 801be90:	eeb0 0a48 	vmov.f32	s0, s16
 801be94:	eef0 0a68 	vmov.f32	s1, s17
 801be98:	a81c      	add	r0, sp, #112	; 0x70
 801be9a:	f004 fc8b 	bl	80207b4 <frexp>
 801be9e:	2200      	movs	r2, #0
 801bea0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801bea4:	ec51 0b10 	vmov	r0, r1, d0
 801bea8:	f7e4 fbd6 	bl	8000658 <__aeabi_dmul>
 801beac:	2200      	movs	r2, #0
 801beae:	2300      	movs	r3, #0
 801beb0:	4606      	mov	r6, r0
 801beb2:	460f      	mov	r7, r1
 801beb4:	f7e4 fe38 	bl	8000b28 <__aeabi_dcmpeq>
 801beb8:	b108      	cbz	r0, 801bebe <_svfprintf_r+0x4b6>
 801beba:	2301      	movs	r3, #1
 801bebc:	931c      	str	r3, [sp, #112]	; 0x70
 801bebe:	4bb4      	ldr	r3, [pc, #720]	; (801c190 <_svfprintf_r+0x788>)
 801bec0:	4ab4      	ldr	r2, [pc, #720]	; (801c194 <_svfprintf_r+0x78c>)
 801bec2:	9907      	ldr	r1, [sp, #28]
 801bec4:	2961      	cmp	r1, #97	; 0x61
 801bec6:	bf18      	it	ne
 801bec8:	461a      	movne	r2, r3
 801beca:	9b04      	ldr	r3, [sp, #16]
 801becc:	9217      	str	r2, [sp, #92]	; 0x5c
 801bece:	3b01      	subs	r3, #1
 801bed0:	9305      	str	r3, [sp, #20]
 801bed2:	465d      	mov	r5, fp
 801bed4:	4bb0      	ldr	r3, [pc, #704]	; (801c198 <_svfprintf_r+0x790>)
 801bed6:	2200      	movs	r2, #0
 801bed8:	4630      	mov	r0, r6
 801beda:	4639      	mov	r1, r7
 801bedc:	f7e4 fbbc 	bl	8000658 <__aeabi_dmul>
 801bee0:	460f      	mov	r7, r1
 801bee2:	4606      	mov	r6, r0
 801bee4:	f7e4 fe68 	bl	8000bb8 <__aeabi_d2iz>
 801bee8:	9019      	str	r0, [sp, #100]	; 0x64
 801beea:	f7e4 fb4b 	bl	8000584 <__aeabi_i2d>
 801beee:	4602      	mov	r2, r0
 801bef0:	460b      	mov	r3, r1
 801bef2:	4630      	mov	r0, r6
 801bef4:	4639      	mov	r1, r7
 801bef6:	f7e4 f9f7 	bl	80002e8 <__aeabi_dsub>
 801befa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801befc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801befe:	5c9b      	ldrb	r3, [r3, r2]
 801bf00:	f805 3b01 	strb.w	r3, [r5], #1
 801bf04:	9b05      	ldr	r3, [sp, #20]
 801bf06:	9309      	str	r3, [sp, #36]	; 0x24
 801bf08:	1c5a      	adds	r2, r3, #1
 801bf0a:	4606      	mov	r6, r0
 801bf0c:	460f      	mov	r7, r1
 801bf0e:	d007      	beq.n	801bf20 <_svfprintf_r+0x518>
 801bf10:	3b01      	subs	r3, #1
 801bf12:	9305      	str	r3, [sp, #20]
 801bf14:	2200      	movs	r2, #0
 801bf16:	2300      	movs	r3, #0
 801bf18:	f7e4 fe06 	bl	8000b28 <__aeabi_dcmpeq>
 801bf1c:	2800      	cmp	r0, #0
 801bf1e:	d0d9      	beq.n	801bed4 <_svfprintf_r+0x4cc>
 801bf20:	4b9e      	ldr	r3, [pc, #632]	; (801c19c <_svfprintf_r+0x794>)
 801bf22:	2200      	movs	r2, #0
 801bf24:	4630      	mov	r0, r6
 801bf26:	4639      	mov	r1, r7
 801bf28:	f7e4 fe26 	bl	8000b78 <__aeabi_dcmpgt>
 801bf2c:	b960      	cbnz	r0, 801bf48 <_svfprintf_r+0x540>
 801bf2e:	4b9b      	ldr	r3, [pc, #620]	; (801c19c <_svfprintf_r+0x794>)
 801bf30:	2200      	movs	r2, #0
 801bf32:	4630      	mov	r0, r6
 801bf34:	4639      	mov	r1, r7
 801bf36:	f7e4 fdf7 	bl	8000b28 <__aeabi_dcmpeq>
 801bf3a:	2800      	cmp	r0, #0
 801bf3c:	f000 8184 	beq.w	801c248 <_svfprintf_r+0x840>
 801bf40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bf42:	07df      	lsls	r7, r3, #31
 801bf44:	f140 8180 	bpl.w	801c248 <_svfprintf_r+0x840>
 801bf48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bf4a:	9520      	str	r5, [sp, #128]	; 0x80
 801bf4c:	7bd9      	ldrb	r1, [r3, #15]
 801bf4e:	2030      	movs	r0, #48	; 0x30
 801bf50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bf52:	1e53      	subs	r3, r2, #1
 801bf54:	9320      	str	r3, [sp, #128]	; 0x80
 801bf56:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801bf5a:	428b      	cmp	r3, r1
 801bf5c:	f000 8163 	beq.w	801c226 <_svfprintf_r+0x81e>
 801bf60:	2b39      	cmp	r3, #57	; 0x39
 801bf62:	bf0b      	itete	eq
 801bf64:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801bf66:	3301      	addne	r3, #1
 801bf68:	7a9b      	ldrbeq	r3, [r3, #10]
 801bf6a:	b2db      	uxtbne	r3, r3
 801bf6c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bf70:	eba5 030b 	sub.w	r3, r5, fp
 801bf74:	9305      	str	r3, [sp, #20]
 801bf76:	9b08      	ldr	r3, [sp, #32]
 801bf78:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801bf7a:	2b47      	cmp	r3, #71	; 0x47
 801bf7c:	f040 81b1 	bne.w	801c2e2 <_svfprintf_r+0x8da>
 801bf80:	1cee      	adds	r6, r5, #3
 801bf82:	db03      	blt.n	801bf8c <_svfprintf_r+0x584>
 801bf84:	9b04      	ldr	r3, [sp, #16]
 801bf86:	42ab      	cmp	r3, r5
 801bf88:	f280 81d6 	bge.w	801c338 <_svfprintf_r+0x930>
 801bf8c:	9b07      	ldr	r3, [sp, #28]
 801bf8e:	3b02      	subs	r3, #2
 801bf90:	9307      	str	r3, [sp, #28]
 801bf92:	9907      	ldr	r1, [sp, #28]
 801bf94:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801bf98:	f021 0120 	bic.w	r1, r1, #32
 801bf9c:	2941      	cmp	r1, #65	; 0x41
 801bf9e:	bf08      	it	eq
 801bfa0:	320f      	addeq	r2, #15
 801bfa2:	f105 33ff 	add.w	r3, r5, #4294967295
 801bfa6:	bf06      	itte	eq
 801bfa8:	b2d2      	uxtbeq	r2, r2
 801bfaa:	2101      	moveq	r1, #1
 801bfac:	2100      	movne	r1, #0
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	931c      	str	r3, [sp, #112]	; 0x70
 801bfb2:	bfb8      	it	lt
 801bfb4:	f1c5 0301 	rsblt	r3, r5, #1
 801bfb8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801bfbc:	bfb4      	ite	lt
 801bfbe:	222d      	movlt	r2, #45	; 0x2d
 801bfc0:	222b      	movge	r2, #43	; 0x2b
 801bfc2:	2b09      	cmp	r3, #9
 801bfc4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801bfc8:	f340 81a4 	ble.w	801c314 <_svfprintf_r+0x90c>
 801bfcc:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801bfd0:	260a      	movs	r6, #10
 801bfd2:	4611      	mov	r1, r2
 801bfd4:	fb93 f5f6 	sdiv	r5, r3, r6
 801bfd8:	fb06 3015 	mls	r0, r6, r5, r3
 801bfdc:	3030      	adds	r0, #48	; 0x30
 801bfde:	f801 0c01 	strb.w	r0, [r1, #-1]
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	2863      	cmp	r0, #99	; 0x63
 801bfe6:	f102 32ff 	add.w	r2, r2, #4294967295
 801bfea:	462b      	mov	r3, r5
 801bfec:	dcf1      	bgt.n	801bfd2 <_svfprintf_r+0x5ca>
 801bfee:	3330      	adds	r3, #48	; 0x30
 801bff0:	1e88      	subs	r0, r1, #2
 801bff2:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bff6:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801bffa:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801bffe:	4603      	mov	r3, r0
 801c000:	42ab      	cmp	r3, r5
 801c002:	f0c0 8182 	bcc.w	801c30a <_svfprintf_r+0x902>
 801c006:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801c00a:	1a52      	subs	r2, r2, r1
 801c00c:	42a8      	cmp	r0, r5
 801c00e:	bf88      	it	hi
 801c010:	2200      	movhi	r2, #0
 801c012:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801c016:	441a      	add	r2, r3
 801c018:	ab1e      	add	r3, sp, #120	; 0x78
 801c01a:	1ad3      	subs	r3, r2, r3
 801c01c:	9a05      	ldr	r2, [sp, #20]
 801c01e:	9315      	str	r3, [sp, #84]	; 0x54
 801c020:	2a01      	cmp	r2, #1
 801c022:	4413      	add	r3, r2
 801c024:	9304      	str	r3, [sp, #16]
 801c026:	dc02      	bgt.n	801c02e <_svfprintf_r+0x626>
 801c028:	f018 0f01 	tst.w	r8, #1
 801c02c:	d003      	beq.n	801c036 <_svfprintf_r+0x62e>
 801c02e:	9b04      	ldr	r3, [sp, #16]
 801c030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c032:	4413      	add	r3, r2
 801c034:	9304      	str	r3, [sp, #16]
 801c036:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801c03a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c03e:	9311      	str	r3, [sp, #68]	; 0x44
 801c040:	2300      	movs	r3, #0
 801c042:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c046:	461d      	mov	r5, r3
 801c048:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c04a:	b113      	cbz	r3, 801c052 <_svfprintf_r+0x64a>
 801c04c:	232d      	movs	r3, #45	; 0x2d
 801c04e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801c052:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801c056:	2600      	movs	r6, #0
 801c058:	9b04      	ldr	r3, [sp, #16]
 801c05a:	42b3      	cmp	r3, r6
 801c05c:	bfb8      	it	lt
 801c05e:	4633      	movlt	r3, r6
 801c060:	9311      	str	r3, [sp, #68]	; 0x44
 801c062:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c066:	b113      	cbz	r3, 801c06e <_svfprintf_r+0x666>
 801c068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c06a:	3301      	adds	r3, #1
 801c06c:	9311      	str	r3, [sp, #68]	; 0x44
 801c06e:	f018 0302 	ands.w	r3, r8, #2
 801c072:	9317      	str	r3, [sp, #92]	; 0x5c
 801c074:	bf1e      	ittt	ne
 801c076:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801c078:	3302      	addne	r3, #2
 801c07a:	9311      	strne	r3, [sp, #68]	; 0x44
 801c07c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801c080:	9318      	str	r3, [sp, #96]	; 0x60
 801c082:	d11f      	bne.n	801c0c4 <_svfprintf_r+0x6bc>
 801c084:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c088:	1a9f      	subs	r7, r3, r2
 801c08a:	2f00      	cmp	r7, #0
 801c08c:	dd1a      	ble.n	801c0c4 <_svfprintf_r+0x6bc>
 801c08e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c092:	4843      	ldr	r0, [pc, #268]	; (801c1a0 <_svfprintf_r+0x798>)
 801c094:	6020      	str	r0, [r4, #0]
 801c096:	2f10      	cmp	r7, #16
 801c098:	f103 0301 	add.w	r3, r3, #1
 801c09c:	f104 0108 	add.w	r1, r4, #8
 801c0a0:	f300 82e6 	bgt.w	801c670 <_svfprintf_r+0xc68>
 801c0a4:	6067      	str	r7, [r4, #4]
 801c0a6:	2b07      	cmp	r3, #7
 801c0a8:	4417      	add	r7, r2
 801c0aa:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801c0ae:	f340 82f2 	ble.w	801c696 <_svfprintf_r+0xc8e>
 801c0b2:	aa22      	add	r2, sp, #136	; 0x88
 801c0b4:	4649      	mov	r1, r9
 801c0b6:	4650      	mov	r0, sl
 801c0b8:	f004 fcc6 	bl	8020a48 <__ssprint_r>
 801c0bc:	2800      	cmp	r0, #0
 801c0be:	f040 861d 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c0c2:	ac25      	add	r4, sp, #148	; 0x94
 801c0c4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c0c8:	b173      	cbz	r3, 801c0e8 <_svfprintf_r+0x6e0>
 801c0ca:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801c0ce:	6023      	str	r3, [r4, #0]
 801c0d0:	2301      	movs	r3, #1
 801c0d2:	6063      	str	r3, [r4, #4]
 801c0d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c0d6:	3301      	adds	r3, #1
 801c0d8:	9324      	str	r3, [sp, #144]	; 0x90
 801c0da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c0dc:	3301      	adds	r3, #1
 801c0de:	2b07      	cmp	r3, #7
 801c0e0:	9323      	str	r3, [sp, #140]	; 0x8c
 801c0e2:	f300 82da 	bgt.w	801c69a <_svfprintf_r+0xc92>
 801c0e6:	3408      	adds	r4, #8
 801c0e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c0ea:	b16b      	cbz	r3, 801c108 <_svfprintf_r+0x700>
 801c0ec:	ab1b      	add	r3, sp, #108	; 0x6c
 801c0ee:	6023      	str	r3, [r4, #0]
 801c0f0:	2302      	movs	r3, #2
 801c0f2:	6063      	str	r3, [r4, #4]
 801c0f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c0f6:	3302      	adds	r3, #2
 801c0f8:	9324      	str	r3, [sp, #144]	; 0x90
 801c0fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c0fc:	3301      	adds	r3, #1
 801c0fe:	2b07      	cmp	r3, #7
 801c100:	9323      	str	r3, [sp, #140]	; 0x8c
 801c102:	f300 82d4 	bgt.w	801c6ae <_svfprintf_r+0xca6>
 801c106:	3408      	adds	r4, #8
 801c108:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c10a:	2b80      	cmp	r3, #128	; 0x80
 801c10c:	d11f      	bne.n	801c14e <_svfprintf_r+0x746>
 801c10e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c112:	1a9f      	subs	r7, r3, r2
 801c114:	2f00      	cmp	r7, #0
 801c116:	dd1a      	ble.n	801c14e <_svfprintf_r+0x746>
 801c118:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c11c:	4821      	ldr	r0, [pc, #132]	; (801c1a4 <_svfprintf_r+0x79c>)
 801c11e:	6020      	str	r0, [r4, #0]
 801c120:	2f10      	cmp	r7, #16
 801c122:	f103 0301 	add.w	r3, r3, #1
 801c126:	f104 0108 	add.w	r1, r4, #8
 801c12a:	f300 82ca 	bgt.w	801c6c2 <_svfprintf_r+0xcba>
 801c12e:	6067      	str	r7, [r4, #4]
 801c130:	2b07      	cmp	r3, #7
 801c132:	4417      	add	r7, r2
 801c134:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801c138:	f340 82d6 	ble.w	801c6e8 <_svfprintf_r+0xce0>
 801c13c:	aa22      	add	r2, sp, #136	; 0x88
 801c13e:	4649      	mov	r1, r9
 801c140:	4650      	mov	r0, sl
 801c142:	f004 fc81 	bl	8020a48 <__ssprint_r>
 801c146:	2800      	cmp	r0, #0
 801c148:	f040 85d8 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c14c:	ac25      	add	r4, sp, #148	; 0x94
 801c14e:	9b04      	ldr	r3, [sp, #16]
 801c150:	1af6      	subs	r6, r6, r3
 801c152:	2e00      	cmp	r6, #0
 801c154:	dd28      	ble.n	801c1a8 <_svfprintf_r+0x7a0>
 801c156:	4f13      	ldr	r7, [pc, #76]	; (801c1a4 <_svfprintf_r+0x79c>)
 801c158:	6027      	str	r7, [r4, #0]
 801c15a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c15e:	2e10      	cmp	r6, #16
 801c160:	f103 0301 	add.w	r3, r3, #1
 801c164:	f104 0108 	add.w	r1, r4, #8
 801c168:	f300 82c0 	bgt.w	801c6ec <_svfprintf_r+0xce4>
 801c16c:	6066      	str	r6, [r4, #4]
 801c16e:	2b07      	cmp	r3, #7
 801c170:	4416      	add	r6, r2
 801c172:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801c176:	f340 82cc 	ble.w	801c712 <_svfprintf_r+0xd0a>
 801c17a:	aa22      	add	r2, sp, #136	; 0x88
 801c17c:	4649      	mov	r1, r9
 801c17e:	4650      	mov	r0, sl
 801c180:	f004 fc62 	bl	8020a48 <__ssprint_r>
 801c184:	2800      	cmp	r0, #0
 801c186:	f040 85b9 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c18a:	ac25      	add	r4, sp, #148	; 0x94
 801c18c:	e00c      	b.n	801c1a8 <_svfprintf_r+0x7a0>
 801c18e:	bf00      	nop
 801c190:	080298d9 	.word	0x080298d9
 801c194:	080298c8 	.word	0x080298c8
 801c198:	40300000 	.word	0x40300000
 801c19c:	3fe00000 	.word	0x3fe00000
 801c1a0:	080298ec 	.word	0x080298ec
 801c1a4:	080298fc 	.word	0x080298fc
 801c1a8:	f418 7f80 	tst.w	r8, #256	; 0x100
 801c1ac:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801c1ae:	f040 82b7 	bne.w	801c720 <_svfprintf_r+0xd18>
 801c1b2:	9b04      	ldr	r3, [sp, #16]
 801c1b4:	f8c4 b000 	str.w	fp, [r4]
 801c1b8:	441e      	add	r6, r3
 801c1ba:	6063      	str	r3, [r4, #4]
 801c1bc:	9624      	str	r6, [sp, #144]	; 0x90
 801c1be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c1c0:	3301      	adds	r3, #1
 801c1c2:	2b07      	cmp	r3, #7
 801c1c4:	9323      	str	r3, [sp, #140]	; 0x8c
 801c1c6:	f300 82f0 	bgt.w	801c7aa <_svfprintf_r+0xda2>
 801c1ca:	3408      	adds	r4, #8
 801c1cc:	f018 0f04 	tst.w	r8, #4
 801c1d0:	f040 8576 	bne.w	801ccc0 <_svfprintf_r+0x12b8>
 801c1d4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c1d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c1da:	428a      	cmp	r2, r1
 801c1dc:	bfac      	ite	ge
 801c1de:	189b      	addge	r3, r3, r2
 801c1e0:	185b      	addlt	r3, r3, r1
 801c1e2:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c1e6:	b13b      	cbz	r3, 801c1f8 <_svfprintf_r+0x7f0>
 801c1e8:	aa22      	add	r2, sp, #136	; 0x88
 801c1ea:	4649      	mov	r1, r9
 801c1ec:	4650      	mov	r0, sl
 801c1ee:	f004 fc2b 	bl	8020a48 <__ssprint_r>
 801c1f2:	2800      	cmp	r0, #0
 801c1f4:	f040 8582 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	9323      	str	r3, [sp, #140]	; 0x8c
 801c1fc:	9b03      	ldr	r3, [sp, #12]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	f040 8598 	bne.w	801cd34 <_svfprintf_r+0x132c>
 801c204:	ac25      	add	r4, sp, #148	; 0x94
 801c206:	e0ed      	b.n	801c3e4 <_svfprintf_r+0x9dc>
 801c208:	9003      	str	r0, [sp, #12]
 801c20a:	e62c      	b.n	801be66 <_svfprintf_r+0x45e>
 801c20c:	9003      	str	r0, [sp, #12]
 801c20e:	2306      	movs	r3, #6
 801c210:	e619      	b.n	801be46 <_svfprintf_r+0x43e>
 801c212:	9003      	str	r0, [sp, #12]
 801c214:	e627      	b.n	801be66 <_svfprintf_r+0x45e>
 801c216:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801c21a:	2300      	movs	r3, #0
 801c21c:	eeb0 8a47 	vmov.f32	s16, s14
 801c220:	eef0 8a67 	vmov.f32	s17, s15
 801c224:	e62f      	b.n	801be86 <_svfprintf_r+0x47e>
 801c226:	f802 0c01 	strb.w	r0, [r2, #-1]
 801c22a:	e691      	b.n	801bf50 <_svfprintf_r+0x548>
 801c22c:	f803 0b01 	strb.w	r0, [r3], #1
 801c230:	1aca      	subs	r2, r1, r3
 801c232:	2a00      	cmp	r2, #0
 801c234:	dafa      	bge.n	801c22c <_svfprintf_r+0x824>
 801c236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c23a:	3201      	adds	r2, #1
 801c23c:	f103 0301 	add.w	r3, r3, #1
 801c240:	bfb8      	it	lt
 801c242:	2300      	movlt	r3, #0
 801c244:	441d      	add	r5, r3
 801c246:	e693      	b.n	801bf70 <_svfprintf_r+0x568>
 801c248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c24a:	462b      	mov	r3, r5
 801c24c:	18a9      	adds	r1, r5, r2
 801c24e:	2030      	movs	r0, #48	; 0x30
 801c250:	e7ee      	b.n	801c230 <_svfprintf_r+0x828>
 801c252:	9b08      	ldr	r3, [sp, #32]
 801c254:	2b46      	cmp	r3, #70	; 0x46
 801c256:	d005      	beq.n	801c264 <_svfprintf_r+0x85c>
 801c258:	2b45      	cmp	r3, #69	; 0x45
 801c25a:	d11b      	bne.n	801c294 <_svfprintf_r+0x88c>
 801c25c:	9b04      	ldr	r3, [sp, #16]
 801c25e:	1c5d      	adds	r5, r3, #1
 801c260:	2102      	movs	r1, #2
 801c262:	e001      	b.n	801c268 <_svfprintf_r+0x860>
 801c264:	9d04      	ldr	r5, [sp, #16]
 801c266:	2103      	movs	r1, #3
 801c268:	ab20      	add	r3, sp, #128	; 0x80
 801c26a:	9301      	str	r3, [sp, #4]
 801c26c:	ab1d      	add	r3, sp, #116	; 0x74
 801c26e:	9300      	str	r3, [sp, #0]
 801c270:	462a      	mov	r2, r5
 801c272:	ab1c      	add	r3, sp, #112	; 0x70
 801c274:	4650      	mov	r0, sl
 801c276:	eeb0 0a48 	vmov.f32	s0, s16
 801c27a:	eef0 0a68 	vmov.f32	s1, s17
 801c27e:	f002 fb5b 	bl	801e938 <_dtoa_r>
 801c282:	9b08      	ldr	r3, [sp, #32]
 801c284:	2b47      	cmp	r3, #71	; 0x47
 801c286:	4683      	mov	fp, r0
 801c288:	d106      	bne.n	801c298 <_svfprintf_r+0x890>
 801c28a:	f018 0f01 	tst.w	r8, #1
 801c28e:	d103      	bne.n	801c298 <_svfprintf_r+0x890>
 801c290:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c292:	e66d      	b.n	801bf70 <_svfprintf_r+0x568>
 801c294:	9d04      	ldr	r5, [sp, #16]
 801c296:	e7e3      	b.n	801c260 <_svfprintf_r+0x858>
 801c298:	9b08      	ldr	r3, [sp, #32]
 801c29a:	2b46      	cmp	r3, #70	; 0x46
 801c29c:	eb0b 0605 	add.w	r6, fp, r5
 801c2a0:	d10f      	bne.n	801c2c2 <_svfprintf_r+0x8ba>
 801c2a2:	f89b 3000 	ldrb.w	r3, [fp]
 801c2a6:	2b30      	cmp	r3, #48	; 0x30
 801c2a8:	d109      	bne.n	801c2be <_svfprintf_r+0x8b6>
 801c2aa:	ec51 0b18 	vmov	r0, r1, d8
 801c2ae:	2200      	movs	r2, #0
 801c2b0:	2300      	movs	r3, #0
 801c2b2:	f7e4 fc39 	bl	8000b28 <__aeabi_dcmpeq>
 801c2b6:	b910      	cbnz	r0, 801c2be <_svfprintf_r+0x8b6>
 801c2b8:	f1c5 0501 	rsb	r5, r5, #1
 801c2bc:	951c      	str	r5, [sp, #112]	; 0x70
 801c2be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c2c0:	441e      	add	r6, r3
 801c2c2:	ec51 0b18 	vmov	r0, r1, d8
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	2300      	movs	r3, #0
 801c2ca:	f7e4 fc2d 	bl	8000b28 <__aeabi_dcmpeq>
 801c2ce:	b100      	cbz	r0, 801c2d2 <_svfprintf_r+0x8ca>
 801c2d0:	9620      	str	r6, [sp, #128]	; 0x80
 801c2d2:	2230      	movs	r2, #48	; 0x30
 801c2d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c2d6:	429e      	cmp	r6, r3
 801c2d8:	d9da      	bls.n	801c290 <_svfprintf_r+0x888>
 801c2da:	1c59      	adds	r1, r3, #1
 801c2dc:	9120      	str	r1, [sp, #128]	; 0x80
 801c2de:	701a      	strb	r2, [r3, #0]
 801c2e0:	e7f8      	b.n	801c2d4 <_svfprintf_r+0x8cc>
 801c2e2:	9b08      	ldr	r3, [sp, #32]
 801c2e4:	2b46      	cmp	r3, #70	; 0x46
 801c2e6:	f47f ae54 	bne.w	801bf92 <_svfprintf_r+0x58a>
 801c2ea:	9a04      	ldr	r2, [sp, #16]
 801c2ec:	f008 0301 	and.w	r3, r8, #1
 801c2f0:	2d00      	cmp	r5, #0
 801c2f2:	ea43 0302 	orr.w	r3, r3, r2
 801c2f6:	dd1a      	ble.n	801c32e <_svfprintf_r+0x926>
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d034      	beq.n	801c366 <_svfprintf_r+0x95e>
 801c2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2fe:	18eb      	adds	r3, r5, r3
 801c300:	441a      	add	r2, r3
 801c302:	9204      	str	r2, [sp, #16]
 801c304:	2366      	movs	r3, #102	; 0x66
 801c306:	9307      	str	r3, [sp, #28]
 801c308:	e033      	b.n	801c372 <_svfprintf_r+0x96a>
 801c30a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c30e:	f802 6b01 	strb.w	r6, [r2], #1
 801c312:	e675      	b.n	801c000 <_svfprintf_r+0x5f8>
 801c314:	b941      	cbnz	r1, 801c328 <_svfprintf_r+0x920>
 801c316:	2230      	movs	r2, #48	; 0x30
 801c318:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801c31c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801c320:	3330      	adds	r3, #48	; 0x30
 801c322:	f802 3b01 	strb.w	r3, [r2], #1
 801c326:	e677      	b.n	801c018 <_svfprintf_r+0x610>
 801c328:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801c32c:	e7f8      	b.n	801c320 <_svfprintf_r+0x918>
 801c32e:	b1e3      	cbz	r3, 801c36a <_svfprintf_r+0x962>
 801c330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c332:	9a04      	ldr	r2, [sp, #16]
 801c334:	3301      	adds	r3, #1
 801c336:	e7e3      	b.n	801c300 <_svfprintf_r+0x8f8>
 801c338:	9b05      	ldr	r3, [sp, #20]
 801c33a:	429d      	cmp	r5, r3
 801c33c:	db07      	blt.n	801c34e <_svfprintf_r+0x946>
 801c33e:	f018 0f01 	tst.w	r8, #1
 801c342:	d02d      	beq.n	801c3a0 <_svfprintf_r+0x998>
 801c344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c346:	18eb      	adds	r3, r5, r3
 801c348:	9304      	str	r3, [sp, #16]
 801c34a:	2367      	movs	r3, #103	; 0x67
 801c34c:	e7db      	b.n	801c306 <_svfprintf_r+0x8fe>
 801c34e:	9b05      	ldr	r3, [sp, #20]
 801c350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c352:	2d00      	cmp	r5, #0
 801c354:	4413      	add	r3, r2
 801c356:	9304      	str	r3, [sp, #16]
 801c358:	dcf7      	bgt.n	801c34a <_svfprintf_r+0x942>
 801c35a:	9a04      	ldr	r2, [sp, #16]
 801c35c:	f1c5 0301 	rsb	r3, r5, #1
 801c360:	441a      	add	r2, r3
 801c362:	4613      	mov	r3, r2
 801c364:	e7f0      	b.n	801c348 <_svfprintf_r+0x940>
 801c366:	9504      	str	r5, [sp, #16]
 801c368:	e7cc      	b.n	801c304 <_svfprintf_r+0x8fc>
 801c36a:	2366      	movs	r3, #102	; 0x66
 801c36c:	9307      	str	r3, [sp, #28]
 801c36e:	2301      	movs	r3, #1
 801c370:	9304      	str	r3, [sp, #16]
 801c372:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801c376:	9309      	str	r3, [sp, #36]	; 0x24
 801c378:	d025      	beq.n	801c3c6 <_svfprintf_r+0x9be>
 801c37a:	2300      	movs	r3, #0
 801c37c:	2d00      	cmp	r5, #0
 801c37e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c382:	f77f ae61 	ble.w	801c048 <_svfprintf_r+0x640>
 801c386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c388:	781b      	ldrb	r3, [r3, #0]
 801c38a:	2bff      	cmp	r3, #255	; 0xff
 801c38c:	d10a      	bne.n	801c3a4 <_svfprintf_r+0x99c>
 801c38e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c392:	9904      	ldr	r1, [sp, #16]
 801c394:	4413      	add	r3, r2
 801c396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c398:	fb02 1303 	mla	r3, r2, r3, r1
 801c39c:	9304      	str	r3, [sp, #16]
 801c39e:	e653      	b.n	801c048 <_svfprintf_r+0x640>
 801c3a0:	9504      	str	r5, [sp, #16]
 801c3a2:	e7d2      	b.n	801c34a <_svfprintf_r+0x942>
 801c3a4:	42ab      	cmp	r3, r5
 801c3a6:	daf2      	bge.n	801c38e <_svfprintf_r+0x986>
 801c3a8:	1aed      	subs	r5, r5, r3
 801c3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3ac:	785b      	ldrb	r3, [r3, #1]
 801c3ae:	b133      	cbz	r3, 801c3be <_svfprintf_r+0x9b6>
 801c3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3b2:	3301      	adds	r3, #1
 801c3b4:	9309      	str	r3, [sp, #36]	; 0x24
 801c3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3b8:	3301      	adds	r3, #1
 801c3ba:	930a      	str	r3, [sp, #40]	; 0x28
 801c3bc:	e7e3      	b.n	801c386 <_svfprintf_r+0x97e>
 801c3be:	9b08      	ldr	r3, [sp, #32]
 801c3c0:	3301      	adds	r3, #1
 801c3c2:	9308      	str	r3, [sp, #32]
 801c3c4:	e7df      	b.n	801c386 <_svfprintf_r+0x97e>
 801c3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3c8:	9308      	str	r3, [sp, #32]
 801c3ca:	e63d      	b.n	801c048 <_svfprintf_r+0x640>
 801c3cc:	4632      	mov	r2, r6
 801c3ce:	f018 0f20 	tst.w	r8, #32
 801c3d2:	f852 3b04 	ldr.w	r3, [r2], #4
 801c3d6:	9206      	str	r2, [sp, #24]
 801c3d8:	d009      	beq.n	801c3ee <_svfprintf_r+0x9e6>
 801c3da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3dc:	4610      	mov	r0, r2
 801c3de:	17d1      	asrs	r1, r2, #31
 801c3e0:	e9c3 0100 	strd	r0, r1, [r3]
 801c3e4:	9e06      	ldr	r6, [sp, #24]
 801c3e6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801c3ea:	f7ff bb4d 	b.w	801ba88 <_svfprintf_r+0x80>
 801c3ee:	f018 0f10 	tst.w	r8, #16
 801c3f2:	d002      	beq.n	801c3fa <_svfprintf_r+0x9f2>
 801c3f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3f6:	601a      	str	r2, [r3, #0]
 801c3f8:	e7f4      	b.n	801c3e4 <_svfprintf_r+0x9dc>
 801c3fa:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c3fe:	d002      	beq.n	801c406 <_svfprintf_r+0x9fe>
 801c400:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c402:	801a      	strh	r2, [r3, #0]
 801c404:	e7ee      	b.n	801c3e4 <_svfprintf_r+0x9dc>
 801c406:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c40a:	d0f3      	beq.n	801c3f4 <_svfprintf_r+0x9ec>
 801c40c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c40e:	701a      	strb	r2, [r3, #0]
 801c410:	e7e8      	b.n	801c3e4 <_svfprintf_r+0x9dc>
 801c412:	f048 0810 	orr.w	r8, r8, #16
 801c416:	f018 0f20 	tst.w	r8, #32
 801c41a:	d01e      	beq.n	801c45a <_svfprintf_r+0xa52>
 801c41c:	3607      	adds	r6, #7
 801c41e:	f026 0307 	bic.w	r3, r6, #7
 801c422:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c426:	9306      	str	r3, [sp, #24]
 801c428:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801c42c:	2300      	movs	r3, #0
 801c42e:	2200      	movs	r2, #0
 801c430:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801c434:	9a04      	ldr	r2, [sp, #16]
 801c436:	3201      	adds	r2, #1
 801c438:	f000 848d 	beq.w	801cd56 <_svfprintf_r+0x134e>
 801c43c:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801c440:	9203      	str	r2, [sp, #12]
 801c442:	ea56 0207 	orrs.w	r2, r6, r7
 801c446:	f040 848c 	bne.w	801cd62 <_svfprintf_r+0x135a>
 801c44a:	9a04      	ldr	r2, [sp, #16]
 801c44c:	2a00      	cmp	r2, #0
 801c44e:	f000 80f5 	beq.w	801c63c <_svfprintf_r+0xc34>
 801c452:	2b01      	cmp	r3, #1
 801c454:	f040 8488 	bne.w	801cd68 <_svfprintf_r+0x1360>
 801c458:	e097      	b.n	801c58a <_svfprintf_r+0xb82>
 801c45a:	1d33      	adds	r3, r6, #4
 801c45c:	f018 0f10 	tst.w	r8, #16
 801c460:	9306      	str	r3, [sp, #24]
 801c462:	d001      	beq.n	801c468 <_svfprintf_r+0xa60>
 801c464:	6836      	ldr	r6, [r6, #0]
 801c466:	e003      	b.n	801c470 <_svfprintf_r+0xa68>
 801c468:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c46c:	d002      	beq.n	801c474 <_svfprintf_r+0xa6c>
 801c46e:	8836      	ldrh	r6, [r6, #0]
 801c470:	2700      	movs	r7, #0
 801c472:	e7d9      	b.n	801c428 <_svfprintf_r+0xa20>
 801c474:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c478:	d0f4      	beq.n	801c464 <_svfprintf_r+0xa5c>
 801c47a:	7836      	ldrb	r6, [r6, #0]
 801c47c:	e7f8      	b.n	801c470 <_svfprintf_r+0xa68>
 801c47e:	4633      	mov	r3, r6
 801c480:	2278      	movs	r2, #120	; 0x78
 801c482:	f853 6b04 	ldr.w	r6, [r3], #4
 801c486:	9306      	str	r3, [sp, #24]
 801c488:	f647 0330 	movw	r3, #30768	; 0x7830
 801c48c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801c490:	4ba1      	ldr	r3, [pc, #644]	; (801c718 <_svfprintf_r+0xd10>)
 801c492:	9316      	str	r3, [sp, #88]	; 0x58
 801c494:	2700      	movs	r7, #0
 801c496:	f048 0802 	orr.w	r8, r8, #2
 801c49a:	2302      	movs	r3, #2
 801c49c:	9207      	str	r2, [sp, #28]
 801c49e:	e7c6      	b.n	801c42e <_svfprintf_r+0xa26>
 801c4a0:	4633      	mov	r3, r6
 801c4a2:	2500      	movs	r5, #0
 801c4a4:	f853 bb04 	ldr.w	fp, [r3], #4
 801c4a8:	9306      	str	r3, [sp, #24]
 801c4aa:	9b04      	ldr	r3, [sp, #16]
 801c4ac:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801c4b0:	1c59      	adds	r1, r3, #1
 801c4b2:	d010      	beq.n	801c4d6 <_svfprintf_r+0xace>
 801c4b4:	461a      	mov	r2, r3
 801c4b6:	4629      	mov	r1, r5
 801c4b8:	4658      	mov	r0, fp
 801c4ba:	f7e3 fec1 	bl	8000240 <memchr>
 801c4be:	9003      	str	r0, [sp, #12]
 801c4c0:	2800      	cmp	r0, #0
 801c4c2:	f000 80d2 	beq.w	801c66a <_svfprintf_r+0xc62>
 801c4c6:	eba0 030b 	sub.w	r3, r0, fp
 801c4ca:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801c4ce:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801c4d2:	462e      	mov	r6, r5
 801c4d4:	e5c0      	b.n	801c058 <_svfprintf_r+0x650>
 801c4d6:	4658      	mov	r0, fp
 801c4d8:	f7e3 fea4 	bl	8000224 <strlen>
 801c4dc:	e9cd 5003 	strd	r5, r0, [sp, #12]
 801c4e0:	e463      	b.n	801bdaa <_svfprintf_r+0x3a2>
 801c4e2:	f048 0810 	orr.w	r8, r8, #16
 801c4e6:	f018 0f20 	tst.w	r8, #32
 801c4ea:	d007      	beq.n	801c4fc <_svfprintf_r+0xaf4>
 801c4ec:	3607      	adds	r6, #7
 801c4ee:	f026 0307 	bic.w	r3, r6, #7
 801c4f2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c4f6:	9306      	str	r3, [sp, #24]
 801c4f8:	2301      	movs	r3, #1
 801c4fa:	e798      	b.n	801c42e <_svfprintf_r+0xa26>
 801c4fc:	1d33      	adds	r3, r6, #4
 801c4fe:	f018 0f10 	tst.w	r8, #16
 801c502:	9306      	str	r3, [sp, #24]
 801c504:	d001      	beq.n	801c50a <_svfprintf_r+0xb02>
 801c506:	6836      	ldr	r6, [r6, #0]
 801c508:	e003      	b.n	801c512 <_svfprintf_r+0xb0a>
 801c50a:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c50e:	d002      	beq.n	801c516 <_svfprintf_r+0xb0e>
 801c510:	8836      	ldrh	r6, [r6, #0]
 801c512:	2700      	movs	r7, #0
 801c514:	e7f0      	b.n	801c4f8 <_svfprintf_r+0xaf0>
 801c516:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c51a:	d0f4      	beq.n	801c506 <_svfprintf_r+0xafe>
 801c51c:	7836      	ldrb	r6, [r6, #0]
 801c51e:	e7f8      	b.n	801c512 <_svfprintf_r+0xb0a>
 801c520:	4b7e      	ldr	r3, [pc, #504]	; (801c71c <_svfprintf_r+0xd14>)
 801c522:	9316      	str	r3, [sp, #88]	; 0x58
 801c524:	f018 0f20 	tst.w	r8, #32
 801c528:	d019      	beq.n	801c55e <_svfprintf_r+0xb56>
 801c52a:	3607      	adds	r6, #7
 801c52c:	f026 0307 	bic.w	r3, r6, #7
 801c530:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c534:	9306      	str	r3, [sp, #24]
 801c536:	f018 0f01 	tst.w	r8, #1
 801c53a:	d00a      	beq.n	801c552 <_svfprintf_r+0xb4a>
 801c53c:	ea56 0307 	orrs.w	r3, r6, r7
 801c540:	d007      	beq.n	801c552 <_svfprintf_r+0xb4a>
 801c542:	2330      	movs	r3, #48	; 0x30
 801c544:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801c548:	9b07      	ldr	r3, [sp, #28]
 801c54a:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801c54e:	f048 0802 	orr.w	r8, r8, #2
 801c552:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801c556:	2302      	movs	r3, #2
 801c558:	e769      	b.n	801c42e <_svfprintf_r+0xa26>
 801c55a:	4b6f      	ldr	r3, [pc, #444]	; (801c718 <_svfprintf_r+0xd10>)
 801c55c:	e7e1      	b.n	801c522 <_svfprintf_r+0xb1a>
 801c55e:	1d33      	adds	r3, r6, #4
 801c560:	f018 0f10 	tst.w	r8, #16
 801c564:	9306      	str	r3, [sp, #24]
 801c566:	d001      	beq.n	801c56c <_svfprintf_r+0xb64>
 801c568:	6836      	ldr	r6, [r6, #0]
 801c56a:	e003      	b.n	801c574 <_svfprintf_r+0xb6c>
 801c56c:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c570:	d002      	beq.n	801c578 <_svfprintf_r+0xb70>
 801c572:	8836      	ldrh	r6, [r6, #0]
 801c574:	2700      	movs	r7, #0
 801c576:	e7de      	b.n	801c536 <_svfprintf_r+0xb2e>
 801c578:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c57c:	d0f4      	beq.n	801c568 <_svfprintf_r+0xb60>
 801c57e:	7836      	ldrb	r6, [r6, #0]
 801c580:	e7f8      	b.n	801c574 <_svfprintf_r+0xb6c>
 801c582:	2f00      	cmp	r7, #0
 801c584:	bf08      	it	eq
 801c586:	2e0a      	cmpeq	r6, #10
 801c588:	d206      	bcs.n	801c598 <_svfprintf_r+0xb90>
 801c58a:	3630      	adds	r6, #48	; 0x30
 801c58c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801c590:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 801c594:	f000 bc06 	b.w	801cda4 <_svfprintf_r+0x139c>
 801c598:	2300      	movs	r3, #0
 801c59a:	9305      	str	r3, [sp, #20]
 801c59c:	9b03      	ldr	r3, [sp, #12]
 801c59e:	ad4e      	add	r5, sp, #312	; 0x138
 801c5a0:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801c5a4:	220a      	movs	r2, #10
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	4630      	mov	r0, r6
 801c5aa:	4639      	mov	r1, r7
 801c5ac:	f7e4 fb7c 	bl	8000ca8 <__aeabi_uldivmod>
 801c5b0:	9b05      	ldr	r3, [sp, #20]
 801c5b2:	3230      	adds	r2, #48	; 0x30
 801c5b4:	3301      	adds	r3, #1
 801c5b6:	f105 3bff 	add.w	fp, r5, #4294967295
 801c5ba:	f805 2c01 	strb.w	r2, [r5, #-1]
 801c5be:	9305      	str	r3, [sp, #20]
 801c5c0:	f1b8 0f00 	cmp.w	r8, #0
 801c5c4:	d019      	beq.n	801c5fa <_svfprintf_r+0xbf2>
 801c5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5c8:	9a05      	ldr	r2, [sp, #20]
 801c5ca:	781b      	ldrb	r3, [r3, #0]
 801c5cc:	429a      	cmp	r2, r3
 801c5ce:	d114      	bne.n	801c5fa <_svfprintf_r+0xbf2>
 801c5d0:	2aff      	cmp	r2, #255	; 0xff
 801c5d2:	d012      	beq.n	801c5fa <_svfprintf_r+0xbf2>
 801c5d4:	2f00      	cmp	r7, #0
 801c5d6:	bf08      	it	eq
 801c5d8:	2e0a      	cmpeq	r6, #10
 801c5da:	d30e      	bcc.n	801c5fa <_svfprintf_r+0xbf2>
 801c5dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c5de:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c5e0:	ebab 0b03 	sub.w	fp, fp, r3
 801c5e4:	461a      	mov	r2, r3
 801c5e6:	4658      	mov	r0, fp
 801c5e8:	f7ff f969 	bl	801b8be <strncpy>
 801c5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5ee:	785d      	ldrb	r5, [r3, #1]
 801c5f0:	b195      	cbz	r5, 801c618 <_svfprintf_r+0xc10>
 801c5f2:	3301      	adds	r3, #1
 801c5f4:	930a      	str	r3, [sp, #40]	; 0x28
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	9305      	str	r3, [sp, #20]
 801c5fa:	220a      	movs	r2, #10
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	4630      	mov	r0, r6
 801c600:	4639      	mov	r1, r7
 801c602:	f7e4 fb51 	bl	8000ca8 <__aeabi_uldivmod>
 801c606:	2f00      	cmp	r7, #0
 801c608:	bf08      	it	eq
 801c60a:	2e0a      	cmpeq	r6, #10
 801c60c:	f0c0 83ca 	bcc.w	801cda4 <_svfprintf_r+0x139c>
 801c610:	4606      	mov	r6, r0
 801c612:	460f      	mov	r7, r1
 801c614:	465d      	mov	r5, fp
 801c616:	e7c5      	b.n	801c5a4 <_svfprintf_r+0xb9c>
 801c618:	9505      	str	r5, [sp, #20]
 801c61a:	e7ee      	b.n	801c5fa <_svfprintf_r+0xbf2>
 801c61c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c61e:	f006 030f 	and.w	r3, r6, #15
 801c622:	5cd3      	ldrb	r3, [r2, r3]
 801c624:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801c628:	0933      	lsrs	r3, r6, #4
 801c62a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801c62e:	093a      	lsrs	r2, r7, #4
 801c630:	461e      	mov	r6, r3
 801c632:	4617      	mov	r7, r2
 801c634:	ea56 0307 	orrs.w	r3, r6, r7
 801c638:	d1f0      	bne.n	801c61c <_svfprintf_r+0xc14>
 801c63a:	e3b3      	b.n	801cda4 <_svfprintf_r+0x139c>
 801c63c:	b933      	cbnz	r3, 801c64c <_svfprintf_r+0xc44>
 801c63e:	f018 0f01 	tst.w	r8, #1
 801c642:	d003      	beq.n	801c64c <_svfprintf_r+0xc44>
 801c644:	2330      	movs	r3, #48	; 0x30
 801c646:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801c64a:	e7a1      	b.n	801c590 <_svfprintf_r+0xb88>
 801c64c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801c650:	e3a8      	b.n	801cda4 <_svfprintf_r+0x139c>
 801c652:	9b07      	ldr	r3, [sp, #28]
 801c654:	2b00      	cmp	r3, #0
 801c656:	f000 8373 	beq.w	801cd40 <_svfprintf_r+0x1338>
 801c65a:	2000      	movs	r0, #0
 801c65c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801c660:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801c664:	9606      	str	r6, [sp, #24]
 801c666:	f7ff bb34 	b.w	801bcd2 <_svfprintf_r+0x2ca>
 801c66a:	9e03      	ldr	r6, [sp, #12]
 801c66c:	f7ff bb9e 	b.w	801bdac <_svfprintf_r+0x3a4>
 801c670:	2010      	movs	r0, #16
 801c672:	4402      	add	r2, r0
 801c674:	2b07      	cmp	r3, #7
 801c676:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c67a:	6060      	str	r0, [r4, #4]
 801c67c:	dd08      	ble.n	801c690 <_svfprintf_r+0xc88>
 801c67e:	aa22      	add	r2, sp, #136	; 0x88
 801c680:	4649      	mov	r1, r9
 801c682:	4650      	mov	r0, sl
 801c684:	f004 f9e0 	bl	8020a48 <__ssprint_r>
 801c688:	2800      	cmp	r0, #0
 801c68a:	f040 8337 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c68e:	a925      	add	r1, sp, #148	; 0x94
 801c690:	3f10      	subs	r7, #16
 801c692:	460c      	mov	r4, r1
 801c694:	e4fb      	b.n	801c08e <_svfprintf_r+0x686>
 801c696:	460c      	mov	r4, r1
 801c698:	e514      	b.n	801c0c4 <_svfprintf_r+0x6bc>
 801c69a:	aa22      	add	r2, sp, #136	; 0x88
 801c69c:	4649      	mov	r1, r9
 801c69e:	4650      	mov	r0, sl
 801c6a0:	f004 f9d2 	bl	8020a48 <__ssprint_r>
 801c6a4:	2800      	cmp	r0, #0
 801c6a6:	f040 8329 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c6aa:	ac25      	add	r4, sp, #148	; 0x94
 801c6ac:	e51c      	b.n	801c0e8 <_svfprintf_r+0x6e0>
 801c6ae:	aa22      	add	r2, sp, #136	; 0x88
 801c6b0:	4649      	mov	r1, r9
 801c6b2:	4650      	mov	r0, sl
 801c6b4:	f004 f9c8 	bl	8020a48 <__ssprint_r>
 801c6b8:	2800      	cmp	r0, #0
 801c6ba:	f040 831f 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c6be:	ac25      	add	r4, sp, #148	; 0x94
 801c6c0:	e522      	b.n	801c108 <_svfprintf_r+0x700>
 801c6c2:	2010      	movs	r0, #16
 801c6c4:	4402      	add	r2, r0
 801c6c6:	2b07      	cmp	r3, #7
 801c6c8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c6cc:	6060      	str	r0, [r4, #4]
 801c6ce:	dd08      	ble.n	801c6e2 <_svfprintf_r+0xcda>
 801c6d0:	aa22      	add	r2, sp, #136	; 0x88
 801c6d2:	4649      	mov	r1, r9
 801c6d4:	4650      	mov	r0, sl
 801c6d6:	f004 f9b7 	bl	8020a48 <__ssprint_r>
 801c6da:	2800      	cmp	r0, #0
 801c6dc:	f040 830e 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c6e0:	a925      	add	r1, sp, #148	; 0x94
 801c6e2:	3f10      	subs	r7, #16
 801c6e4:	460c      	mov	r4, r1
 801c6e6:	e517      	b.n	801c118 <_svfprintf_r+0x710>
 801c6e8:	460c      	mov	r4, r1
 801c6ea:	e530      	b.n	801c14e <_svfprintf_r+0x746>
 801c6ec:	2010      	movs	r0, #16
 801c6ee:	4402      	add	r2, r0
 801c6f0:	2b07      	cmp	r3, #7
 801c6f2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c6f6:	6060      	str	r0, [r4, #4]
 801c6f8:	dd08      	ble.n	801c70c <_svfprintf_r+0xd04>
 801c6fa:	aa22      	add	r2, sp, #136	; 0x88
 801c6fc:	4649      	mov	r1, r9
 801c6fe:	4650      	mov	r0, sl
 801c700:	f004 f9a2 	bl	8020a48 <__ssprint_r>
 801c704:	2800      	cmp	r0, #0
 801c706:	f040 82f9 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c70a:	a925      	add	r1, sp, #148	; 0x94
 801c70c:	3e10      	subs	r6, #16
 801c70e:	460c      	mov	r4, r1
 801c710:	e522      	b.n	801c158 <_svfprintf_r+0x750>
 801c712:	460c      	mov	r4, r1
 801c714:	e548      	b.n	801c1a8 <_svfprintf_r+0x7a0>
 801c716:	bf00      	nop
 801c718:	080298c8 	.word	0x080298c8
 801c71c:	080298d9 	.word	0x080298d9
 801c720:	9b07      	ldr	r3, [sp, #28]
 801c722:	2b65      	cmp	r3, #101	; 0x65
 801c724:	f340 8232 	ble.w	801cb8c <_svfprintf_r+0x1184>
 801c728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c72c:	2200      	movs	r2, #0
 801c72e:	2300      	movs	r3, #0
 801c730:	f7e4 f9fa 	bl	8000b28 <__aeabi_dcmpeq>
 801c734:	2800      	cmp	r0, #0
 801c736:	d068      	beq.n	801c80a <_svfprintf_r+0xe02>
 801c738:	4b6d      	ldr	r3, [pc, #436]	; (801c8f0 <_svfprintf_r+0xee8>)
 801c73a:	6023      	str	r3, [r4, #0]
 801c73c:	2301      	movs	r3, #1
 801c73e:	441e      	add	r6, r3
 801c740:	6063      	str	r3, [r4, #4]
 801c742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c744:	9624      	str	r6, [sp, #144]	; 0x90
 801c746:	3301      	adds	r3, #1
 801c748:	2b07      	cmp	r3, #7
 801c74a:	9323      	str	r3, [sp, #140]	; 0x8c
 801c74c:	dc37      	bgt.n	801c7be <_svfprintf_r+0xdb6>
 801c74e:	3408      	adds	r4, #8
 801c750:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c752:	9a05      	ldr	r2, [sp, #20]
 801c754:	4293      	cmp	r3, r2
 801c756:	db03      	blt.n	801c760 <_svfprintf_r+0xd58>
 801c758:	f018 0f01 	tst.w	r8, #1
 801c75c:	f43f ad36 	beq.w	801c1cc <_svfprintf_r+0x7c4>
 801c760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c762:	6023      	str	r3, [r4, #0]
 801c764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c768:	6063      	str	r3, [r4, #4]
 801c76a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c76c:	4413      	add	r3, r2
 801c76e:	9324      	str	r3, [sp, #144]	; 0x90
 801c770:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c772:	3301      	adds	r3, #1
 801c774:	2b07      	cmp	r3, #7
 801c776:	9323      	str	r3, [sp, #140]	; 0x8c
 801c778:	dc2b      	bgt.n	801c7d2 <_svfprintf_r+0xdca>
 801c77a:	3408      	adds	r4, #8
 801c77c:	9b05      	ldr	r3, [sp, #20]
 801c77e:	1e5d      	subs	r5, r3, #1
 801c780:	2d00      	cmp	r5, #0
 801c782:	f77f ad23 	ble.w	801c1cc <_svfprintf_r+0x7c4>
 801c786:	4e5b      	ldr	r6, [pc, #364]	; (801c8f4 <_svfprintf_r+0xeec>)
 801c788:	2710      	movs	r7, #16
 801c78a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c78e:	2d10      	cmp	r5, #16
 801c790:	f103 0301 	add.w	r3, r3, #1
 801c794:	f104 0108 	add.w	r1, r4, #8
 801c798:	6026      	str	r6, [r4, #0]
 801c79a:	dc24      	bgt.n	801c7e6 <_svfprintf_r+0xdde>
 801c79c:	6065      	str	r5, [r4, #4]
 801c79e:	2b07      	cmp	r3, #7
 801c7a0:	4415      	add	r5, r2
 801c7a2:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801c7a6:	f340 8288 	ble.w	801ccba <_svfprintf_r+0x12b2>
 801c7aa:	aa22      	add	r2, sp, #136	; 0x88
 801c7ac:	4649      	mov	r1, r9
 801c7ae:	4650      	mov	r0, sl
 801c7b0:	f004 f94a 	bl	8020a48 <__ssprint_r>
 801c7b4:	2800      	cmp	r0, #0
 801c7b6:	f040 82a1 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c7ba:	ac25      	add	r4, sp, #148	; 0x94
 801c7bc:	e506      	b.n	801c1cc <_svfprintf_r+0x7c4>
 801c7be:	aa22      	add	r2, sp, #136	; 0x88
 801c7c0:	4649      	mov	r1, r9
 801c7c2:	4650      	mov	r0, sl
 801c7c4:	f004 f940 	bl	8020a48 <__ssprint_r>
 801c7c8:	2800      	cmp	r0, #0
 801c7ca:	f040 8297 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c7ce:	ac25      	add	r4, sp, #148	; 0x94
 801c7d0:	e7be      	b.n	801c750 <_svfprintf_r+0xd48>
 801c7d2:	aa22      	add	r2, sp, #136	; 0x88
 801c7d4:	4649      	mov	r1, r9
 801c7d6:	4650      	mov	r0, sl
 801c7d8:	f004 f936 	bl	8020a48 <__ssprint_r>
 801c7dc:	2800      	cmp	r0, #0
 801c7de:	f040 828d 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c7e2:	ac25      	add	r4, sp, #148	; 0x94
 801c7e4:	e7ca      	b.n	801c77c <_svfprintf_r+0xd74>
 801c7e6:	3210      	adds	r2, #16
 801c7e8:	2b07      	cmp	r3, #7
 801c7ea:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c7ee:	6067      	str	r7, [r4, #4]
 801c7f0:	dd08      	ble.n	801c804 <_svfprintf_r+0xdfc>
 801c7f2:	aa22      	add	r2, sp, #136	; 0x88
 801c7f4:	4649      	mov	r1, r9
 801c7f6:	4650      	mov	r0, sl
 801c7f8:	f004 f926 	bl	8020a48 <__ssprint_r>
 801c7fc:	2800      	cmp	r0, #0
 801c7fe:	f040 827d 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c802:	a925      	add	r1, sp, #148	; 0x94
 801c804:	3d10      	subs	r5, #16
 801c806:	460c      	mov	r4, r1
 801c808:	e7bf      	b.n	801c78a <_svfprintf_r+0xd82>
 801c80a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	dc73      	bgt.n	801c8f8 <_svfprintf_r+0xef0>
 801c810:	4b37      	ldr	r3, [pc, #220]	; (801c8f0 <_svfprintf_r+0xee8>)
 801c812:	6023      	str	r3, [r4, #0]
 801c814:	2301      	movs	r3, #1
 801c816:	441e      	add	r6, r3
 801c818:	6063      	str	r3, [r4, #4]
 801c81a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c81c:	9624      	str	r6, [sp, #144]	; 0x90
 801c81e:	3301      	adds	r3, #1
 801c820:	2b07      	cmp	r3, #7
 801c822:	9323      	str	r3, [sp, #140]	; 0x8c
 801c824:	dc3d      	bgt.n	801c8a2 <_svfprintf_r+0xe9a>
 801c826:	3408      	adds	r4, #8
 801c828:	9905      	ldr	r1, [sp, #20]
 801c82a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c82c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c82e:	430a      	orrs	r2, r1
 801c830:	f008 0101 	and.w	r1, r8, #1
 801c834:	430a      	orrs	r2, r1
 801c836:	f43f acc9 	beq.w	801c1cc <_svfprintf_r+0x7c4>
 801c83a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c83c:	6022      	str	r2, [r4, #0]
 801c83e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c840:	6062      	str	r2, [r4, #4]
 801c842:	4413      	add	r3, r2
 801c844:	9324      	str	r3, [sp, #144]	; 0x90
 801c846:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c848:	3301      	adds	r3, #1
 801c84a:	2b07      	cmp	r3, #7
 801c84c:	9323      	str	r3, [sp, #140]	; 0x8c
 801c84e:	dc32      	bgt.n	801c8b6 <_svfprintf_r+0xeae>
 801c850:	3408      	adds	r4, #8
 801c852:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c854:	2d00      	cmp	r5, #0
 801c856:	da1b      	bge.n	801c890 <_svfprintf_r+0xe88>
 801c858:	4e26      	ldr	r6, [pc, #152]	; (801c8f4 <_svfprintf_r+0xeec>)
 801c85a:	426d      	negs	r5, r5
 801c85c:	4623      	mov	r3, r4
 801c85e:	2710      	movs	r7, #16
 801c860:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801c864:	2d10      	cmp	r5, #16
 801c866:	f102 0201 	add.w	r2, r2, #1
 801c86a:	f104 0408 	add.w	r4, r4, #8
 801c86e:	601e      	str	r6, [r3, #0]
 801c870:	dc2b      	bgt.n	801c8ca <_svfprintf_r+0xec2>
 801c872:	605d      	str	r5, [r3, #4]
 801c874:	2a07      	cmp	r2, #7
 801c876:	440d      	add	r5, r1
 801c878:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801c87c:	dd08      	ble.n	801c890 <_svfprintf_r+0xe88>
 801c87e:	aa22      	add	r2, sp, #136	; 0x88
 801c880:	4649      	mov	r1, r9
 801c882:	4650      	mov	r0, sl
 801c884:	f004 f8e0 	bl	8020a48 <__ssprint_r>
 801c888:	2800      	cmp	r0, #0
 801c88a:	f040 8237 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c88e:	ac25      	add	r4, sp, #148	; 0x94
 801c890:	9b05      	ldr	r3, [sp, #20]
 801c892:	9a05      	ldr	r2, [sp, #20]
 801c894:	6063      	str	r3, [r4, #4]
 801c896:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c898:	f8c4 b000 	str.w	fp, [r4]
 801c89c:	4413      	add	r3, r2
 801c89e:	9324      	str	r3, [sp, #144]	; 0x90
 801c8a0:	e48d      	b.n	801c1be <_svfprintf_r+0x7b6>
 801c8a2:	aa22      	add	r2, sp, #136	; 0x88
 801c8a4:	4649      	mov	r1, r9
 801c8a6:	4650      	mov	r0, sl
 801c8a8:	f004 f8ce 	bl	8020a48 <__ssprint_r>
 801c8ac:	2800      	cmp	r0, #0
 801c8ae:	f040 8225 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c8b2:	ac25      	add	r4, sp, #148	; 0x94
 801c8b4:	e7b8      	b.n	801c828 <_svfprintf_r+0xe20>
 801c8b6:	aa22      	add	r2, sp, #136	; 0x88
 801c8b8:	4649      	mov	r1, r9
 801c8ba:	4650      	mov	r0, sl
 801c8bc:	f004 f8c4 	bl	8020a48 <__ssprint_r>
 801c8c0:	2800      	cmp	r0, #0
 801c8c2:	f040 821b 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c8c6:	ac25      	add	r4, sp, #148	; 0x94
 801c8c8:	e7c3      	b.n	801c852 <_svfprintf_r+0xe4a>
 801c8ca:	3110      	adds	r1, #16
 801c8cc:	2a07      	cmp	r2, #7
 801c8ce:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801c8d2:	605f      	str	r7, [r3, #4]
 801c8d4:	dd08      	ble.n	801c8e8 <_svfprintf_r+0xee0>
 801c8d6:	aa22      	add	r2, sp, #136	; 0x88
 801c8d8:	4649      	mov	r1, r9
 801c8da:	4650      	mov	r0, sl
 801c8dc:	f004 f8b4 	bl	8020a48 <__ssprint_r>
 801c8e0:	2800      	cmp	r0, #0
 801c8e2:	f040 820b 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c8e6:	ac25      	add	r4, sp, #148	; 0x94
 801c8e8:	3d10      	subs	r5, #16
 801c8ea:	4623      	mov	r3, r4
 801c8ec:	e7b8      	b.n	801c860 <_svfprintf_r+0xe58>
 801c8ee:	bf00      	nop
 801c8f0:	080298ea 	.word	0x080298ea
 801c8f4:	080298fc 	.word	0x080298fc
 801c8f8:	9b05      	ldr	r3, [sp, #20]
 801c8fa:	42ab      	cmp	r3, r5
 801c8fc:	bfa8      	it	ge
 801c8fe:	462b      	movge	r3, r5
 801c900:	2b00      	cmp	r3, #0
 801c902:	461f      	mov	r7, r3
 801c904:	dd0a      	ble.n	801c91c <_svfprintf_r+0xf14>
 801c906:	441e      	add	r6, r3
 801c908:	e9c4 b300 	strd	fp, r3, [r4]
 801c90c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c90e:	9624      	str	r6, [sp, #144]	; 0x90
 801c910:	3301      	adds	r3, #1
 801c912:	2b07      	cmp	r3, #7
 801c914:	9323      	str	r3, [sp, #140]	; 0x8c
 801c916:	f300 8086 	bgt.w	801ca26 <_svfprintf_r+0x101e>
 801c91a:	3408      	adds	r4, #8
 801c91c:	2f00      	cmp	r7, #0
 801c91e:	bfac      	ite	ge
 801c920:	1bee      	subge	r6, r5, r7
 801c922:	462e      	movlt	r6, r5
 801c924:	2e00      	cmp	r6, #0
 801c926:	dd19      	ble.n	801c95c <_svfprintf_r+0xf54>
 801c928:	4f97      	ldr	r7, [pc, #604]	; (801cb88 <_svfprintf_r+0x1180>)
 801c92a:	6027      	str	r7, [r4, #0]
 801c92c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c930:	2e10      	cmp	r6, #16
 801c932:	f103 0301 	add.w	r3, r3, #1
 801c936:	f104 0108 	add.w	r1, r4, #8
 801c93a:	dc7e      	bgt.n	801ca3a <_svfprintf_r+0x1032>
 801c93c:	6066      	str	r6, [r4, #4]
 801c93e:	2b07      	cmp	r3, #7
 801c940:	4416      	add	r6, r2
 801c942:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801c946:	f340 808b 	ble.w	801ca60 <_svfprintf_r+0x1058>
 801c94a:	aa22      	add	r2, sp, #136	; 0x88
 801c94c:	4649      	mov	r1, r9
 801c94e:	4650      	mov	r0, sl
 801c950:	f004 f87a 	bl	8020a48 <__ssprint_r>
 801c954:	2800      	cmp	r0, #0
 801c956:	f040 81d1 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801c95a:	ac25      	add	r4, sp, #148	; 0x94
 801c95c:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801c960:	445d      	add	r5, fp
 801c962:	d00b      	beq.n	801c97c <_svfprintf_r+0xf74>
 801c964:	4e88      	ldr	r6, [pc, #544]	; (801cb88 <_svfprintf_r+0x1180>)
 801c966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d17b      	bne.n	801ca64 <_svfprintf_r+0x105c>
 801c96c:	9b08      	ldr	r3, [sp, #32]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d17b      	bne.n	801ca6a <_svfprintf_r+0x1062>
 801c972:	9b05      	ldr	r3, [sp, #20]
 801c974:	445b      	add	r3, fp
 801c976:	429d      	cmp	r5, r3
 801c978:	bf28      	it	cs
 801c97a:	461d      	movcs	r5, r3
 801c97c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c97e:	9a05      	ldr	r2, [sp, #20]
 801c980:	4293      	cmp	r3, r2
 801c982:	db02      	blt.n	801c98a <_svfprintf_r+0xf82>
 801c984:	f018 0f01 	tst.w	r8, #1
 801c988:	d00e      	beq.n	801c9a8 <_svfprintf_r+0xfa0>
 801c98a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c98c:	6023      	str	r3, [r4, #0]
 801c98e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c992:	6063      	str	r3, [r4, #4]
 801c994:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c996:	4413      	add	r3, r2
 801c998:	9324      	str	r3, [sp, #144]	; 0x90
 801c99a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c99c:	3301      	adds	r3, #1
 801c99e:	2b07      	cmp	r3, #7
 801c9a0:	9323      	str	r3, [sp, #140]	; 0x8c
 801c9a2:	f300 80dd 	bgt.w	801cb60 <_svfprintf_r+0x1158>
 801c9a6:	3408      	adds	r4, #8
 801c9a8:	9b05      	ldr	r3, [sp, #20]
 801c9aa:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801c9ac:	eb0b 0203 	add.w	r2, fp, r3
 801c9b0:	1b9e      	subs	r6, r3, r6
 801c9b2:	1b52      	subs	r2, r2, r5
 801c9b4:	4296      	cmp	r6, r2
 801c9b6:	bfa8      	it	ge
 801c9b8:	4616      	movge	r6, r2
 801c9ba:	2e00      	cmp	r6, #0
 801c9bc:	dd0b      	ble.n	801c9d6 <_svfprintf_r+0xfce>
 801c9be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c9c0:	4433      	add	r3, r6
 801c9c2:	9324      	str	r3, [sp, #144]	; 0x90
 801c9c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c9c6:	3301      	adds	r3, #1
 801c9c8:	2b07      	cmp	r3, #7
 801c9ca:	e9c4 5600 	strd	r5, r6, [r4]
 801c9ce:	9323      	str	r3, [sp, #140]	; 0x8c
 801c9d0:	f300 80d0 	bgt.w	801cb74 <_svfprintf_r+0x116c>
 801c9d4:	3408      	adds	r4, #8
 801c9d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c9d8:	9b05      	ldr	r3, [sp, #20]
 801c9da:	2e00      	cmp	r6, #0
 801c9dc:	eba3 0505 	sub.w	r5, r3, r5
 801c9e0:	bfa8      	it	ge
 801c9e2:	1bad      	subge	r5, r5, r6
 801c9e4:	2d00      	cmp	r5, #0
 801c9e6:	f77f abf1 	ble.w	801c1cc <_svfprintf_r+0x7c4>
 801c9ea:	4e67      	ldr	r6, [pc, #412]	; (801cb88 <_svfprintf_r+0x1180>)
 801c9ec:	2710      	movs	r7, #16
 801c9ee:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c9f2:	2d10      	cmp	r5, #16
 801c9f4:	f103 0301 	add.w	r3, r3, #1
 801c9f8:	f104 0108 	add.w	r1, r4, #8
 801c9fc:	6026      	str	r6, [r4, #0]
 801c9fe:	f77f aecd 	ble.w	801c79c <_svfprintf_r+0xd94>
 801ca02:	3210      	adds	r2, #16
 801ca04:	2b07      	cmp	r3, #7
 801ca06:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ca0a:	6067      	str	r7, [r4, #4]
 801ca0c:	dd08      	ble.n	801ca20 <_svfprintf_r+0x1018>
 801ca0e:	aa22      	add	r2, sp, #136	; 0x88
 801ca10:	4649      	mov	r1, r9
 801ca12:	4650      	mov	r0, sl
 801ca14:	f004 f818 	bl	8020a48 <__ssprint_r>
 801ca18:	2800      	cmp	r0, #0
 801ca1a:	f040 816f 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801ca1e:	a925      	add	r1, sp, #148	; 0x94
 801ca20:	3d10      	subs	r5, #16
 801ca22:	460c      	mov	r4, r1
 801ca24:	e7e3      	b.n	801c9ee <_svfprintf_r+0xfe6>
 801ca26:	aa22      	add	r2, sp, #136	; 0x88
 801ca28:	4649      	mov	r1, r9
 801ca2a:	4650      	mov	r0, sl
 801ca2c:	f004 f80c 	bl	8020a48 <__ssprint_r>
 801ca30:	2800      	cmp	r0, #0
 801ca32:	f040 8163 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801ca36:	ac25      	add	r4, sp, #148	; 0x94
 801ca38:	e770      	b.n	801c91c <_svfprintf_r+0xf14>
 801ca3a:	2010      	movs	r0, #16
 801ca3c:	4402      	add	r2, r0
 801ca3e:	2b07      	cmp	r3, #7
 801ca40:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ca44:	6060      	str	r0, [r4, #4]
 801ca46:	dd08      	ble.n	801ca5a <_svfprintf_r+0x1052>
 801ca48:	aa22      	add	r2, sp, #136	; 0x88
 801ca4a:	4649      	mov	r1, r9
 801ca4c:	4650      	mov	r0, sl
 801ca4e:	f003 fffb 	bl	8020a48 <__ssprint_r>
 801ca52:	2800      	cmp	r0, #0
 801ca54:	f040 8152 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801ca58:	a925      	add	r1, sp, #148	; 0x94
 801ca5a:	3e10      	subs	r6, #16
 801ca5c:	460c      	mov	r4, r1
 801ca5e:	e764      	b.n	801c92a <_svfprintf_r+0xf22>
 801ca60:	460c      	mov	r4, r1
 801ca62:	e77b      	b.n	801c95c <_svfprintf_r+0xf54>
 801ca64:	9b08      	ldr	r3, [sp, #32]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d04a      	beq.n	801cb00 <_svfprintf_r+0x10f8>
 801ca6a:	9b08      	ldr	r3, [sp, #32]
 801ca6c:	3b01      	subs	r3, #1
 801ca6e:	9308      	str	r3, [sp, #32]
 801ca70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ca72:	6023      	str	r3, [r4, #0]
 801ca74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ca76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ca78:	6063      	str	r3, [r4, #4]
 801ca7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ca7c:	4413      	add	r3, r2
 801ca7e:	9324      	str	r3, [sp, #144]	; 0x90
 801ca80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ca82:	3301      	adds	r3, #1
 801ca84:	2b07      	cmp	r3, #7
 801ca86:	9323      	str	r3, [sp, #140]	; 0x8c
 801ca88:	dc41      	bgt.n	801cb0e <_svfprintf_r+0x1106>
 801ca8a:	3408      	adds	r4, #8
 801ca8c:	9b05      	ldr	r3, [sp, #20]
 801ca8e:	445b      	add	r3, fp
 801ca90:	1b5a      	subs	r2, r3, r5
 801ca92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca94:	781b      	ldrb	r3, [r3, #0]
 801ca96:	4293      	cmp	r3, r2
 801ca98:	bfa8      	it	ge
 801ca9a:	4613      	movge	r3, r2
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	461f      	mov	r7, r3
 801caa0:	dd0a      	ble.n	801cab8 <_svfprintf_r+0x10b0>
 801caa2:	e9c4 5300 	strd	r5, r3, [r4]
 801caa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801caa8:	443b      	add	r3, r7
 801caaa:	9324      	str	r3, [sp, #144]	; 0x90
 801caac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801caae:	3301      	adds	r3, #1
 801cab0:	2b07      	cmp	r3, #7
 801cab2:	9323      	str	r3, [sp, #140]	; 0x8c
 801cab4:	dc35      	bgt.n	801cb22 <_svfprintf_r+0x111a>
 801cab6:	3408      	adds	r4, #8
 801cab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801caba:	781b      	ldrb	r3, [r3, #0]
 801cabc:	2f00      	cmp	r7, #0
 801cabe:	bfac      	ite	ge
 801cac0:	1bdf      	subge	r7, r3, r7
 801cac2:	461f      	movlt	r7, r3
 801cac4:	2f00      	cmp	r7, #0
 801cac6:	dd17      	ble.n	801caf8 <_svfprintf_r+0x10f0>
 801cac8:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801cacc:	2f10      	cmp	r7, #16
 801cace:	f102 0201 	add.w	r2, r2, #1
 801cad2:	f104 0108 	add.w	r1, r4, #8
 801cad6:	6026      	str	r6, [r4, #0]
 801cad8:	dc2d      	bgt.n	801cb36 <_svfprintf_r+0x112e>
 801cada:	443b      	add	r3, r7
 801cadc:	2a07      	cmp	r2, #7
 801cade:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801cae2:	6067      	str	r7, [r4, #4]
 801cae4:	dd3a      	ble.n	801cb5c <_svfprintf_r+0x1154>
 801cae6:	aa22      	add	r2, sp, #136	; 0x88
 801cae8:	4649      	mov	r1, r9
 801caea:	4650      	mov	r0, sl
 801caec:	f003 ffac 	bl	8020a48 <__ssprint_r>
 801caf0:	2800      	cmp	r0, #0
 801caf2:	f040 8103 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801caf6:	ac25      	add	r4, sp, #148	; 0x94
 801caf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cafa:	781b      	ldrb	r3, [r3, #0]
 801cafc:	441d      	add	r5, r3
 801cafe:	e732      	b.n	801c966 <_svfprintf_r+0xf5e>
 801cb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb02:	3b01      	subs	r3, #1
 801cb04:	930a      	str	r3, [sp, #40]	; 0x28
 801cb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb08:	3b01      	subs	r3, #1
 801cb0a:	9309      	str	r3, [sp, #36]	; 0x24
 801cb0c:	e7b0      	b.n	801ca70 <_svfprintf_r+0x1068>
 801cb0e:	aa22      	add	r2, sp, #136	; 0x88
 801cb10:	4649      	mov	r1, r9
 801cb12:	4650      	mov	r0, sl
 801cb14:	f003 ff98 	bl	8020a48 <__ssprint_r>
 801cb18:	2800      	cmp	r0, #0
 801cb1a:	f040 80ef 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801cb1e:	ac25      	add	r4, sp, #148	; 0x94
 801cb20:	e7b4      	b.n	801ca8c <_svfprintf_r+0x1084>
 801cb22:	aa22      	add	r2, sp, #136	; 0x88
 801cb24:	4649      	mov	r1, r9
 801cb26:	4650      	mov	r0, sl
 801cb28:	f003 ff8e 	bl	8020a48 <__ssprint_r>
 801cb2c:	2800      	cmp	r0, #0
 801cb2e:	f040 80e5 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801cb32:	ac25      	add	r4, sp, #148	; 0x94
 801cb34:	e7c0      	b.n	801cab8 <_svfprintf_r+0x10b0>
 801cb36:	2010      	movs	r0, #16
 801cb38:	4403      	add	r3, r0
 801cb3a:	2a07      	cmp	r2, #7
 801cb3c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801cb40:	6060      	str	r0, [r4, #4]
 801cb42:	dd08      	ble.n	801cb56 <_svfprintf_r+0x114e>
 801cb44:	aa22      	add	r2, sp, #136	; 0x88
 801cb46:	4649      	mov	r1, r9
 801cb48:	4650      	mov	r0, sl
 801cb4a:	f003 ff7d 	bl	8020a48 <__ssprint_r>
 801cb4e:	2800      	cmp	r0, #0
 801cb50:	f040 80d4 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801cb54:	a925      	add	r1, sp, #148	; 0x94
 801cb56:	3f10      	subs	r7, #16
 801cb58:	460c      	mov	r4, r1
 801cb5a:	e7b5      	b.n	801cac8 <_svfprintf_r+0x10c0>
 801cb5c:	460c      	mov	r4, r1
 801cb5e:	e7cb      	b.n	801caf8 <_svfprintf_r+0x10f0>
 801cb60:	aa22      	add	r2, sp, #136	; 0x88
 801cb62:	4649      	mov	r1, r9
 801cb64:	4650      	mov	r0, sl
 801cb66:	f003 ff6f 	bl	8020a48 <__ssprint_r>
 801cb6a:	2800      	cmp	r0, #0
 801cb6c:	f040 80c6 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801cb70:	ac25      	add	r4, sp, #148	; 0x94
 801cb72:	e719      	b.n	801c9a8 <_svfprintf_r+0xfa0>
 801cb74:	aa22      	add	r2, sp, #136	; 0x88
 801cb76:	4649      	mov	r1, r9
 801cb78:	4650      	mov	r0, sl
 801cb7a:	f003 ff65 	bl	8020a48 <__ssprint_r>
 801cb7e:	2800      	cmp	r0, #0
 801cb80:	f040 80bc 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801cb84:	ac25      	add	r4, sp, #148	; 0x94
 801cb86:	e726      	b.n	801c9d6 <_svfprintf_r+0xfce>
 801cb88:	080298fc 	.word	0x080298fc
 801cb8c:	9a05      	ldr	r2, [sp, #20]
 801cb8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cb90:	2a01      	cmp	r2, #1
 801cb92:	f106 0601 	add.w	r6, r6, #1
 801cb96:	f103 0301 	add.w	r3, r3, #1
 801cb9a:	f104 0508 	add.w	r5, r4, #8
 801cb9e:	dc02      	bgt.n	801cba6 <_svfprintf_r+0x119e>
 801cba0:	f018 0f01 	tst.w	r8, #1
 801cba4:	d07e      	beq.n	801cca4 <_svfprintf_r+0x129c>
 801cba6:	2201      	movs	r2, #1
 801cba8:	2b07      	cmp	r3, #7
 801cbaa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801cbae:	f8c4 b000 	str.w	fp, [r4]
 801cbb2:	6062      	str	r2, [r4, #4]
 801cbb4:	dd08      	ble.n	801cbc8 <_svfprintf_r+0x11c0>
 801cbb6:	aa22      	add	r2, sp, #136	; 0x88
 801cbb8:	4649      	mov	r1, r9
 801cbba:	4650      	mov	r0, sl
 801cbbc:	f003 ff44 	bl	8020a48 <__ssprint_r>
 801cbc0:	2800      	cmp	r0, #0
 801cbc2:	f040 809b 	bne.w	801ccfc <_svfprintf_r+0x12f4>
 801cbc6:	ad25      	add	r5, sp, #148	; 0x94
 801cbc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cbca:	602b      	str	r3, [r5, #0]
 801cbcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cbce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cbd0:	606b      	str	r3, [r5, #4]
 801cbd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cbd4:	4413      	add	r3, r2
 801cbd6:	9324      	str	r3, [sp, #144]	; 0x90
 801cbd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cbda:	3301      	adds	r3, #1
 801cbdc:	2b07      	cmp	r3, #7
 801cbde:	9323      	str	r3, [sp, #140]	; 0x8c
 801cbe0:	dc32      	bgt.n	801cc48 <_svfprintf_r+0x1240>
 801cbe2:	3508      	adds	r5, #8
 801cbe4:	9b05      	ldr	r3, [sp, #20]
 801cbe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cbea:	1e5c      	subs	r4, r3, #1
 801cbec:	2200      	movs	r2, #0
 801cbee:	2300      	movs	r3, #0
 801cbf0:	f7e3 ff9a 	bl	8000b28 <__aeabi_dcmpeq>
 801cbf4:	2800      	cmp	r0, #0
 801cbf6:	d130      	bne.n	801cc5a <_svfprintf_r+0x1252>
 801cbf8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801cbfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cbfc:	9a05      	ldr	r2, [sp, #20]
 801cbfe:	3101      	adds	r1, #1
 801cc00:	3b01      	subs	r3, #1
 801cc02:	f10b 0001 	add.w	r0, fp, #1
 801cc06:	4413      	add	r3, r2
 801cc08:	2907      	cmp	r1, #7
 801cc0a:	e9c5 0400 	strd	r0, r4, [r5]
 801cc0e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801cc12:	dd50      	ble.n	801ccb6 <_svfprintf_r+0x12ae>
 801cc14:	aa22      	add	r2, sp, #136	; 0x88
 801cc16:	4649      	mov	r1, r9
 801cc18:	4650      	mov	r0, sl
 801cc1a:	f003 ff15 	bl	8020a48 <__ssprint_r>
 801cc1e:	2800      	cmp	r0, #0
 801cc20:	d16c      	bne.n	801ccfc <_svfprintf_r+0x12f4>
 801cc22:	ad25      	add	r5, sp, #148	; 0x94
 801cc24:	ab1e      	add	r3, sp, #120	; 0x78
 801cc26:	602b      	str	r3, [r5, #0]
 801cc28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cc2c:	606b      	str	r3, [r5, #4]
 801cc2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc30:	4413      	add	r3, r2
 801cc32:	9324      	str	r3, [sp, #144]	; 0x90
 801cc34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc36:	3301      	adds	r3, #1
 801cc38:	2b07      	cmp	r3, #7
 801cc3a:	9323      	str	r3, [sp, #140]	; 0x8c
 801cc3c:	f73f adb5 	bgt.w	801c7aa <_svfprintf_r+0xda2>
 801cc40:	f105 0408 	add.w	r4, r5, #8
 801cc44:	f7ff bac2 	b.w	801c1cc <_svfprintf_r+0x7c4>
 801cc48:	aa22      	add	r2, sp, #136	; 0x88
 801cc4a:	4649      	mov	r1, r9
 801cc4c:	4650      	mov	r0, sl
 801cc4e:	f003 fefb 	bl	8020a48 <__ssprint_r>
 801cc52:	2800      	cmp	r0, #0
 801cc54:	d152      	bne.n	801ccfc <_svfprintf_r+0x12f4>
 801cc56:	ad25      	add	r5, sp, #148	; 0x94
 801cc58:	e7c4      	b.n	801cbe4 <_svfprintf_r+0x11dc>
 801cc5a:	2c00      	cmp	r4, #0
 801cc5c:	dde2      	ble.n	801cc24 <_svfprintf_r+0x121c>
 801cc5e:	4e58      	ldr	r6, [pc, #352]	; (801cdc0 <_svfprintf_r+0x13b8>)
 801cc60:	2710      	movs	r7, #16
 801cc62:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801cc66:	2c10      	cmp	r4, #16
 801cc68:	f103 0301 	add.w	r3, r3, #1
 801cc6c:	f105 0108 	add.w	r1, r5, #8
 801cc70:	602e      	str	r6, [r5, #0]
 801cc72:	dc07      	bgt.n	801cc84 <_svfprintf_r+0x127c>
 801cc74:	606c      	str	r4, [r5, #4]
 801cc76:	2b07      	cmp	r3, #7
 801cc78:	4414      	add	r4, r2
 801cc7a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801cc7e:	dcc9      	bgt.n	801cc14 <_svfprintf_r+0x120c>
 801cc80:	460d      	mov	r5, r1
 801cc82:	e7cf      	b.n	801cc24 <_svfprintf_r+0x121c>
 801cc84:	3210      	adds	r2, #16
 801cc86:	2b07      	cmp	r3, #7
 801cc88:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cc8c:	606f      	str	r7, [r5, #4]
 801cc8e:	dd06      	ble.n	801cc9e <_svfprintf_r+0x1296>
 801cc90:	aa22      	add	r2, sp, #136	; 0x88
 801cc92:	4649      	mov	r1, r9
 801cc94:	4650      	mov	r0, sl
 801cc96:	f003 fed7 	bl	8020a48 <__ssprint_r>
 801cc9a:	bb78      	cbnz	r0, 801ccfc <_svfprintf_r+0x12f4>
 801cc9c:	a925      	add	r1, sp, #148	; 0x94
 801cc9e:	3c10      	subs	r4, #16
 801cca0:	460d      	mov	r5, r1
 801cca2:	e7de      	b.n	801cc62 <_svfprintf_r+0x125a>
 801cca4:	2201      	movs	r2, #1
 801cca6:	2b07      	cmp	r3, #7
 801cca8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801ccac:	f8c4 b000 	str.w	fp, [r4]
 801ccb0:	6062      	str	r2, [r4, #4]
 801ccb2:	ddb7      	ble.n	801cc24 <_svfprintf_r+0x121c>
 801ccb4:	e7ae      	b.n	801cc14 <_svfprintf_r+0x120c>
 801ccb6:	3508      	adds	r5, #8
 801ccb8:	e7b4      	b.n	801cc24 <_svfprintf_r+0x121c>
 801ccba:	460c      	mov	r4, r1
 801ccbc:	f7ff ba86 	b.w	801c1cc <_svfprintf_r+0x7c4>
 801ccc0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801ccc4:	1a9d      	subs	r5, r3, r2
 801ccc6:	2d00      	cmp	r5, #0
 801ccc8:	f77f aa84 	ble.w	801c1d4 <_svfprintf_r+0x7cc>
 801cccc:	4e3d      	ldr	r6, [pc, #244]	; (801cdc4 <_svfprintf_r+0x13bc>)
 801ccce:	2710      	movs	r7, #16
 801ccd0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ccd4:	2d10      	cmp	r5, #16
 801ccd6:	f103 0301 	add.w	r3, r3, #1
 801ccda:	6026      	str	r6, [r4, #0]
 801ccdc:	dc18      	bgt.n	801cd10 <_svfprintf_r+0x1308>
 801ccde:	6065      	str	r5, [r4, #4]
 801cce0:	2b07      	cmp	r3, #7
 801cce2:	4415      	add	r5, r2
 801cce4:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801cce8:	f77f aa74 	ble.w	801c1d4 <_svfprintf_r+0x7cc>
 801ccec:	aa22      	add	r2, sp, #136	; 0x88
 801ccee:	4649      	mov	r1, r9
 801ccf0:	4650      	mov	r0, sl
 801ccf2:	f003 fea9 	bl	8020a48 <__ssprint_r>
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	f43f aa6c 	beq.w	801c1d4 <_svfprintf_r+0x7cc>
 801ccfc:	9b03      	ldr	r3, [sp, #12]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	f43f a88a 	beq.w	801be18 <_svfprintf_r+0x410>
 801cd04:	4619      	mov	r1, r3
 801cd06:	4650      	mov	r0, sl
 801cd08:	f002 fd7a 	bl	801f800 <_free_r>
 801cd0c:	f7ff b884 	b.w	801be18 <_svfprintf_r+0x410>
 801cd10:	3210      	adds	r2, #16
 801cd12:	2b07      	cmp	r3, #7
 801cd14:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cd18:	6067      	str	r7, [r4, #4]
 801cd1a:	dc02      	bgt.n	801cd22 <_svfprintf_r+0x131a>
 801cd1c:	3408      	adds	r4, #8
 801cd1e:	3d10      	subs	r5, #16
 801cd20:	e7d6      	b.n	801ccd0 <_svfprintf_r+0x12c8>
 801cd22:	aa22      	add	r2, sp, #136	; 0x88
 801cd24:	4649      	mov	r1, r9
 801cd26:	4650      	mov	r0, sl
 801cd28:	f003 fe8e 	bl	8020a48 <__ssprint_r>
 801cd2c:	2800      	cmp	r0, #0
 801cd2e:	d1e5      	bne.n	801ccfc <_svfprintf_r+0x12f4>
 801cd30:	ac25      	add	r4, sp, #148	; 0x94
 801cd32:	e7f4      	b.n	801cd1e <_svfprintf_r+0x1316>
 801cd34:	9903      	ldr	r1, [sp, #12]
 801cd36:	4650      	mov	r0, sl
 801cd38:	f002 fd62 	bl	801f800 <_free_r>
 801cd3c:	f7ff ba62 	b.w	801c204 <_svfprintf_r+0x7fc>
 801cd40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	f43f a868 	beq.w	801be18 <_svfprintf_r+0x410>
 801cd48:	aa22      	add	r2, sp, #136	; 0x88
 801cd4a:	4649      	mov	r1, r9
 801cd4c:	4650      	mov	r0, sl
 801cd4e:	f003 fe7b 	bl	8020a48 <__ssprint_r>
 801cd52:	f7ff b861 	b.w	801be18 <_svfprintf_r+0x410>
 801cd56:	ea56 0207 	orrs.w	r2, r6, r7
 801cd5a:	f8cd 800c 	str.w	r8, [sp, #12]
 801cd5e:	f43f ab78 	beq.w	801c452 <_svfprintf_r+0xa4a>
 801cd62:	2b01      	cmp	r3, #1
 801cd64:	f43f ac0d 	beq.w	801c582 <_svfprintf_r+0xb7a>
 801cd68:	2b02      	cmp	r3, #2
 801cd6a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801cd6e:	f43f ac55 	beq.w	801c61c <_svfprintf_r+0xc14>
 801cd72:	08f2      	lsrs	r2, r6, #3
 801cd74:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801cd78:	08f8      	lsrs	r0, r7, #3
 801cd7a:	f006 0307 	and.w	r3, r6, #7
 801cd7e:	4607      	mov	r7, r0
 801cd80:	4616      	mov	r6, r2
 801cd82:	3330      	adds	r3, #48	; 0x30
 801cd84:	ea56 0207 	orrs.w	r2, r6, r7
 801cd88:	4659      	mov	r1, fp
 801cd8a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801cd8e:	d1f0      	bne.n	801cd72 <_svfprintf_r+0x136a>
 801cd90:	9a03      	ldr	r2, [sp, #12]
 801cd92:	07d2      	lsls	r2, r2, #31
 801cd94:	d506      	bpl.n	801cda4 <_svfprintf_r+0x139c>
 801cd96:	2b30      	cmp	r3, #48	; 0x30
 801cd98:	d004      	beq.n	801cda4 <_svfprintf_r+0x139c>
 801cd9a:	2330      	movs	r3, #48	; 0x30
 801cd9c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801cda0:	f1a1 0b02 	sub.w	fp, r1, #2
 801cda4:	ab4e      	add	r3, sp, #312	; 0x138
 801cda6:	eba3 030b 	sub.w	r3, r3, fp
 801cdaa:	9e04      	ldr	r6, [sp, #16]
 801cdac:	9304      	str	r3, [sp, #16]
 801cdae:	2300      	movs	r3, #0
 801cdb0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801cdb4:	9303      	str	r3, [sp, #12]
 801cdb6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801cdba:	461d      	mov	r5, r3
 801cdbc:	f7ff b94c 	b.w	801c058 <_svfprintf_r+0x650>
 801cdc0:	080298fc 	.word	0x080298fc
 801cdc4:	080298ec 	.word	0x080298ec

0801cdc8 <__tzcalc_limits>:
 801cdc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdcc:	4680      	mov	r8, r0
 801cdce:	f002 fe39 	bl	801fa44 <__gettzinfo>
 801cdd2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801cdd6:	4598      	cmp	r8, r3
 801cdd8:	f340 8098 	ble.w	801cf0c <__tzcalc_limits+0x144>
 801cddc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801cde0:	4443      	add	r3, r8
 801cde2:	109b      	asrs	r3, r3, #2
 801cde4:	f240 126d 	movw	r2, #365	; 0x16d
 801cde8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801cdec:	fb02 3505 	mla	r5, r2, r5, r3
 801cdf0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801cdf4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801cdf8:	fb93 f3f2 	sdiv	r3, r3, r2
 801cdfc:	441d      	add	r5, r3
 801cdfe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ce02:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801ce06:	fb98 f7f3 	sdiv	r7, r8, r3
 801ce0a:	fb03 8717 	mls	r7, r3, r7, r8
 801ce0e:	4442      	add	r2, r8
 801ce10:	fab7 fc87 	clz	ip, r7
 801ce14:	fbb2 f2f3 	udiv	r2, r2, r3
 801ce18:	f008 0303 	and.w	r3, r8, #3
 801ce1c:	4415      	add	r5, r2
 801ce1e:	2264      	movs	r2, #100	; 0x64
 801ce20:	f8c0 8004 	str.w	r8, [r0, #4]
 801ce24:	fb98 f6f2 	sdiv	r6, r8, r2
 801ce28:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801ce2c:	fb02 8616 	mls	r6, r2, r6, r8
 801ce30:	4604      	mov	r4, r0
 801ce32:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801ce36:	9300      	str	r3, [sp, #0]
 801ce38:	f04f 0e07 	mov.w	lr, #7
 801ce3c:	7a22      	ldrb	r2, [r4, #8]
 801ce3e:	6963      	ldr	r3, [r4, #20]
 801ce40:	2a4a      	cmp	r2, #74	; 0x4a
 801ce42:	d128      	bne.n	801ce96 <__tzcalc_limits+0xce>
 801ce44:	9900      	ldr	r1, [sp, #0]
 801ce46:	18ea      	adds	r2, r5, r3
 801ce48:	b901      	cbnz	r1, 801ce4c <__tzcalc_limits+0x84>
 801ce4a:	b906      	cbnz	r6, 801ce4e <__tzcalc_limits+0x86>
 801ce4c:	bb0f      	cbnz	r7, 801ce92 <__tzcalc_limits+0xca>
 801ce4e:	2b3b      	cmp	r3, #59	; 0x3b
 801ce50:	bfd4      	ite	le
 801ce52:	2300      	movle	r3, #0
 801ce54:	2301      	movgt	r3, #1
 801ce56:	4413      	add	r3, r2
 801ce58:	1e5a      	subs	r2, r3, #1
 801ce5a:	69a3      	ldr	r3, [r4, #24]
 801ce5c:	492c      	ldr	r1, [pc, #176]	; (801cf10 <__tzcalc_limits+0x148>)
 801ce5e:	fb01 3202 	mla	r2, r1, r2, r3
 801ce62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ce64:	4413      	add	r3, r2
 801ce66:	461a      	mov	r2, r3
 801ce68:	17db      	asrs	r3, r3, #31
 801ce6a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801ce6e:	3428      	adds	r4, #40	; 0x28
 801ce70:	45a3      	cmp	fp, r4
 801ce72:	d1e3      	bne.n	801ce3c <__tzcalc_limits+0x74>
 801ce74:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801ce78:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801ce7c:	4294      	cmp	r4, r2
 801ce7e:	eb75 0303 	sbcs.w	r3, r5, r3
 801ce82:	bfb4      	ite	lt
 801ce84:	2301      	movlt	r3, #1
 801ce86:	2300      	movge	r3, #0
 801ce88:	6003      	str	r3, [r0, #0]
 801ce8a:	2001      	movs	r0, #1
 801ce8c:	b003      	add	sp, #12
 801ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce92:	2300      	movs	r3, #0
 801ce94:	e7df      	b.n	801ce56 <__tzcalc_limits+0x8e>
 801ce96:	2a44      	cmp	r2, #68	; 0x44
 801ce98:	d101      	bne.n	801ce9e <__tzcalc_limits+0xd6>
 801ce9a:	18ea      	adds	r2, r5, r3
 801ce9c:	e7dd      	b.n	801ce5a <__tzcalc_limits+0x92>
 801ce9e:	9a00      	ldr	r2, [sp, #0]
 801cea0:	bb72      	cbnz	r2, 801cf00 <__tzcalc_limits+0x138>
 801cea2:	2e00      	cmp	r6, #0
 801cea4:	bf0c      	ite	eq
 801cea6:	46e0      	moveq	r8, ip
 801cea8:	f04f 0801 	movne.w	r8, #1
 801ceac:	4919      	ldr	r1, [pc, #100]	; (801cf14 <__tzcalc_limits+0x14c>)
 801ceae:	68e2      	ldr	r2, [r4, #12]
 801ceb0:	9201      	str	r2, [sp, #4]
 801ceb2:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801ceb6:	fb0a 1808 	mla	r8, sl, r8, r1
 801ceba:	462a      	mov	r2, r5
 801cebc:	f04f 0900 	mov.w	r9, #0
 801cec0:	f1a8 0804 	sub.w	r8, r8, #4
 801cec4:	9901      	ldr	r1, [sp, #4]
 801cec6:	f109 0901 	add.w	r9, r9, #1
 801ceca:	4549      	cmp	r1, r9
 801cecc:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801ced0:	dc18      	bgt.n	801cf04 <__tzcalc_limits+0x13c>
 801ced2:	f102 0804 	add.w	r8, r2, #4
 801ced6:	fb98 f9fe 	sdiv	r9, r8, lr
 801ceda:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801cede:	eba8 0909 	sub.w	r9, r8, r9
 801cee2:	ebb3 0909 	subs.w	r9, r3, r9
 801cee6:	6923      	ldr	r3, [r4, #16]
 801cee8:	f103 33ff 	add.w	r3, r3, #4294967295
 801ceec:	bf48      	it	mi
 801ceee:	f109 0907 	addmi.w	r9, r9, #7
 801cef2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801cef6:	444b      	add	r3, r9
 801cef8:	4553      	cmp	r3, sl
 801cefa:	da05      	bge.n	801cf08 <__tzcalc_limits+0x140>
 801cefc:	441a      	add	r2, r3
 801cefe:	e7ac      	b.n	801ce5a <__tzcalc_limits+0x92>
 801cf00:	46e0      	mov	r8, ip
 801cf02:	e7d3      	b.n	801ceac <__tzcalc_limits+0xe4>
 801cf04:	4452      	add	r2, sl
 801cf06:	e7dd      	b.n	801cec4 <__tzcalc_limits+0xfc>
 801cf08:	3b07      	subs	r3, #7
 801cf0a:	e7f5      	b.n	801cef8 <__tzcalc_limits+0x130>
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	e7bd      	b.n	801ce8c <__tzcalc_limits+0xc4>
 801cf10:	00015180 	.word	0x00015180
 801cf14:	08029858 	.word	0x08029858

0801cf18 <__tz_lock>:
 801cf18:	4801      	ldr	r0, [pc, #4]	; (801cf20 <__tz_lock+0x8>)
 801cf1a:	f002 be4d 	b.w	801fbb8 <__retarget_lock_acquire>
 801cf1e:	bf00      	nop
 801cf20:	2000be6b 	.word	0x2000be6b

0801cf24 <__tz_unlock>:
 801cf24:	4801      	ldr	r0, [pc, #4]	; (801cf2c <__tz_unlock+0x8>)
 801cf26:	f002 be49 	b.w	801fbbc <__retarget_lock_release>
 801cf2a:	bf00      	nop
 801cf2c:	2000be6b 	.word	0x2000be6b

0801cf30 <_tzset_unlocked>:
 801cf30:	4b01      	ldr	r3, [pc, #4]	; (801cf38 <_tzset_unlocked+0x8>)
 801cf32:	6818      	ldr	r0, [r3, #0]
 801cf34:	f000 b802 	b.w	801cf3c <_tzset_unlocked_r>
 801cf38:	20000038 	.word	0x20000038

0801cf3c <_tzset_unlocked_r>:
 801cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf40:	b08d      	sub	sp, #52	; 0x34
 801cf42:	4607      	mov	r7, r0
 801cf44:	f002 fd7e 	bl	801fa44 <__gettzinfo>
 801cf48:	49ae      	ldr	r1, [pc, #696]	; (801d204 <_tzset_unlocked_r+0x2c8>)
 801cf4a:	4eaf      	ldr	r6, [pc, #700]	; (801d208 <_tzset_unlocked_r+0x2cc>)
 801cf4c:	4605      	mov	r5, r0
 801cf4e:	4638      	mov	r0, r7
 801cf50:	f002 fd70 	bl	801fa34 <_getenv_r>
 801cf54:	4604      	mov	r4, r0
 801cf56:	b970      	cbnz	r0, 801cf76 <_tzset_unlocked_r+0x3a>
 801cf58:	4bac      	ldr	r3, [pc, #688]	; (801d20c <_tzset_unlocked_r+0x2d0>)
 801cf5a:	4aad      	ldr	r2, [pc, #692]	; (801d210 <_tzset_unlocked_r+0x2d4>)
 801cf5c:	6018      	str	r0, [r3, #0]
 801cf5e:	4bad      	ldr	r3, [pc, #692]	; (801d214 <_tzset_unlocked_r+0x2d8>)
 801cf60:	6018      	str	r0, [r3, #0]
 801cf62:	4bad      	ldr	r3, [pc, #692]	; (801d218 <_tzset_unlocked_r+0x2dc>)
 801cf64:	6830      	ldr	r0, [r6, #0]
 801cf66:	e9c3 2200 	strd	r2, r2, [r3]
 801cf6a:	f002 fe9d 	bl	801fca8 <free>
 801cf6e:	6034      	str	r4, [r6, #0]
 801cf70:	b00d      	add	sp, #52	; 0x34
 801cf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf76:	6831      	ldr	r1, [r6, #0]
 801cf78:	2900      	cmp	r1, #0
 801cf7a:	d15f      	bne.n	801d03c <_tzset_unlocked_r+0x100>
 801cf7c:	6830      	ldr	r0, [r6, #0]
 801cf7e:	f002 fe93 	bl	801fca8 <free>
 801cf82:	4620      	mov	r0, r4
 801cf84:	f7e3 f94e 	bl	8000224 <strlen>
 801cf88:	1c41      	adds	r1, r0, #1
 801cf8a:	4638      	mov	r0, r7
 801cf8c:	f002 fe94 	bl	801fcb8 <_malloc_r>
 801cf90:	6030      	str	r0, [r6, #0]
 801cf92:	2800      	cmp	r0, #0
 801cf94:	d157      	bne.n	801d046 <_tzset_unlocked_r+0x10a>
 801cf96:	7823      	ldrb	r3, [r4, #0]
 801cf98:	4aa0      	ldr	r2, [pc, #640]	; (801d21c <_tzset_unlocked_r+0x2e0>)
 801cf9a:	49a1      	ldr	r1, [pc, #644]	; (801d220 <_tzset_unlocked_r+0x2e4>)
 801cf9c:	2b3a      	cmp	r3, #58	; 0x3a
 801cf9e:	bf08      	it	eq
 801cfa0:	3401      	addeq	r4, #1
 801cfa2:	ae0a      	add	r6, sp, #40	; 0x28
 801cfa4:	4633      	mov	r3, r6
 801cfa6:	4620      	mov	r0, r4
 801cfa8:	f003 fc4c 	bl	8020844 <siscanf>
 801cfac:	2800      	cmp	r0, #0
 801cfae:	dddf      	ble.n	801cf70 <_tzset_unlocked_r+0x34>
 801cfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfb2:	18e7      	adds	r7, r4, r3
 801cfb4:	5ce3      	ldrb	r3, [r4, r3]
 801cfb6:	2b2d      	cmp	r3, #45	; 0x2d
 801cfb8:	d149      	bne.n	801d04e <_tzset_unlocked_r+0x112>
 801cfba:	3701      	adds	r7, #1
 801cfbc:	f04f 34ff 	mov.w	r4, #4294967295
 801cfc0:	f10d 0a20 	add.w	sl, sp, #32
 801cfc4:	f10d 0b1e 	add.w	fp, sp, #30
 801cfc8:	f04f 0800 	mov.w	r8, #0
 801cfcc:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801cfd0:	4994      	ldr	r1, [pc, #592]	; (801d224 <_tzset_unlocked_r+0x2e8>)
 801cfd2:	9603      	str	r6, [sp, #12]
 801cfd4:	f8cd b000 	str.w	fp, [sp]
 801cfd8:	4633      	mov	r3, r6
 801cfda:	aa07      	add	r2, sp, #28
 801cfdc:	4638      	mov	r0, r7
 801cfde:	f8ad 801e 	strh.w	r8, [sp, #30]
 801cfe2:	f8ad 8020 	strh.w	r8, [sp, #32]
 801cfe6:	f003 fc2d 	bl	8020844 <siscanf>
 801cfea:	4540      	cmp	r0, r8
 801cfec:	ddc0      	ble.n	801cf70 <_tzset_unlocked_r+0x34>
 801cfee:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cff2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cff6:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801d230 <_tzset_unlocked_r+0x2f4>
 801cffa:	213c      	movs	r1, #60	; 0x3c
 801cffc:	fb01 2203 	mla	r2, r1, r3, r2
 801d000:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d004:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d008:	fb01 2303 	mla	r3, r1, r3, r2
 801d00c:	435c      	muls	r4, r3
 801d00e:	62ac      	str	r4, [r5, #40]	; 0x28
 801d010:	4c81      	ldr	r4, [pc, #516]	; (801d218 <_tzset_unlocked_r+0x2dc>)
 801d012:	4b82      	ldr	r3, [pc, #520]	; (801d21c <_tzset_unlocked_r+0x2e0>)
 801d014:	6023      	str	r3, [r4, #0]
 801d016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d018:	4981      	ldr	r1, [pc, #516]	; (801d220 <_tzset_unlocked_r+0x2e4>)
 801d01a:	441f      	add	r7, r3
 801d01c:	464a      	mov	r2, r9
 801d01e:	4633      	mov	r3, r6
 801d020:	4638      	mov	r0, r7
 801d022:	f003 fc0f 	bl	8020844 <siscanf>
 801d026:	4540      	cmp	r0, r8
 801d028:	dc16      	bgt.n	801d058 <_tzset_unlocked_r+0x11c>
 801d02a:	6823      	ldr	r3, [r4, #0]
 801d02c:	6063      	str	r3, [r4, #4]
 801d02e:	4b77      	ldr	r3, [pc, #476]	; (801d20c <_tzset_unlocked_r+0x2d0>)
 801d030:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d032:	601a      	str	r2, [r3, #0]
 801d034:	4b77      	ldr	r3, [pc, #476]	; (801d214 <_tzset_unlocked_r+0x2d8>)
 801d036:	f8c3 8000 	str.w	r8, [r3]
 801d03a:	e799      	b.n	801cf70 <_tzset_unlocked_r+0x34>
 801d03c:	f7e3 f8e8 	bl	8000210 <strcmp>
 801d040:	2800      	cmp	r0, #0
 801d042:	d19b      	bne.n	801cf7c <_tzset_unlocked_r+0x40>
 801d044:	e794      	b.n	801cf70 <_tzset_unlocked_r+0x34>
 801d046:	4621      	mov	r1, r4
 801d048:	f003 fc6d 	bl	8020926 <strcpy>
 801d04c:	e7a3      	b.n	801cf96 <_tzset_unlocked_r+0x5a>
 801d04e:	2b2b      	cmp	r3, #43	; 0x2b
 801d050:	bf08      	it	eq
 801d052:	3701      	addeq	r7, #1
 801d054:	2401      	movs	r4, #1
 801d056:	e7b3      	b.n	801cfc0 <_tzset_unlocked_r+0x84>
 801d058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d05a:	f8c4 9004 	str.w	r9, [r4, #4]
 801d05e:	18fc      	adds	r4, r7, r3
 801d060:	5cfb      	ldrb	r3, [r7, r3]
 801d062:	2b2d      	cmp	r3, #45	; 0x2d
 801d064:	f040 808b 	bne.w	801d17e <_tzset_unlocked_r+0x242>
 801d068:	3401      	adds	r4, #1
 801d06a:	f04f 37ff 	mov.w	r7, #4294967295
 801d06e:	2300      	movs	r3, #0
 801d070:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d074:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d078:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d07c:	930a      	str	r3, [sp, #40]	; 0x28
 801d07e:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d082:	e9cd b600 	strd	fp, r6, [sp]
 801d086:	4967      	ldr	r1, [pc, #412]	; (801d224 <_tzset_unlocked_r+0x2e8>)
 801d088:	4633      	mov	r3, r6
 801d08a:	aa07      	add	r2, sp, #28
 801d08c:	4620      	mov	r0, r4
 801d08e:	f003 fbd9 	bl	8020844 <siscanf>
 801d092:	2800      	cmp	r0, #0
 801d094:	dc78      	bgt.n	801d188 <_tzset_unlocked_r+0x24c>
 801d096:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801d098:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801d09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d09e:	652f      	str	r7, [r5, #80]	; 0x50
 801d0a0:	441c      	add	r4, r3
 801d0a2:	462f      	mov	r7, r5
 801d0a4:	f04f 0900 	mov.w	r9, #0
 801d0a8:	7823      	ldrb	r3, [r4, #0]
 801d0aa:	2b2c      	cmp	r3, #44	; 0x2c
 801d0ac:	bf08      	it	eq
 801d0ae:	3401      	addeq	r4, #1
 801d0b0:	f894 8000 	ldrb.w	r8, [r4]
 801d0b4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801d0b8:	d178      	bne.n	801d1ac <_tzset_unlocked_r+0x270>
 801d0ba:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801d0be:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801d0c2:	ab09      	add	r3, sp, #36	; 0x24
 801d0c4:	9300      	str	r3, [sp, #0]
 801d0c6:	4958      	ldr	r1, [pc, #352]	; (801d228 <_tzset_unlocked_r+0x2ec>)
 801d0c8:	9603      	str	r6, [sp, #12]
 801d0ca:	4633      	mov	r3, r6
 801d0cc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801d0d0:	4620      	mov	r0, r4
 801d0d2:	f003 fbb7 	bl	8020844 <siscanf>
 801d0d6:	2803      	cmp	r0, #3
 801d0d8:	f47f af4a 	bne.w	801cf70 <_tzset_unlocked_r+0x34>
 801d0dc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d0e0:	1e4b      	subs	r3, r1, #1
 801d0e2:	2b0b      	cmp	r3, #11
 801d0e4:	f63f af44 	bhi.w	801cf70 <_tzset_unlocked_r+0x34>
 801d0e8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d0ec:	1e53      	subs	r3, r2, #1
 801d0ee:	2b04      	cmp	r3, #4
 801d0f0:	f63f af3e 	bhi.w	801cf70 <_tzset_unlocked_r+0x34>
 801d0f4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d0f8:	2b06      	cmp	r3, #6
 801d0fa:	f63f af39 	bhi.w	801cf70 <_tzset_unlocked_r+0x34>
 801d0fe:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801d102:	f887 8008 	strb.w	r8, [r7, #8]
 801d106:	617b      	str	r3, [r7, #20]
 801d108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d10a:	eb04 0803 	add.w	r8, r4, r3
 801d10e:	2302      	movs	r3, #2
 801d110:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d114:	2300      	movs	r3, #0
 801d116:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d11a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d11e:	930a      	str	r3, [sp, #40]	; 0x28
 801d120:	f898 3000 	ldrb.w	r3, [r8]
 801d124:	2b2f      	cmp	r3, #47	; 0x2f
 801d126:	d109      	bne.n	801d13c <_tzset_unlocked_r+0x200>
 801d128:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d12c:	e9cd b600 	strd	fp, r6, [sp]
 801d130:	493e      	ldr	r1, [pc, #248]	; (801d22c <_tzset_unlocked_r+0x2f0>)
 801d132:	4633      	mov	r3, r6
 801d134:	aa07      	add	r2, sp, #28
 801d136:	4640      	mov	r0, r8
 801d138:	f003 fb84 	bl	8020844 <siscanf>
 801d13c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d140:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d144:	213c      	movs	r1, #60	; 0x3c
 801d146:	fb01 2203 	mla	r2, r1, r3, r2
 801d14a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d14e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d152:	fb01 2303 	mla	r3, r1, r3, r2
 801d156:	61bb      	str	r3, [r7, #24]
 801d158:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d15a:	3728      	adds	r7, #40	; 0x28
 801d15c:	4444      	add	r4, r8
 801d15e:	f1b9 0f00 	cmp.w	r9, #0
 801d162:	d020      	beq.n	801d1a6 <_tzset_unlocked_r+0x26a>
 801d164:	6868      	ldr	r0, [r5, #4]
 801d166:	f7ff fe2f 	bl	801cdc8 <__tzcalc_limits>
 801d16a:	4b28      	ldr	r3, [pc, #160]	; (801d20c <_tzset_unlocked_r+0x2d0>)
 801d16c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d16e:	601a      	str	r2, [r3, #0]
 801d170:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801d172:	1a9b      	subs	r3, r3, r2
 801d174:	4a27      	ldr	r2, [pc, #156]	; (801d214 <_tzset_unlocked_r+0x2d8>)
 801d176:	bf18      	it	ne
 801d178:	2301      	movne	r3, #1
 801d17a:	6013      	str	r3, [r2, #0]
 801d17c:	e6f8      	b.n	801cf70 <_tzset_unlocked_r+0x34>
 801d17e:	2b2b      	cmp	r3, #43	; 0x2b
 801d180:	bf08      	it	eq
 801d182:	3401      	addeq	r4, #1
 801d184:	2701      	movs	r7, #1
 801d186:	e772      	b.n	801d06e <_tzset_unlocked_r+0x132>
 801d188:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d18c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d190:	213c      	movs	r1, #60	; 0x3c
 801d192:	fb01 2203 	mla	r2, r1, r3, r2
 801d196:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d19a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d19e:	fb01 2303 	mla	r3, r1, r3, r2
 801d1a2:	435f      	muls	r7, r3
 801d1a4:	e77a      	b.n	801d09c <_tzset_unlocked_r+0x160>
 801d1a6:	f04f 0901 	mov.w	r9, #1
 801d1aa:	e77d      	b.n	801d0a8 <_tzset_unlocked_r+0x16c>
 801d1ac:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801d1b0:	bf06      	itte	eq
 801d1b2:	3401      	addeq	r4, #1
 801d1b4:	4643      	moveq	r3, r8
 801d1b6:	2344      	movne	r3, #68	; 0x44
 801d1b8:	220a      	movs	r2, #10
 801d1ba:	a90b      	add	r1, sp, #44	; 0x2c
 801d1bc:	4620      	mov	r0, r4
 801d1be:	9305      	str	r3, [sp, #20]
 801d1c0:	f003 fc38 	bl	8020a34 <strtoul>
 801d1c4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801d1c8:	9b05      	ldr	r3, [sp, #20]
 801d1ca:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801d1ce:	45a0      	cmp	r8, r4
 801d1d0:	d114      	bne.n	801d1fc <_tzset_unlocked_r+0x2c0>
 801d1d2:	234d      	movs	r3, #77	; 0x4d
 801d1d4:	f1b9 0f00 	cmp.w	r9, #0
 801d1d8:	d107      	bne.n	801d1ea <_tzset_unlocked_r+0x2ae>
 801d1da:	722b      	strb	r3, [r5, #8]
 801d1dc:	2103      	movs	r1, #3
 801d1de:	2302      	movs	r3, #2
 801d1e0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801d1e4:	f8c5 9014 	str.w	r9, [r5, #20]
 801d1e8:	e791      	b.n	801d10e <_tzset_unlocked_r+0x1d2>
 801d1ea:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801d1ee:	220b      	movs	r2, #11
 801d1f0:	2301      	movs	r3, #1
 801d1f2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d1fa:	e788      	b.n	801d10e <_tzset_unlocked_r+0x1d2>
 801d1fc:	b280      	uxth	r0, r0
 801d1fe:	723b      	strb	r3, [r7, #8]
 801d200:	6178      	str	r0, [r7, #20]
 801d202:	e784      	b.n	801d10e <_tzset_unlocked_r+0x1d2>
 801d204:	0802990c 	.word	0x0802990c
 801d208:	20005058 	.word	0x20005058
 801d20c:	20005060 	.word	0x20005060
 801d210:	0802990f 	.word	0x0802990f
 801d214:	2000505c 	.word	0x2000505c
 801d218:	20000468 	.word	0x20000468
 801d21c:	2000504d 	.word	0x2000504d
 801d220:	08029913 	.word	0x08029913
 801d224:	08029936 	.word	0x08029936
 801d228:	08029922 	.word	0x08029922
 801d22c:	08029935 	.word	0x08029935
 801d230:	20005042 	.word	0x20005042
 801d234:	00000000 	.word	0x00000000

0801d238 <_vfprintf_r>:
 801d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d23c:	ed2d 8b04 	vpush	{d8-d9}
 801d240:	b0cf      	sub	sp, #316	; 0x13c
 801d242:	4689      	mov	r9, r1
 801d244:	9203      	str	r2, [sp, #12]
 801d246:	461c      	mov	r4, r3
 801d248:	461e      	mov	r6, r3
 801d24a:	4682      	mov	sl, r0
 801d24c:	f002 fcae 	bl	801fbac <_localeconv_r>
 801d250:	6803      	ldr	r3, [r0, #0]
 801d252:	9313      	str	r3, [sp, #76]	; 0x4c
 801d254:	4618      	mov	r0, r3
 801d256:	f7e2 ffe5 	bl	8000224 <strlen>
 801d25a:	900e      	str	r0, [sp, #56]	; 0x38
 801d25c:	f1ba 0f00 	cmp.w	sl, #0
 801d260:	d005      	beq.n	801d26e <_vfprintf_r+0x36>
 801d262:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801d266:	b913      	cbnz	r3, 801d26e <_vfprintf_r+0x36>
 801d268:	4650      	mov	r0, sl
 801d26a:	f002 fa39 	bl	801f6e0 <__sinit>
 801d26e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d272:	07d8      	lsls	r0, r3, #31
 801d274:	d407      	bmi.n	801d286 <_vfprintf_r+0x4e>
 801d276:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d27a:	0599      	lsls	r1, r3, #22
 801d27c:	d403      	bmi.n	801d286 <_vfprintf_r+0x4e>
 801d27e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d282:	f002 fc9a 	bl	801fbba <__retarget_lock_acquire_recursive>
 801d286:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 801d28a:	049a      	lsls	r2, r3, #18
 801d28c:	d409      	bmi.n	801d2a2 <_vfprintf_r+0x6a>
 801d28e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d292:	f8a9 300c 	strh.w	r3, [r9, #12]
 801d296:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d29a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d29e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801d2a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d2a6:	071f      	lsls	r7, r3, #28
 801d2a8:	d502      	bpl.n	801d2b0 <_vfprintf_r+0x78>
 801d2aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d2ae:	b9d3      	cbnz	r3, 801d2e6 <_vfprintf_r+0xae>
 801d2b0:	4649      	mov	r1, r9
 801d2b2:	4650      	mov	r0, sl
 801d2b4:	f001 fa36 	bl	801e724 <__swsetup_r>
 801d2b8:	b1a8      	cbz	r0, 801d2e6 <_vfprintf_r+0xae>
 801d2ba:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d2be:	07dd      	lsls	r5, r3, #31
 801d2c0:	d508      	bpl.n	801d2d4 <_vfprintf_r+0x9c>
 801d2c2:	f04f 33ff 	mov.w	r3, #4294967295
 801d2c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d2c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d2ca:	b04f      	add	sp, #316	; 0x13c
 801d2cc:	ecbd 8b04 	vpop	{d8-d9}
 801d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2d4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d2d8:	059c      	lsls	r4, r3, #22
 801d2da:	d4f2      	bmi.n	801d2c2 <_vfprintf_r+0x8a>
 801d2dc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d2e0:	f002 fc6d 	bl	801fbbe <__retarget_lock_release_recursive>
 801d2e4:	e7ed      	b.n	801d2c2 <_vfprintf_r+0x8a>
 801d2e6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d2ea:	f003 021a 	and.w	r2, r3, #26
 801d2ee:	2a0a      	cmp	r2, #10
 801d2f0:	d115      	bne.n	801d31e <_vfprintf_r+0xe6>
 801d2f2:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801d2f6:	2a00      	cmp	r2, #0
 801d2f8:	db11      	blt.n	801d31e <_vfprintf_r+0xe6>
 801d2fa:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 801d2fe:	07d0      	lsls	r0, r2, #31
 801d300:	d405      	bmi.n	801d30e <_vfprintf_r+0xd6>
 801d302:	0599      	lsls	r1, r3, #22
 801d304:	d403      	bmi.n	801d30e <_vfprintf_r+0xd6>
 801d306:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d30a:	f002 fc58 	bl	801fbbe <__retarget_lock_release_recursive>
 801d30e:	9a03      	ldr	r2, [sp, #12]
 801d310:	4623      	mov	r3, r4
 801d312:	4649      	mov	r1, r9
 801d314:	4650      	mov	r0, sl
 801d316:	f001 f9c5 	bl	801e6a4 <__sbprintf>
 801d31a:	900f      	str	r0, [sp, #60]	; 0x3c
 801d31c:	e7d4      	b.n	801d2c8 <_vfprintf_r+0x90>
 801d31e:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 801d588 <_vfprintf_r+0x350>
 801d322:	2500      	movs	r5, #0
 801d324:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801d328:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d32c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801d330:	ac25      	add	r4, sp, #148	; 0x94
 801d332:	9422      	str	r4, [sp, #136]	; 0x88
 801d334:	9505      	str	r5, [sp, #20]
 801d336:	950a      	str	r5, [sp, #40]	; 0x28
 801d338:	9512      	str	r5, [sp, #72]	; 0x48
 801d33a:	9514      	str	r5, [sp, #80]	; 0x50
 801d33c:	950f      	str	r5, [sp, #60]	; 0x3c
 801d33e:	9b03      	ldr	r3, [sp, #12]
 801d340:	461d      	mov	r5, r3
 801d342:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d346:	b10a      	cbz	r2, 801d34c <_vfprintf_r+0x114>
 801d348:	2a25      	cmp	r2, #37	; 0x25
 801d34a:	d1f9      	bne.n	801d340 <_vfprintf_r+0x108>
 801d34c:	9b03      	ldr	r3, [sp, #12]
 801d34e:	1aef      	subs	r7, r5, r3
 801d350:	d00d      	beq.n	801d36e <_vfprintf_r+0x136>
 801d352:	e9c4 3700 	strd	r3, r7, [r4]
 801d356:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d358:	443b      	add	r3, r7
 801d35a:	9324      	str	r3, [sp, #144]	; 0x90
 801d35c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d35e:	3301      	adds	r3, #1
 801d360:	2b07      	cmp	r3, #7
 801d362:	9323      	str	r3, [sp, #140]	; 0x8c
 801d364:	dc79      	bgt.n	801d45a <_vfprintf_r+0x222>
 801d366:	3408      	adds	r4, #8
 801d368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d36a:	443b      	add	r3, r7
 801d36c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d36e:	782b      	ldrb	r3, [r5, #0]
 801d370:	2b00      	cmp	r3, #0
 801d372:	f001 8156 	beq.w	801e622 <_vfprintf_r+0x13ea>
 801d376:	2300      	movs	r3, #0
 801d378:	3501      	adds	r5, #1
 801d37a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d37e:	f04f 38ff 	mov.w	r8, #4294967295
 801d382:	9310      	str	r3, [sp, #64]	; 0x40
 801d384:	469b      	mov	fp, r3
 801d386:	270a      	movs	r7, #10
 801d388:	212b      	movs	r1, #43	; 0x2b
 801d38a:	462a      	mov	r2, r5
 801d38c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d390:	9307      	str	r3, [sp, #28]
 801d392:	4613      	mov	r3, r2
 801d394:	930b      	str	r3, [sp, #44]	; 0x2c
 801d396:	9b07      	ldr	r3, [sp, #28]
 801d398:	3b20      	subs	r3, #32
 801d39a:	2b5a      	cmp	r3, #90	; 0x5a
 801d39c:	f200 85c0 	bhi.w	801df20 <_vfprintf_r+0xce8>
 801d3a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d3a4:	05be007e 	.word	0x05be007e
 801d3a8:	008605be 	.word	0x008605be
 801d3ac:	05be05be 	.word	0x05be05be
 801d3b0:	006505be 	.word	0x006505be
 801d3b4:	05be05be 	.word	0x05be05be
 801d3b8:	00930089 	.word	0x00930089
 801d3bc:	009005be 	.word	0x009005be
 801d3c0:	05be0096 	.word	0x05be0096
 801d3c4:	00b200af 	.word	0x00b200af
 801d3c8:	00b200b2 	.word	0x00b200b2
 801d3cc:	00b200b2 	.word	0x00b200b2
 801d3d0:	00b200b2 	.word	0x00b200b2
 801d3d4:	00b200b2 	.word	0x00b200b2
 801d3d8:	05be05be 	.word	0x05be05be
 801d3dc:	05be05be 	.word	0x05be05be
 801d3e0:	05be05be 	.word	0x05be05be
 801d3e4:	012105be 	.word	0x012105be
 801d3e8:	00df05be 	.word	0x00df05be
 801d3ec:	012100f6 	.word	0x012100f6
 801d3f0:	01210121 	.word	0x01210121
 801d3f4:	05be05be 	.word	0x05be05be
 801d3f8:	05be05be 	.word	0x05be05be
 801d3fc:	05be00c2 	.word	0x05be00c2
 801d400:	049005be 	.word	0x049005be
 801d404:	05be05be 	.word	0x05be05be
 801d408:	04d705be 	.word	0x04d705be
 801d40c:	04fb05be 	.word	0x04fb05be
 801d410:	05be05be 	.word	0x05be05be
 801d414:	05be051a 	.word	0x05be051a
 801d418:	05be05be 	.word	0x05be05be
 801d41c:	05be05be 	.word	0x05be05be
 801d420:	05be05be 	.word	0x05be05be
 801d424:	012105be 	.word	0x012105be
 801d428:	00df05be 	.word	0x00df05be
 801d42c:	012100f8 	.word	0x012100f8
 801d430:	01210121 	.word	0x01210121
 801d434:	00f800c5 	.word	0x00f800c5
 801d438:	05be00d9 	.word	0x05be00d9
 801d43c:	05be00d2 	.word	0x05be00d2
 801d440:	0492046d 	.word	0x0492046d
 801d444:	00d904c6 	.word	0x00d904c6
 801d448:	04d705be 	.word	0x04d705be
 801d44c:	04fd007c 	.word	0x04fd007c
 801d450:	05be05be 	.word	0x05be05be
 801d454:	05be0537 	.word	0x05be0537
 801d458:	007c      	.short	0x007c
 801d45a:	aa22      	add	r2, sp, #136	; 0x88
 801d45c:	4649      	mov	r1, r9
 801d45e:	4650      	mov	r0, sl
 801d460:	f004 fbeb 	bl	8021c3a <__sprint_r>
 801d464:	2800      	cmp	r0, #0
 801d466:	f040 8130 	bne.w	801d6ca <_vfprintf_r+0x492>
 801d46a:	ac25      	add	r4, sp, #148	; 0x94
 801d46c:	e77c      	b.n	801d368 <_vfprintf_r+0x130>
 801d46e:	4650      	mov	r0, sl
 801d470:	f002 fb9c 	bl	801fbac <_localeconv_r>
 801d474:	6843      	ldr	r3, [r0, #4]
 801d476:	9314      	str	r3, [sp, #80]	; 0x50
 801d478:	4618      	mov	r0, r3
 801d47a:	f7e2 fed3 	bl	8000224 <strlen>
 801d47e:	9012      	str	r0, [sp, #72]	; 0x48
 801d480:	4650      	mov	r0, sl
 801d482:	f002 fb93 	bl	801fbac <_localeconv_r>
 801d486:	6883      	ldr	r3, [r0, #8]
 801d488:	930a      	str	r3, [sp, #40]	; 0x28
 801d48a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d48c:	212b      	movs	r1, #43	; 0x2b
 801d48e:	b12b      	cbz	r3, 801d49c <_vfprintf_r+0x264>
 801d490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d492:	b11b      	cbz	r3, 801d49c <_vfprintf_r+0x264>
 801d494:	781b      	ldrb	r3, [r3, #0]
 801d496:	b10b      	cbz	r3, 801d49c <_vfprintf_r+0x264>
 801d498:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801d49c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d49e:	e774      	b.n	801d38a <_vfprintf_r+0x152>
 801d4a0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d1f9      	bne.n	801d49c <_vfprintf_r+0x264>
 801d4a8:	2320      	movs	r3, #32
 801d4aa:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d4ae:	e7f5      	b.n	801d49c <_vfprintf_r+0x264>
 801d4b0:	f04b 0b01 	orr.w	fp, fp, #1
 801d4b4:	e7f2      	b.n	801d49c <_vfprintf_r+0x264>
 801d4b6:	f856 3b04 	ldr.w	r3, [r6], #4
 801d4ba:	9310      	str	r3, [sp, #64]	; 0x40
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	daed      	bge.n	801d49c <_vfprintf_r+0x264>
 801d4c0:	425b      	negs	r3, r3
 801d4c2:	9310      	str	r3, [sp, #64]	; 0x40
 801d4c4:	f04b 0b04 	orr.w	fp, fp, #4
 801d4c8:	e7e8      	b.n	801d49c <_vfprintf_r+0x264>
 801d4ca:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801d4ce:	e7e5      	b.n	801d49c <_vfprintf_r+0x264>
 801d4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4d6:	9207      	str	r2, [sp, #28]
 801d4d8:	2a2a      	cmp	r2, #42	; 0x2a
 801d4da:	d10f      	bne.n	801d4fc <_vfprintf_r+0x2c4>
 801d4dc:	f856 0b04 	ldr.w	r0, [r6], #4
 801d4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 801d4e2:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 801d4e6:	e7d9      	b.n	801d49c <_vfprintf_r+0x264>
 801d4e8:	fb07 2808 	mla	r8, r7, r8, r2
 801d4ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4f0:	9207      	str	r2, [sp, #28]
 801d4f2:	9a07      	ldr	r2, [sp, #28]
 801d4f4:	3a30      	subs	r2, #48	; 0x30
 801d4f6:	2a09      	cmp	r2, #9
 801d4f8:	d9f6      	bls.n	801d4e8 <_vfprintf_r+0x2b0>
 801d4fa:	e74b      	b.n	801d394 <_vfprintf_r+0x15c>
 801d4fc:	f04f 0800 	mov.w	r8, #0
 801d500:	e7f7      	b.n	801d4f2 <_vfprintf_r+0x2ba>
 801d502:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801d506:	e7c9      	b.n	801d49c <_vfprintf_r+0x264>
 801d508:	2200      	movs	r2, #0
 801d50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d50c:	9210      	str	r2, [sp, #64]	; 0x40
 801d50e:	9a07      	ldr	r2, [sp, #28]
 801d510:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d512:	3a30      	subs	r2, #48	; 0x30
 801d514:	fb07 2200 	mla	r2, r7, r0, r2
 801d518:	9210      	str	r2, [sp, #64]	; 0x40
 801d51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d51e:	9207      	str	r2, [sp, #28]
 801d520:	3a30      	subs	r2, #48	; 0x30
 801d522:	2a09      	cmp	r2, #9
 801d524:	d9f3      	bls.n	801d50e <_vfprintf_r+0x2d6>
 801d526:	e735      	b.n	801d394 <_vfprintf_r+0x15c>
 801d528:	f04b 0b08 	orr.w	fp, fp, #8
 801d52c:	e7b6      	b.n	801d49c <_vfprintf_r+0x264>
 801d52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d530:	781b      	ldrb	r3, [r3, #0]
 801d532:	2b68      	cmp	r3, #104	; 0x68
 801d534:	bf01      	itttt	eq
 801d536:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801d538:	3301      	addeq	r3, #1
 801d53a:	930b      	streq	r3, [sp, #44]	; 0x2c
 801d53c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801d540:	bf18      	it	ne
 801d542:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801d546:	e7a9      	b.n	801d49c <_vfprintf_r+0x264>
 801d548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d54a:	781b      	ldrb	r3, [r3, #0]
 801d54c:	2b6c      	cmp	r3, #108	; 0x6c
 801d54e:	d105      	bne.n	801d55c <_vfprintf_r+0x324>
 801d550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d552:	3301      	adds	r3, #1
 801d554:	930b      	str	r3, [sp, #44]	; 0x2c
 801d556:	f04b 0b20 	orr.w	fp, fp, #32
 801d55a:	e79f      	b.n	801d49c <_vfprintf_r+0x264>
 801d55c:	f04b 0b10 	orr.w	fp, fp, #16
 801d560:	e79c      	b.n	801d49c <_vfprintf_r+0x264>
 801d562:	4632      	mov	r2, r6
 801d564:	2000      	movs	r0, #0
 801d566:	f852 3b04 	ldr.w	r3, [r2], #4
 801d56a:	9206      	str	r2, [sp, #24]
 801d56c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801d570:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801d574:	ab35      	add	r3, sp, #212	; 0xd4
 801d576:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801d57a:	9004      	str	r0, [sp, #16]
 801d57c:	f04f 0801 	mov.w	r8, #1
 801d580:	4606      	mov	r6, r0
 801d582:	4605      	mov	r5, r0
 801d584:	9303      	str	r3, [sp, #12]
 801d586:	e1c3      	b.n	801d910 <_vfprintf_r+0x6d8>
	...
 801d590:	f04b 0b10 	orr.w	fp, fp, #16
 801d594:	f01b 0f20 	tst.w	fp, #32
 801d598:	d012      	beq.n	801d5c0 <_vfprintf_r+0x388>
 801d59a:	3607      	adds	r6, #7
 801d59c:	f026 0307 	bic.w	r3, r6, #7
 801d5a0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801d5a4:	9306      	str	r3, [sp, #24]
 801d5a6:	2e00      	cmp	r6, #0
 801d5a8:	f177 0300 	sbcs.w	r3, r7, #0
 801d5ac:	da06      	bge.n	801d5bc <_vfprintf_r+0x384>
 801d5ae:	4276      	negs	r6, r6
 801d5b0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801d5b4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801d5b8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d5bc:	2301      	movs	r3, #1
 801d5be:	e392      	b.n	801dce6 <_vfprintf_r+0xaae>
 801d5c0:	1d33      	adds	r3, r6, #4
 801d5c2:	f01b 0f10 	tst.w	fp, #16
 801d5c6:	9306      	str	r3, [sp, #24]
 801d5c8:	d002      	beq.n	801d5d0 <_vfprintf_r+0x398>
 801d5ca:	6836      	ldr	r6, [r6, #0]
 801d5cc:	17f7      	asrs	r7, r6, #31
 801d5ce:	e7ea      	b.n	801d5a6 <_vfprintf_r+0x36e>
 801d5d0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801d5d4:	6836      	ldr	r6, [r6, #0]
 801d5d6:	d001      	beq.n	801d5dc <_vfprintf_r+0x3a4>
 801d5d8:	b236      	sxth	r6, r6
 801d5da:	e7f7      	b.n	801d5cc <_vfprintf_r+0x394>
 801d5dc:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801d5e0:	bf18      	it	ne
 801d5e2:	b276      	sxtbne	r6, r6
 801d5e4:	e7f2      	b.n	801d5cc <_vfprintf_r+0x394>
 801d5e6:	3607      	adds	r6, #7
 801d5e8:	f026 0307 	bic.w	r3, r6, #7
 801d5ec:	ecb3 7b02 	vldmia	r3!, {d7}
 801d5f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d5f4:	9306      	str	r3, [sp, #24]
 801d5f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d5f8:	ee09 3a10 	vmov	s18, r3
 801d5fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d602:	ee09 3a90 	vmov	s19, r3
 801d606:	f04f 32ff 	mov.w	r2, #4294967295
 801d60a:	4b39      	ldr	r3, [pc, #228]	; (801d6f0 <_vfprintf_r+0x4b8>)
 801d60c:	ec51 0b19 	vmov	r0, r1, d9
 801d610:	f7e3 fabc 	bl	8000b8c <__aeabi_dcmpun>
 801d614:	bb20      	cbnz	r0, 801d660 <_vfprintf_r+0x428>
 801d616:	4b36      	ldr	r3, [pc, #216]	; (801d6f0 <_vfprintf_r+0x4b8>)
 801d618:	ec51 0b19 	vmov	r0, r1, d9
 801d61c:	f04f 32ff 	mov.w	r2, #4294967295
 801d620:	f7e3 fa96 	bl	8000b50 <__aeabi_dcmple>
 801d624:	b9e0      	cbnz	r0, 801d660 <_vfprintf_r+0x428>
 801d626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d62a:	2200      	movs	r2, #0
 801d62c:	2300      	movs	r3, #0
 801d62e:	f7e3 fa85 	bl	8000b3c <__aeabi_dcmplt>
 801d632:	b110      	cbz	r0, 801d63a <_vfprintf_r+0x402>
 801d634:	232d      	movs	r3, #45	; 0x2d
 801d636:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d63a:	4a2e      	ldr	r2, [pc, #184]	; (801d6f4 <_vfprintf_r+0x4bc>)
 801d63c:	482e      	ldr	r0, [pc, #184]	; (801d6f8 <_vfprintf_r+0x4c0>)
 801d63e:	9907      	ldr	r1, [sp, #28]
 801d640:	4613      	mov	r3, r2
 801d642:	2947      	cmp	r1, #71	; 0x47
 801d644:	bfc8      	it	gt
 801d646:	4603      	movgt	r3, r0
 801d648:	9303      	str	r3, [sp, #12]
 801d64a:	2300      	movs	r3, #0
 801d64c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801d650:	9304      	str	r3, [sp, #16]
 801d652:	f04f 0803 	mov.w	r8, #3
 801d656:	461e      	mov	r6, r3
 801d658:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d65c:	461d      	mov	r5, r3
 801d65e:	e157      	b.n	801d910 <_vfprintf_r+0x6d8>
 801d660:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d664:	4610      	mov	r0, r2
 801d666:	4619      	mov	r1, r3
 801d668:	f7e3 fa90 	bl	8000b8c <__aeabi_dcmpun>
 801d66c:	b140      	cbz	r0, 801d680 <_vfprintf_r+0x448>
 801d66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d670:	4a22      	ldr	r2, [pc, #136]	; (801d6fc <_vfprintf_r+0x4c4>)
 801d672:	4823      	ldr	r0, [pc, #140]	; (801d700 <_vfprintf_r+0x4c8>)
 801d674:	2b00      	cmp	r3, #0
 801d676:	bfbc      	itt	lt
 801d678:	232d      	movlt	r3, #45	; 0x2d
 801d67a:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801d67e:	e7de      	b.n	801d63e <_vfprintf_r+0x406>
 801d680:	9b07      	ldr	r3, [sp, #28]
 801d682:	f023 0320 	bic.w	r3, r3, #32
 801d686:	2b41      	cmp	r3, #65	; 0x41
 801d688:	9308      	str	r3, [sp, #32]
 801d68a:	d13b      	bne.n	801d704 <_vfprintf_r+0x4cc>
 801d68c:	2330      	movs	r3, #48	; 0x30
 801d68e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801d692:	9b07      	ldr	r3, [sp, #28]
 801d694:	2b61      	cmp	r3, #97	; 0x61
 801d696:	bf0c      	ite	eq
 801d698:	2378      	moveq	r3, #120	; 0x78
 801d69a:	2358      	movne	r3, #88	; 0x58
 801d69c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 801d6a0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801d6a4:	f04b 0b02 	orr.w	fp, fp, #2
 801d6a8:	f340 8209 	ble.w	801dabe <_vfprintf_r+0x886>
 801d6ac:	f108 0101 	add.w	r1, r8, #1
 801d6b0:	4650      	mov	r0, sl
 801d6b2:	f002 fb01 	bl	801fcb8 <_malloc_r>
 801d6b6:	9003      	str	r0, [sp, #12]
 801d6b8:	2800      	cmp	r0, #0
 801d6ba:	f040 8204 	bne.w	801dac6 <_vfprintf_r+0x88e>
 801d6be:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d6c6:	f8a9 300c 	strh.w	r3, [r9, #12]
 801d6ca:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d6ce:	07d9      	lsls	r1, r3, #31
 801d6d0:	d407      	bmi.n	801d6e2 <_vfprintf_r+0x4aa>
 801d6d2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d6d6:	059a      	lsls	r2, r3, #22
 801d6d8:	d403      	bmi.n	801d6e2 <_vfprintf_r+0x4aa>
 801d6da:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d6de:	f002 fa6e 	bl	801fbbe <__retarget_lock_release_recursive>
 801d6e2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d6e6:	065b      	lsls	r3, r3, #25
 801d6e8:	f57f adee 	bpl.w	801d2c8 <_vfprintf_r+0x90>
 801d6ec:	e5e9      	b.n	801d2c2 <_vfprintf_r+0x8a>
 801d6ee:	bf00      	nop
 801d6f0:	7fefffff 	.word	0x7fefffff
 801d6f4:	080298b8 	.word	0x080298b8
 801d6f8:	080298bc 	.word	0x080298bc
 801d6fc:	080298c0 	.word	0x080298c0
 801d700:	080298c4 	.word	0x080298c4
 801d704:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d708:	f000 81e0 	beq.w	801dacc <_vfprintf_r+0x894>
 801d70c:	9b08      	ldr	r3, [sp, #32]
 801d70e:	2b47      	cmp	r3, #71	; 0x47
 801d710:	f040 81e0 	bne.w	801dad4 <_vfprintf_r+0x89c>
 801d714:	f1b8 0f00 	cmp.w	r8, #0
 801d718:	f040 81dc 	bne.w	801dad4 <_vfprintf_r+0x89c>
 801d71c:	f8cd 8010 	str.w	r8, [sp, #16]
 801d720:	f04f 0801 	mov.w	r8, #1
 801d724:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801d728:	9311      	str	r3, [sp, #68]	; 0x44
 801d72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	f280 81d3 	bge.w	801dad8 <_vfprintf_r+0x8a0>
 801d732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d734:	ee08 3a10 	vmov	s16, r3
 801d738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d73a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d73e:	ee08 3a90 	vmov	s17, r3
 801d742:	232d      	movs	r3, #45	; 0x2d
 801d744:	9318      	str	r3, [sp, #96]	; 0x60
 801d746:	9b08      	ldr	r3, [sp, #32]
 801d748:	2b41      	cmp	r3, #65	; 0x41
 801d74a:	f040 81e3 	bne.w	801db14 <_vfprintf_r+0x8dc>
 801d74e:	eeb0 0a48 	vmov.f32	s0, s16
 801d752:	eef0 0a68 	vmov.f32	s1, s17
 801d756:	a81c      	add	r0, sp, #112	; 0x70
 801d758:	f003 f82c 	bl	80207b4 <frexp>
 801d75c:	2200      	movs	r2, #0
 801d75e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801d762:	ec51 0b10 	vmov	r0, r1, d0
 801d766:	f7e2 ff77 	bl	8000658 <__aeabi_dmul>
 801d76a:	2200      	movs	r2, #0
 801d76c:	2300      	movs	r3, #0
 801d76e:	4606      	mov	r6, r0
 801d770:	460f      	mov	r7, r1
 801d772:	f7e3 f9d9 	bl	8000b28 <__aeabi_dcmpeq>
 801d776:	b108      	cbz	r0, 801d77c <_vfprintf_r+0x544>
 801d778:	2301      	movs	r3, #1
 801d77a:	931c      	str	r3, [sp, #112]	; 0x70
 801d77c:	4bb7      	ldr	r3, [pc, #732]	; (801da5c <_vfprintf_r+0x824>)
 801d77e:	4ab8      	ldr	r2, [pc, #736]	; (801da60 <_vfprintf_r+0x828>)
 801d780:	9907      	ldr	r1, [sp, #28]
 801d782:	9d03      	ldr	r5, [sp, #12]
 801d784:	2961      	cmp	r1, #97	; 0x61
 801d786:	bf18      	it	ne
 801d788:	461a      	movne	r2, r3
 801d78a:	f108 33ff 	add.w	r3, r8, #4294967295
 801d78e:	9217      	str	r2, [sp, #92]	; 0x5c
 801d790:	9305      	str	r3, [sp, #20]
 801d792:	4bb4      	ldr	r3, [pc, #720]	; (801da64 <_vfprintf_r+0x82c>)
 801d794:	2200      	movs	r2, #0
 801d796:	4630      	mov	r0, r6
 801d798:	4639      	mov	r1, r7
 801d79a:	f7e2 ff5d 	bl	8000658 <__aeabi_dmul>
 801d79e:	460f      	mov	r7, r1
 801d7a0:	4606      	mov	r6, r0
 801d7a2:	f7e3 fa09 	bl	8000bb8 <__aeabi_d2iz>
 801d7a6:	9019      	str	r0, [sp, #100]	; 0x64
 801d7a8:	f7e2 feec 	bl	8000584 <__aeabi_i2d>
 801d7ac:	4602      	mov	r2, r0
 801d7ae:	460b      	mov	r3, r1
 801d7b0:	4630      	mov	r0, r6
 801d7b2:	4639      	mov	r1, r7
 801d7b4:	f7e2 fd98 	bl	80002e8 <__aeabi_dsub>
 801d7b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d7ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d7bc:	5c9b      	ldrb	r3, [r3, r2]
 801d7be:	f805 3b01 	strb.w	r3, [r5], #1
 801d7c2:	9b05      	ldr	r3, [sp, #20]
 801d7c4:	9309      	str	r3, [sp, #36]	; 0x24
 801d7c6:	1c5a      	adds	r2, r3, #1
 801d7c8:	4606      	mov	r6, r0
 801d7ca:	460f      	mov	r7, r1
 801d7cc:	d007      	beq.n	801d7de <_vfprintf_r+0x5a6>
 801d7ce:	3b01      	subs	r3, #1
 801d7d0:	9305      	str	r3, [sp, #20]
 801d7d2:	2200      	movs	r2, #0
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	f7e3 f9a7 	bl	8000b28 <__aeabi_dcmpeq>
 801d7da:	2800      	cmp	r0, #0
 801d7dc:	d0d9      	beq.n	801d792 <_vfprintf_r+0x55a>
 801d7de:	4ba2      	ldr	r3, [pc, #648]	; (801da68 <_vfprintf_r+0x830>)
 801d7e0:	2200      	movs	r2, #0
 801d7e2:	4630      	mov	r0, r6
 801d7e4:	4639      	mov	r1, r7
 801d7e6:	f7e3 f9c7 	bl	8000b78 <__aeabi_dcmpgt>
 801d7ea:	b960      	cbnz	r0, 801d806 <_vfprintf_r+0x5ce>
 801d7ec:	4b9e      	ldr	r3, [pc, #632]	; (801da68 <_vfprintf_r+0x830>)
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	4630      	mov	r0, r6
 801d7f2:	4639      	mov	r1, r7
 801d7f4:	f7e3 f998 	bl	8000b28 <__aeabi_dcmpeq>
 801d7f8:	2800      	cmp	r0, #0
 801d7fa:	f000 8186 	beq.w	801db0a <_vfprintf_r+0x8d2>
 801d7fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d800:	07df      	lsls	r7, r3, #31
 801d802:	f140 8182 	bpl.w	801db0a <_vfprintf_r+0x8d2>
 801d806:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d808:	9520      	str	r5, [sp, #128]	; 0x80
 801d80a:	7bd9      	ldrb	r1, [r3, #15]
 801d80c:	2030      	movs	r0, #48	; 0x30
 801d80e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d810:	1e53      	subs	r3, r2, #1
 801d812:	9320      	str	r3, [sp, #128]	; 0x80
 801d814:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801d818:	428b      	cmp	r3, r1
 801d81a:	f000 8165 	beq.w	801dae8 <_vfprintf_r+0x8b0>
 801d81e:	2b39      	cmp	r3, #57	; 0x39
 801d820:	bf0b      	itete	eq
 801d822:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801d824:	3301      	addne	r3, #1
 801d826:	7a9b      	ldrbeq	r3, [r3, #10]
 801d828:	b2db      	uxtbne	r3, r3
 801d82a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d82e:	9b03      	ldr	r3, [sp, #12]
 801d830:	1aeb      	subs	r3, r5, r3
 801d832:	9305      	str	r3, [sp, #20]
 801d834:	9b08      	ldr	r3, [sp, #32]
 801d836:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d838:	2b47      	cmp	r3, #71	; 0x47
 801d83a:	f040 81b3 	bne.w	801dba4 <_vfprintf_r+0x96c>
 801d83e:	1cee      	adds	r6, r5, #3
 801d840:	db02      	blt.n	801d848 <_vfprintf_r+0x610>
 801d842:	4545      	cmp	r5, r8
 801d844:	f340 81d5 	ble.w	801dbf2 <_vfprintf_r+0x9ba>
 801d848:	9b07      	ldr	r3, [sp, #28]
 801d84a:	3b02      	subs	r3, #2
 801d84c:	9307      	str	r3, [sp, #28]
 801d84e:	9907      	ldr	r1, [sp, #28]
 801d850:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801d854:	f021 0120 	bic.w	r1, r1, #32
 801d858:	2941      	cmp	r1, #65	; 0x41
 801d85a:	bf08      	it	eq
 801d85c:	320f      	addeq	r2, #15
 801d85e:	f105 33ff 	add.w	r3, r5, #4294967295
 801d862:	bf06      	itte	eq
 801d864:	b2d2      	uxtbeq	r2, r2
 801d866:	2101      	moveq	r1, #1
 801d868:	2100      	movne	r1, #0
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	931c      	str	r3, [sp, #112]	; 0x70
 801d86e:	bfb8      	it	lt
 801d870:	f1c5 0301 	rsblt	r3, r5, #1
 801d874:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801d878:	bfb4      	ite	lt
 801d87a:	222d      	movlt	r2, #45	; 0x2d
 801d87c:	222b      	movge	r2, #43	; 0x2b
 801d87e:	2b09      	cmp	r3, #9
 801d880:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801d884:	f340 81a4 	ble.w	801dbd0 <_vfprintf_r+0x998>
 801d888:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801d88c:	260a      	movs	r6, #10
 801d88e:	4611      	mov	r1, r2
 801d890:	fb93 f5f6 	sdiv	r5, r3, r6
 801d894:	fb06 3015 	mls	r0, r6, r5, r3
 801d898:	3030      	adds	r0, #48	; 0x30
 801d89a:	f801 0c01 	strb.w	r0, [r1, #-1]
 801d89e:	4618      	mov	r0, r3
 801d8a0:	2863      	cmp	r0, #99	; 0x63
 801d8a2:	f102 32ff 	add.w	r2, r2, #4294967295
 801d8a6:	462b      	mov	r3, r5
 801d8a8:	dcf1      	bgt.n	801d88e <_vfprintf_r+0x656>
 801d8aa:	3330      	adds	r3, #48	; 0x30
 801d8ac:	1e88      	subs	r0, r1, #2
 801d8ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d8b2:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801d8b6:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801d8ba:	4603      	mov	r3, r0
 801d8bc:	42ab      	cmp	r3, r5
 801d8be:	f0c0 8182 	bcc.w	801dbc6 <_vfprintf_r+0x98e>
 801d8c2:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801d8c6:	1a52      	subs	r2, r2, r1
 801d8c8:	42a8      	cmp	r0, r5
 801d8ca:	bf88      	it	hi
 801d8cc:	2200      	movhi	r2, #0
 801d8ce:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801d8d2:	441a      	add	r2, r3
 801d8d4:	ab1e      	add	r3, sp, #120	; 0x78
 801d8d6:	1ad3      	subs	r3, r2, r3
 801d8d8:	9a05      	ldr	r2, [sp, #20]
 801d8da:	9315      	str	r3, [sp, #84]	; 0x54
 801d8dc:	2a01      	cmp	r2, #1
 801d8de:	eb03 0802 	add.w	r8, r3, r2
 801d8e2:	dc02      	bgt.n	801d8ea <_vfprintf_r+0x6b2>
 801d8e4:	f01b 0f01 	tst.w	fp, #1
 801d8e8:	d001      	beq.n	801d8ee <_vfprintf_r+0x6b6>
 801d8ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8ec:	4498      	add	r8, r3
 801d8ee:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801d8f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d8f6:	9311      	str	r3, [sp, #68]	; 0x44
 801d8f8:	2300      	movs	r3, #0
 801d8fa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d8fe:	461d      	mov	r5, r3
 801d900:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d902:	b113      	cbz	r3, 801d90a <_vfprintf_r+0x6d2>
 801d904:	232d      	movs	r3, #45	; 0x2d
 801d906:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d90a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801d90e:	2600      	movs	r6, #0
 801d910:	4546      	cmp	r6, r8
 801d912:	4633      	mov	r3, r6
 801d914:	bfb8      	it	lt
 801d916:	4643      	movlt	r3, r8
 801d918:	9311      	str	r3, [sp, #68]	; 0x44
 801d91a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d91e:	b113      	cbz	r3, 801d926 <_vfprintf_r+0x6ee>
 801d920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d922:	3301      	adds	r3, #1
 801d924:	9311      	str	r3, [sp, #68]	; 0x44
 801d926:	f01b 0302 	ands.w	r3, fp, #2
 801d92a:	9317      	str	r3, [sp, #92]	; 0x5c
 801d92c:	bf1e      	ittt	ne
 801d92e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801d930:	3302      	addne	r3, #2
 801d932:	9311      	strne	r3, [sp, #68]	; 0x44
 801d934:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801d938:	9318      	str	r3, [sp, #96]	; 0x60
 801d93a:	d11f      	bne.n	801d97c <_vfprintf_r+0x744>
 801d93c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801d940:	1a9f      	subs	r7, r3, r2
 801d942:	2f00      	cmp	r7, #0
 801d944:	dd1a      	ble.n	801d97c <_vfprintf_r+0x744>
 801d946:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d94a:	4848      	ldr	r0, [pc, #288]	; (801da6c <_vfprintf_r+0x834>)
 801d94c:	6020      	str	r0, [r4, #0]
 801d94e:	2f10      	cmp	r7, #16
 801d950:	f103 0301 	add.w	r3, r3, #1
 801d954:	f104 0108 	add.w	r1, r4, #8
 801d958:	f300 82f0 	bgt.w	801df3c <_vfprintf_r+0xd04>
 801d95c:	6067      	str	r7, [r4, #4]
 801d95e:	2b07      	cmp	r3, #7
 801d960:	4417      	add	r7, r2
 801d962:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801d966:	f340 82fc 	ble.w	801df62 <_vfprintf_r+0xd2a>
 801d96a:	aa22      	add	r2, sp, #136	; 0x88
 801d96c:	4649      	mov	r1, r9
 801d96e:	4650      	mov	r0, sl
 801d970:	f004 f963 	bl	8021c3a <__sprint_r>
 801d974:	2800      	cmp	r0, #0
 801d976:	f040 8632 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801d97a:	ac25      	add	r4, sp, #148	; 0x94
 801d97c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d980:	b173      	cbz	r3, 801d9a0 <_vfprintf_r+0x768>
 801d982:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801d986:	6023      	str	r3, [r4, #0]
 801d988:	2301      	movs	r3, #1
 801d98a:	6063      	str	r3, [r4, #4]
 801d98c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d98e:	3301      	adds	r3, #1
 801d990:	9324      	str	r3, [sp, #144]	; 0x90
 801d992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d994:	3301      	adds	r3, #1
 801d996:	2b07      	cmp	r3, #7
 801d998:	9323      	str	r3, [sp, #140]	; 0x8c
 801d99a:	f300 82e4 	bgt.w	801df66 <_vfprintf_r+0xd2e>
 801d99e:	3408      	adds	r4, #8
 801d9a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d9a2:	b16b      	cbz	r3, 801d9c0 <_vfprintf_r+0x788>
 801d9a4:	ab1b      	add	r3, sp, #108	; 0x6c
 801d9a6:	6023      	str	r3, [r4, #0]
 801d9a8:	2302      	movs	r3, #2
 801d9aa:	6063      	str	r3, [r4, #4]
 801d9ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d9ae:	3302      	adds	r3, #2
 801d9b0:	9324      	str	r3, [sp, #144]	; 0x90
 801d9b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d9b4:	3301      	adds	r3, #1
 801d9b6:	2b07      	cmp	r3, #7
 801d9b8:	9323      	str	r3, [sp, #140]	; 0x8c
 801d9ba:	f300 82de 	bgt.w	801df7a <_vfprintf_r+0xd42>
 801d9be:	3408      	adds	r4, #8
 801d9c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d9c2:	2b80      	cmp	r3, #128	; 0x80
 801d9c4:	d11f      	bne.n	801da06 <_vfprintf_r+0x7ce>
 801d9c6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801d9ca:	1a9f      	subs	r7, r3, r2
 801d9cc:	2f00      	cmp	r7, #0
 801d9ce:	dd1a      	ble.n	801da06 <_vfprintf_r+0x7ce>
 801d9d0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d9d4:	4826      	ldr	r0, [pc, #152]	; (801da70 <_vfprintf_r+0x838>)
 801d9d6:	6020      	str	r0, [r4, #0]
 801d9d8:	2f10      	cmp	r7, #16
 801d9da:	f103 0301 	add.w	r3, r3, #1
 801d9de:	f104 0108 	add.w	r1, r4, #8
 801d9e2:	f300 82d4 	bgt.w	801df8e <_vfprintf_r+0xd56>
 801d9e6:	6067      	str	r7, [r4, #4]
 801d9e8:	2b07      	cmp	r3, #7
 801d9ea:	4417      	add	r7, r2
 801d9ec:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801d9f0:	f340 82e0 	ble.w	801dfb4 <_vfprintf_r+0xd7c>
 801d9f4:	aa22      	add	r2, sp, #136	; 0x88
 801d9f6:	4649      	mov	r1, r9
 801d9f8:	4650      	mov	r0, sl
 801d9fa:	f004 f91e 	bl	8021c3a <__sprint_r>
 801d9fe:	2800      	cmp	r0, #0
 801da00:	f040 85ed 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801da04:	ac25      	add	r4, sp, #148	; 0x94
 801da06:	eba6 0608 	sub.w	r6, r6, r8
 801da0a:	2e00      	cmp	r6, #0
 801da0c:	dd1a      	ble.n	801da44 <_vfprintf_r+0x80c>
 801da0e:	4f18      	ldr	r7, [pc, #96]	; (801da70 <_vfprintf_r+0x838>)
 801da10:	6027      	str	r7, [r4, #0]
 801da12:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801da16:	2e10      	cmp	r6, #16
 801da18:	f103 0301 	add.w	r3, r3, #1
 801da1c:	f104 0108 	add.w	r1, r4, #8
 801da20:	f300 82ca 	bgt.w	801dfb8 <_vfprintf_r+0xd80>
 801da24:	6066      	str	r6, [r4, #4]
 801da26:	2b07      	cmp	r3, #7
 801da28:	4416      	add	r6, r2
 801da2a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801da2e:	f340 82d6 	ble.w	801dfde <_vfprintf_r+0xda6>
 801da32:	aa22      	add	r2, sp, #136	; 0x88
 801da34:	4649      	mov	r1, r9
 801da36:	4650      	mov	r0, sl
 801da38:	f004 f8ff 	bl	8021c3a <__sprint_r>
 801da3c:	2800      	cmp	r0, #0
 801da3e:	f040 85ce 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801da42:	ac25      	add	r4, sp, #148	; 0x94
 801da44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801da48:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801da4a:	f040 82cf 	bne.w	801dfec <_vfprintf_r+0xdb4>
 801da4e:	9b03      	ldr	r3, [sp, #12]
 801da50:	e9c4 3800 	strd	r3, r8, [r4]
 801da54:	4446      	add	r6, r8
 801da56:	9624      	str	r6, [sp, #144]	; 0x90
 801da58:	e00c      	b.n	801da74 <_vfprintf_r+0x83c>
 801da5a:	bf00      	nop
 801da5c:	080298d9 	.word	0x080298d9
 801da60:	080298c8 	.word	0x080298c8
 801da64:	40300000 	.word	0x40300000
 801da68:	3fe00000 	.word	0x3fe00000
 801da6c:	08029948 	.word	0x08029948
 801da70:	08029958 	.word	0x08029958
 801da74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801da76:	3301      	adds	r3, #1
 801da78:	2b07      	cmp	r3, #7
 801da7a:	9323      	str	r3, [sp, #140]	; 0x8c
 801da7c:	f300 82fb 	bgt.w	801e076 <_vfprintf_r+0xe3e>
 801da80:	3408      	adds	r4, #8
 801da82:	f01b 0f04 	tst.w	fp, #4
 801da86:	f040 858c 	bne.w	801e5a2 <_vfprintf_r+0x136a>
 801da8a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801da8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801da90:	428a      	cmp	r2, r1
 801da92:	bfac      	ite	ge
 801da94:	189b      	addge	r3, r3, r2
 801da96:	185b      	addlt	r3, r3, r1
 801da98:	930f      	str	r3, [sp, #60]	; 0x3c
 801da9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801da9c:	b13b      	cbz	r3, 801daae <_vfprintf_r+0x876>
 801da9e:	aa22      	add	r2, sp, #136	; 0x88
 801daa0:	4649      	mov	r1, r9
 801daa2:	4650      	mov	r0, sl
 801daa4:	f004 f8c9 	bl	8021c3a <__sprint_r>
 801daa8:	2800      	cmp	r0, #0
 801daaa:	f040 8598 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801daae:	2300      	movs	r3, #0
 801dab0:	9323      	str	r3, [sp, #140]	; 0x8c
 801dab2:	9b04      	ldr	r3, [sp, #16]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	f040 85ae 	bne.w	801e616 <_vfprintf_r+0x13de>
 801daba:	ac25      	add	r4, sp, #148	; 0x94
 801dabc:	e0eb      	b.n	801dc96 <_vfprintf_r+0xa5e>
 801dabe:	ab35      	add	r3, sp, #212	; 0xd4
 801dac0:	9004      	str	r0, [sp, #16]
 801dac2:	9303      	str	r3, [sp, #12]
 801dac4:	e62e      	b.n	801d724 <_vfprintf_r+0x4ec>
 801dac6:	9b03      	ldr	r3, [sp, #12]
 801dac8:	9304      	str	r3, [sp, #16]
 801daca:	e62b      	b.n	801d724 <_vfprintf_r+0x4ec>
 801dacc:	9004      	str	r0, [sp, #16]
 801dace:	f04f 0806 	mov.w	r8, #6
 801dad2:	e627      	b.n	801d724 <_vfprintf_r+0x4ec>
 801dad4:	9004      	str	r0, [sp, #16]
 801dad6:	e625      	b.n	801d724 <_vfprintf_r+0x4ec>
 801dad8:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801dadc:	2300      	movs	r3, #0
 801dade:	eeb0 8a47 	vmov.f32	s16, s14
 801dae2:	eef0 8a67 	vmov.f32	s17, s15
 801dae6:	e62d      	b.n	801d744 <_vfprintf_r+0x50c>
 801dae8:	f802 0c01 	strb.w	r0, [r2, #-1]
 801daec:	e68f      	b.n	801d80e <_vfprintf_r+0x5d6>
 801daee:	f803 0b01 	strb.w	r0, [r3], #1
 801daf2:	1aca      	subs	r2, r1, r3
 801daf4:	2a00      	cmp	r2, #0
 801daf6:	dafa      	bge.n	801daee <_vfprintf_r+0x8b6>
 801daf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dafc:	3201      	adds	r2, #1
 801dafe:	f103 0301 	add.w	r3, r3, #1
 801db02:	bfb8      	it	lt
 801db04:	2300      	movlt	r3, #0
 801db06:	441d      	add	r5, r3
 801db08:	e691      	b.n	801d82e <_vfprintf_r+0x5f6>
 801db0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db0c:	462b      	mov	r3, r5
 801db0e:	18a9      	adds	r1, r5, r2
 801db10:	2030      	movs	r0, #48	; 0x30
 801db12:	e7ee      	b.n	801daf2 <_vfprintf_r+0x8ba>
 801db14:	9b08      	ldr	r3, [sp, #32]
 801db16:	2b46      	cmp	r3, #70	; 0x46
 801db18:	d005      	beq.n	801db26 <_vfprintf_r+0x8ee>
 801db1a:	2b45      	cmp	r3, #69	; 0x45
 801db1c:	d11b      	bne.n	801db56 <_vfprintf_r+0x91e>
 801db1e:	f108 0501 	add.w	r5, r8, #1
 801db22:	2102      	movs	r1, #2
 801db24:	e001      	b.n	801db2a <_vfprintf_r+0x8f2>
 801db26:	4645      	mov	r5, r8
 801db28:	2103      	movs	r1, #3
 801db2a:	ab20      	add	r3, sp, #128	; 0x80
 801db2c:	9301      	str	r3, [sp, #4]
 801db2e:	ab1d      	add	r3, sp, #116	; 0x74
 801db30:	9300      	str	r3, [sp, #0]
 801db32:	462a      	mov	r2, r5
 801db34:	ab1c      	add	r3, sp, #112	; 0x70
 801db36:	4650      	mov	r0, sl
 801db38:	eeb0 0a48 	vmov.f32	s0, s16
 801db3c:	eef0 0a68 	vmov.f32	s1, s17
 801db40:	f000 fefa 	bl	801e938 <_dtoa_r>
 801db44:	9b08      	ldr	r3, [sp, #32]
 801db46:	9003      	str	r0, [sp, #12]
 801db48:	2b47      	cmp	r3, #71	; 0x47
 801db4a:	d106      	bne.n	801db5a <_vfprintf_r+0x922>
 801db4c:	f01b 0f01 	tst.w	fp, #1
 801db50:	d103      	bne.n	801db5a <_vfprintf_r+0x922>
 801db52:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801db54:	e66b      	b.n	801d82e <_vfprintf_r+0x5f6>
 801db56:	4645      	mov	r5, r8
 801db58:	e7e3      	b.n	801db22 <_vfprintf_r+0x8ea>
 801db5a:	9b03      	ldr	r3, [sp, #12]
 801db5c:	195e      	adds	r6, r3, r5
 801db5e:	9b08      	ldr	r3, [sp, #32]
 801db60:	2b46      	cmp	r3, #70	; 0x46
 801db62:	d10f      	bne.n	801db84 <_vfprintf_r+0x94c>
 801db64:	9b03      	ldr	r3, [sp, #12]
 801db66:	781b      	ldrb	r3, [r3, #0]
 801db68:	2b30      	cmp	r3, #48	; 0x30
 801db6a:	d109      	bne.n	801db80 <_vfprintf_r+0x948>
 801db6c:	ec51 0b18 	vmov	r0, r1, d8
 801db70:	2200      	movs	r2, #0
 801db72:	2300      	movs	r3, #0
 801db74:	f7e2 ffd8 	bl	8000b28 <__aeabi_dcmpeq>
 801db78:	b910      	cbnz	r0, 801db80 <_vfprintf_r+0x948>
 801db7a:	f1c5 0501 	rsb	r5, r5, #1
 801db7e:	951c      	str	r5, [sp, #112]	; 0x70
 801db80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801db82:	441e      	add	r6, r3
 801db84:	ec51 0b18 	vmov	r0, r1, d8
 801db88:	2200      	movs	r2, #0
 801db8a:	2300      	movs	r3, #0
 801db8c:	f7e2 ffcc 	bl	8000b28 <__aeabi_dcmpeq>
 801db90:	b100      	cbz	r0, 801db94 <_vfprintf_r+0x95c>
 801db92:	9620      	str	r6, [sp, #128]	; 0x80
 801db94:	2230      	movs	r2, #48	; 0x30
 801db96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801db98:	429e      	cmp	r6, r3
 801db9a:	d9da      	bls.n	801db52 <_vfprintf_r+0x91a>
 801db9c:	1c59      	adds	r1, r3, #1
 801db9e:	9120      	str	r1, [sp, #128]	; 0x80
 801dba0:	701a      	strb	r2, [r3, #0]
 801dba2:	e7f8      	b.n	801db96 <_vfprintf_r+0x95e>
 801dba4:	9b08      	ldr	r3, [sp, #32]
 801dba6:	2b46      	cmp	r3, #70	; 0x46
 801dba8:	f47f ae51 	bne.w	801d84e <_vfprintf_r+0x616>
 801dbac:	f00b 0301 	and.w	r3, fp, #1
 801dbb0:	2d00      	cmp	r5, #0
 801dbb2:	ea43 0308 	orr.w	r3, r3, r8
 801dbb6:	dd18      	ble.n	801dbea <_vfprintf_r+0x9b2>
 801dbb8:	b383      	cbz	r3, 801dc1c <_vfprintf_r+0x9e4>
 801dbba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbbc:	18eb      	adds	r3, r5, r3
 801dbbe:	4498      	add	r8, r3
 801dbc0:	2366      	movs	r3, #102	; 0x66
 801dbc2:	9307      	str	r3, [sp, #28]
 801dbc4:	e030      	b.n	801dc28 <_vfprintf_r+0x9f0>
 801dbc6:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dbca:	f802 6b01 	strb.w	r6, [r2], #1
 801dbce:	e675      	b.n	801d8bc <_vfprintf_r+0x684>
 801dbd0:	b941      	cbnz	r1, 801dbe4 <_vfprintf_r+0x9ac>
 801dbd2:	2230      	movs	r2, #48	; 0x30
 801dbd4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801dbd8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801dbdc:	3330      	adds	r3, #48	; 0x30
 801dbde:	f802 3b01 	strb.w	r3, [r2], #1
 801dbe2:	e677      	b.n	801d8d4 <_vfprintf_r+0x69c>
 801dbe4:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801dbe8:	e7f8      	b.n	801dbdc <_vfprintf_r+0x9a4>
 801dbea:	b1cb      	cbz	r3, 801dc20 <_vfprintf_r+0x9e8>
 801dbec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbee:	3301      	adds	r3, #1
 801dbf0:	e7e5      	b.n	801dbbe <_vfprintf_r+0x986>
 801dbf2:	9b05      	ldr	r3, [sp, #20]
 801dbf4:	429d      	cmp	r5, r3
 801dbf6:	db07      	blt.n	801dc08 <_vfprintf_r+0x9d0>
 801dbf8:	f01b 0f01 	tst.w	fp, #1
 801dbfc:	d029      	beq.n	801dc52 <_vfprintf_r+0xa1a>
 801dbfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc00:	eb05 0803 	add.w	r8, r5, r3
 801dc04:	2367      	movs	r3, #103	; 0x67
 801dc06:	e7dc      	b.n	801dbc2 <_vfprintf_r+0x98a>
 801dc08:	9b05      	ldr	r3, [sp, #20]
 801dc0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dc0c:	2d00      	cmp	r5, #0
 801dc0e:	eb03 0802 	add.w	r8, r3, r2
 801dc12:	dcf7      	bgt.n	801dc04 <_vfprintf_r+0x9cc>
 801dc14:	f1c5 0301 	rsb	r3, r5, #1
 801dc18:	4498      	add	r8, r3
 801dc1a:	e7f3      	b.n	801dc04 <_vfprintf_r+0x9cc>
 801dc1c:	46a8      	mov	r8, r5
 801dc1e:	e7cf      	b.n	801dbc0 <_vfprintf_r+0x988>
 801dc20:	2366      	movs	r3, #102	; 0x66
 801dc22:	9307      	str	r3, [sp, #28]
 801dc24:	f04f 0801 	mov.w	r8, #1
 801dc28:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801dc2c:	9309      	str	r3, [sp, #36]	; 0x24
 801dc2e:	d023      	beq.n	801dc78 <_vfprintf_r+0xa40>
 801dc30:	2300      	movs	r3, #0
 801dc32:	2d00      	cmp	r5, #0
 801dc34:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801dc38:	f77f ae62 	ble.w	801d900 <_vfprintf_r+0x6c8>
 801dc3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc3e:	781b      	ldrb	r3, [r3, #0]
 801dc40:	2bff      	cmp	r3, #255	; 0xff
 801dc42:	d108      	bne.n	801dc56 <_vfprintf_r+0xa1e>
 801dc44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801dc48:	4413      	add	r3, r2
 801dc4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dc4c:	fb02 8803 	mla	r8, r2, r3, r8
 801dc50:	e656      	b.n	801d900 <_vfprintf_r+0x6c8>
 801dc52:	46a8      	mov	r8, r5
 801dc54:	e7d6      	b.n	801dc04 <_vfprintf_r+0x9cc>
 801dc56:	42ab      	cmp	r3, r5
 801dc58:	daf4      	bge.n	801dc44 <_vfprintf_r+0xa0c>
 801dc5a:	1aed      	subs	r5, r5, r3
 801dc5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc5e:	785b      	ldrb	r3, [r3, #1]
 801dc60:	b133      	cbz	r3, 801dc70 <_vfprintf_r+0xa38>
 801dc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc64:	3301      	adds	r3, #1
 801dc66:	9309      	str	r3, [sp, #36]	; 0x24
 801dc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc6a:	3301      	adds	r3, #1
 801dc6c:	930a      	str	r3, [sp, #40]	; 0x28
 801dc6e:	e7e5      	b.n	801dc3c <_vfprintf_r+0xa04>
 801dc70:	9b08      	ldr	r3, [sp, #32]
 801dc72:	3301      	adds	r3, #1
 801dc74:	9308      	str	r3, [sp, #32]
 801dc76:	e7e1      	b.n	801dc3c <_vfprintf_r+0xa04>
 801dc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc7a:	9308      	str	r3, [sp, #32]
 801dc7c:	e640      	b.n	801d900 <_vfprintf_r+0x6c8>
 801dc7e:	4632      	mov	r2, r6
 801dc80:	f01b 0f20 	tst.w	fp, #32
 801dc84:	f852 3b04 	ldr.w	r3, [r2], #4
 801dc88:	9206      	str	r2, [sp, #24]
 801dc8a:	d009      	beq.n	801dca0 <_vfprintf_r+0xa68>
 801dc8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dc8e:	4610      	mov	r0, r2
 801dc90:	17d1      	asrs	r1, r2, #31
 801dc92:	e9c3 0100 	strd	r0, r1, [r3]
 801dc96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc98:	9e06      	ldr	r6, [sp, #24]
 801dc9a:	9303      	str	r3, [sp, #12]
 801dc9c:	f7ff bb4f 	b.w	801d33e <_vfprintf_r+0x106>
 801dca0:	f01b 0f10 	tst.w	fp, #16
 801dca4:	d002      	beq.n	801dcac <_vfprintf_r+0xa74>
 801dca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dca8:	601a      	str	r2, [r3, #0]
 801dcaa:	e7f4      	b.n	801dc96 <_vfprintf_r+0xa5e>
 801dcac:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801dcb0:	d002      	beq.n	801dcb8 <_vfprintf_r+0xa80>
 801dcb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dcb4:	801a      	strh	r2, [r3, #0]
 801dcb6:	e7ee      	b.n	801dc96 <_vfprintf_r+0xa5e>
 801dcb8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801dcbc:	d0f3      	beq.n	801dca6 <_vfprintf_r+0xa6e>
 801dcbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dcc0:	701a      	strb	r2, [r3, #0]
 801dcc2:	e7e8      	b.n	801dc96 <_vfprintf_r+0xa5e>
 801dcc4:	f04b 0b10 	orr.w	fp, fp, #16
 801dcc8:	f01b 0f20 	tst.w	fp, #32
 801dccc:	d01e      	beq.n	801dd0c <_vfprintf_r+0xad4>
 801dcce:	3607      	adds	r6, #7
 801dcd0:	f026 0307 	bic.w	r3, r6, #7
 801dcd4:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801dcd8:	9306      	str	r3, [sp, #24]
 801dcda:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801dcde:	2300      	movs	r3, #0
 801dce0:	2200      	movs	r2, #0
 801dce2:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801dce6:	f1b8 3fff 	cmp.w	r8, #4294967295
 801dcea:	f000 84a9 	beq.w	801e640 <_vfprintf_r+0x1408>
 801dcee:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 801dcf2:	9204      	str	r2, [sp, #16]
 801dcf4:	ea56 0207 	orrs.w	r2, r6, r7
 801dcf8:	f040 84a8 	bne.w	801e64c <_vfprintf_r+0x1414>
 801dcfc:	f1b8 0f00 	cmp.w	r8, #0
 801dd00:	f000 8104 	beq.w	801df0c <_vfprintf_r+0xcd4>
 801dd04:	2b01      	cmp	r3, #1
 801dd06:	f040 84a4 	bne.w	801e652 <_vfprintf_r+0x141a>
 801dd0a:	e09a      	b.n	801de42 <_vfprintf_r+0xc0a>
 801dd0c:	1d33      	adds	r3, r6, #4
 801dd0e:	f01b 0f10 	tst.w	fp, #16
 801dd12:	9306      	str	r3, [sp, #24]
 801dd14:	d001      	beq.n	801dd1a <_vfprintf_r+0xae2>
 801dd16:	6836      	ldr	r6, [r6, #0]
 801dd18:	e003      	b.n	801dd22 <_vfprintf_r+0xaea>
 801dd1a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801dd1e:	d002      	beq.n	801dd26 <_vfprintf_r+0xaee>
 801dd20:	8836      	ldrh	r6, [r6, #0]
 801dd22:	2700      	movs	r7, #0
 801dd24:	e7d9      	b.n	801dcda <_vfprintf_r+0xaa2>
 801dd26:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801dd2a:	d0f4      	beq.n	801dd16 <_vfprintf_r+0xade>
 801dd2c:	7836      	ldrb	r6, [r6, #0]
 801dd2e:	e7f8      	b.n	801dd22 <_vfprintf_r+0xaea>
 801dd30:	4633      	mov	r3, r6
 801dd32:	2278      	movs	r2, #120	; 0x78
 801dd34:	f853 6b04 	ldr.w	r6, [r3], #4
 801dd38:	9306      	str	r3, [sp, #24]
 801dd3a:	f647 0330 	movw	r3, #30768	; 0x7830
 801dd3e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801dd42:	4ba8      	ldr	r3, [pc, #672]	; (801dfe4 <_vfprintf_r+0xdac>)
 801dd44:	9316      	str	r3, [sp, #88]	; 0x58
 801dd46:	2700      	movs	r7, #0
 801dd48:	f04b 0b02 	orr.w	fp, fp, #2
 801dd4c:	2302      	movs	r3, #2
 801dd4e:	9207      	str	r2, [sp, #28]
 801dd50:	e7c6      	b.n	801dce0 <_vfprintf_r+0xaa8>
 801dd52:	4632      	mov	r2, r6
 801dd54:	2500      	movs	r5, #0
 801dd56:	f852 3b04 	ldr.w	r3, [r2], #4
 801dd5a:	9303      	str	r3, [sp, #12]
 801dd5c:	f1b8 3fff 	cmp.w	r8, #4294967295
 801dd60:	9206      	str	r2, [sp, #24]
 801dd62:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801dd66:	d010      	beq.n	801dd8a <_vfprintf_r+0xb52>
 801dd68:	9803      	ldr	r0, [sp, #12]
 801dd6a:	4642      	mov	r2, r8
 801dd6c:	4629      	mov	r1, r5
 801dd6e:	f7e2 fa67 	bl	8000240 <memchr>
 801dd72:	9004      	str	r0, [sp, #16]
 801dd74:	2800      	cmp	r0, #0
 801dd76:	f000 80df 	beq.w	801df38 <_vfprintf_r+0xd00>
 801dd7a:	9a03      	ldr	r2, [sp, #12]
 801dd7c:	9504      	str	r5, [sp, #16]
 801dd7e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801dd82:	eba0 0802 	sub.w	r8, r0, r2
 801dd86:	462e      	mov	r6, r5
 801dd88:	e5c2      	b.n	801d910 <_vfprintf_r+0x6d8>
 801dd8a:	9803      	ldr	r0, [sp, #12]
 801dd8c:	f7e2 fa4a 	bl	8000224 <strlen>
 801dd90:	462e      	mov	r6, r5
 801dd92:	4680      	mov	r8, r0
 801dd94:	9504      	str	r5, [sp, #16]
 801dd96:	4633      	mov	r3, r6
 801dd98:	e45e      	b.n	801d658 <_vfprintf_r+0x420>
 801dd9a:	f04b 0b10 	orr.w	fp, fp, #16
 801dd9e:	f01b 0f20 	tst.w	fp, #32
 801dda2:	d007      	beq.n	801ddb4 <_vfprintf_r+0xb7c>
 801dda4:	3607      	adds	r6, #7
 801dda6:	f026 0307 	bic.w	r3, r6, #7
 801ddaa:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801ddae:	9306      	str	r3, [sp, #24]
 801ddb0:	2301      	movs	r3, #1
 801ddb2:	e795      	b.n	801dce0 <_vfprintf_r+0xaa8>
 801ddb4:	1d33      	adds	r3, r6, #4
 801ddb6:	f01b 0f10 	tst.w	fp, #16
 801ddba:	9306      	str	r3, [sp, #24]
 801ddbc:	d001      	beq.n	801ddc2 <_vfprintf_r+0xb8a>
 801ddbe:	6836      	ldr	r6, [r6, #0]
 801ddc0:	e003      	b.n	801ddca <_vfprintf_r+0xb92>
 801ddc2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801ddc6:	d002      	beq.n	801ddce <_vfprintf_r+0xb96>
 801ddc8:	8836      	ldrh	r6, [r6, #0]
 801ddca:	2700      	movs	r7, #0
 801ddcc:	e7f0      	b.n	801ddb0 <_vfprintf_r+0xb78>
 801ddce:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801ddd2:	d0f4      	beq.n	801ddbe <_vfprintf_r+0xb86>
 801ddd4:	7836      	ldrb	r6, [r6, #0]
 801ddd6:	e7f8      	b.n	801ddca <_vfprintf_r+0xb92>
 801ddd8:	4b83      	ldr	r3, [pc, #524]	; (801dfe8 <_vfprintf_r+0xdb0>)
 801ddda:	9316      	str	r3, [sp, #88]	; 0x58
 801dddc:	f01b 0f20 	tst.w	fp, #32
 801dde0:	d019      	beq.n	801de16 <_vfprintf_r+0xbde>
 801dde2:	3607      	adds	r6, #7
 801dde4:	f026 0307 	bic.w	r3, r6, #7
 801dde8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801ddec:	9306      	str	r3, [sp, #24]
 801ddee:	f01b 0f01 	tst.w	fp, #1
 801ddf2:	d00a      	beq.n	801de0a <_vfprintf_r+0xbd2>
 801ddf4:	ea56 0307 	orrs.w	r3, r6, r7
 801ddf8:	d007      	beq.n	801de0a <_vfprintf_r+0xbd2>
 801ddfa:	2330      	movs	r3, #48	; 0x30
 801ddfc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801de00:	9b07      	ldr	r3, [sp, #28]
 801de02:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801de06:	f04b 0b02 	orr.w	fp, fp, #2
 801de0a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801de0e:	2302      	movs	r3, #2
 801de10:	e766      	b.n	801dce0 <_vfprintf_r+0xaa8>
 801de12:	4b74      	ldr	r3, [pc, #464]	; (801dfe4 <_vfprintf_r+0xdac>)
 801de14:	e7e1      	b.n	801ddda <_vfprintf_r+0xba2>
 801de16:	1d33      	adds	r3, r6, #4
 801de18:	f01b 0f10 	tst.w	fp, #16
 801de1c:	9306      	str	r3, [sp, #24]
 801de1e:	d001      	beq.n	801de24 <_vfprintf_r+0xbec>
 801de20:	6836      	ldr	r6, [r6, #0]
 801de22:	e003      	b.n	801de2c <_vfprintf_r+0xbf4>
 801de24:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801de28:	d002      	beq.n	801de30 <_vfprintf_r+0xbf8>
 801de2a:	8836      	ldrh	r6, [r6, #0]
 801de2c:	2700      	movs	r7, #0
 801de2e:	e7de      	b.n	801ddee <_vfprintf_r+0xbb6>
 801de30:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801de34:	d0f4      	beq.n	801de20 <_vfprintf_r+0xbe8>
 801de36:	7836      	ldrb	r6, [r6, #0]
 801de38:	e7f8      	b.n	801de2c <_vfprintf_r+0xbf4>
 801de3a:	2f00      	cmp	r7, #0
 801de3c:	bf08      	it	eq
 801de3e:	2e0a      	cmpeq	r6, #10
 801de40:	d206      	bcs.n	801de50 <_vfprintf_r+0xc18>
 801de42:	3630      	adds	r6, #48	; 0x30
 801de44:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801de48:	f20d 1337 	addw	r3, sp, #311	; 0x137
 801de4c:	f000 bc23 	b.w	801e696 <_vfprintf_r+0x145e>
 801de50:	2300      	movs	r3, #0
 801de52:	9305      	str	r3, [sp, #20]
 801de54:	9b04      	ldr	r3, [sp, #16]
 801de56:	ad4e      	add	r5, sp, #312	; 0x138
 801de58:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 801de5c:	1e6b      	subs	r3, r5, #1
 801de5e:	9303      	str	r3, [sp, #12]
 801de60:	220a      	movs	r2, #10
 801de62:	2300      	movs	r3, #0
 801de64:	4630      	mov	r0, r6
 801de66:	4639      	mov	r1, r7
 801de68:	f7e2 ff1e 	bl	8000ca8 <__aeabi_uldivmod>
 801de6c:	9b05      	ldr	r3, [sp, #20]
 801de6e:	3230      	adds	r2, #48	; 0x30
 801de70:	3301      	adds	r3, #1
 801de72:	f805 2c01 	strb.w	r2, [r5, #-1]
 801de76:	9305      	str	r3, [sp, #20]
 801de78:	f1bb 0f00 	cmp.w	fp, #0
 801de7c:	d019      	beq.n	801deb2 <_vfprintf_r+0xc7a>
 801de7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de80:	9a05      	ldr	r2, [sp, #20]
 801de82:	781b      	ldrb	r3, [r3, #0]
 801de84:	429a      	cmp	r2, r3
 801de86:	d114      	bne.n	801deb2 <_vfprintf_r+0xc7a>
 801de88:	2aff      	cmp	r2, #255	; 0xff
 801de8a:	d012      	beq.n	801deb2 <_vfprintf_r+0xc7a>
 801de8c:	2f00      	cmp	r7, #0
 801de8e:	bf08      	it	eq
 801de90:	2e0a      	cmpeq	r6, #10
 801de92:	d30e      	bcc.n	801deb2 <_vfprintf_r+0xc7a>
 801de94:	9b03      	ldr	r3, [sp, #12]
 801de96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801de98:	9914      	ldr	r1, [sp, #80]	; 0x50
 801de9a:	1a9b      	subs	r3, r3, r2
 801de9c:	4618      	mov	r0, r3
 801de9e:	9303      	str	r3, [sp, #12]
 801dea0:	f7fd fd0d 	bl	801b8be <strncpy>
 801dea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dea6:	785d      	ldrb	r5, [r3, #1]
 801dea8:	b1e5      	cbz	r5, 801dee4 <_vfprintf_r+0xcac>
 801deaa:	3301      	adds	r3, #1
 801deac:	930a      	str	r3, [sp, #40]	; 0x28
 801deae:	2300      	movs	r3, #0
 801deb0:	9305      	str	r3, [sp, #20]
 801deb2:	220a      	movs	r2, #10
 801deb4:	2300      	movs	r3, #0
 801deb6:	4630      	mov	r0, r6
 801deb8:	4639      	mov	r1, r7
 801deba:	f7e2 fef5 	bl	8000ca8 <__aeabi_uldivmod>
 801debe:	2f00      	cmp	r7, #0
 801dec0:	bf08      	it	eq
 801dec2:	2e0a      	cmpeq	r6, #10
 801dec4:	d20a      	bcs.n	801dedc <_vfprintf_r+0xca4>
 801dec6:	9b03      	ldr	r3, [sp, #12]
 801dec8:	f8dd b010 	ldr.w	fp, [sp, #16]
 801decc:	aa4e      	add	r2, sp, #312	; 0x138
 801dece:	4646      	mov	r6, r8
 801ded0:	eba2 0803 	sub.w	r8, r2, r3
 801ded4:	2300      	movs	r3, #0
 801ded6:	9304      	str	r3, [sp, #16]
 801ded8:	f7ff bbbe 	b.w	801d658 <_vfprintf_r+0x420>
 801dedc:	9d03      	ldr	r5, [sp, #12]
 801dede:	4606      	mov	r6, r0
 801dee0:	460f      	mov	r7, r1
 801dee2:	e7bb      	b.n	801de5c <_vfprintf_r+0xc24>
 801dee4:	9505      	str	r5, [sp, #20]
 801dee6:	e7e4      	b.n	801deb2 <_vfprintf_r+0xc7a>
 801dee8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801deea:	f006 030f 	and.w	r3, r6, #15
 801deee:	5cd3      	ldrb	r3, [r2, r3]
 801def0:	9a03      	ldr	r2, [sp, #12]
 801def2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801def6:	0933      	lsrs	r3, r6, #4
 801def8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801defc:	9203      	str	r2, [sp, #12]
 801defe:	093a      	lsrs	r2, r7, #4
 801df00:	461e      	mov	r6, r3
 801df02:	4617      	mov	r7, r2
 801df04:	ea56 0307 	orrs.w	r3, r6, r7
 801df08:	d1ee      	bne.n	801dee8 <_vfprintf_r+0xcb0>
 801df0a:	e7dc      	b.n	801dec6 <_vfprintf_r+0xc8e>
 801df0c:	b933      	cbnz	r3, 801df1c <_vfprintf_r+0xce4>
 801df0e:	f01b 0f01 	tst.w	fp, #1
 801df12:	d003      	beq.n	801df1c <_vfprintf_r+0xce4>
 801df14:	2330      	movs	r3, #48	; 0x30
 801df16:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801df1a:	e795      	b.n	801de48 <_vfprintf_r+0xc10>
 801df1c:	ab4e      	add	r3, sp, #312	; 0x138
 801df1e:	e3ba      	b.n	801e696 <_vfprintf_r+0x145e>
 801df20:	9b07      	ldr	r3, [sp, #28]
 801df22:	2b00      	cmp	r3, #0
 801df24:	f000 837d 	beq.w	801e622 <_vfprintf_r+0x13ea>
 801df28:	2000      	movs	r0, #0
 801df2a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801df2e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801df32:	9606      	str	r6, [sp, #24]
 801df34:	f7ff bb1e 	b.w	801d574 <_vfprintf_r+0x33c>
 801df38:	9e04      	ldr	r6, [sp, #16]
 801df3a:	e72c      	b.n	801dd96 <_vfprintf_r+0xb5e>
 801df3c:	2010      	movs	r0, #16
 801df3e:	4402      	add	r2, r0
 801df40:	2b07      	cmp	r3, #7
 801df42:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801df46:	6060      	str	r0, [r4, #4]
 801df48:	dd08      	ble.n	801df5c <_vfprintf_r+0xd24>
 801df4a:	aa22      	add	r2, sp, #136	; 0x88
 801df4c:	4649      	mov	r1, r9
 801df4e:	4650      	mov	r0, sl
 801df50:	f003 fe73 	bl	8021c3a <__sprint_r>
 801df54:	2800      	cmp	r0, #0
 801df56:	f040 8342 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801df5a:	a925      	add	r1, sp, #148	; 0x94
 801df5c:	3f10      	subs	r7, #16
 801df5e:	460c      	mov	r4, r1
 801df60:	e4f1      	b.n	801d946 <_vfprintf_r+0x70e>
 801df62:	460c      	mov	r4, r1
 801df64:	e50a      	b.n	801d97c <_vfprintf_r+0x744>
 801df66:	aa22      	add	r2, sp, #136	; 0x88
 801df68:	4649      	mov	r1, r9
 801df6a:	4650      	mov	r0, sl
 801df6c:	f003 fe65 	bl	8021c3a <__sprint_r>
 801df70:	2800      	cmp	r0, #0
 801df72:	f040 8334 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801df76:	ac25      	add	r4, sp, #148	; 0x94
 801df78:	e512      	b.n	801d9a0 <_vfprintf_r+0x768>
 801df7a:	aa22      	add	r2, sp, #136	; 0x88
 801df7c:	4649      	mov	r1, r9
 801df7e:	4650      	mov	r0, sl
 801df80:	f003 fe5b 	bl	8021c3a <__sprint_r>
 801df84:	2800      	cmp	r0, #0
 801df86:	f040 832a 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801df8a:	ac25      	add	r4, sp, #148	; 0x94
 801df8c:	e518      	b.n	801d9c0 <_vfprintf_r+0x788>
 801df8e:	2010      	movs	r0, #16
 801df90:	4402      	add	r2, r0
 801df92:	2b07      	cmp	r3, #7
 801df94:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801df98:	6060      	str	r0, [r4, #4]
 801df9a:	dd08      	ble.n	801dfae <_vfprintf_r+0xd76>
 801df9c:	aa22      	add	r2, sp, #136	; 0x88
 801df9e:	4649      	mov	r1, r9
 801dfa0:	4650      	mov	r0, sl
 801dfa2:	f003 fe4a 	bl	8021c3a <__sprint_r>
 801dfa6:	2800      	cmp	r0, #0
 801dfa8:	f040 8319 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801dfac:	a925      	add	r1, sp, #148	; 0x94
 801dfae:	3f10      	subs	r7, #16
 801dfb0:	460c      	mov	r4, r1
 801dfb2:	e50d      	b.n	801d9d0 <_vfprintf_r+0x798>
 801dfb4:	460c      	mov	r4, r1
 801dfb6:	e526      	b.n	801da06 <_vfprintf_r+0x7ce>
 801dfb8:	2010      	movs	r0, #16
 801dfba:	4402      	add	r2, r0
 801dfbc:	2b07      	cmp	r3, #7
 801dfbe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801dfc2:	6060      	str	r0, [r4, #4]
 801dfc4:	dd08      	ble.n	801dfd8 <_vfprintf_r+0xda0>
 801dfc6:	aa22      	add	r2, sp, #136	; 0x88
 801dfc8:	4649      	mov	r1, r9
 801dfca:	4650      	mov	r0, sl
 801dfcc:	f003 fe35 	bl	8021c3a <__sprint_r>
 801dfd0:	2800      	cmp	r0, #0
 801dfd2:	f040 8304 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801dfd6:	a925      	add	r1, sp, #148	; 0x94
 801dfd8:	3e10      	subs	r6, #16
 801dfda:	460c      	mov	r4, r1
 801dfdc:	e518      	b.n	801da10 <_vfprintf_r+0x7d8>
 801dfde:	460c      	mov	r4, r1
 801dfe0:	e530      	b.n	801da44 <_vfprintf_r+0x80c>
 801dfe2:	bf00      	nop
 801dfe4:	080298c8 	.word	0x080298c8
 801dfe8:	080298d9 	.word	0x080298d9
 801dfec:	9b07      	ldr	r3, [sp, #28]
 801dfee:	2b65      	cmp	r3, #101	; 0x65
 801dff0:	f340 8242 	ble.w	801e478 <_vfprintf_r+0x1240>
 801dff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801dff8:	2200      	movs	r2, #0
 801dffa:	2300      	movs	r3, #0
 801dffc:	f7e2 fd94 	bl	8000b28 <__aeabi_dcmpeq>
 801e000:	2800      	cmp	r0, #0
 801e002:	d068      	beq.n	801e0d6 <_vfprintf_r+0xe9e>
 801e004:	4b6d      	ldr	r3, [pc, #436]	; (801e1bc <_vfprintf_r+0xf84>)
 801e006:	6023      	str	r3, [r4, #0]
 801e008:	2301      	movs	r3, #1
 801e00a:	441e      	add	r6, r3
 801e00c:	6063      	str	r3, [r4, #4]
 801e00e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e010:	9624      	str	r6, [sp, #144]	; 0x90
 801e012:	3301      	adds	r3, #1
 801e014:	2b07      	cmp	r3, #7
 801e016:	9323      	str	r3, [sp, #140]	; 0x8c
 801e018:	dc37      	bgt.n	801e08a <_vfprintf_r+0xe52>
 801e01a:	3408      	adds	r4, #8
 801e01c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e01e:	9a05      	ldr	r2, [sp, #20]
 801e020:	4293      	cmp	r3, r2
 801e022:	db03      	blt.n	801e02c <_vfprintf_r+0xdf4>
 801e024:	f01b 0f01 	tst.w	fp, #1
 801e028:	f43f ad2b 	beq.w	801da82 <_vfprintf_r+0x84a>
 801e02c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e02e:	6023      	str	r3, [r4, #0]
 801e030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e034:	6063      	str	r3, [r4, #4]
 801e036:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e038:	4413      	add	r3, r2
 801e03a:	9324      	str	r3, [sp, #144]	; 0x90
 801e03c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e03e:	3301      	adds	r3, #1
 801e040:	2b07      	cmp	r3, #7
 801e042:	9323      	str	r3, [sp, #140]	; 0x8c
 801e044:	dc2b      	bgt.n	801e09e <_vfprintf_r+0xe66>
 801e046:	3408      	adds	r4, #8
 801e048:	9b05      	ldr	r3, [sp, #20]
 801e04a:	1e5d      	subs	r5, r3, #1
 801e04c:	2d00      	cmp	r5, #0
 801e04e:	f77f ad18 	ble.w	801da82 <_vfprintf_r+0x84a>
 801e052:	4e5b      	ldr	r6, [pc, #364]	; (801e1c0 <_vfprintf_r+0xf88>)
 801e054:	2710      	movs	r7, #16
 801e056:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e05a:	2d10      	cmp	r5, #16
 801e05c:	f103 0301 	add.w	r3, r3, #1
 801e060:	f104 0108 	add.w	r1, r4, #8
 801e064:	6026      	str	r6, [r4, #0]
 801e066:	dc24      	bgt.n	801e0b2 <_vfprintf_r+0xe7a>
 801e068:	6065      	str	r5, [r4, #4]
 801e06a:	2b07      	cmp	r3, #7
 801e06c:	4415      	add	r5, r2
 801e06e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801e072:	f340 8293 	ble.w	801e59c <_vfprintf_r+0x1364>
 801e076:	aa22      	add	r2, sp, #136	; 0x88
 801e078:	4649      	mov	r1, r9
 801e07a:	4650      	mov	r0, sl
 801e07c:	f003 fddd 	bl	8021c3a <__sprint_r>
 801e080:	2800      	cmp	r0, #0
 801e082:	f040 82ac 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e086:	ac25      	add	r4, sp, #148	; 0x94
 801e088:	e4fb      	b.n	801da82 <_vfprintf_r+0x84a>
 801e08a:	aa22      	add	r2, sp, #136	; 0x88
 801e08c:	4649      	mov	r1, r9
 801e08e:	4650      	mov	r0, sl
 801e090:	f003 fdd3 	bl	8021c3a <__sprint_r>
 801e094:	2800      	cmp	r0, #0
 801e096:	f040 82a2 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e09a:	ac25      	add	r4, sp, #148	; 0x94
 801e09c:	e7be      	b.n	801e01c <_vfprintf_r+0xde4>
 801e09e:	aa22      	add	r2, sp, #136	; 0x88
 801e0a0:	4649      	mov	r1, r9
 801e0a2:	4650      	mov	r0, sl
 801e0a4:	f003 fdc9 	bl	8021c3a <__sprint_r>
 801e0a8:	2800      	cmp	r0, #0
 801e0aa:	f040 8298 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e0ae:	ac25      	add	r4, sp, #148	; 0x94
 801e0b0:	e7ca      	b.n	801e048 <_vfprintf_r+0xe10>
 801e0b2:	3210      	adds	r2, #16
 801e0b4:	2b07      	cmp	r3, #7
 801e0b6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e0ba:	6067      	str	r7, [r4, #4]
 801e0bc:	dd08      	ble.n	801e0d0 <_vfprintf_r+0xe98>
 801e0be:	aa22      	add	r2, sp, #136	; 0x88
 801e0c0:	4649      	mov	r1, r9
 801e0c2:	4650      	mov	r0, sl
 801e0c4:	f003 fdb9 	bl	8021c3a <__sprint_r>
 801e0c8:	2800      	cmp	r0, #0
 801e0ca:	f040 8288 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e0ce:	a925      	add	r1, sp, #148	; 0x94
 801e0d0:	3d10      	subs	r5, #16
 801e0d2:	460c      	mov	r4, r1
 801e0d4:	e7bf      	b.n	801e056 <_vfprintf_r+0xe1e>
 801e0d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	dc73      	bgt.n	801e1c4 <_vfprintf_r+0xf8c>
 801e0dc:	4b37      	ldr	r3, [pc, #220]	; (801e1bc <_vfprintf_r+0xf84>)
 801e0de:	6023      	str	r3, [r4, #0]
 801e0e0:	2301      	movs	r3, #1
 801e0e2:	441e      	add	r6, r3
 801e0e4:	6063      	str	r3, [r4, #4]
 801e0e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e0e8:	9624      	str	r6, [sp, #144]	; 0x90
 801e0ea:	3301      	adds	r3, #1
 801e0ec:	2b07      	cmp	r3, #7
 801e0ee:	9323      	str	r3, [sp, #140]	; 0x8c
 801e0f0:	dc3d      	bgt.n	801e16e <_vfprintf_r+0xf36>
 801e0f2:	3408      	adds	r4, #8
 801e0f4:	9905      	ldr	r1, [sp, #20]
 801e0f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e0f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e0fa:	430a      	orrs	r2, r1
 801e0fc:	f00b 0101 	and.w	r1, fp, #1
 801e100:	430a      	orrs	r2, r1
 801e102:	f43f acbe 	beq.w	801da82 <_vfprintf_r+0x84a>
 801e106:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e108:	6022      	str	r2, [r4, #0]
 801e10a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e10c:	6062      	str	r2, [r4, #4]
 801e10e:	4413      	add	r3, r2
 801e110:	9324      	str	r3, [sp, #144]	; 0x90
 801e112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e114:	3301      	adds	r3, #1
 801e116:	2b07      	cmp	r3, #7
 801e118:	9323      	str	r3, [sp, #140]	; 0x8c
 801e11a:	dc32      	bgt.n	801e182 <_vfprintf_r+0xf4a>
 801e11c:	3408      	adds	r4, #8
 801e11e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e120:	2d00      	cmp	r5, #0
 801e122:	da1b      	bge.n	801e15c <_vfprintf_r+0xf24>
 801e124:	4e26      	ldr	r6, [pc, #152]	; (801e1c0 <_vfprintf_r+0xf88>)
 801e126:	426d      	negs	r5, r5
 801e128:	4623      	mov	r3, r4
 801e12a:	2710      	movs	r7, #16
 801e12c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801e130:	2d10      	cmp	r5, #16
 801e132:	f102 0201 	add.w	r2, r2, #1
 801e136:	f104 0408 	add.w	r4, r4, #8
 801e13a:	601e      	str	r6, [r3, #0]
 801e13c:	dc2b      	bgt.n	801e196 <_vfprintf_r+0xf5e>
 801e13e:	605d      	str	r5, [r3, #4]
 801e140:	2a07      	cmp	r2, #7
 801e142:	440d      	add	r5, r1
 801e144:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801e148:	dd08      	ble.n	801e15c <_vfprintf_r+0xf24>
 801e14a:	aa22      	add	r2, sp, #136	; 0x88
 801e14c:	4649      	mov	r1, r9
 801e14e:	4650      	mov	r0, sl
 801e150:	f003 fd73 	bl	8021c3a <__sprint_r>
 801e154:	2800      	cmp	r0, #0
 801e156:	f040 8242 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e15a:	ac25      	add	r4, sp, #148	; 0x94
 801e15c:	9b03      	ldr	r3, [sp, #12]
 801e15e:	6023      	str	r3, [r4, #0]
 801e160:	9b05      	ldr	r3, [sp, #20]
 801e162:	9a05      	ldr	r2, [sp, #20]
 801e164:	6063      	str	r3, [r4, #4]
 801e166:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e168:	4413      	add	r3, r2
 801e16a:	9324      	str	r3, [sp, #144]	; 0x90
 801e16c:	e482      	b.n	801da74 <_vfprintf_r+0x83c>
 801e16e:	aa22      	add	r2, sp, #136	; 0x88
 801e170:	4649      	mov	r1, r9
 801e172:	4650      	mov	r0, sl
 801e174:	f003 fd61 	bl	8021c3a <__sprint_r>
 801e178:	2800      	cmp	r0, #0
 801e17a:	f040 8230 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e17e:	ac25      	add	r4, sp, #148	; 0x94
 801e180:	e7b8      	b.n	801e0f4 <_vfprintf_r+0xebc>
 801e182:	aa22      	add	r2, sp, #136	; 0x88
 801e184:	4649      	mov	r1, r9
 801e186:	4650      	mov	r0, sl
 801e188:	f003 fd57 	bl	8021c3a <__sprint_r>
 801e18c:	2800      	cmp	r0, #0
 801e18e:	f040 8226 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e192:	ac25      	add	r4, sp, #148	; 0x94
 801e194:	e7c3      	b.n	801e11e <_vfprintf_r+0xee6>
 801e196:	3110      	adds	r1, #16
 801e198:	2a07      	cmp	r2, #7
 801e19a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801e19e:	605f      	str	r7, [r3, #4]
 801e1a0:	dd08      	ble.n	801e1b4 <_vfprintf_r+0xf7c>
 801e1a2:	aa22      	add	r2, sp, #136	; 0x88
 801e1a4:	4649      	mov	r1, r9
 801e1a6:	4650      	mov	r0, sl
 801e1a8:	f003 fd47 	bl	8021c3a <__sprint_r>
 801e1ac:	2800      	cmp	r0, #0
 801e1ae:	f040 8216 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e1b2:	ac25      	add	r4, sp, #148	; 0x94
 801e1b4:	3d10      	subs	r5, #16
 801e1b6:	4623      	mov	r3, r4
 801e1b8:	e7b8      	b.n	801e12c <_vfprintf_r+0xef4>
 801e1ba:	bf00      	nop
 801e1bc:	080298ea 	.word	0x080298ea
 801e1c0:	08029958 	.word	0x08029958
 801e1c4:	9b05      	ldr	r3, [sp, #20]
 801e1c6:	42ab      	cmp	r3, r5
 801e1c8:	bfa8      	it	ge
 801e1ca:	462b      	movge	r3, r5
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	461f      	mov	r7, r3
 801e1d0:	dd0b      	ble.n	801e1ea <_vfprintf_r+0xfb2>
 801e1d2:	9b03      	ldr	r3, [sp, #12]
 801e1d4:	e9c4 3700 	strd	r3, r7, [r4]
 801e1d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e1da:	3301      	adds	r3, #1
 801e1dc:	443e      	add	r6, r7
 801e1de:	2b07      	cmp	r3, #7
 801e1e0:	9624      	str	r6, [sp, #144]	; 0x90
 801e1e2:	9323      	str	r3, [sp, #140]	; 0x8c
 801e1e4:	f300 808c 	bgt.w	801e300 <_vfprintf_r+0x10c8>
 801e1e8:	3408      	adds	r4, #8
 801e1ea:	2f00      	cmp	r7, #0
 801e1ec:	bfac      	ite	ge
 801e1ee:	1bee      	subge	r6, r5, r7
 801e1f0:	462e      	movlt	r6, r5
 801e1f2:	2e00      	cmp	r6, #0
 801e1f4:	dd1c      	ble.n	801e230 <_vfprintf_r+0xff8>
 801e1f6:	4f9f      	ldr	r7, [pc, #636]	; (801e474 <_vfprintf_r+0x123c>)
 801e1f8:	f04f 0810 	mov.w	r8, #16
 801e1fc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e200:	2e10      	cmp	r6, #16
 801e202:	f103 0301 	add.w	r3, r3, #1
 801e206:	f104 0108 	add.w	r1, r4, #8
 801e20a:	6027      	str	r7, [r4, #0]
 801e20c:	f300 8082 	bgt.w	801e314 <_vfprintf_r+0x10dc>
 801e210:	6066      	str	r6, [r4, #4]
 801e212:	2b07      	cmp	r3, #7
 801e214:	4416      	add	r6, r2
 801e216:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e21a:	f340 808e 	ble.w	801e33a <_vfprintf_r+0x1102>
 801e21e:	aa22      	add	r2, sp, #136	; 0x88
 801e220:	4649      	mov	r1, r9
 801e222:	4650      	mov	r0, sl
 801e224:	f003 fd09 	bl	8021c3a <__sprint_r>
 801e228:	2800      	cmp	r0, #0
 801e22a:	f040 81d8 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e22e:	ac25      	add	r4, sp, #148	; 0x94
 801e230:	9b03      	ldr	r3, [sp, #12]
 801e232:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801e236:	441d      	add	r5, r3
 801e238:	d00d      	beq.n	801e256 <_vfprintf_r+0x101e>
 801e23a:	4e8e      	ldr	r6, [pc, #568]	; (801e474 <_vfprintf_r+0x123c>)
 801e23c:	2710      	movs	r7, #16
 801e23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e240:	2b00      	cmp	r3, #0
 801e242:	d17c      	bne.n	801e33e <_vfprintf_r+0x1106>
 801e244:	9b08      	ldr	r3, [sp, #32]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d17c      	bne.n	801e344 <_vfprintf_r+0x110c>
 801e24a:	9b03      	ldr	r3, [sp, #12]
 801e24c:	9a05      	ldr	r2, [sp, #20]
 801e24e:	4413      	add	r3, r2
 801e250:	429d      	cmp	r5, r3
 801e252:	bf28      	it	cs
 801e254:	461d      	movcs	r5, r3
 801e256:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e258:	9a05      	ldr	r2, [sp, #20]
 801e25a:	4293      	cmp	r3, r2
 801e25c:	db02      	blt.n	801e264 <_vfprintf_r+0x102c>
 801e25e:	f01b 0f01 	tst.w	fp, #1
 801e262:	d00e      	beq.n	801e282 <_vfprintf_r+0x104a>
 801e264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e266:	6023      	str	r3, [r4, #0]
 801e268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e26a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e26c:	6063      	str	r3, [r4, #4]
 801e26e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e270:	4413      	add	r3, r2
 801e272:	9324      	str	r3, [sp, #144]	; 0x90
 801e274:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e276:	3301      	adds	r3, #1
 801e278:	2b07      	cmp	r3, #7
 801e27a:	9323      	str	r3, [sp, #140]	; 0x8c
 801e27c:	f300 80e5 	bgt.w	801e44a <_vfprintf_r+0x1212>
 801e280:	3408      	adds	r4, #8
 801e282:	9905      	ldr	r1, [sp, #20]
 801e284:	9b03      	ldr	r3, [sp, #12]
 801e286:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801e288:	440b      	add	r3, r1
 801e28a:	1b8e      	subs	r6, r1, r6
 801e28c:	1b5a      	subs	r2, r3, r5
 801e28e:	4296      	cmp	r6, r2
 801e290:	bfa8      	it	ge
 801e292:	4616      	movge	r6, r2
 801e294:	2e00      	cmp	r6, #0
 801e296:	dd0b      	ble.n	801e2b0 <_vfprintf_r+0x1078>
 801e298:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e29a:	4433      	add	r3, r6
 801e29c:	9324      	str	r3, [sp, #144]	; 0x90
 801e29e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e2a0:	3301      	adds	r3, #1
 801e2a2:	2b07      	cmp	r3, #7
 801e2a4:	e9c4 5600 	strd	r5, r6, [r4]
 801e2a8:	9323      	str	r3, [sp, #140]	; 0x8c
 801e2aa:	f300 80d8 	bgt.w	801e45e <_vfprintf_r+0x1226>
 801e2ae:	3408      	adds	r4, #8
 801e2b0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e2b2:	9b05      	ldr	r3, [sp, #20]
 801e2b4:	2e00      	cmp	r6, #0
 801e2b6:	eba3 0505 	sub.w	r5, r3, r5
 801e2ba:	bfa8      	it	ge
 801e2bc:	1bad      	subge	r5, r5, r6
 801e2be:	2d00      	cmp	r5, #0
 801e2c0:	f77f abdf 	ble.w	801da82 <_vfprintf_r+0x84a>
 801e2c4:	4e6b      	ldr	r6, [pc, #428]	; (801e474 <_vfprintf_r+0x123c>)
 801e2c6:	2710      	movs	r7, #16
 801e2c8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e2cc:	2d10      	cmp	r5, #16
 801e2ce:	f103 0301 	add.w	r3, r3, #1
 801e2d2:	f104 0108 	add.w	r1, r4, #8
 801e2d6:	6026      	str	r6, [r4, #0]
 801e2d8:	f77f aec6 	ble.w	801e068 <_vfprintf_r+0xe30>
 801e2dc:	3210      	adds	r2, #16
 801e2de:	2b07      	cmp	r3, #7
 801e2e0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e2e4:	6067      	str	r7, [r4, #4]
 801e2e6:	dd08      	ble.n	801e2fa <_vfprintf_r+0x10c2>
 801e2e8:	aa22      	add	r2, sp, #136	; 0x88
 801e2ea:	4649      	mov	r1, r9
 801e2ec:	4650      	mov	r0, sl
 801e2ee:	f003 fca4 	bl	8021c3a <__sprint_r>
 801e2f2:	2800      	cmp	r0, #0
 801e2f4:	f040 8173 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e2f8:	a925      	add	r1, sp, #148	; 0x94
 801e2fa:	3d10      	subs	r5, #16
 801e2fc:	460c      	mov	r4, r1
 801e2fe:	e7e3      	b.n	801e2c8 <_vfprintf_r+0x1090>
 801e300:	aa22      	add	r2, sp, #136	; 0x88
 801e302:	4649      	mov	r1, r9
 801e304:	4650      	mov	r0, sl
 801e306:	f003 fc98 	bl	8021c3a <__sprint_r>
 801e30a:	2800      	cmp	r0, #0
 801e30c:	f040 8167 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e310:	ac25      	add	r4, sp, #148	; 0x94
 801e312:	e76a      	b.n	801e1ea <_vfprintf_r+0xfb2>
 801e314:	3210      	adds	r2, #16
 801e316:	2b07      	cmp	r3, #7
 801e318:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e31c:	f8c4 8004 	str.w	r8, [r4, #4]
 801e320:	dd08      	ble.n	801e334 <_vfprintf_r+0x10fc>
 801e322:	aa22      	add	r2, sp, #136	; 0x88
 801e324:	4649      	mov	r1, r9
 801e326:	4650      	mov	r0, sl
 801e328:	f003 fc87 	bl	8021c3a <__sprint_r>
 801e32c:	2800      	cmp	r0, #0
 801e32e:	f040 8156 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e332:	a925      	add	r1, sp, #148	; 0x94
 801e334:	3e10      	subs	r6, #16
 801e336:	460c      	mov	r4, r1
 801e338:	e760      	b.n	801e1fc <_vfprintf_r+0xfc4>
 801e33a:	460c      	mov	r4, r1
 801e33c:	e778      	b.n	801e230 <_vfprintf_r+0xff8>
 801e33e:	9b08      	ldr	r3, [sp, #32]
 801e340:	2b00      	cmp	r3, #0
 801e342:	d052      	beq.n	801e3ea <_vfprintf_r+0x11b2>
 801e344:	9b08      	ldr	r3, [sp, #32]
 801e346:	3b01      	subs	r3, #1
 801e348:	9308      	str	r3, [sp, #32]
 801e34a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e34c:	6023      	str	r3, [r4, #0]
 801e34e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e350:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e352:	6063      	str	r3, [r4, #4]
 801e354:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e356:	4413      	add	r3, r2
 801e358:	9324      	str	r3, [sp, #144]	; 0x90
 801e35a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e35c:	3301      	adds	r3, #1
 801e35e:	2b07      	cmp	r3, #7
 801e360:	9323      	str	r3, [sp, #140]	; 0x8c
 801e362:	dc49      	bgt.n	801e3f8 <_vfprintf_r+0x11c0>
 801e364:	3408      	adds	r4, #8
 801e366:	9b03      	ldr	r3, [sp, #12]
 801e368:	9a05      	ldr	r2, [sp, #20]
 801e36a:	eb03 0802 	add.w	r8, r3, r2
 801e36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e370:	781b      	ldrb	r3, [r3, #0]
 801e372:	eba8 0805 	sub.w	r8, r8, r5
 801e376:	4598      	cmp	r8, r3
 801e378:	bfa8      	it	ge
 801e37a:	4698      	movge	r8, r3
 801e37c:	f1b8 0f00 	cmp.w	r8, #0
 801e380:	dd0a      	ble.n	801e398 <_vfprintf_r+0x1160>
 801e382:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e384:	4443      	add	r3, r8
 801e386:	9324      	str	r3, [sp, #144]	; 0x90
 801e388:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e38a:	3301      	adds	r3, #1
 801e38c:	2b07      	cmp	r3, #7
 801e38e:	e9c4 5800 	strd	r5, r8, [r4]
 801e392:	9323      	str	r3, [sp, #140]	; 0x8c
 801e394:	dc3a      	bgt.n	801e40c <_vfprintf_r+0x11d4>
 801e396:	3408      	adds	r4, #8
 801e398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e39a:	781b      	ldrb	r3, [r3, #0]
 801e39c:	f1b8 0f00 	cmp.w	r8, #0
 801e3a0:	bfac      	ite	ge
 801e3a2:	eba3 0808 	subge.w	r8, r3, r8
 801e3a6:	4698      	movlt	r8, r3
 801e3a8:	f1b8 0f00 	cmp.w	r8, #0
 801e3ac:	dd19      	ble.n	801e3e2 <_vfprintf_r+0x11aa>
 801e3ae:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801e3b2:	f1b8 0f10 	cmp.w	r8, #16
 801e3b6:	f102 0201 	add.w	r2, r2, #1
 801e3ba:	f104 0108 	add.w	r1, r4, #8
 801e3be:	6026      	str	r6, [r4, #0]
 801e3c0:	dc2e      	bgt.n	801e420 <_vfprintf_r+0x11e8>
 801e3c2:	4443      	add	r3, r8
 801e3c4:	2a07      	cmp	r2, #7
 801e3c6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e3ca:	f8c4 8004 	str.w	r8, [r4, #4]
 801e3ce:	dd3a      	ble.n	801e446 <_vfprintf_r+0x120e>
 801e3d0:	aa22      	add	r2, sp, #136	; 0x88
 801e3d2:	4649      	mov	r1, r9
 801e3d4:	4650      	mov	r0, sl
 801e3d6:	f003 fc30 	bl	8021c3a <__sprint_r>
 801e3da:	2800      	cmp	r0, #0
 801e3dc:	f040 80ff 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e3e0:	ac25      	add	r4, sp, #148	; 0x94
 801e3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e3e4:	781b      	ldrb	r3, [r3, #0]
 801e3e6:	441d      	add	r5, r3
 801e3e8:	e729      	b.n	801e23e <_vfprintf_r+0x1006>
 801e3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e3ec:	3b01      	subs	r3, #1
 801e3ee:	930a      	str	r3, [sp, #40]	; 0x28
 801e3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3f2:	3b01      	subs	r3, #1
 801e3f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e3f6:	e7a8      	b.n	801e34a <_vfprintf_r+0x1112>
 801e3f8:	aa22      	add	r2, sp, #136	; 0x88
 801e3fa:	4649      	mov	r1, r9
 801e3fc:	4650      	mov	r0, sl
 801e3fe:	f003 fc1c 	bl	8021c3a <__sprint_r>
 801e402:	2800      	cmp	r0, #0
 801e404:	f040 80eb 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e408:	ac25      	add	r4, sp, #148	; 0x94
 801e40a:	e7ac      	b.n	801e366 <_vfprintf_r+0x112e>
 801e40c:	aa22      	add	r2, sp, #136	; 0x88
 801e40e:	4649      	mov	r1, r9
 801e410:	4650      	mov	r0, sl
 801e412:	f003 fc12 	bl	8021c3a <__sprint_r>
 801e416:	2800      	cmp	r0, #0
 801e418:	f040 80e1 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e41c:	ac25      	add	r4, sp, #148	; 0x94
 801e41e:	e7bb      	b.n	801e398 <_vfprintf_r+0x1160>
 801e420:	3310      	adds	r3, #16
 801e422:	2a07      	cmp	r2, #7
 801e424:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e428:	6067      	str	r7, [r4, #4]
 801e42a:	dd08      	ble.n	801e43e <_vfprintf_r+0x1206>
 801e42c:	aa22      	add	r2, sp, #136	; 0x88
 801e42e:	4649      	mov	r1, r9
 801e430:	4650      	mov	r0, sl
 801e432:	f003 fc02 	bl	8021c3a <__sprint_r>
 801e436:	2800      	cmp	r0, #0
 801e438:	f040 80d1 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e43c:	a925      	add	r1, sp, #148	; 0x94
 801e43e:	f1a8 0810 	sub.w	r8, r8, #16
 801e442:	460c      	mov	r4, r1
 801e444:	e7b3      	b.n	801e3ae <_vfprintf_r+0x1176>
 801e446:	460c      	mov	r4, r1
 801e448:	e7cb      	b.n	801e3e2 <_vfprintf_r+0x11aa>
 801e44a:	aa22      	add	r2, sp, #136	; 0x88
 801e44c:	4649      	mov	r1, r9
 801e44e:	4650      	mov	r0, sl
 801e450:	f003 fbf3 	bl	8021c3a <__sprint_r>
 801e454:	2800      	cmp	r0, #0
 801e456:	f040 80c2 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e45a:	ac25      	add	r4, sp, #148	; 0x94
 801e45c:	e711      	b.n	801e282 <_vfprintf_r+0x104a>
 801e45e:	aa22      	add	r2, sp, #136	; 0x88
 801e460:	4649      	mov	r1, r9
 801e462:	4650      	mov	r0, sl
 801e464:	f003 fbe9 	bl	8021c3a <__sprint_r>
 801e468:	2800      	cmp	r0, #0
 801e46a:	f040 80b8 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e46e:	ac25      	add	r4, sp, #148	; 0x94
 801e470:	e71e      	b.n	801e2b0 <_vfprintf_r+0x1078>
 801e472:	bf00      	nop
 801e474:	08029958 	.word	0x08029958
 801e478:	9a05      	ldr	r2, [sp, #20]
 801e47a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e47c:	2a01      	cmp	r2, #1
 801e47e:	9a03      	ldr	r2, [sp, #12]
 801e480:	6022      	str	r2, [r4, #0]
 801e482:	f106 0601 	add.w	r6, r6, #1
 801e486:	f103 0301 	add.w	r3, r3, #1
 801e48a:	f04f 0201 	mov.w	r2, #1
 801e48e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e492:	f104 0508 	add.w	r5, r4, #8
 801e496:	6062      	str	r2, [r4, #4]
 801e498:	dc02      	bgt.n	801e4a0 <_vfprintf_r+0x1268>
 801e49a:	f01b 0f01 	tst.w	fp, #1
 801e49e:	d078      	beq.n	801e592 <_vfprintf_r+0x135a>
 801e4a0:	2b07      	cmp	r3, #7
 801e4a2:	dd08      	ble.n	801e4b6 <_vfprintf_r+0x127e>
 801e4a4:	aa22      	add	r2, sp, #136	; 0x88
 801e4a6:	4649      	mov	r1, r9
 801e4a8:	4650      	mov	r0, sl
 801e4aa:	f003 fbc6 	bl	8021c3a <__sprint_r>
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	f040 8095 	bne.w	801e5de <_vfprintf_r+0x13a6>
 801e4b4:	ad25      	add	r5, sp, #148	; 0x94
 801e4b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e4b8:	602b      	str	r3, [r5, #0]
 801e4ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e4be:	606b      	str	r3, [r5, #4]
 801e4c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4c2:	4413      	add	r3, r2
 801e4c4:	9324      	str	r3, [sp, #144]	; 0x90
 801e4c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e4c8:	3301      	adds	r3, #1
 801e4ca:	2b07      	cmp	r3, #7
 801e4cc:	9323      	str	r3, [sp, #140]	; 0x8c
 801e4ce:	dc32      	bgt.n	801e536 <_vfprintf_r+0x12fe>
 801e4d0:	3508      	adds	r5, #8
 801e4d2:	9b05      	ldr	r3, [sp, #20]
 801e4d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e4d8:	1e5c      	subs	r4, r3, #1
 801e4da:	2200      	movs	r2, #0
 801e4dc:	2300      	movs	r3, #0
 801e4de:	f7e2 fb23 	bl	8000b28 <__aeabi_dcmpeq>
 801e4e2:	2800      	cmp	r0, #0
 801e4e4:	d130      	bne.n	801e548 <_vfprintf_r+0x1310>
 801e4e6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e4e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4ea:	9803      	ldr	r0, [sp, #12]
 801e4ec:	9a05      	ldr	r2, [sp, #20]
 801e4ee:	3101      	adds	r1, #1
 801e4f0:	3b01      	subs	r3, #1
 801e4f2:	3001      	adds	r0, #1
 801e4f4:	4413      	add	r3, r2
 801e4f6:	2907      	cmp	r1, #7
 801e4f8:	e9c5 0400 	strd	r0, r4, [r5]
 801e4fc:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801e500:	dd4a      	ble.n	801e598 <_vfprintf_r+0x1360>
 801e502:	aa22      	add	r2, sp, #136	; 0x88
 801e504:	4649      	mov	r1, r9
 801e506:	4650      	mov	r0, sl
 801e508:	f003 fb97 	bl	8021c3a <__sprint_r>
 801e50c:	2800      	cmp	r0, #0
 801e50e:	d166      	bne.n	801e5de <_vfprintf_r+0x13a6>
 801e510:	ad25      	add	r5, sp, #148	; 0x94
 801e512:	ab1e      	add	r3, sp, #120	; 0x78
 801e514:	602b      	str	r3, [r5, #0]
 801e516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e518:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e51a:	606b      	str	r3, [r5, #4]
 801e51c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e51e:	4413      	add	r3, r2
 801e520:	9324      	str	r3, [sp, #144]	; 0x90
 801e522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e524:	3301      	adds	r3, #1
 801e526:	2b07      	cmp	r3, #7
 801e528:	9323      	str	r3, [sp, #140]	; 0x8c
 801e52a:	f73f ada4 	bgt.w	801e076 <_vfprintf_r+0xe3e>
 801e52e:	f105 0408 	add.w	r4, r5, #8
 801e532:	f7ff baa6 	b.w	801da82 <_vfprintf_r+0x84a>
 801e536:	aa22      	add	r2, sp, #136	; 0x88
 801e538:	4649      	mov	r1, r9
 801e53a:	4650      	mov	r0, sl
 801e53c:	f003 fb7d 	bl	8021c3a <__sprint_r>
 801e540:	2800      	cmp	r0, #0
 801e542:	d14c      	bne.n	801e5de <_vfprintf_r+0x13a6>
 801e544:	ad25      	add	r5, sp, #148	; 0x94
 801e546:	e7c4      	b.n	801e4d2 <_vfprintf_r+0x129a>
 801e548:	2c00      	cmp	r4, #0
 801e54a:	dde2      	ble.n	801e512 <_vfprintf_r+0x12da>
 801e54c:	4e53      	ldr	r6, [pc, #332]	; (801e69c <_vfprintf_r+0x1464>)
 801e54e:	2710      	movs	r7, #16
 801e550:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e554:	2c10      	cmp	r4, #16
 801e556:	f103 0301 	add.w	r3, r3, #1
 801e55a:	f105 0108 	add.w	r1, r5, #8
 801e55e:	602e      	str	r6, [r5, #0]
 801e560:	dc07      	bgt.n	801e572 <_vfprintf_r+0x133a>
 801e562:	606c      	str	r4, [r5, #4]
 801e564:	2b07      	cmp	r3, #7
 801e566:	4414      	add	r4, r2
 801e568:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801e56c:	dcc9      	bgt.n	801e502 <_vfprintf_r+0x12ca>
 801e56e:	460d      	mov	r5, r1
 801e570:	e7cf      	b.n	801e512 <_vfprintf_r+0x12da>
 801e572:	3210      	adds	r2, #16
 801e574:	2b07      	cmp	r3, #7
 801e576:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e57a:	606f      	str	r7, [r5, #4]
 801e57c:	dd06      	ble.n	801e58c <_vfprintf_r+0x1354>
 801e57e:	aa22      	add	r2, sp, #136	; 0x88
 801e580:	4649      	mov	r1, r9
 801e582:	4650      	mov	r0, sl
 801e584:	f003 fb59 	bl	8021c3a <__sprint_r>
 801e588:	bb48      	cbnz	r0, 801e5de <_vfprintf_r+0x13a6>
 801e58a:	a925      	add	r1, sp, #148	; 0x94
 801e58c:	3c10      	subs	r4, #16
 801e58e:	460d      	mov	r5, r1
 801e590:	e7de      	b.n	801e550 <_vfprintf_r+0x1318>
 801e592:	2b07      	cmp	r3, #7
 801e594:	ddbd      	ble.n	801e512 <_vfprintf_r+0x12da>
 801e596:	e7b4      	b.n	801e502 <_vfprintf_r+0x12ca>
 801e598:	3508      	adds	r5, #8
 801e59a:	e7ba      	b.n	801e512 <_vfprintf_r+0x12da>
 801e59c:	460c      	mov	r4, r1
 801e59e:	f7ff ba70 	b.w	801da82 <_vfprintf_r+0x84a>
 801e5a2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801e5a6:	1a9d      	subs	r5, r3, r2
 801e5a8:	2d00      	cmp	r5, #0
 801e5aa:	f77f aa6e 	ble.w	801da8a <_vfprintf_r+0x852>
 801e5ae:	4e3c      	ldr	r6, [pc, #240]	; (801e6a0 <_vfprintf_r+0x1468>)
 801e5b0:	2710      	movs	r7, #16
 801e5b2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e5b6:	2d10      	cmp	r5, #16
 801e5b8:	f103 0301 	add.w	r3, r3, #1
 801e5bc:	6026      	str	r6, [r4, #0]
 801e5be:	dc18      	bgt.n	801e5f2 <_vfprintf_r+0x13ba>
 801e5c0:	6065      	str	r5, [r4, #4]
 801e5c2:	2b07      	cmp	r3, #7
 801e5c4:	4415      	add	r5, r2
 801e5c6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801e5ca:	f77f aa5e 	ble.w	801da8a <_vfprintf_r+0x852>
 801e5ce:	aa22      	add	r2, sp, #136	; 0x88
 801e5d0:	4649      	mov	r1, r9
 801e5d2:	4650      	mov	r0, sl
 801e5d4:	f003 fb31 	bl	8021c3a <__sprint_r>
 801e5d8:	2800      	cmp	r0, #0
 801e5da:	f43f aa56 	beq.w	801da8a <_vfprintf_r+0x852>
 801e5de:	9b04      	ldr	r3, [sp, #16]
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	f43f a872 	beq.w	801d6ca <_vfprintf_r+0x492>
 801e5e6:	4619      	mov	r1, r3
 801e5e8:	4650      	mov	r0, sl
 801e5ea:	f001 f909 	bl	801f800 <_free_r>
 801e5ee:	f7ff b86c 	b.w	801d6ca <_vfprintf_r+0x492>
 801e5f2:	3210      	adds	r2, #16
 801e5f4:	2b07      	cmp	r3, #7
 801e5f6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e5fa:	6067      	str	r7, [r4, #4]
 801e5fc:	dc02      	bgt.n	801e604 <_vfprintf_r+0x13cc>
 801e5fe:	3408      	adds	r4, #8
 801e600:	3d10      	subs	r5, #16
 801e602:	e7d6      	b.n	801e5b2 <_vfprintf_r+0x137a>
 801e604:	aa22      	add	r2, sp, #136	; 0x88
 801e606:	4649      	mov	r1, r9
 801e608:	4650      	mov	r0, sl
 801e60a:	f003 fb16 	bl	8021c3a <__sprint_r>
 801e60e:	2800      	cmp	r0, #0
 801e610:	d1e5      	bne.n	801e5de <_vfprintf_r+0x13a6>
 801e612:	ac25      	add	r4, sp, #148	; 0x94
 801e614:	e7f4      	b.n	801e600 <_vfprintf_r+0x13c8>
 801e616:	9904      	ldr	r1, [sp, #16]
 801e618:	4650      	mov	r0, sl
 801e61a:	f001 f8f1 	bl	801f800 <_free_r>
 801e61e:	f7ff ba4c 	b.w	801daba <_vfprintf_r+0x882>
 801e622:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e624:	b91b      	cbnz	r3, 801e62e <_vfprintf_r+0x13f6>
 801e626:	2300      	movs	r3, #0
 801e628:	9323      	str	r3, [sp, #140]	; 0x8c
 801e62a:	f7ff b84e 	b.w	801d6ca <_vfprintf_r+0x492>
 801e62e:	aa22      	add	r2, sp, #136	; 0x88
 801e630:	4649      	mov	r1, r9
 801e632:	4650      	mov	r0, sl
 801e634:	f003 fb01 	bl	8021c3a <__sprint_r>
 801e638:	2800      	cmp	r0, #0
 801e63a:	d0f4      	beq.n	801e626 <_vfprintf_r+0x13ee>
 801e63c:	f7ff b845 	b.w	801d6ca <_vfprintf_r+0x492>
 801e640:	ea56 0207 	orrs.w	r2, r6, r7
 801e644:	f8cd b010 	str.w	fp, [sp, #16]
 801e648:	f43f ab5c 	beq.w	801dd04 <_vfprintf_r+0xacc>
 801e64c:	2b01      	cmp	r3, #1
 801e64e:	f43f abf4 	beq.w	801de3a <_vfprintf_r+0xc02>
 801e652:	2b02      	cmp	r3, #2
 801e654:	ab4e      	add	r3, sp, #312	; 0x138
 801e656:	9303      	str	r3, [sp, #12]
 801e658:	f43f ac46 	beq.w	801dee8 <_vfprintf_r+0xcb0>
 801e65c:	9903      	ldr	r1, [sp, #12]
 801e65e:	f006 0307 	and.w	r3, r6, #7
 801e662:	460a      	mov	r2, r1
 801e664:	3330      	adds	r3, #48	; 0x30
 801e666:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801e66a:	9203      	str	r2, [sp, #12]
 801e66c:	08f2      	lsrs	r2, r6, #3
 801e66e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801e672:	08f8      	lsrs	r0, r7, #3
 801e674:	4616      	mov	r6, r2
 801e676:	4607      	mov	r7, r0
 801e678:	ea56 0207 	orrs.w	r2, r6, r7
 801e67c:	d1ee      	bne.n	801e65c <_vfprintf_r+0x1424>
 801e67e:	9a04      	ldr	r2, [sp, #16]
 801e680:	07d0      	lsls	r0, r2, #31
 801e682:	f57f ac20 	bpl.w	801dec6 <_vfprintf_r+0xc8e>
 801e686:	2b30      	cmp	r3, #48	; 0x30
 801e688:	f43f ac1d 	beq.w	801dec6 <_vfprintf_r+0xc8e>
 801e68c:	9a03      	ldr	r2, [sp, #12]
 801e68e:	2330      	movs	r3, #48	; 0x30
 801e690:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e694:	1e8b      	subs	r3, r1, #2
 801e696:	9303      	str	r3, [sp, #12]
 801e698:	e415      	b.n	801dec6 <_vfprintf_r+0xc8e>
 801e69a:	bf00      	nop
 801e69c:	08029958 	.word	0x08029958
 801e6a0:	08029948 	.word	0x08029948

0801e6a4 <__sbprintf>:
 801e6a4:	b570      	push	{r4, r5, r6, lr}
 801e6a6:	460c      	mov	r4, r1
 801e6a8:	8989      	ldrh	r1, [r1, #12]
 801e6aa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801e6ae:	f021 0102 	bic.w	r1, r1, #2
 801e6b2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e6b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801e6b8:	911b      	str	r1, [sp, #108]	; 0x6c
 801e6ba:	89e1      	ldrh	r1, [r4, #14]
 801e6bc:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e6c0:	69e1      	ldr	r1, [r4, #28]
 801e6c2:	9109      	str	r1, [sp, #36]	; 0x24
 801e6c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e6c6:	910b      	str	r1, [sp, #44]	; 0x2c
 801e6c8:	a91c      	add	r1, sp, #112	; 0x70
 801e6ca:	9102      	str	r1, [sp, #8]
 801e6cc:	9106      	str	r1, [sp, #24]
 801e6ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e6d2:	4606      	mov	r6, r0
 801e6d4:	9104      	str	r1, [sp, #16]
 801e6d6:	9107      	str	r1, [sp, #28]
 801e6d8:	a818      	add	r0, sp, #96	; 0x60
 801e6da:	2100      	movs	r1, #0
 801e6dc:	e9cd 3200 	strd	r3, r2, [sp]
 801e6e0:	9108      	str	r1, [sp, #32]
 801e6e2:	f001 fa67 	bl	801fbb4 <__retarget_lock_init_recursive>
 801e6e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e6ea:	a902      	add	r1, sp, #8
 801e6ec:	4630      	mov	r0, r6
 801e6ee:	f7fe fda3 	bl	801d238 <_vfprintf_r>
 801e6f2:	1e05      	subs	r5, r0, #0
 801e6f4:	db07      	blt.n	801e706 <__sbprintf+0x62>
 801e6f6:	a902      	add	r1, sp, #8
 801e6f8:	4630      	mov	r0, r6
 801e6fa:	f000 ff85 	bl	801f608 <_fflush_r>
 801e6fe:	2800      	cmp	r0, #0
 801e700:	bf18      	it	ne
 801e702:	f04f 35ff 	movne.w	r5, #4294967295
 801e706:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801e70a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e70c:	065b      	lsls	r3, r3, #25
 801e70e:	bf42      	ittt	mi
 801e710:	89a3      	ldrhmi	r3, [r4, #12]
 801e712:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801e716:	81a3      	strhmi	r3, [r4, #12]
 801e718:	f001 fa4d 	bl	801fbb6 <__retarget_lock_close_recursive>
 801e71c:	4628      	mov	r0, r5
 801e71e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801e722:	bd70      	pop	{r4, r5, r6, pc}

0801e724 <__swsetup_r>:
 801e724:	b538      	push	{r3, r4, r5, lr}
 801e726:	4b2a      	ldr	r3, [pc, #168]	; (801e7d0 <__swsetup_r+0xac>)
 801e728:	4605      	mov	r5, r0
 801e72a:	6818      	ldr	r0, [r3, #0]
 801e72c:	460c      	mov	r4, r1
 801e72e:	b118      	cbz	r0, 801e738 <__swsetup_r+0x14>
 801e730:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e732:	b90b      	cbnz	r3, 801e738 <__swsetup_r+0x14>
 801e734:	f000 ffd4 	bl	801f6e0 <__sinit>
 801e738:	89a3      	ldrh	r3, [r4, #12]
 801e73a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e73e:	0718      	lsls	r0, r3, #28
 801e740:	d422      	bmi.n	801e788 <__swsetup_r+0x64>
 801e742:	06d9      	lsls	r1, r3, #27
 801e744:	d407      	bmi.n	801e756 <__swsetup_r+0x32>
 801e746:	2309      	movs	r3, #9
 801e748:	602b      	str	r3, [r5, #0]
 801e74a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e74e:	81a3      	strh	r3, [r4, #12]
 801e750:	f04f 30ff 	mov.w	r0, #4294967295
 801e754:	e034      	b.n	801e7c0 <__swsetup_r+0x9c>
 801e756:	0758      	lsls	r0, r3, #29
 801e758:	d512      	bpl.n	801e780 <__swsetup_r+0x5c>
 801e75a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e75c:	b141      	cbz	r1, 801e770 <__swsetup_r+0x4c>
 801e75e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801e762:	4299      	cmp	r1, r3
 801e764:	d002      	beq.n	801e76c <__swsetup_r+0x48>
 801e766:	4628      	mov	r0, r5
 801e768:	f001 f84a 	bl	801f800 <_free_r>
 801e76c:	2300      	movs	r3, #0
 801e76e:	6323      	str	r3, [r4, #48]	; 0x30
 801e770:	89a3      	ldrh	r3, [r4, #12]
 801e772:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e776:	81a3      	strh	r3, [r4, #12]
 801e778:	2300      	movs	r3, #0
 801e77a:	6063      	str	r3, [r4, #4]
 801e77c:	6923      	ldr	r3, [r4, #16]
 801e77e:	6023      	str	r3, [r4, #0]
 801e780:	89a3      	ldrh	r3, [r4, #12]
 801e782:	f043 0308 	orr.w	r3, r3, #8
 801e786:	81a3      	strh	r3, [r4, #12]
 801e788:	6923      	ldr	r3, [r4, #16]
 801e78a:	b94b      	cbnz	r3, 801e7a0 <__swsetup_r+0x7c>
 801e78c:	89a3      	ldrh	r3, [r4, #12]
 801e78e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e796:	d003      	beq.n	801e7a0 <__swsetup_r+0x7c>
 801e798:	4621      	mov	r1, r4
 801e79a:	4628      	mov	r0, r5
 801e79c:	f001 fa3c 	bl	801fc18 <__smakebuf_r>
 801e7a0:	89a0      	ldrh	r0, [r4, #12]
 801e7a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e7a6:	f010 0301 	ands.w	r3, r0, #1
 801e7aa:	d00a      	beq.n	801e7c2 <__swsetup_r+0x9e>
 801e7ac:	2300      	movs	r3, #0
 801e7ae:	60a3      	str	r3, [r4, #8]
 801e7b0:	6963      	ldr	r3, [r4, #20]
 801e7b2:	425b      	negs	r3, r3
 801e7b4:	61a3      	str	r3, [r4, #24]
 801e7b6:	6923      	ldr	r3, [r4, #16]
 801e7b8:	b943      	cbnz	r3, 801e7cc <__swsetup_r+0xa8>
 801e7ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e7be:	d1c4      	bne.n	801e74a <__swsetup_r+0x26>
 801e7c0:	bd38      	pop	{r3, r4, r5, pc}
 801e7c2:	0781      	lsls	r1, r0, #30
 801e7c4:	bf58      	it	pl
 801e7c6:	6963      	ldrpl	r3, [r4, #20]
 801e7c8:	60a3      	str	r3, [r4, #8]
 801e7ca:	e7f4      	b.n	801e7b6 <__swsetup_r+0x92>
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	e7f7      	b.n	801e7c0 <__swsetup_r+0x9c>
 801e7d0:	20000038 	.word	0x20000038

0801e7d4 <register_fini>:
 801e7d4:	4b02      	ldr	r3, [pc, #8]	; (801e7e0 <register_fini+0xc>)
 801e7d6:	b113      	cbz	r3, 801e7de <register_fini+0xa>
 801e7d8:	4802      	ldr	r0, [pc, #8]	; (801e7e4 <register_fini+0x10>)
 801e7da:	f000 b805 	b.w	801e7e8 <atexit>
 801e7de:	4770      	bx	lr
 801e7e0:	00000000 	.word	0x00000000
 801e7e4:	0801f731 	.word	0x0801f731

0801e7e8 <atexit>:
 801e7e8:	2300      	movs	r3, #0
 801e7ea:	4601      	mov	r1, r0
 801e7ec:	461a      	mov	r2, r3
 801e7ee:	4618      	mov	r0, r3
 801e7f0:	f003 bf30 	b.w	8022654 <__register_exitproc>

0801e7f4 <div>:
 801e7f4:	2900      	cmp	r1, #0
 801e7f6:	b510      	push	{r4, lr}
 801e7f8:	fb91 f4f2 	sdiv	r4, r1, r2
 801e7fc:	fb02 1314 	mls	r3, r2, r4, r1
 801e800:	db06      	blt.n	801e810 <div+0x1c>
 801e802:	2b00      	cmp	r3, #0
 801e804:	da01      	bge.n	801e80a <div+0x16>
 801e806:	3401      	adds	r4, #1
 801e808:	1a9b      	subs	r3, r3, r2
 801e80a:	e9c0 4300 	strd	r4, r3, [r0]
 801e80e:	bd10      	pop	{r4, pc}
 801e810:	2b00      	cmp	r3, #0
 801e812:	bfc4      	itt	gt
 801e814:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801e818:	189b      	addgt	r3, r3, r2
 801e81a:	e7f6      	b.n	801e80a <div+0x16>

0801e81c <quorem>:
 801e81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e820:	6903      	ldr	r3, [r0, #16]
 801e822:	690c      	ldr	r4, [r1, #16]
 801e824:	42a3      	cmp	r3, r4
 801e826:	4607      	mov	r7, r0
 801e828:	f2c0 8081 	blt.w	801e92e <quorem+0x112>
 801e82c:	3c01      	subs	r4, #1
 801e82e:	f101 0814 	add.w	r8, r1, #20
 801e832:	f100 0514 	add.w	r5, r0, #20
 801e836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e83a:	9301      	str	r3, [sp, #4]
 801e83c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e844:	3301      	adds	r3, #1
 801e846:	429a      	cmp	r2, r3
 801e848:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e84c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e850:	fbb2 f6f3 	udiv	r6, r2, r3
 801e854:	d331      	bcc.n	801e8ba <quorem+0x9e>
 801e856:	f04f 0e00 	mov.w	lr, #0
 801e85a:	4640      	mov	r0, r8
 801e85c:	46ac      	mov	ip, r5
 801e85e:	46f2      	mov	sl, lr
 801e860:	f850 2b04 	ldr.w	r2, [r0], #4
 801e864:	b293      	uxth	r3, r2
 801e866:	fb06 e303 	mla	r3, r6, r3, lr
 801e86a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e86e:	b29b      	uxth	r3, r3
 801e870:	ebaa 0303 	sub.w	r3, sl, r3
 801e874:	0c12      	lsrs	r2, r2, #16
 801e876:	f8dc a000 	ldr.w	sl, [ip]
 801e87a:	fb06 e202 	mla	r2, r6, r2, lr
 801e87e:	fa13 f38a 	uxtah	r3, r3, sl
 801e882:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e886:	fa1f fa82 	uxth.w	sl, r2
 801e88a:	f8dc 2000 	ldr.w	r2, [ip]
 801e88e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801e892:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e896:	b29b      	uxth	r3, r3
 801e898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e89c:	4581      	cmp	r9, r0
 801e89e:	f84c 3b04 	str.w	r3, [ip], #4
 801e8a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e8a6:	d2db      	bcs.n	801e860 <quorem+0x44>
 801e8a8:	f855 300b 	ldr.w	r3, [r5, fp]
 801e8ac:	b92b      	cbnz	r3, 801e8ba <quorem+0x9e>
 801e8ae:	9b01      	ldr	r3, [sp, #4]
 801e8b0:	3b04      	subs	r3, #4
 801e8b2:	429d      	cmp	r5, r3
 801e8b4:	461a      	mov	r2, r3
 801e8b6:	d32e      	bcc.n	801e916 <quorem+0xfa>
 801e8b8:	613c      	str	r4, [r7, #16]
 801e8ba:	4638      	mov	r0, r7
 801e8bc:	f001 fe7a 	bl	80205b4 <__mcmp>
 801e8c0:	2800      	cmp	r0, #0
 801e8c2:	db24      	blt.n	801e90e <quorem+0xf2>
 801e8c4:	3601      	adds	r6, #1
 801e8c6:	4628      	mov	r0, r5
 801e8c8:	f04f 0c00 	mov.w	ip, #0
 801e8cc:	f858 2b04 	ldr.w	r2, [r8], #4
 801e8d0:	f8d0 e000 	ldr.w	lr, [r0]
 801e8d4:	b293      	uxth	r3, r2
 801e8d6:	ebac 0303 	sub.w	r3, ip, r3
 801e8da:	0c12      	lsrs	r2, r2, #16
 801e8dc:	fa13 f38e 	uxtah	r3, r3, lr
 801e8e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e8e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e8e8:	b29b      	uxth	r3, r3
 801e8ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e8ee:	45c1      	cmp	r9, r8
 801e8f0:	f840 3b04 	str.w	r3, [r0], #4
 801e8f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e8f8:	d2e8      	bcs.n	801e8cc <quorem+0xb0>
 801e8fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e8fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e902:	b922      	cbnz	r2, 801e90e <quorem+0xf2>
 801e904:	3b04      	subs	r3, #4
 801e906:	429d      	cmp	r5, r3
 801e908:	461a      	mov	r2, r3
 801e90a:	d30a      	bcc.n	801e922 <quorem+0x106>
 801e90c:	613c      	str	r4, [r7, #16]
 801e90e:	4630      	mov	r0, r6
 801e910:	b003      	add	sp, #12
 801e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e916:	6812      	ldr	r2, [r2, #0]
 801e918:	3b04      	subs	r3, #4
 801e91a:	2a00      	cmp	r2, #0
 801e91c:	d1cc      	bne.n	801e8b8 <quorem+0x9c>
 801e91e:	3c01      	subs	r4, #1
 801e920:	e7c7      	b.n	801e8b2 <quorem+0x96>
 801e922:	6812      	ldr	r2, [r2, #0]
 801e924:	3b04      	subs	r3, #4
 801e926:	2a00      	cmp	r2, #0
 801e928:	d1f0      	bne.n	801e90c <quorem+0xf0>
 801e92a:	3c01      	subs	r4, #1
 801e92c:	e7eb      	b.n	801e906 <quorem+0xea>
 801e92e:	2000      	movs	r0, #0
 801e930:	e7ee      	b.n	801e910 <quorem+0xf4>
 801e932:	0000      	movs	r0, r0
 801e934:	0000      	movs	r0, r0
	...

0801e938 <_dtoa_r>:
 801e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e93c:	ed2d 8b02 	vpush	{d8}
 801e940:	b095      	sub	sp, #84	; 0x54
 801e942:	ec57 6b10 	vmov	r6, r7, d0
 801e946:	9105      	str	r1, [sp, #20]
 801e948:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801e94a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e94c:	9209      	str	r2, [sp, #36]	; 0x24
 801e94e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e952:	4604      	mov	r4, r0
 801e954:	930f      	str	r3, [sp, #60]	; 0x3c
 801e956:	b141      	cbz	r1, 801e96a <_dtoa_r+0x32>
 801e958:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e95a:	604a      	str	r2, [r1, #4]
 801e95c:	2301      	movs	r3, #1
 801e95e:	4093      	lsls	r3, r2
 801e960:	608b      	str	r3, [r1, #8]
 801e962:	f001 fc1c 	bl	802019e <_Bfree>
 801e966:	2300      	movs	r3, #0
 801e968:	6423      	str	r3, [r4, #64]	; 0x40
 801e96a:	1e3b      	subs	r3, r7, #0
 801e96c:	bfb9      	ittee	lt
 801e96e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e972:	9303      	strlt	r3, [sp, #12]
 801e974:	2300      	movge	r3, #0
 801e976:	602b      	strge	r3, [r5, #0]
 801e978:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801e97c:	4ba2      	ldr	r3, [pc, #648]	; (801ec08 <_dtoa_r+0x2d0>)
 801e97e:	bfbc      	itt	lt
 801e980:	2201      	movlt	r2, #1
 801e982:	602a      	strlt	r2, [r5, #0]
 801e984:	ea33 0309 	bics.w	r3, r3, r9
 801e988:	d11b      	bne.n	801e9c2 <_dtoa_r+0x8a>
 801e98a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e98c:	f242 730f 	movw	r3, #9999	; 0x270f
 801e990:	6013      	str	r3, [r2, #0]
 801e992:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e996:	4333      	orrs	r3, r6
 801e998:	f000 8578 	beq.w	801f48c <_dtoa_r+0xb54>
 801e99c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e99e:	b90b      	cbnz	r3, 801e9a4 <_dtoa_r+0x6c>
 801e9a0:	4b9a      	ldr	r3, [pc, #616]	; (801ec0c <_dtoa_r+0x2d4>)
 801e9a2:	e024      	b.n	801e9ee <_dtoa_r+0xb6>
 801e9a4:	4b99      	ldr	r3, [pc, #612]	; (801ec0c <_dtoa_r+0x2d4>)
 801e9a6:	9300      	str	r3, [sp, #0]
 801e9a8:	3303      	adds	r3, #3
 801e9aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e9ac:	6013      	str	r3, [r2, #0]
 801e9ae:	9800      	ldr	r0, [sp, #0]
 801e9b0:	b015      	add	sp, #84	; 0x54
 801e9b2:	ecbd 8b02 	vpop	{d8}
 801e9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ba:	4b95      	ldr	r3, [pc, #596]	; (801ec10 <_dtoa_r+0x2d8>)
 801e9bc:	9300      	str	r3, [sp, #0]
 801e9be:	3308      	adds	r3, #8
 801e9c0:	e7f3      	b.n	801e9aa <_dtoa_r+0x72>
 801e9c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e9c6:	2200      	movs	r2, #0
 801e9c8:	ec51 0b17 	vmov	r0, r1, d7
 801e9cc:	2300      	movs	r3, #0
 801e9ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801e9d2:	f7e2 f8a9 	bl	8000b28 <__aeabi_dcmpeq>
 801e9d6:	4680      	mov	r8, r0
 801e9d8:	b158      	cbz	r0, 801e9f2 <_dtoa_r+0xba>
 801e9da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e9dc:	2301      	movs	r3, #1
 801e9de:	6013      	str	r3, [r2, #0]
 801e9e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e9e2:	2b00      	cmp	r3, #0
 801e9e4:	f000 854f 	beq.w	801f486 <_dtoa_r+0xb4e>
 801e9e8:	488a      	ldr	r0, [pc, #552]	; (801ec14 <_dtoa_r+0x2dc>)
 801e9ea:	6018      	str	r0, [r3, #0]
 801e9ec:	1e43      	subs	r3, r0, #1
 801e9ee:	9300      	str	r3, [sp, #0]
 801e9f0:	e7dd      	b.n	801e9ae <_dtoa_r+0x76>
 801e9f2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e9f6:	aa12      	add	r2, sp, #72	; 0x48
 801e9f8:	a913      	add	r1, sp, #76	; 0x4c
 801e9fa:	4620      	mov	r0, r4
 801e9fc:	f001 fe7e 	bl	80206fc <__d2b>
 801ea00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ea04:	4683      	mov	fp, r0
 801ea06:	2d00      	cmp	r5, #0
 801ea08:	d07c      	beq.n	801eb04 <_dtoa_r+0x1cc>
 801ea0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea0c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ea10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ea14:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ea18:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ea1c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ea20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ea24:	4b7c      	ldr	r3, [pc, #496]	; (801ec18 <_dtoa_r+0x2e0>)
 801ea26:	2200      	movs	r2, #0
 801ea28:	4630      	mov	r0, r6
 801ea2a:	4639      	mov	r1, r7
 801ea2c:	f7e1 fc5c 	bl	80002e8 <__aeabi_dsub>
 801ea30:	a36f      	add	r3, pc, #444	; (adr r3, 801ebf0 <_dtoa_r+0x2b8>)
 801ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea36:	f7e1 fe0f 	bl	8000658 <__aeabi_dmul>
 801ea3a:	a36f      	add	r3, pc, #444	; (adr r3, 801ebf8 <_dtoa_r+0x2c0>)
 801ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea40:	f7e1 fc54 	bl	80002ec <__adddf3>
 801ea44:	4606      	mov	r6, r0
 801ea46:	4628      	mov	r0, r5
 801ea48:	460f      	mov	r7, r1
 801ea4a:	f7e1 fd9b 	bl	8000584 <__aeabi_i2d>
 801ea4e:	a36c      	add	r3, pc, #432	; (adr r3, 801ec00 <_dtoa_r+0x2c8>)
 801ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea54:	f7e1 fe00 	bl	8000658 <__aeabi_dmul>
 801ea58:	4602      	mov	r2, r0
 801ea5a:	460b      	mov	r3, r1
 801ea5c:	4630      	mov	r0, r6
 801ea5e:	4639      	mov	r1, r7
 801ea60:	f7e1 fc44 	bl	80002ec <__adddf3>
 801ea64:	4606      	mov	r6, r0
 801ea66:	460f      	mov	r7, r1
 801ea68:	f7e2 f8a6 	bl	8000bb8 <__aeabi_d2iz>
 801ea6c:	2200      	movs	r2, #0
 801ea6e:	4682      	mov	sl, r0
 801ea70:	2300      	movs	r3, #0
 801ea72:	4630      	mov	r0, r6
 801ea74:	4639      	mov	r1, r7
 801ea76:	f7e2 f861 	bl	8000b3c <__aeabi_dcmplt>
 801ea7a:	b148      	cbz	r0, 801ea90 <_dtoa_r+0x158>
 801ea7c:	4650      	mov	r0, sl
 801ea7e:	f7e1 fd81 	bl	8000584 <__aeabi_i2d>
 801ea82:	4632      	mov	r2, r6
 801ea84:	463b      	mov	r3, r7
 801ea86:	f7e2 f84f 	bl	8000b28 <__aeabi_dcmpeq>
 801ea8a:	b908      	cbnz	r0, 801ea90 <_dtoa_r+0x158>
 801ea8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ea90:	f1ba 0f16 	cmp.w	sl, #22
 801ea94:	d854      	bhi.n	801eb40 <_dtoa_r+0x208>
 801ea96:	4b61      	ldr	r3, [pc, #388]	; (801ec1c <_dtoa_r+0x2e4>)
 801ea98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ea9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801eaa4:	f7e2 f84a 	bl	8000b3c <__aeabi_dcmplt>
 801eaa8:	2800      	cmp	r0, #0
 801eaaa:	d04b      	beq.n	801eb44 <_dtoa_r+0x20c>
 801eaac:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eab0:	2300      	movs	r3, #0
 801eab2:	930e      	str	r3, [sp, #56]	; 0x38
 801eab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eab6:	1b5d      	subs	r5, r3, r5
 801eab8:	1e6b      	subs	r3, r5, #1
 801eaba:	9304      	str	r3, [sp, #16]
 801eabc:	bf43      	ittte	mi
 801eabe:	2300      	movmi	r3, #0
 801eac0:	f1c5 0801 	rsbmi	r8, r5, #1
 801eac4:	9304      	strmi	r3, [sp, #16]
 801eac6:	f04f 0800 	movpl.w	r8, #0
 801eaca:	f1ba 0f00 	cmp.w	sl, #0
 801eace:	db3b      	blt.n	801eb48 <_dtoa_r+0x210>
 801ead0:	9b04      	ldr	r3, [sp, #16]
 801ead2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ead6:	4453      	add	r3, sl
 801ead8:	9304      	str	r3, [sp, #16]
 801eada:	2300      	movs	r3, #0
 801eadc:	9306      	str	r3, [sp, #24]
 801eade:	9b05      	ldr	r3, [sp, #20]
 801eae0:	2b09      	cmp	r3, #9
 801eae2:	d86a      	bhi.n	801ebba <_dtoa_r+0x282>
 801eae4:	2b05      	cmp	r3, #5
 801eae6:	bfc4      	itt	gt
 801eae8:	3b04      	subgt	r3, #4
 801eaea:	9305      	strgt	r3, [sp, #20]
 801eaec:	9b05      	ldr	r3, [sp, #20]
 801eaee:	f1a3 0302 	sub.w	r3, r3, #2
 801eaf2:	bfcc      	ite	gt
 801eaf4:	2500      	movgt	r5, #0
 801eaf6:	2501      	movle	r5, #1
 801eaf8:	2b03      	cmp	r3, #3
 801eafa:	d86a      	bhi.n	801ebd2 <_dtoa_r+0x29a>
 801eafc:	e8df f003 	tbb	[pc, r3]
 801eb00:	5b4d4f2c 	.word	0x5b4d4f2c
 801eb04:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801eb08:	441d      	add	r5, r3
 801eb0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801eb0e:	2b20      	cmp	r3, #32
 801eb10:	bfc1      	itttt	gt
 801eb12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801eb16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801eb1a:	fa09 f303 	lslgt.w	r3, r9, r3
 801eb1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801eb22:	bfda      	itte	le
 801eb24:	f1c3 0320 	rsble	r3, r3, #32
 801eb28:	fa06 f003 	lslle.w	r0, r6, r3
 801eb2c:	4318      	orrgt	r0, r3
 801eb2e:	f7e1 fd19 	bl	8000564 <__aeabi_ui2d>
 801eb32:	2301      	movs	r3, #1
 801eb34:	4606      	mov	r6, r0
 801eb36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801eb3a:	3d01      	subs	r5, #1
 801eb3c:	9310      	str	r3, [sp, #64]	; 0x40
 801eb3e:	e771      	b.n	801ea24 <_dtoa_r+0xec>
 801eb40:	2301      	movs	r3, #1
 801eb42:	e7b6      	b.n	801eab2 <_dtoa_r+0x17a>
 801eb44:	900e      	str	r0, [sp, #56]	; 0x38
 801eb46:	e7b5      	b.n	801eab4 <_dtoa_r+0x17c>
 801eb48:	f1ca 0300 	rsb	r3, sl, #0
 801eb4c:	9306      	str	r3, [sp, #24]
 801eb4e:	2300      	movs	r3, #0
 801eb50:	eba8 080a 	sub.w	r8, r8, sl
 801eb54:	930d      	str	r3, [sp, #52]	; 0x34
 801eb56:	e7c2      	b.n	801eade <_dtoa_r+0x1a6>
 801eb58:	2300      	movs	r3, #0
 801eb5a:	9308      	str	r3, [sp, #32]
 801eb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	dc3a      	bgt.n	801ebd8 <_dtoa_r+0x2a0>
 801eb62:	f04f 0901 	mov.w	r9, #1
 801eb66:	f8cd 9004 	str.w	r9, [sp, #4]
 801eb6a:	464b      	mov	r3, r9
 801eb6c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801eb70:	2200      	movs	r2, #0
 801eb72:	6462      	str	r2, [r4, #68]	; 0x44
 801eb74:	2204      	movs	r2, #4
 801eb76:	f102 0014 	add.w	r0, r2, #20
 801eb7a:	4298      	cmp	r0, r3
 801eb7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801eb7e:	d931      	bls.n	801ebe4 <_dtoa_r+0x2ac>
 801eb80:	4620      	mov	r0, r4
 801eb82:	f001 fae7 	bl	8020154 <_Balloc>
 801eb86:	9000      	str	r0, [sp, #0]
 801eb88:	2800      	cmp	r0, #0
 801eb8a:	d14d      	bne.n	801ec28 <_dtoa_r+0x2f0>
 801eb8c:	4b24      	ldr	r3, [pc, #144]	; (801ec20 <_dtoa_r+0x2e8>)
 801eb8e:	4602      	mov	r2, r0
 801eb90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801eb94:	4823      	ldr	r0, [pc, #140]	; (801ec24 <_dtoa_r+0x2ec>)
 801eb96:	f003 fd9d 	bl	80226d4 <__assert_func>
 801eb9a:	2301      	movs	r3, #1
 801eb9c:	e7dd      	b.n	801eb5a <_dtoa_r+0x222>
 801eb9e:	2300      	movs	r3, #0
 801eba0:	9308      	str	r3, [sp, #32]
 801eba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eba4:	eb0a 0903 	add.w	r9, sl, r3
 801eba8:	f109 0301 	add.w	r3, r9, #1
 801ebac:	2b01      	cmp	r3, #1
 801ebae:	9301      	str	r3, [sp, #4]
 801ebb0:	bfb8      	it	lt
 801ebb2:	2301      	movlt	r3, #1
 801ebb4:	e7dc      	b.n	801eb70 <_dtoa_r+0x238>
 801ebb6:	2301      	movs	r3, #1
 801ebb8:	e7f2      	b.n	801eba0 <_dtoa_r+0x268>
 801ebba:	2501      	movs	r5, #1
 801ebbc:	2300      	movs	r3, #0
 801ebbe:	9305      	str	r3, [sp, #20]
 801ebc0:	9508      	str	r5, [sp, #32]
 801ebc2:	f04f 39ff 	mov.w	r9, #4294967295
 801ebc6:	2200      	movs	r2, #0
 801ebc8:	f8cd 9004 	str.w	r9, [sp, #4]
 801ebcc:	2312      	movs	r3, #18
 801ebce:	9209      	str	r2, [sp, #36]	; 0x24
 801ebd0:	e7ce      	b.n	801eb70 <_dtoa_r+0x238>
 801ebd2:	2301      	movs	r3, #1
 801ebd4:	9308      	str	r3, [sp, #32]
 801ebd6:	e7f4      	b.n	801ebc2 <_dtoa_r+0x28a>
 801ebd8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ebdc:	f8cd 9004 	str.w	r9, [sp, #4]
 801ebe0:	464b      	mov	r3, r9
 801ebe2:	e7c5      	b.n	801eb70 <_dtoa_r+0x238>
 801ebe4:	3101      	adds	r1, #1
 801ebe6:	6461      	str	r1, [r4, #68]	; 0x44
 801ebe8:	0052      	lsls	r2, r2, #1
 801ebea:	e7c4      	b.n	801eb76 <_dtoa_r+0x23e>
 801ebec:	f3af 8000 	nop.w
 801ebf0:	636f4361 	.word	0x636f4361
 801ebf4:	3fd287a7 	.word	0x3fd287a7
 801ebf8:	8b60c8b3 	.word	0x8b60c8b3
 801ebfc:	3fc68a28 	.word	0x3fc68a28
 801ec00:	509f79fb 	.word	0x509f79fb
 801ec04:	3fd34413 	.word	0x3fd34413
 801ec08:	7ff00000 	.word	0x7ff00000
 801ec0c:	08029968 	.word	0x08029968
 801ec10:	0802996c 	.word	0x0802996c
 801ec14:	080298eb 	.word	0x080298eb
 801ec18:	3ff80000 	.word	0x3ff80000
 801ec1c:	08029a70 	.word	0x08029a70
 801ec20:	08029975 	.word	0x08029975
 801ec24:	08029986 	.word	0x08029986
 801ec28:	9b00      	ldr	r3, [sp, #0]
 801ec2a:	6423      	str	r3, [r4, #64]	; 0x40
 801ec2c:	9b01      	ldr	r3, [sp, #4]
 801ec2e:	2b0e      	cmp	r3, #14
 801ec30:	f200 80ad 	bhi.w	801ed8e <_dtoa_r+0x456>
 801ec34:	2d00      	cmp	r5, #0
 801ec36:	f000 80aa 	beq.w	801ed8e <_dtoa_r+0x456>
 801ec3a:	f1ba 0f00 	cmp.w	sl, #0
 801ec3e:	dd36      	ble.n	801ecae <_dtoa_r+0x376>
 801ec40:	4ac2      	ldr	r2, [pc, #776]	; (801ef4c <_dtoa_r+0x614>)
 801ec42:	f00a 030f 	and.w	r3, sl, #15
 801ec46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ec4a:	ed93 7b00 	vldr	d7, [r3]
 801ec4e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801ec52:	ea4f 172a 	mov.w	r7, sl, asr #4
 801ec56:	eeb0 8a47 	vmov.f32	s16, s14
 801ec5a:	eef0 8a67 	vmov.f32	s17, s15
 801ec5e:	d016      	beq.n	801ec8e <_dtoa_r+0x356>
 801ec60:	4bbb      	ldr	r3, [pc, #748]	; (801ef50 <_dtoa_r+0x618>)
 801ec62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ec66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ec6a:	f7e1 fe1f 	bl	80008ac <__aeabi_ddiv>
 801ec6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec72:	f007 070f 	and.w	r7, r7, #15
 801ec76:	2503      	movs	r5, #3
 801ec78:	4eb5      	ldr	r6, [pc, #724]	; (801ef50 <_dtoa_r+0x618>)
 801ec7a:	b957      	cbnz	r7, 801ec92 <_dtoa_r+0x35a>
 801ec7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec80:	ec53 2b18 	vmov	r2, r3, d8
 801ec84:	f7e1 fe12 	bl	80008ac <__aeabi_ddiv>
 801ec88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec8c:	e029      	b.n	801ece2 <_dtoa_r+0x3aa>
 801ec8e:	2502      	movs	r5, #2
 801ec90:	e7f2      	b.n	801ec78 <_dtoa_r+0x340>
 801ec92:	07f9      	lsls	r1, r7, #31
 801ec94:	d508      	bpl.n	801eca8 <_dtoa_r+0x370>
 801ec96:	ec51 0b18 	vmov	r0, r1, d8
 801ec9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ec9e:	f7e1 fcdb 	bl	8000658 <__aeabi_dmul>
 801eca2:	ec41 0b18 	vmov	d8, r0, r1
 801eca6:	3501      	adds	r5, #1
 801eca8:	107f      	asrs	r7, r7, #1
 801ecaa:	3608      	adds	r6, #8
 801ecac:	e7e5      	b.n	801ec7a <_dtoa_r+0x342>
 801ecae:	f000 80a6 	beq.w	801edfe <_dtoa_r+0x4c6>
 801ecb2:	f1ca 0600 	rsb	r6, sl, #0
 801ecb6:	4ba5      	ldr	r3, [pc, #660]	; (801ef4c <_dtoa_r+0x614>)
 801ecb8:	4fa5      	ldr	r7, [pc, #660]	; (801ef50 <_dtoa_r+0x618>)
 801ecba:	f006 020f 	and.w	r2, r6, #15
 801ecbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ecc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ecca:	f7e1 fcc5 	bl	8000658 <__aeabi_dmul>
 801ecce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ecd2:	1136      	asrs	r6, r6, #4
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	2502      	movs	r5, #2
 801ecd8:	2e00      	cmp	r6, #0
 801ecda:	f040 8085 	bne.w	801ede8 <_dtoa_r+0x4b0>
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d1d2      	bne.n	801ec88 <_dtoa_r+0x350>
 801ece2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	f000 808c 	beq.w	801ee02 <_dtoa_r+0x4ca>
 801ecea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ecee:	4b99      	ldr	r3, [pc, #612]	; (801ef54 <_dtoa_r+0x61c>)
 801ecf0:	2200      	movs	r2, #0
 801ecf2:	4630      	mov	r0, r6
 801ecf4:	4639      	mov	r1, r7
 801ecf6:	f7e1 ff21 	bl	8000b3c <__aeabi_dcmplt>
 801ecfa:	2800      	cmp	r0, #0
 801ecfc:	f000 8081 	beq.w	801ee02 <_dtoa_r+0x4ca>
 801ed00:	9b01      	ldr	r3, [sp, #4]
 801ed02:	2b00      	cmp	r3, #0
 801ed04:	d07d      	beq.n	801ee02 <_dtoa_r+0x4ca>
 801ed06:	f1b9 0f00 	cmp.w	r9, #0
 801ed0a:	dd3c      	ble.n	801ed86 <_dtoa_r+0x44e>
 801ed0c:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ed10:	9307      	str	r3, [sp, #28]
 801ed12:	2200      	movs	r2, #0
 801ed14:	4b90      	ldr	r3, [pc, #576]	; (801ef58 <_dtoa_r+0x620>)
 801ed16:	4630      	mov	r0, r6
 801ed18:	4639      	mov	r1, r7
 801ed1a:	f7e1 fc9d 	bl	8000658 <__aeabi_dmul>
 801ed1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed22:	3501      	adds	r5, #1
 801ed24:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ed28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ed2c:	4628      	mov	r0, r5
 801ed2e:	f7e1 fc29 	bl	8000584 <__aeabi_i2d>
 801ed32:	4632      	mov	r2, r6
 801ed34:	463b      	mov	r3, r7
 801ed36:	f7e1 fc8f 	bl	8000658 <__aeabi_dmul>
 801ed3a:	4b88      	ldr	r3, [pc, #544]	; (801ef5c <_dtoa_r+0x624>)
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	f7e1 fad5 	bl	80002ec <__adddf3>
 801ed42:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801ed46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed4a:	9303      	str	r3, [sp, #12]
 801ed4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	d15c      	bne.n	801ee0c <_dtoa_r+0x4d4>
 801ed52:	4b83      	ldr	r3, [pc, #524]	; (801ef60 <_dtoa_r+0x628>)
 801ed54:	2200      	movs	r2, #0
 801ed56:	4630      	mov	r0, r6
 801ed58:	4639      	mov	r1, r7
 801ed5a:	f7e1 fac5 	bl	80002e8 <__aeabi_dsub>
 801ed5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ed62:	4606      	mov	r6, r0
 801ed64:	460f      	mov	r7, r1
 801ed66:	f7e1 ff07 	bl	8000b78 <__aeabi_dcmpgt>
 801ed6a:	2800      	cmp	r0, #0
 801ed6c:	f040 8295 	bne.w	801f29a <_dtoa_r+0x962>
 801ed70:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ed74:	4630      	mov	r0, r6
 801ed76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed7a:	4639      	mov	r1, r7
 801ed7c:	f7e1 fede 	bl	8000b3c <__aeabi_dcmplt>
 801ed80:	2800      	cmp	r0, #0
 801ed82:	f040 8287 	bne.w	801f294 <_dtoa_r+0x95c>
 801ed86:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ed8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ed8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed90:	2b00      	cmp	r3, #0
 801ed92:	f2c0 8157 	blt.w	801f044 <_dtoa_r+0x70c>
 801ed96:	f1ba 0f0e 	cmp.w	sl, #14
 801ed9a:	f300 8153 	bgt.w	801f044 <_dtoa_r+0x70c>
 801ed9e:	4b6b      	ldr	r3, [pc, #428]	; (801ef4c <_dtoa_r+0x614>)
 801eda0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801eda4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801eda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edaa:	2b00      	cmp	r3, #0
 801edac:	f280 80e2 	bge.w	801ef74 <_dtoa_r+0x63c>
 801edb0:	9b01      	ldr	r3, [sp, #4]
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	f300 80de 	bgt.w	801ef74 <_dtoa_r+0x63c>
 801edb8:	f040 826c 	bne.w	801f294 <_dtoa_r+0x95c>
 801edbc:	4b68      	ldr	r3, [pc, #416]	; (801ef60 <_dtoa_r+0x628>)
 801edbe:	2200      	movs	r2, #0
 801edc0:	4640      	mov	r0, r8
 801edc2:	4649      	mov	r1, r9
 801edc4:	f7e1 fc48 	bl	8000658 <__aeabi_dmul>
 801edc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801edcc:	f7e1 feca 	bl	8000b64 <__aeabi_dcmpge>
 801edd0:	9e01      	ldr	r6, [sp, #4]
 801edd2:	4637      	mov	r7, r6
 801edd4:	2800      	cmp	r0, #0
 801edd6:	f040 8242 	bne.w	801f25e <_dtoa_r+0x926>
 801edda:	9d00      	ldr	r5, [sp, #0]
 801eddc:	2331      	movs	r3, #49	; 0x31
 801edde:	f805 3b01 	strb.w	r3, [r5], #1
 801ede2:	f10a 0a01 	add.w	sl, sl, #1
 801ede6:	e23e      	b.n	801f266 <_dtoa_r+0x92e>
 801ede8:	07f2      	lsls	r2, r6, #31
 801edea:	d505      	bpl.n	801edf8 <_dtoa_r+0x4c0>
 801edec:	e9d7 2300 	ldrd	r2, r3, [r7]
 801edf0:	f7e1 fc32 	bl	8000658 <__aeabi_dmul>
 801edf4:	3501      	adds	r5, #1
 801edf6:	2301      	movs	r3, #1
 801edf8:	1076      	asrs	r6, r6, #1
 801edfa:	3708      	adds	r7, #8
 801edfc:	e76c      	b.n	801ecd8 <_dtoa_r+0x3a0>
 801edfe:	2502      	movs	r5, #2
 801ee00:	e76f      	b.n	801ece2 <_dtoa_r+0x3aa>
 801ee02:	9b01      	ldr	r3, [sp, #4]
 801ee04:	f8cd a01c 	str.w	sl, [sp, #28]
 801ee08:	930c      	str	r3, [sp, #48]	; 0x30
 801ee0a:	e78d      	b.n	801ed28 <_dtoa_r+0x3f0>
 801ee0c:	9900      	ldr	r1, [sp, #0]
 801ee0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ee10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ee12:	4b4e      	ldr	r3, [pc, #312]	; (801ef4c <_dtoa_r+0x614>)
 801ee14:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee18:	4401      	add	r1, r0
 801ee1a:	9102      	str	r1, [sp, #8]
 801ee1c:	9908      	ldr	r1, [sp, #32]
 801ee1e:	eeb0 8a47 	vmov.f32	s16, s14
 801ee22:	eef0 8a67 	vmov.f32	s17, s15
 801ee26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ee2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ee2e:	2900      	cmp	r1, #0
 801ee30:	d045      	beq.n	801eebe <_dtoa_r+0x586>
 801ee32:	494c      	ldr	r1, [pc, #304]	; (801ef64 <_dtoa_r+0x62c>)
 801ee34:	2000      	movs	r0, #0
 801ee36:	f7e1 fd39 	bl	80008ac <__aeabi_ddiv>
 801ee3a:	ec53 2b18 	vmov	r2, r3, d8
 801ee3e:	f7e1 fa53 	bl	80002e8 <__aeabi_dsub>
 801ee42:	9d00      	ldr	r5, [sp, #0]
 801ee44:	ec41 0b18 	vmov	d8, r0, r1
 801ee48:	4639      	mov	r1, r7
 801ee4a:	4630      	mov	r0, r6
 801ee4c:	f7e1 feb4 	bl	8000bb8 <__aeabi_d2iz>
 801ee50:	900c      	str	r0, [sp, #48]	; 0x30
 801ee52:	f7e1 fb97 	bl	8000584 <__aeabi_i2d>
 801ee56:	4602      	mov	r2, r0
 801ee58:	460b      	mov	r3, r1
 801ee5a:	4630      	mov	r0, r6
 801ee5c:	4639      	mov	r1, r7
 801ee5e:	f7e1 fa43 	bl	80002e8 <__aeabi_dsub>
 801ee62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee64:	3330      	adds	r3, #48	; 0x30
 801ee66:	f805 3b01 	strb.w	r3, [r5], #1
 801ee6a:	ec53 2b18 	vmov	r2, r3, d8
 801ee6e:	4606      	mov	r6, r0
 801ee70:	460f      	mov	r7, r1
 801ee72:	f7e1 fe63 	bl	8000b3c <__aeabi_dcmplt>
 801ee76:	2800      	cmp	r0, #0
 801ee78:	d165      	bne.n	801ef46 <_dtoa_r+0x60e>
 801ee7a:	4632      	mov	r2, r6
 801ee7c:	463b      	mov	r3, r7
 801ee7e:	4935      	ldr	r1, [pc, #212]	; (801ef54 <_dtoa_r+0x61c>)
 801ee80:	2000      	movs	r0, #0
 801ee82:	f7e1 fa31 	bl	80002e8 <__aeabi_dsub>
 801ee86:	ec53 2b18 	vmov	r2, r3, d8
 801ee8a:	f7e1 fe57 	bl	8000b3c <__aeabi_dcmplt>
 801ee8e:	2800      	cmp	r0, #0
 801ee90:	f040 80b8 	bne.w	801f004 <_dtoa_r+0x6cc>
 801ee94:	9b02      	ldr	r3, [sp, #8]
 801ee96:	429d      	cmp	r5, r3
 801ee98:	f43f af75 	beq.w	801ed86 <_dtoa_r+0x44e>
 801ee9c:	4b2e      	ldr	r3, [pc, #184]	; (801ef58 <_dtoa_r+0x620>)
 801ee9e:	ec51 0b18 	vmov	r0, r1, d8
 801eea2:	2200      	movs	r2, #0
 801eea4:	f7e1 fbd8 	bl	8000658 <__aeabi_dmul>
 801eea8:	4b2b      	ldr	r3, [pc, #172]	; (801ef58 <_dtoa_r+0x620>)
 801eeaa:	ec41 0b18 	vmov	d8, r0, r1
 801eeae:	2200      	movs	r2, #0
 801eeb0:	4630      	mov	r0, r6
 801eeb2:	4639      	mov	r1, r7
 801eeb4:	f7e1 fbd0 	bl	8000658 <__aeabi_dmul>
 801eeb8:	4606      	mov	r6, r0
 801eeba:	460f      	mov	r7, r1
 801eebc:	e7c4      	b.n	801ee48 <_dtoa_r+0x510>
 801eebe:	ec51 0b17 	vmov	r0, r1, d7
 801eec2:	f7e1 fbc9 	bl	8000658 <__aeabi_dmul>
 801eec6:	9b02      	ldr	r3, [sp, #8]
 801eec8:	9d00      	ldr	r5, [sp, #0]
 801eeca:	930c      	str	r3, [sp, #48]	; 0x30
 801eecc:	ec41 0b18 	vmov	d8, r0, r1
 801eed0:	4639      	mov	r1, r7
 801eed2:	4630      	mov	r0, r6
 801eed4:	f7e1 fe70 	bl	8000bb8 <__aeabi_d2iz>
 801eed8:	9011      	str	r0, [sp, #68]	; 0x44
 801eeda:	f7e1 fb53 	bl	8000584 <__aeabi_i2d>
 801eede:	4602      	mov	r2, r0
 801eee0:	460b      	mov	r3, r1
 801eee2:	4630      	mov	r0, r6
 801eee4:	4639      	mov	r1, r7
 801eee6:	f7e1 f9ff 	bl	80002e8 <__aeabi_dsub>
 801eeea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eeec:	3330      	adds	r3, #48	; 0x30
 801eeee:	f805 3b01 	strb.w	r3, [r5], #1
 801eef2:	9b02      	ldr	r3, [sp, #8]
 801eef4:	429d      	cmp	r5, r3
 801eef6:	4606      	mov	r6, r0
 801eef8:	460f      	mov	r7, r1
 801eefa:	f04f 0200 	mov.w	r2, #0
 801eefe:	d133      	bne.n	801ef68 <_dtoa_r+0x630>
 801ef00:	4b18      	ldr	r3, [pc, #96]	; (801ef64 <_dtoa_r+0x62c>)
 801ef02:	ec51 0b18 	vmov	r0, r1, d8
 801ef06:	f7e1 f9f1 	bl	80002ec <__adddf3>
 801ef0a:	4602      	mov	r2, r0
 801ef0c:	460b      	mov	r3, r1
 801ef0e:	4630      	mov	r0, r6
 801ef10:	4639      	mov	r1, r7
 801ef12:	f7e1 fe31 	bl	8000b78 <__aeabi_dcmpgt>
 801ef16:	2800      	cmp	r0, #0
 801ef18:	d174      	bne.n	801f004 <_dtoa_r+0x6cc>
 801ef1a:	ec53 2b18 	vmov	r2, r3, d8
 801ef1e:	4911      	ldr	r1, [pc, #68]	; (801ef64 <_dtoa_r+0x62c>)
 801ef20:	2000      	movs	r0, #0
 801ef22:	f7e1 f9e1 	bl	80002e8 <__aeabi_dsub>
 801ef26:	4602      	mov	r2, r0
 801ef28:	460b      	mov	r3, r1
 801ef2a:	4630      	mov	r0, r6
 801ef2c:	4639      	mov	r1, r7
 801ef2e:	f7e1 fe05 	bl	8000b3c <__aeabi_dcmplt>
 801ef32:	2800      	cmp	r0, #0
 801ef34:	f43f af27 	beq.w	801ed86 <_dtoa_r+0x44e>
 801ef38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ef3a:	1e6b      	subs	r3, r5, #1
 801ef3c:	930c      	str	r3, [sp, #48]	; 0x30
 801ef3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ef42:	2b30      	cmp	r3, #48	; 0x30
 801ef44:	d0f8      	beq.n	801ef38 <_dtoa_r+0x600>
 801ef46:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ef4a:	e049      	b.n	801efe0 <_dtoa_r+0x6a8>
 801ef4c:	08029a70 	.word	0x08029a70
 801ef50:	08029a48 	.word	0x08029a48
 801ef54:	3ff00000 	.word	0x3ff00000
 801ef58:	40240000 	.word	0x40240000
 801ef5c:	401c0000 	.word	0x401c0000
 801ef60:	40140000 	.word	0x40140000
 801ef64:	3fe00000 	.word	0x3fe00000
 801ef68:	4baf      	ldr	r3, [pc, #700]	; (801f228 <_dtoa_r+0x8f0>)
 801ef6a:	f7e1 fb75 	bl	8000658 <__aeabi_dmul>
 801ef6e:	4606      	mov	r6, r0
 801ef70:	460f      	mov	r7, r1
 801ef72:	e7ad      	b.n	801eed0 <_dtoa_r+0x598>
 801ef74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ef78:	9d00      	ldr	r5, [sp, #0]
 801ef7a:	4642      	mov	r2, r8
 801ef7c:	464b      	mov	r3, r9
 801ef7e:	4630      	mov	r0, r6
 801ef80:	4639      	mov	r1, r7
 801ef82:	f7e1 fc93 	bl	80008ac <__aeabi_ddiv>
 801ef86:	f7e1 fe17 	bl	8000bb8 <__aeabi_d2iz>
 801ef8a:	9002      	str	r0, [sp, #8]
 801ef8c:	f7e1 fafa 	bl	8000584 <__aeabi_i2d>
 801ef90:	4642      	mov	r2, r8
 801ef92:	464b      	mov	r3, r9
 801ef94:	f7e1 fb60 	bl	8000658 <__aeabi_dmul>
 801ef98:	4602      	mov	r2, r0
 801ef9a:	460b      	mov	r3, r1
 801ef9c:	4630      	mov	r0, r6
 801ef9e:	4639      	mov	r1, r7
 801efa0:	f7e1 f9a2 	bl	80002e8 <__aeabi_dsub>
 801efa4:	9e02      	ldr	r6, [sp, #8]
 801efa6:	9f01      	ldr	r7, [sp, #4]
 801efa8:	3630      	adds	r6, #48	; 0x30
 801efaa:	f805 6b01 	strb.w	r6, [r5], #1
 801efae:	9e00      	ldr	r6, [sp, #0]
 801efb0:	1bae      	subs	r6, r5, r6
 801efb2:	42b7      	cmp	r7, r6
 801efb4:	4602      	mov	r2, r0
 801efb6:	460b      	mov	r3, r1
 801efb8:	d137      	bne.n	801f02a <_dtoa_r+0x6f2>
 801efba:	f7e1 f997 	bl	80002ec <__adddf3>
 801efbe:	4642      	mov	r2, r8
 801efc0:	464b      	mov	r3, r9
 801efc2:	4606      	mov	r6, r0
 801efc4:	460f      	mov	r7, r1
 801efc6:	f7e1 fdd7 	bl	8000b78 <__aeabi_dcmpgt>
 801efca:	b9c8      	cbnz	r0, 801f000 <_dtoa_r+0x6c8>
 801efcc:	4642      	mov	r2, r8
 801efce:	464b      	mov	r3, r9
 801efd0:	4630      	mov	r0, r6
 801efd2:	4639      	mov	r1, r7
 801efd4:	f7e1 fda8 	bl	8000b28 <__aeabi_dcmpeq>
 801efd8:	b110      	cbz	r0, 801efe0 <_dtoa_r+0x6a8>
 801efda:	9b02      	ldr	r3, [sp, #8]
 801efdc:	07d9      	lsls	r1, r3, #31
 801efde:	d40f      	bmi.n	801f000 <_dtoa_r+0x6c8>
 801efe0:	4620      	mov	r0, r4
 801efe2:	4659      	mov	r1, fp
 801efe4:	f001 f8db 	bl	802019e <_Bfree>
 801efe8:	2300      	movs	r3, #0
 801efea:	702b      	strb	r3, [r5, #0]
 801efec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801efee:	f10a 0001 	add.w	r0, sl, #1
 801eff2:	6018      	str	r0, [r3, #0]
 801eff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	f43f acd9 	beq.w	801e9ae <_dtoa_r+0x76>
 801effc:	601d      	str	r5, [r3, #0]
 801effe:	e4d6      	b.n	801e9ae <_dtoa_r+0x76>
 801f000:	f8cd a01c 	str.w	sl, [sp, #28]
 801f004:	462b      	mov	r3, r5
 801f006:	461d      	mov	r5, r3
 801f008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f00c:	2a39      	cmp	r2, #57	; 0x39
 801f00e:	d108      	bne.n	801f022 <_dtoa_r+0x6ea>
 801f010:	9a00      	ldr	r2, [sp, #0]
 801f012:	429a      	cmp	r2, r3
 801f014:	d1f7      	bne.n	801f006 <_dtoa_r+0x6ce>
 801f016:	9a07      	ldr	r2, [sp, #28]
 801f018:	9900      	ldr	r1, [sp, #0]
 801f01a:	3201      	adds	r2, #1
 801f01c:	9207      	str	r2, [sp, #28]
 801f01e:	2230      	movs	r2, #48	; 0x30
 801f020:	700a      	strb	r2, [r1, #0]
 801f022:	781a      	ldrb	r2, [r3, #0]
 801f024:	3201      	adds	r2, #1
 801f026:	701a      	strb	r2, [r3, #0]
 801f028:	e78d      	b.n	801ef46 <_dtoa_r+0x60e>
 801f02a:	4b7f      	ldr	r3, [pc, #508]	; (801f228 <_dtoa_r+0x8f0>)
 801f02c:	2200      	movs	r2, #0
 801f02e:	f7e1 fb13 	bl	8000658 <__aeabi_dmul>
 801f032:	2200      	movs	r2, #0
 801f034:	2300      	movs	r3, #0
 801f036:	4606      	mov	r6, r0
 801f038:	460f      	mov	r7, r1
 801f03a:	f7e1 fd75 	bl	8000b28 <__aeabi_dcmpeq>
 801f03e:	2800      	cmp	r0, #0
 801f040:	d09b      	beq.n	801ef7a <_dtoa_r+0x642>
 801f042:	e7cd      	b.n	801efe0 <_dtoa_r+0x6a8>
 801f044:	9a08      	ldr	r2, [sp, #32]
 801f046:	2a00      	cmp	r2, #0
 801f048:	f000 80c4 	beq.w	801f1d4 <_dtoa_r+0x89c>
 801f04c:	9a05      	ldr	r2, [sp, #20]
 801f04e:	2a01      	cmp	r2, #1
 801f050:	f300 80a8 	bgt.w	801f1a4 <_dtoa_r+0x86c>
 801f054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f056:	2a00      	cmp	r2, #0
 801f058:	f000 80a0 	beq.w	801f19c <_dtoa_r+0x864>
 801f05c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f060:	9e06      	ldr	r6, [sp, #24]
 801f062:	4645      	mov	r5, r8
 801f064:	9a04      	ldr	r2, [sp, #16]
 801f066:	2101      	movs	r1, #1
 801f068:	441a      	add	r2, r3
 801f06a:	4620      	mov	r0, r4
 801f06c:	4498      	add	r8, r3
 801f06e:	9204      	str	r2, [sp, #16]
 801f070:	f001 f938 	bl	80202e4 <__i2b>
 801f074:	4607      	mov	r7, r0
 801f076:	2d00      	cmp	r5, #0
 801f078:	dd0b      	ble.n	801f092 <_dtoa_r+0x75a>
 801f07a:	9b04      	ldr	r3, [sp, #16]
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	dd08      	ble.n	801f092 <_dtoa_r+0x75a>
 801f080:	42ab      	cmp	r3, r5
 801f082:	9a04      	ldr	r2, [sp, #16]
 801f084:	bfa8      	it	ge
 801f086:	462b      	movge	r3, r5
 801f088:	eba8 0803 	sub.w	r8, r8, r3
 801f08c:	1aed      	subs	r5, r5, r3
 801f08e:	1ad3      	subs	r3, r2, r3
 801f090:	9304      	str	r3, [sp, #16]
 801f092:	9b06      	ldr	r3, [sp, #24]
 801f094:	b1fb      	cbz	r3, 801f0d6 <_dtoa_r+0x79e>
 801f096:	9b08      	ldr	r3, [sp, #32]
 801f098:	2b00      	cmp	r3, #0
 801f09a:	f000 809f 	beq.w	801f1dc <_dtoa_r+0x8a4>
 801f09e:	2e00      	cmp	r6, #0
 801f0a0:	dd11      	ble.n	801f0c6 <_dtoa_r+0x78e>
 801f0a2:	4639      	mov	r1, r7
 801f0a4:	4632      	mov	r2, r6
 801f0a6:	4620      	mov	r0, r4
 801f0a8:	f001 f9d8 	bl	802045c <__pow5mult>
 801f0ac:	465a      	mov	r2, fp
 801f0ae:	4601      	mov	r1, r0
 801f0b0:	4607      	mov	r7, r0
 801f0b2:	4620      	mov	r0, r4
 801f0b4:	f001 f92c 	bl	8020310 <__multiply>
 801f0b8:	4659      	mov	r1, fp
 801f0ba:	9007      	str	r0, [sp, #28]
 801f0bc:	4620      	mov	r0, r4
 801f0be:	f001 f86e 	bl	802019e <_Bfree>
 801f0c2:	9b07      	ldr	r3, [sp, #28]
 801f0c4:	469b      	mov	fp, r3
 801f0c6:	9b06      	ldr	r3, [sp, #24]
 801f0c8:	1b9a      	subs	r2, r3, r6
 801f0ca:	d004      	beq.n	801f0d6 <_dtoa_r+0x79e>
 801f0cc:	4659      	mov	r1, fp
 801f0ce:	4620      	mov	r0, r4
 801f0d0:	f001 f9c4 	bl	802045c <__pow5mult>
 801f0d4:	4683      	mov	fp, r0
 801f0d6:	2101      	movs	r1, #1
 801f0d8:	4620      	mov	r0, r4
 801f0da:	f001 f903 	bl	80202e4 <__i2b>
 801f0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	4606      	mov	r6, r0
 801f0e4:	dd7c      	ble.n	801f1e0 <_dtoa_r+0x8a8>
 801f0e6:	461a      	mov	r2, r3
 801f0e8:	4601      	mov	r1, r0
 801f0ea:	4620      	mov	r0, r4
 801f0ec:	f001 f9b6 	bl	802045c <__pow5mult>
 801f0f0:	9b05      	ldr	r3, [sp, #20]
 801f0f2:	2b01      	cmp	r3, #1
 801f0f4:	4606      	mov	r6, r0
 801f0f6:	dd76      	ble.n	801f1e6 <_dtoa_r+0x8ae>
 801f0f8:	2300      	movs	r3, #0
 801f0fa:	9306      	str	r3, [sp, #24]
 801f0fc:	6933      	ldr	r3, [r6, #16]
 801f0fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f102:	6918      	ldr	r0, [r3, #16]
 801f104:	f001 f89e 	bl	8020244 <__hi0bits>
 801f108:	f1c0 0020 	rsb	r0, r0, #32
 801f10c:	9b04      	ldr	r3, [sp, #16]
 801f10e:	4418      	add	r0, r3
 801f110:	f010 001f 	ands.w	r0, r0, #31
 801f114:	f000 8086 	beq.w	801f224 <_dtoa_r+0x8ec>
 801f118:	f1c0 0320 	rsb	r3, r0, #32
 801f11c:	2b04      	cmp	r3, #4
 801f11e:	dd7f      	ble.n	801f220 <_dtoa_r+0x8e8>
 801f120:	f1c0 001c 	rsb	r0, r0, #28
 801f124:	9b04      	ldr	r3, [sp, #16]
 801f126:	4403      	add	r3, r0
 801f128:	4480      	add	r8, r0
 801f12a:	4405      	add	r5, r0
 801f12c:	9304      	str	r3, [sp, #16]
 801f12e:	f1b8 0f00 	cmp.w	r8, #0
 801f132:	dd05      	ble.n	801f140 <_dtoa_r+0x808>
 801f134:	4659      	mov	r1, fp
 801f136:	4642      	mov	r2, r8
 801f138:	4620      	mov	r0, r4
 801f13a:	f001 f9cf 	bl	80204dc <__lshift>
 801f13e:	4683      	mov	fp, r0
 801f140:	9b04      	ldr	r3, [sp, #16]
 801f142:	2b00      	cmp	r3, #0
 801f144:	dd05      	ble.n	801f152 <_dtoa_r+0x81a>
 801f146:	4631      	mov	r1, r6
 801f148:	461a      	mov	r2, r3
 801f14a:	4620      	mov	r0, r4
 801f14c:	f001 f9c6 	bl	80204dc <__lshift>
 801f150:	4606      	mov	r6, r0
 801f152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f154:	2b00      	cmp	r3, #0
 801f156:	d069      	beq.n	801f22c <_dtoa_r+0x8f4>
 801f158:	4631      	mov	r1, r6
 801f15a:	4658      	mov	r0, fp
 801f15c:	f001 fa2a 	bl	80205b4 <__mcmp>
 801f160:	2800      	cmp	r0, #0
 801f162:	da63      	bge.n	801f22c <_dtoa_r+0x8f4>
 801f164:	2300      	movs	r3, #0
 801f166:	4659      	mov	r1, fp
 801f168:	220a      	movs	r2, #10
 801f16a:	4620      	mov	r0, r4
 801f16c:	f001 f820 	bl	80201b0 <__multadd>
 801f170:	9b08      	ldr	r3, [sp, #32]
 801f172:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f176:	4683      	mov	fp, r0
 801f178:	2b00      	cmp	r3, #0
 801f17a:	f000 818e 	beq.w	801f49a <_dtoa_r+0xb62>
 801f17e:	4639      	mov	r1, r7
 801f180:	2300      	movs	r3, #0
 801f182:	220a      	movs	r2, #10
 801f184:	4620      	mov	r0, r4
 801f186:	f001 f813 	bl	80201b0 <__multadd>
 801f18a:	f1b9 0f00 	cmp.w	r9, #0
 801f18e:	4607      	mov	r7, r0
 801f190:	f300 808e 	bgt.w	801f2b0 <_dtoa_r+0x978>
 801f194:	9b05      	ldr	r3, [sp, #20]
 801f196:	2b02      	cmp	r3, #2
 801f198:	dc50      	bgt.n	801f23c <_dtoa_r+0x904>
 801f19a:	e089      	b.n	801f2b0 <_dtoa_r+0x978>
 801f19c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f19e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f1a2:	e75d      	b.n	801f060 <_dtoa_r+0x728>
 801f1a4:	9b01      	ldr	r3, [sp, #4]
 801f1a6:	1e5e      	subs	r6, r3, #1
 801f1a8:	9b06      	ldr	r3, [sp, #24]
 801f1aa:	42b3      	cmp	r3, r6
 801f1ac:	bfbf      	itttt	lt
 801f1ae:	9b06      	ldrlt	r3, [sp, #24]
 801f1b0:	9606      	strlt	r6, [sp, #24]
 801f1b2:	1af2      	sublt	r2, r6, r3
 801f1b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f1b6:	bfb6      	itet	lt
 801f1b8:	189b      	addlt	r3, r3, r2
 801f1ba:	1b9e      	subge	r6, r3, r6
 801f1bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f1be:	9b01      	ldr	r3, [sp, #4]
 801f1c0:	bfb8      	it	lt
 801f1c2:	2600      	movlt	r6, #0
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	bfb5      	itete	lt
 801f1c8:	eba8 0503 	sublt.w	r5, r8, r3
 801f1cc:	9b01      	ldrge	r3, [sp, #4]
 801f1ce:	2300      	movlt	r3, #0
 801f1d0:	4645      	movge	r5, r8
 801f1d2:	e747      	b.n	801f064 <_dtoa_r+0x72c>
 801f1d4:	9e06      	ldr	r6, [sp, #24]
 801f1d6:	9f08      	ldr	r7, [sp, #32]
 801f1d8:	4645      	mov	r5, r8
 801f1da:	e74c      	b.n	801f076 <_dtoa_r+0x73e>
 801f1dc:	9a06      	ldr	r2, [sp, #24]
 801f1de:	e775      	b.n	801f0cc <_dtoa_r+0x794>
 801f1e0:	9b05      	ldr	r3, [sp, #20]
 801f1e2:	2b01      	cmp	r3, #1
 801f1e4:	dc18      	bgt.n	801f218 <_dtoa_r+0x8e0>
 801f1e6:	9b02      	ldr	r3, [sp, #8]
 801f1e8:	b9b3      	cbnz	r3, 801f218 <_dtoa_r+0x8e0>
 801f1ea:	9b03      	ldr	r3, [sp, #12]
 801f1ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f1f0:	b9a3      	cbnz	r3, 801f21c <_dtoa_r+0x8e4>
 801f1f2:	9b03      	ldr	r3, [sp, #12]
 801f1f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f1f8:	0d1b      	lsrs	r3, r3, #20
 801f1fa:	051b      	lsls	r3, r3, #20
 801f1fc:	b12b      	cbz	r3, 801f20a <_dtoa_r+0x8d2>
 801f1fe:	9b04      	ldr	r3, [sp, #16]
 801f200:	3301      	adds	r3, #1
 801f202:	9304      	str	r3, [sp, #16]
 801f204:	f108 0801 	add.w	r8, r8, #1
 801f208:	2301      	movs	r3, #1
 801f20a:	9306      	str	r3, [sp, #24]
 801f20c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f20e:	2b00      	cmp	r3, #0
 801f210:	f47f af74 	bne.w	801f0fc <_dtoa_r+0x7c4>
 801f214:	2001      	movs	r0, #1
 801f216:	e779      	b.n	801f10c <_dtoa_r+0x7d4>
 801f218:	2300      	movs	r3, #0
 801f21a:	e7f6      	b.n	801f20a <_dtoa_r+0x8d2>
 801f21c:	9b02      	ldr	r3, [sp, #8]
 801f21e:	e7f4      	b.n	801f20a <_dtoa_r+0x8d2>
 801f220:	d085      	beq.n	801f12e <_dtoa_r+0x7f6>
 801f222:	4618      	mov	r0, r3
 801f224:	301c      	adds	r0, #28
 801f226:	e77d      	b.n	801f124 <_dtoa_r+0x7ec>
 801f228:	40240000 	.word	0x40240000
 801f22c:	9b01      	ldr	r3, [sp, #4]
 801f22e:	2b00      	cmp	r3, #0
 801f230:	dc38      	bgt.n	801f2a4 <_dtoa_r+0x96c>
 801f232:	9b05      	ldr	r3, [sp, #20]
 801f234:	2b02      	cmp	r3, #2
 801f236:	dd35      	ble.n	801f2a4 <_dtoa_r+0x96c>
 801f238:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f23c:	f1b9 0f00 	cmp.w	r9, #0
 801f240:	d10d      	bne.n	801f25e <_dtoa_r+0x926>
 801f242:	4631      	mov	r1, r6
 801f244:	464b      	mov	r3, r9
 801f246:	2205      	movs	r2, #5
 801f248:	4620      	mov	r0, r4
 801f24a:	f000 ffb1 	bl	80201b0 <__multadd>
 801f24e:	4601      	mov	r1, r0
 801f250:	4606      	mov	r6, r0
 801f252:	4658      	mov	r0, fp
 801f254:	f001 f9ae 	bl	80205b4 <__mcmp>
 801f258:	2800      	cmp	r0, #0
 801f25a:	f73f adbe 	bgt.w	801edda <_dtoa_r+0x4a2>
 801f25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f260:	9d00      	ldr	r5, [sp, #0]
 801f262:	ea6f 0a03 	mvn.w	sl, r3
 801f266:	f04f 0800 	mov.w	r8, #0
 801f26a:	4631      	mov	r1, r6
 801f26c:	4620      	mov	r0, r4
 801f26e:	f000 ff96 	bl	802019e <_Bfree>
 801f272:	2f00      	cmp	r7, #0
 801f274:	f43f aeb4 	beq.w	801efe0 <_dtoa_r+0x6a8>
 801f278:	f1b8 0f00 	cmp.w	r8, #0
 801f27c:	d005      	beq.n	801f28a <_dtoa_r+0x952>
 801f27e:	45b8      	cmp	r8, r7
 801f280:	d003      	beq.n	801f28a <_dtoa_r+0x952>
 801f282:	4641      	mov	r1, r8
 801f284:	4620      	mov	r0, r4
 801f286:	f000 ff8a 	bl	802019e <_Bfree>
 801f28a:	4639      	mov	r1, r7
 801f28c:	4620      	mov	r0, r4
 801f28e:	f000 ff86 	bl	802019e <_Bfree>
 801f292:	e6a5      	b.n	801efe0 <_dtoa_r+0x6a8>
 801f294:	2600      	movs	r6, #0
 801f296:	4637      	mov	r7, r6
 801f298:	e7e1      	b.n	801f25e <_dtoa_r+0x926>
 801f29a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f29c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f2a0:	4637      	mov	r7, r6
 801f2a2:	e59a      	b.n	801edda <_dtoa_r+0x4a2>
 801f2a4:	9b08      	ldr	r3, [sp, #32]
 801f2a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	f000 80fc 	beq.w	801f4a8 <_dtoa_r+0xb70>
 801f2b0:	2d00      	cmp	r5, #0
 801f2b2:	dd05      	ble.n	801f2c0 <_dtoa_r+0x988>
 801f2b4:	4639      	mov	r1, r7
 801f2b6:	462a      	mov	r2, r5
 801f2b8:	4620      	mov	r0, r4
 801f2ba:	f001 f90f 	bl	80204dc <__lshift>
 801f2be:	4607      	mov	r7, r0
 801f2c0:	9b06      	ldr	r3, [sp, #24]
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	d05b      	beq.n	801f37e <_dtoa_r+0xa46>
 801f2c6:	6879      	ldr	r1, [r7, #4]
 801f2c8:	4620      	mov	r0, r4
 801f2ca:	f000 ff43 	bl	8020154 <_Balloc>
 801f2ce:	4605      	mov	r5, r0
 801f2d0:	b920      	cbnz	r0, 801f2dc <_dtoa_r+0x9a4>
 801f2d2:	4b80      	ldr	r3, [pc, #512]	; (801f4d4 <_dtoa_r+0xb9c>)
 801f2d4:	4602      	mov	r2, r0
 801f2d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f2da:	e45b      	b.n	801eb94 <_dtoa_r+0x25c>
 801f2dc:	693a      	ldr	r2, [r7, #16]
 801f2de:	3202      	adds	r2, #2
 801f2e0:	0092      	lsls	r2, r2, #2
 801f2e2:	f107 010c 	add.w	r1, r7, #12
 801f2e6:	300c      	adds	r0, #12
 801f2e8:	f7fb ff98 	bl	801b21c <memcpy>
 801f2ec:	2201      	movs	r2, #1
 801f2ee:	4629      	mov	r1, r5
 801f2f0:	4620      	mov	r0, r4
 801f2f2:	f001 f8f3 	bl	80204dc <__lshift>
 801f2f6:	9b00      	ldr	r3, [sp, #0]
 801f2f8:	3301      	adds	r3, #1
 801f2fa:	9301      	str	r3, [sp, #4]
 801f2fc:	9b00      	ldr	r3, [sp, #0]
 801f2fe:	444b      	add	r3, r9
 801f300:	9307      	str	r3, [sp, #28]
 801f302:	9b02      	ldr	r3, [sp, #8]
 801f304:	f003 0301 	and.w	r3, r3, #1
 801f308:	46b8      	mov	r8, r7
 801f30a:	9306      	str	r3, [sp, #24]
 801f30c:	4607      	mov	r7, r0
 801f30e:	9b01      	ldr	r3, [sp, #4]
 801f310:	4631      	mov	r1, r6
 801f312:	3b01      	subs	r3, #1
 801f314:	4658      	mov	r0, fp
 801f316:	9302      	str	r3, [sp, #8]
 801f318:	f7ff fa80 	bl	801e81c <quorem>
 801f31c:	4603      	mov	r3, r0
 801f31e:	3330      	adds	r3, #48	; 0x30
 801f320:	9004      	str	r0, [sp, #16]
 801f322:	4641      	mov	r1, r8
 801f324:	4658      	mov	r0, fp
 801f326:	9308      	str	r3, [sp, #32]
 801f328:	f001 f944 	bl	80205b4 <__mcmp>
 801f32c:	463a      	mov	r2, r7
 801f32e:	4681      	mov	r9, r0
 801f330:	4631      	mov	r1, r6
 801f332:	4620      	mov	r0, r4
 801f334:	f001 f95a 	bl	80205ec <__mdiff>
 801f338:	68c2      	ldr	r2, [r0, #12]
 801f33a:	9b08      	ldr	r3, [sp, #32]
 801f33c:	4605      	mov	r5, r0
 801f33e:	bb02      	cbnz	r2, 801f382 <_dtoa_r+0xa4a>
 801f340:	4601      	mov	r1, r0
 801f342:	4658      	mov	r0, fp
 801f344:	f001 f936 	bl	80205b4 <__mcmp>
 801f348:	9b08      	ldr	r3, [sp, #32]
 801f34a:	4602      	mov	r2, r0
 801f34c:	4629      	mov	r1, r5
 801f34e:	4620      	mov	r0, r4
 801f350:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f354:	f000 ff23 	bl	802019e <_Bfree>
 801f358:	9b05      	ldr	r3, [sp, #20]
 801f35a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f35c:	9d01      	ldr	r5, [sp, #4]
 801f35e:	ea43 0102 	orr.w	r1, r3, r2
 801f362:	9b06      	ldr	r3, [sp, #24]
 801f364:	430b      	orrs	r3, r1
 801f366:	9b08      	ldr	r3, [sp, #32]
 801f368:	d10d      	bne.n	801f386 <_dtoa_r+0xa4e>
 801f36a:	2b39      	cmp	r3, #57	; 0x39
 801f36c:	d029      	beq.n	801f3c2 <_dtoa_r+0xa8a>
 801f36e:	f1b9 0f00 	cmp.w	r9, #0
 801f372:	dd01      	ble.n	801f378 <_dtoa_r+0xa40>
 801f374:	9b04      	ldr	r3, [sp, #16]
 801f376:	3331      	adds	r3, #49	; 0x31
 801f378:	9a02      	ldr	r2, [sp, #8]
 801f37a:	7013      	strb	r3, [r2, #0]
 801f37c:	e775      	b.n	801f26a <_dtoa_r+0x932>
 801f37e:	4638      	mov	r0, r7
 801f380:	e7b9      	b.n	801f2f6 <_dtoa_r+0x9be>
 801f382:	2201      	movs	r2, #1
 801f384:	e7e2      	b.n	801f34c <_dtoa_r+0xa14>
 801f386:	f1b9 0f00 	cmp.w	r9, #0
 801f38a:	db06      	blt.n	801f39a <_dtoa_r+0xa62>
 801f38c:	9905      	ldr	r1, [sp, #20]
 801f38e:	ea41 0909 	orr.w	r9, r1, r9
 801f392:	9906      	ldr	r1, [sp, #24]
 801f394:	ea59 0101 	orrs.w	r1, r9, r1
 801f398:	d120      	bne.n	801f3dc <_dtoa_r+0xaa4>
 801f39a:	2a00      	cmp	r2, #0
 801f39c:	ddec      	ble.n	801f378 <_dtoa_r+0xa40>
 801f39e:	4659      	mov	r1, fp
 801f3a0:	2201      	movs	r2, #1
 801f3a2:	4620      	mov	r0, r4
 801f3a4:	9301      	str	r3, [sp, #4]
 801f3a6:	f001 f899 	bl	80204dc <__lshift>
 801f3aa:	4631      	mov	r1, r6
 801f3ac:	4683      	mov	fp, r0
 801f3ae:	f001 f901 	bl	80205b4 <__mcmp>
 801f3b2:	2800      	cmp	r0, #0
 801f3b4:	9b01      	ldr	r3, [sp, #4]
 801f3b6:	dc02      	bgt.n	801f3be <_dtoa_r+0xa86>
 801f3b8:	d1de      	bne.n	801f378 <_dtoa_r+0xa40>
 801f3ba:	07da      	lsls	r2, r3, #31
 801f3bc:	d5dc      	bpl.n	801f378 <_dtoa_r+0xa40>
 801f3be:	2b39      	cmp	r3, #57	; 0x39
 801f3c0:	d1d8      	bne.n	801f374 <_dtoa_r+0xa3c>
 801f3c2:	9a02      	ldr	r2, [sp, #8]
 801f3c4:	2339      	movs	r3, #57	; 0x39
 801f3c6:	7013      	strb	r3, [r2, #0]
 801f3c8:	462b      	mov	r3, r5
 801f3ca:	461d      	mov	r5, r3
 801f3cc:	3b01      	subs	r3, #1
 801f3ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f3d2:	2a39      	cmp	r2, #57	; 0x39
 801f3d4:	d050      	beq.n	801f478 <_dtoa_r+0xb40>
 801f3d6:	3201      	adds	r2, #1
 801f3d8:	701a      	strb	r2, [r3, #0]
 801f3da:	e746      	b.n	801f26a <_dtoa_r+0x932>
 801f3dc:	2a00      	cmp	r2, #0
 801f3de:	dd03      	ble.n	801f3e8 <_dtoa_r+0xab0>
 801f3e0:	2b39      	cmp	r3, #57	; 0x39
 801f3e2:	d0ee      	beq.n	801f3c2 <_dtoa_r+0xa8a>
 801f3e4:	3301      	adds	r3, #1
 801f3e6:	e7c7      	b.n	801f378 <_dtoa_r+0xa40>
 801f3e8:	9a01      	ldr	r2, [sp, #4]
 801f3ea:	9907      	ldr	r1, [sp, #28]
 801f3ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f3f0:	428a      	cmp	r2, r1
 801f3f2:	d02a      	beq.n	801f44a <_dtoa_r+0xb12>
 801f3f4:	4659      	mov	r1, fp
 801f3f6:	2300      	movs	r3, #0
 801f3f8:	220a      	movs	r2, #10
 801f3fa:	4620      	mov	r0, r4
 801f3fc:	f000 fed8 	bl	80201b0 <__multadd>
 801f400:	45b8      	cmp	r8, r7
 801f402:	4683      	mov	fp, r0
 801f404:	f04f 0300 	mov.w	r3, #0
 801f408:	f04f 020a 	mov.w	r2, #10
 801f40c:	4641      	mov	r1, r8
 801f40e:	4620      	mov	r0, r4
 801f410:	d107      	bne.n	801f422 <_dtoa_r+0xaea>
 801f412:	f000 fecd 	bl	80201b0 <__multadd>
 801f416:	4680      	mov	r8, r0
 801f418:	4607      	mov	r7, r0
 801f41a:	9b01      	ldr	r3, [sp, #4]
 801f41c:	3301      	adds	r3, #1
 801f41e:	9301      	str	r3, [sp, #4]
 801f420:	e775      	b.n	801f30e <_dtoa_r+0x9d6>
 801f422:	f000 fec5 	bl	80201b0 <__multadd>
 801f426:	4639      	mov	r1, r7
 801f428:	4680      	mov	r8, r0
 801f42a:	2300      	movs	r3, #0
 801f42c:	220a      	movs	r2, #10
 801f42e:	4620      	mov	r0, r4
 801f430:	f000 febe 	bl	80201b0 <__multadd>
 801f434:	4607      	mov	r7, r0
 801f436:	e7f0      	b.n	801f41a <_dtoa_r+0xae2>
 801f438:	f1b9 0f00 	cmp.w	r9, #0
 801f43c:	9a00      	ldr	r2, [sp, #0]
 801f43e:	bfcc      	ite	gt
 801f440:	464d      	movgt	r5, r9
 801f442:	2501      	movle	r5, #1
 801f444:	4415      	add	r5, r2
 801f446:	f04f 0800 	mov.w	r8, #0
 801f44a:	4659      	mov	r1, fp
 801f44c:	2201      	movs	r2, #1
 801f44e:	4620      	mov	r0, r4
 801f450:	9301      	str	r3, [sp, #4]
 801f452:	f001 f843 	bl	80204dc <__lshift>
 801f456:	4631      	mov	r1, r6
 801f458:	4683      	mov	fp, r0
 801f45a:	f001 f8ab 	bl	80205b4 <__mcmp>
 801f45e:	2800      	cmp	r0, #0
 801f460:	dcb2      	bgt.n	801f3c8 <_dtoa_r+0xa90>
 801f462:	d102      	bne.n	801f46a <_dtoa_r+0xb32>
 801f464:	9b01      	ldr	r3, [sp, #4]
 801f466:	07db      	lsls	r3, r3, #31
 801f468:	d4ae      	bmi.n	801f3c8 <_dtoa_r+0xa90>
 801f46a:	462b      	mov	r3, r5
 801f46c:	461d      	mov	r5, r3
 801f46e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f472:	2a30      	cmp	r2, #48	; 0x30
 801f474:	d0fa      	beq.n	801f46c <_dtoa_r+0xb34>
 801f476:	e6f8      	b.n	801f26a <_dtoa_r+0x932>
 801f478:	9a00      	ldr	r2, [sp, #0]
 801f47a:	429a      	cmp	r2, r3
 801f47c:	d1a5      	bne.n	801f3ca <_dtoa_r+0xa92>
 801f47e:	f10a 0a01 	add.w	sl, sl, #1
 801f482:	2331      	movs	r3, #49	; 0x31
 801f484:	e779      	b.n	801f37a <_dtoa_r+0xa42>
 801f486:	4b14      	ldr	r3, [pc, #80]	; (801f4d8 <_dtoa_r+0xba0>)
 801f488:	f7ff bab1 	b.w	801e9ee <_dtoa_r+0xb6>
 801f48c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f48e:	2b00      	cmp	r3, #0
 801f490:	f47f aa93 	bne.w	801e9ba <_dtoa_r+0x82>
 801f494:	4b11      	ldr	r3, [pc, #68]	; (801f4dc <_dtoa_r+0xba4>)
 801f496:	f7ff baaa 	b.w	801e9ee <_dtoa_r+0xb6>
 801f49a:	f1b9 0f00 	cmp.w	r9, #0
 801f49e:	dc03      	bgt.n	801f4a8 <_dtoa_r+0xb70>
 801f4a0:	9b05      	ldr	r3, [sp, #20]
 801f4a2:	2b02      	cmp	r3, #2
 801f4a4:	f73f aeca 	bgt.w	801f23c <_dtoa_r+0x904>
 801f4a8:	9d00      	ldr	r5, [sp, #0]
 801f4aa:	4631      	mov	r1, r6
 801f4ac:	4658      	mov	r0, fp
 801f4ae:	f7ff f9b5 	bl	801e81c <quorem>
 801f4b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f4b6:	f805 3b01 	strb.w	r3, [r5], #1
 801f4ba:	9a00      	ldr	r2, [sp, #0]
 801f4bc:	1aaa      	subs	r2, r5, r2
 801f4be:	4591      	cmp	r9, r2
 801f4c0:	ddba      	ble.n	801f438 <_dtoa_r+0xb00>
 801f4c2:	4659      	mov	r1, fp
 801f4c4:	2300      	movs	r3, #0
 801f4c6:	220a      	movs	r2, #10
 801f4c8:	4620      	mov	r0, r4
 801f4ca:	f000 fe71 	bl	80201b0 <__multadd>
 801f4ce:	4683      	mov	fp, r0
 801f4d0:	e7eb      	b.n	801f4aa <_dtoa_r+0xb72>
 801f4d2:	bf00      	nop
 801f4d4:	08029975 	.word	0x08029975
 801f4d8:	080298ea 	.word	0x080298ea
 801f4dc:	0802996c 	.word	0x0802996c

0801f4e0 <__errno>:
 801f4e0:	4b01      	ldr	r3, [pc, #4]	; (801f4e8 <__errno+0x8>)
 801f4e2:	6818      	ldr	r0, [r3, #0]
 801f4e4:	4770      	bx	lr
 801f4e6:	bf00      	nop
 801f4e8:	20000038 	.word	0x20000038

0801f4ec <__sflush_r>:
 801f4ec:	898b      	ldrh	r3, [r1, #12]
 801f4ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4f6:	4605      	mov	r5, r0
 801f4f8:	0718      	lsls	r0, r3, #28
 801f4fa:	460c      	mov	r4, r1
 801f4fc:	d45f      	bmi.n	801f5be <__sflush_r+0xd2>
 801f4fe:	684b      	ldr	r3, [r1, #4]
 801f500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f504:	2b00      	cmp	r3, #0
 801f506:	818a      	strh	r2, [r1, #12]
 801f508:	dc05      	bgt.n	801f516 <__sflush_r+0x2a>
 801f50a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	dc02      	bgt.n	801f516 <__sflush_r+0x2a>
 801f510:	2000      	movs	r0, #0
 801f512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f518:	2e00      	cmp	r6, #0
 801f51a:	d0f9      	beq.n	801f510 <__sflush_r+0x24>
 801f51c:	2300      	movs	r3, #0
 801f51e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f522:	682f      	ldr	r7, [r5, #0]
 801f524:	602b      	str	r3, [r5, #0]
 801f526:	d036      	beq.n	801f596 <__sflush_r+0xaa>
 801f528:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f52a:	89a3      	ldrh	r3, [r4, #12]
 801f52c:	075a      	lsls	r2, r3, #29
 801f52e:	d505      	bpl.n	801f53c <__sflush_r+0x50>
 801f530:	6863      	ldr	r3, [r4, #4]
 801f532:	1ac0      	subs	r0, r0, r3
 801f534:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f536:	b10b      	cbz	r3, 801f53c <__sflush_r+0x50>
 801f538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f53a:	1ac0      	subs	r0, r0, r3
 801f53c:	2300      	movs	r3, #0
 801f53e:	4602      	mov	r2, r0
 801f540:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f542:	69e1      	ldr	r1, [r4, #28]
 801f544:	4628      	mov	r0, r5
 801f546:	47b0      	blx	r6
 801f548:	1c43      	adds	r3, r0, #1
 801f54a:	89a3      	ldrh	r3, [r4, #12]
 801f54c:	d106      	bne.n	801f55c <__sflush_r+0x70>
 801f54e:	6829      	ldr	r1, [r5, #0]
 801f550:	291d      	cmp	r1, #29
 801f552:	d830      	bhi.n	801f5b6 <__sflush_r+0xca>
 801f554:	4a2b      	ldr	r2, [pc, #172]	; (801f604 <__sflush_r+0x118>)
 801f556:	40ca      	lsrs	r2, r1
 801f558:	07d6      	lsls	r6, r2, #31
 801f55a:	d52c      	bpl.n	801f5b6 <__sflush_r+0xca>
 801f55c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f560:	b21b      	sxth	r3, r3
 801f562:	2200      	movs	r2, #0
 801f564:	6062      	str	r2, [r4, #4]
 801f566:	04d9      	lsls	r1, r3, #19
 801f568:	6922      	ldr	r2, [r4, #16]
 801f56a:	81a3      	strh	r3, [r4, #12]
 801f56c:	6022      	str	r2, [r4, #0]
 801f56e:	d504      	bpl.n	801f57a <__sflush_r+0x8e>
 801f570:	1c42      	adds	r2, r0, #1
 801f572:	d101      	bne.n	801f578 <__sflush_r+0x8c>
 801f574:	682b      	ldr	r3, [r5, #0]
 801f576:	b903      	cbnz	r3, 801f57a <__sflush_r+0x8e>
 801f578:	6520      	str	r0, [r4, #80]	; 0x50
 801f57a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f57c:	602f      	str	r7, [r5, #0]
 801f57e:	2900      	cmp	r1, #0
 801f580:	d0c6      	beq.n	801f510 <__sflush_r+0x24>
 801f582:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801f586:	4299      	cmp	r1, r3
 801f588:	d002      	beq.n	801f590 <__sflush_r+0xa4>
 801f58a:	4628      	mov	r0, r5
 801f58c:	f000 f938 	bl	801f800 <_free_r>
 801f590:	2000      	movs	r0, #0
 801f592:	6320      	str	r0, [r4, #48]	; 0x30
 801f594:	e7bd      	b.n	801f512 <__sflush_r+0x26>
 801f596:	69e1      	ldr	r1, [r4, #28]
 801f598:	2301      	movs	r3, #1
 801f59a:	4628      	mov	r0, r5
 801f59c:	47b0      	blx	r6
 801f59e:	1c41      	adds	r1, r0, #1
 801f5a0:	d1c3      	bne.n	801f52a <__sflush_r+0x3e>
 801f5a2:	682b      	ldr	r3, [r5, #0]
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	d0c0      	beq.n	801f52a <__sflush_r+0x3e>
 801f5a8:	2b1d      	cmp	r3, #29
 801f5aa:	d001      	beq.n	801f5b0 <__sflush_r+0xc4>
 801f5ac:	2b16      	cmp	r3, #22
 801f5ae:	d101      	bne.n	801f5b4 <__sflush_r+0xc8>
 801f5b0:	602f      	str	r7, [r5, #0]
 801f5b2:	e7ad      	b.n	801f510 <__sflush_r+0x24>
 801f5b4:	89a3      	ldrh	r3, [r4, #12]
 801f5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f5ba:	81a3      	strh	r3, [r4, #12]
 801f5bc:	e7a9      	b.n	801f512 <__sflush_r+0x26>
 801f5be:	690f      	ldr	r7, [r1, #16]
 801f5c0:	2f00      	cmp	r7, #0
 801f5c2:	d0a5      	beq.n	801f510 <__sflush_r+0x24>
 801f5c4:	079b      	lsls	r3, r3, #30
 801f5c6:	680e      	ldr	r6, [r1, #0]
 801f5c8:	bf08      	it	eq
 801f5ca:	694b      	ldreq	r3, [r1, #20]
 801f5cc:	600f      	str	r7, [r1, #0]
 801f5ce:	bf18      	it	ne
 801f5d0:	2300      	movne	r3, #0
 801f5d2:	eba6 0807 	sub.w	r8, r6, r7
 801f5d6:	608b      	str	r3, [r1, #8]
 801f5d8:	f1b8 0f00 	cmp.w	r8, #0
 801f5dc:	dd98      	ble.n	801f510 <__sflush_r+0x24>
 801f5de:	69e1      	ldr	r1, [r4, #28]
 801f5e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f5e2:	4643      	mov	r3, r8
 801f5e4:	463a      	mov	r2, r7
 801f5e6:	4628      	mov	r0, r5
 801f5e8:	47b0      	blx	r6
 801f5ea:	2800      	cmp	r0, #0
 801f5ec:	dc06      	bgt.n	801f5fc <__sflush_r+0x110>
 801f5ee:	89a3      	ldrh	r3, [r4, #12]
 801f5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f5f4:	81a3      	strh	r3, [r4, #12]
 801f5f6:	f04f 30ff 	mov.w	r0, #4294967295
 801f5fa:	e78a      	b.n	801f512 <__sflush_r+0x26>
 801f5fc:	4407      	add	r7, r0
 801f5fe:	eba8 0800 	sub.w	r8, r8, r0
 801f602:	e7e9      	b.n	801f5d8 <__sflush_r+0xec>
 801f604:	20400001 	.word	0x20400001

0801f608 <_fflush_r>:
 801f608:	b538      	push	{r3, r4, r5, lr}
 801f60a:	460c      	mov	r4, r1
 801f60c:	4605      	mov	r5, r0
 801f60e:	b118      	cbz	r0, 801f618 <_fflush_r+0x10>
 801f610:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801f612:	b90b      	cbnz	r3, 801f618 <_fflush_r+0x10>
 801f614:	f000 f864 	bl	801f6e0 <__sinit>
 801f618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f61c:	b1bb      	cbz	r3, 801f64e <_fflush_r+0x46>
 801f61e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f620:	07d0      	lsls	r0, r2, #31
 801f622:	d404      	bmi.n	801f62e <_fflush_r+0x26>
 801f624:	0599      	lsls	r1, r3, #22
 801f626:	d402      	bmi.n	801f62e <_fflush_r+0x26>
 801f628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f62a:	f000 fac6 	bl	801fbba <__retarget_lock_acquire_recursive>
 801f62e:	4628      	mov	r0, r5
 801f630:	4621      	mov	r1, r4
 801f632:	f7ff ff5b 	bl	801f4ec <__sflush_r>
 801f636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f638:	07da      	lsls	r2, r3, #31
 801f63a:	4605      	mov	r5, r0
 801f63c:	d405      	bmi.n	801f64a <_fflush_r+0x42>
 801f63e:	89a3      	ldrh	r3, [r4, #12]
 801f640:	059b      	lsls	r3, r3, #22
 801f642:	d402      	bmi.n	801f64a <_fflush_r+0x42>
 801f644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f646:	f000 faba 	bl	801fbbe <__retarget_lock_release_recursive>
 801f64a:	4628      	mov	r0, r5
 801f64c:	bd38      	pop	{r3, r4, r5, pc}
 801f64e:	461d      	mov	r5, r3
 801f650:	e7fb      	b.n	801f64a <_fflush_r+0x42>
	...

0801f654 <std>:
 801f654:	2300      	movs	r3, #0
 801f656:	b510      	push	{r4, lr}
 801f658:	4604      	mov	r4, r0
 801f65a:	e9c0 3300 	strd	r3, r3, [r0]
 801f65e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f662:	6083      	str	r3, [r0, #8]
 801f664:	8181      	strh	r1, [r0, #12]
 801f666:	6643      	str	r3, [r0, #100]	; 0x64
 801f668:	81c2      	strh	r2, [r0, #14]
 801f66a:	6183      	str	r3, [r0, #24]
 801f66c:	4619      	mov	r1, r3
 801f66e:	2208      	movs	r2, #8
 801f670:	305c      	adds	r0, #92	; 0x5c
 801f672:	f7fb fdfb 	bl	801b26c <memset>
 801f676:	4b07      	ldr	r3, [pc, #28]	; (801f694 <std+0x40>)
 801f678:	6223      	str	r3, [r4, #32]
 801f67a:	4b07      	ldr	r3, [pc, #28]	; (801f698 <std+0x44>)
 801f67c:	6263      	str	r3, [r4, #36]	; 0x24
 801f67e:	4b07      	ldr	r3, [pc, #28]	; (801f69c <std+0x48>)
 801f680:	62a3      	str	r3, [r4, #40]	; 0x28
 801f682:	4b07      	ldr	r3, [pc, #28]	; (801f6a0 <std+0x4c>)
 801f684:	61e4      	str	r4, [r4, #28]
 801f686:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f688:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f690:	f000 ba90 	b.w	801fbb4 <__retarget_lock_init_recursive>
 801f694:	0802089d 	.word	0x0802089d
 801f698:	080208c3 	.word	0x080208c3
 801f69c:	080208fb 	.word	0x080208fb
 801f6a0:	0802091f 	.word	0x0802091f

0801f6a4 <_cleanup_r>:
 801f6a4:	4901      	ldr	r1, [pc, #4]	; (801f6ac <_cleanup_r+0x8>)
 801f6a6:	f000 b96b 	b.w	801f980 <_fwalk_reent>
 801f6aa:	bf00      	nop
 801f6ac:	080227a5 	.word	0x080227a5

0801f6b0 <__sfp_lock_acquire>:
 801f6b0:	4801      	ldr	r0, [pc, #4]	; (801f6b8 <__sfp_lock_acquire+0x8>)
 801f6b2:	f000 ba82 	b.w	801fbba <__retarget_lock_acquire_recursive>
 801f6b6:	bf00      	nop
 801f6b8:	2000be6c 	.word	0x2000be6c

0801f6bc <__sfp_lock_release>:
 801f6bc:	4801      	ldr	r0, [pc, #4]	; (801f6c4 <__sfp_lock_release+0x8>)
 801f6be:	f000 ba7e 	b.w	801fbbe <__retarget_lock_release_recursive>
 801f6c2:	bf00      	nop
 801f6c4:	2000be6c 	.word	0x2000be6c

0801f6c8 <__sinit_lock_acquire>:
 801f6c8:	4801      	ldr	r0, [pc, #4]	; (801f6d0 <__sinit_lock_acquire+0x8>)
 801f6ca:	f000 ba76 	b.w	801fbba <__retarget_lock_acquire_recursive>
 801f6ce:	bf00      	nop
 801f6d0:	2000be67 	.word	0x2000be67

0801f6d4 <__sinit_lock_release>:
 801f6d4:	4801      	ldr	r0, [pc, #4]	; (801f6dc <__sinit_lock_release+0x8>)
 801f6d6:	f000 ba72 	b.w	801fbbe <__retarget_lock_release_recursive>
 801f6da:	bf00      	nop
 801f6dc:	2000be67 	.word	0x2000be67

0801f6e0 <__sinit>:
 801f6e0:	b510      	push	{r4, lr}
 801f6e2:	4604      	mov	r4, r0
 801f6e4:	f7ff fff0 	bl	801f6c8 <__sinit_lock_acquire>
 801f6e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801f6ea:	b11a      	cbz	r2, 801f6f4 <__sinit+0x14>
 801f6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f6f0:	f7ff bff0 	b.w	801f6d4 <__sinit_lock_release>
 801f6f4:	4b0d      	ldr	r3, [pc, #52]	; (801f72c <__sinit+0x4c>)
 801f6f6:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f6f8:	2303      	movs	r3, #3
 801f6fa:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801f6fe:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801f702:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801f706:	6860      	ldr	r0, [r4, #4]
 801f708:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801f70c:	2104      	movs	r1, #4
 801f70e:	f7ff ffa1 	bl	801f654 <std>
 801f712:	68a0      	ldr	r0, [r4, #8]
 801f714:	2201      	movs	r2, #1
 801f716:	2109      	movs	r1, #9
 801f718:	f7ff ff9c 	bl	801f654 <std>
 801f71c:	68e0      	ldr	r0, [r4, #12]
 801f71e:	2202      	movs	r2, #2
 801f720:	2112      	movs	r1, #18
 801f722:	f7ff ff97 	bl	801f654 <std>
 801f726:	2301      	movs	r3, #1
 801f728:	63a3      	str	r3, [r4, #56]	; 0x38
 801f72a:	e7df      	b.n	801f6ec <__sinit+0xc>
 801f72c:	0801f6a5 	.word	0x0801f6a5

0801f730 <__libc_fini_array>:
 801f730:	b538      	push	{r3, r4, r5, lr}
 801f732:	4d07      	ldr	r5, [pc, #28]	; (801f750 <__libc_fini_array+0x20>)
 801f734:	4c07      	ldr	r4, [pc, #28]	; (801f754 <__libc_fini_array+0x24>)
 801f736:	1b64      	subs	r4, r4, r5
 801f738:	10a4      	asrs	r4, r4, #2
 801f73a:	b91c      	cbnz	r4, 801f744 <__libc_fini_array+0x14>
 801f73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f740:	f004 be66 	b.w	8024410 <_fini>
 801f744:	3c01      	subs	r4, #1
 801f746:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801f74a:	4798      	blx	r3
 801f74c:	e7f5      	b.n	801f73a <__libc_fini_array+0xa>
 801f74e:	bf00      	nop
 801f750:	08029c20 	.word	0x08029c20
 801f754:	08029c24 	.word	0x08029c24

0801f758 <_malloc_trim_r>:
 801f758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f75c:	4606      	mov	r6, r0
 801f75e:	2008      	movs	r0, #8
 801f760:	460c      	mov	r4, r1
 801f762:	f002 fa23 	bl	8021bac <sysconf>
 801f766:	4f23      	ldr	r7, [pc, #140]	; (801f7f4 <_malloc_trim_r+0x9c>)
 801f768:	4680      	mov	r8, r0
 801f76a:	4630      	mov	r0, r6
 801f76c:	f000 fce6 	bl	802013c <__malloc_lock>
 801f770:	68bb      	ldr	r3, [r7, #8]
 801f772:	685d      	ldr	r5, [r3, #4]
 801f774:	f025 0503 	bic.w	r5, r5, #3
 801f778:	1b2c      	subs	r4, r5, r4
 801f77a:	3c11      	subs	r4, #17
 801f77c:	4444      	add	r4, r8
 801f77e:	fbb4 f4f8 	udiv	r4, r4, r8
 801f782:	3c01      	subs	r4, #1
 801f784:	fb08 f404 	mul.w	r4, r8, r4
 801f788:	45a0      	cmp	r8, r4
 801f78a:	dd05      	ble.n	801f798 <_malloc_trim_r+0x40>
 801f78c:	4630      	mov	r0, r6
 801f78e:	f000 fcdb 	bl	8020148 <__malloc_unlock>
 801f792:	2000      	movs	r0, #0
 801f794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f798:	2100      	movs	r1, #0
 801f79a:	4630      	mov	r0, r6
 801f79c:	f001 f842 	bl	8020824 <_sbrk_r>
 801f7a0:	68bb      	ldr	r3, [r7, #8]
 801f7a2:	442b      	add	r3, r5
 801f7a4:	4298      	cmp	r0, r3
 801f7a6:	d1f1      	bne.n	801f78c <_malloc_trim_r+0x34>
 801f7a8:	4261      	negs	r1, r4
 801f7aa:	4630      	mov	r0, r6
 801f7ac:	f001 f83a 	bl	8020824 <_sbrk_r>
 801f7b0:	3001      	adds	r0, #1
 801f7b2:	d110      	bne.n	801f7d6 <_malloc_trim_r+0x7e>
 801f7b4:	2100      	movs	r1, #0
 801f7b6:	4630      	mov	r0, r6
 801f7b8:	f001 f834 	bl	8020824 <_sbrk_r>
 801f7bc:	68ba      	ldr	r2, [r7, #8]
 801f7be:	1a83      	subs	r3, r0, r2
 801f7c0:	2b0f      	cmp	r3, #15
 801f7c2:	dde3      	ble.n	801f78c <_malloc_trim_r+0x34>
 801f7c4:	490c      	ldr	r1, [pc, #48]	; (801f7f8 <_malloc_trim_r+0xa0>)
 801f7c6:	6809      	ldr	r1, [r1, #0]
 801f7c8:	1a40      	subs	r0, r0, r1
 801f7ca:	490c      	ldr	r1, [pc, #48]	; (801f7fc <_malloc_trim_r+0xa4>)
 801f7cc:	f043 0301 	orr.w	r3, r3, #1
 801f7d0:	6008      	str	r0, [r1, #0]
 801f7d2:	6053      	str	r3, [r2, #4]
 801f7d4:	e7da      	b.n	801f78c <_malloc_trim_r+0x34>
 801f7d6:	68bb      	ldr	r3, [r7, #8]
 801f7d8:	4a08      	ldr	r2, [pc, #32]	; (801f7fc <_malloc_trim_r+0xa4>)
 801f7da:	1b2d      	subs	r5, r5, r4
 801f7dc:	f045 0501 	orr.w	r5, r5, #1
 801f7e0:	605d      	str	r5, [r3, #4]
 801f7e2:	6813      	ldr	r3, [r2, #0]
 801f7e4:	4630      	mov	r0, r6
 801f7e6:	1b1c      	subs	r4, r3, r4
 801f7e8:	6014      	str	r4, [r2, #0]
 801f7ea:	f000 fcad 	bl	8020148 <__malloc_unlock>
 801f7ee:	2001      	movs	r0, #1
 801f7f0:	e7d0      	b.n	801f794 <_malloc_trim_r+0x3c>
 801f7f2:	bf00      	nop
 801f7f4:	200004d0 	.word	0x200004d0
 801f7f8:	200008d8 	.word	0x200008d8
 801f7fc:	20005064 	.word	0x20005064

0801f800 <_free_r>:
 801f800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f802:	4605      	mov	r5, r0
 801f804:	460f      	mov	r7, r1
 801f806:	2900      	cmp	r1, #0
 801f808:	f000 80b1 	beq.w	801f96e <_free_r+0x16e>
 801f80c:	f000 fc96 	bl	802013c <__malloc_lock>
 801f810:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801f814:	4856      	ldr	r0, [pc, #344]	; (801f970 <_free_r+0x170>)
 801f816:	f022 0401 	bic.w	r4, r2, #1
 801f81a:	f1a7 0308 	sub.w	r3, r7, #8
 801f81e:	eb03 0c04 	add.w	ip, r3, r4
 801f822:	6881      	ldr	r1, [r0, #8]
 801f824:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801f828:	4561      	cmp	r1, ip
 801f82a:	f026 0603 	bic.w	r6, r6, #3
 801f82e:	f002 0201 	and.w	r2, r2, #1
 801f832:	d11b      	bne.n	801f86c <_free_r+0x6c>
 801f834:	4434      	add	r4, r6
 801f836:	b93a      	cbnz	r2, 801f848 <_free_r+0x48>
 801f838:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801f83c:	1a9b      	subs	r3, r3, r2
 801f83e:	4414      	add	r4, r2
 801f840:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801f844:	60ca      	str	r2, [r1, #12]
 801f846:	6091      	str	r1, [r2, #8]
 801f848:	f044 0201 	orr.w	r2, r4, #1
 801f84c:	605a      	str	r2, [r3, #4]
 801f84e:	6083      	str	r3, [r0, #8]
 801f850:	4b48      	ldr	r3, [pc, #288]	; (801f974 <_free_r+0x174>)
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	42a3      	cmp	r3, r4
 801f856:	d804      	bhi.n	801f862 <_free_r+0x62>
 801f858:	4b47      	ldr	r3, [pc, #284]	; (801f978 <_free_r+0x178>)
 801f85a:	4628      	mov	r0, r5
 801f85c:	6819      	ldr	r1, [r3, #0]
 801f85e:	f7ff ff7b 	bl	801f758 <_malloc_trim_r>
 801f862:	4628      	mov	r0, r5
 801f864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f868:	f000 bc6e 	b.w	8020148 <__malloc_unlock>
 801f86c:	f8cc 6004 	str.w	r6, [ip, #4]
 801f870:	2a00      	cmp	r2, #0
 801f872:	d138      	bne.n	801f8e6 <_free_r+0xe6>
 801f874:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801f878:	1a5b      	subs	r3, r3, r1
 801f87a:	440c      	add	r4, r1
 801f87c:	6899      	ldr	r1, [r3, #8]
 801f87e:	f100 0708 	add.w	r7, r0, #8
 801f882:	42b9      	cmp	r1, r7
 801f884:	d031      	beq.n	801f8ea <_free_r+0xea>
 801f886:	68df      	ldr	r7, [r3, #12]
 801f888:	60cf      	str	r7, [r1, #12]
 801f88a:	60b9      	str	r1, [r7, #8]
 801f88c:	eb0c 0106 	add.w	r1, ip, r6
 801f890:	6849      	ldr	r1, [r1, #4]
 801f892:	07c9      	lsls	r1, r1, #31
 801f894:	d40b      	bmi.n	801f8ae <_free_r+0xae>
 801f896:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801f89a:	4434      	add	r4, r6
 801f89c:	bb3a      	cbnz	r2, 801f8ee <_free_r+0xee>
 801f89e:	4e37      	ldr	r6, [pc, #220]	; (801f97c <_free_r+0x17c>)
 801f8a0:	42b1      	cmp	r1, r6
 801f8a2:	d124      	bne.n	801f8ee <_free_r+0xee>
 801f8a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f8a8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801f8ac:	2201      	movs	r2, #1
 801f8ae:	f044 0101 	orr.w	r1, r4, #1
 801f8b2:	6059      	str	r1, [r3, #4]
 801f8b4:	511c      	str	r4, [r3, r4]
 801f8b6:	2a00      	cmp	r2, #0
 801f8b8:	d1d3      	bne.n	801f862 <_free_r+0x62>
 801f8ba:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801f8be:	d21b      	bcs.n	801f8f8 <_free_r+0xf8>
 801f8c0:	0961      	lsrs	r1, r4, #5
 801f8c2:	08e2      	lsrs	r2, r4, #3
 801f8c4:	2401      	movs	r4, #1
 801f8c6:	408c      	lsls	r4, r1
 801f8c8:	6841      	ldr	r1, [r0, #4]
 801f8ca:	3201      	adds	r2, #1
 801f8cc:	430c      	orrs	r4, r1
 801f8ce:	6044      	str	r4, [r0, #4]
 801f8d0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801f8d4:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801f8d8:	3908      	subs	r1, #8
 801f8da:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801f8de:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801f8e2:	60e3      	str	r3, [r4, #12]
 801f8e4:	e7bd      	b.n	801f862 <_free_r+0x62>
 801f8e6:	2200      	movs	r2, #0
 801f8e8:	e7d0      	b.n	801f88c <_free_r+0x8c>
 801f8ea:	2201      	movs	r2, #1
 801f8ec:	e7ce      	b.n	801f88c <_free_r+0x8c>
 801f8ee:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801f8f2:	60ce      	str	r6, [r1, #12]
 801f8f4:	60b1      	str	r1, [r6, #8]
 801f8f6:	e7da      	b.n	801f8ae <_free_r+0xae>
 801f8f8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801f8fc:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801f900:	d214      	bcs.n	801f92c <_free_r+0x12c>
 801f902:	09a2      	lsrs	r2, r4, #6
 801f904:	3238      	adds	r2, #56	; 0x38
 801f906:	1c51      	adds	r1, r2, #1
 801f908:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801f90c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801f910:	428e      	cmp	r6, r1
 801f912:	d125      	bne.n	801f960 <_free_r+0x160>
 801f914:	2401      	movs	r4, #1
 801f916:	1092      	asrs	r2, r2, #2
 801f918:	fa04 f202 	lsl.w	r2, r4, r2
 801f91c:	6844      	ldr	r4, [r0, #4]
 801f91e:	4322      	orrs	r2, r4
 801f920:	6042      	str	r2, [r0, #4]
 801f922:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801f926:	60b3      	str	r3, [r6, #8]
 801f928:	60cb      	str	r3, [r1, #12]
 801f92a:	e79a      	b.n	801f862 <_free_r+0x62>
 801f92c:	2a14      	cmp	r2, #20
 801f92e:	d801      	bhi.n	801f934 <_free_r+0x134>
 801f930:	325b      	adds	r2, #91	; 0x5b
 801f932:	e7e8      	b.n	801f906 <_free_r+0x106>
 801f934:	2a54      	cmp	r2, #84	; 0x54
 801f936:	d802      	bhi.n	801f93e <_free_r+0x13e>
 801f938:	0b22      	lsrs	r2, r4, #12
 801f93a:	326e      	adds	r2, #110	; 0x6e
 801f93c:	e7e3      	b.n	801f906 <_free_r+0x106>
 801f93e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801f942:	d802      	bhi.n	801f94a <_free_r+0x14a>
 801f944:	0be2      	lsrs	r2, r4, #15
 801f946:	3277      	adds	r2, #119	; 0x77
 801f948:	e7dd      	b.n	801f906 <_free_r+0x106>
 801f94a:	f240 5154 	movw	r1, #1364	; 0x554
 801f94e:	428a      	cmp	r2, r1
 801f950:	bf9a      	itte	ls
 801f952:	0ca2      	lsrls	r2, r4, #18
 801f954:	327c      	addls	r2, #124	; 0x7c
 801f956:	227e      	movhi	r2, #126	; 0x7e
 801f958:	e7d5      	b.n	801f906 <_free_r+0x106>
 801f95a:	6889      	ldr	r1, [r1, #8]
 801f95c:	428e      	cmp	r6, r1
 801f95e:	d004      	beq.n	801f96a <_free_r+0x16a>
 801f960:	684a      	ldr	r2, [r1, #4]
 801f962:	f022 0203 	bic.w	r2, r2, #3
 801f966:	42a2      	cmp	r2, r4
 801f968:	d8f7      	bhi.n	801f95a <_free_r+0x15a>
 801f96a:	68ce      	ldr	r6, [r1, #12]
 801f96c:	e7d9      	b.n	801f922 <_free_r+0x122>
 801f96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f970:	200004d0 	.word	0x200004d0
 801f974:	200008dc 	.word	0x200008dc
 801f978:	20005094 	.word	0x20005094
 801f97c:	200004d8 	.word	0x200004d8

0801f980 <_fwalk_reent>:
 801f980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f984:	4606      	mov	r6, r0
 801f986:	4688      	mov	r8, r1
 801f988:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801f98c:	2700      	movs	r7, #0
 801f98e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f992:	f1b9 0901 	subs.w	r9, r9, #1
 801f996:	d505      	bpl.n	801f9a4 <_fwalk_reent+0x24>
 801f998:	6824      	ldr	r4, [r4, #0]
 801f99a:	2c00      	cmp	r4, #0
 801f99c:	d1f7      	bne.n	801f98e <_fwalk_reent+0xe>
 801f99e:	4638      	mov	r0, r7
 801f9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9a4:	89ab      	ldrh	r3, [r5, #12]
 801f9a6:	2b01      	cmp	r3, #1
 801f9a8:	d907      	bls.n	801f9ba <_fwalk_reent+0x3a>
 801f9aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f9ae:	3301      	adds	r3, #1
 801f9b0:	d003      	beq.n	801f9ba <_fwalk_reent+0x3a>
 801f9b2:	4629      	mov	r1, r5
 801f9b4:	4630      	mov	r0, r6
 801f9b6:	47c0      	blx	r8
 801f9b8:	4307      	orrs	r7, r0
 801f9ba:	3568      	adds	r5, #104	; 0x68
 801f9bc:	e7e9      	b.n	801f992 <_fwalk_reent+0x12>
	...

0801f9c0 <_findenv_r>:
 801f9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9c4:	4607      	mov	r7, r0
 801f9c6:	4689      	mov	r9, r1
 801f9c8:	4616      	mov	r6, r2
 801f9ca:	f002 fedf 	bl	802278c <__env_lock>
 801f9ce:	4b18      	ldr	r3, [pc, #96]	; (801fa30 <_findenv_r+0x70>)
 801f9d0:	681c      	ldr	r4, [r3, #0]
 801f9d2:	469a      	mov	sl, r3
 801f9d4:	b134      	cbz	r4, 801f9e4 <_findenv_r+0x24>
 801f9d6:	464b      	mov	r3, r9
 801f9d8:	4698      	mov	r8, r3
 801f9da:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f9de:	b139      	cbz	r1, 801f9f0 <_findenv_r+0x30>
 801f9e0:	293d      	cmp	r1, #61	; 0x3d
 801f9e2:	d1f9      	bne.n	801f9d8 <_findenv_r+0x18>
 801f9e4:	4638      	mov	r0, r7
 801f9e6:	f002 fed7 	bl	8022798 <__env_unlock>
 801f9ea:	2000      	movs	r0, #0
 801f9ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9f0:	eba8 0809 	sub.w	r8, r8, r9
 801f9f4:	46a3      	mov	fp, r4
 801f9f6:	f854 0b04 	ldr.w	r0, [r4], #4
 801f9fa:	2800      	cmp	r0, #0
 801f9fc:	d0f2      	beq.n	801f9e4 <_findenv_r+0x24>
 801f9fe:	4642      	mov	r2, r8
 801fa00:	4649      	mov	r1, r9
 801fa02:	f7fb ff4a 	bl	801b89a <strncmp>
 801fa06:	2800      	cmp	r0, #0
 801fa08:	d1f4      	bne.n	801f9f4 <_findenv_r+0x34>
 801fa0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801fa0e:	eb03 0508 	add.w	r5, r3, r8
 801fa12:	f813 3008 	ldrb.w	r3, [r3, r8]
 801fa16:	2b3d      	cmp	r3, #61	; 0x3d
 801fa18:	d1ec      	bne.n	801f9f4 <_findenv_r+0x34>
 801fa1a:	f8da 3000 	ldr.w	r3, [sl]
 801fa1e:	ebab 0303 	sub.w	r3, fp, r3
 801fa22:	109b      	asrs	r3, r3, #2
 801fa24:	4638      	mov	r0, r7
 801fa26:	6033      	str	r3, [r6, #0]
 801fa28:	f002 feb6 	bl	8022798 <__env_unlock>
 801fa2c:	1c68      	adds	r0, r5, #1
 801fa2e:	e7dd      	b.n	801f9ec <_findenv_r+0x2c>
 801fa30:	20000018 	.word	0x20000018

0801fa34 <_getenv_r>:
 801fa34:	b507      	push	{r0, r1, r2, lr}
 801fa36:	aa01      	add	r2, sp, #4
 801fa38:	f7ff ffc2 	bl	801f9c0 <_findenv_r>
 801fa3c:	b003      	add	sp, #12
 801fa3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801fa44 <__gettzinfo>:
 801fa44:	4800      	ldr	r0, [pc, #0]	; (801fa48 <__gettzinfo+0x4>)
 801fa46:	4770      	bx	lr
 801fa48:	20000478 	.word	0x20000478

0801fa4c <gmtime_r>:
 801fa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa50:	e9d0 6700 	ldrd	r6, r7, [r0]
 801fa54:	460c      	mov	r4, r1
 801fa56:	4a51      	ldr	r2, [pc, #324]	; (801fb9c <gmtime_r+0x150>)
 801fa58:	2300      	movs	r3, #0
 801fa5a:	4630      	mov	r0, r6
 801fa5c:	4639      	mov	r1, r7
 801fa5e:	f7e1 f8d3 	bl	8000c08 <__aeabi_ldivmod>
 801fa62:	4639      	mov	r1, r7
 801fa64:	4605      	mov	r5, r0
 801fa66:	4a4d      	ldr	r2, [pc, #308]	; (801fb9c <gmtime_r+0x150>)
 801fa68:	4630      	mov	r0, r6
 801fa6a:	2300      	movs	r3, #0
 801fa6c:	f7e1 f8cc 	bl	8000c08 <__aeabi_ldivmod>
 801fa70:	2a00      	cmp	r2, #0
 801fa72:	bfbc      	itt	lt
 801fa74:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801fa78:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801fa7c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fa80:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801fa84:	fbb2 f3f1 	udiv	r3, r2, r1
 801fa88:	fb01 2213 	mls	r2, r1, r3, r2
 801fa8c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801fa90:	bfac      	ite	ge
 801fa92:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801fa96:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801fa9a:	60a3      	str	r3, [r4, #8]
 801fa9c:	fbb2 f3f1 	udiv	r3, r2, r1
 801faa0:	fb01 2213 	mls	r2, r1, r3, r2
 801faa4:	6063      	str	r3, [r4, #4]
 801faa6:	6022      	str	r2, [r4, #0]
 801faa8:	1cc3      	adds	r3, r0, #3
 801faaa:	2207      	movs	r2, #7
 801faac:	fb93 f2f2 	sdiv	r2, r3, r2
 801fab0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801fab4:	1a9b      	subs	r3, r3, r2
 801fab6:	bf48      	it	mi
 801fab8:	3307      	addmi	r3, #7
 801faba:	2800      	cmp	r0, #0
 801fabc:	61a3      	str	r3, [r4, #24]
 801fabe:	bfb8      	it	lt
 801fac0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801fac4:	4936      	ldr	r1, [pc, #216]	; (801fba0 <gmtime_r+0x154>)
 801fac6:	bfae      	itee	ge
 801fac8:	fb90 f1f1 	sdivge	r1, r0, r1
 801facc:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801fad0:	fb93 f1f1 	sdivlt	r1, r3, r1
 801fad4:	4b33      	ldr	r3, [pc, #204]	; (801fba4 <gmtime_r+0x158>)
 801fad6:	fb03 0001 	mla	r0, r3, r1, r0
 801fada:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801fade:	fbb0 f2f2 	udiv	r2, r0, r2
 801fae2:	4402      	add	r2, r0
 801fae4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801fae8:	fbb0 f3fc 	udiv	r3, r0, ip
 801faec:	1ad2      	subs	r2, r2, r3
 801faee:	f240 176d 	movw	r7, #365	; 0x16d
 801faf2:	4b2d      	ldr	r3, [pc, #180]	; (801fba8 <gmtime_r+0x15c>)
 801faf4:	fbb0 f3f3 	udiv	r3, r0, r3
 801faf8:	2664      	movs	r6, #100	; 0x64
 801fafa:	1ad3      	subs	r3, r2, r3
 801fafc:	fbb3 f5f7 	udiv	r5, r3, r7
 801fb00:	fbb3 f3fc 	udiv	r3, r3, ip
 801fb04:	fbb5 f2f6 	udiv	r2, r5, r6
 801fb08:	1ad3      	subs	r3, r2, r3
 801fb0a:	4403      	add	r3, r0
 801fb0c:	fb07 3315 	mls	r3, r7, r5, r3
 801fb10:	2099      	movs	r0, #153	; 0x99
 801fb12:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801fb16:	f10c 0c02 	add.w	ip, ip, #2
 801fb1a:	f103 0e01 	add.w	lr, r3, #1
 801fb1e:	fbbc f7f0 	udiv	r7, ip, r0
 801fb22:	4378      	muls	r0, r7
 801fb24:	3002      	adds	r0, #2
 801fb26:	f04f 0805 	mov.w	r8, #5
 801fb2a:	fbb0 f0f8 	udiv	r0, r0, r8
 801fb2e:	ebae 0000 	sub.w	r0, lr, r0
 801fb32:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801fb36:	45f4      	cmp	ip, lr
 801fb38:	bf94      	ite	ls
 801fb3a:	f04f 0c02 	movls.w	ip, #2
 801fb3e:	f06f 0c09 	mvnhi.w	ip, #9
 801fb42:	4467      	add	r7, ip
 801fb44:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801fb48:	fb0c 5101 	mla	r1, ip, r1, r5
 801fb4c:	2f01      	cmp	r7, #1
 801fb4e:	bf98      	it	ls
 801fb50:	3101      	addls	r1, #1
 801fb52:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801fb56:	d30c      	bcc.n	801fb72 <gmtime_r+0x126>
 801fb58:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801fb5c:	61e3      	str	r3, [r4, #28]
 801fb5e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801fb62:	2300      	movs	r3, #0
 801fb64:	60e0      	str	r0, [r4, #12]
 801fb66:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801fb6a:	6223      	str	r3, [r4, #32]
 801fb6c:	4620      	mov	r0, r4
 801fb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb72:	f015 0f03 	tst.w	r5, #3
 801fb76:	d102      	bne.n	801fb7e <gmtime_r+0x132>
 801fb78:	fb06 5212 	mls	r2, r6, r2, r5
 801fb7c:	b95a      	cbnz	r2, 801fb96 <gmtime_r+0x14a>
 801fb7e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801fb82:	fbb5 f2f6 	udiv	r2, r5, r6
 801fb86:	fb06 5212 	mls	r2, r6, r2, r5
 801fb8a:	fab2 f282 	clz	r2, r2
 801fb8e:	0952      	lsrs	r2, r2, #5
 801fb90:	333b      	adds	r3, #59	; 0x3b
 801fb92:	4413      	add	r3, r2
 801fb94:	e7e2      	b.n	801fb5c <gmtime_r+0x110>
 801fb96:	2201      	movs	r2, #1
 801fb98:	e7fa      	b.n	801fb90 <gmtime_r+0x144>
 801fb9a:	bf00      	nop
 801fb9c:	00015180 	.word	0x00015180
 801fba0:	00023ab1 	.word	0x00023ab1
 801fba4:	fffdc54f 	.word	0xfffdc54f
 801fba8:	00023ab0 	.word	0x00023ab0

0801fbac <_localeconv_r>:
 801fbac:	4800      	ldr	r0, [pc, #0]	; (801fbb0 <_localeconv_r+0x4>)
 801fbae:	4770      	bx	lr
 801fbb0:	200009d0 	.word	0x200009d0

0801fbb4 <__retarget_lock_init_recursive>:
 801fbb4:	4770      	bx	lr

0801fbb6 <__retarget_lock_close_recursive>:
 801fbb6:	4770      	bx	lr

0801fbb8 <__retarget_lock_acquire>:
 801fbb8:	4770      	bx	lr

0801fbba <__retarget_lock_acquire_recursive>:
 801fbba:	4770      	bx	lr

0801fbbc <__retarget_lock_release>:
 801fbbc:	4770      	bx	lr

0801fbbe <__retarget_lock_release_recursive>:
 801fbbe:	4770      	bx	lr

0801fbc0 <__swhatbuf_r>:
 801fbc0:	b570      	push	{r4, r5, r6, lr}
 801fbc2:	460e      	mov	r6, r1
 801fbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fbc8:	2900      	cmp	r1, #0
 801fbca:	b096      	sub	sp, #88	; 0x58
 801fbcc:	4614      	mov	r4, r2
 801fbce:	461d      	mov	r5, r3
 801fbd0:	da09      	bge.n	801fbe6 <__swhatbuf_r+0x26>
 801fbd2:	89b3      	ldrh	r3, [r6, #12]
 801fbd4:	2200      	movs	r2, #0
 801fbd6:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801fbda:	602a      	str	r2, [r5, #0]
 801fbdc:	d116      	bne.n	801fc0c <__swhatbuf_r+0x4c>
 801fbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fbe2:	6023      	str	r3, [r4, #0]
 801fbe4:	e015      	b.n	801fc12 <__swhatbuf_r+0x52>
 801fbe6:	466a      	mov	r2, sp
 801fbe8:	f002 feb2 	bl	8022950 <_fstat_r>
 801fbec:	2800      	cmp	r0, #0
 801fbee:	dbf0      	blt.n	801fbd2 <__swhatbuf_r+0x12>
 801fbf0:	9a01      	ldr	r2, [sp, #4]
 801fbf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fbf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fbfa:	425a      	negs	r2, r3
 801fbfc:	415a      	adcs	r2, r3
 801fbfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fc02:	602a      	str	r2, [r5, #0]
 801fc04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801fc08:	6023      	str	r3, [r4, #0]
 801fc0a:	e002      	b.n	801fc12 <__swhatbuf_r+0x52>
 801fc0c:	2340      	movs	r3, #64	; 0x40
 801fc0e:	6023      	str	r3, [r4, #0]
 801fc10:	4610      	mov	r0, r2
 801fc12:	b016      	add	sp, #88	; 0x58
 801fc14:	bd70      	pop	{r4, r5, r6, pc}
	...

0801fc18 <__smakebuf_r>:
 801fc18:	898b      	ldrh	r3, [r1, #12]
 801fc1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fc1c:	079d      	lsls	r5, r3, #30
 801fc1e:	4606      	mov	r6, r0
 801fc20:	460c      	mov	r4, r1
 801fc22:	d507      	bpl.n	801fc34 <__smakebuf_r+0x1c>
 801fc24:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801fc28:	6023      	str	r3, [r4, #0]
 801fc2a:	6123      	str	r3, [r4, #16]
 801fc2c:	2301      	movs	r3, #1
 801fc2e:	6163      	str	r3, [r4, #20]
 801fc30:	b002      	add	sp, #8
 801fc32:	bd70      	pop	{r4, r5, r6, pc}
 801fc34:	ab01      	add	r3, sp, #4
 801fc36:	466a      	mov	r2, sp
 801fc38:	f7ff ffc2 	bl	801fbc0 <__swhatbuf_r>
 801fc3c:	9900      	ldr	r1, [sp, #0]
 801fc3e:	4605      	mov	r5, r0
 801fc40:	4630      	mov	r0, r6
 801fc42:	f000 f839 	bl	801fcb8 <_malloc_r>
 801fc46:	b948      	cbnz	r0, 801fc5c <__smakebuf_r+0x44>
 801fc48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc4c:	059a      	lsls	r2, r3, #22
 801fc4e:	d4ef      	bmi.n	801fc30 <__smakebuf_r+0x18>
 801fc50:	f023 0303 	bic.w	r3, r3, #3
 801fc54:	f043 0302 	orr.w	r3, r3, #2
 801fc58:	81a3      	strh	r3, [r4, #12]
 801fc5a:	e7e3      	b.n	801fc24 <__smakebuf_r+0xc>
 801fc5c:	4b0d      	ldr	r3, [pc, #52]	; (801fc94 <__smakebuf_r+0x7c>)
 801fc5e:	63f3      	str	r3, [r6, #60]	; 0x3c
 801fc60:	89a3      	ldrh	r3, [r4, #12]
 801fc62:	6020      	str	r0, [r4, #0]
 801fc64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fc68:	81a3      	strh	r3, [r4, #12]
 801fc6a:	9b00      	ldr	r3, [sp, #0]
 801fc6c:	6163      	str	r3, [r4, #20]
 801fc6e:	9b01      	ldr	r3, [sp, #4]
 801fc70:	6120      	str	r0, [r4, #16]
 801fc72:	b15b      	cbz	r3, 801fc8c <__smakebuf_r+0x74>
 801fc74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fc78:	4630      	mov	r0, r6
 801fc7a:	f002 ffc5 	bl	8022c08 <_isatty_r>
 801fc7e:	b128      	cbz	r0, 801fc8c <__smakebuf_r+0x74>
 801fc80:	89a3      	ldrh	r3, [r4, #12]
 801fc82:	f023 0303 	bic.w	r3, r3, #3
 801fc86:	f043 0301 	orr.w	r3, r3, #1
 801fc8a:	81a3      	strh	r3, [r4, #12]
 801fc8c:	89a0      	ldrh	r0, [r4, #12]
 801fc8e:	4305      	orrs	r5, r0
 801fc90:	81a5      	strh	r5, [r4, #12]
 801fc92:	e7cd      	b.n	801fc30 <__smakebuf_r+0x18>
 801fc94:	0801f6a5 	.word	0x0801f6a5

0801fc98 <malloc>:
 801fc98:	4b02      	ldr	r3, [pc, #8]	; (801fca4 <malloc+0xc>)
 801fc9a:	4601      	mov	r1, r0
 801fc9c:	6818      	ldr	r0, [r3, #0]
 801fc9e:	f000 b80b 	b.w	801fcb8 <_malloc_r>
 801fca2:	bf00      	nop
 801fca4:	20000038 	.word	0x20000038

0801fca8 <free>:
 801fca8:	4b02      	ldr	r3, [pc, #8]	; (801fcb4 <free+0xc>)
 801fcaa:	4601      	mov	r1, r0
 801fcac:	6818      	ldr	r0, [r3, #0]
 801fcae:	f7ff bda7 	b.w	801f800 <_free_r>
 801fcb2:	bf00      	nop
 801fcb4:	20000038 	.word	0x20000038

0801fcb8 <_malloc_r>:
 801fcb8:	f101 030b 	add.w	r3, r1, #11
 801fcbc:	2b16      	cmp	r3, #22
 801fcbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcc2:	4605      	mov	r5, r0
 801fcc4:	d906      	bls.n	801fcd4 <_malloc_r+0x1c>
 801fcc6:	f033 0707 	bics.w	r7, r3, #7
 801fcca:	d504      	bpl.n	801fcd6 <_malloc_r+0x1e>
 801fccc:	230c      	movs	r3, #12
 801fcce:	602b      	str	r3, [r5, #0]
 801fcd0:	2400      	movs	r4, #0
 801fcd2:	e1ae      	b.n	8020032 <_malloc_r+0x37a>
 801fcd4:	2710      	movs	r7, #16
 801fcd6:	42b9      	cmp	r1, r7
 801fcd8:	d8f8      	bhi.n	801fccc <_malloc_r+0x14>
 801fcda:	4628      	mov	r0, r5
 801fcdc:	f000 fa2e 	bl	802013c <__malloc_lock>
 801fce0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801fce4:	4ec3      	ldr	r6, [pc, #780]	; (801fff4 <_malloc_r+0x33c>)
 801fce6:	d238      	bcs.n	801fd5a <_malloc_r+0xa2>
 801fce8:	f107 0208 	add.w	r2, r7, #8
 801fcec:	4432      	add	r2, r6
 801fcee:	f1a2 0108 	sub.w	r1, r2, #8
 801fcf2:	6854      	ldr	r4, [r2, #4]
 801fcf4:	428c      	cmp	r4, r1
 801fcf6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801fcfa:	d102      	bne.n	801fd02 <_malloc_r+0x4a>
 801fcfc:	68d4      	ldr	r4, [r2, #12]
 801fcfe:	42a2      	cmp	r2, r4
 801fd00:	d010      	beq.n	801fd24 <_malloc_r+0x6c>
 801fd02:	6863      	ldr	r3, [r4, #4]
 801fd04:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801fd08:	f023 0303 	bic.w	r3, r3, #3
 801fd0c:	60ca      	str	r2, [r1, #12]
 801fd0e:	4423      	add	r3, r4
 801fd10:	6091      	str	r1, [r2, #8]
 801fd12:	685a      	ldr	r2, [r3, #4]
 801fd14:	f042 0201 	orr.w	r2, r2, #1
 801fd18:	605a      	str	r2, [r3, #4]
 801fd1a:	4628      	mov	r0, r5
 801fd1c:	f000 fa14 	bl	8020148 <__malloc_unlock>
 801fd20:	3408      	adds	r4, #8
 801fd22:	e186      	b.n	8020032 <_malloc_r+0x37a>
 801fd24:	3302      	adds	r3, #2
 801fd26:	4ab4      	ldr	r2, [pc, #720]	; (801fff8 <_malloc_r+0x340>)
 801fd28:	6934      	ldr	r4, [r6, #16]
 801fd2a:	4294      	cmp	r4, r2
 801fd2c:	4611      	mov	r1, r2
 801fd2e:	d077      	beq.n	801fe20 <_malloc_r+0x168>
 801fd30:	6860      	ldr	r0, [r4, #4]
 801fd32:	f020 0c03 	bic.w	ip, r0, #3
 801fd36:	ebac 0007 	sub.w	r0, ip, r7
 801fd3a:	280f      	cmp	r0, #15
 801fd3c:	dd48      	ble.n	801fdd0 <_malloc_r+0x118>
 801fd3e:	19e1      	adds	r1, r4, r7
 801fd40:	f040 0301 	orr.w	r3, r0, #1
 801fd44:	f047 0701 	orr.w	r7, r7, #1
 801fd48:	6067      	str	r7, [r4, #4]
 801fd4a:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801fd4e:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801fd52:	604b      	str	r3, [r1, #4]
 801fd54:	f844 000c 	str.w	r0, [r4, ip]
 801fd58:	e7df      	b.n	801fd1a <_malloc_r+0x62>
 801fd5a:	0a7b      	lsrs	r3, r7, #9
 801fd5c:	d02a      	beq.n	801fdb4 <_malloc_r+0xfc>
 801fd5e:	2b04      	cmp	r3, #4
 801fd60:	d812      	bhi.n	801fd88 <_malloc_r+0xd0>
 801fd62:	09bb      	lsrs	r3, r7, #6
 801fd64:	3338      	adds	r3, #56	; 0x38
 801fd66:	1c5a      	adds	r2, r3, #1
 801fd68:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801fd6c:	f1a2 0c08 	sub.w	ip, r2, #8
 801fd70:	6854      	ldr	r4, [r2, #4]
 801fd72:	4564      	cmp	r4, ip
 801fd74:	d006      	beq.n	801fd84 <_malloc_r+0xcc>
 801fd76:	6862      	ldr	r2, [r4, #4]
 801fd78:	f022 0203 	bic.w	r2, r2, #3
 801fd7c:	1bd0      	subs	r0, r2, r7
 801fd7e:	280f      	cmp	r0, #15
 801fd80:	dd1c      	ble.n	801fdbc <_malloc_r+0x104>
 801fd82:	3b01      	subs	r3, #1
 801fd84:	3301      	adds	r3, #1
 801fd86:	e7ce      	b.n	801fd26 <_malloc_r+0x6e>
 801fd88:	2b14      	cmp	r3, #20
 801fd8a:	d801      	bhi.n	801fd90 <_malloc_r+0xd8>
 801fd8c:	335b      	adds	r3, #91	; 0x5b
 801fd8e:	e7ea      	b.n	801fd66 <_malloc_r+0xae>
 801fd90:	2b54      	cmp	r3, #84	; 0x54
 801fd92:	d802      	bhi.n	801fd9a <_malloc_r+0xe2>
 801fd94:	0b3b      	lsrs	r3, r7, #12
 801fd96:	336e      	adds	r3, #110	; 0x6e
 801fd98:	e7e5      	b.n	801fd66 <_malloc_r+0xae>
 801fd9a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801fd9e:	d802      	bhi.n	801fda6 <_malloc_r+0xee>
 801fda0:	0bfb      	lsrs	r3, r7, #15
 801fda2:	3377      	adds	r3, #119	; 0x77
 801fda4:	e7df      	b.n	801fd66 <_malloc_r+0xae>
 801fda6:	f240 5254 	movw	r2, #1364	; 0x554
 801fdaa:	4293      	cmp	r3, r2
 801fdac:	d804      	bhi.n	801fdb8 <_malloc_r+0x100>
 801fdae:	0cbb      	lsrs	r3, r7, #18
 801fdb0:	337c      	adds	r3, #124	; 0x7c
 801fdb2:	e7d8      	b.n	801fd66 <_malloc_r+0xae>
 801fdb4:	233f      	movs	r3, #63	; 0x3f
 801fdb6:	e7d6      	b.n	801fd66 <_malloc_r+0xae>
 801fdb8:	237e      	movs	r3, #126	; 0x7e
 801fdba:	e7d4      	b.n	801fd66 <_malloc_r+0xae>
 801fdbc:	2800      	cmp	r0, #0
 801fdbe:	68e1      	ldr	r1, [r4, #12]
 801fdc0:	db04      	blt.n	801fdcc <_malloc_r+0x114>
 801fdc2:	68a3      	ldr	r3, [r4, #8]
 801fdc4:	60d9      	str	r1, [r3, #12]
 801fdc6:	608b      	str	r3, [r1, #8]
 801fdc8:	18a3      	adds	r3, r4, r2
 801fdca:	e7a2      	b.n	801fd12 <_malloc_r+0x5a>
 801fdcc:	460c      	mov	r4, r1
 801fdce:	e7d0      	b.n	801fd72 <_malloc_r+0xba>
 801fdd0:	2800      	cmp	r0, #0
 801fdd2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801fdd6:	db07      	blt.n	801fde8 <_malloc_r+0x130>
 801fdd8:	44a4      	add	ip, r4
 801fdda:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801fdde:	f043 0301 	orr.w	r3, r3, #1
 801fde2:	f8cc 3004 	str.w	r3, [ip, #4]
 801fde6:	e798      	b.n	801fd1a <_malloc_r+0x62>
 801fde8:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801fdec:	6870      	ldr	r0, [r6, #4]
 801fdee:	f080 809e 	bcs.w	801ff2e <_malloc_r+0x276>
 801fdf2:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801fdf6:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801fdfa:	f04f 0c01 	mov.w	ip, #1
 801fdfe:	3201      	adds	r2, #1
 801fe00:	fa0c fc0e 	lsl.w	ip, ip, lr
 801fe04:	ea4c 0000 	orr.w	r0, ip, r0
 801fe08:	6070      	str	r0, [r6, #4]
 801fe0a:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801fe0e:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801fe12:	3808      	subs	r0, #8
 801fe14:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801fe18:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801fe1c:	f8cc 400c 	str.w	r4, [ip, #12]
 801fe20:	2001      	movs	r0, #1
 801fe22:	109a      	asrs	r2, r3, #2
 801fe24:	fa00 f202 	lsl.w	r2, r0, r2
 801fe28:	6870      	ldr	r0, [r6, #4]
 801fe2a:	4290      	cmp	r0, r2
 801fe2c:	d326      	bcc.n	801fe7c <_malloc_r+0x1c4>
 801fe2e:	4210      	tst	r0, r2
 801fe30:	d106      	bne.n	801fe40 <_malloc_r+0x188>
 801fe32:	f023 0303 	bic.w	r3, r3, #3
 801fe36:	0052      	lsls	r2, r2, #1
 801fe38:	4210      	tst	r0, r2
 801fe3a:	f103 0304 	add.w	r3, r3, #4
 801fe3e:	d0fa      	beq.n	801fe36 <_malloc_r+0x17e>
 801fe40:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801fe44:	46c1      	mov	r9, r8
 801fe46:	469e      	mov	lr, r3
 801fe48:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801fe4c:	454c      	cmp	r4, r9
 801fe4e:	f040 80b3 	bne.w	801ffb8 <_malloc_r+0x300>
 801fe52:	f10e 0e01 	add.w	lr, lr, #1
 801fe56:	f01e 0f03 	tst.w	lr, #3
 801fe5a:	f109 0908 	add.w	r9, r9, #8
 801fe5e:	d1f3      	bne.n	801fe48 <_malloc_r+0x190>
 801fe60:	0798      	lsls	r0, r3, #30
 801fe62:	f040 80ec 	bne.w	802003e <_malloc_r+0x386>
 801fe66:	6873      	ldr	r3, [r6, #4]
 801fe68:	ea23 0302 	bic.w	r3, r3, r2
 801fe6c:	6073      	str	r3, [r6, #4]
 801fe6e:	6870      	ldr	r0, [r6, #4]
 801fe70:	0052      	lsls	r2, r2, #1
 801fe72:	4290      	cmp	r0, r2
 801fe74:	d302      	bcc.n	801fe7c <_malloc_r+0x1c4>
 801fe76:	2a00      	cmp	r2, #0
 801fe78:	f040 80ee 	bne.w	8020058 <_malloc_r+0x3a0>
 801fe7c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801fe80:	f8db 1004 	ldr.w	r1, [fp, #4]
 801fe84:	f021 0903 	bic.w	r9, r1, #3
 801fe88:	45b9      	cmp	r9, r7
 801fe8a:	d304      	bcc.n	801fe96 <_malloc_r+0x1de>
 801fe8c:	eba9 0207 	sub.w	r2, r9, r7
 801fe90:	2a0f      	cmp	r2, #15
 801fe92:	f300 8149 	bgt.w	8020128 <_malloc_r+0x470>
 801fe96:	4a59      	ldr	r2, [pc, #356]	; (801fffc <_malloc_r+0x344>)
 801fe98:	6811      	ldr	r1, [r2, #0]
 801fe9a:	3110      	adds	r1, #16
 801fe9c:	eb0b 0309 	add.w	r3, fp, r9
 801fea0:	4439      	add	r1, r7
 801fea2:	2008      	movs	r0, #8
 801fea4:	9301      	str	r3, [sp, #4]
 801fea6:	9100      	str	r1, [sp, #0]
 801fea8:	f001 fe80 	bl	8021bac <sysconf>
 801feac:	4a54      	ldr	r2, [pc, #336]	; (8020000 <_malloc_r+0x348>)
 801feae:	e9dd 1300 	ldrd	r1, r3, [sp]
 801feb2:	4680      	mov	r8, r0
 801feb4:	6810      	ldr	r0, [r2, #0]
 801feb6:	3001      	adds	r0, #1
 801feb8:	bf1f      	itttt	ne
 801feba:	f101 31ff 	addne.w	r1, r1, #4294967295
 801febe:	4441      	addne	r1, r8
 801fec0:	f1c8 0000 	rsbne	r0, r8, #0
 801fec4:	4001      	andne	r1, r0
 801fec6:	4628      	mov	r0, r5
 801fec8:	e9cd 1300 	strd	r1, r3, [sp]
 801fecc:	f000 fcaa 	bl	8020824 <_sbrk_r>
 801fed0:	1c42      	adds	r2, r0, #1
 801fed2:	4604      	mov	r4, r0
 801fed4:	f000 80fc 	beq.w	80200d0 <_malloc_r+0x418>
 801fed8:	9b01      	ldr	r3, [sp, #4]
 801feda:	9900      	ldr	r1, [sp, #0]
 801fedc:	4a48      	ldr	r2, [pc, #288]	; (8020000 <_malloc_r+0x348>)
 801fede:	4283      	cmp	r3, r0
 801fee0:	d902      	bls.n	801fee8 <_malloc_r+0x230>
 801fee2:	45b3      	cmp	fp, r6
 801fee4:	f040 80f4 	bne.w	80200d0 <_malloc_r+0x418>
 801fee8:	f8df a120 	ldr.w	sl, [pc, #288]	; 802000c <_malloc_r+0x354>
 801feec:	f8da 0000 	ldr.w	r0, [sl]
 801fef0:	42a3      	cmp	r3, r4
 801fef2:	eb00 0e01 	add.w	lr, r0, r1
 801fef6:	f8ca e000 	str.w	lr, [sl]
 801fefa:	f108 3cff 	add.w	ip, r8, #4294967295
 801fefe:	f040 80ad 	bne.w	802005c <_malloc_r+0x3a4>
 801ff02:	ea13 0f0c 	tst.w	r3, ip
 801ff06:	f040 80a9 	bne.w	802005c <_malloc_r+0x3a4>
 801ff0a:	68b3      	ldr	r3, [r6, #8]
 801ff0c:	4449      	add	r1, r9
 801ff0e:	f041 0101 	orr.w	r1, r1, #1
 801ff12:	6059      	str	r1, [r3, #4]
 801ff14:	4a3b      	ldr	r2, [pc, #236]	; (8020004 <_malloc_r+0x34c>)
 801ff16:	f8da 3000 	ldr.w	r3, [sl]
 801ff1a:	6811      	ldr	r1, [r2, #0]
 801ff1c:	428b      	cmp	r3, r1
 801ff1e:	bf88      	it	hi
 801ff20:	6013      	strhi	r3, [r2, #0]
 801ff22:	4a39      	ldr	r2, [pc, #228]	; (8020008 <_malloc_r+0x350>)
 801ff24:	6811      	ldr	r1, [r2, #0]
 801ff26:	428b      	cmp	r3, r1
 801ff28:	bf88      	it	hi
 801ff2a:	6013      	strhi	r3, [r2, #0]
 801ff2c:	e0d0      	b.n	80200d0 <_malloc_r+0x418>
 801ff2e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 801ff32:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801ff36:	d218      	bcs.n	801ff6a <_malloc_r+0x2b2>
 801ff38:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801ff3c:	3238      	adds	r2, #56	; 0x38
 801ff3e:	f102 0e01 	add.w	lr, r2, #1
 801ff42:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801ff46:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801ff4a:	45f0      	cmp	r8, lr
 801ff4c:	d12b      	bne.n	801ffa6 <_malloc_r+0x2ee>
 801ff4e:	1092      	asrs	r2, r2, #2
 801ff50:	f04f 0c01 	mov.w	ip, #1
 801ff54:	fa0c f202 	lsl.w	r2, ip, r2
 801ff58:	4310      	orrs	r0, r2
 801ff5a:	6070      	str	r0, [r6, #4]
 801ff5c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801ff60:	f8c8 4008 	str.w	r4, [r8, #8]
 801ff64:	f8ce 400c 	str.w	r4, [lr, #12]
 801ff68:	e75a      	b.n	801fe20 <_malloc_r+0x168>
 801ff6a:	2a14      	cmp	r2, #20
 801ff6c:	d801      	bhi.n	801ff72 <_malloc_r+0x2ba>
 801ff6e:	325b      	adds	r2, #91	; 0x5b
 801ff70:	e7e5      	b.n	801ff3e <_malloc_r+0x286>
 801ff72:	2a54      	cmp	r2, #84	; 0x54
 801ff74:	d803      	bhi.n	801ff7e <_malloc_r+0x2c6>
 801ff76:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801ff7a:	326e      	adds	r2, #110	; 0x6e
 801ff7c:	e7df      	b.n	801ff3e <_malloc_r+0x286>
 801ff7e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801ff82:	d803      	bhi.n	801ff8c <_malloc_r+0x2d4>
 801ff84:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801ff88:	3277      	adds	r2, #119	; 0x77
 801ff8a:	e7d8      	b.n	801ff3e <_malloc_r+0x286>
 801ff8c:	f240 5e54 	movw	lr, #1364	; 0x554
 801ff90:	4572      	cmp	r2, lr
 801ff92:	bf9a      	itte	ls
 801ff94:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801ff98:	327c      	addls	r2, #124	; 0x7c
 801ff9a:	227e      	movhi	r2, #126	; 0x7e
 801ff9c:	e7cf      	b.n	801ff3e <_malloc_r+0x286>
 801ff9e:	f8de e008 	ldr.w	lr, [lr, #8]
 801ffa2:	45f0      	cmp	r8, lr
 801ffa4:	d005      	beq.n	801ffb2 <_malloc_r+0x2fa>
 801ffa6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ffaa:	f022 0203 	bic.w	r2, r2, #3
 801ffae:	4562      	cmp	r2, ip
 801ffb0:	d8f5      	bhi.n	801ff9e <_malloc_r+0x2e6>
 801ffb2:	f8de 800c 	ldr.w	r8, [lr, #12]
 801ffb6:	e7d1      	b.n	801ff5c <_malloc_r+0x2a4>
 801ffb8:	6860      	ldr	r0, [r4, #4]
 801ffba:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801ffbe:	f020 0003 	bic.w	r0, r0, #3
 801ffc2:	eba0 0a07 	sub.w	sl, r0, r7
 801ffc6:	f1ba 0f0f 	cmp.w	sl, #15
 801ffca:	dd21      	ble.n	8020010 <_malloc_r+0x358>
 801ffcc:	68a3      	ldr	r3, [r4, #8]
 801ffce:	19e2      	adds	r2, r4, r7
 801ffd0:	f047 0701 	orr.w	r7, r7, #1
 801ffd4:	6067      	str	r7, [r4, #4]
 801ffd6:	f8c3 c00c 	str.w	ip, [r3, #12]
 801ffda:	f8cc 3008 	str.w	r3, [ip, #8]
 801ffde:	f04a 0301 	orr.w	r3, sl, #1
 801ffe2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801ffe6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801ffea:	6053      	str	r3, [r2, #4]
 801ffec:	f844 a000 	str.w	sl, [r4, r0]
 801fff0:	e693      	b.n	801fd1a <_malloc_r+0x62>
 801fff2:	bf00      	nop
 801fff4:	200004d0 	.word	0x200004d0
 801fff8:	200004d8 	.word	0x200004d8
 801fffc:	20005094 	.word	0x20005094
 8020000:	200008d8 	.word	0x200008d8
 8020004:	2000508c 	.word	0x2000508c
 8020008:	20005090 	.word	0x20005090
 802000c:	20005064 	.word	0x20005064
 8020010:	f1ba 0f00 	cmp.w	sl, #0
 8020014:	db11      	blt.n	802003a <_malloc_r+0x382>
 8020016:	4420      	add	r0, r4
 8020018:	6843      	ldr	r3, [r0, #4]
 802001a:	f043 0301 	orr.w	r3, r3, #1
 802001e:	6043      	str	r3, [r0, #4]
 8020020:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8020024:	4628      	mov	r0, r5
 8020026:	f8c3 c00c 	str.w	ip, [r3, #12]
 802002a:	f8cc 3008 	str.w	r3, [ip, #8]
 802002e:	f000 f88b 	bl	8020148 <__malloc_unlock>
 8020032:	4620      	mov	r0, r4
 8020034:	b003      	add	sp, #12
 8020036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802003a:	4664      	mov	r4, ip
 802003c:	e706      	b.n	801fe4c <_malloc_r+0x194>
 802003e:	f858 0908 	ldr.w	r0, [r8], #-8
 8020042:	4540      	cmp	r0, r8
 8020044:	f103 33ff 	add.w	r3, r3, #4294967295
 8020048:	f43f af0a 	beq.w	801fe60 <_malloc_r+0x1a8>
 802004c:	e70f      	b.n	801fe6e <_malloc_r+0x1b6>
 802004e:	3304      	adds	r3, #4
 8020050:	0052      	lsls	r2, r2, #1
 8020052:	4210      	tst	r0, r2
 8020054:	d0fb      	beq.n	802004e <_malloc_r+0x396>
 8020056:	e6f3      	b.n	801fe40 <_malloc_r+0x188>
 8020058:	4673      	mov	r3, lr
 802005a:	e7fa      	b.n	8020052 <_malloc_r+0x39a>
 802005c:	6810      	ldr	r0, [r2, #0]
 802005e:	3001      	adds	r0, #1
 8020060:	bf1b      	ittet	ne
 8020062:	1ae3      	subne	r3, r4, r3
 8020064:	4473      	addne	r3, lr
 8020066:	6014      	streq	r4, [r2, #0]
 8020068:	f8ca 3000 	strne.w	r3, [sl]
 802006c:	f014 0307 	ands.w	r3, r4, #7
 8020070:	bf1a      	itte	ne
 8020072:	f1c3 0008 	rsbne	r0, r3, #8
 8020076:	1824      	addne	r4, r4, r0
 8020078:	4618      	moveq	r0, r3
 802007a:	1862      	adds	r2, r4, r1
 802007c:	ea02 010c 	and.w	r1, r2, ip
 8020080:	4480      	add	r8, r0
 8020082:	eba8 0801 	sub.w	r8, r8, r1
 8020086:	ea08 080c 	and.w	r8, r8, ip
 802008a:	4641      	mov	r1, r8
 802008c:	4628      	mov	r0, r5
 802008e:	9301      	str	r3, [sp, #4]
 8020090:	9200      	str	r2, [sp, #0]
 8020092:	f000 fbc7 	bl	8020824 <_sbrk_r>
 8020096:	1c43      	adds	r3, r0, #1
 8020098:	e9dd 2300 	ldrd	r2, r3, [sp]
 802009c:	d105      	bne.n	80200aa <_malloc_r+0x3f2>
 802009e:	b32b      	cbz	r3, 80200ec <_malloc_r+0x434>
 80200a0:	f1a3 0008 	sub.w	r0, r3, #8
 80200a4:	4410      	add	r0, r2
 80200a6:	f04f 0800 	mov.w	r8, #0
 80200aa:	f8da 2000 	ldr.w	r2, [sl]
 80200ae:	60b4      	str	r4, [r6, #8]
 80200b0:	1b00      	subs	r0, r0, r4
 80200b2:	4440      	add	r0, r8
 80200b4:	4442      	add	r2, r8
 80200b6:	f040 0001 	orr.w	r0, r0, #1
 80200ba:	45b3      	cmp	fp, r6
 80200bc:	f8ca 2000 	str.w	r2, [sl]
 80200c0:	6060      	str	r0, [r4, #4]
 80200c2:	f43f af27 	beq.w	801ff14 <_malloc_r+0x25c>
 80200c6:	f1b9 0f0f 	cmp.w	r9, #15
 80200ca:	d812      	bhi.n	80200f2 <_malloc_r+0x43a>
 80200cc:	2301      	movs	r3, #1
 80200ce:	6063      	str	r3, [r4, #4]
 80200d0:	68b3      	ldr	r3, [r6, #8]
 80200d2:	685b      	ldr	r3, [r3, #4]
 80200d4:	f023 0303 	bic.w	r3, r3, #3
 80200d8:	42bb      	cmp	r3, r7
 80200da:	eba3 0207 	sub.w	r2, r3, r7
 80200de:	d301      	bcc.n	80200e4 <_malloc_r+0x42c>
 80200e0:	2a0f      	cmp	r2, #15
 80200e2:	dc21      	bgt.n	8020128 <_malloc_r+0x470>
 80200e4:	4628      	mov	r0, r5
 80200e6:	f000 f82f 	bl	8020148 <__malloc_unlock>
 80200ea:	e5f1      	b.n	801fcd0 <_malloc_r+0x18>
 80200ec:	4610      	mov	r0, r2
 80200ee:	4698      	mov	r8, r3
 80200f0:	e7db      	b.n	80200aa <_malloc_r+0x3f2>
 80200f2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80200f6:	f1a9 090c 	sub.w	r9, r9, #12
 80200fa:	f029 0907 	bic.w	r9, r9, #7
 80200fe:	f003 0301 	and.w	r3, r3, #1
 8020102:	ea43 0309 	orr.w	r3, r3, r9
 8020106:	f8cb 3004 	str.w	r3, [fp, #4]
 802010a:	2205      	movs	r2, #5
 802010c:	eb0b 0309 	add.w	r3, fp, r9
 8020110:	f1b9 0f0f 	cmp.w	r9, #15
 8020114:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8020118:	f67f aefc 	bls.w	801ff14 <_malloc_r+0x25c>
 802011c:	f10b 0108 	add.w	r1, fp, #8
 8020120:	4628      	mov	r0, r5
 8020122:	f7ff fb6d 	bl	801f800 <_free_r>
 8020126:	e6f5      	b.n	801ff14 <_malloc_r+0x25c>
 8020128:	68b4      	ldr	r4, [r6, #8]
 802012a:	f047 0301 	orr.w	r3, r7, #1
 802012e:	4427      	add	r7, r4
 8020130:	f042 0201 	orr.w	r2, r2, #1
 8020134:	6063      	str	r3, [r4, #4]
 8020136:	60b7      	str	r7, [r6, #8]
 8020138:	607a      	str	r2, [r7, #4]
 802013a:	e5ee      	b.n	801fd1a <_malloc_r+0x62>

0802013c <__malloc_lock>:
 802013c:	4801      	ldr	r0, [pc, #4]	; (8020144 <__malloc_lock+0x8>)
 802013e:	f7ff bd3c 	b.w	801fbba <__retarget_lock_acquire_recursive>
 8020142:	bf00      	nop
 8020144:	2000be68 	.word	0x2000be68

08020148 <__malloc_unlock>:
 8020148:	4801      	ldr	r0, [pc, #4]	; (8020150 <__malloc_unlock+0x8>)
 802014a:	f7ff bd38 	b.w	801fbbe <__retarget_lock_release_recursive>
 802014e:	bf00      	nop
 8020150:	2000be68 	.word	0x2000be68

08020154 <_Balloc>:
 8020154:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8020156:	b570      	push	{r4, r5, r6, lr}
 8020158:	4605      	mov	r5, r0
 802015a:	460c      	mov	r4, r1
 802015c:	b17b      	cbz	r3, 802017e <_Balloc+0x2a>
 802015e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020160:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020164:	b9a0      	cbnz	r0, 8020190 <_Balloc+0x3c>
 8020166:	2101      	movs	r1, #1
 8020168:	fa01 f604 	lsl.w	r6, r1, r4
 802016c:	1d72      	adds	r2, r6, #5
 802016e:	0092      	lsls	r2, r2, #2
 8020170:	4628      	mov	r0, r5
 8020172:	f002 facd 	bl	8022710 <_calloc_r>
 8020176:	b148      	cbz	r0, 802018c <_Balloc+0x38>
 8020178:	e9c0 4601 	strd	r4, r6, [r0, #4]
 802017c:	e00b      	b.n	8020196 <_Balloc+0x42>
 802017e:	2221      	movs	r2, #33	; 0x21
 8020180:	2104      	movs	r1, #4
 8020182:	f002 fac5 	bl	8022710 <_calloc_r>
 8020186:	64e8      	str	r0, [r5, #76]	; 0x4c
 8020188:	2800      	cmp	r0, #0
 802018a:	d1e8      	bne.n	802015e <_Balloc+0xa>
 802018c:	2000      	movs	r0, #0
 802018e:	bd70      	pop	{r4, r5, r6, pc}
 8020190:	6802      	ldr	r2, [r0, #0]
 8020192:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8020196:	2300      	movs	r3, #0
 8020198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802019c:	e7f7      	b.n	802018e <_Balloc+0x3a>

0802019e <_Bfree>:
 802019e:	b131      	cbz	r1, 80201ae <_Bfree+0x10>
 80201a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80201a2:	684a      	ldr	r2, [r1, #4]
 80201a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80201a8:	6008      	str	r0, [r1, #0]
 80201aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80201ae:	4770      	bx	lr

080201b0 <__multadd>:
 80201b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201b4:	690e      	ldr	r6, [r1, #16]
 80201b6:	4607      	mov	r7, r0
 80201b8:	4698      	mov	r8, r3
 80201ba:	460c      	mov	r4, r1
 80201bc:	f101 0014 	add.w	r0, r1, #20
 80201c0:	2300      	movs	r3, #0
 80201c2:	6805      	ldr	r5, [r0, #0]
 80201c4:	b2a9      	uxth	r1, r5
 80201c6:	fb02 8101 	mla	r1, r2, r1, r8
 80201ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80201ce:	0c2d      	lsrs	r5, r5, #16
 80201d0:	fb02 c505 	mla	r5, r2, r5, ip
 80201d4:	b289      	uxth	r1, r1
 80201d6:	3301      	adds	r3, #1
 80201d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80201dc:	429e      	cmp	r6, r3
 80201de:	f840 1b04 	str.w	r1, [r0], #4
 80201e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80201e6:	dcec      	bgt.n	80201c2 <__multadd+0x12>
 80201e8:	f1b8 0f00 	cmp.w	r8, #0
 80201ec:	d022      	beq.n	8020234 <__multadd+0x84>
 80201ee:	68a3      	ldr	r3, [r4, #8]
 80201f0:	42b3      	cmp	r3, r6
 80201f2:	dc19      	bgt.n	8020228 <__multadd+0x78>
 80201f4:	6861      	ldr	r1, [r4, #4]
 80201f6:	4638      	mov	r0, r7
 80201f8:	3101      	adds	r1, #1
 80201fa:	f7ff ffab 	bl	8020154 <_Balloc>
 80201fe:	4605      	mov	r5, r0
 8020200:	b928      	cbnz	r0, 802020e <__multadd+0x5e>
 8020202:	4602      	mov	r2, r0
 8020204:	4b0d      	ldr	r3, [pc, #52]	; (802023c <__multadd+0x8c>)
 8020206:	480e      	ldr	r0, [pc, #56]	; (8020240 <__multadd+0x90>)
 8020208:	21b5      	movs	r1, #181	; 0xb5
 802020a:	f002 fa63 	bl	80226d4 <__assert_func>
 802020e:	6922      	ldr	r2, [r4, #16]
 8020210:	3202      	adds	r2, #2
 8020212:	f104 010c 	add.w	r1, r4, #12
 8020216:	0092      	lsls	r2, r2, #2
 8020218:	300c      	adds	r0, #12
 802021a:	f7fa ffff 	bl	801b21c <memcpy>
 802021e:	4621      	mov	r1, r4
 8020220:	4638      	mov	r0, r7
 8020222:	f7ff ffbc 	bl	802019e <_Bfree>
 8020226:	462c      	mov	r4, r5
 8020228:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802022c:	3601      	adds	r6, #1
 802022e:	f8c3 8014 	str.w	r8, [r3, #20]
 8020232:	6126      	str	r6, [r4, #16]
 8020234:	4620      	mov	r0, r4
 8020236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802023a:	bf00      	nop
 802023c:	08029975 	.word	0x08029975
 8020240:	080299e5 	.word	0x080299e5

08020244 <__hi0bits>:
 8020244:	0c03      	lsrs	r3, r0, #16
 8020246:	041b      	lsls	r3, r3, #16
 8020248:	b9d3      	cbnz	r3, 8020280 <__hi0bits+0x3c>
 802024a:	0400      	lsls	r0, r0, #16
 802024c:	2310      	movs	r3, #16
 802024e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020252:	bf04      	itt	eq
 8020254:	0200      	lsleq	r0, r0, #8
 8020256:	3308      	addeq	r3, #8
 8020258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802025c:	bf04      	itt	eq
 802025e:	0100      	lsleq	r0, r0, #4
 8020260:	3304      	addeq	r3, #4
 8020262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020266:	bf04      	itt	eq
 8020268:	0080      	lsleq	r0, r0, #2
 802026a:	3302      	addeq	r3, #2
 802026c:	2800      	cmp	r0, #0
 802026e:	db05      	blt.n	802027c <__hi0bits+0x38>
 8020270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020274:	f103 0301 	add.w	r3, r3, #1
 8020278:	bf08      	it	eq
 802027a:	2320      	moveq	r3, #32
 802027c:	4618      	mov	r0, r3
 802027e:	4770      	bx	lr
 8020280:	2300      	movs	r3, #0
 8020282:	e7e4      	b.n	802024e <__hi0bits+0xa>

08020284 <__lo0bits>:
 8020284:	6803      	ldr	r3, [r0, #0]
 8020286:	f013 0207 	ands.w	r2, r3, #7
 802028a:	4601      	mov	r1, r0
 802028c:	d00b      	beq.n	80202a6 <__lo0bits+0x22>
 802028e:	07da      	lsls	r2, r3, #31
 8020290:	d424      	bmi.n	80202dc <__lo0bits+0x58>
 8020292:	0798      	lsls	r0, r3, #30
 8020294:	bf49      	itett	mi
 8020296:	085b      	lsrmi	r3, r3, #1
 8020298:	089b      	lsrpl	r3, r3, #2
 802029a:	2001      	movmi	r0, #1
 802029c:	600b      	strmi	r3, [r1, #0]
 802029e:	bf5c      	itt	pl
 80202a0:	600b      	strpl	r3, [r1, #0]
 80202a2:	2002      	movpl	r0, #2
 80202a4:	4770      	bx	lr
 80202a6:	b298      	uxth	r0, r3
 80202a8:	b9b0      	cbnz	r0, 80202d8 <__lo0bits+0x54>
 80202aa:	0c1b      	lsrs	r3, r3, #16
 80202ac:	2010      	movs	r0, #16
 80202ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80202b2:	bf04      	itt	eq
 80202b4:	0a1b      	lsreq	r3, r3, #8
 80202b6:	3008      	addeq	r0, #8
 80202b8:	071a      	lsls	r2, r3, #28
 80202ba:	bf04      	itt	eq
 80202bc:	091b      	lsreq	r3, r3, #4
 80202be:	3004      	addeq	r0, #4
 80202c0:	079a      	lsls	r2, r3, #30
 80202c2:	bf04      	itt	eq
 80202c4:	089b      	lsreq	r3, r3, #2
 80202c6:	3002      	addeq	r0, #2
 80202c8:	07da      	lsls	r2, r3, #31
 80202ca:	d403      	bmi.n	80202d4 <__lo0bits+0x50>
 80202cc:	085b      	lsrs	r3, r3, #1
 80202ce:	f100 0001 	add.w	r0, r0, #1
 80202d2:	d005      	beq.n	80202e0 <__lo0bits+0x5c>
 80202d4:	600b      	str	r3, [r1, #0]
 80202d6:	4770      	bx	lr
 80202d8:	4610      	mov	r0, r2
 80202da:	e7e8      	b.n	80202ae <__lo0bits+0x2a>
 80202dc:	2000      	movs	r0, #0
 80202de:	4770      	bx	lr
 80202e0:	2020      	movs	r0, #32
 80202e2:	4770      	bx	lr

080202e4 <__i2b>:
 80202e4:	b510      	push	{r4, lr}
 80202e6:	460c      	mov	r4, r1
 80202e8:	2101      	movs	r1, #1
 80202ea:	f7ff ff33 	bl	8020154 <_Balloc>
 80202ee:	4602      	mov	r2, r0
 80202f0:	b928      	cbnz	r0, 80202fe <__i2b+0x1a>
 80202f2:	4b05      	ldr	r3, [pc, #20]	; (8020308 <__i2b+0x24>)
 80202f4:	4805      	ldr	r0, [pc, #20]	; (802030c <__i2b+0x28>)
 80202f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80202fa:	f002 f9eb 	bl	80226d4 <__assert_func>
 80202fe:	2301      	movs	r3, #1
 8020300:	6144      	str	r4, [r0, #20]
 8020302:	6103      	str	r3, [r0, #16]
 8020304:	bd10      	pop	{r4, pc}
 8020306:	bf00      	nop
 8020308:	08029975 	.word	0x08029975
 802030c:	080299e5 	.word	0x080299e5

08020310 <__multiply>:
 8020310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020314:	4614      	mov	r4, r2
 8020316:	690a      	ldr	r2, [r1, #16]
 8020318:	6923      	ldr	r3, [r4, #16]
 802031a:	429a      	cmp	r2, r3
 802031c:	bfb8      	it	lt
 802031e:	460b      	movlt	r3, r1
 8020320:	460d      	mov	r5, r1
 8020322:	bfbc      	itt	lt
 8020324:	4625      	movlt	r5, r4
 8020326:	461c      	movlt	r4, r3
 8020328:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802032c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020330:	68ab      	ldr	r3, [r5, #8]
 8020332:	6869      	ldr	r1, [r5, #4]
 8020334:	eb0a 0709 	add.w	r7, sl, r9
 8020338:	42bb      	cmp	r3, r7
 802033a:	b085      	sub	sp, #20
 802033c:	bfb8      	it	lt
 802033e:	3101      	addlt	r1, #1
 8020340:	f7ff ff08 	bl	8020154 <_Balloc>
 8020344:	b930      	cbnz	r0, 8020354 <__multiply+0x44>
 8020346:	4602      	mov	r2, r0
 8020348:	4b42      	ldr	r3, [pc, #264]	; (8020454 <__multiply+0x144>)
 802034a:	4843      	ldr	r0, [pc, #268]	; (8020458 <__multiply+0x148>)
 802034c:	f240 115d 	movw	r1, #349	; 0x15d
 8020350:	f002 f9c0 	bl	80226d4 <__assert_func>
 8020354:	f100 0614 	add.w	r6, r0, #20
 8020358:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802035c:	4633      	mov	r3, r6
 802035e:	2200      	movs	r2, #0
 8020360:	4543      	cmp	r3, r8
 8020362:	d31e      	bcc.n	80203a2 <__multiply+0x92>
 8020364:	f105 0c14 	add.w	ip, r5, #20
 8020368:	f104 0314 	add.w	r3, r4, #20
 802036c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020370:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020374:	9202      	str	r2, [sp, #8]
 8020376:	ebac 0205 	sub.w	r2, ip, r5
 802037a:	3a15      	subs	r2, #21
 802037c:	f022 0203 	bic.w	r2, r2, #3
 8020380:	3204      	adds	r2, #4
 8020382:	f105 0115 	add.w	r1, r5, #21
 8020386:	458c      	cmp	ip, r1
 8020388:	bf38      	it	cc
 802038a:	2204      	movcc	r2, #4
 802038c:	9201      	str	r2, [sp, #4]
 802038e:	9a02      	ldr	r2, [sp, #8]
 8020390:	9303      	str	r3, [sp, #12]
 8020392:	429a      	cmp	r2, r3
 8020394:	d808      	bhi.n	80203a8 <__multiply+0x98>
 8020396:	2f00      	cmp	r7, #0
 8020398:	dc55      	bgt.n	8020446 <__multiply+0x136>
 802039a:	6107      	str	r7, [r0, #16]
 802039c:	b005      	add	sp, #20
 802039e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203a2:	f843 2b04 	str.w	r2, [r3], #4
 80203a6:	e7db      	b.n	8020360 <__multiply+0x50>
 80203a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80203ac:	f1ba 0f00 	cmp.w	sl, #0
 80203b0:	d020      	beq.n	80203f4 <__multiply+0xe4>
 80203b2:	f105 0e14 	add.w	lr, r5, #20
 80203b6:	46b1      	mov	r9, r6
 80203b8:	2200      	movs	r2, #0
 80203ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 80203be:	f8d9 b000 	ldr.w	fp, [r9]
 80203c2:	b2a1      	uxth	r1, r4
 80203c4:	fa1f fb8b 	uxth.w	fp, fp
 80203c8:	fb0a b101 	mla	r1, sl, r1, fp
 80203cc:	4411      	add	r1, r2
 80203ce:	f8d9 2000 	ldr.w	r2, [r9]
 80203d2:	0c24      	lsrs	r4, r4, #16
 80203d4:	0c12      	lsrs	r2, r2, #16
 80203d6:	fb0a 2404 	mla	r4, sl, r4, r2
 80203da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80203de:	b289      	uxth	r1, r1
 80203e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80203e4:	45f4      	cmp	ip, lr
 80203e6:	f849 1b04 	str.w	r1, [r9], #4
 80203ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80203ee:	d8e4      	bhi.n	80203ba <__multiply+0xaa>
 80203f0:	9901      	ldr	r1, [sp, #4]
 80203f2:	5072      	str	r2, [r6, r1]
 80203f4:	9a03      	ldr	r2, [sp, #12]
 80203f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80203fa:	3304      	adds	r3, #4
 80203fc:	f1b9 0f00 	cmp.w	r9, #0
 8020400:	d01f      	beq.n	8020442 <__multiply+0x132>
 8020402:	6834      	ldr	r4, [r6, #0]
 8020404:	f105 0114 	add.w	r1, r5, #20
 8020408:	46b6      	mov	lr, r6
 802040a:	f04f 0a00 	mov.w	sl, #0
 802040e:	880a      	ldrh	r2, [r1, #0]
 8020410:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020414:	fb09 b202 	mla	r2, r9, r2, fp
 8020418:	4492      	add	sl, r2
 802041a:	b2a4      	uxth	r4, r4
 802041c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020420:	f84e 4b04 	str.w	r4, [lr], #4
 8020424:	f851 4b04 	ldr.w	r4, [r1], #4
 8020428:	f8be 2000 	ldrh.w	r2, [lr]
 802042c:	0c24      	lsrs	r4, r4, #16
 802042e:	fb09 2404 	mla	r4, r9, r4, r2
 8020432:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8020436:	458c      	cmp	ip, r1
 8020438:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802043c:	d8e7      	bhi.n	802040e <__multiply+0xfe>
 802043e:	9a01      	ldr	r2, [sp, #4]
 8020440:	50b4      	str	r4, [r6, r2]
 8020442:	3604      	adds	r6, #4
 8020444:	e7a3      	b.n	802038e <__multiply+0x7e>
 8020446:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802044a:	2b00      	cmp	r3, #0
 802044c:	d1a5      	bne.n	802039a <__multiply+0x8a>
 802044e:	3f01      	subs	r7, #1
 8020450:	e7a1      	b.n	8020396 <__multiply+0x86>
 8020452:	bf00      	nop
 8020454:	08029975 	.word	0x08029975
 8020458:	080299e5 	.word	0x080299e5

0802045c <__pow5mult>:
 802045c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020460:	4615      	mov	r5, r2
 8020462:	f012 0203 	ands.w	r2, r2, #3
 8020466:	4606      	mov	r6, r0
 8020468:	460f      	mov	r7, r1
 802046a:	d007      	beq.n	802047c <__pow5mult+0x20>
 802046c:	4c1a      	ldr	r4, [pc, #104]	; (80204d8 <__pow5mult+0x7c>)
 802046e:	3a01      	subs	r2, #1
 8020470:	2300      	movs	r3, #0
 8020472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020476:	f7ff fe9b 	bl	80201b0 <__multadd>
 802047a:	4607      	mov	r7, r0
 802047c:	10ad      	asrs	r5, r5, #2
 802047e:	d027      	beq.n	80204d0 <__pow5mult+0x74>
 8020480:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8020482:	b944      	cbnz	r4, 8020496 <__pow5mult+0x3a>
 8020484:	f240 2171 	movw	r1, #625	; 0x271
 8020488:	4630      	mov	r0, r6
 802048a:	f7ff ff2b 	bl	80202e4 <__i2b>
 802048e:	2300      	movs	r3, #0
 8020490:	64b0      	str	r0, [r6, #72]	; 0x48
 8020492:	4604      	mov	r4, r0
 8020494:	6003      	str	r3, [r0, #0]
 8020496:	f04f 0900 	mov.w	r9, #0
 802049a:	07eb      	lsls	r3, r5, #31
 802049c:	d50a      	bpl.n	80204b4 <__pow5mult+0x58>
 802049e:	4639      	mov	r1, r7
 80204a0:	4622      	mov	r2, r4
 80204a2:	4630      	mov	r0, r6
 80204a4:	f7ff ff34 	bl	8020310 <__multiply>
 80204a8:	4639      	mov	r1, r7
 80204aa:	4680      	mov	r8, r0
 80204ac:	4630      	mov	r0, r6
 80204ae:	f7ff fe76 	bl	802019e <_Bfree>
 80204b2:	4647      	mov	r7, r8
 80204b4:	106d      	asrs	r5, r5, #1
 80204b6:	d00b      	beq.n	80204d0 <__pow5mult+0x74>
 80204b8:	6820      	ldr	r0, [r4, #0]
 80204ba:	b938      	cbnz	r0, 80204cc <__pow5mult+0x70>
 80204bc:	4622      	mov	r2, r4
 80204be:	4621      	mov	r1, r4
 80204c0:	4630      	mov	r0, r6
 80204c2:	f7ff ff25 	bl	8020310 <__multiply>
 80204c6:	6020      	str	r0, [r4, #0]
 80204c8:	f8c0 9000 	str.w	r9, [r0]
 80204cc:	4604      	mov	r4, r0
 80204ce:	e7e4      	b.n	802049a <__pow5mult+0x3e>
 80204d0:	4638      	mov	r0, r7
 80204d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80204d6:	bf00      	nop
 80204d8:	08029b38 	.word	0x08029b38

080204dc <__lshift>:
 80204dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204e0:	460c      	mov	r4, r1
 80204e2:	6849      	ldr	r1, [r1, #4]
 80204e4:	6923      	ldr	r3, [r4, #16]
 80204e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80204ea:	68a3      	ldr	r3, [r4, #8]
 80204ec:	4607      	mov	r7, r0
 80204ee:	4691      	mov	r9, r2
 80204f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80204f4:	f108 0601 	add.w	r6, r8, #1
 80204f8:	42b3      	cmp	r3, r6
 80204fa:	db0b      	blt.n	8020514 <__lshift+0x38>
 80204fc:	4638      	mov	r0, r7
 80204fe:	f7ff fe29 	bl	8020154 <_Balloc>
 8020502:	4605      	mov	r5, r0
 8020504:	b948      	cbnz	r0, 802051a <__lshift+0x3e>
 8020506:	4602      	mov	r2, r0
 8020508:	4b28      	ldr	r3, [pc, #160]	; (80205ac <__lshift+0xd0>)
 802050a:	4829      	ldr	r0, [pc, #164]	; (80205b0 <__lshift+0xd4>)
 802050c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020510:	f002 f8e0 	bl	80226d4 <__assert_func>
 8020514:	3101      	adds	r1, #1
 8020516:	005b      	lsls	r3, r3, #1
 8020518:	e7ee      	b.n	80204f8 <__lshift+0x1c>
 802051a:	2300      	movs	r3, #0
 802051c:	f100 0114 	add.w	r1, r0, #20
 8020520:	f100 0210 	add.w	r2, r0, #16
 8020524:	4618      	mov	r0, r3
 8020526:	4553      	cmp	r3, sl
 8020528:	db33      	blt.n	8020592 <__lshift+0xb6>
 802052a:	6920      	ldr	r0, [r4, #16]
 802052c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020530:	f104 0314 	add.w	r3, r4, #20
 8020534:	f019 091f 	ands.w	r9, r9, #31
 8020538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802053c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020540:	d02b      	beq.n	802059a <__lshift+0xbe>
 8020542:	f1c9 0e20 	rsb	lr, r9, #32
 8020546:	468a      	mov	sl, r1
 8020548:	2200      	movs	r2, #0
 802054a:	6818      	ldr	r0, [r3, #0]
 802054c:	fa00 f009 	lsl.w	r0, r0, r9
 8020550:	4302      	orrs	r2, r0
 8020552:	f84a 2b04 	str.w	r2, [sl], #4
 8020556:	f853 2b04 	ldr.w	r2, [r3], #4
 802055a:	459c      	cmp	ip, r3
 802055c:	fa22 f20e 	lsr.w	r2, r2, lr
 8020560:	d8f3      	bhi.n	802054a <__lshift+0x6e>
 8020562:	ebac 0304 	sub.w	r3, ip, r4
 8020566:	3b15      	subs	r3, #21
 8020568:	f023 0303 	bic.w	r3, r3, #3
 802056c:	3304      	adds	r3, #4
 802056e:	f104 0015 	add.w	r0, r4, #21
 8020572:	4584      	cmp	ip, r0
 8020574:	bf38      	it	cc
 8020576:	2304      	movcc	r3, #4
 8020578:	50ca      	str	r2, [r1, r3]
 802057a:	b10a      	cbz	r2, 8020580 <__lshift+0xa4>
 802057c:	f108 0602 	add.w	r6, r8, #2
 8020580:	3e01      	subs	r6, #1
 8020582:	4638      	mov	r0, r7
 8020584:	612e      	str	r6, [r5, #16]
 8020586:	4621      	mov	r1, r4
 8020588:	f7ff fe09 	bl	802019e <_Bfree>
 802058c:	4628      	mov	r0, r5
 802058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020592:	f842 0f04 	str.w	r0, [r2, #4]!
 8020596:	3301      	adds	r3, #1
 8020598:	e7c5      	b.n	8020526 <__lshift+0x4a>
 802059a:	3904      	subs	r1, #4
 802059c:	f853 2b04 	ldr.w	r2, [r3], #4
 80205a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80205a4:	459c      	cmp	ip, r3
 80205a6:	d8f9      	bhi.n	802059c <__lshift+0xc0>
 80205a8:	e7ea      	b.n	8020580 <__lshift+0xa4>
 80205aa:	bf00      	nop
 80205ac:	08029975 	.word	0x08029975
 80205b0:	080299e5 	.word	0x080299e5

080205b4 <__mcmp>:
 80205b4:	b530      	push	{r4, r5, lr}
 80205b6:	6902      	ldr	r2, [r0, #16]
 80205b8:	690c      	ldr	r4, [r1, #16]
 80205ba:	1b12      	subs	r2, r2, r4
 80205bc:	d10e      	bne.n	80205dc <__mcmp+0x28>
 80205be:	f100 0314 	add.w	r3, r0, #20
 80205c2:	3114      	adds	r1, #20
 80205c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80205c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80205cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80205d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80205d4:	42a5      	cmp	r5, r4
 80205d6:	d003      	beq.n	80205e0 <__mcmp+0x2c>
 80205d8:	d305      	bcc.n	80205e6 <__mcmp+0x32>
 80205da:	2201      	movs	r2, #1
 80205dc:	4610      	mov	r0, r2
 80205de:	bd30      	pop	{r4, r5, pc}
 80205e0:	4283      	cmp	r3, r0
 80205e2:	d3f3      	bcc.n	80205cc <__mcmp+0x18>
 80205e4:	e7fa      	b.n	80205dc <__mcmp+0x28>
 80205e6:	f04f 32ff 	mov.w	r2, #4294967295
 80205ea:	e7f7      	b.n	80205dc <__mcmp+0x28>

080205ec <__mdiff>:
 80205ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205f0:	460c      	mov	r4, r1
 80205f2:	4606      	mov	r6, r0
 80205f4:	4611      	mov	r1, r2
 80205f6:	4620      	mov	r0, r4
 80205f8:	4617      	mov	r7, r2
 80205fa:	f7ff ffdb 	bl	80205b4 <__mcmp>
 80205fe:	1e05      	subs	r5, r0, #0
 8020600:	d110      	bne.n	8020624 <__mdiff+0x38>
 8020602:	4629      	mov	r1, r5
 8020604:	4630      	mov	r0, r6
 8020606:	f7ff fda5 	bl	8020154 <_Balloc>
 802060a:	b930      	cbnz	r0, 802061a <__mdiff+0x2e>
 802060c:	4b39      	ldr	r3, [pc, #228]	; (80206f4 <__mdiff+0x108>)
 802060e:	4602      	mov	r2, r0
 8020610:	f240 2132 	movw	r1, #562	; 0x232
 8020614:	4838      	ldr	r0, [pc, #224]	; (80206f8 <__mdiff+0x10c>)
 8020616:	f002 f85d 	bl	80226d4 <__assert_func>
 802061a:	2301      	movs	r3, #1
 802061c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020624:	bfa4      	itt	ge
 8020626:	463b      	movge	r3, r7
 8020628:	4627      	movge	r7, r4
 802062a:	4630      	mov	r0, r6
 802062c:	6879      	ldr	r1, [r7, #4]
 802062e:	bfa6      	itte	ge
 8020630:	461c      	movge	r4, r3
 8020632:	2500      	movge	r5, #0
 8020634:	2501      	movlt	r5, #1
 8020636:	f7ff fd8d 	bl	8020154 <_Balloc>
 802063a:	b920      	cbnz	r0, 8020646 <__mdiff+0x5a>
 802063c:	4b2d      	ldr	r3, [pc, #180]	; (80206f4 <__mdiff+0x108>)
 802063e:	4602      	mov	r2, r0
 8020640:	f44f 7110 	mov.w	r1, #576	; 0x240
 8020644:	e7e6      	b.n	8020614 <__mdiff+0x28>
 8020646:	693e      	ldr	r6, [r7, #16]
 8020648:	60c5      	str	r5, [r0, #12]
 802064a:	6925      	ldr	r5, [r4, #16]
 802064c:	f107 0114 	add.w	r1, r7, #20
 8020650:	f104 0914 	add.w	r9, r4, #20
 8020654:	f100 0e14 	add.w	lr, r0, #20
 8020658:	f107 0210 	add.w	r2, r7, #16
 802065c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020660:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020664:	46f2      	mov	sl, lr
 8020666:	2700      	movs	r7, #0
 8020668:	f859 3b04 	ldr.w	r3, [r9], #4
 802066c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020670:	fa1f f883 	uxth.w	r8, r3
 8020674:	fa17 f78b 	uxtah	r7, r7, fp
 8020678:	0c1b      	lsrs	r3, r3, #16
 802067a:	eba7 0808 	sub.w	r8, r7, r8
 802067e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020682:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020686:	fa1f f888 	uxth.w	r8, r8
 802068a:	141f      	asrs	r7, r3, #16
 802068c:	454d      	cmp	r5, r9
 802068e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020692:	f84a 3b04 	str.w	r3, [sl], #4
 8020696:	d8e7      	bhi.n	8020668 <__mdiff+0x7c>
 8020698:	1b2b      	subs	r3, r5, r4
 802069a:	3b15      	subs	r3, #21
 802069c:	f023 0303 	bic.w	r3, r3, #3
 80206a0:	3304      	adds	r3, #4
 80206a2:	3415      	adds	r4, #21
 80206a4:	42a5      	cmp	r5, r4
 80206a6:	bf38      	it	cc
 80206a8:	2304      	movcc	r3, #4
 80206aa:	4419      	add	r1, r3
 80206ac:	4473      	add	r3, lr
 80206ae:	469e      	mov	lr, r3
 80206b0:	460d      	mov	r5, r1
 80206b2:	4565      	cmp	r5, ip
 80206b4:	d30e      	bcc.n	80206d4 <__mdiff+0xe8>
 80206b6:	f10c 0203 	add.w	r2, ip, #3
 80206ba:	1a52      	subs	r2, r2, r1
 80206bc:	f022 0203 	bic.w	r2, r2, #3
 80206c0:	3903      	subs	r1, #3
 80206c2:	458c      	cmp	ip, r1
 80206c4:	bf38      	it	cc
 80206c6:	2200      	movcc	r2, #0
 80206c8:	441a      	add	r2, r3
 80206ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80206ce:	b17b      	cbz	r3, 80206f0 <__mdiff+0x104>
 80206d0:	6106      	str	r6, [r0, #16]
 80206d2:	e7a5      	b.n	8020620 <__mdiff+0x34>
 80206d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80206d8:	fa17 f488 	uxtah	r4, r7, r8
 80206dc:	1422      	asrs	r2, r4, #16
 80206de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80206e2:	b2a4      	uxth	r4, r4
 80206e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80206e8:	f84e 4b04 	str.w	r4, [lr], #4
 80206ec:	1417      	asrs	r7, r2, #16
 80206ee:	e7e0      	b.n	80206b2 <__mdiff+0xc6>
 80206f0:	3e01      	subs	r6, #1
 80206f2:	e7ea      	b.n	80206ca <__mdiff+0xde>
 80206f4:	08029975 	.word	0x08029975
 80206f8:	080299e5 	.word	0x080299e5

080206fc <__d2b>:
 80206fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020700:	4689      	mov	r9, r1
 8020702:	2101      	movs	r1, #1
 8020704:	ec57 6b10 	vmov	r6, r7, d0
 8020708:	4690      	mov	r8, r2
 802070a:	f7ff fd23 	bl	8020154 <_Balloc>
 802070e:	4604      	mov	r4, r0
 8020710:	b930      	cbnz	r0, 8020720 <__d2b+0x24>
 8020712:	4602      	mov	r2, r0
 8020714:	4b25      	ldr	r3, [pc, #148]	; (80207ac <__d2b+0xb0>)
 8020716:	4826      	ldr	r0, [pc, #152]	; (80207b0 <__d2b+0xb4>)
 8020718:	f240 310a 	movw	r1, #778	; 0x30a
 802071c:	f001 ffda 	bl	80226d4 <__assert_func>
 8020720:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020724:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020728:	bb35      	cbnz	r5, 8020778 <__d2b+0x7c>
 802072a:	2e00      	cmp	r6, #0
 802072c:	9301      	str	r3, [sp, #4]
 802072e:	d028      	beq.n	8020782 <__d2b+0x86>
 8020730:	4668      	mov	r0, sp
 8020732:	9600      	str	r6, [sp, #0]
 8020734:	f7ff fda6 	bl	8020284 <__lo0bits>
 8020738:	9900      	ldr	r1, [sp, #0]
 802073a:	b300      	cbz	r0, 802077e <__d2b+0x82>
 802073c:	9a01      	ldr	r2, [sp, #4]
 802073e:	f1c0 0320 	rsb	r3, r0, #32
 8020742:	fa02 f303 	lsl.w	r3, r2, r3
 8020746:	430b      	orrs	r3, r1
 8020748:	40c2      	lsrs	r2, r0
 802074a:	6163      	str	r3, [r4, #20]
 802074c:	9201      	str	r2, [sp, #4]
 802074e:	9b01      	ldr	r3, [sp, #4]
 8020750:	61a3      	str	r3, [r4, #24]
 8020752:	2b00      	cmp	r3, #0
 8020754:	bf14      	ite	ne
 8020756:	2202      	movne	r2, #2
 8020758:	2201      	moveq	r2, #1
 802075a:	6122      	str	r2, [r4, #16]
 802075c:	b1d5      	cbz	r5, 8020794 <__d2b+0x98>
 802075e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020762:	4405      	add	r5, r0
 8020764:	f8c9 5000 	str.w	r5, [r9]
 8020768:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802076c:	f8c8 0000 	str.w	r0, [r8]
 8020770:	4620      	mov	r0, r4
 8020772:	b003      	add	sp, #12
 8020774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802077c:	e7d5      	b.n	802072a <__d2b+0x2e>
 802077e:	6161      	str	r1, [r4, #20]
 8020780:	e7e5      	b.n	802074e <__d2b+0x52>
 8020782:	a801      	add	r0, sp, #4
 8020784:	f7ff fd7e 	bl	8020284 <__lo0bits>
 8020788:	9b01      	ldr	r3, [sp, #4]
 802078a:	6163      	str	r3, [r4, #20]
 802078c:	2201      	movs	r2, #1
 802078e:	6122      	str	r2, [r4, #16]
 8020790:	3020      	adds	r0, #32
 8020792:	e7e3      	b.n	802075c <__d2b+0x60>
 8020794:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020798:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802079c:	f8c9 0000 	str.w	r0, [r9]
 80207a0:	6918      	ldr	r0, [r3, #16]
 80207a2:	f7ff fd4f 	bl	8020244 <__hi0bits>
 80207a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80207aa:	e7df      	b.n	802076c <__d2b+0x70>
 80207ac:	08029975 	.word	0x08029975
 80207b0:	080299e5 	.word	0x080299e5

080207b4 <frexp>:
 80207b4:	b570      	push	{r4, r5, r6, lr}
 80207b6:	2100      	movs	r1, #0
 80207b8:	ec55 4b10 	vmov	r4, r5, d0
 80207bc:	6001      	str	r1, [r0, #0]
 80207be:	4916      	ldr	r1, [pc, #88]	; (8020818 <frexp+0x64>)
 80207c0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80207c4:	428a      	cmp	r2, r1
 80207c6:	4606      	mov	r6, r0
 80207c8:	462b      	mov	r3, r5
 80207ca:	dc22      	bgt.n	8020812 <frexp+0x5e>
 80207cc:	ee10 1a10 	vmov	r1, s0
 80207d0:	4311      	orrs	r1, r2
 80207d2:	d01e      	beq.n	8020812 <frexp+0x5e>
 80207d4:	4911      	ldr	r1, [pc, #68]	; (802081c <frexp+0x68>)
 80207d6:	4029      	ands	r1, r5
 80207d8:	b969      	cbnz	r1, 80207f6 <frexp+0x42>
 80207da:	4b11      	ldr	r3, [pc, #68]	; (8020820 <frexp+0x6c>)
 80207dc:	2200      	movs	r2, #0
 80207de:	ee10 0a10 	vmov	r0, s0
 80207e2:	4629      	mov	r1, r5
 80207e4:	f7df ff38 	bl	8000658 <__aeabi_dmul>
 80207e8:	460b      	mov	r3, r1
 80207ea:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80207ee:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80207f2:	4604      	mov	r4, r0
 80207f4:	6031      	str	r1, [r6, #0]
 80207f6:	6831      	ldr	r1, [r6, #0]
 80207f8:	1512      	asrs	r2, r2, #20
 80207fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80207fe:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8020802:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020806:	440a      	add	r2, r1
 8020808:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 802080c:	6032      	str	r2, [r6, #0]
 802080e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8020812:	ec45 4b10 	vmov	d0, r4, r5
 8020816:	bd70      	pop	{r4, r5, r6, pc}
 8020818:	7fefffff 	.word	0x7fefffff
 802081c:	7ff00000 	.word	0x7ff00000
 8020820:	43500000 	.word	0x43500000

08020824 <_sbrk_r>:
 8020824:	b538      	push	{r3, r4, r5, lr}
 8020826:	4d06      	ldr	r5, [pc, #24]	; (8020840 <_sbrk_r+0x1c>)
 8020828:	2300      	movs	r3, #0
 802082a:	4604      	mov	r4, r0
 802082c:	4608      	mov	r0, r1
 802082e:	602b      	str	r3, [r5, #0]
 8020830:	f7e3 faa0 	bl	8003d74 <_sbrk>
 8020834:	1c43      	adds	r3, r0, #1
 8020836:	d102      	bne.n	802083e <_sbrk_r+0x1a>
 8020838:	682b      	ldr	r3, [r5, #0]
 802083a:	b103      	cbz	r3, 802083e <_sbrk_r+0x1a>
 802083c:	6023      	str	r3, [r4, #0]
 802083e:	bd38      	pop	{r3, r4, r5, pc}
 8020840:	2000be5c 	.word	0x2000be5c

08020844 <siscanf>:
 8020844:	b40e      	push	{r1, r2, r3}
 8020846:	b510      	push	{r4, lr}
 8020848:	b09f      	sub	sp, #124	; 0x7c
 802084a:	ac21      	add	r4, sp, #132	; 0x84
 802084c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020850:	f854 2b04 	ldr.w	r2, [r4], #4
 8020854:	9201      	str	r2, [sp, #4]
 8020856:	f8ad 101c 	strh.w	r1, [sp, #28]
 802085a:	9004      	str	r0, [sp, #16]
 802085c:	9008      	str	r0, [sp, #32]
 802085e:	f7df fce1 	bl	8000224 <strlen>
 8020862:	4b0c      	ldr	r3, [pc, #48]	; (8020894 <siscanf+0x50>)
 8020864:	9005      	str	r0, [sp, #20]
 8020866:	9009      	str	r0, [sp, #36]	; 0x24
 8020868:	930c      	str	r3, [sp, #48]	; 0x30
 802086a:	480b      	ldr	r0, [pc, #44]	; (8020898 <siscanf+0x54>)
 802086c:	9a01      	ldr	r2, [sp, #4]
 802086e:	6800      	ldr	r0, [r0, #0]
 8020870:	9403      	str	r4, [sp, #12]
 8020872:	2300      	movs	r3, #0
 8020874:	9310      	str	r3, [sp, #64]	; 0x40
 8020876:	9315      	str	r3, [sp, #84]	; 0x54
 8020878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802087c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020880:	a904      	add	r1, sp, #16
 8020882:	4623      	mov	r3, r4
 8020884:	f000 f9ee 	bl	8020c64 <__ssvfiscanf_r>
 8020888:	b01f      	add	sp, #124	; 0x7c
 802088a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802088e:	b003      	add	sp, #12
 8020890:	4770      	bx	lr
 8020892:	bf00      	nop
 8020894:	080208bf 	.word	0x080208bf
 8020898:	20000038 	.word	0x20000038

0802089c <__sread>:
 802089c:	b510      	push	{r4, lr}
 802089e:	460c      	mov	r4, r1
 80208a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208a4:	f002 fa12 	bl	8022ccc <_read_r>
 80208a8:	2800      	cmp	r0, #0
 80208aa:	bfab      	itete	ge
 80208ac:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80208ae:	89a3      	ldrhlt	r3, [r4, #12]
 80208b0:	181b      	addge	r3, r3, r0
 80208b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80208b6:	bfac      	ite	ge
 80208b8:	6523      	strge	r3, [r4, #80]	; 0x50
 80208ba:	81a3      	strhlt	r3, [r4, #12]
 80208bc:	bd10      	pop	{r4, pc}

080208be <__seofread>:
 80208be:	2000      	movs	r0, #0
 80208c0:	4770      	bx	lr

080208c2 <__swrite>:
 80208c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208c6:	461f      	mov	r7, r3
 80208c8:	898b      	ldrh	r3, [r1, #12]
 80208ca:	05db      	lsls	r3, r3, #23
 80208cc:	4605      	mov	r5, r0
 80208ce:	460c      	mov	r4, r1
 80208d0:	4616      	mov	r6, r2
 80208d2:	d505      	bpl.n	80208e0 <__swrite+0x1e>
 80208d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208d8:	2302      	movs	r3, #2
 80208da:	2200      	movs	r2, #0
 80208dc:	f002 f9b8 	bl	8022c50 <_lseek_r>
 80208e0:	89a3      	ldrh	r3, [r4, #12]
 80208e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80208e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80208ea:	81a3      	strh	r3, [r4, #12]
 80208ec:	4632      	mov	r2, r6
 80208ee:	463b      	mov	r3, r7
 80208f0:	4628      	mov	r0, r5
 80208f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80208f6:	f001 be9b 	b.w	8022630 <_write_r>

080208fa <__sseek>:
 80208fa:	b510      	push	{r4, lr}
 80208fc:	460c      	mov	r4, r1
 80208fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020902:	f002 f9a5 	bl	8022c50 <_lseek_r>
 8020906:	1c43      	adds	r3, r0, #1
 8020908:	89a3      	ldrh	r3, [r4, #12]
 802090a:	bf15      	itete	ne
 802090c:	6520      	strne	r0, [r4, #80]	; 0x50
 802090e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020916:	81a3      	strheq	r3, [r4, #12]
 8020918:	bf18      	it	ne
 802091a:	81a3      	strhne	r3, [r4, #12]
 802091c:	bd10      	pop	{r4, pc}

0802091e <__sclose>:
 802091e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020922:	f001 bf23 	b.w	802276c <_close_r>

08020926 <strcpy>:
 8020926:	4603      	mov	r3, r0
 8020928:	f811 2b01 	ldrb.w	r2, [r1], #1
 802092c:	f803 2b01 	strb.w	r2, [r3], #1
 8020930:	2a00      	cmp	r2, #0
 8020932:	d1f9      	bne.n	8020928 <strcpy+0x2>
 8020934:	4770      	bx	lr
	...

08020938 <_strtoul_l.isra.0>:
 8020938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802093c:	4e3b      	ldr	r6, [pc, #236]	; (8020a2c <_strtoul_l.isra.0+0xf4>)
 802093e:	4686      	mov	lr, r0
 8020940:	468c      	mov	ip, r1
 8020942:	4660      	mov	r0, ip
 8020944:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020948:	5da5      	ldrb	r5, [r4, r6]
 802094a:	f015 0508 	ands.w	r5, r5, #8
 802094e:	d1f8      	bne.n	8020942 <_strtoul_l.isra.0+0xa>
 8020950:	2c2d      	cmp	r4, #45	; 0x2d
 8020952:	d134      	bne.n	80209be <_strtoul_l.isra.0+0x86>
 8020954:	f89c 4000 	ldrb.w	r4, [ip]
 8020958:	f04f 0801 	mov.w	r8, #1
 802095c:	f100 0c02 	add.w	ip, r0, #2
 8020960:	2b00      	cmp	r3, #0
 8020962:	d05e      	beq.n	8020a22 <_strtoul_l.isra.0+0xea>
 8020964:	2b10      	cmp	r3, #16
 8020966:	d10c      	bne.n	8020982 <_strtoul_l.isra.0+0x4a>
 8020968:	2c30      	cmp	r4, #48	; 0x30
 802096a:	d10a      	bne.n	8020982 <_strtoul_l.isra.0+0x4a>
 802096c:	f89c 0000 	ldrb.w	r0, [ip]
 8020970:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020974:	2858      	cmp	r0, #88	; 0x58
 8020976:	d14f      	bne.n	8020a18 <_strtoul_l.isra.0+0xe0>
 8020978:	f89c 4001 	ldrb.w	r4, [ip, #1]
 802097c:	2310      	movs	r3, #16
 802097e:	f10c 0c02 	add.w	ip, ip, #2
 8020982:	f04f 37ff 	mov.w	r7, #4294967295
 8020986:	2500      	movs	r5, #0
 8020988:	fbb7 f7f3 	udiv	r7, r7, r3
 802098c:	fb03 f907 	mul.w	r9, r3, r7
 8020990:	ea6f 0909 	mvn.w	r9, r9
 8020994:	4628      	mov	r0, r5
 8020996:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802099a:	2e09      	cmp	r6, #9
 802099c:	d818      	bhi.n	80209d0 <_strtoul_l.isra.0+0x98>
 802099e:	4634      	mov	r4, r6
 80209a0:	42a3      	cmp	r3, r4
 80209a2:	dd24      	ble.n	80209ee <_strtoul_l.isra.0+0xb6>
 80209a4:	2d00      	cmp	r5, #0
 80209a6:	db1f      	blt.n	80209e8 <_strtoul_l.isra.0+0xb0>
 80209a8:	4287      	cmp	r7, r0
 80209aa:	d31d      	bcc.n	80209e8 <_strtoul_l.isra.0+0xb0>
 80209ac:	d101      	bne.n	80209b2 <_strtoul_l.isra.0+0x7a>
 80209ae:	45a1      	cmp	r9, r4
 80209b0:	db1a      	blt.n	80209e8 <_strtoul_l.isra.0+0xb0>
 80209b2:	fb00 4003 	mla	r0, r0, r3, r4
 80209b6:	2501      	movs	r5, #1
 80209b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80209bc:	e7eb      	b.n	8020996 <_strtoul_l.isra.0+0x5e>
 80209be:	2c2b      	cmp	r4, #43	; 0x2b
 80209c0:	bf08      	it	eq
 80209c2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80209c6:	46a8      	mov	r8, r5
 80209c8:	bf08      	it	eq
 80209ca:	f100 0c02 	addeq.w	ip, r0, #2
 80209ce:	e7c7      	b.n	8020960 <_strtoul_l.isra.0+0x28>
 80209d0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80209d4:	2e19      	cmp	r6, #25
 80209d6:	d801      	bhi.n	80209dc <_strtoul_l.isra.0+0xa4>
 80209d8:	3c37      	subs	r4, #55	; 0x37
 80209da:	e7e1      	b.n	80209a0 <_strtoul_l.isra.0+0x68>
 80209dc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80209e0:	2e19      	cmp	r6, #25
 80209e2:	d804      	bhi.n	80209ee <_strtoul_l.isra.0+0xb6>
 80209e4:	3c57      	subs	r4, #87	; 0x57
 80209e6:	e7db      	b.n	80209a0 <_strtoul_l.isra.0+0x68>
 80209e8:	f04f 35ff 	mov.w	r5, #4294967295
 80209ec:	e7e4      	b.n	80209b8 <_strtoul_l.isra.0+0x80>
 80209ee:	2d00      	cmp	r5, #0
 80209f0:	da07      	bge.n	8020a02 <_strtoul_l.isra.0+0xca>
 80209f2:	2322      	movs	r3, #34	; 0x22
 80209f4:	f8ce 3000 	str.w	r3, [lr]
 80209f8:	f04f 30ff 	mov.w	r0, #4294967295
 80209fc:	b942      	cbnz	r2, 8020a10 <_strtoul_l.isra.0+0xd8>
 80209fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020a02:	f1b8 0f00 	cmp.w	r8, #0
 8020a06:	d000      	beq.n	8020a0a <_strtoul_l.isra.0+0xd2>
 8020a08:	4240      	negs	r0, r0
 8020a0a:	2a00      	cmp	r2, #0
 8020a0c:	d0f7      	beq.n	80209fe <_strtoul_l.isra.0+0xc6>
 8020a0e:	b10d      	cbz	r5, 8020a14 <_strtoul_l.isra.0+0xdc>
 8020a10:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020a14:	6011      	str	r1, [r2, #0]
 8020a16:	e7f2      	b.n	80209fe <_strtoul_l.isra.0+0xc6>
 8020a18:	2430      	movs	r4, #48	; 0x30
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d1b1      	bne.n	8020982 <_strtoul_l.isra.0+0x4a>
 8020a1e:	2308      	movs	r3, #8
 8020a20:	e7af      	b.n	8020982 <_strtoul_l.isra.0+0x4a>
 8020a22:	2c30      	cmp	r4, #48	; 0x30
 8020a24:	d0a2      	beq.n	802096c <_strtoul_l.isra.0+0x34>
 8020a26:	230a      	movs	r3, #10
 8020a28:	e7ab      	b.n	8020982 <_strtoul_l.isra.0+0x4a>
 8020a2a:	bf00      	nop
 8020a2c:	080296f1 	.word	0x080296f1

08020a30 <_strtoul_r>:
 8020a30:	f7ff bf82 	b.w	8020938 <_strtoul_l.isra.0>

08020a34 <strtoul>:
 8020a34:	4613      	mov	r3, r2
 8020a36:	460a      	mov	r2, r1
 8020a38:	4601      	mov	r1, r0
 8020a3a:	4802      	ldr	r0, [pc, #8]	; (8020a44 <strtoul+0x10>)
 8020a3c:	6800      	ldr	r0, [r0, #0]
 8020a3e:	f7ff bf7b 	b.w	8020938 <_strtoul_l.isra.0>
 8020a42:	bf00      	nop
 8020a44:	20000038 	.word	0x20000038

08020a48 <__ssprint_r>:
 8020a48:	6893      	ldr	r3, [r2, #8]
 8020a4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a4e:	4680      	mov	r8, r0
 8020a50:	460c      	mov	r4, r1
 8020a52:	4617      	mov	r7, r2
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d061      	beq.n	8020b1c <__ssprint_r+0xd4>
 8020a58:	2300      	movs	r3, #0
 8020a5a:	f8d2 a000 	ldr.w	sl, [r2]
 8020a5e:	9301      	str	r3, [sp, #4]
 8020a60:	469b      	mov	fp, r3
 8020a62:	f1bb 0f00 	cmp.w	fp, #0
 8020a66:	d02b      	beq.n	8020ac0 <__ssprint_r+0x78>
 8020a68:	68a6      	ldr	r6, [r4, #8]
 8020a6a:	45b3      	cmp	fp, r6
 8020a6c:	d342      	bcc.n	8020af4 <__ssprint_r+0xac>
 8020a6e:	89a2      	ldrh	r2, [r4, #12]
 8020a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020a74:	d03e      	beq.n	8020af4 <__ssprint_r+0xac>
 8020a76:	6825      	ldr	r5, [r4, #0]
 8020a78:	6921      	ldr	r1, [r4, #16]
 8020a7a:	eba5 0901 	sub.w	r9, r5, r1
 8020a7e:	6965      	ldr	r5, [r4, #20]
 8020a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020a88:	f109 0001 	add.w	r0, r9, #1
 8020a8c:	106d      	asrs	r5, r5, #1
 8020a8e:	4458      	add	r0, fp
 8020a90:	4285      	cmp	r5, r0
 8020a92:	bf38      	it	cc
 8020a94:	4605      	movcc	r5, r0
 8020a96:	0553      	lsls	r3, r2, #21
 8020a98:	d545      	bpl.n	8020b26 <__ssprint_r+0xde>
 8020a9a:	4629      	mov	r1, r5
 8020a9c:	4640      	mov	r0, r8
 8020a9e:	f7ff f90b 	bl	801fcb8 <_malloc_r>
 8020aa2:	4606      	mov	r6, r0
 8020aa4:	b9a0      	cbnz	r0, 8020ad0 <__ssprint_r+0x88>
 8020aa6:	230c      	movs	r3, #12
 8020aa8:	f8c8 3000 	str.w	r3, [r8]
 8020aac:	89a3      	ldrh	r3, [r4, #12]
 8020aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ab2:	81a3      	strh	r3, [r4, #12]
 8020ab4:	2300      	movs	r3, #0
 8020ab6:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8020aba:	f04f 30ff 	mov.w	r0, #4294967295
 8020abe:	e02f      	b.n	8020b20 <__ssprint_r+0xd8>
 8020ac0:	f8da 3000 	ldr.w	r3, [sl]
 8020ac4:	f8da b004 	ldr.w	fp, [sl, #4]
 8020ac8:	9301      	str	r3, [sp, #4]
 8020aca:	f10a 0a08 	add.w	sl, sl, #8
 8020ace:	e7c8      	b.n	8020a62 <__ssprint_r+0x1a>
 8020ad0:	464a      	mov	r2, r9
 8020ad2:	6921      	ldr	r1, [r4, #16]
 8020ad4:	f7fa fba2 	bl	801b21c <memcpy>
 8020ad8:	89a2      	ldrh	r2, [r4, #12]
 8020ada:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8020ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8020ae2:	81a2      	strh	r2, [r4, #12]
 8020ae4:	6126      	str	r6, [r4, #16]
 8020ae6:	6165      	str	r5, [r4, #20]
 8020ae8:	444e      	add	r6, r9
 8020aea:	eba5 0509 	sub.w	r5, r5, r9
 8020aee:	6026      	str	r6, [r4, #0]
 8020af0:	60a5      	str	r5, [r4, #8]
 8020af2:	465e      	mov	r6, fp
 8020af4:	455e      	cmp	r6, fp
 8020af6:	bf28      	it	cs
 8020af8:	465e      	movcs	r6, fp
 8020afa:	4632      	mov	r2, r6
 8020afc:	9901      	ldr	r1, [sp, #4]
 8020afe:	6820      	ldr	r0, [r4, #0]
 8020b00:	f7fa fb9a 	bl	801b238 <memmove>
 8020b04:	68a2      	ldr	r2, [r4, #8]
 8020b06:	1b92      	subs	r2, r2, r6
 8020b08:	60a2      	str	r2, [r4, #8]
 8020b0a:	6822      	ldr	r2, [r4, #0]
 8020b0c:	4432      	add	r2, r6
 8020b0e:	6022      	str	r2, [r4, #0]
 8020b10:	68ba      	ldr	r2, [r7, #8]
 8020b12:	eba2 030b 	sub.w	r3, r2, fp
 8020b16:	60bb      	str	r3, [r7, #8]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	d1d1      	bne.n	8020ac0 <__ssprint_r+0x78>
 8020b1c:	2000      	movs	r0, #0
 8020b1e:	6078      	str	r0, [r7, #4]
 8020b20:	b003      	add	sp, #12
 8020b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b26:	462a      	mov	r2, r5
 8020b28:	4640      	mov	r0, r8
 8020b2a:	f002 f8e9 	bl	8022d00 <_realloc_r>
 8020b2e:	4606      	mov	r6, r0
 8020b30:	2800      	cmp	r0, #0
 8020b32:	d1d7      	bne.n	8020ae4 <__ssprint_r+0x9c>
 8020b34:	6921      	ldr	r1, [r4, #16]
 8020b36:	4640      	mov	r0, r8
 8020b38:	f7fe fe62 	bl	801f800 <_free_r>
 8020b3c:	e7b3      	b.n	8020aa6 <__ssprint_r+0x5e>

08020b3e <_sungetc_r>:
 8020b3e:	b538      	push	{r3, r4, r5, lr}
 8020b40:	1c4b      	adds	r3, r1, #1
 8020b42:	4614      	mov	r4, r2
 8020b44:	d103      	bne.n	8020b4e <_sungetc_r+0x10>
 8020b46:	f04f 35ff 	mov.w	r5, #4294967295
 8020b4a:	4628      	mov	r0, r5
 8020b4c:	bd38      	pop	{r3, r4, r5, pc}
 8020b4e:	8993      	ldrh	r3, [r2, #12]
 8020b50:	f023 0320 	bic.w	r3, r3, #32
 8020b54:	8193      	strh	r3, [r2, #12]
 8020b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020b58:	6852      	ldr	r2, [r2, #4]
 8020b5a:	b2cd      	uxtb	r5, r1
 8020b5c:	b18b      	cbz	r3, 8020b82 <_sungetc_r+0x44>
 8020b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020b60:	4293      	cmp	r3, r2
 8020b62:	dd08      	ble.n	8020b76 <_sungetc_r+0x38>
 8020b64:	6823      	ldr	r3, [r4, #0]
 8020b66:	1e5a      	subs	r2, r3, #1
 8020b68:	6022      	str	r2, [r4, #0]
 8020b6a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020b6e:	6863      	ldr	r3, [r4, #4]
 8020b70:	3301      	adds	r3, #1
 8020b72:	6063      	str	r3, [r4, #4]
 8020b74:	e7e9      	b.n	8020b4a <_sungetc_r+0xc>
 8020b76:	4621      	mov	r1, r4
 8020b78:	f001 f825 	bl	8021bc6 <__submore>
 8020b7c:	2800      	cmp	r0, #0
 8020b7e:	d0f1      	beq.n	8020b64 <_sungetc_r+0x26>
 8020b80:	e7e1      	b.n	8020b46 <_sungetc_r+0x8>
 8020b82:	6921      	ldr	r1, [r4, #16]
 8020b84:	6823      	ldr	r3, [r4, #0]
 8020b86:	b151      	cbz	r1, 8020b9e <_sungetc_r+0x60>
 8020b88:	4299      	cmp	r1, r3
 8020b8a:	d208      	bcs.n	8020b9e <_sungetc_r+0x60>
 8020b8c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020b90:	42a9      	cmp	r1, r5
 8020b92:	d104      	bne.n	8020b9e <_sungetc_r+0x60>
 8020b94:	3b01      	subs	r3, #1
 8020b96:	3201      	adds	r2, #1
 8020b98:	6023      	str	r3, [r4, #0]
 8020b9a:	6062      	str	r2, [r4, #4]
 8020b9c:	e7d5      	b.n	8020b4a <_sungetc_r+0xc>
 8020b9e:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8020ba2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8020ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8020ba8:	2303      	movs	r3, #3
 8020baa:	6363      	str	r3, [r4, #52]	; 0x34
 8020bac:	4623      	mov	r3, r4
 8020bae:	f803 5f42 	strb.w	r5, [r3, #66]!
 8020bb2:	6023      	str	r3, [r4, #0]
 8020bb4:	2301      	movs	r3, #1
 8020bb6:	e7dc      	b.n	8020b72 <_sungetc_r+0x34>

08020bb8 <__ssrefill_r>:
 8020bb8:	b510      	push	{r4, lr}
 8020bba:	460c      	mov	r4, r1
 8020bbc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8020bbe:	b169      	cbz	r1, 8020bdc <__ssrefill_r+0x24>
 8020bc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8020bc4:	4299      	cmp	r1, r3
 8020bc6:	d001      	beq.n	8020bcc <__ssrefill_r+0x14>
 8020bc8:	f7fe fe1a 	bl	801f800 <_free_r>
 8020bcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020bce:	6063      	str	r3, [r4, #4]
 8020bd0:	2000      	movs	r0, #0
 8020bd2:	6320      	str	r0, [r4, #48]	; 0x30
 8020bd4:	b113      	cbz	r3, 8020bdc <__ssrefill_r+0x24>
 8020bd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020bd8:	6023      	str	r3, [r4, #0]
 8020bda:	bd10      	pop	{r4, pc}
 8020bdc:	6923      	ldr	r3, [r4, #16]
 8020bde:	6023      	str	r3, [r4, #0]
 8020be0:	2300      	movs	r3, #0
 8020be2:	6063      	str	r3, [r4, #4]
 8020be4:	89a3      	ldrh	r3, [r4, #12]
 8020be6:	f043 0320 	orr.w	r3, r3, #32
 8020bea:	81a3      	strh	r3, [r4, #12]
 8020bec:	f04f 30ff 	mov.w	r0, #4294967295
 8020bf0:	e7f3      	b.n	8020bda <__ssrefill_r+0x22>

08020bf2 <_sfread_r>:
 8020bf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bf6:	461f      	mov	r7, r3
 8020bf8:	4613      	mov	r3, r2
 8020bfa:	437b      	muls	r3, r7
 8020bfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020bfe:	4682      	mov	sl, r0
 8020c00:	4688      	mov	r8, r1
 8020c02:	4691      	mov	r9, r2
 8020c04:	d027      	beq.n	8020c56 <_sfread_r+0x64>
 8020c06:	461e      	mov	r6, r3
 8020c08:	e9d4 1500 	ldrd	r1, r5, [r4]
 8020c0c:	42b5      	cmp	r5, r6
 8020c0e:	d30b      	bcc.n	8020c28 <_sfread_r+0x36>
 8020c10:	4632      	mov	r2, r6
 8020c12:	4640      	mov	r0, r8
 8020c14:	f7fa fb02 	bl	801b21c <memcpy>
 8020c18:	6862      	ldr	r2, [r4, #4]
 8020c1a:	1b92      	subs	r2, r2, r6
 8020c1c:	6062      	str	r2, [r4, #4]
 8020c1e:	6822      	ldr	r2, [r4, #0]
 8020c20:	4432      	add	r2, r6
 8020c22:	6022      	str	r2, [r4, #0]
 8020c24:	463b      	mov	r3, r7
 8020c26:	e016      	b.n	8020c56 <_sfread_r+0x64>
 8020c28:	462a      	mov	r2, r5
 8020c2a:	4640      	mov	r0, r8
 8020c2c:	9301      	str	r3, [sp, #4]
 8020c2e:	f7fa faf5 	bl	801b21c <memcpy>
 8020c32:	6822      	ldr	r2, [r4, #0]
 8020c34:	2300      	movs	r3, #0
 8020c36:	442a      	add	r2, r5
 8020c38:	6063      	str	r3, [r4, #4]
 8020c3a:	6022      	str	r2, [r4, #0]
 8020c3c:	4621      	mov	r1, r4
 8020c3e:	4650      	mov	r0, sl
 8020c40:	f7ff ffba 	bl	8020bb8 <__ssrefill_r>
 8020c44:	44a8      	add	r8, r5
 8020c46:	9b01      	ldr	r3, [sp, #4]
 8020c48:	eba6 0b05 	sub.w	fp, r6, r5
 8020c4c:	b138      	cbz	r0, 8020c5e <_sfread_r+0x6c>
 8020c4e:	441d      	add	r5, r3
 8020c50:	1bad      	subs	r5, r5, r6
 8020c52:	fbb5 f3f9 	udiv	r3, r5, r9
 8020c56:	4618      	mov	r0, r3
 8020c58:	b003      	add	sp, #12
 8020c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c5e:	465e      	mov	r6, fp
 8020c60:	e7d2      	b.n	8020c08 <_sfread_r+0x16>
	...

08020c64 <__ssvfiscanf_r>:
 8020c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c68:	ed2d 8b02 	vpush	{d8}
 8020c6c:	b0df      	sub	sp, #380	; 0x17c
 8020c6e:	461e      	mov	r6, r3
 8020c70:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8020c74:	af02      	add	r7, sp, #8
 8020c76:	049d      	lsls	r5, r3, #18
 8020c78:	ee08 0a10 	vmov	s16, r0
 8020c7c:	460c      	mov	r4, r1
 8020c7e:	613a      	str	r2, [r7, #16]
 8020c80:	d406      	bmi.n	8020c90 <__ssvfiscanf_r+0x2c>
 8020c82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020c86:	818b      	strh	r3, [r1, #12]
 8020c88:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8020c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020c8e:	664b      	str	r3, [r1, #100]	; 0x64
 8020c90:	2300      	movs	r3, #0
 8020c92:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8020c96:	617b      	str	r3, [r7, #20]
 8020c98:	469b      	mov	fp, r3
 8020c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8020c9e:	693a      	ldr	r2, [r7, #16]
 8020ca0:	f812 3b01 	ldrb.w	r3, [r2], #1
 8020ca4:	613a      	str	r2, [r7, #16]
 8020ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d035      	beq.n	8020d18 <__ssvfiscanf_r+0xb4>
 8020cac:	4a9f      	ldr	r2, [pc, #636]	; (8020f2c <__ssvfiscanf_r+0x2c8>)
 8020cae:	f813 9002 	ldrb.w	r9, [r3, r2]
 8020cb2:	f019 0908 	ands.w	r9, r9, #8
 8020cb6:	d019      	beq.n	8020cec <__ssvfiscanf_r+0x88>
 8020cb8:	6863      	ldr	r3, [r4, #4]
 8020cba:	2b00      	cmp	r3, #0
 8020cbc:	dd0e      	ble.n	8020cdc <__ssvfiscanf_r+0x78>
 8020cbe:	6823      	ldr	r3, [r4, #0]
 8020cc0:	499a      	ldr	r1, [pc, #616]	; (8020f2c <__ssvfiscanf_r+0x2c8>)
 8020cc2:	781a      	ldrb	r2, [r3, #0]
 8020cc4:	5c8a      	ldrb	r2, [r1, r2]
 8020cc6:	0710      	lsls	r0, r2, #28
 8020cc8:	d5e9      	bpl.n	8020c9e <__ssvfiscanf_r+0x3a>
 8020cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020ccc:	3201      	adds	r2, #1
 8020cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020cd0:	6862      	ldr	r2, [r4, #4]
 8020cd2:	3301      	adds	r3, #1
 8020cd4:	3a01      	subs	r2, #1
 8020cd6:	6062      	str	r2, [r4, #4]
 8020cd8:	6023      	str	r3, [r4, #0]
 8020cda:	e7ed      	b.n	8020cb8 <__ssvfiscanf_r+0x54>
 8020cdc:	ee18 0a10 	vmov	r0, s16
 8020ce0:	4621      	mov	r1, r4
 8020ce2:	f7ff ff69 	bl	8020bb8 <__ssrefill_r>
 8020ce6:	2800      	cmp	r0, #0
 8020ce8:	d0e9      	beq.n	8020cbe <__ssvfiscanf_r+0x5a>
 8020cea:	e7d8      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 8020cec:	2b25      	cmp	r3, #37	; 0x25
 8020cee:	f040 809f 	bne.w	8020e30 <__ssvfiscanf_r+0x1cc>
 8020cf2:	693b      	ldr	r3, [r7, #16]
 8020cf4:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 8020cf8:	220a      	movs	r2, #10
 8020cfa:	6939      	ldr	r1, [r7, #16]
 8020cfc:	781d      	ldrb	r5, [r3, #0]
 8020cfe:	3101      	adds	r1, #1
 8020d00:	2d7a      	cmp	r5, #122	; 0x7a
 8020d02:	6139      	str	r1, [r7, #16]
 8020d04:	d808      	bhi.n	8020d18 <__ssvfiscanf_r+0xb4>
 8020d06:	2d42      	cmp	r5, #66	; 0x42
 8020d08:	d80b      	bhi.n	8020d22 <__ssvfiscanf_r+0xbe>
 8020d0a:	2d2a      	cmp	r5, #42	; 0x2a
 8020d0c:	f000 80b9 	beq.w	8020e82 <__ssvfiscanf_r+0x21e>
 8020d10:	d87e      	bhi.n	8020e10 <__ssvfiscanf_r+0x1ac>
 8020d12:	2d25      	cmp	r5, #37	; 0x25
 8020d14:	f000 808c 	beq.w	8020e30 <__ssvfiscanf_r+0x1cc>
 8020d18:	f1bb 0f00 	cmp.w	fp, #0
 8020d1c:	f000 815f 	beq.w	8020fde <__ssvfiscanf_r+0x37a>
 8020d20:	e158      	b.n	8020fd4 <__ssvfiscanf_r+0x370>
 8020d22:	3d43      	subs	r5, #67	; 0x43
 8020d24:	2d37      	cmp	r5, #55	; 0x37
 8020d26:	d8f7      	bhi.n	8020d18 <__ssvfiscanf_r+0xb4>
 8020d28:	a101      	add	r1, pc, #4	; (adr r1, 8020d30 <__ssvfiscanf_r+0xcc>)
 8020d2a:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8020d2e:	bf00      	nop
 8020d30:	08021003 	.word	0x08021003
 8020d34:	08020eff 	.word	0x08020eff
 8020d38:	08020d19 	.word	0x08020d19
 8020d3c:	08020d19 	.word	0x08020d19
 8020d40:	08020d19 	.word	0x08020d19
 8020d44:	08020d19 	.word	0x08020d19
 8020d48:	08020d19 	.word	0x08020d19
 8020d4c:	08020d19 	.word	0x08020d19
 8020d50:	08020d19 	.word	0x08020d19
 8020d54:	08020ed1 	.word	0x08020ed1
 8020d58:	08020d19 	.word	0x08020d19
 8020d5c:	08020d19 	.word	0x08020d19
 8020d60:	08020f07 	.word	0x08020f07
 8020d64:	08020d19 	.word	0x08020d19
 8020d68:	08020d19 	.word	0x08020d19
 8020d6c:	08020d19 	.word	0x08020d19
 8020d70:	08020f39 	.word	0x08020f39
 8020d74:	08020d19 	.word	0x08020d19
 8020d78:	08020d19 	.word	0x08020d19
 8020d7c:	08020d19 	.word	0x08020d19
 8020d80:	08020d19 	.word	0x08020d19
 8020d84:	08020f1f 	.word	0x08020f1f
 8020d88:	08020d19 	.word	0x08020d19
 8020d8c:	08020d19 	.word	0x08020d19
 8020d90:	08020fef 	.word	0x08020fef
 8020d94:	08020d19 	.word	0x08020d19
 8020d98:	08020d19 	.word	0x08020d19
 8020d9c:	08020d19 	.word	0x08020d19
 8020da0:	08020d19 	.word	0x08020d19
 8020da4:	08020d19 	.word	0x08020d19
 8020da8:	08020d19 	.word	0x08020d19
 8020dac:	08020d19 	.word	0x08020d19
 8020db0:	08021007 	.word	0x08021007
 8020db4:	08020f03 	.word	0x08020f03
 8020db8:	08020d19 	.word	0x08020d19
 8020dbc:	08020d19 	.word	0x08020d19
 8020dc0:	08020d19 	.word	0x08020d19
 8020dc4:	08020eb5 	.word	0x08020eb5
 8020dc8:	0802105b 	.word	0x0802105b
 8020dcc:	08020ed1 	.word	0x08020ed1
 8020dd0:	08020d19 	.word	0x08020d19
 8020dd4:	08020e97 	.word	0x08020e97
 8020dd8:	08020ee1 	.word	0x08020ee1
 8020ddc:	08021015 	.word	0x08021015
 8020de0:	08020f0b 	.word	0x08020f0b
 8020de4:	0802100f 	.word	0x0802100f
 8020de8:	08020d19 	.word	0x08020d19
 8020dec:	08020d19 	.word	0x08020d19
 8020df0:	08020f3d 	.word	0x08020f3d
 8020df4:	08020ed9 	.word	0x08020ed9
 8020df8:	08020f17 	.word	0x08020f17
 8020dfc:	08020d19 	.word	0x08020d19
 8020e00:	08020d19 	.word	0x08020d19
 8020e04:	08020f1f 	.word	0x08020f1f
 8020e08:	08020d19 	.word	0x08020d19
 8020e0c:	08020ed9 	.word	0x08020ed9
 8020e10:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8020e14:	2b09      	cmp	r3, #9
 8020e16:	f63f af7f 	bhi.w	8020d18 <__ssvfiscanf_r+0xb4>
 8020e1a:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8020e1e:	f47f af7b 	bne.w	8020d18 <__ssvfiscanf_r+0xb4>
 8020e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e24:	fb02 5503 	mla	r5, r2, r3, r5
 8020e28:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8020e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8020e2e:	e030      	b.n	8020e92 <__ssvfiscanf_r+0x22e>
 8020e30:	6863      	ldr	r3, [r4, #4]
 8020e32:	2b00      	cmp	r3, #0
 8020e34:	dd10      	ble.n	8020e58 <__ssvfiscanf_r+0x1f4>
 8020e36:	6823      	ldr	r3, [r4, #0]
 8020e38:	693a      	ldr	r2, [r7, #16]
 8020e3a:	7819      	ldrb	r1, [r3, #0]
 8020e3c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8020e40:	4291      	cmp	r1, r2
 8020e42:	f47f af69 	bne.w	8020d18 <__ssvfiscanf_r+0xb4>
 8020e46:	6862      	ldr	r2, [r4, #4]
 8020e48:	3301      	adds	r3, #1
 8020e4a:	6023      	str	r3, [r4, #0]
 8020e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e4e:	3a01      	subs	r2, #1
 8020e50:	6062      	str	r2, [r4, #4]
 8020e52:	3301      	adds	r3, #1
 8020e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020e56:	e722      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 8020e58:	ee18 0a10 	vmov	r0, s16
 8020e5c:	4621      	mov	r1, r4
 8020e5e:	f7ff feab 	bl	8020bb8 <__ssrefill_r>
 8020e62:	2800      	cmp	r0, #0
 8020e64:	d0e7      	beq.n	8020e36 <__ssvfiscanf_r+0x1d2>
 8020e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e68:	b11b      	cbz	r3, 8020e72 <__ssvfiscanf_r+0x20e>
 8020e6a:	89a3      	ldrh	r3, [r4, #12]
 8020e6c:	065b      	lsls	r3, r3, #25
 8020e6e:	f57f af53 	bpl.w	8020d18 <__ssvfiscanf_r+0xb4>
 8020e72:	f1bb 0f00 	cmp.w	fp, #0
 8020e76:	f040 80a1 	bne.w	8020fbc <__ssvfiscanf_r+0x358>
 8020e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8020e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8020e80:	e0ad      	b.n	8020fde <__ssvfiscanf_r+0x37a>
 8020e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e84:	ea53 0309 	orrs.w	r3, r3, r9
 8020e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8020e8a:	f47f af45 	bne.w	8020d18 <__ssvfiscanf_r+0xb4>
 8020e8e:	f04f 0910 	mov.w	r9, #16
 8020e92:	693b      	ldr	r3, [r7, #16]
 8020e94:	e731      	b.n	8020cfa <__ssvfiscanf_r+0x96>
 8020e96:	f019 0f0f 	tst.w	r9, #15
 8020e9a:	f47f af3d 	bne.w	8020d18 <__ssvfiscanf_r+0xb4>
 8020e9e:	7859      	ldrb	r1, [r3, #1]
 8020ea0:	296c      	cmp	r1, #108	; 0x6c
 8020ea2:	d104      	bne.n	8020eae <__ssvfiscanf_r+0x24a>
 8020ea4:	3302      	adds	r3, #2
 8020ea6:	613b      	str	r3, [r7, #16]
 8020ea8:	f049 0902 	orr.w	r9, r9, #2
 8020eac:	e7f1      	b.n	8020e92 <__ssvfiscanf_r+0x22e>
 8020eae:	f049 0901 	orr.w	r9, r9, #1
 8020eb2:	e7ee      	b.n	8020e92 <__ssvfiscanf_r+0x22e>
 8020eb4:	f019 0f0f 	tst.w	r9, #15
 8020eb8:	f47f af2e 	bne.w	8020d18 <__ssvfiscanf_r+0xb4>
 8020ebc:	7859      	ldrb	r1, [r3, #1]
 8020ebe:	2968      	cmp	r1, #104	; 0x68
 8020ec0:	bf03      	ittte	eq
 8020ec2:	3302      	addeq	r3, #2
 8020ec4:	613b      	streq	r3, [r7, #16]
 8020ec6:	f049 0908 	orreq.w	r9, r9, #8
 8020eca:	f049 0904 	orrne.w	r9, r9, #4
 8020ece:	e7e0      	b.n	8020e92 <__ssvfiscanf_r+0x22e>
 8020ed0:	f019 0f0f 	tst.w	r9, #15
 8020ed4:	d0e8      	beq.n	8020ea8 <__ssvfiscanf_r+0x244>
 8020ed6:	e71f      	b.n	8020d18 <__ssvfiscanf_r+0xb4>
 8020ed8:	f019 0f0f 	tst.w	r9, #15
 8020edc:	d0d9      	beq.n	8020e92 <__ssvfiscanf_r+0x22e>
 8020ede:	e71b      	b.n	8020d18 <__ssvfiscanf_r+0xb4>
 8020ee0:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8020ee4:	f47f af18 	bne.w	8020d18 <__ssvfiscanf_r+0xb4>
 8020ee8:	f1bb 0f00 	cmp.w	fp, #0
 8020eec:	d104      	bne.n	8020ef8 <__ssvfiscanf_r+0x294>
 8020eee:	b082      	sub	sp, #8
 8020ef0:	f10d 0b08 	add.w	fp, sp, #8
 8020ef4:	e9cb 3300 	strd	r3, r3, [fp]
 8020ef8:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8020efc:	e7c9      	b.n	8020e92 <__ssvfiscanf_r+0x22e>
 8020efe:	f049 0901 	orr.w	r9, r9, #1
 8020f02:	4b0b      	ldr	r3, [pc, #44]	; (8020f30 <__ssvfiscanf_r+0x2cc>)
 8020f04:	e008      	b.n	8020f18 <__ssvfiscanf_r+0x2b4>
 8020f06:	f049 0901 	orr.w	r9, r9, #1
 8020f0a:	4b0a      	ldr	r3, [pc, #40]	; (8020f34 <__ssvfiscanf_r+0x2d0>)
 8020f0c:	617b      	str	r3, [r7, #20]
 8020f0e:	2308      	movs	r3, #8
 8020f10:	61fb      	str	r3, [r7, #28]
 8020f12:	2503      	movs	r5, #3
 8020f14:	e013      	b.n	8020f3e <__ssvfiscanf_r+0x2da>
 8020f16:	4b07      	ldr	r3, [pc, #28]	; (8020f34 <__ssvfiscanf_r+0x2d0>)
 8020f18:	617b      	str	r3, [r7, #20]
 8020f1a:	230a      	movs	r3, #10
 8020f1c:	e7f8      	b.n	8020f10 <__ssvfiscanf_r+0x2ac>
 8020f1e:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8020f22:	4b04      	ldr	r3, [pc, #16]	; (8020f34 <__ssvfiscanf_r+0x2d0>)
 8020f24:	617b      	str	r3, [r7, #20]
 8020f26:	2310      	movs	r3, #16
 8020f28:	e7f2      	b.n	8020f10 <__ssvfiscanf_r+0x2ac>
 8020f2a:	bf00      	nop
 8020f2c:	080296f1 	.word	0x080296f1
 8020f30:	0801b9ed 	.word	0x0801b9ed
 8020f34:	08020a31 	.word	0x08020a31
 8020f38:	f049 0901 	orr.w	r9, r9, #1
 8020f3c:	2502      	movs	r5, #2
 8020f3e:	6863      	ldr	r3, [r4, #4]
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	f340 808e 	ble.w	8021062 <__ssvfiscanf_r+0x3fe>
 8020f46:	f019 0f40 	tst.w	r9, #64	; 0x40
 8020f4a:	d106      	bne.n	8020f5a <__ssvfiscanf_r+0x2f6>
 8020f4c:	6823      	ldr	r3, [r4, #0]
 8020f4e:	49b3      	ldr	r1, [pc, #716]	; (802121c <__ssvfiscanf_r+0x5b8>)
 8020f50:	781a      	ldrb	r2, [r3, #0]
 8020f52:	5c52      	ldrb	r2, [r2, r1]
 8020f54:	0711      	lsls	r1, r2, #28
 8020f56:	f100 808d 	bmi.w	8021074 <__ssvfiscanf_r+0x410>
 8020f5a:	2d02      	cmp	r5, #2
 8020f5c:	f000 8394 	beq.w	8021688 <__ssvfiscanf_r+0xa24>
 8020f60:	2d03      	cmp	r5, #3
 8020f62:	f000 8535 	beq.w	80219d0 <__ssvfiscanf_r+0xd6c>
 8020f66:	f009 0310 	and.w	r3, r9, #16
 8020f6a:	2d01      	cmp	r5, #1
 8020f6c:	61bb      	str	r3, [r7, #24]
 8020f6e:	f009 0301 	and.w	r3, r9, #1
 8020f72:	f000 81cc 	beq.w	802130e <__ssvfiscanf_r+0x6aa>
 8020f76:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8020f78:	2d01      	cmp	r5, #1
 8020f7a:	bf38      	it	cc
 8020f7c:	2501      	movcc	r5, #1
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	f000 8150 	beq.w	8021224 <__ssvfiscanf_r+0x5c0>
 8020f84:	69bb      	ldr	r3, [r7, #24]
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	f040 810d 	bne.w	80211a6 <__ssvfiscanf_r+0x542>
 8020f8c:	4633      	mov	r3, r6
 8020f8e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8020f92:	f853 6b04 	ldr.w	r6, [r3], #4
 8020f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8020f98:	f000 810c 	beq.w	80211b4 <__ssvfiscanf_r+0x550>
 8020f9c:	b146      	cbz	r6, 8020fb0 <__ssvfiscanf_r+0x34c>
 8020f9e:	2080      	movs	r0, #128	; 0x80
 8020fa0:	f7fe fe7a 	bl	801fc98 <malloc>
 8020fa4:	4680      	mov	r8, r0
 8020fa6:	2800      	cmp	r0, #0
 8020fa8:	d178      	bne.n	802109c <__ssvfiscanf_r+0x438>
 8020faa:	f04f 33ff 	mov.w	r3, #4294967295
 8020fae:	627b      	str	r3, [r7, #36]	; 0x24
 8020fb0:	f1bb 0f00 	cmp.w	fp, #0
 8020fb4:	d013      	beq.n	8020fde <__ssvfiscanf_r+0x37a>
 8020fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fb8:	3301      	adds	r3, #1
 8020fba:	d10b      	bne.n	8020fd4 <__ssvfiscanf_r+0x370>
 8020fbc:	2400      	movs	r4, #0
 8020fbe:	4626      	mov	r6, r4
 8020fc0:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8020fc4:	f8db 5000 	ldr.w	r5, [fp]
 8020fc8:	42a3      	cmp	r3, r4
 8020fca:	f300 85df 	bgt.w	8021b8c <__ssvfiscanf_r+0xf28>
 8020fce:	f04f 33ff 	mov.w	r3, #4294967295
 8020fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8020fd4:	f8db 0000 	ldr.w	r0, [fp]
 8020fd8:	b108      	cbz	r0, 8020fde <__ssvfiscanf_r+0x37a>
 8020fda:	f7fe fe65 	bl	801fca8 <free>
 8020fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020fe0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8020fe4:	46bd      	mov	sp, r7
 8020fe6:	ecbd 8b02 	vpop	{d8}
 8020fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fee:	6939      	ldr	r1, [r7, #16]
 8020ff0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8020ff4:	f002 f82a 	bl	802304c <__sccl>
 8020ff8:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8020ffc:	6138      	str	r0, [r7, #16]
 8020ffe:	2501      	movs	r5, #1
 8021000:	e79d      	b.n	8020f3e <__ssvfiscanf_r+0x2da>
 8021002:	f049 0901 	orr.w	r9, r9, #1
 8021006:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 802100a:	2500      	movs	r5, #0
 802100c:	e797      	b.n	8020f3e <__ssvfiscanf_r+0x2da>
 802100e:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8021012:	e786      	b.n	8020f22 <__ssvfiscanf_r+0x2be>
 8021014:	f019 0f10 	tst.w	r9, #16
 8021018:	f47f ae41 	bne.w	8020c9e <__ssvfiscanf_r+0x3a>
 802101c:	f019 0f08 	tst.w	r9, #8
 8021020:	f856 1b04 	ldr.w	r1, [r6], #4
 8021024:	d002      	beq.n	802102c <__ssvfiscanf_r+0x3c8>
 8021026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021028:	700b      	strb	r3, [r1, #0]
 802102a:	e638      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 802102c:	f019 0f04 	tst.w	r9, #4
 8021030:	d002      	beq.n	8021038 <__ssvfiscanf_r+0x3d4>
 8021032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021034:	800b      	strh	r3, [r1, #0]
 8021036:	e632      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 8021038:	f019 0f01 	tst.w	r9, #1
 802103c:	d002      	beq.n	8021044 <__ssvfiscanf_r+0x3e0>
 802103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021040:	600b      	str	r3, [r1, #0]
 8021042:	e62c      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 8021044:	f019 0f02 	tst.w	r9, #2
 8021048:	d0f9      	beq.n	802103e <__ssvfiscanf_r+0x3da>
 802104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802104c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8021050:	461a      	mov	r2, r3
 8021052:	464b      	mov	r3, r9
 8021054:	e9c1 2300 	strd	r2, r3, [r1]
 8021058:	e621      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 802105a:	4b71      	ldr	r3, [pc, #452]	; (8021220 <__ssvfiscanf_r+0x5bc>)
 802105c:	617b      	str	r3, [r7, #20]
 802105e:	2300      	movs	r3, #0
 8021060:	e756      	b.n	8020f10 <__ssvfiscanf_r+0x2ac>
 8021062:	ee18 0a10 	vmov	r0, s16
 8021066:	4621      	mov	r1, r4
 8021068:	f7ff fda6 	bl	8020bb8 <__ssrefill_r>
 802106c:	2800      	cmp	r0, #0
 802106e:	f43f af6a 	beq.w	8020f46 <__ssvfiscanf_r+0x2e2>
 8021072:	e6f8      	b.n	8020e66 <__ssvfiscanf_r+0x202>
 8021074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021076:	3201      	adds	r2, #1
 8021078:	62fa      	str	r2, [r7, #44]	; 0x2c
 802107a:	6862      	ldr	r2, [r4, #4]
 802107c:	3a01      	subs	r2, #1
 802107e:	2a00      	cmp	r2, #0
 8021080:	6062      	str	r2, [r4, #4]
 8021082:	dd02      	ble.n	802108a <__ssvfiscanf_r+0x426>
 8021084:	3301      	adds	r3, #1
 8021086:	6023      	str	r3, [r4, #0]
 8021088:	e760      	b.n	8020f4c <__ssvfiscanf_r+0x2e8>
 802108a:	ee18 0a10 	vmov	r0, s16
 802108e:	4621      	mov	r1, r4
 8021090:	f7ff fd92 	bl	8020bb8 <__ssrefill_r>
 8021094:	2800      	cmp	r0, #0
 8021096:	f43f af59 	beq.w	8020f4c <__ssvfiscanf_r+0x2e8>
 802109a:	e6e4      	b.n	8020e66 <__ssvfiscanf_r+0x202>
 802109c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 80210a0:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 80210a4:	6030      	str	r0, [r6, #0]
 80210a6:	45ca      	cmp	sl, r9
 80210a8:	d313      	bcc.n	80210d2 <__ssvfiscanf_r+0x46e>
 80210aa:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80210ae:	4599      	cmp	r9, r3
 80210b0:	f63f af7b 	bhi.w	8020faa <__ssvfiscanf_r+0x346>
 80210b4:	f109 0908 	add.w	r9, r9, #8
 80210b8:	f8db 0000 	ldr.w	r0, [fp]
 80210bc:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80210c0:	f001 fe16 	bl	8022cf0 <realloc>
 80210c4:	2800      	cmp	r0, #0
 80210c6:	f43f af70 	beq.w	8020faa <__ssvfiscanf_r+0x346>
 80210ca:	f8cb 0000 	str.w	r0, [fp]
 80210ce:	f8ab 9004 	strh.w	r9, [fp, #4]
 80210d2:	f8db 3000 	ldr.w	r3, [fp]
 80210d6:	f10a 0201 	add.w	r2, sl, #1
 80210da:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80210de:	f8ab 2006 	strh.w	r2, [fp, #6]
 80210e2:	46b2      	mov	sl, r6
 80210e4:	f04f 0920 	mov.w	r9, #32
 80210e8:	4646      	mov	r6, r8
 80210ea:	2200      	movs	r2, #0
 80210ec:	60fa      	str	r2, [r7, #12]
 80210ee:	f001 fda9 	bl	8022c44 <__locale_mb_cur_max>
 80210f2:	68fa      	ldr	r2, [r7, #12]
 80210f4:	4290      	cmp	r0, r2
 80210f6:	f43f aeb6 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 80210fa:	6821      	ldr	r1, [r4, #0]
 80210fc:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8021100:	f811 0b01 	ldrb.w	r0, [r1], #1
 8021104:	f80c 0002 	strb.w	r0, [ip, r2]
 8021108:	1c53      	adds	r3, r2, #1
 802110a:	6862      	ldr	r2, [r4, #4]
 802110c:	3a01      	subs	r2, #1
 802110e:	e9c4 1200 	strd	r1, r2, [r4]
 8021112:	6a3a      	ldr	r2, [r7, #32]
 8021114:	2a03      	cmp	r2, #3
 8021116:	d102      	bne.n	802111e <__ssvfiscanf_r+0x4ba>
 8021118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802111a:	2a04      	cmp	r2, #4
 802111c:	d007      	beq.n	802112e <__ssvfiscanf_r+0x4ca>
 802111e:	2208      	movs	r2, #8
 8021120:	2100      	movs	r1, #0
 8021122:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8021126:	623b      	str	r3, [r7, #32]
 8021128:	f7fa f8a0 	bl	801b26c <memset>
 802112c:	6a3b      	ldr	r3, [r7, #32]
 802112e:	60fb      	str	r3, [r7, #12]
 8021130:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8021134:	9200      	str	r2, [sp, #0]
 8021136:	ee18 0a10 	vmov	r0, s16
 802113a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802113e:	4631      	mov	r1, r6
 8021140:	f001 fd98 	bl	8022c74 <_mbrtowc_r>
 8021144:	1c42      	adds	r2, r0, #1
 8021146:	6238      	str	r0, [r7, #32]
 8021148:	f43f ae8d 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 802114c:	68fb      	ldr	r3, [r7, #12]
 802114e:	2800      	cmp	r0, #0
 8021150:	d135      	bne.n	80211be <__ssvfiscanf_r+0x55a>
 8021152:	69ba      	ldr	r2, [r7, #24]
 8021154:	b902      	cbnz	r2, 8021158 <__ssvfiscanf_r+0x4f4>
 8021156:	6032      	str	r2, [r6, #0]
 8021158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802115a:	441a      	add	r2, r3
 802115c:	6a3b      	ldr	r3, [r7, #32]
 802115e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8021160:	2b03      	cmp	r3, #3
 8021162:	d102      	bne.n	802116a <__ssvfiscanf_r+0x506>
 8021164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021166:	2b04      	cmp	r3, #4
 8021168:	d000      	beq.n	802116c <__ssvfiscanf_r+0x508>
 802116a:	3d01      	subs	r5, #1
 802116c:	69bb      	ldr	r3, [r7, #24]
 802116e:	b9c3      	cbnz	r3, 80211a2 <__ssvfiscanf_r+0x53e>
 8021170:	f1ba 0f00 	cmp.w	sl, #0
 8021174:	d014      	beq.n	80211a0 <__ssvfiscanf_r+0x53c>
 8021176:	eba6 0308 	sub.w	r3, r6, r8
 802117a:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802117e:	d80f      	bhi.n	80211a0 <__ssvfiscanf_r+0x53c>
 8021180:	4640      	mov	r0, r8
 8021182:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021186:	60fb      	str	r3, [r7, #12]
 8021188:	f001 fdb2 	bl	8022cf0 <realloc>
 802118c:	4680      	mov	r8, r0
 802118e:	2800      	cmp	r0, #0
 8021190:	f43f af0b 	beq.w	8020faa <__ssvfiscanf_r+0x346>
 8021194:	68fb      	ldr	r3, [r7, #12]
 8021196:	f8ca 0000 	str.w	r0, [sl]
 802119a:	18c6      	adds	r6, r0, r3
 802119c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80211a0:	3604      	adds	r6, #4
 80211a2:	2200      	movs	r2, #0
 80211a4:	e00f      	b.n	80211c6 <__ssvfiscanf_r+0x562>
 80211a6:	f04f 0900 	mov.w	r9, #0
 80211aa:	62be      	str	r6, [r7, #40]	; 0x28
 80211ac:	46c8      	mov	r8, r9
 80211ae:	46ca      	mov	sl, r9
 80211b0:	464e      	mov	r6, r9
 80211b2:	e79a      	b.n	80210ea <__ssvfiscanf_r+0x486>
 80211b4:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80211b8:	46c8      	mov	r8, r9
 80211ba:	46ca      	mov	sl, r9
 80211bc:	e795      	b.n	80210ea <__ssvfiscanf_r+0x486>
 80211be:	6a3a      	ldr	r2, [r7, #32]
 80211c0:	3202      	adds	r2, #2
 80211c2:	d1c9      	bne.n	8021158 <__ssvfiscanf_r+0x4f4>
 80211c4:	461a      	mov	r2, r3
 80211c6:	6863      	ldr	r3, [r4, #4]
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	dc14      	bgt.n	80211f6 <__ssvfiscanf_r+0x592>
 80211cc:	ee18 0a10 	vmov	r0, s16
 80211d0:	4621      	mov	r1, r4
 80211d2:	60fa      	str	r2, [r7, #12]
 80211d4:	f7ff fcf0 	bl	8020bb8 <__ssrefill_r>
 80211d8:	68fa      	ldr	r2, [r7, #12]
 80211da:	b160      	cbz	r0, 80211f6 <__ssvfiscanf_r+0x592>
 80211dc:	2a00      	cmp	r2, #0
 80211de:	f47f ae42 	bne.w	8020e66 <__ssvfiscanf_r+0x202>
 80211e2:	f1ba 0f00 	cmp.w	sl, #0
 80211e6:	d10a      	bne.n	80211fe <__ssvfiscanf_r+0x59a>
 80211e8:	69bb      	ldr	r3, [r7, #24]
 80211ea:	b913      	cbnz	r3, 80211f2 <__ssvfiscanf_r+0x58e>
 80211ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211ee:	3301      	adds	r3, #1
 80211f0:	627b      	str	r3, [r7, #36]	; 0x24
 80211f2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80211f4:	e553      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 80211f6:	2d00      	cmp	r5, #0
 80211f8:	f47f af78 	bne.w	80210ec <__ssvfiscanf_r+0x488>
 80211fc:	e7f1      	b.n	80211e2 <__ssvfiscanf_r+0x57e>
 80211fe:	eba6 0108 	sub.w	r1, r6, r8
 8021202:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8021206:	d9ef      	bls.n	80211e8 <__ssvfiscanf_r+0x584>
 8021208:	f8da 0000 	ldr.w	r0, [sl]
 802120c:	f001 fd70 	bl	8022cf0 <realloc>
 8021210:	2800      	cmp	r0, #0
 8021212:	d0e9      	beq.n	80211e8 <__ssvfiscanf_r+0x584>
 8021214:	f8ca 0000 	str.w	r0, [sl]
 8021218:	e7e6      	b.n	80211e8 <__ssvfiscanf_r+0x584>
 802121a:	bf00      	nop
 802121c:	080296f1 	.word	0x080296f1
 8021220:	0801b9ed 	.word	0x0801b9ed
 8021224:	69ba      	ldr	r2, [r7, #24]
 8021226:	b1e2      	cbz	r2, 8021262 <__ssvfiscanf_r+0x5fe>
 8021228:	4698      	mov	r8, r3
 802122a:	e9d4 2300 	ldrd	r2, r3, [r4]
 802122e:	429d      	cmp	r5, r3
 8021230:	dd11      	ble.n	8021256 <__ssvfiscanf_r+0x5f2>
 8021232:	4498      	add	r8, r3
 8021234:	1aed      	subs	r5, r5, r3
 8021236:	4413      	add	r3, r2
 8021238:	ee18 0a10 	vmov	r0, s16
 802123c:	6023      	str	r3, [r4, #0]
 802123e:	4621      	mov	r1, r4
 8021240:	f7ff fcba 	bl	8020bb8 <__ssrefill_r>
 8021244:	2800      	cmp	r0, #0
 8021246:	d0f0      	beq.n	802122a <__ssvfiscanf_r+0x5c6>
 8021248:	f1b8 0f00 	cmp.w	r8, #0
 802124c:	f43f ae0b 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 8021250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021252:	4443      	add	r3, r8
 8021254:	e5fe      	b.n	8020e54 <__ssvfiscanf_r+0x1f0>
 8021256:	1b5b      	subs	r3, r3, r5
 8021258:	44a8      	add	r8, r5
 802125a:	4415      	add	r5, r2
 802125c:	6063      	str	r3, [r4, #4]
 802125e:	6025      	str	r5, [r4, #0]
 8021260:	e7f6      	b.n	8021250 <__ssvfiscanf_r+0x5ec>
 8021262:	46b0      	mov	r8, r6
 8021264:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8021268:	f858 6b04 	ldr.w	r6, [r8], #4
 802126c:	d02e      	beq.n	80212cc <__ssvfiscanf_r+0x668>
 802126e:	2e00      	cmp	r6, #0
 8021270:	f43f ad52 	beq.w	8020d18 <__ssvfiscanf_r+0xb4>
 8021274:	4628      	mov	r0, r5
 8021276:	f7fe fd0f 	bl	801fc98 <malloc>
 802127a:	62b8      	str	r0, [r7, #40]	; 0x28
 802127c:	2800      	cmp	r0, #0
 802127e:	f43f adf8 	beq.w	8020e72 <__ssvfiscanf_r+0x20e>
 8021282:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021286:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 802128a:	6030      	str	r0, [r6, #0]
 802128c:	45ca      	cmp	sl, r9
 802128e:	d313      	bcc.n	80212b8 <__ssvfiscanf_r+0x654>
 8021290:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021294:	4599      	cmp	r9, r3
 8021296:	f63f ae91 	bhi.w	8020fbc <__ssvfiscanf_r+0x358>
 802129a:	f109 0908 	add.w	r9, r9, #8
 802129e:	f8db 0000 	ldr.w	r0, [fp]
 80212a2:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80212a6:	f001 fd23 	bl	8022cf0 <realloc>
 80212aa:	2800      	cmp	r0, #0
 80212ac:	f43f ae86 	beq.w	8020fbc <__ssvfiscanf_r+0x358>
 80212b0:	f8cb 0000 	str.w	r0, [fp]
 80212b4:	f8ab 9004 	strh.w	r9, [fp, #4]
 80212b8:	f8db 3000 	ldr.w	r3, [fp]
 80212bc:	f10a 0201 	add.w	r2, sl, #1
 80212c0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80212c4:	46b1      	mov	r9, r6
 80212c6:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80212c8:	f8ab 2006 	strh.w	r2, [fp, #6]
 80212cc:	4631      	mov	r1, r6
 80212ce:	ee18 0a10 	vmov	r0, s16
 80212d2:	9400      	str	r4, [sp, #0]
 80212d4:	462b      	mov	r3, r5
 80212d6:	2201      	movs	r2, #1
 80212d8:	f7ff fc8b 	bl	8020bf2 <_sfread_r>
 80212dc:	4606      	mov	r6, r0
 80212de:	2800      	cmp	r0, #0
 80212e0:	f43f adc1 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 80212e4:	f1b9 0f00 	cmp.w	r9, #0
 80212e8:	d009      	beq.n	80212fe <__ssvfiscanf_r+0x69a>
 80212ea:	4285      	cmp	r5, r0
 80212ec:	d907      	bls.n	80212fe <__ssvfiscanf_r+0x69a>
 80212ee:	4601      	mov	r1, r0
 80212f0:	f8d9 0000 	ldr.w	r0, [r9]
 80212f4:	f001 fcfc 	bl	8022cf0 <realloc>
 80212f8:	b108      	cbz	r0, 80212fe <__ssvfiscanf_r+0x69a>
 80212fa:	f8c9 0000 	str.w	r0, [r9]
 80212fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021300:	4433      	add	r3, r6
 8021302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021306:	3301      	adds	r3, #1
 8021308:	627b      	str	r3, [r7, #36]	; 0x24
 802130a:	4646      	mov	r6, r8
 802130c:	e4c7      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 802130e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021310:	2a00      	cmp	r2, #0
 8021312:	bf08      	it	eq
 8021314:	f04f 32ff 	moveq.w	r2, #4294967295
 8021318:	461d      	mov	r5, r3
 802131a:	62ba      	str	r2, [r7, #40]	; 0x28
 802131c:	69bb      	ldr	r3, [r7, #24]
 802131e:	2d00      	cmp	r5, #0
 8021320:	f000 8105 	beq.w	802152e <__ssvfiscanf_r+0x8ca>
 8021324:	2b00      	cmp	r3, #0
 8021326:	f040 80a5 	bne.w	8021474 <__ssvfiscanf_r+0x810>
 802132a:	4633      	mov	r3, r6
 802132c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021330:	f853 5b04 	ldr.w	r5, [r3], #4
 8021334:	607b      	str	r3, [r7, #4]
 8021336:	f000 80a6 	beq.w	8021486 <__ssvfiscanf_r+0x822>
 802133a:	2d00      	cmp	r5, #0
 802133c:	f43f ae38 	beq.w	8020fb0 <__ssvfiscanf_r+0x34c>
 8021340:	2080      	movs	r0, #128	; 0x80
 8021342:	f7fe fca9 	bl	801fc98 <malloc>
 8021346:	4680      	mov	r8, r0
 8021348:	2800      	cmp	r0, #0
 802134a:	f43f ae2e 	beq.w	8020faa <__ssvfiscanf_r+0x346>
 802134e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8021352:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8021356:	6028      	str	r0, [r5, #0]
 8021358:	45b1      	cmp	r9, r6
 802135a:	d311      	bcc.n	8021380 <__ssvfiscanf_r+0x71c>
 802135c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021360:	429e      	cmp	r6, r3
 8021362:	f63f ae22 	bhi.w	8020faa <__ssvfiscanf_r+0x346>
 8021366:	3608      	adds	r6, #8
 8021368:	f8db 0000 	ldr.w	r0, [fp]
 802136c:	00b1      	lsls	r1, r6, #2
 802136e:	f001 fcbf 	bl	8022cf0 <realloc>
 8021372:	2800      	cmp	r0, #0
 8021374:	f43f ae19 	beq.w	8020faa <__ssvfiscanf_r+0x346>
 8021378:	f8cb 0000 	str.w	r0, [fp]
 802137c:	f8ab 6004 	strh.w	r6, [fp, #4]
 8021380:	f8db 3000 	ldr.w	r3, [fp]
 8021384:	60fd      	str	r5, [r7, #12]
 8021386:	f109 0201 	add.w	r2, r9, #1
 802138a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802138e:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021392:	4645      	mov	r5, r8
 8021394:	f04f 0920 	mov.w	r9, #32
 8021398:	2600      	movs	r6, #0
 802139a:	f001 fc53 	bl	8022c44 <__locale_mb_cur_max>
 802139e:	42b0      	cmp	r0, r6
 80213a0:	f43f ad61 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 80213a4:	1c73      	adds	r3, r6, #1
 80213a6:	60bb      	str	r3, [r7, #8]
 80213a8:	6823      	ldr	r3, [r4, #0]
 80213aa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80213ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80213b2:	558a      	strb	r2, [r1, r6]
 80213b4:	6862      	ldr	r2, [r4, #4]
 80213b6:	3a01      	subs	r2, #1
 80213b8:	e9c4 3200 	strd	r3, r2, [r4]
 80213bc:	6a3b      	ldr	r3, [r7, #32]
 80213be:	2b03      	cmp	r3, #3
 80213c0:	d102      	bne.n	80213c8 <__ssvfiscanf_r+0x764>
 80213c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213c4:	2b04      	cmp	r3, #4
 80213c6:	d005      	beq.n	80213d4 <__ssvfiscanf_r+0x770>
 80213c8:	2208      	movs	r2, #8
 80213ca:	2100      	movs	r1, #0
 80213cc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80213d0:	f7f9 ff4c 	bl	801b26c <memset>
 80213d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80213d8:	9300      	str	r3, [sp, #0]
 80213da:	ee18 0a10 	vmov	r0, s16
 80213de:	68bb      	ldr	r3, [r7, #8]
 80213e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80213e4:	4629      	mov	r1, r5
 80213e6:	f001 fc45 	bl	8022c74 <_mbrtowc_r>
 80213ea:	4603      	mov	r3, r0
 80213ec:	6238      	str	r0, [r7, #32]
 80213ee:	1c58      	adds	r0, r3, #1
 80213f0:	f43f ad39 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	d14c      	bne.n	8021492 <__ssvfiscanf_r+0x82e>
 80213f8:	602b      	str	r3, [r5, #0]
 80213fa:	682e      	ldr	r6, [r5, #0]
 80213fc:	1c71      	adds	r1, r6, #1
 80213fe:	d059      	beq.n	80214b4 <__ssvfiscanf_r+0x850>
 8021400:	2208      	movs	r2, #8
 8021402:	2100      	movs	r1, #0
 8021404:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8021408:	f7f9 ff30 	bl	801b26c <memset>
 802140c:	4b9d      	ldr	r3, [pc, #628]	; (8021684 <__ssvfiscanf_r+0xa20>)
 802140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021412:	603b      	str	r3, [r7, #0]
 8021414:	4632      	mov	r2, r6
 8021416:	ee18 0a10 	vmov	r0, s16
 802141a:	683e      	ldr	r6, [r7, #0]
 802141c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021420:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8021424:	47b0      	blx	r6
 8021426:	2801      	cmp	r0, #1
 8021428:	d146      	bne.n	80214b8 <__ssvfiscanf_r+0x854>
 802142a:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 802142e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8021432:	f813 300a 	ldrb.w	r3, [r3, sl]
 8021436:	2b00      	cmp	r3, #0
 8021438:	d14b      	bne.n	80214d2 <__ssvfiscanf_r+0x86e>
 802143a:	f107 0648 	add.w	r6, r7, #72	; 0x48
 802143e:	68bb      	ldr	r3, [r7, #8]
 8021440:	2b00      	cmp	r3, #0
 8021442:	d13c      	bne.n	80214be <__ssvfiscanf_r+0x85a>
 8021444:	69bb      	ldr	r3, [r7, #24]
 8021446:	b99b      	cbnz	r3, 8021470 <__ssvfiscanf_r+0x80c>
 8021448:	602b      	str	r3, [r5, #0]
 802144a:	68fb      	ldr	r3, [r7, #12]
 802144c:	b16b      	cbz	r3, 802146a <__ssvfiscanf_r+0x806>
 802144e:	eba5 0108 	sub.w	r1, r5, r8
 8021452:	108b      	asrs	r3, r1, #2
 8021454:	3301      	adds	r3, #1
 8021456:	4599      	cmp	r9, r3
 8021458:	d907      	bls.n	802146a <__ssvfiscanf_r+0x806>
 802145a:	68fb      	ldr	r3, [r7, #12]
 802145c:	3104      	adds	r1, #4
 802145e:	6818      	ldr	r0, [r3, #0]
 8021460:	f001 fc46 	bl	8022cf0 <realloc>
 8021464:	b108      	cbz	r0, 802146a <__ssvfiscanf_r+0x806>
 8021466:	68fb      	ldr	r3, [r7, #12]
 8021468:	6018      	str	r0, [r3, #0]
 802146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802146c:	3301      	adds	r3, #1
 802146e:	627b      	str	r3, [r7, #36]	; 0x24
 8021470:	687e      	ldr	r6, [r7, #4]
 8021472:	e414      	b.n	8020c9e <__ssvfiscanf_r+0x3a>
 8021474:	f04f 0900 	mov.w	r9, #0
 8021478:	607e      	str	r6, [r7, #4]
 802147a:	46c8      	mov	r8, r9
 802147c:	f8c7 900c 	str.w	r9, [r7, #12]
 8021480:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8021484:	e788      	b.n	8021398 <__ssvfiscanf_r+0x734>
 8021486:	f8d7 9018 	ldr.w	r9, [r7, #24]
 802148a:	f8c7 900c 	str.w	r9, [r7, #12]
 802148e:	46c8      	mov	r8, r9
 8021490:	e782      	b.n	8021398 <__ssvfiscanf_r+0x734>
 8021492:	6a3b      	ldr	r3, [r7, #32]
 8021494:	3302      	adds	r3, #2
 8021496:	d1b0      	bne.n	80213fa <__ssvfiscanf_r+0x796>
 8021498:	68be      	ldr	r6, [r7, #8]
 802149a:	6863      	ldr	r3, [r4, #4]
 802149c:	2b00      	cmp	r3, #0
 802149e:	dc41      	bgt.n	8021524 <__ssvfiscanf_r+0x8c0>
 80214a0:	ee18 0a10 	vmov	r0, s16
 80214a4:	4621      	mov	r1, r4
 80214a6:	f7ff fb87 	bl	8020bb8 <__ssrefill_r>
 80214aa:	2800      	cmp	r0, #0
 80214ac:	d03a      	beq.n	8021524 <__ssvfiscanf_r+0x8c0>
 80214ae:	2e00      	cmp	r6, #0
 80214b0:	d0c8      	beq.n	8021444 <__ssvfiscanf_r+0x7e0>
 80214b2:	e4d8      	b.n	8020e66 <__ssvfiscanf_r+0x202>
 80214b4:	46b2      	mov	sl, r6
 80214b6:	e7ba      	b.n	802142e <__ssvfiscanf_r+0x7ca>
 80214b8:	f04f 0a00 	mov.w	sl, #0
 80214bc:	e7b7      	b.n	802142e <__ssvfiscanf_r+0x7ca>
 80214be:	68bb      	ldr	r3, [r7, #8]
 80214c0:	3b01      	subs	r3, #1
 80214c2:	ee18 0a10 	vmov	r0, s16
 80214c6:	5cf1      	ldrb	r1, [r6, r3]
 80214c8:	60bb      	str	r3, [r7, #8]
 80214ca:	4622      	mov	r2, r4
 80214cc:	f7ff fb37 	bl	8020b3e <_sungetc_r>
 80214d0:	e7b5      	b.n	802143e <__ssvfiscanf_r+0x7da>
 80214d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214d4:	68ba      	ldr	r2, [r7, #8]
 80214d6:	4413      	add	r3, r2
 80214d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80214da:	6a3b      	ldr	r3, [r7, #32]
 80214dc:	2b03      	cmp	r3, #3
 80214de:	d102      	bne.n	80214e6 <__ssvfiscanf_r+0x882>
 80214e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80214e2:	2b04      	cmp	r3, #4
 80214e4:	d002      	beq.n	80214ec <__ssvfiscanf_r+0x888>
 80214e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214e8:	3b01      	subs	r3, #1
 80214ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80214ec:	69bb      	ldr	r3, [r7, #24]
 80214ee:	b9bb      	cbnz	r3, 8021520 <__ssvfiscanf_r+0x8bc>
 80214f0:	68fb      	ldr	r3, [r7, #12]
 80214f2:	3504      	adds	r5, #4
 80214f4:	b1a3      	cbz	r3, 8021520 <__ssvfiscanf_r+0x8bc>
 80214f6:	eba5 0608 	sub.w	r6, r5, r8
 80214fa:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80214fe:	d80d      	bhi.n	802151c <__ssvfiscanf_r+0x8b8>
 8021500:	4640      	mov	r0, r8
 8021502:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021506:	f001 fbf3 	bl	8022cf0 <realloc>
 802150a:	4680      	mov	r8, r0
 802150c:	2800      	cmp	r0, #0
 802150e:	f43f ad4c 	beq.w	8020faa <__ssvfiscanf_r+0x346>
 8021512:	68fb      	ldr	r3, [r7, #12]
 8021514:	1985      	adds	r5, r0, r6
 8021516:	6018      	str	r0, [r3, #0]
 8021518:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802151c:	69be      	ldr	r6, [r7, #24]
 802151e:	e7bc      	b.n	802149a <__ssvfiscanf_r+0x836>
 8021520:	2600      	movs	r6, #0
 8021522:	e7ba      	b.n	802149a <__ssvfiscanf_r+0x836>
 8021524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021526:	2b00      	cmp	r3, #0
 8021528:	f47f af37 	bne.w	802139a <__ssvfiscanf_r+0x736>
 802152c:	e78a      	b.n	8021444 <__ssvfiscanf_r+0x7e0>
 802152e:	b1f3      	cbz	r3, 802156e <__ssvfiscanf_r+0x90a>
 8021530:	f107 0870 	add.w	r8, r7, #112	; 0x70
 8021534:	6823      	ldr	r3, [r4, #0]
 8021536:	781a      	ldrb	r2, [r3, #0]
 8021538:	f818 2002 	ldrb.w	r2, [r8, r2]
 802153c:	b912      	cbnz	r2, 8021544 <__ssvfiscanf_r+0x8e0>
 802153e:	b99d      	cbnz	r5, 8021568 <__ssvfiscanf_r+0x904>
 8021540:	f7ff bbea 	b.w	8020d18 <__ssvfiscanf_r+0xb4>
 8021544:	3301      	adds	r3, #1
 8021546:	6862      	ldr	r2, [r4, #4]
 8021548:	6023      	str	r3, [r4, #0]
 802154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802154c:	3501      	adds	r5, #1
 802154e:	3a01      	subs	r2, #1
 8021550:	42ab      	cmp	r3, r5
 8021552:	6062      	str	r2, [r4, #4]
 8021554:	d008      	beq.n	8021568 <__ssvfiscanf_r+0x904>
 8021556:	2a00      	cmp	r2, #0
 8021558:	dcec      	bgt.n	8021534 <__ssvfiscanf_r+0x8d0>
 802155a:	ee18 0a10 	vmov	r0, s16
 802155e:	4621      	mov	r1, r4
 8021560:	f7ff fb2a 	bl	8020bb8 <__ssrefill_r>
 8021564:	2800      	cmp	r0, #0
 8021566:	d0e5      	beq.n	8021534 <__ssvfiscanf_r+0x8d0>
 8021568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802156a:	442b      	add	r3, r5
 802156c:	e472      	b.n	8020e54 <__ssvfiscanf_r+0x1f0>
 802156e:	4633      	mov	r3, r6
 8021570:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8021574:	f853 6b04 	ldr.w	r6, [r3], #4
 8021578:	61bb      	str	r3, [r7, #24]
 802157a:	f000 8081 	beq.w	8021680 <__ssvfiscanf_r+0xa1c>
 802157e:	2e00      	cmp	r6, #0
 8021580:	f43f abca 	beq.w	8020d18 <__ssvfiscanf_r+0xb4>
 8021584:	2020      	movs	r0, #32
 8021586:	f7fe fb87 	bl	801fc98 <malloc>
 802158a:	4680      	mov	r8, r0
 802158c:	2800      	cmp	r0, #0
 802158e:	f43f ac70 	beq.w	8020e72 <__ssvfiscanf_r+0x20e>
 8021592:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8021596:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 802159a:	6030      	str	r0, [r6, #0]
 802159c:	45a9      	cmp	r9, r5
 802159e:	d311      	bcc.n	80215c4 <__ssvfiscanf_r+0x960>
 80215a0:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80215a4:	429d      	cmp	r5, r3
 80215a6:	f63f ad09 	bhi.w	8020fbc <__ssvfiscanf_r+0x358>
 80215aa:	3508      	adds	r5, #8
 80215ac:	f8db 0000 	ldr.w	r0, [fp]
 80215b0:	00a9      	lsls	r1, r5, #2
 80215b2:	f001 fb9d 	bl	8022cf0 <realloc>
 80215b6:	2800      	cmp	r0, #0
 80215b8:	f43f ad00 	beq.w	8020fbc <__ssvfiscanf_r+0x358>
 80215bc:	f8cb 0000 	str.w	r0, [fp]
 80215c0:	f8ab 5004 	strh.w	r5, [fp, #4]
 80215c4:	f8db 3000 	ldr.w	r3, [fp]
 80215c8:	f109 0201 	add.w	r2, r9, #1
 80215cc:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 80215d0:	46b2      	mov	sl, r6
 80215d2:	f8ab 2006 	strh.w	r2, [fp, #6]
 80215d6:	4646      	mov	r6, r8
 80215d8:	2520      	movs	r5, #32
 80215da:	46b0      	mov	r8, r6
 80215dc:	f107 0970 	add.w	r9, r7, #112	; 0x70
 80215e0:	6823      	ldr	r3, [r4, #0]
 80215e2:	781a      	ldrb	r2, [r3, #0]
 80215e4:	f819 2002 	ldrb.w	r2, [r9, r2]
 80215e8:	b36a      	cbz	r2, 8021646 <__ssvfiscanf_r+0x9e2>
 80215ea:	6862      	ldr	r2, [r4, #4]
 80215ec:	3a01      	subs	r2, #1
 80215ee:	6062      	str	r2, [r4, #4]
 80215f0:	1c5a      	adds	r2, r3, #1
 80215f2:	6022      	str	r2, [r4, #0]
 80215f4:	781b      	ldrb	r3, [r3, #0]
 80215f6:	f806 3b01 	strb.w	r3, [r6], #1
 80215fa:	f1ba 0f00 	cmp.w	sl, #0
 80215fe:	d011      	beq.n	8021624 <__ssvfiscanf_r+0x9c0>
 8021600:	eba6 0308 	sub.w	r3, r6, r8
 8021604:	42ab      	cmp	r3, r5
 8021606:	d30d      	bcc.n	8021624 <__ssvfiscanf_r+0x9c0>
 8021608:	006d      	lsls	r5, r5, #1
 802160a:	4640      	mov	r0, r8
 802160c:	4629      	mov	r1, r5
 802160e:	60fb      	str	r3, [r7, #12]
 8021610:	f001 fb6e 	bl	8022cf0 <realloc>
 8021614:	4680      	mov	r8, r0
 8021616:	2800      	cmp	r0, #0
 8021618:	f43f ac2b 	beq.w	8020e72 <__ssvfiscanf_r+0x20e>
 802161c:	68fb      	ldr	r3, [r7, #12]
 802161e:	f8ca 0000 	str.w	r0, [sl]
 8021622:	18c6      	adds	r6, r0, r3
 8021624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021626:	3b01      	subs	r3, #1
 8021628:	62bb      	str	r3, [r7, #40]	; 0x28
 802162a:	d00c      	beq.n	8021646 <__ssvfiscanf_r+0x9e2>
 802162c:	6863      	ldr	r3, [r4, #4]
 802162e:	2b00      	cmp	r3, #0
 8021630:	dcd6      	bgt.n	80215e0 <__ssvfiscanf_r+0x97c>
 8021632:	ee18 0a10 	vmov	r0, s16
 8021636:	4621      	mov	r1, r4
 8021638:	f7ff fabe 	bl	8020bb8 <__ssrefill_r>
 802163c:	2800      	cmp	r0, #0
 802163e:	d0cf      	beq.n	80215e0 <__ssvfiscanf_r+0x97c>
 8021640:	4546      	cmp	r6, r8
 8021642:	f43f ac10 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 8021646:	ebb6 0808 	subs.w	r8, r6, r8
 802164a:	f43f ab65 	beq.w	8020d18 <__ssvfiscanf_r+0xb4>
 802164e:	2300      	movs	r3, #0
 8021650:	7033      	strb	r3, [r6, #0]
 8021652:	f1ba 0f00 	cmp.w	sl, #0
 8021656:	d00a      	beq.n	802166e <__ssvfiscanf_r+0xa0a>
 8021658:	f108 0101 	add.w	r1, r8, #1
 802165c:	428d      	cmp	r5, r1
 802165e:	d906      	bls.n	802166e <__ssvfiscanf_r+0xa0a>
 8021660:	f8da 0000 	ldr.w	r0, [sl]
 8021664:	f001 fb44 	bl	8022cf0 <realloc>
 8021668:	b108      	cbz	r0, 802166e <__ssvfiscanf_r+0xa0a>
 802166a:	f8ca 0000 	str.w	r0, [sl]
 802166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021670:	3301      	adds	r3, #1
 8021672:	627b      	str	r3, [r7, #36]	; 0x24
 8021674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021676:	4443      	add	r3, r8
 8021678:	62fb      	str	r3, [r7, #44]	; 0x2c
 802167a:	69be      	ldr	r6, [r7, #24]
 802167c:	f7ff bb0f 	b.w	8020c9e <__ssvfiscanf_r+0x3a>
 8021680:	46aa      	mov	sl, r5
 8021682:	e7aa      	b.n	80215da <__ssvfiscanf_r+0x976>
 8021684:	200008e0 	.word	0x200008e0
 8021688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802168a:	2b00      	cmp	r3, #0
 802168c:	bf08      	it	eq
 802168e:	f04f 33ff 	moveq.w	r3, #4294967295
 8021692:	f019 0501 	ands.w	r5, r9, #1
 8021696:	62bb      	str	r3, [r7, #40]	; 0x28
 8021698:	f009 0810 	and.w	r8, r9, #16
 802169c:	f000 80f5 	beq.w	802188a <__ssvfiscanf_r+0xc26>
 80216a0:	f1b8 0f00 	cmp.w	r8, #0
 80216a4:	f040 809a 	bne.w	80217dc <__ssvfiscanf_r+0xb78>
 80216a8:	4633      	mov	r3, r6
 80216aa:	f019 0f80 	tst.w	r9, #128	; 0x80
 80216ae:	f853 5b04 	ldr.w	r5, [r3], #4
 80216b2:	61bb      	str	r3, [r7, #24]
 80216b4:	f000 809a 	beq.w	80217ec <__ssvfiscanf_r+0xb88>
 80216b8:	2d00      	cmp	r5, #0
 80216ba:	f43f ac79 	beq.w	8020fb0 <__ssvfiscanf_r+0x34c>
 80216be:	2080      	movs	r0, #128	; 0x80
 80216c0:	f7fe faea 	bl	801fc98 <malloc>
 80216c4:	4606      	mov	r6, r0
 80216c6:	2800      	cmp	r0, #0
 80216c8:	f43f ac6f 	beq.w	8020faa <__ssvfiscanf_r+0x346>
 80216cc:	f8bb a006 	ldrh.w	sl, [fp, #6]
 80216d0:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 80216d4:	6028      	str	r0, [r5, #0]
 80216d6:	45ca      	cmp	sl, r9
 80216d8:	d313      	bcc.n	8021702 <__ssvfiscanf_r+0xa9e>
 80216da:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80216de:	4599      	cmp	r9, r3
 80216e0:	f63f ac63 	bhi.w	8020faa <__ssvfiscanf_r+0x346>
 80216e4:	f109 0908 	add.w	r9, r9, #8
 80216e8:	f8db 0000 	ldr.w	r0, [fp]
 80216ec:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80216f0:	f001 fafe 	bl	8022cf0 <realloc>
 80216f4:	2800      	cmp	r0, #0
 80216f6:	f43f ac58 	beq.w	8020faa <__ssvfiscanf_r+0x346>
 80216fa:	f8cb 0000 	str.w	r0, [fp]
 80216fe:	f8ab 9004 	strh.w	r9, [fp, #4]
 8021702:	f8db 3000 	ldr.w	r3, [fp]
 8021706:	f10a 0201 	add.w	r2, sl, #1
 802170a:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802170e:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021712:	46aa      	mov	sl, r5
 8021714:	f04f 0920 	mov.w	r9, #32
 8021718:	4635      	mov	r5, r6
 802171a:	2200      	movs	r2, #0
 802171c:	6823      	ldr	r3, [r4, #0]
 802171e:	49ab      	ldr	r1, [pc, #684]	; (80219cc <__ssvfiscanf_r+0xd68>)
 8021720:	781b      	ldrb	r3, [r3, #0]
 8021722:	5c5b      	ldrb	r3, [r3, r1]
 8021724:	0718      	lsls	r0, r3, #28
 8021726:	d43f      	bmi.n	80217a8 <__ssvfiscanf_r+0xb44>
 8021728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802172a:	2b00      	cmp	r3, #0
 802172c:	d03c      	beq.n	80217a8 <__ssvfiscanf_r+0xb44>
 802172e:	60fa      	str	r2, [r7, #12]
 8021730:	f001 fa88 	bl	8022c44 <__locale_mb_cur_max>
 8021734:	68fa      	ldr	r2, [r7, #12]
 8021736:	4290      	cmp	r0, r2
 8021738:	f43f ab95 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 802173c:	6821      	ldr	r1, [r4, #0]
 802173e:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8021742:	f811 0b01 	ldrb.w	r0, [r1], #1
 8021746:	f80c 0002 	strb.w	r0, [ip, r2]
 802174a:	1c53      	adds	r3, r2, #1
 802174c:	6862      	ldr	r2, [r4, #4]
 802174e:	3a01      	subs	r2, #1
 8021750:	e9c4 1200 	strd	r1, r2, [r4]
 8021754:	6a3a      	ldr	r2, [r7, #32]
 8021756:	2a03      	cmp	r2, #3
 8021758:	d102      	bne.n	8021760 <__ssvfiscanf_r+0xafc>
 802175a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802175c:	2a04      	cmp	r2, #4
 802175e:	d007      	beq.n	8021770 <__ssvfiscanf_r+0xb0c>
 8021760:	2208      	movs	r2, #8
 8021762:	2100      	movs	r1, #0
 8021764:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8021768:	623b      	str	r3, [r7, #32]
 802176a:	f7f9 fd7f 	bl	801b26c <memset>
 802176e:	6a3b      	ldr	r3, [r7, #32]
 8021770:	60fb      	str	r3, [r7, #12]
 8021772:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8021776:	9200      	str	r2, [sp, #0]
 8021778:	ee18 0a10 	vmov	r0, s16
 802177c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8021780:	4629      	mov	r1, r5
 8021782:	f001 fa77 	bl	8022c74 <_mbrtowc_r>
 8021786:	1c42      	adds	r2, r0, #1
 8021788:	6238      	str	r0, [r7, #32]
 802178a:	f43f ab6c 	beq.w	8020e66 <__ssvfiscanf_r+0x202>
 802178e:	68fb      	ldr	r3, [r7, #12]
 8021790:	bb80      	cbnz	r0, 80217f4 <__ssvfiscanf_r+0xb90>
 8021792:	6028      	str	r0, [r5, #0]
 8021794:	6828      	ldr	r0, [r5, #0]
 8021796:	60fb      	str	r3, [r7, #12]
 8021798:	f001 fa46 	bl	8022c28 <iswspace>
 802179c:	68fb      	ldr	r3, [r7, #12]
 802179e:	4602      	mov	r2, r0
 80217a0:	2800      	cmp	r0, #0
 80217a2:	d047      	beq.n	8021834 <__ssvfiscanf_r+0xbd0>
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	d139      	bne.n	802181c <__ssvfiscanf_r+0xbb8>
 80217a8:	f1b8 0f00 	cmp.w	r8, #0
 80217ac:	f47f af65 	bne.w	802167a <__ssvfiscanf_r+0xa16>
 80217b0:	f8c5 8000 	str.w	r8, [r5]
 80217b4:	f1ba 0f00 	cmp.w	sl, #0
 80217b8:	d00c      	beq.n	80217d4 <__ssvfiscanf_r+0xb70>
 80217ba:	1ba9      	subs	r1, r5, r6
 80217bc:	108b      	asrs	r3, r1, #2
 80217be:	3301      	adds	r3, #1
 80217c0:	4599      	cmp	r9, r3
 80217c2:	d907      	bls.n	80217d4 <__ssvfiscanf_r+0xb70>
 80217c4:	f8da 0000 	ldr.w	r0, [sl]
 80217c8:	3104      	adds	r1, #4
 80217ca:	f001 fa91 	bl	8022cf0 <realloc>
 80217ce:	b108      	cbz	r0, 80217d4 <__ssvfiscanf_r+0xb70>
 80217d0:	f8ca 0000 	str.w	r0, [sl]
 80217d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217d6:	3301      	adds	r3, #1
 80217d8:	627b      	str	r3, [r7, #36]	; 0x24
 80217da:	e74e      	b.n	802167a <__ssvfiscanf_r+0xa16>
 80217dc:	f04f 0900 	mov.w	r9, #0
 80217e0:	61be      	str	r6, [r7, #24]
 80217e2:	46ca      	mov	sl, r9
 80217e4:	464e      	mov	r6, r9
 80217e6:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80217ea:	e796      	b.n	802171a <__ssvfiscanf_r+0xab6>
 80217ec:	46c1      	mov	r9, r8
 80217ee:	4646      	mov	r6, r8
 80217f0:	46c2      	mov	sl, r8
 80217f2:	e792      	b.n	802171a <__ssvfiscanf_r+0xab6>
 80217f4:	6a3a      	ldr	r2, [r7, #32]
 80217f6:	3202      	adds	r2, #2
 80217f8:	d1cc      	bne.n	8021794 <__ssvfiscanf_r+0xb30>
 80217fa:	461a      	mov	r2, r3
 80217fc:	6863      	ldr	r3, [r4, #4]
 80217fe:	2b00      	cmp	r3, #0
 8021800:	dc8c      	bgt.n	802171c <__ssvfiscanf_r+0xab8>
 8021802:	ee18 0a10 	vmov	r0, s16
 8021806:	4621      	mov	r1, r4
 8021808:	60fa      	str	r2, [r7, #12]
 802180a:	f7ff f9d5 	bl	8020bb8 <__ssrefill_r>
 802180e:	68fa      	ldr	r2, [r7, #12]
 8021810:	2800      	cmp	r0, #0
 8021812:	d083      	beq.n	802171c <__ssvfiscanf_r+0xab8>
 8021814:	2a00      	cmp	r2, #0
 8021816:	f47f ab26 	bne.w	8020e66 <__ssvfiscanf_r+0x202>
 802181a:	e7c5      	b.n	80217a8 <__ssvfiscanf_r+0xb44>
 802181c:	3b01      	subs	r3, #1
 802181e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021822:	ee18 0a10 	vmov	r0, s16
 8021826:	5cc9      	ldrb	r1, [r1, r3]
 8021828:	62bb      	str	r3, [r7, #40]	; 0x28
 802182a:	4622      	mov	r2, r4
 802182c:	f7ff f987 	bl	8020b3e <_sungetc_r>
 8021830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021832:	e7b7      	b.n	80217a4 <__ssvfiscanf_r+0xb40>
 8021834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021836:	4419      	add	r1, r3
 8021838:	6a3b      	ldr	r3, [r7, #32]
 802183a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802183c:	2b03      	cmp	r3, #3
 802183e:	d102      	bne.n	8021846 <__ssvfiscanf_r+0xbe2>
 8021840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021842:	2b04      	cmp	r3, #4
 8021844:	d002      	beq.n	802184c <__ssvfiscanf_r+0xbe8>
 8021846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021848:	3b01      	subs	r3, #1
 802184a:	62bb      	str	r3, [r7, #40]	; 0x28
 802184c:	f1b8 0f00 	cmp.w	r8, #0
 8021850:	d1d4      	bne.n	80217fc <__ssvfiscanf_r+0xb98>
 8021852:	3504      	adds	r5, #4
 8021854:	f1ba 0f00 	cmp.w	sl, #0
 8021858:	d015      	beq.n	8021886 <__ssvfiscanf_r+0xc22>
 802185a:	1bab      	subs	r3, r5, r6
 802185c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8021860:	d80f      	bhi.n	8021882 <__ssvfiscanf_r+0xc1e>
 8021862:	4630      	mov	r0, r6
 8021864:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021868:	60fb      	str	r3, [r7, #12]
 802186a:	f001 fa41 	bl	8022cf0 <realloc>
 802186e:	4606      	mov	r6, r0
 8021870:	2800      	cmp	r0, #0
 8021872:	f43f ab9a 	beq.w	8020faa <__ssvfiscanf_r+0x346>
 8021876:	68fb      	ldr	r3, [r7, #12]
 8021878:	f8ca 0000 	str.w	r0, [sl]
 802187c:	18c5      	adds	r5, r0, r3
 802187e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021882:	4642      	mov	r2, r8
 8021884:	e7ba      	b.n	80217fc <__ssvfiscanf_r+0xb98>
 8021886:	4652      	mov	r2, sl
 8021888:	e7b8      	b.n	80217fc <__ssvfiscanf_r+0xb98>
 802188a:	f1b8 0f00 	cmp.w	r8, #0
 802188e:	d01a      	beq.n	80218c6 <__ssvfiscanf_r+0xc62>
 8021890:	6823      	ldr	r3, [r4, #0]
 8021892:	494e      	ldr	r1, [pc, #312]	; (80219cc <__ssvfiscanf_r+0xd68>)
 8021894:	781a      	ldrb	r2, [r3, #0]
 8021896:	5c52      	ldrb	r2, [r2, r1]
 8021898:	0711      	lsls	r1, r2, #28
 802189a:	f53f ae65 	bmi.w	8021568 <__ssvfiscanf_r+0x904>
 802189e:	3301      	adds	r3, #1
 80218a0:	6862      	ldr	r2, [r4, #4]
 80218a2:	6023      	str	r3, [r4, #0]
 80218a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218a6:	3501      	adds	r5, #1
 80218a8:	3a01      	subs	r2, #1
 80218aa:	42ab      	cmp	r3, r5
 80218ac:	6062      	str	r2, [r4, #4]
 80218ae:	f43f ae5b 	beq.w	8021568 <__ssvfiscanf_r+0x904>
 80218b2:	2a00      	cmp	r2, #0
 80218b4:	dcec      	bgt.n	8021890 <__ssvfiscanf_r+0xc2c>
 80218b6:	ee18 0a10 	vmov	r0, s16
 80218ba:	4621      	mov	r1, r4
 80218bc:	f7ff f97c 	bl	8020bb8 <__ssrefill_r>
 80218c0:	2800      	cmp	r0, #0
 80218c2:	d0e5      	beq.n	8021890 <__ssvfiscanf_r+0xc2c>
 80218c4:	e650      	b.n	8021568 <__ssvfiscanf_r+0x904>
 80218c6:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 80218ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80218ce:	d07b      	beq.n	80219c8 <__ssvfiscanf_r+0xd64>
 80218d0:	2d00      	cmp	r5, #0
 80218d2:	f43f aa21 	beq.w	8020d18 <__ssvfiscanf_r+0xb4>
 80218d6:	2020      	movs	r0, #32
 80218d8:	f7fe f9de 	bl	801fc98 <malloc>
 80218dc:	4681      	mov	r9, r0
 80218de:	2800      	cmp	r0, #0
 80218e0:	f43f aac7 	beq.w	8020e72 <__ssvfiscanf_r+0x20e>
 80218e4:	f8bb a006 	ldrh.w	sl, [fp, #6]
 80218e8:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 80218ec:	6028      	str	r0, [r5, #0]
 80218ee:	45c2      	cmp	sl, r8
 80218f0:	d313      	bcc.n	802191a <__ssvfiscanf_r+0xcb6>
 80218f2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80218f6:	4598      	cmp	r8, r3
 80218f8:	f63f ab60 	bhi.w	8020fbc <__ssvfiscanf_r+0x358>
 80218fc:	f108 0808 	add.w	r8, r8, #8
 8021900:	f8db 0000 	ldr.w	r0, [fp]
 8021904:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8021908:	f001 f9f2 	bl	8022cf0 <realloc>
 802190c:	2800      	cmp	r0, #0
 802190e:	f43f ab55 	beq.w	8020fbc <__ssvfiscanf_r+0x358>
 8021912:	f8cb 0000 	str.w	r0, [fp]
 8021916:	f8ab 8004 	strh.w	r8, [fp, #4]
 802191a:	f8db 3000 	ldr.w	r3, [fp]
 802191e:	f10a 0201 	add.w	r2, sl, #1
 8021922:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8021926:	f8ab 2006 	strh.w	r2, [fp, #6]
 802192a:	46aa      	mov	sl, r5
 802192c:	464d      	mov	r5, r9
 802192e:	f04f 0920 	mov.w	r9, #32
 8021932:	46a8      	mov	r8, r5
 8021934:	6823      	ldr	r3, [r4, #0]
 8021936:	4925      	ldr	r1, [pc, #148]	; (80219cc <__ssvfiscanf_r+0xd68>)
 8021938:	781a      	ldrb	r2, [r3, #0]
 802193a:	5c52      	ldrb	r2, [r2, r1]
 802193c:	0712      	lsls	r2, r2, #28
 802193e:	d42b      	bmi.n	8021998 <__ssvfiscanf_r+0xd34>
 8021940:	6862      	ldr	r2, [r4, #4]
 8021942:	3a01      	subs	r2, #1
 8021944:	6062      	str	r2, [r4, #4]
 8021946:	1c5a      	adds	r2, r3, #1
 8021948:	6022      	str	r2, [r4, #0]
 802194a:	781b      	ldrb	r3, [r3, #0]
 802194c:	f805 3b01 	strb.w	r3, [r5], #1
 8021950:	f1ba 0f00 	cmp.w	sl, #0
 8021954:	d012      	beq.n	802197c <__ssvfiscanf_r+0xd18>
 8021956:	eba5 0308 	sub.w	r3, r5, r8
 802195a:	454b      	cmp	r3, r9
 802195c:	d30e      	bcc.n	802197c <__ssvfiscanf_r+0xd18>
 802195e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021962:	4640      	mov	r0, r8
 8021964:	4649      	mov	r1, r9
 8021966:	61bb      	str	r3, [r7, #24]
 8021968:	f001 f9c2 	bl	8022cf0 <realloc>
 802196c:	4680      	mov	r8, r0
 802196e:	2800      	cmp	r0, #0
 8021970:	f43f aa7f 	beq.w	8020e72 <__ssvfiscanf_r+0x20e>
 8021974:	69bb      	ldr	r3, [r7, #24]
 8021976:	f8ca 0000 	str.w	r0, [sl]
 802197a:	18c5      	adds	r5, r0, r3
 802197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802197e:	3b01      	subs	r3, #1
 8021980:	62bb      	str	r3, [r7, #40]	; 0x28
 8021982:	d009      	beq.n	8021998 <__ssvfiscanf_r+0xd34>
 8021984:	6863      	ldr	r3, [r4, #4]
 8021986:	2b00      	cmp	r3, #0
 8021988:	dcd4      	bgt.n	8021934 <__ssvfiscanf_r+0xcd0>
 802198a:	ee18 0a10 	vmov	r0, s16
 802198e:	4621      	mov	r1, r4
 8021990:	f7ff f912 	bl	8020bb8 <__ssrefill_r>
 8021994:	2800      	cmp	r0, #0
 8021996:	d0cd      	beq.n	8021934 <__ssvfiscanf_r+0xcd0>
 8021998:	2300      	movs	r3, #0
 802199a:	702b      	strb	r3, [r5, #0]
 802199c:	eba5 0508 	sub.w	r5, r5, r8
 80219a0:	f1ba 0f00 	cmp.w	sl, #0
 80219a4:	d009      	beq.n	80219ba <__ssvfiscanf_r+0xd56>
 80219a6:	1c69      	adds	r1, r5, #1
 80219a8:	4589      	cmp	r9, r1
 80219aa:	d906      	bls.n	80219ba <__ssvfiscanf_r+0xd56>
 80219ac:	f8da 0000 	ldr.w	r0, [sl]
 80219b0:	f001 f99e 	bl	8022cf0 <realloc>
 80219b4:	b108      	cbz	r0, 80219ba <__ssvfiscanf_r+0xd56>
 80219b6:	f8ca 0000 	str.w	r0, [sl]
 80219ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219bc:	442b      	add	r3, r5
 80219be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80219c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219c2:	3301      	adds	r3, #1
 80219c4:	f7ff b96a 	b.w	8020c9c <__ssvfiscanf_r+0x38>
 80219c8:	46ca      	mov	sl, r9
 80219ca:	e7b2      	b.n	8021932 <__ssvfiscanf_r+0xcce>
 80219cc:	080296f1 	.word	0x080296f1
 80219d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219d2:	3b01      	subs	r3, #1
 80219d4:	2b26      	cmp	r3, #38	; 0x26
 80219d6:	bf81      	itttt	hi
 80219d8:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 80219da:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 80219de:	2327      	movhi	r3, #39	; 0x27
 80219e0:	62bb      	strhi	r3, [r7, #40]	; 0x28
 80219e2:	bf98      	it	ls
 80219e4:	2500      	movls	r5, #0
 80219e6:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 80219ea:	f04f 0a00 	mov.w	sl, #0
 80219ee:	f107 0848 	add.w	r8, r7, #72	; 0x48
 80219f2:	6822      	ldr	r2, [r4, #0]
 80219f4:	7813      	ldrb	r3, [r2, #0]
 80219f6:	2b39      	cmp	r3, #57	; 0x39
 80219f8:	d80f      	bhi.n	8021a1a <__ssvfiscanf_r+0xdb6>
 80219fa:	2b2a      	cmp	r3, #42	; 0x2a
 80219fc:	d91a      	bls.n	8021a34 <__ssvfiscanf_r+0xdd0>
 80219fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8021a02:	290e      	cmp	r1, #14
 8021a04:	d816      	bhi.n	8021a34 <__ssvfiscanf_r+0xdd0>
 8021a06:	e8df f001 	tbb	[pc, r1]
 8021a0a:	1577      	.short	0x1577
 8021a0c:	41151577 	.word	0x41151577
 8021a10:	67676767 	.word	0x67676767
 8021a14:	6f676767 	.word	0x6f676767
 8021a18:	6f          	.byte	0x6f
 8021a19:	00          	.byte	0x00
 8021a1a:	2b66      	cmp	r3, #102	; 0x66
 8021a1c:	d834      	bhi.n	8021a88 <__ssvfiscanf_r+0xe24>
 8021a1e:	2b60      	cmp	r3, #96	; 0x60
 8021a20:	d803      	bhi.n	8021a2a <__ssvfiscanf_r+0xdc6>
 8021a22:	2b46      	cmp	r3, #70	; 0x46
 8021a24:	d804      	bhi.n	8021a30 <__ssvfiscanf_r+0xdcc>
 8021a26:	2b40      	cmp	r3, #64	; 0x40
 8021a28:	d904      	bls.n	8021a34 <__ssvfiscanf_r+0xdd0>
 8021a2a:	69f9      	ldr	r1, [r7, #28]
 8021a2c:	290a      	cmp	r1, #10
 8021a2e:	e061      	b.n	8021af4 <__ssvfiscanf_r+0xe90>
 8021a30:	2b58      	cmp	r3, #88	; 0x58
 8021a32:	d067      	beq.n	8021b04 <__ssvfiscanf_r+0xea0>
 8021a34:	f419 7f80 	tst.w	r9, #256	; 0x100
 8021a38:	d012      	beq.n	8021a60 <__ssvfiscanf_r+0xdfc>
 8021a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021a3e:	4598      	cmp	r8, r3
 8021a40:	d909      	bls.n	8021a56 <__ssvfiscanf_r+0xdf2>
 8021a42:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8021a46:	ee18 0a10 	vmov	r0, s16
 8021a4a:	4622      	mov	r2, r4
 8021a4c:	f7ff f877 	bl	8020b3e <_sungetc_r>
 8021a50:	f108 35ff 	add.w	r5, r8, #4294967295
 8021a54:	46a8      	mov	r8, r5
 8021a56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021a5a:	4598      	cmp	r8, r3
 8021a5c:	f43f a95c 	beq.w	8020d18 <__ssvfiscanf_r+0xb4>
 8021a60:	f019 0210 	ands.w	r2, r9, #16
 8021a64:	d16b      	bne.n	8021b3e <__ssvfiscanf_r+0xeda>
 8021a66:	697d      	ldr	r5, [r7, #20]
 8021a68:	69fb      	ldr	r3, [r7, #28]
 8021a6a:	f888 2000 	strb.w	r2, [r8]
 8021a6e:	ee18 0a10 	vmov	r0, s16
 8021a72:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021a76:	47a8      	blx	r5
 8021a78:	f019 0f20 	tst.w	r9, #32
 8021a7c:	f106 0504 	add.w	r5, r6, #4
 8021a80:	d054      	beq.n	8021b2c <__ssvfiscanf_r+0xec8>
 8021a82:	6833      	ldr	r3, [r6, #0]
 8021a84:	6018      	str	r0, [r3, #0]
 8021a86:	e056      	b.n	8021b36 <__ssvfiscanf_r+0xed2>
 8021a88:	2b78      	cmp	r3, #120	; 0x78
 8021a8a:	e7d2      	b.n	8021a32 <__ssvfiscanf_r+0xdce>
 8021a8c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8021a90:	d00a      	beq.n	8021aa8 <__ssvfiscanf_r+0xe44>
 8021a92:	69f9      	ldr	r1, [r7, #28]
 8021a94:	b919      	cbnz	r1, 8021a9e <__ssvfiscanf_r+0xe3a>
 8021a96:	2108      	movs	r1, #8
 8021a98:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8021a9c:	61f9      	str	r1, [r7, #28]
 8021a9e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8021aa2:	d004      	beq.n	8021aae <__ssvfiscanf_r+0xe4a>
 8021aa4:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 8021aa8:	f808 3b01 	strb.w	r3, [r8], #1
 8021aac:	e008      	b.n	8021ac0 <__ssvfiscanf_r+0xe5c>
 8021aae:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 8021ab2:	b11d      	cbz	r5, 8021abc <__ssvfiscanf_r+0xe58>
 8021ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ab6:	3301      	adds	r3, #1
 8021ab8:	3d01      	subs	r5, #1
 8021aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8021abc:	f10a 0a01 	add.w	sl, sl, #1
 8021ac0:	6863      	ldr	r3, [r4, #4]
 8021ac2:	3b01      	subs	r3, #1
 8021ac4:	2b00      	cmp	r3, #0
 8021ac6:	6063      	str	r3, [r4, #4]
 8021ac8:	dd28      	ble.n	8021b1c <__ssvfiscanf_r+0xeb8>
 8021aca:	3201      	adds	r2, #1
 8021acc:	6022      	str	r2, [r4, #0]
 8021ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ad0:	3b01      	subs	r3, #1
 8021ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8021ad4:	d18d      	bne.n	80219f2 <__ssvfiscanf_r+0xd8e>
 8021ad6:	e7ad      	b.n	8021a34 <__ssvfiscanf_r+0xdd0>
 8021ad8:	69f8      	ldr	r0, [r7, #28]
 8021ada:	4932      	ldr	r1, [pc, #200]	; (8021ba4 <__ssvfiscanf_r+0xf40>)
 8021adc:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8021ae0:	61f9      	str	r1, [r7, #28]
 8021ae2:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 8021ae6:	e7df      	b.n	8021aa8 <__ssvfiscanf_r+0xe44>
 8021ae8:	69f8      	ldr	r0, [r7, #28]
 8021aea:	492e      	ldr	r1, [pc, #184]	; (8021ba4 <__ssvfiscanf_r+0xf40>)
 8021aec:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8021af0:	61f9      	str	r1, [r7, #28]
 8021af2:	2908      	cmp	r1, #8
 8021af4:	dcf5      	bgt.n	8021ae2 <__ssvfiscanf_r+0xe7e>
 8021af6:	e79d      	b.n	8021a34 <__ssvfiscanf_r+0xdd0>
 8021af8:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021afc:	d09a      	beq.n	8021a34 <__ssvfiscanf_r+0xdd0>
 8021afe:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 8021b02:	e7d1      	b.n	8021aa8 <__ssvfiscanf_r+0xe44>
 8021b04:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 8021b08:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021b0c:	d192      	bne.n	8021a34 <__ssvfiscanf_r+0xdd0>
 8021b0e:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 8021b12:	2110      	movs	r1, #16
 8021b14:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 8021b18:	61f9      	str	r1, [r7, #28]
 8021b1a:	e7c5      	b.n	8021aa8 <__ssvfiscanf_r+0xe44>
 8021b1c:	ee18 0a10 	vmov	r0, s16
 8021b20:	4621      	mov	r1, r4
 8021b22:	f7ff f849 	bl	8020bb8 <__ssrefill_r>
 8021b26:	2800      	cmp	r0, #0
 8021b28:	d0d1      	beq.n	8021ace <__ssvfiscanf_r+0xe6a>
 8021b2a:	e783      	b.n	8021a34 <__ssvfiscanf_r+0xdd0>
 8021b2c:	f019 0f08 	tst.w	r9, #8
 8021b30:	d00e      	beq.n	8021b50 <__ssvfiscanf_r+0xeec>
 8021b32:	6833      	ldr	r3, [r6, #0]
 8021b34:	7018      	strb	r0, [r3, #0]
 8021b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b38:	3301      	adds	r3, #1
 8021b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8021b3c:	462e      	mov	r6, r5
 8021b3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021b42:	eba8 0803 	sub.w	r8, r8, r3
 8021b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b48:	44c2      	add	sl, r8
 8021b4a:	4453      	add	r3, sl
 8021b4c:	f7ff b982 	b.w	8020e54 <__ssvfiscanf_r+0x1f0>
 8021b50:	f019 0f04 	tst.w	r9, #4
 8021b54:	d002      	beq.n	8021b5c <__ssvfiscanf_r+0xef8>
 8021b56:	6833      	ldr	r3, [r6, #0]
 8021b58:	8018      	strh	r0, [r3, #0]
 8021b5a:	e7ec      	b.n	8021b36 <__ssvfiscanf_r+0xed2>
 8021b5c:	f019 0201 	ands.w	r2, r9, #1
 8021b60:	d18f      	bne.n	8021a82 <__ssvfiscanf_r+0xe1e>
 8021b62:	f019 0f02 	tst.w	r9, #2
 8021b66:	d08c      	beq.n	8021a82 <__ssvfiscanf_r+0xe1e>
 8021b68:	4b0f      	ldr	r3, [pc, #60]	; (8021ba8 <__ssvfiscanf_r+0xf44>)
 8021b6a:	6979      	ldr	r1, [r7, #20]
 8021b6c:	4299      	cmp	r1, r3
 8021b6e:	ee18 0a10 	vmov	r0, s16
 8021b72:	69fb      	ldr	r3, [r7, #28]
 8021b74:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021b78:	d105      	bne.n	8021b86 <__ssvfiscanf_r+0xf22>
 8021b7a:	f001 fbd3 	bl	8023324 <_strtoull_r>
 8021b7e:	6833      	ldr	r3, [r6, #0]
 8021b80:	e9c3 0100 	strd	r0, r1, [r3]
 8021b84:	e7d7      	b.n	8021b36 <__ssvfiscanf_r+0xed2>
 8021b86:	f001 fb31 	bl	80231ec <_strtoll_r>
 8021b8a:	e7f8      	b.n	8021b7e <__ssvfiscanf_r+0xf1a>
 8021b8c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021b90:	6818      	ldr	r0, [r3, #0]
 8021b92:	f7fe f889 	bl	801fca8 <free>
 8021b96:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021b9a:	3401      	adds	r4, #1
 8021b9c:	601e      	str	r6, [r3, #0]
 8021b9e:	f7ff ba0f 	b.w	8020fc0 <__ssvfiscanf_r+0x35c>
 8021ba2:	bf00      	nop
 8021ba4:	08029b44 	.word	0x08029b44
 8021ba8:	08020a31 	.word	0x08020a31

08021bac <sysconf>:
 8021bac:	2808      	cmp	r0, #8
 8021bae:	b508      	push	{r3, lr}
 8021bb0:	d006      	beq.n	8021bc0 <sysconf+0x14>
 8021bb2:	f7fd fc95 	bl	801f4e0 <__errno>
 8021bb6:	2316      	movs	r3, #22
 8021bb8:	6003      	str	r3, [r0, #0]
 8021bba:	f04f 30ff 	mov.w	r0, #4294967295
 8021bbe:	bd08      	pop	{r3, pc}
 8021bc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8021bc4:	e7fb      	b.n	8021bbe <sysconf+0x12>

08021bc6 <__submore>:
 8021bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021bca:	460c      	mov	r4, r1
 8021bcc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8021bce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8021bd2:	4299      	cmp	r1, r3
 8021bd4:	d11d      	bne.n	8021c12 <__submore+0x4c>
 8021bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021bda:	f7fe f86d 	bl	801fcb8 <_malloc_r>
 8021bde:	b918      	cbnz	r0, 8021be8 <__submore+0x22>
 8021be0:	f04f 30ff 	mov.w	r0, #4294967295
 8021be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021bec:	6363      	str	r3, [r4, #52]	; 0x34
 8021bee:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8021bf2:	6320      	str	r0, [r4, #48]	; 0x30
 8021bf4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021bf8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8021bfc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021c00:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8021c04:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021c08:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021c0c:	6020      	str	r0, [r4, #0]
 8021c0e:	2000      	movs	r0, #0
 8021c10:	e7e8      	b.n	8021be4 <__submore+0x1e>
 8021c12:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8021c14:	0077      	lsls	r7, r6, #1
 8021c16:	463a      	mov	r2, r7
 8021c18:	f001 f872 	bl	8022d00 <_realloc_r>
 8021c1c:	4605      	mov	r5, r0
 8021c1e:	2800      	cmp	r0, #0
 8021c20:	d0de      	beq.n	8021be0 <__submore+0x1a>
 8021c22:	eb00 0806 	add.w	r8, r0, r6
 8021c26:	4601      	mov	r1, r0
 8021c28:	4632      	mov	r2, r6
 8021c2a:	4640      	mov	r0, r8
 8021c2c:	f7f9 faf6 	bl	801b21c <memcpy>
 8021c30:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 8021c34:	f8c4 8000 	str.w	r8, [r4]
 8021c38:	e7e9      	b.n	8021c0e <__submore+0x48>

08021c3a <__sprint_r>:
 8021c3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c3e:	6893      	ldr	r3, [r2, #8]
 8021c40:	4680      	mov	r8, r0
 8021c42:	460f      	mov	r7, r1
 8021c44:	4614      	mov	r4, r2
 8021c46:	b91b      	cbnz	r3, 8021c50 <__sprint_r+0x16>
 8021c48:	6053      	str	r3, [r2, #4]
 8021c4a:	4618      	mov	r0, r3
 8021c4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c50:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8021c52:	049d      	lsls	r5, r3, #18
 8021c54:	d520      	bpl.n	8021c98 <__sprint_r+0x5e>
 8021c56:	6815      	ldr	r5, [r2, #0]
 8021c58:	3508      	adds	r5, #8
 8021c5a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8021c5e:	f04f 0900 	mov.w	r9, #0
 8021c62:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8021c66:	45ca      	cmp	sl, r9
 8021c68:	dc0b      	bgt.n	8021c82 <__sprint_r+0x48>
 8021c6a:	68a3      	ldr	r3, [r4, #8]
 8021c6c:	f026 0003 	bic.w	r0, r6, #3
 8021c70:	1a18      	subs	r0, r3, r0
 8021c72:	60a0      	str	r0, [r4, #8]
 8021c74:	3508      	adds	r5, #8
 8021c76:	2800      	cmp	r0, #0
 8021c78:	d1ef      	bne.n	8021c5a <__sprint_r+0x20>
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8021c80:	e7e4      	b.n	8021c4c <__sprint_r+0x12>
 8021c82:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8021c86:	463a      	mov	r2, r7
 8021c88:	4640      	mov	r0, r8
 8021c8a:	f000 fe36 	bl	80228fa <_fputwc_r>
 8021c8e:	1c43      	adds	r3, r0, #1
 8021c90:	d0f3      	beq.n	8021c7a <__sprint_r+0x40>
 8021c92:	f109 0901 	add.w	r9, r9, #1
 8021c96:	e7e6      	b.n	8021c66 <__sprint_r+0x2c>
 8021c98:	f000 fe6c 	bl	8022974 <__sfvwrite_r>
 8021c9c:	e7ed      	b.n	8021c7a <__sprint_r+0x40>
	...

08021ca0 <_vfiprintf_r>:
 8021ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ca4:	ed2d 8b02 	vpush	{d8}
 8021ca8:	b0b9      	sub	sp, #228	; 0xe4
 8021caa:	460f      	mov	r7, r1
 8021cac:	9201      	str	r2, [sp, #4]
 8021cae:	461d      	mov	r5, r3
 8021cb0:	461c      	mov	r4, r3
 8021cb2:	4681      	mov	r9, r0
 8021cb4:	b118      	cbz	r0, 8021cbe <_vfiprintf_r+0x1e>
 8021cb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8021cb8:	b90b      	cbnz	r3, 8021cbe <_vfiprintf_r+0x1e>
 8021cba:	f7fd fd11 	bl	801f6e0 <__sinit>
 8021cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021cc0:	07d8      	lsls	r0, r3, #31
 8021cc2:	d405      	bmi.n	8021cd0 <_vfiprintf_r+0x30>
 8021cc4:	89bb      	ldrh	r3, [r7, #12]
 8021cc6:	0599      	lsls	r1, r3, #22
 8021cc8:	d402      	bmi.n	8021cd0 <_vfiprintf_r+0x30>
 8021cca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021ccc:	f7fd ff75 	bl	801fbba <__retarget_lock_acquire_recursive>
 8021cd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8021cd4:	049a      	lsls	r2, r3, #18
 8021cd6:	d406      	bmi.n	8021ce6 <_vfiprintf_r+0x46>
 8021cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021cdc:	81bb      	strh	r3, [r7, #12]
 8021cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8021ce6:	89bb      	ldrh	r3, [r7, #12]
 8021ce8:	071e      	lsls	r6, r3, #28
 8021cea:	d501      	bpl.n	8021cf0 <_vfiprintf_r+0x50>
 8021cec:	693b      	ldr	r3, [r7, #16]
 8021cee:	b9bb      	cbnz	r3, 8021d20 <_vfiprintf_r+0x80>
 8021cf0:	4639      	mov	r1, r7
 8021cf2:	4648      	mov	r0, r9
 8021cf4:	f7fc fd16 	bl	801e724 <__swsetup_r>
 8021cf8:	b190      	cbz	r0, 8021d20 <_vfiprintf_r+0x80>
 8021cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021cfc:	07d8      	lsls	r0, r3, #31
 8021cfe:	d508      	bpl.n	8021d12 <_vfiprintf_r+0x72>
 8021d00:	f04f 33ff 	mov.w	r3, #4294967295
 8021d04:	9302      	str	r3, [sp, #8]
 8021d06:	9802      	ldr	r0, [sp, #8]
 8021d08:	b039      	add	sp, #228	; 0xe4
 8021d0a:	ecbd 8b02 	vpop	{d8}
 8021d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d12:	89bb      	ldrh	r3, [r7, #12]
 8021d14:	0599      	lsls	r1, r3, #22
 8021d16:	d4f3      	bmi.n	8021d00 <_vfiprintf_r+0x60>
 8021d18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021d1a:	f7fd ff50 	bl	801fbbe <__retarget_lock_release_recursive>
 8021d1e:	e7ef      	b.n	8021d00 <_vfiprintf_r+0x60>
 8021d20:	89bb      	ldrh	r3, [r7, #12]
 8021d22:	f003 021a 	and.w	r2, r3, #26
 8021d26:	2a0a      	cmp	r2, #10
 8021d28:	d113      	bne.n	8021d52 <_vfiprintf_r+0xb2>
 8021d2a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021d2e:	2a00      	cmp	r2, #0
 8021d30:	db0f      	blt.n	8021d52 <_vfiprintf_r+0xb2>
 8021d32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021d34:	07d2      	lsls	r2, r2, #31
 8021d36:	d404      	bmi.n	8021d42 <_vfiprintf_r+0xa2>
 8021d38:	059e      	lsls	r6, r3, #22
 8021d3a:	d402      	bmi.n	8021d42 <_vfiprintf_r+0xa2>
 8021d3c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021d3e:	f7fd ff3e 	bl	801fbbe <__retarget_lock_release_recursive>
 8021d42:	9a01      	ldr	r2, [sp, #4]
 8021d44:	462b      	mov	r3, r5
 8021d46:	4639      	mov	r1, r7
 8021d48:	4648      	mov	r0, r9
 8021d4a:	f000 fc31 	bl	80225b0 <__sbprintf>
 8021d4e:	9002      	str	r0, [sp, #8]
 8021d50:	e7d9      	b.n	8021d06 <_vfiprintf_r+0x66>
 8021d52:	2300      	movs	r3, #0
 8021d54:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8021d58:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021d5c:	ae0f      	add	r6, sp, #60	; 0x3c
 8021d5e:	ee08 3a10 	vmov	s16, r3
 8021d62:	960c      	str	r6, [sp, #48]	; 0x30
 8021d64:	9307      	str	r3, [sp, #28]
 8021d66:	9302      	str	r3, [sp, #8]
 8021d68:	9b01      	ldr	r3, [sp, #4]
 8021d6a:	461d      	mov	r5, r3
 8021d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021d70:	b10a      	cbz	r2, 8021d76 <_vfiprintf_r+0xd6>
 8021d72:	2a25      	cmp	r2, #37	; 0x25
 8021d74:	d1f9      	bne.n	8021d6a <_vfiprintf_r+0xca>
 8021d76:	9b01      	ldr	r3, [sp, #4]
 8021d78:	ebb5 0803 	subs.w	r8, r5, r3
 8021d7c:	d00d      	beq.n	8021d9a <_vfiprintf_r+0xfa>
 8021d7e:	e9c6 3800 	strd	r3, r8, [r6]
 8021d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d84:	4443      	add	r3, r8
 8021d86:	930e      	str	r3, [sp, #56]	; 0x38
 8021d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021d8a:	3301      	adds	r3, #1
 8021d8c:	2b07      	cmp	r3, #7
 8021d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8021d90:	dc75      	bgt.n	8021e7e <_vfiprintf_r+0x1de>
 8021d92:	3608      	adds	r6, #8
 8021d94:	9b02      	ldr	r3, [sp, #8]
 8021d96:	4443      	add	r3, r8
 8021d98:	9302      	str	r3, [sp, #8]
 8021d9a:	782b      	ldrb	r3, [r5, #0]
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	f000 83c8 	beq.w	8022532 <_vfiprintf_r+0x892>
 8021da2:	2300      	movs	r3, #0
 8021da4:	f04f 31ff 	mov.w	r1, #4294967295
 8021da8:	1c6a      	adds	r2, r5, #1
 8021daa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8021dae:	9100      	str	r1, [sp, #0]
 8021db0:	9303      	str	r3, [sp, #12]
 8021db2:	469a      	mov	sl, r3
 8021db4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021db8:	9201      	str	r2, [sp, #4]
 8021dba:	f1a3 0220 	sub.w	r2, r3, #32
 8021dbe:	2a5a      	cmp	r2, #90	; 0x5a
 8021dc0:	f200 8310 	bhi.w	80223e4 <_vfiprintf_r+0x744>
 8021dc4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8021dc8:	030e0099 	.word	0x030e0099
 8021dcc:	00a1030e 	.word	0x00a1030e
 8021dd0:	030e030e 	.word	0x030e030e
 8021dd4:	0080030e 	.word	0x0080030e
 8021dd8:	030e030e 	.word	0x030e030e
 8021ddc:	00ae00a4 	.word	0x00ae00a4
 8021de0:	00ab030e 	.word	0x00ab030e
 8021de4:	030e00b0 	.word	0x030e00b0
 8021de8:	00ce00cb 	.word	0x00ce00cb
 8021dec:	00ce00ce 	.word	0x00ce00ce
 8021df0:	00ce00ce 	.word	0x00ce00ce
 8021df4:	00ce00ce 	.word	0x00ce00ce
 8021df8:	00ce00ce 	.word	0x00ce00ce
 8021dfc:	030e030e 	.word	0x030e030e
 8021e00:	030e030e 	.word	0x030e030e
 8021e04:	030e030e 	.word	0x030e030e
 8021e08:	030e030e 	.word	0x030e030e
 8021e0c:	00f8030e 	.word	0x00f8030e
 8021e10:	030e0106 	.word	0x030e0106
 8021e14:	030e030e 	.word	0x030e030e
 8021e18:	030e030e 	.word	0x030e030e
 8021e1c:	030e030e 	.word	0x030e030e
 8021e20:	030e030e 	.word	0x030e030e
 8021e24:	014d030e 	.word	0x014d030e
 8021e28:	030e030e 	.word	0x030e030e
 8021e2c:	0192030e 	.word	0x0192030e
 8021e30:	0270030e 	.word	0x0270030e
 8021e34:	030e030e 	.word	0x030e030e
 8021e38:	030e028e 	.word	0x030e028e
 8021e3c:	030e030e 	.word	0x030e030e
 8021e40:	030e030e 	.word	0x030e030e
 8021e44:	030e030e 	.word	0x030e030e
 8021e48:	030e030e 	.word	0x030e030e
 8021e4c:	00f8030e 	.word	0x00f8030e
 8021e50:	030e0108 	.word	0x030e0108
 8021e54:	030e030e 	.word	0x030e030e
 8021e58:	010800de 	.word	0x010800de
 8021e5c:	030e00f2 	.word	0x030e00f2
 8021e60:	030e00eb 	.word	0x030e00eb
 8021e64:	014f0130 	.word	0x014f0130
 8021e68:	00f20182 	.word	0x00f20182
 8021e6c:	0192030e 	.word	0x0192030e
 8021e70:	02720097 	.word	0x02720097
 8021e74:	030e030e 	.word	0x030e030e
 8021e78:	030e0065 	.word	0x030e0065
 8021e7c:	0097      	.short	0x0097
 8021e7e:	aa0c      	add	r2, sp, #48	; 0x30
 8021e80:	4639      	mov	r1, r7
 8021e82:	4648      	mov	r0, r9
 8021e84:	f7ff fed9 	bl	8021c3a <__sprint_r>
 8021e88:	2800      	cmp	r0, #0
 8021e8a:	f040 8331 	bne.w	80224f0 <_vfiprintf_r+0x850>
 8021e8e:	ae0f      	add	r6, sp, #60	; 0x3c
 8021e90:	e780      	b.n	8021d94 <_vfiprintf_r+0xf4>
 8021e92:	4a95      	ldr	r2, [pc, #596]	; (80220e8 <_vfiprintf_r+0x448>)
 8021e94:	9205      	str	r2, [sp, #20]
 8021e96:	f01a 0f20 	tst.w	sl, #32
 8021e9a:	f000 8225 	beq.w	80222e8 <_vfiprintf_r+0x648>
 8021e9e:	3407      	adds	r4, #7
 8021ea0:	f024 0b07 	bic.w	fp, r4, #7
 8021ea4:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8021ea8:	f01a 0f01 	tst.w	sl, #1
 8021eac:	d009      	beq.n	8021ec2 <_vfiprintf_r+0x222>
 8021eae:	ea54 0205 	orrs.w	r2, r4, r5
 8021eb2:	bf1f      	itttt	ne
 8021eb4:	2230      	movne	r2, #48	; 0x30
 8021eb6:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8021eba:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8021ebe:	f04a 0a02 	orrne.w	sl, sl, #2
 8021ec2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8021ec6:	e10d      	b.n	80220e4 <_vfiprintf_r+0x444>
 8021ec8:	4648      	mov	r0, r9
 8021eca:	f7fd fe6f 	bl	801fbac <_localeconv_r>
 8021ece:	6843      	ldr	r3, [r0, #4]
 8021ed0:	4618      	mov	r0, r3
 8021ed2:	ee08 3a10 	vmov	s16, r3
 8021ed6:	f7de f9a5 	bl	8000224 <strlen>
 8021eda:	9007      	str	r0, [sp, #28]
 8021edc:	4648      	mov	r0, r9
 8021ede:	f7fd fe65 	bl	801fbac <_localeconv_r>
 8021ee2:	6883      	ldr	r3, [r0, #8]
 8021ee4:	9306      	str	r3, [sp, #24]
 8021ee6:	9b07      	ldr	r3, [sp, #28]
 8021ee8:	b12b      	cbz	r3, 8021ef6 <_vfiprintf_r+0x256>
 8021eea:	9b06      	ldr	r3, [sp, #24]
 8021eec:	b11b      	cbz	r3, 8021ef6 <_vfiprintf_r+0x256>
 8021eee:	781b      	ldrb	r3, [r3, #0]
 8021ef0:	b10b      	cbz	r3, 8021ef6 <_vfiprintf_r+0x256>
 8021ef2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8021ef6:	9a01      	ldr	r2, [sp, #4]
 8021ef8:	e75c      	b.n	8021db4 <_vfiprintf_r+0x114>
 8021efa:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8021efe:	2b00      	cmp	r3, #0
 8021f00:	d1f9      	bne.n	8021ef6 <_vfiprintf_r+0x256>
 8021f02:	2320      	movs	r3, #32
 8021f04:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8021f08:	e7f5      	b.n	8021ef6 <_vfiprintf_r+0x256>
 8021f0a:	f04a 0a01 	orr.w	sl, sl, #1
 8021f0e:	e7f2      	b.n	8021ef6 <_vfiprintf_r+0x256>
 8021f10:	f854 3b04 	ldr.w	r3, [r4], #4
 8021f14:	9303      	str	r3, [sp, #12]
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	daed      	bge.n	8021ef6 <_vfiprintf_r+0x256>
 8021f1a:	425b      	negs	r3, r3
 8021f1c:	9303      	str	r3, [sp, #12]
 8021f1e:	f04a 0a04 	orr.w	sl, sl, #4
 8021f22:	e7e8      	b.n	8021ef6 <_vfiprintf_r+0x256>
 8021f24:	232b      	movs	r3, #43	; 0x2b
 8021f26:	e7ed      	b.n	8021f04 <_vfiprintf_r+0x264>
 8021f28:	9a01      	ldr	r2, [sp, #4]
 8021f2a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8021f30:	d112      	bne.n	8021f58 <_vfiprintf_r+0x2b8>
 8021f32:	f854 0b04 	ldr.w	r0, [r4], #4
 8021f36:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8021f3a:	e9cd 3200 	strd	r3, r2, [sp]
 8021f3e:	e7da      	b.n	8021ef6 <_vfiprintf_r+0x256>
 8021f40:	9b00      	ldr	r3, [sp, #0]
 8021f42:	200a      	movs	r0, #10
 8021f44:	fb00 1303 	mla	r3, r0, r3, r1
 8021f48:	9300      	str	r3, [sp, #0]
 8021f4a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021f4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8021f52:	2909      	cmp	r1, #9
 8021f54:	d9f4      	bls.n	8021f40 <_vfiprintf_r+0x2a0>
 8021f56:	e72f      	b.n	8021db8 <_vfiprintf_r+0x118>
 8021f58:	2100      	movs	r1, #0
 8021f5a:	9100      	str	r1, [sp, #0]
 8021f5c:	e7f7      	b.n	8021f4e <_vfiprintf_r+0x2ae>
 8021f5e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8021f62:	e7c8      	b.n	8021ef6 <_vfiprintf_r+0x256>
 8021f64:	2100      	movs	r1, #0
 8021f66:	9a01      	ldr	r2, [sp, #4]
 8021f68:	9103      	str	r1, [sp, #12]
 8021f6a:	9903      	ldr	r1, [sp, #12]
 8021f6c:	3b30      	subs	r3, #48	; 0x30
 8021f6e:	200a      	movs	r0, #10
 8021f70:	fb00 3301 	mla	r3, r0, r1, r3
 8021f74:	9303      	str	r3, [sp, #12]
 8021f76:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021f7a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8021f7e:	2909      	cmp	r1, #9
 8021f80:	d9f3      	bls.n	8021f6a <_vfiprintf_r+0x2ca>
 8021f82:	e719      	b.n	8021db8 <_vfiprintf_r+0x118>
 8021f84:	9b01      	ldr	r3, [sp, #4]
 8021f86:	781b      	ldrb	r3, [r3, #0]
 8021f88:	2b68      	cmp	r3, #104	; 0x68
 8021f8a:	bf01      	itttt	eq
 8021f8c:	9b01      	ldreq	r3, [sp, #4]
 8021f8e:	3301      	addeq	r3, #1
 8021f90:	9301      	streq	r3, [sp, #4]
 8021f92:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8021f96:	bf18      	it	ne
 8021f98:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8021f9c:	e7ab      	b.n	8021ef6 <_vfiprintf_r+0x256>
 8021f9e:	9b01      	ldr	r3, [sp, #4]
 8021fa0:	781b      	ldrb	r3, [r3, #0]
 8021fa2:	2b6c      	cmp	r3, #108	; 0x6c
 8021fa4:	d105      	bne.n	8021fb2 <_vfiprintf_r+0x312>
 8021fa6:	9b01      	ldr	r3, [sp, #4]
 8021fa8:	3301      	adds	r3, #1
 8021faa:	9301      	str	r3, [sp, #4]
 8021fac:	f04a 0a20 	orr.w	sl, sl, #32
 8021fb0:	e7a1      	b.n	8021ef6 <_vfiprintf_r+0x256>
 8021fb2:	f04a 0a10 	orr.w	sl, sl, #16
 8021fb6:	e79e      	b.n	8021ef6 <_vfiprintf_r+0x256>
 8021fb8:	46a3      	mov	fp, r4
 8021fba:	2100      	movs	r1, #0
 8021fbc:	f85b 3b04 	ldr.w	r3, [fp], #4
 8021fc0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8021fc4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8021fc8:	2301      	movs	r3, #1
 8021fca:	9300      	str	r3, [sp, #0]
 8021fcc:	460d      	mov	r5, r1
 8021fce:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8021fd2:	e0a0      	b.n	8022116 <_vfiprintf_r+0x476>
 8021fd4:	f04a 0a10 	orr.w	sl, sl, #16
 8021fd8:	f01a 0f20 	tst.w	sl, #32
 8021fdc:	d011      	beq.n	8022002 <_vfiprintf_r+0x362>
 8021fde:	3407      	adds	r4, #7
 8021fe0:	f024 0b07 	bic.w	fp, r4, #7
 8021fe4:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8021fe8:	2c00      	cmp	r4, #0
 8021fea:	f175 0300 	sbcs.w	r3, r5, #0
 8021fee:	da06      	bge.n	8021ffe <_vfiprintf_r+0x35e>
 8021ff0:	4264      	negs	r4, r4
 8021ff2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8021ff6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8021ffa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8021ffe:	2301      	movs	r3, #1
 8022000:	e03f      	b.n	8022082 <_vfiprintf_r+0x3e2>
 8022002:	f01a 0f10 	tst.w	sl, #16
 8022006:	f104 0b04 	add.w	fp, r4, #4
 802200a:	d002      	beq.n	8022012 <_vfiprintf_r+0x372>
 802200c:	6824      	ldr	r4, [r4, #0]
 802200e:	17e5      	asrs	r5, r4, #31
 8022010:	e7ea      	b.n	8021fe8 <_vfiprintf_r+0x348>
 8022012:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022016:	6824      	ldr	r4, [r4, #0]
 8022018:	d001      	beq.n	802201e <_vfiprintf_r+0x37e>
 802201a:	b224      	sxth	r4, r4
 802201c:	e7f7      	b.n	802200e <_vfiprintf_r+0x36e>
 802201e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022022:	bf18      	it	ne
 8022024:	b264      	sxtbne	r4, r4
 8022026:	e7f2      	b.n	802200e <_vfiprintf_r+0x36e>
 8022028:	f01a 0f20 	tst.w	sl, #32
 802202c:	f854 3b04 	ldr.w	r3, [r4], #4
 8022030:	d005      	beq.n	802203e <_vfiprintf_r+0x39e>
 8022032:	9a02      	ldr	r2, [sp, #8]
 8022034:	4610      	mov	r0, r2
 8022036:	17d1      	asrs	r1, r2, #31
 8022038:	e9c3 0100 	strd	r0, r1, [r3]
 802203c:	e694      	b.n	8021d68 <_vfiprintf_r+0xc8>
 802203e:	f01a 0f10 	tst.w	sl, #16
 8022042:	d002      	beq.n	802204a <_vfiprintf_r+0x3aa>
 8022044:	9a02      	ldr	r2, [sp, #8]
 8022046:	601a      	str	r2, [r3, #0]
 8022048:	e68e      	b.n	8021d68 <_vfiprintf_r+0xc8>
 802204a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802204e:	d002      	beq.n	8022056 <_vfiprintf_r+0x3b6>
 8022050:	9a02      	ldr	r2, [sp, #8]
 8022052:	801a      	strh	r2, [r3, #0]
 8022054:	e688      	b.n	8021d68 <_vfiprintf_r+0xc8>
 8022056:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802205a:	d0f3      	beq.n	8022044 <_vfiprintf_r+0x3a4>
 802205c:	9a02      	ldr	r2, [sp, #8]
 802205e:	701a      	strb	r2, [r3, #0]
 8022060:	e682      	b.n	8021d68 <_vfiprintf_r+0xc8>
 8022062:	f04a 0a10 	orr.w	sl, sl, #16
 8022066:	f01a 0f20 	tst.w	sl, #32
 802206a:	d01d      	beq.n	80220a8 <_vfiprintf_r+0x408>
 802206c:	3407      	adds	r4, #7
 802206e:	f024 0b07 	bic.w	fp, r4, #7
 8022072:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022076:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 802207a:	2300      	movs	r3, #0
 802207c:	2200      	movs	r2, #0
 802207e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8022082:	9a00      	ldr	r2, [sp, #0]
 8022084:	3201      	adds	r2, #1
 8022086:	f000 8261 	beq.w	802254c <_vfiprintf_r+0x8ac>
 802208a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 802208e:	9204      	str	r2, [sp, #16]
 8022090:	ea54 0205 	orrs.w	r2, r4, r5
 8022094:	f040 8260 	bne.w	8022558 <_vfiprintf_r+0x8b8>
 8022098:	9a00      	ldr	r2, [sp, #0]
 802209a:	2a00      	cmp	r2, #0
 802209c:	f000 8197 	beq.w	80223ce <_vfiprintf_r+0x72e>
 80220a0:	2b01      	cmp	r3, #1
 80220a2:	f040 825c 	bne.w	802255e <_vfiprintf_r+0x8be>
 80220a6:	e135      	b.n	8022314 <_vfiprintf_r+0x674>
 80220a8:	f01a 0f10 	tst.w	sl, #16
 80220ac:	f104 0b04 	add.w	fp, r4, #4
 80220b0:	d001      	beq.n	80220b6 <_vfiprintf_r+0x416>
 80220b2:	6824      	ldr	r4, [r4, #0]
 80220b4:	e003      	b.n	80220be <_vfiprintf_r+0x41e>
 80220b6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80220ba:	d002      	beq.n	80220c2 <_vfiprintf_r+0x422>
 80220bc:	8824      	ldrh	r4, [r4, #0]
 80220be:	2500      	movs	r5, #0
 80220c0:	e7d9      	b.n	8022076 <_vfiprintf_r+0x3d6>
 80220c2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80220c6:	d0f4      	beq.n	80220b2 <_vfiprintf_r+0x412>
 80220c8:	7824      	ldrb	r4, [r4, #0]
 80220ca:	e7f8      	b.n	80220be <_vfiprintf_r+0x41e>
 80220cc:	46a3      	mov	fp, r4
 80220ce:	f647 0330 	movw	r3, #30768	; 0x7830
 80220d2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80220d6:	f85b 4b04 	ldr.w	r4, [fp], #4
 80220da:	4b03      	ldr	r3, [pc, #12]	; (80220e8 <_vfiprintf_r+0x448>)
 80220dc:	9305      	str	r3, [sp, #20]
 80220de:	2500      	movs	r5, #0
 80220e0:	f04a 0a02 	orr.w	sl, sl, #2
 80220e4:	2302      	movs	r3, #2
 80220e6:	e7c9      	b.n	802207c <_vfiprintf_r+0x3dc>
 80220e8:	080298c8 	.word	0x080298c8
 80220ec:	9b00      	ldr	r3, [sp, #0]
 80220ee:	46a3      	mov	fp, r4
 80220f0:	2500      	movs	r5, #0
 80220f2:	1c5c      	adds	r4, r3, #1
 80220f4:	f85b 8b04 	ldr.w	r8, [fp], #4
 80220f8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80220fc:	f000 80cf 	beq.w	802229e <_vfiprintf_r+0x5fe>
 8022100:	461a      	mov	r2, r3
 8022102:	4629      	mov	r1, r5
 8022104:	4640      	mov	r0, r8
 8022106:	f7de f89b 	bl	8000240 <memchr>
 802210a:	2800      	cmp	r0, #0
 802210c:	f000 8174 	beq.w	80223f8 <_vfiprintf_r+0x758>
 8022110:	eba0 0308 	sub.w	r3, r0, r8
 8022114:	9300      	str	r3, [sp, #0]
 8022116:	9b00      	ldr	r3, [sp, #0]
 8022118:	42ab      	cmp	r3, r5
 802211a:	bfb8      	it	lt
 802211c:	462b      	movlt	r3, r5
 802211e:	9304      	str	r3, [sp, #16]
 8022120:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022124:	b113      	cbz	r3, 802212c <_vfiprintf_r+0x48c>
 8022126:	9b04      	ldr	r3, [sp, #16]
 8022128:	3301      	adds	r3, #1
 802212a:	9304      	str	r3, [sp, #16]
 802212c:	f01a 0302 	ands.w	r3, sl, #2
 8022130:	9308      	str	r3, [sp, #32]
 8022132:	bf1e      	ittt	ne
 8022134:	9b04      	ldrne	r3, [sp, #16]
 8022136:	3302      	addne	r3, #2
 8022138:	9304      	strne	r3, [sp, #16]
 802213a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 802213e:	9309      	str	r3, [sp, #36]	; 0x24
 8022140:	d11f      	bne.n	8022182 <_vfiprintf_r+0x4e2>
 8022142:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8022146:	1a9c      	subs	r4, r3, r2
 8022148:	2c00      	cmp	r4, #0
 802214a:	dd1a      	ble.n	8022182 <_vfiprintf_r+0x4e2>
 802214c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8022150:	48b9      	ldr	r0, [pc, #740]	; (8022438 <_vfiprintf_r+0x798>)
 8022152:	6030      	str	r0, [r6, #0]
 8022154:	2c10      	cmp	r4, #16
 8022156:	f103 0301 	add.w	r3, r3, #1
 802215a:	f106 0108 	add.w	r1, r6, #8
 802215e:	f300 814d 	bgt.w	80223fc <_vfiprintf_r+0x75c>
 8022162:	6074      	str	r4, [r6, #4]
 8022164:	2b07      	cmp	r3, #7
 8022166:	4414      	add	r4, r2
 8022168:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 802216c:	f340 8158 	ble.w	8022420 <_vfiprintf_r+0x780>
 8022170:	aa0c      	add	r2, sp, #48	; 0x30
 8022172:	4639      	mov	r1, r7
 8022174:	4648      	mov	r0, r9
 8022176:	f7ff fd60 	bl	8021c3a <__sprint_r>
 802217a:	2800      	cmp	r0, #0
 802217c:	f040 81b8 	bne.w	80224f0 <_vfiprintf_r+0x850>
 8022180:	ae0f      	add	r6, sp, #60	; 0x3c
 8022182:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022186:	b173      	cbz	r3, 80221a6 <_vfiprintf_r+0x506>
 8022188:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 802218c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802218e:	6032      	str	r2, [r6, #0]
 8022190:	2201      	movs	r2, #1
 8022192:	6072      	str	r2, [r6, #4]
 8022194:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022196:	3301      	adds	r3, #1
 8022198:	3201      	adds	r2, #1
 802219a:	2b07      	cmp	r3, #7
 802219c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80221a0:	f300 8140 	bgt.w	8022424 <_vfiprintf_r+0x784>
 80221a4:	3608      	adds	r6, #8
 80221a6:	9b08      	ldr	r3, [sp, #32]
 80221a8:	b16b      	cbz	r3, 80221c6 <_vfiprintf_r+0x526>
 80221aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80221ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80221ae:	6032      	str	r2, [r6, #0]
 80221b0:	2202      	movs	r2, #2
 80221b2:	6072      	str	r2, [r6, #4]
 80221b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80221b6:	3301      	adds	r3, #1
 80221b8:	3202      	adds	r2, #2
 80221ba:	2b07      	cmp	r3, #7
 80221bc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80221c0:	f300 8140 	bgt.w	8022444 <_vfiprintf_r+0x7a4>
 80221c4:	3608      	adds	r6, #8
 80221c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221c8:	2b80      	cmp	r3, #128	; 0x80
 80221ca:	d11f      	bne.n	802220c <_vfiprintf_r+0x56c>
 80221cc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80221d0:	1a9c      	subs	r4, r3, r2
 80221d2:	2c00      	cmp	r4, #0
 80221d4:	dd1a      	ble.n	802220c <_vfiprintf_r+0x56c>
 80221d6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80221da:	4898      	ldr	r0, [pc, #608]	; (802243c <_vfiprintf_r+0x79c>)
 80221dc:	6030      	str	r0, [r6, #0]
 80221de:	2c10      	cmp	r4, #16
 80221e0:	f103 0301 	add.w	r3, r3, #1
 80221e4:	f106 0108 	add.w	r1, r6, #8
 80221e8:	f300 8135 	bgt.w	8022456 <_vfiprintf_r+0x7b6>
 80221ec:	6074      	str	r4, [r6, #4]
 80221ee:	2b07      	cmp	r3, #7
 80221f0:	4414      	add	r4, r2
 80221f2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80221f6:	f340 8140 	ble.w	802247a <_vfiprintf_r+0x7da>
 80221fa:	aa0c      	add	r2, sp, #48	; 0x30
 80221fc:	4639      	mov	r1, r7
 80221fe:	4648      	mov	r0, r9
 8022200:	f7ff fd1b 	bl	8021c3a <__sprint_r>
 8022204:	2800      	cmp	r0, #0
 8022206:	f040 8173 	bne.w	80224f0 <_vfiprintf_r+0x850>
 802220a:	ae0f      	add	r6, sp, #60	; 0x3c
 802220c:	9b00      	ldr	r3, [sp, #0]
 802220e:	1aec      	subs	r4, r5, r3
 8022210:	2c00      	cmp	r4, #0
 8022212:	dd1a      	ble.n	802224a <_vfiprintf_r+0x5aa>
 8022214:	4d89      	ldr	r5, [pc, #548]	; (802243c <_vfiprintf_r+0x79c>)
 8022216:	6035      	str	r5, [r6, #0]
 8022218:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 802221c:	2c10      	cmp	r4, #16
 802221e:	f103 0301 	add.w	r3, r3, #1
 8022222:	f106 0208 	add.w	r2, r6, #8
 8022226:	f300 812a 	bgt.w	802247e <_vfiprintf_r+0x7de>
 802222a:	6074      	str	r4, [r6, #4]
 802222c:	2b07      	cmp	r3, #7
 802222e:	440c      	add	r4, r1
 8022230:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8022234:	f340 8134 	ble.w	80224a0 <_vfiprintf_r+0x800>
 8022238:	aa0c      	add	r2, sp, #48	; 0x30
 802223a:	4639      	mov	r1, r7
 802223c:	4648      	mov	r0, r9
 802223e:	f7ff fcfc 	bl	8021c3a <__sprint_r>
 8022242:	2800      	cmp	r0, #0
 8022244:	f040 8154 	bne.w	80224f0 <_vfiprintf_r+0x850>
 8022248:	ae0f      	add	r6, sp, #60	; 0x3c
 802224a:	9b00      	ldr	r3, [sp, #0]
 802224c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802224e:	6073      	str	r3, [r6, #4]
 8022250:	4418      	add	r0, r3
 8022252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022254:	f8c6 8000 	str.w	r8, [r6]
 8022258:	3301      	adds	r3, #1
 802225a:	2b07      	cmp	r3, #7
 802225c:	900e      	str	r0, [sp, #56]	; 0x38
 802225e:	930d      	str	r3, [sp, #52]	; 0x34
 8022260:	f300 8120 	bgt.w	80224a4 <_vfiprintf_r+0x804>
 8022264:	f106 0308 	add.w	r3, r6, #8
 8022268:	f01a 0f04 	tst.w	sl, #4
 802226c:	f040 8122 	bne.w	80224b4 <_vfiprintf_r+0x814>
 8022270:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8022274:	9904      	ldr	r1, [sp, #16]
 8022276:	428a      	cmp	r2, r1
 8022278:	bfac      	ite	ge
 802227a:	189b      	addge	r3, r3, r2
 802227c:	185b      	addlt	r3, r3, r1
 802227e:	9302      	str	r3, [sp, #8]
 8022280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022282:	b13b      	cbz	r3, 8022294 <_vfiprintf_r+0x5f4>
 8022284:	aa0c      	add	r2, sp, #48	; 0x30
 8022286:	4639      	mov	r1, r7
 8022288:	4648      	mov	r0, r9
 802228a:	f7ff fcd6 	bl	8021c3a <__sprint_r>
 802228e:	2800      	cmp	r0, #0
 8022290:	f040 812e 	bne.w	80224f0 <_vfiprintf_r+0x850>
 8022294:	2300      	movs	r3, #0
 8022296:	930d      	str	r3, [sp, #52]	; 0x34
 8022298:	465c      	mov	r4, fp
 802229a:	ae0f      	add	r6, sp, #60	; 0x3c
 802229c:	e564      	b.n	8021d68 <_vfiprintf_r+0xc8>
 802229e:	4640      	mov	r0, r8
 80222a0:	f7dd ffc0 	bl	8000224 <strlen>
 80222a4:	9000      	str	r0, [sp, #0]
 80222a6:	e736      	b.n	8022116 <_vfiprintf_r+0x476>
 80222a8:	f04a 0a10 	orr.w	sl, sl, #16
 80222ac:	f01a 0f20 	tst.w	sl, #32
 80222b0:	d006      	beq.n	80222c0 <_vfiprintf_r+0x620>
 80222b2:	3407      	adds	r4, #7
 80222b4:	f024 0b07 	bic.w	fp, r4, #7
 80222b8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80222bc:	2301      	movs	r3, #1
 80222be:	e6dd      	b.n	802207c <_vfiprintf_r+0x3dc>
 80222c0:	f01a 0f10 	tst.w	sl, #16
 80222c4:	f104 0b04 	add.w	fp, r4, #4
 80222c8:	d001      	beq.n	80222ce <_vfiprintf_r+0x62e>
 80222ca:	6824      	ldr	r4, [r4, #0]
 80222cc:	e003      	b.n	80222d6 <_vfiprintf_r+0x636>
 80222ce:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80222d2:	d002      	beq.n	80222da <_vfiprintf_r+0x63a>
 80222d4:	8824      	ldrh	r4, [r4, #0]
 80222d6:	2500      	movs	r5, #0
 80222d8:	e7f0      	b.n	80222bc <_vfiprintf_r+0x61c>
 80222da:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80222de:	d0f4      	beq.n	80222ca <_vfiprintf_r+0x62a>
 80222e0:	7824      	ldrb	r4, [r4, #0]
 80222e2:	e7f8      	b.n	80222d6 <_vfiprintf_r+0x636>
 80222e4:	4a56      	ldr	r2, [pc, #344]	; (8022440 <_vfiprintf_r+0x7a0>)
 80222e6:	e5d5      	b.n	8021e94 <_vfiprintf_r+0x1f4>
 80222e8:	f01a 0f10 	tst.w	sl, #16
 80222ec:	f104 0b04 	add.w	fp, r4, #4
 80222f0:	d001      	beq.n	80222f6 <_vfiprintf_r+0x656>
 80222f2:	6824      	ldr	r4, [r4, #0]
 80222f4:	e003      	b.n	80222fe <_vfiprintf_r+0x65e>
 80222f6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80222fa:	d002      	beq.n	8022302 <_vfiprintf_r+0x662>
 80222fc:	8824      	ldrh	r4, [r4, #0]
 80222fe:	2500      	movs	r5, #0
 8022300:	e5d2      	b.n	8021ea8 <_vfiprintf_r+0x208>
 8022302:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022306:	d0f4      	beq.n	80222f2 <_vfiprintf_r+0x652>
 8022308:	7824      	ldrb	r4, [r4, #0]
 802230a:	e7f8      	b.n	80222fe <_vfiprintf_r+0x65e>
 802230c:	2d00      	cmp	r5, #0
 802230e:	bf08      	it	eq
 8022310:	2c0a      	cmpeq	r4, #10
 8022312:	d205      	bcs.n	8022320 <_vfiprintf_r+0x680>
 8022314:	3430      	adds	r4, #48	; 0x30
 8022316:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 802231a:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 802231e:	e13c      	b.n	802259a <_vfiprintf_r+0x8fa>
 8022320:	ab38      	add	r3, sp, #224	; 0xe0
 8022322:	9308      	str	r3, [sp, #32]
 8022324:	9b04      	ldr	r3, [sp, #16]
 8022326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802232a:	f04f 0a00 	mov.w	sl, #0
 802232e:	9309      	str	r3, [sp, #36]	; 0x24
 8022330:	9b08      	ldr	r3, [sp, #32]
 8022332:	220a      	movs	r2, #10
 8022334:	f103 38ff 	add.w	r8, r3, #4294967295
 8022338:	4620      	mov	r0, r4
 802233a:	2300      	movs	r3, #0
 802233c:	4629      	mov	r1, r5
 802233e:	f7de fcb3 	bl	8000ca8 <__aeabi_uldivmod>
 8022342:	9b08      	ldr	r3, [sp, #32]
 8022344:	3230      	adds	r2, #48	; 0x30
 8022346:	f803 2c01 	strb.w	r2, [r3, #-1]
 802234a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802234c:	f10a 0a01 	add.w	sl, sl, #1
 8022350:	b1db      	cbz	r3, 802238a <_vfiprintf_r+0x6ea>
 8022352:	9b06      	ldr	r3, [sp, #24]
 8022354:	781b      	ldrb	r3, [r3, #0]
 8022356:	4553      	cmp	r3, sl
 8022358:	d117      	bne.n	802238a <_vfiprintf_r+0x6ea>
 802235a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802235e:	d014      	beq.n	802238a <_vfiprintf_r+0x6ea>
 8022360:	2d00      	cmp	r5, #0
 8022362:	bf08      	it	eq
 8022364:	2c0a      	cmpeq	r4, #10
 8022366:	d310      	bcc.n	802238a <_vfiprintf_r+0x6ea>
 8022368:	9b07      	ldr	r3, [sp, #28]
 802236a:	eba8 0803 	sub.w	r8, r8, r3
 802236e:	461a      	mov	r2, r3
 8022370:	ee18 1a10 	vmov	r1, s16
 8022374:	4640      	mov	r0, r8
 8022376:	f7f9 faa2 	bl	801b8be <strncpy>
 802237a:	9b06      	ldr	r3, [sp, #24]
 802237c:	785b      	ldrb	r3, [r3, #1]
 802237e:	b1a3      	cbz	r3, 80223aa <_vfiprintf_r+0x70a>
 8022380:	9b06      	ldr	r3, [sp, #24]
 8022382:	3301      	adds	r3, #1
 8022384:	9306      	str	r3, [sp, #24]
 8022386:	f04f 0a00 	mov.w	sl, #0
 802238a:	220a      	movs	r2, #10
 802238c:	2300      	movs	r3, #0
 802238e:	4620      	mov	r0, r4
 8022390:	4629      	mov	r1, r5
 8022392:	f7de fc89 	bl	8000ca8 <__aeabi_uldivmod>
 8022396:	2d00      	cmp	r5, #0
 8022398:	bf08      	it	eq
 802239a:	2c0a      	cmpeq	r4, #10
 802239c:	f0c0 80fd 	bcc.w	802259a <_vfiprintf_r+0x8fa>
 80223a0:	4604      	mov	r4, r0
 80223a2:	460d      	mov	r5, r1
 80223a4:	f8cd 8020 	str.w	r8, [sp, #32]
 80223a8:	e7c2      	b.n	8022330 <_vfiprintf_r+0x690>
 80223aa:	469a      	mov	sl, r3
 80223ac:	e7ed      	b.n	802238a <_vfiprintf_r+0x6ea>
 80223ae:	9a05      	ldr	r2, [sp, #20]
 80223b0:	f004 030f 	and.w	r3, r4, #15
 80223b4:	5cd3      	ldrb	r3, [r2, r3]
 80223b6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80223ba:	0923      	lsrs	r3, r4, #4
 80223bc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80223c0:	092a      	lsrs	r2, r5, #4
 80223c2:	461c      	mov	r4, r3
 80223c4:	4615      	mov	r5, r2
 80223c6:	ea54 0305 	orrs.w	r3, r4, r5
 80223ca:	d1f0      	bne.n	80223ae <_vfiprintf_r+0x70e>
 80223cc:	e0e5      	b.n	802259a <_vfiprintf_r+0x8fa>
 80223ce:	b933      	cbnz	r3, 80223de <_vfiprintf_r+0x73e>
 80223d0:	f01a 0f01 	tst.w	sl, #1
 80223d4:	d003      	beq.n	80223de <_vfiprintf_r+0x73e>
 80223d6:	2330      	movs	r3, #48	; 0x30
 80223d8:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 80223dc:	e79d      	b.n	802231a <_vfiprintf_r+0x67a>
 80223de:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80223e2:	e0da      	b.n	802259a <_vfiprintf_r+0x8fa>
 80223e4:	2b00      	cmp	r3, #0
 80223e6:	f000 80a4 	beq.w	8022532 <_vfiprintf_r+0x892>
 80223ea:	2100      	movs	r1, #0
 80223ec:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80223f0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80223f4:	46a3      	mov	fp, r4
 80223f6:	e5e7      	b.n	8021fc8 <_vfiprintf_r+0x328>
 80223f8:	4605      	mov	r5, r0
 80223fa:	e68c      	b.n	8022116 <_vfiprintf_r+0x476>
 80223fc:	2010      	movs	r0, #16
 80223fe:	4402      	add	r2, r0
 8022400:	2b07      	cmp	r3, #7
 8022402:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022406:	6070      	str	r0, [r6, #4]
 8022408:	dd07      	ble.n	802241a <_vfiprintf_r+0x77a>
 802240a:	aa0c      	add	r2, sp, #48	; 0x30
 802240c:	4639      	mov	r1, r7
 802240e:	4648      	mov	r0, r9
 8022410:	f7ff fc13 	bl	8021c3a <__sprint_r>
 8022414:	2800      	cmp	r0, #0
 8022416:	d16b      	bne.n	80224f0 <_vfiprintf_r+0x850>
 8022418:	a90f      	add	r1, sp, #60	; 0x3c
 802241a:	3c10      	subs	r4, #16
 802241c:	460e      	mov	r6, r1
 802241e:	e695      	b.n	802214c <_vfiprintf_r+0x4ac>
 8022420:	460e      	mov	r6, r1
 8022422:	e6ae      	b.n	8022182 <_vfiprintf_r+0x4e2>
 8022424:	aa0c      	add	r2, sp, #48	; 0x30
 8022426:	4639      	mov	r1, r7
 8022428:	4648      	mov	r0, r9
 802242a:	f7ff fc06 	bl	8021c3a <__sprint_r>
 802242e:	2800      	cmp	r0, #0
 8022430:	d15e      	bne.n	80224f0 <_vfiprintf_r+0x850>
 8022432:	ae0f      	add	r6, sp, #60	; 0x3c
 8022434:	e6b7      	b.n	80221a6 <_vfiprintf_r+0x506>
 8022436:	bf00      	nop
 8022438:	08029b66 	.word	0x08029b66
 802243c:	08029b76 	.word	0x08029b76
 8022440:	080298d9 	.word	0x080298d9
 8022444:	aa0c      	add	r2, sp, #48	; 0x30
 8022446:	4639      	mov	r1, r7
 8022448:	4648      	mov	r0, r9
 802244a:	f7ff fbf6 	bl	8021c3a <__sprint_r>
 802244e:	2800      	cmp	r0, #0
 8022450:	d14e      	bne.n	80224f0 <_vfiprintf_r+0x850>
 8022452:	ae0f      	add	r6, sp, #60	; 0x3c
 8022454:	e6b7      	b.n	80221c6 <_vfiprintf_r+0x526>
 8022456:	2010      	movs	r0, #16
 8022458:	4402      	add	r2, r0
 802245a:	2b07      	cmp	r3, #7
 802245c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022460:	6070      	str	r0, [r6, #4]
 8022462:	dd07      	ble.n	8022474 <_vfiprintf_r+0x7d4>
 8022464:	aa0c      	add	r2, sp, #48	; 0x30
 8022466:	4639      	mov	r1, r7
 8022468:	4648      	mov	r0, r9
 802246a:	f7ff fbe6 	bl	8021c3a <__sprint_r>
 802246e:	2800      	cmp	r0, #0
 8022470:	d13e      	bne.n	80224f0 <_vfiprintf_r+0x850>
 8022472:	a90f      	add	r1, sp, #60	; 0x3c
 8022474:	3c10      	subs	r4, #16
 8022476:	460e      	mov	r6, r1
 8022478:	e6ad      	b.n	80221d6 <_vfiprintf_r+0x536>
 802247a:	460e      	mov	r6, r1
 802247c:	e6c6      	b.n	802220c <_vfiprintf_r+0x56c>
 802247e:	2010      	movs	r0, #16
 8022480:	4401      	add	r1, r0
 8022482:	2b07      	cmp	r3, #7
 8022484:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8022488:	6070      	str	r0, [r6, #4]
 802248a:	dd06      	ble.n	802249a <_vfiprintf_r+0x7fa>
 802248c:	aa0c      	add	r2, sp, #48	; 0x30
 802248e:	4639      	mov	r1, r7
 8022490:	4648      	mov	r0, r9
 8022492:	f7ff fbd2 	bl	8021c3a <__sprint_r>
 8022496:	bb58      	cbnz	r0, 80224f0 <_vfiprintf_r+0x850>
 8022498:	aa0f      	add	r2, sp, #60	; 0x3c
 802249a:	3c10      	subs	r4, #16
 802249c:	4616      	mov	r6, r2
 802249e:	e6ba      	b.n	8022216 <_vfiprintf_r+0x576>
 80224a0:	4616      	mov	r6, r2
 80224a2:	e6d2      	b.n	802224a <_vfiprintf_r+0x5aa>
 80224a4:	aa0c      	add	r2, sp, #48	; 0x30
 80224a6:	4639      	mov	r1, r7
 80224a8:	4648      	mov	r0, r9
 80224aa:	f7ff fbc6 	bl	8021c3a <__sprint_r>
 80224ae:	b9f8      	cbnz	r0, 80224f0 <_vfiprintf_r+0x850>
 80224b0:	ab0f      	add	r3, sp, #60	; 0x3c
 80224b2:	e6d9      	b.n	8022268 <_vfiprintf_r+0x5c8>
 80224b4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80224b8:	1a54      	subs	r4, r2, r1
 80224ba:	2c00      	cmp	r4, #0
 80224bc:	f77f aed8 	ble.w	8022270 <_vfiprintf_r+0x5d0>
 80224c0:	4d3a      	ldr	r5, [pc, #232]	; (80225ac <_vfiprintf_r+0x90c>)
 80224c2:	2610      	movs	r6, #16
 80224c4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80224c8:	2c10      	cmp	r4, #16
 80224ca:	f102 0201 	add.w	r2, r2, #1
 80224ce:	601d      	str	r5, [r3, #0]
 80224d0:	dc1d      	bgt.n	802250e <_vfiprintf_r+0x86e>
 80224d2:	605c      	str	r4, [r3, #4]
 80224d4:	2a07      	cmp	r2, #7
 80224d6:	440c      	add	r4, r1
 80224d8:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 80224dc:	f77f aec8 	ble.w	8022270 <_vfiprintf_r+0x5d0>
 80224e0:	aa0c      	add	r2, sp, #48	; 0x30
 80224e2:	4639      	mov	r1, r7
 80224e4:	4648      	mov	r0, r9
 80224e6:	f7ff fba8 	bl	8021c3a <__sprint_r>
 80224ea:	2800      	cmp	r0, #0
 80224ec:	f43f aec0 	beq.w	8022270 <_vfiprintf_r+0x5d0>
 80224f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80224f2:	07d9      	lsls	r1, r3, #31
 80224f4:	d405      	bmi.n	8022502 <_vfiprintf_r+0x862>
 80224f6:	89bb      	ldrh	r3, [r7, #12]
 80224f8:	059a      	lsls	r2, r3, #22
 80224fa:	d402      	bmi.n	8022502 <_vfiprintf_r+0x862>
 80224fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80224fe:	f7fd fb5e 	bl	801fbbe <__retarget_lock_release_recursive>
 8022502:	89bb      	ldrh	r3, [r7, #12]
 8022504:	065b      	lsls	r3, r3, #25
 8022506:	f57f abfe 	bpl.w	8021d06 <_vfiprintf_r+0x66>
 802250a:	f7ff bbf9 	b.w	8021d00 <_vfiprintf_r+0x60>
 802250e:	3110      	adds	r1, #16
 8022510:	2a07      	cmp	r2, #7
 8022512:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8022516:	605e      	str	r6, [r3, #4]
 8022518:	dc02      	bgt.n	8022520 <_vfiprintf_r+0x880>
 802251a:	3308      	adds	r3, #8
 802251c:	3c10      	subs	r4, #16
 802251e:	e7d1      	b.n	80224c4 <_vfiprintf_r+0x824>
 8022520:	aa0c      	add	r2, sp, #48	; 0x30
 8022522:	4639      	mov	r1, r7
 8022524:	4648      	mov	r0, r9
 8022526:	f7ff fb88 	bl	8021c3a <__sprint_r>
 802252a:	2800      	cmp	r0, #0
 802252c:	d1e0      	bne.n	80224f0 <_vfiprintf_r+0x850>
 802252e:	ab0f      	add	r3, sp, #60	; 0x3c
 8022530:	e7f4      	b.n	802251c <_vfiprintf_r+0x87c>
 8022532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022534:	b913      	cbnz	r3, 802253c <_vfiprintf_r+0x89c>
 8022536:	2300      	movs	r3, #0
 8022538:	930d      	str	r3, [sp, #52]	; 0x34
 802253a:	e7d9      	b.n	80224f0 <_vfiprintf_r+0x850>
 802253c:	aa0c      	add	r2, sp, #48	; 0x30
 802253e:	4639      	mov	r1, r7
 8022540:	4648      	mov	r0, r9
 8022542:	f7ff fb7a 	bl	8021c3a <__sprint_r>
 8022546:	2800      	cmp	r0, #0
 8022548:	d0f5      	beq.n	8022536 <_vfiprintf_r+0x896>
 802254a:	e7d1      	b.n	80224f0 <_vfiprintf_r+0x850>
 802254c:	ea54 0205 	orrs.w	r2, r4, r5
 8022550:	f8cd a010 	str.w	sl, [sp, #16]
 8022554:	f43f ada4 	beq.w	80220a0 <_vfiprintf_r+0x400>
 8022558:	2b01      	cmp	r3, #1
 802255a:	f43f aed7 	beq.w	802230c <_vfiprintf_r+0x66c>
 802255e:	2b02      	cmp	r3, #2
 8022560:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022564:	f43f af23 	beq.w	80223ae <_vfiprintf_r+0x70e>
 8022568:	08e2      	lsrs	r2, r4, #3
 802256a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 802256e:	08e8      	lsrs	r0, r5, #3
 8022570:	f004 0307 	and.w	r3, r4, #7
 8022574:	4605      	mov	r5, r0
 8022576:	4614      	mov	r4, r2
 8022578:	3330      	adds	r3, #48	; 0x30
 802257a:	ea54 0205 	orrs.w	r2, r4, r5
 802257e:	4641      	mov	r1, r8
 8022580:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8022584:	d1f0      	bne.n	8022568 <_vfiprintf_r+0x8c8>
 8022586:	9a04      	ldr	r2, [sp, #16]
 8022588:	07d0      	lsls	r0, r2, #31
 802258a:	d506      	bpl.n	802259a <_vfiprintf_r+0x8fa>
 802258c:	2b30      	cmp	r3, #48	; 0x30
 802258e:	d004      	beq.n	802259a <_vfiprintf_r+0x8fa>
 8022590:	2330      	movs	r3, #48	; 0x30
 8022592:	f808 3c01 	strb.w	r3, [r8, #-1]
 8022596:	f1a1 0802 	sub.w	r8, r1, #2
 802259a:	ab38      	add	r3, sp, #224	; 0xe0
 802259c:	eba3 0308 	sub.w	r3, r3, r8
 80225a0:	9d00      	ldr	r5, [sp, #0]
 80225a2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80225a6:	9300      	str	r3, [sp, #0]
 80225a8:	e5b5      	b.n	8022116 <_vfiprintf_r+0x476>
 80225aa:	bf00      	nop
 80225ac:	08029b66 	.word	0x08029b66

080225b0 <__sbprintf>:
 80225b0:	b570      	push	{r4, r5, r6, lr}
 80225b2:	460c      	mov	r4, r1
 80225b4:	8989      	ldrh	r1, [r1, #12]
 80225b6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80225ba:	f021 0102 	bic.w	r1, r1, #2
 80225be:	f8ad 1014 	strh.w	r1, [sp, #20]
 80225c2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80225c4:	911b      	str	r1, [sp, #108]	; 0x6c
 80225c6:	89e1      	ldrh	r1, [r4, #14]
 80225c8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80225cc:	69e1      	ldr	r1, [r4, #28]
 80225ce:	9109      	str	r1, [sp, #36]	; 0x24
 80225d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80225d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80225d4:	a91c      	add	r1, sp, #112	; 0x70
 80225d6:	9102      	str	r1, [sp, #8]
 80225d8:	9106      	str	r1, [sp, #24]
 80225da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80225de:	4606      	mov	r6, r0
 80225e0:	9104      	str	r1, [sp, #16]
 80225e2:	9107      	str	r1, [sp, #28]
 80225e4:	a818      	add	r0, sp, #96	; 0x60
 80225e6:	2100      	movs	r1, #0
 80225e8:	e9cd 3200 	strd	r3, r2, [sp]
 80225ec:	9108      	str	r1, [sp, #32]
 80225ee:	f7fd fae1 	bl	801fbb4 <__retarget_lock_init_recursive>
 80225f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80225f6:	a902      	add	r1, sp, #8
 80225f8:	4630      	mov	r0, r6
 80225fa:	f7ff fb51 	bl	8021ca0 <_vfiprintf_r>
 80225fe:	1e05      	subs	r5, r0, #0
 8022600:	db07      	blt.n	8022612 <__sbprintf+0x62>
 8022602:	a902      	add	r1, sp, #8
 8022604:	4630      	mov	r0, r6
 8022606:	f7fc ffff 	bl	801f608 <_fflush_r>
 802260a:	2800      	cmp	r0, #0
 802260c:	bf18      	it	ne
 802260e:	f04f 35ff 	movne.w	r5, #4294967295
 8022612:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8022616:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022618:	065b      	lsls	r3, r3, #25
 802261a:	bf42      	ittt	mi
 802261c:	89a3      	ldrhmi	r3, [r4, #12]
 802261e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8022622:	81a3      	strhmi	r3, [r4, #12]
 8022624:	f7fd fac7 	bl	801fbb6 <__retarget_lock_close_recursive>
 8022628:	4628      	mov	r0, r5
 802262a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 802262e:	bd70      	pop	{r4, r5, r6, pc}

08022630 <_write_r>:
 8022630:	b538      	push	{r3, r4, r5, lr}
 8022632:	4d07      	ldr	r5, [pc, #28]	; (8022650 <_write_r+0x20>)
 8022634:	4604      	mov	r4, r0
 8022636:	4608      	mov	r0, r1
 8022638:	4611      	mov	r1, r2
 802263a:	2200      	movs	r2, #0
 802263c:	602a      	str	r2, [r5, #0]
 802263e:	461a      	mov	r2, r3
 8022640:	f7de fd6b 	bl	800111a <_write>
 8022644:	1c43      	adds	r3, r0, #1
 8022646:	d102      	bne.n	802264e <_write_r+0x1e>
 8022648:	682b      	ldr	r3, [r5, #0]
 802264a:	b103      	cbz	r3, 802264e <_write_r+0x1e>
 802264c:	6023      	str	r3, [r4, #0]
 802264e:	bd38      	pop	{r3, r4, r5, pc}
 8022650:	2000be5c 	.word	0x2000be5c

08022654 <__register_exitproc>:
 8022654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022658:	4d1c      	ldr	r5, [pc, #112]	; (80226cc <__register_exitproc+0x78>)
 802265a:	4606      	mov	r6, r0
 802265c:	6828      	ldr	r0, [r5, #0]
 802265e:	4698      	mov	r8, r3
 8022660:	460f      	mov	r7, r1
 8022662:	4691      	mov	r9, r2
 8022664:	f7fd faa9 	bl	801fbba <__retarget_lock_acquire_recursive>
 8022668:	4b19      	ldr	r3, [pc, #100]	; (80226d0 <__register_exitproc+0x7c>)
 802266a:	681b      	ldr	r3, [r3, #0]
 802266c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8022670:	4628      	mov	r0, r5
 8022672:	b91c      	cbnz	r4, 802267c <__register_exitproc+0x28>
 8022674:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8022678:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 802267c:	6865      	ldr	r5, [r4, #4]
 802267e:	6800      	ldr	r0, [r0, #0]
 8022680:	2d1f      	cmp	r5, #31
 8022682:	dd05      	ble.n	8022690 <__register_exitproc+0x3c>
 8022684:	f7fd fa9b 	bl	801fbbe <__retarget_lock_release_recursive>
 8022688:	f04f 30ff 	mov.w	r0, #4294967295
 802268c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022690:	b19e      	cbz	r6, 80226ba <__register_exitproc+0x66>
 8022692:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8022696:	2201      	movs	r2, #1
 8022698:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 802269c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80226a0:	40aa      	lsls	r2, r5
 80226a2:	4313      	orrs	r3, r2
 80226a4:	2e02      	cmp	r6, #2
 80226a6:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80226aa:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80226ae:	bf02      	ittt	eq
 80226b0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80226b4:	431a      	orreq	r2, r3
 80226b6:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 80226ba:	1c6b      	adds	r3, r5, #1
 80226bc:	3502      	adds	r5, #2
 80226be:	6063      	str	r3, [r4, #4]
 80226c0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80226c4:	f7fd fa7b 	bl	801fbbe <__retarget_lock_release_recursive>
 80226c8:	2000      	movs	r0, #0
 80226ca:	e7df      	b.n	802268c <__register_exitproc+0x38>
 80226cc:	20000470 	.word	0x20000470
 80226d0:	080297f4 	.word	0x080297f4

080226d4 <__assert_func>:
 80226d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80226d6:	4614      	mov	r4, r2
 80226d8:	461a      	mov	r2, r3
 80226da:	4b09      	ldr	r3, [pc, #36]	; (8022700 <__assert_func+0x2c>)
 80226dc:	681b      	ldr	r3, [r3, #0]
 80226de:	4605      	mov	r5, r0
 80226e0:	68d8      	ldr	r0, [r3, #12]
 80226e2:	b14c      	cbz	r4, 80226f8 <__assert_func+0x24>
 80226e4:	4b07      	ldr	r3, [pc, #28]	; (8022704 <__assert_func+0x30>)
 80226e6:	9100      	str	r1, [sp, #0]
 80226e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80226ec:	4906      	ldr	r1, [pc, #24]	; (8022708 <__assert_func+0x34>)
 80226ee:	462b      	mov	r3, r5
 80226f0:	f000 f8b0 	bl	8022854 <fiprintf>
 80226f4:	f000 fe85 	bl	8023402 <abort>
 80226f8:	4b04      	ldr	r3, [pc, #16]	; (802270c <__assert_func+0x38>)
 80226fa:	461c      	mov	r4, r3
 80226fc:	e7f3      	b.n	80226e6 <__assert_func+0x12>
 80226fe:	bf00      	nop
 8022700:	20000038 	.word	0x20000038
 8022704:	08029b86 	.word	0x08029b86
 8022708:	08029b93 	.word	0x08029b93
 802270c:	08029bc1 	.word	0x08029bc1

08022710 <_calloc_r>:
 8022710:	b510      	push	{r4, lr}
 8022712:	4351      	muls	r1, r2
 8022714:	f7fd fad0 	bl	801fcb8 <_malloc_r>
 8022718:	4604      	mov	r4, r0
 802271a:	b198      	cbz	r0, 8022744 <_calloc_r+0x34>
 802271c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022720:	f022 0203 	bic.w	r2, r2, #3
 8022724:	3a04      	subs	r2, #4
 8022726:	2a24      	cmp	r2, #36	; 0x24
 8022728:	d81b      	bhi.n	8022762 <_calloc_r+0x52>
 802272a:	2a13      	cmp	r2, #19
 802272c:	d917      	bls.n	802275e <_calloc_r+0x4e>
 802272e:	2100      	movs	r1, #0
 8022730:	2a1b      	cmp	r2, #27
 8022732:	e9c0 1100 	strd	r1, r1, [r0]
 8022736:	d807      	bhi.n	8022748 <_calloc_r+0x38>
 8022738:	f100 0308 	add.w	r3, r0, #8
 802273c:	2200      	movs	r2, #0
 802273e:	e9c3 2200 	strd	r2, r2, [r3]
 8022742:	609a      	str	r2, [r3, #8]
 8022744:	4620      	mov	r0, r4
 8022746:	bd10      	pop	{r4, pc}
 8022748:	2a24      	cmp	r2, #36	; 0x24
 802274a:	e9c0 1102 	strd	r1, r1, [r0, #8]
 802274e:	bf11      	iteee	ne
 8022750:	f100 0310 	addne.w	r3, r0, #16
 8022754:	6101      	streq	r1, [r0, #16]
 8022756:	f100 0318 	addeq.w	r3, r0, #24
 802275a:	6141      	streq	r1, [r0, #20]
 802275c:	e7ee      	b.n	802273c <_calloc_r+0x2c>
 802275e:	4603      	mov	r3, r0
 8022760:	e7ec      	b.n	802273c <_calloc_r+0x2c>
 8022762:	2100      	movs	r1, #0
 8022764:	f7f8 fd82 	bl	801b26c <memset>
 8022768:	e7ec      	b.n	8022744 <_calloc_r+0x34>
	...

0802276c <_close_r>:
 802276c:	b538      	push	{r3, r4, r5, lr}
 802276e:	4d06      	ldr	r5, [pc, #24]	; (8022788 <_close_r+0x1c>)
 8022770:	2300      	movs	r3, #0
 8022772:	4604      	mov	r4, r0
 8022774:	4608      	mov	r0, r1
 8022776:	602b      	str	r3, [r5, #0]
 8022778:	f7e1 fac7 	bl	8003d0a <_close>
 802277c:	1c43      	adds	r3, r0, #1
 802277e:	d102      	bne.n	8022786 <_close_r+0x1a>
 8022780:	682b      	ldr	r3, [r5, #0]
 8022782:	b103      	cbz	r3, 8022786 <_close_r+0x1a>
 8022784:	6023      	str	r3, [r4, #0]
 8022786:	bd38      	pop	{r3, r4, r5, pc}
 8022788:	2000be5c 	.word	0x2000be5c

0802278c <__env_lock>:
 802278c:	4801      	ldr	r0, [pc, #4]	; (8022794 <__env_lock+0x8>)
 802278e:	f7fd ba14 	b.w	801fbba <__retarget_lock_acquire_recursive>
 8022792:	bf00      	nop
 8022794:	2000be66 	.word	0x2000be66

08022798 <__env_unlock>:
 8022798:	4801      	ldr	r0, [pc, #4]	; (80227a0 <__env_unlock+0x8>)
 802279a:	f7fd ba10 	b.w	801fbbe <__retarget_lock_release_recursive>
 802279e:	bf00      	nop
 80227a0:	2000be66 	.word	0x2000be66

080227a4 <_fclose_r>:
 80227a4:	b570      	push	{r4, r5, r6, lr}
 80227a6:	4606      	mov	r6, r0
 80227a8:	460c      	mov	r4, r1
 80227aa:	b911      	cbnz	r1, 80227b2 <_fclose_r+0xe>
 80227ac:	2500      	movs	r5, #0
 80227ae:	4628      	mov	r0, r5
 80227b0:	bd70      	pop	{r4, r5, r6, pc}
 80227b2:	b118      	cbz	r0, 80227bc <_fclose_r+0x18>
 80227b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80227b6:	b90b      	cbnz	r3, 80227bc <_fclose_r+0x18>
 80227b8:	f7fc ff92 	bl	801f6e0 <__sinit>
 80227bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80227be:	07d8      	lsls	r0, r3, #31
 80227c0:	d405      	bmi.n	80227ce <_fclose_r+0x2a>
 80227c2:	89a3      	ldrh	r3, [r4, #12]
 80227c4:	0599      	lsls	r1, r3, #22
 80227c6:	d402      	bmi.n	80227ce <_fclose_r+0x2a>
 80227c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80227ca:	f7fd f9f6 	bl	801fbba <__retarget_lock_acquire_recursive>
 80227ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80227d2:	b93b      	cbnz	r3, 80227e4 <_fclose_r+0x40>
 80227d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80227d6:	f015 0501 	ands.w	r5, r5, #1
 80227da:	d1e7      	bne.n	80227ac <_fclose_r+0x8>
 80227dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80227de:	f7fd f9ee 	bl	801fbbe <__retarget_lock_release_recursive>
 80227e2:	e7e4      	b.n	80227ae <_fclose_r+0xa>
 80227e4:	4621      	mov	r1, r4
 80227e6:	4630      	mov	r0, r6
 80227e8:	f7fc fe80 	bl	801f4ec <__sflush_r>
 80227ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80227ee:	4605      	mov	r5, r0
 80227f0:	b133      	cbz	r3, 8022800 <_fclose_r+0x5c>
 80227f2:	69e1      	ldr	r1, [r4, #28]
 80227f4:	4630      	mov	r0, r6
 80227f6:	4798      	blx	r3
 80227f8:	2800      	cmp	r0, #0
 80227fa:	bfb8      	it	lt
 80227fc:	f04f 35ff 	movlt.w	r5, #4294967295
 8022800:	89a3      	ldrh	r3, [r4, #12]
 8022802:	061a      	lsls	r2, r3, #24
 8022804:	d503      	bpl.n	802280e <_fclose_r+0x6a>
 8022806:	6921      	ldr	r1, [r4, #16]
 8022808:	4630      	mov	r0, r6
 802280a:	f7fc fff9 	bl	801f800 <_free_r>
 802280e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8022810:	b141      	cbz	r1, 8022824 <_fclose_r+0x80>
 8022812:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8022816:	4299      	cmp	r1, r3
 8022818:	d002      	beq.n	8022820 <_fclose_r+0x7c>
 802281a:	4630      	mov	r0, r6
 802281c:	f7fc fff0 	bl	801f800 <_free_r>
 8022820:	2300      	movs	r3, #0
 8022822:	6323      	str	r3, [r4, #48]	; 0x30
 8022824:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022826:	b121      	cbz	r1, 8022832 <_fclose_r+0x8e>
 8022828:	4630      	mov	r0, r6
 802282a:	f7fc ffe9 	bl	801f800 <_free_r>
 802282e:	2300      	movs	r3, #0
 8022830:	6463      	str	r3, [r4, #68]	; 0x44
 8022832:	f7fc ff3d 	bl	801f6b0 <__sfp_lock_acquire>
 8022836:	2300      	movs	r3, #0
 8022838:	81a3      	strh	r3, [r4, #12]
 802283a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802283c:	07db      	lsls	r3, r3, #31
 802283e:	d402      	bmi.n	8022846 <_fclose_r+0xa2>
 8022840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022842:	f7fd f9bc 	bl	801fbbe <__retarget_lock_release_recursive>
 8022846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022848:	f7fd f9b5 	bl	801fbb6 <__retarget_lock_close_recursive>
 802284c:	f7fc ff36 	bl	801f6bc <__sfp_lock_release>
 8022850:	e7ad      	b.n	80227ae <_fclose_r+0xa>
	...

08022854 <fiprintf>:
 8022854:	b40e      	push	{r1, r2, r3}
 8022856:	b503      	push	{r0, r1, lr}
 8022858:	4601      	mov	r1, r0
 802285a:	ab03      	add	r3, sp, #12
 802285c:	4805      	ldr	r0, [pc, #20]	; (8022874 <fiprintf+0x20>)
 802285e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022862:	6800      	ldr	r0, [r0, #0]
 8022864:	9301      	str	r3, [sp, #4]
 8022866:	f7ff fa1b 	bl	8021ca0 <_vfiprintf_r>
 802286a:	b002      	add	sp, #8
 802286c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022870:	b003      	add	sp, #12
 8022872:	4770      	bx	lr
 8022874:	20000038 	.word	0x20000038

08022878 <__fputwc>:
 8022878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802287c:	4680      	mov	r8, r0
 802287e:	460e      	mov	r6, r1
 8022880:	4615      	mov	r5, r2
 8022882:	f000 f9df 	bl	8022c44 <__locale_mb_cur_max>
 8022886:	2801      	cmp	r0, #1
 8022888:	d11c      	bne.n	80228c4 <__fputwc+0x4c>
 802288a:	1e73      	subs	r3, r6, #1
 802288c:	2bfe      	cmp	r3, #254	; 0xfe
 802288e:	d819      	bhi.n	80228c4 <__fputwc+0x4c>
 8022890:	f88d 6004 	strb.w	r6, [sp, #4]
 8022894:	4604      	mov	r4, r0
 8022896:	2700      	movs	r7, #0
 8022898:	f10d 0904 	add.w	r9, sp, #4
 802289c:	42a7      	cmp	r7, r4
 802289e:	d020      	beq.n	80228e2 <__fputwc+0x6a>
 80228a0:	68ab      	ldr	r3, [r5, #8]
 80228a2:	f817 1009 	ldrb.w	r1, [r7, r9]
 80228a6:	3b01      	subs	r3, #1
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	60ab      	str	r3, [r5, #8]
 80228ac:	da04      	bge.n	80228b8 <__fputwc+0x40>
 80228ae:	69aa      	ldr	r2, [r5, #24]
 80228b0:	4293      	cmp	r3, r2
 80228b2:	db1a      	blt.n	80228ea <__fputwc+0x72>
 80228b4:	290a      	cmp	r1, #10
 80228b6:	d018      	beq.n	80228ea <__fputwc+0x72>
 80228b8:	682b      	ldr	r3, [r5, #0]
 80228ba:	1c5a      	adds	r2, r3, #1
 80228bc:	602a      	str	r2, [r5, #0]
 80228be:	7019      	strb	r1, [r3, #0]
 80228c0:	3701      	adds	r7, #1
 80228c2:	e7eb      	b.n	802289c <__fputwc+0x24>
 80228c4:	4632      	mov	r2, r6
 80228c6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80228ca:	a901      	add	r1, sp, #4
 80228cc:	4640      	mov	r0, r8
 80228ce:	f000 fd75 	bl	80233bc <_wcrtomb_r>
 80228d2:	1c42      	adds	r2, r0, #1
 80228d4:	4604      	mov	r4, r0
 80228d6:	d1de      	bne.n	8022896 <__fputwc+0x1e>
 80228d8:	89ab      	ldrh	r3, [r5, #12]
 80228da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80228de:	81ab      	strh	r3, [r5, #12]
 80228e0:	4606      	mov	r6, r0
 80228e2:	4630      	mov	r0, r6
 80228e4:	b003      	add	sp, #12
 80228e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80228ea:	462a      	mov	r2, r5
 80228ec:	4640      	mov	r0, r8
 80228ee:	f000 fd1b 	bl	8023328 <__swbuf_r>
 80228f2:	1c43      	adds	r3, r0, #1
 80228f4:	d1e4      	bne.n	80228c0 <__fputwc+0x48>
 80228f6:	4606      	mov	r6, r0
 80228f8:	e7f3      	b.n	80228e2 <__fputwc+0x6a>

080228fa <_fputwc_r>:
 80228fa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80228fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80228fe:	4614      	mov	r4, r2
 8022900:	07da      	lsls	r2, r3, #31
 8022902:	4605      	mov	r5, r0
 8022904:	d407      	bmi.n	8022916 <_fputwc_r+0x1c>
 8022906:	89a3      	ldrh	r3, [r4, #12]
 8022908:	059b      	lsls	r3, r3, #22
 802290a:	d404      	bmi.n	8022916 <_fputwc_r+0x1c>
 802290c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802290e:	9101      	str	r1, [sp, #4]
 8022910:	f7fd f953 	bl	801fbba <__retarget_lock_acquire_recursive>
 8022914:	9901      	ldr	r1, [sp, #4]
 8022916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802291a:	0498      	lsls	r0, r3, #18
 802291c:	d406      	bmi.n	802292c <_fputwc_r+0x32>
 802291e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022922:	81a3      	strh	r3, [r4, #12]
 8022924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022926:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802292a:	6663      	str	r3, [r4, #100]	; 0x64
 802292c:	4622      	mov	r2, r4
 802292e:	4628      	mov	r0, r5
 8022930:	f7ff ffa2 	bl	8022878 <__fputwc>
 8022934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022936:	07da      	lsls	r2, r3, #31
 8022938:	4605      	mov	r5, r0
 802293a:	d405      	bmi.n	8022948 <_fputwc_r+0x4e>
 802293c:	89a3      	ldrh	r3, [r4, #12]
 802293e:	059b      	lsls	r3, r3, #22
 8022940:	d402      	bmi.n	8022948 <_fputwc_r+0x4e>
 8022942:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022944:	f7fd f93b 	bl	801fbbe <__retarget_lock_release_recursive>
 8022948:	4628      	mov	r0, r5
 802294a:	b003      	add	sp, #12
 802294c:	bd30      	pop	{r4, r5, pc}
	...

08022950 <_fstat_r>:
 8022950:	b538      	push	{r3, r4, r5, lr}
 8022952:	4d07      	ldr	r5, [pc, #28]	; (8022970 <_fstat_r+0x20>)
 8022954:	2300      	movs	r3, #0
 8022956:	4604      	mov	r4, r0
 8022958:	4608      	mov	r0, r1
 802295a:	4611      	mov	r1, r2
 802295c:	602b      	str	r3, [r5, #0]
 802295e:	f7e1 f9e0 	bl	8003d22 <_fstat>
 8022962:	1c43      	adds	r3, r0, #1
 8022964:	d102      	bne.n	802296c <_fstat_r+0x1c>
 8022966:	682b      	ldr	r3, [r5, #0]
 8022968:	b103      	cbz	r3, 802296c <_fstat_r+0x1c>
 802296a:	6023      	str	r3, [r4, #0]
 802296c:	bd38      	pop	{r3, r4, r5, pc}
 802296e:	bf00      	nop
 8022970:	2000be5c 	.word	0x2000be5c

08022974 <__sfvwrite_r>:
 8022974:	6893      	ldr	r3, [r2, #8]
 8022976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802297a:	4606      	mov	r6, r0
 802297c:	460c      	mov	r4, r1
 802297e:	4690      	mov	r8, r2
 8022980:	b91b      	cbnz	r3, 802298a <__sfvwrite_r+0x16>
 8022982:	2000      	movs	r0, #0
 8022984:	b003      	add	sp, #12
 8022986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802298a:	898b      	ldrh	r3, [r1, #12]
 802298c:	0718      	lsls	r0, r3, #28
 802298e:	d550      	bpl.n	8022a32 <__sfvwrite_r+0xbe>
 8022990:	690b      	ldr	r3, [r1, #16]
 8022992:	2b00      	cmp	r3, #0
 8022994:	d04d      	beq.n	8022a32 <__sfvwrite_r+0xbe>
 8022996:	89a3      	ldrh	r3, [r4, #12]
 8022998:	f8d8 7000 	ldr.w	r7, [r8]
 802299c:	f013 0902 	ands.w	r9, r3, #2
 80229a0:	d16c      	bne.n	8022a7c <__sfvwrite_r+0x108>
 80229a2:	f013 0301 	ands.w	r3, r3, #1
 80229a6:	f000 809c 	beq.w	8022ae2 <__sfvwrite_r+0x16e>
 80229aa:	4648      	mov	r0, r9
 80229ac:	46ca      	mov	sl, r9
 80229ae:	46cb      	mov	fp, r9
 80229b0:	f1bb 0f00 	cmp.w	fp, #0
 80229b4:	f000 8103 	beq.w	8022bbe <__sfvwrite_r+0x24a>
 80229b8:	b950      	cbnz	r0, 80229d0 <__sfvwrite_r+0x5c>
 80229ba:	465a      	mov	r2, fp
 80229bc:	210a      	movs	r1, #10
 80229be:	4650      	mov	r0, sl
 80229c0:	f7dd fc3e 	bl	8000240 <memchr>
 80229c4:	2800      	cmp	r0, #0
 80229c6:	f000 80ff 	beq.w	8022bc8 <__sfvwrite_r+0x254>
 80229ca:	3001      	adds	r0, #1
 80229cc:	eba0 090a 	sub.w	r9, r0, sl
 80229d0:	6820      	ldr	r0, [r4, #0]
 80229d2:	6921      	ldr	r1, [r4, #16]
 80229d4:	6963      	ldr	r3, [r4, #20]
 80229d6:	45d9      	cmp	r9, fp
 80229d8:	464a      	mov	r2, r9
 80229da:	bf28      	it	cs
 80229dc:	465a      	movcs	r2, fp
 80229de:	4288      	cmp	r0, r1
 80229e0:	f240 80f5 	bls.w	8022bce <__sfvwrite_r+0x25a>
 80229e4:	68a5      	ldr	r5, [r4, #8]
 80229e6:	441d      	add	r5, r3
 80229e8:	42aa      	cmp	r2, r5
 80229ea:	f340 80f0 	ble.w	8022bce <__sfvwrite_r+0x25a>
 80229ee:	4651      	mov	r1, sl
 80229f0:	462a      	mov	r2, r5
 80229f2:	f7f8 fc21 	bl	801b238 <memmove>
 80229f6:	6823      	ldr	r3, [r4, #0]
 80229f8:	442b      	add	r3, r5
 80229fa:	6023      	str	r3, [r4, #0]
 80229fc:	4621      	mov	r1, r4
 80229fe:	4630      	mov	r0, r6
 8022a00:	f7fc fe02 	bl	801f608 <_fflush_r>
 8022a04:	2800      	cmp	r0, #0
 8022a06:	d167      	bne.n	8022ad8 <__sfvwrite_r+0x164>
 8022a08:	ebb9 0905 	subs.w	r9, r9, r5
 8022a0c:	f040 80f7 	bne.w	8022bfe <__sfvwrite_r+0x28a>
 8022a10:	4621      	mov	r1, r4
 8022a12:	4630      	mov	r0, r6
 8022a14:	f7fc fdf8 	bl	801f608 <_fflush_r>
 8022a18:	2800      	cmp	r0, #0
 8022a1a:	d15d      	bne.n	8022ad8 <__sfvwrite_r+0x164>
 8022a1c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8022a20:	44aa      	add	sl, r5
 8022a22:	ebab 0b05 	sub.w	fp, fp, r5
 8022a26:	1b55      	subs	r5, r2, r5
 8022a28:	f8c8 5008 	str.w	r5, [r8, #8]
 8022a2c:	2d00      	cmp	r5, #0
 8022a2e:	d1bf      	bne.n	80229b0 <__sfvwrite_r+0x3c>
 8022a30:	e7a7      	b.n	8022982 <__sfvwrite_r+0xe>
 8022a32:	4621      	mov	r1, r4
 8022a34:	4630      	mov	r0, r6
 8022a36:	f7fb fe75 	bl	801e724 <__swsetup_r>
 8022a3a:	2800      	cmp	r0, #0
 8022a3c:	d0ab      	beq.n	8022996 <__sfvwrite_r+0x22>
 8022a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8022a42:	e79f      	b.n	8022984 <__sfvwrite_r+0x10>
 8022a44:	e9d7 b900 	ldrd	fp, r9, [r7]
 8022a48:	3708      	adds	r7, #8
 8022a4a:	f1b9 0f00 	cmp.w	r9, #0
 8022a4e:	d0f9      	beq.n	8022a44 <__sfvwrite_r+0xd0>
 8022a50:	45d1      	cmp	r9, sl
 8022a52:	464b      	mov	r3, r9
 8022a54:	69e1      	ldr	r1, [r4, #28]
 8022a56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022a58:	bf28      	it	cs
 8022a5a:	4653      	movcs	r3, sl
 8022a5c:	465a      	mov	r2, fp
 8022a5e:	4630      	mov	r0, r6
 8022a60:	47a8      	blx	r5
 8022a62:	2800      	cmp	r0, #0
 8022a64:	dd38      	ble.n	8022ad8 <__sfvwrite_r+0x164>
 8022a66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022a6a:	4483      	add	fp, r0
 8022a6c:	eba9 0900 	sub.w	r9, r9, r0
 8022a70:	1a18      	subs	r0, r3, r0
 8022a72:	f8c8 0008 	str.w	r0, [r8, #8]
 8022a76:	2800      	cmp	r0, #0
 8022a78:	d1e7      	bne.n	8022a4a <__sfvwrite_r+0xd6>
 8022a7a:	e782      	b.n	8022982 <__sfvwrite_r+0xe>
 8022a7c:	f04f 0b00 	mov.w	fp, #0
 8022a80:	f8df a180 	ldr.w	sl, [pc, #384]	; 8022c04 <__sfvwrite_r+0x290>
 8022a84:	46d9      	mov	r9, fp
 8022a86:	e7e0      	b.n	8022a4a <__sfvwrite_r+0xd6>
 8022a88:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8022a8c:	3708      	adds	r7, #8
 8022a8e:	f1ba 0f00 	cmp.w	sl, #0
 8022a92:	d0f9      	beq.n	8022a88 <__sfvwrite_r+0x114>
 8022a94:	89a3      	ldrh	r3, [r4, #12]
 8022a96:	68a2      	ldr	r2, [r4, #8]
 8022a98:	6820      	ldr	r0, [r4, #0]
 8022a9a:	0599      	lsls	r1, r3, #22
 8022a9c:	d563      	bpl.n	8022b66 <__sfvwrite_r+0x1f2>
 8022a9e:	4552      	cmp	r2, sl
 8022aa0:	d836      	bhi.n	8022b10 <__sfvwrite_r+0x19c>
 8022aa2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8022aa6:	d033      	beq.n	8022b10 <__sfvwrite_r+0x19c>
 8022aa8:	6921      	ldr	r1, [r4, #16]
 8022aaa:	6965      	ldr	r5, [r4, #20]
 8022aac:	eba0 0b01 	sub.w	fp, r0, r1
 8022ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022ab8:	f10b 0201 	add.w	r2, fp, #1
 8022abc:	106d      	asrs	r5, r5, #1
 8022abe:	4452      	add	r2, sl
 8022ac0:	4295      	cmp	r5, r2
 8022ac2:	bf38      	it	cc
 8022ac4:	4615      	movcc	r5, r2
 8022ac6:	055b      	lsls	r3, r3, #21
 8022ac8:	d53d      	bpl.n	8022b46 <__sfvwrite_r+0x1d2>
 8022aca:	4629      	mov	r1, r5
 8022acc:	4630      	mov	r0, r6
 8022ace:	f7fd f8f3 	bl	801fcb8 <_malloc_r>
 8022ad2:	b948      	cbnz	r0, 8022ae8 <__sfvwrite_r+0x174>
 8022ad4:	230c      	movs	r3, #12
 8022ad6:	6033      	str	r3, [r6, #0]
 8022ad8:	89a3      	ldrh	r3, [r4, #12]
 8022ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ade:	81a3      	strh	r3, [r4, #12]
 8022ae0:	e7ad      	b.n	8022a3e <__sfvwrite_r+0xca>
 8022ae2:	4699      	mov	r9, r3
 8022ae4:	469a      	mov	sl, r3
 8022ae6:	e7d2      	b.n	8022a8e <__sfvwrite_r+0x11a>
 8022ae8:	465a      	mov	r2, fp
 8022aea:	6921      	ldr	r1, [r4, #16]
 8022aec:	9001      	str	r0, [sp, #4]
 8022aee:	f7f8 fb95 	bl	801b21c <memcpy>
 8022af2:	89a2      	ldrh	r2, [r4, #12]
 8022af4:	9b01      	ldr	r3, [sp, #4]
 8022af6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8022afa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022afe:	81a2      	strh	r2, [r4, #12]
 8022b00:	6123      	str	r3, [r4, #16]
 8022b02:	6165      	str	r5, [r4, #20]
 8022b04:	445b      	add	r3, fp
 8022b06:	eba5 050b 	sub.w	r5, r5, fp
 8022b0a:	6023      	str	r3, [r4, #0]
 8022b0c:	4652      	mov	r2, sl
 8022b0e:	60a5      	str	r5, [r4, #8]
 8022b10:	4552      	cmp	r2, sl
 8022b12:	bf28      	it	cs
 8022b14:	4652      	movcs	r2, sl
 8022b16:	6820      	ldr	r0, [r4, #0]
 8022b18:	9201      	str	r2, [sp, #4]
 8022b1a:	4649      	mov	r1, r9
 8022b1c:	f7f8 fb8c 	bl	801b238 <memmove>
 8022b20:	68a3      	ldr	r3, [r4, #8]
 8022b22:	9a01      	ldr	r2, [sp, #4]
 8022b24:	1a9b      	subs	r3, r3, r2
 8022b26:	60a3      	str	r3, [r4, #8]
 8022b28:	6823      	ldr	r3, [r4, #0]
 8022b2a:	441a      	add	r2, r3
 8022b2c:	4655      	mov	r5, sl
 8022b2e:	6022      	str	r2, [r4, #0]
 8022b30:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8022b34:	44a9      	add	r9, r5
 8022b36:	ebaa 0a05 	sub.w	sl, sl, r5
 8022b3a:	1b45      	subs	r5, r0, r5
 8022b3c:	f8c8 5008 	str.w	r5, [r8, #8]
 8022b40:	2d00      	cmp	r5, #0
 8022b42:	d1a4      	bne.n	8022a8e <__sfvwrite_r+0x11a>
 8022b44:	e71d      	b.n	8022982 <__sfvwrite_r+0xe>
 8022b46:	462a      	mov	r2, r5
 8022b48:	4630      	mov	r0, r6
 8022b4a:	f000 f8d9 	bl	8022d00 <_realloc_r>
 8022b4e:	4603      	mov	r3, r0
 8022b50:	2800      	cmp	r0, #0
 8022b52:	d1d5      	bne.n	8022b00 <__sfvwrite_r+0x18c>
 8022b54:	6921      	ldr	r1, [r4, #16]
 8022b56:	4630      	mov	r0, r6
 8022b58:	f7fc fe52 	bl	801f800 <_free_r>
 8022b5c:	89a3      	ldrh	r3, [r4, #12]
 8022b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022b62:	81a3      	strh	r3, [r4, #12]
 8022b64:	e7b6      	b.n	8022ad4 <__sfvwrite_r+0x160>
 8022b66:	6923      	ldr	r3, [r4, #16]
 8022b68:	4283      	cmp	r3, r0
 8022b6a:	d302      	bcc.n	8022b72 <__sfvwrite_r+0x1fe>
 8022b6c:	6961      	ldr	r1, [r4, #20]
 8022b6e:	4551      	cmp	r1, sl
 8022b70:	d915      	bls.n	8022b9e <__sfvwrite_r+0x22a>
 8022b72:	4552      	cmp	r2, sl
 8022b74:	bf28      	it	cs
 8022b76:	4652      	movcs	r2, sl
 8022b78:	4649      	mov	r1, r9
 8022b7a:	4615      	mov	r5, r2
 8022b7c:	f7f8 fb5c 	bl	801b238 <memmove>
 8022b80:	68a3      	ldr	r3, [r4, #8]
 8022b82:	6822      	ldr	r2, [r4, #0]
 8022b84:	1b5b      	subs	r3, r3, r5
 8022b86:	442a      	add	r2, r5
 8022b88:	60a3      	str	r3, [r4, #8]
 8022b8a:	6022      	str	r2, [r4, #0]
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	d1cf      	bne.n	8022b30 <__sfvwrite_r+0x1bc>
 8022b90:	4621      	mov	r1, r4
 8022b92:	4630      	mov	r0, r6
 8022b94:	f7fc fd38 	bl	801f608 <_fflush_r>
 8022b98:	2800      	cmp	r0, #0
 8022b9a:	d0c9      	beq.n	8022b30 <__sfvwrite_r+0x1bc>
 8022b9c:	e79c      	b.n	8022ad8 <__sfvwrite_r+0x164>
 8022b9e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022ba2:	459a      	cmp	sl, r3
 8022ba4:	bf38      	it	cc
 8022ba6:	4653      	movcc	r3, sl
 8022ba8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022baa:	fb93 f3f1 	sdiv	r3, r3, r1
 8022bae:	464a      	mov	r2, r9
 8022bb0:	434b      	muls	r3, r1
 8022bb2:	4630      	mov	r0, r6
 8022bb4:	69e1      	ldr	r1, [r4, #28]
 8022bb6:	47a8      	blx	r5
 8022bb8:	1e05      	subs	r5, r0, #0
 8022bba:	dcb9      	bgt.n	8022b30 <__sfvwrite_r+0x1bc>
 8022bbc:	e78c      	b.n	8022ad8 <__sfvwrite_r+0x164>
 8022bbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8022bc2:	2000      	movs	r0, #0
 8022bc4:	3708      	adds	r7, #8
 8022bc6:	e6f3      	b.n	80229b0 <__sfvwrite_r+0x3c>
 8022bc8:	f10b 0901 	add.w	r9, fp, #1
 8022bcc:	e700      	b.n	80229d0 <__sfvwrite_r+0x5c>
 8022bce:	4293      	cmp	r3, r2
 8022bd0:	dc08      	bgt.n	8022be4 <__sfvwrite_r+0x270>
 8022bd2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022bd4:	69e1      	ldr	r1, [r4, #28]
 8022bd6:	4652      	mov	r2, sl
 8022bd8:	4630      	mov	r0, r6
 8022bda:	47a8      	blx	r5
 8022bdc:	1e05      	subs	r5, r0, #0
 8022bde:	f73f af13 	bgt.w	8022a08 <__sfvwrite_r+0x94>
 8022be2:	e779      	b.n	8022ad8 <__sfvwrite_r+0x164>
 8022be4:	4651      	mov	r1, sl
 8022be6:	9201      	str	r2, [sp, #4]
 8022be8:	f7f8 fb26 	bl	801b238 <memmove>
 8022bec:	9a01      	ldr	r2, [sp, #4]
 8022bee:	68a3      	ldr	r3, [r4, #8]
 8022bf0:	1a9b      	subs	r3, r3, r2
 8022bf2:	60a3      	str	r3, [r4, #8]
 8022bf4:	6823      	ldr	r3, [r4, #0]
 8022bf6:	4413      	add	r3, r2
 8022bf8:	6023      	str	r3, [r4, #0]
 8022bfa:	4615      	mov	r5, r2
 8022bfc:	e704      	b.n	8022a08 <__sfvwrite_r+0x94>
 8022bfe:	2001      	movs	r0, #1
 8022c00:	e70c      	b.n	8022a1c <__sfvwrite_r+0xa8>
 8022c02:	bf00      	nop
 8022c04:	7ffffc00 	.word	0x7ffffc00

08022c08 <_isatty_r>:
 8022c08:	b538      	push	{r3, r4, r5, lr}
 8022c0a:	4d06      	ldr	r5, [pc, #24]	; (8022c24 <_isatty_r+0x1c>)
 8022c0c:	2300      	movs	r3, #0
 8022c0e:	4604      	mov	r4, r0
 8022c10:	4608      	mov	r0, r1
 8022c12:	602b      	str	r3, [r5, #0]
 8022c14:	f7e1 f895 	bl	8003d42 <_isatty>
 8022c18:	1c43      	adds	r3, r0, #1
 8022c1a:	d102      	bne.n	8022c22 <_isatty_r+0x1a>
 8022c1c:	682b      	ldr	r3, [r5, #0]
 8022c1e:	b103      	cbz	r3, 8022c22 <_isatty_r+0x1a>
 8022c20:	6023      	str	r3, [r4, #0]
 8022c22:	bd38      	pop	{r3, r4, r5, pc}
 8022c24:	2000be5c 	.word	0x2000be5c

08022c28 <iswspace>:
 8022c28:	2100      	movs	r1, #0
 8022c2a:	f000 b801 	b.w	8022c30 <iswspace_l>
	...

08022c30 <iswspace_l>:
 8022c30:	28ff      	cmp	r0, #255	; 0xff
 8022c32:	bf9d      	ittte	ls
 8022c34:	4b02      	ldrls	r3, [pc, #8]	; (8022c40 <iswspace_l+0x10>)
 8022c36:	5cc0      	ldrbls	r0, [r0, r3]
 8022c38:	f000 0008 	andls.w	r0, r0, #8
 8022c3c:	2000      	movhi	r0, #0
 8022c3e:	4770      	bx	lr
 8022c40:	080296f1 	.word	0x080296f1

08022c44 <__locale_mb_cur_max>:
 8022c44:	4b01      	ldr	r3, [pc, #4]	; (8022c4c <__locale_mb_cur_max+0x8>)
 8022c46:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8022c4a:	4770      	bx	lr
 8022c4c:	200008e0 	.word	0x200008e0

08022c50 <_lseek_r>:
 8022c50:	b538      	push	{r3, r4, r5, lr}
 8022c52:	4d07      	ldr	r5, [pc, #28]	; (8022c70 <_lseek_r+0x20>)
 8022c54:	4604      	mov	r4, r0
 8022c56:	4608      	mov	r0, r1
 8022c58:	4611      	mov	r1, r2
 8022c5a:	2200      	movs	r2, #0
 8022c5c:	602a      	str	r2, [r5, #0]
 8022c5e:	461a      	mov	r2, r3
 8022c60:	f7e1 f87a 	bl	8003d58 <_lseek>
 8022c64:	1c43      	adds	r3, r0, #1
 8022c66:	d102      	bne.n	8022c6e <_lseek_r+0x1e>
 8022c68:	682b      	ldr	r3, [r5, #0]
 8022c6a:	b103      	cbz	r3, 8022c6e <_lseek_r+0x1e>
 8022c6c:	6023      	str	r3, [r4, #0]
 8022c6e:	bd38      	pop	{r3, r4, r5, pc}
 8022c70:	2000be5c 	.word	0x2000be5c

08022c74 <_mbrtowc_r>:
 8022c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022c76:	4c0a      	ldr	r4, [pc, #40]	; (8022ca0 <_mbrtowc_r+0x2c>)
 8022c78:	9e08      	ldr	r6, [sp, #32]
 8022c7a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8022c7e:	9600      	str	r6, [sp, #0]
 8022c80:	4605      	mov	r5, r0
 8022c82:	4614      	mov	r4, r2
 8022c84:	b912      	cbnz	r2, 8022c8c <_mbrtowc_r+0x18>
 8022c86:	4a07      	ldr	r2, [pc, #28]	; (8022ca4 <_mbrtowc_r+0x30>)
 8022c88:	2301      	movs	r3, #1
 8022c8a:	4621      	mov	r1, r4
 8022c8c:	47b8      	blx	r7
 8022c8e:	1c43      	adds	r3, r0, #1
 8022c90:	bf01      	itttt	eq
 8022c92:	2300      	moveq	r3, #0
 8022c94:	6033      	streq	r3, [r6, #0]
 8022c96:	238a      	moveq	r3, #138	; 0x8a
 8022c98:	602b      	streq	r3, [r5, #0]
 8022c9a:	b003      	add	sp, #12
 8022c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c9e:	bf00      	nop
 8022ca0:	200008e0 	.word	0x200008e0
 8022ca4:	08029bc1 	.word	0x08029bc1

08022ca8 <__ascii_mbtowc>:
 8022ca8:	b082      	sub	sp, #8
 8022caa:	b901      	cbnz	r1, 8022cae <__ascii_mbtowc+0x6>
 8022cac:	a901      	add	r1, sp, #4
 8022cae:	b142      	cbz	r2, 8022cc2 <__ascii_mbtowc+0x1a>
 8022cb0:	b14b      	cbz	r3, 8022cc6 <__ascii_mbtowc+0x1e>
 8022cb2:	7813      	ldrb	r3, [r2, #0]
 8022cb4:	600b      	str	r3, [r1, #0]
 8022cb6:	7812      	ldrb	r2, [r2, #0]
 8022cb8:	1e10      	subs	r0, r2, #0
 8022cba:	bf18      	it	ne
 8022cbc:	2001      	movne	r0, #1
 8022cbe:	b002      	add	sp, #8
 8022cc0:	4770      	bx	lr
 8022cc2:	4610      	mov	r0, r2
 8022cc4:	e7fb      	b.n	8022cbe <__ascii_mbtowc+0x16>
 8022cc6:	f06f 0001 	mvn.w	r0, #1
 8022cca:	e7f8      	b.n	8022cbe <__ascii_mbtowc+0x16>

08022ccc <_read_r>:
 8022ccc:	b538      	push	{r3, r4, r5, lr}
 8022cce:	4d07      	ldr	r5, [pc, #28]	; (8022cec <_read_r+0x20>)
 8022cd0:	4604      	mov	r4, r0
 8022cd2:	4608      	mov	r0, r1
 8022cd4:	4611      	mov	r1, r2
 8022cd6:	2200      	movs	r2, #0
 8022cd8:	602a      	str	r2, [r5, #0]
 8022cda:	461a      	mov	r2, r3
 8022cdc:	f7e0 fff8 	bl	8003cd0 <_read>
 8022ce0:	1c43      	adds	r3, r0, #1
 8022ce2:	d102      	bne.n	8022cea <_read_r+0x1e>
 8022ce4:	682b      	ldr	r3, [r5, #0]
 8022ce6:	b103      	cbz	r3, 8022cea <_read_r+0x1e>
 8022ce8:	6023      	str	r3, [r4, #0]
 8022cea:	bd38      	pop	{r3, r4, r5, pc}
 8022cec:	2000be5c 	.word	0x2000be5c

08022cf0 <realloc>:
 8022cf0:	4b02      	ldr	r3, [pc, #8]	; (8022cfc <realloc+0xc>)
 8022cf2:	460a      	mov	r2, r1
 8022cf4:	4601      	mov	r1, r0
 8022cf6:	6818      	ldr	r0, [r3, #0]
 8022cf8:	f000 b802 	b.w	8022d00 <_realloc_r>
 8022cfc:	20000038 	.word	0x20000038

08022d00 <_realloc_r>:
 8022d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d04:	4681      	mov	r9, r0
 8022d06:	460c      	mov	r4, r1
 8022d08:	b929      	cbnz	r1, 8022d16 <_realloc_r+0x16>
 8022d0a:	4611      	mov	r1, r2
 8022d0c:	b003      	add	sp, #12
 8022d0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d12:	f7fc bfd1 	b.w	801fcb8 <_malloc_r>
 8022d16:	9201      	str	r2, [sp, #4]
 8022d18:	f7fd fa10 	bl	802013c <__malloc_lock>
 8022d1c:	9a01      	ldr	r2, [sp, #4]
 8022d1e:	f102 080b 	add.w	r8, r2, #11
 8022d22:	f1b8 0f16 	cmp.w	r8, #22
 8022d26:	d90b      	bls.n	8022d40 <_realloc_r+0x40>
 8022d28:	f038 0807 	bics.w	r8, r8, #7
 8022d2c:	d50a      	bpl.n	8022d44 <_realloc_r+0x44>
 8022d2e:	230c      	movs	r3, #12
 8022d30:	f8c9 3000 	str.w	r3, [r9]
 8022d34:	f04f 0b00 	mov.w	fp, #0
 8022d38:	4658      	mov	r0, fp
 8022d3a:	b003      	add	sp, #12
 8022d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d40:	f04f 0810 	mov.w	r8, #16
 8022d44:	4590      	cmp	r8, r2
 8022d46:	d3f2      	bcc.n	8022d2e <_realloc_r+0x2e>
 8022d48:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8022d4c:	f025 0603 	bic.w	r6, r5, #3
 8022d50:	45b0      	cmp	r8, r6
 8022d52:	f1a4 0a08 	sub.w	sl, r4, #8
 8022d56:	f340 8170 	ble.w	802303a <_realloc_r+0x33a>
 8022d5a:	48a9      	ldr	r0, [pc, #676]	; (8023000 <_realloc_r+0x300>)
 8022d5c:	9001      	str	r0, [sp, #4]
 8022d5e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8022d62:	eb0a 0306 	add.w	r3, sl, r6
 8022d66:	459c      	cmp	ip, r3
 8022d68:	6859      	ldr	r1, [r3, #4]
 8022d6a:	d005      	beq.n	8022d78 <_realloc_r+0x78>
 8022d6c:	f021 0001 	bic.w	r0, r1, #1
 8022d70:	4418      	add	r0, r3
 8022d72:	6840      	ldr	r0, [r0, #4]
 8022d74:	07c7      	lsls	r7, r0, #31
 8022d76:	d427      	bmi.n	8022dc8 <_realloc_r+0xc8>
 8022d78:	f021 0103 	bic.w	r1, r1, #3
 8022d7c:	459c      	cmp	ip, r3
 8022d7e:	eb06 0701 	add.w	r7, r6, r1
 8022d82:	d119      	bne.n	8022db8 <_realloc_r+0xb8>
 8022d84:	f108 0010 	add.w	r0, r8, #16
 8022d88:	42b8      	cmp	r0, r7
 8022d8a:	dc1f      	bgt.n	8022dcc <_realloc_r+0xcc>
 8022d8c:	eb0a 0308 	add.w	r3, sl, r8
 8022d90:	9a01      	ldr	r2, [sp, #4]
 8022d92:	eba7 0708 	sub.w	r7, r7, r8
 8022d96:	f047 0701 	orr.w	r7, r7, #1
 8022d9a:	6093      	str	r3, [r2, #8]
 8022d9c:	605f      	str	r7, [r3, #4]
 8022d9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022da2:	f003 0301 	and.w	r3, r3, #1
 8022da6:	ea43 0308 	orr.w	r3, r3, r8
 8022daa:	f844 3c04 	str.w	r3, [r4, #-4]
 8022dae:	4648      	mov	r0, r9
 8022db0:	f7fd f9ca 	bl	8020148 <__malloc_unlock>
 8022db4:	46a3      	mov	fp, r4
 8022db6:	e7bf      	b.n	8022d38 <_realloc_r+0x38>
 8022db8:	45b8      	cmp	r8, r7
 8022dba:	dc07      	bgt.n	8022dcc <_realloc_r+0xcc>
 8022dbc:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8022dc0:	60da      	str	r2, [r3, #12]
 8022dc2:	6093      	str	r3, [r2, #8]
 8022dc4:	4655      	mov	r5, sl
 8022dc6:	e07f      	b.n	8022ec8 <_realloc_r+0x1c8>
 8022dc8:	2100      	movs	r1, #0
 8022dca:	460b      	mov	r3, r1
 8022dcc:	07e8      	lsls	r0, r5, #31
 8022dce:	f100 80e5 	bmi.w	8022f9c <_realloc_r+0x29c>
 8022dd2:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8022dd6:	ebaa 0505 	sub.w	r5, sl, r5
 8022dda:	6868      	ldr	r0, [r5, #4]
 8022ddc:	f020 0003 	bic.w	r0, r0, #3
 8022de0:	eb00 0b06 	add.w	fp, r0, r6
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	f000 80a5 	beq.w	8022f34 <_realloc_r+0x234>
 8022dea:	459c      	cmp	ip, r3
 8022dec:	eb01 070b 	add.w	r7, r1, fp
 8022df0:	d14a      	bne.n	8022e88 <_realloc_r+0x188>
 8022df2:	f108 0310 	add.w	r3, r8, #16
 8022df6:	42bb      	cmp	r3, r7
 8022df8:	f300 809c 	bgt.w	8022f34 <_realloc_r+0x234>
 8022dfc:	46ab      	mov	fp, r5
 8022dfe:	68eb      	ldr	r3, [r5, #12]
 8022e00:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8022e04:	60d3      	str	r3, [r2, #12]
 8022e06:	609a      	str	r2, [r3, #8]
 8022e08:	1f32      	subs	r2, r6, #4
 8022e0a:	2a24      	cmp	r2, #36	; 0x24
 8022e0c:	d837      	bhi.n	8022e7e <_realloc_r+0x17e>
 8022e0e:	2a13      	cmp	r2, #19
 8022e10:	d933      	bls.n	8022e7a <_realloc_r+0x17a>
 8022e12:	6823      	ldr	r3, [r4, #0]
 8022e14:	60ab      	str	r3, [r5, #8]
 8022e16:	6863      	ldr	r3, [r4, #4]
 8022e18:	60eb      	str	r3, [r5, #12]
 8022e1a:	2a1b      	cmp	r2, #27
 8022e1c:	d81b      	bhi.n	8022e56 <_realloc_r+0x156>
 8022e1e:	3408      	adds	r4, #8
 8022e20:	f105 0310 	add.w	r3, r5, #16
 8022e24:	6822      	ldr	r2, [r4, #0]
 8022e26:	601a      	str	r2, [r3, #0]
 8022e28:	6862      	ldr	r2, [r4, #4]
 8022e2a:	605a      	str	r2, [r3, #4]
 8022e2c:	68a2      	ldr	r2, [r4, #8]
 8022e2e:	609a      	str	r2, [r3, #8]
 8022e30:	eb05 0308 	add.w	r3, r5, r8
 8022e34:	9a01      	ldr	r2, [sp, #4]
 8022e36:	eba7 0708 	sub.w	r7, r7, r8
 8022e3a:	f047 0701 	orr.w	r7, r7, #1
 8022e3e:	6093      	str	r3, [r2, #8]
 8022e40:	605f      	str	r7, [r3, #4]
 8022e42:	686b      	ldr	r3, [r5, #4]
 8022e44:	f003 0301 	and.w	r3, r3, #1
 8022e48:	ea43 0308 	orr.w	r3, r3, r8
 8022e4c:	606b      	str	r3, [r5, #4]
 8022e4e:	4648      	mov	r0, r9
 8022e50:	f7fd f97a 	bl	8020148 <__malloc_unlock>
 8022e54:	e770      	b.n	8022d38 <_realloc_r+0x38>
 8022e56:	68a3      	ldr	r3, [r4, #8]
 8022e58:	612b      	str	r3, [r5, #16]
 8022e5a:	68e3      	ldr	r3, [r4, #12]
 8022e5c:	616b      	str	r3, [r5, #20]
 8022e5e:	2a24      	cmp	r2, #36	; 0x24
 8022e60:	bf01      	itttt	eq
 8022e62:	6923      	ldreq	r3, [r4, #16]
 8022e64:	61ab      	streq	r3, [r5, #24]
 8022e66:	6962      	ldreq	r2, [r4, #20]
 8022e68:	61ea      	streq	r2, [r5, #28]
 8022e6a:	bf19      	ittee	ne
 8022e6c:	3410      	addne	r4, #16
 8022e6e:	f105 0318 	addne.w	r3, r5, #24
 8022e72:	f105 0320 	addeq.w	r3, r5, #32
 8022e76:	3418      	addeq	r4, #24
 8022e78:	e7d4      	b.n	8022e24 <_realloc_r+0x124>
 8022e7a:	465b      	mov	r3, fp
 8022e7c:	e7d2      	b.n	8022e24 <_realloc_r+0x124>
 8022e7e:	4621      	mov	r1, r4
 8022e80:	4658      	mov	r0, fp
 8022e82:	f7f8 f9d9 	bl	801b238 <memmove>
 8022e86:	e7d3      	b.n	8022e30 <_realloc_r+0x130>
 8022e88:	45b8      	cmp	r8, r7
 8022e8a:	dc53      	bgt.n	8022f34 <_realloc_r+0x234>
 8022e8c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8022e90:	4628      	mov	r0, r5
 8022e92:	60da      	str	r2, [r3, #12]
 8022e94:	6093      	str	r3, [r2, #8]
 8022e96:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022e9a:	68eb      	ldr	r3, [r5, #12]
 8022e9c:	60d3      	str	r3, [r2, #12]
 8022e9e:	609a      	str	r2, [r3, #8]
 8022ea0:	1f32      	subs	r2, r6, #4
 8022ea2:	2a24      	cmp	r2, #36	; 0x24
 8022ea4:	d842      	bhi.n	8022f2c <_realloc_r+0x22c>
 8022ea6:	2a13      	cmp	r2, #19
 8022ea8:	d908      	bls.n	8022ebc <_realloc_r+0x1bc>
 8022eaa:	6823      	ldr	r3, [r4, #0]
 8022eac:	60ab      	str	r3, [r5, #8]
 8022eae:	6863      	ldr	r3, [r4, #4]
 8022eb0:	60eb      	str	r3, [r5, #12]
 8022eb2:	2a1b      	cmp	r2, #27
 8022eb4:	d828      	bhi.n	8022f08 <_realloc_r+0x208>
 8022eb6:	3408      	adds	r4, #8
 8022eb8:	f105 0010 	add.w	r0, r5, #16
 8022ebc:	6823      	ldr	r3, [r4, #0]
 8022ebe:	6003      	str	r3, [r0, #0]
 8022ec0:	6863      	ldr	r3, [r4, #4]
 8022ec2:	6043      	str	r3, [r0, #4]
 8022ec4:	68a3      	ldr	r3, [r4, #8]
 8022ec6:	6083      	str	r3, [r0, #8]
 8022ec8:	686a      	ldr	r2, [r5, #4]
 8022eca:	eba7 0008 	sub.w	r0, r7, r8
 8022ece:	280f      	cmp	r0, #15
 8022ed0:	f002 0201 	and.w	r2, r2, #1
 8022ed4:	eb05 0307 	add.w	r3, r5, r7
 8022ed8:	f240 80b1 	bls.w	802303e <_realloc_r+0x33e>
 8022edc:	eb05 0108 	add.w	r1, r5, r8
 8022ee0:	ea48 0202 	orr.w	r2, r8, r2
 8022ee4:	f040 0001 	orr.w	r0, r0, #1
 8022ee8:	606a      	str	r2, [r5, #4]
 8022eea:	6048      	str	r0, [r1, #4]
 8022eec:	685a      	ldr	r2, [r3, #4]
 8022eee:	f042 0201 	orr.w	r2, r2, #1
 8022ef2:	605a      	str	r2, [r3, #4]
 8022ef4:	3108      	adds	r1, #8
 8022ef6:	4648      	mov	r0, r9
 8022ef8:	f7fc fc82 	bl	801f800 <_free_r>
 8022efc:	4648      	mov	r0, r9
 8022efe:	f7fd f923 	bl	8020148 <__malloc_unlock>
 8022f02:	f105 0b08 	add.w	fp, r5, #8
 8022f06:	e717      	b.n	8022d38 <_realloc_r+0x38>
 8022f08:	68a3      	ldr	r3, [r4, #8]
 8022f0a:	612b      	str	r3, [r5, #16]
 8022f0c:	68e3      	ldr	r3, [r4, #12]
 8022f0e:	616b      	str	r3, [r5, #20]
 8022f10:	2a24      	cmp	r2, #36	; 0x24
 8022f12:	bf01      	itttt	eq
 8022f14:	6923      	ldreq	r3, [r4, #16]
 8022f16:	61ab      	streq	r3, [r5, #24]
 8022f18:	6963      	ldreq	r3, [r4, #20]
 8022f1a:	61eb      	streq	r3, [r5, #28]
 8022f1c:	bf19      	ittee	ne
 8022f1e:	3410      	addne	r4, #16
 8022f20:	f105 0018 	addne.w	r0, r5, #24
 8022f24:	f105 0020 	addeq.w	r0, r5, #32
 8022f28:	3418      	addeq	r4, #24
 8022f2a:	e7c7      	b.n	8022ebc <_realloc_r+0x1bc>
 8022f2c:	4621      	mov	r1, r4
 8022f2e:	f7f8 f983 	bl	801b238 <memmove>
 8022f32:	e7c9      	b.n	8022ec8 <_realloc_r+0x1c8>
 8022f34:	45d8      	cmp	r8, fp
 8022f36:	dc31      	bgt.n	8022f9c <_realloc_r+0x29c>
 8022f38:	4628      	mov	r0, r5
 8022f3a:	68eb      	ldr	r3, [r5, #12]
 8022f3c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022f40:	60d3      	str	r3, [r2, #12]
 8022f42:	609a      	str	r2, [r3, #8]
 8022f44:	1f32      	subs	r2, r6, #4
 8022f46:	2a24      	cmp	r2, #36	; 0x24
 8022f48:	d824      	bhi.n	8022f94 <_realloc_r+0x294>
 8022f4a:	2a13      	cmp	r2, #19
 8022f4c:	d908      	bls.n	8022f60 <_realloc_r+0x260>
 8022f4e:	6823      	ldr	r3, [r4, #0]
 8022f50:	60ab      	str	r3, [r5, #8]
 8022f52:	6863      	ldr	r3, [r4, #4]
 8022f54:	60eb      	str	r3, [r5, #12]
 8022f56:	2a1b      	cmp	r2, #27
 8022f58:	d80a      	bhi.n	8022f70 <_realloc_r+0x270>
 8022f5a:	3408      	adds	r4, #8
 8022f5c:	f105 0010 	add.w	r0, r5, #16
 8022f60:	6823      	ldr	r3, [r4, #0]
 8022f62:	6003      	str	r3, [r0, #0]
 8022f64:	6863      	ldr	r3, [r4, #4]
 8022f66:	6043      	str	r3, [r0, #4]
 8022f68:	68a3      	ldr	r3, [r4, #8]
 8022f6a:	6083      	str	r3, [r0, #8]
 8022f6c:	465f      	mov	r7, fp
 8022f6e:	e7ab      	b.n	8022ec8 <_realloc_r+0x1c8>
 8022f70:	68a3      	ldr	r3, [r4, #8]
 8022f72:	612b      	str	r3, [r5, #16]
 8022f74:	68e3      	ldr	r3, [r4, #12]
 8022f76:	616b      	str	r3, [r5, #20]
 8022f78:	2a24      	cmp	r2, #36	; 0x24
 8022f7a:	bf01      	itttt	eq
 8022f7c:	6923      	ldreq	r3, [r4, #16]
 8022f7e:	61ab      	streq	r3, [r5, #24]
 8022f80:	6963      	ldreq	r3, [r4, #20]
 8022f82:	61eb      	streq	r3, [r5, #28]
 8022f84:	bf19      	ittee	ne
 8022f86:	3410      	addne	r4, #16
 8022f88:	f105 0018 	addne.w	r0, r5, #24
 8022f8c:	f105 0020 	addeq.w	r0, r5, #32
 8022f90:	3418      	addeq	r4, #24
 8022f92:	e7e5      	b.n	8022f60 <_realloc_r+0x260>
 8022f94:	4621      	mov	r1, r4
 8022f96:	f7f8 f94f 	bl	801b238 <memmove>
 8022f9a:	e7e7      	b.n	8022f6c <_realloc_r+0x26c>
 8022f9c:	4611      	mov	r1, r2
 8022f9e:	4648      	mov	r0, r9
 8022fa0:	f7fc fe8a 	bl	801fcb8 <_malloc_r>
 8022fa4:	4683      	mov	fp, r0
 8022fa6:	2800      	cmp	r0, #0
 8022fa8:	f43f af51 	beq.w	8022e4e <_realloc_r+0x14e>
 8022fac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022fb0:	f023 0301 	bic.w	r3, r3, #1
 8022fb4:	4453      	add	r3, sl
 8022fb6:	f1a0 0208 	sub.w	r2, r0, #8
 8022fba:	4293      	cmp	r3, r2
 8022fbc:	d105      	bne.n	8022fca <_realloc_r+0x2ca>
 8022fbe:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8022fc2:	f027 0703 	bic.w	r7, r7, #3
 8022fc6:	4437      	add	r7, r6
 8022fc8:	e6fc      	b.n	8022dc4 <_realloc_r+0xc4>
 8022fca:	1f32      	subs	r2, r6, #4
 8022fcc:	2a24      	cmp	r2, #36	; 0x24
 8022fce:	d830      	bhi.n	8023032 <_realloc_r+0x332>
 8022fd0:	2a13      	cmp	r2, #19
 8022fd2:	d92b      	bls.n	802302c <_realloc_r+0x32c>
 8022fd4:	6823      	ldr	r3, [r4, #0]
 8022fd6:	6003      	str	r3, [r0, #0]
 8022fd8:	6863      	ldr	r3, [r4, #4]
 8022fda:	6043      	str	r3, [r0, #4]
 8022fdc:	2a1b      	cmp	r2, #27
 8022fde:	d811      	bhi.n	8023004 <_realloc_r+0x304>
 8022fe0:	f104 0208 	add.w	r2, r4, #8
 8022fe4:	f100 0308 	add.w	r3, r0, #8
 8022fe8:	6811      	ldr	r1, [r2, #0]
 8022fea:	6019      	str	r1, [r3, #0]
 8022fec:	6851      	ldr	r1, [r2, #4]
 8022fee:	6059      	str	r1, [r3, #4]
 8022ff0:	6892      	ldr	r2, [r2, #8]
 8022ff2:	609a      	str	r2, [r3, #8]
 8022ff4:	4621      	mov	r1, r4
 8022ff6:	4648      	mov	r0, r9
 8022ff8:	f7fc fc02 	bl	801f800 <_free_r>
 8022ffc:	e727      	b.n	8022e4e <_realloc_r+0x14e>
 8022ffe:	bf00      	nop
 8023000:	200004d0 	.word	0x200004d0
 8023004:	68a3      	ldr	r3, [r4, #8]
 8023006:	6083      	str	r3, [r0, #8]
 8023008:	68e3      	ldr	r3, [r4, #12]
 802300a:	60c3      	str	r3, [r0, #12]
 802300c:	2a24      	cmp	r2, #36	; 0x24
 802300e:	bf01      	itttt	eq
 8023010:	6923      	ldreq	r3, [r4, #16]
 8023012:	6103      	streq	r3, [r0, #16]
 8023014:	6961      	ldreq	r1, [r4, #20]
 8023016:	6141      	streq	r1, [r0, #20]
 8023018:	bf19      	ittee	ne
 802301a:	f104 0210 	addne.w	r2, r4, #16
 802301e:	f100 0310 	addne.w	r3, r0, #16
 8023022:	f104 0218 	addeq.w	r2, r4, #24
 8023026:	f100 0318 	addeq.w	r3, r0, #24
 802302a:	e7dd      	b.n	8022fe8 <_realloc_r+0x2e8>
 802302c:	4603      	mov	r3, r0
 802302e:	4622      	mov	r2, r4
 8023030:	e7da      	b.n	8022fe8 <_realloc_r+0x2e8>
 8023032:	4621      	mov	r1, r4
 8023034:	f7f8 f900 	bl	801b238 <memmove>
 8023038:	e7dc      	b.n	8022ff4 <_realloc_r+0x2f4>
 802303a:	4637      	mov	r7, r6
 802303c:	e6c2      	b.n	8022dc4 <_realloc_r+0xc4>
 802303e:	4317      	orrs	r7, r2
 8023040:	606f      	str	r7, [r5, #4]
 8023042:	685a      	ldr	r2, [r3, #4]
 8023044:	f042 0201 	orr.w	r2, r2, #1
 8023048:	605a      	str	r2, [r3, #4]
 802304a:	e757      	b.n	8022efc <_realloc_r+0x1fc>

0802304c <__sccl>:
 802304c:	b570      	push	{r4, r5, r6, lr}
 802304e:	780b      	ldrb	r3, [r1, #0]
 8023050:	4604      	mov	r4, r0
 8023052:	2b5e      	cmp	r3, #94	; 0x5e
 8023054:	bf0b      	itete	eq
 8023056:	784b      	ldrbeq	r3, [r1, #1]
 8023058:	1c48      	addne	r0, r1, #1
 802305a:	1c88      	addeq	r0, r1, #2
 802305c:	2200      	movne	r2, #0
 802305e:	bf08      	it	eq
 8023060:	2201      	moveq	r2, #1
 8023062:	1e61      	subs	r1, r4, #1
 8023064:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8023068:	f801 2f01 	strb.w	r2, [r1, #1]!
 802306c:	42a9      	cmp	r1, r5
 802306e:	d1fb      	bne.n	8023068 <__sccl+0x1c>
 8023070:	b90b      	cbnz	r3, 8023076 <__sccl+0x2a>
 8023072:	3801      	subs	r0, #1
 8023074:	bd70      	pop	{r4, r5, r6, pc}
 8023076:	f082 0101 	eor.w	r1, r2, #1
 802307a:	54e1      	strb	r1, [r4, r3]
 802307c:	1c42      	adds	r2, r0, #1
 802307e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8023082:	2d2d      	cmp	r5, #45	; 0x2d
 8023084:	f102 36ff 	add.w	r6, r2, #4294967295
 8023088:	4610      	mov	r0, r2
 802308a:	d006      	beq.n	802309a <__sccl+0x4e>
 802308c:	2d5d      	cmp	r5, #93	; 0x5d
 802308e:	d0f1      	beq.n	8023074 <__sccl+0x28>
 8023090:	b90d      	cbnz	r5, 8023096 <__sccl+0x4a>
 8023092:	4630      	mov	r0, r6
 8023094:	e7ee      	b.n	8023074 <__sccl+0x28>
 8023096:	462b      	mov	r3, r5
 8023098:	e7ef      	b.n	802307a <__sccl+0x2e>
 802309a:	7816      	ldrb	r6, [r2, #0]
 802309c:	2e5d      	cmp	r6, #93	; 0x5d
 802309e:	d0fa      	beq.n	8023096 <__sccl+0x4a>
 80230a0:	42b3      	cmp	r3, r6
 80230a2:	dcf8      	bgt.n	8023096 <__sccl+0x4a>
 80230a4:	4618      	mov	r0, r3
 80230a6:	3001      	adds	r0, #1
 80230a8:	4286      	cmp	r6, r0
 80230aa:	5421      	strb	r1, [r4, r0]
 80230ac:	dcfb      	bgt.n	80230a6 <__sccl+0x5a>
 80230ae:	43d8      	mvns	r0, r3
 80230b0:	4430      	add	r0, r6
 80230b2:	1c5d      	adds	r5, r3, #1
 80230b4:	42b3      	cmp	r3, r6
 80230b6:	bfa8      	it	ge
 80230b8:	2000      	movge	r0, #0
 80230ba:	182b      	adds	r3, r5, r0
 80230bc:	3202      	adds	r2, #2
 80230be:	e7de      	b.n	802307e <__sccl+0x32>

080230c0 <_strtoll_l.isra.0>:
 80230c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230c4:	b087      	sub	sp, #28
 80230c6:	4691      	mov	r9, r2
 80230c8:	4a47      	ldr	r2, [pc, #284]	; (80231e8 <_strtoll_l.isra.0+0x128>)
 80230ca:	9005      	str	r0, [sp, #20]
 80230cc:	4688      	mov	r8, r1
 80230ce:	461f      	mov	r7, r3
 80230d0:	460d      	mov	r5, r1
 80230d2:	462b      	mov	r3, r5
 80230d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80230d8:	5ca6      	ldrb	r6, [r4, r2]
 80230da:	f016 0608 	ands.w	r6, r6, #8
 80230de:	d1f8      	bne.n	80230d2 <_strtoll_l.isra.0+0x12>
 80230e0:	2c2d      	cmp	r4, #45	; 0x2d
 80230e2:	d147      	bne.n	8023174 <_strtoll_l.isra.0+0xb4>
 80230e4:	782c      	ldrb	r4, [r5, #0]
 80230e6:	2601      	movs	r6, #1
 80230e8:	1c9d      	adds	r5, r3, #2
 80230ea:	2f00      	cmp	r7, #0
 80230ec:	d077      	beq.n	80231de <_strtoll_l.isra.0+0x11e>
 80230ee:	2f10      	cmp	r7, #16
 80230f0:	d109      	bne.n	8023106 <_strtoll_l.isra.0+0x46>
 80230f2:	2c30      	cmp	r4, #48	; 0x30
 80230f4:	d107      	bne.n	8023106 <_strtoll_l.isra.0+0x46>
 80230f6:	782b      	ldrb	r3, [r5, #0]
 80230f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80230fc:	2b58      	cmp	r3, #88	; 0x58
 80230fe:	d169      	bne.n	80231d4 <_strtoll_l.isra.0+0x114>
 8023100:	786c      	ldrb	r4, [r5, #1]
 8023102:	2710      	movs	r7, #16
 8023104:	3502      	adds	r5, #2
 8023106:	f04f 32ff 	mov.w	r2, #4294967295
 802310a:	1990      	adds	r0, r2, r6
 802310c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023110:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8023114:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 8023118:	463a      	mov	r2, r7
 802311a:	465b      	mov	r3, fp
 802311c:	e9cd 0100 	strd	r0, r1, [sp]
 8023120:	f7dd fdc2 	bl	8000ca8 <__aeabi_uldivmod>
 8023124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023128:	46ba      	mov	sl, r7
 802312a:	4696      	mov	lr, r2
 802312c:	2300      	movs	r3, #0
 802312e:	2000      	movs	r0, #0
 8023130:	2100      	movs	r1, #0
 8023132:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8023136:	f1bc 0f09 	cmp.w	ip, #9
 802313a:	d820      	bhi.n	802317e <_strtoll_l.isra.0+0xbe>
 802313c:	4664      	mov	r4, ip
 802313e:	42a7      	cmp	r7, r4
 8023140:	dd2e      	ble.n	80231a0 <_strtoll_l.isra.0+0xe0>
 8023142:	1c5a      	adds	r2, r3, #1
 8023144:	d013      	beq.n	802316e <_strtoll_l.isra.0+0xae>
 8023146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802314a:	428b      	cmp	r3, r1
 802314c:	bf08      	it	eq
 802314e:	4282      	cmpeq	r2, r0
 8023150:	d323      	bcc.n	802319a <_strtoll_l.isra.0+0xda>
 8023152:	d101      	bne.n	8023158 <_strtoll_l.isra.0+0x98>
 8023154:	45a6      	cmp	lr, r4
 8023156:	db20      	blt.n	802319a <_strtoll_l.isra.0+0xda>
 8023158:	fb0a f301 	mul.w	r3, sl, r1
 802315c:	fb00 330b 	mla	r3, r0, fp, r3
 8023160:	fbaa 0100 	umull	r0, r1, sl, r0
 8023164:	4419      	add	r1, r3
 8023166:	1900      	adds	r0, r0, r4
 8023168:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802316c:	2301      	movs	r3, #1
 802316e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023172:	e7de      	b.n	8023132 <_strtoll_l.isra.0+0x72>
 8023174:	2c2b      	cmp	r4, #43	; 0x2b
 8023176:	bf04      	itt	eq
 8023178:	782c      	ldrbeq	r4, [r5, #0]
 802317a:	1c9d      	addeq	r5, r3, #2
 802317c:	e7b5      	b.n	80230ea <_strtoll_l.isra.0+0x2a>
 802317e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023182:	f1bc 0f19 	cmp.w	ip, #25
 8023186:	d801      	bhi.n	802318c <_strtoll_l.isra.0+0xcc>
 8023188:	3c37      	subs	r4, #55	; 0x37
 802318a:	e7d8      	b.n	802313e <_strtoll_l.isra.0+0x7e>
 802318c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023190:	f1bc 0f19 	cmp.w	ip, #25
 8023194:	d804      	bhi.n	80231a0 <_strtoll_l.isra.0+0xe0>
 8023196:	3c57      	subs	r4, #87	; 0x57
 8023198:	e7d1      	b.n	802313e <_strtoll_l.isra.0+0x7e>
 802319a:	f04f 33ff 	mov.w	r3, #4294967295
 802319e:	e7e6      	b.n	802316e <_strtoll_l.isra.0+0xae>
 80231a0:	1c5a      	adds	r2, r3, #1
 80231a2:	d10a      	bne.n	80231ba <_strtoll_l.isra.0+0xfa>
 80231a4:	9a05      	ldr	r2, [sp, #20]
 80231a6:	2322      	movs	r3, #34	; 0x22
 80231a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80231ac:	6013      	str	r3, [r2, #0]
 80231ae:	f1b9 0f00 	cmp.w	r9, #0
 80231b2:	d10a      	bne.n	80231ca <_strtoll_l.isra.0+0x10a>
 80231b4:	b007      	add	sp, #28
 80231b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231ba:	b116      	cbz	r6, 80231c2 <_strtoll_l.isra.0+0x102>
 80231bc:	4240      	negs	r0, r0
 80231be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80231c2:	f1b9 0f00 	cmp.w	r9, #0
 80231c6:	d0f5      	beq.n	80231b4 <_strtoll_l.isra.0+0xf4>
 80231c8:	b10b      	cbz	r3, 80231ce <_strtoll_l.isra.0+0x10e>
 80231ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80231ce:	f8c9 8000 	str.w	r8, [r9]
 80231d2:	e7ef      	b.n	80231b4 <_strtoll_l.isra.0+0xf4>
 80231d4:	2430      	movs	r4, #48	; 0x30
 80231d6:	2f00      	cmp	r7, #0
 80231d8:	d195      	bne.n	8023106 <_strtoll_l.isra.0+0x46>
 80231da:	2708      	movs	r7, #8
 80231dc:	e793      	b.n	8023106 <_strtoll_l.isra.0+0x46>
 80231de:	2c30      	cmp	r4, #48	; 0x30
 80231e0:	d089      	beq.n	80230f6 <_strtoll_l.isra.0+0x36>
 80231e2:	270a      	movs	r7, #10
 80231e4:	e78f      	b.n	8023106 <_strtoll_l.isra.0+0x46>
 80231e6:	bf00      	nop
 80231e8:	080296f1 	.word	0x080296f1

080231ec <_strtoll_r>:
 80231ec:	f7ff bf68 	b.w	80230c0 <_strtoll_l.isra.0>

080231f0 <_strtoull_l.isra.0>:
 80231f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231f4:	b085      	sub	sp, #20
 80231f6:	4691      	mov	r9, r2
 80231f8:	4a49      	ldr	r2, [pc, #292]	; (8023320 <_strtoull_l.isra.0+0x130>)
 80231fa:	9003      	str	r0, [sp, #12]
 80231fc:	4688      	mov	r8, r1
 80231fe:	461e      	mov	r6, r3
 8023200:	460d      	mov	r5, r1
 8023202:	462b      	mov	r3, r5
 8023204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023208:	5ca7      	ldrb	r7, [r4, r2]
 802320a:	f017 0708 	ands.w	r7, r7, #8
 802320e:	d1f8      	bne.n	8023202 <_strtoull_l.isra.0+0x12>
 8023210:	2c2d      	cmp	r4, #45	; 0x2d
 8023212:	d14a      	bne.n	80232aa <_strtoull_l.isra.0+0xba>
 8023214:	782c      	ldrb	r4, [r5, #0]
 8023216:	2701      	movs	r7, #1
 8023218:	1c9d      	adds	r5, r3, #2
 802321a:	2e00      	cmp	r6, #0
 802321c:	d07c      	beq.n	8023318 <_strtoull_l.isra.0+0x128>
 802321e:	2e10      	cmp	r6, #16
 8023220:	d109      	bne.n	8023236 <_strtoull_l.isra.0+0x46>
 8023222:	2c30      	cmp	r4, #48	; 0x30
 8023224:	d107      	bne.n	8023236 <_strtoull_l.isra.0+0x46>
 8023226:	782b      	ldrb	r3, [r5, #0]
 8023228:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802322c:	2b58      	cmp	r3, #88	; 0x58
 802322e:	d16e      	bne.n	802330e <_strtoull_l.isra.0+0x11e>
 8023230:	786c      	ldrb	r4, [r5, #1]
 8023232:	2610      	movs	r6, #16
 8023234:	3502      	adds	r5, #2
 8023236:	ea4f 7be6 	mov.w	fp, r6, asr #31
 802323a:	4632      	mov	r2, r6
 802323c:	465b      	mov	r3, fp
 802323e:	f04f 30ff 	mov.w	r0, #4294967295
 8023242:	f04f 31ff 	mov.w	r1, #4294967295
 8023246:	f7dd fd2f 	bl	8000ca8 <__aeabi_uldivmod>
 802324a:	e9cd 0100 	strd	r0, r1, [sp]
 802324e:	4632      	mov	r2, r6
 8023250:	465b      	mov	r3, fp
 8023252:	f04f 30ff 	mov.w	r0, #4294967295
 8023256:	f04f 31ff 	mov.w	r1, #4294967295
 802325a:	f7dd fd25 	bl	8000ca8 <__aeabi_uldivmod>
 802325e:	46b2      	mov	sl, r6
 8023260:	4696      	mov	lr, r2
 8023262:	2300      	movs	r3, #0
 8023264:	2000      	movs	r0, #0
 8023266:	2100      	movs	r1, #0
 8023268:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802326c:	f1bc 0f09 	cmp.w	ip, #9
 8023270:	d820      	bhi.n	80232b4 <_strtoull_l.isra.0+0xc4>
 8023272:	4664      	mov	r4, ip
 8023274:	42a6      	cmp	r6, r4
 8023276:	dd2e      	ble.n	80232d6 <_strtoull_l.isra.0+0xe6>
 8023278:	2b00      	cmp	r3, #0
 802327a:	db29      	blt.n	80232d0 <_strtoull_l.isra.0+0xe0>
 802327c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023280:	428b      	cmp	r3, r1
 8023282:	bf08      	it	eq
 8023284:	4282      	cmpeq	r2, r0
 8023286:	d323      	bcc.n	80232d0 <_strtoull_l.isra.0+0xe0>
 8023288:	d101      	bne.n	802328e <_strtoull_l.isra.0+0x9e>
 802328a:	45a6      	cmp	lr, r4
 802328c:	db20      	blt.n	80232d0 <_strtoull_l.isra.0+0xe0>
 802328e:	fb0a f301 	mul.w	r3, sl, r1
 8023292:	fb00 330b 	mla	r3, r0, fp, r3
 8023296:	fbaa 0100 	umull	r0, r1, sl, r0
 802329a:	4419      	add	r1, r3
 802329c:	1900      	adds	r0, r0, r4
 802329e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80232a2:	2301      	movs	r3, #1
 80232a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80232a8:	e7de      	b.n	8023268 <_strtoull_l.isra.0+0x78>
 80232aa:	2c2b      	cmp	r4, #43	; 0x2b
 80232ac:	bf04      	itt	eq
 80232ae:	782c      	ldrbeq	r4, [r5, #0]
 80232b0:	1c9d      	addeq	r5, r3, #2
 80232b2:	e7b2      	b.n	802321a <_strtoull_l.isra.0+0x2a>
 80232b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80232b8:	f1bc 0f19 	cmp.w	ip, #25
 80232bc:	d801      	bhi.n	80232c2 <_strtoull_l.isra.0+0xd2>
 80232be:	3c37      	subs	r4, #55	; 0x37
 80232c0:	e7d8      	b.n	8023274 <_strtoull_l.isra.0+0x84>
 80232c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80232c6:	f1bc 0f19 	cmp.w	ip, #25
 80232ca:	d804      	bhi.n	80232d6 <_strtoull_l.isra.0+0xe6>
 80232cc:	3c57      	subs	r4, #87	; 0x57
 80232ce:	e7d1      	b.n	8023274 <_strtoull_l.isra.0+0x84>
 80232d0:	f04f 33ff 	mov.w	r3, #4294967295
 80232d4:	e7e6      	b.n	80232a4 <_strtoull_l.isra.0+0xb4>
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	da0c      	bge.n	80232f4 <_strtoull_l.isra.0+0x104>
 80232da:	9a03      	ldr	r2, [sp, #12]
 80232dc:	2322      	movs	r3, #34	; 0x22
 80232de:	6013      	str	r3, [r2, #0]
 80232e0:	f04f 30ff 	mov.w	r0, #4294967295
 80232e4:	f04f 31ff 	mov.w	r1, #4294967295
 80232e8:	f1b9 0f00 	cmp.w	r9, #0
 80232ec:	d10a      	bne.n	8023304 <_strtoull_l.isra.0+0x114>
 80232ee:	b005      	add	sp, #20
 80232f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232f4:	b117      	cbz	r7, 80232fc <_strtoull_l.isra.0+0x10c>
 80232f6:	4240      	negs	r0, r0
 80232f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80232fc:	f1b9 0f00 	cmp.w	r9, #0
 8023300:	d0f5      	beq.n	80232ee <_strtoull_l.isra.0+0xfe>
 8023302:	b10b      	cbz	r3, 8023308 <_strtoull_l.isra.0+0x118>
 8023304:	f105 38ff 	add.w	r8, r5, #4294967295
 8023308:	f8c9 8000 	str.w	r8, [r9]
 802330c:	e7ef      	b.n	80232ee <_strtoull_l.isra.0+0xfe>
 802330e:	2430      	movs	r4, #48	; 0x30
 8023310:	2e00      	cmp	r6, #0
 8023312:	d190      	bne.n	8023236 <_strtoull_l.isra.0+0x46>
 8023314:	2608      	movs	r6, #8
 8023316:	e78e      	b.n	8023236 <_strtoull_l.isra.0+0x46>
 8023318:	2c30      	cmp	r4, #48	; 0x30
 802331a:	d084      	beq.n	8023226 <_strtoull_l.isra.0+0x36>
 802331c:	260a      	movs	r6, #10
 802331e:	e78a      	b.n	8023236 <_strtoull_l.isra.0+0x46>
 8023320:	080296f1 	.word	0x080296f1

08023324 <_strtoull_r>:
 8023324:	f7ff bf64 	b.w	80231f0 <_strtoull_l.isra.0>

08023328 <__swbuf_r>:
 8023328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802332a:	460e      	mov	r6, r1
 802332c:	4614      	mov	r4, r2
 802332e:	4605      	mov	r5, r0
 8023330:	b118      	cbz	r0, 802333a <__swbuf_r+0x12>
 8023332:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023334:	b90b      	cbnz	r3, 802333a <__swbuf_r+0x12>
 8023336:	f7fc f9d3 	bl	801f6e0 <__sinit>
 802333a:	69a3      	ldr	r3, [r4, #24]
 802333c:	60a3      	str	r3, [r4, #8]
 802333e:	89a3      	ldrh	r3, [r4, #12]
 8023340:	0719      	lsls	r1, r3, #28
 8023342:	d529      	bpl.n	8023398 <__swbuf_r+0x70>
 8023344:	6923      	ldr	r3, [r4, #16]
 8023346:	b33b      	cbz	r3, 8023398 <__swbuf_r+0x70>
 8023348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802334c:	b2f6      	uxtb	r6, r6
 802334e:	049a      	lsls	r2, r3, #18
 8023350:	4637      	mov	r7, r6
 8023352:	d52a      	bpl.n	80233aa <__swbuf_r+0x82>
 8023354:	6823      	ldr	r3, [r4, #0]
 8023356:	6920      	ldr	r0, [r4, #16]
 8023358:	1a18      	subs	r0, r3, r0
 802335a:	6963      	ldr	r3, [r4, #20]
 802335c:	4283      	cmp	r3, r0
 802335e:	dc04      	bgt.n	802336a <__swbuf_r+0x42>
 8023360:	4621      	mov	r1, r4
 8023362:	4628      	mov	r0, r5
 8023364:	f7fc f950 	bl	801f608 <_fflush_r>
 8023368:	b9e0      	cbnz	r0, 80233a4 <__swbuf_r+0x7c>
 802336a:	68a3      	ldr	r3, [r4, #8]
 802336c:	3b01      	subs	r3, #1
 802336e:	60a3      	str	r3, [r4, #8]
 8023370:	6823      	ldr	r3, [r4, #0]
 8023372:	1c5a      	adds	r2, r3, #1
 8023374:	6022      	str	r2, [r4, #0]
 8023376:	701e      	strb	r6, [r3, #0]
 8023378:	6962      	ldr	r2, [r4, #20]
 802337a:	1c43      	adds	r3, r0, #1
 802337c:	429a      	cmp	r2, r3
 802337e:	d004      	beq.n	802338a <__swbuf_r+0x62>
 8023380:	89a3      	ldrh	r3, [r4, #12]
 8023382:	07db      	lsls	r3, r3, #31
 8023384:	d506      	bpl.n	8023394 <__swbuf_r+0x6c>
 8023386:	2e0a      	cmp	r6, #10
 8023388:	d104      	bne.n	8023394 <__swbuf_r+0x6c>
 802338a:	4621      	mov	r1, r4
 802338c:	4628      	mov	r0, r5
 802338e:	f7fc f93b 	bl	801f608 <_fflush_r>
 8023392:	b938      	cbnz	r0, 80233a4 <__swbuf_r+0x7c>
 8023394:	4638      	mov	r0, r7
 8023396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023398:	4621      	mov	r1, r4
 802339a:	4628      	mov	r0, r5
 802339c:	f7fb f9c2 	bl	801e724 <__swsetup_r>
 80233a0:	2800      	cmp	r0, #0
 80233a2:	d0d1      	beq.n	8023348 <__swbuf_r+0x20>
 80233a4:	f04f 37ff 	mov.w	r7, #4294967295
 80233a8:	e7f4      	b.n	8023394 <__swbuf_r+0x6c>
 80233aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80233ae:	81a3      	strh	r3, [r4, #12]
 80233b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80233b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80233b6:	6663      	str	r3, [r4, #100]	; 0x64
 80233b8:	e7cc      	b.n	8023354 <__swbuf_r+0x2c>
	...

080233bc <_wcrtomb_r>:
 80233bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80233be:	4c09      	ldr	r4, [pc, #36]	; (80233e4 <_wcrtomb_r+0x28>)
 80233c0:	b085      	sub	sp, #20
 80233c2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 80233c6:	4605      	mov	r5, r0
 80233c8:	461e      	mov	r6, r3
 80233ca:	b909      	cbnz	r1, 80233d0 <_wcrtomb_r+0x14>
 80233cc:	460a      	mov	r2, r1
 80233ce:	a901      	add	r1, sp, #4
 80233d0:	47b8      	blx	r7
 80233d2:	1c43      	adds	r3, r0, #1
 80233d4:	bf01      	itttt	eq
 80233d6:	2300      	moveq	r3, #0
 80233d8:	6033      	streq	r3, [r6, #0]
 80233da:	238a      	moveq	r3, #138	; 0x8a
 80233dc:	602b      	streq	r3, [r5, #0]
 80233de:	b005      	add	sp, #20
 80233e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80233e2:	bf00      	nop
 80233e4:	200008e0 	.word	0x200008e0

080233e8 <__ascii_wctomb>:
 80233e8:	b149      	cbz	r1, 80233fe <__ascii_wctomb+0x16>
 80233ea:	2aff      	cmp	r2, #255	; 0xff
 80233ec:	bf85      	ittet	hi
 80233ee:	238a      	movhi	r3, #138	; 0x8a
 80233f0:	6003      	strhi	r3, [r0, #0]
 80233f2:	700a      	strbls	r2, [r1, #0]
 80233f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80233f8:	bf98      	it	ls
 80233fa:	2001      	movls	r0, #1
 80233fc:	4770      	bx	lr
 80233fe:	4608      	mov	r0, r1
 8023400:	4770      	bx	lr

08023402 <abort>:
 8023402:	b508      	push	{r3, lr}
 8023404:	2006      	movs	r0, #6
 8023406:	f000 f82d 	bl	8023464 <raise>
 802340a:	2001      	movs	r0, #1
 802340c:	f7e0 fc56 	bl	8003cbc <_exit>

08023410 <_raise_r>:
 8023410:	291f      	cmp	r1, #31
 8023412:	b538      	push	{r3, r4, r5, lr}
 8023414:	4604      	mov	r4, r0
 8023416:	460d      	mov	r5, r1
 8023418:	d904      	bls.n	8023424 <_raise_r+0x14>
 802341a:	2316      	movs	r3, #22
 802341c:	6003      	str	r3, [r0, #0]
 802341e:	f04f 30ff 	mov.w	r0, #4294967295
 8023422:	bd38      	pop	{r3, r4, r5, pc}
 8023424:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8023428:	b112      	cbz	r2, 8023430 <_raise_r+0x20>
 802342a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802342e:	b94b      	cbnz	r3, 8023444 <_raise_r+0x34>
 8023430:	4620      	mov	r0, r4
 8023432:	f000 f831 	bl	8023498 <_getpid_r>
 8023436:	462a      	mov	r2, r5
 8023438:	4601      	mov	r1, r0
 802343a:	4620      	mov	r0, r4
 802343c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023440:	f000 b818 	b.w	8023474 <_kill_r>
 8023444:	2b01      	cmp	r3, #1
 8023446:	d00a      	beq.n	802345e <_raise_r+0x4e>
 8023448:	1c59      	adds	r1, r3, #1
 802344a:	d103      	bne.n	8023454 <_raise_r+0x44>
 802344c:	2316      	movs	r3, #22
 802344e:	6003      	str	r3, [r0, #0]
 8023450:	2001      	movs	r0, #1
 8023452:	e7e6      	b.n	8023422 <_raise_r+0x12>
 8023454:	2400      	movs	r4, #0
 8023456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802345a:	4628      	mov	r0, r5
 802345c:	4798      	blx	r3
 802345e:	2000      	movs	r0, #0
 8023460:	e7df      	b.n	8023422 <_raise_r+0x12>
	...

08023464 <raise>:
 8023464:	4b02      	ldr	r3, [pc, #8]	; (8023470 <raise+0xc>)
 8023466:	4601      	mov	r1, r0
 8023468:	6818      	ldr	r0, [r3, #0]
 802346a:	f7ff bfd1 	b.w	8023410 <_raise_r>
 802346e:	bf00      	nop
 8023470:	20000038 	.word	0x20000038

08023474 <_kill_r>:
 8023474:	b538      	push	{r3, r4, r5, lr}
 8023476:	4d07      	ldr	r5, [pc, #28]	; (8023494 <_kill_r+0x20>)
 8023478:	2300      	movs	r3, #0
 802347a:	4604      	mov	r4, r0
 802347c:	4608      	mov	r0, r1
 802347e:	4611      	mov	r1, r2
 8023480:	602b      	str	r3, [r5, #0]
 8023482:	f7e0 fc09 	bl	8003c98 <_kill>
 8023486:	1c43      	adds	r3, r0, #1
 8023488:	d102      	bne.n	8023490 <_kill_r+0x1c>
 802348a:	682b      	ldr	r3, [r5, #0]
 802348c:	b103      	cbz	r3, 8023490 <_kill_r+0x1c>
 802348e:	6023      	str	r3, [r4, #0]
 8023490:	bd38      	pop	{r3, r4, r5, pc}
 8023492:	bf00      	nop
 8023494:	2000be5c 	.word	0x2000be5c

08023498 <_getpid_r>:
 8023498:	f7e0 bbf6 	b.w	8003c88 <_getpid>

0802349c <pow>:
 802349c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80234a0:	ec59 8b10 	vmov	r8, r9, d0
 80234a4:	ec57 6b11 	vmov	r6, r7, d1
 80234a8:	f000 f8a6 	bl	80235f8 <__ieee754_pow>
 80234ac:	4b4e      	ldr	r3, [pc, #312]	; (80235e8 <pow+0x14c>)
 80234ae:	f993 3000 	ldrsb.w	r3, [r3]
 80234b2:	3301      	adds	r3, #1
 80234b4:	ec55 4b10 	vmov	r4, r5, d0
 80234b8:	d015      	beq.n	80234e6 <pow+0x4a>
 80234ba:	4632      	mov	r2, r6
 80234bc:	463b      	mov	r3, r7
 80234be:	4630      	mov	r0, r6
 80234c0:	4639      	mov	r1, r7
 80234c2:	f7dd fb63 	bl	8000b8c <__aeabi_dcmpun>
 80234c6:	b970      	cbnz	r0, 80234e6 <pow+0x4a>
 80234c8:	4642      	mov	r2, r8
 80234ca:	464b      	mov	r3, r9
 80234cc:	4640      	mov	r0, r8
 80234ce:	4649      	mov	r1, r9
 80234d0:	f7dd fb5c 	bl	8000b8c <__aeabi_dcmpun>
 80234d4:	2200      	movs	r2, #0
 80234d6:	2300      	movs	r3, #0
 80234d8:	b148      	cbz	r0, 80234ee <pow+0x52>
 80234da:	4630      	mov	r0, r6
 80234dc:	4639      	mov	r1, r7
 80234de:	f7dd fb23 	bl	8000b28 <__aeabi_dcmpeq>
 80234e2:	2800      	cmp	r0, #0
 80234e4:	d17d      	bne.n	80235e2 <pow+0x146>
 80234e6:	ec45 4b10 	vmov	d0, r4, r5
 80234ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80234ee:	4640      	mov	r0, r8
 80234f0:	4649      	mov	r1, r9
 80234f2:	f7dd fb19 	bl	8000b28 <__aeabi_dcmpeq>
 80234f6:	b1e0      	cbz	r0, 8023532 <pow+0x96>
 80234f8:	2200      	movs	r2, #0
 80234fa:	2300      	movs	r3, #0
 80234fc:	4630      	mov	r0, r6
 80234fe:	4639      	mov	r1, r7
 8023500:	f7dd fb12 	bl	8000b28 <__aeabi_dcmpeq>
 8023504:	2800      	cmp	r0, #0
 8023506:	d16c      	bne.n	80235e2 <pow+0x146>
 8023508:	ec47 6b10 	vmov	d0, r6, r7
 802350c:	f000 fe53 	bl	80241b6 <finite>
 8023510:	2800      	cmp	r0, #0
 8023512:	d0e8      	beq.n	80234e6 <pow+0x4a>
 8023514:	2200      	movs	r2, #0
 8023516:	2300      	movs	r3, #0
 8023518:	4630      	mov	r0, r6
 802351a:	4639      	mov	r1, r7
 802351c:	f7dd fb0e 	bl	8000b3c <__aeabi_dcmplt>
 8023520:	2800      	cmp	r0, #0
 8023522:	d0e0      	beq.n	80234e6 <pow+0x4a>
 8023524:	f7fb ffdc 	bl	801f4e0 <__errno>
 8023528:	2321      	movs	r3, #33	; 0x21
 802352a:	6003      	str	r3, [r0, #0]
 802352c:	2400      	movs	r4, #0
 802352e:	4d2f      	ldr	r5, [pc, #188]	; (80235ec <pow+0x150>)
 8023530:	e7d9      	b.n	80234e6 <pow+0x4a>
 8023532:	ec45 4b10 	vmov	d0, r4, r5
 8023536:	f000 fe3e 	bl	80241b6 <finite>
 802353a:	bbb8      	cbnz	r0, 80235ac <pow+0x110>
 802353c:	ec49 8b10 	vmov	d0, r8, r9
 8023540:	f000 fe39 	bl	80241b6 <finite>
 8023544:	b390      	cbz	r0, 80235ac <pow+0x110>
 8023546:	ec47 6b10 	vmov	d0, r6, r7
 802354a:	f000 fe34 	bl	80241b6 <finite>
 802354e:	b368      	cbz	r0, 80235ac <pow+0x110>
 8023550:	4622      	mov	r2, r4
 8023552:	462b      	mov	r3, r5
 8023554:	4620      	mov	r0, r4
 8023556:	4629      	mov	r1, r5
 8023558:	f7dd fb18 	bl	8000b8c <__aeabi_dcmpun>
 802355c:	b160      	cbz	r0, 8023578 <pow+0xdc>
 802355e:	f7fb ffbf 	bl	801f4e0 <__errno>
 8023562:	2321      	movs	r3, #33	; 0x21
 8023564:	6003      	str	r3, [r0, #0]
 8023566:	2200      	movs	r2, #0
 8023568:	2300      	movs	r3, #0
 802356a:	4610      	mov	r0, r2
 802356c:	4619      	mov	r1, r3
 802356e:	f7dd f99d 	bl	80008ac <__aeabi_ddiv>
 8023572:	4604      	mov	r4, r0
 8023574:	460d      	mov	r5, r1
 8023576:	e7b6      	b.n	80234e6 <pow+0x4a>
 8023578:	f7fb ffb2 	bl	801f4e0 <__errno>
 802357c:	2322      	movs	r3, #34	; 0x22
 802357e:	6003      	str	r3, [r0, #0]
 8023580:	2200      	movs	r2, #0
 8023582:	2300      	movs	r3, #0
 8023584:	4640      	mov	r0, r8
 8023586:	4649      	mov	r1, r9
 8023588:	f7dd fad8 	bl	8000b3c <__aeabi_dcmplt>
 802358c:	2400      	movs	r4, #0
 802358e:	b158      	cbz	r0, 80235a8 <pow+0x10c>
 8023590:	ec47 6b10 	vmov	d0, r6, r7
 8023594:	f000 fe24 	bl	80241e0 <rint>
 8023598:	4632      	mov	r2, r6
 802359a:	ec51 0b10 	vmov	r0, r1, d0
 802359e:	463b      	mov	r3, r7
 80235a0:	f7dd fac2 	bl	8000b28 <__aeabi_dcmpeq>
 80235a4:	2800      	cmp	r0, #0
 80235a6:	d0c2      	beq.n	802352e <pow+0x92>
 80235a8:	4d11      	ldr	r5, [pc, #68]	; (80235f0 <pow+0x154>)
 80235aa:	e79c      	b.n	80234e6 <pow+0x4a>
 80235ac:	2200      	movs	r2, #0
 80235ae:	2300      	movs	r3, #0
 80235b0:	4620      	mov	r0, r4
 80235b2:	4629      	mov	r1, r5
 80235b4:	f7dd fab8 	bl	8000b28 <__aeabi_dcmpeq>
 80235b8:	2800      	cmp	r0, #0
 80235ba:	d094      	beq.n	80234e6 <pow+0x4a>
 80235bc:	ec49 8b10 	vmov	d0, r8, r9
 80235c0:	f000 fdf9 	bl	80241b6 <finite>
 80235c4:	2800      	cmp	r0, #0
 80235c6:	d08e      	beq.n	80234e6 <pow+0x4a>
 80235c8:	ec47 6b10 	vmov	d0, r6, r7
 80235cc:	f000 fdf3 	bl	80241b6 <finite>
 80235d0:	2800      	cmp	r0, #0
 80235d2:	d088      	beq.n	80234e6 <pow+0x4a>
 80235d4:	f7fb ff84 	bl	801f4e0 <__errno>
 80235d8:	2322      	movs	r3, #34	; 0x22
 80235da:	6003      	str	r3, [r0, #0]
 80235dc:	2400      	movs	r4, #0
 80235de:	2500      	movs	r5, #0
 80235e0:	e781      	b.n	80234e6 <pow+0x4a>
 80235e2:	4d04      	ldr	r5, [pc, #16]	; (80235f4 <pow+0x158>)
 80235e4:	2400      	movs	r4, #0
 80235e6:	e77e      	b.n	80234e6 <pow+0x4a>
 80235e8:	20000a4c 	.word	0x20000a4c
 80235ec:	fff00000 	.word	0xfff00000
 80235f0:	7ff00000 	.word	0x7ff00000
 80235f4:	3ff00000 	.word	0x3ff00000

080235f8 <__ieee754_pow>:
 80235f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235fc:	ed2d 8b06 	vpush	{d8-d10}
 8023600:	b08d      	sub	sp, #52	; 0x34
 8023602:	ed8d 1b02 	vstr	d1, [sp, #8]
 8023606:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 802360a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 802360e:	ea56 0100 	orrs.w	r1, r6, r0
 8023612:	ec53 2b10 	vmov	r2, r3, d0
 8023616:	f000 84d1 	beq.w	8023fbc <__ieee754_pow+0x9c4>
 802361a:	497f      	ldr	r1, [pc, #508]	; (8023818 <__ieee754_pow+0x220>)
 802361c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8023620:	428c      	cmp	r4, r1
 8023622:	ee10 8a10 	vmov	r8, s0
 8023626:	4699      	mov	r9, r3
 8023628:	dc09      	bgt.n	802363e <__ieee754_pow+0x46>
 802362a:	d103      	bne.n	8023634 <__ieee754_pow+0x3c>
 802362c:	b97a      	cbnz	r2, 802364e <__ieee754_pow+0x56>
 802362e:	42a6      	cmp	r6, r4
 8023630:	dd02      	ble.n	8023638 <__ieee754_pow+0x40>
 8023632:	e00c      	b.n	802364e <__ieee754_pow+0x56>
 8023634:	428e      	cmp	r6, r1
 8023636:	dc02      	bgt.n	802363e <__ieee754_pow+0x46>
 8023638:	428e      	cmp	r6, r1
 802363a:	d110      	bne.n	802365e <__ieee754_pow+0x66>
 802363c:	b178      	cbz	r0, 802365e <__ieee754_pow+0x66>
 802363e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023642:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8023646:	ea54 0308 	orrs.w	r3, r4, r8
 802364a:	f000 84b7 	beq.w	8023fbc <__ieee754_pow+0x9c4>
 802364e:	4873      	ldr	r0, [pc, #460]	; (802381c <__ieee754_pow+0x224>)
 8023650:	b00d      	add	sp, #52	; 0x34
 8023652:	ecbd 8b06 	vpop	{d8-d10}
 8023656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802365a:	f000 bdb9 	b.w	80241d0 <nan>
 802365e:	f1b9 0f00 	cmp.w	r9, #0
 8023662:	da36      	bge.n	80236d2 <__ieee754_pow+0xda>
 8023664:	496e      	ldr	r1, [pc, #440]	; (8023820 <__ieee754_pow+0x228>)
 8023666:	428e      	cmp	r6, r1
 8023668:	dc51      	bgt.n	802370e <__ieee754_pow+0x116>
 802366a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 802366e:	428e      	cmp	r6, r1
 8023670:	f340 84af 	ble.w	8023fd2 <__ieee754_pow+0x9da>
 8023674:	1531      	asrs	r1, r6, #20
 8023676:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802367a:	2914      	cmp	r1, #20
 802367c:	dd0f      	ble.n	802369e <__ieee754_pow+0xa6>
 802367e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8023682:	fa20 fc01 	lsr.w	ip, r0, r1
 8023686:	fa0c f101 	lsl.w	r1, ip, r1
 802368a:	4281      	cmp	r1, r0
 802368c:	f040 84a1 	bne.w	8023fd2 <__ieee754_pow+0x9da>
 8023690:	f00c 0c01 	and.w	ip, ip, #1
 8023694:	f1cc 0102 	rsb	r1, ip, #2
 8023698:	9100      	str	r1, [sp, #0]
 802369a:	b180      	cbz	r0, 80236be <__ieee754_pow+0xc6>
 802369c:	e059      	b.n	8023752 <__ieee754_pow+0x15a>
 802369e:	2800      	cmp	r0, #0
 80236a0:	d155      	bne.n	802374e <__ieee754_pow+0x156>
 80236a2:	f1c1 0114 	rsb	r1, r1, #20
 80236a6:	fa46 fc01 	asr.w	ip, r6, r1
 80236aa:	fa0c f101 	lsl.w	r1, ip, r1
 80236ae:	42b1      	cmp	r1, r6
 80236b0:	f040 848c 	bne.w	8023fcc <__ieee754_pow+0x9d4>
 80236b4:	f00c 0c01 	and.w	ip, ip, #1
 80236b8:	f1cc 0102 	rsb	r1, ip, #2
 80236bc:	9100      	str	r1, [sp, #0]
 80236be:	4959      	ldr	r1, [pc, #356]	; (8023824 <__ieee754_pow+0x22c>)
 80236c0:	428e      	cmp	r6, r1
 80236c2:	d12d      	bne.n	8023720 <__ieee754_pow+0x128>
 80236c4:	2f00      	cmp	r7, #0
 80236c6:	da79      	bge.n	80237bc <__ieee754_pow+0x1c4>
 80236c8:	4956      	ldr	r1, [pc, #344]	; (8023824 <__ieee754_pow+0x22c>)
 80236ca:	2000      	movs	r0, #0
 80236cc:	f7dd f8ee 	bl	80008ac <__aeabi_ddiv>
 80236d0:	e016      	b.n	8023700 <__ieee754_pow+0x108>
 80236d2:	2100      	movs	r1, #0
 80236d4:	9100      	str	r1, [sp, #0]
 80236d6:	2800      	cmp	r0, #0
 80236d8:	d13b      	bne.n	8023752 <__ieee754_pow+0x15a>
 80236da:	494f      	ldr	r1, [pc, #316]	; (8023818 <__ieee754_pow+0x220>)
 80236dc:	428e      	cmp	r6, r1
 80236de:	d1ee      	bne.n	80236be <__ieee754_pow+0xc6>
 80236e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80236e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80236e8:	ea53 0308 	orrs.w	r3, r3, r8
 80236ec:	f000 8466 	beq.w	8023fbc <__ieee754_pow+0x9c4>
 80236f0:	4b4d      	ldr	r3, [pc, #308]	; (8023828 <__ieee754_pow+0x230>)
 80236f2:	429c      	cmp	r4, r3
 80236f4:	dd0d      	ble.n	8023712 <__ieee754_pow+0x11a>
 80236f6:	2f00      	cmp	r7, #0
 80236f8:	f280 8464 	bge.w	8023fc4 <__ieee754_pow+0x9cc>
 80236fc:	2000      	movs	r0, #0
 80236fe:	2100      	movs	r1, #0
 8023700:	ec41 0b10 	vmov	d0, r0, r1
 8023704:	b00d      	add	sp, #52	; 0x34
 8023706:	ecbd 8b06 	vpop	{d8-d10}
 802370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802370e:	2102      	movs	r1, #2
 8023710:	e7e0      	b.n	80236d4 <__ieee754_pow+0xdc>
 8023712:	2f00      	cmp	r7, #0
 8023714:	daf2      	bge.n	80236fc <__ieee754_pow+0x104>
 8023716:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 802371a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802371e:	e7ef      	b.n	8023700 <__ieee754_pow+0x108>
 8023720:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8023724:	d104      	bne.n	8023730 <__ieee754_pow+0x138>
 8023726:	4610      	mov	r0, r2
 8023728:	4619      	mov	r1, r3
 802372a:	f7dc ff95 	bl	8000658 <__aeabi_dmul>
 802372e:	e7e7      	b.n	8023700 <__ieee754_pow+0x108>
 8023730:	493e      	ldr	r1, [pc, #248]	; (802382c <__ieee754_pow+0x234>)
 8023732:	428f      	cmp	r7, r1
 8023734:	d10d      	bne.n	8023752 <__ieee754_pow+0x15a>
 8023736:	f1b9 0f00 	cmp.w	r9, #0
 802373a:	db0a      	blt.n	8023752 <__ieee754_pow+0x15a>
 802373c:	ec43 2b10 	vmov	d0, r2, r3
 8023740:	b00d      	add	sp, #52	; 0x34
 8023742:	ecbd 8b06 	vpop	{d8-d10}
 8023746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802374a:	f000 bc77 	b.w	802403c <__ieee754_sqrt>
 802374e:	2100      	movs	r1, #0
 8023750:	9100      	str	r1, [sp, #0]
 8023752:	ec43 2b10 	vmov	d0, r2, r3
 8023756:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802375a:	f000 fd23 	bl	80241a4 <fabs>
 802375e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023762:	ec51 0b10 	vmov	r0, r1, d0
 8023766:	f1b8 0f00 	cmp.w	r8, #0
 802376a:	d12a      	bne.n	80237c2 <__ieee754_pow+0x1ca>
 802376c:	b12c      	cbz	r4, 802377a <__ieee754_pow+0x182>
 802376e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8023824 <__ieee754_pow+0x22c>
 8023772:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8023776:	45e6      	cmp	lr, ip
 8023778:	d123      	bne.n	80237c2 <__ieee754_pow+0x1ca>
 802377a:	2f00      	cmp	r7, #0
 802377c:	da05      	bge.n	802378a <__ieee754_pow+0x192>
 802377e:	4602      	mov	r2, r0
 8023780:	460b      	mov	r3, r1
 8023782:	2000      	movs	r0, #0
 8023784:	4927      	ldr	r1, [pc, #156]	; (8023824 <__ieee754_pow+0x22c>)
 8023786:	f7dd f891 	bl	80008ac <__aeabi_ddiv>
 802378a:	f1b9 0f00 	cmp.w	r9, #0
 802378e:	dab7      	bge.n	8023700 <__ieee754_pow+0x108>
 8023790:	9b00      	ldr	r3, [sp, #0]
 8023792:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023796:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802379a:	4323      	orrs	r3, r4
 802379c:	d108      	bne.n	80237b0 <__ieee754_pow+0x1b8>
 802379e:	4602      	mov	r2, r0
 80237a0:	460b      	mov	r3, r1
 80237a2:	4610      	mov	r0, r2
 80237a4:	4619      	mov	r1, r3
 80237a6:	f7dc fd9f 	bl	80002e8 <__aeabi_dsub>
 80237aa:	4602      	mov	r2, r0
 80237ac:	460b      	mov	r3, r1
 80237ae:	e78d      	b.n	80236cc <__ieee754_pow+0xd4>
 80237b0:	9b00      	ldr	r3, [sp, #0]
 80237b2:	2b01      	cmp	r3, #1
 80237b4:	d1a4      	bne.n	8023700 <__ieee754_pow+0x108>
 80237b6:	4602      	mov	r2, r0
 80237b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80237bc:	4610      	mov	r0, r2
 80237be:	4619      	mov	r1, r3
 80237c0:	e79e      	b.n	8023700 <__ieee754_pow+0x108>
 80237c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80237c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80237ca:	950a      	str	r5, [sp, #40]	; 0x28
 80237cc:	9d00      	ldr	r5, [sp, #0]
 80237ce:	46ac      	mov	ip, r5
 80237d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80237d2:	ea5c 0505 	orrs.w	r5, ip, r5
 80237d6:	d0e4      	beq.n	80237a2 <__ieee754_pow+0x1aa>
 80237d8:	4b15      	ldr	r3, [pc, #84]	; (8023830 <__ieee754_pow+0x238>)
 80237da:	429e      	cmp	r6, r3
 80237dc:	f340 80fc 	ble.w	80239d8 <__ieee754_pow+0x3e0>
 80237e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80237e4:	429e      	cmp	r6, r3
 80237e6:	4b10      	ldr	r3, [pc, #64]	; (8023828 <__ieee754_pow+0x230>)
 80237e8:	dd07      	ble.n	80237fa <__ieee754_pow+0x202>
 80237ea:	429c      	cmp	r4, r3
 80237ec:	dc0a      	bgt.n	8023804 <__ieee754_pow+0x20c>
 80237ee:	2f00      	cmp	r7, #0
 80237f0:	da84      	bge.n	80236fc <__ieee754_pow+0x104>
 80237f2:	a307      	add	r3, pc, #28	; (adr r3, 8023810 <__ieee754_pow+0x218>)
 80237f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237f8:	e795      	b.n	8023726 <__ieee754_pow+0x12e>
 80237fa:	429c      	cmp	r4, r3
 80237fc:	dbf7      	blt.n	80237ee <__ieee754_pow+0x1f6>
 80237fe:	4b09      	ldr	r3, [pc, #36]	; (8023824 <__ieee754_pow+0x22c>)
 8023800:	429c      	cmp	r4, r3
 8023802:	dd17      	ble.n	8023834 <__ieee754_pow+0x23c>
 8023804:	2f00      	cmp	r7, #0
 8023806:	dcf4      	bgt.n	80237f2 <__ieee754_pow+0x1fa>
 8023808:	e778      	b.n	80236fc <__ieee754_pow+0x104>
 802380a:	bf00      	nop
 802380c:	f3af 8000 	nop.w
 8023810:	8800759c 	.word	0x8800759c
 8023814:	7e37e43c 	.word	0x7e37e43c
 8023818:	7ff00000 	.word	0x7ff00000
 802381c:	08029bc1 	.word	0x08029bc1
 8023820:	433fffff 	.word	0x433fffff
 8023824:	3ff00000 	.word	0x3ff00000
 8023828:	3fefffff 	.word	0x3fefffff
 802382c:	3fe00000 	.word	0x3fe00000
 8023830:	41e00000 	.word	0x41e00000
 8023834:	4b64      	ldr	r3, [pc, #400]	; (80239c8 <__ieee754_pow+0x3d0>)
 8023836:	2200      	movs	r2, #0
 8023838:	f7dc fd56 	bl	80002e8 <__aeabi_dsub>
 802383c:	a356      	add	r3, pc, #344	; (adr r3, 8023998 <__ieee754_pow+0x3a0>)
 802383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023842:	4604      	mov	r4, r0
 8023844:	460d      	mov	r5, r1
 8023846:	f7dc ff07 	bl	8000658 <__aeabi_dmul>
 802384a:	a355      	add	r3, pc, #340	; (adr r3, 80239a0 <__ieee754_pow+0x3a8>)
 802384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023850:	4606      	mov	r6, r0
 8023852:	460f      	mov	r7, r1
 8023854:	4620      	mov	r0, r4
 8023856:	4629      	mov	r1, r5
 8023858:	f7dc fefe 	bl	8000658 <__aeabi_dmul>
 802385c:	4b5b      	ldr	r3, [pc, #364]	; (80239cc <__ieee754_pow+0x3d4>)
 802385e:	4682      	mov	sl, r0
 8023860:	468b      	mov	fp, r1
 8023862:	2200      	movs	r2, #0
 8023864:	4620      	mov	r0, r4
 8023866:	4629      	mov	r1, r5
 8023868:	f7dc fef6 	bl	8000658 <__aeabi_dmul>
 802386c:	4602      	mov	r2, r0
 802386e:	460b      	mov	r3, r1
 8023870:	a14d      	add	r1, pc, #308	; (adr r1, 80239a8 <__ieee754_pow+0x3b0>)
 8023872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023876:	f7dc fd37 	bl	80002e8 <__aeabi_dsub>
 802387a:	4622      	mov	r2, r4
 802387c:	462b      	mov	r3, r5
 802387e:	f7dc feeb 	bl	8000658 <__aeabi_dmul>
 8023882:	4602      	mov	r2, r0
 8023884:	460b      	mov	r3, r1
 8023886:	2000      	movs	r0, #0
 8023888:	4951      	ldr	r1, [pc, #324]	; (80239d0 <__ieee754_pow+0x3d8>)
 802388a:	f7dc fd2d 	bl	80002e8 <__aeabi_dsub>
 802388e:	4622      	mov	r2, r4
 8023890:	4680      	mov	r8, r0
 8023892:	4689      	mov	r9, r1
 8023894:	462b      	mov	r3, r5
 8023896:	4620      	mov	r0, r4
 8023898:	4629      	mov	r1, r5
 802389a:	f7dc fedd 	bl	8000658 <__aeabi_dmul>
 802389e:	4602      	mov	r2, r0
 80238a0:	460b      	mov	r3, r1
 80238a2:	4640      	mov	r0, r8
 80238a4:	4649      	mov	r1, r9
 80238a6:	f7dc fed7 	bl	8000658 <__aeabi_dmul>
 80238aa:	a341      	add	r3, pc, #260	; (adr r3, 80239b0 <__ieee754_pow+0x3b8>)
 80238ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238b0:	f7dc fed2 	bl	8000658 <__aeabi_dmul>
 80238b4:	4602      	mov	r2, r0
 80238b6:	460b      	mov	r3, r1
 80238b8:	4650      	mov	r0, sl
 80238ba:	4659      	mov	r1, fp
 80238bc:	f7dc fd14 	bl	80002e8 <__aeabi_dsub>
 80238c0:	4602      	mov	r2, r0
 80238c2:	460b      	mov	r3, r1
 80238c4:	4680      	mov	r8, r0
 80238c6:	4689      	mov	r9, r1
 80238c8:	4630      	mov	r0, r6
 80238ca:	4639      	mov	r1, r7
 80238cc:	f7dc fd0e 	bl	80002ec <__adddf3>
 80238d0:	2400      	movs	r4, #0
 80238d2:	4632      	mov	r2, r6
 80238d4:	463b      	mov	r3, r7
 80238d6:	4620      	mov	r0, r4
 80238d8:	460d      	mov	r5, r1
 80238da:	f7dc fd05 	bl	80002e8 <__aeabi_dsub>
 80238de:	4602      	mov	r2, r0
 80238e0:	460b      	mov	r3, r1
 80238e2:	4640      	mov	r0, r8
 80238e4:	4649      	mov	r1, r9
 80238e6:	f7dc fcff 	bl	80002e8 <__aeabi_dsub>
 80238ea:	9b00      	ldr	r3, [sp, #0]
 80238ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80238ee:	3b01      	subs	r3, #1
 80238f0:	4313      	orrs	r3, r2
 80238f2:	4682      	mov	sl, r0
 80238f4:	468b      	mov	fp, r1
 80238f6:	f040 81f1 	bne.w	8023cdc <__ieee754_pow+0x6e4>
 80238fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80239b8 <__ieee754_pow+0x3c0>
 80238fe:	eeb0 8a47 	vmov.f32	s16, s14
 8023902:	eef0 8a67 	vmov.f32	s17, s15
 8023906:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802390a:	2600      	movs	r6, #0
 802390c:	4632      	mov	r2, r6
 802390e:	463b      	mov	r3, r7
 8023910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023914:	f7dc fce8 	bl	80002e8 <__aeabi_dsub>
 8023918:	4622      	mov	r2, r4
 802391a:	462b      	mov	r3, r5
 802391c:	f7dc fe9c 	bl	8000658 <__aeabi_dmul>
 8023920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023924:	4680      	mov	r8, r0
 8023926:	4689      	mov	r9, r1
 8023928:	4650      	mov	r0, sl
 802392a:	4659      	mov	r1, fp
 802392c:	f7dc fe94 	bl	8000658 <__aeabi_dmul>
 8023930:	4602      	mov	r2, r0
 8023932:	460b      	mov	r3, r1
 8023934:	4640      	mov	r0, r8
 8023936:	4649      	mov	r1, r9
 8023938:	f7dc fcd8 	bl	80002ec <__adddf3>
 802393c:	4632      	mov	r2, r6
 802393e:	463b      	mov	r3, r7
 8023940:	4680      	mov	r8, r0
 8023942:	4689      	mov	r9, r1
 8023944:	4620      	mov	r0, r4
 8023946:	4629      	mov	r1, r5
 8023948:	f7dc fe86 	bl	8000658 <__aeabi_dmul>
 802394c:	460b      	mov	r3, r1
 802394e:	4604      	mov	r4, r0
 8023950:	460d      	mov	r5, r1
 8023952:	4602      	mov	r2, r0
 8023954:	4649      	mov	r1, r9
 8023956:	4640      	mov	r0, r8
 8023958:	f7dc fcc8 	bl	80002ec <__adddf3>
 802395c:	4b1d      	ldr	r3, [pc, #116]	; (80239d4 <__ieee754_pow+0x3dc>)
 802395e:	4299      	cmp	r1, r3
 8023960:	ec45 4b19 	vmov	d9, r4, r5
 8023964:	4606      	mov	r6, r0
 8023966:	460f      	mov	r7, r1
 8023968:	468b      	mov	fp, r1
 802396a:	f340 82fe 	ble.w	8023f6a <__ieee754_pow+0x972>
 802396e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8023972:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8023976:	4303      	orrs	r3, r0
 8023978:	f000 81f0 	beq.w	8023d5c <__ieee754_pow+0x764>
 802397c:	a310      	add	r3, pc, #64	; (adr r3, 80239c0 <__ieee754_pow+0x3c8>)
 802397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023982:	ec51 0b18 	vmov	r0, r1, d8
 8023986:	f7dc fe67 	bl	8000658 <__aeabi_dmul>
 802398a:	a30d      	add	r3, pc, #52	; (adr r3, 80239c0 <__ieee754_pow+0x3c8>)
 802398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023990:	e6cb      	b.n	802372a <__ieee754_pow+0x132>
 8023992:	bf00      	nop
 8023994:	f3af 8000 	nop.w
 8023998:	60000000 	.word	0x60000000
 802399c:	3ff71547 	.word	0x3ff71547
 80239a0:	f85ddf44 	.word	0xf85ddf44
 80239a4:	3e54ae0b 	.word	0x3e54ae0b
 80239a8:	55555555 	.word	0x55555555
 80239ac:	3fd55555 	.word	0x3fd55555
 80239b0:	652b82fe 	.word	0x652b82fe
 80239b4:	3ff71547 	.word	0x3ff71547
 80239b8:	00000000 	.word	0x00000000
 80239bc:	bff00000 	.word	0xbff00000
 80239c0:	8800759c 	.word	0x8800759c
 80239c4:	7e37e43c 	.word	0x7e37e43c
 80239c8:	3ff00000 	.word	0x3ff00000
 80239cc:	3fd00000 	.word	0x3fd00000
 80239d0:	3fe00000 	.word	0x3fe00000
 80239d4:	408fffff 	.word	0x408fffff
 80239d8:	4bd7      	ldr	r3, [pc, #860]	; (8023d38 <__ieee754_pow+0x740>)
 80239da:	ea03 0309 	and.w	r3, r3, r9
 80239de:	2200      	movs	r2, #0
 80239e0:	b92b      	cbnz	r3, 80239ee <__ieee754_pow+0x3f6>
 80239e2:	4bd6      	ldr	r3, [pc, #856]	; (8023d3c <__ieee754_pow+0x744>)
 80239e4:	f7dc fe38 	bl	8000658 <__aeabi_dmul>
 80239e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80239ec:	460c      	mov	r4, r1
 80239ee:	1523      	asrs	r3, r4, #20
 80239f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80239f4:	4413      	add	r3, r2
 80239f6:	9309      	str	r3, [sp, #36]	; 0x24
 80239f8:	4bd1      	ldr	r3, [pc, #836]	; (8023d40 <__ieee754_pow+0x748>)
 80239fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80239fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8023a02:	429c      	cmp	r4, r3
 8023a04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023a08:	dd08      	ble.n	8023a1c <__ieee754_pow+0x424>
 8023a0a:	4bce      	ldr	r3, [pc, #824]	; (8023d44 <__ieee754_pow+0x74c>)
 8023a0c:	429c      	cmp	r4, r3
 8023a0e:	f340 8163 	ble.w	8023cd8 <__ieee754_pow+0x6e0>
 8023a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a14:	3301      	adds	r3, #1
 8023a16:	9309      	str	r3, [sp, #36]	; 0x24
 8023a18:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8023a1c:	2400      	movs	r4, #0
 8023a1e:	00e3      	lsls	r3, r4, #3
 8023a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a22:	4bc9      	ldr	r3, [pc, #804]	; (8023d48 <__ieee754_pow+0x750>)
 8023a24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023a28:	ed93 7b00 	vldr	d7, [r3]
 8023a2c:	4629      	mov	r1, r5
 8023a2e:	ec53 2b17 	vmov	r2, r3, d7
 8023a32:	eeb0 8a47 	vmov.f32	s16, s14
 8023a36:	eef0 8a67 	vmov.f32	s17, s15
 8023a3a:	4682      	mov	sl, r0
 8023a3c:	f7dc fc54 	bl	80002e8 <__aeabi_dsub>
 8023a40:	4652      	mov	r2, sl
 8023a42:	4606      	mov	r6, r0
 8023a44:	460f      	mov	r7, r1
 8023a46:	462b      	mov	r3, r5
 8023a48:	ec51 0b18 	vmov	r0, r1, d8
 8023a4c:	f7dc fc4e 	bl	80002ec <__adddf3>
 8023a50:	4602      	mov	r2, r0
 8023a52:	460b      	mov	r3, r1
 8023a54:	2000      	movs	r0, #0
 8023a56:	49bd      	ldr	r1, [pc, #756]	; (8023d4c <__ieee754_pow+0x754>)
 8023a58:	f7dc ff28 	bl	80008ac <__aeabi_ddiv>
 8023a5c:	ec41 0b19 	vmov	d9, r0, r1
 8023a60:	4602      	mov	r2, r0
 8023a62:	460b      	mov	r3, r1
 8023a64:	4630      	mov	r0, r6
 8023a66:	4639      	mov	r1, r7
 8023a68:	f7dc fdf6 	bl	8000658 <__aeabi_dmul>
 8023a6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023a70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023a74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023a78:	2300      	movs	r3, #0
 8023a7a:	9304      	str	r3, [sp, #16]
 8023a7c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8023a80:	46ab      	mov	fp, r5
 8023a82:	106d      	asrs	r5, r5, #1
 8023a84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8023a88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023a8c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8023a90:	2200      	movs	r2, #0
 8023a92:	4640      	mov	r0, r8
 8023a94:	4649      	mov	r1, r9
 8023a96:	4614      	mov	r4, r2
 8023a98:	461d      	mov	r5, r3
 8023a9a:	f7dc fddd 	bl	8000658 <__aeabi_dmul>
 8023a9e:	4602      	mov	r2, r0
 8023aa0:	460b      	mov	r3, r1
 8023aa2:	4630      	mov	r0, r6
 8023aa4:	4639      	mov	r1, r7
 8023aa6:	f7dc fc1f 	bl	80002e8 <__aeabi_dsub>
 8023aaa:	ec53 2b18 	vmov	r2, r3, d8
 8023aae:	4606      	mov	r6, r0
 8023ab0:	460f      	mov	r7, r1
 8023ab2:	4620      	mov	r0, r4
 8023ab4:	4629      	mov	r1, r5
 8023ab6:	f7dc fc17 	bl	80002e8 <__aeabi_dsub>
 8023aba:	4602      	mov	r2, r0
 8023abc:	460b      	mov	r3, r1
 8023abe:	4650      	mov	r0, sl
 8023ac0:	4659      	mov	r1, fp
 8023ac2:	f7dc fc11 	bl	80002e8 <__aeabi_dsub>
 8023ac6:	4642      	mov	r2, r8
 8023ac8:	464b      	mov	r3, r9
 8023aca:	f7dc fdc5 	bl	8000658 <__aeabi_dmul>
 8023ace:	4602      	mov	r2, r0
 8023ad0:	460b      	mov	r3, r1
 8023ad2:	4630      	mov	r0, r6
 8023ad4:	4639      	mov	r1, r7
 8023ad6:	f7dc fc07 	bl	80002e8 <__aeabi_dsub>
 8023ada:	ec53 2b19 	vmov	r2, r3, d9
 8023ade:	f7dc fdbb 	bl	8000658 <__aeabi_dmul>
 8023ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023ae6:	ec41 0b18 	vmov	d8, r0, r1
 8023aea:	4610      	mov	r0, r2
 8023aec:	4619      	mov	r1, r3
 8023aee:	f7dc fdb3 	bl	8000658 <__aeabi_dmul>
 8023af2:	a37d      	add	r3, pc, #500	; (adr r3, 8023ce8 <__ieee754_pow+0x6f0>)
 8023af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023af8:	4604      	mov	r4, r0
 8023afa:	460d      	mov	r5, r1
 8023afc:	f7dc fdac 	bl	8000658 <__aeabi_dmul>
 8023b00:	a37b      	add	r3, pc, #492	; (adr r3, 8023cf0 <__ieee754_pow+0x6f8>)
 8023b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b06:	f7dc fbf1 	bl	80002ec <__adddf3>
 8023b0a:	4622      	mov	r2, r4
 8023b0c:	462b      	mov	r3, r5
 8023b0e:	f7dc fda3 	bl	8000658 <__aeabi_dmul>
 8023b12:	a379      	add	r3, pc, #484	; (adr r3, 8023cf8 <__ieee754_pow+0x700>)
 8023b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b18:	f7dc fbe8 	bl	80002ec <__adddf3>
 8023b1c:	4622      	mov	r2, r4
 8023b1e:	462b      	mov	r3, r5
 8023b20:	f7dc fd9a 	bl	8000658 <__aeabi_dmul>
 8023b24:	a376      	add	r3, pc, #472	; (adr r3, 8023d00 <__ieee754_pow+0x708>)
 8023b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b2a:	f7dc fbdf 	bl	80002ec <__adddf3>
 8023b2e:	4622      	mov	r2, r4
 8023b30:	462b      	mov	r3, r5
 8023b32:	f7dc fd91 	bl	8000658 <__aeabi_dmul>
 8023b36:	a374      	add	r3, pc, #464	; (adr r3, 8023d08 <__ieee754_pow+0x710>)
 8023b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b3c:	f7dc fbd6 	bl	80002ec <__adddf3>
 8023b40:	4622      	mov	r2, r4
 8023b42:	462b      	mov	r3, r5
 8023b44:	f7dc fd88 	bl	8000658 <__aeabi_dmul>
 8023b48:	a371      	add	r3, pc, #452	; (adr r3, 8023d10 <__ieee754_pow+0x718>)
 8023b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b4e:	f7dc fbcd 	bl	80002ec <__adddf3>
 8023b52:	4622      	mov	r2, r4
 8023b54:	4606      	mov	r6, r0
 8023b56:	460f      	mov	r7, r1
 8023b58:	462b      	mov	r3, r5
 8023b5a:	4620      	mov	r0, r4
 8023b5c:	4629      	mov	r1, r5
 8023b5e:	f7dc fd7b 	bl	8000658 <__aeabi_dmul>
 8023b62:	4602      	mov	r2, r0
 8023b64:	460b      	mov	r3, r1
 8023b66:	4630      	mov	r0, r6
 8023b68:	4639      	mov	r1, r7
 8023b6a:	f7dc fd75 	bl	8000658 <__aeabi_dmul>
 8023b6e:	4642      	mov	r2, r8
 8023b70:	4604      	mov	r4, r0
 8023b72:	460d      	mov	r5, r1
 8023b74:	464b      	mov	r3, r9
 8023b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023b7a:	f7dc fbb7 	bl	80002ec <__adddf3>
 8023b7e:	ec53 2b18 	vmov	r2, r3, d8
 8023b82:	f7dc fd69 	bl	8000658 <__aeabi_dmul>
 8023b86:	4622      	mov	r2, r4
 8023b88:	462b      	mov	r3, r5
 8023b8a:	f7dc fbaf 	bl	80002ec <__adddf3>
 8023b8e:	4642      	mov	r2, r8
 8023b90:	4682      	mov	sl, r0
 8023b92:	468b      	mov	fp, r1
 8023b94:	464b      	mov	r3, r9
 8023b96:	4640      	mov	r0, r8
 8023b98:	4649      	mov	r1, r9
 8023b9a:	f7dc fd5d 	bl	8000658 <__aeabi_dmul>
 8023b9e:	4b6c      	ldr	r3, [pc, #432]	; (8023d50 <__ieee754_pow+0x758>)
 8023ba0:	2200      	movs	r2, #0
 8023ba2:	4606      	mov	r6, r0
 8023ba4:	460f      	mov	r7, r1
 8023ba6:	f7dc fba1 	bl	80002ec <__adddf3>
 8023baa:	4652      	mov	r2, sl
 8023bac:	465b      	mov	r3, fp
 8023bae:	f7dc fb9d 	bl	80002ec <__adddf3>
 8023bb2:	9c04      	ldr	r4, [sp, #16]
 8023bb4:	460d      	mov	r5, r1
 8023bb6:	4622      	mov	r2, r4
 8023bb8:	460b      	mov	r3, r1
 8023bba:	4640      	mov	r0, r8
 8023bbc:	4649      	mov	r1, r9
 8023bbe:	f7dc fd4b 	bl	8000658 <__aeabi_dmul>
 8023bc2:	4b63      	ldr	r3, [pc, #396]	; (8023d50 <__ieee754_pow+0x758>)
 8023bc4:	4680      	mov	r8, r0
 8023bc6:	4689      	mov	r9, r1
 8023bc8:	2200      	movs	r2, #0
 8023bca:	4620      	mov	r0, r4
 8023bcc:	4629      	mov	r1, r5
 8023bce:	f7dc fb8b 	bl	80002e8 <__aeabi_dsub>
 8023bd2:	4632      	mov	r2, r6
 8023bd4:	463b      	mov	r3, r7
 8023bd6:	f7dc fb87 	bl	80002e8 <__aeabi_dsub>
 8023bda:	4602      	mov	r2, r0
 8023bdc:	460b      	mov	r3, r1
 8023bde:	4650      	mov	r0, sl
 8023be0:	4659      	mov	r1, fp
 8023be2:	f7dc fb81 	bl	80002e8 <__aeabi_dsub>
 8023be6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023bea:	f7dc fd35 	bl	8000658 <__aeabi_dmul>
 8023bee:	4622      	mov	r2, r4
 8023bf0:	4606      	mov	r6, r0
 8023bf2:	460f      	mov	r7, r1
 8023bf4:	462b      	mov	r3, r5
 8023bf6:	ec51 0b18 	vmov	r0, r1, d8
 8023bfa:	f7dc fd2d 	bl	8000658 <__aeabi_dmul>
 8023bfe:	4602      	mov	r2, r0
 8023c00:	460b      	mov	r3, r1
 8023c02:	4630      	mov	r0, r6
 8023c04:	4639      	mov	r1, r7
 8023c06:	f7dc fb71 	bl	80002ec <__adddf3>
 8023c0a:	4606      	mov	r6, r0
 8023c0c:	460f      	mov	r7, r1
 8023c0e:	4602      	mov	r2, r0
 8023c10:	460b      	mov	r3, r1
 8023c12:	4640      	mov	r0, r8
 8023c14:	4649      	mov	r1, r9
 8023c16:	f7dc fb69 	bl	80002ec <__adddf3>
 8023c1a:	9c04      	ldr	r4, [sp, #16]
 8023c1c:	a33e      	add	r3, pc, #248	; (adr r3, 8023d18 <__ieee754_pow+0x720>)
 8023c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c22:	4620      	mov	r0, r4
 8023c24:	460d      	mov	r5, r1
 8023c26:	f7dc fd17 	bl	8000658 <__aeabi_dmul>
 8023c2a:	4642      	mov	r2, r8
 8023c2c:	ec41 0b18 	vmov	d8, r0, r1
 8023c30:	464b      	mov	r3, r9
 8023c32:	4620      	mov	r0, r4
 8023c34:	4629      	mov	r1, r5
 8023c36:	f7dc fb57 	bl	80002e8 <__aeabi_dsub>
 8023c3a:	4602      	mov	r2, r0
 8023c3c:	460b      	mov	r3, r1
 8023c3e:	4630      	mov	r0, r6
 8023c40:	4639      	mov	r1, r7
 8023c42:	f7dc fb51 	bl	80002e8 <__aeabi_dsub>
 8023c46:	a336      	add	r3, pc, #216	; (adr r3, 8023d20 <__ieee754_pow+0x728>)
 8023c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c4c:	f7dc fd04 	bl	8000658 <__aeabi_dmul>
 8023c50:	a335      	add	r3, pc, #212	; (adr r3, 8023d28 <__ieee754_pow+0x730>)
 8023c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c56:	4606      	mov	r6, r0
 8023c58:	460f      	mov	r7, r1
 8023c5a:	4620      	mov	r0, r4
 8023c5c:	4629      	mov	r1, r5
 8023c5e:	f7dc fcfb 	bl	8000658 <__aeabi_dmul>
 8023c62:	4602      	mov	r2, r0
 8023c64:	460b      	mov	r3, r1
 8023c66:	4630      	mov	r0, r6
 8023c68:	4639      	mov	r1, r7
 8023c6a:	f7dc fb3f 	bl	80002ec <__adddf3>
 8023c6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023c70:	4b38      	ldr	r3, [pc, #224]	; (8023d54 <__ieee754_pow+0x75c>)
 8023c72:	4413      	add	r3, r2
 8023c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c78:	f7dc fb38 	bl	80002ec <__adddf3>
 8023c7c:	4682      	mov	sl, r0
 8023c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023c80:	468b      	mov	fp, r1
 8023c82:	f7dc fc7f 	bl	8000584 <__aeabi_i2d>
 8023c86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023c88:	4b33      	ldr	r3, [pc, #204]	; (8023d58 <__ieee754_pow+0x760>)
 8023c8a:	4413      	add	r3, r2
 8023c8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023c90:	4606      	mov	r6, r0
 8023c92:	460f      	mov	r7, r1
 8023c94:	4652      	mov	r2, sl
 8023c96:	465b      	mov	r3, fp
 8023c98:	ec51 0b18 	vmov	r0, r1, d8
 8023c9c:	f7dc fb26 	bl	80002ec <__adddf3>
 8023ca0:	4642      	mov	r2, r8
 8023ca2:	464b      	mov	r3, r9
 8023ca4:	f7dc fb22 	bl	80002ec <__adddf3>
 8023ca8:	4632      	mov	r2, r6
 8023caa:	463b      	mov	r3, r7
 8023cac:	f7dc fb1e 	bl	80002ec <__adddf3>
 8023cb0:	9c04      	ldr	r4, [sp, #16]
 8023cb2:	4632      	mov	r2, r6
 8023cb4:	463b      	mov	r3, r7
 8023cb6:	4620      	mov	r0, r4
 8023cb8:	460d      	mov	r5, r1
 8023cba:	f7dc fb15 	bl	80002e8 <__aeabi_dsub>
 8023cbe:	4642      	mov	r2, r8
 8023cc0:	464b      	mov	r3, r9
 8023cc2:	f7dc fb11 	bl	80002e8 <__aeabi_dsub>
 8023cc6:	ec53 2b18 	vmov	r2, r3, d8
 8023cca:	f7dc fb0d 	bl	80002e8 <__aeabi_dsub>
 8023cce:	4602      	mov	r2, r0
 8023cd0:	460b      	mov	r3, r1
 8023cd2:	4650      	mov	r0, sl
 8023cd4:	4659      	mov	r1, fp
 8023cd6:	e606      	b.n	80238e6 <__ieee754_pow+0x2ee>
 8023cd8:	2401      	movs	r4, #1
 8023cda:	e6a0      	b.n	8023a1e <__ieee754_pow+0x426>
 8023cdc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8023d30 <__ieee754_pow+0x738>
 8023ce0:	e60d      	b.n	80238fe <__ieee754_pow+0x306>
 8023ce2:	bf00      	nop
 8023ce4:	f3af 8000 	nop.w
 8023ce8:	4a454eef 	.word	0x4a454eef
 8023cec:	3fca7e28 	.word	0x3fca7e28
 8023cf0:	93c9db65 	.word	0x93c9db65
 8023cf4:	3fcd864a 	.word	0x3fcd864a
 8023cf8:	a91d4101 	.word	0xa91d4101
 8023cfc:	3fd17460 	.word	0x3fd17460
 8023d00:	518f264d 	.word	0x518f264d
 8023d04:	3fd55555 	.word	0x3fd55555
 8023d08:	db6fabff 	.word	0xdb6fabff
 8023d0c:	3fdb6db6 	.word	0x3fdb6db6
 8023d10:	33333303 	.word	0x33333303
 8023d14:	3fe33333 	.word	0x3fe33333
 8023d18:	e0000000 	.word	0xe0000000
 8023d1c:	3feec709 	.word	0x3feec709
 8023d20:	dc3a03fd 	.word	0xdc3a03fd
 8023d24:	3feec709 	.word	0x3feec709
 8023d28:	145b01f5 	.word	0x145b01f5
 8023d2c:	be3e2fe0 	.word	0xbe3e2fe0
 8023d30:	00000000 	.word	0x00000000
 8023d34:	3ff00000 	.word	0x3ff00000
 8023d38:	7ff00000 	.word	0x7ff00000
 8023d3c:	43400000 	.word	0x43400000
 8023d40:	0003988e 	.word	0x0003988e
 8023d44:	000bb679 	.word	0x000bb679
 8023d48:	08029bd0 	.word	0x08029bd0
 8023d4c:	3ff00000 	.word	0x3ff00000
 8023d50:	40080000 	.word	0x40080000
 8023d54:	08029bf0 	.word	0x08029bf0
 8023d58:	08029be0 	.word	0x08029be0
 8023d5c:	a3b5      	add	r3, pc, #724	; (adr r3, 8024034 <__ieee754_pow+0xa3c>)
 8023d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d62:	4640      	mov	r0, r8
 8023d64:	4649      	mov	r1, r9
 8023d66:	f7dc fac1 	bl	80002ec <__adddf3>
 8023d6a:	4622      	mov	r2, r4
 8023d6c:	ec41 0b1a 	vmov	d10, r0, r1
 8023d70:	462b      	mov	r3, r5
 8023d72:	4630      	mov	r0, r6
 8023d74:	4639      	mov	r1, r7
 8023d76:	f7dc fab7 	bl	80002e8 <__aeabi_dsub>
 8023d7a:	4602      	mov	r2, r0
 8023d7c:	460b      	mov	r3, r1
 8023d7e:	ec51 0b1a 	vmov	r0, r1, d10
 8023d82:	f7dc fef9 	bl	8000b78 <__aeabi_dcmpgt>
 8023d86:	2800      	cmp	r0, #0
 8023d88:	f47f adf8 	bne.w	802397c <__ieee754_pow+0x384>
 8023d8c:	4aa4      	ldr	r2, [pc, #656]	; (8024020 <__ieee754_pow+0xa28>)
 8023d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023d92:	4293      	cmp	r3, r2
 8023d94:	f340 810b 	ble.w	8023fae <__ieee754_pow+0x9b6>
 8023d98:	151b      	asrs	r3, r3, #20
 8023d9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023d9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8023da2:	fa4a f303 	asr.w	r3, sl, r3
 8023da6:	445b      	add	r3, fp
 8023da8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023dac:	4e9d      	ldr	r6, [pc, #628]	; (8024024 <__ieee754_pow+0xa2c>)
 8023dae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8023db2:	4116      	asrs	r6, r2
 8023db4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023db8:	2000      	movs	r0, #0
 8023dba:	ea23 0106 	bic.w	r1, r3, r6
 8023dbe:	f1c2 0214 	rsb	r2, r2, #20
 8023dc2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8023dc6:	fa4a fa02 	asr.w	sl, sl, r2
 8023dca:	f1bb 0f00 	cmp.w	fp, #0
 8023dce:	4602      	mov	r2, r0
 8023dd0:	460b      	mov	r3, r1
 8023dd2:	4620      	mov	r0, r4
 8023dd4:	4629      	mov	r1, r5
 8023dd6:	bfb8      	it	lt
 8023dd8:	f1ca 0a00 	rsblt	sl, sl, #0
 8023ddc:	f7dc fa84 	bl	80002e8 <__aeabi_dsub>
 8023de0:	ec41 0b19 	vmov	d9, r0, r1
 8023de4:	4642      	mov	r2, r8
 8023de6:	464b      	mov	r3, r9
 8023de8:	ec51 0b19 	vmov	r0, r1, d9
 8023dec:	f7dc fa7e 	bl	80002ec <__adddf3>
 8023df0:	2400      	movs	r4, #0
 8023df2:	a379      	add	r3, pc, #484	; (adr r3, 8023fd8 <__ieee754_pow+0x9e0>)
 8023df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023df8:	4620      	mov	r0, r4
 8023dfa:	460d      	mov	r5, r1
 8023dfc:	f7dc fc2c 	bl	8000658 <__aeabi_dmul>
 8023e00:	ec53 2b19 	vmov	r2, r3, d9
 8023e04:	4606      	mov	r6, r0
 8023e06:	460f      	mov	r7, r1
 8023e08:	4620      	mov	r0, r4
 8023e0a:	4629      	mov	r1, r5
 8023e0c:	f7dc fa6c 	bl	80002e8 <__aeabi_dsub>
 8023e10:	4602      	mov	r2, r0
 8023e12:	460b      	mov	r3, r1
 8023e14:	4640      	mov	r0, r8
 8023e16:	4649      	mov	r1, r9
 8023e18:	f7dc fa66 	bl	80002e8 <__aeabi_dsub>
 8023e1c:	a370      	add	r3, pc, #448	; (adr r3, 8023fe0 <__ieee754_pow+0x9e8>)
 8023e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e22:	f7dc fc19 	bl	8000658 <__aeabi_dmul>
 8023e26:	a370      	add	r3, pc, #448	; (adr r3, 8023fe8 <__ieee754_pow+0x9f0>)
 8023e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e2c:	4680      	mov	r8, r0
 8023e2e:	4689      	mov	r9, r1
 8023e30:	4620      	mov	r0, r4
 8023e32:	4629      	mov	r1, r5
 8023e34:	f7dc fc10 	bl	8000658 <__aeabi_dmul>
 8023e38:	4602      	mov	r2, r0
 8023e3a:	460b      	mov	r3, r1
 8023e3c:	4640      	mov	r0, r8
 8023e3e:	4649      	mov	r1, r9
 8023e40:	f7dc fa54 	bl	80002ec <__adddf3>
 8023e44:	4604      	mov	r4, r0
 8023e46:	460d      	mov	r5, r1
 8023e48:	4602      	mov	r2, r0
 8023e4a:	460b      	mov	r3, r1
 8023e4c:	4630      	mov	r0, r6
 8023e4e:	4639      	mov	r1, r7
 8023e50:	f7dc fa4c 	bl	80002ec <__adddf3>
 8023e54:	4632      	mov	r2, r6
 8023e56:	463b      	mov	r3, r7
 8023e58:	4680      	mov	r8, r0
 8023e5a:	4689      	mov	r9, r1
 8023e5c:	f7dc fa44 	bl	80002e8 <__aeabi_dsub>
 8023e60:	4602      	mov	r2, r0
 8023e62:	460b      	mov	r3, r1
 8023e64:	4620      	mov	r0, r4
 8023e66:	4629      	mov	r1, r5
 8023e68:	f7dc fa3e 	bl	80002e8 <__aeabi_dsub>
 8023e6c:	4642      	mov	r2, r8
 8023e6e:	4606      	mov	r6, r0
 8023e70:	460f      	mov	r7, r1
 8023e72:	464b      	mov	r3, r9
 8023e74:	4640      	mov	r0, r8
 8023e76:	4649      	mov	r1, r9
 8023e78:	f7dc fbee 	bl	8000658 <__aeabi_dmul>
 8023e7c:	a35c      	add	r3, pc, #368	; (adr r3, 8023ff0 <__ieee754_pow+0x9f8>)
 8023e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e82:	4604      	mov	r4, r0
 8023e84:	460d      	mov	r5, r1
 8023e86:	f7dc fbe7 	bl	8000658 <__aeabi_dmul>
 8023e8a:	a35b      	add	r3, pc, #364	; (adr r3, 8023ff8 <__ieee754_pow+0xa00>)
 8023e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e90:	f7dc fa2a 	bl	80002e8 <__aeabi_dsub>
 8023e94:	4622      	mov	r2, r4
 8023e96:	462b      	mov	r3, r5
 8023e98:	f7dc fbde 	bl	8000658 <__aeabi_dmul>
 8023e9c:	a358      	add	r3, pc, #352	; (adr r3, 8024000 <__ieee754_pow+0xa08>)
 8023e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ea2:	f7dc fa23 	bl	80002ec <__adddf3>
 8023ea6:	4622      	mov	r2, r4
 8023ea8:	462b      	mov	r3, r5
 8023eaa:	f7dc fbd5 	bl	8000658 <__aeabi_dmul>
 8023eae:	a356      	add	r3, pc, #344	; (adr r3, 8024008 <__ieee754_pow+0xa10>)
 8023eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eb4:	f7dc fa18 	bl	80002e8 <__aeabi_dsub>
 8023eb8:	4622      	mov	r2, r4
 8023eba:	462b      	mov	r3, r5
 8023ebc:	f7dc fbcc 	bl	8000658 <__aeabi_dmul>
 8023ec0:	a353      	add	r3, pc, #332	; (adr r3, 8024010 <__ieee754_pow+0xa18>)
 8023ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ec6:	f7dc fa11 	bl	80002ec <__adddf3>
 8023eca:	4622      	mov	r2, r4
 8023ecc:	462b      	mov	r3, r5
 8023ece:	f7dc fbc3 	bl	8000658 <__aeabi_dmul>
 8023ed2:	4602      	mov	r2, r0
 8023ed4:	460b      	mov	r3, r1
 8023ed6:	4640      	mov	r0, r8
 8023ed8:	4649      	mov	r1, r9
 8023eda:	f7dc fa05 	bl	80002e8 <__aeabi_dsub>
 8023ede:	4604      	mov	r4, r0
 8023ee0:	460d      	mov	r5, r1
 8023ee2:	4602      	mov	r2, r0
 8023ee4:	460b      	mov	r3, r1
 8023ee6:	4640      	mov	r0, r8
 8023ee8:	4649      	mov	r1, r9
 8023eea:	f7dc fbb5 	bl	8000658 <__aeabi_dmul>
 8023eee:	2200      	movs	r2, #0
 8023ef0:	ec41 0b19 	vmov	d9, r0, r1
 8023ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023ef8:	4620      	mov	r0, r4
 8023efa:	4629      	mov	r1, r5
 8023efc:	f7dc f9f4 	bl	80002e8 <__aeabi_dsub>
 8023f00:	4602      	mov	r2, r0
 8023f02:	460b      	mov	r3, r1
 8023f04:	ec51 0b19 	vmov	r0, r1, d9
 8023f08:	f7dc fcd0 	bl	80008ac <__aeabi_ddiv>
 8023f0c:	4632      	mov	r2, r6
 8023f0e:	4604      	mov	r4, r0
 8023f10:	460d      	mov	r5, r1
 8023f12:	463b      	mov	r3, r7
 8023f14:	4640      	mov	r0, r8
 8023f16:	4649      	mov	r1, r9
 8023f18:	f7dc fb9e 	bl	8000658 <__aeabi_dmul>
 8023f1c:	4632      	mov	r2, r6
 8023f1e:	463b      	mov	r3, r7
 8023f20:	f7dc f9e4 	bl	80002ec <__adddf3>
 8023f24:	4602      	mov	r2, r0
 8023f26:	460b      	mov	r3, r1
 8023f28:	4620      	mov	r0, r4
 8023f2a:	4629      	mov	r1, r5
 8023f2c:	f7dc f9dc 	bl	80002e8 <__aeabi_dsub>
 8023f30:	4642      	mov	r2, r8
 8023f32:	464b      	mov	r3, r9
 8023f34:	f7dc f9d8 	bl	80002e8 <__aeabi_dsub>
 8023f38:	460b      	mov	r3, r1
 8023f3a:	4602      	mov	r2, r0
 8023f3c:	493a      	ldr	r1, [pc, #232]	; (8024028 <__ieee754_pow+0xa30>)
 8023f3e:	2000      	movs	r0, #0
 8023f40:	f7dc f9d2 	bl	80002e8 <__aeabi_dsub>
 8023f44:	e9cd 0100 	strd	r0, r1, [sp]
 8023f48:	9b01      	ldr	r3, [sp, #4]
 8023f4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8023f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023f52:	da2f      	bge.n	8023fb4 <__ieee754_pow+0x9bc>
 8023f54:	4650      	mov	r0, sl
 8023f56:	ed9d 0b00 	vldr	d0, [sp]
 8023f5a:	f000 f9cd 	bl	80242f8 <scalbn>
 8023f5e:	ec51 0b10 	vmov	r0, r1, d0
 8023f62:	ec53 2b18 	vmov	r2, r3, d8
 8023f66:	f7ff bbe0 	b.w	802372a <__ieee754_pow+0x132>
 8023f6a:	4b30      	ldr	r3, [pc, #192]	; (802402c <__ieee754_pow+0xa34>)
 8023f6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023f70:	429e      	cmp	r6, r3
 8023f72:	f77f af0b 	ble.w	8023d8c <__ieee754_pow+0x794>
 8023f76:	4b2e      	ldr	r3, [pc, #184]	; (8024030 <__ieee754_pow+0xa38>)
 8023f78:	440b      	add	r3, r1
 8023f7a:	4303      	orrs	r3, r0
 8023f7c:	d00b      	beq.n	8023f96 <__ieee754_pow+0x99e>
 8023f7e:	a326      	add	r3, pc, #152	; (adr r3, 8024018 <__ieee754_pow+0xa20>)
 8023f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f84:	ec51 0b18 	vmov	r0, r1, d8
 8023f88:	f7dc fb66 	bl	8000658 <__aeabi_dmul>
 8023f8c:	a322      	add	r3, pc, #136	; (adr r3, 8024018 <__ieee754_pow+0xa20>)
 8023f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f92:	f7ff bbca 	b.w	802372a <__ieee754_pow+0x132>
 8023f96:	4622      	mov	r2, r4
 8023f98:	462b      	mov	r3, r5
 8023f9a:	f7dc f9a5 	bl	80002e8 <__aeabi_dsub>
 8023f9e:	4642      	mov	r2, r8
 8023fa0:	464b      	mov	r3, r9
 8023fa2:	f7dc fddf 	bl	8000b64 <__aeabi_dcmpge>
 8023fa6:	2800      	cmp	r0, #0
 8023fa8:	f43f aef0 	beq.w	8023d8c <__ieee754_pow+0x794>
 8023fac:	e7e7      	b.n	8023f7e <__ieee754_pow+0x986>
 8023fae:	f04f 0a00 	mov.w	sl, #0
 8023fb2:	e717      	b.n	8023de4 <__ieee754_pow+0x7ec>
 8023fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023fb8:	4619      	mov	r1, r3
 8023fba:	e7d2      	b.n	8023f62 <__ieee754_pow+0x96a>
 8023fbc:	491a      	ldr	r1, [pc, #104]	; (8024028 <__ieee754_pow+0xa30>)
 8023fbe:	2000      	movs	r0, #0
 8023fc0:	f7ff bb9e 	b.w	8023700 <__ieee754_pow+0x108>
 8023fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023fc8:	f7ff bb9a 	b.w	8023700 <__ieee754_pow+0x108>
 8023fcc:	9000      	str	r0, [sp, #0]
 8023fce:	f7ff bb76 	b.w	80236be <__ieee754_pow+0xc6>
 8023fd2:	2100      	movs	r1, #0
 8023fd4:	f7ff bb60 	b.w	8023698 <__ieee754_pow+0xa0>
 8023fd8:	00000000 	.word	0x00000000
 8023fdc:	3fe62e43 	.word	0x3fe62e43
 8023fe0:	fefa39ef 	.word	0xfefa39ef
 8023fe4:	3fe62e42 	.word	0x3fe62e42
 8023fe8:	0ca86c39 	.word	0x0ca86c39
 8023fec:	be205c61 	.word	0xbe205c61
 8023ff0:	72bea4d0 	.word	0x72bea4d0
 8023ff4:	3e663769 	.word	0x3e663769
 8023ff8:	c5d26bf1 	.word	0xc5d26bf1
 8023ffc:	3ebbbd41 	.word	0x3ebbbd41
 8024000:	af25de2c 	.word	0xaf25de2c
 8024004:	3f11566a 	.word	0x3f11566a
 8024008:	16bebd93 	.word	0x16bebd93
 802400c:	3f66c16c 	.word	0x3f66c16c
 8024010:	5555553e 	.word	0x5555553e
 8024014:	3fc55555 	.word	0x3fc55555
 8024018:	c2f8f359 	.word	0xc2f8f359
 802401c:	01a56e1f 	.word	0x01a56e1f
 8024020:	3fe00000 	.word	0x3fe00000
 8024024:	000fffff 	.word	0x000fffff
 8024028:	3ff00000 	.word	0x3ff00000
 802402c:	4090cbff 	.word	0x4090cbff
 8024030:	3f6f3400 	.word	0x3f6f3400
 8024034:	652b82fe 	.word	0x652b82fe
 8024038:	3c971547 	.word	0x3c971547

0802403c <__ieee754_sqrt>:
 802403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024040:	ec55 4b10 	vmov	r4, r5, d0
 8024044:	4e56      	ldr	r6, [pc, #344]	; (80241a0 <__ieee754_sqrt+0x164>)
 8024046:	43ae      	bics	r6, r5
 8024048:	ee10 0a10 	vmov	r0, s0
 802404c:	ee10 3a10 	vmov	r3, s0
 8024050:	4629      	mov	r1, r5
 8024052:	462a      	mov	r2, r5
 8024054:	d110      	bne.n	8024078 <__ieee754_sqrt+0x3c>
 8024056:	ee10 2a10 	vmov	r2, s0
 802405a:	462b      	mov	r3, r5
 802405c:	f7dc fafc 	bl	8000658 <__aeabi_dmul>
 8024060:	4602      	mov	r2, r0
 8024062:	460b      	mov	r3, r1
 8024064:	4620      	mov	r0, r4
 8024066:	4629      	mov	r1, r5
 8024068:	f7dc f940 	bl	80002ec <__adddf3>
 802406c:	4604      	mov	r4, r0
 802406e:	460d      	mov	r5, r1
 8024070:	ec45 4b10 	vmov	d0, r4, r5
 8024074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024078:	2d00      	cmp	r5, #0
 802407a:	dc10      	bgt.n	802409e <__ieee754_sqrt+0x62>
 802407c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8024080:	4330      	orrs	r0, r6
 8024082:	d0f5      	beq.n	8024070 <__ieee754_sqrt+0x34>
 8024084:	b15d      	cbz	r5, 802409e <__ieee754_sqrt+0x62>
 8024086:	ee10 2a10 	vmov	r2, s0
 802408a:	462b      	mov	r3, r5
 802408c:	ee10 0a10 	vmov	r0, s0
 8024090:	f7dc f92a 	bl	80002e8 <__aeabi_dsub>
 8024094:	4602      	mov	r2, r0
 8024096:	460b      	mov	r3, r1
 8024098:	f7dc fc08 	bl	80008ac <__aeabi_ddiv>
 802409c:	e7e6      	b.n	802406c <__ieee754_sqrt+0x30>
 802409e:	1509      	asrs	r1, r1, #20
 80240a0:	d076      	beq.n	8024190 <__ieee754_sqrt+0x154>
 80240a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80240a6:	07ce      	lsls	r6, r1, #31
 80240a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80240ac:	bf5e      	ittt	pl
 80240ae:	0fda      	lsrpl	r2, r3, #31
 80240b0:	005b      	lslpl	r3, r3, #1
 80240b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80240b6:	0fda      	lsrs	r2, r3, #31
 80240b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80240bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80240c0:	2000      	movs	r0, #0
 80240c2:	106d      	asrs	r5, r5, #1
 80240c4:	005b      	lsls	r3, r3, #1
 80240c6:	f04f 0e16 	mov.w	lr, #22
 80240ca:	4684      	mov	ip, r0
 80240cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80240d0:	eb0c 0401 	add.w	r4, ip, r1
 80240d4:	4294      	cmp	r4, r2
 80240d6:	bfde      	ittt	le
 80240d8:	1b12      	suble	r2, r2, r4
 80240da:	eb04 0c01 	addle.w	ip, r4, r1
 80240de:	1840      	addle	r0, r0, r1
 80240e0:	0052      	lsls	r2, r2, #1
 80240e2:	f1be 0e01 	subs.w	lr, lr, #1
 80240e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80240ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80240ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80240f2:	d1ed      	bne.n	80240d0 <__ieee754_sqrt+0x94>
 80240f4:	4671      	mov	r1, lr
 80240f6:	2720      	movs	r7, #32
 80240f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80240fc:	4562      	cmp	r2, ip
 80240fe:	eb04 060e 	add.w	r6, r4, lr
 8024102:	dc02      	bgt.n	802410a <__ieee754_sqrt+0xce>
 8024104:	d113      	bne.n	802412e <__ieee754_sqrt+0xf2>
 8024106:	429e      	cmp	r6, r3
 8024108:	d811      	bhi.n	802412e <__ieee754_sqrt+0xf2>
 802410a:	2e00      	cmp	r6, #0
 802410c:	eb06 0e04 	add.w	lr, r6, r4
 8024110:	da43      	bge.n	802419a <__ieee754_sqrt+0x15e>
 8024112:	f1be 0f00 	cmp.w	lr, #0
 8024116:	db40      	blt.n	802419a <__ieee754_sqrt+0x15e>
 8024118:	f10c 0801 	add.w	r8, ip, #1
 802411c:	eba2 020c 	sub.w	r2, r2, ip
 8024120:	429e      	cmp	r6, r3
 8024122:	bf88      	it	hi
 8024124:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8024128:	1b9b      	subs	r3, r3, r6
 802412a:	4421      	add	r1, r4
 802412c:	46c4      	mov	ip, r8
 802412e:	0052      	lsls	r2, r2, #1
 8024130:	3f01      	subs	r7, #1
 8024132:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8024136:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802413a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802413e:	d1dd      	bne.n	80240fc <__ieee754_sqrt+0xc0>
 8024140:	4313      	orrs	r3, r2
 8024142:	d006      	beq.n	8024152 <__ieee754_sqrt+0x116>
 8024144:	1c4c      	adds	r4, r1, #1
 8024146:	bf13      	iteet	ne
 8024148:	3101      	addne	r1, #1
 802414a:	3001      	addeq	r0, #1
 802414c:	4639      	moveq	r1, r7
 802414e:	f021 0101 	bicne.w	r1, r1, #1
 8024152:	1043      	asrs	r3, r0, #1
 8024154:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8024158:	0849      	lsrs	r1, r1, #1
 802415a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802415e:	07c2      	lsls	r2, r0, #31
 8024160:	bf48      	it	mi
 8024162:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8024166:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 802416a:	460c      	mov	r4, r1
 802416c:	463d      	mov	r5, r7
 802416e:	e77f      	b.n	8024070 <__ieee754_sqrt+0x34>
 8024170:	0ada      	lsrs	r2, r3, #11
 8024172:	3815      	subs	r0, #21
 8024174:	055b      	lsls	r3, r3, #21
 8024176:	2a00      	cmp	r2, #0
 8024178:	d0fa      	beq.n	8024170 <__ieee754_sqrt+0x134>
 802417a:	02d7      	lsls	r7, r2, #11
 802417c:	d50a      	bpl.n	8024194 <__ieee754_sqrt+0x158>
 802417e:	f1c1 0420 	rsb	r4, r1, #32
 8024182:	fa23 f404 	lsr.w	r4, r3, r4
 8024186:	1e4d      	subs	r5, r1, #1
 8024188:	408b      	lsls	r3, r1
 802418a:	4322      	orrs	r2, r4
 802418c:	1b41      	subs	r1, r0, r5
 802418e:	e788      	b.n	80240a2 <__ieee754_sqrt+0x66>
 8024190:	4608      	mov	r0, r1
 8024192:	e7f0      	b.n	8024176 <__ieee754_sqrt+0x13a>
 8024194:	0052      	lsls	r2, r2, #1
 8024196:	3101      	adds	r1, #1
 8024198:	e7ef      	b.n	802417a <__ieee754_sqrt+0x13e>
 802419a:	46e0      	mov	r8, ip
 802419c:	e7be      	b.n	802411c <__ieee754_sqrt+0xe0>
 802419e:	bf00      	nop
 80241a0:	7ff00000 	.word	0x7ff00000

080241a4 <fabs>:
 80241a4:	ec51 0b10 	vmov	r0, r1, d0
 80241a8:	ee10 2a10 	vmov	r2, s0
 80241ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80241b0:	ec43 2b10 	vmov	d0, r2, r3
 80241b4:	4770      	bx	lr

080241b6 <finite>:
 80241b6:	b082      	sub	sp, #8
 80241b8:	ed8d 0b00 	vstr	d0, [sp]
 80241bc:	9801      	ldr	r0, [sp, #4]
 80241be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80241c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80241c6:	0fc0      	lsrs	r0, r0, #31
 80241c8:	b002      	add	sp, #8
 80241ca:	4770      	bx	lr
 80241cc:	0000      	movs	r0, r0
	...

080241d0 <nan>:
 80241d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80241d8 <nan+0x8>
 80241d4:	4770      	bx	lr
 80241d6:	bf00      	nop
 80241d8:	00000000 	.word	0x00000000
 80241dc:	7ff80000 	.word	0x7ff80000

080241e0 <rint>:
 80241e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80241e2:	ec51 0b10 	vmov	r0, r1, d0
 80241e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80241ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80241ee:	2e13      	cmp	r6, #19
 80241f0:	ee10 4a10 	vmov	r4, s0
 80241f4:	460b      	mov	r3, r1
 80241f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80241fa:	dc58      	bgt.n	80242ae <rint+0xce>
 80241fc:	2e00      	cmp	r6, #0
 80241fe:	da2b      	bge.n	8024258 <rint+0x78>
 8024200:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024204:	4302      	orrs	r2, r0
 8024206:	d023      	beq.n	8024250 <rint+0x70>
 8024208:	f3c1 0213 	ubfx	r2, r1, #0, #20
 802420c:	4302      	orrs	r2, r0
 802420e:	4254      	negs	r4, r2
 8024210:	4314      	orrs	r4, r2
 8024212:	0c4b      	lsrs	r3, r1, #17
 8024214:	0b24      	lsrs	r4, r4, #12
 8024216:	045b      	lsls	r3, r3, #17
 8024218:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 802421c:	ea44 0103 	orr.w	r1, r4, r3
 8024220:	4b32      	ldr	r3, [pc, #200]	; (80242ec <rint+0x10c>)
 8024222:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024226:	e9d3 6700 	ldrd	r6, r7, [r3]
 802422a:	4602      	mov	r2, r0
 802422c:	460b      	mov	r3, r1
 802422e:	4630      	mov	r0, r6
 8024230:	4639      	mov	r1, r7
 8024232:	f7dc f85b 	bl	80002ec <__adddf3>
 8024236:	e9cd 0100 	strd	r0, r1, [sp]
 802423a:	463b      	mov	r3, r7
 802423c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024240:	4632      	mov	r2, r6
 8024242:	f7dc f851 	bl	80002e8 <__aeabi_dsub>
 8024246:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802424a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 802424e:	4639      	mov	r1, r7
 8024250:	ec41 0b10 	vmov	d0, r0, r1
 8024254:	b003      	add	sp, #12
 8024256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024258:	4a25      	ldr	r2, [pc, #148]	; (80242f0 <rint+0x110>)
 802425a:	4132      	asrs	r2, r6
 802425c:	ea01 0702 	and.w	r7, r1, r2
 8024260:	4307      	orrs	r7, r0
 8024262:	d0f5      	beq.n	8024250 <rint+0x70>
 8024264:	0851      	lsrs	r1, r2, #1
 8024266:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 802426a:	4314      	orrs	r4, r2
 802426c:	d00c      	beq.n	8024288 <rint+0xa8>
 802426e:	ea23 0201 	bic.w	r2, r3, r1
 8024272:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024276:	2e13      	cmp	r6, #19
 8024278:	fa43 f606 	asr.w	r6, r3, r6
 802427c:	bf0c      	ite	eq
 802427e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8024282:	2400      	movne	r4, #0
 8024284:	ea42 0306 	orr.w	r3, r2, r6
 8024288:	4918      	ldr	r1, [pc, #96]	; (80242ec <rint+0x10c>)
 802428a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 802428e:	4622      	mov	r2, r4
 8024290:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024294:	4620      	mov	r0, r4
 8024296:	4629      	mov	r1, r5
 8024298:	f7dc f828 	bl	80002ec <__adddf3>
 802429c:	e9cd 0100 	strd	r0, r1, [sp]
 80242a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80242a4:	4622      	mov	r2, r4
 80242a6:	462b      	mov	r3, r5
 80242a8:	f7dc f81e 	bl	80002e8 <__aeabi_dsub>
 80242ac:	e7d0      	b.n	8024250 <rint+0x70>
 80242ae:	2e33      	cmp	r6, #51	; 0x33
 80242b0:	dd07      	ble.n	80242c2 <rint+0xe2>
 80242b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80242b6:	d1cb      	bne.n	8024250 <rint+0x70>
 80242b8:	ee10 2a10 	vmov	r2, s0
 80242bc:	f7dc f816 	bl	80002ec <__adddf3>
 80242c0:	e7c6      	b.n	8024250 <rint+0x70>
 80242c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80242c6:	f04f 36ff 	mov.w	r6, #4294967295
 80242ca:	40d6      	lsrs	r6, r2
 80242cc:	4230      	tst	r0, r6
 80242ce:	d0bf      	beq.n	8024250 <rint+0x70>
 80242d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80242d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80242d8:	bf1f      	itttt	ne
 80242da:	ea24 0101 	bicne.w	r1, r4, r1
 80242de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80242e2:	fa44 f202 	asrne.w	r2, r4, r2
 80242e6:	ea41 0402 	orrne.w	r4, r1, r2
 80242ea:	e7cd      	b.n	8024288 <rint+0xa8>
 80242ec:	08029c00 	.word	0x08029c00
 80242f0:	000fffff 	.word	0x000fffff
 80242f4:	00000000 	.word	0x00000000

080242f8 <scalbn>:
 80242f8:	b570      	push	{r4, r5, r6, lr}
 80242fa:	ec55 4b10 	vmov	r4, r5, d0
 80242fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024302:	4606      	mov	r6, r0
 8024304:	462b      	mov	r3, r5
 8024306:	b99a      	cbnz	r2, 8024330 <scalbn+0x38>
 8024308:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802430c:	4323      	orrs	r3, r4
 802430e:	d036      	beq.n	802437e <scalbn+0x86>
 8024310:	4b39      	ldr	r3, [pc, #228]	; (80243f8 <scalbn+0x100>)
 8024312:	4629      	mov	r1, r5
 8024314:	ee10 0a10 	vmov	r0, s0
 8024318:	2200      	movs	r2, #0
 802431a:	f7dc f99d 	bl	8000658 <__aeabi_dmul>
 802431e:	4b37      	ldr	r3, [pc, #220]	; (80243fc <scalbn+0x104>)
 8024320:	429e      	cmp	r6, r3
 8024322:	4604      	mov	r4, r0
 8024324:	460d      	mov	r5, r1
 8024326:	da10      	bge.n	802434a <scalbn+0x52>
 8024328:	a32b      	add	r3, pc, #172	; (adr r3, 80243d8 <scalbn+0xe0>)
 802432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802432e:	e03a      	b.n	80243a6 <scalbn+0xae>
 8024330:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024334:	428a      	cmp	r2, r1
 8024336:	d10c      	bne.n	8024352 <scalbn+0x5a>
 8024338:	ee10 2a10 	vmov	r2, s0
 802433c:	4620      	mov	r0, r4
 802433e:	4629      	mov	r1, r5
 8024340:	f7db ffd4 	bl	80002ec <__adddf3>
 8024344:	4604      	mov	r4, r0
 8024346:	460d      	mov	r5, r1
 8024348:	e019      	b.n	802437e <scalbn+0x86>
 802434a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802434e:	460b      	mov	r3, r1
 8024350:	3a36      	subs	r2, #54	; 0x36
 8024352:	4432      	add	r2, r6
 8024354:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024358:	428a      	cmp	r2, r1
 802435a:	dd08      	ble.n	802436e <scalbn+0x76>
 802435c:	2d00      	cmp	r5, #0
 802435e:	a120      	add	r1, pc, #128	; (adr r1, 80243e0 <scalbn+0xe8>)
 8024360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024364:	da1c      	bge.n	80243a0 <scalbn+0xa8>
 8024366:	a120      	add	r1, pc, #128	; (adr r1, 80243e8 <scalbn+0xf0>)
 8024368:	e9d1 0100 	ldrd	r0, r1, [r1]
 802436c:	e018      	b.n	80243a0 <scalbn+0xa8>
 802436e:	2a00      	cmp	r2, #0
 8024370:	dd08      	ble.n	8024384 <scalbn+0x8c>
 8024372:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024376:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802437a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802437e:	ec45 4b10 	vmov	d0, r4, r5
 8024382:	bd70      	pop	{r4, r5, r6, pc}
 8024384:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024388:	da19      	bge.n	80243be <scalbn+0xc6>
 802438a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802438e:	429e      	cmp	r6, r3
 8024390:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024394:	dd0a      	ble.n	80243ac <scalbn+0xb4>
 8024396:	a112      	add	r1, pc, #72	; (adr r1, 80243e0 <scalbn+0xe8>)
 8024398:	e9d1 0100 	ldrd	r0, r1, [r1]
 802439c:	2b00      	cmp	r3, #0
 802439e:	d1e2      	bne.n	8024366 <scalbn+0x6e>
 80243a0:	a30f      	add	r3, pc, #60	; (adr r3, 80243e0 <scalbn+0xe8>)
 80243a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243a6:	f7dc f957 	bl	8000658 <__aeabi_dmul>
 80243aa:	e7cb      	b.n	8024344 <scalbn+0x4c>
 80243ac:	a10a      	add	r1, pc, #40	; (adr r1, 80243d8 <scalbn+0xe0>)
 80243ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d0b8      	beq.n	8024328 <scalbn+0x30>
 80243b6:	a10e      	add	r1, pc, #56	; (adr r1, 80243f0 <scalbn+0xf8>)
 80243b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80243bc:	e7b4      	b.n	8024328 <scalbn+0x30>
 80243be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80243c2:	3236      	adds	r2, #54	; 0x36
 80243c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80243c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80243cc:	4620      	mov	r0, r4
 80243ce:	4b0c      	ldr	r3, [pc, #48]	; (8024400 <scalbn+0x108>)
 80243d0:	2200      	movs	r2, #0
 80243d2:	e7e8      	b.n	80243a6 <scalbn+0xae>
 80243d4:	f3af 8000 	nop.w
 80243d8:	c2f8f359 	.word	0xc2f8f359
 80243dc:	01a56e1f 	.word	0x01a56e1f
 80243e0:	8800759c 	.word	0x8800759c
 80243e4:	7e37e43c 	.word	0x7e37e43c
 80243e8:	8800759c 	.word	0x8800759c
 80243ec:	fe37e43c 	.word	0xfe37e43c
 80243f0:	c2f8f359 	.word	0xc2f8f359
 80243f4:	81a56e1f 	.word	0x81a56e1f
 80243f8:	43500000 	.word	0x43500000
 80243fc:	ffff3cb0 	.word	0xffff3cb0
 8024400:	3c900000 	.word	0x3c900000

08024404 <_init>:
 8024404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024406:	bf00      	nop
 8024408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802440a:	bc08      	pop	{r3}
 802440c:	469e      	mov	lr, r3
 802440e:	4770      	bx	lr

08024410 <_fini>:
 8024410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024412:	bf00      	nop
 8024414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024416:	bc08      	pop	{r3}
 8024418:	469e      	mov	lr, r3
 802441a:	4770      	bx	lr
